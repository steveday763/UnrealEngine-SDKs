Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x2dffaf591ad02e 0x7e841d2d20

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidJavaSurfaceViewDevices.Object
	JavaSurfaceViewDevice[] SurfaceViewDevices;//[Offset: 0x28, Size: 0x10] 0x7e841b7180

--------------------------------
Class: JavaSurfaceViewDevice
	FString Manufacturer;//[Offset: 0x0, Size: 0x10] 0x7e841e6980
	FString Model;//[Offset: 0x10, Size: 0x10] 0x7e841e6900

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object
	ProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0x10] 0x7e841b7220

--------------------------------
Class: ProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0x10] 0x7e841e2a80
	ProfileMatchItem[] Match;//[Offset: 0x10, Size: 0x10] 0x7e841b72c0

--------------------------------
Class: ProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1] 0x7e841e6d00
	byte CompareType;//[Offset: 0x1, Size: 0x1] 0x7e841e6c00
	FString MatchString;//[Offset: 0x8, Size: 0x10] 0x7e841e6b80

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: SlateThemeManager.Object
	Guid CurrentThemeId;//[Offset: 0x28, Size: 0x10] 0x7e61854b00
	StyleColorList ActiveColors;//[Offset: 0x38, Size: 0x988] 0x7e61854b80

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4] 0x7e8412c200
	int B;//[Offset: 0x4, Size: 0x4] 0x7e8412c180
	int C;//[Offset: 0x8, Size: 0x4] 0x7e8412c100
	int D;//[Offset: 0xc, Size: 0x4] 0x7e8412c080

--------------------------------
Class: StyleColorList
	LinearColor StyleColors;//[Offset: 0x0, Size: 0x10] 0x7e61572680

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4] 0x7e841e2000
	float G;//[Offset: 0x4, Size: 0x4] 0x7e841e1f80
	float B;//[Offset: 0x8, Size: 0x4] 0x7e841e1f00
	float A;//[Offset: 0xc, Size: 0x4] 0x7e841e1e80

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastSparseDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: PropertyWrapper.Object

--------------------------------
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: ActiveSoundUpdateInterface.Interface.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30] 0x7e615ce500
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7e615ce580
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7e615ce600
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1] 0x7e615ce680
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1] 0x7e615ce700
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1] 0x7e615cc680
	bool bCallPreReplication;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1] 0x7e615cc700
	bool bCallPreReplicationForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1] 0x7e615cc780
	bool bHidden;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x7e615cc800
	bool bTearOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x7e615cc880
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x7e615cc900
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x7e615cc980
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1] 0x7e615cca00
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1] 0x7e615cca80
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1] 0x7e615ccb00
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1] 0x7e615ccb80
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1] 0x7e615ccc00
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1] 0x7e615ccc80
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1] 0x7e615ccd00
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1] 0x7e615ccd80
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1] 0x7e615cce00
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1] 0x7e615cce80
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1] 0x7e615ccf00
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1] 0x7e615ccf80
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1] 0x7e615cd000
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x7e615cd080
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x7e615cd100
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x7e615cd180
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 0x1] 0x7e615cd200
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1] 0x7e615cd280
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 0x1] 0x7e615cd300
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5c, Size: 0x1] 0x7e615cd380
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5c, Size: 0x1] 0x7e615cd400
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1] 0x7e84e534e0
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5f, Size: 0x1] 0x7e84e53580
	byte RemoteRole;//[Offset: 0x60, Size: 0x1] 0x7e615cd580
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 0x68] 0x7e615cb980
	float InitialLifeSpan;//[Offset: 0xd0, Size: 0x4] 0x7e615cba00
	float CustomTimeDilation;//[Offset: 0xd4, Size: 0x4] 0x7e615cba80
	RepAttachment AttachmentReplication;//[Offset: 0xe0, Size: 0x60] 0x7e615cbe00
	Actor* Owner;//[Offset: 0x140, Size: 0x8] 0x7e615cbe80
	FName NetDriverName;//[Offset: 0x148, Size: 0x8] 0x7e615cbf00
	byte Role;//[Offset: 0x150, Size: 0x1] 0x7e615cbf80
	byte NetDormancy;//[Offset: 0x151, Size: 0x1] 0x7e615cc000
	enum SpawnCollisionHandlingMethod;//[Offset: 0x152, Size: 0x1] 0x7e84e53800
	byte AutoReceiveInput;//[Offset: 0x153, Size: 0x1] 0x7e615cc100
	int InputPriority;//[Offset: 0x154, Size: 0x4] 0x7e615cc180
	InputComponent* InputComponent;//[Offset: 0x158, Size: 0x8] 0x7e615cc200
	float NetCullDistanceSquared;//[Offset: 0x160, Size: 0x4] 0x7e615cc280
	int NetTag;//[Offset: 0x164, Size: 0x4] 0x7e615cc300
	float NetUpdateFrequency;//[Offset: 0x168, Size: 0x4] 0x7e615cc380
	float MinNetUpdateFrequency;//[Offset: 0x16c, Size: 0x4] 0x7e615cc400
	float NetPriority;//[Offset: 0x170, Size: 0x4] 0x7e615cc480
	Pawn* Instigator;//[Offset: 0x178, Size: 0x8] 0x7e615cc500
	Actor*[] Children;//[Offset: 0x180, Size: 0x10] 0x7e84e538a0
	SceneComponent* RootComponent;//[Offset: 0x190, Size: 0x8] 0x7e615cc600
	int RayTracingGroupId;//[Offset: 0x1a0, Size: 0x4] 0x7e615ca580
	FName[] Layers;//[Offset: 0x1a8, Size: 0x10] 0x7e84e53940
	ChildActorComponent* ParentComponent;//[Offset: 0x1b8, Size: 0x8] 0x7e615ca680
	FName[] Tags;//[Offset: 0x1c8, Size: 0x10] 0x7e84e539e0
	delegate OnTakeAnyDamage;//[Offset: 0x1d8, Size: 0x1] 0x7e615ca780
	delegate OnTakePointDamage;//[Offset: 0x1d9, Size: 0x1] 0x7e615ca800
	delegate OnTakeRadialDamage;//[Offset: 0x1da, Size: 0x1] 0x7e615ca880
	delegate OnActorBeginOverlap;//[Offset: 0x1db, Size: 0x1] 0x7e615ca900
	delegate OnActorEndOverlap;//[Offset: 0x1dc, Size: 0x1] 0x7e615ca980
	delegate OnBeginCursorOver;//[Offset: 0x1dd, Size: 0x1] 0x7e615caa00
	delegate OnEndCursorOver;//[Offset: 0x1de, Size: 0x1] 0x7e615caa80
	delegate OnClicked;//[Offset: 0x1df, Size: 0x1] 0x7e615cab00
	delegate OnReleased;//[Offset: 0x1e0, Size: 0x1] 0x7e615cab80
	delegate OnInputTouchBegin;//[Offset: 0x1e1, Size: 0x1] 0x7e615cac00
	delegate OnInputTouchEnd;//[Offset: 0x1e2, Size: 0x1] 0x7e615cac80
	delegate OnInputTouchEnter;//[Offset: 0x1e3, Size: 0x1] 0x7e615cad00
	delegate OnInputTouchLeave;//[Offset: 0x1e4, Size: 0x1] 0x7e615cad80
	delegate OnActorHit;//[Offset: 0x1e5, Size: 0x1] 0x7e615cae00
	delegate OnDestroyed;//[Offset: 0x1e6, Size: 0x1] 0x7e615cae80
	delegate OnEndPlay;//[Offset: 0x1e7, Size: 0x1] 0x7e615caf00
	ActorComponent*[] InstanceComponents;//[Offset: 0x248, Size: 0x10] 0x7e84e53a80
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x258, Size: 0x10] 0x7e84e53b20
	bool WasRecentlyRendered(float Tolerance);// 0x1a4858ebd041 0x7e614b7e80
	void UserConstructionScript();// 0x1a4758ebd041 0x7e614b7f60
	void TearOff();// 0x1a4658ebd041 0x7e614b8040
	void SetTickGroup(byte NewTickGroup);// 0x1a4558ebd041 0x7e614b8120
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x1a4458ebd041 0x7e614b8200
	void SetReplicates(bool bInReplicates);// 0x1a4358ebd041 0x7e614b82e0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x1a4258ebd041 0x7e614b83c0
	void SetRayTracingGroupId(int InRaytracingGroupId);// 0x1a4158ebd041 0x7e614b84a0
	void SetOwner(Actor* NewOwner);// 0x1a4058ebd041 0x7e614b8580
	void SetNetDormancy(byte NewDormancy);// 0x1a3f58ebd041 0x7e614b8660
	void SetLifeSpan(float InLifespan);// 0x1a3e58ebd041 0x7e614b8740
	void SetAutoDestroyWhenFinished(bool bVal);// 0x1a3d58ebd041 0x7e614b8820
	void SetActorTickInterval(float TickInterval);// 0x1a3c58ebd041 0x7e614b8900
	void SetActorTickEnabled(bool bEnabled);// 0x1a3b58ebd041 0x7e614b89e0
	void SetActorScale3D(Vector NewScale3D);// 0x1a3a58ebd041 0x7e614b8ac0
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x1a3958ebd041 0x7e614b8ba0
	void SetActorHiddenInGame(bool bNewHidden);// 0x1a3858ebd041 0x7e614b8c80
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x1a3758ebd041 0x7e614b8d60
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1a3658ebd041 0x7e614b8e40
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1a3558ebd041 0x7e614b8f20
	void ReceiveTick(float DeltaSeconds);// 0x1de358ebd041 0x7e614b9000
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1a3358ebd041 0x7e614b5720
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1a3258ebd041 0x7e614b5800
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1a3158ebd041 0x7e614b58e0
	void ReceiveEndPlay(byte EndPlayReason);// 0x1a3058ebd041 0x7e614b59c0
	void ReceiveDestroyed();// 0x1a2f58ebd041 0x7e614b5aa0
	void ReceiveBeginPlay();// 0x1a2e58ebd041 0x7e614b5b80
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1a2d58ebd041 0x7e614b5c60
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1a2c58ebd041 0x7e614b5d40
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1a2b58ebd041 0x7e614b5e20
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1a2a58ebd041 0x7e614b5f00
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1a2958ebd041 0x7e614b5fe0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1a2858ebd041 0x7e614b60c0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1a2758ebd041 0x7e614b61a0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1a2658ebd041 0x7e614b6280
	void ReceiveActorEndCursorOver();// 0x1a2558ebd041 0x7e614b6360
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1a2458ebd041 0x7e614b6440
	void ReceiveActorBeginCursorOver();// 0x1a2358ebd041 0x7e614b6520
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x1a2258ebd041 0x7e614b6600
	void OnRep_ReplicateMovement();// 0x1a2158ebd041 0x7e614b66e0
	void OnRep_ReplicatedMovement();// 0x1a2058ebd041 0x7e614b67c0
	void OnRep_Owner();// 0x1a1f58ebd041 0x7e614b68a0
	void OnRep_Instigator();// 0x1a1e58ebd041 0x7e614b6980
	void OnRep_AttachmentReplication();// 0x1a1d58ebd041 0x7e614b6a60
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x1a1c58ebd041 0x7e614b6b40
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x1a1b58ebd041 0x7e614b6c20
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1a58ebd041 0x7e614b6d00
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x1a1958ebd041 0x7e614b6de0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1858ebd041 0x7e614b6ec0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1758ebd041 0x7e614b6fa0
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1658ebd041 0x7e614b7080
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1558ebd041 0x7e614b7160
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1458ebd041 0x7e614b7240
	void K2_OnReset();// 0x1a5958ebd041 0x7e614b7320
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1a1258ebd041 0x7e614b3a40
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1a1158ebd041 0x7e614b3b20
	SceneComponent* K2_GetRootComponent();// 0x1a1058ebd041 0x7e614b3c00
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x1a0f58ebd041 0x7e614b3ce0
	Rotator K2_GetActorRotation();// 0x1a0e58ebd041 0x7e614b3dc0
	Vector K2_GetActorLocation();// 0x1a0d58ebd041 0x7e614b3ea0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x1a0c58ebd041 0x7e614b3f80
	void K2_DestroyActor();// 0x1a0b58ebd041 0x7e614b4060
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1a0a58ebd041 0x7e614b4140
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1a0958ebd041 0x7e614b4220
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1a0858ebd041 0x7e614b4300
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1a0758ebd041 0x7e614b43e0
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0658ebd041 0x7e614b44c0
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0558ebd041 0x7e614b45a0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0458ebd041 0x7e614b4680
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0358ebd041 0x7e614b4760
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0258ebd041 0x7e614b4840
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0158ebd041 0x7e614b4920
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0058ebd041 0x7e614b4a00
	bool IsOverlappingActor(const Actor* Other);// 0x19ff58ebd041 0x7e614b4ae0
	bool IsChildActor();// 0x19fe58ebd041 0x7e614b4bc0
	bool IsActorTickEnabled();// 0x19fd58ebd041 0x7e614b4ca0
	bool IsActorBeingDestroyed();// 0x19fc58ebd041 0x7e614b4d80
	bool HasAuthority();// 0x19fb58ebd041 0x7e614b4e60
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x19fa58ebd041 0x7e614b4f40
	Vector GetVelocity();// 0x19f958ebd041 0x7e614b5020
	Transform GetTransform();// 0x19f858ebd041 0x7e614b5100
	bool GetTickableWhenPaused();// 0x19f758ebd041 0x7e614b51e0
	float GetSquaredHorizontalDistanceTo(const Actor* OtherActor);// 0x19f658ebd041 0x7e614b52c0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x19f558ebd041 0x7e614b53a0
	byte GetRemoteRole();// 0x19f458ebd041 0x7e614b5480
	int GetRayTracingGroupId();// 0x19f358ebd041 0x7e614b5560
	ChildActorComponent* GetParentComponent();// 0x1a3458ebd041 0x7e614b5640
	Actor* GetParentActor();// 0x19f158ebd041 0x7e614b1d60
	Actor* GetOwner();// 0x19f058ebd041 0x7e614b1e40
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x19ef58ebd041 0x7e614b1f20
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x19ee58ebd041 0x7e614b2000
	byte GetLocalRole();// 0x19ed58ebd041 0x7e614b20e0
	float GetLifeSpan();// 0x19ec58ebd041 0x7e614b21c0
	Transform GetLevelTransform();// 0x19eb58ebd041 0x7e614b22a0
	Level* GetLevel();// 0x19ea58ebd041 0x7e614b2380
	Controller* GetInstigatorController();// 0x19e958ebd041 0x7e614b2460
	Pawn* GetInstigator();// 0x19e858ebd041 0x7e614b2540
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x19e758ebd041 0x7e614b2620
	float GetInputAxisValue(const FName InputAxisName);// 0x19e658ebd041 0x7e614b2700
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x19e558ebd041 0x7e614b27e0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x19e458ebd041 0x7e614b28c0
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x19e358ebd041 0x7e614b29a0
	float GetGameTimeSinceCreation();// 0x19e258ebd041 0x7e614b2a80
	float GetDotProductTo(const Actor* OtherActor);// 0x19e158ebd041 0x7e614b2b60
	float GetDistanceTo(const Actor* OtherActor);// 0x19e058ebd041 0x7e614b2c40
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x19df58ebd041 0x7e614b2d20
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x19de58ebd041 0x7e614b2e00
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x19dd58ebd041 0x7e614b2ee0
	FName GetAttachParentSocketName();// 0x19dc58ebd041 0x7e614b2fc0
	Actor* GetAttachParentActor();// 0x19db58ebd041 0x7e614b30a0
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors);// 0x19da58ebd041 0x7e614b3180
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x19d958ebd041 0x7e614b3260
	Vector GetActorUpVector();// 0x19d858ebd041 0x7e614b3340
	float GetActorTimeDilation();// 0x19d758ebd041 0x7e614b3420
	float GetActorTickInterval();// 0x19d658ebd041 0x7e614b3500
	Vector GetActorScale3D();// 0x19d558ebd041 0x7e614b35e0
	Vector GetActorRightVector();// 0x19d458ebd041 0x7e614b36c0
	Vector GetActorRelativeScale3D();// 0x19d358ebd041 0x7e614b37a0
	Vector GetActorForwardVector();// 0x19d258ebd041 0x7e614b3880
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x1a1358ebd041 0x7e614b3960
	bool GetActorEnableCollision();// 0x19d058ebd041 0x7e614b0080
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x19cf58ebd041 0x7e614b0160
	void ForceNetUpdate();// 0x19ce58ebd041 0x7e614b0240
	void FlushNetDormancy();// 0x19cd58ebd041 0x7e614b0320
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x19cc58ebd041 0x7e614b0400
	void EnableInput(PlayerController* PlayerController);// 0x19cb58ebd041 0x7e614b04e0
	void DisableInput(PlayerController* PlayerController);// 0x19ca58ebd041 0x7e614b05c0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x19c958ebd041 0x7e614b06a0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x19c858ebd041 0x7e614b0780
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x19c758ebd041 0x7e614b0860
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x19c658ebd041 0x7e614b0940
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x19c558ebd041 0x7e614b0a20
	bool ActorHasTag(FName Tag);// 0x17c058ebd041 0x7e614b0b00

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1] 0x7e8488f880
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1] 0x7e8488f800
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7e84de1080
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x7e84de1000
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x7e84de0f80
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x7e84de0f00
	float TickInterval;//[Offset: 0xc, Size: 0x4] 0x7e84de0e80

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0x18] 0x7e615cd600
	Vector AngularVelocity;//[Offset: 0x18, Size: 0x18] 0x7e615cd680
	Vector Location;//[Offset: 0x30, Size: 0x18] 0x7e615cb600
	Rotator Rotation;//[Offset: 0x48, Size: 0x18] 0x7e615cb680
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7e615cb700
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7e615cb780
	enum LocationQuantizationLevel;//[Offset: 0x61, Size: 0x1] 0x7e84e53620
	enum VelocityQuantizationLevel;//[Offset: 0x62, Size: 0x1] 0x7e84e536c0
	enum RotationQuantizationLevel;//[Offset: 0x63, Size: 0x1] 0x7e84e53760

--------------------------------
Class: Vector
	double X;//[Offset: 0x0, Size: 0x8] 0x7e8412eb00
	double Y;//[Offset: 0x8, Size: 0x8] 0x7e8412ea80
	double Z;//[Offset: 0x10, Size: 0x8] 0x7e8412c700

--------------------------------
Class: Rotator
	double Pitch;//[Offset: 0x0, Size: 0x8] 0x7e841e1300
	double Yaw;//[Offset: 0x8, Size: 0x8] 0x7e841e1280
	double Roll;//[Offset: 0x10, Size: 0x8] 0x7e841e1200

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8] 0x7e615cbb00
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0x18] 0x7e615cbb80
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x20, Size: 0x18] 0x7e615cbc00
	Rotator RotationOffset;//[Offset: 0x38, Size: 0x18] 0x7e615cbc80
	FName AttachSocket;//[Offset: 0x50, Size: 0x8] 0x7e615cbd00
	SceneComponent* AttachComponent;//[Offset: 0x58, Size: 0x8] 0x7e615cbd80

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8] 0x7e61400d00
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8] 0x7e61400d80
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8] 0x7e61400e00
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10] 0x7e84dd1f00
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10] 0x7e84dd1d20
	Vector RelativeLocation;//[Offset: 0x138, Size: 0x18] 0x7e61400f80
	Rotator RelativeRotation;//[Offset: 0x150, Size: 0x18] 0x7e61401000
	Vector RelativeScale3D;//[Offset: 0x168, Size: 0x18] 0x7e61401080
	Vector ComponentVelocity;//[Offset: 0x180, Size: 0x18] 0x7e84e6f800
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 0x1] 0x7e84e6f880
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x198, Size: 0x1] 0x7e84e6f900
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x198, Size: 0x1] 0x7e84e6f980
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x198, Size: 0x1] 0x7e84e6fa00
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x198, Size: 0x1] 0x7e84e6fa80
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x198, Size: 0x1] 0x7e84e6fb00
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x198, Size: 0x1] 0x7e84e6fb80
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x199, Size: 0x1] 0x7e84e6fc00
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x199, Size: 0x1] 0x7e84e6fc80
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x199, Size: 0x1] 0x7e84e6fd00
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x199, Size: 0x1] 0x7e84e6fd80
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x199, Size: 0x1] 0x7e84e6fe00
	bool bComputeFastLocalBounds;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x199, Size: 0x1] 0x7e84e6fe80
	bool bComputeBoundsOnceForGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x199, Size: 0x1] 0x7e84e6ff00
	bool bComputedBoundsOnceForGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x199, Size: 0x1] 0x7e84e6ff80
	byte Mobility;//[Offset: 0x19b, Size: 0x1] 0x7e84e6e780
	byte DetailMode;//[Offset: 0x19c, Size: 0x1] 0x7e84e6e800
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x19d, Size: 0x1] 0x7e84e6e880
	void ToggleVisibility(bool bPropagateToChildren);// 0xead58ebd041 0x7e613d5480
	void SetWorldScale3D(Vector NewScale);// 0xeac58ebd041 0x7e613d5560
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0xf5658ebd041 0x7e613d5640
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0xeaa58ebd041 0x7e613d1d60
	void SetRelativeScale3D(Vector NewScale3D);// 0xea858ebd041 0x7e613d1e40
	void SetMobility(byte NewMobility);// 0xea758ebd041 0x7e613d1f20
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0xea658ebd041 0x7e613d2000
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0xea558ebd041 0x7e613d20e0
	void ResetRelativeTransform();// 0xea458ebd041 0x7e613d21c0
	void OnRep_Visibility(bool OldValue);// 0xea358ebd041 0x7e613d22a0
	void OnRep_Transform();// 0xea258ebd041 0x7e613d2380
	void OnRep_AttachSocketName();// 0xea158ebd041 0x7e613d2460
	void OnRep_AttachParent();// 0xea058ebd041 0x7e613d2540
	void OnRep_AttachChildren();// 0xe9f58ebd041 0x7e613d2620
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9e58ebd041 0x7e613d2700
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9d58ebd041 0x7e613d27e0
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9c58ebd041 0x7e613d28c0
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9b58ebd041 0x7e613d29a0
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9a58ebd041 0x7e613d2a80
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9958ebd041 0x7e613d2b60
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9858ebd041 0x7e613d2c40
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9758ebd041 0x7e613d2d20
	Transform K2_GetComponentToWorld();// 0xe9658ebd041 0x7e613d2e00
	Vector K2_GetComponentScale();// 0xe9558ebd041 0x7e613d2ee0
	Rotator K2_GetComponentRotation();// 0xe9458ebd041 0x7e613d2fc0
	Vector K2_GetComponentLocation();// 0xe9258ebd041 0x7e613d30a0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0xe9058ebd041 0x7e613d3180
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xe8e58ebd041 0x7e613d3260
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0xe8d58ebd041 0x7e613d3340
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8c58ebd041 0x7e613d3420
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8b58ebd041 0x7e613d3500
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8a58ebd041 0x7e613d35e0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8958ebd041 0x7e613d36c0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8858ebd041 0x7e613d37a0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8758ebd041 0x7e613d3880
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xf0458ebd041 0x7e613d3960
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8558ebd041 0x7e613d0080
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8458ebd041 0x7e613d0160
	bool IsVisible();// 0xe8358ebd041 0x7e613d0240
	bool IsSimulatingPhysics(FName BoneName);// 0xe8258ebd041 0x7e613d0320
	bool IsAnySimulatingPhysics();// 0xe8158ebd041 0x7e613d0400
	Vector GetUpVector();// 0xe7f58ebd041 0x7e613d04e0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0xe7e58ebd041 0x7e613d05c0
	Rotator GetSocketRotation(FName InSocketName);// 0xe7d58ebd041 0x7e613d06a0
	Quat GetSocketQuaternion(FName InSocketName);// 0xe7c58ebd041 0x7e613d0780
	Vector GetSocketLocation(FName InSocketName);// 0xe7b58ebd041 0x7e613d0860
	bool GetShouldUpdatePhysicsVolume();// 0xe7a58ebd041 0x7e613d0940
	Vector GetRightVector();// 0xe7958ebd041 0x7e613d0a20
	Transform GetRelativeTransform();// 0xe7858ebd041 0x7e613d0b00
	PhysicsVolume* GetPhysicsVolume();// 0xe7758ebd041 0x7e613d0be0
	void GetParentComponents(out SceneComponent*[] Parents);// 0xe7658ebd041 0x7e613d0cc0
	int GetNumChildrenComponents();// 0xe7558ebd041 0x7e613d0da0
	Vector GetForwardVector();// 0xe7458ebd041 0x7e613d0e80
	Vector GetComponentVelocity();// 0xe7358ebd041 0x7e613d0f60
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0xe7258ebd041 0x7e613d1040
	SceneComponent* GetChildComponent(int ChildIndex);// 0xe7158ebd041 0x7e613d1120
	FName GetAttachSocketName();// 0xe7058ebd041 0x7e613d1200
	SceneComponent* GetAttachParent();// 0xe6f58ebd041 0x7e613d12e0
	FName[] GetAllSocketNames();// 0xe6e58ebd041 0x7e613d13c0
	bool DoesSocketExist(FName InSocketName);// 0xe6d58ebd041 0x7e613d14a0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0xffffff8158ebd000 0x7e613d1580

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30] 0x7e84de0e00
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10] 0x7e84e2ec00
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x7e84e2eb60
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4] 0x7e84de0c80
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1] 0x7e84de0c00
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1] 0x7e84de0b80
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1] 0x7e8488b680
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1] 0x7e8488b600
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a, Size: 0x1] 0x7e8488d680
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a, Size: 0x1] 0x7e8488d600
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a, Size: 0x1] 0x7e8488d580
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1] 0x7e84e2eac0
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1] 0x7e8488d380
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1] 0x7e8488d280
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10] 0x7e84e2e980
	void ToggleActive();// 0xb4f58ebd041 0x7e84848900
	void SetTickGroup(byte NewTickGroup);// 0xb4758ebd041 0x7e84848820
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xb4558ebd041 0x7e84848740
	void SetIsReplicated(bool ShouldReplicate);// 0xb4458ebd041 0x7e84848660
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0xb4358ebd041 0x7e84848580
	void SetComponentTickInterval(float TickInterval);// 0xb4258ebd041 0x7e848484a0
	void SetComponentTickEnabled(bool bEnabled);// 0xb4158ebd041 0x7e848483c0
	void SetAutoActivate(bool bNewAutoActivate);// 0xb4058ebd041 0x7e848482e0
	void SetActive(bool bNewActive, bool bReset);// 0xb3f58ebd041 0x7e84848200
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xb3e58ebd041 0x7e84848120
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xb3d58ebd041 0x7e84848040
	void ReceiveTick(float DeltaSeconds);// 0xb3c58ebd041 0x7e84847f60
	void ReceiveEndPlay(byte EndPlayReason);// 0xb3b58ebd041 0x7e84847e80
	void ReceiveBeginPlay();// 0xb3958ebd041 0x7e84847da0
	void OnRep_IsActive();// 0xb3858ebd041 0x7e84847cc0
	void K2_DestroyComponent(Object* Object);// 0xb3758ebd041 0x7e84847be0
	bool IsComponentTickEnabled();// 0xb3658ebd041 0x7e84847b00
	bool IsBeingDestroyed();// 0xb3558ebd041 0x7e84847a20
	bool IsActive();// 0xb3458ebd041 0x7e84847940
	Actor* GetOwner();// 0xb3358ebd041 0x7e84847860
	float GetComponentTickInterval();// 0xb3258ebd041 0x7e84847780
	void Deactivate();// 0xb3158ebd041 0x7e848476a0
	bool ComponentHasTag(FName Tag);// 0xb3058ebd041 0x7e848475c0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xb2f58ebd041 0x7e848474e0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xb2e58ebd041 0x7e84847400
	void Activate(bool bReset);// 0xae358ebd041 0x7e8484ace0

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x20] 0x7e841e7f80
	Vector Translation;//[Offset: 0x20, Size: 0x18] 0x7e841e7f00
	Vector Scale3D;//[Offset: 0x40, Size: 0x18] 0x7e841e7e80

--------------------------------
Class: Quat
	double X;//[Offset: 0x0, Size: 0x8] 0x7e841e0380
	double Y;//[Offset: 0x8, Size: 0x8] 0x7e841e0300
	double Z;//[Offset: 0x10, Size: 0x8] 0x7e841e0280
	double W;//[Offset: 0x18, Size: 0x8] 0x7e841e0200

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 0x4] 0x7e84889000
	float Time;//[Offset: 0x4, Size: 0x4] 0x7e84888f80
	float Distance;//[Offset: 0x8, Size: 0x4] 0x7e84888f00
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0x18] 0x7e84888e80
	Vector_NetQuantize ImpactPoint;//[Offset: 0x28, Size: 0x18] 0x7e84888e00
	Vector_NetQuantizeNormal Normal;//[Offset: 0x40, Size: 0x18] 0x7e84888d80
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x58, Size: 0x18] 0x7e84888d00
	Vector_NetQuantize TraceStart;//[Offset: 0x70, Size: 0x18] 0x7e84888c80
	Vector_NetQuantize TraceEnd;//[Offset: 0x88, Size: 0x18] 0x7e84888c00
	float PenetrationDepth;//[Offset: 0xa0, Size: 0x4] 0x7e84888b80
	int MyItem;//[Offset: 0xa4, Size: 0x4] 0x7e84888b00
	int Item;//[Offset: 0xa8, Size: 0x4] 0x7e84888a80
	byte ElementIndex;//[Offset: 0xac, Size: 0x1] 0x7e84888a00
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1] 0x7e84888980
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xad, Size: 0x1] 0x7e84888900
	PhysicalMaterial* PhysMaterial;//[Offset: 0xb0, Size: 0x8] 0x7e84888880
	ActorInstanceHandle HitObjectHandle;//[Offset: 0xb8, Size: 0x18] 0x7e84888780
	PrimitiveComponent* Component;//[Offset: 0xd0, Size: 0x8] 0x7e84888700
	FName BoneName;//[Offset: 0xd8, Size: 0x8] 0x7e84888680
	FName MyBoneName;//[Offset: 0xe0, Size: 0x8] 0x7e84888600

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x7e61857780
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x7e61857800
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1] 0x7e61857880
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7e61857900
	float Restitution;//[Offset: 0x34, Size: 0x4] 0x7e61857980
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1] 0x7e61857a00
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e61857a80
	float Density;//[Offset: 0x3c, Size: 0x4] 0x7e61857b00
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x7e61857b80
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4] 0x7e61857c00
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4] 0x7e61857c80
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4] 0x7e61857d00
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4] 0x7e61857d80
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8] 0x7e61857e00
	byte SurfaceType;//[Offset: 0x60, Size: 0x1] 0x7e61857e80

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: ActorInstanceHandle
	Actor* Actor;//[Offset: 0x0, Size: 0x8] 0x7e84888800

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x2c0, Size: 0x4] 0x7e61422f00
	float LDMaxDrawDistance;//[Offset: 0x2c4, Size: 0x4] 0x7e61422f80
	float CachedMaxDrawDistance;//[Offset: 0x2c8, Size: 0x4] 0x7e61423000
	byte DepthPriorityGroup;//[Offset: 0x2cc, Size: 0x1] 0x7e61423080
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2cd, Size: 0x1] 0x7e61423100
	byte IndirectLightingCacheQuality;//[Offset: 0x2ce, Size: 0x1] 0x7e61423180
	enum LightmapType;//[Offset: 0x2cf, Size: 0x1] 0x7e8458a6a0
	bool bIsValidTextureStreamingBuiltData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x7e61421180
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1] 0x7e61421200
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d0, Size: 0x1] 0x7e61421280
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d1, Size: 0x1] 0x7e61421300
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d1, Size: 0x1] 0x7e61421380
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d1, Size: 0x1] 0x7e61421400
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d1, Size: 0x1] 0x7e61421480
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d1, Size: 0x1] 0x7e61421500
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d1, Size: 0x1] 0x7e61421580
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d1, Size: 0x1] 0x7e61421600
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d1, Size: 0x1] 0x7e61421680
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d2, Size: 0x1] 0x7e61421700
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d2, Size: 0x1] 0x7e61421780
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d2, Size: 0x1] 0x7e61421800
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d2, Size: 0x1] 0x7e61421880
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d2, Size: 0x1] 0x7e61421900
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d2, Size: 0x1] 0x7e61421980
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d2, Size: 0x1] 0x7e61421a00
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d2, Size: 0x1] 0x7e61421a80
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d3, Size: 0x1] 0x7e61421b00
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d3, Size: 0x1] 0x7e61421b80
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d3, Size: 0x1] 0x7e61421c00
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d3, Size: 0x1] 0x7e61421c80
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d3, Size: 0x1] 0x7e61421d00
	bool bEmissiveLightSource;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d3, Size: 0x1] 0x7e61421d80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d3, Size: 0x1] 0x7e61421e00
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d3, Size: 0x1] 0x7e61421e80
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1] 0x7e61421f00
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1] 0x7e61421f80
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4, Size: 0x1] 0x7e61422000
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4, Size: 0x1] 0x7e61422080
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d4, Size: 0x1] 0x7e61422100
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d4, Size: 0x1] 0x7e61420080
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d4, Size: 0x1] 0x7e61420100
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d4, Size: 0x1] 0x7e61420180
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d5, Size: 0x1] 0x7e61420200
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d5, Size: 0x1] 0x7e61420280
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d5, Size: 0x1] 0x7e61420300
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d5, Size: 0x1] 0x7e61420380
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d5, Size: 0x1] 0x7e61420400
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d5, Size: 0x1] 0x7e61420480
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d5, Size: 0x1] 0x7e61420500
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d5, Size: 0x1] 0x7e61420580
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d6, Size: 0x1] 0x7e61420600
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d6, Size: 0x1] 0x7e61420680
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d6, Size: 0x1] 0x7e61420700
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d6, Size: 0x1] 0x7e61420780
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d6, Size: 0x1] 0x7e61420800
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d6, Size: 0x1] 0x7e61420880
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d6, Size: 0x1] 0x7e61420900
	bool bIsBeingMovedByEditor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d6, Size: 0x1] 0x7e61420980
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d7, Size: 0x1] 0x7e61420a00
	bool bVisibleInSceneCaptureOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d7, Size: 0x1] 0x7e61420a80
	bool bHiddenInSceneCapture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d7, Size: 0x1] 0x7e61420b80
	bool bRayTracingFarField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d7, Size: 0x1] 0x7e61420b00
	bool bHasNoStreamableTextures;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d7, Size: 0x1] 0x7e61420c00
	byte bHasCustomNavigableGeometry;//[Offset: 0x2d8, Size: 0x1] 0x7e61420c80
	byte CanCharacterStepUpOn;//[Offset: 0x2da, Size: 0x1] 0x7e61420d00
	LightingChannels LightingChannels;//[Offset: 0x2db, Size: 0x1] 0x7e61420f00
	int RayTracingGroupId;//[Offset: 0x2dc, Size: 0x4] 0x7e61420f80
	int VisibilityId;//[Offset: 0x2e0, Size: 0x4] 0x7e61421000
	int CustomDepthStencilValue;//[Offset: 0x2e4, Size: 0x4] 0x7e61421080
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x2e8, Size: 0x10] 0x7e6140f800
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x2f8, Size: 0x10] 0x7e6140f900
	int TranslucencySortPriority;//[Offset: 0x310, Size: 0x4] 0x7e6140f980
	float TranslucencySortDistanceOffset;//[Offset: 0x314, Size: 0x4] 0x7e6140fa00
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x318, Size: 0x10] 0x7e8458a600
	int8 VirtualTextureLodBias;//[Offset: 0x328, Size: 0x1] 0x7e6140fb00
	int8 VirtualTextureCullMips;//[Offset: 0x329, Size: 0x1] 0x7e6140fb80
	int8 VirtualTextureMinCoverage;//[Offset: 0x32a, Size: 0x1] 0x7e6140fc00
	enum VirtualTextureRenderPassType;//[Offset: 0x32b, Size: 0x1] 0x7e8458a560
	float BoundsScale;//[Offset: 0x33c, Size: 0x4] 0x7e6140fd00
	Actor*[] MoveIgnoreActors;//[Offset: 0x350, Size: 0x10] 0x7e8458a920
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x360, Size: 0x10] 0x7e8458cd60
	BodyInstance BodyInstance;//[Offset: 0x380, Size: 0x188] 0x7e6140cc80
	delegate OnComponentHit;//[Offset: 0x508, Size: 0x1] 0x7e6140cd00
	delegate OnComponentBeginOverlap;//[Offset: 0x509, Size: 0x1] 0x7e6140cd80
	delegate OnComponentEndOverlap;//[Offset: 0x50a, Size: 0x1] 0x7e6140ce00
	delegate OnComponentWake;//[Offset: 0x50b, Size: 0x1] 0x7e6140ce80
	delegate OnComponentSleep;//[Offset: 0x50c, Size: 0x1] 0x7e6140cf00
	delegate OnBeginCursorOver;//[Offset: 0x50e, Size: 0x1] 0x7e6140cf80
	delegate OnEndCursorOver;//[Offset: 0x50f, Size: 0x1] 0x7e6140d000
	delegate OnClicked;//[Offset: 0x510, Size: 0x1] 0x7e6140d080
	delegate OnReleased;//[Offset: 0x511, Size: 0x1] 0x7e6140d100
	delegate OnInputTouchBegin;//[Offset: 0x512, Size: 0x1] 0x7e6140d180
	delegate OnInputTouchEnd;//[Offset: 0x513, Size: 0x1] 0x7e6140d200
	delegate OnInputTouchEnter;//[Offset: 0x514, Size: 0x1] 0x7e6140d280
	delegate OnInputTouchLeave;//[Offset: 0x515, Size: 0x1] 0x7e6140d300
	enum RayTracingGroupCullingPriority;//[Offset: 0x516, Size: 0x1] 0x7e84dd1140
	enum CustomDepthStencilWriteMask;//[Offset: 0x517, Size: 0x1] 0x7e84dd0f60
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x530, Size: 0x8] 0x7e6140d480
	bool WasRecentlyRendered(float Tolerance);// 0xfc558ebd041 0x7e613de240
	void WakeRigidBody(FName BoneName);// 0xfc458ebd041 0x7e613de320
	void WakeAllRigidBodies();// 0xfc358ebd041 0x7e613de400
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0xfc258ebd041 0x7e613de4e0
	void SetVisibleInSceneCaptureOnly(bool bValue);// 0xfc158ebd041 0x7e613de5c0
	void SetVisibleInRayTracing(bool bNewVisibleInRayTracing);// 0x103e58ebd041 0x7e613de6a0
	void SetVectorParameterForDefaultCustomPrimitiveData(FName ParameterName, Vector4 Value);// 0xfbf58ebd041 0x7e613dadc0
	void SetVectorParameterForCustomPrimitiveData(FName ParameterName, Vector4 Value);// 0xfbe58ebd041 0x7e613daea0
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0xfbd58ebd041 0x7e613daf80
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0xfbc58ebd041 0x7e613db060
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0xfbb58ebd041 0x7e613db140
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0xfba58ebd041 0x7e613db220
	void SetSimulatePhysics(bool bSimulate);// 0xfb958ebd041 0x7e613db300
	void SetScalarParameterForDefaultCustomPrimitiveData(FName ParameterName, float Value);// 0xfb858ebd041 0x7e613db3e0
	void SetScalarParameterForCustomPrimitiveData(FName ParameterName, float Value);// 0xfb758ebd041 0x7e613db4c0
	void SetRenderInMainPass(bool bValue);// 0xfb658ebd041 0x7e613db5a0
	void SetRenderInDepthPass(bool bValue);// 0xfb558ebd041 0x7e613db680
	void SetRenderCustomDepth(bool bValue);// 0xfb458ebd041 0x7e613db760
	void SetReceivesDecals(bool bNewReceivesDecals);// 0xfb358ebd041 0x7e613db840
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0xfb258ebd041 0x7e613db920
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xfb158ebd041 0x7e613dba00
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xfb058ebd041 0x7e613dbae0
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0xfaf58ebd041 0x7e613dbbc0
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xfae58ebd041 0x7e613dbca0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xfad58ebd041 0x7e613dbd80
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0xfac58ebd041 0x7e613dbe60
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0xfab58ebd041 0x7e613dbf40
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0xfaa58ebd041 0x7e613dc020
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0xfa958ebd041 0x7e613dc100
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xfa858ebd041 0x7e613dc1e0
	void SetMassScale(FName BoneName, float InMassScale);// 0xfa758ebd041 0x7e613dc2c0
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0xfa658ebd041 0x7e613dc3a0
	void SetLinearDamping(float InDamping);// 0xfa558ebd041 0x7e613dc480
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xfa458ebd041 0x7e613dc560
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0xfa358ebd041 0x7e613dc640
	void SetHiddenInSceneCapture(bool bValue);// 0xfa258ebd041 0x7e613dc720
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0xfa158ebd041 0x7e613dc800
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0xfa058ebd041 0x7e613dc8e0
	void SetEnableGravity(bool bGravityEnabled);// 0x101c58ebd041 0x7e613dc9c0
	void SetEmissiveLightSource(bool NewEmissiveLightSource);// 0xf9e58ebd041 0x7e613d90e0
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xf9d58ebd041 0x7e613d91c0
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xf9c58ebd041 0x7e613d92a0
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xf9b58ebd041 0x7e613d9380
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xf9a58ebd041 0x7e613d9460
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xf9958ebd041 0x7e613d9540
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xf9858ebd041 0x7e613d9620
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xf9758ebd041 0x7e613d9700
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xf9558ebd041 0x7e613d97e0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0xf9458ebd041 0x7e613d98c0
	void SetCustomDepthStencilValue(int Value);// 0xf9358ebd041 0x7e613d99a0
	void SetCullDistance(float NewCullDistance);// 0xf9158ebd041 0x7e613d9a80
	void SetConstraintMode(byte ConstraintMode);// 0xf9058ebd041 0x7e613d9b60
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0xf8f58ebd041 0x7e613d9c40
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0xf8e58ebd041 0x7e613d9d20
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0xf8d58ebd041 0x7e613d9e00
	void SetCollisionObjectType(byte Channel);// 0xf8c58ebd041 0x7e613d9ee0
	void SetCollisionEnabled(byte NewType);// 0xf8b58ebd041 0x7e613d9fc0
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0xf8a58ebd041 0x7e613da0a0
	void SetCastShadow(bool NewCastShadow);// 0xf8958ebd041 0x7e613da180
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0xf8858ebd041 0x7e613da260
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0xf8758ebd041 0x7e613da340
	void SetCastContactShadow(bool bInCastContactShadow);// 0xf8658ebd041 0x7e613da420
	void SetBoundsScale(float NewBoundsScale);// 0xf8558ebd041 0x7e613da500
	void SetAngularDamping(float InDamping);// 0xf8458ebd041 0x7e613da5e0
	void SetAllUseCCD(bool InUseCCD);// 0xf8358ebd041 0x7e613da6c0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0xf8258ebd041 0x7e613da7a0
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0xf8158ebd041 0x7e613da880
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0xf8058ebd041 0x7e613da960
	void SetAllMassScale(float InMassScale);// 0xf7f58ebd041 0x7e613daa40
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0xf7e58ebd041 0x7e613dab20
	void PutRigidBodyToSleep(FName BoneName);// 0xf7d58ebd041 0x7e613dac00
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xfc058ebd041 0x7e613dace0
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xf7b58ebd041 0x7e613d7400
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xf7a58ebd041 0x7e613d74e0
	bool K2_IsQueryCollisionEnabled();// 0xf7958ebd041 0x7e613d75c0
	bool K2_IsPhysicsCollisionEnabled();// 0xf7858ebd041 0x7e613d76a0
	bool K2_IsCollisionEnabled();// 0xf7758ebd041 0x7e613d7780
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xf7658ebd041 0x7e613d7860
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0xf7558ebd041 0x7e613d7940
	bool IsOverlappingActor(const Actor* Other);// 0xf7458ebd041 0x7e613d7a20
	bool IsGravityEnabled();// 0xf7358ebd041 0x7e613d7b00
	bool IsAnyRigidBodyAwake();// 0xf7258ebd041 0x7e613d7be0
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0xf7158ebd041 0x7e613d7cc0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0xf6e58ebd041 0x7e613d7da0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0xf6d58ebd041 0x7e613d7e80
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0xf6c58ebd041 0x7e613d7f60
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0xf6b58ebd041 0x7e613d8040
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0xf6a58ebd041 0x7e613d8120
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0xf6958ebd041 0x7e613d8200
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0xf6858ebd041 0x7e613d82e0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xf6758ebd041 0x7e613d83c0
	int GetNumMaterials();// 0xf6658ebd041 0x7e613d84a0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0xf6558ebd041 0x7e613d8580
	MaterialInterface* GetMaterial(int ElementIndex);// 0xf6458ebd041 0x7e613d8660
	float GetMassScale(FName BoneName);// 0xf6358ebd041 0x7e613d8740
	float GetMass();// 0xf6258ebd041 0x7e613d8820
	float GetLinearDamping();// 0xf6158ebd041 0x7e613d8900
	Vector GetInertiaTensor(FName BoneName);// 0xf6058ebd041 0x7e613d89e0
	bool GetGenerateOverlapEvents();// 0xf5f58ebd041 0x7e613d8ac0
	int GetCustomPrimitiveDataIndexForVectorParameter(FName ParameterName);// 0xf5e58ebd041 0x7e613d8ba0
	int GetCustomPrimitiveDataIndexForScalarParameter(FName ParameterName);// 0xf5c58ebd041 0x7e613d8c80
	byte GetCollisionResponseToChannel(byte Channel);// 0xf5b58ebd041 0x7e613d8d60
	FName GetCollisionProfileName();// 0xf5958ebd041 0x7e613d8e40
	byte GetCollisionObjectType();// 0xf5758ebd041 0x7e613d8f20
	byte GetCollisionEnabled();// 0xf9f58ebd041 0x7e613d9000
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0xf5558ebd041 0x7e613d5720
	Vector GetCenterOfMass(FName BoneName);// 0xf5458ebd041 0x7e613d5800
	float GetAngularDamping();// 0xf5358ebd041 0x7e613d58e0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0xf5258ebd041 0x7e613d59c0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0xf5158ebd041 0x7e613d5aa0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0xf5058ebd041 0x7e613d5b80
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0xf4f58ebd041 0x7e613d5c60
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0xf4e58ebd041 0x7e613d5d40
	void ClearMoveIgnoreComponents();// 0xf4d58ebd041 0x7e613d5e20
	void ClearMoveIgnoreActors();// 0xf4c58ebd041 0x7e613d5f00
	bool CanCharacterStepUp(Pawn* Pawn);// 0xf4b58ebd041 0x7e613d5fe0
	void AddVelocityChangeImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xf4a58ebd041 0x7e613d60c0
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0xf4958ebd041 0x7e613d61a0
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0xf4858ebd041 0x7e613d6280
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0xf4758ebd041 0x7e613d6360
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0xf4658ebd041 0x7e613d6440
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xf4558ebd041 0x7e613d6520
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xf4458ebd041 0x7e613d6600
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0xf4358ebd041 0x7e613d66e0
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0xf4258ebd041 0x7e613d67c0
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0xf4158ebd041 0x7e613d68a0
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0xf4058ebd041 0x7e613d6980
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0xf3e58ebd041 0x7e613d6a60

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1] 0x7e61408100
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4] 0x7e61408180

--------------------------------
Class: Vector4
	double X;//[Offset: 0x0, Size: 0x8] 0x7e841e6380
	double Y;//[Offset: 0x8, Size: 0x8] 0x7e841e8400
	double Z;//[Offset: 0x10, Size: 0x8] 0x7e841e8380
	double W;//[Offset: 0x18, Size: 0x8] 0x7e841e8300

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61420d80
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61420e00
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61420e80

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10] 0x7e84854ca0

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8] 0x7e618ef700
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10] 0x7e618ef780
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10] 0x7e61898f80
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x7e61899020
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x27bc58ebd041 0x7e618d4060
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x27bb58ebd041 0x7e618d4140
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x27ba58ebd041 0x7e618d4220
	PhysicalMaterial* GetPhysicalMaterial();// 0x27b958ebd041 0x7e618d4300
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x27b858ebd041 0x7e618d43e0
	Material* GetBaseMaterial();// 0x27b758ebd041 0x7e618d44c0

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4] 0x7e61b7fb80
	byte AddressX;//[Offset: 0x2c, Size: 0x1] 0x7e61b7fc00
	byte AddressY;//[Offset: 0x2d, Size: 0x1] 0x7e61b7fc80

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x7e61b55600
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1] 0x7e61a57c20

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6164bf80
	byte Association;//[Offset: 0x8, Size: 0x1] 0x7e6164c000
	int Index;//[Offset: 0xc, Size: 0x4] 0x7e6164c080

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 0x8] 0x7e61b43300
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0xa0, Size: 0x8] 0x7e61b43380
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0xa8, Size: 0x8] 0x7e61b43400
	ColorMaterialInput BaseColor;//[Offset: 0xe8, Size: 0x14] 0x7e61b43480
	ScalarMaterialInput Metallic;//[Offset: 0xfc, Size: 0x14] 0x7e61b43500
	ScalarMaterialInput Specular;//[Offset: 0x110, Size: 0x14] 0x7e61b43580
	ScalarMaterialInput Roughness;//[Offset: 0x124, Size: 0x14] 0x7e61b43600
	ScalarMaterialInput Anisotropy;//[Offset: 0x138, Size: 0x14] 0x7e61b43680
	VectorMaterialInput Normal;//[Offset: 0x14c, Size: 0x14] 0x7e61b43700
	VectorMaterialInput Tangent;//[Offset: 0x160, Size: 0x14] 0x7e61b43780
	ColorMaterialInput EmissiveColor;//[Offset: 0x174, Size: 0x14] 0x7e61b43800
	byte MaterialDomain;//[Offset: 0x188, Size: 0x1] 0x7e61b43880
	byte BlendMode;//[Offset: 0x189, Size: 0x1] 0x7e61b43900
	byte DecalBlendMode;//[Offset: 0x18a, Size: 0x1] 0x7e61b43980
	byte MaterialDecalResponse;//[Offset: 0x18b, Size: 0x1] 0x7e61b43a00
	byte ShadingModel;//[Offset: 0x18c, Size: 0x1] 0x7e61b43a80
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18d, Size: 0x1] 0x7e61b43b00
	MaterialShadingModelField ShadingModels;//[Offset: 0x18e, Size: 0x2] 0x7e61b43b80
	float OpacityMaskClipValue;//[Offset: 0x190, Size: 0x4] 0x7e61b43c00
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x194, Size: 0x14] 0x7e61b43c80
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x1a8, Size: 0x14] 0x7e61b43d00
	ScalarMaterialInput Refraction;//[Offset: 0x1bc, Size: 0x14] 0x7e61b43d80
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x1d0, Size: 0x18] 0x7e61b43e00
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x1e8, Size: 0x14] 0x7e61b43e80
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1fc, Size: 0x14] 0x7e61b43f00
	StrataMaterialInput FrontMaterial;//[Offset: 0x210, Size: 0x14] 0x7e61b43f80
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1] 0x7e61b44000
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1] 0x7e61b44080
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1] 0x7e61b44100
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x224, Size: 0x1] 0x7e61b44180
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x224, Size: 0x1] 0x7e61b44200
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x224, Size: 0x1] 0x7e61b42180
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x224, Size: 0x1] 0x7e61b42200
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x224, Size: 0x1] 0x7e61b42280
	byte TranslucencyPass;//[Offset: 0x225, Size: 0x1] 0x7e61b42300
	byte TranslucencyLightingMode;//[Offset: 0x226, Size: 0x1] 0x7e61b42380
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x227, Size: 0x1] 0x7e61b42400
	int NumCustomizedUVs;//[Offset: 0x228, Size: 0x4] 0x7e61b42480
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x22c, Size: 0x4] 0x7e61b42500
	float TranslucentShadowDensityScale;//[Offset: 0x230, Size: 0x4] 0x7e61b42580
	float TranslucentSelfShadowDensityScale;//[Offset: 0x234, Size: 0x4] 0x7e61b42600
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x238, Size: 0x4] 0x7e61b42680
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x23c, Size: 0x4] 0x7e61b42700
	float TranslucentBackscatteringExponent;//[Offset: 0x240, Size: 0x4] 0x7e61b42780
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x244, Size: 0x10] 0x7e61b42800
	float TranslucentShadowStartOffset;//[Offset: 0x254, Size: 0x4] 0x7e61b42880
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x7e61b42900
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1] 0x7e61b42980
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1] 0x7e61b42a00
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 0x1] 0x7e61b42a80
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 0x1] 0x7e61b42b00
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 0x1] 0x7e61b42b80
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x258, Size: 0x1] 0x7e61b42c00
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x258, Size: 0x1] 0x7e61b42c80
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259, Size: 0x1] 0x7e61b42d00
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259, Size: 0x1] 0x7e61b42d80
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x259, Size: 0x1] 0x7e61b42e00
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x259, Size: 0x1] 0x7e61b42e80
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x259, Size: 0x1] 0x7e61b42f00
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x259, Size: 0x1] 0x7e61b42f80
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x259, Size: 0x1] 0x7e61b43000
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x259, Size: 0x1] 0x7e61b43080
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a, Size: 0x1] 0x7e61b43100
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25a, Size: 0x1] 0x7e61b43180
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25a, Size: 0x1] 0x7e61b41100
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25a, Size: 0x1] 0x7e61b41180
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25a, Size: 0x1] 0x7e61b41200
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25a, Size: 0x1] 0x7e61b41280
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25a, Size: 0x1] 0x7e61b41300
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25a, Size: 0x1] 0x7e61b41380
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25b, Size: 0x1] 0x7e61b41400
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25b, Size: 0x1] 0x7e61b41480
	bool bUsedWithNanite;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25b, Size: 0x1] 0x7e61b41500
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25b, Size: 0x1] 0x7e61b41580
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25b, Size: 0x1] 0x7e61b41600
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25b, Size: 0x1] 0x7e61b41680
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25b, Size: 0x1] 0x7e61b41700
	byte FloatPrecisionMode;//[Offset: 0x25c, Size: 0x1] 0x7e61b41780
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25d, Size: 0x1] 0x7e61b41800
	bool bMobileEnableHighQualityBRDF;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25d, Size: 0x1] 0x7e61b41880
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25d, Size: 0x1] 0x7e61b41900
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25d, Size: 0x1] 0x7e61b41980
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25d, Size: 0x1] 0x7e61b41a00
	bool bForwardBlendsSkyLightCubemaps;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25d, Size: 0x1] 0x7e61b41a80
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25d, Size: 0x1] 0x7e61b41b00
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25d, Size: 0x1] 0x7e61b41b80
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25e, Size: 0x1] 0x7e61b41c00
	bool Wireframe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25e, Size: 0x1] 0x7e61b41c80
	byte ShadingRate;//[Offset: 0x25f, Size: 0x1] 0x7e61b41d00
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1] 0x7e61b41d80
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 0x1] 0x7e61b41e00
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x260, Size: 0x1] 0x7e61b41e80
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x260, Size: 0x1] 0x7e61b41f00
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x260, Size: 0x1] 0x7e61b41f80
	bool bEnableExecWire;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x260, Size: 0x1] 0x7e61b42000
	bool bEnableNewHLSLGenerator;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x260, Size: 0x1] 0x7e61b42080
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x260, Size: 0x1] 0x7e61b42100
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x261, Size: 0x1] 0x7e61b40080
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x261, Size: 0x1] 0x7e61b40100
	bool bIsSky;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x261, Size: 0x1] 0x7e61b40180
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x261, Size: 0x1] 0x7e61b40200
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x261, Size: 0x1] 0x7e61b40280
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x261, Size: 0x1] 0x7e61b40300
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x261, Size: 0x1] 0x7e61b40380
	byte BlendableLocation;//[Offset: 0x262, Size: 0x1] 0x7e61b40400
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x263, Size: 0x1] 0x7e61b40480
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x263, Size: 0x1] 0x7e61b40500
	byte StencilCompare;//[Offset: 0x264, Size: 0x1] 0x7e61b40580
	byte StencilRefValue;//[Offset: 0x265, Size: 0x1] 0x7e61b40600
	byte RefractionMode;//[Offset: 0x266, Size: 0x1] 0x7e61b40680
	int BlendablePriority;//[Offset: 0x268, Size: 0x4] 0x7e61b40700
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1] 0x7e61b40780
	uint32 UsageFlagWarnings;//[Offset: 0x270, Size: 0x4] 0x7e61b40800
	float RefractionDepthBias;//[Offset: 0x274, Size: 0x4] 0x7e61b40880
	Guid StateId;//[Offset: 0x278, Size: 0x10] 0x7e61b40900

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x7e84e37e80
	FName InputName;//[Offset: 0x4, Size: 0x8] 0x7e84e37d80
	FName ExpressionName;//[Offset: 0xc, Size: 0x8] 0x7e84e37a00

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2] 0x7e6161d580

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x14, Size: 0x4] 0x7e84e38480

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x7e8460e880
	FName InputName;//[Offset: 0x4, Size: 0x8] 0x7e84884b00
	FName ExpressionName;//[Offset: 0xc, Size: 0x8] 0x7e84884e00

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: StrataMaterialInput.MaterialInput

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x9c] 0x7e61be3200

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10] 0x7e61681c80
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10] 0x7e61681d00
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4] 0x7e61681d80
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4] 0x7e61681e00
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61681e80
	LinearColor Tint;//[Offset: 0x2c, Size: 0x10] 0x7e61681f00
	float ScatterRadius;//[Offset: 0x3c, Size: 0x4] 0x7e61681f80
	LinearColor SubsurfaceColor;//[Offset: 0x40, Size: 0x10] 0x7e61682000
	LinearColor FalloffColor;//[Offset: 0x50, Size: 0x10] 0x7e61682080
	LinearColor BoundaryColorBleed;//[Offset: 0x60, Size: 0x10] 0x7e61682100
	float ExtinctionScale;//[Offset: 0x70, Size: 0x4] 0x7e61680080
	float NormalScale;//[Offset: 0x74, Size: 0x4] 0x7e61680100
	float ScatteringDistribution;//[Offset: 0x78, Size: 0x4] 0x7e61680180
	float IOR;//[Offset: 0x7c, Size: 0x4] 0x7e61680200
	float Roughness0;//[Offset: 0x80, Size: 0x4] 0x7e61680280
	float Roughness1;//[Offset: 0x84, Size: 0x4] 0x7e61680300
	float LobeMix;//[Offset: 0x88, Size: 0x4] 0x7e61680380
	LinearColor TransmissionTintColor;//[Offset: 0x8c, Size: 0x10] 0x7e61680400

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4] 0x7e6164f700
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4] 0x7e6164f780
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4] 0x7e6164d700
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7e6164d780
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7e6164d800
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7e6164d880
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7e6164d900
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x7e6164d980

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4] 0x7e6164f580
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4] 0x7e6164f600
	FName TextureName;//[Offset: 0x8, Size: 0x8] 0x7e6164f680

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Vector2D
	double X;//[Offset: 0x0, Size: 0x8] 0x7e8412ed80
	double Y;//[Offset: 0x8, Size: 0x8] 0x7e8412ed00

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0x18] 0x7e8412eb80
	Vector Max;//[Offset: 0x18, Size: 0x18] 0x7e8412c680
	byte IsValid;//[Offset: 0x30, Size: 0x1] 0x7e8412c600

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x33b358ebd041 0x7e61b1e400
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x33b258ebd041 0x7e61b1e4e0
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x33b158ebd041 0x7e61b1e5c0
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x33ed58ebd041 0x7e61b1e6a0
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x33af58ebd041 0x7e61b1adc0
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x33ae58ebd041 0x7e61b1aea0
	void SetRuntimeVirtualTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, RuntimeVirtualTexture* Value);// 0x33ad58ebd041 0x7e61b1af80
	void SetRuntimeVirtualTextureParameterValue(FName ParameterName, RuntimeVirtualTexture* Value);// 0x33ac58ebd041 0x7e61b1b060
	void SetDoubleVectorParameterValue(FName ParameterName, Vector Value);// 0x33ab58ebd041 0x7e61b1b140
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x33aa58ebd041 0x7e61b1b220
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x33a958ebd041 0x7e61b1b300
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x33a858ebd041 0x7e61b1b3e0
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x33a758ebd041 0x7e61b1b4c0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x33a658ebd041 0x7e61b1b5a0
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x33a558ebd041 0x7e61b1b680
	float K2_GetScalarParameterValue(FName ParameterName);// 0x33a458ebd041 0x7e61b1b760
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x33a358ebd041 0x7e61b1b840
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x33a258ebd041 0x7e61b1b920
	void CopyInterpParameters(MaterialInstance* Source);// 0x33a158ebd041 0x7e61b1ba00

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 0x8] 0x7e618ef080
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0xa0, Size: 0x8] 0x7e618ef100
	MaterialInterface* Parent;//[Offset: 0xe0, Size: 0x8] 0x7e618ef180
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1] 0x7e618ef200
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1] 0x7e618ef280
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xf0, Size: 0x10] 0x7e61898bc0
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x100, Size: 0x10] 0x7e61898c60
	DoubleVectorParameterValue[] DoubleVectorParameterValues;//[Offset: 0x110, Size: 0x10] 0x7e61898d00
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x120, Size: 0x10] 0x7e61898da0
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x130, Size: 0x10] 0x7e61898e40
	FontParameterValue[] FontParameterValues;//[Offset: 0x140, Size: 0x10] 0x7e61898ee0
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x150, Size: 0x8] 0x7e618ef600
	StaticParameterSet StaticParameters;//[Offset: 0x168, Size: 0x58] 0x7e618ef680

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7e6164c800
	float ParameterValue;//[Offset: 0x10, Size: 0x4] 0x7e6164c880
	Guid ExpressionGuid;//[Offset: 0x14, Size: 0x10] 0x7e6164c900

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7e6164c680
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10] 0x7e6164c700
	Guid ExpressionGuid;//[Offset: 0x20, Size: 0x10] 0x7e6164c780

--------------------------------
Class: DoubleVectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7e6164e600
	Vector4d ParameterValue;//[Offset: 0x10, Size: 0x20] 0x7e6164e680
	Guid ExpressionGuid;//[Offset: 0x30, Size: 0x10] 0x7e6164e700

--------------------------------
Class: Vector4d
	double X;//[Offset: 0x0, Size: 0x8] 0x7e841e6580
	double Y;//[Offset: 0x8, Size: 0x8] 0x7e841e6500
	double Z;//[Offset: 0x10, Size: 0x8] 0x7e841e6480
	double W;//[Offset: 0x18, Size: 0x8] 0x7e841e6400

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7e6164e480
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x7e6164e500
	Guid ExpressionGuid;//[Offset: 0x18, Size: 0x10] 0x7e6164e580

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0xe0, Size: 0x10] 0x7e618c2280
	int LevelIndex;//[Offset: 0xf0, Size: 0x4] 0x7e618c2300
	int LODBias;//[Offset: 0xf4, Size: 0x4] 0x7e618c2380
	byte CompressionSettings;//[Offset: 0xf8, Size: 0x1] 0x7e618c2400
	byte Filter;//[Offset: 0xf9, Size: 0x1] 0x7e618c2480
	enum MipLoadOptions;//[Offset: 0xfa, Size: 0x1] 0x7e61892c20
	byte LODGroup;//[Offset: 0xfb, Size: 0x1] 0x7e618c2580
	PerPlatformFloat Downscale;//[Offset: 0xfc, Size: 0x4] 0x7e618c2600
	enum DownscaleOptions;//[Offset: 0x100, Size: 0x1] 0x7e61892cc0
	bool sRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x101, Size: 0x1] 0x7e618c2700
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x101, Size: 0x1] 0x7e618c2780
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x101, Size: 0x1] 0x7e618c2800
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x101, Size: 0x1] 0x7e618c2880
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x101, Size: 0x1] 0x7e618c2900
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x101, Size: 0x1] 0x7e618c2980
	AssetUserData*[] AssetUserData;//[Offset: 0x108, Size: 0x10] 0x7e61892d60

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8] 0x7e618c2a80
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4] 0x7e618c2b00
	PerQualityLevelInt NoRefStreamingLODBias;//[Offset: 0x50, Size: 0x68] 0x7e618c2b80
	int StreamingIndex;//[Offset: 0xb8, Size: 0x4] 0x7e618c2c00
	int CachedCombinedLODBias;//[Offset: 0xbc, Size: 0x4] 0x7e618c2c80
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e618c2d00
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x7e618c2d80
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x7e618c2e00
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x7e618c2e80
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x7e618c2f00
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x7e618c2f80
	void SetForceMipLevelsToBeResident(float Seconds, int CinematicLODGroupMask);// 0x26e858ebd041 0x7e618ba7a0

--------------------------------
Class: PerQualityLevelInt
	int Default;//[Offset: 0x10, Size: 0x4] 0x7e6165a600
	<int,int> PerQuality;//[Offset: 0x18, Size: 0x50] 0x7e61639640

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4] 0x7e6152cf80

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7e6164e300
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x7e6164e380
	Guid ExpressionGuid;//[Offset: 0x18, Size: 0x10] 0x7e6164e400

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4] 0x7e61ba7d00
	int TileSize;//[Offset: 0x2c, Size: 0x4] 0x7e61ba7d80
	int TileBorderSize;//[Offset: 0x30, Size: 0x4] 0x7e61ba7e00
	enum MaterialType;//[Offset: 0x34, Size: 0x1] 0x7e61a5d1c0
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7e61ba7f00
	bool bUseLowQualityCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x7e61ba7f80
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x7e61ba8000
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61ba8080
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e61ba8100
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x7e61ba8180
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1] 0x7e61ba8200
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4] 0x7e61ba8280
	byte LODGroup;//[Offset: 0x40, Size: 0x1] 0x7e61ba8300
	int Size;//[Offset: 0x44, Size: 0x4] 0x7e61ba8380
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8] 0x7e61ba8400
	int GetTileSize();// 0x34f558ebd041 0x7e61b9c9c0
	int GetTileCount();// 0x34b258ebd041 0x7e61b990e0
	int GetTileBorderSize();// 0x34b158ebd041 0x7e61b991c0
	int GetSize();// 0x34b058ebd041 0x7e61b992a0
	int GetPageTableSize();// 0x34af58ebd041 0x7e61b99380

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int FirstResourceMemMip;//[Offset: 0x1f0, Size: 0x4] 0x7e61a22b80
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1] 0x7e61a22c00
	byte AddressX;//[Offset: 0x1f5, Size: 0x1] 0x7e61a22c80
	byte AddressY;//[Offset: 0x1f6, Size: 0x1] 0x7e61a22d00
	IntPoint ImportedSize;//[Offset: 0x1f8, Size: 0x8] 0x7e61a22d80
	int Blueprint_GetSizeY();// 0x2ddc58ebd041 0x7e61a0c8e0
	int Blueprint_GetSizeX();// 0x2e1d58ebd041 0x7e61a0c9c0

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4] 0x7e8412fd00
	int Y;//[Offset: 0x4, Size: 0x4] 0x7e8412fc80

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7e6164e100
	Font* FontValue;//[Offset: 0x10, Size: 0x8] 0x7e6164e180
	int FontPage;//[Offset: 0x18, Size: 0x4] 0x7e6164e200
	Guid ExpressionGuid;//[Offset: 0x1c, Size: 0x10] 0x7e6164e280

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1] 0x7e61a50d80
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10] 0x7e61a50e20
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10] 0x7e61a50ec0
	int IsRemapped;//[Offset: 0x58, Size: 0x4] 0x7e61a4d980
	float EmScale;//[Offset: 0x5c, Size: 0x4] 0x7e61a4da00
	float Ascent;//[Offset: 0x60, Size: 0x4] 0x7e61a4da80
	float Descent;//[Offset: 0x64, Size: 0x4] 0x7e61a4db00
	float Leading;//[Offset: 0x68, Size: 0x4] 0x7e61a4db80
	int Kerning;//[Offset: 0x6c, Size: 0x4] 0x7e61a4dc00
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8] 0x7e61a4dc80
	int NumCharacters;//[Offset: 0x118, Size: 0x4] 0x7e61a4dd00
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10] 0x7e61a50f60
	float ScalingFactor;//[Offset: 0x130, Size: 0x4] 0x7e61a4de00
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4] 0x7e61a4de80
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8] 0x7e61a4df00
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38] 0x7e61a4df80

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4] 0x7e61641200
	int StartV;//[Offset: 0x4, Size: 0x4] 0x7e61641280
	int USize;//[Offset: 0x8, Size: 0x4] 0x7e61641300
	int VSize;//[Offset: 0xc, Size: 0x4] 0x7e61641380
	byte TextureIndex;//[Offset: 0x10, Size: 0x1] 0x7e61641400
	int VerticalOffset;//[Offset: 0x14, Size: 0x4] 0x7e61641480

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10] 0x7e61642480
	float Height;//[Offset: 0x10, Size: 0x4] 0x7e61642500
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7e61642580
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x7e61642600
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x7e61642680
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x7e61642700
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x7e61642780
	byte CharacterSet;//[Offset: 0x15, Size: 0x1] 0x7e61642800
	FString Chars;//[Offset: 0x18, Size: 0x10] 0x7e61642880
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10] 0x7e61642900
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10] 0x7e61642980
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10] 0x7e61642a00
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7e61642a80
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7e61642b00
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10] 0x7e61642b80
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7e61642c00
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4] 0x7e61642c80
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4] 0x7e61642d00
	int XPadding;//[Offset: 0x78, Size: 0x4] 0x7e61642d80
	int YPadding;//[Offset: 0x7c, Size: 0x4] 0x7e61642e00
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4] 0x7e61642e80
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4] 0x7e61642f00
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4] 0x7e61642f80
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4] 0x7e61643000
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61643080
	int Kerning;//[Offset: 0x94, Size: 0x4] 0x7e61643100
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7e61643180
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4] 0x7e61641100
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4] 0x7e61641180

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10] 0x7e6156f300
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18] 0x7e6156f380
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10] 0x7e84ddfce0

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10] 0x7e84ddfba0

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6156f700
	FontData Font;//[Offset: 0x8, Size: 0x28] 0x7e6156f780

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10] 0x7e6156d700
	enum Hinting;//[Offset: 0x14, Size: 0x1] 0x7e84ddfb00
	enum LoadingPolicy;//[Offset: 0x15, Size: 0x1] 0x7e84e22360
	int SubFaceIndex;//[Offset: 0x18, Size: 0x4] 0x7e6156d880
	Object* FontFaceAsset;//[Offset: 0x20, Size: 0x8] 0x7e6156d900

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10] 0x7e6156f580
	float ScalingFactor;//[Offset: 0x10, Size: 0x4] 0x7e6156f600

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10] 0x7e84ddfc40
	FString Cultures;//[Offset: 0x28, Size: 0x10] 0x7e6156f500

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x7e8412e800
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x7e8412e680

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7e8412e780
	int Value;//[Offset: 0x4, Size: 0x4] 0x7e8412e700

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e6164da00
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e6164da80
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e6164db00
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e6164db80
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e6164dc00
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7e6164dc80
	bool bOverride_OutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7e6164dd00
	bool TwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7e6164dd80
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7e6164de00
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7e6164de80
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7e6164df00
	byte BlendMode;//[Offset: 0x2, Size: 0x1] 0x7e6164df80
	byte ShadingModel;//[Offset: 0x3, Size: 0x1] 0x7e6164e000
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4] 0x7e6164e080

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10] 0x7e84e5f7e0
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10] 0x7e84e5f880
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10] 0x7e84e5f920
	MaterialLayersFunctions MaterialLayers;//[Offset: 0x30, Size: 0x20] 0x7e61680b00
	bool bHasMaterialLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e61680b80

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x7e61681000

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7e61681080
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e6166f800
	Guid ExpressionGuid;//[Offset: 0x14, Size: 0x10] 0x7e6166f880

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x7e61680e00
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x7e61680e80
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1] 0x7e61680f00
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1] 0x7e61680f80

--------------------------------
Class: StaticTerrainLayerWeightParameter
	FName LayerName;//[Offset: 0x0, Size: 0x8] 0x7e61680c80
	int WeightmapIndex;//[Offset: 0x8, Size: 0x4] 0x7e61680d00
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7e61680d80

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10] 0x7e84e5c900
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10] 0x7e84e5c9a0

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x7e61489300
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1] 0x7e61489380
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1] 0x7e61489400
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 0x1] 0x7e61489480
	bool bIsLocalViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x280, Size: 0x1] 0x7e61487400
	float BaseEyeHeight;//[Offset: 0x284, Size: 0x4] 0x7e61487480
	byte AutoPossessPlayer;//[Offset: 0x288, Size: 0x1] 0x7e61487500
	enum AutoPossessAI;//[Offset: 0x289, Size: 0x1] 0x7e616933a0
	byte RemoteViewPitch;//[Offset: 0x28a, Size: 0x1] 0x7e61487600
	class Controller* AIControllerClass;//[Offset: 0x290, Size: 0x8] 0x7e61693440
	PlayerState* PlayerState;//[Offset: 0x298, Size: 0x8] 0x7e61487680
	Controller* LastHitBy;//[Offset: 0x2a8, Size: 0x8] 0x7e61487700
	Controller* Controller;//[Offset: 0x2b0, Size: 0x8] 0x7e61487780
	Controller* PreviousController;//[Offset: 0x2b8, Size: 0x8] 0x7e61487800
	delegate ReceiveControllerChangedDelegate;//[Offset: 0x2c4, Size: 0x1] 0x7e61487880
	delegate ReceiveRestartedDelegate;//[Offset: 0x2c5, Size: 0x1] 0x7e61487900
	Vector ControlInputVector;//[Offset: 0x2c8, Size: 0x18] 0x7e61487980
	Vector LastControlInputVector;//[Offset: 0x2e0, Size: 0x18] 0x7e61487a00
	void SpawnDefaultController();// 0x1de758ebd041 0x7e614bc640
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x1de658ebd041 0x7e614bc720
	void ReceiveUnpossessed(Controller* OldController);// 0x1de558ebd041 0x7e614bc800
	void ReceiveRestarted();// 0x1de458ebd041 0x7e614bc8e0
	void ReceivePossessed(Controller* NewController);// 0x1e2558ebd041 0x7e614bc9c0
	void ReceiveControllerChanged(Controller* OldController, Controller* NewController);// 0x1de258ebd041 0x7e614b90e0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x1de158ebd041 0x7e614b91c0
	void OnRep_PlayerState();// 0x1de058ebd041 0x7e614b92a0
	void OnRep_Controller();// 0x1ddf58ebd041 0x7e614b9380
	bool IsPlayerControlled();// 0x1dde58ebd041 0x7e614b9460
	bool IsPawnControlled();// 0x1ddd58ebd041 0x7e614b9540
	bool IsMoveInputIgnored();// 0x1ddc58ebd041 0x7e614b9620
	bool IsLocallyViewed();// 0x1ddb58ebd041 0x7e614b9700
	bool IsLocallyControlled();// 0x1dda58ebd041 0x7e614b97e0
	bool IsControlled();// 0x1dd958ebd041 0x7e614b98c0
	bool IsBotControlled();// 0x1dd858ebd041 0x7e614b99a0
	Vector GetPendingMovementInputVector();// 0x1dd758ebd041 0x7e614b9a80
	Vector GetNavAgentLocation();// 0x1dd658ebd041 0x7e614b9b60
	PawnMovementComponent* GetMovementComponent();// 0x1dd558ebd041 0x7e614b9c40
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x1dd458ebd041 0x7e614b9d20
	PlayerController* GetLocalViewingPlayerController();// 0x1dd358ebd041 0x7e614b9e00
	Vector GetLastMovementInputVector();// 0x1dd258ebd041 0x7e614b9ee0
	Rotator GetControlRotation();// 0x1dd158ebd041 0x7e614b9fc0
	Controller* GetController();// 0x1dd058ebd041 0x7e614ba0a0
	Rotator GetBaseAimRotation();// 0x1dcf58ebd041 0x7e614ba180
	void DetachFromControllerPendingDestroy();// 0x1dce58ebd041 0x7e614ba260
	Vector ConsumeMovementInputVector();// 0x1dcd58ebd041 0x7e614ba340
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x1dcc58ebd041 0x7e614ba420
	void AddControllerYawInput(float Val);// 0x1dcb58ebd041 0x7e614ba500
	void AddControllerRollInput(float Val);// 0x1dca58ebd041 0x7e614ba5e0
	void AddControllerPitchInput(float Val);// 0x1a6158ebd041 0x7e614ba6c0

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x280, Size: 0x8] 0x7e61887680
	delegate OnInstigatedAnyDamage;//[Offset: 0x290, Size: 0x10] 0x7e61887700
	delegate OnPossessedPawnChanged;//[Offset: 0x2a0, Size: 0x10] 0x7e61887780
	FName StateName;//[Offset: 0x2b0, Size: 0x8] 0x7e61887800
	Pawn* Pawn;//[Offset: 0x2b8, Size: 0x8] 0x7e61887880
	Character* Character;//[Offset: 0x2c8, Size: 0x8] 0x7e61887900
	SceneComponent* TransformComponent;//[Offset: 0x2d0, Size: 0x8] 0x7e61887980
	Rotator ControlRotation;//[Offset: 0x2f0, Size: 0x18] 0x7e61887a00
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 0x1] 0x7e61887a80
	void UnPossess();// 0x264a58ebd041 0x7e618b1120
	void StopMovement();// 0x264958ebd041 0x7e618b1200
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x264858ebd041 0x7e618b12e0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x264758ebd041 0x7e618b13c0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x264658ebd041 0x7e618b14a0
	void SetControlRotation(out const Rotator NewRotation);// 0x264558ebd041 0x7e618b1580
	void ResetIgnoreMoveInput();// 0x264458ebd041 0x7e618b1660
	void ResetIgnoreLookInput();// 0x264358ebd041 0x7e618b1740
	void ResetIgnoreInputFlags();// 0x264258ebd041 0x7e618b1820
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x264158ebd041 0x7e618b1900
	void ReceivePossess(Pawn* PossessedPawn);// 0x264058ebd041 0x7e618b19e0
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x263f58ebd041 0x7e618b1ac0
	void Possess(Pawn* InPawn);// 0x263e58ebd041 0x7e618b1ba0
	void OnRep_PlayerState();// 0x267f58ebd041 0x7e618b1c80
	void OnRep_Pawn();// 0x263c58ebd041 0x7e6175e780
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x263b58ebd041 0x7e6175e860
	Pawn* K2_GetPawn();// 0x263a58ebd041 0x7e6175e940
	bool IsPlayerController();// 0x263958ebd041 0x7e6175ea20
	bool IsMoveInputIgnored();// 0x263858ebd041 0x7e6175eb00
	bool IsLookInputIgnored();// 0x263758ebd041 0x7e6175ebe0
	bool IsLocalPlayerController();// 0x263658ebd041 0x7e6175ecc0
	bool IsLocalController();// 0x263558ebd041 0x7e6175eda0
	Actor* GetViewTarget();// 0x263458ebd041 0x7e6175ee80
	void GetPlayerViewPoint(out Vector Location, out Rotator Rotation);// 0x263358ebd041 0x7e6175ef60
	Rotator GetDesiredRotation();// 0x263258ebd041 0x7e6175f040
	Rotator GetControlRotation();// 0x263158ebd041 0x7e6175f120
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x263058ebd041 0x7e6175f200
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x262f58ebd041 0x7e6175f2e0

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e61a24200
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7e61a22180
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7e61a22200
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4] 0x7e61a22280
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4] 0x7e61a22300
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4] 0x7e61a22380
	float DamageFalloff;//[Offset: 0x38, Size: 0x4] 0x7e61a22400

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x278, Size: 0x4] 0x7e61b8a780
	int PlayerId;//[Offset: 0x27c, Size: 0x4] 0x7e61b8a800
	byte CompressedPing;//[Offset: 0x280, Size: 0x1] 0x7e61b8a880
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282, Size: 0x1] 0x7e61b8a900
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x282, Size: 0x1] 0x7e61b8a980
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x282, Size: 0x1] 0x7e61b8aa00
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x282, Size: 0x1] 0x7e61b8aa80
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x282, Size: 0x1] 0x7e61b8ab00
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x282, Size: 0x1] 0x7e61b8ab80
	int StartTime;//[Offset: 0x284, Size: 0x4] 0x7e61b8ac00
	class LocalMessage* EngineMessageClass;//[Offset: 0x288, Size: 0x8] 0x7e61a5e200
	FString SavedNetworkAddress;//[Offset: 0x298, Size: 0x10] 0x7e61b8ac80
	UniqueNetIdRepl UniqueId;//[Offset: 0x2a8, Size: 0x30] 0x7e61b8ad00
	delegate OnPawnSet;//[Offset: 0x2e0, Size: 0x10] 0x7e61b8ad80
	Pawn* PawnPrivate;//[Offset: 0x2f0, Size: 0x8] 0x7e61b8ae00
	FString PlayerNamePrivate;//[Offset: 0x368, Size: 0x10] 0x7e61b8ae80
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x345f58ebd041 0x7e61b96600
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x345e58ebd041 0x7e61b966e0
	void OnRep_UniqueId();// 0x345d58ebd041 0x7e61b967c0
	void OnRep_Score();// 0x345c58ebd041 0x7e61b968a0
	void OnRep_PlayerName();// 0x345b58ebd041 0x7e61b96980
	void OnRep_PlayerId();// 0x345a58ebd041 0x7e61b96a60
	void OnRep_bIsInactive();// 0x345958ebd041 0x7e61b96b40
	void OnPawnPrivateDestroyed(Actor* InActor);// 0x345858ebd041 0x7e61b96c20
	bool IsOnlyASpectator();// 0x345758ebd041 0x7e61b96d00
	FString GetPlayerName();// 0x345658ebd041 0x7e61b96de0
	PlayerController* GetPlayerController();// 0x345558ebd041 0x7e61b96ec0
	float GetPingInMilliseconds();// 0x345458ebd041 0x7e61b96fa0
	Pawn* GetPawn();// 0x345358ebd041 0x7e61b97080
	UniqueNetIdRepl BP_GetUniqueId();// 0x345258ebd041 0x7e61b97160

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x20, Size: 0x10] 0x7e84e24b60

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x310, Size: 0x8] 0x7e618c1500
	Pawn* AcknowledgedPawn;//[Offset: 0x318, Size: 0x8] 0x7e618c1580
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x320, Size: 0x8] 0x7e618c1600
	HUD* MyHUD;//[Offset: 0x328, Size: 0x8] 0x7e618c1680
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x330, Size: 0x8] 0x7e618c1700
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x338, Size: 0x8] 0x7e61892f40
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x7e618c1780
	Rotator TargetViewRotation;//[Offset: 0x348, Size: 0x18] 0x7e618c1800
	float SmoothTargetViewRotationSpeed;//[Offset: 0x378, Size: 0x4] 0x7e618c1880
	Actor*[] HiddenActors;//[Offset: 0x380, Size: 0x10] 0x7e61892fe0
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x390, Size: 0x10] 0x7e61893080
	float LastSpectatorStateSynchTime;//[Offset: 0x3a4, Size: 0x4] 0x7e618c1a00
	Vector LastSpectatorSyncLocation;//[Offset: 0x3a8, Size: 0x18] 0x7e618c1a80
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3c0, Size: 0x18] 0x7e618c1b00
	int ClientCap;//[Offset: 0x3d8, Size: 0x4] 0x7e618c1b80
	CheatManager* CheatManager;//[Offset: 0x3e0, Size: 0x8] 0x7e618c1c00
	class CheatManager* CheatClass;//[Offset: 0x3e8, Size: 0x8] 0x7e61893120
	PlayerInput* PlayerInput;//[Offset: 0x3f0, Size: 0x8] 0x7e618c1c80
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3f8, Size: 0x10] 0x7e618931c0
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x488, Size: 0x1] 0x7e618c1d80
	byte NetPlayerIndex;//[Offset: 0x489, Size: 0x1] 0x7e618c1e00
	NetConnection* PendingSwapConnection;//[Offset: 0x4e8, Size: 0x8] 0x7e618c1e80
	NetConnection* NetConnection;//[Offset: 0x4f0, Size: 0x8] 0x7e618c1f00
	float InputYawScale;//[Offset: 0x510, Size: 0x4] 0x7e618c1f80
	float InputPitchScale;//[Offset: 0x514, Size: 0x4] 0x7e618c2000
	float InputRollScale;//[Offset: 0x518, Size: 0x4] 0x7e618c2080
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51c, Size: 0x1] 0x7e618c2100
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51c, Size: 0x1] 0x7e618c0080
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51c, Size: 0x1] 0x7e618c0100
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51c, Size: 0x1] 0x7e618c0180
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x51c, Size: 0x1] 0x7e618c0200
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x51c, Size: 0x1] 0x7e618c0280
	bool bEnableStreamingSource;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x51c, Size: 0x1] 0x7e618c0300
	bool bStreamingSourceShouldActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51c, Size: 0x1] 0x7e618c0380
	bool bStreamingSourceShouldBlockOnSlowStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 0x1] 0x7e618c0400
	float ForceFeedbackScale;//[Offset: 0x520, Size: 0x4] 0x7e618c0480
	Key[] ClickEventKeys;//[Offset: 0x528, Size: 0x10] 0x7e61893260
	byte DefaultMouseCursor;//[Offset: 0x538, Size: 0x1] 0x7e618c0580
	byte CurrentMouseCursor;//[Offset: 0x539, Size: 0x1] 0x7e618c0600
	byte DefaultClickTraceChannel;//[Offset: 0x53a, Size: 0x1] 0x7e618c0680
	byte CurrentClickTraceChannel;//[Offset: 0x53b, Size: 0x1] 0x7e618c0700
	float HitResultTraceDistance;//[Offset: 0x53c, Size: 0x4] 0x7e618c0780
	uint16 SeamlessTravelCount;//[Offset: 0x540, Size: 0x2] 0x7e618c0800
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x542, Size: 0x2] 0x7e618c0880
	InputComponent* InactiveStateInputComponent;//[Offset: 0x5b8, Size: 0x8] 0x7e618c0900
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c0, Size: 0x1] 0x7e618c0980
	TouchInterface* CurrentTouchInterface;//[Offset: 0x5d8, Size: 0x8] 0x7e618c0a00
	SpectatorPawn* SpectatorPawn;//[Offset: 0x658, Size: 0x8] 0x7e618c0a80
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 0x1] 0x7e618c0b00
	Vector SpawnLocation;//[Offset: 0x668, Size: 0x18] 0x7e618c0b80
	bool WasInputKeyJustReleased(Key Key);// 0x26e158ebd041 0x7e618b7400
	bool WasInputKeyJustPressed(Key Key);// 0x26e058ebd041 0x7e618b74e0
	void ToggleSpeaking(bool bInSpeaking);// 0x26df58ebd041 0x7e618b75c0
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x26de58ebd041 0x7e618b76a0
	void SwitchLevel(FString URL);// 0x26dd58ebd041 0x7e618b7780
	bool StreamingSourceShouldBlockOnSlowStreaming();// 0x26dc58ebd041 0x7e618b7860
	bool StreamingSourceShouldActivate();// 0x26db58ebd041 0x7e618b7940
	void StopHapticEffect(enum Hand);// 0x26da58ebd041 0x7e618b7a20
	void StartFire(byte FireModeNum);// 0x26d958ebd041 0x7e618b7b00
	void SetVirtualJoystickVisibility(bool bVisible);// 0x26d858ebd041 0x7e618b7be0
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x26d758ebd041 0x7e618b7cc0
	void SetName(FString S);// 0x26d658ebd041 0x7e618b7da0
	void SetMouseLocation(const int X, const int Y);// 0x26d558ebd041 0x7e618b7e80
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x26d458ebd041 0x7e618b7f60
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x26d358ebd041 0x7e618b8040
	void SetDisableHaptics(bool bNewDisabled);// 0x26d258ebd041 0x7e618b8120
	void SetDeprecatedInputYawScale(float NewValue);// 0x26d158ebd041 0x7e618b8200
	void SetDeprecatedInputRollScale(float NewValue);// 0x26d058ebd041 0x7e618b82e0
	void SetDeprecatedInputPitchScale(float NewValue);// 0x26cf58ebd041 0x7e618b83c0
	void SetControllerLightColor(Color Color);// 0x26ce58ebd041 0x7e618b84a0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x26cd58ebd041 0x7e618b8580
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x26cc58ebd041 0x7e618b8660
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x26cb58ebd041 0x7e618b8740
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x26ca58ebd041 0x7e618b8820
	void ServerViewPrevPlayer();// 0x26c958ebd041 0x7e618b8900
	void ServerViewNextPlayer();// 0x26c858ebd041 0x7e618b89e0
	void ServerVerifyViewTarget();// 0x26c758ebd041 0x7e618b8ac0
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x26c658ebd041 0x7e618b8ba0
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x26c558ebd041 0x7e618b8c80
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x26c458ebd041 0x7e618b8d60
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x26c358ebd041 0x7e618b8e40
	void ServerUnblockPlayer(UniqueNetIdRepl PlayerId);// 0x26c258ebd041 0x7e618b8f20
	void ServerToggleAILogging();// 0x270358ebd041 0x7e618b9000
	void ServerShortTimeout();// 0x26c058ebd041 0x7e618b5720
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x26bf58ebd041 0x7e618b5800
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x26be58ebd041 0x7e618b58e0
	void ServerRestartPlayer();// 0x26bd58ebd041 0x7e618b59c0
	void ServerRecvClientInputFrame(int RecvClientInputFrame, const byte[] Data);// 0x26bc58ebd041 0x7e618b5aa0
	void ServerPause();// 0x26bb58ebd041 0x7e618b5b80
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x26ba58ebd041 0x7e618b5c60
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x26b958ebd041 0x7e618b5d40
	void ServerExecRPC(FString Msg);// 0x26b858ebd041 0x7e618b5e20
	void ServerExec(FString Msg);// 0x26b758ebd041 0x7e618b5f00
	void ServerCheckClientPossessionReliable();// 0x26b658ebd041 0x7e618b5fe0
	void ServerCheckClientPossession();// 0x26b558ebd041 0x7e618b60c0
	void ServerChangeName(FString S);// 0x26b458ebd041 0x7e618b61a0
	void ServerCamera(FName NewMode);// 0x26b358ebd041 0x7e618b6280
	void ServerBlockPlayer(UniqueNetIdRepl PlayerId);// 0x26b258ebd041 0x7e618b6360
	void ServerAcknowledgePossession(Pawn* P);// 0x26b158ebd041 0x7e618b6440
	void SendToConsole(FString Command);// 0x26b058ebd041 0x7e618b6520
	void RestartLevel();// 0x26af58ebd041 0x7e618b6600
	void ResetControllerLightColor();// 0x26ae58ebd041 0x7e618b66e0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x26ad58ebd041 0x7e618b67c0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x26ac58ebd041 0x7e618b68a0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x26ab58ebd041 0x7e618b6980
	void Pause();// 0x26aa58ebd041 0x7e618b6a60
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x26a958ebd041 0x7e618b6b40
	void LocalTravel(FString URL);// 0x26a858ebd041 0x7e618b6c20
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x26a758ebd041 0x7e618b6d00
	bool IsStreamingSourceEnabled();// 0x26a658ebd041 0x7e618b6de0
	bool IsInputKeyDown(Key Key);// 0x26a558ebd041 0x7e618b6ec0
	void GetViewportSize(out int SizeX, out int SizeY);// 0x26a458ebd041 0x7e618b6fa0
	SpectatorPawn* GetSpectatorPawn();// 0x26a358ebd041 0x7e618b7080
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x26a258ebd041 0x7e618b7160
	Vector GetInputVectorKeyState(Key Key);// 0x26a158ebd041 0x7e618b7240
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x26e258ebd041 0x7e618b7320
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x269f58ebd041 0x7e618b3a40
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x269e58ebd041 0x7e618b3b20
	float GetInputKeyTimeDown(Key Key);// 0x269d58ebd041 0x7e618b3c00
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x269c58ebd041 0x7e618b3ce0
	float GetInputAnalogKeyState(Key Key);// 0x269b58ebd041 0x7e618b3dc0
	HUD* GetHUD();// 0x269a58ebd041 0x7e618b3ea0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x269958ebd041 0x7e618b3f80
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x269858ebd041 0x7e618b4060
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x269758ebd041 0x7e618b4140
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x269658ebd041 0x7e618b4220
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x269558ebd041 0x7e618b4300
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x269458ebd041 0x7e618b43e0
	Vector GetFocalLocation();// 0x269358ebd041 0x7e618b44c0
	float GetDeprecatedInputYawScale();// 0x269258ebd041 0x7e618b45a0
	float GetDeprecatedInputRollScale();// 0x269158ebd041 0x7e618b4680
	float GetDeprecatedInputPitchScale();// 0x269058ebd041 0x7e618b4760
	void FOV(float NewFOV);// 0x268f58ebd041 0x7e618b4840
	void EnableCheats();// 0x268e58ebd041 0x7e618b4920
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x268d58ebd041 0x7e618b4a00
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x268c58ebd041 0x7e618b4ae0
	void ConsoleKey(Key Key);// 0x268b58ebd041 0x7e618b4bc0
	void ClientWasKicked(const FText KickReason);// 0x268a58ebd041 0x7e618b4ca0
	void ClientVoiceHandshakeComplete();// 0x268958ebd041 0x7e618b4d80
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x268858ebd041 0x7e618b4e60
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x268758ebd041 0x7e618b4f40
	void ClientUnmutePlayers(const UniqueNetIdRepl[] PlayerIds);// 0x268658ebd041 0x7e618b5020
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x268558ebd041 0x7e618b5100
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x268458ebd041 0x7e618b51e0
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x268358ebd041 0x7e618b52c0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x268258ebd041 0x7e618b53a0
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x268158ebd041 0x7e618b5480
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x268058ebd041 0x7e618b5560
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x26c158ebd041 0x7e618b5640
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x267e58ebd041 0x7e618b1d60
	void ClientStartOnlineSession();// 0x267d58ebd041 0x7e618b1e40
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x267c58ebd041 0x7e618b1f20
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x267b58ebd041 0x7e618b2000
	void ClientSpawnGenericCameraLensEffect(class Actor LensEffectEmitterClass);// 0x267a58ebd041 0x7e618b20e0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x267958ebd041 0x7e618b21c0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x267858ebd041 0x7e618b22a0
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x267758ebd041 0x7e618b2380
	void ClientSetHUD(class HUD NewHUDClass);// 0x267658ebd041 0x7e618b2460
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x267558ebd041 0x7e618b2540
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x267458ebd041 0x7e618b2620
	void ClientSetCameraMode(FName NewCamMode);// 0x267358ebd041 0x7e618b2700
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x267258ebd041 0x7e618b27e0
	void ClientSetBlockOnAsyncLoading();// 0x267158ebd041 0x7e618b28c0
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x267058ebd041 0x7e618b29a0
	void ClientReturnToMainMenu(FString ReturnReason);// 0x266f58ebd041 0x7e618b2a80
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x266e58ebd041 0x7e618b2b60
	void ClientRestart(Pawn* NewPawn);// 0x266d58ebd041 0x7e618b2c40
	void ClientReset();// 0x266c58ebd041 0x7e618b2d20
	void ClientRepObjRef(Object* Object);// 0x266b58ebd041 0x7e618b2e00
	void ClientRecvServerAckFrameDebug(byte NumBuffered, float TargetNumBufferedCmds);// 0x266a58ebd041 0x7e618b2ee0
	void ClientRecvServerAckFrame(int LastProcessedInputFrame, int RecvServerFrameNumber, int8 TimeDilation);// 0x266958ebd041 0x7e618b2fc0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x266858ebd041 0x7e618b30a0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x266758ebd041 0x7e618b3180
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x266658ebd041 0x7e618b3260
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x266558ebd041 0x7e618b3340
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x266458ebd041 0x7e618b3420
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x266358ebd041 0x7e618b3500
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x266258ebd041 0x7e618b35e0
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x266158ebd041 0x7e618b36c0
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x266058ebd041 0x7e618b37a0
	void ClientIgnoreMoveInput(bool bIgnore);// 0x265f58ebd041 0x7e618b3880
	void ClientIgnoreLookInput(bool bIgnore);// 0x26a058ebd041 0x7e618b3960
	void ClientGotoState(FName NewState);// 0x265d58ebd041 0x7e618b0080
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x265c58ebd041 0x7e618b0160
	void ClientForceGarbageCollection();// 0x265b58ebd041 0x7e618b0240
	void ClientFlushLevelStreaming();// 0x265a58ebd041 0x7e618b0320
	void ClientEndOnlineSession();// 0x265958ebd041 0x7e618b0400
	void ClientEnableNetworkVoice(bool bEnable);// 0x265858ebd041 0x7e618b04e0
	void ClientCommitMapChange();// 0x265758ebd041 0x7e618b05c0
	void ClientClearCameraLensEffects();// 0x265658ebd041 0x7e618b06a0
	void ClientCapBandwidth(int Cap);// 0x265558ebd041 0x7e618b0780
	void ClientCancelPendingMapChange();// 0x265458ebd041 0x7e618b0860
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x265358ebd041 0x7e618b0940
	void ClearAudioListenerOverride();// 0x265258ebd041 0x7e618b0a20
	void ClearAudioListenerAttenuationOverride();// 0x265158ebd041 0x7e618b0b00
	bool CanRestartPlayer();// 0x265058ebd041 0x7e618b0be0
	void Camera(FName NewMode);// 0x264f58ebd041 0x7e618b0cc0
	void AddYawInput(float Val);// 0x264e58ebd041 0x7e618b0da0
	void AddRollInput(float Val);// 0x264d58ebd041 0x7e618b0e80
	void AddPitchInput(float Val);// 0x264c58ebd041 0x7e618b0f60
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x264b58ebd041 0x7e618b1040

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8] 0x7e8488a080

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8] 0x7e61812380
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4] 0x7e61812400
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4] 0x7e61812480
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4] 0x7e61812500

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x130, Size: 0x10] 0x7e61948880
	delegate ColorAndOpacityDelegate;//[Offset: 0x140, Size: 0x10] 0x7e61948900
	SlateColor ForegroundColor;//[Offset: 0x150, Size: 0x14] 0x7e61948980
	delegate ForegroundColorDelegate;//[Offset: 0x164, Size: 0x10] 0x7e61948a00
	delegate OnVisibilityChanged;//[Offset: 0x178, Size: 0x10] 0x7e61948a80
	Margin Padding;//[Offset: 0x1a0, Size: 0x10] 0x7e61948b00
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1b0, Size: 0x10] 0x7e6189f060
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1c0, Size: 0x8] 0x7e61948c00
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1c8, Size: 0x10] 0x7e6189f100
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1d8, Size: 0x10] 0x7e6189f1a0
	WidgetTree* WidgetTree;//[Offset: 0x1e8, Size: 0x8] 0x7e61948d80
	int Priority;//[Offset: 0x1f0, Size: 0x4] 0x7e61948e00
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1] 0x7e61948e80
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f4, Size: 0x1] 0x7e61948f00
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f4, Size: 0x1] 0x7e61948f80
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1] 0x7e61949000
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1] 0x7e61949080
	enum TickFrequency;//[Offset: 0x208, Size: 0x1] 0x7e6189f240
	InputComponent* InputComponent;//[Offset: 0x210, Size: 0x8] 0x7e61949180
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x218, Size: 0x10] 0x7e6189f2e0
	void UnregisterInputComponent();// 0x2a0358ebd041 0x7e61954140
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x2a0258ebd041 0x7e61954220
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x2a0158ebd041 0x7e61954300
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x2a0058ebd041 0x7e619543e0
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x29ff58ebd041 0x7e619544c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x29fe58ebd041 0x7e619545a0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x29fd58ebd041 0x7e61954680
	void StopListeningForAllInputActions();// 0x29fc58ebd041 0x7e61954760
	void StopAnimationsAndLatentActions();// 0x29fb58ebd041 0x7e61954840
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x29fa58ebd041 0x7e61954920
	void StopAllAnimations();// 0x29f958ebd041 0x7e61954a00
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x29f858ebd041 0x7e61954ae0
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x29f758ebd041 0x7e61954bc0
	void SetPadding(Margin InPadding);// 0x29f658ebd041 0x7e61954ca0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x29f558ebd041 0x7e61954d80
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x29f458ebd041 0x7e61954e60
	void SetInputActionPriority(int NewPriority);// 0x29f358ebd041 0x7e61954f40
	void SetInputActionBlocking(bool bShouldBlock);// 0x29f258ebd041 0x7e61955020
	void SetForegroundColor(SlateColor InForegroundColor);// 0x29f158ebd041 0x7e61955100
	void SetDesiredSizeInViewport(Vector2D Size);// 0x29f058ebd041 0x7e619551e0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x29ef58ebd041 0x7e619552c0
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x29ee58ebd041 0x7e619553a0
	void SetAnchorsInViewport(Anchors Anchors);// 0x29ed58ebd041 0x7e61955480
	void SetAlignmentInViewport(Vector2D Alignment);// 0x29ec58ebd041 0x7e61955560
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x2a2d58ebd041 0x7e61955640
	void RemoveFromViewport();// 0x29ea58ebd041 0x7e61951d60
	void RegisterInputComponent();// 0x29e958ebd041 0x7e61951e40
	void PreConstruct(bool IsDesignTime);// 0x29e858ebd041 0x7e61951f20
	void PlaySound(SoundBase* SoundToPlay);// 0x29e758ebd041 0x7e61952000
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x29e658ebd041 0x7e619520e0
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x29e558ebd041 0x7e619521c0
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x29e458ebd041 0x7e619522a0
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x29e358ebd041 0x7e61952380
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x29e258ebd041 0x7e61952460
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29e158ebd041 0x7e61952540
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29e058ebd041 0x7e61952620
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x29df58ebd041 0x7e61952700
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29de58ebd041 0x7e619527e0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29dd58ebd041 0x7e619528c0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x29dc58ebd041 0x7e619529a0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29db58ebd041 0x7e61952a80
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x29da58ebd041 0x7e61952b60
	void OnPaint(out PaintContext Context);// 0x29d958ebd041 0x7e61952c40
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d858ebd041 0x7e61952d20
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d758ebd041 0x7e61952e00
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x29d658ebd041 0x7e61952ee0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d558ebd041 0x7e61952fc0
	void OnMouseCaptureLost();// 0x29d458ebd041 0x7e619530a0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d358ebd041 0x7e61953180
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d258ebd041 0x7e61953260
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x29d158ebd041 0x7e61953340
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x29d058ebd041 0x7e61953420
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x29cf58ebd041 0x7e61953500
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x29ce58ebd041 0x7e619535e0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x29cd58ebd041 0x7e619536c0
	void OnInitialized();// 0x29cc58ebd041 0x7e619537a0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x29cb58ebd041 0x7e61953880
	void OnFocusLost(FocusEvent InFocusEvent);// 0x2a0c58ebd041 0x7e61953960
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c958ebd041 0x7e61950080
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c858ebd041 0x7e61950160
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c758ebd041 0x7e61950240
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c658ebd041 0x7e61950320
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x29c558ebd041 0x7e61950400
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c458ebd041 0x7e619504e0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x29c358ebd041 0x7e619505c0
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x29c258ebd041 0x7e619506a0
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x29c158ebd041 0x7e61950780
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x29c058ebd041 0x7e61950860
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x29bf58ebd041 0x7e61950940
	bool IsPlayingAnimation();// 0x29be58ebd041 0x7e61950a20
	bool IsListeningForInputAction(FName ActionName);// 0x29bd58ebd041 0x7e61950b00
	bool IsInViewport();// 0x29bc58ebd041 0x7e61950be0
	bool IsInteractable();// 0x29bb58ebd041 0x7e61950cc0
	bool IsAnyAnimationPlaying();// 0x29ba58ebd041 0x7e61950da0
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x29b958ebd041 0x7e61950e80
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x29b858ebd041 0x7e61950f60
	Pawn* GetOwningPlayerPawn();// 0x29b758ebd041 0x7e61951040
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x29b658ebd041 0x7e61951120
	bool GetIsVisible();// 0x29b558ebd041 0x7e61951200
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x29b458ebd041 0x7e619512e0
	Anchors GetAnchorsInViewport();// 0x29b358ebd041 0x7e619513c0
	Vector2D GetAlignmentInViewport();// 0x29b258ebd041 0x7e619514a0
	void FlushAnimations();// 0x29b158ebd041 0x7e61951580
	void Destruct();// 0x29b058ebd041 0x7e61951660
	void Construct();// 0x29af58ebd041 0x7e61951740
	void CancelLatentActions();// 0x29ae58ebd041 0x7e61951820
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x29ad58ebd041 0x7e61951900
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x29ac58ebd041 0x7e619519e0
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x29ab58ebd041 0x7e61951ac0
	void AddToViewport(int ZOrder);// 0x29aa58ebd041 0x7e61951ba0
	bool AddToPlayerScreen(int ZOrder);// 0x29eb58ebd041 0x7e61951c80

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8] 0x7e61428700
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10] 0x7e61428780
	FText ToolTipText;//[Offset: 0x40, Size: 0x18] 0x7e61428800
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10] 0x7e61428880
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8] 0x7e61428900
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10] 0x7e61428980
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10] 0x7e61428a00
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x38] 0x7e61428a80
	Vector2D RenderTransformPivot;//[Offset: 0xc8, Size: 0x10] 0x7e61428b00
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x7e61428b80
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x7e61428c00
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1] 0x7e61428c80
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1] 0x7e61428d00
	enum FlowDirectionPreference;//[Offset: 0xd9, Size: 0x1] 0x7e84859660
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xe0, Size: 0x8] 0x7e61428e00
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1] 0x7e61428e80
	byte Cursor;//[Offset: 0xe9, Size: 0x1] 0x7e61428f00
	enum Clipping;//[Offset: 0xea, Size: 0x1] 0x7e848595c0
	enum Visibility;//[Offset: 0xeb, Size: 0x1] 0x7e848593e0
	float RenderOpacity;//[Offset: 0xec, Size: 0x4] 0x7e61429080
	WidgetNavigation* Navigation;//[Offset: 0xf0, Size: 0x8] 0x7e61429100
	PropertyBinding*[] NativeBindings;//[Offset: 0x118, Size: 0x10] 0x7e84859480
	void SetVisibility(enum InVisibility);// 0x106158ebd041 0x7e61430160
	void SetUserFocus(PlayerController* PlayerController);// 0x106058ebd041 0x7e61430240
	void SetToolTipText(out const FText InToolTipText);// 0x105f58ebd041 0x7e61430320
	void SetToolTip(Widget* Widget);// 0x105e58ebd041 0x7e61430400
	void SetRenderTranslation(Vector2D Translation);// 0x105d58ebd041 0x7e614304e0
	void SetRenderTransformPivot(Vector2D Pivot);// 0x105c58ebd041 0x7e614305c0
	void SetRenderTransformAngle(float Angle);// 0x105a58ebd041 0x7e614306a0
	void SetRenderTransform(WidgetTransform InTransform);// 0x105958ebd041 0x7e61430780
	void SetRenderShear(Vector2D Shear);// 0x105858ebd041 0x7e61430860
	void SetRenderScale(Vector2D Scale);// 0x105758ebd041 0x7e61430940
	void SetRenderOpacity(float InOpacity);// 0x105658ebd041 0x7e61430a20
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x105558ebd041 0x7e61430b00
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x105458ebd041 0x7e61430be0
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x105258ebd041 0x7e61430da0
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x105158ebd041 0x7e61430e80
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x105058ebd041 0x7e61430f60
	void SetKeyboardFocus();// 0x104f58ebd041 0x7e61431040
	void SetIsEnabled(bool bInIsEnabled);// 0x104e58ebd041 0x7e61431120
	void SetFocus();// 0x104d58ebd041 0x7e61431200
	void SetCursor(byte InCursor);// 0x104c58ebd041 0x7e614312e0
	void SetClipping(enum InClipping);// 0x104b58ebd041 0x7e614313c0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x104a58ebd041 0x7e614314a0
	void ResetCursor();// 0x104958ebd041 0x7e61431580
	void RemoveFromParent();// 0x104858ebd041 0x7e61431660
	EventReply OnReply__DelegateSignature();// 0x104458ebd041 0x7e61431740
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x104358ebd041 0x7e61431820
	bool IsVisible();// 0x104258ebd041 0x7e61431900
	bool IsHovered();// 0x104158ebd041 0x7e614319e0
	void InvalidateLayoutAndVolatility();// 0x104058ebd041 0x7e61431ac0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x103f58ebd041 0x7e61431ba0
	bool HasUserFocus(PlayerController* PlayerController);// 0x108c58ebd041 0x7e61431c80
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x103d58ebd041 0x7e613de780
	bool HasMouseCapture();// 0x103c58ebd041 0x7e613de860
	bool HasKeyboardFocus();// 0x103b58ebd041 0x7e613de940
	bool HasFocusedDescendants();// 0x103a58ebd041 0x7e613dea20
	bool HasAnyUserFocus();// 0x103958ebd041 0x7e613deb00
	Widget* GetWidget__DelegateSignature();// 0x103858ebd041 0x7e613debe0
	enum GetVisibility();// 0x103758ebd041 0x7e613decc0
	Geometry GetTickSpaceGeometry();// 0x103658ebd041 0x7e613deda0
	FText GetText__DelegateSignature();// 0x103458ebd041 0x7e613dee80
	enum GetSlateVisibility__DelegateSignature();// 0x103358ebd041 0x7e613def60
	SlateColor GetSlateColor__DelegateSignature();// 0x102e58ebd041 0x7e613df040
	SlateBrush GetSlateBrush__DelegateSignature();// 0x102d58ebd041 0x7e613df120
	float GetRenderTransformAngle();// 0x102c58ebd041 0x7e613df200
	float GetRenderOpacity();// 0x102b58ebd041 0x7e613df2e0
	PanelWidget* GetParent();// 0x102a58ebd041 0x7e613df3c0
	Geometry GetPaintSpaceGeometry();// 0x102958ebd041 0x7e613df4a0
	PlayerController* GetOwningPlayer();// 0x102858ebd041 0x7e613df580
	LocalPlayer* GetOwningLocalPlayer();// 0x102758ebd041 0x7e613df660
	byte GetMouseCursor__DelegateSignature();// 0x102658ebd041 0x7e613df740
	LinearColor GetLinearColor__DelegateSignature();// 0x102558ebd041 0x7e613df820
	bool GetIsEnabled();// 0x102458ebd041 0x7e613df900
	int GetInt32__DelegateSignature();// 0x102358ebd041 0x7e613df9e0
	GameInstance* GetGameInstance();// 0x102258ebd041 0x7e613dfac0
	float GetFloat__DelegateSignature();// 0x102158ebd041 0x7e613dfba0
	Vector2D GetDesiredSize();// 0x102058ebd041 0x7e613dfc80
	enum GetClipping();// 0x101f58ebd041 0x7e613dfd60
	enum GetCheckBoxState__DelegateSignature();// 0x101d58ebd041 0x7e613dfe40
	Geometry GetCachedGeometry();// 0xffffff8158ebd000 0x7e613dff20
	bool GetBool__DelegateSignature();// 0x101b58ebd041 0x7e613dcaa0
	FText GetAccessibleText();// 0x101a58ebd041 0x7e613dcb80
	FText GetAccessibleSummaryText();// 0x101958ebd041 0x7e613dcc60
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x101858ebd041 0x7e613dcd40
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x101758ebd041 0x7e613dce20
	void ForceVolatile(bool bForce);// 0x101658ebd041 0x7e613dcf00
	void ForceLayoutPrepass();// 0x101158ebd041 0x7e613dcfe0

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10] 0x7e61426f00
	enum ColorUseRule;//[Offset: 0x10, Size: 0x1] 0x7e84dd2cc0

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4] 0x7e61426b80
	float Top;//[Offset: 0x4, Size: 0x4] 0x7e61426c00
	float Right;//[Offset: 0x8, Size: 0x4] 0x7e61426c80
	float Bottom;//[Offset: 0xc, Size: 0x4] 0x7e61426d00

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x10] 0x7e61427480
	Vector2D Scale;//[Offset: 0x10, Size: 0x10] 0x7e61427500
	Vector2D Shear;//[Offset: 0x20, Size: 0x10] 0x7e61427580
	float Angle;//[Offset: 0x30, Size: 0x4] 0x7e61427600

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x10] 0x7e61426b00
	Margin Margin;//[Offset: 0x18, Size: 0x10] 0x7e61426d80
	SlateColor TintColor;//[Offset: 0x28, Size: 0x14] 0x7e61426e00
	SlateBrushOutlineSettings OutlineSettings;//[Offset: 0x40, Size: 0x40] 0x7e61427200
	Object* ResourceObject;//[Offset: 0x80, Size: 0x8] 0x7e61427280
	FName ResourceName;//[Offset: 0x88, Size: 0x8] 0x7e61427300
	Box2f UVRegion;//[Offset: 0x90, Size: 0x14] 0x7e61427380
	byte DrawAs;//[Offset: 0xa4, Size: 0x1] 0x7e61425300
	byte Tiling;//[Offset: 0xa5, Size: 0x1] 0x7e61425380
	byte Mirroring;//[Offset: 0xa6, Size: 0x1] 0x7e61425400
	byte ImageType;//[Offset: 0xa7, Size: 0x1] 0x7e61425480
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x7e61425500
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x7e61425580

--------------------------------
Class: SlateBrushOutlineSettings
	Vector4 CornerRadii;//[Offset: 0x0, Size: 0x20] 0x7e61426e80
	SlateColor Color;//[Offset: 0x20, Size: 0x14] 0x7e61427000
	float Width;//[Offset: 0x34, Size: 0x4] 0x7e61427080
	byte RoundingType;//[Offset: 0x38, Size: 0x1] 0x7e61427100
	bool bUseBrushTransparency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e61427180

--------------------------------
Class: Box2f
	Vector2f Min;//[Offset: 0x0, Size: 0x8] 0x7e8412f080
	Vector2f Max;//[Offset: 0x8, Size: 0x8] 0x7e8412ef00
	byte bIsValid;//[Offset: 0x10, Size: 0x1] 0x7e8412ee80

--------------------------------
Class: Vector2f
	float X;//[Offset: 0x0, Size: 0x4] 0x7e8412f000
	float Y;//[Offset: 0x4, Size: 0x4] 0x7e8412ef80

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8] 0x7e6191de80
	Widget* Content;//[Offset: 0x30, Size: 0x8] 0x7e6191df00

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x128, Size: 0x10] 0x7e8485a240
	bool RemoveChildAt(int Index);// 0x10b458ebd041 0x7e61433a40
	bool RemoveChild(Widget* Content);// 0x10b358ebd041 0x7e61433b20
	bool HasChild(Widget* Content);// 0x10b258ebd041 0x7e61433c00
	bool HasAnyChildren();// 0x10b158ebd041 0x7e61433ce0
	int GetChildrenCount();// 0x10b058ebd041 0x7e61433dc0
	int GetChildIndex(const Widget* Content);// 0x10af58ebd041 0x7e61433ea0
	Widget* GetChildAt(int Index);// 0x10ae58ebd041 0x7e61433f80
	Widget*[] GetAllChildren();// 0x10ad58ebd041 0x7e61434060
	void ClearChildren();// 0x10ac58ebd041 0x7e61434140
	PanelSlot* AddChild(Widget* Content);// 0x10aa58ebd041 0x7e61434220

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x78, Size: 0x8] 0x7e61b3fb00
	byte AspectRatioAxisConstraint;//[Offset: 0xb8, Size: 0x1] 0x7e61b3fb80
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0xc0, Size: 0x8] 0x7e61a58800
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x7e61b3fc00
	int ControllerId;//[Offset: 0xe0, Size: 0x4] 0x7e61b3fc80

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8] 0x7e61a77080
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10] 0x7e61a51e60
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4] 0x7e61a77180
	World* World;//[Offset: 0x70, Size: 0x8] 0x7e61a77200
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8] 0x7e61a77280
	void SSSwapControllers();// 0x2f7458ebd041 0x7e61a80860
	void ShowTitleSafeArea();// 0x2f7358ebd041 0x7e61a80940
	void SetConsoleTarget(int PlayerIndex);// 0x2f7258ebd041 0x7e61a80a20

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8] 0x7e61a1b500
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8] 0x7e61a1b580
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8] 0x7e61a19500
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10] 0x7e6197e0c0

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8] 0x7e61617600
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8] 0x7e84e58080

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8] 0x7e61bf0300
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8] 0x7e61bf0380
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8] 0x7e61bf0400
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8] 0x7e61bf0480
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8] 0x7e61bf0500
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8] 0x7e61bf0580
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8] 0x7e61bf0600
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10] 0x7e61bd3260
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10] 0x7e61bd3300
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10] 0x7e61bd33a0
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28] 0x7e61bf0800
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10] 0x7e61bf0880
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8] 0x7e61bf0900
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8] 0x7e61bf0980
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8] 0x7e61bf0a00
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8] 0x7e61bf0a80
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8] 0x7e61bf0b00
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x116, Size: 0x1] 0x7e61bf0b80
	NavigationSystemBase* NavigationSystem;//[Offset: 0x120, Size: 0x8] 0x7e61bf0c00
	GameModeBase* AuthorityGameMode;//[Offset: 0x128, Size: 0x8] 0x7e61bf0c80
	GameStateBase* GameState;//[Offset: 0x130, Size: 0x8] 0x7e61bf0d00
	AISystemBase* AISystem;//[Offset: 0x138, Size: 0x8] 0x7e61bf0d80
	AvoidanceManager* AvoidanceManager;//[Offset: 0x140, Size: 0x8] 0x7e61bf0e00
	Level*[] Levels;//[Offset: 0x148, Size: 0x10] 0x7e61bd3440
	LevelCollection[] LevelCollections;//[Offset: 0x158, Size: 0x10] 0x7e61bd34e0
	GameInstance* OwningGameInstance;//[Offset: 0x190, Size: 0x8] 0x7e61bf0f80
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x198, Size: 0x10] 0x7e61bd3580
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a8, Size: 0x8] 0x7e61bf1080
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1b0, Size: 0x8] 0x7e61bef800
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x228, Size: 0x8] 0x7e61bef880
	uint32 LWILastAssignedUID;//[Offset: 0x230, Size: 0x4] 0x7e61bef900
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x238, Size: 0x50] 0x7e61bd3620
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x288, Size: 0x10] 0x7e61bd36c0
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x298, Size: 0x10] 0x7e61bd3760
	WorldComposition* WorldComposition;//[Offset: 0x630, Size: 0x8] 0x7e61befb00
	WorldPSCPool PSCPool;//[Offset: 0x6e0, Size: 0x58] 0x7e61befb80
	WorldSettings* K2_GetWorldSettings();// 0x362558ebd041 0x7e61bcf4a0
	void HandleTimelineScrubbed();// 0x362458ebd041 0x7e61bcf580

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8] 0x7e61b3d680
	Model* Model;//[Offset: 0xc0, Size: 0x8] 0x7e61b3b600
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10] 0x7e61a56be0
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8] 0x7e61b3b700
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4] 0x7e61b3b780
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4] 0x7e61b3b800
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8] 0x7e61b3b880
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8] 0x7e61b3b900
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8] 0x7e61b3b980
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10] 0x7e61a56c80
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4] 0x7e61b3ba80
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4] 0x7e61b3bb00
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10] 0x7e61a56d20
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10] 0x7e61a56dc0
	FName[] StreamingTextures;//[Offset: 0x138, Size: 0x10] 0x7e61a56e60
	uint32 PackedTextureStreamingQualityLevelFeatureLevel;//[Offset: 0x148, Size: 0x4] 0x7e61b3bd00
	Guid LevelBuildDataId;//[Offset: 0x210, Size: 0x10] 0x7e61b3bd80
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x220, Size: 0x8] 0x7e61b3be00
	IntVector LightBuildLevelOffset;//[Offset: 0x228, Size: 0xc] 0x7e61b3be80
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1] 0x7e61b3bf00
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1] 0x7e61b3bf80
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x234, Size: 0x1] 0x7e61b3c000
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x234, Size: 0x1] 0x7e61b3c080
	bool bIsPartitioned;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x236, Size: 0x1] 0x7e61b3c100
	bool bIsWorldPartitionRuntimeCell;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x236, Size: 0x1] 0x7e61b3c180
	WorldSettings* WorldSettings;//[Offset: 0x2a0, Size: 0x8] 0x7e61b3c200
	WorldDataLayers* WorldDataLayers;//[Offset: 0x2a8, Size: 0x8] 0x7e61b3c280
	AssetUserData*[] AssetUserData;//[Offset: 0x2b8, Size: 0x10] 0x7e61a56f00
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2d8, Size: 0x10] 0x7e61a56fa0

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x550, Size: 0x8] 0x7e61b59d80

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x38, Size: 0x58] 0x7e61a12080
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61a12100
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x7e61a10080
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x7e61a10100
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1] 0x7e61a10180
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1] 0x7e61a10200
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1] 0x7e61a10280
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x90, Size: 0x1] 0x7e61a10300
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x90, Size: 0x1] 0x7e61a10380
	bool bNeverNeedsCookedCollisionData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x91, Size: 0x1] 0x7e61a10400
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 0x8] 0x7e61a10480
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa0, Size: 0x10] 0x7e61a10500
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x188] 0x7e61a10580
	Vector BuildScale3D;//[Offset: 0x2b8, Size: 0x18] 0x7e61a10600

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8] 0x7e61858280
	byte PhysicsType;//[Offset: 0x30, Size: 0x1] 0x7e61858300
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1] 0x7e61858380
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1] 0x7e61858400

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10] 0x7e84e52c20
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10] 0x7e84e52cc0
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10] 0x7e84e52d60
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10] 0x7e84e52f40
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10] 0x7e84e52fe0

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18] 0x7e615f1780
	float Radius;//[Offset: 0x48, Size: 0x4] 0x7e615f1800

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4] 0x7e615f0280
	FName Name;//[Offset: 0xc, Size: 0x8] 0x7e615f0300
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7e615f0380
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1] 0x7e615f0400

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18] 0x7e615f1900
	Rotator Rotation;//[Offset: 0x48, Size: 0x18] 0x7e615f1980
	float X;//[Offset: 0x60, Size: 0x4] 0x7e615f1a00
	float Y;//[Offset: 0x64, Size: 0x4] 0x7e615f1a80
	float Z;//[Offset: 0x68, Size: 0x4] 0x7e615f1b00

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18] 0x7e615f1c00
	Rotator Rotation;//[Offset: 0x48, Size: 0x18] 0x7e615f1c80
	float Radius;//[Offset: 0x60, Size: 0x4] 0x7e615f1d00
	float Length;//[Offset: 0x64, Size: 0x4] 0x7e615f1d80

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10] 0x7e84e52e00
	int[] IndexData;//[Offset: 0x40, Size: 0x10] 0x7e84e52ea0
	Box ElemBox;//[Offset: 0x50, Size: 0x38] 0x7e615f1f80
	Transform Transform;//[Offset: 0x90, Size: 0x60] 0x7e615f2000

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18] 0x7e615f2100
	Rotator Rotation;//[Offset: 0x48, Size: 0x18] 0x7e615f0080
	float Radius0;//[Offset: 0x60, Size: 0x4] 0x7e615f0100
	float Radius1;//[Offset: 0x64, Size: 0x4] 0x7e615f0180
	float Length;//[Offset: 0x68, Size: 0x4] 0x7e615f0200

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 0x1] 0x7e6140fe80
	byte CollisionEnabled;//[Offset: 0x1c, Size: 0x1] 0x7e6140ff00
	enum SleepFamily;//[Offset: 0x51, Size: 0x1] 0x7e8458cb80
	byte DOFMode;//[Offset: 0x52, Size: 0x1] 0x7e6140e780
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1] 0x7e6140e800
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1] 0x7e6140e880
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1] 0x7e6140e900
	bool bSmoothEdgeCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1] 0x7e6140e980
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1] 0x7e6140ea00
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1] 0x7e6140ea80
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1] 0x7e6140eb00
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7e6140eb80
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x7e6140ec00
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x7e6140ec80
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x7e6140ed00
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1] 0x7e6140ed80
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1] 0x7e6140ee00
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x7e6140ee80
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x7e6140ef00
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1] 0x7e6140ef80
	FName CollisionProfileName;//[Offset: 0x70, Size: 0x8] 0x7e6140f000
	byte PositionSolverIterationCount;//[Offset: 0x78, Size: 0x1] 0x7e6140f080
	byte VelocitySolverIterationCount;//[Offset: 0x79, Size: 0x1] 0x7e6140f100
	CollisionResponse CollisionResponses;//[Offset: 0x80, Size: 0x30] 0x7e6140e280
	float MaxDepenetrationVelocity;//[Offset: 0xb0, Size: 0x4] 0x7e6140e300
	float MassInKgOverride;//[Offset: 0xb4, Size: 0x4] 0x7e6140e380
	float LinearDamping;//[Offset: 0xc0, Size: 0x4] 0x7e6140e400
	float AngularDamping;//[Offset: 0xc4, Size: 0x4] 0x7e6140e480
	Vector CustomDOFPlaneNormal;//[Offset: 0xc8, Size: 0x18] 0x7e6140e500
	Vector COMNudge;//[Offset: 0xe0, Size: 0x18] 0x7e6140e580
	float MassScale;//[Offset: 0xf8, Size: 0x4] 0x7e6140e600
	Vector InertiaTensorScale;//[Offset: 0x100, Size: 0x18] 0x7e6140e680
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x128, Size: 0x10] 0x7e6140e700
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x138, Size: 0x8] 0x7e6140c680
	float MaxAngularVelocity;//[Offset: 0x140, Size: 0x4] 0x7e6140c700
	float CustomSleepThresholdMultiplier;//[Offset: 0x144, Size: 0x4] 0x7e6140c780
	float StabilizationThresholdMultiplier;//[Offset: 0x148, Size: 0x4] 0x7e6140c800
	float PhysicsBlendWeight;//[Offset: 0x14c, Size: 0x4] 0x7e6140c880

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7e6140c900
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7e6140c980
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7e6140ca00
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7e6140ca80
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x7e6140cb00
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x7e6140cb80
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x7e6140cc00

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20] 0x7e6140e080
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10] 0x7e8485f7e0

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1] 0x7e6140f180
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1] 0x7e6140f200
	byte Pawn;//[Offset: 0x2, Size: 0x1] 0x7e6140f280
	byte Visibility;//[Offset: 0x3, Size: 0x1] 0x7e6140f300
	byte Camera;//[Offset: 0x4, Size: 0x1] 0x7e6140f380
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1] 0x7e6140f400
	byte Vehicle;//[Offset: 0x6, Size: 0x1] 0x7e6140f480
	byte Destructible;//[Offset: 0x7, Size: 0x1] 0x7e6140f500
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1] 0x7e6140f580
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1] 0x7e6140f600
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1] 0x7e6140f680
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1] 0x7e6140f700
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1] 0x7e6140f780
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1] 0x7e6140d700
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1] 0x7e6140d780
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1] 0x7e6140d800
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1] 0x7e6140d880
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1] 0x7e6140d900
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1] 0x7e6140d980
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1] 0x7e6140da00
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1] 0x7e6140da80
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1] 0x7e6140db00
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1] 0x7e6140db80
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1] 0x7e6140dc00
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1] 0x7e6140dc80
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1] 0x7e6140dd00
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1] 0x7e6140dd80
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1] 0x7e6140de00
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1] 0x7e6140de80
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1] 0x7e6140df00
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1] 0x7e6140df80
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1] 0x7e6140e000

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8] 0x7e6140e100
	byte Response;//[Offset: 0x8, Size: 0x1] 0x7e6140e180

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10] 0x7e61a56b40

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1] 0x7e61b3f500
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x339658ebd041 0x7e61b1c3a0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x339558ebd041 0x7e61b1c480
	bool RemoteEvent(FName EventName);// 0x339458ebd041 0x7e61b1c560
	void LevelReset();// 0x339358ebd041 0x7e61b1c640

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4] 0x7e8412fe80
	int Y;//[Offset: 0x4, Size: 0x4] 0x7e8412fe00
	int Z;//[Offset: 0x8, Size: 0x4] 0x7e8412fd80

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x280, Size: 0x8] 0x7e61b59900
	BillboardComponent* GoodSprite;//[Offset: 0x288, Size: 0x8] 0x7e61b59980
	BillboardComponent* BadSprite;//[Offset: 0x290, Size: 0x8] 0x7e61b59a00
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1] 0x7e61b59a80

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x550, Size: 0x4] 0x7e61a19000
	float CapsuleRadius;//[Offset: 0x554, Size: 0x4] 0x7e61a19080
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x2d6058ebd041 0x7e61a04e60
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x2d5f58ebd041 0x7e61a04f40
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x2d5e58ebd041 0x7e61a05020
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x2d5d58ebd041 0x7e61a05100
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x2d5c58ebd041 0x7e61a051e0
	float GetUnscaledCapsuleRadius();// 0x2d5b58ebd041 0x7e61a052c0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x2d5a58ebd041 0x7e61a053a0
	float GetUnscaledCapsuleHalfHeight();// 0x2d5958ebd041 0x7e61a05480
	float GetShapeScale();// 0x2d5858ebd041 0x7e61a05560
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x2d9958ebd041 0x7e61a05640
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x2d5658ebd041 0x7e61a01d60
	float GetScaledCapsuleRadius();// 0x2d5558ebd041 0x7e61a01e40
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x2d5458ebd041 0x7e61a01f20
	float GetScaledCapsuleHalfHeight();// 0x2d5358ebd041 0x7e61a02000

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x538, Size: 0x8] 0x7e61a11700
	class NavAreaBase* AreaClass;//[Offset: 0x540, Size: 0x8] 0x7e6197a7e0
	Color ShapeColor;//[Offset: 0x548, Size: 0x4] 0x7e61a11780
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54c, Size: 0x1] 0x7e61a11800
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54c, Size: 0x1] 0x7e61a11880
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54c, Size: 0x1] 0x7e61a11900

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1] 0x7e8412dc80
	byte G;//[Offset: 0x1, Size: 0x1] 0x7e8412dc00
	byte R;//[Offset: 0x2, Size: 0x1] 0x7e8412db80
	byte A;//[Offset: 0x3, Size: 0x1] 0x7e8412db00

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x538, Size: 0x8] 0x7e619da100
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x540, Size: 0x1] 0x7e619da180
	float ScreenSize;//[Offset: 0x544, Size: 0x4] 0x7e619da200
	float U;//[Offset: 0x548, Size: 0x4] 0x7e619da280
	float UL;//[Offset: 0x54c, Size: 0x4] 0x7e619da300
	float V;//[Offset: 0x550, Size: 0x4] 0x7e619da380
	float VL;//[Offset: 0x554, Size: 0x4] 0x7e619da400
	float OpacityMaskRefVal;//[Offset: 0x558, Size: 0x4] 0x7e619da480
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x2cf958ebd041 0x7e619bc9c0
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x2cb658ebd041 0x7e619b90e0
	void SetSprite(Texture2D* NewSprite);// 0x2cb558ebd041 0x7e619b91c0
	void SetOpacityMaskRefVal(float RefVal);// 0x2cb458ebd041 0x7e619b92a0

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8] 0x7e61b59c00

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1] 0x7e61b40980

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x280, Size: 0x4] 0x7e61bf3280
	byte VisibilityAggressiveness;//[Offset: 0x284, Size: 0x1] 0x7e61bf3300
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x285, Size: 0x1] 0x7e61bf3380
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x285, Size: 0x1] 0x7e61bf3400
	bool bEnableLargeWorlds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x285, Size: 0x1] 0x7e61bf3480
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x285, Size: 0x1] 0x7e61bf3500
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x285, Size: 0x1] 0x7e61bf3580
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x285, Size: 0x1] 0x7e61bf3600
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x285, Size: 0x1] 0x7e61bf3680
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x285, Size: 0x1] 0x7e61bf3700
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x286, Size: 0x1] 0x7e61bf3780
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x286, Size: 0x1] 0x7e61bf3800
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x286, Size: 0x1] 0x7e61bf3880
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x286, Size: 0x1] 0x7e61bf3900
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x286, Size: 0x1] 0x7e61bf3980
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x286, Size: 0x1] 0x7e61bf3a00
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x286, Size: 0x1] 0x7e61bf3a80
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x286, Size: 0x1] 0x7e61bf3b00
	bool bGenerateSingleClusterForLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x287, Size: 0x1] 0x7e61bf3b80
	class AISystemBase* AISystemClass;//[Offset: 0x288, Size: 0x28] 0x7e61bd4a20
	Vector LevelInstancePivotOffset;//[Offset: 0x2b0, Size: 0x18] 0x7e61bf3c00
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x2c8, Size: 0x8] 0x7e61bf3c80
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x2d0, Size: 0x8] 0x7e61bf3d00
	WorldPartition* WorldPartition;//[Offset: 0x2d8, Size: 0x8] 0x7e61bf3d80
	float WorldToMeters;//[Offset: 0x2e0, Size: 0x4] 0x7e61bf3e00
	float KillZ;//[Offset: 0x2e4, Size: 0x4] 0x7e61bf3e80
	class DamageType* KillZDamageType;//[Offset: 0x2e8, Size: 0x8] 0x7e61bd4ac0
	float WorldGravityZ;//[Offset: 0x2f0, Size: 0x4] 0x7e61bf3f00
	float GlobalGravityZ;//[Offset: 0x2f4, Size: 0x4] 0x7e61bf3f80
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2f8, Size: 0x8] 0x7e61bd4b60
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x300, Size: 0x8] 0x7e61bd4c00
	class GameModeBase* DefaultGameMode;//[Offset: 0x308, Size: 0x8] 0x7e61bd4ca0
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x310, Size: 0x8] 0x7e61bd4d40
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x318, Size: 0x4] 0x7e61bf4000
	Vector DefaultColorScale;//[Offset: 0x320, Size: 0x18] 0x7e61bf4080
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x338, Size: 0x4] 0x7e61bf4100
	float GlobalDistanceFieldViewDistance;//[Offset: 0x33c, Size: 0x4] 0x7e61bf4180
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x340, Size: 0x4] 0x7e61bf4200
	ReverbSettings DefaultReverbSettings;//[Offset: 0x348, Size: 0x20] 0x7e61bf2180
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x368, Size: 0x24] 0x7e61bf2200
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x390, Size: 0x8] 0x7e61bf2280
	float TimeDilation;//[Offset: 0x398, Size: 0x4] 0x7e61bf2300
	float MatineeTimeDilation;//[Offset: 0x39c, Size: 0x4] 0x7e61bf2380
	float DemoPlayTimeDilation;//[Offset: 0x3a0, Size: 0x4] 0x7e61bf2400
	float MinGlobalTimeDilation;//[Offset: 0x3a4, Size: 0x4] 0x7e61bf2480
	float MaxGlobalTimeDilation;//[Offset: 0x3a8, Size: 0x4] 0x7e61bf2500
	float MinUndilatedFrameTime;//[Offset: 0x3ac, Size: 0x4] 0x7e61bf2580
	float MaxUndilatedFrameTime;//[Offset: 0x3b0, Size: 0x4] 0x7e61bf2600
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x3b8, Size: 0x80] 0x7e61bf2680
	NetViewer[] ReplicationViewers;//[Offset: 0x438, Size: 0x10] 0x7e61bd4de0
	AssetUserData*[] AssetUserData;//[Offset: 0x448, Size: 0x10] 0x7e61bd4e80
	PlayerState* PauserPlayerState;//[Offset: 0x458, Size: 0x8] 0x7e61bf2800
	int MaxNumberOfBookmarks;//[Offset: 0x460, Size: 0x4] 0x7e61bf2880
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x468, Size: 0x8] 0x7e61bd4f20
	BookmarkBase*[] BookmarkArray;//[Offset: 0x470, Size: 0x10] 0x7e61bd4fc0
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x480, Size: 0x8] 0x7e61bd5060
	void OnRep_WorldGravityZ();// 0x363258ebd041 0x7e61bce940

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18] 0x7e619a8d80
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8] 0x7e619a8e00
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e619a8e80

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8] 0x7e8412bc80
	FString SubPathString;//[Offset: 0x8, Size: 0x10] 0x7e8412bc00

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18] 0x7e61b59700
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4] 0x7e61b59780
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8] 0x7e61b59800
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7e61b59880

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61654800
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61654880
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61654900
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e61654980
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e61654a00
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7e61654a80
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7e61654b00
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7e61654b80
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7e61654c00
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7e61654c80
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7e61654d00
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7e61654d80
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7e61654e00
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7e61654e80
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7e61654f00
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7e61654f80

--------------------------------
Class: WorldPartition.ActorDescContainer.Object
	WorldPartitionRuntimeHash* RuntimeHash;//[Offset: 0x60, Size: 0x8] 0x7e61bf1d00
	WorldPartitionStreamingPolicy* StreamingPolicy;//[Offset: 0x70, Size: 0x8] 0x7e61bf1d80

--------------------------------
Class: ActorDescContainer.Object
	World* World;//[Offset: 0x28, Size: 0x8] 0x7e619a7900

--------------------------------
Class: WorldPartitionRuntimeHash.Object

--------------------------------
Class: WorldPartitionStreamingPolicy.Object

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2b0, Size: 0x4] 0x7e61a2c380
	int Priority;//[Offset: 0x2b4, Size: 0x4] 0x7e61a2c400
	float FluidFriction;//[Offset: 0x2b8, Size: 0x4] 0x7e61a2c480
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1] 0x7e61a2c500
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 0x1] 0x7e61a2c580

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x278, Size: 0x1] 0x7e618e7700
	Color BrushColor;//[Offset: 0x27c, Size: 0x4] 0x7e618e7780
	int PolyFlags;//[Offset: 0x280, Size: 0x4] 0x7e618e7800
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 0x1] 0x7e618e7880
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x284, Size: 0x1] 0x7e618e7900
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x284, Size: 0x1] 0x7e618e7980
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x284, Size: 0x1] 0x7e618e7a00
	Model* Brush;//[Offset: 0x288, Size: 0x8] 0x7e618e7a80
	BrushComponent* BrushComponent;//[Offset: 0x290, Size: 0x8] 0x7e618e7b00
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1] 0x7e618e7b80
	GeomSelection[] SavedSelections;//[Offset: 0x2a0, Size: 0x10] 0x7e61897720

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x538, Size: 0x8] 0x7e61a12900
	BodySetup* BrushBodySetup;//[Offset: 0x540, Size: 0x8] 0x7e61a12980

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4] 0x7e61603700
	int Index;//[Offset: 0x4, Size: 0x4] 0x7e61603780
	int SelectionIndex;//[Offset: 0x8, Size: 0x4] 0x7e61603800

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4] 0x7e61b80d00
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4] 0x7e61b80d80
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8] 0x7e61b80e00
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4] 0x7e61b80e80

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8] 0x7e6196e980
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e6196ea00
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7e6196ea80
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x7e6196eb00
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x7e6196eb80
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x7e6196ec00
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x7e6196ec80
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1] 0x7e6196ed00
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1] 0x7e6196ed80
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1] 0x7e61970420
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50] 0x7e619704c0
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x24] 0x7e6196ef00
	float Duration;//[Offset: 0x104, Size: 0x4] 0x7e6196ef80
	float MaxDistance;//[Offset: 0x108, Size: 0x4] 0x7e6196f000
	float TotalSamples;//[Offset: 0x10c, Size: 0x4] 0x7e6196f080
	float Priority;//[Offset: 0x110, Size: 0x4] 0x7e6196f100
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8] 0x7e6196f180
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8] 0x7e6196f200
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10] 0x7e61970560
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8] 0x7e6196f300
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10] 0x7e61970600
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10] 0x7e619706a0
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 0x10] 0x7e61970740

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x78] 0x7e61bb7a80
	SoundClass*[] ChildClasses;//[Offset: 0xa0, Size: 0x10] 0x7e61bd0ec0
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb0, Size: 0x10] 0x7e61bd0f60
	SoundClass* ParentClass;//[Offset: 0xc0, Size: 0x8] 0x7e61bb7c00

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4] 0x7e6166ac00
	float Pitch;//[Offset: 0x4, Size: 0x4] 0x7e6166ac80
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4] 0x7e6166ad00
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4] 0x7e6166ad80
	float LFEBleed;//[Offset: 0x10, Size: 0x4] 0x7e6166ae00
	float VoiceCenterChannelVolume;//[Offset: 0x14, Size: 0x4] 0x7e6166ae80
	float RadioFilterVolume;//[Offset: 0x18, Size: 0x4] 0x7e6166af00
	float RadioFilterVolumeThreshold;//[Offset: 0x1c, Size: 0x4] 0x7e6166af80
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x7e6166b000
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1] 0x7e6166b080
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1] 0x7e6166b100
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1] 0x7e6166b180
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1] 0x7e6166b200
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1] 0x7e6166b280
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1] 0x7e6166b300
	float Default2DReverbSendAmount;//[Offset: 0x24, Size: 0x4] 0x7e6166b380
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x28, Size: 0x40] 0x7e61669500
	byte OutputTarget;//[Offset: 0x68, Size: 0x1] 0x7e61669580
	enum LoadingBehavior;//[Offset: 0x69, Size: 0x1] 0x7e84e5e5c0
	SoundSubmix* DefaultSubmix;//[Offset: 0x70, Size: 0x8] 0x7e61669680

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10] 0x7e6166b400
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10] 0x7e6166b480
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10] 0x7e6166b500
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10] 0x7e6166b580

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4] 0x7e61567680
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8] 0x7e61567700

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61bbc880
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x50, Size: 0x10] 0x7e61bd2860
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x60, Size: 0x8] 0x7e61bbc980
	int EnvelopeFollowerAttackTime;//[Offset: 0x68, Size: 0x4] 0x7e61bbca00
	int EnvelopeFollowerReleaseTime;//[Offset: 0x6c, Size: 0x4] 0x7e61bbca80
	float OutputVolume;//[Offset: 0x70, Size: 0x4] 0x7e61bbcb00
	float WetLevel;//[Offset: 0x74, Size: 0x4] 0x7e61bbcb80
	float DryLevel;//[Offset: 0x78, Size: 0x4] 0x7e61bbcc00
	SoundModulationDestinationSettings OutputVolumeModulation;//[Offset: 0x80, Size: 0x10] 0x7e61bbcc80
	SoundModulationDestinationSettings WetLevelModulation;//[Offset: 0x90, Size: 0x10] 0x7e61bbcd00
	SoundModulationDestinationSettings DryLevelModulation;//[Offset: 0xa0, Size: 0x10] 0x7e61bbcd80
	AudioLinkSettingsAbstract* AudioLinkSettings;//[Offset: 0xb0, Size: 0x8] 0x7e61bbce00
	delegate OnSubmixRecordedFileDone;//[Offset: 0xb8, Size: 0x10] 0x7e61bbce80
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x356658ebd041 0x7e61bc45a0
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x356558ebd041 0x7e61bc4680
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x356458ebd041 0x7e61bc4760
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x356358ebd041 0x7e61bc4840
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x356258ebd041 0x7e61bc4920
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x356158ebd041 0x7e61bc4a00
	void SetSubmixWetLevel(const Object* WorldContextObject, float InWetLevel);// 0x356058ebd041 0x7e61bc4ae0
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x355f58ebd041 0x7e61bc4bc0
	void SetSubmixDryLevel(const Object* WorldContextObject, float InDryLevel);// 0x355e58ebd041 0x7e61bc4ca0
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x355d58ebd041 0x7e61bc4d80
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x355c58ebd041 0x7e61bc4e60
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x355b58ebd041 0x7e61bc4f40

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x40, Size: 0x8] 0x7e61bbbf80

--------------------------------
Class: SoundSubmixBase.Object
	bool bAutoDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61bbc000
	float AutoDisableTime;//[Offset: 0x2c, Size: 0x4] 0x7e61bbc080
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x30, Size: 0x10] 0x7e61bd0380

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x178, Size: 0x4] 0x7e61990b80
	int StreamingPriority;//[Offset: 0x17c, Size: 0x4] 0x7e61990c00
	enum SampleRateQuality;//[Offset: 0x180, Size: 0x1] 0x7e61972720
	byte SoundGroup;//[Offset: 0x182, Size: 0x1] 0x7e61990d00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x183, Size: 0x1] 0x7e61990d80
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x183, Size: 0x1] 0x7e61990e00
	enum SoundAssetCompressionType;//[Offset: 0x184, Size: 0x1] 0x7e619727c0
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x185, Size: 0x1] 0x7e61990f00
	bool bUseBinkAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x185, Size: 0x1] 0x7e61990f80
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x1a0, Size: 0x48] 0x7e61991000
	float[] FrequenciesToAnalyze;//[Offset: 0x1e8, Size: 0x10] 0x7e61972860
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1f8, Size: 0x10] 0x7e61972900
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x208, Size: 0x10] 0x7e61970060
	int InitialChunkSize;//[Offset: 0x218, Size: 0x4] 0x7e6196f900
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25c, Size: 0x1] 0x7e6196f980
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25c, Size: 0x1] 0x7e6196fa00
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25c, Size: 0x1] 0x7e6196fa80
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25d, Size: 0x1] 0x7e6196fb00
	enum LoadingBehavior;//[Offset: 0x25e, Size: 0x1] 0x7e61970100
	FString SpokenText;//[Offset: 0x260, Size: 0x10] 0x7e6196fc00
	float SubtitlePriority;//[Offset: 0x270, Size: 0x4] 0x7e6196fc80
	float Volume;//[Offset: 0x274, Size: 0x4] 0x7e6196fd00
	float Pitch;//[Offset: 0x278, Size: 0x4] 0x7e6196fd80
	int NumChannels;//[Offset: 0x27c, Size: 0x4] 0x7e6196fe00
	SoundWaveCuePoint[] CuePoints;//[Offset: 0x280, Size: 0x10] 0x7e619701a0
	int SampleRate;//[Offset: 0x290, Size: 0x4] 0x7e6196ff00
	SubtitleCue[] Subtitles;//[Offset: 0x2a0, Size: 0x10] 0x7e61970240
	CurveTable* Curves;//[Offset: 0x2b0, Size: 0x8] 0x7e6196e780
	CurveTable* InternalCurves;//[Offset: 0x2b8, Size: 0x8] 0x7e6196e800
	void SetSoundAssetCompressionType(enum InSoundAssetCompressionType);// 0x2b0858ebd041 0x7e619822a0
	enum GetSoundAssetCompressionType();// 0x2b0758ebd041 0x7e61982380

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1] 0x7e84e5ff60
	enum PitchRouting;//[Offset: 0x41, Size: 0x1] 0x7e84e5e340
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1] 0x7e84e5e3e0
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1] 0x7e84e5e480

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10] 0x7e84e5fd80
	float TimeSec;//[Offset: 0x10, Size: 0x4] 0x7e6166c700

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4] 0x7e6166c780
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4] 0x7e6166c800

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7e6166e680
	float TimeSec;//[Offset: 0x4, Size: 0x4] 0x7e6166e700

--------------------------------
Class: SoundWaveCuePoint
	int CuePointID;//[Offset: 0x0, Size: 0x4] 0x7e6166e480
	FString Label;//[Offset: 0x8, Size: 0x10] 0x7e6166e500
	int FramePosition;//[Offset: 0x18, Size: 0x4] 0x7e6166e580
	int FrameLength;//[Offset: 0x1c, Size: 0x4] 0x7e6166e600

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18] 0x7e8488a900
	float Time;//[Offset: 0x18, Size: 0x4] 0x7e8488a880

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4] 0x7e6166cd00
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7e6166cd80
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7e6166ce00
	float QFactor;//[Offset: 0xc, Size: 0x4] 0x7e6166ce80

--------------------------------
Class: AudioLinkSettingsAbstract.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8] 0x7e6166aa80
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4] 0x7e6166ab00
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4] 0x7e6166ab80

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e61bb8f00
	float EQPriority;//[Offset: 0x2c, Size: 0x4] 0x7e61bb8f80
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40] 0x7e61bb9000
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10] 0x7e61bd0c40
	float InitialDelay;//[Offset: 0x80, Size: 0x4] 0x7e61bb9100
	float FadeInTime;//[Offset: 0x84, Size: 0x4] 0x7e61bb9180
	float Duration;//[Offset: 0x88, Size: 0x4] 0x7e61bb9200
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4] 0x7e61bb9280

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4] 0x7e6166bd80
	float Gain0;//[Offset: 0x14, Size: 0x4] 0x7e6166be00
	float Bandwidth0;//[Offset: 0x18, Size: 0x4] 0x7e6166be80
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4] 0x7e6166bf00
	float Gain1;//[Offset: 0x20, Size: 0x4] 0x7e6166bf80
	float Bandwidth1;//[Offset: 0x24, Size: 0x4] 0x7e6166c000
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4] 0x7e6166c080
	float Gain2;//[Offset: 0x2c, Size: 0x4] 0x7e6166c100
	float Bandwidth2;//[Offset: 0x30, Size: 0x4] 0x7e6166c180
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4] 0x7e6166c200
	float Gain3;//[Offset: 0x38, Size: 0x4] 0x7e6166c280
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4] 0x7e6166c300

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8] 0x7e6166ba80
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4] 0x7e6166bb00
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4] 0x7e6166bb80
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4] 0x7e6166bc00
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7e6166bc80
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4] 0x7e6166bd00

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x24] 0x7e61bb7a00

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4] 0x7e6166a580
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7e6166a600
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1] 0x7e6166a680
	float RetriggerTime;//[Offset: 0x8, Size: 0x4] 0x7e6166a700
	float VolumeScale;//[Offset: 0xc, Size: 0x4] 0x7e6166a780
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4] 0x7e84e5e520
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4] 0x7e6166a880
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7e6166a900
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4] 0x7e6166a980
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4] 0x7e6166aa00

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3c8] 0x7e61bb7c80

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x7e61669700
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1] 0x7e61669780
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1] 0x7e61669800
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1] 0x7e61669880
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc8, Size: 0x1] 0x7e61669900
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc8, Size: 0x1] 0x7e61669980
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc8, Size: 0x1] 0x7e61669a00
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc8, Size: 0x1] 0x7e61669a80
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1] 0x7e61669b00
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1] 0x7e61669b80
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1] 0x7e61669c00
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc9, Size: 0x1] 0x7e61669c80
	bool bEnableSourceDataOverride;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc9, Size: 0x1] 0x7e61669d00
	byte SpatializationAlgorithm;//[Offset: 0xca, Size: 0x1] 0x7e61669d80
	float BinauralRadius;//[Offset: 0xcc, Size: 0x4] 0x7e61669e00
	enum AbsorptionMethod;//[Offset: 0xd0, Size: 0x1] 0x7e84e5e660
	byte OcclusionTraceChannel;//[Offset: 0xd1, Size: 0x1] 0x7e61669f00
	enum ReverbSendMethod;//[Offset: 0xd2, Size: 0x1] 0x7e84e5e700
	enum PriorityAttenuationMethod;//[Offset: 0xd3, Size: 0x1] 0x7e84e5e7a0
	float OmniRadius;//[Offset: 0xd4, Size: 0x4] 0x7e6166a080
	float StereoSpread;//[Offset: 0xd8, Size: 0x4] 0x7e6166a100
	float LPFRadiusMin;//[Offset: 0xdc, Size: 0x4] 0x7e6166a180
	float LPFRadiusMax;//[Offset: 0xe0, Size: 0x4] 0x7e6166a200
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xe8, Size: 0x88] 0x7e6166a280
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x170, Size: 0x88] 0x7e6166a300
	float LPFFrequencyAtMin;//[Offset: 0x1f8, Size: 0x4] 0x7e6166a380
	float LPFFrequencyAtMax;//[Offset: 0x1fc, Size: 0x4] 0x7e6166a400
	float HPFFrequencyAtMin;//[Offset: 0x200, Size: 0x4] 0x7e6166a480
	float HPFFrequencyAtMax;//[Offset: 0x204, Size: 0x4] 0x7e6166a500
	float FocusAzimuth;//[Offset: 0x208, Size: 0x4] 0x7e61668480
	float NonFocusAzimuth;//[Offset: 0x20c, Size: 0x4] 0x7e61668500
	float FocusDistanceScale;//[Offset: 0x210, Size: 0x4] 0x7e61668580
	float NonFocusDistanceScale;//[Offset: 0x214, Size: 0x4] 0x7e61668600
	float FocusPriorityScale;//[Offset: 0x218, Size: 0x4] 0x7e61668680
	float NonFocusPriorityScale;//[Offset: 0x21c, Size: 0x4] 0x7e61668700
	float FocusVolumeAttenuation;//[Offset: 0x220, Size: 0x4] 0x7e61668780
	float NonFocusVolumeAttenuation;//[Offset: 0x224, Size: 0x4] 0x7e61668800
	float FocusAttackInterpSpeed;//[Offset: 0x228, Size: 0x4] 0x7e61668880
	float FocusReleaseInterpSpeed;//[Offset: 0x22c, Size: 0x4] 0x7e61668900
	float OcclusionLowPassFilterFrequency;//[Offset: 0x230, Size: 0x4] 0x7e61668980
	float OcclusionVolumeAttenuation;//[Offset: 0x234, Size: 0x4] 0x7e61668a00
	float OcclusionInterpolationTime;//[Offset: 0x238, Size: 0x4] 0x7e61668a80
	float ReverbWetLevelMin;//[Offset: 0x23c, Size: 0x4] 0x7e61668b00
	float ReverbWetLevelMax;//[Offset: 0x240, Size: 0x4] 0x7e61668b80
	float ReverbDistanceMin;//[Offset: 0x244, Size: 0x4] 0x7e61668c00
	float ReverbDistanceMax;//[Offset: 0x248, Size: 0x4] 0x7e61668c80
	float ManualReverbSendLevel;//[Offset: 0x24c, Size: 0x4] 0x7e61668d00
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x250, Size: 0x88] 0x7e61668d80
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2d8, Size: 0x10] 0x7e84e5e840
	float PriorityAttenuationMin;//[Offset: 0x2e8, Size: 0x4] 0x7e61668e80
	float PriorityAttenuationMax;//[Offset: 0x2ec, Size: 0x4] 0x7e61668f00
	float PriorityAttenuationDistanceMin;//[Offset: 0x2f0, Size: 0x4] 0x7e61668f80
	float PriorityAttenuationDistanceMax;//[Offset: 0x2f4, Size: 0x4] 0x7e61669000
	float ManualPriorityAttenuation;//[Offset: 0x2f8, Size: 0x4] 0x7e61669080
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x300, Size: 0x88] 0x7e61669100
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x388, Size: 0x40] 0x7e61669180

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1] 0x7e84e570e0
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1] 0x7e615fd800
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4] 0x7e615fd880
	enum FalloffMode;//[Offset: 0x10, Size: 0x1] 0x7e84e57180
	Vector AttenuationShapeExtents;//[Offset: 0x18, Size: 0x18] 0x7e615fd980
	float ConeOffset;//[Offset: 0x30, Size: 0x4] 0x7e615fda00
	float FalloffDistance;//[Offset: 0x34, Size: 0x4] 0x7e615fda80
	float ConeSphereRadius;//[Offset: 0x38, Size: 0x4] 0x7e615fdb00
	float ConeSphereFalloffDistance;//[Offset: 0x3c, Size: 0x4] 0x7e615fdb80
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x40, Size: 0x88] 0x7e615fdc00

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80] 0x7e614c8700
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8] 0x7e614c8780

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x7e8485cae0

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4] 0x7e614c8500
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1] 0x7e614c8580
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1] 0x7e614c8600

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60] 0x7e614c8680

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1] 0x7e614ca100
	byte TangentMode;//[Offset: 0x1, Size: 0x1] 0x7e614ca180
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1] 0x7e614ca200
	float Time;//[Offset: 0x4, Size: 0x4] 0x7e614ca280
	float Value;//[Offset: 0x8, Size: 0x4] 0x7e614ca300
	float ArriveTangent;//[Offset: 0xc, Size: 0x4] 0x7e614ca380
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x7e614ca400
	float LeaveTangent;//[Offset: 0x14, Size: 0x4] 0x7e614ca480
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4] 0x7e614ca500

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80] 0x7e61a21800
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x7e61a21880
	float GetFloatValue(float InTime);// 0x2dd458ebd041 0x7e61a09620

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x2dd358ebd041 0x7e61a09700
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x2dd258ebd041 0x7e61a097e0

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8] 0x7e61669200
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1] 0x7e84e5e8e0
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4] 0x7e61669300
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4] 0x7e61669380
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4] 0x7e61669400
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4] 0x7e61669480
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4] 0x7e61667400
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88] 0x7e61667480

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10] 0x7e84e5e980
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10] 0x7e84e5ea20
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10] 0x7e84e5eac0
	SourceDataOverridePluginSourceSettingsBase*[] SourceDataOverridePluginSettingsArray;//[Offset: 0x30, Size: 0x10] 0x7e84e5eb60

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SourceDataOverridePluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x7e84e56f00
	enum SendStage;//[Offset: 0x1, Size: 0x1] 0x7e84e56fa0
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8] 0x7e615ff100
	float SendLevel;//[Offset: 0x10, Size: 0x4] 0x7e615ff180
	bool DisableManualSendClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x7e615ff200
	float MinSendLevel;//[Offset: 0x18, Size: 0x4] 0x7e615ff280
	float MaxSendLevel;//[Offset: 0x1c, Size: 0x4] 0x7e615ff300
	float MinSendDistance;//[Offset: 0x20, Size: 0x4] 0x7e615ff380
	float MaxSendDistance;//[Offset: 0x24, Size: 0x4] 0x7e615ff400
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88] 0x7e615ff480

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10] 0x7e61bd0d80
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61bb9400

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8] 0x7e6166c580
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e6166c600

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x7e84e5fec0
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8] 0x7e6166cf80
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8] 0x7e6166d000
	float SendLevel;//[Offset: 0x18, Size: 0x4] 0x7e6166d080
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4] 0x7e6166d100
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4] 0x7e6166d180
	float MinSendDistance;//[Offset: 0x24, Size: 0x4] 0x7e6166d200
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4] 0x7e6166d280
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88] 0x7e6166d300

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x338, Size: 0x1] 0x7e61bd0420
	float SourceBusDuration;//[Offset: 0x33c, Size: 0x4] 0x7e61bbc200
	AudioBus* AudioBus;//[Offset: 0x340, Size: 0x8] 0x7e61bbc280
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1] 0x7e61bbc300

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1] 0x7e6197a2e0

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x278, Size: 0x10] 0x7e61885f80
	class GameSession* GameSessionClass;//[Offset: 0x288, Size: 0x8] 0x7e61891aa0
	class GameStateBase* GameStateClass;//[Offset: 0x290, Size: 0x8] 0x7e61891b40
	class PlayerController* PlayerControllerClass;//[Offset: 0x298, Size: 0x8] 0x7e61891be0
	class PlayerState* PlayerStateClass;//[Offset: 0x2a0, Size: 0x8] 0x7e61891c80
	class HUD* HUDClass;//[Offset: 0x2a8, Size: 0x8] 0x7e61891d20
	class Pawn* DefaultPawnClass;//[Offset: 0x2b0, Size: 0x8] 0x7e61891dc0
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2b8, Size: 0x8] 0x7e61891e60
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2c0, Size: 0x8] 0x7e61891f00
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x2c8, Size: 0x8] 0x7e61891fa0
	GameSession* GameSession;//[Offset: 0x2d0, Size: 0x8] 0x7e61886000
	GameStateBase* GameState;//[Offset: 0x2d8, Size: 0x8] 0x7e61886080
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x2e0, Size: 0x8] 0x7e61886100
	FText DefaultPlayerName;//[Offset: 0x2e8, Size: 0x18] 0x7e61886180
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1] 0x7e61886200
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300, Size: 0x1] 0x7e61886280
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x300, Size: 0x1] 0x7e61886300
	void StartPlay();// 0x261358ebd041 0x7e6175d600
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x261258ebd041 0x7e6175d6e0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x261158ebd041 0x7e6175d7c0
	bool ShouldReset(Actor* ActorToReset);// 0x261058ebd041 0x7e6175d8a0
	void ReturnToMainMenuHost();// 0x260f58ebd041 0x7e6175d980
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x260e58ebd041 0x7e6175da60
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x260d58ebd041 0x7e6175db40
	void RestartPlayer(Controller* NewPlayer);// 0x260c58ebd041 0x7e6175dc20
	void ResetLevel();// 0x260b58ebd041 0x7e6175dd00
	bool PlayerCanRestart(PlayerController* Player);// 0x260a58ebd041 0x7e6175dde0
	bool MustSpectate(PlayerController* NewPlayerController);// 0x260958ebd041 0x7e6175dec0
	void K2_PostLogin(PlayerController* NewPlayer);// 0x260858ebd041 0x7e6175dfa0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x260758ebd041 0x7e6175e080
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x260658ebd041 0x7e6175e160
	void K2_OnLogout(Controller* ExitingController);// 0x260558ebd041 0x7e6175e240
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x260458ebd041 0x7e6175e320
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x260358ebd041 0x7e6175e400
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x260258ebd041 0x7e6175e4e0
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x260158ebd041 0x7e6175e5c0
	bool HasMatchStarted();// 0x263d58ebd041 0x7e6175e6a0
	bool HasMatchEnded();// 0x25ff58ebd041 0x7e6175adc0
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x25fe58ebd041 0x7e6175aea0
	int GetNumSpectators();// 0x25fd58ebd041 0x7e6175af80
	int GetNumPlayers();// 0x25fc58ebd041 0x7e6175b060
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x25fb58ebd041 0x7e6175b140
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x25fa58ebd041 0x7e6175b220
	Actor* ChoosePlayerStart(Controller* Player);// 0x25f958ebd041 0x7e6175b300
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x25f858ebd041 0x7e6175b3e0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x25f758ebd041 0x7e6175b4c0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x278, Size: 0x4] 0x7e61a72380
	int MaxPlayers;//[Offset: 0x27c, Size: 0x4] 0x7e61a72400
	int MaxPartySize;//[Offset: 0x280, Size: 0x4] 0x7e61a72480
	byte MaxSplitscreensPerConnection;//[Offset: 0x284, Size: 0x1] 0x7e61a72500
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1] 0x7e61a72580
	FName SessionName;//[Offset: 0x288, Size: 0x8] 0x7e61a72600

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x278, Size: 0x8] 0x7e61891640
	GameModeBase* AuthorityGameMode;//[Offset: 0x280, Size: 0x8] 0x7e61886f00
	class SpectatorPawn* SpectatorClass;//[Offset: 0x288, Size: 0x8] 0x7e618916e0
	PlayerState*[] PlayerArray;//[Offset: 0x290, Size: 0x10] 0x7e61891780
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x7e61887000
	float ReplicatedWorldTimeSeconds;//[Offset: 0x2a4, Size: 0x4] 0x7e61887080
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2a8, Size: 0x4] 0x7e61887100
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x2ac, Size: 0x4] 0x7e61887180
	void OnRep_SpectatorClass();// 0x262b58ebd041 0x7e6175f660
	void OnRep_ReplicatedWorldTimeSeconds();// 0x262a58ebd041 0x7e6175f740
	void OnRep_ReplicatedHasBegunPlay();// 0x262958ebd041 0x7e6175f820
	void OnRep_GameModeClass();// 0x262858ebd041 0x7e6175f900
	bool HasMatchStarted();// 0x262758ebd041 0x7e6175f9e0
	bool HasMatchEnded();// 0x262658ebd041 0x7e6175fac0
	bool HasBegunPlay();// 0x262558ebd041 0x7e6175fba0
	float GetServerWorldTimeSeconds();// 0x262458ebd041 0x7e6175fc80
	float GetPlayerStartTime(Controller* Controller);// 0x262358ebd041 0x7e6175fd60
	float GetPlayerRespawnDelay(Controller* Controller);// 0x262258ebd041 0x7e6175fe40

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x2f8, Size: 0x4] 0x7e61a2c600
	float BaseLookUpRate;//[Offset: 0x2fc, Size: 0x4] 0x7e61a2a580
	PawnMovementComponent* MovementComponent;//[Offset: 0x300, Size: 0x8] 0x7e61a2a600
	SphereComponent* CollisionComponent;//[Offset: 0x308, Size: 0x8] 0x7e61a2a680
	StaticMeshComponent* MeshComponent;//[Offset: 0x310, Size: 0x8] 0x7e61a2a700
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1] 0x7e61a2a780
	void TurnAtRate(float Rate);// 0x2e3758ebd041 0x7e61a0e860
	void MoveUp_World(float Val);// 0x2e3658ebd041 0x7e61a0e940
	void MoveRight(float Val);// 0x2e3558ebd041 0x7e61a0ea20
	void MoveForward(float Val);// 0x2e3458ebd041 0x7e61a0eb00
	void LookUpAtRate(float Rate);// 0x2e3358ebd041 0x7e61a0ebe0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x158, Size: 0x8] 0x7e6181ac00
	bool IsMoveInputIgnored();// 0x23e958ebd041 0x7e617ef120
	Vector GetPendingInputVector();// 0x23e858ebd041 0x7e617ef200
	Pawn* GetPawnOwner();// 0x23e758ebd041 0x7e617ef2e0
	Vector GetLastInputVector();// 0x23e658ebd041 0x7e617ef3c0
	Vector ConsumeInputVector();// 0x23e558ebd041 0x7e617ef4a0
	void AddInputVector(Vector WorldVector, bool bForce);// 0x23e458ebd041 0x7e617ef580

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x118, Size: 0x30] 0x7e6181b000
	float FixedPathBrakingDistance;//[Offset: 0x148, Size: 0x4] 0x7e6181b080
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x7e6181b100
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1] 0x7e6181b180
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1] 0x7e6181b200
	MovementProperties MovementState;//[Offset: 0x14d, Size: 0x1] 0x7e6181b280
	Object* PathFollowingComp;//[Offset: 0x150, Size: 0x8] 0x7e6181b300
	void StopMovementKeepPathing();// 0x23e358ebd041 0x7e617ef660
	void StopActiveMovement();// 0x23e258ebd041 0x7e617ef740
	bool IsSwimming();// 0x23e158ebd041 0x7e617ef820
	bool IsMovingOnGround();// 0x23e058ebd041 0x7e617ef900
	bool IsFlying();// 0x23df58ebd041 0x7e617ef9e0
	bool IsFalling();// 0x23de58ebd041 0x7e617efac0
	bool IsCrouching();// 0x23dd58ebd041 0x7e617efba0

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8] 0x7e84de3080
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8] 0x7e84de3000
	Vector Velocity;//[Offset: 0xc8, Size: 0x18] 0x7e84de2f80
	Vector PlaneConstraintNormal;//[Offset: 0xe0, Size: 0x18] 0x7e84de2f00
	Vector PlaneConstraintOrigin;//[Offset: 0xf8, Size: 0x18] 0x7e84de2e80
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1] 0x7e84de2e00
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1] 0x7e84de2d80
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 0x1] 0x7e8488d880
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 0x1] 0x7e8488d800
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 0x1] 0x7e8488d780
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x110, Size: 0x1] 0x7e8488d700
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x110, Size: 0x1] 0x7e8488f780
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x110, Size: 0x1] 0x7e8488f700
	enum PlaneConstraintAxisSetting;//[Offset: 0x113, Size: 0x1] 0x7e84e2ef20
	void StopMovementImmediately();// 0xb6a58ebd041 0x7e84846520
	void SnapUpdatedComponentToPlane();// 0xb6958ebd041 0x7e84846440
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xb6858ebd041 0x7e84846360
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xb6758ebd041 0x7e84846280
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xb6658ebd041 0x7e848461a0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xb6558ebd041 0x7e848460c0
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xb6458ebd041 0x7e84845fe0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xb6358ebd041 0x7e84845f00
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xb6258ebd041 0x7e84845e20
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xb6158ebd041 0x7e84845d40
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xb6058ebd041 0x7e84845c60
	Vector GetPlaneConstraintOrigin();// 0xb5f58ebd041 0x7e84845b80
	Vector GetPlaneConstraintNormal();// 0xb5e58ebd041 0x7e84845aa0
	enum GetPlaneConstraintAxisSetting();// 0xb5d58ebd041 0x7e848459c0
	PhysicsVolume* GetPhysicsVolume();// 0xb5b58ebd041 0x7e848458e0
	float GetMaxSpeed();// 0xb5a58ebd041 0x7e84845800
	float GetGravityZ();// 0xb5958ebd041 0x7e84845720
	Vector ConstrainNormalToPlane(Vector Normal);// 0xb0558ebd041 0x7e84849000
	Vector ConstrainLocationToPlane(Vector Location);// 0xb5758ebd041 0x7e84848f20
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xb5658ebd041 0x7e84848e40

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4] 0x7e61654300
	float AgentHeight;//[Offset: 0x8, Size: 0x4] 0x7e61654380
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4] 0x7e61654400
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4] 0x7e61654480
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18] 0x7e61654500

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61654580
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61654600
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61654680
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e61654700
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e61654780

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x550, Size: 0x4] 0x7e61a42180
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x2e7c58ebd041 0x7e61a35560
	float GetUnscaledSphereRadius();// 0x2ebd58ebd041 0x7e61a35640
	float GetShapeScale();// 0x2e7a58ebd041 0x7e61a31d60
	float GetScaledSphereRadius();// 0x2e7958ebd041 0x7e61a31e40

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x55c, Size: 0x4] 0x7e618e0180
	int PreviousLODLevel;//[Offset: 0x560, Size: 0x4] 0x7e618e0200
	int MinLOD;//[Offset: 0x564, Size: 0x4] 0x7e618e0280
	int SubDivisionStepSize;//[Offset: 0x568, Size: 0x4] 0x7e618e0300
	StaticMesh* StaticMesh;//[Offset: 0x570, Size: 0x8] 0x7e618e0380
	Color WireframeColorOverride;//[Offset: 0x578, Size: 0x4] 0x7e618e0400
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57c, Size: 0x1] 0x7e618e0480
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57c, Size: 0x1] 0x7e618e0500
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57c, Size: 0x1] 0x7e618e0580
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57c, Size: 0x1] 0x7e618e0600
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57c, Size: 0x1] 0x7e618e0680
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57c, Size: 0x1] 0x7e618e0700
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x57c, Size: 0x1] 0x7e618e0780
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x57c, Size: 0x1] 0x7e618e0800
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57d, Size: 0x1] 0x7e618e0880
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57d, Size: 0x1] 0x7e618e0900
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57d, Size: 0x1] 0x7e618e0980
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57d, Size: 0x1] 0x7e618e0a00
	bool bSortTriangles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57d, Size: 0x1] 0x7e618e0a80
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57d, Size: 0x1] 0x7e618e0b00
	int OverriddenLightMapRes;//[Offset: 0x580, Size: 0x4] 0x7e618e0b80
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x584, Size: 0x4] 0x7e618e0c00
	float DistanceFieldSelfShadowBias;//[Offset: 0x588, Size: 0x4] 0x7e618e0c80
	float StreamingDistanceMultiplier;//[Offset: 0x58c, Size: 0x4] 0x7e618e0d00
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x590, Size: 0x10] 0x7e61895f60
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5a0, Size: 0x10] 0x7e61896000
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5b0, Size: 0x18] 0x7e618e0e80
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x279058ebd041 0x7e618d2d20
	void SetReverseCulling(bool ReverseCulling);// 0x278f58ebd041 0x7e618d2e00
	void SetForcedLodModel(int NewForcedLodModel);// 0x278e58ebd041 0x7e618d2ee0
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x278d58ebd041 0x7e618d2fc0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x278c58ebd041 0x7e618d30a0
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x278b58ebd041 0x7e618d3180
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x278a58ebd041 0x7e618d3260

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x538, Size: 0x10] 0x7e84854de0
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 0x1] 0x7e61422800
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0xfda58ebd041 0x7e613ddc20
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0xfd958ebd041 0x7e613ddd00
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0xfd858ebd041 0x7e613ddde0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0xfd758ebd041 0x7e613ddec0
	FName[] GetMaterialSlotNames();// 0xfd658ebd041 0x7e613ddfa0
	MaterialInterface*[] GetMaterials();// 0xfd558ebd041 0x7e613de080
	int GetMaterialIndex(FName MaterialSlotName);// 0xfc658ebd041 0x7e613de160

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerQualityLevelInt MinQualityLevelLOD;//[Offset: 0xf0, Size: 0x68] 0x7e61be2b00
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 0x4] 0x7e61be2b80
	StaticMaterial[] StaticMaterials;//[Offset: 0x160, Size: 0x10] 0x7e61bd20e0
	float LightmapUVDensity;//[Offset: 0x170, Size: 0x4] 0x7e61be2c80
	int LightMapResolution;//[Offset: 0x174, Size: 0x4] 0x7e61be2d00
	int LightMapCoordinateIndex;//[Offset: 0x178, Size: 0x4] 0x7e61be2d80
	float DistanceFieldSelfShadowBias;//[Offset: 0x17c, Size: 0x4] 0x7e61be2e00
	BodySetup* BodySetup;//[Offset: 0x180, Size: 0x8] 0x7e61be2e80
	int LODForCollision;//[Offset: 0x188, Size: 0x4] 0x7e61be2f00
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18c, Size: 0x1] 0x7e61be2f80
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18c, Size: 0x1] 0x7e61be3000
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18c, Size: 0x1] 0x7e61be3080
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18c, Size: 0x1] 0x7e61be3100
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18c, Size: 0x1] 0x7e61be3180
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18c, Size: 0x1] 0x7e61be1100
	bool bDoFastBuild;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18c, Size: 0x1] 0x7e61be1180
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18c, Size: 0x1] 0x7e61be1200
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18d, Size: 0x1] 0x7e61be1280
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18d, Size: 0x1] 0x7e61be1300
	StaticMeshSocket*[] Sockets;//[Offset: 0x1b0, Size: 0x10] 0x7e61bd2180
	Vector PositiveBoundsExtension;//[Offset: 0x1d0, Size: 0x18] 0x7e61be1400
	Vector NegativeBoundsExtension;//[Offset: 0x1e8, Size: 0x18] 0x7e61be1480
	BoxSphereBounds ExtendedBounds;//[Offset: 0x200, Size: 0x38] 0x7e61be1500
	int ElementToIgnoreForTexFactor;//[Offset: 0x238, Size: 0x4] 0x7e61be1580
	AssetUserData*[] AssetUserData;//[Offset: 0x240, Size: 0x10] 0x7e61bd2220
	NavCollisionBase* NavCollision;//[Offset: 0x250, Size: 0x8] 0x7e61be1680
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0x359f58ebd041 0x7e61bc8740
	void SetMinimumLODForPlatforms(out const <FName,int> PlatformMinimumLODs);// 0x359e58ebd041 0x7e61bc8820
	void SetMinimumLODForPlatform(out const FName PlatformName, int InMinLOD);// 0x359d58ebd041 0x7e61bc8900
	void RemoveSocket(StaticMeshSocket* Socket);// 0x359c58ebd041 0x7e61bc89e0
	StaticMeshDescription* GetStaticMeshDescription(int LODIndex);// 0x359b58ebd041 0x7e61bc8ac0
	StaticMaterial[] GetStaticMaterials();// 0x359a58ebd041 0x7e61bc8ba0
	int GetNumSections(int InLOD);// 0x359958ebd041 0x7e61bc8c80
	int GetNumLODs();// 0x359858ebd041 0x7e61bc8d60
	void GetMinimumLODForQualityLevels(out <FName,int> QualityLevelMinimumLODs);// 0x359758ebd041 0x7e61bc8e40
	int GetMinimumLODForQualityLevel(out const FName QualityLevel);// 0x359658ebd041 0x7e61bc8f20
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x35d758ebd041 0x7e61bc9000
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x359458ebd041 0x7e61bc5720
	int GetMaterialIndex(FName MaterialSlotName);// 0x359358ebd041 0x7e61bc5800
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x359258ebd041 0x7e61bc58e0
	BoxSphereBounds GetBounds();// 0x359158ebd041 0x7e61bc59c0
	Box GetBoundingBox();// 0x359058ebd041 0x7e61bc5aa0
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x358f58ebd041 0x7e61bc5b80
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x358e58ebd041 0x7e61bc5c60
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild);// 0x358d58ebd041 0x7e61bc5d40
	void AddSocket(StaticMeshSocket* Socket);// 0x358c58ebd041 0x7e61bc5e20
	FName AddMaterial(MaterialInterface* Material);// 0x358b58ebd041 0x7e61bc5f00

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4] 0x7e6152b700

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x7e6166fc80
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x7e6166fd00
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8] 0x7e6166fd80
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14] 0x7e6166fe00

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61614d00
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e61614d80
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4] 0x7e61614e00

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x7e61be2880
	Vector RelativeLocation;//[Offset: 0x30, Size: 0x18] 0x7e61be2900
	Rotator RelativeRotation;//[Offset: 0x48, Size: 0x18] 0x7e61be2980
	Vector RelativeScale;//[Offset: 0x60, Size: 0x18] 0x7e61be2a00
	FString Tag;//[Offset: 0x78, Size: 0x10] 0x7e61be2a80

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0x18] 0x7e8412f880
	Vector BoxExtent;//[Offset: 0x18, Size: 0x18] 0x7e8412f800
	double SphereRadius;//[Offset: 0x30, Size: 0x8] 0x7e8412f780

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e61b59c80

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x2bae58ebd041 0x7e6198b220
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x2bad58ebd041 0x7e6198b300
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x2bac58ebd041 0x7e6198b3e0
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x2bab58ebd041 0x7e6198b4c0

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x2baa58ebd041 0x7e6198b5a0
	void SetPolygonVertexInstances(PolygonID PolygonID, out const VertexInstanceID[] VertexInstanceIDs);// 0x2ba958ebd041 0x7e6198b680
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x2ba858ebd041 0x7e6198b760
	void ReversePolygonFacing(PolygonID PolygonID);// 0x2ba758ebd041 0x7e6198b840
	void ReserveNewVertices(int NumberOfNewVertices);// 0x2ba658ebd041 0x7e6198b920
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x2ba558ebd041 0x7e6198ba00
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x2ba458ebd041 0x7e6198bae0
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x2ba358ebd041 0x7e6198bbc0
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x2ba258ebd041 0x7e6198bca0
	void ReserveNewEdges(int NumberOfNewEdges);// 0x2ba158ebd041 0x7e6198bd80
	bool IsVertexValid(VertexID VertexID);// 0x2ba058ebd041 0x7e6198be60
	bool IsVertexOrphaned(VertexID VertexID);// 0x2b9f58ebd041 0x7e6198bf40
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x2b9e58ebd041 0x7e6198c020
	bool IsTriangleValid(const TriangleID TriangleID);// 0x2b9d58ebd041 0x7e6198c100
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x2b9c58ebd041 0x7e6198c1e0
	bool IsPolygonValid(PolygonID PolygonID);// 0x2b9b58ebd041 0x7e6198c2c0
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x2b9a58ebd041 0x7e6198c3a0
	bool IsEmpty();// 0x2b9958ebd041 0x7e6198c480
	bool IsEdgeValid(EdgeID EdgeID);// 0x2b9858ebd041 0x7e6198c560
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x2b9758ebd041 0x7e6198c640
	bool IsEdgeInternal(EdgeID EdgeID);// 0x2b9658ebd041 0x7e6198c720
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2b9558ebd041 0x7e6198c800
	Vector GetVertexPosition(VertexID VertexID);// 0x2b9458ebd041 0x7e6198c8e0
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x2bd558ebd041 0x7e6198c9c0
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x2b9258ebd041 0x7e619890e0
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x2b9158ebd041 0x7e619891c0
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x2b9058ebd041 0x7e619892a0
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x2b8f58ebd041 0x7e61989380
	int GetVertexInstanceCount();// 0x2b8e58ebd041 0x7e61989460
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x2b8d58ebd041 0x7e61989540
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x2b8c58ebd041 0x7e61989620
	int GetVertexCount();// 0x2b8b58ebd041 0x7e61989700
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x2b8a58ebd041 0x7e619897e0
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x2b8958ebd041 0x7e619898c0
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x2b8858ebd041 0x7e619899a0
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x2b8758ebd041 0x7e61989a80
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x2b8658ebd041 0x7e61989b60
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2b8558ebd041 0x7e61989c40
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x2b8458ebd041 0x7e61989d20
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x2b8358ebd041 0x7e61989e00
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x2b8258ebd041 0x7e61989ee0
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x2b8158ebd041 0x7e61989fc0
	int GetTriangleCount();// 0x2b8058ebd041 0x7e6198a0a0
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x2b7f58ebd041 0x7e6198a180
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x2b7e58ebd041 0x7e6198a260
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2b7d58ebd041 0x7e6198a340
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x2b7c58ebd041 0x7e6198a420
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x2b7b58ebd041 0x7e6198a500
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x2b7a58ebd041 0x7e6198a5e0
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x2b7958ebd041 0x7e6198a6c0
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x2b7858ebd041 0x7e6198a7a0
	int GetPolygonGroupCount();// 0x2b7758ebd041 0x7e6198a880
	int GetPolygonCount();// 0x2b7658ebd041 0x7e6198a960
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x2b7558ebd041 0x7e6198aa40
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x2b7458ebd041 0x7e6198ab20
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x2b7358ebd041 0x7e6198ac00
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x2bb458ebd041 0x7e6198ace0
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x2b7158ebd041 0x7e61987400
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x2b7058ebd041 0x7e619874e0
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x2b6f58ebd041 0x7e619875c0
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x2b6e58ebd041 0x7e619876a0
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x2b6d58ebd041 0x7e61987780
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x2b6c58ebd041 0x7e61987860
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x2b6b58ebd041 0x7e61987940
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x2b6a58ebd041 0x7e61987a20
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x2b6958ebd041 0x7e61987b00
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x2b6858ebd041 0x7e61987be0
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x2b6758ebd041 0x7e61987cc0
	int GetEdgeCount();// 0x2b6658ebd041 0x7e61987da0
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x2b6558ebd041 0x7e61987e80
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x2b6458ebd041 0x7e61987f60
	void Empty();// 0x2b6358ebd041 0x7e61988040
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x2b6258ebd041 0x7e61988120
	void DeleteVertex(VertexID VertexID);// 0x2b6158ebd041 0x7e61988200
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x2b6058ebd041 0x7e619882e0
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x2b5f58ebd041 0x7e619883c0
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x2b5e58ebd041 0x7e619884a0
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x2b5d58ebd041 0x7e61988580
	void CreateVertexWithID(VertexID VertexID);// 0x2b5c58ebd041 0x7e61988660
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x2b5b58ebd041 0x7e61988740
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x2b5a58ebd041 0x7e61988820
	VertexID CreateVertex();// 0x2b5958ebd041 0x7e61988900
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2b5858ebd041 0x7e619889e0
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2b5758ebd041 0x7e61988ac0
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2b5658ebd041 0x7e61988ba0
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x2b5558ebd041 0x7e61988c80
	PolygonGroupID CreatePolygonGroup();// 0x2b5458ebd041 0x7e61988d60
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2b5358ebd041 0x7e61988e40
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x2b5258ebd041 0x7e61988f20
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x2b9358ebd041 0x7e61989000
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x2b5058ebd041 0x7e61985720

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4] 0x7e615c1580

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4] 0x7e6166f680
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4] 0x7e6166f700
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x7e6166f780

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e6161de00
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e6161de80
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e6161df00
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e6161df80
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4] 0x7e6161e000
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4] 0x7e6161e080
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4] 0x7e6161e100
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4] 0x7e6161e180
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4] 0x7e6161e200

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x278, Size: 0x8] 0x7e61a29700
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x7e61a29780
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1] 0x7e61a29800
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1] 0x7e61a29880
	int CurrentTargetIndex;//[Offset: 0x284, Size: 0x4] 0x7e61a29900
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1] 0x7e61a29980
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1] 0x7e61a29a00
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1] 0x7e61a29a80
	Actor*[] PostRenderedActors;//[Offset: 0x290, Size: 0x10] 0x7e6197f600
	FName[] DebugDisplay;//[Offset: 0x2a8, Size: 0x10] 0x7e6197f6a0
	FName[] ToggledDebugCategories;//[Offset: 0x2b8, Size: 0x10] 0x7e6197f740
	Canvas* Canvas;//[Offset: 0x2c8, Size: 0x8] 0x7e61a29c80
	Canvas* DebugCanvas;//[Offset: 0x2d0, Size: 0x8] 0x7e61a29d00
	DebugTextInfo[] DebugTextList;//[Offset: 0x2d8, Size: 0x10] 0x7e6197cea0
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2e8, Size: 0x8] 0x7e6197cf40
	Actor* ShowDebugTargetActor;//[Offset: 0x2f0, Size: 0x8] 0x7e61a29e00
	void ShowHUD();// 0x2e2458ebd041 0x7e61a0f900
	void ShowDebugToggleSubCategory(FName Category);// 0x2e2358ebd041 0x7e61a0f9e0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x2e2258ebd041 0x7e61a0fac0
	void ShowDebug(FName DebugType);// 0x2e2158ebd041 0x7e61a0fba0
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x2e2058ebd041 0x7e61a0fc80
	void RemoveAllDebugStrings();// 0x2e1f58ebd041 0x7e61a0fd60
	void ReceiveHitBoxRelease(const FName BoxName);// 0x2e1e58ebd041 0x7e61a0fe40
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0xffffff8158ebd000 0x7e61a0ff20
	void ReceiveHitBoxClick(const FName BoxName);// 0x2e1c58ebd041 0x7e61a0caa0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x2e1b58ebd041 0x7e61a0cb80
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x2e1a58ebd041 0x7e61a0cc60
	Vector Project(Vector Location, bool bClampToZeroPlane);// 0x2e1958ebd041 0x7e61a0cd40
	void PreviousDebugTarget();// 0x2e1858ebd041 0x7e61a0ce20
	void NextDebugTarget();// 0x2e1758ebd041 0x7e61a0cf00
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x2e1658ebd041 0x7e61a0cfe0
	PlayerController* GetOwningPlayerController();// 0x2e1558ebd041 0x7e61a0d0c0
	Pawn* GetOwningPawn();// 0x2e1458ebd041 0x7e61a0d1a0
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x2e1358ebd041 0x7e61a0d280
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x2e1258ebd041 0x7e61a0d360
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2e1158ebd041 0x7e61a0d440
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x2e1058ebd041 0x7e61a0d520
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x2e0f58ebd041 0x7e61a0d600
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x2e0e58ebd041 0x7e61a0d6e0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x2e0d58ebd041 0x7e61a0d7c0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2e0c58ebd041 0x7e61a0d8a0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x2e0b58ebd041 0x7e61a0d980
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x2e0a58ebd041 0x7e61a0da60
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x2e0958ebd041 0x7e61a0db40
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x2e0858ebd041 0x7e61a0dc20

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4] 0x7e61a16780
	float OrgY;//[Offset: 0x2c, Size: 0x4] 0x7e61a16800
	float ClipX;//[Offset: 0x30, Size: 0x4] 0x7e61a16880
	float ClipY;//[Offset: 0x34, Size: 0x4] 0x7e61a16900
	Color DrawColor;//[Offset: 0x38, Size: 0x4] 0x7e61a16980
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7e61a16a00
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7e61a16a80
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7e61a16b00
	int SizeX;//[Offset: 0x40, Size: 0x4] 0x7e61a16b80
	int SizeY;//[Offset: 0x44, Size: 0x4] 0x7e61a16c00
	Plane ColorModulate;//[Offset: 0x50, Size: 0x20] 0x7e61a16c80
	Texture2D* DefaultTexture;//[Offset: 0x70, Size: 0x8] 0x7e61a16d00
	Texture2D* GradientTexture0;//[Offset: 0x78, Size: 0x8] 0x7e61a16d80
	ReporterGraph* ReporterGraph;//[Offset: 0x80, Size: 0x8] 0x7e61a16e00
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x2d4e58ebd041 0x7e61a02460
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x2d4d58ebd041 0x7e61a02540
	Vector K2_Project(Vector WorldLocation);// 0x2d4c58ebd041 0x7e61a02620
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x2d4b58ebd041 0x7e61a02700
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x2d4a58ebd041 0x7e61a027e0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x2d4958ebd041 0x7e61a028c0
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x2d4858ebd041 0x7e61a029a0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x2d4758ebd041 0x7e61a02a80
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x2d4658ebd041 0x7e61a02b60
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x2d4558ebd041 0x7e61a02c40
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x2d4458ebd041 0x7e61a02d20
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x2d4358ebd041 0x7e61a02e00
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x2d4258ebd041 0x7e61a02ee0

--------------------------------
Class: Plane.Vector
	double W;//[Offset: 0x18, Size: 0x8] 0x7e8412ff80

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x10] 0x7e61641680
	Vector2D V0_UV;//[Offset: 0x10, Size: 0x10] 0x7e61641700
	LinearColor V0_Color;//[Offset: 0x20, Size: 0x10] 0x7e61641780
	Vector2D V1_Pos;//[Offset: 0x30, Size: 0x10] 0x7e61641800
	Vector2D V1_UV;//[Offset: 0x40, Size: 0x10] 0x7e61641880
	LinearColor V1_Color;//[Offset: 0x50, Size: 0x10] 0x7e61641900
	Vector2D V2_Pos;//[Offset: 0x60, Size: 0x10] 0x7e61641980
	Vector2D V2_UV;//[Offset: 0x70, Size: 0x10] 0x7e61641a00
	LinearColor V2_Color;//[Offset: 0x80, Size: 0x10] 0x7e61641a80

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8] 0x7e61619080
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0x18] 0x7e61619100
	Vector SrcActorDesiredOffset;//[Offset: 0x20, Size: 0x18] 0x7e61619180
	FString DebugText;//[Offset: 0x38, Size: 0x10] 0x7e61619200
	float TimeRemaining;//[Offset: 0x48, Size: 0x4] 0x7e61619280
	float Duration;//[Offset: 0x4c, Size: 0x4] 0x7e61619300
	Color TextColor;//[Offset: 0x50, Size: 0x4] 0x7e61619380
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7e61619400
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x7e61619480
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x7e61617400
	Vector OrigActorLocation;//[Offset: 0x58, Size: 0x18] 0x7e61617480
	Font* Font;//[Offset: 0x70, Size: 0x8] 0x7e61617500
	float FontScale;//[Offset: 0x78, Size: 0x4] 0x7e61617580

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x7e61baaa00
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1] 0x7e61baaa80
	uint32 Channels;//[Offset: 0x27c, Size: 0x4] 0x7e61baab00
	uint32 InRate;//[Offset: 0x280, Size: 0x4] 0x7e61baab80
	uint32 OutRate;//[Offset: 0x284, Size: 0x4] 0x7e61baac00
	uint32 MaxPacketOverhead;//[Offset: 0x28c, Size: 0x4] 0x7e61baac80
	uint32 InRateClientMax;//[Offset: 0x290, Size: 0x4] 0x7e61baad00
	uint32 InRateClientMin;//[Offset: 0x294, Size: 0x4] 0x7e61baad80
	uint32 InRateClientAvg;//[Offset: 0x298, Size: 0x4] 0x7e61baae00
	uint32 InPacketsClientMax;//[Offset: 0x29c, Size: 0x4] 0x7e61baae80
	uint32 InPacketsClientMin;//[Offset: 0x2a0, Size: 0x4] 0x7e61baaf00
	uint32 InPacketsClientAvg;//[Offset: 0x2a4, Size: 0x4] 0x7e61baaf80
	uint32 OutRateClientMax;//[Offset: 0x2a8, Size: 0x4] 0x7e61bab000
	uint32 OutRateClientMin;//[Offset: 0x2ac, Size: 0x4] 0x7e61bab080
	uint32 OutRateClientAvg;//[Offset: 0x2b0, Size: 0x4] 0x7e61bab100
	uint32 OutPacketsClientMax;//[Offset: 0x2b4, Size: 0x4] 0x7e61bab180
	uint32 OutPacketsClientMin;//[Offset: 0x2b8, Size: 0x4] 0x7e61bab200
	uint32 OutPacketsClientAvg;//[Offset: 0x2bc, Size: 0x4] 0x7e61bab280
	uint32 NetNumClients;//[Offset: 0x2c0, Size: 0x4] 0x7e61bab300
	uint32 InPackets;//[Offset: 0x2c4, Size: 0x4] 0x7e61bab380
	uint32 OutPackets;//[Offset: 0x2c8, Size: 0x4] 0x7e61bab400
	uint32 InBunches;//[Offset: 0x2cc, Size: 0x4] 0x7e61bab480
	uint32 OutBunches;//[Offset: 0x2d0, Size: 0x4] 0x7e61bab500
	uint32 OutLoss;//[Offset: 0x2d4, Size: 0x4] 0x7e61bab580
	uint32 InLoss;//[Offset: 0x2d8, Size: 0x4] 0x7e61ba9500
	uint32 VoiceBytesSent;//[Offset: 0x2dc, Size: 0x4] 0x7e61ba9580
	uint32 VoiceBytesRecv;//[Offset: 0x2e0, Size: 0x4] 0x7e61ba9600
	uint32 VoicePacketsSent;//[Offset: 0x2e4, Size: 0x4] 0x7e61ba9680
	uint32 VoicePacketsRecv;//[Offset: 0x2e8, Size: 0x4] 0x7e61ba9700
	uint32 PercentInVoice;//[Offset: 0x2ec, Size: 0x4] 0x7e61ba9780
	uint32 PercentOutVoice;//[Offset: 0x2f0, Size: 0x4] 0x7e61ba9800
	uint32 NumActorChannels;//[Offset: 0x2f4, Size: 0x4] 0x7e61ba9880
	uint32 NumConsideredActors;//[Offset: 0x2f8, Size: 0x4] 0x7e61ba9900
	uint32 PrioritizedActors;//[Offset: 0x2fc, Size: 0x4] 0x7e61ba9980
	uint32 NumRelevantActors;//[Offset: 0x300, Size: 0x4] 0x7e61ba9a00
	uint32 NumRelevantDeletedActors;//[Offset: 0x304, Size: 0x4] 0x7e61ba9a80
	uint32 NumReplicatedActorAttempts;//[Offset: 0x308, Size: 0x4] 0x7e61ba9b00
	uint32 NumReplicatedActors;//[Offset: 0x30c, Size: 0x4] 0x7e61ba9b80
	uint32 NumActors;//[Offset: 0x310, Size: 0x4] 0x7e61ba9c00
	uint32 NumNetActors;//[Offset: 0x314, Size: 0x4] 0x7e61ba9c80
	uint32 NumDormantActors;//[Offset: 0x318, Size: 0x4] 0x7e61ba9d00
	uint32 NumInitiallyDormantActors;//[Offset: 0x31c, Size: 0x4] 0x7e61ba9d80
	uint32 NumNetGUIDsAckd;//[Offset: 0x320, Size: 0x4] 0x7e61ba9e00
	uint32 NumNetGUIDsPending;//[Offset: 0x324, Size: 0x4] 0x7e61ba9e80
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x328, Size: 0x4] 0x7e61ba9f00
	uint32 ObjPathBytes;//[Offset: 0x32c, Size: 0x4] 0x7e61ba9f80
	uint32 NetGUIDOutRate;//[Offset: 0x330, Size: 0x4] 0x7e61baa000
	uint32 NetGUIDInRate;//[Offset: 0x334, Size: 0x4] 0x7e61baa080
	uint32 NetSaturated;//[Offset: 0x338, Size: 0x4] 0x7e61baa100

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x278, Size: 0x4] 0x7e61a60700
	float SeverePacketLossThreshold;//[Offset: 0x27c, Size: 0x4] 0x7e61a60780
	int BadPingThreshold;//[Offset: 0x280, Size: 0x4] 0x7e61a60800
	int SeverePingThreshold;//[Offset: 0x284, Size: 0x4] 0x7e61a60880
	int AdjustedNetSpeed;//[Offset: 0x288, Size: 0x4] 0x7e61a60900
	float LastNetSpeedUpdateTime;//[Offset: 0x28c, Size: 0x4] 0x7e61a60980
	int TotalNetBandwidth;//[Offset: 0x290, Size: 0x4] 0x7e61a60a00
	int MinDynamicBandwidth;//[Offset: 0x294, Size: 0x4] 0x7e61a60a80
	int MaxDynamicBandwidth;//[Offset: 0x298, Size: 0x4] 0x7e61a60b00
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1] 0x7e61a60b80
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1] 0x7e61a60c00
	float StandbyRxCheatTime;//[Offset: 0x2a0, Size: 0x4] 0x7e61a60c80
	float StandbyTxCheatTime;//[Offset: 0x2a4, Size: 0x4] 0x7e61a60d00
	float PercentMissingForRxStandby;//[Offset: 0x2a8, Size: 0x4] 0x7e61a60d80
	float PercentMissingForTxStandby;//[Offset: 0x2ac, Size: 0x4] 0x7e61a60e00
	float PercentForBadPing;//[Offset: 0x2b0, Size: 0x4] 0x7e61a60e80
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2b4, Size: 0x4] 0x7e61a60f00
	float MoveRepSize;//[Offset: 0x2b8, Size: 0x4] 0x7e61a60f80
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x2bc, Size: 0x4] 0x7e61a61000
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x2c0, Size: 0x4] 0x7e61a61080
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x2c4, Size: 0x4] 0x7e61a4f800
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x2c8, Size: 0x4] 0x7e61a4f880
	float MaxClientForcedUpdateDuration;//[Offset: 0x2cc, Size: 0x4] 0x7e61a4f900
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x2d0, Size: 0x4] 0x7e61a4f980
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x2d4, Size: 0x4] 0x7e61a4fa00
	float MaxMoveDeltaTime;//[Offset: 0x2d8, Size: 0x4] 0x7e61a4fa80
	float MaxClientSmoothingDeltaTime;//[Offset: 0x2dc, Size: 0x4] 0x7e61a4fb00
	float ClientNetSendMoveDeltaTime;//[Offset: 0x2e0, Size: 0x4] 0x7e61a4fb80
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x2e4, Size: 0x4] 0x7e61a4fc00
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2e8, Size: 0x4] 0x7e61a4fc80
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2ec, Size: 0x4] 0x7e61a4fd00
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2f0, Size: 0x4] 0x7e61a4fd80
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1] 0x7e61a4fe00
	float ClientErrorUpdateRateLimit;//[Offset: 0x2f8, Size: 0x4] 0x7e61a4fe80
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2fc, Size: 0x4] 0x7e61a4ff00
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x300, Size: 0x4] 0x7e61a4ff80
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1] 0x7e61a4e780
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1] 0x7e61a4e800
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x308, Size: 0x4] 0x7e61a4e880
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x30c, Size: 0x4] 0x7e61a4e900
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x310, Size: 0x4] 0x7e61a4e980
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x314, Size: 0x4] 0x7e61a4ea00
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1] 0x7e61a4ea80
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1] 0x7e61a4eb00

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e6165ed80
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8] 0x7e6165ee00
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8] 0x7e6165ee80
	float Volume;//[Offset: 0x18, Size: 0x4] 0x7e6165ef00
	float FadeTime;//[Offset: 0x1c, Size: 0x4] 0x7e6165ef80

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61ba6d00
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4] 0x7e61ba6d80
	float GainHF;//[Offset: 0x30, Size: 0x4] 0x7e61ba6e00
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4] 0x7e61ba6e80
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61ba6f00
	float LateDelay;//[Offset: 0x3c, Size: 0x4] 0x7e61ba6f80
	float DecayTime;//[Offset: 0x40, Size: 0x4] 0x7e61ba7000
	float Density;//[Offset: 0x44, Size: 0x4] 0x7e61ba7080
	float Diffusion;//[Offset: 0x48, Size: 0x4] 0x7e61ba7100
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4] 0x7e61ba7180
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4] 0x7e61ba7200
	float LateGain;//[Offset: 0x54, Size: 0x4] 0x7e61ba7280
	float Gain;//[Offset: 0x58, Size: 0x4] 0x7e61ba7300
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4] 0x7e61ba7380

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615fe900
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4] 0x7e615fe980
	float ExteriorTime;//[Offset: 0x8, Size: 0x4] 0x7e615fea00
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4] 0x7e615fea80
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4] 0x7e615feb00
	float InteriorVolume;//[Offset: 0x14, Size: 0x4] 0x7e615feb80
	float InteriorTime;//[Offset: 0x18, Size: 0x4] 0x7e615fec00
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4] 0x7e615fec80
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4] 0x7e615fed00

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61687780
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e61687800
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e61687880
	Box MBPBounds;//[Offset: 0x8, Size: 0x38] 0x7e61687900
	Box MBPOuterBounds;//[Offset: 0x40, Size: 0x38] 0x7e61687980
	uint32 MBPNumSubdivs;//[Offset: 0x78, Size: 0x4] 0x7e61687a00

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8] 0x7e61688080
	Actor* InViewer;//[Offset: 0x8, Size: 0x8] 0x7e61688100
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8] 0x7e61688180
	Vector ViewLocation;//[Offset: 0x18, Size: 0x18] 0x7e61688200
	Vector ViewDir;//[Offset: 0x30, Size: 0x18] 0x7e61688280

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10] 0x7e617bb8c0
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8] 0x7e61813f00
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8] 0x7e617bb960
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8] 0x7e61813f80
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10] 0x7e617b90c0
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10] 0x7e617b9160
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8] 0x7e61814100
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8] 0x7e61814180
	int MaxPacket;//[Offset: 0xa0, Size: 0x4] 0x7e61814200
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1] 0x7e61812180
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x30] 0x7e61812200
	double LastReceiveTime;//[Offset: 0x1d8, Size: 0x8] 0x7e61812280
	Channel*[] ChannelsToTick;//[Offset: 0x15e0, Size: 0x10] 0x7e617b9200

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x3240, Size: 0x8] 0x7e61a19f00

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10] 0x7e616e1c00
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10] 0x7e616e1c80
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4] 0x7e616e1d00
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7e616e1d80
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4] 0x7e616e1e00
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4] 0x7e616e1e80
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4] 0x7e616e1f00
	int MaxClientRate;//[Offset: 0x64, Size: 0x4] 0x7e616e1f80
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4] 0x7e616e2000
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4] 0x7e616e2080
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4] 0x7e616e2100
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4] 0x7e616e0080
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4] 0x7e616e0100
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4] 0x7e616e0180
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4] 0x7e616e0200
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7e616e0280
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x7e616e0300
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8] 0x7e616e0380
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10] 0x7e61694520
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4] 0x7e616e0480
	World* World;//[Offset: 0x140, Size: 0x8] 0x7e616e0500
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8] 0x7e616e0580
	ClassPtrProperty NetConnectionClass;//[Size: 0x8] 0x7e616945c0
	ClassPtrProperty ReplicationDriverClass;//[Size: 0x8] 0x7e61694660
	FName NetDriverName;//[Offset: 0x190, Size: 0x8] 0x7e616e0600
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10] 0x7e61694700
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50] 0x7e61679a00
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10] 0x7e616947a0
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 0x8] 0x7e616e0880

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8] 0x7e61656600
	FName ClassName;//[Offset: 0x8, Size: 0x8] 0x7e61656680
	ClassPtrProperty ChannelClass;//[Size: 0x8] 0x7e84e5bb40
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4] 0x7e61656700
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7e61656780
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x7e61656800
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1] 0x7e61656880
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1] 0x7e61656900
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7e61656980

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8] 0x7e619a7a80

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: WorldDataLayers.Info.Actor.Object
	<DataLayer*> WorldDataLayers;//[Offset: 0x318, Size: 0x50] 0x7e61bd2e00
	FName[] RepActiveDataLayerNames;//[Offset: 0x368, Size: 0x10] 0x7e61bd2ea0
	FName[] RepLoadedDataLayerNames;//[Offset: 0x378, Size: 0x10] 0x7e61bd2f40
	FName[] RepEffectiveActiveDataLayerNames;//[Offset: 0x428, Size: 0x10] 0x7e61bd2fe0
	FName[] RepEffectiveLoadedDataLayerNames;//[Offset: 0x438, Size: 0x10] 0x7e61bd3080
	void OnRep_LoadedDataLayerNames();// 0x362a58ebd041 0x7e61bcf040
	void OnRep_EffectiveLoadedDataLayerNames();// 0x362958ebd041 0x7e61bcf120
	void OnRep_EffectiveActiveDataLayerNames();// 0x362858ebd041 0x7e61bcf200
	void OnRep_ActiveDataLayerNames();// 0x362758ebd041 0x7e61bcf2e0
	void OnDataLayerRuntimeStateChanged(const DataLayer* InDataLayer, enum InState);// 0x362658ebd041 0x7e61bcf3c0

--------------------------------
Class: DataLayer.Object
	FName DataLayerLabel;//[Offset: 0x28, Size: 0x8] 0x7e61a23880
	bool bIsRuntime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e61a23900
	enum InitialRuntimeState;//[Offset: 0x31, Size: 0x1] 0x7e6197db20
	Color DebugColor;//[Offset: 0x34, Size: 0x4] 0x7e61a23a00
	DataLayer* Parent;//[Offset: 0x38, Size: 0x8] 0x7e61a23a80
	DataLayer*[] Children;//[Offset: 0x40, Size: 0x10] 0x7e6197dbc0
	bool IsVisible();// 0x2dec58ebd041 0x7e61a0bae0
	bool IsRuntime();// 0x2deb58ebd041 0x7e61a0bbc0
	bool IsInitiallyVisible();// 0x2dea58ebd041 0x7e61a0bca0
	bool IsInitiallyActive();// 0x2de958ebd041 0x7e61a0bd80
	bool IsEffectiveVisible();// 0x2de858ebd041 0x7e61a0be60
	bool IsDynamicallyLoaded();// 0x2de758ebd041 0x7e61a0bf40
	enum GetInitialState();// 0x2de658ebd041 0x7e61a0c020
	enum GetInitialRuntimeState();// 0x2de558ebd041 0x7e61a0c100
	Color GetDebugColor();// 0x2de458ebd041 0x7e61a0c1e0
	FName GetDataLayerLabel();// 0x2de358ebd041 0x7e61a0c2c0
	bool Equals(out const ActorDataLayer ActorDataLayer);// 0x2de258ebd041 0x7e61a0c3a0

--------------------------------
Class: ActorDataLayer
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e615f0500

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	ClassPtrProperty ObjClass;//[Size: 0x8] 0x7e84e5ac40

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28] 0x7e61b3e200
	int StreamingPriority;//[Offset: 0x50, Size: 0x4] 0x7e61b3e280
	FName PackageNameToLoad;//[Offset: 0x54, Size: 0x8] 0x7e61b3e300
	FName[] LODPackageNames;//[Offset: 0x60, Size: 0x10] 0x7e61a56a00
	Transform LevelTransform;//[Offset: 0x80, Size: 0x60] 0x7e61b3e400
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7e61b3e480
	int LevelLODIndex;//[Offset: 0xe4, Size: 0x4] 0x7e61b3e500
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1] 0x7e61b3e580
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1] 0x7e61b3e600
	bool bLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xeb, Size: 0x1] 0x7e61b3e680
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xeb, Size: 0x1] 0x7e61b3e700
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xeb, Size: 0x1] 0x7e61b3c680
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xeb, Size: 0x1] 0x7e61b3c700
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xeb, Size: 0x1] 0x7e61b3c780
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xeb, Size: 0x1] 0x7e61b3c800
	LinearColor LevelColor;//[Offset: 0xec, Size: 0x10] 0x7e61b3c880
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0x100, Size: 0x10] 0x7e61a56aa0
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0x110, Size: 0x4] 0x7e61b3c980
	delegate OnLevelLoaded;//[Offset: 0x118, Size: 0x10] 0x7e61b3ca00
	delegate OnLevelUnloaded;//[Offset: 0x128, Size: 0x10] 0x7e61b3ca80
	delegate OnLevelShown;//[Offset: 0x138, Size: 0x10] 0x7e61b3cb00
	delegate OnLevelHidden;//[Offset: 0x148, Size: 0x10] 0x7e61b3cb80
	Level* LoadedLevel;//[Offset: 0x158, Size: 0x8] 0x7e61b3cc00
	Level* PendingUnloadLevel;//[Offset: 0x160, Size: 0x8] 0x7e61b3cc80
	bool ShouldBeLoaded();// 0x339058ebd041 0x7e61b1c8e0
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x33d158ebd041 0x7e61b1c9c0
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x338e58ebd041 0x7e61b190e0
	void SetPriority(int NewPriority);// 0x338d58ebd041 0x7e61b191c0
	void SetLevelLODIndex(int LODIndex);// 0x338c58ebd041 0x7e61b192a0
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x338b58ebd041 0x7e61b19380
	bool IsStreamingStatePending();// 0x338a58ebd041 0x7e61b19460
	bool IsLevelVisible();// 0x338958ebd041 0x7e61b19540
	bool IsLevelLoaded();// 0x338858ebd041 0x7e61b19620
	FName GetWorldAssetPackageFName();// 0x338758ebd041 0x7e61b19700
	Level* GetLoadedLevel();// 0x338658ebd041 0x7e61b197e0
	LevelScriptActor* GetLevelScriptActor();// 0x338558ebd041 0x7e61b198c0
	bool GetIsRequestingUnloadAndRemoval();// 0x338458ebd041 0x7e61b199a0
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x338358ebd041 0x7e61b19a80

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2b0, Size: 0x10] 0x7e61a56820
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0, Size: 0x1] 0x7e61b3f380
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c0, Size: 0x1] 0x7e61b3f400
	byte StreamingUsage;//[Offset: 0x2c1, Size: 0x1] 0x7e61b3f480

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10] 0x7e61690c40

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x7a0, Size: 0x50] 0x7e6167c640
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x894, Size: 0x4] 0x7e61a2c200
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0x8b8, Size: 0x10] 0x7e6197f4c0
	PlayerController*[] SpectatorControllers;//[Offset: 0x8c8, Size: 0x10] 0x7e6197f560

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8] 0x7e61618f00
	Level* Level;//[Offset: 0x58, Size: 0x8] 0x7e61618f80
	Object*[] ObjReferences;//[Offset: 0xc0, Size: 0x10] 0x7e84e57fe0

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10] 0x7e61618d80
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e61618e00
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x7e61618e80

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4] 0x7e619d8a00
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4] 0x7e619d8a80
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4] 0x7e619d8b00
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4] 0x7e619d8b80
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4] 0x7e619d8c00
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4] 0x7e619d8c80
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4] 0x7e619d8d00
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x2cb358ebd041 0x7e619b9380
	int GetObjectCount();// 0x2cb258ebd041 0x7e619b9460
	int GetNewAvoidanceUID();// 0x2cb158ebd041 0x7e619b9540
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x2cb058ebd041 0x7e619b9620

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8] 0x7e61685d00
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8] 0x7e61685d80
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8] 0x7e61685e00
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8] 0x7e61685e80
	<Level*> Levels;//[Offset: 0x28, Size: 0x50] 0x7e61690ce0

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10] 0x7e84857f40
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8] 0x7e84e62800
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10] 0x7e84857e00
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10] 0x7e84e62900
	void ReceiveShutdown();// 0xc9158ebd041 0x7e84e1e4e0
	void ReceiveInit();// 0xc8f58ebd041 0x7e84e1e5c0
	void HandleTravelError(byte FailureType);// 0xde758ebd041 0x7e84e1e6a0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xc8c58ebd041 0x7e84e1adc0
	void DebugRemovePlayer(int ControllerId);// 0xc8b58ebd041 0x7e84e1aea0
	void DebugCreatePlayer(int ControllerId);// 0xc8a58ebd041 0x7e84e1af80

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8] 0x7e61b57780

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x7e61b57800
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10] 0x7e61a59d40
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10] 0x7e61a59de0
	FName[] GetVectorParameterNames();// 0x33b758ebd041 0x7e61b1e080
	LinearColor GetVectorParameterDefaultValue(FName ParameterName, out bool bParameterFound);// 0x33b658ebd041 0x7e61b1e160
	FName[] GetScalarParameterNames();// 0x33b558ebd041 0x7e61b1e240
	float GetScalarParameterDefaultValue(FName ParameterName, out bool bParameterFound);// 0x33b458ebd041 0x7e61b1e320

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4] 0x7e6164f400

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e6164f480
	Guid ID;//[Offset: 0x8, Size: 0x10] 0x7e6164f500

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10] 0x7e6164f380

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10] 0x7e61bd31c0
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8] 0x7e61bf0100
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e61bf0180
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7e61bf0200
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4] 0x7e61bf0280

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50] 0x7e61673340

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 0x4] 0x7e61b7c400
	float UpdateTime_Delta;//[Offset: 0x34, Size: 0x4] 0x7e61b7c480
	float WarmupTime;//[Offset: 0x38, Size: 0x4] 0x7e61b7c500
	float WarmupTickRate;//[Offset: 0x3c, Size: 0x4] 0x7e61b7c580
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10] 0x7e61a5ab00
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8] 0x7e61b7a580
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8] 0x7e61b7a600
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4] 0x7e61b7a680
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4] 0x7e61b7a700
	float[] LODDistances;//[Offset: 0x68, Size: 0x10] 0x7e61a5aba0
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10] 0x7e61a5ac40
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x38] 0x7e61b7a880
	float SecondsBeforeInactive;//[Offset: 0xc0, Size: 0x4] 0x7e61b7a900
	float Delay;//[Offset: 0xc4, Size: 0x4] 0x7e61b7a980
	float DelayLow;//[Offset: 0xc8, Size: 0x4] 0x7e61b7aa00
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1] 0x7e61b7aa80
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 0x1] 0x7e61b7ab00
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcc, Size: 0x1] 0x7e61b7ab80
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcc, Size: 0x1] 0x7e61b7ac00
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xcc, Size: 0x1] 0x7e61b7ac80
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xcc, Size: 0x1] 0x7e61b7ad00
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcd, Size: 0x1] 0x7e61b7ad80
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcd, Size: 0x1] 0x7e61b7ae00
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcd, Size: 0x1] 0x7e61b7ae80
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcd, Size: 0x1] 0x7e61b7af00
	byte SystemUpdateMode;//[Offset: 0xce, Size: 0x1] 0x7e61b7af80
	byte LODMethod;//[Offset: 0xcf, Size: 0x1] 0x7e61b7b000
	enum InsignificantReaction;//[Offset: 0xd0, Size: 0x1] 0x7e61a5ace0
	byte OcclusionBoundsMethod;//[Offset: 0xd1, Size: 0x1] 0x7e61b7b100
	enum MaxSignificanceLevel;//[Offset: 0xd3, Size: 0x1] 0x7e61a5ad80
	uint32 MinTimeBetweenTicks;//[Offset: 0xd4, Size: 0x4] 0x7e61b7b200
	float InsignificanceDelay;//[Offset: 0xd8, Size: 0x4] 0x7e61b7b280
	Vector MacroUVPosition;//[Offset: 0xe0, Size: 0x18] 0x7e61b7b300
	Box CustomOcclusionBounds;//[Offset: 0xf8, Size: 0x38] 0x7e61b7b380
	LODSoloTrack[] SoloTracking;//[Offset: 0x130, Size: 0x10] 0x7e61a5ae20
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x140, Size: 0x10] 0x7e61a5aec0
	bool ContainsEmitterType(class Object TypeData);// 0x33c558ebd041 0x7e61b1d440

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4] 0x7e61808000
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 0x4] 0x7e61808080

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8] 0x7e61b5c180
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4] 0x7e61b5c200
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1] 0x7e61b5c280
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1] 0x7e61a592a0
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1] 0x7e61b5c380
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1] 0x7e61b5c400
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1] 0x7e61b5c480
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1] 0x7e61b5c500
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1] 0x7e61b5c580
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61b5c600
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10] 0x7e61a59340
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4] 0x7e61b5a600
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4] 0x7e61b5a680
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4] 0x7e61b5a700
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4] 0x7e61b5a780

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4] 0x7e61b5ba80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7e61b5bb00
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8] 0x7e61b5bb80
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10] 0x7e61a5b820
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8] 0x7e61b5bc80
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8] 0x7e61b5bd00
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8] 0x7e61b5bd80
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10] 0x7e61a5b8c0
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10] 0x7e61a5b960
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10] 0x7e61a590c0
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10] 0x7e61a59160
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10] 0x7e61a59200
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7e61b5c080
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4] 0x7e61b5c100

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8] 0x7e61b75a80
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4] 0x7e61b75b00
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4] 0x7e61b75b80
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0x18] 0x7e61b75c00
	Rotator EmitterRotation;//[Offset: 0x58, Size: 0x18] 0x7e61b75c80
	byte ScreenAlignment;//[Offset: 0x70, Size: 0x1] 0x7e61b75d00
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 0x1] 0x7e61b75d80
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71, Size: 0x1] 0x7e61b75e00
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71, Size: 0x1] 0x7e61b75e80
	byte SortMode;//[Offset: 0x72, Size: 0x1] 0x7e61b75f00
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73, Size: 0x1] 0x7e61b75f80
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x73, Size: 0x1] 0x7e61b76000
	bool bSupportLargeWorldCoordinates;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x73, Size: 0x1] 0x7e61b76080
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x73, Size: 0x1] 0x7e61b76100
	float EmitterDuration;//[Offset: 0x74, Size: 0x4] 0x7e61b76180
	RawDistributionFloat SpawnRate;//[Offset: 0x78, Size: 0x30] 0x7e61b76200
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 0x10] 0x7e61a5b140
	float EmitterDelay;//[Offset: 0xb8, Size: 0x4] 0x7e61b76300
	float EmitterDelayLow;//[Offset: 0xbc, Size: 0x4] 0x7e61b74280
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e61b74300
	byte InterpolationMethod;//[Offset: 0xc1, Size: 0x1] 0x7e61b74380
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1] 0x7e61b74400
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1] 0x7e61b74480
	byte ParticleBurstMethod;//[Offset: 0xc3, Size: 0x1] 0x7e61b74500
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x7e61b74580
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1] 0x7e61b74600
	byte OpacitySourceMode;//[Offset: 0xc5, Size: 0x1] 0x7e61b74680
	byte EmitterNormalsMode;//[Offset: 0xc6, Size: 0x1] 0x7e61b74700
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc7, Size: 0x1] 0x7e61b74780
	int SubImages_Horizontal;//[Offset: 0xc8, Size: 0x4] 0x7e61b74800
	int SubImages_Vertical;//[Offset: 0xcc, Size: 0x4] 0x7e61b74880
	float RandomImageTime;//[Offset: 0xd0, Size: 0x4] 0x7e61b74900
	int RandomImageChanges;//[Offset: 0xd4, Size: 0x4] 0x7e61b74980
	Vector MacroUVPosition;//[Offset: 0xd8, Size: 0x18] 0x7e61b74a00
	float MacroUVRadius;//[Offset: 0xf0, Size: 0x4] 0x7e61b74a80
	enum UVFlippingMode;//[Offset: 0xf4, Size: 0x1] 0x7e61a5b1e0
	byte BoundingMode;//[Offset: 0xf5, Size: 0x1] 0x7e61b74b80
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf6, Size: 0x1] 0x7e61b74c00
	Vector NormalsSphereCenter;//[Offset: 0xf8, Size: 0x18] 0x7e61b74c80
	float AlphaThreshold;//[Offset: 0x110, Size: 0x4] 0x7e61b74d00
	int EmitterLoops;//[Offset: 0x114, Size: 0x4] 0x7e61b74d80
	Texture2D* CutoutTexture;//[Offset: 0x118, Size: 0x8] 0x7e61b74e00
	int MaxDrawCount;//[Offset: 0x120, Size: 0x4] 0x7e61b74e80
	float EmitterDurationLow;//[Offset: 0x124, Size: 0x4] 0x7e61b74f00
	Vector NormalsCylinderDirection;//[Offset: 0x128, Size: 0x18] 0x7e61b74f80
	FName[] NamedMaterialOverrides;//[Offset: 0x140, Size: 0x10] 0x7e61a5b280

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e61b5d500
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7e61b5d580
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7e61b5d600
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x7e61b5d680
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x7e61b5b600
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x7e61b5b680
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x7e61b5b700
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x7e61b5b780
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7e61b5b800
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x7e61b5b880
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x7e61b5b900
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x7e61b5b980
	byte LODValidity;//[Offset: 0x2a, Size: 0x1] 0x7e61b5ba00

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x7e61619e00
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x7e61619e80
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8] 0x7e61619f00

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x7e84889a00

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x7e84884880
	float TimeBias;//[Offset: 0x4, Size: 0x4] 0x7e84884900
	float[] Values;//[Offset: 0x8, Size: 0x10] 0x7e84e2fa60
	byte Op;//[Offset: 0x18, Size: 0x1] 0x7e84e36600
	byte EntryCount;//[Offset: 0x19, Size: 0x1] 0x7e84883800
	byte EntryStride;//[Offset: 0x1a, Size: 0x1] 0x7e84884b80
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1] 0x7e84884a80
	byte LockFlag;//[Offset: 0x1c, Size: 0x1] 0x7e84e36480

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e61a41a00
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7e61a41a80

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4] 0x7e61658380
	int CountLow;//[Offset: 0x4, Size: 0x4] 0x7e61658400
	float Time;//[Offset: 0x8, Size: 0x4] 0x7e61656380

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30] 0x7e61b76d80
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30] 0x7e61b76e00
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1] 0x7e61b76e80
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10] 0x7e61a5b0a0
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30] 0x7e61b76f80
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x7e61b77000

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7e61b77080
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7e61b77100

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10] 0x7e61a5b6e0

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7e61657980
	int Frequency;//[Offset: 0x4, Size: 0x4] 0x7e61657a00
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4] 0x7e61657a80
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7e61657b00
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7e61657b80
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7e61657c00
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7e61657c80
	FName CustomName;//[Offset: 0x10, Size: 0x8] 0x7e61657d00
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10] 0x7e84e5ba00

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1] 0x7e61b73280
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x60] 0x7e61b73300
	OrbitOptions OffsetOptions;//[Offset: 0x90, Size: 0x4] 0x7e61b73380
	RawDistributionVector RotationAmount;//[Offset: 0x98, Size: 0x60] 0x7e61b73400
	OrbitOptions RotationOptions;//[Offset: 0xf8, Size: 0x4] 0x7e61b73480
	RawDistributionVector RotationRateAmount;//[Offset: 0x100, Size: 0x60] 0x7e61b73500
	OrbitOptions RotationRateOptions;//[Offset: 0x160, Size: 0x4] 0x7e61b73580

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7e61b73600

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x7e61619b80
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x7e61619c00
	Vector MinValueVec;//[Offset: 0x28, Size: 0x18] 0x7e61619c80
	Vector MaxValueVec;//[Offset: 0x40, Size: 0x18] 0x7e61619d00
	DistributionVector* Distribution;//[Offset: 0x58, Size: 0x8] 0x7e61619d80

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e61a41300
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7e61a41380
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7e61a41400

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61657700
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61657780
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61657800

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1] 0x7e61b70780
	FName EventName;//[Offset: 0x2c, Size: 0x8] 0x7e61b70800

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x538, Size: 0x8] 0x7e61b7f180
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x540, Size: 0x10] 0x7e61a5a600
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x550, Size: 0x10] 0x7e61a5a6a0
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x561, Size: 0x1] 0x7e61b7f300
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x561, Size: 0x1] 0x7e61b7f380
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x561, Size: 0x1] 0x7e61b7f400
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x561, Size: 0x1] 0x7e61b7f480
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x561, Size: 0x1] 0x7e61b7f500
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x562, Size: 0x1] 0x7e61b7f580
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x562, Size: 0x1] 0x7e61b7f600
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x562, Size: 0x1] 0x7e61b7f680
	byte LODMethod;//[Offset: 0x56d, Size: 0x1] 0x7e61b7f700
	enum RequiredSignificance;//[Offset: 0x56e, Size: 0x1] 0x7e61a5a740
	ParticleSysParam[] InstanceParameters;//[Offset: 0x570, Size: 0x10] 0x7e61a5a7e0
	delegate OnParticleSpawn;//[Offset: 0x580, Size: 0x10] 0x7e61b7d780
	delegate OnParticleBurst;//[Offset: 0x590, Size: 0x10] 0x7e61b7d800
	delegate OnParticleDeath;//[Offset: 0x5a0, Size: 0x10] 0x7e61b7d880
	delegate OnParticleCollide;//[Offset: 0x5b0, Size: 0x10] 0x7e61b7d900
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1] 0x7e61b7d980
	Vector OldPosition;//[Offset: 0x5c8, Size: 0x18] 0x7e61b7da00
	Vector PartSysVelocity;//[Offset: 0x5e0, Size: 0x18] 0x7e61b7da80
	float WarmupTime;//[Offset: 0x5f8, Size: 0x4] 0x7e61b7db00
	float WarmupTickRate;//[Offset: 0x5fc, Size: 0x4] 0x7e61b7db80
	float SecondsBeforeInactive;//[Offset: 0x604, Size: 0x4] 0x7e61b7dc00
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x60c, Size: 0x4] 0x7e61b7dc80
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x630, Size: 0x10] 0x7e61a5a880
	float CustomTimeDilation;//[Offset: 0x648, Size: 0x4] 0x7e61b7dd80
	SceneComponent* AutoAttachParent;//[Offset: 0x6a0, Size: 0x8] 0x7e61b7de00
	FName AutoAttachSocketName;//[Offset: 0x6a8, Size: 0x8] 0x7e61b7de80
	enum AutoAttachLocationRule;//[Offset: 0x6b0, Size: 0x1] 0x7e61a5a920
	enum AutoAttachRotationRule;//[Offset: 0x6b1, Size: 0x1] 0x7e61a5a9c0
	enum AutoAttachScaleRule;//[Offset: 0x6b2, Size: 0x1] 0x7e61a5aa60
	delegate OnSystemFinished;//[Offset: 0x708, Size: 0x10] 0x7e61b7e080
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x33dd58ebd041 0x7e61b1f4a0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x33dc58ebd041 0x7e61b1f580
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x33db58ebd041 0x7e61b1f660
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x33da58ebd041 0x7e61b1f740
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x33d958ebd041 0x7e61b1f820
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x33d858ebd041 0x7e61b1f900
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x33d758ebd041 0x7e61b1f9e0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x33d658ebd041 0x7e61b1fac0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x33d558ebd041 0x7e61b1fba0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x33d458ebd041 0x7e61b1fc80
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x33d358ebd041 0x7e61b1fd60
	int GetNumActiveParticles();// 0x33d258ebd041 0x7e61b1fe40
	MaterialInterface* GetNamedMaterial(FName InName);// 0xffffff8158ebd000 0x7e61b1ff20
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x33d058ebd041 0x7e61b1caa0
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x33cf58ebd041 0x7e61b1cb80
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x33ce58ebd041 0x7e61b1cc60
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x33cd58ebd041 0x7e61b1cd40
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x33cc58ebd041 0x7e61b1ce20
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x33cb58ebd041 0x7e61b1cf00
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x33ca58ebd041 0x7e61b1cfe0
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x33c958ebd041 0x7e61b1d0c0
	void EndTrails();// 0x33c858ebd041 0x7e61b1d1a0
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x33c758ebd041 0x7e61b1d280
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x33c658ebd041 0x7e61b1d360

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x22af58ebd041 0x7e6179cf00
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x22ae58ebd041 0x7e6179cfe0
	void SetIntParameter(FName ParameterName, int Param);// 0x22ad58ebd041 0x7e6179d0c0
	void SetFloatParameter(FName ParameterName, float Param);// 0x22ac58ebd041 0x7e6179d1a0
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x22ab58ebd041 0x7e6179d280
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x22aa58ebd041 0x7e6179d360
	void SetBoolParameter(FName ParameterName, bool Param);// 0x22a958ebd041 0x7e6179d440
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x22a858ebd041 0x7e6179d520
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x22a758ebd041 0x7e6179d600
	void ReleaseToPool();// 0x22a658ebd041 0x7e6179d6e0
	FXSystemAsset* GetFXSystemAsset();// 0x22a558ebd041 0x7e6179d7c0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ClassPtrProperty AnimBlueprintGeneratedClass;//[Size: 0x8] 0x7e61a5f880
	class AnimInstance* AnimClass;//[Offset: 0x818, Size: 0x8] 0x7e61a5f920
	AnimInstance* AnimScriptInstance;//[Offset: 0x820, Size: 0x8] 0x7e61bb5d00
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x828, Size: 0x8] 0x7e61bb5d80
	SingleAnimationPlayData AnimationData;//[Offset: 0x830, Size: 0x18] 0x7e61bb5e00
	Vector RootBoneTranslation;//[Offset: 0x858, Size: 0x18] 0x7e61bb5e80
	Vector LineCheckBoundsScale;//[Offset: 0x870, Size: 0x18] 0x7e61bb5f00
	AnimInstance*[] LinkedInstances;//[Offset: 0x8b8, Size: 0x10] 0x7e61a5f9c0
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x8c8, Size: 0x10] 0x7e61a5fa60
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x8d8, Size: 0x10] 0x7e61a5fb00
	float GlobalAnimRateScale;//[Offset: 0x998, Size: 0x4] 0x7e61bb6100
	byte KinematicBonesUpdateType;//[Offset: 0x99c, Size: 0x1] 0x7e61bb6180
	byte PhysicsTransformUpdateMode;//[Offset: 0x99d, Size: 0x1] 0x7e61bb6200
	byte AnimationMode;//[Offset: 0x99f, Size: 0x1] 0x7e61bb6280
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a1, Size: 0x1] 0x7e61bb6300
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a1, Size: 0x1] 0x7e61bb4280
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9a1, Size: 0x1] 0x7e61bb4300
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9a1, Size: 0x1] 0x7e61bb4380
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9a1, Size: 0x1] 0x7e61bb4400
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9a1, Size: 0x1] 0x7e61bb4480
	bool bAllowClothActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a2, Size: 0x1] 0x7e61bb4500
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a2, Size: 0x1] 0x7e61bb4580
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a8, Size: 0x1] 0x7e61bb4600
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a8, Size: 0x1] 0x7e61bb4680
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a8, Size: 0x1] 0x7e61bb4700
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9a8, Size: 0x1] 0x7e61bb4780
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9a8, Size: 0x1] 0x7e61bb4800
	bool bForceCollisionUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a9, Size: 0x1] 0x7e61bb4880
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a9, Size: 0x1] 0x7e61bb4900
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a9, Size: 0x1] 0x7e61bb4980
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9a9, Size: 0x1] 0x7e61bb4a00
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9a9, Size: 0x1] 0x7e61bb4a80
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9a9, Size: 0x1] 0x7e61bb4b00
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9a9, Size: 0x1] 0x7e61bb4b80
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9aa, Size: 0x1] 0x7e61bb4c00
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9aa, Size: 0x1] 0x7e61bb4c80
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9aa, Size: 0x1] 0x7e61bb4d00
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9aa, Size: 0x1] 0x7e61bb4d80
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9aa, Size: 0x1] 0x7e61bb4e00
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9aa, Size: 0x1] 0x7e61bb4e80
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9aa, Size: 0x1] 0x7e61bb4f00
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9aa, Size: 0x1] 0x7e61bb4f80
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9ab, Size: 0x1] 0x7e61bb5000
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9ab, Size: 0x1] 0x7e61bb5080
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9ab, Size: 0x1] 0x7e61bb5100
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9ab, Size: 0x1] 0x7e61bb5180
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9ab, Size: 0x1] 0x7e61bb5200
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9ab, Size: 0x1] 0x7e61bb5280
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x9ae, Size: 0x2] 0x7e61bb3200
	float ClothBlendWeight;//[Offset: 0x9b0, Size: 0x4] 0x7e61bb3280
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 0x1] 0x7e61bb3300
	FName[] DisallowedAnimCurves;//[Offset: 0x9b8, Size: 0x10] 0x7e61a5fba0
	BodySetup* BodySetup;//[Offset: 0x9c8, Size: 0x8] 0x7e61bb3400
	float ClothMaxDistanceScale;//[Offset: 0x9d4, Size: 0x4] 0x7e61bb3480
	delegate OnConstraintBroken;//[Offset: 0x9d8, Size: 0x10] 0x7e61bb3500
	delegate OnPlasticDeformation;//[Offset: 0x9e8, Size: 0x10] 0x7e61bb3580
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x9f8, Size: 0x8] 0x7e61a5fc40
	float TeleportDistanceThreshold;//[Offset: 0xaf8, Size: 0x4] 0x7e61bb3600
	float TeleportRotationThreshold;//[Offset: 0xafc, Size: 0x4] 0x7e61bb3680
	uint32 LastPoseTickFrame;//[Offset: 0xb08, Size: 0x4] 0x7e61bb3700
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xba0, Size: 0x8] 0x7e61bb3780
	delegate OnAnimInitialized;//[Offset: 0xc70, Size: 0x10] 0x7e61bb3800
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x353d58ebd041 0x7e61bc2fc0
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x353c58ebd041 0x7e61bc30a0
	void ToggleDisablePostProcessBlueprint();// 0x353b58ebd041 0x7e61bc3180
	void TermBodiesBelow(FName ParentBoneName);// 0x353a58ebd041 0x7e61bc3260
	void SuspendClothingSimulation();// 0x353958ebd041 0x7e61bc3340
	void Stop();// 0x353858ebd041 0x7e61bc3420
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x353758ebd041 0x7e61bc3500
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x353658ebd041 0x7e61bc35e0
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x353558ebd041 0x7e61bc36c0
	void SetTeleportRotationThreshold(float Threshold);// 0x353458ebd041 0x7e61bc37a0
	void SetTeleportDistanceThreshold(float Threshold);// 0x353358ebd041 0x7e61bc3880
	void SetPosition(float InPos, bool bFireNotifies);// 0x357458ebd041 0x7e61bc3960
	void SetPlayRate(float Rate);// 0x353158ebd041 0x7e61bc0080
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x353058ebd041 0x7e61bc0160
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x352f58ebd041 0x7e61bc0240
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x352e58ebd041 0x7e61bc0320
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x352d58ebd041 0x7e61bc0400
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x352c58ebd041 0x7e61bc04e0
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x352b58ebd041 0x7e61bc05c0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x352a58ebd041 0x7e61bc06a0
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x352958ebd041 0x7e61bc0780
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x352858ebd041 0x7e61bc0860
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x352758ebd041 0x7e61bc0940
	void SetClothMaxDistanceScale(float Scale);// 0x352658ebd041 0x7e61bc0a20
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x352558ebd041 0x7e61bc0b00
	void SetAnimClass(class Object NewClass);// 0x352458ebd041 0x7e61bc0be0
	void SetAnimationMode(byte InAnimationMode);// 0x352358ebd041 0x7e61bc0cc0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x352258ebd041 0x7e61bc0da0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x352158ebd041 0x7e61bc0e80
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x352058ebd041 0x7e61bc0f60
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x351f58ebd041 0x7e61bc1040
	void SetAllowClothActors(bool bInAllow);// 0x351e58ebd041 0x7e61bc1120
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x351d58ebd041 0x7e61bc1200
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x351c58ebd041 0x7e61bc12e0
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x351b58ebd041 0x7e61bc13c0
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x351a58ebd041 0x7e61bc14a0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x351958ebd041 0x7e61bc1580
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x351858ebd041 0x7e61bc1660
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x351758ebd041 0x7e61bc1740
	void SetAllBodiesBelowPhysicsDisabled(out const FName InBoneName, bool bDisabled, bool bIncludeSelf);// 0x351658ebd041 0x7e61bc1820
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x351558ebd041 0x7e61bc1900
	void SetAllBodiesBelowLinearVelocity(out const FName InBoneName, out const Vector LinearVelocity, bool bIncludeSelf);// 0x351458ebd041 0x7e61bc19e0
	void ResumeClothingSimulation();// 0x351358ebd041 0x7e61bc1ac0
	void ResetClothTeleportMode();// 0x351258ebd041 0x7e61bc1ba0
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x355358ebd041 0x7e61bc1c80
	void ResetAllowedAnimCurveEvaluation();// 0x351058ebd041 0x7e61b9e780
	void ResetAllBodiesSimulatePhysics();// 0x350f58ebd041 0x7e61b9e860
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x350e58ebd041 0x7e61b9e940
	void Play(bool bLooping);// 0x350d58ebd041 0x7e61b9ea20
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x350c58ebd041 0x7e61b9eb00
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x350b58ebd041 0x7e61b9ebe0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x350a58ebd041 0x7e61b9ecc0
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x350958ebd041 0x7e61b9eda0
	bool IsPlaying();// 0x350858ebd041 0x7e61b9ee80
	bool IsClothingSimulationSuspended();// 0x350758ebd041 0x7e61b9ef60
	bool IsBodyGravityEnabled(FName BoneName);// 0x350658ebd041 0x7e61b9f040
	bool HasValidAnimationInstance();// 0x350558ebd041 0x7e61b9f120
	bool GetTransformAttribute_Ref(out const FName BoneName, out const FName AttributeName, out Transform OutValue, enum LookupType);// 0x350458ebd041 0x7e61b9f200
	bool GetTransformAttribute(out const FName BoneName, out const FName AttributeName, Transform DefaultValue, out Transform OutValue, enum LookupType);// 0x350358ebd041 0x7e61b9f2e0
	float GetTeleportRotationThreshold();// 0x350258ebd041 0x7e61b9f3c0
	float GetTeleportDistanceThreshold();// 0x350158ebd041 0x7e61b9f4a0
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x350058ebd041 0x7e61b9f580
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x34ff58ebd041 0x7e61b9f660
	Vector GetSkeletalCenterOfMass();// 0x34fe58ebd041 0x7e61b9f740
	AnimInstance* GetPostProcessInstance();// 0x34fd58ebd041 0x7e61b9f820
	float GetPosition();// 0x34fc58ebd041 0x7e61b9f900
	float GetPlayRate();// 0x34fb58ebd041 0x7e61b9f9e0
	float GetMorphTarget(FName MorphTargetName);// 0x34fa58ebd041 0x7e61b9fac0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x34f958ebd041 0x7e61b9fba0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x34f858ebd041 0x7e61b9fc80
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x34f758ebd041 0x7e61b9fd60
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x34f658ebd041 0x7e61b9fe40
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0xffffff8158ebd000 0x7e61b9ff20
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x34f458ebd041 0x7e61b9caa0
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x34f358ebd041 0x7e61b9cb80
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x34f258ebd041 0x7e61b9cc60
	bool GetDisablePostProcessBlueprint();// 0x34f158ebd041 0x7e61b9cd40
	bool GetDisableAnimCurves();// 0x34f058ebd041 0x7e61b9ce20
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x34ef58ebd041 0x7e61b9cf00
	void GetConstraintsFromBody(FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, out ConstraintInstanceAccessor[] OutConstraints);// 0x34ee58ebd041 0x7e61b9cfe0
	void GetConstraints(bool bIncludesTerminated, out ConstraintInstanceAccessor[] OutConstraints);// 0x34ed58ebd041 0x7e61b9d0c0
	ConstraintInstanceAccessor GetConstraintByName(FName ConstraintName, bool bIncludesTerminated);// 0x34ec58ebd041 0x7e61b9d1a0
	float GetClothMaxDistanceScale();// 0x34eb58ebd041 0x7e61b9d280
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x34ea58ebd041 0x7e61b9d360
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x34e958ebd041 0x7e61b9d440
	Vector GetBoneLinearVelocity(out const FName InBoneName);// 0x34e858ebd041 0x7e61b9d520
	AnimInstance* GetAnimInstance();// 0x34e758ebd041 0x7e61b9d600
	class Object GetAnimClass();// 0x34e658ebd041 0x7e61b9d6e0
	byte GetAnimationMode();// 0x34e558ebd041 0x7e61b9d7c0
	bool GetAllowRigidBodyAnimNode();// 0x34e458ebd041 0x7e61b9d8a0
	bool GetAllowedAnimCurveEvaluate();// 0x34e358ebd041 0x7e61b9d980
	bool GetAllowClothActors();// 0x34e258ebd041 0x7e61b9da60
	void ForceClothNextUpdateTeleportAndReset();// 0x34e158ebd041 0x7e61b9db40
	void ForceClothNextUpdateTeleport();// 0x34e058ebd041 0x7e61b9dc20
	FName FindConstraintBoneName(int ConstraintIndex);// 0x34df58ebd041 0x7e61b9dd00
	void ClearMorphTargets();// 0x34de58ebd041 0x7e61b9dde0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x34dd58ebd041 0x7e61b9dec0
	void BindClothToMasterPoseComponent();// 0x34dc58ebd041 0x7e61b9dfa0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x34db58ebd041 0x7e61b9e080
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x34da58ebd041 0x7e61b9e160
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x34d958ebd041 0x7e61b9e240
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x34d858ebd041 0x7e61b9e320

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x568, Size: 0x8] 0x7e61b8e800
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x570, Size: 0x8] 0x7e61b8e880
	enum[] SkinCacheUsage;//[Offset: 0x578, Size: 0x10] 0x7e61a5dda0
	MeshDeformer* MeshDeformer;//[Offset: 0x588, Size: 0x8] 0x7e61b8e980
	MeshDeformerInstance* MeshDeformerInstance;//[Offset: 0x590, Size: 0x8] 0x7e61b8ea00
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x698, Size: 0x8] 0x7e61b8ea80
	int ForcedLodModel;//[Offset: 0x6a0, Size: 0x4] 0x7e61b8eb00
	int MinLodModel;//[Offset: 0x6a4, Size: 0x4] 0x7e61b8eb80
	float StreamingDistanceMultiplier;//[Offset: 0x6b0, Size: 0x4] 0x7e61b8ec00
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6c0, Size: 0x10] 0x7e61a5de40
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6f4, Size: 0x1] 0x7e61a5dee0
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f6, Size: 0x1] 0x7e61b8ed80
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f6, Size: 0x1] 0x7e61b8ee00
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f6, Size: 0x1] 0x7e61b8ee80
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f6, Size: 0x1] 0x7e61b8ef00
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6f6, Size: 0x1] 0x7e61b8ef80
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f7, Size: 0x1] 0x7e61b8f000
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f7, Size: 0x1] 0x7e61b8f080
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f7, Size: 0x1] 0x7e61b8f100
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f7, Size: 0x1] 0x7e61b8f180
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f7, Size: 0x1] 0x7e61b8f200
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f7, Size: 0x1] 0x7e61b8f280
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f7, Size: 0x1] 0x7e61b8f300
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6f7, Size: 0x1] 0x7e61b8f380
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f8, Size: 0x1] 0x7e61b8f400
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f8, Size: 0x1] 0x7e61b8f480
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f8, Size: 0x1] 0x7e61b8f500
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f8, Size: 0x1] 0x7e61b8f580
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f8, Size: 0x1] 0x7e61b8f600
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f8, Size: 0x1] 0x7e61b8f680
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f9, Size: 0x1] 0x7e61b8f700
	bool bCachedWorldSpaceBoundsUpToDate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f9, Size: 0x1] 0x7e61b8f780
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f9, Size: 0x1] 0x7e61b8d700
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x6fc, Size: 0x4] 0x7e61b8d780
	BoxSphereBounds CachedWorldOrLocalSpaceBounds;//[Offset: 0x738, Size: 0x38] 0x7e61b8d800
	Matrix CachedWorldToLocalTransform;//[Offset: 0x770, Size: 0x80] 0x7e61b8d880
	void UnloadSkinWeightProfile(FName InProfileName);// 0x349158ebd041 0x7e61b97400
	void UnHideBoneByName(FName BoneName);// 0x349058ebd041 0x7e61b974e0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x348f58ebd041 0x7e61b975c0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x348e58ebd041 0x7e61b976a0
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x348d58ebd041 0x7e61b97780
	void ShowAllMaterialSections(int LODIndex);// 0x348c58ebd041 0x7e61b97860
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x348b58ebd041 0x7e61b97940
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x348a58ebd041 0x7e61b97a20
	bool SetSkinWeightProfile(FName InProfileName);// 0x348958ebd041 0x7e61b97b00
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x348858ebd041 0x7e61b97be0
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x348758ebd041 0x7e61b97cc0
	void SetRenderStatic(bool bNewValue);// 0x348658ebd041 0x7e61b97da0
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x348558ebd041 0x7e61b97e80
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x348458ebd041 0x7e61b97f60
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x348358ebd041 0x7e61b98040
	void SetMinLOD(int InNewMinLOD);// 0x348258ebd041 0x7e61b98120
	void SetMeshDeformer(MeshDeformer* InMeshDeformer);// 0x348158ebd041 0x7e61b98200
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x348058ebd041 0x7e61b982e0
	void SetForcedLOD(int InNewForcedLOD);// 0x347f58ebd041 0x7e61b983c0
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x347e58ebd041 0x7e61b984a0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x347d58ebd041 0x7e61b98580
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x347c58ebd041 0x7e61b98660
	bool IsUsingSkinWeightProfile();// 0x347b58ebd041 0x7e61b98740
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x347a58ebd041 0x7e61b98820
	bool IsBoneHiddenByName(FName BoneName);// 0x347958ebd041 0x7e61b98900
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x347858ebd041 0x7e61b989e0
	int GetVertexOffsetUsage(int LODIndex);// 0x347758ebd041 0x7e61b98ac0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x347658ebd041 0x7e61b98ba0
	FName GetSocketBoneName(FName InSocketName);// 0x347558ebd041 0x7e61b98c80
	Transform GetRefPoseTransform(int BoneIndex);// 0x347458ebd041 0x7e61b98d60
	Vector GetRefPosePosition(int BoneIndex);// 0x347358ebd041 0x7e61b98e40
	FName GetParentBone(FName BoneName);// 0x347258ebd041 0x7e61b98f20
	int GetNumLODs();// 0x34b358ebd041 0x7e61b99000
	int GetNumBones();// 0x347058ebd041 0x7e61b95720
	int GetForcedLOD();// 0x346f58ebd041 0x7e61b95800
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x346e58ebd041 0x7e61b958e0
	FName GetCurrentSkinWeightProfileName();// 0x346d58ebd041 0x7e61b959c0
	FName GetBoneName(int BoneIndex);// 0x346c58ebd041 0x7e61b95aa0
	int GetBoneIndex(FName BoneName);// 0x346b58ebd041 0x7e61b95b80
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x346a58ebd041 0x7e61b95c60
	void ClearVertexColorOverride(int LODIndex);// 0x346958ebd041 0x7e61b95d40
	void ClearSkinWeightProfile();// 0x346858ebd041 0x7e61b95e20
	void ClearSkinWeightOverride(int LODIndex);// 0x346758ebd041 0x7e61b95f00
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x346658ebd041 0x7e61b95fe0

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4] 0x7e61667c00
	byte Weights;//[Offset: 0x30, Size: 0x1] 0x7e61667c80

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8] 0x7e61703880
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1] 0x7e61703900
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x7e61703980
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1] 0x7e61703a00
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1] 0x7e61703a80
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1] 0x7e61703b00
	bool bUseMainInstanceMontageEvaluationData;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1] 0x7e61703b80
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31, Size: 0x1] 0x7e61703c00
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10] 0x7e61703c80
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10] 0x7e61703d00
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10] 0x7e61703d80
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10] 0x7e61703e00
	AnimNotifyQueue NotifyQueue;//[Offset: 0x150, Size: 0x70] 0x7e61703e80
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x1c0, Size: 0x10] 0x7e61697900
	AnimNotifyEventReference[] ActiveAnimNotifyEventReference;//[Offset: 0x1d0, Size: 0x10] 0x7e616979a0
	bool WasAnimNotifyTriggeredInStateMachine(int MachineIndex, class AnimNotify AnimNotifyType);// 0x1fc758ebd041 0x7e616f3a40
	bool WasAnimNotifyTriggeredInSourceState(int MachineIndex, int StateIndex, class AnimNotify AnimNotifyType);// 0x1fc658ebd041 0x7e616f3b20
	bool WasAnimNotifyTriggeredInAnyState(class AnimNotify AnimNotifyType);// 0x1fc558ebd041 0x7e616f3c00
	bool WasAnimNotifyStateActiveInStateMachine(int MachineIndex, class AnimNotifyState AnimNotifyStateType);// 0x1fc458ebd041 0x7e616f3ce0
	bool WasAnimNotifyStateActiveInSourceState(int MachineIndex, int StateIndex, class AnimNotifyState AnimNotifyStateType);// 0x1fc358ebd041 0x7e616f3dc0
	bool WasAnimNotifyStateActiveInAnyState(class AnimNotifyState AnimNotifyStateType);// 0x1fc258ebd041 0x7e616f3ea0
	bool WasAnimNotifyNameTriggeredInStateMachine(int MachineIndex, FName NotifyName);// 0x1fc158ebd041 0x7e616f3f80
	bool WasAnimNotifyNameTriggeredInSourceState(int MachineIndex, int StateIndex, FName NotifyName);// 0x1fc058ebd041 0x7e616f4060
	bool WasAnimNotifyNameTriggeredInAnyState(FName NotifyName);// 0x1fbf58ebd041 0x7e616f4140
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x1fbe58ebd041 0x7e616f4220
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x1fbd58ebd041 0x7e616f4300
	Pawn* TryGetPawnOwner();// 0x1fbc58ebd041 0x7e616f43e0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x1fbb58ebd041 0x7e616f44c0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x1fba58ebd041 0x7e616f45a0
	void SetUseMainInstanceMontageEvaluationData(bool bSet);// 0x1fb958ebd041 0x7e616f4680
	void SetRootMotionMode(byte Value);// 0x1fb858ebd041 0x7e616f4760
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x1fb758ebd041 0x7e616f4840
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x1fb658ebd041 0x7e616f4920
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x1fb558ebd041 0x7e616f4a00
	void SavePoseSnapshot(FName SnapshotName);// 0x1fb458ebd041 0x7e616f4ae0
	void ResetDynamics(enum InTeleportType);// 0x1fb358ebd041 0x7e616f4bc0
	void RequestSlotGroupInertialization(FName InSlotGroupName, float Duration);// 0x1fb258ebd041 0x7e616f4ca0
	void RemovePoseSnapshot(FName SnapshotName);// 0x1fb158ebd041 0x7e616f4d80
	AnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendSettings(AnimSequenceBase* Asset, FName SlotNodeName, out const MontageBlendSettings BlendInSettings, out const MontageBlendSettings BlendOutSettings, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x1fb058ebd041 0x7e616f4e60
	AnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendArgs(AnimSequenceBase* Asset, FName SlotNodeName, out const AlphaBlendArgs BlendIn, out const AlphaBlendArgs BlendOut, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x1faf58ebd041 0x7e616f4f40
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x1fae58ebd041 0x7e616f5020
	void MontageSync_StopFollowing(const AnimMontage* MontageFollower);// 0x1fad58ebd041 0x7e616f5100
	void MontageSync_Follow(const AnimMontage* MontageFollower, const AnimInstance* OtherAnimInstance, const AnimMontage* MontageLeader);// 0x1fac58ebd041 0x7e616f51e0
	void Montage_StopWithBlendSettings(out const MontageBlendSettings BlendOutSettings, const AnimMontage* Montage);// 0x1fab58ebd041 0x7e616f52c0
	void Montage_StopWithBlendOut(out const AlphaBlendArgs BlendOut, const AnimMontage* Montage);// 0x1faa58ebd041 0x7e616f53a0
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x1fa958ebd041 0x7e616f5480
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x1fa858ebd041 0x7e616f5560
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x1fe958ebd041 0x7e616f5640
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x1fa658ebd041 0x7e616f1d60
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x1fa558ebd041 0x7e616f1e40
	void Montage_Resume(const AnimMontage* Montage);// 0x1fa458ebd041 0x7e616f1f20
	float Montage_PlayWithBlendSettings(AnimMontage* MontageToPlay, out const MontageBlendSettings BlendInSettings, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x1fa358ebd041 0x7e616f2000
	float Montage_PlayWithBlendIn(AnimMontage* MontageToPlay, out const AlphaBlendArgs BlendIn, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x1fa258ebd041 0x7e616f20e0
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x1fa158ebd041 0x7e616f21c0
	void Montage_Pause(const AnimMontage* Montage);// 0x1fa058ebd041 0x7e616f22a0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x1f9f58ebd041 0x7e616f2380
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x1f9e58ebd041 0x7e616f2460
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x1f9d58ebd041 0x7e616f2540
	bool Montage_IsActive(const AnimMontage* Montage);// 0x1f9c58ebd041 0x7e616f2620
	float Montage_GetPosition(const AnimMontage* Montage);// 0x1f9b58ebd041 0x7e616f2700
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x1f9a58ebd041 0x7e616f27e0
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x1f9958ebd041 0x7e616f28c0
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x1f9858ebd041 0x7e616f29a0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x1f9758ebd041 0x7e616f2a80
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x1f9658ebd041 0x7e616f2b60
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x1f9558ebd041 0x7e616f2c40
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x1f9458ebd041 0x7e616f2d20
	bool IsUsingMainInstanceMontageEvaluationData();// 0x1f9358ebd041 0x7e616f2e00
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x1f9258ebd041 0x7e616f2ee0
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x1f9158ebd041 0x7e616f2fc0
	bool IsAnyMontagePlaying();// 0x1f9058ebd041 0x7e616f30a0
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x1f8f58ebd041 0x7e616f3180
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x1f8e58ebd041 0x7e616f3260
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x1f8d58ebd041 0x7e616f3340
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x1f8c58ebd041 0x7e616f3420
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x1f8b58ebd041 0x7e616f3500
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x1f8a58ebd041 0x7e616f35e0
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x1f8958ebd041 0x7e616f36c0
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x1f8858ebd041 0x7e616f37a0
	bool GetReceiveNotifiesFromLinkedInstances();// 0x1f8758ebd041 0x7e616f3880
	bool GetPropagateNotifiesToLinkedInstances();// 0x1fc858ebd041 0x7e616f3960
	SkeletalMeshComponent* GetOwningComponent();// 0x1f8558ebd041 0x7e616f0080
	Actor* GetOwningActor();// 0x1f8458ebd041 0x7e616f0160
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x1f8358ebd041 0x7e616f0240
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x1f8258ebd041 0x7e616f0320
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x1f8158ebd041 0x7e616f0400
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x1f8058ebd041 0x7e616f04e0
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x1f7f58ebd041 0x7e616f05c0
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x1f7e58ebd041 0x7e616f06a0
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x1f7d58ebd041 0x7e616f0780
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x1f7c58ebd041 0x7e616f0860
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x1f7b58ebd041 0x7e616f0940
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x1f7a58ebd041 0x7e616f0a20
	float GetInstanceMachineWeight(int MachineIndex);// 0x1f7958ebd041 0x7e616f0b00
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x1f7858ebd041 0x7e616f0be0
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x1f7758ebd041 0x7e616f0cc0
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x1f7658ebd041 0x7e616f0da0
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x1f7558ebd041 0x7e616f0e80
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x1f7458ebd041 0x7e616f0f60
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x1f7358ebd041 0x7e616f1040
	float GetDeltaSeconds();// 0x1f7258ebd041 0x7e616f1120
	float GetCurveValue(FName CurveName);// 0x1f7158ebd041 0x7e616f1200
	FName GetCurrentStateName(int MachineIndex);// 0x1f7058ebd041 0x7e616f12e0
	AnimMontage* GetCurrentActiveMontage();// 0x1f6f58ebd041 0x7e616f13c0
	void GetAllCurveNames(out FName[] OutNames);// 0x1f6e58ebd041 0x7e616f14a0
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x1f6d58ebd041 0x7e616f1580
	void ClearMorphTargets();// 0x1f6c58ebd041 0x7e616f1660
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x1f6b58ebd041 0x7e616f1740
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x1f6a58ebd041 0x7e616f1820
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);// 0x1f6958ebd041 0x7e616f1900
	void BlueprintPostEvaluateAnimation();// 0x1f6858ebd041 0x7e616f19e0
	void BlueprintLinkedAnimationLayersInitialized();// 0x1f6758ebd041 0x7e616f1ac0
	void BlueprintInitializeAnimation();// 0x1f6658ebd041 0x7e616f1ba0
	void BlueprintBeginPlay();// 0x1fa758ebd041 0x7e616f1c80

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, out const AnimNotifyEventReference EventReference);// 0x236058ebd041 0x7e617e8660
	FString GetNotifyName();// 0x235f58ebd041 0x7e617e8740
	float GetDefaultTriggerWeightThreshold();// 0x235e58ebd041 0x7e617e8820

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10] 0x7e619772c0
	float SequenceLength;//[Offset: 0x90, Size: 0x4] 0x7e619aad80
	float RateScale;//[Offset: 0x94, Size: 0x4] 0x7e619aae00
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10] 0x7e619aae80

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x7e619a7680
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10] 0x7e61975d80
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x7e61975e20
	float GetPlayLength();// 0x2c4958ebd041 0x7e619b4300

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4] 0x7e615f8400
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4] 0x7e615f6380
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4] 0x7e615f6400
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4] 0x7e615f6480
	FName NotifyName;//[Offset: 0x40, Size: 0x8] 0x7e615f6500
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8] 0x7e615f6580
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8] 0x7e615f6600
	float Duration;//[Offset: 0x58, Size: 0x4] 0x7e615f6680
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30] 0x7e615f6700
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7e615f6780
	byte MontageTickType;//[Offset: 0x91, Size: 0x1] 0x7e615f6800
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4] 0x7e615f6880
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1] 0x7e615f6900
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4] 0x7e615f6980
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x7e615f6a00
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1] 0x7e615f6a80
	int TrackIndex;//[Offset: 0xa4, Size: 0x4] 0x7e615f6b00

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8] 0x7e615f5480
	int SlotIndex;//[Offset: 0x10, Size: 0x4] 0x7e615f5500
	int SegmentIndex;//[Offset: 0x14, Size: 0x4] 0x7e615f5580
	byte LinkMethod;//[Offset: 0x18, Size: 0x1] 0x7e615f5600
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1] 0x7e615f5680
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4] 0x7e615f5700
	float SegmentLength;//[Offset: 0x20, Size: 0x4] 0x7e615f5780
	float LinkValue;//[Offset: 0x24, Size: 0x4] 0x7e615f5800
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8] 0x7e615f5880

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime, out const AnimNotifyEventReference EventReference);// 0x235b58ebd041 0x7e617e8ac0
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, out const AnimNotifyEventReference EventReference);// 0x235a58ebd041 0x7e617e8ba0
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration, out const AnimNotifyEventReference EventReference);// 0x235958ebd041 0x7e617e8c80
	FString GetNotifyName();// 0x235858ebd041 0x7e617e8d60
	float GetDefaultTriggerWeightThreshold();// 0x235758ebd041 0x7e617e8e40

--------------------------------
Class: AnimNotifyEventReference
	MirrorDataTable* MirrorTable;//[Offset: 0x18, Size: 0x8] 0x7e615f9e80
	Object* NotifySource;//[Offset: 0x20, Size: 0x8] 0x7e615f9f00

--------------------------------
Class: MirrorDataTable.DataTable.Object
	MirrorFindReplaceExpression[] MirrorFindReplaceExpressions;//[Offset: 0xb0, Size: 0x10] 0x7e61a59980
	byte MirrorAxis;//[Offset: 0xc0, Size: 0x1] 0x7e61b59e80
	Skeleton* Skeleton;//[Offset: 0xc8, Size: 0x8] 0x7e61b59f00

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8] 0x7e61a19700
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7e61a19780
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7e61a19800
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7e61a19880
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10] 0x7e61a19900

--------------------------------
Class: MirrorFindReplaceExpression
	FName FindExpression;//[Offset: 0x0, Size: 0x8] 0x7e61652300
	FName ReplaceExpression;//[Offset: 0x8, Size: 0x8] 0x7e61652380
	byte FindReplaceMethod;//[Offset: 0x10, Size: 0x1] 0x7e61652400

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10] 0x7e61bd1000
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10] 0x7e61bd10a0
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10] 0x7e61bb6f00
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10] 0x7e61bd1140
	Skeleton*[] CompatibleSkeletons;//[Offset: 0x190, Size: 0x10] 0x7e61bd11e0
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x1a0, Size: 0x10] 0x7e61bd1280
	SmartNameContainer SmartNames;//[Offset: 0x200, Size: 0x50] 0x7e61bb7100
	BlendProfile*[] BlendProfiles;//[Offset: 0x280, Size: 0x10] 0x7e61bd1320
	AnimSlotGroup[] SlotGroups;//[Offset: 0x290, Size: 0x10] 0x7e61bd13c0
	AssetUserData*[] AssetUserData;//[Offset: 0x460, Size: 0x10] 0x7e61bd1460
	BlendProfile* GetBlendProfile(out const FName InProfileName);// 0x354158ebd041 0x7e61bc2c40
	void AddCompatibleSkeleton(const Skeleton* SourceSkeleton);// 0x354058ebd041 0x7e61bc2d20

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61668300
	int ParentIndex;//[Offset: 0x8, Size: 0x4] 0x7e61668380
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1] 0x7e61668400

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8] 0x7e61667d00
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8] 0x7e61667d80
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8] 0x7e61667e00

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8] 0x7e619d9f80
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10] 0x7e61979480
	enum Mode;//[Offset: 0x48, Size: 0x1] 0x7e61979520

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x7e61602100
	float BlendScale;//[Offset: 0x10, Size: 0x4] 0x7e61600080

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x7e614a7e00

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x7e61bb5380
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7e61bb5400
	Vector RelativeLocation;//[Offset: 0x38, Size: 0x18] 0x7e61bb5480
	Rotator RelativeRotation;//[Offset: 0x50, Size: 0x18] 0x7e61bb5500
	Vector RelativeScale;//[Offset: 0x68, Size: 0x18] 0x7e61bb5580
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7e61bb5600
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x353f58ebd041 0x7e61bc2e00
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x353e58ebd041 0x7e61bc2ee0

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x7e61667e80
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10] 0x7e84e5eca0

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	enum BlendModeIn;//[Offset: 0xa8, Size: 0x1] 0x7e61976820
	enum BlendModeOut;//[Offset: 0xa9, Size: 0x1] 0x7e619768c0
	AlphaBlend BlendIn;//[Offset: 0xb0, Size: 0x30] 0x7e619ad980
	float BlendInTime;//[Offset: 0xe0, Size: 0x4] 0x7e619ada00
	AlphaBlend BlendOut;//[Offset: 0xe8, Size: 0x30] 0x7e619ada80
	float BlendOutTime;//[Offset: 0x118, Size: 0x4] 0x7e619adb00
	float BlendOutTriggerTime;//[Offset: 0x11c, Size: 0x4] 0x7e619adb80
	FName SyncGroup;//[Offset: 0x120, Size: 0x8] 0x7e619adc00
	int SyncSlotIndex;//[Offset: 0x128, Size: 0x4] 0x7e619adc80
	MarkerSyncData MarkerData;//[Offset: 0x130, Size: 0x20] 0x7e619add00
	CompositeSection[] CompositeSections;//[Offset: 0x150, Size: 0x10] 0x7e61976960
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x160, Size: 0x10] 0x7e61976a00
	BranchingPoint[] BranchingPoints;//[Offset: 0x170, Size: 0x10] 0x7e61976aa0
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1] 0x7e619adf00
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1] 0x7e619adf80
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1] 0x7e619ae000
	BlendProfile* BlendProfileIn;//[Offset: 0x188, Size: 0x8] 0x7e619ae080
	BlendProfile* BlendProfileOut;//[Offset: 0x190, Size: 0x8] 0x7e619ae100
	byte RootMotionRootLock;//[Offset: 0x198, Size: 0x1] 0x7e619ae180
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x1a0, Size: 0x10] 0x7e61976b40
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x1b0, Size: 0x10] 0x7e61976be0
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1c0, Size: 0x28] 0x7e619ae300
	FName TimeStretchCurveName;//[Offset: 0x1e8, Size: 0x8] 0x7e619ae380
	bool IsValidSectionName(FName InSectionName);// 0x2c6458ebd041 0x7e619b6520
	float GetDefaultBlendOutTime();// 0x2c6358ebd041 0x7e619b6600
	float GetDefaultBlendInTime();// 0x2c6258ebd041 0x7e619b66e0
	AlphaBlendArgs GetBlendOutArgs();// 0x2c6158ebd041 0x7e619b67c0
	AlphaBlendArgs GetBlendInArgs();// 0x2c6058ebd041 0x7e619b68a0
	AnimMontage* CreateSlotAnimationAsDynamicMontage_WithBlendSettings(AnimSequenceBase* Asset, FName SlotNodeName, out const MontageBlendSettings BlendInSettings, out const MontageBlendSettings BlendOutSettings, float InPlayRate, int LoopCount, float InBlendOutTriggerTime);// 0x2c5f58ebd041 0x7e619b6980

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlendArgs
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8] 0x7e615f1600
	float BlendTime;//[Offset: 0x8, Size: 0x4] 0x7e615f1680
	enum BlendOption;//[Offset: 0xc, Size: 0x1] 0x7e84e52b80

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8] 0x7e614a8f00
	float BlendTime;//[Offset: 0x8, Size: 0x4] 0x7e614a8f80
	enum BlendOption;//[Offset: 0x24, Size: 0x1] 0x7e84852d60

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10] 0x7e84e57860

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8] 0x7e615fcd00
	float Time;//[Offset: 0x8, Size: 0x4] 0x7e615fcd80

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8] 0x7e615f7380
	float StartTime;//[Offset: 0x38, Size: 0x4] 0x7e615f5300
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8] 0x7e615f5380
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10] 0x7e84e54700

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8] 0x7e615f7280
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10] 0x7e615f7300

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10] 0x7e84e54d40

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8] 0x7e615f3700
	float StartPos;//[Offset: 0x8, Size: 0x4] 0x7e615f3780
	float AnimStartTime;//[Offset: 0xc, Size: 0x4] 0x7e615f3800
	float AnimEndTime;//[Offset: 0x10, Size: 0x4] 0x7e615f3880
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4] 0x7e615f3900
	int LoopingCount;//[Offset: 0x18, Size: 0x4] 0x7e615f3980

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8] 0x7e615f7100
	float DisplayTime;//[Offset: 0x38, Size: 0x4] 0x7e615f7180
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4] 0x7e615f7200

--------------------------------
Class: MontageBlendSettings
	BlendProfile* BlendProfile;//[Offset: 0x0, Size: 0x8] 0x7e615f6e00
	AlphaBlendArgs Blend;//[Offset: 0x8, Size: 0x10] 0x7e615f6e80
	enum BlendMode;//[Offset: 0x18, Size: 0x1] 0x7e84e54660

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4] 0x7e615f6f80
	float TriggerTime;//[Offset: 0x4, Size: 0x4] 0x7e615f7000
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1] 0x7e615f7080

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4] 0x7e61685180
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4] 0x7e61685200
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10] 0x7e61690e20
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4] 0x7e61683200

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61683280
	float Alpha;//[Offset: 0xc, Size: 0x4] 0x7e61683300

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10] 0x7e84e54ca0

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80] 0x7e615f3400

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8] 0x7e615f3480
	SmartName Name;//[Offset: 0x8, Size: 0xc] 0x7e615f3580
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4] 0x7e615f3600

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8] 0x7e615f3500

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10] 0x7e84dd89e0
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10] 0x7e84dd8940
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8] 0x7e615b1280
	FName SnapshotName;//[Offset: 0x28, Size: 0x8] 0x7e615b1300
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e615b1380

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8] 0x7e615f1100
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8] 0x7e615f1180
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4] 0x7e615f1200

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10] 0x7e84e56640
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50] 0x7e615e6dc0

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10] 0x7e84e566e0

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8] 0x7e61663780
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e61663800
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7e61663880
	float SavedPosition;//[Offset: 0xc, Size: 0x4] 0x7e61663900
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4] 0x7e61663980

--------------------------------
Class: ConstraintInstanceAccessor
	Object* Owner;//[Offset: 0x0, Size: 0x8] 0x7e61616980
	uint32 Index;//[Offset: 0x8, Size: 0x4] 0x7e61616a00

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 0x50] 0x7e6167be00
	void SetNumSubsteps(int NumSubsteps);// 0x228d58ebd041 0x7e6179b300
	void SetNumIterations(int NumIterations);// 0x228c58ebd041 0x7e6179b3e0
	void SetMaxNumIterations(int MaxNumIterations);// 0x228b58ebd041 0x7e6179b4c0
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x228a58ebd041 0x7e6179b5a0
	void PhysicsAssetUpdated();// 0x228958ebd041 0x7e6179b680
	float GetSimulationTime();// 0x228858ebd041 0x7e6179b760
	int GetNumSubsteps();// 0x228758ebd041 0x7e6179b840
	int GetNumKinematicParticles();// 0x228658ebd041 0x7e6179b920
	int GetNumIterations();// 0x228558ebd041 0x7e6179ba00
	int GetNumDynamicParticles();// 0x228458ebd041 0x7e6179bae0
	int GetNumCloths();// 0x228358ebd041 0x7e6179bbc0
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0x228258ebd041 0x7e6179bca0
	void EnableGravityOverride(out const Vector InVector);// 0x228158ebd041 0x7e6179bd80
	void DisableGravityOverride();// 0x228058ebd041 0x7e6179be60
	void ClothConfigUpdated();// 0x227f58ebd041 0x7e6179bf40

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0xf8, Size: 0x8] 0x7e61bac800
	BoxSphereBounds ImportedBounds;//[Offset: 0x100, Size: 0x38] 0x7e61bac880
	BoxSphereBounds ExtendedBounds;//[Offset: 0x138, Size: 0x38] 0x7e61bac900
	Vector PositiveBoundsExtension;//[Offset: 0x170, Size: 0x18] 0x7e61bac980
	Vector NegativeBoundsExtension;//[Offset: 0x188, Size: 0x18] 0x7e61baca00
	SkeletalMaterial[] Materials;//[Offset: 0x1a0, Size: 0x10] 0x7e61a5ec00
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x1b0, Size: 0x10] 0x7e61a5eca0
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x1c0, Size: 0x10] 0x7e61a5ed40
	PerPlatformInt MinLOD;//[Offset: 0x220, Size: 0x4] 0x7e61bacc00
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x224, Size: 0x1] 0x7e61bacc80
	byte SkelMirrorAxis;//[Offset: 0x225, Size: 0x1] 0x7e61bacd00
	byte SkelMirrorFlipAxis;//[Offset: 0x226, Size: 0x1] 0x7e61bacd80
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x227, Size: 0x1] 0x7e61bace00
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x227, Size: 0x1] 0x7e61bace80
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x227, Size: 0x1] 0x7e61bacf00
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x227, Size: 0x1] 0x7e61bacf80
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x227, Size: 0x1] 0x7e61bad000
	BodySetup* BodySetup;//[Offset: 0x228, Size: 0x8] 0x7e61bad080
	PhysicsAsset* PhysicsAsset;//[Offset: 0x230, Size: 0x8] 0x7e61bad100
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x238, Size: 0x8] 0x7e61bad180
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x240, Size: 0x10] 0x7e61a5ede0
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1] 0x7e61bad280
	int RayTracingMinLOD;//[Offset: 0x254, Size: 0x4] 0x7e61bad300
	enum ClothLODBiasMode;//[Offset: 0x258, Size: 0x1] 0x7e61a5ee80
	MorphTarget*[] MorphTargets;//[Offset: 0x260, Size: 0x10] 0x7e61a5ef20
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x3e8, Size: 0x8] 0x7e61a5efc0
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x3f0, Size: 0x10] 0x7e61a5f060
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x400, Size: 0x30] 0x7e61bad500
	AssetUserData*[] AssetUserData;//[Offset: 0x430, Size: 0x10] 0x7e61a5f100
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x440, Size: 0x10] 0x7e61a5f1a0
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x460, Size: 0x10] 0x7e61a5f240
	void SetSkeleton(Skeleton* InSkeleton);// 0x34d358ebd041 0x7e61b9adc0
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0x34d258ebd041 0x7e61b9aea0
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0x34d158ebd041 0x7e61b9af80
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0x34d058ebd041 0x7e61b9b060
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x34cf58ebd041 0x7e61b9b140
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x34ce58ebd041 0x7e61b9b220
	int NumSockets();// 0x34cd58ebd041 0x7e61b9b300
	FString[] K2_GetAllMorphTargetNames();// 0x34cc58ebd041 0x7e61b9b3e0
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x34cb58ebd041 0x7e61b9b4c0
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x34ca58ebd041 0x7e61b9b5a0
	Skeleton* GetSkeleton();// 0x34c958ebd041 0x7e61b9b680
	PhysicsAsset* GetShadowPhysicsAsset();// 0x34c858ebd041 0x7e61b9b760
	PhysicsAsset* GetPhysicsAsset();// 0x34c758ebd041 0x7e61b9b840
	NodeMappingContainer*[] GetNodeMappingData();// 0x34c658ebd041 0x7e61b9b920
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x34c558ebd041 0x7e61b9ba00
	MorphTarget*[] GetMorphTargets();// 0x34c458ebd041 0x7e61b9bae0
	ClothingAssetBase*[] GetMeshClothingAssets();// 0x34c358ebd041 0x7e61b9bbc0
	SkeletalMaterial[] GetMaterials();// 0x34c258ebd041 0x7e61b9bca0
	SkeletalMeshLODSettings* GetLODSettings();// 0x34c158ebd041 0x7e61b9bd80
	BoxSphereBounds GetImportedBounds();// 0x34c058ebd041 0x7e61b9be60
	Object* GetDefaultAnimatingRig();// 0x34bf58ebd041 0x7e61b9bf40
	BoxSphereBounds GetBounds();// 0x34be58ebd041 0x7e61b9c020
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x34bd58ebd041 0x7e61b9c100
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x34bc58ebd041 0x7e61b9c1e0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x34bb58ebd041 0x7e61b9c2c0

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x7e61667200
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x7e61667280
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14] 0x7e61667300

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4] 0x7e61663680
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1] 0x7e61663700

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7e61665e80
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x7e61665f00
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10] 0x7e84e5cea0
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14] 0x7e61666000
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c] 0x7e61664a80
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10] 0x7e84e5cf40
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10] 0x7e84e5cfe0
	SectionReference[] SectionsToPrioritize;//[Offset: 0x88, Size: 0x10] 0x7e84e5d080
	float WeightOfPrioritization;//[Offset: 0x98, Size: 0x4] 0x7e61664c80
	AnimSequence* BakePose;//[Offset: 0xa0, Size: 0x8] 0x7e61664d00
	AnimSequence* BakePoseOverride;//[Offset: 0xa8, Size: 0x8] 0x7e61664d80
	FString SourceImportFilename;//[Offset: 0xb0, Size: 0x10] 0x7e61664e00
	enum SkinCacheUsage;//[Offset: 0xc0, Size: 0x1] 0x7e84e5d120
	float MorphTargetPositionErrorTolerance;//[Offset: 0xc4, Size: 0x4] 0x7e61664f00
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x7e61664f80
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1] 0x7e61665000
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1] 0x7e61665080
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1] 0x7e61665100

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61640880
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61640900
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61640980
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e61640a00
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e61640a80
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7e61640b00
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7e61640b80
	bool bUseBackwardsCompatibleF16TruncUVs;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7e61640c00
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4] 0x7e61640c80
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4] 0x7e61640d00
	float ThresholdUV;//[Offset: 0xc, Size: 0x4] 0x7e61640d80
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4] 0x7e61640e00

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1] 0x7e61666080
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4] 0x7e61666100
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4] 0x7e61666180
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4] 0x7e61666200
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4] 0x7e61666280
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4] 0x7e61666300
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1] 0x7e61664280
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1] 0x7e61664300
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1] 0x7e61664380
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1] 0x7e61664400
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1] 0x7e61664480
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x7e61664500
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x7e61664580
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4] 0x7e61664600
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4] 0x7e61664680
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4] 0x7e61664700
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7e61664780
	bool bMergeCoincidentVertBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x7e61664800
	float VolumeImportance;//[Offset: 0x30, Size: 0x4] 0x7e61664880
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7e61664900
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1] 0x7e61664980
	int BaseLOD;//[Offset: 0x38, Size: 0x4] 0x7e61664a00

--------------------------------
Class: SectionReference
	int SectionIndex;//[Offset: 0x0, Size: 0x4] 0x7e61665180

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xa8, Size: 0x8] 0x7e619d0d00
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xb0, Size: 0x8] 0x7e619d0d80
	byte AdditiveAnimType;//[Offset: 0x128, Size: 0x1] 0x7e619d0e00
	byte RefPoseType;//[Offset: 0x129, Size: 0x1] 0x7e619d0e80
	int RefFrameIndex;//[Offset: 0x12c, Size: 0x4] 0x7e619d0f00
	AnimSequence* RefPoseSeq;//[Offset: 0x130, Size: 0x8] 0x7e619d0f80
	FName RetargetSource;//[Offset: 0x138, Size: 0x8] 0x7e619d1000
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x140, Size: 0x10] 0x7e61978f80
	enum Interpolation;//[Offset: 0x150, Size: 0x1] 0x7e61979020
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1] 0x7e619af880
	byte RootMotionRootLock;//[Offset: 0x152, Size: 0x1] 0x7e619af900
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 0x1] 0x7e619af980
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1] 0x7e619afa00
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1] 0x7e619afa80
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x158, Size: 0x10] 0x7e61976780
	FrameRate TargetFrameRate;//[Offset: 0x178, Size: 0x8] 0x7e619afb80
	<AnimationAttributeIdentifier,AttributeCurve> AttributeCurves;//[Offset: 0x180, Size: 0x50] 0x7e6167d000

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10] 0x7e61977ae0

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10] 0x7e619a9800

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8] 0x7e619ab980

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4] 0x7e8412e400
	int Denominator;//[Offset: 0x4, Size: 0x4] 0x7e8412e380

--------------------------------
Class: AnimationAttributeIdentifier
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e615f4800
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x7e615f4880
	int BoneIndex;//[Offset: 0x10, Size: 0x4] 0x7e615f4900
	ScriptStruct* ScriptStruct;//[Offset: 0x18, Size: 0x8] 0x7e615f4980
	SoftObjectPath ScriptStructPath;//[Offset: 0x20, Size: 0x18] 0x7e615f4a00

--------------------------------
Class: AttributeCurve.IndexedCurve
	AttributeKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x7e84e548e0
	SoftObjectPath ScriptStructPath;//[Offset: 0x78, Size: 0x18] 0x7e615f4c00
	ScriptStruct* ScriptStruct;//[Offset: 0x90, Size: 0x8] 0x7e615f4c80
	bool bShouldInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7e615f4d00

--------------------------------
Class: AttributeKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e615f4b00

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e6152b800

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8] 0x7e61b59d00

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10] 0x7e6199cb00
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10] 0x7e6199cb80

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10] 0x7e61a5cc20
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10] 0x7e61a5ccc0
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10] 0x7e61a5cd60
	PhysicsAssetSolverSettings SolverSettings;//[Offset: 0x60, Size: 0x18] 0x7e61b7f880
	SolverIterations SolverIterations;//[Offset: 0x78, Size: 0x18] 0x7e61b7f900
	enum SolverType;//[Offset: 0x90, Size: 0x1] 0x7e61a5ce00
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x7e61b7fa00
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x138, Size: 0x8] 0x7e61b7fa80
	BodySetup*[] BodySetup;//[Offset: 0x140, Size: 0x10] 0x7e61a5a560

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x7e61b80f00
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2e8, Size: 0x10] 0x7e61a5cb80

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x7e6165bc00
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24] 0x7e6165bc80

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8] 0x7e6165c300
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e6165c380
	float OrientationStrength;//[Offset: 0xc, Size: 0x4] 0x7e6165c400
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4] 0x7e6165c480
	float PositionStrength;//[Offset: 0x14, Size: 0x4] 0x7e6165c500
	float VelocityStrength;//[Offset: 0x18, Size: 0x4] 0x7e6165c580
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4] 0x7e6165c600
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4] 0x7e6165a580

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x270] 0x7e61b82280
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x298, Size: 0x10] 0x7e61a5cae0
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x2a8, Size: 0x158] 0x7e61b82380

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x38, Size: 0x8] 0x7e61616a80
	FName ConstraintBone1;//[Offset: 0x40, Size: 0x8] 0x7e61616b00
	FName ConstraintBone2;//[Offset: 0x48, Size: 0x8] 0x7e61616b80
	Vector Pos1;//[Offset: 0x50, Size: 0x18] 0x7e61616c00
	Vector PriAxis1;//[Offset: 0x68, Size: 0x18] 0x7e61616c80
	Vector SecAxis1;//[Offset: 0x80, Size: 0x18] 0x7e61616d00
	Vector Pos2;//[Offset: 0x98, Size: 0x18] 0x7e61616d80
	Vector PriAxis2;//[Offset: 0xb0, Size: 0x18] 0x7e61616e00
	Vector SecAxis2;//[Offset: 0xc8, Size: 0x18] 0x7e61616e80
	Rotator AngularRotationOffset;//[Offset: 0xe0, Size: 0x18] 0x7e61616f00
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x7e61616f80
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x100, Size: 0x158] 0x7e61617000

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4] 0x7e61617080
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4] 0x7e61617100
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4] 0x7e61617180
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4] 0x7e61617200
	float ShockPropagationAlpha;//[Offset: 0x10, Size: 0x4] 0x7e61617280
	float LinearBreakThreshold;//[Offset: 0x14, Size: 0x4] 0x7e61617300
	float LinearPlasticityThreshold;//[Offset: 0x18, Size: 0x4] 0x7e61617380
	float AngularBreakThreshold;//[Offset: 0x1c, Size: 0x4] 0x7e61615300
	float AngularPlasticityThreshold;//[Offset: 0x20, Size: 0x4] 0x7e61615380
	float ContactTransferScale;//[Offset: 0x24, Size: 0x4] 0x7e61615400
	LinearConstraint LinearLimit;//[Offset: 0x28, Size: 0x1c] 0x7e61615680
	ConeConstraint ConeLimit;//[Offset: 0x44, Size: 0x20] 0x7e61615900
	TwistConstraint TwistLimit;//[Offset: 0x64, Size: 0x1c] 0x7e61615d00
	LinearDriveConstraint LinearDrive;//[Offset: 0x80, Size: 0x68] 0x7e61615d80
	AngularDriveConstraint AngularDrive;//[Offset: 0xe8, Size: 0x68] 0x7e61615e00
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x7e61615e80
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1] 0x7e61615f00
	bool bEnableLinearProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1] 0x7e61615f80
	bool bEnableAngularProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1] 0x7e61616000
	bool bEnableShockPropagation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1] 0x7e61616080
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1] 0x7e61616100
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1] 0x7e61616180
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1] 0x7e61616200
	bool bAngularPlasticity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1] 0x7e61616280
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1] 0x7e61616300
	bool bLinearPlasticity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x151, Size: 0x1] 0x7e61614280
	byte LinearPlasticityType;//[Offset: 0x152, Size: 0x1] 0x7e61614300

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4] 0x7e61615480
	byte XMotion;//[Offset: 0x18, Size: 0x1] 0x7e61615500
	byte YMotion;//[Offset: 0x19, Size: 0x1] 0x7e61615580
	byte ZMotion;//[Offset: 0x1a, Size: 0x1] 0x7e61615600

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7e61615a80
	float Damping;//[Offset: 0x4, Size: 0x4] 0x7e61615b00
	float Restitution;//[Offset: 0x8, Size: 0x4] 0x7e61615b80
	float ContactDistance;//[Offset: 0xc, Size: 0x4] 0x7e61615c00
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7e61615c80

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4] 0x7e61615700
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4] 0x7e61615780
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1] 0x7e61615800
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1] 0x7e61615880

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4] 0x7e61615980
	byte TwistMotion;//[Offset: 0x18, Size: 0x1] 0x7e61615a00

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0x18] 0x7e61614680
	Vector VelocityTarget;//[Offset: 0x18, Size: 0x18] 0x7e61614700
	ConstraintDrive XDrive;//[Offset: 0x30, Size: 0x10] 0x7e61614780
	ConstraintDrive YDrive;//[Offset: 0x40, Size: 0x10] 0x7e61614800
	ConstraintDrive ZDrive;//[Offset: 0x50, Size: 0x10] 0x7e61614880
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7e61614900

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7e61614980
	float Damping;//[Offset: 0x4, Size: 0x4] 0x7e61614a00
	float MaxForce;//[Offset: 0x8, Size: 0x4] 0x7e61614a80
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7e61614b00
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7e61614b80

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10] 0x7e61614380
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10] 0x7e61614400
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10] 0x7e61614480
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0x18] 0x7e61614500
	Vector AngularVelocityTarget;//[Offset: 0x48, Size: 0x18] 0x7e61614580
	byte AngularDriveMode;//[Offset: 0x60, Size: 0x1] 0x7e61614600

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x158] 0x7e6165bb00
	FName ProfileName;//[Offset: 0x158, Size: 0x8] 0x7e6165bb80

--------------------------------
Class: PhysicsAssetSolverSettings
	int PositionIterations;//[Offset: 0x0, Size: 0x4] 0x7e6165c000
	int VelocityIterations;//[Offset: 0x4, Size: 0x4] 0x7e6165c080
	int ProjectionIterations;//[Offset: 0x8, Size: 0x4] 0x7e6165c100
	float CullDistance;//[Offset: 0xc, Size: 0x4] 0x7e6165c180
	float MaxDepenetrationVelocity;//[Offset: 0x10, Size: 0x4] 0x7e6165c200
	float FixedTimeStep;//[Offset: 0x14, Size: 0x4] 0x7e6165c280

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4] 0x7e6165bd00
	int JointIterations;//[Offset: 0x4, Size: 0x4] 0x7e6165bd80
	int CollisionIterations;//[Offset: 0x8, Size: 0x4] 0x7e6165be00
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4] 0x7e6165be80
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4] 0x7e6165bf00
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4] 0x7e6165bf80

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50] 0x7e6167f280
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50] 0x7e6167f340
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50] 0x7e6167f400
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28] 0x7e61b5b100
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28] 0x7e61b5b180

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8] 0x7e61656400
	Transform Transform;//[Offset: 0x10, Size: 0x60] 0x7e61656480

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10] 0x7e84e5f060
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20] 0x7e61666500

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61666580
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x7e61666600
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7e61666680
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10] 0x7e84e5f100
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10] 0x7e84e5f1a0

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8] 0x7e61666800

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x7e61666880
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e61666900
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7e61666980

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10] 0x7e84e5f240
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10] 0x7e84e5f2e0

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61667980
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1] 0x7e61667a00
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4] 0x7e61667a80

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4] 0x7e61bb5980
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1] 0x7e61bb5a00
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7e61bb5a80
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1] 0x7e61bb5b00
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4] 0x7e61bb5b80
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4] 0x7e61bb5c00
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10] 0x7e61a5f7e0

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8] 0x7e61692ea0

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7e61666c80
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x7e61666d00
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1] 0x7e84e5f560
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10] 0x7e84e5f600
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10] 0x7e84e5f6a0
	int[] SectionsToPrioritize;//[Offset: 0x30, Size: 0x10] 0x7e84e5f740
	float WeightOfPrioritization;//[Offset: 0x40, Size: 0x4] 0x7e61666f80
	AnimSequence* BakePose;//[Offset: 0x48, Size: 0x8] 0x7e61667000
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x50, Size: 0x3c] 0x7e61667080

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61667100
	FName BoneName;//[Offset: 0x4, Size: 0x8] 0x7e61667180

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8] 0x7e6189eca0
	byte BlueprintType;//[Offset: 0x58, Size: 0x1] 0x7e6194a380
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x7e6194a400
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x7e6194a480
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x7e6194a500
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4] 0x7e61948480
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8] 0x7e61948500
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10] 0x7e6189ed40
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10] 0x7e6189ede0
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10] 0x7e6189ee80
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8] 0x7e61948700

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8] 0x7e6189ef20
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8] 0x7e6189efc0
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61948780
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10] 0x7e61948800

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10] 0x7e61a5cea0
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10] 0x7e61a5cf40
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8] 0x7e61baa900

--------------------------------
Class: SCS_Node.Object
	ClassPtrProperty ComponentClass;//[Size: 0x8] 0x7e61a5cfe0
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8] 0x7e61baa180
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48] 0x7e61baa200
	FName AttachToName;//[Offset: 0x80, Size: 0x8] 0x7e61baa280
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8] 0x7e61baa300
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8] 0x7e61baa380
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7e61baa400
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10] 0x7e61a5d080
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10] 0x7e61a5d120
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10] 0x7e61ba8480
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8] 0x7e61ba8500

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10] 0x7e84e58d00
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x7e61603980

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x7e61603a00
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x7e61603a80
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8] 0x7e61603b00

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8] 0x7e61602d80
	FString DataValue;//[Offset: 0x8, Size: 0x10] 0x7e61602e00

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4] 0x7e61be7480
	byte LengthMode;//[Offset: 0x2c, Size: 0x1] 0x7e61be7500
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x7e61be7580
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x7e61be7600
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1] 0x7e61be7680
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1] 0x7e61be7700
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10] 0x7e61bd15a0
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10] 0x7e61bd1640
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10] 0x7e61bd16e0
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10] 0x7e61bd1780
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10] 0x7e61bd1820
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10] 0x7e61be7a00
	byte TimelineTickGroup;//[Offset: 0x90, Size: 0x1] 0x7e61be7a80
	FName VariableName;//[Offset: 0x94, Size: 0x8] 0x7e61be7b00
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 0x8] 0x7e61be7b80
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 0x8] 0x7e61be7c00
	FName FinishedFunctionName;//[Offset: 0xac, Size: 0x8] 0x7e61be7c80

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8] 0x7e61683580
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8] 0x7e61683600

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8] 0x7e61683780
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e61683800

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8] 0x7e61683480

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8] 0x7e61683500

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8] 0x7e61683400

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x7e61a22480
	Vector GetVectorValue(float InTime);// 0x2de158ebd041 0x7e61a0c480

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8] 0x7e61683380

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x7e61a22f00
	float AdjustHue;//[Offset: 0x230, Size: 0x4] 0x7e61a22f80
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4] 0x7e61a23000
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4] 0x7e61a23080
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4] 0x7e61a23100
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4] 0x7e61a23180
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4] 0x7e61a21100
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4] 0x7e61a21180
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0x2dda58ebd041 0x7e61a090e0
	LinearColor GetLinearColorValue(float InTime);// 0x2dd958ebd041 0x7e61a091c0
	LinearColor GetClampedLinearColorValue(float InTime);// 0x2dd858ebd041 0x7e61a092a0

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x7e61603880
	ClassPtrProperty ComponentClass;//[Size: 0x8] 0x7e84e58c60

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10] 0x7e61a51500
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10] 0x7e61a515a0

--------------------------------
Class: ComponentOverrideRecord
	ClassPtrProperty ComponentClass;//[Size: 0x8] 0x7e84e5b500
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8] 0x7e61644600
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20] 0x7e61644680
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48] 0x7e61644700

--------------------------------
Class: ComponentKey
	ClassPtrProperty OwnerClass;//[Size: 0x8] 0x7e84e5b5a0
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8] 0x7e61644780
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10] 0x7e61644800

--------------------------------
Class: MeshDeformer.Object

--------------------------------
Class: MeshDeformerInstance.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10] 0x7e84e5ec00

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x20] 0x7e841e3780
	Plane YPlane;//[Offset: 0x20, Size: 0x20] 0x7e8412ea00
	Plane ZPlane;//[Offset: 0x40, Size: 0x20] 0x7e8412e980
	Plane WPlane;//[Offset: 0x60, Size: 0x20] 0x7e8412ff00

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6165a780
	byte ParamType;//[Offset: 0x8, Size: 0x1] 0x7e6165a800
	float Scalar;//[Offset: 0xc, Size: 0x4] 0x7e6165a880
	float Scalar_Low;//[Offset: 0x10, Size: 0x4] 0x7e6165a900
	Vector Vector;//[Offset: 0x18, Size: 0x18] 0x7e6165a980
	Vector Vector_Low;//[Offset: 0x30, Size: 0x18] 0x7e6165aa00
	Color Color;//[Offset: 0x48, Size: 0x4] 0x7e6165aa80
	Actor* Actor;//[Offset: 0x50, Size: 0x8] 0x7e6165ab00
	MaterialInterface* Material;//[Offset: 0x58, Size: 0x8] 0x7e6165ab80

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4] 0x7e61b7f100

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10] 0x7e61a52fe0
	int ActiveTab;//[Offset: 0x38, Size: 0x4] 0x7e61a7d880

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10] 0x7e61646d00
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10] 0x7e84e5b140
	float ViewStartInput;//[Offset: 0x20, Size: 0x4] 0x7e61646e00
	float ViewEndInput;//[Offset: 0x24, Size: 0x4] 0x7e61646e80
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4] 0x7e61646f00
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4] 0x7e61646f80

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8] 0x7e61647000
	Color CurveColor;//[Offset: 0x8, Size: 0x4] 0x7e61647080
	FString CurveName;//[Offset: 0x10, Size: 0x10] 0x7e61647100
	int bHideCurve;//[Offset: 0x20, Size: 0x4] 0x7e61647180
	int bColorCurve;//[Offset: 0x24, Size: 0x4] 0x7e61647200
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4] 0x7e61647280
	int bClamp;//[Offset: 0x2c, Size: 0x4] 0x7e61647300
	float ClampLow;//[Offset: 0x30, Size: 0x4] 0x7e61647380
	float ClampHigh;//[Offset: 0x34, Size: 0x4] 0x7e61645300

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10] 0x7e84e5e020

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6165ac00
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7e6165ac80

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x7e61690920

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8] 0x7e61686f80

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x7e6194b380
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10] 0x7e6189eac0
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7e6194b480
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10] 0x7e6194b500
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x2a1758ebd041 0x7e61956980
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x2a1658ebd041 0x7e61956a60
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x2a1558ebd041 0x7e61956b40
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x2a1458ebd041 0x7e61956c20
	float GetStartTime();// 0x2a1358ebd041 0x7e61956d00
	float GetEndTime();// 0x2a1258ebd041 0x7e61956de0
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x2a1158ebd041 0x7e61956ec0
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x2a1058ebd041 0x7e61956fa0

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8] 0x7e61709600
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1] 0x7e61698760
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7e61709700
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x7e61709780
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1] 0x7e61698800
	MovieSceneTimecodeSource GetEarliestTimecodeSource();// 0x200e58ebd041 0x7e616fa960
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x200d58ebd041 0x7e616faa40
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x200c58ebd041 0x7e616fab20

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10] 0x7e61709b00

--------------------------------
Class: MovieSceneTimecodeSource
	Timecode Timecode;//[Offset: 0x0, Size: 0x14] 0x7e615a3080

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4] 0x7e841e7e00
	int Minutes;//[Offset: 0x4, Size: 0x4] 0x7e841e7d80
	int Seconds;//[Offset: 0x8, Size: 0x4] 0x7e841e7d00
	int Frames;//[Offset: 0xc, Size: 0x4] 0x7e841e7c80
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e841e1880

--------------------------------
Class: MovieSceneObjectBindingID
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x7e6157db00
	int SequenceID;//[Offset: 0x10, Size: 0x4] 0x7e6157db80
	int ResolveParentIndex;//[Offset: 0x14, Size: 0x4] 0x7e6157dc00

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160] 0x7e61903600
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118] 0x7e61903680
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0] 0x7e61903700
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30] 0x7e61903780
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10] 0x7e61897cc0
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10] 0x7e61903880
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10] 0x7e61903900
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1] 0x7e61903980
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1] 0x7e61903a00
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1] 0x7e61897d60

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50] 0x7e61592a40
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10] 0x7e615a0200
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4] 0x7e615a0280
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8] 0x7e615a0300

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x7e6157fc00

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10] 0x7e615a1d00
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2] 0x7e615a1d80
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1] 0x7e84ddd260
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8] 0x7e615a1e80
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10] 0x7e84ddd1c0
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38] 0x7e615a1f80
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8] 0x7e615a2000
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7e615a2080
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x7e615a2100
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x7e615a0080

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4] 0x7e6170e680
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7e6170e700
	int[] RowsDisabled;//[Offset: 0x58, Size: 0x10] 0x7e6169a1a0
	Guid EvaluationFieldGuid;//[Offset: 0x6c, Size: 0x10] 0x7e6170c700
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x80, Size: 0x10] 0x7e6170c780

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e615a4600
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e615a4680
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e615a4700
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e615a4780
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e615a4800

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10] 0x7e84dddda0

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8] 0x7e615a4300
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10] 0x7e615a4380
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4] 0x7e615a4400
	enum Flags;//[Offset: 0x1c, Size: 0x1] 0x7e84dddd00
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2] 0x7e615a4500

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2] 0x7e6170be00
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38] 0x7e6170be80
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10] 0x7e6170bf00
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4] 0x7e6170bf80
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4] 0x7e6170c000
	int RowIndex;//[Offset: 0xa8, Size: 0x4] 0x7e6170c080
	int OverlapPriority;//[Offset: 0xac, Size: 0x4] 0x7e6170c100
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7e6170c180
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x7e6170c200
	float StartTime;//[Offset: 0xb4, Size: 0x4] 0x7e6170c280
	float EndTime;//[Offset: 0xb8, Size: 0x4] 0x7e6170c300
	float PrerollTime;//[Offset: 0xbc, Size: 0x4] 0x7e6170c380
	float PostrollTime;//[Offset: 0xc0, Size: 0x4] 0x7e6170c400
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x7e6170c480
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x7e6170c500
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2] 0x7e6170c580
	void SetRowIndex(int NewRowIndex);// 0x202258ebd041 0x7e616f97e0
	void SetPreRollFrames(int InPreRollFrames);// 0x202158ebd041 0x7e616f98c0
	void SetPostRollFrames(int InPostRollFrames);// 0x202058ebd041 0x7e616f99a0
	void SetOverlapPriority(int NewPriority);// 0x201f58ebd041 0x7e616f9a80
	void SetIsLocked(bool bInIsLocked);// 0x201e58ebd041 0x7e616f9b60
	void SetIsActive(bool bInIsActive);// 0x201d58ebd041 0x7e616f9c40
	void SetCompletionMode(enum InCompletionMode);// 0x201c58ebd041 0x7e616f9d20
	void SetBlendType(enum InBlendType);// 0x201b58ebd041 0x7e616f9e00
	bool IsLocked();// 0x201a58ebd041 0x7e616f9ee0
	bool IsActive();// 0x201958ebd041 0x7e616f9fc0
	int GetRowIndex();// 0x201858ebd041 0x7e616fa0a0
	int GetPreRollFrames();// 0x201758ebd041 0x7e616fa180
	int GetPostRollFrames();// 0x201658ebd041 0x7e616fa260
	int GetOverlapPriority();// 0x201558ebd041 0x7e616fa340
	enum GetCompletionMode();// 0x201458ebd041 0x7e616fa420
	OptionalMovieSceneBlendType GetBlendType();// 0x201358ebd041 0x7e616fa500

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1] 0x7e84ddc7c0
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e6157f700

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615a1400
	enum CompletionMode;//[Offset: 0x1, Size: 0x1] 0x7e84ddd580

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4] 0x7e615a3100
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4] 0x7e615a3180
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10] 0x7e615a1100
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e615a1180
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4] 0x7e615a1200
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10] 0x7e615a1280
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e615a1300
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4] 0x7e615a1380

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4] 0x7e8412e100

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x7e8412e300
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x7e8412e180

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7e8412e280
	FrameNumber Value;//[Offset: 0x4, Size: 0x4] 0x7e8412e200

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x7e615a0380

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4] 0x7e615a0580
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50] 0x7e61592d40
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50] 0x7e61592e00

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18] 0x7e615a3a00
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60] 0x7e615a3a80
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50] 0x7e615946c0
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50] 0x7e61594780

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4] 0x7e615a3d00
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10] 0x7e84ddd8a0

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x7e614acd80

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18] 0x7e615a3e00
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x18, Size: 0x20] 0x7e615a3e80
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x38, Size: 0x20] 0x7e615a2200
	FrameRate TickResolution;//[Offset: 0x58, Size: 0x8] 0x7e615a2280
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x60, Size: 0x4] 0x7e615a2300
	MovieSceneFrameRange ParentPlayRange;//[Offset: 0x64, Size: 0x10] 0x7e615a2380
	FrameNumber ParentStartFrameOffset;//[Offset: 0x74, Size: 0x4] 0x7e615a2400
	FrameNumber ParentEndFrameOffset;//[Offset: 0x78, Size: 0x4] 0x7e615a2480
	FrameNumber ParentFirstLoopStartFrameOffset;//[Offset: 0x7c, Size: 0x4] 0x7e615a2500
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7e615a2580
	MovieSceneFrameRange PlayRange;//[Offset: 0x84, Size: 0x10] 0x7e615a2600
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x94, Size: 0x10] 0x7e615a2680
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0xa4, Size: 0x10] 0x7e615a2700
	MovieSceneFrameRange PreRollRange;//[Offset: 0xb4, Size: 0x10] 0x7e615a2780
	MovieSceneFrameRange PostRollRange;//[Offset: 0xc4, Size: 0x10] 0x7e615a2800
	int16 HierarchicalBias;//[Offset: 0xd4, Size: 0x2] 0x7e615a2880
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1] 0x7e615a2900
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0xd8, Size: 0x18] 0x7e615a2980
	Guid SubSectionSignature;//[Offset: 0xf8, Size: 0x10] 0x7e615a2a00

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x7e615a3f00
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10] 0x7e84ddd800

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x7e615a3f80
	FrameTime Offset;//[Offset: 0x4, Size: 0x8] 0x7e615a4000

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x7e8412e500
	float SubFrame;//[Offset: 0x4, Size: 0x4] 0x7e8412e480

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x7e615a4080
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8] 0x7e615a4200

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4] 0x7e615a4100
	FrameNumber End;//[Offset: 0x4, Size: 0x4] 0x7e615a4180

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60] 0x7e6157fd00
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60] 0x7e6157fd80
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10] 0x7e84ddf380
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10] 0x7e84ddfa60
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10] 0x7e84ddf9c0

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc] 0x7e6157ea00
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4] 0x7e6157ea80

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8] 0x7e6157eb00
	uint32 EntityID;//[Offset: 0x8, Size: 0x4] 0x7e6157eb80

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 0x10] 0x7e6157ff80
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 0x4] 0x7e6157e780
	enum Flags;//[Offset: 0x18, Size: 0x1] 0x7e84ddf920
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x7e6157e880
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x7e6157e900

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10] 0x7e6157e980

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10] 0x7e84ddcfe0
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10] 0x7e84ddcf40
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10] 0x7e84ddcea0

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10] 0x7e84ddf600
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10] 0x7e84ddf560
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10] 0x7e84ddf4c0

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4] 0x7e615a1000
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4] 0x7e615a1080

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8] 0x7e6157f980
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2] 0x7e6157fa00

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x7e6157fb80
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x7e6157fc80

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2] 0x7e6157f800
	enum Flags;//[Offset: 0x2, Size: 0x1] 0x7e84ddf420
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4] 0x7e6157f900

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10] 0x7e84ddf740
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10] 0x7e84ddf6a0

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc] 0x7e615a0d00
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2] 0x7e615a0d80
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2] 0x7e615a0e00

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x7e615a0b80
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x7e615a0c00
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4] 0x7e615a0c80

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e6157f480
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e6157f500
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e6157f580
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e6157f600

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10] 0x7e61897ea0
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10] 0x7e61897f40
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10] 0x7e61897fe0
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50] 0x7e6167b080
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10] 0x7e61898080
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8] 0x7e61903f80
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10] 0x7e61904000
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10] 0x7e61904080
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8] 0x7e61904100
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8] 0x7e61904180
	enum EvaluationType;//[Offset: 0x118, Size: 0x1] 0x7e61898120
	enum ClockSource;//[Offset: 0x119, Size: 0x1] 0x7e618981c0
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18] 0x7e61902200
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10] 0x7e61898260

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x60] 0x7e615a4880
	FName[] Tags;//[Offset: 0x60, Size: 0x10] 0x7e84dddc60
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7e615a4980
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x7e615a4a00
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1] 0x7e615a4a80
	Guid Guid;//[Offset: 0x74, Size: 0x10] 0x7e615a4b00
	FString Name;//[Offset: 0x88, Size: 0x10] 0x7e615a4b80
	Object* ObjectTemplate;//[Offset: 0x98, Size: 0x8] 0x7e615a4c00
	Guid[] ChildPossessables;//[Offset: 0xa0, Size: 0x10] 0x7e84dddbc0
	enum Ownership;//[Offset: 0xb0, Size: 0x1] 0x7e84dddb20
	FName LevelName;//[Offset: 0xb4, Size: 0x8] 0x7e615a4d80

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10] 0x7e84ddd4e0
	Guid Guid;//[Offset: 0x10, Size: 0x10] 0x7e615a1580
	FString Name;//[Offset: 0x20, Size: 0x10] 0x7e615a1600
	Guid ParentGuid;//[Offset: 0x30, Size: 0x10] 0x7e615a1680
	MovieSceneObjectBindingID SpawnableObjectBindingID;//[Offset: 0x40, Size: 0x18] 0x7e615a1700

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10] 0x7e6157d800
	FString BindingName;//[Offset: 0x10, Size: 0x10] 0x7e6157d880
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10] 0x7e84ddc720

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10] 0x7e84ddc4a0

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x7e6157e280
	FString Label;//[Offset: 0x8, Size: 0x10] 0x7e6157e300
	bool bIsDeterminismFence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e6157e380

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8] 0x7e615bcc00
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8] 0x7e615bcc80
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10] 0x7e615bcd00
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7e615bcd80

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x10] 0x7e61573c00
	Vector2D Maximum;//[Offset: 0x10, Size: 0x10] 0x7e61573c80

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x238, Size: 0x8] 0x7e61942b80
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x248, Size: 0xe0] 0x7e61942c00
	void SetUserTag(FName InUserTag);// 0x29a058ebd041 0x7e6184ee80
	FName GetUserTag();// 0x299f58ebd041 0x7e6184ef60

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8] 0x7e615a1a80
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8] 0x7e615a1b00
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8] 0x7e615a1b80
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x88, Size: 0x50] 0x7e61592740

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50] 0x7e6167ad80
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50] 0x7e6167ae40
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50] 0x7e6167af00
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50] 0x7e6167afc0

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x298, Size: 0x138] 0x7e61905080

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38] 0x7e6157ec00

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*,SequenceTickManagerWidgetData> WeakUserWidgetData;//[Offset: 0x28, Size: 0x50] 0x7e6167d780
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8] 0x7e61942b00

--------------------------------
Class: SequenceTickManagerWidgetData

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e615bcf00
	Widget* Content;//[Offset: 0x8, Size: 0x8] 0x7e615bcf80

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61446080
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1] 0x7e84855380
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1] 0x7e848552e0
	FText AccessibleText;//[Offset: 0x30, Size: 0x18] 0x7e61446180
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10] 0x7e61446200
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18] 0x7e61446280
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10] 0x7e61444280

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10] 0x7e61932800
	Object* Payload;//[Offset: 0x38, Size: 0x8] 0x7e61932880
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8] 0x7e61932900
	enum Pivot;//[Offset: 0x48, Size: 0x1] 0x7e6189baa0
	Vector2D Offset;//[Offset: 0x50, Size: 0x10] 0x7e61932a00
	delegate OnDrop;//[Offset: 0x60, Size: 0x10] 0x7e61932a80
	delegate OnDragCancelled;//[Offset: 0x70, Size: 0x10] 0x7e61932b00
	delegate OnDragged;//[Offset: 0x80, Size: 0x10] 0x7e61932b80
	void Drop(out const PointerEvent PointerEvent);// 0x28be58ebd041 0x7e61842460
	void Dragged(out const PointerEvent PointerEvent);// 0x28bd58ebd041 0x7e61842540
	void DragCancelled(out const PointerEvent PointerEvent);// 0x28bc58ebd041 0x7e61842620

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8] 0x7e61962100

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24] 0x7e61960780
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24] 0x7e61960800
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24] 0x7e61960880
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24] 0x7e61960900
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24] 0x7e61960980
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24] 0x7e61960a00

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1] 0x7e84dd83a0
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8] 0x7e615be200
	Widget* Widget;//[Offset: 0xc, Size: 0x8] 0x7e615be280
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10] 0x7e615be300

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8] 0x7e6191da00
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28] 0x7e6191da80
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8] 0x7e6191db00

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10] 0x7e84dd6be0
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8] 0x7e615b7700

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e615b7780
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x7e615b7800
	Struct* Struct;//[Offset: 0x10, Size: 0x8] 0x7e615b7880

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10] 0x7e61a53bc0
	bool WasControllerKeyJustReleased(Key Key);// 0x2fb058ebd041 0x7e61a84760
	bool WasControllerKeyJustPressed(Key Key);// 0x2faf58ebd041 0x7e61a84840
	void OnInputOwnerEndPlayed(Actor* InOwner, byte EndPlayReason);// 0x2fae58ebd041 0x7e61a84920
	bool IsControllerKeyDown(Key Key);// 0x2fad58ebd041 0x7e61a84a00
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2fac58ebd041 0x7e61a84ae0
	Vector GetControllerVectorKeyState(Key Key);// 0x2fab58ebd041 0x7e61a84bc0
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x2faa58ebd041 0x7e61a84ca0
	float GetControllerKeyTimeDown(Key Key);// 0x2fa958ebd041 0x7e61a84d80
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x2fa858ebd041 0x7e61a84e60
	float GetControllerAnalogKeyState(Key Key);// 0x2fa758ebd041 0x7e61a84f40

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8] 0x7e61646180

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x1a0, Size: 0x10] 0x7e61a5e2a0
	FName[] InvertedAxis;//[Offset: 0x1e0, Size: 0x10] 0x7e61a5ba00
	void SetMouseSensitivity(const float Sensitivity);// 0x345158ebd041 0x7e61b97240
	void SetBind(FName BindName, FString Command);// 0x349258ebd041 0x7e61b97320
	void InvertAxisKey(const Key AxisKey);// 0x344f58ebd041 0x7e61b93a40
	void InvertAxis(const FName AxisName);// 0x344e58ebd041 0x7e61b93b20
	void ClearSmoothing();// 0x344d58ebd041 0x7e61b93c00

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18] 0x7e6165cc80
	FString Command;//[Offset: 0x18, Size: 0x10] 0x7e6165cd00
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e6165cd80
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7e6165ce00
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7e6165ce80
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x7e6165cf00
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x7e6165cf80
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x7e6165d000
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x7e6165d080
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x7e6165d100
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7e6165d180

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8] 0x7e615bd000
	delegate Delegate;//[Offset: 0x8, Size: 0x10] 0x7e615bd080
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1] 0x7e84dd7d60
	FName UserTag;//[Offset: 0x1c, Size: 0x8] 0x7e615bd180

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x278, Size: 0x8] 0x7e61b89680
	SceneComponent* TransformComponent;//[Offset: 0x280, Size: 0x8] 0x7e61b89700
	float DefaultFOV;//[Offset: 0x290, Size: 0x4] 0x7e61b89780
	float DefaultOrthoWidth;//[Offset: 0x298, Size: 0x4] 0x7e61b89800
	float DefaultAspectRatio;//[Offset: 0x2a0, Size: 0x4] 0x7e61b89880
	CameraCacheEntry CameraCache;//[Offset: 0x310, Size: 0x790] 0x7e61b89900
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0xaa0, Size: 0x790] 0x7e61b89980
	TViewTarget ViewTarget;//[Offset: 0x1230, Size: 0x7a0] 0x7e61b89a00
	TViewTarget PendingViewTarget;//[Offset: 0x19d0, Size: 0x7a0] 0x7e61b89a80
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x21a0, Size: 0x790] 0x7e61b89b00
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2930, Size: 0x790] 0x7e61b89b80
	CameraModifier*[] ModifierList;//[Offset: 0x30c0, Size: 0x10] 0x7e61a5baa0
	class CameraModifier[] DefaultModifiers;//[Offset: 0x30d0, Size: 0x10] 0x7e61a5bbe0
	float FreeCamDistance;//[Offset: 0x30e0, Size: 0x4] 0x7e61b89c80
	Vector FreeCamOffset;//[Offset: 0x30e8, Size: 0x18] 0x7e61b89d00
	Vector ViewTargetOffset;//[Offset: 0x3100, Size: 0x18] 0x7e61b89d80
	delegate OnAudioFadeChangeEvent;//[Offset: 0x3118, Size: 0x10] 0x7e61b89e00
	interface classNone[] CameraLensEffects;//[Offset: 0x3140, Size: 0x10] 0x7e61a5bc80
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x3150, Size: 0x8] 0x7e61b89f00
	CameraAnimInst* AnimInstPool;//[Offset: 0x3158, Size: 0x8] 0x7e61b89f80
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x3198, Size: 0x10] 0x7e61a5bd20
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x31b8, Size: 0x10] 0x7e61a5bdc0
	CameraAnimInst*[] FreeAnims;//[Offset: 0x31c8, Size: 0x10] 0x7e61a5be60
	CameraActor* AnimCameraActor;//[Offset: 0x31d8, Size: 0x8] 0x7e61b8a180
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31e0, Size: 0x1] 0x7e61b8a200
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31e0, Size: 0x1] 0x7e61b8a280
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31e0, Size: 0x1] 0x7e61b8a300
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31e0, Size: 0x1] 0x7e61b8a380
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31e1, Size: 0x1] 0x7e61b8a400
	float ViewPitchMin;//[Offset: 0x31e4, Size: 0x4] 0x7e61b8a480
	float ViewPitchMax;//[Offset: 0x31e8, Size: 0x4] 0x7e61b8a500
	float ViewYawMin;//[Offset: 0x31ec, Size: 0x4] 0x7e61b88480
	float ViewYawMax;//[Offset: 0x31f0, Size: 0x4] 0x7e61b88500
	float ViewRollMin;//[Offset: 0x31f4, Size: 0x4] 0x7e61b88580
	float ViewRollMax;//[Offset: 0x31f8, Size: 0x4] 0x7e61b88600
	float ServerUpdateCameraTimeout;//[Offset: 0x3200, Size: 0x4] 0x7e61b88680
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x344c58ebd041 0x7e61b93ce0
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x344b58ebd041 0x7e61b93dc0
	void StopCameraFade();// 0x344a58ebd041 0x7e61b93ea0
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x344958ebd041 0x7e61b93f80
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x344858ebd041 0x7e61b94060
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x344758ebd041 0x7e61b94140
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x344658ebd041 0x7e61b94220
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x344558ebd041 0x7e61b94300
	void StopAllCameraShakes(bool bImmediately);// 0x344458ebd041 0x7e61b943e0
	void StopAllCameraAnims(bool bImmediate);// 0x344358ebd041 0x7e61b944c0
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x344258ebd041 0x7e61b945a0
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x344158ebd041 0x7e61b94680
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x344058ebd041 0x7e61b94760
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x343f58ebd041 0x7e61b94840
	void SetGameCameraCutThisFrame();// 0x343e58ebd041 0x7e61b94920
	void RemoveGenericCameraLensEffect(interface classNone Emitter);// 0x343d58ebd041 0x7e61b94a00
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x343c58ebd041 0x7e61b94ae0
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x343b58ebd041 0x7e61b94bc0
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x343a58ebd041 0x7e61b94ca0
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x343958ebd041 0x7e61b94d80
	void OnPhotographySessionStart();// 0x343858ebd041 0x7e61b94e60
	void OnPhotographySessionEnd();// 0x343758ebd041 0x7e61b94f40
	void OnPhotographyMultiPartCaptureStart();// 0x343658ebd041 0x7e61b95020
	void OnPhotographyMultiPartCaptureEnd();// 0x343558ebd041 0x7e61b95100
	PlayerController* GetOwningPlayerController();// 0x343458ebd041 0x7e61b951e0
	float GetFOVAngle();// 0x343358ebd041 0x7e61b952c0
	Rotator GetCameraRotation();// 0x343258ebd041 0x7e61b953a0
	Vector GetCameraLocation();// 0x343158ebd041 0x7e61b95480
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x343058ebd041 0x7e61b95560
	void ClearCameraLensEffects();// 0x347158ebd041 0x7e61b95640
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x342e58ebd041 0x7e61b91d60
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x342d58ebd041 0x7e61b91e40
	interface classNone AddGenericCameraLensEffect(class Actor LensEffectEmitterClass);// 0x342c58ebd041 0x7e61b91f20
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x342b58ebd041 0x7e61b92000

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e6177e900
	float ShakeScale;//[Offset: 0x2c, Size: 0x4] 0x7e6177e980
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 0x8] 0x7e6177ea00
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 0x8] 0x7e6177ea80
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0x21d958ebd041 0x7e61792fc0
	CameraShakePattern* GetRootShakePattern();// 0x21d858ebd041 0x7e617930a0

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x7e6165b700
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x780] 0x7e6165b780

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61611500
	Rotator Rotation;//[Offset: 0x18, Size: 0x18] 0x7e61611580
	float FOV;//[Offset: 0x30, Size: 0x4] 0x7e61611600
	float DesiredFOV;//[Offset: 0x34, Size: 0x4] 0x7e61611680
	float OrthoWidth;//[Offset: 0x38, Size: 0x4] 0x7e61611700
	float OrthoNearClipPlane;//[Offset: 0x3c, Size: 0x4] 0x7e61611780
	float OrthoFarClipPlane;//[Offset: 0x40, Size: 0x4] 0x7e61611800
	float AspectRatio;//[Offset: 0x44, Size: 0x4] 0x7e61611880
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61611900
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7e61611980
	byte ProjectionMode;//[Offset: 0x49, Size: 0x1] 0x7e61611a00
	float PostProcessBlendWeight;//[Offset: 0x4c, Size: 0x4] 0x7e61611a80
	PostProcessSettings PostProcessSettings;//[Offset: 0x50, Size: 0x6b0] 0x7e61604b00
	Vector2D OffCenterProjectionOffset;//[Offset: 0x700, Size: 0x10] 0x7e61604b80

--------------------------------
Class: PostProcessSettings
	bool bOverride_TemperatureType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61611b00
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61611b80
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61611c00
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e61611c80
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e61611d00
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7e61611d80
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7e61611e00
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7e61611e80
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7e61611f00
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7e61611f80
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7e61612000
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7e61612080
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7e61612100
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7e61610080
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7e61610100
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7e61610180
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x7e61610200
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x7e61610280
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x7e61610300
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x7e61610380
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x7e61610400
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x7e61610480
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x7e61610500
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x7e61610580
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x7e61610600
	bool bOverride_ColorCorrectionHighlightsMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x7e61610680
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x7e61610700
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x7e61610780
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x7e61610800
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x7e61610880
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x7e61610900
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x7e61610980
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7e61610a00
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1] 0x7e61610a80
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1] 0x7e61610b00
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1] 0x7e61610b80
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1] 0x7e61610c00
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1] 0x7e61610c80
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1] 0x7e61610d00
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1] 0x7e61610d80
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1] 0x7e61610e00
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1] 0x7e61610e80
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1] 0x7e61610f00
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1] 0x7e61610f80
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1] 0x7e61611000
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1] 0x7e61611080
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1] 0x7e6160f800
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1] 0x7e6160f880
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1] 0x7e6160f900
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1] 0x7e6160f980
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1] 0x7e6160fa00
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1] 0x7e6160fa80
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1] 0x7e6160fb00
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1] 0x7e6160fb80
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1] 0x7e6160fc00
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1] 0x7e6160fc80
	bool bOverride_BloomConvolutionScatterDispersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1] 0x7e6160fd00
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1] 0x7e6160fd80
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1] 0x7e6160fe00
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1] 0x7e6160fe80
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1] 0x7e6160ff00
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1] 0x7e6160ff80
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1] 0x7e6160e780
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1] 0x7e6160e800
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e6160e880
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7e6160e900
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7e6160e980
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7e6160ea00
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x7e6160ea80
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1] 0x7e6160eb00
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1] 0x7e6160eb80
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1] 0x7e6160ec00
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1] 0x7e6160ec80
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1] 0x7e6160ed00
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1] 0x7e6160ed80
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1] 0x7e6160ee00
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1] 0x7e6160ee80
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1] 0x7e6160ef00
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1] 0x7e6160ef80
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1] 0x7e6160f000
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7e6160f080
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x7e6160f100
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x7e6160f180
	bool bOverride_LocalExposureContrastScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x7e6160f200
	bool bOverride_LocalExposureDetailStrength;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1] 0x7e6160f280
	bool bOverride_LocalExposureBlurredLuminanceBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1] 0x7e6160f300
	bool bOverride_LocalExposureBlurredLuminanceKernelSizePercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1] 0x7e6160f380
	bool bOverride_LocalExposureMiddleGreyBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1] 0x7e6160f400
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1] 0x7e6160f480
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1] 0x7e6160f500
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1] 0x7e6160f580
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1] 0x7e6160f600
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1] 0x7e6160f680
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1] 0x7e6160f700
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1] 0x7e6160f780
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1] 0x7e6160d700
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7e6160d780
	bool bOverride_FilmGrainIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7e6160d800
	bool bOverride_FilmGrainIntensityShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7e6160d880
	bool bOverride_FilmGrainIntensityMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7e6160d900
	bool bOverride_FilmGrainIntensityHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x7e6160d980
	bool bOverride_FilmGrainShadowsMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1] 0x7e6160da00
	bool bOverride_FilmGrainHighlightsMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1] 0x7e6160da80
	bool bOverride_FilmGrainHighlightsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1] 0x7e6160db00
	bool bOverride_FilmGrainTexelSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1] 0x7e6160db80
	bool bOverride_FilmGrainTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1] 0x7e6160dc00
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1] 0x7e6160dc80
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1] 0x7e6160dd00
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1] 0x7e6160dd80
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1] 0x7e6160de00
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1] 0x7e6160de80
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1] 0x7e6160df00
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1] 0x7e6160df80
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1] 0x7e6160e000
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1] 0x7e6160e080
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1] 0x7e6160e100
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1] 0x7e6160e180
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1] 0x7e6160e200
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1] 0x7e6160e280
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1] 0x7e6160e300
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1] 0x7e6160e380
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1] 0x7e6160e400
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1] 0x7e6160e480
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1] 0x7e6160e500
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1] 0x7e6160e580
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1] 0x7e6160e600
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1] 0x7e6160e680
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1] 0x7e6160e700
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7e6160c680
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7e6160c700
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7e6160c780
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7e6160c800
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x7e6160c880
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x7e6160c900
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x7e6160c980
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x7e6160ca00
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1] 0x7e6160ca80
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1] 0x7e6160cb00
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1] 0x7e6160cb80
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1] 0x7e6160cc00
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1] 0x7e6160cc80
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1] 0x7e6160cd00
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1] 0x7e6160cd80
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1] 0x7e6160ce00
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1] 0x7e6160ce80
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1] 0x7e6160cf00
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1] 0x7e6160cf80
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1] 0x7e6160d000
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1] 0x7e6160d080
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1] 0x7e6160d100
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1] 0x7e6160d180
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1] 0x7e6160d200
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1] 0x7e6160d280
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1] 0x7e6160d300
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1] 0x7e6160d380
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1] 0x7e6160d400
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1] 0x7e6160d480
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1] 0x7e6160d500
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1] 0x7e6160d580
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1] 0x7e6160d600
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7e6160d680
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x7e6160b600
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x7e6160b680
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x7e6160b700
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x7e6160b780
	bool bOverride_ReflectionMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1] 0x7e6160b800
	bool bOverride_LumenReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1] 0x7e6160b880
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1] 0x7e6160b900
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1] 0x7e6160b980
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1] 0x7e6160ba00
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1] 0x7e6160ba80
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1] 0x7e6160bb00
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1] 0x7e6160bb80
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1] 0x7e6160bc00
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1] 0x7e6160bc80
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1] 0x7e6160bd00
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1] 0x7e6160bd80
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1] 0x7e6160be00
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1] 0x7e6160be80
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1] 0x7e6160bf00
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1] 0x7e6160bf80
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1] 0x7e6160c000
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1] 0x7e6160c080
	bool bOverride_DynamicGlobalIlluminationMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1] 0x7e6160c100
	bool bOverride_LumenSceneLightingQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1] 0x7e6160c180
	bool bOverride_LumenSceneDetail;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1] 0x7e6160c200
	bool bOverride_LumenSceneViewDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1] 0x7e6160c280
	bool bOverride_LumenSceneLightingUpdateSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1] 0x7e6160c300
	bool bOverride_LumenFinalGatherQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1] 0x7e6160c380
	bool bOverride_LumenFinalGatherLightingUpdateSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1] 0x7e6160c400
	bool bOverride_LumenMaxTraceDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1] 0x7e6160c480
	bool bOverride_LumenRayLightingMode;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1] 0x7e6160c500
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7e6160c580
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x7e6160c600
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x7e6160a580
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x7e6160a600
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1] 0x7e6160a680
	bool bOverride_PathTracingFilterWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1] 0x7e6160a700
	bool bOverride_PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1] 0x7e6160a780
	bool bOverride_PathTracingMaxPathExposure;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1] 0x7e6160a800
	bool bOverride_PathTracingEnableReferenceDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x7e6160a880
	bool bOverride_PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x7e6160a900
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x7e6160a980
	byte BloomMethod;//[Offset: 0x1a, Size: 0x1] 0x7e6160aa00
	byte AutoExposureMethod;//[Offset: 0x1b, Size: 0x1] 0x7e6160aa80
	byte TemperatureType;//[Offset: 0x1c, Size: 0x1] 0x7e6160ab00
	float WhiteTemp;//[Offset: 0x20, Size: 0x4] 0x7e6160ab80
	float WhiteTint;//[Offset: 0x24, Size: 0x4] 0x7e6160ac00
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x20] 0x7e6160ac80
	Vector4 ColorContrast;//[Offset: 0x50, Size: 0x20] 0x7e6160ad00
	Vector4 ColorGamma;//[Offset: 0x70, Size: 0x20] 0x7e6160ad80
	Vector4 ColorGain;//[Offset: 0x90, Size: 0x20] 0x7e6160ae00
	Vector4 ColorOffset;//[Offset: 0xb0, Size: 0x20] 0x7e6160ae80
	Vector4 ColorSaturationShadows;//[Offset: 0xd0, Size: 0x20] 0x7e6160af00
	Vector4 ColorContrastShadows;//[Offset: 0xf0, Size: 0x20] 0x7e6160af80
	Vector4 ColorGammaShadows;//[Offset: 0x110, Size: 0x20] 0x7e6160b000
	Vector4 ColorGainShadows;//[Offset: 0x130, Size: 0x20] 0x7e6160b080
	Vector4 ColorOffsetShadows;//[Offset: 0x150, Size: 0x20] 0x7e6160b100
	Vector4 ColorSaturationMidtones;//[Offset: 0x170, Size: 0x20] 0x7e6160b180
	Vector4 ColorContrastMidtones;//[Offset: 0x190, Size: 0x20] 0x7e6160b200
	Vector4 ColorGammaMidtones;//[Offset: 0x1b0, Size: 0x20] 0x7e6160b280
	Vector4 ColorGainMidtones;//[Offset: 0x1d0, Size: 0x20] 0x7e6160b300
	Vector4 ColorOffsetMidtones;//[Offset: 0x1f0, Size: 0x20] 0x7e6160b380
	Vector4 ColorSaturationHighlights;//[Offset: 0x210, Size: 0x20] 0x7e6160b400
	Vector4 ColorContrastHighlights;//[Offset: 0x230, Size: 0x20] 0x7e6160b480
	Vector4 ColorGammaHighlights;//[Offset: 0x250, Size: 0x20] 0x7e6160b500
	Vector4 ColorGainHighlights;//[Offset: 0x270, Size: 0x20] 0x7e6160b580
	Vector4 ColorOffsetHighlights;//[Offset: 0x290, Size: 0x20] 0x7e61609500
	float ColorCorrectionHighlightsMin;//[Offset: 0x2b0, Size: 0x4] 0x7e61609580
	float ColorCorrectionHighlightsMax;//[Offset: 0x2b4, Size: 0x4] 0x7e61609600
	float ColorCorrectionShadowsMax;//[Offset: 0x2b8, Size: 0x4] 0x7e61609680
	float BlueCorrection;//[Offset: 0x2bc, Size: 0x4] 0x7e61609700
	float ExpandGamut;//[Offset: 0x2c0, Size: 0x4] 0x7e61609780
	float ToneCurveAmount;//[Offset: 0x2c4, Size: 0x4] 0x7e61609800
	float FilmSlope;//[Offset: 0x2c8, Size: 0x4] 0x7e61609880
	float FilmToe;//[Offset: 0x2cc, Size: 0x4] 0x7e61609900
	float FilmShoulder;//[Offset: 0x2d0, Size: 0x4] 0x7e61609980
	float FilmBlackClip;//[Offset: 0x2d4, Size: 0x4] 0x7e61609a00
	float FilmWhiteClip;//[Offset: 0x2d8, Size: 0x4] 0x7e61609a80
	LinearColor SceneColorTint;//[Offset: 0x2dc, Size: 0x10] 0x7e61609b00
	float SceneFringeIntensity;//[Offset: 0x2ec, Size: 0x4] 0x7e61609b80
	float ChromaticAberrationStartOffset;//[Offset: 0x2f0, Size: 0x4] 0x7e61609c00
	float BloomIntensity;//[Offset: 0x2f4, Size: 0x4] 0x7e61609c80
	float BloomThreshold;//[Offset: 0x2f8, Size: 0x4] 0x7e61609d00
	float BloomSizeScale;//[Offset: 0x2fc, Size: 0x4] 0x7e61609d80
	float Bloom1Size;//[Offset: 0x300, Size: 0x4] 0x7e61609e00
	float Bloom2Size;//[Offset: 0x304, Size: 0x4] 0x7e61609e80
	float Bloom3Size;//[Offset: 0x308, Size: 0x4] 0x7e61609f00
	float Bloom4Size;//[Offset: 0x30c, Size: 0x4] 0x7e61609f80
	float Bloom5Size;//[Offset: 0x310, Size: 0x4] 0x7e6160a000
	float Bloom6Size;//[Offset: 0x314, Size: 0x4] 0x7e6160a080
	LinearColor Bloom1Tint;//[Offset: 0x318, Size: 0x10] 0x7e6160a100
	LinearColor Bloom2Tint;//[Offset: 0x328, Size: 0x10] 0x7e6160a180
	LinearColor Bloom3Tint;//[Offset: 0x338, Size: 0x10] 0x7e6160a200
	LinearColor Bloom4Tint;//[Offset: 0x348, Size: 0x10] 0x7e6160a280
	LinearColor Bloom5Tint;//[Offset: 0x358, Size: 0x10] 0x7e6160a300
	LinearColor Bloom6Tint;//[Offset: 0x368, Size: 0x10] 0x7e6160a380
	float BloomConvolutionScatterDispersion;//[Offset: 0x378, Size: 0x4] 0x7e6160a400
	float BloomConvolutionSize;//[Offset: 0x37c, Size: 0x4] 0x7e6160a480
	Texture2D* BloomConvolutionTexture;//[Offset: 0x380, Size: 0x8] 0x7e6160a500
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x388, Size: 0x10] 0x7e61608480
	float BloomConvolutionPreFilterMin;//[Offset: 0x398, Size: 0x4] 0x7e61608500
	float BloomConvolutionPreFilterMax;//[Offset: 0x39c, Size: 0x4] 0x7e61608580
	float BloomConvolutionPreFilterMult;//[Offset: 0x3a0, Size: 0x4] 0x7e61608600
	float BloomConvolutionBufferScale;//[Offset: 0x3a4, Size: 0x4] 0x7e61608680
	Texture* BloomDirtMask;//[Offset: 0x3a8, Size: 0x8] 0x7e61608700
	float BloomDirtMaskIntensity;//[Offset: 0x3b0, Size: 0x4] 0x7e61608780
	LinearColor BloomDirtMaskTint;//[Offset: 0x3b4, Size: 0x10] 0x7e61608800
	byte DynamicGlobalIlluminationMethod;//[Offset: 0x3c4, Size: 0x1] 0x7e61608880
	LinearColor IndirectLightingColor;//[Offset: 0x3c8, Size: 0x10] 0x7e61608900
	float IndirectLightingIntensity;//[Offset: 0x3d8, Size: 0x4] 0x7e61608980
	float LumenSceneLightingQuality;//[Offset: 0x3dc, Size: 0x4] 0x7e61608a00
	float LumenSceneDetail;//[Offset: 0x3e0, Size: 0x4] 0x7e61608a80
	float LumenSceneViewDistance;//[Offset: 0x3e4, Size: 0x4] 0x7e61608b00
	float LumenSceneLightingUpdateSpeed;//[Offset: 0x3e8, Size: 0x4] 0x7e61608b80
	float LumenFinalGatherQuality;//[Offset: 0x3ec, Size: 0x4] 0x7e61608c00
	float LumenFinalGatherLightingUpdateSpeed;//[Offset: 0x3f0, Size: 0x4] 0x7e61608c80
	float LumenMaxTraceDistance;//[Offset: 0x3f4, Size: 0x4] 0x7e61608d00
	enum RayTracingGIType;//[Offset: 0x3f8, Size: 0x1] 0x7e84e58580
	int RayTracingGIMaxBounces;//[Offset: 0x3fc, Size: 0x4] 0x7e61608e00
	int RayTracingGISamplesPerPixel;//[Offset: 0x400, Size: 0x4] 0x7e61608e80
	byte ReflectionMethod;//[Offset: 0x404, Size: 0x1] 0x7e61608f00
	enum ReflectionsType;//[Offset: 0x405, Size: 0x1] 0x7e84e58620
	float LumenReflectionQuality;//[Offset: 0x408, Size: 0x4] 0x7e61609000
	enum LumenRayLightingMode;//[Offset: 0x40c, Size: 0x1] 0x7e84e586c0
	float ScreenSpaceReflectionIntensity;//[Offset: 0x410, Size: 0x4] 0x7e61609100
	float ScreenSpaceReflectionQuality;//[Offset: 0x414, Size: 0x4] 0x7e61609180
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x418, Size: 0x4] 0x7e61609200
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x41c, Size: 0x4] 0x7e61609280
	int RayTracingReflectionsMaxBounces;//[Offset: 0x420, Size: 0x4] 0x7e61609300
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x424, Size: 0x4] 0x7e61609380
	enum RayTracingReflectionsShadows;//[Offset: 0x428, Size: 0x1] 0x7e84e58760
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x429, Size: 0x1] 0x7e61609480
	LinearColor AmbientCubemapTint;//[Offset: 0x42c, Size: 0x10] 0x7e61607400
	float AmbientCubemapIntensity;//[Offset: 0x43c, Size: 0x4] 0x7e61607480
	TextureCube* AmbientCubemap;//[Offset: 0x440, Size: 0x8] 0x7e61607500
	float CameraShutterSpeed;//[Offset: 0x448, Size: 0x4] 0x7e61607580
	float CameraISO;//[Offset: 0x44c, Size: 0x4] 0x7e61607600
	float DepthOfFieldFstop;//[Offset: 0x450, Size: 0x4] 0x7e61607680
	float DepthOfFieldMinFstop;//[Offset: 0x454, Size: 0x4] 0x7e61607700
	int DepthOfFieldBladeCount;//[Offset: 0x458, Size: 0x4] 0x7e61607780
	float AutoExposureBias;//[Offset: 0x45c, Size: 0x4] 0x7e61607800
	float AutoExposureBiasBackup;//[Offset: 0x460, Size: 0x4] 0x7e61607880
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 0x1] 0x7e61607900
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x464, Size: 0x1] 0x7e61607980
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x468, Size: 0x8] 0x7e61607a00
	Texture* AutoExposureMeterMask;//[Offset: 0x470, Size: 0x8] 0x7e61607a80
	float AutoExposureLowPercent;//[Offset: 0x478, Size: 0x4] 0x7e61607b00
	float AutoExposureHighPercent;//[Offset: 0x47c, Size: 0x4] 0x7e61607b80
	float AutoExposureMinBrightness;//[Offset: 0x480, Size: 0x4] 0x7e61607c00
	float AutoExposureMaxBrightness;//[Offset: 0x484, Size: 0x4] 0x7e61607c80
	float AutoExposureSpeedUp;//[Offset: 0x488, Size: 0x4] 0x7e61607d00
	float AutoExposureSpeedDown;//[Offset: 0x48c, Size: 0x4] 0x7e61607d80
	float HistogramLogMin;//[Offset: 0x490, Size: 0x4] 0x7e61607e00
	float HistogramLogMax;//[Offset: 0x494, Size: 0x4] 0x7e61607e80
	float AutoExposureCalibrationConstant;//[Offset: 0x498, Size: 0x4] 0x7e61607f00
	float LocalExposureContrastScale;//[Offset: 0x49c, Size: 0x4] 0x7e61607f80
	float LocalExposureDetailStrength;//[Offset: 0x4a0, Size: 0x4] 0x7e61608000
	float LocalExposureBlurredLuminanceBlend;//[Offset: 0x4a4, Size: 0x4] 0x7e61608080
	float LocalExposureBlurredLuminanceKernelSizePercent;//[Offset: 0x4a8, Size: 0x4] 0x7e61608100
	float LocalExposureMiddleGreyBias;//[Offset: 0x4ac, Size: 0x4] 0x7e61608180
	float LensFlareIntensity;//[Offset: 0x4b0, Size: 0x4] 0x7e61608200
	LinearColor LensFlareTint;//[Offset: 0x4b4, Size: 0x10] 0x7e61608280
	float LensFlareBokehSize;//[Offset: 0x4c4, Size: 0x4] 0x7e61608300
	float LensFlareThreshold;//[Offset: 0x4c8, Size: 0x4] 0x7e61608380
	Texture* LensFlareBokehShape;//[Offset: 0x4d0, Size: 0x8] 0x7e61608400
	LinearColor LensFlareTints;//[Offset: 0x4d8, Size: 0x10] 0x7e61606380
	float VignetteIntensity;//[Offset: 0x558, Size: 0x4] 0x7e61606400
	float GrainJitter;//[Offset: 0x55c, Size: 0x4] 0x7e61606480
	float GrainIntensity;//[Offset: 0x560, Size: 0x4] 0x7e61606500
	float FilmGrainIntensity;//[Offset: 0x564, Size: 0x4] 0x7e61606580
	float FilmGrainIntensityShadows;//[Offset: 0x568, Size: 0x4] 0x7e61606600
	float FilmGrainIntensityMidtones;//[Offset: 0x56c, Size: 0x4] 0x7e61606680
	float FilmGrainIntensityHighlights;//[Offset: 0x570, Size: 0x4] 0x7e61606700
	float FilmGrainShadowsMax;//[Offset: 0x574, Size: 0x4] 0x7e61606780
	float FilmGrainHighlightsMin;//[Offset: 0x578, Size: 0x4] 0x7e61606800
	float FilmGrainHighlightsMax;//[Offset: 0x57c, Size: 0x4] 0x7e61606880
	float FilmGrainTexelSize;//[Offset: 0x580, Size: 0x4] 0x7e61606900
	Texture2D* FilmGrainTexture;//[Offset: 0x588, Size: 0x8] 0x7e61606980
	float AmbientOcclusionIntensity;//[Offset: 0x590, Size: 0x4] 0x7e61606a00
	float AmbientOcclusionStaticFraction;//[Offset: 0x594, Size: 0x4] 0x7e61606a80
	float AmbientOcclusionRadius;//[Offset: 0x598, Size: 0x4] 0x7e61606b00
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59c, Size: 0x1] 0x7e61606b80
	float AmbientOcclusionFadeDistance;//[Offset: 0x5a0, Size: 0x4] 0x7e61606c00
	float AmbientOcclusionFadeRadius;//[Offset: 0x5a4, Size: 0x4] 0x7e61606c80
	float AmbientOcclusionDistance;//[Offset: 0x5a8, Size: 0x4] 0x7e61606d00
	float AmbientOcclusionPower;//[Offset: 0x5ac, Size: 0x4] 0x7e61606d80
	float AmbientOcclusionBias;//[Offset: 0x5b0, Size: 0x4] 0x7e61606e00
	float AmbientOcclusionQuality;//[Offset: 0x5b4, Size: 0x4] 0x7e61606e80
	float AmbientOcclusionMipBlend;//[Offset: 0x5b8, Size: 0x4] 0x7e61606f00
	float AmbientOcclusionMipScale;//[Offset: 0x5bc, Size: 0x4] 0x7e61606f80
	float AmbientOcclusionMipThreshold;//[Offset: 0x5c0, Size: 0x4] 0x7e61607000
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x5c4, Size: 0x4] 0x7e61607080
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 0x1] 0x7e61607100
	int RayTracingAOSamplesPerPixel;//[Offset: 0x5cc, Size: 0x4] 0x7e61607180
	float RayTracingAOIntensity;//[Offset: 0x5d0, Size: 0x4] 0x7e61607200
	float RayTracingAORadius;//[Offset: 0x5d4, Size: 0x4] 0x7e61607280
	float ColorGradingIntensity;//[Offset: 0x5d8, Size: 0x4] 0x7e61607300
	Texture* ColorGradingLUT;//[Offset: 0x5e0, Size: 0x8] 0x7e61607380
	float DepthOfFieldSensorWidth;//[Offset: 0x5e8, Size: 0x4] 0x7e61605300
	float DepthOfFieldFocalDistance;//[Offset: 0x5ec, Size: 0x4] 0x7e61605380
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x5f0, Size: 0x4] 0x7e61605400
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x5f4, Size: 0x4] 0x7e61605480
	float DepthOfFieldFocalRegion;//[Offset: 0x5f8, Size: 0x4] 0x7e61605500
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x5fc, Size: 0x4] 0x7e61605580
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x600, Size: 0x4] 0x7e61605600
	float DepthOfFieldScale;//[Offset: 0x604, Size: 0x4] 0x7e61605680
	float DepthOfFieldNearBlurSize;//[Offset: 0x608, Size: 0x4] 0x7e61605700
	float DepthOfFieldFarBlurSize;//[Offset: 0x60c, Size: 0x4] 0x7e61605780
	float DepthOfFieldOcclusion;//[Offset: 0x610, Size: 0x4] 0x7e61605800
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x614, Size: 0x4] 0x7e61605880
	float DepthOfFieldVignetteSize;//[Offset: 0x618, Size: 0x4] 0x7e61605900
	float MotionBlurAmount;//[Offset: 0x61c, Size: 0x4] 0x7e61605980
	float MotionBlurMax;//[Offset: 0x620, Size: 0x4] 0x7e61605a00
	int MotionBlurTargetFPS;//[Offset: 0x624, Size: 0x4] 0x7e61605a80
	float MotionBlurPerObjectSize;//[Offset: 0x628, Size: 0x4] 0x7e61605b00
	float LPVIntensity;//[Offset: 0x62c, Size: 0x4] 0x7e61605b80
	float LPVVplInjectionBias;//[Offset: 0x630, Size: 0x4] 0x7e61605c00
	float LPVSize;//[Offset: 0x634, Size: 0x4] 0x7e61605c80
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x638, Size: 0x4] 0x7e61605d00
	float LPVSecondaryBounceIntensity;//[Offset: 0x63c, Size: 0x4] 0x7e61605d80
	float LPVGeometryVolumeBias;//[Offset: 0x640, Size: 0x4] 0x7e61605e00
	float LPVEmissiveInjectionIntensity;//[Offset: 0x644, Size: 0x4] 0x7e61605e80
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x648, Size: 0x4] 0x7e61605f00
	float LPVDirectionalOcclusionRadius;//[Offset: 0x64c, Size: 0x4] 0x7e61605f80
	float LPVDiffuseOcclusionExponent;//[Offset: 0x650, Size: 0x4] 0x7e61606000
	float LPVSpecularOcclusionExponent;//[Offset: 0x654, Size: 0x4] 0x7e61606080
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x658, Size: 0x4] 0x7e61606100
	float LPVSpecularOcclusionIntensity;//[Offset: 0x65c, Size: 0x4] 0x7e61606180
	enum TranslucencyType;//[Offset: 0x660, Size: 0x1] 0x7e84e58800
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x664, Size: 0x4] 0x7e61606280
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x668, Size: 0x4] 0x7e61606300
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x66c, Size: 0x4] 0x7e61604280
	enum RayTracingTranslucencyShadows;//[Offset: 0x670, Size: 0x1] 0x7e84e588a0
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x671, Size: 0x1] 0x7e61604380
	int PathTracingMaxBounces;//[Offset: 0x674, Size: 0x4] 0x7e61604400
	int PathTracingSamplesPerPixel;//[Offset: 0x678, Size: 0x4] 0x7e61604480
	float PathTracingFilterWidth;//[Offset: 0x67c, Size: 0x4] 0x7e61604500
	bool PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x680, Size: 0x1] 0x7e61604580
	float PathTracingMaxPathExposure;//[Offset: 0x684, Size: 0x4] 0x7e61604600
	bool PathTracingEnableReferenceDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x688, Size: 0x1] 0x7e61604680
	bool PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x688, Size: 0x1] 0x7e61604700
	float LPVFadeRange;//[Offset: 0x68c, Size: 0x4] 0x7e61604780
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x690, Size: 0x4] 0x7e61604800
	float ScreenPercentage;//[Offset: 0x694, Size: 0x4] 0x7e61604880
	WeightedBlendables WeightedBlendables;//[Offset: 0x698, Size: 0x10] 0x7e61604a80

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10] 0x7e84e58940

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4] 0x7e61604900
	Object* Object;//[Offset: 0x8, Size: 0x8] 0x7e61604980

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x7e6165d680
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x780] 0x7e6165b600
	PlayerState* PlayerState;//[Offset: 0x790, Size: 0x8] 0x7e6165b680

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e6177f600
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7e6177f680
	byte Priority;//[Offset: 0x29, Size: 0x1] 0x7e6177f700
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8] 0x7e6177f780
	float AlphaInTime;//[Offset: 0x38, Size: 0x4] 0x7e6177d700
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4] 0x7e6177d780
	float Alpha;//[Offset: 0x40, Size: 0x4] 0x7e6177d800
	void OnCameraOwnerDestroyed(Actor* InOwner);// 0x21cf58ebd041 0x7e61793880
	bool IsDisabled();// 0x221058ebd041 0x7e61793960
	Actor* GetViewTarget();// 0x21cd58ebd041 0x7e61790080
	void EnableModifier();// 0x21cc58ebd041 0x7e61790160
	void DisableModifier(bool bImmediate);// 0x21cb58ebd041 0x7e61790240
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x21ca58ebd041 0x7e61790320
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x21c958ebd041 0x7e61790400

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10] 0x7e6197c900
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50] 0x7e6167c700
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4] 0x7e61a13780

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8] 0x7e61604d00
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8] 0x7e61604d80
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e61604e00

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x2b0, Size: 0x1] 0x7e6197c5e0
	float InnerAttenuationRadius;//[Offset: 0x2b4, Size: 0x4] 0x7e61a15200
	float OuterAttenuationRadius;//[Offset: 0x2b8, Size: 0x4] 0x7e61a15280
	class CameraShakeBase* CameraShake;//[Offset: 0x2c0, Size: 0x8] 0x7e6197c680
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7e61a13200
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x2d3f58ebd041 0x7e61a03180
	void StopAllCameraShakes(bool bImmediately);// 0x2d3e58ebd041 0x7e61a03260
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x2d3d58ebd041 0x7e61a03340
	void Start();// 0x2d3c58ebd041 0x7e61a03420
	float GetAttenuationFactor(out const Vector Location);// 0x2d3b58ebd041 0x7e61a03500

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10] 0x7e84e589e0

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8] 0x7e61a13c80
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8] 0x7e61a13d00
	float PlayRate;//[Offset: 0x50, Size: 0x4] 0x7e61a13d80
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8] 0x7e61a13e00
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8] 0x7e61a13e80
	enum PlaySpace;//[Offset: 0x78, Size: 0x1] 0x7e6197ce00
	void Stop(bool bImmediate);// 0x2d3458ebd041 0x7e61a00160
	void SetScale(float NewDuration);// 0x2d3358ebd041 0x7e61a00240
	void SetDuration(float NewDuration);// 0x2d3258ebd041 0x7e61a00320

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8] 0x7e61a14100
	float AnimLength;//[Offset: 0x30, Size: 0x4] 0x7e61a14180
	Box BoundingBox;//[Offset: 0x38, Size: 0x38] 0x7e61a14200
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7e61a12180
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x7e61a12200
	float BaseFOV;//[Offset: 0x74, Size: 0x4] 0x7e61a12280
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x80, Size: 0x6b0] 0x7e61a12300
	float BasePostProcessBlendWeight;//[Offset: 0x730, Size: 0x4] 0x7e61a12380

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10] 0x7e61a52e00
	FName GroupName;//[Offset: 0x40, Size: 0x8] 0x7e61a7f080
	Color GroupColor;//[Offset: 0x48, Size: 0x4] 0x7e61a7f100
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7e61a7f180
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1] 0x7e61a7f200
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1] 0x7e61a7f280
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1] 0x7e61a7f300
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1] 0x7e61a7f380

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10] 0x7e61a52c20
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8] 0x7e61a52cc0
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1] 0x7e61a7e880
	FString TrackTitle;//[Offset: 0x58, Size: 0x10] 0x7e61a7e900
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61a7e980
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7e61a7ea00
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x7e61a7ea80
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x7e61a7eb00
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x7e61a7eb80
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x7e61a7ec00
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x7e61a7ec80
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x7e61a7ed00

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8] 0x7e61a7ed80
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8] 0x7e61a7ee00
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10] 0x7e61a52d60

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18] 0x7e61a91600
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18] 0x7e61a91680
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10] 0x7e61a91700
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8] 0x7e61a91780
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4] 0x7e61a91800
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4] 0x7e61a91880
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e61a91900
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x7e61a91980
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x7e61a91a00
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x7e61a91a80
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x7e61a91b00
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x7e61a91b80
	byte RotMode;//[Offset: 0xc1, Size: 0x1] 0x7e61a91c00

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10] 0x7e841b6fa0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e8412fa00
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7e841e1080

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7e841e0a80
	Vector OutVal;//[Offset: 0x8, Size: 0x18] 0x7e841e0a00
	Vector ArriveTangent;//[Offset: 0x20, Size: 0x18] 0x7e841e0980
	Vector LeaveTangent;//[Offset: 0x38, Size: 0x18] 0x7e841e0900
	byte InterpMode;//[Offset: 0x50, Size: 0x1] 0x7e841e0880

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10] 0x7e84e5aec0

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x7e61647e80
	float Time;//[Offset: 0x8, Size: 0x4] 0x7e61647f00

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0x18] 0x7e61a90400
	Rotator ResetRotation;//[Offset: 0x40, Size: 0x18] 0x7e61a90480

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x278, Size: 0x1] 0x7e61964b00
	CameraComponent* CameraComponent;//[Offset: 0x280, Size: 0x8] 0x7e61964b80
	SceneComponent* SceneComponent;//[Offset: 0x288, Size: 0x8] 0x7e61964c00
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1] 0x7e61964c80
	float AspectRatio;//[Offset: 0x29c, Size: 0x4] 0x7e61964d00
	float FOVAngle;//[Offset: 0x2a0, Size: 0x4] 0x7e61964d80
	float PostProcessBlendWeight;//[Offset: 0x2a4, Size: 0x4] 0x7e61964e00
	PostProcessSettings PostProcessSettings;//[Offset: 0x2b0, Size: 0x6b0] 0x7e61964e80
	int GetAutoActivatePlayerIndex();// 0x2a9158ebd041 0x7e6195e5c0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2b0, Size: 0x4] 0x7e61965e00
	float OrthoWidth;//[Offset: 0x2b4, Size: 0x4] 0x7e61965e80
	float OrthoNearClipPlane;//[Offset: 0x2b8, Size: 0x4] 0x7e61965f00
	float OrthoFarClipPlane;//[Offset: 0x2bc, Size: 0x4] 0x7e61965f80
	float AspectRatio;//[Offset: 0x2c0, Size: 0x4] 0x7e61966000
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1] 0x7e61966080
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1] 0x7e61966100
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c4, Size: 0x1] 0x7e61966180
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c4, Size: 0x1] 0x7e61966200
	byte ProjectionMode;//[Offset: 0x2c5, Size: 0x1] 0x7e61966280
	float PostProcessBlendWeight;//[Offset: 0x330, Size: 0x4] 0x7e61966300
	PostProcessSettings PostProcessSettings;//[Offset: 0x360, Size: 0x6b0] 0x7e61964280
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x2a9f58ebd041 0x7e6195d980
	void SetProjectionMode(byte InProjectionMode);// 0x2a9e58ebd041 0x7e6195da60
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x2a9d58ebd041 0x7e6195db40
	void SetOrthoWidth(float InOrthoWidth);// 0x2a9c58ebd041 0x7e6195dc20
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x2a9b58ebd041 0x7e6195dd00
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x2a9a58ebd041 0x7e6195dde0
	void SetFieldOfView(float InFieldOfView);// 0x2a9958ebd041 0x7e6195dec0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x2a9858ebd041 0x7e6195dfa0
	void SetAspectRatio(float InAspectRatio);// 0x2a9758ebd041 0x7e6195e080
	void RemoveBlendable(interface classNone InBlendableObject);// 0x2a9658ebd041 0x7e6195e160
	void OnCameraMeshHiddenChanged();// 0x2a9558ebd041 0x7e6195e240
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x2a9458ebd041 0x7e6195e320
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x2a9358ebd041 0x7e6195e400

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x2d0, Size: 0x8] 0x7e61a44380
	PlayerCameraManager* BaseCamera;//[Offset: 0x2d8, Size: 0x8] 0x7e61a44400
	Transform RelativeTransform;//[Offset: 0x2e0, Size: 0x60] 0x7e61a44480
	float BaseFOV;//[Offset: 0x340, Size: 0x4] 0x7e61a44500
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1] 0x7e61a44580
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1] 0x7e61a44600
	class Actor[] EmittersToTreatAsSame;//[Offset: 0x348, Size: 0x10] 0x7e6197ec00
	float DistFromCamera;//[Offset: 0x358, Size: 0x4] 0x7e61a44680

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x278, Size: 0x8] 0x7e61a44700
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x7e61a44780
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1] 0x7e61a44800
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1] 0x7e61a44880
	delegate OnParticleSpawn;//[Offset: 0x288, Size: 0x10] 0x7e61a44900
	delegate OnParticleBurst;//[Offset: 0x298, Size: 0x10] 0x7e61a44980
	delegate OnParticleDeath;//[Offset: 0x2a8, Size: 0x10] 0x7e61a44a00
	delegate OnParticleCollide;//[Offset: 0x2b8, Size: 0x10] 0x7e61a44a80
	void ToggleActive();// 0x2e8858ebd041 0x7e61a34ae0
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x2e8758ebd041 0x7e61a34bc0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x2e8658ebd041 0x7e61a34ca0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2e8558ebd041 0x7e61a34d80
	void SetFloatParameter(FName ParameterName, float Param);// 0x2e8458ebd041 0x7e61a34e60
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x2e8358ebd041 0x7e61a34f40
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x2e8258ebd041 0x7e61a35020
	void OnRep_bCurrentlyActive();// 0x2e8158ebd041 0x7e61a35100
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x2e8058ebd041 0x7e61a351e0
	bool IsActive();// 0x2e7f58ebd041 0x7e61a352c0
	void Deactivate();// 0x2e7e58ebd041 0x7e61a353a0
	void Activate();// 0x2e7d58ebd041 0x7e61a35480

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4] 0x7e6165d480
	byte BlendFunction;//[Offset: 0x4, Size: 0x1] 0x7e6165d500
	float BlendExp;//[Offset: 0x8, Size: 0x4] 0x7e6165d580
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7e6165d600

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x7e61684980
	FName Filename;//[Offset: 0x8, Size: 0x8] 0x7e61684a00
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7e61684a80

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4] 0x7e84deb200
	int UUID;//[Offset: 0x4, Size: 0x4] 0x7e84deb180
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8] 0x7e84deb100
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8] 0x7e84deb080

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10] 0x7e61a50b00
	float Duration;//[Offset: 0x38, Size: 0x4] 0x7e61a4ed80

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61642200
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61642280
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61642300
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e61642380
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88] 0x7e61642400

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8] 0x7e61a90a00

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8] 0x7e61a1a100
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8] 0x7e6197c0e0
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 0x10] 0x7e6197c180
	void Walk();// 0x2d9a58ebd041 0x7e61a08f20
	void ViewSelf();// 0x2ddb58ebd041 0x7e61a09000
	void ViewPlayer(FString S);// 0x2d9858ebd041 0x7e61a05720
	void ViewClass(class Actor DesiredClass);// 0x2d9758ebd041 0x7e61a05800
	void ViewActor(FName ActorName);// 0x2d9658ebd041 0x7e61a058e0
	void UpdateSafeArea();// 0x2d9558ebd041 0x7e61a059c0
	void ToggleServerStatReplicatorUpdateStatNet();// 0x2d9458ebd041 0x7e61a05aa0
	void ToggleServerStatReplicatorClientOverwrite();// 0x2d9358ebd041 0x7e61a05b80
	void ToggleDebugCamera();// 0x2d9258ebd041 0x7e61a05c60
	void ToggleAILogging();// 0x2d9158ebd041 0x7e61a05d40
	void TestCollisionDistance();// 0x2d9058ebd041 0x7e61a05e20
	void Teleport();// 0x2d8f58ebd041 0x7e61a05f00
	void Summon(FString ClassName);// 0x2d8e58ebd041 0x7e61a05fe0
	void StreamLevelOut(FName PackageName);// 0x2d8d58ebd041 0x7e61a060c0
	void StreamLevelIn(FName PackageName);// 0x2d8c58ebd041 0x7e61a061a0
	void SpawnServerStatReplicator();// 0x2d8b58ebd041 0x7e61a06280
	void Slomo(float NewTimeDilation);// 0x2d8a58ebd041 0x7e61a06360
	void SetWorldOrigin();// 0x2d8958ebd041 0x7e61a06440
	void SetMouseSensitivityToDefault();// 0x2d8858ebd041 0x7e61a06520
	void ServerToggleAILogging();// 0x2d8758ebd041 0x7e61a06600
	void ReceiveInitCheatManager();// 0x2d8658ebd041 0x7e61a066e0
	void ReceiveEndPlay();// 0x2d8558ebd041 0x7e61a067c0
	void PlayersOnly();// 0x2d8458ebd041 0x7e61a068a0
	void OnPlayerEndPlayed(Actor* Player, byte EndPlayReason);// 0x2d8358ebd041 0x7e61a06980
	void OnlyLoadLevel(FName PackageName);// 0x2d8258ebd041 0x7e61a06a60
	void LogLoc();// 0x2d8158ebd041 0x7e61a06b40
	void InvertMouse();// 0x2d8058ebd041 0x7e61a06c20
	void God();// 0x2d7f58ebd041 0x7e61a06d00
	void Ghost();// 0x2d7e58ebd041 0x7e61a06de0
	PlayerController* GetPlayerController();// 0x2d7d58ebd041 0x7e61a06ec0
	void FreezeFrame(float Delay);// 0x2d7c58ebd041 0x7e61a06fa0
	void Fly();// 0x2d7b58ebd041 0x7e61a07080
	void FlushLog();// 0x2d7a58ebd041 0x7e61a07160
	void EnableDebugCamera();// 0x2d7958ebd041 0x7e61a07240
	void DumpVoiceMutingState();// 0x2dba58ebd041 0x7e61a07320
	void DumpPartyState();// 0x2d7758ebd041 0x7e61a03a40
	void DumpOnlineSessionState();// 0x2d7658ebd041 0x7e61a03b20
	void DumpChatState();// 0x2d7558ebd041 0x7e61a03c00
	void DisableDebugCamera();// 0x2d7458ebd041 0x7e61a03ce0
	void DestroyTarget();// 0x2d7358ebd041 0x7e61a03dc0
	void DestroyServerStatReplicator();// 0x2d7258ebd041 0x7e61a03ea0
	void DestroyPawns(class Pawn aClass);// 0x2d7158ebd041 0x7e61a03f80
	void DestroyAllPawnsExceptTarget();// 0x2d7058ebd041 0x7e61a04060
	void DestroyAll(class Actor aClass);// 0x2d6f58ebd041 0x7e61a04140
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x2d6e58ebd041 0x7e61a04220
	void DebugCapsuleSweepPawn();// 0x2d6d58ebd041 0x7e61a04300
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x2d6c58ebd041 0x7e61a043e0
	void DebugCapsuleSweepClear();// 0x2d6b58ebd041 0x7e61a044c0
	void DebugCapsuleSweepChannel(byte Channel);// 0x2d6a58ebd041 0x7e61a045a0
	void DebugCapsuleSweepCapture();// 0x2d6958ebd041 0x7e61a04680
	void DebugCapsuleSweep();// 0x2d6858ebd041 0x7e61a04760
	void DamageTarget(float DamageAmount);// 0x2d6758ebd041 0x7e61a04840
	void CheatScript(FString ScriptName);// 0x2d6658ebd041 0x7e61a04920
	void ChangeSize(float F);// 0x2d6558ebd041 0x7e61a04a00
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x2d6458ebd041 0x7e61a04ae0
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x2d6358ebd041 0x7e61a04bc0
	void BugIt(FString ScreenShotDescription);// 0x2d6258ebd041 0x7e61a04ca0

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c8, Size: 0x1] 0x7e61a25500
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c8, Size: 0x1] 0x7e61a25580
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c8, Size: 0x1] 0x7e61a25600
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c8, Size: 0x1] 0x7e61a25680
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c8, Size: 0x1] 0x7e61a25700
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c8, Size: 0x1] 0x7e61a25780
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c8, Size: 0x1] 0x7e61a25800
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c8, Size: 0x1] 0x7e61a25880
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x7d0, Size: 0x8] 0x7e61a25900
	Actor* SelectedActor;//[Offset: 0x7d8, Size: 0x8] 0x7e61a25980
	PrimitiveComponent* SelectedComponent;//[Offset: 0x7e0, Size: 0x8] 0x7e61a25a00
	HitResult SelectedHitPoint;//[Offset: 0x7e8, Size: 0xe8] 0x7e61a25a80
	PlayerController* OriginalControllerRef;//[Offset: 0x8d0, Size: 0x8] 0x7e61a25b00
	Player* OriginalPlayer;//[Offset: 0x8d8, Size: 0x8] 0x7e61a25b80
	float SpeedScale;//[Offset: 0x8e0, Size: 0x4] 0x7e61a25c00
	float InitialMaxSpeed;//[Offset: 0x8e4, Size: 0x4] 0x7e61a25c80
	float InitialAccel;//[Offset: 0x8e8, Size: 0x4] 0x7e61a25d00
	float InitialDecel;//[Offset: 0x8ec, Size: 0x4] 0x7e61a25d80
	void ToggleDisplay();// 0x2e0758ebd041 0x7e61a0dd00
	void ShowDebugSelectedInfo();// 0x2e0658ebd041 0x7e61a0dde0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x2e0558ebd041 0x7e61a0dec0
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x2e0458ebd041 0x7e61a0dfa0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x2e0358ebd041 0x7e61a0e080
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x2e0258ebd041 0x7e61a0e160
	Actor* GetSelectedActor();// 0x2e0158ebd041 0x7e61a0e240

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bFrustumEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1] 0x7e61a42480
	Color FrustumColor;//[Offset: 0x53c, Size: 0x4] 0x7e61a42500
	float FrustumAngle;//[Offset: 0x540, Size: 0x4] 0x7e61a42580
	float FrustumAspectRatio;//[Offset: 0x544, Size: 0x4] 0x7e61a42600
	float FrustumStartDist;//[Offset: 0x548, Size: 0x4] 0x7e61a42680
	float FrustumEndDist;//[Offset: 0x54c, Size: 0x4] 0x7e61a42700
	Texture* Texture;//[Offset: 0x550, Size: 0x8] 0x7e61a42780

--------------------------------
Class: CheatManagerExtension.Object
	PlayerController* GetPlayerController();// 0x2d6158ebd041 0x7e61a04d80

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8] 0x7e61644080

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x7e6165d200
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x7e6165d280
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7e6165d300
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7e6165d380
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1] 0x7e6165d400

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x7e61644100
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7e61644180
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7e61644200
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x7e61642180

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10] 0x7e61bd1500
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4] 0x7e61be9180
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4] 0x7e61be9200
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4] 0x7e61be9280
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4] 0x7e61be9300
	float ActivationDelay;//[Offset: 0x48, Size: 0x4] 0x7e61be9380
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7e61be9400
	float StartupDelay;//[Offset: 0x50, Size: 0x4] 0x7e61be9480

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8] 0x7e61684c80
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8] 0x7e61684d00
	Vector2D Center;//[Offset: 0x10, Size: 0x10] 0x7e61684d80
	Vector2D VisualSize;//[Offset: 0x20, Size: 0x10] 0x7e61684e00
	Vector2D ThumbSize;//[Offset: 0x30, Size: 0x10] 0x7e61684e80
	Vector2D InteractionSize;//[Offset: 0x40, Size: 0x10] 0x7e61684f00
	Vector2D InputScale;//[Offset: 0x50, Size: 0x10] 0x7e61684f80
	Key MainInputKey;//[Offset: 0x60, Size: 0x18] 0x7e61685000
	Key AltInputKey;//[Offset: 0x78, Size: 0x18] 0x7e61685080

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x2f8, Size: 0x8] 0x7e6148df80
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x300, Size: 0x8] 0x7e6148e000
	CapsuleComponent* CapsuleComponent;//[Offset: 0x308, Size: 0x8] 0x7e6148e080
	BasedMovementInfo BasedMovement;//[Offset: 0x310, Size: 0x48] 0x7e6148e100
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x358, Size: 0x48] 0x7e6148e180
	float AnimRootMotionTranslationScale;//[Offset: 0x3a0, Size: 0x4] 0x7e6148e200
	Vector BaseTranslationOffset;//[Offset: 0x3a8, Size: 0x18] 0x7e6148e280
	Quat BaseRotationOffset;//[Offset: 0x3c0, Size: 0x20] 0x7e6148e300
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3e0, Size: 0x4] 0x7e6148e380
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x3e4, Size: 0x4] 0x7e6148e400
	byte ReplicatedMovementMode;//[Offset: 0x3e8, Size: 0x1] 0x7e6148e480
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1] 0x7e6148e500
	float CrouchedEyeHeight;//[Offset: 0x3ec, Size: 0x4] 0x7e6148e580
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1] 0x7e6148e600
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 0x1] 0x7e6148e680
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f0, Size: 0x1] 0x7e6148e700
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f0, Size: 0x1] 0x7e6148c680
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 0x1] 0x7e6148c700
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f0, Size: 0x1] 0x7e6148c780
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f0, Size: 0x1] 0x7e6148c800
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f0, Size: 0x1] 0x7e6148c880
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f1, Size: 0x1] 0x7e6148c900
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f1, Size: 0x1] 0x7e6148c980
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f1, Size: 0x1] 0x7e6148ca00
	float JumpKeyHoldTime;//[Offset: 0x3f4, Size: 0x4] 0x7e6148ca80
	float JumpForceTimeRemaining;//[Offset: 0x3f8, Size: 0x4] 0x7e6148cb00
	float ProxyJumpForceStartedTime;//[Offset: 0x3fc, Size: 0x4] 0x7e6148cb80
	float JumpMaxHoldTime;//[Offset: 0x400, Size: 0x4] 0x7e6148cc00
	int JumpMaxCount;//[Offset: 0x404, Size: 0x4] 0x7e6148cc80
	int JumpCurrentCount;//[Offset: 0x408, Size: 0x4] 0x7e6148cd00
	int JumpCurrentCountPreJump;//[Offset: 0x40c, Size: 0x4] 0x7e6148cd80
	delegate OnReachedJumpApex;//[Offset: 0x418, Size: 0x10] 0x7e6148ce00
	delegate MovementModeChangedDelegate;//[Offset: 0x438, Size: 0x10] 0x7e6148ce80
	delegate OnCharacterMovementUpdated;//[Offset: 0x448, Size: 0x10] 0x7e6148cf00
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x458, Size: 0x48] 0x7e6148cf80
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4a0, Size: 0x70] 0x7e6148d000
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x510, Size: 0x10] 0x7e61693300
	RepRootMotionMontage RepRootMotion;//[Offset: 0x520, Size: 0xd8] 0x7e6148d100
	void UnCrouch(bool bClientSimulation);// 0x1e1758ebd041 0x7e614bd600
	void StopJumping();// 0x1e1658ebd041 0x7e614bd6e0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x1e1558ebd041 0x7e614bd7c0
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x1e1458ebd041 0x7e614bd8a0
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x1e1358ebd041 0x7e614bd980
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1e1258ebd041 0x7e614bda60
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1e1158ebd041 0x7e614bdb40
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1e1058ebd041 0x7e614bdc20
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1e0f58ebd041 0x7e614bdd00
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1e0e58ebd041 0x7e614bdde0
	void RootMotionDebugClientPrintOnScreen(FString InString);// 0x1e0d58ebd041 0x7e614bdec0
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x1e0c58ebd041 0x7e614bdfa0
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x1e0b58ebd041 0x7e614be080
	void OnRep_RootMotion();// 0x1e0a58ebd041 0x7e614be160
	void OnRep_ReplicatedBasedMovement();// 0x1e0958ebd041 0x7e614be240
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x1e0858ebd041 0x7e614be320
	void OnRep_IsCrouched();// 0x1e0758ebd041 0x7e614be400
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1e0658ebd041 0x7e614be4e0
	void OnLanded(out const HitResult Hit);// 0x1e0558ebd041 0x7e614be5c0
	void OnJumped();// 0x1e4158ebd041 0x7e614be6a0
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1e0358ebd041 0x7e614badc0
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1e0258ebd041 0x7e614baea0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1e0158ebd041 0x7e614baf80
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1e0058ebd041 0x7e614bb060
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1dff58ebd041 0x7e614bb140
	void Jump();// 0x1dfe58ebd041 0x7e614bb220
	bool IsPlayingRootMotion();// 0x1dfd58ebd041 0x7e614bb300
	bool IsPlayingNetworkedRootMotionMontage();// 0x1dfc58ebd041 0x7e614bb3e0
	bool IsJumpProvidingForce();// 0x1dfb58ebd041 0x7e614bb4c0
	bool HasAnyRootMotion();// 0x1dfa58ebd041 0x7e614bb5a0
	AnimMontage* GetCurrentMontage();// 0x1df958ebd041 0x7e614bb680
	Vector GetBaseTranslationOffset();// 0x1df858ebd041 0x7e614bb760
	Rotator GetBaseRotationOffsetRotator();// 0x1df758ebd041 0x7e614bb840
	float GetAnimRootMotionTranslationScale();// 0x1df658ebd041 0x7e614bb920
	void Crouch(bool bClientSimulation);// 0x1df558ebd041 0x7e614bba00
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1df458ebd041 0x7e614bbae0
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x1df358ebd041 0x7e614bbbc0
	void ClientCheatWalk();// 0x1df258ebd041 0x7e614bbca0
	void ClientCheatGhost();// 0x1df158ebd041 0x7e614bbd80
	void ClientCheatFly();// 0x1df058ebd041 0x7e614bbe60
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1def58ebd041 0x7e614bbf40
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1dee58ebd041 0x7e614bc020
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1ded58ebd041 0x7e614bc100
	void ClientAckGoodMove(float Timestamp);// 0x1dec58ebd041 0x7e614bc1e0
	bool CanJumpInternal();// 0x1deb58ebd041 0x7e614bc2c0
	bool CanJump();// 0x1dea58ebd041 0x7e614bc3a0
	bool CanCrouch();// 0x1de958ebd041 0x7e614bc480
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x1de858ebd041 0x7e614bc560

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x170, Size: 0x8] 0x7e61831a80
	float GravityScale;//[Offset: 0x178, Size: 0x4] 0x7e61831b00
	float MaxStepHeight;//[Offset: 0x17c, Size: 0x4] 0x7e61831b80
	float JumpZVelocity;//[Offset: 0x180, Size: 0x4] 0x7e61831c00
	float JumpOffJumpZFactor;//[Offset: 0x184, Size: 0x4] 0x7e61831c80
	float WalkableFloorAngle;//[Offset: 0x1a4, Size: 0x4] 0x7e61831d00
	float WalkableFloorZ;//[Offset: 0x1a8, Size: 0x4] 0x7e61831d80
	byte MovementMode;//[Offset: 0x1ac, Size: 0x1] 0x7e61831e00
	byte CustomMovementMode;//[Offset: 0x1ad, Size: 0x1] 0x7e61831e80
	enum NetworkSmoothingMode;//[Offset: 0x1ae, Size: 0x1] 0x7e617bab00
	float GroundFriction;//[Offset: 0x1b0, Size: 0x4] 0x7e61831f80
	float MaxWalkSpeed;//[Offset: 0x1f8, Size: 0x4] 0x7e61832000
	float MaxWalkSpeedCrouched;//[Offset: 0x1fc, Size: 0x4] 0x7e61832080
	float MaxSwimSpeed;//[Offset: 0x200, Size: 0x4] 0x7e61832100
	float MaxFlySpeed;//[Offset: 0x204, Size: 0x4] 0x7e61830080
	float MaxCustomMovementSpeed;//[Offset: 0x208, Size: 0x4] 0x7e61830100
	float MaxAcceleration;//[Offset: 0x20c, Size: 0x4] 0x7e61830180
	float MinAnalogWalkSpeed;//[Offset: 0x210, Size: 0x4] 0x7e61830200
	float BrakingFrictionFactor;//[Offset: 0x214, Size: 0x4] 0x7e61830280
	float BrakingFriction;//[Offset: 0x218, Size: 0x4] 0x7e61830300
	float BrakingSubStepTime;//[Offset: 0x21c, Size: 0x4] 0x7e61830380
	float BrakingDecelerationWalking;//[Offset: 0x220, Size: 0x4] 0x7e61830400
	float BrakingDecelerationFalling;//[Offset: 0x224, Size: 0x4] 0x7e61830480
	float BrakingDecelerationSwimming;//[Offset: 0x228, Size: 0x4] 0x7e61830500
	float BrakingDecelerationFlying;//[Offset: 0x22c, Size: 0x4] 0x7e61830580
	float AirControl;//[Offset: 0x230, Size: 0x4] 0x7e61830600
	float AirControlBoostMultiplier;//[Offset: 0x234, Size: 0x4] 0x7e61830680
	float AirControlBoostVelocityThreshold;//[Offset: 0x238, Size: 0x4] 0x7e61830700
	float FallingLateralFriction;//[Offset: 0x23c, Size: 0x4] 0x7e61830780
	float CrouchedHalfHeight;//[Offset: 0x240, Size: 0x4] 0x7e61830800
	float Buoyancy;//[Offset: 0x244, Size: 0x4] 0x7e61830880
	float PerchRadiusThreshold;//[Offset: 0x248, Size: 0x4] 0x7e61830900
	float PerchAdditionalHeight;//[Offset: 0x24c, Size: 0x4] 0x7e61830980
	Rotator RotationRate;//[Offset: 0x250, Size: 0x18] 0x7e61830a00
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x7e61830a80
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 0x1] 0x7e61830b00
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x268, Size: 0x1] 0x7e61830b80
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x268, Size: 0x1] 0x7e61830c00
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x268, Size: 0x1] 0x7e61830c80
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x268, Size: 0x1] 0x7e61830d00
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x268, Size: 0x1] 0x7e61830d80
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x269, Size: 0x1] 0x7e61830e00
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x269, Size: 0x1] 0x7e61830e80
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x269, Size: 0x1] 0x7e61830f00
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x269, Size: 0x1] 0x7e61830f80
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x269, Size: 0x1] 0x7e61831000
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x269, Size: 0x1] 0x7e61831080
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x269, Size: 0x1] 0x7e6181f800
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26a, Size: 0x1] 0x7e6181f880
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26a, Size: 0x1] 0x7e6181f900
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26a, Size: 0x1] 0x7e6181f980
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26a, Size: 0x1] 0x7e6181fa00
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26a, Size: 0x1] 0x7e6181fa80
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26a, Size: 0x1] 0x7e6181fb00
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x26a, Size: 0x1] 0x7e6181fb80
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26b, Size: 0x1] 0x7e6181fc00
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x270, Size: 0x8] 0x7e6181fc80
	float MaxOutOfWaterStepHeight;//[Offset: 0x278, Size: 0x4] 0x7e6181fd00
	float OutofWaterZ;//[Offset: 0x27c, Size: 0x4] 0x7e6181fd80
	float Mass;//[Offset: 0x280, Size: 0x4] 0x7e6181fe00
	float StandingDownwardForceScale;//[Offset: 0x284, Size: 0x4] 0x7e6181fe80
	float InitialPushForceFactor;//[Offset: 0x288, Size: 0x4] 0x7e6181ff00
	float PushForceFactor;//[Offset: 0x28c, Size: 0x4] 0x7e6181ff80
	float PushForcePointZOffsetFactor;//[Offset: 0x290, Size: 0x4] 0x7e6181e780
	float TouchForceFactor;//[Offset: 0x294, Size: 0x4] 0x7e6181e800
	float MinTouchForce;//[Offset: 0x298, Size: 0x4] 0x7e6181e880
	float MaxTouchForce;//[Offset: 0x29c, Size: 0x4] 0x7e6181e900
	float RepulsionForce;//[Offset: 0x2a0, Size: 0x4] 0x7e6181e980
	Vector Acceleration;//[Offset: 0x2a8, Size: 0x18] 0x7e6181ea00
	Quat LastUpdateRotation;//[Offset: 0x2c0, Size: 0x20] 0x7e6181ea80
	Vector LastUpdateLocation;//[Offset: 0x2e0, Size: 0x18] 0x7e6181eb00
	Vector LastUpdateVelocity;//[Offset: 0x2f8, Size: 0x18] 0x7e6181eb80
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x310, Size: 0x4] 0x7e6181ec00
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x314, Size: 0x4] 0x7e6181ec80
	float ServerLastClientAdjustmentTime;//[Offset: 0x318, Size: 0x4] 0x7e6181ed00
	Vector PendingImpulseToApply;//[Offset: 0x320, Size: 0x18] 0x7e6181ed80
	Vector PendingForceToApply;//[Offset: 0x338, Size: 0x18] 0x7e6181ee00
	float AnalogInputModifier;//[Offset: 0x350, Size: 0x4] 0x7e6181ee80
	float MaxSimulationTimeStep;//[Offset: 0x360, Size: 0x4] 0x7e6181ef00
	int MaxSimulationIterations;//[Offset: 0x364, Size: 0x4] 0x7e6181ef80
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x368, Size: 0x4] 0x7e6181f000
	float MaxDepenetrationWithGeometry;//[Offset: 0x36c, Size: 0x4] 0x7e6181f080
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x370, Size: 0x4] 0x7e6181f100
	float MaxDepenetrationWithPawn;//[Offset: 0x374, Size: 0x4] 0x7e6181f180
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x378, Size: 0x4] 0x7e6181f200
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x37c, Size: 0x4] 0x7e6181f280
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x380, Size: 0x4] 0x7e6181f300
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x384, Size: 0x4] 0x7e6181f380
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x388, Size: 0x4] 0x7e6181f400
	float NetProxyShrinkRadius;//[Offset: 0x38c, Size: 0x4] 0x7e6181f480
	float NetProxyShrinkHalfHeight;//[Offset: 0x390, Size: 0x4] 0x7e6181f500
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x394, Size: 0x4] 0x7e6181f580
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x398, Size: 0x4] 0x7e6181f600
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x39c, Size: 0x4] 0x7e6181f680
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x3a0, Size: 0x4] 0x7e6181f700
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x3a4, Size: 0x4] 0x7e6181f780
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x3a8, Size: 0x4] 0x7e6181d700
	float LedgeCheckThreshold;//[Offset: 0x3ac, Size: 0x4] 0x7e6181d780
	float JumpOutOfWaterPitch;//[Offset: 0x3b0, Size: 0x4] 0x7e6181d800
	FindFloorResult CurrentFloor;//[Offset: 0x3b8, Size: 0xf8] 0x7e6181d880
	byte DefaultLandMovementMode;//[Offset: 0x4b0, Size: 0x1] 0x7e6181d900
	byte DefaultWaterMovementMode;//[Offset: 0x4b1, Size: 0x1] 0x7e6181d980
	byte GroundMovementMode;//[Offset: 0x4b2, Size: 0x1] 0x7e6181da00
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bc, Size: 0x1] 0x7e6181da80
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4bc, Size: 0x1] 0x7e6181db00
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4bc, Size: 0x1] 0x7e6181db80
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4bc, Size: 0x1] 0x7e6181dc00
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4bc, Size: 0x1] 0x7e6181dc80
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4bc, Size: 0x1] 0x7e6181dd00
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4bc, Size: 0x1] 0x7e6181dd80
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4bc, Size: 0x1] 0x7e6181de00
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bd, Size: 0x1] 0x7e6181de80
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4bd, Size: 0x1] 0x7e6181df00
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4bd, Size: 0x1] 0x7e6181df80
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4bd, Size: 0x1] 0x7e6181e000
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4bd, Size: 0x1] 0x7e6181e080
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4bd, Size: 0x1] 0x7e6181e100
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4bd, Size: 0x1] 0x7e6181e180
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4bd, Size: 0x1] 0x7e6181e200
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4be, Size: 0x1] 0x7e6181e280
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4be, Size: 0x1] 0x7e6181e300
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4be, Size: 0x1] 0x7e6181e380
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4be, Size: 0x1] 0x7e6181e400
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4be, Size: 0x1] 0x7e6181e480
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4be, Size: 0x1] 0x7e6181e500
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4be, Size: 0x1] 0x7e6181e580
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bf, Size: 0x1] 0x7e6181e600
	float FormerBaseVelocityDecayHalfLife;//[Offset: 0x4c0, Size: 0x4] 0x7e6181e680
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c4, Size: 0x1] 0x7e6181e700
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c4, Size: 0x1] 0x7e6181c680
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c4, Size: 0x1] 0x7e6181c700
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c4, Size: 0x1] 0x7e6181c780
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c4, Size: 0x1] 0x7e6181c800
	float AvoidanceConsiderationRadius;//[Offset: 0x4e4, Size: 0x4] 0x7e6181c880
	Vector RequestedVelocity;//[Offset: 0x4e8, Size: 0x18] 0x7e6181c900
	int AvoidanceUID;//[Offset: 0x500, Size: 0x4] 0x7e6181c980
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x504, Size: 0x4] 0x7e6181ca00
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x508, Size: 0x4] 0x7e6181ca80
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x50c, Size: 0x4] 0x7e6181cb00
	float AvoidanceWeight;//[Offset: 0x510, Size: 0x4] 0x7e6181cb80
	Vector PendingLaunchVelocity;//[Offset: 0x518, Size: 0x18] 0x7e6181cc00
	float NavMeshProjectionInterval;//[Offset: 0x668, Size: 0x4] 0x7e6181cc80
	float NavMeshProjectionTimer;//[Offset: 0x66c, Size: 0x4] 0x7e6181cd00
	float NavMeshProjectionInterpSpeed;//[Offset: 0x670, Size: 0x4] 0x7e6181cd80
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x674, Size: 0x4] 0x7e6181ce00
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x678, Size: 0x4] 0x7e6181ce80
	float NavWalkingFloorDistTolerance;//[Offset: 0x67c, Size: 0x4] 0x7e6181cf00
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x6b0, Size: 0x30] 0x7e6181cf80
	float MinTimeBetweenTimeStampResets;//[Offset: 0x6f8, Size: 0x4] 0x7e6181d000
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0xc60, Size: 0x48] 0x7e6181d080
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0xca8, Size: 0x48] 0x7e6181d100
	RootMotionMovementParams RootMotionParams;//[Offset: 0xe50, Size: 0x70] 0x7e6181d180
	Vector AnimRootMotionVelocity;//[Offset: 0xec0, Size: 0x18] 0x7e6181d200
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x241058ebd041 0x7e618204e0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x240f58ebd041 0x7e618205c0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x240e58ebd041 0x7e618206a0
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x240d58ebd041 0x7e61820780
	void SetGroupsToIgnore(int GroupFlags);// 0x240c58ebd041 0x7e61820860
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x240b58ebd041 0x7e61820940
	void SetGroupsToAvoid(int GroupFlags);// 0x240a58ebd041 0x7e61820a20
	void SetCrouchedHalfHeight(const float NewValue);// 0x240958ebd041 0x7e61820b00
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x240858ebd041 0x7e61820be0
	void SetAvoidanceGroup(int GroupFlags);// 0x240758ebd041 0x7e61820cc0
	void SetAvoidanceEnabled(bool bEnable);// 0x240658ebd041 0x7e61820da0
	float K2_GetWalkableFloorZ();// 0x240558ebd041 0x7e61820e80
	float K2_GetWalkableFloorAngle();// 0x240458ebd041 0x7e61820f60
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x240358ebd041 0x7e61821040
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x240258ebd041 0x7e61821120
	bool IsWalking();// 0x240158ebd041 0x7e61821200
	bool IsWalkable(out const HitResult Hit);// 0x240058ebd041 0x7e618212e0
	float GetValidPerchRadius();// 0x23ff58ebd041 0x7e618213c0
	float GetPerchRadiusThreshold();// 0x23fe58ebd041 0x7e618214a0
	PrimitiveComponent* GetMovementBase();// 0x23fd58ebd041 0x7e61821580
	float GetMinAnalogSpeed();// 0x23fc58ebd041 0x7e61821660
	float GetMaxJumpHeightWithJumpTime();// 0x23fb58ebd041 0x7e61821740
	float GetMaxJumpHeight();// 0x23fa58ebd041 0x7e61821820
	float GetMaxBrakingDeceleration();// 0x23f958ebd041 0x7e61821900
	float GetMaxAcceleration();// 0x23f858ebd041 0x7e618219e0
	Vector GetLastUpdateVelocity();// 0x23f758ebd041 0x7e61821ac0
	Rotator GetLastUpdateRotation();// 0x23f658ebd041 0x7e61821ba0
	Vector GetLastUpdateLocation();// 0x243758ebd041 0x7e61821c80
	Vector GetImpartedMovementBaseVelocity();// 0x23f458ebd041 0x7e617ee780
	Vector GetCurrentAcceleration();// 0x23f358ebd041 0x7e617ee860
	float GetCrouchedHalfHeight();// 0x23f258ebd041 0x7e617ee940
	Character* GetCharacterOwner();// 0x23f158ebd041 0x7e617eea20
	float GetAnalogInputModifier();// 0x23f058ebd041 0x7e617eeb00
	void DisableMovement();// 0x23ef58ebd041 0x7e617eebe0
	void ClearAccumulatedForces();// 0x23ee58ebd041 0x7e617eecc0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x23ed58ebd041 0x7e617eeda0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x23ec58ebd041 0x7e617eee80
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x23eb58ebd041 0x7e617eef60
	void AddForce(Vector Force);// 0x23ea58ebd041 0x7e617ef040

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61655000
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61655080
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61655100
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e61655180
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e61655200
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7e61655280
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7e61653200
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7e61653280
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7e61653300
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7e61653380
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7e61653400
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7e61653480
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7e61653500
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7e61653580
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7e61653600
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7e61653680
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x7e61653700
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x7e61653780
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x7e61653800
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x7e61653880
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x7e61653900
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x7e61653980
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x7e61653a00
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x7e61653a80
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x7e61653b00
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x7e61653b80
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x7e61653c00
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x7e61653c80
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x7e61653d00
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x7e61653d80
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x7e61653e00
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x7e61653e80

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61613780
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61613800
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61613880
	float FloorDist;//[Offset: 0x4, Size: 0x4] 0x7e61613900
	float LineDist;//[Offset: 0x8, Size: 0x4] 0x7e61613980
	HitResult HitResult;//[Offset: 0x10, Size: 0xe8] 0x7e61613a00

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e61612280
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7e61612300
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7e61612380
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x7e61612400
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1] 0x7e61612500
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x30, Size: 0x18] 0x7e61612580

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1] 0x7e61612480

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615f3000
	float BlendWeight;//[Offset: 0x4, Size: 0x4] 0x7e615f3080
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x60] 0x7e615f3100

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8] 0x7e61613a80
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x7e61613b00
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0x18] 0x7e61613b80
	Rotator Rotation;//[Offset: 0x28, Size: 0x18] 0x7e61613c00
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7e61613c80
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7e61613d00
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7e61613d80

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61613e00
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0xd8] 0x7e61613e80

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61613f00
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8] 0x7e61613f80
	float Position;//[Offset: 0x10, Size: 0x4] 0x7e61614000
	Vector_NetQuantize100 Location;//[Offset: 0x18, Size: 0x18] 0x7e61614080
	Rotator Rotation;//[Offset: 0x30, Size: 0x18] 0x7e61614100
	PrimitiveComponent* MovementBase;//[Offset: 0x48, Size: 0x8] 0x7e61614180
	FName MovementBaseBoneName;//[Offset: 0x50, Size: 0x8] 0x7e61614200
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7e61612180
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7e61612200
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x60, Size: 0x48] 0x7e61612600
	Vector_NetQuantize10 Acceleration;//[Offset: 0xa8, Size: 0x18] 0x7e61612680
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xc0, Size: 0x18] 0x7e61612700

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8] 0x7e8488d200
	FName MemberName;//[Offset: 0x8, Size: 0x8] 0x7e8488d180
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10] 0x7e8488d100

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2b0, Size: 0x8] 0x7e6197bfa0
	Actor* ChildActor;//[Offset: 0x2b8, Size: 0x8] 0x7e61a19f80
	Actor* ChildActorTemplate;//[Offset: 0x2c0, Size: 0x8] 0x7e61a1a000
	void SetChildActorClass(class Actor InClass);// 0x2d9b58ebd041 0x7e61a08e40

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x68, Size: 0x8] 0x7e619a7980
	Object*[] CreateSubObjects;//[Offset: 0x158, Size: 0x10] 0x7e61975f60

--------------------------------
Class: ActorElementAssetDataInterface.Object

--------------------------------
Class: ActorElementCounterInterface.Object

--------------------------------
Class: ActorElementHierarchyInterface.Object

--------------------------------
Class: ActorElementObjectInterface.Object

--------------------------------
Class: ActorElementSelectionInterface.Object

--------------------------------
Class: ActorElementWorldInterface.Object

--------------------------------
Class: ActorFolder.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: ActorPartitionSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: ActorSoundParameterInterface.Interface.Object
	void GetActorSoundParams(out AudioParameter[] Params);// 0x2c4858ebd041 0x7e619b43e0

--------------------------------
Class: AudioParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7e615b9100
	float FloatParam;//[Offset: 0x8, Size: 0x4] 0x7e615b9180
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7e615b9200
	int IntParam;//[Offset: 0x10, Size: 0x4] 0x7e615b9280
	Object* ObjectParam;//[Offset: 0x18, Size: 0x8] 0x7e615b9300
	FString StringParam;//[Offset: 0x20, Size: 0x10] 0x7e615b9380
	float[] ArrayFloatParam;//[Offset: 0x30, Size: 0x10] 0x7e84dd6fa0
	bool[] ArrayBoolParam;//[Offset: 0x40, Size: 0x10] 0x7e84dd6f00
	int[] ArrayIntParam;//[Offset: 0x50, Size: 0x10] 0x7e84dd6e60
	Object*[] ArrayObjectParam;//[Offset: 0x60, Size: 0x10] 0x7e84dd6dc0
	FString[] ArrayStringParam;//[Offset: 0x70, Size: 0x10] 0x7e84dd6d20
	enum ParamType;//[Offset: 0x80, Size: 0x1] 0x7e84dd6c80
	FName TypeName;//[Offset: 0x84, Size: 0x8] 0x7e615b7600

--------------------------------
Class: ActorTextureStreamingBuildDataComponent.ActorComponent.Object

--------------------------------
Class: BlendSpace.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7e619a8f80
	InterpolationParameter InterpolationParam;//[Offset: 0x8c, Size: 0x10] 0x7e619a9000
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xbc, Size: 0x4] 0x7e619a9080
	bool bTargetWeightInterpolationEaseInOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7e619a9100
	float AnimLength;//[Offset: 0xc4, Size: 0x4] 0x7e619a9180
	byte NotifyTriggerMode;//[Offset: 0xc8, Size: 0x1] 0x7e619a9200
	bool bInterpolateUsingGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1] 0x7e619a9280
	enum PreferredTriangulationDirection;//[Offset: 0xca, Size: 0x1] 0x7e61975a60
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xd0, Size: 0x10] 0x7e61975b00
	int SampleIndexWithMarkers;//[Offset: 0xe0, Size: 0x4] 0x7e619a9400
	BlendSample[] SampleData;//[Offset: 0xe8, Size: 0x10] 0x7e61975ba0
	EditorElement[] GridSamples;//[Offset: 0xf8, Size: 0x10] 0x7e61975c40
	BlendSpaceData BlendSpaceData;//[Offset: 0x108, Size: 0x20] 0x7e619a7480
	BlendParameter BlendParameters;//[Offset: 0x128, Size: 0x20] 0x7e619a7500
	byte AxisToScaleAnimation;//[Offset: 0x188, Size: 0x1] 0x7e619a7580
	int[] DimensionIndices;//[Offset: 0x190, Size: 0x10] 0x7e61975ce0

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4] 0x7e61601f00
	float DampingRatio;//[Offset: 0x4, Size: 0x4] 0x7e61601f80
	float MaxSpeed;//[Offset: 0x8, Size: 0x4] 0x7e61602000
	byte InterpolationType;//[Offset: 0xc, Size: 0x1] 0x7e61602080

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x7e61601100
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4] 0x7e61601180

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8] 0x7e61601a80
	Vector SampleValue;//[Offset: 0x8, Size: 0x18] 0x7e61601b00
	float RateScale;//[Offset: 0x20, Size: 0x4] 0x7e61601b80

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4] 0x7e61601300
	float Weights;//[Offset: 0xc, Size: 0x4] 0x7e61601380

--------------------------------
Class: BlendSpaceData
	BlendSpaceSegment[] Segments;//[Offset: 0x0, Size: 0x10] 0x7e84e568c0
	BlendSpaceTriangle[] Triangles;//[Offset: 0x10, Size: 0x10] 0x7e84e56960

--------------------------------
Class: BlendSpaceSegment
	int SampleIndices;//[Offset: 0x0, Size: 0x4] 0x7e61601980
	float Vertices;//[Offset: 0x8, Size: 0x4] 0x7e61601a00

--------------------------------
Class: BlendSpaceTriangle
	int SampleIndices;//[Offset: 0x0, Size: 0x4] 0x7e61601600
	Vector2D Vertices;//[Offset: 0x10, Size: 0x10] 0x7e61601680
	BlendSpaceTriangleEdgeInfo EdgeInfo;//[Offset: 0x40, Size: 0x28] 0x7e61601700

--------------------------------
Class: BlendSpaceTriangleEdgeInfo
	Vector2D Normal;//[Offset: 0x0, Size: 0x10] 0x7e61601780
	int NeighbourTriangleIndex;//[Offset: 0x10, Size: 0x4] 0x7e61601800
	int AdjacentPerimeterTriangleIndices;//[Offset: 0x14, Size: 0x4] 0x7e61601880
	int AdjacentPerimeterVertexIndices;//[Offset: 0x1c, Size: 0x4] 0x7e61601900

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10] 0x7e61601c00
	float Min;//[Offset: 0x10, Size: 0x4] 0x7e61601c80
	float Max;//[Offset: 0x14, Size: 0x4] 0x7e61601d00
	int GridNum;//[Offset: 0x18, Size: 0x4] 0x7e61601d80
	bool bSnapToGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7e61601e00
	bool bWrapInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x7e61601e80

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpace.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1] 0x7e619a8f00

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpace.AnimationAsset.Object

--------------------------------
Class: AmbientSound.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x278, Size: 0x8] 0x7e619a8980
	void Stop();// 0x2c4e58ebd041 0x7e619b3ea0
	void Play(float StartTime);// 0x2c4d58ebd041 0x7e619b3f80
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0x2c4c58ebd041 0x7e619b4060
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);// 0x2c4b58ebd041 0x7e619b4140
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0x2c4a58ebd041 0x7e619b4220

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x438, Size: 0x8] 0x7e617ab400
	AudioParameter[] DefaultParameters;//[Offset: 0x440, Size: 0x10] 0x7e6169e340
	AudioParameter[] InstanceParameters;//[Offset: 0x450, Size: 0x10] 0x7e6169e3e0
	SoundClass* SoundClassOverride;//[Offset: 0x460, Size: 0x8] 0x7e617ab580
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1] 0x7e617a9500
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x468, Size: 0x1] 0x7e617a9580
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x468, Size: 0x1] 0x7e617a9600
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x468, Size: 0x1] 0x7e617a9680
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x468, Size: 0x1] 0x7e617a9700
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x468, Size: 0x1] 0x7e617a9780
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x468, Size: 0x1] 0x7e617a9800
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x468, Size: 0x1] 0x7e617a9880
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x469, Size: 0x1] 0x7e617a9900
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x469, Size: 0x1] 0x7e617a9980
	bool bCanPlayMultipleInstances;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x469, Size: 0x1] 0x7e617a9a00
	bool bDisableParameterUpdatesWhilePlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x469, Size: 0x1] 0x7e617a9a80
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x46a, Size: 0x1] 0x7e617a9b00
	FName AudioComponentUserID;//[Offset: 0x470, Size: 0x8] 0x7e617a9b80
	float PitchModulationMin;//[Offset: 0x478, Size: 0x4] 0x7e617a9c00
	float PitchModulationMax;//[Offset: 0x47c, Size: 0x4] 0x7e617a9c80
	float VolumeModulationMin;//[Offset: 0x480, Size: 0x4] 0x7e617a9d00
	float VolumeModulationMax;//[Offset: 0x484, Size: 0x4] 0x7e617a9d80
	float VolumeMultiplier;//[Offset: 0x488, Size: 0x4] 0x7e617a9e00
	int EnvelopeFollowerAttackTime;//[Offset: 0x48c, Size: 0x4] 0x7e617a9e80
	int EnvelopeFollowerReleaseTime;//[Offset: 0x490, Size: 0x4] 0x7e617a9f00
	float Priority;//[Offset: 0x494, Size: 0x4] 0x7e617a9f80
	float SubtitlePriority;//[Offset: 0x498, Size: 0x4] 0x7e617aa000
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x4a0, Size: 0x8] 0x7e617aa080
	float PitchMultiplier;//[Offset: 0x4a8, Size: 0x4] 0x7e617aa100
	float LowPassFilterFrequency;//[Offset: 0x4ac, Size: 0x4] 0x7e617aa180
	SoundAttenuation* AttenuationSettings;//[Offset: 0x4b8, Size: 0x8] 0x7e617aa200
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x4c0, Size: 0x3c8] 0x7e617aa280
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x888, Size: 0x8] 0x7e617aa300
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x890, Size: 0x50] 0x7e6169e480
	enum AutoAttachLocationRule;//[Offset: 0x8ec, Size: 0x1] 0x7e6169e520
	enum AutoAttachRotationRule;//[Offset: 0x8ed, Size: 0x1] 0x7e6169e5c0
	enum AutoAttachScaleRule;//[Offset: 0x8ee, Size: 0x1] 0x7e6169e660
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x8f0, Size: 0x48] 0x7e617a8480
	delegate OnAudioPlayStateChanged;//[Offset: 0x938, Size: 0x10] 0x7e617a8500
	delegate OnAudioVirtualizationChanged;//[Offset: 0x960, Size: 0x10] 0x7e617a8580
	delegate OnAudioFinished;//[Offset: 0x988, Size: 0x10] 0x7e617a8600
	delegate OnAudioPlaybackPercent;//[Offset: 0x9b0, Size: 0x10] 0x7e617a8680
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x9d8, Size: 0x10] 0x7e617a8700
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0xa00, Size: 0x10] 0x7e617a8780
	delegate OnQueueSubtitles;//[Offset: 0xa28, Size: 0x10] 0x7e617a8800
	SceneComponent* AutoAttachParent;//[Offset: 0xa48, Size: 0x8] 0x7e617a8880
	FName AutoAttachSocketName;//[Offset: 0xa50, Size: 0x8] 0x7e617a8900
	void StopDelayed(float DelayTime);// 0x224158ebd041 0x7e61798200
	void Stop();// 0x224058ebd041 0x7e617982e0
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x223f58ebd041 0x7e617983c0
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x223e58ebd041 0x7e617984a0
	void SetUISound(bool bInUISound);// 0x223d58ebd041 0x7e61798580
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x223c58ebd041 0x7e61798660
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x223b58ebd041 0x7e61798740
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x223a58ebd041 0x7e61798820
	void SetSound(SoundBase* NewSound);// 0x223958ebd041 0x7e61798900
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x223858ebd041 0x7e617989e0
	void SetPaused(bool bPause);// 0x223758ebd041 0x7e61798ac0
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x223658ebd041 0x7e61798ba0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x223558ebd041 0x7e61798c80
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x223458ebd041 0x7e61798d60
	void SetIntParameter(FName InName, int inInt);// 0x223358ebd041 0x7e61798e40
	void SetFloatParameter(FName InName, float InFloat);// 0x223258ebd041 0x7e61798f20
	void SetBoolParameter(FName InName, bool InBool);// 0x227358ebd041 0x7e61799000
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x223058ebd041 0x7e61795720
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x222f58ebd041 0x7e61795800
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x222e58ebd041 0x7e617958e0
	void Play(float StartTime);// 0x222d58ebd041 0x7e617959c0
	bool IsVirtualized();// 0x222c58ebd041 0x7e61795aa0
	bool IsPlaying();// 0x222b58ebd041 0x7e61795b80
	bool HasCookedFFTData();// 0x222a58ebd041 0x7e61795c60
	bool HasCookedAmplitudeEnvelopeData();// 0x222958ebd041 0x7e61795d40
	enum GetPlayState();// 0x222858ebd041 0x7e61795e20
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x222758ebd041 0x7e61795f00
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x222658ebd041 0x7e61795fe0
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x222558ebd041 0x7e617960c0
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x222458ebd041 0x7e617961a0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x222358ebd041 0x7e61796280
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x222258ebd041 0x7e61796360
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x222158ebd041 0x7e61796440
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x222058ebd041 0x7e61796520
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x221f58ebd041 0x7e61796600

--------------------------------
Class: QuartzClockHandle.Object
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary, out QuartzClockHandle* ClockHandle);// 0x2aec58ebd041 0x7e61980160
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2aeb58ebd041 0x7e61980240
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x2aea58ebd041 0x7e61980320
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x2ae958ebd041 0x7e61980400
	void StopClock(const Object* WorldContextObject, bool CancelPendingEvents, out QuartzClockHandle* ClockHandle);// 0x2ae858ebd041 0x7e619804e0
	void StartOtherClock(const Object* WorldContextObject, FName OtherClockName, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate);// 0x2ae758ebd041 0x7e619805c0
	void StartClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2ae658ebd041 0x7e619806a0
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float TicksPerSecond);// 0x2ae558ebd041 0x7e61980780
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float ThirtySecondsNotesPerMinute);// 0x2ae458ebd041 0x7e61980860
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float SecondsPerTick);// 0x2ae358ebd041 0x7e61980940
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float MillisecondsPerTick);// 0x2ae258ebd041 0x7e61980a20
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float BeatsPerMinute);// 0x2ae158ebd041 0x7e61980b00
	void ResumeClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2ae058ebd041 0x7e61980be0
	void ResetTransportQuantized(const Object* WorldContextObject, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, out QuartzClockHandle* ClockHandle);// 0x2adf58ebd041 0x7e61980cc0
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0x2ade58ebd041 0x7e61980da0
	void PauseClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2add58ebd041 0x7e61980e80
	bool IsClockRunning(const Object* WorldContextObject);// 0x2adc58ebd041 0x7e61980f60
	float GetTicksPerSecond(const Object* WorldContextObject);// 0x2adb58ebd041 0x7e61981040
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0x2ada58ebd041 0x7e61981120
	float GetSecondsPerTick(const Object* WorldContextObject);// 0x2ad958ebd041 0x7e61981200
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0x2ad858ebd041 0x7e619812e0
	float GetEstimatedRunTime(const Object* WorldContextObject);// 0x2ad758ebd041 0x7e619813c0
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, out const enum QuantizationType, float Multiplier);// 0x2ad658ebd041 0x7e619814a0
	QuartzTransportTimeStamp GetCurrentTimestamp(const Object* WorldContextObject);// 0x2ad558ebd041 0x7e61981580
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0x2ad458ebd041 0x7e61981660

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 0x1] 0x7e84e5d440
	float Multiplier;//[Offset: 0x4, Size: 0x4] 0x7e6165f280
	enum CountingReferencePoint;//[Offset: 0x8, Size: 0x1] 0x7e84e5d4e0
	bool bFireOnClockStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7e6165f380
	bool bCancelCommandIfClockIsNotRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x7e6165f400
	bool bResetClockOnQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1] 0x7e6165f480
	bool bResumeClockOnQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7e6165f500

--------------------------------
Class: QuartzTransportTimeStamp
	int Bars;//[Offset: 0x0, Size: 0x4] 0x7e6165f580
	int Beat;//[Offset: 0x4, Size: 0x4] 0x7e6165f600
	float BeatFraction;//[Offset: 0x8, Size: 0x4] 0x7e6165f680
	float Seconds;//[Offset: 0xc, Size: 0x4] 0x7e6165f700

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10] 0x7e84e5fe20
	float PlaybackTime;//[Offset: 0x10, Size: 0x4] 0x7e6166ca80
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x7e6166cb00

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x7e6166cb80
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x7e6166cc00
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4] 0x7e6166cc80

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4] 0x7e6166c880
	float PlaybackTime;//[Offset: 0x4, Size: 0x4] 0x7e6166c900
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8] 0x7e6166c980

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: AnimationAssetExtensions.BlueprintFunctionLibrary.Object

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4] 0x7e619aa180
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10] 0x7e61975560
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e619aa280
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7e619aa300
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x7e619aa380
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x7e619aa400
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7e619aa480
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7e619aa500
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x7e619a8480
	TimecodeCustomAttributeNameSettings BoneTimecodeCustomAttributeNameSettings;//[Offset: 0x58, Size: 0x38] 0x7e619a8500
	CustomAttributeSetting[] BoneCustomAttributesNames;//[Offset: 0x90, Size: 0x10] 0x7e61975600
	FString[] BoneNamesWithCustomAttributes;//[Offset: 0xa0, Size: 0x10] 0x7e619756a0
	<FName,enum> AttributeBlendModes;//[Offset: 0xb0, Size: 0x50] 0x7e6167d540
	enum DefaultAttributeBlendMode;//[Offset: 0x100, Size: 0x1] 0x7e619757e0
	FString[] TransformAttributeNames;//[Offset: 0x108, Size: 0x10] 0x7e61975880
	MirrorFindReplaceExpression[] MirrorFindReplaceExpressions;//[Offset: 0x118, Size: 0x10] 0x7e61975920
	FString[] GetBoneCustomAttributeNamesToImport();// 0x2c4f58ebd041 0x7e619b3dc0

--------------------------------
Class: TimecodeCustomAttributeNameSettings
	FName HourAttributeName;//[Offset: 0x0, Size: 0x8] 0x7e61617c80
	FName MinuteAttributeName;//[Offset: 0x8, Size: 0x8] 0x7e61617d00
	FName SecondAttributeName;//[Offset: 0x10, Size: 0x8] 0x7e61617d80
	FName FrameAttributeName;//[Offset: 0x18, Size: 0x8] 0x7e61617e00
	FName SubframeAttributeName;//[Offset: 0x20, Size: 0x8] 0x7e61617e80
	FName RateAttributeName;//[Offset: 0x28, Size: 0x8] 0x7e61617f00
	FName TakenameAttributeName;//[Offset: 0x30, Size: 0x8] 0x7e61617f80

--------------------------------
Class: CustomAttributeSetting
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7e61618000
	FString Meaning;//[Offset: 0x10, Size: 0x10] 0x7e61618080

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xa8, Size: 0x8] 0x7e619a9f00
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0x10] 0x7e619754c0
	bool bIsTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7e619aa000
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x7e619aa080
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1] 0x7e619aa100

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e615f2200
	LinearColor Color;//[Offset: 0x8, Size: 0x10] 0x7e615f2280

--------------------------------
Class: AnimBlueprintClassSubsystem_PropertyAccess.Object

--------------------------------
Class: AnimBlueprintGeneratedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x2c0, Size: 0x4] 0x7e61703200
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1] 0x7e61703280
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1] 0x7e61703300
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x2c8, Size: 0x10] 0x7e61697680
	ActorComponent*[] ComponentTemplates;//[Offset: 0x2d8, Size: 0x10] 0x7e61697720
	TimelineTemplate*[] Timelines;//[Offset: 0x2e8, Size: 0x10] 0x7e616977c0
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x2f8, Size: 0x10] 0x7e61697860
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x308, Size: 0x8] 0x7e61703580
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x310, Size: 0x8] 0x7e61703600
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x318, Size: 0x8] 0x7e61703680
	Function* UberGraphFunction;//[Offset: 0x328, Size: 0x8] 0x7e61703700
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x330, Size: 0x50] 0x7e61679700

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x3c0, Size: 0x10] 0x7e61977b80
	Skeleton* TargetSkeleton;//[Offset: 0x3d0, Size: 0x8] 0x7e619a9900
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x3d8, Size: 0x10] 0x7e619752e0
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x3e8, Size: 0x50] 0x7e6167d300
	FName[] SyncGroupNames;//[Offset: 0x4b8, Size: 0x10] 0x7e61975380
	<FName,GraphAssetPlayerInformation> GraphAssetPlayerInformation;//[Offset: 0x4c8, Size: 0x50] 0x7e6167d3c0
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x518, Size: 0x50] 0x7e6167d480
	AnimNodeData[] AnimNodeData;//[Offset: 0x568, Size: 0x10] 0x7e61975420
	<ScriptStruct*,AnimNodeStructData> NodeTypeMap;//[Offset: 0x578, Size: 0x50] 0x7e6167d600

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8] 0x7e615fc200
	int InitialState;//[Offset: 0x8, Size: 0x4] 0x7e615fc280
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10] 0x7e84e559c0
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10] 0x7e84e55a60

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x7e615fc400
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10] 0x7e84e55b00
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4] 0x7e615fc500
	int StartNotify;//[Offset: 0x1c, Size: 0x4] 0x7e615fc580
	int EndNotify;//[Offset: 0x20, Size: 0x4] 0x7e615fc600
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4] 0x7e615fa580
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e615fa600
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4] 0x7e615fa680
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10] 0x7e84e55ba0
	int[] LayerNodeIndices;//[Offset: 0x40, Size: 0x10] 0x7e84e55c40
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e615fa800

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4] 0x7e615fa880
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4] 0x7e615fa900
	int TransitionIndex;//[Offset: 0x8, Size: 0x4] 0x7e615fa980
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7e615faa00
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7e615faa80
	FName SyncGroupNameToRequireValidMarkersRule;//[Offset: 0x10, Size: 0x8] 0x7e615fab00
	int[] PoseEvaluatorLinks;//[Offset: 0x18, Size: 0x10] 0x7e84e55ce0

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4] 0x7e615fac00
	int NextState;//[Offset: 0xc, Size: 0x4] 0x7e615fac80
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4] 0x7e615fad00
	int StartNotify;//[Offset: 0x14, Size: 0x4] 0x7e615fad80
	int EndNotify;//[Offset: 0x18, Size: 0x4] 0x7e615fae00
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4] 0x7e615fae80
	enum BlendMode;//[Offset: 0x20, Size: 0x1] 0x7e84e55d80
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8] 0x7e615faf80
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8] 0x7e615fb000
	byte LogicType;//[Offset: 0x38, Size: 0x1] 0x7e615fb080

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x7e615fb380

--------------------------------
Class: CachedPoseIndices
	int[] OrderedSavedPoseNodeIndices;//[Offset: 0x0, Size: 0x10] 0x7e84e54e80

--------------------------------
Class: GraphAssetPlayerInformation
	int[] PlayerNodeIndices;//[Offset: 0x0, Size: 0x10] 0x7e84e54de0

--------------------------------
Class: AnimGraphBlendOptions
	float BlendInTime;//[Offset: 0x0, Size: 0x4] 0x7e615f3b80
	float BlendOutTime;//[Offset: 0x4, Size: 0x4] 0x7e615f3c00

--------------------------------
Class: AnimNodeData
	interface class None* AnimClassInterface;//[Offset: 0x0, Size: 0x10] 0x7e615f7e80
	uint32[] Entries;//[Offset: 0x10, Size: 0x10] 0x7e84e54340
	int NodeIndex;//[Offset: 0x20, Size: 0x4] 0x7e615f7f80
	enum Flags;//[Offset: 0x24, Size: 0x4] 0x7e84e543e0

--------------------------------
Class: AnimNodeStructData
	<FName,int> NameToIndexMap;//[Offset: 0x0, Size: 0x50] 0x7e615e5200
	int NumProperties;//[Offset: 0x50, Size: 0x4] 0x7e615f7e00

--------------------------------
Class: AnimClassData.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x30, Size: 0x10] 0x7e61977360
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8] 0x7e619aaf80
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x48, Size: 0x10] 0x7e61977400
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x58, Size: 0x50] 0x7e6167d0c0
	AnimBlueprintFunction[] AnimBlueprintFunctions;//[Offset: 0xa8, Size: 0x10] 0x7e619774a0
	AnimBlueprintFunctionData[] AnimBlueprintFunctionData;//[Offset: 0xb8, Size: 0x10] 0x7e61977540
	AnimNodeProperties(FieldPathProperty)[] AnimNodeProperties;//[Offset: 0xc8, Size: 0x10] 0x7e619775e0
	LinkedAnimGraphNodeProperties(FieldPathProperty)[] LinkedAnimGraphNodeProperties;//[Offset: 0xe8, Size: 0x10] 0x7e61977680
	LinkedAnimLayerNodeProperties(FieldPathProperty)[] LinkedAnimLayerNodeProperties;//[Offset: 0x108, Size: 0x10] 0x7e61977720
	PreUpdateNodeProperties(FieldPathProperty)[] PreUpdateNodeProperties;//[Offset: 0x128, Size: 0x10] 0x7e619777c0
	DynamicResetNodeProperties(FieldPathProperty)[] DynamicResetNodeProperties;//[Offset: 0x148, Size: 0x10] 0x7e61977860
	StateMachineNodeProperties(FieldPathProperty)[] StateMachineNodeProperties;//[Offset: 0x168, Size: 0x10] 0x7e61977900
	InitializationNodeProperties(FieldPathProperty)[] InitializationNodeProperties;//[Offset: 0x188, Size: 0x10] 0x7e619779a0
	<FName,GraphAssetPlayerInformation> GraphNameAssetPlayers;//[Offset: 0x1a8, Size: 0x50] 0x7e6167d180
	FName[] SyncGroupNames;//[Offset: 0x1f8, Size: 0x10] 0x7e61977a40
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x208, Size: 0x50] 0x7e6167d240

--------------------------------
Class: AnimBlueprintFunction
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e615f3d80
	FName Group;//[Offset: 0x8, Size: 0x8] 0x7e615f3e00
	int OutputPoseNodeIndex;//[Offset: 0x10, Size: 0x4] 0x7e615f3e80
	FName[] InputPoseNames;//[Offset: 0x18, Size: 0x10] 0x7e84e54f20
	int[] InputPoseNodeIndices;//[Offset: 0x28, Size: 0x10] 0x7e84e54fc0
	bool bImplemented;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7e615f4000

--------------------------------
Class: AnimBlueprintFunctionData
	FieldPathProperty OutputPoseNodeProperty;//[Size: 0x20] 0x7e615f4080
	InputPoseNodeProperties(FieldPathProperty)[] InputPoseNodeProperties;//[Offset: 0x20, Size: 0x10] 0x7e84e55060
	InputProperties(FieldPathProperty)[] InputProperties;//[Offset: 0x30, Size: 0x10] 0x7e84e55100

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0xa8, Size: 0x10] 0x7e619aac80

--------------------------------
Class: AnimCompress.AnimBoneCompressionCodec.Object
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e619aaa80
	byte TranslationCompressionFormat;//[Offset: 0x39, Size: 0x1] 0x7e619aab00
	byte RotationCompressionFormat;//[Offset: 0x3a, Size: 0x1] 0x7e619aab80
	byte ScaleCompressionFormat;//[Offset: 0x3b, Size: 0x1] 0x7e619aac00

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x7e619aa600
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x7e619aa680
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x7e619aa700
	float MaxEffectorDiff;//[Offset: 0x48, Size: 0x4] 0x7e619aa780
	float MinEffectorDiff;//[Offset: 0x4c, Size: 0x4] 0x7e619aa800
	float EffectorDiffSocket;//[Offset: 0x50, Size: 0x4] 0x7e619aa880
	float ParentKeyScale;//[Offset: 0x54, Size: 0x4] 0x7e619aa900
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7e619aa980
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7e619aaa00

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxZeroingThreshold;//[Offset: 0x5c, Size: 0x4] 0x7e619abc80
	float MaxPosDiffBitwise;//[Offset: 0x60, Size: 0x4] 0x7e619abd00
	float MaxAngleDiffBitwise;//[Offset: 0x64, Size: 0x4] 0x7e619abd80
	float MaxScaleDiffBitwise;//[Offset: 0x68, Size: 0x4] 0x7e619abe00
	byte[] AllowedRotationFormats;//[Offset: 0x70, Size: 0x10] 0x7e619770e0
	byte[] AllowedTranslationFormats;//[Offset: 0x80, Size: 0x10] 0x7e61977180
	byte[] AllowedScaleFormats;//[Offset: 0x90, Size: 0x10] 0x7e61977220
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7e619ac000
	float ResampledFramerate;//[Offset: 0xa4, Size: 0x4] 0x7e619ac080
	int MinKeysForResampling;//[Offset: 0xa8, Size: 0x4] 0x7e619ac100
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7e619ac180
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x7e619ac200
	int TrackHeightBias;//[Offset: 0xb0, Size: 0x4] 0x7e619ac280
	float ParentingDivisor;//[Offset: 0xb4, Size: 0x4] 0x7e619ac300
	float ParentingDivisorExponent;//[Offset: 0xb8, Size: 0x4] 0x7e619ac380
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x7e619ac400
	float RotationErrorSourceRatio;//[Offset: 0xc0, Size: 0x4] 0x7e619ac480
	float TranslationErrorSourceRatio;//[Offset: 0xc4, Size: 0x4] 0x7e619ac500
	float ScaleErrorSourceRatio;//[Offset: 0xc8, Size: 0x4] 0x7e619ac580
	float MaxErrorPerTrackRatio;//[Offset: 0xcc, Size: 0x4] 0x7e619ac600
	float PerturbationProbeSize;//[Offset: 0xd0, Size: 0x4] 0x7e619aa580

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.AnimBoneCompressionCodec.Object
	int MinKeys;//[Offset: 0x3c, Size: 0x4] 0x7e619abb80
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7e619abc00

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x7e619aba00
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x7e619aba80
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x7e619abb00

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimDataModel.Object
	int BracketCounter;//[Offset: 0x28, Size: 0x4] 0x7e619aca00
	delegate ModifiedEventDynamic;//[Offset: 0x30, Size: 0x10] 0x7e619aca80
	BoneAnimationTrack[] BoneAnimationTracks;//[Offset: 0x58, Size: 0x10] 0x7e61976c80
	float PlayLength;//[Offset: 0x68, Size: 0x4] 0x7e619acb80
	FrameRate FrameRate;//[Offset: 0x6c, Size: 0x8] 0x7e619acc00
	int NumberOfFrames;//[Offset: 0x74, Size: 0x4] 0x7e619acc80
	int NumberOfKeys;//[Offset: 0x78, Size: 0x4] 0x7e619acd00
	AnimationCurveData CurveData;//[Offset: 0x80, Size: 0x20] 0x7e619acd80
	AnimatedBoneAttribute[] AnimatedBoneAttributes;//[Offset: 0xa0, Size: 0x10] 0x7e61976d20
	RawAnimSequenceTrack[] RawAnimationTracks;//[Offset: 0xb0, Size: 0x10] 0x7e61976dc0
	FName[] RawAnimationTrackNames;//[Offset: 0xc0, Size: 0x10] 0x7e61976e60
	TrackToSkeletonMap[] RawAnimationTrackSkeletonMappings;//[Offset: 0xd0, Size: 0x10] 0x7e61976f00
	RawCurveTracks RawCurveTracks;//[Offset: 0xe8, Size: 0x10] 0x7e619ad000
	bool IsValidBoneTrackIndex(int TrackIndex);// 0x2c5e58ebd041 0x7e619b6a60
	float GetPlayLength();// 0x2c5d58ebd041 0x7e619b6b40
	int GetNumBoneTracks();// 0x2c5c58ebd041 0x7e619b6c20
	int GetNumberOfTransformCurves();// 0x2c5b58ebd041 0x7e619b6d00
	int GetNumberOfKeys();// 0x2c5a58ebd041 0x7e619b6de0
	int GetNumberOfFrames();// 0x2c5958ebd041 0x7e619b6ec0
	int GetNumberOfFloatCurves();// 0x2c5858ebd041 0x7e619b6fa0
	FrameRate GetFrameRate();// 0x2c5758ebd041 0x7e619b7080
	void GetBoneTrackNames(out FName[] OutNames);// 0x2c5658ebd041 0x7e619b7160
	int GetBoneTrackIndexByName(FName TrackName);// 0x2c5558ebd041 0x7e619b7240
	int GetBoneTrackIndex(out const BoneAnimationTrack Track);// 0x2c9658ebd041 0x7e619b7320
	BoneAnimationTrack GetBoneTrackByName(FName TrackName);// 0x2c5358ebd041 0x7e619b3a40
	BoneAnimationTrack GetBoneTrackByIndex(int TrackIndex);// 0x2c5258ebd041 0x7e619b3b20
	BoneAnimationTrack[] GetBoneAnimationTracks();// 0x2c5158ebd041 0x7e619b3c00
	AnimSequence* GetAnimationSequence();// 0x2c5058ebd041 0x7e619b3ce0

--------------------------------
Class: BoneAnimationTrack
	RawAnimSequenceTrack InternalTrackData;//[Offset: 0x0, Size: 0x30] 0x7e615f5080
	int BoneTreeIndex;//[Offset: 0x30, Size: 0x4] 0x7e615f5100
	FName Name;//[Offset: 0x34, Size: 0x8] 0x7e615f5180

--------------------------------
Class: RawAnimSequenceTrack
	Vector3f[] PosKeys;//[Offset: 0x0, Size: 0x10] 0x7e84e54ac0
	Quat4f[] RotKeys;//[Offset: 0x10, Size: 0x10] 0x7e84e54b60
	Vector3f[] ScaleKeys;//[Offset: 0x20, Size: 0x10] 0x7e84e54c00

--------------------------------
Class: Vector3f
	float X;//[Offset: 0x0, Size: 0x4] 0x7e8412f680
	float Y;//[Offset: 0x4, Size: 0x4] 0x7e8412f600
	float Z;//[Offset: 0x8, Size: 0x4] 0x7e8412f580

--------------------------------
Class: Quat4f
	float X;//[Offset: 0x0, Size: 0x4] 0x7e841e3180
	float Y;//[Offset: 0x4, Size: 0x4] 0x7e841e3100
	float Z;//[Offset: 0x8, Size: 0x4] 0x7e841e3080
	float W;//[Offset: 0xc, Size: 0x4] 0x7e841e3000

--------------------------------
Class: AnimationCurveData
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10] 0x7e84e54980
	TransformCurve[] TransformCurves;//[Offset: 0x10, Size: 0x10] 0x7e84e54a20

--------------------------------
Class: TransformCurve.AnimCurveBase
	VectorCurve TranslationCurve;//[Offset: 0x18, Size: 0x198] 0x7e615f3200
	VectorCurve RotationCurve;//[Offset: 0x1b0, Size: 0x198] 0x7e615f3280
	VectorCurve ScaleCurve;//[Offset: 0x348, Size: 0x198] 0x7e615f3300

--------------------------------
Class: VectorCurve.AnimCurveBase
	RichCurve FloatCurves;//[Offset: 0x18, Size: 0x80] 0x7e615f3380

--------------------------------
Class: AnimatedBoneAttribute
	AnimationAttributeIdentifier Identifier;//[Offset: 0x0, Size: 0x38] 0x7e615f4a80
	AttributeCurve Curve;//[Offset: 0x38, Size: 0xa8] 0x7e615f4d80

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4] 0x7e615fcb00

--------------------------------
Class: AnimationDataModelNotifiesExtensions.BlueprintFunctionLibrary.Object

--------------------------------
Class: AnimLayerInterface.Interface.Object

--------------------------------
Class: AnimNotifyMirrorInspectionLibrary.BlueprintFunctionLibrary.Object
	bool IsTriggeredByMirroredAnimation(out const AnimNotifyEventReference EventReference);// 0x2c6658ebd041 0x7e619b6360
	MirrorDataTable* GetMirrorDataTable(out const AnimNotifyEventReference EventReference);// 0x2c6558ebd041 0x7e619b6440

--------------------------------
Class: AnimNotifyStateMachineInspectionLibrary.BlueprintFunctionLibrary.Object
	bool IsTriggeredByStateMachine(out const AnimNotifyEventReference EventReference, AnimInstance* AnimInstance, FName StateMachineName);// 0x2c6958ebd041 0x7e619b60c0
	bool IsTriggeredByStateInStateMachine(out const AnimNotifyEventReference EventReference, AnimInstance* AnimInstance, FName StateMachineName, FName StateName);// 0x2c6858ebd041 0x7e619b61a0
	bool IsTriggeredByState(out const AnimNotifyEventReference EventReference, AnimInstance* AnimInstance, FName StateName);// 0x2c6758ebd041 0x7e619b6280

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x7e619aee80
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x7e619aef00
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18] 0x7e619aef80
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18] 0x7e619af000
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7e619af080

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x7e619aea00
	FName FirstSocketName;//[Offset: 0x38, Size: 0x8] 0x7e619aea80
	FName SecondSocketName;//[Offset: 0x40, Size: 0x8] 0x7e619aeb00
	byte WidthScaleMode;//[Offset: 0x48, Size: 0x1] 0x7e619aeb80
	FName WidthScaleCurve;//[Offset: 0x4c, Size: 0x8] 0x7e619aec00
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7e619aec80
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2c6a58ebd041 0x7e619b5fe0

--------------------------------
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8] 0x7e619aff80
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18] 0x7e619ae780
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18] 0x7e619ae800
	Vector Scale;//[Offset: 0x70, Size: 0x18] 0x7e619ae880
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7e619ae900
	FName SocketName;//[Offset: 0xb4, Size: 0x8] 0x7e619ae980

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x38, Size: 0x8] 0x7e619afd00
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4] 0x7e619afd80
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4] 0x7e619afe00
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e619afe80
	FName AttachName;//[Offset: 0x4c, Size: 0x8] 0x7e619aff00

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e619d0880
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10] 0x7e61978bc0
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10] 0x7e61978c60
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10] 0x7e61978d00
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10] 0x7e61978da0
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10] 0x7e61978e40
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10] 0x7e61978ee0
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8] 0x7e619d0c00
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8] 0x7e619d0c80

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10] 0x7e84e55ec0

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x348, Size: 0x8] 0x7e619d1d00
	delegate PostEvaluateAnimEvent;//[Offset: 0x350, Size: 0x10] 0x7e619d1d80
	void StopAnim();// 0x2c7958ebd041 0x7e619b8c80
	void SetReverse(bool bInReverse);// 0x2c7858ebd041 0x7e619b8d60
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0x2c7758ebd041 0x7e619b8e40
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0x2c7658ebd041 0x7e619b8f20
	void SetPosition(float InPosition, bool bFireNotifies);// 0x2cb758ebd041 0x7e619b9000
	void SetPlayRate(float InPlayRate);// 0x2c7458ebd041 0x7e619b5720
	void SetPlaying(bool bIsPlaying);// 0x2c7358ebd041 0x7e619b5800
	void SetMirrorDataTable(const MirrorDataTable* MirrorDataTable);// 0x2c7258ebd041 0x7e619b58e0
	void SetLooping(bool bIsLooping);// 0x2c7158ebd041 0x7e619b59c0
	void SetBlendSpacePosition(out const Vector InPosition);// 0x2c7058ebd041 0x7e619b5aa0
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0x2c6f58ebd041 0x7e619b5b80
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0x2c6e58ebd041 0x7e619b5c60
	MirrorDataTable* GetMirrorDataTable();// 0x2c6d58ebd041 0x7e619b5d40
	float GetLength();// 0x2c6c58ebd041 0x7e619b5e20
	AnimationAsset* GetAnimationAsset();// 0x2c6b58ebd041 0x7e619b5f00

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object
	int NumberOfKeys;//[Offset: 0xa8, Size: 0x4] 0x7e619d1880
	enum Interpolation;//[Offset: 0xac, Size: 0x1] 0x7e61978b20
	FName RetargetSource;//[Offset: 0xb0, Size: 0x8] 0x7e619d1980
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xc8, Size: 0x8] 0x7e619d1a00
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd0, Size: 0x8] 0x7e619d1a80
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x7e619d1b00
	byte RootMotionRootLock;//[Offset: 0xd9, Size: 0x1] 0x7e619d1b80
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x7e619d1c00
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1] 0x7e619d1c80

--------------------------------
Class: RawAnimSequenceTrackExtensions.BlueprintFunctionLibrary.Object
	Vector[] GetScaleKeys(out const RawAnimSequenceTrack Track);// 0x2c7c58ebd041 0x7e619b89e0
	Quat[] GetRotationalKeys(out const RawAnimSequenceTrack Track);// 0x2c7b58ebd041 0x7e619b8ac0
	Vector[] GetPositionalKeys(out const RawAnimSequenceTrack Track);// 0x2c7a58ebd041 0x7e619b8ba0

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xb0, Size: 0x10] 0x7e8488fe80
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc0, Size: 0x10] 0x7e8488fe00
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd0, Size: 0x10] 0x7e8488fd80
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe0, Size: 0x10] 0x7e8488fd00
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xf0, Size: 0x10] 0x7e8488fc80
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x100, Size: 0x10] 0x7e8488fc00
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x110, Size: 0x10] 0x7e8488fb80
	delegate OnTemperatureChangeDelegate;//[Offset: 0x120, Size: 0x10] 0x7e8488fa00
	delegate OnLowPowerModeDelegate;//[Offset: 0x130, Size: 0x10] 0x7e8488f900

--------------------------------
Class: PhysicsSettingsCore.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x38, Size: 0x4] 0x7e61858d00
	float DefaultTerminalVelocity;//[Offset: 0x3c, Size: 0x4] 0x7e61858d80
	float DefaultFluidFriction;//[Offset: 0x40, Size: 0x4] 0x7e61858e00
	int SimulateScratchMemorySize;//[Offset: 0x44, Size: 0x4] 0x7e61858e80
	int RagdollAggregateThreshold;//[Offset: 0x48, Size: 0x4] 0x7e61858f00
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x4c, Size: 0x4] 0x7e61858f80
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e61859000
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7e61859080
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x7e61859100
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x7e61859180
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7e61859200
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7e61859280
	float BounceThresholdVelocity;//[Offset: 0x58, Size: 0x4] 0x7e61859300
	byte FrictionCombineMode;//[Offset: 0x5c, Size: 0x1] 0x7e61859380
	byte RestitutionCombineMode;//[Offset: 0x5d, Size: 0x1] 0x7e61859400
	float MaxAngularVelocity;//[Offset: 0x60, Size: 0x4] 0x7e61859480
	float MaxDepenetrationVelocity;//[Offset: 0x64, Size: 0x4] 0x7e61857400
	float ContactOffsetMultiplier;//[Offset: 0x68, Size: 0x4] 0x7e61857480
	float MinContactOffset;//[Offset: 0x6c, Size: 0x4] 0x7e61857500
	float MaxContactOffset;//[Offset: 0x70, Size: 0x4] 0x7e61857580
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x7e61857600
	byte DefaultShapeComplexity;//[Offset: 0x75, Size: 0x1] 0x7e61857680
	ChaosSolverConfiguration SolverOptions;//[Offset: 0x78, Size: 0x6c] 0x7e61857700

--------------------------------
Class: ChaosSolverConfiguration
	int Iterations;//[Offset: 0x0, Size: 0x4] 0x7e61575c80
	int CollisionPairIterations;//[Offset: 0x4, Size: 0x4] 0x7e61575d00
	int PushOutIterations;//[Offset: 0x8, Size: 0x4] 0x7e61575d80
	int CollisionPushOutPairIterations;//[Offset: 0xc, Size: 0x4] 0x7e61575e00
	float CollisionMarginFraction;//[Offset: 0x10, Size: 0x4] 0x7e61575e80
	float CollisionMarginMax;//[Offset: 0x14, Size: 0x4] 0x7e61575f00
	float CollisionCullDistance;//[Offset: 0x18, Size: 0x4] 0x7e61575f80
	float CollisionMaxPushOutVelocity;//[Offset: 0x1c, Size: 0x4] 0x7e61576000
	int JointPairIterations;//[Offset: 0x20, Size: 0x4] 0x7e61576080
	int JointPushOutPairIterations;//[Offset: 0x24, Size: 0x4] 0x7e61576100
	float ClusterConnectionFactor;//[Offset: 0x28, Size: 0x4] 0x7e61576180
	enum ClusterUnionConnectionType;//[Offset: 0x2c, Size: 0x1] 0x7e84dde520
	bool bGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x7e61576280
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x30, Size: 0x10] 0x7e61574400
	bool bGenerateBreakData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7e61574480
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x44, Size: 0x10] 0x7e61574700
	bool bGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7e61574780
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x58, Size: 0x10] 0x7e61574a00
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7e61574a80

--------------------------------
Class: SolverCollisionFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61576300
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7e61574280
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7e61574300
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x7e61574380

--------------------------------
Class: SolverBreakingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61574500
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7e61574580
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7e61574600
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x7e61574680

--------------------------------
Class: SolverTrailingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61574800
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7e61574880
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7e61574900
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x7e61574980

--------------------------------
Class: PhysicsSettings.PhysicsSettingsCore.DeveloperSettings.Object
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0xe4, Size: 0x34] 0x7e61b84700
	byte LockedAxis;//[Offset: 0x118, Size: 0x1] 0x7e61b84780
	byte DefaultDegreesOfFreedom;//[Offset: 0x119, Size: 0x1] 0x7e61b84800
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x7e61b84880
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x7e61b84900
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x7e61b84980
	bool bDisableKinematicStaticPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1] 0x7e61b84a00
	bool bDisableKinematicKinematicPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 0x1] 0x7e61b84a80
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f, Size: 0x1] 0x7e61b84b00
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x7e61b84b80
	float AnimPhysicsMinDeltaTime;//[Offset: 0x124, Size: 0x4] 0x7e61b84c00
	bool bSimulateAnimPhysicsAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x7e61b84c80
	float MinPhysicsDeltaTime;//[Offset: 0x12c, Size: 0x4] 0x7e61b84d00
	float MaxPhysicsDeltaTime;//[Offset: 0x130, Size: 0x4] 0x7e61b84d80
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1] 0x7e61b84e00
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1] 0x7e61b84e80
	bool bTickPhysicsAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 0x1] 0x7e61b84f00
	float AsyncFixedTimeStepSize;//[Offset: 0x138, Size: 0x4] 0x7e61b84f80
	float MaxSubstepDeltaTime;//[Offset: 0x13c, Size: 0x4] 0x7e61b85000
	int MaxSubsteps;//[Offset: 0x140, Size: 0x4] 0x7e61b85080
	float SyncSceneSmoothingFactor;//[Offset: 0x144, Size: 0x4] 0x7e61b85100
	float InitialAverageFrameRate;//[Offset: 0x148, Size: 0x4] 0x7e61b85180
	int PhysXTreeRebuildRate;//[Offset: 0x14c, Size: 0x4] 0x7e61b85200
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0x150, Size: 0x10] 0x7e61a5ca40
	BroadphaseSettings DefaultBroadphaseSettings;//[Offset: 0x160, Size: 0x80] 0x7e61b83200
	float MinDeltaVelocityForHitEvents;//[Offset: 0x1e0, Size: 0x4] 0x7e61b83280
	ChaosPhysicsSettings ChaosSettings;//[Offset: 0x1e4, Size: 0x3] 0x7e61b83300

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 0x4] 0x7e6161cb00
	float PingLimit;//[Offset: 0x4, Size: 0x4] 0x7e6161cb80
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 0x4] 0x7e6161cc00
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 0x4] 0x7e6161cc80
	float MaxRestoredStateError;//[Offset: 0x10, Size: 0x4] 0x7e6161cd00
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 0x4] 0x7e6161cd80
	float PositionLerp;//[Offset: 0x18, Size: 0x4] 0x7e6161ce00
	float AngleLerp;//[Offset: 0x1c, Size: 0x4] 0x7e6161ce80
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 0x4] 0x7e6161cf00
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 0x4] 0x7e6161cf80
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 0x4] 0x7e6161d000
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 0x4] 0x7e6161d080
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 0x4] 0x7e6161d100

--------------------------------
Class: PhysicalSurfaceName
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7e6165ba00
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7e6165ba80

--------------------------------
Class: ChaosPhysicsSettings
	enum DefaultThreadingModel;//[Offset: 0x0, Size: 0x1] 0x7e84e5de40
	enum DedicatedThreadTickMode;//[Offset: 0x1, Size: 0x1] 0x7e84e5dee0
	enum DedicatedThreadBufferMode;//[Offset: 0x2, Size: 0x1] 0x7e84e5df80

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10] 0x7e6197bb40
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10] 0x7e6197bbe0
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10] 0x7e6197bc80
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10] 0x7e6197bd20
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10] 0x7e6197bdc0

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61613280
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1] 0x7e61613300
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x7e61613380
	FName ObjectTypeName;//[Offset: 0x2c, Size: 0x8] 0x7e61613400
	ResponseChannel[] CustomResponses;//[Offset: 0x38, Size: 0x10] 0x7e84e58300

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1] 0x7e61615100
	byte DefaultResponse;//[Offset: 0x1, Size: 0x1] 0x7e61615180
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e61615200
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7e61615280
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7e61613200

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61615000
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10] 0x7e84e58260

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8] 0x7e61641e80
	FName NewName;//[Offset: 0x8, Size: 0x8] 0x7e61641f00

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x538, Size: 0x4] 0x7e619d1200
	float ArrowSize;//[Offset: 0x53c, Size: 0x4] 0x7e619d1280
	float ArrowLength;//[Offset: 0x540, Size: 0x4] 0x7e619d1300
	float ScreenSize;//[Offset: 0x544, Size: 0x4] 0x7e619d1380
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1] 0x7e619d1400
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x548, Size: 0x1] 0x7e619d1480
	void SetArrowColor(LinearColor NewColor);// 0x2c7d58ebd041 0x7e619b8900

--------------------------------
Class: AssetExportTask.Object
	Object* Object;//[Offset: 0x28, Size: 0x8] 0x7e619d2d00
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8] 0x7e619d2d80
	FString Filename;//[Offset: 0x38, Size: 0x10] 0x7e619d2e00
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e619d2e80
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x7e619d2f00
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x7e619d2f80
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x7e619d3000
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7e619d3080
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x7e619d3100
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10] 0x7e61978800
	Object* Options;//[Offset: 0x60, Size: 0x8] 0x7e619d1100
	FString[] Errors;//[Offset: 0x68, Size: 0x10] 0x7e619788a0

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8] 0x7e61a51000
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8] 0x7e61a4e280
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10] 0x7e61a510a0
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10] 0x7e61a51140
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4] 0x7e61a4e400
	int TextIndent;//[Offset: 0x5c, Size: 0x4] 0x7e61a4e480
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7e61a4e500
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7e61a4e580
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x7e61a4e600
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8] 0x7e61a4e680
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0x2ea058ebd041 0x7e61a36fa0
	bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0x2e9f58ebd041 0x7e61a37080
	bool RunAssetExportTask(AssetExportTask* Task);// 0x2e9e58ebd041 0x7e61a37160

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x330, Size: 0x10] 0x7e61978760
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x7e619d2680
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x7e619d2700
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1] 0x7e619d2780
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 0x1] 0x7e619d2800
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1] 0x7e619d2880
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1] 0x7e619d2900
	int NumBulkScanRequests;//[Offset: 0x348, Size: 0x4] 0x7e619d2980
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1] 0x7e619d2a00
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1] 0x7e619d2a80
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 0x1] 0x7e619d2b00
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 0x1] 0x7e619d2b80
	bool bHasCompletedInitialScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x7e619d2c00
	int NumberOfSpawnedNotifications;//[Offset: 0x354, Size: 0x4] 0x7e619d2c80

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x38, Size: 0x10] 0x7e61978260
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x48, Size: 0x10] 0x7e61978300
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x58, Size: 0x10] 0x7e619783a0
	PrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules;//[Offset: 0x68, Size: 0x10] 0x7e61978440
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7e619d2180
	bool bShouldManagerDetermineTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x7e619d2200
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x7e619d2280
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x7e619d2300
	bool bShouldWarnAboutInvalidAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7e619d2380
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x80, Size: 0x10] 0x7e619784e0
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x90, Size: 0x10] 0x7e61978580
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0xa0, Size: 0x10] 0x7e61978620
	<FName> MetaDataTagsForAssetRegistry;//[Offset: 0xb0, Size: 0x50] 0x7e619786c0

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x7e615fe100
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28] 0x7e84e574a0
	ClassPtrProperty AssetBaseClassLoaded;//[Size: 0x8] 0x7e84e57540
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e615fe180
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e615fe200
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 0x10] 0x7e84e575e0
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 0x10] 0x7e84e57680
	PrimaryAssetRules Rules;//[Offset: 0x60, Size: 0xc] 0x7e615fe380
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 0x10] 0x7e84e57720
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7e615fe480
	int NumberOfAssets;//[Offset: 0x84, Size: 0x4] 0x7e615fe500

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10] 0x7e8412dd00

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 0x4] 0x7e615fc700
	int ChunkId;//[Offset: 0x4, Size: 0x4] 0x7e615fc780
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7e615fc800
	enum CookRule;//[Offset: 0x9, Size: 0x1] 0x7e84e577c0

--------------------------------
Class: PrimaryAssetRulesOverride
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10] 0x7e615fc680
	PrimaryAssetRules Rules;//[Offset: 0x10, Size: 0xc] 0x7e615fc900

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x7e841e2c00
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8] 0x7e841e2b00

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e841e2c80

--------------------------------
Class: PrimaryAssetRulesCustomOverride
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x7e615fe580
	DirectoryPath FilterDirectory;//[Offset: 0x8, Size: 0x10] 0x7e615fe600
	FString FilterString;//[Offset: 0x18, Size: 0x10] 0x7e615fe680
	PrimaryAssetRules Rules;//[Offset: 0x28, Size: 0xc] 0x7e615fe700

--------------------------------
Class: AssetManagerRedirect
	FString Old;//[Offset: 0x0, Size: 0x10] 0x7e615fc980
	FString New;//[Offset: 0x10, Size: 0x10] 0x7e615fca00

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10] 0x7e619781c0

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8] 0x7e615fdc80
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8] 0x7e615fdd00

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0xec358ebd041 0x7e613d43e0

--------------------------------
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x7e619d3a80
	SaveGame* SaveGameObject;//[Offset: 0x60, Size: 0x8] 0x7e619d3b00
	AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x2c7f58ebd041 0x7e619b8740
	AsyncActionHandleSaveGame* AsyncLoadGameFromSlot(Object* WorldContextObject, FString SlotName, const int UserIndex);// 0x2c7e58ebd041 0x7e619b8820

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7e619d3800
	AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x2c8058ebd041 0x7e619b8660

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7e619d3580
	AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x2c8158ebd041 0x7e619b8580

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7e619d3300
	AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x2c8258ebd041 0x7e619b84a0

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7e619d5180
	AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x2c8358ebd041 0x7e619b83c0

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x7e619d4c80
	AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0x2c8558ebd041 0x7e619b8200
	AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0x2c8458ebd041 0x7e619b82e0

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x278, Size: 0x8] 0x7e619d4c00

--------------------------------
Class: AtmosphericFogComponent.SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	void SetSunMultiplier(float NewSunMultiplier);// 0x2ca458ebd041 0x7e619ba0a0
	void SetStartDistance(float NewStartDistance);// 0x2ca358ebd041 0x7e619ba180
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0x2ca258ebd041 0x7e619ba260
	void SetFogMultiplier(float NewFogMultiplier);// 0x2ca158ebd041 0x7e619ba340
	void SetDistanceScale(float NewDistanceScale);// 0x2ca058ebd041 0x7e619ba420
	void SetDistanceOffset(float NewDistanceOffset);// 0x2c9f58ebd041 0x7e619ba500
	void SetDensityOffset(float NewDensityOffset);// 0x2c9e58ebd041 0x7e619ba5e0
	void SetDensityMultiplier(float NewDensityMultiplier);// 0x2c9d58ebd041 0x7e619ba6c0
	void SetDefaultLightColor(LinearColor NewLightColor);// 0x2c9c58ebd041 0x7e619ba7a0
	void SetDefaultBrightness(float NewBrightness);// 0x2c9b58ebd041 0x7e619ba880
	void SetAltitudeScale(float NewAltitudeScale);// 0x2c9a58ebd041 0x7e619ba960
	void DisableSunDisk(bool NewSunDisk);// 0x2c9958ebd041 0x7e619baa40
	void DisableGroundScattering(bool NewGroundScattering);// 0x2c9858ebd041 0x7e619bab20

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	enum TransformMode;//[Offset: 0x2b0, Size: 0x1] 0x7e6197a380
	float BottomRadius;//[Offset: 0x2b4, Size: 0x4] 0x7e619d5680
	Color GroundAlbedo;//[Offset: 0x2b8, Size: 0x4] 0x7e619d5700
	float AtmosphereHeight;//[Offset: 0x2bc, Size: 0x4] 0x7e619d5780
	float MultiScatteringFactor;//[Offset: 0x2c0, Size: 0x4] 0x7e619d5800
	float TraceSampleCountScale;//[Offset: 0x2c4, Size: 0x4] 0x7e619d5880
	float RayleighScatteringScale;//[Offset: 0x2c8, Size: 0x4] 0x7e619d5900
	LinearColor RayleighScattering;//[Offset: 0x2cc, Size: 0x10] 0x7e619d5980
	float RayleighExponentialDistribution;//[Offset: 0x2dc, Size: 0x4] 0x7e619d5a00
	float MieScatteringScale;//[Offset: 0x2e0, Size: 0x4] 0x7e619d5a80
	LinearColor MieScattering;//[Offset: 0x2e4, Size: 0x10] 0x7e619d5b00
	float MieAbsorptionScale;//[Offset: 0x2f4, Size: 0x4] 0x7e619d5b80
	LinearColor MieAbsorption;//[Offset: 0x2f8, Size: 0x10] 0x7e619d5c00
	float MieAnisotropy;//[Offset: 0x308, Size: 0x4] 0x7e619d5c80
	float MieExponentialDistribution;//[Offset: 0x30c, Size: 0x4] 0x7e619d5d00
	float OtherAbsorptionScale;//[Offset: 0x310, Size: 0x4] 0x7e619d5d80
	LinearColor OtherAbsorption;//[Offset: 0x314, Size: 0x10] 0x7e619d5e00
	TentDistribution OtherTentDistribution;//[Offset: 0x324, Size: 0xc] 0x7e619d5e80
	LinearColor SkyLuminanceFactor;//[Offset: 0x330, Size: 0x10] 0x7e619d5f00
	float AerialPespectiveViewDistanceScale;//[Offset: 0x340, Size: 0x4] 0x7e619d5f80
	float HeightFogContribution;//[Offset: 0x344, Size: 0x4] 0x7e619d6000
	float TransmittanceMinLightElevationAngle;//[Offset: 0x348, Size: 0x4] 0x7e619d6080
	float AerialPerspectiveStartDepth;//[Offset: 0x34c, Size: 0x4] 0x7e619d6100
	Guid bStaticLightingBuiltGUID;//[Offset: 0x390, Size: 0x10] 0x7e619d6180
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0x2c9758ebd041 0x7e619bac00
	void SetRayleighScatteringScale(float NewValue);// 0x2cd858ebd041 0x7e619bace0
	void SetRayleighScattering(LinearColor NewValue);// 0x2c9558ebd041 0x7e619b7400
	void SetRayleighExponentialDistribution(float NewValue);// 0x2c9458ebd041 0x7e619b74e0
	void SetOtherAbsorptionScale(float NewValue);// 0x2c9358ebd041 0x7e619b75c0
	void SetOtherAbsorption(LinearColor NewValue);// 0x2c9258ebd041 0x7e619b76a0
	void SetMultiScatteringFactor(float NewValue);// 0x2c9158ebd041 0x7e619b7780
	void SetMieScatteringScale(float NewValue);// 0x2c9058ebd041 0x7e619b7860
	void SetMieScattering(LinearColor NewValue);// 0x2c8f58ebd041 0x7e619b7940
	void SetMieExponentialDistribution(float NewValue);// 0x2c8e58ebd041 0x7e619b7a20
	void SetMieAnisotropy(float NewValue);// 0x2c8d58ebd041 0x7e619b7b00
	void SetMieAbsorptionScale(float NewValue);// 0x2c8c58ebd041 0x7e619b7be0
	void SetMieAbsorption(LinearColor NewValue);// 0x2c8b58ebd041 0x7e619b7cc0
	void SetHeightFogContribution(float NewValue);// 0x2c8a58ebd041 0x7e619b7da0
	void SetAtmosphereHeight(float NewValue);// 0x2c8958ebd041 0x7e619b7e80
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0x2c8858ebd041 0x7e619b7f60
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0x2c8758ebd041 0x7e619b8040
	LinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(DirectionalLightComponent* DirectionalLight);// 0x2c8658ebd041 0x7e619b8120

--------------------------------
Class: TentDistribution
	float TipAltitude;//[Offset: 0x0, Size: 0x4] 0x7e61667800
	float TipValue;//[Offset: 0x4, Size: 0x4] 0x7e61667880
	float Width;//[Offset: 0x8, Size: 0x4] 0x7e61667900

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x3dc, Size: 0x4] 0x7e61a41b00
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1] 0x7e61a41b80
	float OcclusionMaskDarkness;//[Offset: 0x3e4, Size: 0x4] 0x7e61a41c00
	float OcclusionDepthRange;//[Offset: 0x3e8, Size: 0x4] 0x7e61a41c80
	Vector LightShaftOverrideDirection;//[Offset: 0x3f0, Size: 0x18] 0x7e61a41d00
	float WholeSceneDynamicShadowRadius;//[Offset: 0x408, Size: 0x4] 0x7e61a41d80
	float DynamicShadowDistanceMovableLight;//[Offset: 0x40c, Size: 0x4] 0x7e61a41e00
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x410, Size: 0x4] 0x7e61a41e80
	int DynamicShadowCascades;//[Offset: 0x414, Size: 0x4] 0x7e61a41f00
	float CascadeDistributionExponent;//[Offset: 0x418, Size: 0x4] 0x7e61a41f80
	float CascadeTransitionFraction;//[Offset: 0x41c, Size: 0x4] 0x7e61a42000
	float ShadowDistanceFadeoutFraction;//[Offset: 0x420, Size: 0x4] 0x7e61a42080
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1] 0x7e61a42100
	int FarShadowCascadeCount;//[Offset: 0x428, Size: 0x4] 0x7e61a40080
	float FarShadowDistance;//[Offset: 0x42c, Size: 0x4] 0x7e61a40100
	float DistanceFieldShadowDistance;//[Offset: 0x430, Size: 0x4] 0x7e61a40180
	float LightSourceAngle;//[Offset: 0x434, Size: 0x4] 0x7e61a40200
	float LightSourceSoftAngle;//[Offset: 0x438, Size: 0x4] 0x7e61a40280
	float ShadowSourceAngleFactor;//[Offset: 0x43c, Size: 0x4] 0x7e61a40300
	float TraceDistance;//[Offset: 0x440, Size: 0x4] 0x7e61a40380
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 0x1] 0x7e61a40400
	bool bAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x444, Size: 0x1] 0x7e61a40480
	int AtmosphereSunLightIndex;//[Offset: 0x448, Size: 0x4] 0x7e61a40500
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x44c, Size: 0x10] 0x7e61a40580
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1] 0x7e61a40600
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 0x1] 0x7e61a40680
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 0x1] 0x7e61a40700
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45c, Size: 0x1] 0x7e61a40780
	float CloudShadowStrength;//[Offset: 0x460, Size: 0x4] 0x7e61a40800
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x464, Size: 0x4] 0x7e61a40880
	float CloudShadowOnSurfaceStrength;//[Offset: 0x468, Size: 0x4] 0x7e61a40900
	float CloudShadowDepthBias;//[Offset: 0x46c, Size: 0x4] 0x7e61a40980
	float CloudShadowExtent;//[Offset: 0x470, Size: 0x4] 0x7e61a40a00
	float CloudShadowMapResolutionScale;//[Offset: 0x474, Size: 0x4] 0x7e61a40a80
	float CloudShadowRaySampleCountScale;//[Offset: 0x478, Size: 0x4] 0x7e61a40b00
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x47c, Size: 0x10] 0x7e61a40b80
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x48c, Size: 0x10] 0x7e61a40c00
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49c, Size: 0x1] 0x7e61a40c80
	Color ModulatedShadowColor;//[Offset: 0x4a0, Size: 0x4] 0x7e61a40d00
	float ShadowAmount;//[Offset: 0x4a4, Size: 0x4] 0x7e61a40d80
	void SetShadowSourceAngleFactor(float NewValue);// 0x2e7858ebd041 0x7e61a31f20
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x2e7758ebd041 0x7e61a32000
	void SetShadowCascadeBiasDistribution(float NewValue);// 0x2e7658ebd041 0x7e61a320e0
	void SetShadowAmount(float NewValue);// 0x2e7558ebd041 0x7e61a321c0
	void SetOcclusionMaskDarkness(float NewValue);// 0x2e7458ebd041 0x7e61a322a0
	void SetOcclusionDepthRange(float NewValue);// 0x2e7358ebd041 0x7e61a32380
	void SetLightSourceSoftAngle(float NewValue);// 0x2e7258ebd041 0x7e61a32460
	void SetLightSourceAngle(float NewValue);// 0x2e7158ebd041 0x7e61a32540
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x2e7058ebd041 0x7e61a32620
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x2e6f58ebd041 0x7e61a32700
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x2e6e58ebd041 0x7e61a327e0
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x2e6d58ebd041 0x7e61a328c0
	void SetDynamicShadowCascades(int NewValue);// 0x2e6c58ebd041 0x7e61a329a0
	void SetCascadeTransitionFraction(float NewValue);// 0x2e6b58ebd041 0x7e61a32a80
	void SetCascadeDistributionExponent(float NewValue);// 0x2e6a58ebd041 0x7e61a32b60
	void SetAtmosphereSunLightIndex(int NewValue);// 0x2e6958ebd041 0x7e61a32c40
	void SetAtmosphereSunLight(bool bNewValue);// 0x2e6858ebd041 0x7e61a32d20

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2e0, Size: 0x4] 0x7e61a2fd80
	float MaxDrawDistance;//[Offset: 0x2e4, Size: 0x4] 0x7e61a2fe00
	float MaxDistanceFadeRange;//[Offset: 0x2e8, Size: 0x4] 0x7e61a2fe80
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1] 0x7e61a2ff00
	int ShadowMapChannel;//[Offset: 0x2f0, Size: 0x4] 0x7e61a2ff80
	float MinRoughness;//[Offset: 0x2f8, Size: 0x4] 0x7e61a2e780
	float SpecularScale;//[Offset: 0x2fc, Size: 0x4] 0x7e61a2e800
	float ShadowResolutionScale;//[Offset: 0x300, Size: 0x4] 0x7e61a2e880
	float ShadowBias;//[Offset: 0x304, Size: 0x4] 0x7e61a2e900
	float ShadowSlopeBias;//[Offset: 0x308, Size: 0x4] 0x7e61a2e980
	float ShadowSharpen;//[Offset: 0x30c, Size: 0x4] 0x7e61a2ea00
	float ContactShadowLength;//[Offset: 0x310, Size: 0x4] 0x7e61a2ea80
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 0x1] 0x7e61a2eb00
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 0x1] 0x7e61a2eb80
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 0x1] 0x7e61a2ec00
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 0x1] 0x7e61a2ec80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 0x1] 0x7e61a2ed00
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 0x1] 0x7e61a2ed80
	LightingChannels LightingChannels;//[Offset: 0x315, Size: 0x1] 0x7e61a2ee00
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x318, Size: 0x8] 0x7e61a2ee80
	Vector LightFunctionScale;//[Offset: 0x320, Size: 0x18] 0x7e61a2ef00
	TextureLightProfile* IESTexture;//[Offset: 0x338, Size: 0x8] 0x7e61a2ef80
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1] 0x7e61a2f000
	float IESBrightnessScale;//[Offset: 0x344, Size: 0x4] 0x7e61a2f080
	float LightFunctionFadeDistance;//[Offset: 0x348, Size: 0x4] 0x7e61a2f100
	float DisabledBrightness;//[Offset: 0x34c, Size: 0x4] 0x7e61a2f180
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1] 0x7e61a2f200
	float BloomScale;//[Offset: 0x354, Size: 0x4] 0x7e61a2f280
	float BloomThreshold;//[Offset: 0x358, Size: 0x4] 0x7e61a2f300
	float BloomMaxBrightness;//[Offset: 0x35c, Size: 0x4] 0x7e61a2f380
	Color BloomTint;//[Offset: 0x360, Size: 0x4] 0x7e61a2f400
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1] 0x7e61a2f480
	float RayStartOffsetDepthScale;//[Offset: 0x368, Size: 0x4] 0x7e61a2f500
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x2e6758ebd041 0x7e61a32e00
	void SetUseTemperature(bool bNewValue);// 0x2e6658ebd041 0x7e61a32ee0
	void SetUseIESBrightness(bool bNewValue);// 0x2e6558ebd041 0x7e61a32fc0
	void SetTransmission(bool bNewValue);// 0x2e6458ebd041 0x7e61a330a0
	void SetTemperature(float NewTemperature);// 0x2e6358ebd041 0x7e61a33180
	void SetSpecularScale(float NewValue);// 0x2e6258ebd041 0x7e61a33260
	void SetShadowSlopeBias(float NewValue);// 0x2e6158ebd041 0x7e61a33340
	void SetShadowBias(float NewValue);// 0x2e6058ebd041 0x7e61a33420
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x2e5f58ebd041 0x7e61a33500
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2e5e58ebd041 0x7e61a335e0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2e5d58ebd041 0x7e61a336c0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2e5c58ebd041 0x7e61a337a0
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x2e5b58ebd041 0x7e61a33880
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x2e9c58ebd041 0x7e61a33960
	void SetIntensity(float NewIntensity);// 0x2e5958ebd041 0x7e61a30080
	void SetIndirectLightingIntensity(float NewIntensity);// 0x2e5858ebd041 0x7e61a30160
	void SetIESTexture(TextureLightProfile* NewValue);// 0x2e5758ebd041 0x7e61a30240
	void SetIESBrightnessScale(float NewValue);// 0x2e5658ebd041 0x7e61a30320
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x2e5558ebd041 0x7e61a30400
	void SetEnableLightShaftBloom(bool bNewValue);// 0x2e5458ebd041 0x7e61a304e0
	void SetBloomTint(Color NewValue);// 0x2e5358ebd041 0x7e61a305c0
	void SetBloomThreshold(float NewValue);// 0x2e5258ebd041 0x7e61a306a0
	void SetBloomScale(float NewValue);// 0x2e5158ebd041 0x7e61a30780
	void SetBloomMaxBrightness(float NewValue);// 0x2e5058ebd041 0x7e61a30860
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2e4f58ebd041 0x7e61a30940
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x2e4e58ebd041 0x7e61a30a20

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2b0, Size: 0x10] 0x7e61a2e400
	float Brightness;//[Offset: 0x2c0, Size: 0x4] 0x7e61a2e480
	float Intensity;//[Offset: 0x2c4, Size: 0x4] 0x7e61a2e500
	Color LightColor;//[Offset: 0x2c8, Size: 0x4] 0x7e61a2e580
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1] 0x7e61a2e600
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 0x1] 0x7e61a2e680
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc, Size: 0x1] 0x7e61a2e700
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc, Size: 0x1] 0x7e61a2c680
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc, Size: 0x1] 0x7e61a2c700
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cc, Size: 0x1] 0x7e61a2c780
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cc, Size: 0x1] 0x7e61a2c800
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cc, Size: 0x1] 0x7e61a2c880
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cd, Size: 0x1] 0x7e61a2c900
	byte CastRaytracedShadow;//[Offset: 0x2ce, Size: 0x1] 0x7e61a2c980
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cf, Size: 0x1] 0x7e61a2ca00
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cf, Size: 0x1] 0x7e61a2ca80
	float DeepShadowLayerDistribution;//[Offset: 0x2d0, Size: 0x4] 0x7e61a2cb00
	float IndirectLightingIntensity;//[Offset: 0x2d4, Size: 0x4] 0x7e61a2cb80
	float VolumetricScatteringIntensity;//[Offset: 0x2d8, Size: 0x4] 0x7e61a2cc00
	int SamplesPerPixel;//[Offset: 0x2dc, Size: 0x4] 0x7e61a2cc80
	void SetSamplesPerPixel(int NewValue);// 0x2e4d58ebd041 0x7e61a30b00
	void SetCastVolumetricShadow(bool bNewValue);// 0x2e4c58ebd041 0x7e61a30be0
	void SetCastShadows(bool bNewValue);// 0x2e4b58ebd041 0x7e61a30cc0
	void SetCastRaytracedShadows(byte bNewValue);// 0x2e4a58ebd041 0x7e61a30da0
	void SetCastRaytracedShadow(bool bNewValue);// 0x2e4958ebd041 0x7e61a30e80
	void SetCastDeepShadow(bool bNewValue);// 0x2e4858ebd041 0x7e61a30f60
	void SetAffectReflection(bool bNewValue);// 0x2e4758ebd041 0x7e61a31040
	void SetAffectGlobalIllumination(bool bNewValue);// 0x2e4658ebd041 0x7e61a31120
	LinearColor GetLightColor();// 0x2e4558ebd041 0x7e61a31200

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4] 0x7e6161e280

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4] 0x7e6161e300
	float ShadowExponent;//[Offset: 0x4, Size: 0x4] 0x7e6161e380
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7e6161e400

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x2a8, Size: 0x4] 0x7e61be7300
	float TextureMultiplier;//[Offset: 0x2ac, Size: 0x4] 0x7e61be7380

--------------------------------
Class: AnimationAttributeIdentifierExtensions.BlueprintFunctionLibrary.Object
	bool IsValid(out AnimationAttributeIdentifier Identifier);// 0x2ca558ebd041 0x7e619b9fc0

--------------------------------
Class: InitialActiveSoundParams.Object
	AudioParameter[] AudioParams;//[Offset: 0x28, Size: 0x10] 0x7e6197a240

--------------------------------
Class: AudioSubsystemCollectionRoot.Object

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: AudioEngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: AudioPanelWidgetInterface.Interface.Object
	FName GetIconBrushName();// 0x2ca758ebd041 0x7e619b9e00
	FText GetEditorName();// 0x2ca658ebd041 0x7e619b9ee0

--------------------------------
Class: AudioSettings.DeveloperSettings.Object
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x38, Size: 0x18] 0x7e619d8000
	SoftObjectPath DefaultMediaSoundClassName;//[Offset: 0x50, Size: 0x18] 0x7e619d8080
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x68, Size: 0x18] 0x7e619d8100
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x80, Size: 0x18] 0x7e619d8180
	SoftObjectPath VoiPSoundClass;//[Offset: 0x98, Size: 0x18] 0x7e619d8200
	SoftObjectPath MasterSubmix;//[Offset: 0xb0, Size: 0x18] 0x7e619d8280
	SoftObjectPath BaseDefaultSubmix;//[Offset: 0xc8, Size: 0x18] 0x7e619d8300
	SoftObjectPath ReverbSubmix;//[Offset: 0xe0, Size: 0x18] 0x7e619d8380
	SoftObjectPath EQSubmix;//[Offset: 0xf8, Size: 0x18] 0x7e619d8400
	enum VoiPSampleRate;//[Offset: 0x110, Size: 0x4] 0x7e61979e80
	float DefaultReverbSendLevel;//[Offset: 0x114, Size: 0x4] 0x7e619d6400
	int MaximumConcurrentStreams;//[Offset: 0x118, Size: 0x4] 0x7e619d6480
	float GlobalMinPitchScale;//[Offset: 0x11c, Size: 0x4] 0x7e619d6500
	float GlobalMaxPitchScale;//[Offset: 0x120, Size: 0x4] 0x7e619d6580
	AudioQualitySettings[] QualityLevels;//[Offset: 0x128, Size: 0x10] 0x7e61979f20
	bool bAllowPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1] 0x7e619d6680
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 0x1] 0x7e619d6700
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x138, Size: 0x1] 0x7e619d6780
	uint32 NumStoppingSources;//[Offset: 0x13c, Size: 0x4] 0x7e619d6800
	enum PanningMethod;//[Offset: 0x140, Size: 0x1] 0x7e61979fc0
	enum MonoChannelUpmixMethod;//[Offset: 0x141, Size: 0x1] 0x7e6197a060
	FString DialogueFilenameFormat;//[Offset: 0x148, Size: 0x10] 0x7e619d6980
	SoundDebugEntry[] DebugSounds;//[Offset: 0x158, Size: 0x10] 0x7e6197a100
	DefaultAudioBusSettings[] DefaultAudioBuses;//[Offset: 0x168, Size: 0x10] 0x7e6197a1a0
	SoundClass* DefaultSoundClass;//[Offset: 0x178, Size: 0x8] 0x7e619d6b00
	SoundClass* DefaultMediaSoundClass;//[Offset: 0x180, Size: 0x8] 0x7e619d6b80
	SoundConcurrency* DefaultSoundConcurrency;//[Offset: 0x188, Size: 0x8] 0x7e619d6c00

--------------------------------
Class: AudioQualitySettings
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x7e615ff700
	int MaxChannels;//[Offset: 0x18, Size: 0x4] 0x7e615ff780

--------------------------------
Class: SoundDebugEntry
	FName DebugName;//[Offset: 0x0, Size: 0x8] 0x7e615ff600
	SoftObjectPath Sound;//[Offset: 0x8, Size: 0x18] 0x7e615ff680

--------------------------------
Class: DefaultAudioBusSettings
	SoftObjectPath AudioBus;//[Offset: 0x0, Size: 0x18] 0x7e615ff580

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object
	float Priority;//[Offset: 0x2b0, Size: 0x4] 0x7e619d7a00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1] 0x7e619d7a80
	ReverbSettings Settings;//[Offset: 0x2b8, Size: 0x20] 0x7e619d7b00
	InteriorSettings AmbientZoneSettings;//[Offset: 0x2d8, Size: 0x24] 0x7e619d7b80
	AudioVolumeSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x300, Size: 0x10] 0x7e61979c00
	AudioVolumeSubmixOverrideSettings[] SubmixOverrideSettings;//[Offset: 0x310, Size: 0x10] 0x7e61979ca0
	void SetSubmixSendSettings(out const AudioVolumeSubmixSendSettings[] NewSubmixSendSettings);// 0x2cae58ebd041 0x7e619b97e0
	void SetSubmixOverrideSettings(out const AudioVolumeSubmixOverrideSettings[] NewSubmixOverrideSettings);// 0x2cad58ebd041 0x7e619b98c0
	void SetReverbSettings(out const ReverbSettings NewReverbSettings);// 0x2cac58ebd041 0x7e619b99a0
	void SetPriority(float NewPriority);// 0x2cab58ebd041 0x7e619b9a80
	void SetInteriorSettings(out const InteriorSettings NewInteriorSettings);// 0x2caa58ebd041 0x7e619b9b60
	void SetEnabled(bool bNewEnabled);// 0x2ca958ebd041 0x7e619b9c40
	void OnRep_bEnabled();// 0x2ca858ebd041 0x7e619b9d20

--------------------------------
Class: AudioVolumeSubmixSendSettings
	enum ListenerLocationState;//[Offset: 0x0, Size: 0x1] 0x7e84e56dc0
	enum SourceLocationState;//[Offset: 0x1, Size: 0x1] 0x7e84e56e60
	SoundSubmixSendInfo[] SubmixSends;//[Offset: 0x8, Size: 0x10] 0x7e84e57040

--------------------------------
Class: AudioVolumeSubmixOverrideSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8] 0x7e615fed80
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x8, Size: 0x10] 0x7e84e56d20
	float CrossfadeTime;//[Offset: 0x18, Size: 0x4] 0x7e615fee80

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: AudioWidgetSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: AutoDestroySubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	Actor*[] ActorsToPoll;//[Offset: 0x40, Size: 0x10] 0x7e61979b60
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x2caf58ebd041 0x7e619b9700

--------------------------------
Class: AutomationTestSettings.Object
	FString[] EngineTestModules;//[Offset: 0x28, Size: 0x10] 0x7e619795c0
	FString[] EditorTestModules;//[Offset: 0x38, Size: 0x10] 0x7e61979660
	SoftObjectPath AutomationTestmap;//[Offset: 0x48, Size: 0x18] 0x7e619d9200
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x60, Size: 0x10] 0x7e61979700
	FString[] AssetsToOpen;//[Offset: 0x70, Size: 0x10] 0x7e619797a0
	FString[] MapsToPIETest;//[Offset: 0x80, Size: 0x10] 0x7e61979840
	bool bUseAllProjectMapsToPlayInPIE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7e619d9400
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x98, Size: 0x1f0] 0x7e619d9480
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x288, Size: 0x30] 0x7e619d7400
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x2b8, Size: 0x10] 0x7e619d7480
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x2c8, Size: 0x30] 0x7e619d7500
	FString[] TestLevelFolders;//[Offset: 0x2f8, Size: 0x10] 0x7e619798e0
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x308, Size: 0x10] 0x7e61979980
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x318, Size: 0x10] 0x7e61979a20
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x328, Size: 0x10] 0x7e61979ac0
	IntPoint DefaultScreenshotResolution;//[Offset: 0x338, Size: 0x8] 0x7e619d7780
	float PIETestDuration;//[Offset: 0x340, Size: 0x4] 0x7e619d7800

--------------------------------
Class: EditorMapPerformanceTestDefinition
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18] 0x7e61600300
	int TestTimer;//[Offset: 0x18, Size: 0x4] 0x7e61600380

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0x10] 0x7e61600400
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0x10, Size: 0x150] 0x7e61600480
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x160, Size: 0x60] 0x7e61600500
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x1c0, Size: 0x20] 0x7e61600580
	FilePath SourceControlMaterial;//[Offset: 0x1e0, Size: 0x10] 0x7e61600600

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10] 0x7e8412dd80

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x20] 0x7e61600e00
	EditorImportWorkflowDefinition Normal;//[Offset: 0x20, Size: 0x20] 0x7e61600e80
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x40, Size: 0x20] 0x7e61600f00
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x60, Size: 0x20] 0x7e61600f80
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x80, Size: 0x20] 0x7e61601000
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0xa0, Size: 0x20] 0x7e61601080
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0xc0, Size: 0x20] 0x7e615ff800
	EditorImportWorkflowDefinition Animation;//[Offset: 0xe0, Size: 0x20] 0x7e615ff880
	EditorImportWorkflowDefinition Sound;//[Offset: 0x100, Size: 0x20] 0x7e615ff900
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0x120, Size: 0x20] 0x7e615ff980
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0x140, Size: 0x10] 0x7e84e56b40

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x7e615ffa80
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x10, Size: 0x10] 0x7e84e56be0

--------------------------------
Class: ImportFactorySettingValues
	FString SettingName;//[Offset: 0x0, Size: 0x10] 0x7e615ffd80
	FString Value;//[Offset: 0x10, Size: 0x10] 0x7e615ffe00

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0x10] 0x7e61600b00
	FilePath MaterialAsset;//[Offset: 0x10, Size: 0x10] 0x7e61600b80
	FilePath ParticleSystemAsset;//[Offset: 0x20, Size: 0x10] 0x7e61600c00
	FilePath SkeletalMeshAsset;//[Offset: 0x30, Size: 0x10] 0x7e61600c80
	FilePath StaticMeshAsset;//[Offset: 0x40, Size: 0x10] 0x7e61600d00
	FilePath TextureAsset;//[Offset: 0x50, Size: 0x10] 0x7e61600d80

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0x10] 0x7e61600a00
	FString NewProjectNameOverride;//[Offset: 0x10, Size: 0x10] 0x7e61600a80

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0x10] 0x7e61600880
	FilePath DefaultDiffuseTexture;//[Offset: 0x10, Size: 0x10] 0x7e61600900
	FilePath DefaultNormalTexture;//[Offset: 0x20, Size: 0x10] 0x7e61600980

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0x10] 0x7e61600800

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0x10] 0x7e61600680
	FilePath SecondMeshPath;//[Offset: 0x10, Size: 0x10] 0x7e61600700
	FilePath DefaultParticleAsset;//[Offset: 0x20, Size: 0x10] 0x7e61600780

--------------------------------
Class: ExternalToolDefinition
	FString ToolName;//[Offset: 0x0, Size: 0x10] 0x7e615ffe80
	FilePath ExecutablePath;//[Offset: 0x10, Size: 0x10] 0x7e615fff00
	FString CommandLineOptions;//[Offset: 0x20, Size: 0x10] 0x7e615fff80
	DirectoryPath WorkingDirectory;//[Offset: 0x30, Size: 0x10] 0x7e615fe780
	FString ScriptExtension;//[Offset: 0x40, Size: 0x10] 0x7e615fe800
	DirectoryPath ScriptDirectory;//[Offset: 0x50, Size: 0x10] 0x7e615fe880

--------------------------------
Class: EditorImportExportTestDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x7e615ffb80
	FString ExportFileExtension;//[Offset: 0x10, Size: 0x10] 0x7e615ffc00
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7e615ffc80
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x28, Size: 0x10] 0x7e84e56c80

--------------------------------
Class: LaunchOnTestSettings
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0x10] 0x7e61600200
	FString DeviceID;//[Offset: 0x10, Size: 0x10] 0x7e61600280

--------------------------------
Class: BandwidthTestActor.Actor.Object
	BandwidthTestGenerator BandwidthGenerator;//[Offset: 0x278, Size: 0x20] 0x7e619d8980

--------------------------------
Class: BandwidthTestGenerator
	BandwidthTestItem[] ReplicatedBuffers;//[Offset: 0x0, Size: 0x10] 0x7e84e56a00

--------------------------------
Class: BandwidthTestItem
	byte[] Kilobyte;//[Offset: 0x0, Size: 0x10] 0x7e84e56aa0

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: AnalysisProperties.Object
	FString Function;//[Offset: 0x28, Size: 0x10] 0x7e619d9f00

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: Breakpoint.Object

--------------------------------
Class: BlueprintExtension.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0x2cc258ebd041 0x7e619bc020
	void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0x2cc158ebd041 0x7e619bc100
	bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0x2cc058ebd041 0x7e619bc1e0
	int Map_Length(out const <int,int> TargetMap);// 0x2cbf58ebd041 0x7e619bc2c0
	void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0x2cbe58ebd041 0x7e619bc3a0
	bool Map_IsNotEmpty(out const <int,int> TargetMap);// 0x2cbd58ebd041 0x7e619bc480
	bool Map_IsEmpty(out const <int,int> TargetMap);// 0x2cbc58ebd041 0x7e619bc560
	bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0x2cbb58ebd041 0x7e619bc640
	bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0x2cba58ebd041 0x7e619bc720
	void Map_Clear(out const <int,int> TargetMap);// 0x2cb958ebd041 0x7e619bc800
	void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0x2cb858ebd041 0x7e619bc8e0

--------------------------------
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object
	FString VideoCaptureDir();// 0x2d1458ebd041 0x7e619be780
	void ValidatePath(FString InPath, out bool bDidSucceed, out FText OutReason);// 0x2d1358ebd041 0x7e619be860
	void Split(FString InPath, out FString PathPart, out FString FilenamePart, out FString ExtensionPart);// 0x2d1258ebd041 0x7e619be940
	FString SourceConfigDir();// 0x2d1158ebd041 0x7e619bea20
	bool ShouldSaveToUserDir();// 0x2d1058ebd041 0x7e619beb00
	FString ShaderWorkingDir();// 0x2d0f58ebd041 0x7e619bebe0
	void SetProjectFilePath(FString NewGameProjectFilePath);// 0x2d0e58ebd041 0x7e619becc0
	FString SetExtension(FString InPath, FString InNewExtension);// 0x2d0d58ebd041 0x7e619beda0
	FString ScreenShotDir();// 0x2d0c58ebd041 0x7e619bee80
	FString SandboxesDir();// 0x2d0b58ebd041 0x7e619bef60
	FString RootDir();// 0x2d0a58ebd041 0x7e619bf040
	void RemoveDuplicateSlashes(FString InPath, out FString OutPath);// 0x2d0958ebd041 0x7e619bf120
	FString ProjectUserDir();// 0x2d0858ebd041 0x7e619bf200
	FString ProjectSavedDir();// 0x2d0758ebd041 0x7e619bf2e0
	FString ProjectPluginsDir();// 0x2d0658ebd041 0x7e619bf3c0
	FString ProjectPersistentDownloadDir();// 0x2d0558ebd041 0x7e619bf4a0
	FString ProjectModsDir();// 0x2d0458ebd041 0x7e619bf580
	FString ProjectLogDir();// 0x2d0358ebd041 0x7e619bf660
	FString ProjectIntermediateDir();// 0x2d0258ebd041 0x7e619bf740
	FString ProjectDir();// 0x2d0158ebd041 0x7e619bf820
	FString ProjectContentDir();// 0x2d0058ebd041 0x7e619bf900
	FString ProjectConfigDir();// 0x2cff58ebd041 0x7e619bf9e0
	FString ProfilingDir();// 0x2cfe58ebd041 0x7e619bfac0
	void NormalizeFilename(FString InPath, out FString OutPath);// 0x2cfd58ebd041 0x7e619bfba0
	void NormalizeDirectoryName(FString InPath, out FString OutPath);// 0x2cfc58ebd041 0x7e619bfc80
	FString MakeValidFileName(FString InString, FString InReplacementChar);// 0x2cfb58ebd041 0x7e619bfd60
	void MakeStandardFilename(FString InPath, out FString OutPath);// 0x2cfa58ebd041 0x7e619bfe40
	void MakePlatformFilename(FString InPath, out FString OutPath);// 0xffffff8158ebd000 0x7e619bff20
	bool MakePathRelativeTo(FString InPath, FString InRelativeTo, out FString OutPath);// 0x2cf858ebd041 0x7e619bcaa0
	FString LaunchDir();// 0x2cf758ebd041 0x7e619bcb80
	bool IsSamePath(FString PathA, FString PathB);// 0x2cf658ebd041 0x7e619bcc60
	bool IsRestrictedPath(FString InPath);// 0x2cf558ebd041 0x7e619bcd40
	bool IsRelative(FString InPath);// 0x2cf458ebd041 0x7e619bce20
	bool IsProjectFilePathSet();// 0x2cf358ebd041 0x7e619bcf00
	bool IsDrive(FString InPath);// 0x2cf258ebd041 0x7e619bcfe0
	bool HasProjectPersistentDownloadDir();// 0x2cf158ebd041 0x7e619bd0c0
	FString[] GetToolTipLocalizationPaths();// 0x2cf058ebd041 0x7e619bd1a0
	FString[] GetRestrictedFolderNames();// 0x2cef58ebd041 0x7e619bd280
	FString GetRelativePathToRoot();// 0x2cee58ebd041 0x7e619bd360
	FString[] GetPropertyNameLocalizationPaths();// 0x2ced58ebd041 0x7e619bd440
	FString GetProjectFilePath();// 0x2cec58ebd041 0x7e619bd520
	FString GetPath(FString InPath);// 0x2ceb58ebd041 0x7e619bd600
	FString GetInvalidFileSystemChars();// 0x2cea58ebd041 0x7e619bd6e0
	FString[] GetGameLocalizationPaths();// 0x2ce958ebd041 0x7e619bd7c0
	FString GetExtension(FString InPath, bool bIncludeDot);// 0x2ce858ebd041 0x7e619bd8a0
	FString[] GetEngineLocalizationPaths();// 0x2ce758ebd041 0x7e619bd980
	FString[] GetEditorLocalizationPaths();// 0x2ce658ebd041 0x7e619bda60
	FString GetCleanFilename(FString InPath);// 0x2ce558ebd041 0x7e619bdb40
	FString GetBaseFilename(FString InPath, bool bRemovePath);// 0x2ce458ebd041 0x7e619bdc20
	FString GeneratedConfigDir();// 0x2ce358ebd041 0x7e619bdd00
	FString GameUserDeveloperDir();// 0x2ce258ebd041 0x7e619bdde0
	FString GameSourceDir();// 0x2ce158ebd041 0x7e619bdec0
	FString GameDevelopersDir();// 0x2ce058ebd041 0x7e619bdfa0
	FString GameAgnosticSavedDir();// 0x2cdf58ebd041 0x7e619be080
	bool FileExists(FString InPath);// 0x2cde58ebd041 0x7e619be160
	FString FeaturePackDir();// 0x2cdd58ebd041 0x7e619be240
	FString EnterprisePluginsDir();// 0x2cdc58ebd041 0x7e619be320
	FString EnterpriseFeaturePackDir();// 0x2cdb58ebd041 0x7e619be400
	FString EnterpriseDir();// 0x2cda58ebd041 0x7e619be4e0
	FString EngineVersionAgnosticUserDir();// 0x2cd958ebd041 0x7e619be5c0
	FString EngineUserDir();// 0x2d1558ebd041 0x7e619be6a0
	FString EngineSourceDir();// 0x2cd758ebd041 0x7e619badc0
	FString EngineSavedDir();// 0x2cd658ebd041 0x7e619baea0
	FString EnginePluginsDir();// 0x2cd558ebd041 0x7e619baf80
	FString EngineIntermediateDir();// 0x2cd458ebd041 0x7e619bb060
	FString EngineDir();// 0x2cd358ebd041 0x7e619bb140
	FString EngineContentDir();// 0x2cd258ebd041 0x7e619bb220
	FString EngineConfigDir();// 0x2cd158ebd041 0x7e619bb300
	bool DirectoryExists(FString InPath);// 0x2cd058ebd041 0x7e619bb3e0
	FString DiffDir();// 0x2ccf58ebd041 0x7e619bb4c0
	FString CreateTempFilename(FString Path, FString Prefix, FString Extension);// 0x2cce58ebd041 0x7e619bb5a0
	FString ConvertToSandboxPath(FString InPath, FString InSandboxName);// 0x2ccd58ebd041 0x7e619bb680
	FString ConvertRelativePathToFull(FString InPath, FString InBasePath);// 0x2ccc58ebd041 0x7e619bb760
	FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);// 0x2ccb58ebd041 0x7e619bb840
	FString Combine(out const FString[] InPaths);// 0x2cca58ebd041 0x7e619bb920
	bool CollapseRelativeDirectories(FString InPath, out FString OutPath);// 0x2cc958ebd041 0x7e619bba00
	FString CloudDir();// 0x2cc858ebd041 0x7e619bbae0
	FString ChangeExtension(FString InPath, FString InNewExtension);// 0x2cc758ebd041 0x7e619bbbc0
	FString BugItDir();// 0x2cc658ebd041 0x7e619bbca0
	FString AutomationTransientDir();// 0x2cc558ebd041 0x7e619bbd80
	FString AutomationLogDir();// 0x2cc458ebd041 0x7e619bbe60
	FString AutomationDir();// 0x2cc358ebd041 0x7e619bbf40

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x1a8, Size: 0x10] 0x7e84e63c80
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1b8, Size: 0x10] 0x7e84e63d00
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1c8, Size: 0x10] 0x7e84e63d80
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x7e84e63e00
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1e8, Size: 0x10] 0x7e84e63e80
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1f8, Size: 0x10] 0x7e84e63f00
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x208, Size: 0x10] 0x7e84e64000
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x218, Size: 0x10] 0x7e84e64100
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x228, Size: 0x10] 0x7e84e64200
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x238, Size: 0x10] 0x7e84e62200
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x248, Size: 0x10] 0x7e84e62380
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x258, Size: 0x10] 0x7e84e62600
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x268, Size: 0x10] 0x7e84e62700

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	int ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x2d1d58ebd041 0x7e61a01580
	void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0x2d1c58ebd041 0x7e61a01660
	int ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0x2d1b58ebd041 0x7e61a01740
	int ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x2d1a58ebd041 0x7e61a01820
	void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0x2d1958ebd041 0x7e61a01900
	byte GetDeviceOrientation();// 0x2d1858ebd041 0x7e61a019e0
	void ClearAllLocalNotifications();// 0x2d1758ebd041 0x7e61a01ac0
	void CancelLocalNotificationById(int NotificationId);// 0x2d1658ebd041 0x7e61a01ba0
	void CancelLocalNotification(FString ActivationEvent);// 0x2d5758ebd041 0x7e61a01c80

--------------------------------
Class: DateTime

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0x2d2b58ebd041 0x7e61a00940
	void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0x2d2a58ebd041 0x7e61a00a20
	void Set_ToArray(out const <int> A, out int[] Result);// 0x2d2958ebd041 0x7e61a00b00
	void Set_RemoveItems(out const <int> TargetSet, out const int[] Items);// 0x2d2858ebd041 0x7e61a00be0
	bool Set_Remove(out const <int> TargetSet, out const int Item);// 0x2d2758ebd041 0x7e61a00cc0
	int Set_Length(out const <int> TargetSet);// 0x2d2658ebd041 0x7e61a00da0
	bool Set_IsNotEmpty(out const <int> TargetSet);// 0x2d2558ebd041 0x7e61a00e80
	bool Set_IsEmpty(out const <int> TargetSet);// 0x2d2458ebd041 0x7e61a00f60
	void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0x2d2358ebd041 0x7e61a01040
	void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0x2d2258ebd041 0x7e61a01120
	bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0x2d2158ebd041 0x7e61a01200
	void Set_Clear(out const <int> TargetSet);// 0x2d2058ebd041 0x7e61a012e0
	void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0x2d1f58ebd041 0x7e61a013c0
	void Set_Add(out const <int> TargetSet, out const int NewItem);// 0x2d1e58ebd041 0x7e61a014a0

--------------------------------
Class: BoneMaskFilter.Object
	InputBlendPose[] BlendPoses;//[Offset: 0x28, Size: 0x10] 0x7e6197a920

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10] 0x7e84857220

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x7e614ae280
	int BlendDepth;//[Offset: 0x8, Size: 0x4] 0x7e614ae300

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0x18] 0x7e61a11e80
	Rotator Rotation;//[Offset: 0x40, Size: 0x18] 0x7e61a11f00
	FString[] HiddenLevels;//[Offset: 0x58, Size: 0x10] 0x7e6197a880

--------------------------------
Class: BookMark2D.BookmarkBase.Object
	float Zoom2D;//[Offset: 0x28, Size: 0x4] 0x7e61a11d80
	IntPoint Location;//[Offset: 0x2c, Size: 0x8] 0x7e61a11e00

--------------------------------
Class: BoundsCopyComponent.ActorComponent.Object
	Actor* BoundsSourceActor;//[Offset: 0xb0, Size: 0x28] 0x7e61a11980
	bool bUseCollidingComponentsForSourceBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x7e61a11a00
	bool bKeepOwnBoundsScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x7e61a11a80
	bool bUseCollidingComponentsForOwnBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x7e61a11b00
	Transform PostTransform;//[Offset: 0xe0, Size: 0x60] 0x7e61a11b80
	bool bCopyXBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1] 0x7e61a11c00
	bool bCopyYBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1] 0x7e61a11c80
	bool bCopyZBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 0x1] 0x7e61a11d00

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x550, Size: 0x18] 0x7e61a11400
	float LineThickness;//[Offset: 0x568, Size: 0x4] 0x7e61a11480
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x2d2e58ebd041 0x7e61a006a0
	Vector GetUnscaledBoxExtent();// 0x2d2d58ebd041 0x7e61a00780
	Vector GetScaledBoxExtent();// 0x2d2c58ebd041 0x7e61a00860

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x278, Size: 0x8] 0x7e61a11380

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x2b0, Size: 0x8] 0x7e61a12f00
	enum ReflectionSourceType;//[Offset: 0x2b8, Size: 0x1] 0x7e6197a6a0
	enum MobileReflectionCompression;//[Offset: 0x2b9, Size: 0x1] 0x7e6197a740
	TextureCube* Cubemap;//[Offset: 0x2c0, Size: 0x8] 0x7e61a13080
	float SourceCubemapAngle;//[Offset: 0x2c8, Size: 0x4] 0x7e61a13100
	float Brightness;//[Offset: 0x2cc, Size: 0x4] 0x7e61a13180
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x7e61a11100
	float MaxValueRGBM;//[Offset: 0x2d4, Size: 0x4] 0x7e61a11180
	Vector CaptureOffset;//[Offset: 0x2d8, Size: 0x18] 0x7e61a11200
	Guid MapBuildDataId;//[Offset: 0x2f0, Size: 0x10] 0x7e61a11280
	TextureCube* CachedEncodedHDRCubemap;//[Offset: 0x300, Size: 0x8] 0x7e61a11300

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x328, Size: 0x4] 0x7e61a12d80
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x330, Size: 0x8] 0x7e61a12e00
	BoxComponent* PreviewCaptureBox;//[Offset: 0x338, Size: 0x8] 0x7e61a12e80

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x28, Size: 0x10] 0x7e61a12a00
	FString ToolTip;//[Offset: 0x38, Size: 0x10] 0x7e61a12a80
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61a12b00
	Vector[] Vertices;//[Offset: 0x50, Size: 0x10] 0x7e6197a560
	BuilderPoly[] Polys;//[Offset: 0x60, Size: 0x10] 0x7e6197a600
	FName Layer;//[Offset: 0x70, Size: 0x8] 0x7e61a12c80
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7e61a12d00

--------------------------------
Class: BuilderPoly
	int[] VertexIndices;//[Offset: 0x0, Size: 0x10] 0x7e84e58bc0
	int Direction;//[Offset: 0x10, Size: 0x4] 0x7e61603580
	FName ItemName;//[Offset: 0x14, Size: 0x8] 0x7e61603600
	int PolyFlags;//[Offset: 0x1c, Size: 0x4] 0x7e61603680

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: BuiltInAttributesExtensions.BlueprintFunctionLibrary.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x3b0] 0x7e61a12880

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x10, Size: 0xc0] 0x7e6142a700
	SlateBrush Hovered;//[Offset: 0xd0, Size: 0xc0] 0x7e6142a780
	SlateBrush Pressed;//[Offset: 0x190, Size: 0xc0] 0x7e6142a800
	SlateBrush Disabled;//[Offset: 0x250, Size: 0xc0] 0x7e6142a880
	SlateColor NormalForeground;//[Offset: 0x310, Size: 0x14] 0x7e6142a900
	SlateColor HoveredForeground;//[Offset: 0x324, Size: 0x14] 0x7e6142a980
	SlateColor PressedForeground;//[Offset: 0x338, Size: 0x14] 0x7e6142aa00
	SlateColor DisabledForeground;//[Offset: 0x34c, Size: 0x14] 0x7e6142aa80
	Margin NormalPadding;//[Offset: 0x360, Size: 0x10] 0x7e6142ab00
	Margin PressedPadding;//[Offset: 0x370, Size: 0x10] 0x7e6142ab80
	SlateSound PressedSlateSound;//[Offset: 0x380, Size: 0x18] 0x7e6142ac00
	SlateSound HoveredSlateSound;//[Offset: 0x398, Size: 0x18] 0x7e6142ac80

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8] 0x7e6142b280

--------------------------------
Class: CachedAnimDataLibrary.BlueprintFunctionLibrary.Object
	bool StateMachine_IsStateRelevant(AnimInstance* InAnimInstance, out const CachedAnimStateData CachedAnimStateData);// 0x2d3158ebd041 0x7e61a00400
	float StateMachine_GetLocalWeight(AnimInstance* InAnimInstance, out const CachedAnimStateData CachedAnimStateData);// 0x2d3058ebd041 0x7e61a004e0
	float StateMachine_GetGlobalWeight(AnimInstance* InAnimInstance, out const CachedAnimStateData CachedAnimStateData);// 0x2d2f58ebd041 0x7e61a005c0

--------------------------------
Class: CachedAnimStateData
	FName StateMachineName;//[Offset: 0x0, Size: 0x8] 0x7e61603200
	FName StateName;//[Offset: 0x8, Size: 0x8] 0x7e61603280

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraLensEffectInterface.Interface.Object
	FXSystemComponent* GetPrimaryParticleComponent();// 0x2d7858ebd041 0x7e61a03960
	FXSystemComponent*[] GetParticleComponents();// 0x2d3558ebd041 0x7e61a00080

--------------------------------
Class: CameraLensEffectInterfaceClassSupportLibrary.BlueprintFunctionLibrary.Object
	void SetInterfaceClass(class Actor Class, out CameraLensInterfaceClassSupport Var, out enum Result);// 0x2d3a58ebd041 0x7e61a035e0
	void IsInterfaceValid(out const interface classNone CameraLens, out enum Result);// 0x2d3958ebd041 0x7e61a036c0
	void IsInterfaceClassValid(out const CameraLensInterfaceClassSupport CameraLens, out enum Result);// 0x2d3858ebd041 0x7e61a037a0
	class Actor GetInterfaceClass(out const CameraLensInterfaceClassSupport CameraLens);// 0x2d3758ebd041 0x7e61a03880

--------------------------------
Class: CameraLensInterfaceClassSupport
	class Actor* Class;//[Offset: 0x0, Size: 0x8] 0x7e84e58a80

--------------------------------
Class: CameraShakeSourceActor.Actor.Object
	CameraShakeSourceComponent* CameraShakeSourceComponent;//[Offset: 0x278, Size: 0x8] 0x7e61a13600

--------------------------------
Class: CancellableAsyncAction.BlueprintAsyncActionBase.Object
	bool IsActive();// 0x2d4158ebd041 0x7e61a02fc0
	void Cancel();// 0x2d4058ebd041 0x7e61a030a0

--------------------------------
Class: DeviceProfileManager.Object
	DeviceProfile*[] Profiles;//[Offset: 0x28, Size: 0x10] 0x7e6197f100
	DeviceProfile*[] BackupProfiles;//[Offset: 0x38, Size: 0x10] 0x7e6197f1a0

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x38, Size: 0x10] 0x7e61a2bd00
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10] 0x7e61a2bd80
	DeviceProfile* Parent;//[Offset: 0x58, Size: 0x8] 0x7e61a2be00
	FString[] CVars;//[Offset: 0x88, Size: 0x10] 0x7e6197f2e0
	DPMatchingRulestruct[] MatchingRules;//[Offset: 0x98, Size: 0x10] 0x7e6197f380

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10] 0x7e6197f420

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1] 0x7e61682880
	int LODBias;//[Offset: 0x8, Size: 0x4] 0x7e61682900
	int LODBias_Smaller;//[Offset: 0xc, Size: 0x4] 0x7e61682980
	int LODBias_Smallest;//[Offset: 0x10, Size: 0x4] 0x7e61682a00
	int NumStreamedMips;//[Offset: 0x18, Size: 0x4] 0x7e61682a80
	byte MipGenSettings;//[Offset: 0x1c, Size: 0x1] 0x7e61682b00
	int MinLODSize;//[Offset: 0x20, Size: 0x4] 0x7e61682b80
	int MaxLODSize;//[Offset: 0x24, Size: 0x4] 0x7e61682c00
	int MaxLODSize_Smaller;//[Offset: 0x28, Size: 0x4] 0x7e61682c80
	int MaxLODSize_Smallest;//[Offset: 0x2c, Size: 0x4] 0x7e61682d00
	int MaxLODSize_VT;//[Offset: 0x30, Size: 0x4] 0x7e61682d80
	int OptionalLODBias;//[Offset: 0x34, Size: 0x4] 0x7e61682e00
	int OptionalMaxLODSize;//[Offset: 0x38, Size: 0x4] 0x7e61682e80
	FName MinMagFilter;//[Offset: 0x3c, Size: 0x8] 0x7e61682f00
	FName MipFilter;//[Offset: 0x44, Size: 0x8] 0x7e61682f80
	enum MipLoadOptions;//[Offset: 0x4c, Size: 0x1] 0x7e61691140
	bool HighPriorityLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x7e61683080
	bool DuplicateNonOptionalMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1] 0x7e61683100
	float Downscale;//[Offset: 0x50, Size: 0x4] 0x7e61683180
	enum DownscaleOptions;//[Offset: 0x54, Size: 0x1] 0x7e616911e0
	int VirtualTextureTileCountBias;//[Offset: 0x58, Size: 0x4] 0x7e61681180
	int VirtualTextureTileSizeBias;//[Offset: 0x5c, Size: 0x4] 0x7e61681200
	byte LossyCompressionAmount;//[Offset: 0x60, Size: 0x1] 0x7e61681280

--------------------------------
Class: DPMatchingRulestruct.DPMatchingRulestructBase
	DPMatchingRulestructE[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x7e84e5a100
	DPMatchingRulestructE[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x7e84e5a1a0

--------------------------------
Class: DPMatchingRulestructBase
	FString RuleName;//[Offset: 0x8, Size: 0x10] 0x7e61618880
	DPMatchingIfCondition[] IfConditions;//[Offset: 0x18, Size: 0x10] 0x7e84e57f40
	FString AppendFragments;//[Offset: 0x28, Size: 0x10] 0x7e61618980
	FString SetUserVar;//[Offset: 0x38, Size: 0x10] 0x7e61618a00

--------------------------------
Class: DPMatchingRulestructE.DPMatchingRulestructBase
	DPMatchingRulestructD[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x7e84e5a240
	DPMatchingRulestructD[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x7e84e5a2e0

--------------------------------
Class: DPMatchingRulestructD.DPMatchingRulestructBase
	DPMatchingRulestructC[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x7e84e5a380
	DPMatchingRulestructC[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x7e84e5a420

--------------------------------
Class: DPMatchingRulestructC.DPMatchingRulestructBase
	DPMatchingRulestructB[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x7e84e5a4c0
	DPMatchingRulestructB[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x7e84e57c20

--------------------------------
Class: DPMatchingRulestructB.DPMatchingRulestructBase
	DPMatchingRulestructA[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x7e84e57cc0
	DPMatchingRulestructA[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x7e84e57d60

--------------------------------
Class: DPMatchingRulestructA.DPMatchingRulestructBase
	DPMatchingRulestructBase[] OnTrue;//[Offset: 0x48, Size: 0x10] 0x7e84e57e00
	DPMatchingRulestructBase[] OnFalse;//[Offset: 0x58, Size: 0x10] 0x7e84e57ea0

--------------------------------
Class: DPMatchingIfCondition
	FName Operator;//[Offset: 0x0, Size: 0x8] 0x7e61618a80
	FString Arg1;//[Offset: 0x8, Size: 0x10] 0x7e61618b00
	FString Arg2;//[Offset: 0x18, Size: 0x10] 0x7e61618b80

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x1f0, Size: 0x4] 0x7e61a16700

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x1f8, Size: 0x4] 0x7e61a18100
	int SizeY;//[Offset: 0x1fc, Size: 0x4] 0x7e61a18180
	LinearColor ClearColor;//[Offset: 0x200, Size: 0x10] 0x7e61a18200
	byte AddressX;//[Offset: 0x210, Size: 0x1] 0x7e61a18280
	byte AddressY;//[Offset: 0x211, Size: 0x1] 0x7e61a18300
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 0x1] 0x7e61a18380
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 0x1] 0x7e61a18400
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 0x1] 0x7e61a16380
	byte RenderTargetFormat;//[Offset: 0x213, Size: 0x1] 0x7e61a16400
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1] 0x7e61a16480
	byte MipsSamplerFilter;//[Offset: 0x215, Size: 0x1] 0x7e61a16500
	byte MipsAddressU;//[Offset: 0x216, Size: 0x1] 0x7e61a16580
	byte MipsAddressV;//[Offset: 0x217, Size: 0x1] 0x7e61a16600
	byte OverrideFormat;//[Offset: 0x218, Size: 0x1] 0x7e61a16680

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0x220, Size: 0x10] 0x7e61a17b00
	World* World;//[Offset: 0x230, Size: 0x8] 0x7e61a17b80
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x7e61a17c00
	void UpdateResource();// 0x2d5258ebd041 0x7e61a020e0
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0x2d5158ebd041 0x7e61a021c0
	void GetSize(out int Width, out int Height);// 0x2d5058ebd041 0x7e61a022a0
	CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0x2d4f58ebd041 0x7e61a02380

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8] 0x7e61a4c480
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18] 0x7e61a4c500
	Font* SmallFont;//[Offset: 0x50, Size: 0x8] 0x7e61a4c580
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18] 0x7e61a4c600
	Font* MediumFont;//[Offset: 0x70, Size: 0x8] 0x7e61a4a580
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18] 0x7e61a4a600
	Font* LargeFont;//[Offset: 0x90, Size: 0x8] 0x7e61a4a680
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18] 0x7e61a4a700
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8] 0x7e61a4a780
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18] 0x7e61a4a800
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10] 0x7e61a51280
	FString[] AdditionalFontNames;//[Offset: 0xe0, Size: 0x10] 0x7e61a51320
	class Console* ConsoleClass;//[Offset: 0xf0, Size: 0x8] 0x7e61a513c0
	SoftClassPath ConsoleClassName;//[Offset: 0xf8, Size: 0x18] 0x7e61a4a980
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x110, Size: 0x8] 0x7e61a51460
	SoftClassPath GameViewportClientClassName;//[Offset: 0x118, Size: 0x18] 0x7e61a4aa00
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x130, Size: 0x8] 0x7e6197f7e0
	SoftClassPath LocalPlayerClassName;//[Offset: 0x138, Size: 0x18] 0x7e61a4aa80
	class WorldSettings* WorldSettingsClass;//[Offset: 0x150, Size: 0x8] 0x7e6197f880
	SoftClassPath WorldSettingsClassName;//[Offset: 0x158, Size: 0x18] 0x7e61a4ab00
	SoftClassPath NavigationSystemClassName;//[Offset: 0x170, Size: 0x18] 0x7e61a4ab80
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x188, Size: 0x8] 0x7e6197f920
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x190, Size: 0x18] 0x7e61a4ac00
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1a8, Size: 0x8] 0x7e6197f9c0
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b0, Size: 0x18] 0x7e61a4ac80
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1c8, Size: 0x8] 0x7e6197fa60
	SoftClassPath AIControllerClassName;//[Offset: 0x1d0, Size: 0x18] 0x7e61a4ad00
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1e8, Size: 0x8] 0x7e6197fb00
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1f0, Size: 0x18] 0x7e61a4ad80
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x208, Size: 0x18] 0x7e61a4ae00
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x220, Size: 0x8] 0x7e6197fba0
	GameUserSettings* GameUserSettings;//[Offset: 0x228, Size: 0x8] 0x7e61a4ae80
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x230, Size: 0x8] 0x7e6197fc40
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x238, Size: 0x18] 0x7e61a4af00
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x250, Size: 0x18] 0x7e61a4af80
	SoftClassPath GameSingletonClassName;//[Offset: 0x268, Size: 0x18] 0x7e61a4b000
	Object* GameSingleton;//[Offset: 0x280, Size: 0x8] 0x7e61a4b080
	SoftClassPath AssetManagerClassName;//[Offset: 0x288, Size: 0x18] 0x7e61a4b100
	AssetManager* AssetManager;//[Offset: 0x2a0, Size: 0x8] 0x7e61a4b180
	Texture2D* DefaultTexture;//[Offset: 0x2a8, Size: 0x8] 0x7e61a4b200
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b0, Size: 0x18] 0x7e61a4b280
	Texture* DefaultDiffuseTexture;//[Offset: 0x2c8, Size: 0x8] 0x7e61a4b300
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d0, Size: 0x18] 0x7e61a4b380
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2e8, Size: 0x8] 0x7e61a4b400
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f0, Size: 0x18] 0x7e61a4b480
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x308, Size: 0x8] 0x7e61a4b500
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x310, Size: 0x18] 0x7e61a4b580
	Texture2D* DefaultBokehTexture;//[Offset: 0x328, Size: 0x8] 0x7e61a49500
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x330, Size: 0x18] 0x7e61a49580
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x348, Size: 0x8] 0x7e61a49600
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x350, Size: 0x18] 0x7e61a49680
	Texture2D* DefaultFilmGrainTexture;//[Offset: 0x368, Size: 0x8] 0x7e61a49700
	SoftObjectPath DefaultFilmGrainTextureName;//[Offset: 0x370, Size: 0x18] 0x7e61a49780
	Material* WireframeMaterial;//[Offset: 0x388, Size: 0x8] 0x7e61a49800
	FString WireframeMaterialName;//[Offset: 0x390, Size: 0x10] 0x7e61a49880
	Material* DebugMeshMaterial;//[Offset: 0x3a0, Size: 0x8] 0x7e61a49900
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3a8, Size: 0x18] 0x7e61a49980
	Material* EmissiveMeshMaterial;//[Offset: 0x3c0, Size: 0x8] 0x7e61a49a00
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3c8, Size: 0x18] 0x7e61a49a80
	Material* LevelColorationLitMaterial;//[Offset: 0x3e0, Size: 0x8] 0x7e61a49b00
	FString LevelColorationLitMaterialName;//[Offset: 0x3e8, Size: 0x10] 0x7e61a49b80
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3f8, Size: 0x8] 0x7e61a49c00
	FString LevelColorationUnlitMaterialName;//[Offset: 0x400, Size: 0x10] 0x7e61a49c80
	Material* LightingTexelDensityMaterial;//[Offset: 0x410, Size: 0x8] 0x7e61a49d00
	FString LightingTexelDensityName;//[Offset: 0x418, Size: 0x10] 0x7e61a49d80
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x428, Size: 0x8] 0x7e61a49e00
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x430, Size: 0x10] 0x7e61a49e80
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x440, Size: 0x8] 0x7e61a49f00
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x448, Size: 0x10] 0x7e61a49f80
	Material* RemoveSurfaceMaterial;//[Offset: 0x458, Size: 0x8] 0x7e61a4a000
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x460, Size: 0x18] 0x7e61a4a080
	Material* VertexColorMaterial;//[Offset: 0x478, Size: 0x8] 0x7e61a4a100
	FString VertexColorMaterialName;//[Offset: 0x480, Size: 0x10] 0x7e61a4a180
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x490, Size: 0x8] 0x7e61a4a200
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x498, Size: 0x10] 0x7e61a4a280
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4a8, Size: 0x8] 0x7e61a4a300
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b0, Size: 0x10] 0x7e61a4a380
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c0, Size: 0x8] 0x7e61a4a400
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4c8, Size: 0x10] 0x7e61a4a480
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4d8, Size: 0x8] 0x7e61a4a500
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e0, Size: 0x10] 0x7e61a48480
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f0, Size: 0x8] 0x7e61a48500
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4f8, Size: 0x10] 0x7e61a48580
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x508, Size: 0x18] 0x7e61a48600
	Material* ConstraintLimitMaterial;//[Offset: 0x520, Size: 0x8] 0x7e61a48680
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x528, Size: 0x8] 0x7e61a48700
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x530, Size: 0x8] 0x7e61a48780
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x538, Size: 0x8] 0x7e61a48800
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x540, Size: 0x8] 0x7e61a48880
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x548, Size: 0x8] 0x7e61a48900
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x550, Size: 0x8] 0x7e61a48980
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x558, Size: 0x8] 0x7e61a48a00
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x560, Size: 0x8] 0x7e61a48a80
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x568, Size: 0x18] 0x7e61a48b00
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x580, Size: 0x8] 0x7e61a48b80
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x588, Size: 0x18] 0x7e61a48c00
	Material* ArrowMaterial;//[Offset: 0x5a0, Size: 0x8] 0x7e61a48c80
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5a8, Size: 0x8] 0x7e61a48d00
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b0, Size: 0x18] 0x7e61a48d80
	LinearColor LightingOnlyBrightness;//[Offset: 0x5c8, Size: 0x10] 0x7e61a48e00
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5d8, Size: 0x10] 0x7e6197fce0
	LinearColor[] QuadComplexityColors;//[Offset: 0x5e8, Size: 0x10] 0x7e6197fd80
	LinearColor[] LightComplexityColors;//[Offset: 0x5f8, Size: 0x10] 0x7e6197fe20
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x608, Size: 0x10] 0x7e6197fec0
	LinearColor[] LODColorationColors;//[Offset: 0x618, Size: 0x10] 0x7e6197ff60
	LinearColor[] HLODColorationColors;//[Offset: 0x628, Size: 0x10] 0x7e6197e340
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x638, Size: 0x10] 0x7e6197e3e0
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x648, Size: 0x4] 0x7e61a49200
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x64c, Size: 0x4] 0x7e61a49280
	float MinLightMapDensity;//[Offset: 0x650, Size: 0x4] 0x7e61a49300
	float IdealLightMapDensity;//[Offset: 0x654, Size: 0x4] 0x7e61a49380
	float MaxLightMapDensity;//[Offset: 0x658, Size: 0x4] 0x7e61a49400
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65c, Size: 0x1] 0x7e61a49480
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x660, Size: 0x4] 0x7e61a47400
	float RenderLightMapDensityColorScale;//[Offset: 0x664, Size: 0x4] 0x7e61a47480
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x668, Size: 0x10] 0x7e61a47500
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x678, Size: 0x10] 0x7e61a47580
	StatColorMapping[] StatColorMappings;//[Offset: 0x688, Size: 0x10] 0x7e6197e480
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x698, Size: 0x8] 0x7e61a47680
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a0, Size: 0x18] 0x7e61a47700
	PhysicalMaterial* DefaultDestructiblePhysMaterial;//[Offset: 0x6b8, Size: 0x8] 0x7e61a47780
	SoftObjectPath DefaultDestructiblePhysMaterialName;//[Offset: 0x6c0, Size: 0x18] 0x7e61a47800
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6d8, Size: 0x10] 0x7e6197e520
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6e8, Size: 0x10] 0x7e6197e5c0
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6f8, Size: 0x10] 0x7e6197e660
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x708, Size: 0x10] 0x7e6197e700
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x718, Size: 0x8] 0x7e61a47a80
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x720, Size: 0x18] 0x7e61a47b00
	Texture2D* BlueNoiseTexture;//[Offset: 0x738, Size: 0x8] 0x7e61a47b80
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x740, Size: 0x18] 0x7e61a47c00
	Texture2D* MiniFontTexture;//[Offset: 0x758, Size: 0x8] 0x7e61a47c80
	SoftObjectPath MiniFontTextureName;//[Offset: 0x760, Size: 0x18] 0x7e61a47d00
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x778, Size: 0x8] 0x7e61a47d80
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x780, Size: 0x18] 0x7e61a47e00
	Texture2D* LightMapDensityTexture;//[Offset: 0x798, Size: 0x8] 0x7e61a47e80
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x7a0, Size: 0x18] 0x7e61a47f00
	GameViewportClient* GameViewport;//[Offset: 0x7c0, Size: 0x8] 0x7e61a47f80
	FString[] DeferredCommands;//[Offset: 0x7c8, Size: 0x10] 0x7e6197e7a0
	float NearClipPlane;//[Offset: 0x7d8, Size: 0x4] 0x7e61a48080
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 0x1] 0x7e61a48100
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dc, Size: 0x1] 0x7e61a48180
	int MaximumLoopIterationCount;//[Offset: 0x7e0, Size: 0x4] 0x7e61a48200
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e4, Size: 0x1] 0x7e61a48280
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e4, Size: 0x1] 0x7e61a48300
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e4, Size: 0x1] 0x7e61a48380
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e4, Size: 0x1] 0x7e61a48400
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7e4, Size: 0x1] 0x7e61a46380
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e4, Size: 0x1] 0x7e61a46400
	float FixedFrameRate;//[Offset: 0x7e8, Size: 0x4] 0x7e61a46480
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7ec, Size: 0x10] 0x7e61a46500
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x800, Size: 0x8] 0x7e61a46580
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18] 0x7e61a46600
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8] 0x7e61a46680
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18] 0x7e61a46700
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1] 0x7e61a46780
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8] 0x7e61a46800
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4] 0x7e61a46880
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1] 0x7e61a46900
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4] 0x7e61a46980
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1] 0x7e61a46a00
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4] 0x7e61a46a80
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4] 0x7e61a46b00
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4] 0x7e61a46b80
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4] 0x7e61a46c00
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4] 0x7e61a46c80
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4] 0x7e61a46d00
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4] 0x7e61a46d80
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4] 0x7e61a46e00
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4] 0x7e61a46e80
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4] 0x7e61a46f00
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4] 0x7e61a46f80
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4] 0x7e61a47000
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4] 0x7e61a47080
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4] 0x7e61a47100
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10] 0x7e61a47180
	bool UseStaticMeshMinLODPerQualityLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 0x1] 0x7e61a47200
	enum TransitionType;//[Offset: 0x8e9, Size: 0x1] 0x7e6197e840
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10] 0x7e61a47300
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10] 0x7e61a47380
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x910, Size: 0x1] 0x7e61a45300
	float CameraRotationThreshold;//[Offset: 0x914, Size: 0x4] 0x7e61a45380
	float CameraTranslationThreshold;//[Offset: 0x918, Size: 0x4] 0x7e61a45400
	float PrimitiveProbablyVisibleTime;//[Offset: 0x91c, Size: 0x4] 0x7e61a45480
	float MaxOcclusionPixelsFraction;//[Offset: 0x920, Size: 0x4] 0x7e61a45500
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x924, Size: 0x1] 0x7e61a45580
	int MaxParticleResize;//[Offset: 0x928, Size: 0x4] 0x7e61a45600
	int MaxParticleResizeWarn;//[Offset: 0x92c, Size: 0x4] 0x7e61a45680
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x930, Size: 0x10] 0x7e6197e8e0
	float NetClientTicksPerSecond;//[Offset: 0x940, Size: 0x4] 0x7e61a45780
	float DisplayGamma;//[Offset: 0x944, Size: 0x4] 0x7e61a45800
	float MinDesiredFrameRate;//[Offset: 0x948, Size: 0x4] 0x7e61a45880
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x94c, Size: 0x10] 0x7e61a45900
	LinearColor SelectedMaterialColor;//[Offset: 0x95c, Size: 0x10] 0x7e61a45980
	LinearColor SelectionOutlineColor;//[Offset: 0x96c, Size: 0x10] 0x7e61a45a00
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x97c, Size: 0x10] 0x7e61a45a80
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x98c, Size: 0x10] 0x7e61a45b00
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 0x1] 0x7e61a45b80
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x99d, Size: 0x1] 0x7e61a45c00
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x99d, Size: 0x1] 0x7e61a45c80
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x99d, Size: 0x1] 0x7e61a45d00
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x99d, Size: 0x1] 0x7e61a45d80
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a0, Size: 0x4] 0x7e61a45e00
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9a4, Size: 0x4] 0x7e61a45e80
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a8, Size: 0x1] 0x7e61a45f00
	FString ParticleEventManagerClassPath;//[Offset: 0x9b0, Size: 0x10] 0x7e61a45f80
	float SelectionHighlightIntensity;//[Offset: 0x9c0, Size: 0x4] 0x7e61a46000
	float BSPSelectionHighlightIntensity;//[Offset: 0x9c4, Size: 0x4] 0x7e61a46080
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9c8, Size: 0x4] 0x7e61a46100
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc60, Size: 0x10] 0x7e6197e980
	FString[] ServerActors;//[Offset: 0xc70, Size: 0x10] 0x7e6197ea20
	FString[] RuntimeServerActors;//[Offset: 0xc80, Size: 0x10] 0x7e6197eac0
	float NetErrorLogInterval;//[Offset: 0xc90, Size: 0x4] 0x7e61a46300
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc94, Size: 0x1] 0x7e61a44280
	int NextWorldContextHandle;//[Offset: 0xca8, Size: 0x4] 0x7e61a44300

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61a77380
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e61a75300
	uint32 ResolutionSizeX;//[Offset: 0x88, Size: 0x4] 0x7e61a75380
	uint32 ResolutionSizeY;//[Offset: 0x8c, Size: 0x4] 0x7e61a75400
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x90, Size: 0x4] 0x7e61a75480
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x94, Size: 0x4] 0x7e61a75500
	int WindowPosX;//[Offset: 0x98, Size: 0x4] 0x7e61a75580
	int WindowPosY;//[Offset: 0x9c, Size: 0x4] 0x7e61a75600
	int FullscreenMode;//[Offset: 0xa0, Size: 0x4] 0x7e61a75680
	int LastConfirmedFullscreenMode;//[Offset: 0xa4, Size: 0x4] 0x7e61a75700
	int PreferredFullscreenMode;//[Offset: 0xa8, Size: 0x4] 0x7e61a75780
	uint32 Version;//[Offset: 0xac, Size: 0x4] 0x7e61a75800
	int AudioQualityLevel;//[Offset: 0xb0, Size: 0x4] 0x7e61a75880
	int LastConfirmedAudioQualityLevel;//[Offset: 0xb4, Size: 0x4] 0x7e61a75900
	float FrameRateLimit;//[Offset: 0xb8, Size: 0x4] 0x7e61a75980
	int DesiredScreenWidth;//[Offset: 0xc0, Size: 0x4] 0x7e61a75a00
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1] 0x7e61a75a80
	int DesiredScreenHeight;//[Offset: 0xc8, Size: 0x4] 0x7e61a75b00
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xcc, Size: 0x4] 0x7e61a75b80
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xd0, Size: 0x4] 0x7e61a75c00
	float LastRecommendedScreenWidth;//[Offset: 0xd4, Size: 0x4] 0x7e61a75c80
	float LastRecommendedScreenHeight;//[Offset: 0xd8, Size: 0x4] 0x7e61a75d00
	float LastCPUBenchmarkResult;//[Offset: 0xdc, Size: 0x4] 0x7e61a75d80
	float LastGPUBenchmarkResult;//[Offset: 0xe0, Size: 0x4] 0x7e61a75e00
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe8, Size: 0x10] 0x7e61a51f00
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf8, Size: 0x10] 0x7e61a51fa0
	float LastGPUBenchmarkMultiplier;//[Offset: 0x108, Size: 0x4] 0x7e61a75f80
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x7e61a76000
	int HDRDisplayOutputNits;//[Offset: 0x110, Size: 0x4] 0x7e61a76080
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x118, Size: 0x10] 0x7e61a76100
	void ValidateSettings();// 0x2f7158ebd041 0x7e61a80b00
	bool SupportsHDRDisplayOutput();// 0x2f7058ebd041 0x7e61a80be0
	void SetVSyncEnabled(bool bEnable);// 0x2f6f58ebd041 0x7e61a80cc0
	void SetVisualEffectQuality(int Value);// 0x2f6e58ebd041 0x7e61a80da0
	void SetViewDistanceQuality(int Value);// 0x2f6d58ebd041 0x7e61a80e80
	void SetToDefaults();// 0x2f6c58ebd041 0x7e61a80f60
	void SetTextureQuality(int Value);// 0x2f6b58ebd041 0x7e61a81040
	void SetShadowQuality(int Value);// 0x2f6a58ebd041 0x7e61a81120
	void SetShadingQuality(int Value);// 0x2f6958ebd041 0x7e61a81200
	void SetScreenResolution(IntPoint Resolution);// 0x2f6858ebd041 0x7e61a812e0
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x2f6758ebd041 0x7e61a813c0
	void SetResolutionScaleValue(int NewScaleValue);// 0x2f6658ebd041 0x7e61a814a0
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x2f6558ebd041 0x7e61a81580
	void SetReflectionQuality(int Value);// 0x2f6458ebd041 0x7e61a81660
	void SetPostProcessingQuality(int Value);// 0x2f6358ebd041 0x7e61a81740
	void SetOverallScalabilityLevel(int Value);// 0x2f6258ebd041 0x7e61a81820
	void SetGlobalIlluminationQuality(int Value);// 0x2f6158ebd041 0x7e61a81900
	void SetFullscreenMode(byte InFullscreenMode);// 0x2f6058ebd041 0x7e61a819e0
	void SetFrameRateLimit(float NewLimit);// 0x2f5f58ebd041 0x7e61a81ac0
	void SetFoliageQuality(int Value);// 0x2f5e58ebd041 0x7e61a81ba0
	void SetDynamicResolutionEnabled(bool bEnable);// 0x2f9f58ebd041 0x7e61a81c80
	void SetBenchmarkFallbackValues();// 0x2f5c58ebd041 0x7e61a3e780
	void SetAudioQualityLevel(int QualityLevel);// 0x2f5b58ebd041 0x7e61a3e860
	void SetAntiAliasingQuality(int Value);// 0x2f5a58ebd041 0x7e61a3e940
	void SaveSettings();// 0x2f5958ebd041 0x7e61a3ea20
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x2f5858ebd041 0x7e61a3eb00
	void RevertVideoMode();// 0x2f5758ebd041 0x7e61a3ebe0
	void ResetToCurrentSettings();// 0x2f5658ebd041 0x7e61a3ecc0
	void LoadSettings(bool bForceReload);// 0x2f5558ebd041 0x7e61a3eda0
	bool IsVSyncEnabled();// 0x2f5458ebd041 0x7e61a3ee80
	bool IsVSyncDirty();// 0x2f5358ebd041 0x7e61a3ef60
	bool IsScreenResolutionDirty();// 0x2f5258ebd041 0x7e61a3f040
	bool IsHDREnabled();// 0x2f5158ebd041 0x7e61a3f120
	bool IsFullscreenModeDirty();// 0x2f5058ebd041 0x7e61a3f200
	bool IsDynamicResolutionEnabled();// 0x2f4f58ebd041 0x7e61a3f2e0
	bool IsDynamicResolutionDirty();// 0x2f4e58ebd041 0x7e61a3f3c0
	bool IsDirty();// 0x2f4d58ebd041 0x7e61a3f4a0
	int GetVisualEffectQuality();// 0x2f4c58ebd041 0x7e61a3f580
	int GetViewDistanceQuality();// 0x2f4b58ebd041 0x7e61a3f660
	int GetTextureQuality();// 0x2f4a58ebd041 0x7e61a3f740
	int GetSyncInterval();// 0x2f4958ebd041 0x7e61a3f820
	int GetShadowQuality();// 0x2f4858ebd041 0x7e61a3f900
	int GetShadingQuality();// 0x2f4758ebd041 0x7e61a3f9e0
	IntPoint GetScreenResolution();// 0x2f4658ebd041 0x7e61a3fac0
	float GetResolutionScaleNormalized();// 0x2f4558ebd041 0x7e61a3fba0
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x2f4458ebd041 0x7e61a3fc80
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x2f4358ebd041 0x7e61a3fd60
	int GetReflectionQuality();// 0x2f4258ebd041 0x7e61a3fe40
	float GetRecommendedResolutionScale();// 0xffffff8158ebd000 0x7e61a3ff20
	byte GetPreferredFullscreenMode();// 0x2f4058ebd041 0x7e61a3caa0
	int GetPostProcessingQuality();// 0x2f3f58ebd041 0x7e61a3cb80
	int GetOverallScalabilityLevel();// 0x2f3e58ebd041 0x7e61a3cc60
	IntPoint GetLastConfirmedScreenResolution();// 0x2f3d58ebd041 0x7e61a3cd40
	byte GetLastConfirmedFullscreenMode();// 0x2f3c58ebd041 0x7e61a3ce20
	int GetGlobalIlluminationQuality();// 0x2f3b58ebd041 0x7e61a3cf00
	GameUserSettings* GetGameUserSettings();// 0x2f3a58ebd041 0x7e61a3cfe0
	byte GetFullscreenMode();// 0x2f3958ebd041 0x7e61a3d0c0
	float GetFrameRateLimit();// 0x2f3858ebd041 0x7e61a3d1a0
	int GetFramePace();// 0x2f3758ebd041 0x7e61a3d280
	int GetFoliageQuality();// 0x2f3658ebd041 0x7e61a3d360
	IntPoint GetDesktopResolution();// 0x2f3558ebd041 0x7e61a3d440
	IntPoint GetDefaultWindowPosition();// 0x2f3458ebd041 0x7e61a3d520
	byte GetDefaultWindowMode();// 0x2f3358ebd041 0x7e61a3d600
	float GetDefaultResolutionScale();// 0x2f3258ebd041 0x7e61a3d6e0
	IntPoint GetDefaultResolution();// 0x2f3158ebd041 0x7e61a3d7c0
	int GetCurrentHDRDisplayNits();// 0x2f3058ebd041 0x7e61a3d8a0
	int GetAudioQualityLevel();// 0x2f2f58ebd041 0x7e61a3d980
	int GetAntiAliasingQuality();// 0x2f2e58ebd041 0x7e61a3da60
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x2f2d58ebd041 0x7e61a3db40
	void ConfirmVideoMode();// 0x2f2c58ebd041 0x7e61a3dc20
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x2f2b58ebd041 0x7e61a3dd00
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x2f2a58ebd041 0x7e61a3dde0
	void ApplyNonResolutionSettings();// 0x2f2958ebd041 0x7e61a3dec0
	void ApplyHardwareBenchmarkResults();// 0x2f2858ebd041 0x7e61a3dfa0

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10] 0x7e6161c180
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10] 0x7e84e595c0
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x7e6161c280

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4] 0x7e6161c300
	Color Out;//[Offset: 0x4, Size: 0x4] 0x7e6161c380

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8] 0x7e6161bc00
	FName NewGameName;//[Offset: 0x8, Size: 0x8] 0x7e6161bc80

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x7e6161b800
	FName OldClassName;//[Offset: 0x8, Size: 0x8] 0x7e6161b880
	FName NewClassName;//[Offset: 0x10, Size: 0x8] 0x7e6161b900
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8] 0x7e6161b980
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8] 0x7e6161ba00
	FName NewClassClass;//[Offset: 0x28, Size: 0x8] 0x7e6161ba80
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8] 0x7e6161bb00
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e6161bb80

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10] 0x7e6161b600
	FString NewPluginName;//[Offset: 0x10, Size: 0x10] 0x7e6161b680

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8] 0x7e6161b700
	FName NewStructName;//[Offset: 0x8, Size: 0x8] 0x7e6161b780

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x7e8412e080
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x7e8412df00

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7e8412e000
	float Value;//[Offset: 0x4, Size: 0x4] 0x7e8412df80

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4] 0x7e61901d80
	Timecode GetTimecode();// 0x27c858ebd041 0x7e618d6fa0
	enum GetSynchronizationState();// 0x27c758ebd041 0x7e618d7080
	QualifiedFrameTime GetQualifiedFrameTime();// 0x27c658ebd041 0x7e618d7160
	FrameRate GetFrameRate();// 0x27c558ebd041 0x7e618d7240
	Timecode GetDelayedTimecode();// 0x280658ebd041 0x7e618d7320
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x27c358ebd041 0x7e618d3a40
	bool FetchTimecode(out QualifiedFrameTime OutFrameTime);// 0x27c258ebd041 0x7e618d3b20
	void FetchAndUpdate();// 0x27c158ebd041 0x7e618d3c00

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8] 0x7e841e2d80
	FrameRate Rate;//[Offset: 0x8, Size: 0x8] 0x7e841e2d00

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e6161c000
	Rotator Rotation;//[Offset: 0x18, Size: 0x18] 0x7e6161c080
	FString Comment;//[Offset: 0x30, Size: 0x10] 0x7e6161c100

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8] 0x7e6161ac80
	FName DriverClassName;//[Offset: 0x8, Size: 0x8] 0x7e6161ad00
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8] 0x7e6161ad80

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0xa10] 0x7e61a1a080

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1] 0x7e6156fd80
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0xc0] 0x7e6156fe00
	SlateBrush UncheckedHoveredImage;//[Offset: 0xd0, Size: 0xc0] 0x7e6156fe80
	SlateBrush UncheckedPressedImage;//[Offset: 0x190, Size: 0xc0] 0x7e6156ff00
	SlateBrush CheckedImage;//[Offset: 0x250, Size: 0xc0] 0x7e6156ff80
	SlateBrush CheckedHoveredImage;//[Offset: 0x310, Size: 0xc0] 0x7e6156e780
	SlateBrush CheckedPressedImage;//[Offset: 0x3d0, Size: 0xc0] 0x7e6156e800
	SlateBrush UndeterminedImage;//[Offset: 0x490, Size: 0xc0] 0x7e6156e880
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x550, Size: 0xc0] 0x7e6156e900
	SlateBrush UndeterminedPressedImage;//[Offset: 0x610, Size: 0xc0] 0x7e6156e980
	Margin Padding;//[Offset: 0x6d0, Size: 0x10] 0x7e6156ea00
	SlateBrush BackgroundImage;//[Offset: 0x6e0, Size: 0xc0] 0x7e6156ea80
	SlateBrush BackgroundHoveredImage;//[Offset: 0x7a0, Size: 0xc0] 0x7e6156eb00
	SlateBrush BackgroundPressedImage;//[Offset: 0x860, Size: 0xc0] 0x7e6156eb80
	SlateColor ForegroundColor;//[Offset: 0x920, Size: 0x14] 0x7e6156ec00
	SlateColor HoveredForeground;//[Offset: 0x934, Size: 0x14] 0x7e6156ec80
	SlateColor PressedForeground;//[Offset: 0x948, Size: 0x14] 0x7e6156ed00
	SlateColor CheckedForeground;//[Offset: 0x95c, Size: 0x14] 0x7e6156ed80
	SlateColor CheckedHoveredForeground;//[Offset: 0x970, Size: 0x14] 0x7e6156ee00
	SlateColor CheckedPressedForeground;//[Offset: 0x984, Size: 0x14] 0x7e6156ee80
	SlateColor UndeterminedForeground;//[Offset: 0x998, Size: 0x14] 0x7e6156ef00
	SlateColor BorderBackgroundColor;//[Offset: 0x9ac, Size: 0x14] 0x7e6156ef80
	SlateSound CheckedSlateSound;//[Offset: 0x9c0, Size: 0x18] 0x7e6156f000
	SlateSound UncheckedSlateSound;//[Offset: 0x9d8, Size: 0x18] 0x7e6156f080
	SlateSound HoveredSlateSound;//[Offset: 0x9f0, Size: 0x18] 0x7e6156f100

--------------------------------
Class: GameMapsSettings.Object
	FString LocalMapOptions;//[Offset: 0x28, Size: 0x10] 0x7e61855500
	SoftObjectPath TransitionMap;//[Offset: 0x38, Size: 0x18] 0x7e61855580
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e61855600
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x51, Size: 0x1] 0x7e61855680
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x52, Size: 0x1] 0x7e61855700
	enum FourPlayerSplitscreenLayout;//[Offset: 0x53, Size: 0x1] 0x7e617bcf40
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7e61855800
	SoftClassPath GameInstanceClass;//[Offset: 0x58, Size: 0x18] 0x7e61855880
	SoftObjectPath GameDefaultMap;//[Offset: 0x70, Size: 0x18] 0x7e61855900
	SoftObjectPath ServerDefaultMap;//[Offset: 0x88, Size: 0x18] 0x7e61855980
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xa0, Size: 0x18] 0x7e61855a00
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xb8, Size: 0x18] 0x7e61855a80
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xd0, Size: 0x10] 0x7e617bcfe0
	GameModeName[] GameModeClassAliases;//[Offset: 0xe0, Size: 0x10] 0x7e617bd080
	void SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer);// 0x253e58ebd041 0x7e617535e0
	bool GetSkipAssigningGamepadToPlayer1();// 0x253d58ebd041 0x7e617536c0
	GameMapsSettings* GetGameMapsSettings();// 0x253c58ebd041 0x7e617537a0

--------------------------------
Class: GameModeName
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7e61574e80
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18] 0x7e61574f00

--------------------------------
Class: PlatformInterfaceBase.Object
	DelegateArray[] AllDelegates;//[Offset: 0x28, Size: 0x10] 0x7e6197bf00

--------------------------------
Class: DelegateArray
	delegate[] Delegates;//[Offset: 0x0, Size: 0x10] 0x7e84e5dda0

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	FString[] LocalCloudFiles;//[Offset: 0x38, Size: 0x10] 0x7e6197be60
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61a19e00

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x28, Size: 0x10] 0x7e615dff80
	FString HelpUsage;//[Offset: 0x38, Size: 0x10] 0x7e615de780
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10] 0x7e615de800
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10] 0x7e61694ca0
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10] 0x7e61694d40
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7e615de980
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x7e615dea00
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x7e615dea80
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1] 0x7e615deb00
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1] 0x7e615deb80
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1] 0x7e615dec00

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7e6197baa0

--------------------------------
Class: BlueprintComponentDelegateBinding
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8] 0x7e61614e80
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8] 0x7e61614f00
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x7e61614f80

--------------------------------
Class: ComponentElementCounterInterface.Object

--------------------------------
Class: ComponentElementHierarchyInterface.Object

--------------------------------
Class: ComponentElementObjectInterface.Object

--------------------------------
Class: ComponentElementSelectionInterface.Object

--------------------------------
Class: ComponentElementWorldInterface.Object

--------------------------------
Class: ActorComponentInstanceDataTransientOuter.Object

--------------------------------
Class: CompositeCurveTable.CurveTable.Object
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10] 0x7e6197e2a0
	CurveTable*[] OldParentTables;//[Offset: 0xb0, Size: 0x10] 0x7e6197ba00

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xb0, Size: 0x10] 0x7e6197e160
	DataTable*[] OldParentTables;//[Offset: 0xc0, Size: 0x10] 0x7e6197e200

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x28, Size: 0x4] 0x7e61855d80
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x30, Size: 0x10] 0x7e617bd120
	FString[] AutoCompleteMapPaths;//[Offset: 0x40, Size: 0x10] 0x7e617bd1c0
	float BackgroundOpacityPercentage;//[Offset: 0x50, Size: 0x4] 0x7e61855f00
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7e61855f80
	bool bDisplayHelpInAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7e61856000
	Color InputColor;//[Offset: 0x58, Size: 0x4] 0x7e61856080
	Color HistoryColor;//[Offset: 0x5c, Size: 0x4] 0x7e61856100
	Color AutoCompleteCommandColor;//[Offset: 0x60, Size: 0x4] 0x7e61856180
	Color AutoCompleteCVarColor;//[Offset: 0x64, Size: 0x4] 0x7e61856200
	Color AutoCompleteFadedColor;//[Offset: 0x68, Size: 0x4] 0x7e61856280

--------------------------------
Class: AutoCompleteCommand
	FString Command;//[Offset: 0x0, Size: 0x10] 0x7e61574f80
	FString Desc;//[Offset: 0x10, Size: 0x10] 0x7e61575000

--------------------------------
Class: ConstraintInstanceBlueprintLibrary.BlueprintFunctionLibrary.Object
	void SetProjectionParams(out ConstraintInstanceAccessor Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha);// 0x2dd158ebd041 0x7e61a098c0
	void SetParentDominates(out ConstraintInstanceAccessor Accessor, bool bParentDominates);// 0x2dd058ebd041 0x7e61a099a0
	void SetOrientationDriveTwistAndSwing(out ConstraintInstanceAccessor Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x2dcf58ebd041 0x7e61a09a80
	void SetOrientationDriveSLERP(out ConstraintInstanceAccessor Accessor, bool bEnableSLERP);// 0x2dce58ebd041 0x7e61a09b60
	void SetLinearVelocityTarget(out ConstraintInstanceAccessor Accessor, out const Vector InVelTarget);// 0x2dcd58ebd041 0x7e61a09c40
	void SetLinearVelocityDrive(out ConstraintInstanceAccessor Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x2dcc58ebd041 0x7e61a09d20
	void SetLinearSoftLimitParams(out ConstraintInstanceAccessor Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance);// 0x2dcb58ebd041 0x7e61a09e00
	void SetLinearPositionTarget(out ConstraintInstanceAccessor Accessor, out const Vector InPosTarget);// 0x2dca58ebd041 0x7e61a09ee0
	void SetLinearPositionDrive(out ConstraintInstanceAccessor Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x2dc958ebd041 0x7e61a09fc0
	void SetLinearPlasticity(out ConstraintInstanceAccessor Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, byte PlasticityType);// 0x2dc858ebd041 0x7e61a0a0a0
	void SetLinearLimits(out ConstraintInstanceAccessor Accessor, byte XMotion, byte YMotion, byte ZMotion, float Limit);// 0x2dc758ebd041 0x7e61a0a180
	void SetLinearDriveParams(out ConstraintInstanceAccessor Accessor, float PositionStrength, float VelocityStrength, float InForceLimit);// 0x2dc658ebd041 0x7e61a0a260
	void SetLinearBreakable(out ConstraintInstanceAccessor Accessor, bool bLinearBreakable, float LinearBreakThreshold);// 0x2dc558ebd041 0x7e61a0a340
	void SetDisableCollision(out ConstraintInstanceAccessor Accessor, bool bDisableCollision);// 0x2dc458ebd041 0x7e61a0a420
	void SetContactTransferScale(out ConstraintInstanceAccessor Accessor, float ContactTransferScale);// 0x2dc358ebd041 0x7e61a0a500
	void SetAngularVelocityTarget(out ConstraintInstanceAccessor Accessor, out const Vector InVelTarget);// 0x2dc258ebd041 0x7e61a0a5e0
	void SetAngularVelocityDriveTwistAndSwing(out ConstraintInstanceAccessor Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x2dc158ebd041 0x7e61a0a6c0
	void SetAngularVelocityDriveSLERP(out ConstraintInstanceAccessor Accessor, bool bEnableSLERP);// 0x2dc058ebd041 0x7e61a0a7a0
	void SetAngularSoftTwistLimitParams(out ConstraintInstanceAccessor Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance);// 0x2dbf58ebd041 0x7e61a0a880
	void SetAngularSoftSwingLimitParams(out ConstraintInstanceAccessor Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance);// 0x2dbe58ebd041 0x7e61a0a960
	void SetAngularPlasticity(out ConstraintInstanceAccessor Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold);// 0x2dbd58ebd041 0x7e61a0aa40
	void SetAngularOrientationTarget(out ConstraintInstanceAccessor Accessor, out const Rotator InPosTarget);// 0x2dbc58ebd041 0x7e61a0ab20
	void SetAngularLimits(out ConstraintInstanceAccessor Accessor, byte Swing1MotionType, float Swing1LimitAngle, byte Swing2MotionType, float Swing2LimitAngle, byte TwistMotionType, float TwistLimitAngle);// 0x2dbb58ebd041 0x7e61a0ac00
	void SetAngularDriveParams(out ConstraintInstanceAccessor Accessor, float PositionStrength, float VelocityStrength, float InForceLimit);// 0x2dfc58ebd041 0x7e61a0ace0
	void SetAngularDriveMode(out ConstraintInstanceAccessor Accessor, byte DriveMode);// 0x2db958ebd041 0x7e61a07400
	void SetAngularBreakable(out ConstraintInstanceAccessor Accessor, bool bAngularBreakable, float AngularBreakThreshold);// 0x2db858ebd041 0x7e61a074e0
	void GetProjectionParams(out ConstraintInstanceAccessor Accessor, out bool bEnableProjection, out float ProjectionLinearAlpha, out float ProjectionAngularAlpha);// 0x2db758ebd041 0x7e61a075c0
	bool GetParentDominates(out ConstraintInstanceAccessor Accessor);// 0x2db658ebd041 0x7e61a076a0
	void GetOrientationDriveTwistAndSwing(out ConstraintInstanceAccessor Accessor, out bool bOutEnableTwistDrive, out bool bOutEnableSwingDrive);// 0x2db558ebd041 0x7e61a07780
	void GetOrientationDriveSLERP(out ConstraintInstanceAccessor Accessor, out bool bOutEnableSLERP);// 0x2db458ebd041 0x7e61a07860
	void GetLinearVelocityTarget(out ConstraintInstanceAccessor Accessor, out Vector OutVelTarget);// 0x2db358ebd041 0x7e61a07940
	void GetLinearVelocityDrive(out ConstraintInstanceAccessor Accessor, out bool bOutEnableDriveX, out bool bOutEnableDriveY, out bool bOutEnableDriveZ);// 0x2db258ebd041 0x7e61a07a20
	void GetLinearSoftLimitParams(out ConstraintInstanceAccessor Accessor, out bool bSoftLinearLimit, out float LinearLimitStiffness, out float LinearLimitDamping, out float LinearLimitRestitution, out float LinearLimitContactDistance);// 0x2db158ebd041 0x7e61a07b00
	void GetLinearPositionTarget(out ConstraintInstanceAccessor Accessor, out Vector OutPosTarget);// 0x2db058ebd041 0x7e61a07be0
	void GetLinearPositionDrive(out ConstraintInstanceAccessor Accessor, out bool bOutEnableDriveX, out bool bOutEnableDriveY, out bool bOutEnableDriveZ);// 0x2daf58ebd041 0x7e61a07cc0
	void GetLinearPlasticity(out ConstraintInstanceAccessor Accessor, out bool bLinearPlasticity, out float LinearPlasticityThreshold, out byte PlasticityType);// 0x2dae58ebd041 0x7e61a07da0
	void GetLinearLimits(out ConstraintInstanceAccessor Accessor, out byte XMotion, out byte YMotion, out byte ZMotion, out float Limit);// 0x2dad58ebd041 0x7e61a07e80
	void GetLinearDriveParams(out ConstraintInstanceAccessor Accessor, out float OutPositionStrength, out float OutVelocityStrength, out float OutForceLimit);// 0x2dac58ebd041 0x7e61a07f60
	void GetLinearBreakable(out ConstraintInstanceAccessor Accessor, out bool bLinearBreakable, out float LinearBreakThreshold);// 0x2dab58ebd041 0x7e61a08040
	bool GetDisableCollsion(out ConstraintInstanceAccessor Accessor);// 0x2daa58ebd041 0x7e61a08120
	void GetContactTransferScale(out ConstraintInstanceAccessor Accessor, out float ContactTransferScale);// 0x2da958ebd041 0x7e61a08200
	void GetAttachedBodyNames(out ConstraintInstanceAccessor Accessor, out FName ParentBody, out FName ChildBody);// 0x2da858ebd041 0x7e61a082e0
	void GetAngularVelocityTarget(out ConstraintInstanceAccessor Accessor, out Vector OutVelTarget);// 0x2da758ebd041 0x7e61a083c0
	void GetAngularVelocityDriveTwistAndSwing(out ConstraintInstanceAccessor Accessor, out bool bOutEnableTwistDrive, out bool bOutEnableSwingDrive);// 0x2da658ebd041 0x7e61a084a0
	void GetAngularVelocityDriveSLERP(out ConstraintInstanceAccessor Accessor, out bool bOutEnableSLERP);// 0x2da558ebd041 0x7e61a08580
	void GetAngularSoftTwistLimitParams(out ConstraintInstanceAccessor Accessor, out bool bSoftTwistLimit, out float TwistLimitStiffness, out float TwistLimitDamping, out float TwistLimitRestitution, out float TwistLimitContactDistance);// 0x2da458ebd041 0x7e61a08660
	void GetAngularSoftSwingLimitParams(out ConstraintInstanceAccessor Accessor, out bool bSoftSwingLimit, out float SwingLimitStiffness, out float SwingLimitDamping, out float SwingLimitRestitution, out float SwingLimitContactDistance);// 0x2da358ebd041 0x7e61a08740
	void GetAngularPlasticity(out ConstraintInstanceAccessor Accessor, out bool bAngularPlasticity, out float AngularPlasticityThreshold);// 0x2da258ebd041 0x7e61a08820
	void GetAngularOrientationTarget(out ConstraintInstanceAccessor Accessor, out Rotator OutPosTarget);// 0x2da158ebd041 0x7e61a08900
	void GetAngularLimits(out ConstraintInstanceAccessor Accessor, out byte Swing1MotionType, out float Swing1LimitAngle, out byte Swing2MotionType, out float Swing2LimitAngle, out byte TwistMotionType, out float TwistLimitAngle);// 0x2da058ebd041 0x7e61a089e0
	void GetAngularDriveParams(out ConstraintInstanceAccessor Accessor, out float OutPositionStrength, out float OutVelocityStrength, out float OutForceLimit);// 0x2d9f58ebd041 0x7e61a08ac0
	void GetAngularDriveMode(out ConstraintInstanceAccessor Accessor, out byte OutDriveMode);// 0x2d9e58ebd041 0x7e61a08ba0
	void GetAngularBreakable(out ConstraintInstanceAccessor Accessor, out bool bAngularBreakable, out float AngularBreakThreshold);// 0x2d9d58ebd041 0x7e61a08c80
	void CopyParams(out ConstraintInstanceAccessor Accessor, out ConstraintInstanceAccessor SourceAccessor, bool bKeepPosition, bool bKeepRotation);// 0x2d9c58ebd041 0x7e61a08d60

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61a20580
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7e61a20600
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4] 0x7e61a20680
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4] 0x7e61a20700
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4] 0x7e61a20780
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61a20800
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7e61a20880
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4] 0x7e61a20900
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4] 0x7e61a20980
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4] 0x7e61a20a00
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4] 0x7e61a20a80
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4] 0x7e61a20b00
	int LevelStreamingAddPrimitiveGranularity;//[Offset: 0x60, Size: 0x4] 0x7e61a20b80
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x64, Size: 0x4] 0x7e61a20c00
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x68, Size: 0x4] 0x7e61a20c80
	bool FlushStreamingOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7e61a20d00
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x7e61a20d80

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x38, Size: 0x4] 0x7e61a21d00
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7e61a21d80
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7e61a21e00
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7e61a21e80
	bool MultithreadedDestructionEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x7e61a21f00
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x7e61a21f80
	bool AssetClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x7e61a22000
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x7e61a22080
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x7e61a22100
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x7e61a20080
	bool VerifyGCObjectNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1] 0x7e61a20100
	bool VerifyUObjectsAreNotFGCObjects;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1] 0x7e61a20180
	bool PendingKillEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1] 0x7e61a20200
	int MinGCClusterSize;//[Offset: 0x40, Size: 0x4] 0x7e61a20280
	int NumRetriesBeforeForcingGC;//[Offset: 0x44, Size: 0x4] 0x7e61a20300
	int MaxObjectsNotConsideredByGC;//[Offset: 0x48, Size: 0x4] 0x7e61a20380
	int SizeOfPermanentObjectPool;//[Offset: 0x4c, Size: 0x4] 0x7e61a20400
	int MaxObjectsInGame;//[Offset: 0x50, Size: 0x4] 0x7e61a20480
	int MaxObjectsInEditor;//[Offset: 0x54, Size: 0x4] 0x7e61a20500

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x2b0, Size: 0x10] 0x7e6197e020
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0, Size: 0x1] 0x7e61a21c80

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4] 0x7e61616880
	float CullDistance;//[Offset: 0x4, Size: 0x4] 0x7e61616900

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: AnimationCurveIdentifierExtensions.BlueprintFunctionLibrary.Object
	bool IsValid(out AnimationCurveIdentifier Identifier);// 0x2dd758ebd041 0x7e61a09380
	enum GetType(out AnimationCurveIdentifier Identifier);// 0x2dd658ebd041 0x7e61a09460
	FName GetName(out AnimationCurveIdentifier Identifier);// 0x2dd558ebd041 0x7e61a09540

--------------------------------
Class: AnimationCurveIdentifier

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object
	uint32 TextureSize;//[Offset: 0x2a8, Size: 0x4] 0x7e61a22800
	bool bSquareResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1] 0x7e61a22880
	uint32 TextureHeight;//[Offset: 0x2b0, Size: 0x4] 0x7e61a22900
	CurveLinearColor*[] GradientCurves;//[Offset: 0x2b8, Size: 0x10] 0x7e6197dee0
	bool GetCurvePosition(CurveLinearColor* InCurve, out float Position);// 0x2ddd58ebd041 0x7e61a0c800

--------------------------------
Class: CurveSourceInterface.Interface.Object
	float GetCurveValue(FName CurveName);// 0x2de058ebd041 0x7e61a0c560
	void GetCurves(out NamedCurveValue[] OutValues);// 0x2ddf58ebd041 0x7e61a0c640
	FName GetBindingName();// 0x2dde58ebd041 0x7e61a0c720

--------------------------------
Class: NamedCurveValue
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61618300
	float Value;//[Offset: 0x8, Size: 0x4] 0x7e61618380

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DataDrivenCVarEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	delegate OnDataDrivenCVarDelegate;//[Offset: 0x30, Size: 0x10] 0x7e8488ff00

--------------------------------
Class: DataDrivenConsoleVariableSettings.DeveloperSettings.Object
	DataDrivenConsoleVariable[] CVarsArray;//[Offset: 0x50, Size: 0x10] 0x7e6197dda0

--------------------------------
Class: DataDrivenConsoleVariable
	enum Type;//[Offset: 0x0, Size: 0x1] 0x7e84e58120
	FString Name;//[Offset: 0x8, Size: 0x10] 0x7e61617a00
	FString ToolTip;//[Offset: 0x18, Size: 0x10] 0x7e61617a80
	float DefaultValueFloat;//[Offset: 0x28, Size: 0x4] 0x7e61617b00
	int DefaultValueInt;//[Offset: 0x2c, Size: 0x4] 0x7e61617b80
	bool DefaultValueBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61617c00

--------------------------------
Class: DataLayerSubsystem.WorldSubsystem.Subsystem.Object
	delegate OnDataLayerRuntimeStateChanged;//[Offset: 0x30, Size: 0x10] 0x7e61a24a00
	void SetDataLayerStateByLabel(out const FName InDataLayerLabel, enum InState);// 0x2dfb58ebd041 0x7e61a0adc0
	void SetDataLayerState(out const ActorDataLayer InDataLayer, enum InState);// 0x2dfa58ebd041 0x7e61a0aea0
	void SetDataLayerRuntimeStateByLabel(out const FName InDataLayerLabel, enum InState, bool bInIsRecursive);// 0x2df958ebd041 0x7e61a0af80
	void SetDataLayerRuntimeState(out const ActorDataLayer InDataLayer, enum InState, bool bInIsRecursive);// 0x2df858ebd041 0x7e61a0b060
	<FName> GetLoadedDataLayerNames();// 0x2df758ebd041 0x7e61a0b140
	enum GetDataLayerStateByLabel(out const FName InDataLayerLabel);// 0x2df658ebd041 0x7e61a0b220
	enum GetDataLayerState(out const ActorDataLayer InDataLayer);// 0x2df558ebd041 0x7e61a0b300
	enum GetDataLayerRuntimeStateByLabel(out const FName InDataLayerLabel);// 0x2df458ebd041 0x7e61a0b3e0
	enum GetDataLayerRuntimeState(out const ActorDataLayer InDataLayer);// 0x2df358ebd041 0x7e61a0b4c0
	DataLayer* GetDataLayerFromName(FName InDataLayerName);// 0x2df258ebd041 0x7e61a0b5a0
	DataLayer* GetDataLayerFromLabel(FName InDataLayerLabel);// 0x2df158ebd041 0x7e61a0b680
	enum GetDataLayerEffectiveRuntimeStateByLabel(out const FName InDataLayerLabel);// 0x2df058ebd041 0x7e61a0b760
	enum GetDataLayerEffectiveRuntimeState(out const ActorDataLayer InDataLayer);// 0x2def58ebd041 0x7e61a0b840
	DataLayer* GetDataLayer(out const ActorDataLayer InDataLayer);// 0x2dee58ebd041 0x7e61a0b920
	<FName> GetActiveDataLayerNames();// 0x2ded58ebd041 0x7e61a0ba00

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0x2e0058ebd041 0x7e61a0e320
	bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0x2dff58ebd041 0x7e61a0e400
	FString[] GetDataTableColumnAsString(const DataTable* DataTable, FName PropertyName);// 0x2dfe58ebd041 0x7e61a0e4e0
	void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0x2dfd58ebd041 0x7e61a0e5c0
	bool DoesDataTableRowExist(DataTable* Table, FName RowName);// 0x2e3958ebd041 0x7e61a0e6a0

--------------------------------
Class: TableRowBase

--------------------------------
Class: DebugCameraControllerSettings.DeveloperSettings.Object
	DebugCameraControllerSettingsViewModeIndex[] CycleViewModes;//[Offset: 0x38, Size: 0x10] 0x7e6197d1c0

--------------------------------
Class: DebugCameraControllerSettingsViewModeIndex
	byte ViewModeIndex;//[Offset: 0x8, Size: 0x1] 0x7e61617680

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x278, Size: 0x8] 0x7e61a29500
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x2e2758ebd041 0x7e61a0f660
	MaterialInterface* GetDecalMaterial();// 0x2e2658ebd041 0x7e61a0f740
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x2e2558ebd041 0x7e61a0f820

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2b0, Size: 0x8] 0x7e61a2aa80
	int SortOrder;//[Offset: 0x2b8, Size: 0x4] 0x7e61a2ab00
	float FadeScreenSize;//[Offset: 0x2bc, Size: 0x4] 0x7e61a2ab80
	float FadeStartDelay;//[Offset: 0x2c0, Size: 0x4] 0x7e61a2ac00
	float FadeDuration;//[Offset: 0x2c4, Size: 0x4] 0x7e61a2ac80
	float FadeInDuration;//[Offset: 0x2c8, Size: 0x4] 0x7e61a2ad00
	float FadeInStartDelay;//[Offset: 0x2cc, Size: 0x4] 0x7e61a2ad80
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x7e61a2ae00
	Vector DecalSize;//[Offset: 0x2d8, Size: 0x18] 0x7e61a2ae80
	void SetSortOrder(int Value);// 0x2e3258ebd041 0x7e61a0ecc0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x2e3158ebd041 0x7e61a0eda0
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x2e3058ebd041 0x7e61a0ee80
	void SetFadeIn(float StartDelay, float Duaration);// 0x2e2f58ebd041 0x7e61a0ef60
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x2e2e58ebd041 0x7e61a0f040
	float GetFadeStartDelay();// 0x2e2d58ebd041 0x7e61a0f120
	float GetFadeInStartDelay();// 0x2e2c58ebd041 0x7e61a0f200
	float GetFadeInDuration();// 0x2e2b58ebd041 0x7e61a0f2e0
	float GetFadeDuration();// 0x2e2a58ebd041 0x7e61a0f3c0
	MaterialInterface* GetDecalMaterial();// 0x2e2958ebd041 0x7e61a0f4a0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x2e2858ebd041 0x7e61a0f580

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x160, Size: 0x4] 0x7e61a4e000
	float Acceleration;//[Offset: 0x164, Size: 0x4] 0x7e61a4e080
	float Deceleration;//[Offset: 0x168, Size: 0x4] 0x7e61a4e100
	float TurningBoost;//[Offset: 0x16c, Size: 0x4] 0x7e61a4e180
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x7e61a4e200

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8] 0x7e61a2c000
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8] 0x7e61a2c080

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: DeviceProfileFragment.Object
	FString[] CVars;//[Offset: 0x28, Size: 0x10] 0x7e6197f240

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DialogueVoice.Object
	byte Gender;//[Offset: 0x28, Size: 0x1] 0x7e61a2ba00
	byte Plurality;//[Offset: 0x29, Size: 0x1] 0x7e61a2ba80
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10] 0x7e61a2bb00

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e61a2b700
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7e61a2b780
	FString SpokenText;//[Offset: 0x30, Size: 0x10] 0x7e61a2b800
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10] 0x7e61a2b880
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10] 0x7e6197f060
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10] 0x7e61a2b980

--------------------------------
Class: DialogueContextMapping
	DialogueContext Context;//[Offset: 0x0, Size: 0x18] 0x7e61619f80
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x7e6161a000
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10] 0x7e6161a080
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8] 0x7e6161a100

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8] 0x7e6161a280
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10] 0x7e84e5a060

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x278, Size: 0x8] 0x7e61a2d180
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x7e61a2d200
	void ToggleEnabled();// 0x2e4458ebd041 0x7e61a312e0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2e4358ebd041 0x7e61a313c0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2e4258ebd041 0x7e61a314a0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2e4158ebd041 0x7e61a31580
	void SetLightColor(LinearColor NewLightColor);// 0x2e4058ebd041 0x7e61a31660
	void SetEnabled(bool bSetEnabled);// 0x2e3f58ebd041 0x7e61a31740
	void SetCastShadows(bool bNewValue);// 0x2e3e58ebd041 0x7e61a31820
	void SetBrightness(float NewBrightness);// 0x2e3d58ebd041 0x7e61a31900
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2e3c58ebd041 0x7e61a319e0
	void OnRep_bEnabled();// 0x2e3b58ebd041 0x7e61a31ac0
	bool IsEnabled();// 0x2e3a58ebd041 0x7e61a31ba0
	LinearColor GetLightColor();// 0x2e7b58ebd041 0x7e61a31c80
	float GetBrightness();// 0x2e3858ebd041 0x7e61a0e780

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x34, Size: 0x4] 0x7e61a41980

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x7e61a41900

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10] 0x7e841b6d20
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e8412e900
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7e8412e880

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7e841e1b80
	float OutVal;//[Offset: 0x4, Size: 0x4] 0x7e841e1b00
	float ArriveTangent;//[Offset: 0x8, Size: 0x4] 0x7e841e1a80
	float LeaveTangent;//[Offset: 0xc, Size: 0x4] 0x7e841e1a00
	byte InterpMode;//[Offset: 0x10, Size: 0x1] 0x7e841e1980

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x38, Size: 0x8] 0x7e61a41600
	float MinInput;//[Offset: 0x40, Size: 0x4] 0x7e61a41680
	float MaxInput;//[Offset: 0x44, Size: 0x4] 0x7e61a41700
	float MinOutput;//[Offset: 0x48, Size: 0x4] 0x7e61a41780
	float MaxOutput;//[Offset: 0x4c, Size: 0x4] 0x7e61a41800
	byte ParamMode;//[Offset: 0x50, Size: 0x1] 0x7e61a41880

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x34, Size: 0x4] 0x7e61a41500
	float Max;//[Offset: 0x38, Size: 0x4] 0x7e61a41580

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x7e61a41480

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0x10] 0x7e841b7040
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e8412fb80
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7e8412fb00

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7e841e0d80
	Vector2D OutVal;//[Offset: 0x8, Size: 0x10] 0x7e841e0d00
	Vector2D ArriveTangent;//[Offset: 0x18, Size: 0x10] 0x7e841e0c80
	Vector2D LeaveTangent;//[Offset: 0x28, Size: 0x10] 0x7e841e0b80
	byte InterpMode;//[Offset: 0x38, Size: 0x1] 0x7e841e0b00

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x38, Size: 0x18] 0x7e61a41180
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e61a41200
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x7e61a41280

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x7e61a43100
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e61a43180
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x7e61a41100

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x54, Size: 0x8] 0x7e61a42e00
	Vector MinInput;//[Offset: 0x60, Size: 0x18] 0x7e61a42e80
	Vector MaxInput;//[Offset: 0x78, Size: 0x18] 0x7e61a42f00
	Vector MinOutput;//[Offset: 0x90, Size: 0x18] 0x7e61a42f80
	Vector MaxOutput;//[Offset: 0xa8, Size: 0x18] 0x7e61a43000
	byte ParamModes;//[Offset: 0xc0, Size: 0x1] 0x7e61a43080

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x38, Size: 0x18] 0x7e61a42b00
	Vector Min;//[Offset: 0x50, Size: 0x18] 0x7e61a42b80
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61a42c00
	byte LockedAxes;//[Offset: 0x69, Size: 0x1] 0x7e61a42c80
	byte MirrorFlags;//[Offset: 0x6a, Size: 0x1] 0x7e61a42d00
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1] 0x7e61a42d80

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x7e61a42800
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e61a42880
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7e61a42900
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x7e61a42980
	byte MirrorFlags;//[Offset: 0x53, Size: 0x1] 0x7e61a42a00
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1] 0x7e61a42a80

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10] 0x7e841b6f00
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e841e0f80
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7e841e0f00

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7e841e0800
	TwoVectors OutVal;//[Offset: 0x8, Size: 0x30] 0x7e841e0780
	TwoVectors ArriveTangent;//[Offset: 0x38, Size: 0x30] 0x7e841e0700
	TwoVectors LeaveTangent;//[Offset: 0x68, Size: 0x30] 0x7e84128880
	byte InterpMode;//[Offset: 0x98, Size: 0x1] 0x7e841e0580

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0x18] 0x7e841e0680
	Vector v2;//[Offset: 0x18, Size: 0x18] 0x7e841e0600

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8] 0x7e6197ef20
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10] 0x7e6197efc0
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7e61a44100
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x7e61a44180
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1] 0x7e61a44200

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10] 0x7e6197ede0
	int NodePosX;//[Offset: 0x48, Size: 0x4] 0x7e61a43800
	int NodePosY;//[Offset: 0x4c, Size: 0x4] 0x7e61a43880
	int NodeWidth;//[Offset: 0x50, Size: 0x4] 0x7e61a43900
	int NodeHeight;//[Offset: 0x54, Size: 0x4] 0x7e61a43980
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1] 0x7e61a43a00
	enum EnabledState;//[Offset: 0x59, Size: 0x1] 0x7e6197ee80
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x7e61a43b00
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x7e61a43b80
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1] 0x7e61a43c00
	FString NodeComment;//[Offset: 0x60, Size: 0x10] 0x7e61a43c80
	int ErrorType;//[Offset: 0x70, Size: 0x4] 0x7e61a43d00
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10] 0x7e61a43d80
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10] 0x7e61a43e00

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10] 0x7e61a45180
	FString PinToolTip;//[Offset: 0x38, Size: 0x10] 0x7e61a45200
	byte Direction;//[Offset: 0x48, Size: 0x1] 0x7e61a45280
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58] 0x7e61a43200
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10] 0x7e61a43280
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10] 0x7e61a43300
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8] 0x7e61a43380
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18] 0x7e61a43400
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10] 0x7e6197eca0
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10] 0x7e6197ed40
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8] 0x7e61a43580
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8] 0x7e61a43600

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8] 0x7e61604180
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8] 0x7e61604200
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x7e61602180
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20] 0x7e61602200
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c] 0x7e61602580
	enum ContainerType;//[Offset: 0x54, Size: 0x1] 0x7e84e58ee0
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x7e61602680
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x7e61602700
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1] 0x7e61602780
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1] 0x7e61602800
	bool bIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 0x1] 0x7e61602880
	bool bSerializeAsSinglePrecisionFloat;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 0x1] 0x7e61602900

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8] 0x7e61602280
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8] 0x7e61602300
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x7e61602380
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e61602400
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7e61602480
	bool bTerminalIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x7e61602500

--------------------------------
Class: GraphNodeContextMenuContext.Object
	Blueprint* Blueprint;//[Offset: 0x28, Size: 0x8] 0x7e61a43e80
	EdGraph* Graph;//[Offset: 0x30, Size: 0x8] 0x7e61a43f00
	EdGraphNode* Node;//[Offset: 0x38, Size: 0x8] 0x7e61a43f80
	bool bIsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e61a44000

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString Link;//[Offset: 0x98, Size: 0x10] 0x7e61a43680
	FString Excerpt;//[Offset: 0xa8, Size: 0x10] 0x7e61a43700

--------------------------------
Class: ViewModeUtils.Object

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: EngineElementsLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x28, Size: 0x10] 0x7e61a4c080
	FString MaxedOutMessage;//[Offset: 0x38, Size: 0x10] 0x7e61a4c100
	FString EnteredMessage;//[Offset: 0x48, Size: 0x10] 0x7e61a4c180
	FString LeftMessage;//[Offset: 0x58, Size: 0x10] 0x7e61a4c200
	FString GlobalNameChange;//[Offset: 0x68, Size: 0x10] 0x7e61a4c280
	FString SpecEnteredMessage;//[Offset: 0x78, Size: 0x10] 0x7e61a4c300
	FString NewPlayerMessage;//[Offset: 0x88, Size: 0x10] 0x7e61a4c380
	FString NewSpecMessage;//[Offset: 0x98, Size: 0x10] 0x7e61a4c400

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x278, Size: 0x8] 0x7e61a4bf80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x7e61a4c000
	void OnRep_bEnabled();// 0x2e8958ebd041 0x7e61a34a00

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2b0, Size: 0x4] 0x7e61a4c900
	float FogHeightFalloff;//[Offset: 0x2b4, Size: 0x4] 0x7e61a4c980
	ExponentialHeightFogData SecondFogData;//[Offset: 0x2b8, Size: 0xc] 0x7e61a4ca00
	LinearColor FogInscatteringColor;//[Offset: 0x2c4, Size: 0x10] 0x7e61a4ca80
	LinearColor FogInscatteringLuminance;//[Offset: 0x2d4, Size: 0x10] 0x7e61a4cb00
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2e8, Size: 0x8] 0x7e61a4cb80
	float InscatteringColorCubemapAngle;//[Offset: 0x2f0, Size: 0x4] 0x7e61a4cc00
	LinearColor InscatteringTextureTint;//[Offset: 0x2f4, Size: 0x10] 0x7e61a4cc80
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x304, Size: 0x4] 0x7e61a4cd00
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x308, Size: 0x4] 0x7e61a4cd80
	float DirectionalInscatteringExponent;//[Offset: 0x30c, Size: 0x4] 0x7e61a4ce00
	float DirectionalInscatteringStartDistance;//[Offset: 0x310, Size: 0x4] 0x7e61a4ce80
	LinearColor DirectionalInscatteringColor;//[Offset: 0x314, Size: 0x10] 0x7e61a4cf00
	LinearColor DirectionalInscatteringLuminance;//[Offset: 0x324, Size: 0x10] 0x7e61a4cf80
	float FogMaxOpacity;//[Offset: 0x334, Size: 0x4] 0x7e61a4d000
	float StartDistance;//[Offset: 0x338, Size: 0x4] 0x7e61a4d080
	float FogCutoffDistance;//[Offset: 0x33c, Size: 0x4] 0x7e61a4d100
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x7e61a4d180
	float VolumetricFogScatteringDistribution;//[Offset: 0x344, Size: 0x4] 0x7e61a4d200
	Color VolumetricFogAlbedo;//[Offset: 0x348, Size: 0x4] 0x7e61a4d280
	LinearColor VolumetricFogEmissive;//[Offset: 0x34c, Size: 0x10] 0x7e61a4d300
	float VolumetricFogExtinctionScale;//[Offset: 0x35c, Size: 0x4] 0x7e61a4d380
	float VolumetricFogDistance;//[Offset: 0x360, Size: 0x4] 0x7e61a4d400
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x364, Size: 0x4] 0x7e61a4d480
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1] 0x7e61a4d500
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x2e9d58ebd041 0x7e61a37240
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x2ede58ebd041 0x7e61a37320
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x2e9b58ebd041 0x7e61a33a40
	void SetVolumetricFogDistance(float NewValue);// 0x2e9a58ebd041 0x7e61a33b20
	void SetVolumetricFogAlbedo(Color NewValue);// 0x2e9958ebd041 0x7e61a33c00
	void SetVolumetricFog(bool bNewValue);// 0x2e9858ebd041 0x7e61a33ce0
	void SetStartDistance(float Value);// 0x2e9758ebd041 0x7e61a33dc0
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x2e9658ebd041 0x7e61a33ea0
	void SetInscatteringTextureTint(LinearColor Value);// 0x2e9558ebd041 0x7e61a33f80
	void SetInscatteringColorCubemapAngle(float Value);// 0x2e9458ebd041 0x7e61a34060
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x2e9358ebd041 0x7e61a34140
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x2e9258ebd041 0x7e61a34220
	void SetFogMaxOpacity(float Value);// 0x2e9158ebd041 0x7e61a34300
	void SetFogInscatteringColor(LinearColor Value);// 0x2e9058ebd041 0x7e61a343e0
	void SetFogHeightFalloff(float Value);// 0x2e8f58ebd041 0x7e61a344c0
	void SetFogDensity(float Value);// 0x2e8e58ebd041 0x7e61a345a0
	void SetFogCutoffDistance(float Value);// 0x2e8d58ebd041 0x7e61a34680
	void SetDirectionalInscatteringStartDistance(float Value);// 0x2e8c58ebd041 0x7e61a34760
	void SetDirectionalInscatteringExponent(float Value);// 0x2e8b58ebd041 0x7e61a34840
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x2e8a58ebd041 0x7e61a34920

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4] 0x7e61641500
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4] 0x7e61641580
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4] 0x7e61641600

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x30, Size: 0x10] 0x7e61a4f700
	enum Hinting;//[Offset: 0x40, Size: 0x1] 0x7e61a50ba0
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1] 0x7e61a50c40
	enum LayoutMethod;//[Offset: 0x42, Size: 0x1] 0x7e61a50ce0

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xa8] 0x7e61a4f680

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xc8] 0x7e61a4f600

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x2b0, Size: 0x8] 0x7e61a4ee00
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1] 0x7e61a4ee80
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1] 0x7e61a4ef00
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1] 0x7e61a4ef80
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1] 0x7e61a4f000
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1] 0x7e61a4f080
	float IntensityMultiplier;//[Offset: 0x2bc, Size: 0x4] 0x7e61a4f100
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x2c0, Size: 0x8] 0x7e61a4f180
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x2c8, Size: 0xc8] 0x7e61a4f200
	delegate OnForceFeedbackFinished;//[Offset: 0x390, Size: 0x10] 0x7e61a4f280
	void Stop();// 0x2ea658ebd041 0x7e61a36a60
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x2ea558ebd041 0x7e61a36b40
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x2ea458ebd041 0x7e61a36c20
	void Play(float StartTime);// 0x2ea358ebd041 0x7e61a36d00
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x2ea258ebd041 0x7e61a36de0
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x2ea158ebd041 0x7e61a36ec0

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xd88, Size: 0x4] 0x7e61a4eb80
	float ServerFlushLogInterval;//[Offset: 0xd8c, Size: 0x4] 0x7e61a4ec00
	GameInstance* GameInstance;//[Offset: 0xd90, Size: 0x8] 0x7e61a4ec80

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x318, Size: 0x8] 0x7e61885700
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1] 0x7e61885780
	int NumSpectators;//[Offset: 0x324, Size: 0x4] 0x7e61885800
	int NumPlayers;//[Offset: 0x328, Size: 0x4] 0x7e61885880
	int NumBots;//[Offset: 0x32c, Size: 0x4] 0x7e61885900
	float MinRespawnDelay;//[Offset: 0x330, Size: 0x4] 0x7e61885980
	int NumTravellingPlayers;//[Offset: 0x334, Size: 0x4] 0x7e61885a00
	class LocalMessage* EngineMessageClass;//[Offset: 0x338, Size: 0x8] 0x7e61891960
	PlayerState*[] InactivePlayerArray;//[Offset: 0x340, Size: 0x10] 0x7e61891a00
	float InactivePlayerStateLifeSpan;//[Offset: 0x350, Size: 0x4] 0x7e61885b00
	int MaxInactivePlayers;//[Offset: 0x354, Size: 0x4] 0x7e61885b80
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x7e61885c00
	void StartMatch();// 0x261d58ebd041 0x7e6175cd40
	void Say(FString Msg);// 0x261c58ebd041 0x7e6175ce20
	void RestartGame();// 0x261b58ebd041 0x7e6175cf00
	bool ReadyToStartMatch();// 0x261a58ebd041 0x7e6175cfe0
	bool ReadyToEndMatch();// 0x261958ebd041 0x7e6175d0c0
	void K2_OnSetMatchState(FName NewState);// 0x261858ebd041 0x7e6175d1a0
	bool IsMatchInProgress();// 0x261758ebd041 0x7e6175d280
	FName GetMatchState();// 0x261658ebd041 0x7e6175d360
	void EndMatch();// 0x261558ebd041 0x7e6175d440
	void AbortMatch();// 0x261458ebd041 0x7e6175d520

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	void UnRetainAllSoundsInSoundClass(SoundClass* InSoundClass);// 0x2f2758ebd041 0x7e61a3e080
	void UnloadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x2f2658ebd041 0x7e61a3e160
	void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x2f2558ebd041 0x7e61a3e240
	bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0x2f2458ebd041 0x7e61a3e320
	AudioComponent* SpawnSoundAttached(SoundBase* Sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x2f2358ebd041 0x7e61a3e400
	AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x2f2258ebd041 0x7e61a3e4e0
	AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x2f2158ebd041 0x7e61a3e5c0
	Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0x2f5d58ebd041 0x7e61a3e6a0
	ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2f1f58ebd041 0x7e61a3adc0
	ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2f1e58ebd041 0x7e61a3aea0
	ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivate);// 0x2f1d58ebd041 0x7e61a3af80
	ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivateSystem);// 0x2f1c58ebd041 0x7e61a3b060
	AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2f1b58ebd041 0x7e61a3b140
	AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2f1a58ebd041 0x7e61a3b220
	AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);// 0x2f1958ebd041 0x7e61a3b300
	DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0x2f1858ebd041 0x7e61a3b3e0
	DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0x2f1758ebd041 0x7e61a3b4c0
	void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0x2f1658ebd041 0x7e61a3b5a0
	void SetViewportMouseCaptureMode(const Object* WorldContextObject, const enum MouseCaptureMode);// 0x2f1558ebd041 0x7e61a3b680
	void SetSubtitlesEnabled(bool bEnabled);// 0x2f1458ebd041 0x7e61a3b760
	void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0x2f1358ebd041 0x7e61a3b840
	void SetSoundClassDistanceScale(const Object* WorldContextObject, SoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);// 0x2f1258ebd041 0x7e61a3b920
	void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0x2f1158ebd041 0x7e61a3ba00
	void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0x2f1058ebd041 0x7e61a3bae0
	void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0x2f0f58ebd041 0x7e61a3bbc0
	void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0x2f0e58ebd041 0x7e61a3bca0
	void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0x2f0d58ebd041 0x7e61a3bd80
	bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0x2f0c58ebd041 0x7e61a3be60
	void SetForceDisableSplitscreen(const Object* WorldContextObject, bool bDisable);// 0x2f0b58ebd041 0x7e61a3bf40
	void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0x2f0a58ebd041 0x7e61a3c020
	void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0x2f0958ebd041 0x7e61a3c100
	bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x2f0858ebd041 0x7e61a3c1e0
	void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0x2f0758ebd041 0x7e61a3c2c0
	Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0x2f0658ebd041 0x7e61a3c3a0
	Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0x2f0558ebd041 0x7e61a3c480
	void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x2f0458ebd041 0x7e61a3c560
	bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x2f0358ebd041 0x7e61a3c640
	void PrimeSound(SoundBase* InSound);// 0x2f0258ebd041 0x7e61a3c720
	void PrimeAllSoundsInSoundClass(SoundClass* InSoundClass);// 0x2f0158ebd041 0x7e61a3c800
	void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x2f0058ebd041 0x7e61a3c8e0
	void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0x2f4158ebd041 0x7e61a3c9c0
	void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, const Actor* OwningActor, InitialActiveSoundParams* InitialParams);// 0x2efe58ebd041 0x7e61a390e0
	void PlaySound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, const Actor* OwningActor, bool bIsUISound);// 0x2efd58ebd041 0x7e61a391c0
	void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings);// 0x2efc58ebd041 0x7e61a392a0
	void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);// 0x2efb58ebd041 0x7e61a39380
	FString ParseOption(FString Options, FString Key);// 0x2efa58ebd041 0x7e61a39460
	void OpenLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bAbsolute, FString Options);// 0x2ef958ebd041 0x7e61a39540
	void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0x2ef858ebd041 0x7e61a39620
	HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, FName BoneName, int HitItem, int ElementIndex, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0x2ef758ebd041 0x7e61a39700
	void LoadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x2ef658ebd041 0x7e61a397e0
	void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x2ef558ebd041 0x7e61a398c0
	SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0x2ef458ebd041 0x7e61a399a0
	bool IsSplitscreenForceDisabled(const Object* WorldContextObject);// 0x2ef358ebd041 0x7e61a39a80
	bool IsGamePaused(const Object* WorldContextObject);// 0x2ef258ebd041 0x7e61a39b60
	bool HasOption(FString Options, FString InKey);// 0x2ef158ebd041 0x7e61a39c40
	bool HasLaunchOption(FString OptionToCheck);// 0x2ef058ebd041 0x7e61a39d20
	int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x2eef58ebd041 0x7e61a39e00
	IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0x2eee58ebd041 0x7e61a39ee0
	float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0x2eed58ebd041 0x7e61a39fc0
	void GetViewProjectionMatrix(MinimalViewInfo DesiredView, out Matrix ViewMatrix, out Matrix ProjectionMatrix, out Matrix ViewProjectionMatrix);// 0x2eec58ebd041 0x7e61a3a0a0
	enum GetViewportMouseCaptureMode(const Object* WorldContextObject);// 0x2eeb58ebd041 0x7e61a3a180
	float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0x2eea58ebd041 0x7e61a3a260
	float GetTimeSeconds(const Object* WorldContextObject);// 0x2ee958ebd041 0x7e61a3a340
	byte GetSurfaceType(out const HitResult Hit);// 0x2ee858ebd041 0x7e61a3a420
	LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0x2ee758ebd041 0x7e61a3a500
	float GetRealTimeSeconds(const Object* WorldContextObject);// 0x2ee658ebd041 0x7e61a3a5e0
	PlayerState* GetPlayerStateFromUniqueNetId(const Object* WorldContextObject, out const UniqueNetIdRepl UniqueId);// 0x2ee558ebd041 0x7e61a3a6c0
	PlayerState* GetPlayerState(const Object* WorldContextObject, int PlayerStateIndex);// 0x2ee458ebd041 0x7e61a3a7a0
	Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0x2ee358ebd041 0x7e61a3a880
	int GetPlayerControllerID(PlayerController* Player);// 0x2ee258ebd041 0x7e61a3a960
	PlayerController* GetPlayerControllerFromID(const Object* WorldContextObject, int ControllerId);// 0x2ee158ebd041 0x7e61a3aa40
	PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0x2ee058ebd041 0x7e61a3ab20
	Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0x2edf58ebd041 0x7e61a3ac00
	PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0x2f2058ebd041 0x7e61a3ace0
	FString GetPlatformName();// 0x2edd58ebd041 0x7e61a37400
	class Object GetObjectClass(const Object* Object);// 0x2edc58ebd041 0x7e61a374e0
	int GetNumPlayerStates(const Object* WorldContextObject);// 0x2edb58ebd041 0x7e61a375c0
	int GetNumPlayerControllers(const Object* WorldContextObject);// 0x2eda58ebd041 0x7e61a376a0
	int GetNumLocalPlayerControllers(const Object* WorldContextObject);// 0x2ed958ebd041 0x7e61a37780
	int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0x2ed858ebd041 0x7e61a37860
	void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0x2ed758ebd041 0x7e61a37940
	int GetIntOption(FString Options, FString Key, int DefaultValue);// 0x2ed658ebd041 0x7e61a37a20
	float GetGlobalTimeDilation(const Object* WorldContextObject);// 0x2ed558ebd041 0x7e61a37b00
	GameStateBase* GetGameState(const Object* WorldContextObject);// 0x2ed458ebd041 0x7e61a37be0
	GameModeBase* GetGameMode(const Object* WorldContextObject);// 0x2ed358ebd041 0x7e61a37cc0
	GameInstance* GetGameInstance(const Object* WorldContextObject);// 0x2ed258ebd041 0x7e61a37da0
	bool GetEnableWorldRendering(const Object* WorldContextObject);// 0x2ed158ebd041 0x7e61a37e80
	ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0x2ed058ebd041 0x7e61a37f60
	FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0x2ecf58ebd041 0x7e61a38040
	bool GetClosestListenerLocation(const Object* WorldContextObject, out const Vector Location, float MaximumRange, const bool bAllowAttenuationOverride, out Vector ListenerPosition);// 0x2ece58ebd041 0x7e61a38120
	float GetAudioTimeSeconds(const Object* WorldContextObject);// 0x2ecd58ebd041 0x7e61a38200
	void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0x2ecc58ebd041 0x7e61a382e0
	void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0x2ecb58ebd041 0x7e61a383c0
	void GetAllActorsOfClassWithTag(const Object* WorldContextObject, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0x2eca58ebd041 0x7e61a384a0
	void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0x2ec958ebd041 0x7e61a38580
	Actor* GetActorOfClass(const Object* WorldContextObject, class Actor ActorClass);// 0x2ec858ebd041 0x7e61a38660
	void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0x2ec758ebd041 0x7e61a38740
	Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0x2ec658ebd041 0x7e61a38820
	void GetAccurateRealTime(out int Seconds, out float PartialSeconds);// 0x2ec558ebd041 0x7e61a38900
	void FlushLevelStreaming(const Object* WorldContextObject);// 0x2ec458ebd041 0x7e61a389e0
	Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0x2ec358ebd041 0x7e61a38ac0
	Actor* FindNearestActor(Vector Origin, out const Actor*[] ActorsToCheck, out float Distance);// 0x2ec258ebd041 0x7e61a38ba0
	bool FindCollisionUV(out const HitResult Hit, int UVChannel, out Vector2D UV);// 0x2ec158ebd041 0x7e61a38c80
	void EnableLiveStreaming(bool Enable);// 0x2ec058ebd041 0x7e61a38d60
	bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0x2ebf58ebd041 0x7e61a38e40
	bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0x2ebe58ebd041 0x7e61a38f20
	bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0x2eff58ebd041 0x7e61a39000
	void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0x2ebc58ebd041 0x7e61a35720
	AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x2ebb58ebd041 0x7e61a35800
	SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0x2eba58ebd041 0x7e61a358e0
	PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0x2eb958ebd041 0x7e61a359c0
	void ClearSoundMixModifiers(const Object* WorldContextObject);// 0x2eb858ebd041 0x7e61a35aa0
	void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeOutTime);// 0x2eb758ebd041 0x7e61a35b80
	void CancelAsyncLoading();// 0x2eb658ebd041 0x7e61a35c60
	void BreakHitResult(out const HitResult Hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out FName BoneName, out int HitItem, out int ElementIndex, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0x2eb558ebd041 0x7e61a35d40
	bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0x2eb458ebd041 0x7e61a35e20
	bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x2eb358ebd041 0x7e61a35f00
	bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x2eb258ebd041 0x7e61a35fe0
	bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0x2eb158ebd041 0x7e61a360c0
	Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0x2eb058ebd041 0x7e61a361a0
	Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0x2eaf58ebd041 0x7e61a36280
	bool AreSubtitlesEnabled();// 0x2eae58ebd041 0x7e61a36360
	bool AreAnyListenersWithinRange(const Object* WorldContextObject, out const Vector Location, float MaximumRange);// 0x2ead58ebd041 0x7e61a36440
	bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0x2eac58ebd041 0x7e61a36520
	bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0x2eab58ebd041 0x7e61a36600
	float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x2eaa58ebd041 0x7e61a366e0
	float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x2ea958ebd041 0x7e61a367c0
	void AnnounceAccessibleString(FString AnnouncementString);// 0x2ea858ebd041 0x7e61a368a0
	void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0x2ea758ebd041 0x7e61a36980

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0x18] 0x7e61643980
	Vector LaunchVelocity;//[Offset: 0x18, Size: 0x18] 0x7e61643a00
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61643a80
	float ProjectileRadius;//[Offset: 0x34, Size: 0x4] 0x7e61643b00
	float MaxSimTime;//[Offset: 0x38, Size: 0x4] 0x7e61643b80
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7e61643c00
	byte TraceChannel;//[Offset: 0x3d, Size: 0x1] 0x7e61643c80
	byte[] ObjectTypes;//[Offset: 0x40, Size: 0x10] 0x7e84e5b960
	Actor*[] ActorsToIgnore;//[Offset: 0x50, Size: 0x10] 0x7e84e590c0
	float SimFrequency;//[Offset: 0x60, Size: 0x4] 0x7e61643e00
	float OverrideGravityZ;//[Offset: 0x64, Size: 0x4] 0x7e61643e80
	byte DrawDebugType;//[Offset: 0x68, Size: 0x1] 0x7e61643f00
	float DrawDebugTime;//[Offset: 0x6c, Size: 0x4] 0x7e61643f80
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7e61644000

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10] 0x7e84e5b8c0
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x38] 0x7e61643700
	HitResult HitResult;//[Offset: 0x48, Size: 0xe8] 0x7e61643780

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61643800
	Vector Velocity;//[Offset: 0x18, Size: 0x18] 0x7e61643880
	float Time;//[Offset: 0x30, Size: 0x4] 0x7e61643900

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c4, Size: 0x8] 0x7e61886d80
	FName PreviousMatchState;//[Offset: 0x2cc, Size: 0x8] 0x7e61886e00
	int ElapsedTime;//[Offset: 0x2d4, Size: 0x4] 0x7e61886e80
	void OnRep_MatchState();// 0x262d58ebd041 0x7e6175f4a0
	void OnRep_ElapsedTime();// 0x262c58ebd041 0x7e6175f580

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x288, Size: 0x8] 0x7e61a76f00
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x2f7658ebd041 0x7e61a806a0
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x2f7558ebd041 0x7e61a80780

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x404, Size: 0x4] 0x7e61bbfb00
	float OuterConeAngle;//[Offset: 0x408, Size: 0x4] 0x7e61bbfb80
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x358758ebd041 0x7e61bc6280
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x358658ebd041 0x7e61bc6360

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1] 0x7e61b8c280
	float LightFalloffExponent;//[Offset: 0x3f4, Size: 0x4] 0x7e61b8c300
	float SourceRadius;//[Offset: 0x3f8, Size: 0x4] 0x7e61b8c380
	float SoftSourceRadius;//[Offset: 0x3fc, Size: 0x4] 0x7e61b8c400
	float SourceLength;//[Offset: 0x400, Size: 0x4] 0x7e61b8c480
	void SetSourceRadius(float bNewValue);// 0x346558ebd041 0x7e61b960c0
	void SetSourceLength(float NewValue);// 0x346458ebd041 0x7e61b961a0
	void SetSoftSourceRadius(float bNewValue);// 0x346358ebd041 0x7e61b96280
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x346258ebd041 0x7e61b96360

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x3d9, Size: 0x1] 0x7e61a588a0
	float Radius;//[Offset: 0x3dc, Size: 0x4] 0x7e61b3fd80
	float AttenuationRadius;//[Offset: 0x3e0, Size: 0x4] 0x7e61b3fe00
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x3e4, Size: 0xc] 0x7e61b3fe80
	void SetIntensityUnits(enum NewIntensityUnits);// 0x339d58ebd041 0x7e61b1bd80
	void SetAttenuationRadius(float NewRadius);// 0x339c58ebd041 0x7e61b1be60
	float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x339b58ebd041 0x7e61b1bf40

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10] 0x7e61a51dc0
	int SampleRate;//[Offset: 0x38, Size: 0x4] 0x7e61a76e80

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x28, Size: 0x110] 0x7e61a76d80

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x88] 0x7e61643500
	RuntimeFloatCurve Amplitude;//[Offset: 0x88, Size: 0x88] 0x7e61643580

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object
	SoundWave* SoundWave;//[Offset: 0x28, Size: 0x8] 0x7e61a76d00

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object
	void StopPerformanceSnapshots();// 0x2f7958ebd041 0x7e61a80400
	void StartPerformanceSnapshots();// 0x2f7858ebd041 0x7e61a804e0
	void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0x2f7758ebd041 0x7e61a805c0

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x5d0, Size: 0x10] 0x7e618957e0
	Matrix[] PerInstancePrevTransform;//[Offset: 0x5e0, Size: 0x10] 0x7e61895880
	int NumCustomDataFloats;//[Offset: 0x5f0, Size: 0x4] 0x7e618e2480
	float[] PerInstanceSMCustomData;//[Offset: 0x5f8, Size: 0x10] 0x7e61895920
	int InstancingRandomSeed;//[Offset: 0x608, Size: 0x4] 0x7e618e2580
	InstancedStaticMeshRandomSeed[] AdditionalRandomSeeds;//[Offset: 0x610, Size: 0x10] 0x7e618959c0
	int InstanceStartCullDistance;//[Offset: 0x620, Size: 0x4] 0x7e618e2680
	int InstanceEndCullDistance;//[Offset: 0x624, Size: 0x4] 0x7e618e2700
	int[] InstanceReorderTable;//[Offset: 0x628, Size: 0x10] 0x7e61895a60
	int NumPendingLightmaps;//[Offset: 0x6f0, Size: 0x4] 0x7e618e2800
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x6f8, Size: 0x10] 0x7e61895b00
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x27a058ebd041 0x7e618d1f20
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x279f58ebd041 0x7e618d2000
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x279e58ebd041 0x7e618d20e0
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x279d58ebd041 0x7e618d21c0
	bool RemoveInstance(int InstanceIndex);// 0x279c58ebd041 0x7e618d22a0
	bool IsValidInstance(int InstanceIndex);// 0x279b58ebd041 0x7e618d2380
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x279a58ebd041 0x7e618d2460
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x279958ebd041 0x7e618d2540
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x279858ebd041 0x7e618d2620
	int GetInstanceCount();// 0x279758ebd041 0x7e618d2700
	void ClearInstances();// 0x279658ebd041 0x7e618d27e0
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x279558ebd041 0x7e618d28c0
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x279458ebd041 0x7e618d29a0
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x279358ebd041 0x7e618d2a80
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace);// 0x279258ebd041 0x7e618d2b60
	int AddInstance(out const Transform InstanceTransform, bool bWorldSpace);// 0x279158ebd041 0x7e618d2c40

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x80] 0x7e61645b80

--------------------------------
Class: InstancedStaticMeshRandomSeed
	int StartInstanceIndex;//[Offset: 0x0, Size: 0x4] 0x7e61645a80
	int RandomSeed;//[Offset: 0x4, Size: 0x4] 0x7e61645b00

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseTranslatedInstanceSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x718, Size: 0x1] 0x7e618e3e80
	Vector TranslatedInstanceSpaceOrigin;//[Offset: 0x720, Size: 0x18] 0x7e618e3f00
	int[] SortedInstances;//[Offset: 0x738, Size: 0x10] 0x7e618956a0
	int NumBuiltInstances;//[Offset: 0x748, Size: 0x4] 0x7e618e4000
	Box BuiltInstanceBounds;//[Offset: 0x750, Size: 0x38] 0x7e618e4080
	Box UnbuiltInstanceBounds;//[Offset: 0x788, Size: 0x38] 0x7e618e4100
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x7c0, Size: 0x10] 0x7e61895740
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1] 0x7e618e4200
	int OcclusionLayerNumNodes;//[Offset: 0x7d8, Size: 0x4] 0x7e618e2180
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x7e0, Size: 0x38] 0x7e618e2200
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1] 0x7e618e2280
	int InstanceCountToRender;//[Offset: 0x81c, Size: 0x4] 0x7e618e2300

--------------------------------
Class: WorldPartitionHLOD.Actor.Object
	uint32 LODLevel;//[Offset: 0x278, Size: 0x4] 0x7e61a76a00
	bool bRequireWarmup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x7e61a76a80
	WorldPartitionRuntimeCell* SourceCell;//[Offset: 0x280, Size: 0x28] 0x7e61a76b00
	FName SourceCellName;//[Offset: 0x2a8, Size: 0x8] 0x7e61a76b80

--------------------------------
Class: WorldPartitionRuntimeCell.Object
	bool bIsAlwaysLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61bf1300
	FName[] DataLayers;//[Offset: 0x30, Size: 0x10] 0x7e61bd2c20
	IntVector Coords;//[Offset: 0x40, Size: 0xc] 0x7e61bf1400
	FName GridName;//[Offset: 0x4c, Size: 0x8] 0x7e61bf1480
	FString DebugName;//[Offset: 0x58, Size: 0x10] 0x7e61bf1500
	int Priority;//[Offset: 0x68, Size: 0x4] 0x7e61bf1580
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x7e61bf1600
	bool bIsHLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1] 0x7e61bf1680
	bool bBlockOnSlowLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1] 0x7e61bf1700

--------------------------------
Class: HLODBuilderSettings.Object

--------------------------------
Class: HLODBuilder.Object

--------------------------------
Class: HLODEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: HLODLayer.Object

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10] 0x7e61a51d20
	<HLODProxyDesc*,HLODProxyMesh> HLODActors;//[Offset: 0x38, Size: 0x50] 0x7e6167f700

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c] 0x7e61644c00
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8] 0x7e61644c80
	FName Key;//[Offset: 0x28, Size: 0x8] 0x7e61644d00

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x278, Size: 0x8] 0x7e61b40f80
	<HLODInstancingKey,InstancedStaticMeshComponent*> InstancedStaticMeshComponents;//[Offset: 0x280, Size: 0x50] 0x7e6167f580
	HLODProxy* Proxy;//[Offset: 0x2d0, Size: 0x8] 0x7e61b3f800
	FName Key;//[Offset: 0x2d8, Size: 0x8] 0x7e61b3f880
	float LODDrawDistance;//[Offset: 0x2e0, Size: 0x4] 0x7e61b3f900
	int LODLevel;//[Offset: 0x2e4, Size: 0x4] 0x7e61b3f980
	Actor*[] SubActors;//[Offset: 0x2e8, Size: 0x10] 0x7e61a58760
	byte CachedNumHLODLevels;//[Offset: 0x2f8, Size: 0x1] 0x7e61b3fa80

--------------------------------
Class: HLODInstancingKey
	StaticMesh* StaticMesh;//[Offset: 0x0, Size: 0x8] 0x7e6164aa80
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7e6164ab00

--------------------------------
Class: HLODProxyDesc.Object

--------------------------------
Class: HLODSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: AnimationDataController.Interface.Object
	void UpdateCurveNamesFromSkeleton(const Skeleton* Skeleton, enum SupportedCurveType, bool bShouldTransact);// 0x2f9d58ebd041 0x7e61a81e40
	bool SetTransformCurveKeys(out const AnimationCurveIdentifier CurveId, out const Transform[] TransformValues, out const float[] TimeKeys, bool bShouldTransact);// 0x2f9c58ebd041 0x7e61a81f20
	bool SetTransformCurveKey(out const AnimationCurveIdentifier CurveId, float Time, out const Transform Value, bool bShouldTransact);// 0x2f9b58ebd041 0x7e61a82000
	void SetPlayLength(float Length, bool bShouldTransact);// 0x2f9a58ebd041 0x7e61a820e0
	void SetModel(AnimDataModel* InModel);// 0x2f9958ebd041 0x7e61a821c0
	void SetFrameRate(FrameRate FrameRate, bool bShouldTransact);// 0x2f9858ebd041 0x7e61a822a0
	bool SetCurveKeys(out const AnimationCurveIdentifier CurveId, out const RichCurveKey[] CurveKeys, bool bShouldTransact);// 0x2f9758ebd041 0x7e61a82380
	bool SetCurveKey(out const AnimationCurveIdentifier CurveId, out const RichCurveKey Key, bool bShouldTransact);// 0x2f9658ebd041 0x7e61a82460
	bool SetCurveFlags(out const AnimationCurveIdentifier CurveId, int Flags, bool bShouldTransact);// 0x2f9558ebd041 0x7e61a82540
	bool SetCurveFlag(out const AnimationCurveIdentifier CurveId, byte Flag, bool bState, bool bShouldTransact);// 0x2f9458ebd041 0x7e61a82620
	bool SetCurveColor(out const AnimationCurveIdentifier CurveId, LinearColor Color, bool bShouldTransact);// 0x2f9358ebd041 0x7e61a82700
	bool SetBoneTrackKeys(FName BoneName, out const Vector[] PositionalKeys, out const Quat[] RotationalKeys, out const Vector[] ScalingKeys, bool bShouldTransact);// 0x2f9258ebd041 0x7e61a827e0
	bool ScaleCurve(out const AnimationCurveIdentifier CurveId, float Origin, float Factor, bool bShouldTransact);// 0x2f9158ebd041 0x7e61a828c0
	void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact);// 0x2f9058ebd041 0x7e61a829a0
	void Resize(float Length, float T0, float T1, bool bShouldTransact);// 0x2f8f58ebd041 0x7e61a82a80
	bool RenameCurve(out const AnimationCurveIdentifier CurveToRenameId, out const AnimationCurveIdentifier NewCurveId, bool bShouldTransact);// 0x2f8e58ebd041 0x7e61a82b60
	bool RemoveTransformCurveKey(out const AnimationCurveIdentifier CurveId, float Time, bool bShouldTransact);// 0x2f8d58ebd041 0x7e61a82c40
	bool RemoveCurveKey(out const AnimationCurveIdentifier CurveId, float Time, bool bShouldTransact);// 0x2f8c58ebd041 0x7e61a82d20
	bool RemoveCurve(out const AnimationCurveIdentifier CurveId, bool bShouldTransact);// 0x2f8b58ebd041 0x7e61a82e00
	bool RemoveBoneTrack(FName BoneName, bool bShouldTransact);// 0x2f8a58ebd041 0x7e61a82ee0
	bool RemoveAttributeKey(out const AnimationAttributeIdentifier AttributeIdentifier, float Time, bool bShouldTransact);// 0x2f8958ebd041 0x7e61a82fc0
	bool RemoveAttribute(out const AnimationAttributeIdentifier AttributeIdentifier, bool bShouldTransact);// 0x2f8858ebd041 0x7e61a830a0
	void RemoveAllCurvesOfType(enum SupportedCurveType, bool bShouldTransact);// 0x2f8758ebd041 0x7e61a83180
	void RemoveAllBoneTracks(bool bShouldTransact);// 0x2f8658ebd041 0x7e61a83260
	int RemoveAllAttributesForBone(out const FName BoneName, bool bShouldTransact);// 0x2f8558ebd041 0x7e61a83340
	int RemoveAllAttributes(bool bShouldTransact);// 0x2f8458ebd041 0x7e61a83420
	void OpenBracket(out const FText InTitle, bool bShouldTransact);// 0x2f8358ebd041 0x7e61a83500
	int InsertBoneTrack(FName BoneName, int DesiredIndex, bool bShouldTransact);// 0x2f8258ebd041 0x7e61a835e0
	AnimDataModel* GetModel();// 0x2f8158ebd041 0x7e61a836c0
	void FindOrAddCurveNamesOnSkeleton(Skeleton* Skeleton, enum SupportedCurveType, bool bShouldTransact);// 0x2f8058ebd041 0x7e61a837a0
	bool DuplicateCurve(out const AnimationCurveIdentifier CopyCurveId, out const AnimationCurveIdentifier NewCurveId, bool bShouldTransact);// 0x2f7f58ebd041 0x7e61a83880
	bool DuplicateAttribute(out const AnimationAttributeIdentifier AttributeIdentifier, out const AnimationAttributeIdentifier NewAttributeIdentifier, bool bShouldTransact);// 0x2fc058ebd041 0x7e61a83960
	void CloseBracket(bool bShouldTransact);// 0x2f7d58ebd041 0x7e61a80080
	bool AddCurve(out const AnimationCurveIdentifier CurveId, int CurveFlags, bool bShouldTransact);// 0x2f7c58ebd041 0x7e61a80160
	int AddBoneTrack(FName BoneName, bool bShouldTransact);// 0x2f7b58ebd041 0x7e61a80240
	bool AddAttribute(out const AnimationAttributeIdentifier AttributeIdentifier, bool bShouldTransact);// 0x2f7a58ebd041 0x7e61a80320

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	float RandomSobolFloat(int Index, int Dimension, float Seed);// 0x2fa658ebd041 0x7e61a85020
	Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed);// 0x2fa558ebd041 0x7e61a85100
	Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed);// 0x2fa458ebd041 0x7e61a851e0
	float NextSobolFloat(int Index, int Dimension, float PreviousValue);// 0x2fa358ebd041 0x7e61a852c0
	Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue);// 0x2fa258ebd041 0x7e61a853a0
	Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue);// 0x2fa158ebd041 0x7e61a85480
	ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0x2fa058ebd041 0x7e61a85560
	void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0x2fe158ebd041 0x7e61a85640
	void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0x2f9e58ebd041 0x7e61a81d60

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8] 0x7e61644880
	int NumMips;//[Offset: 0x8, Size: 0x4] 0x7e61644900
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10] 0x7e84e5b640
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10] 0x7e84e5b6e0
	Color[] TextureData;//[Offset: 0x30, Size: 0x10] 0x7e84e5b780
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8] 0x7e61644b00
	byte Weighting;//[Offset: 0x48, Size: 0x1] 0x7e61644b80

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61a7bb00
	delegate[] ClickedBannerDelegates;//[Offset: 0x40, Size: 0x10] 0x7e61a51640
	delegate[] ClosedAdDelegates;//[Offset: 0x50, Size: 0x10] 0x7e61a516e0

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7e61a53da0

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding
	FName InputActionName;//[Offset: 0x4, Size: 0x8] 0x7e61644300
	byte InputKeyEvent;//[Offset: 0xc, Size: 0x1] 0x7e61644380
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x7e61644400

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61644480
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61644500
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61644580

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7e61a53d00

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x4, Size: 0x8] 0x7e61646300
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x7e61644280

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7e61a53c60

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x18] 0x7e61646200
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8] 0x7e61646280

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7e61a53b20

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x20] 0x7e61646000
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1] 0x7e61646080
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8] 0x7e61646100

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18] 0x7e61440b00
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7e61440b80
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x7e61440c00
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x7e61440c80
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x7e61440d00

--------------------------------
Class: InputSettings.Object
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x28, Size: 0x10] 0x7e61a53120
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61a7da00
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7e61a7da80
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x7e61a7db00
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x7e61a7db80
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x7e61a7dc00
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x7e61a7dc80
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1] 0x7e61a7dd00
	bool bEnableLegacyInputScales;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1] 0x7e61a7dd80
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7e61a7de00
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x7e61a7de80
	bool bEnableGestureRecognizer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39, Size: 0x1] 0x7e61a7df00
	bool bUseAutocorrect;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39, Size: 0x1] 0x7e61a7df80
	FString[] ExcludedAutocorrectOS;//[Offset: 0x40, Size: 0x10] 0x7e61a531c0
	FString[] ExcludedAutocorrectCultures;//[Offset: 0x50, Size: 0x10] 0x7e61a53260
	FString[] ExcludedAutocorrectDeviceModels;//[Offset: 0x60, Size: 0x10] 0x7e61a53300
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x70, Size: 0x1] 0x7e61a533a0
	enum DefaultViewportMouseLockMode;//[Offset: 0x71, Size: 0x1] 0x7e61a53440
	float FOVScale;//[Offset: 0x74, Size: 0x4] 0x7e61a7e280
	float DoubleClickTime;//[Offset: 0x78, Size: 0x4] 0x7e61a7e300
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x80, Size: 0x10] 0x7e61a534e0
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x90, Size: 0x10] 0x7e61a53580
	InputActionSpeechMapping[] SpeechMappings;//[Offset: 0xa0, Size: 0x10] 0x7e61a53620
	class PlayerInput* DefaultPlayerInputClass;//[Offset: 0xb0, Size: 0x28] 0x7e61a536c0
	class InputComponent* DefaultInputComponentClass;//[Offset: 0xd8, Size: 0x28] 0x7e61a53760
	SoftObjectPath DefaultTouchInterface;//[Offset: 0x100, Size: 0x18] 0x7e61a7e500
	Key ConsoleKey;//[Offset: 0x118, Size: 0x18] 0x7e61a7e580
	Key[] ConsoleKeys;//[Offset: 0x130, Size: 0x10] 0x7e61a53800
	void SaveKeyMappings();// 0x2fbb58ebd041 0x7e61a83dc0
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2fba58ebd041 0x7e61a83ea0
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2fb958ebd041 0x7e61a83f80
	InputSettings* GetInputSettings();// 0x2fb858ebd041 0x7e61a84060
	void GetAxisNames(out FName[] AxisNames);// 0x2fb758ebd041 0x7e61a84140
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0x2fb658ebd041 0x7e61a84220
	void GetActionNames(out FName[] ActionNames);// 0x2fb558ebd041 0x7e61a84300
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0x2fb458ebd041 0x7e61a843e0
	void ForceRebuildKeymaps();// 0x2fb358ebd041 0x7e61a844c0
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2fb258ebd041 0x7e61a845a0
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2fb158ebd041 0x7e61a84680

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8] 0x7e6165e600
	float Scale;//[Offset: 0x8, Size: 0x4] 0x7e6165e680
	Key Key;//[Offset: 0x10, Size: 0x18] 0x7e6165e700

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x7e6165c680
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e6165c700
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7e6165c780
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7e6165c800
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7e6165c880
	Key Key;//[Offset: 0x10, Size: 0x18] 0x7e6165c900

--------------------------------
Class: InputAxisConfigEntry
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8] 0x7e6165c980
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10] 0x7e6165ca00

--------------------------------
Class: InputAxisProperties
	float DeadZone;//[Offset: 0x0, Size: 0x4] 0x7e6165ca80
	float Sensitivity;//[Offset: 0x4, Size: 0x4] 0x7e6165cb00
	float Exponent;//[Offset: 0x8, Size: 0x4] 0x7e6165cb80
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7e6165cc00

--------------------------------
Class: InputActionSpeechMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x7e6165e500
	FName SpeechKeyword;//[Offset: 0x8, Size: 0x8] 0x7e6165e580

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7e61a53080

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding
	byte InputKeyEvent;//[Offset: 0x1, Size: 0x1] 0x7e61645c00
	FName FunctionNameToBind;//[Offset: 0x4, Size: 0x8] 0x7e61645c80

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InstancedPlacemenClientSettings.Object

--------------------------------
Class: PartitionActor.Actor.Object

--------------------------------
Class: ISMPartitionActor.PartitionActor.Actor.Object

--------------------------------
Class: InstancedPlacementPartitionActor.ISMPartitionActor.PartitionActor.Actor.Object

--------------------------------
Class: Interface_ActorSubobject.Interface.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: Interface_AsyncCompilation.Interface.Object

--------------------------------
Class: BoneReferenceSkeletonProvider.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: Interface_PreviewMeshProvider.Interface.Object

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4] 0x7e61a7f480
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4] 0x7e61a7f500
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10] 0x7e61a52ea0
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8] 0x7e61a7f600
	float EdSectionStart;//[Offset: 0x48, Size: 0x4] 0x7e61a7f680
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4] 0x7e61a7f700
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e61a7f780
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8] 0x7e61a7d700
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10] 0x7e61a52f40

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x28, Size: 0x10] 0x7e61a7f400

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8] 0x7e61a7ef00
	float CompressTolerance;//[Offset: 0x58, Size: 0x4] 0x7e61a7ef80

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0x114, Size: 0x4] 0x7e84de1e00
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1] 0x7e84de1d80
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x7e84de1c80
	enum TeleportType;//[Offset: 0x11a, Size: 0x1] 0x7e84e2f100
	enum BehaviourType;//[Offset: 0x11b, Size: 0x1] 0x7e84e2f060
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x7e84de1b80
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11d, Size: 0x1] 0x7e84de1b00
	delegate OnInterpToReverse;//[Offset: 0x120, Size: 0x10] 0x7e84de1a80
	delegate OnInterpToStop;//[Offset: 0x130, Size: 0x10] 0x7e84de1a00
	delegate OnWaitBeginDelegate;//[Offset: 0x140, Size: 0x10] 0x7e84de1980
	delegate OnWaitEndDelegate;//[Offset: 0x150, Size: 0x10] 0x7e84de1900
	delegate OnResetDelegate;//[Offset: 0x160, Size: 0x10] 0x7e84de1880
	float MaxSimulationTimeStep;//[Offset: 0x170, Size: 0x4] 0x7e84889700
	int MaxSimulationIterations;//[Offset: 0x174, Size: 0x4] 0x7e84de1800
	InterpControlPoint[] ControlPoints;//[Offset: 0x178, Size: 0x10] 0x7e84e2efc0
	void StopSimulating(out const HitResult HitResult);// 0xb7758ebd041 0x7e84846de0
	void RestartMovement(float InitialDirection);// 0xb7358ebd041 0x7e84846d00
	void ResetControlPoints();// 0xb7258ebd041 0x7e84846c20
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb7158ebd041 0x7e84846b40
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb7058ebd041 0x7e84846a60
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb6f58ebd041 0x7e84846980
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb6e58ebd041 0x7e848468a0
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb6d58ebd041 0x7e848467c0
	void FinaliseControlPoints();// 0xb6c58ebd041 0x7e848466e0
	void AddControlPointPosition(Vector Pos, bool bPositionIsRelative);// 0xb6b58ebd041 0x7e84846600

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0x18] 0x7e84de1780
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e84de1700

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18] 0x7e61a7ff80
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x7e61a7e780

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x8c, Size: 0x8] 0x7e61a7fe00
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x98, Size: 0x10] 0x7e61a52b80
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x7e61a7ff00

--------------------------------
Class: AnimControlTrackKey
	float StartTime;//[Offset: 0x0, Size: 0x4] 0x7e61648380
	AnimSequence* AnimSeq;//[Offset: 0x8, Size: 0x8] 0x7e61648400
	float AnimStartOffset;//[Offset: 0x10, Size: 0x4] 0x7e61646380
	float AnimEndOffset;//[Offset: 0x14, Size: 0x4] 0x7e61646400
	float AnimPlayRate;//[Offset: 0x18, Size: 0x4] 0x7e61646480
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x7e61646500
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x7e61646580

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18] 0x7e61a7fd00
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x7e61a7fd80

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrackKey[] BoolTrack;//[Offset: 0x70, Size: 0x10] 0x7e61a52ae0
	FName PropertyName;//[Offset: 0x80, Size: 0x8] 0x7e61a7fc80

--------------------------------
Class: BoolTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61648280
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7e61648300

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x7e61a7fb80

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	DirectorTrackCut[] CutTrack;//[Offset: 0x70, Size: 0x10] 0x7e61a52a40
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7e61a7fb00

--------------------------------
Class: DirectorTrackCut
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61648080
	float TransitionTime;//[Offset: 0x4, Size: 0x4] 0x7e61648100
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8] 0x7e61648180
	int ShotNumber;//[Offset: 0x10, Size: 0x4] 0x7e61648200

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrackKey[] EventTrack;//[Offset: 0x70, Size: 0x10] 0x7e61a529a0
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7e61a7f880
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7e61a7f900
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7e61a7f980
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x7e61a7fa00

--------------------------------
Class: EventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61647f80
	FName EventName;//[Offset: 0x4, Size: 0x8] 0x7e61648000

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x7e61a90f80
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x7e61a91000
	LinearColor FadeColor;//[Offset: 0x90, Size: 0x10] 0x7e61a91080

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	ClassPtrProperty AnimBlueprintClass;//[Size: 0x8] 0x7e61a551a0
	class AnimInstance* AnimClass;//[Offset: 0x98, Size: 0x8] 0x7e61a55240
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x7e61a90f00

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x7e61a55100
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x7e61a90e80

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x8c, Size: 0x8] 0x7e61a90d80

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x7e61a90d00

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7e61a90c80

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	FieldPathProperty InterpProperty;//[Size: 0x20] 0x7e61a90b80
	Object* PropertyOuterObjectInst;//[Offset: 0x48, Size: 0x8] 0x7e61a90c00

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e61a90b00

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x58, Size: 0x4] 0x7e61a90a80

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7e61a90980

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8] 0x7e61a90880
	float ResetFloat;//[Offset: 0x30, Size: 0x4] 0x7e61a90900

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x7e61a54f20
	float[] ResetFloats;//[Offset: 0x38, Size: 0x10] 0x7e61a54fc0
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x7e61a55060
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x7e61a90800

--------------------------------
Class: PrimitiveMaterialRef
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x8] 0x7e6161f400
	DecalComponent* Decal;//[Offset: 0x8, Size: 0x8] 0x7e6161f480
	int ElementIndex;//[Offset: 0x10, Size: 0x4] 0x7e6161f500

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28, Size: 0x4] 0x7e61a90600

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x58, Size: 0x4] 0x7e61a90580

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x58, Size: 0x10] 0x7e61a90500

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7e61a90380

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x28, Size: 0x4] 0x7e61a90300

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x7e61a90200
	AudioComponent* PlayAudioComp;//[Offset: 0x30, Size: 0x8] 0x7e61a90280

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x7e61a90080
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x7e61a90100
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e61a90180

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x7e61a54d40
	Vector[] ResetVectors;//[Offset: 0x38, Size: 0x10] 0x7e61a54de0
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x7e61a54e80
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x7e61a92100

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x7e61a54ac0
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x7e61a92f00

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x58, Size: 0x18] 0x7e61a91f00

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x7e61a91e00
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x7e61a91e80

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x70, Size: 0x18] 0x7e61a91d00
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x7e61a91d80

--------------------------------
Class: InterpCurveLinearColor
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0x10] 0x7e841b6dc0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e841e1c80
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7e841e1c00

--------------------------------
Class: InterpCurvePointLinearColor
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7e841e0080
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10] 0x7e841e2100
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10] 0x7e841e2080
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10] 0x7e841e1e00
	byte InterpMode;//[Offset: 0x34, Size: 0x1] 0x7e841e1d80

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x7e61a91c80

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x8c, Size: 0x1] 0x7e61a91500
	InterpLookupTrack LookupTrack;//[Offset: 0x90, Size: 0x10] 0x7e61a91580

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x70, Size: 0x10] 0x7e61a54ca0

--------------------------------
Class: ParticleReplayTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61647c80
	float Duration;//[Offset: 0x4, Size: 0x4] 0x7e61647d00
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4] 0x7e61647d80

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object
	SoundTrackKey[] Sounds;//[Offset: 0x90, Size: 0x10] 0x7e61a54c00
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7e61a91200
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x7e61a91280
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x7e61a91300
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x7e61a91380
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1] 0x7e61a91400

--------------------------------
Class: SoundTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61647a80
	float Volume;//[Offset: 0x4, Size: 0x4] 0x7e61647b00
	float Pitch;//[Offset: 0x8, Size: 0x4] 0x7e61647b80
	SoundBase* Sound;//[Offset: 0x10, Size: 0x8] 0x7e61647c00

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x70, Size: 0x10] 0x7e61a54b60
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7e61a93000
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7e61a93080
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7e61a93100
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x7e61a93180
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1] 0x7e61a91100

--------------------------------
Class: ToggleTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61647980
	byte ToggleAction;//[Offset: 0x4, Size: 0x1] 0x7e61647a00

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x7e61a92e00

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x70, Size: 0x10] 0x7e61a54a20
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7e61a92c80
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7e61a92d00
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7e61a92d80

--------------------------------
Class: VisibilityTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61647800
	byte Action;//[Offset: 0x4, Size: 0x1] 0x7e61647880
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1] 0x7e61647900

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2] 0x7e61a92800
	uint32 UnsignedInt32Variable;//[Offset: 0x2c, Size: 0x4] 0x7e61a92880
	uint64 UnsignedInt64Variable;//[Offset: 0x30, Size: 0x8] 0x7e61a92900
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1] 0x7e61a92980
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2] 0x7e61a92a00
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8] 0x7e61a92a80
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1] 0x7e61a92b00
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4] 0x7e61a92b80

--------------------------------
Class: ISMPartitionInstanceManager.Interface.Object

--------------------------------
Class: ISMPartitionInstanceManagerProvider.Interface.Object

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0x2fd458ebd041 0x7e61a861a0
	void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0x2fd358ebd041 0x7e61a86280
	void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0x2fd258ebd041 0x7e61a86360
	void Array_Shuffle(out const int[] TargetArray);// 0x2fd158ebd041 0x7e61a86440
	void Array_Set(out const int[] TargetArray, int Index, out const int Item, bool bSizeToFit);// 0x2fd058ebd041 0x7e61a86520
	void Array_Reverse(out const int[] TargetArray);// 0x2fcf58ebd041 0x7e61a86600
	void Array_Resize(out const int[] TargetArray, int Size);// 0x2fce58ebd041 0x7e61a866e0
	bool Array_RemoveItem(out const int[] TargetArray, out const int Item);// 0x2fcd58ebd041 0x7e61a867c0
	void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0x2fcc58ebd041 0x7e61a868a0
	void Array_RandomFromStream(out const int[] TargetArray, out RandomStream RandomStream, out int OutItem, out int OutIndex);// 0x2fcb58ebd041 0x7e61a86980
	void Array_Random(out const int[] TargetArray, out int OutItem, out int OutIndex);// 0x2fca58ebd041 0x7e61a86a60
	int Array_Length(out const int[] TargetArray);// 0x2fc958ebd041 0x7e61a86b40
	int Array_LastIndex(out const int[] TargetArray);// 0x2fc858ebd041 0x7e61a86c20
	bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0x2fc758ebd041 0x7e61a86d00
	bool Array_IsNotEmpty(out const int[] TargetArray);// 0x2fc658ebd041 0x7e61a86de0
	bool Array_IsEmpty(out const int[] TargetArray);// 0x2fc558ebd041 0x7e61a86ec0
	void Array_Insert(out const int[] TargetArray, out const int NewItem, int Index);// 0x2fc458ebd041 0x7e61a86fa0
	bool Array_Identical(out const int[] ArrayA, out const int[] ArrayB);// 0x2fc358ebd041 0x7e61a87080
	void Array_Get(out const int[] TargetArray, int Index, out int Item);// 0x2fc258ebd041 0x7e61a87160
	int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0x2fc158ebd041 0x7e61a87240
	bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0x300258ebd041 0x7e61a87320
	void Array_Clear(out const int[] TargetArray);// 0x2fbf58ebd041 0x7e61a83a40
	void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0x2fbe58ebd041 0x7e61a83b20
	int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0x2fbd58ebd041 0x7e61a83c00
	int Array_Add(out const int[] TargetArray, out const int NewItem);// 0x2fbc58ebd041 0x7e61a83ce0

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4] 0x7e841e1180
	int Seed;//[Offset: 0x4, Size: 0x4] 0x7e841e1100

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool Success);// 0x2fdb58ebd041 0x7e61a85b80
	bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0x2fda58ebd041 0x7e61a85c60
	Guid NewGuid();// 0x2fd958ebd041 0x7e61a85d40
	bool IsValid_Guid(out const Guid InGuid);// 0x2fd858ebd041 0x7e61a85e20
	void Invalidate_Guid(out Guid InGuid);// 0x2fd758ebd041 0x7e61a85f00
	bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0x2fd658ebd041 0x7e61a85fe0
	FString Conv_GuidToString(out const Guid InGuid);// 0x2fd558ebd041 0x7e61a860c0

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0x300c58ebd041 0x7e61a8a420
	bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0x300b58ebd041 0x7e61a8a500
	float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0x300a58ebd041 0x7e61a8a5e0
	int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0x300958ebd041 0x7e61a8a6c0
	int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0x300858ebd041 0x7e61a8a7a0
	Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0x300758ebd041 0x7e61a8a880
	int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0x300658ebd041 0x7e61a8a960
	Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0x300558ebd041 0x7e61a8aa40
	enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0x300458ebd041 0x7e61a8ab20
	Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0x300358ebd041 0x7e61a8ac00
	Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0x304458ebd041 0x7e61a8ace0
	Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0x300158ebd041 0x7e61a87400
	bool Key_IsVectorAxis(out const Key Key);// 0x300058ebd041 0x7e61a874e0
	bool Key_IsValid(out const Key Key);// 0x2fff58ebd041 0x7e61a875c0
	bool Key_IsMouseButton(out const Key Key);// 0x2ffe58ebd041 0x7e61a876a0
	bool Key_IsModifierKey(out const Key Key);// 0x2ffd58ebd041 0x7e61a87780
	bool Key_IsKeyboardKey(out const Key Key);// 0x2ffc58ebd041 0x7e61a87860
	bool Key_IsGamepadKey(out const Key Key);// 0x2ffb58ebd041 0x7e61a87940
	bool Key_IsDigital(out const Key Key);// 0x2ffa58ebd041 0x7e61a87a20
	bool Key_IsButtonAxis(out const Key Key);// 0x2ff958ebd041 0x7e61a87b00
	bool Key_IsAxis3D(out const Key Key);// 0x2ff858ebd041 0x7e61a87be0
	bool Key_IsAxis2D(out const Key Key);// 0x2ff758ebd041 0x7e61a87cc0
	bool Key_IsAxis1D(out const Key Key);// 0x2ff658ebd041 0x7e61a87da0
	bool Key_IsAnalog(out const Key Key);// 0x2ff558ebd041 0x7e61a87e80
	enum Key_GetNavigationDirectionFromKey(out const KeyEvent InKeyEvent);// 0x2ff458ebd041 0x7e61a87f60
	enum Key_GetNavigationDirectionFromAnalog(out const AnalogInputEvent InAnalogEvent);// 0x2ff358ebd041 0x7e61a88040
	enum Key_GetNavigationActionFromKey(out const KeyEvent InKeyEvent);// 0x2ff258ebd041 0x7e61a88120
	enum Key_GetNavigationAction(out const Key InKey);// 0x2ff158ebd041 0x7e61a88200
	FText Key_GetDisplayName(out const Key Key);// 0x2ff058ebd041 0x7e61a882e0
	bool InputEvent_IsShiftDown(out const InputEvent Input);// 0x2fef58ebd041 0x7e61a883c0
	bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0x2fee58ebd041 0x7e61a884a0
	bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0x2fed58ebd041 0x7e61a88580
	bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0x2fec58ebd041 0x7e61a88660
	bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0x2feb58ebd041 0x7e61a88740
	bool InputEvent_IsRepeat(out const InputEvent Input);// 0x2fea58ebd041 0x7e61a88820
	bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0x2fe958ebd041 0x7e61a88900
	bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0x2fe858ebd041 0x7e61a889e0
	bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0x2fe758ebd041 0x7e61a88ac0
	bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0x2fe658ebd041 0x7e61a88ba0
	bool InputEvent_IsControlDown(out const InputEvent Input);// 0x2fe558ebd041 0x7e61a88c80
	bool InputEvent_IsCommandDown(out const InputEvent Input);// 0x2fe458ebd041 0x7e61a88d60
	bool InputEvent_IsAltDown(out const InputEvent Input);// 0x2fe358ebd041 0x7e61a88e40
	FText InputChord_GetDisplayName(out const InputChord Key);// 0x2fe258ebd041 0x7e61a88f20
	int GetUserIndex(out const KeyEvent Input);// 0x302358ebd041 0x7e61a89000
	Key GetKey(out const KeyEvent Input);// 0x2fe058ebd041 0x7e61a85720
	float GetAnalogValue(out const AnalogInputEvent Input);// 0x2fdf58ebd041 0x7e61a85800
	bool EqualEqual_KeyKey(Key A, Key B);// 0x2fde58ebd041 0x7e61a858e0
	bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0x2fdd58ebd041 0x7e61a859c0
	void CalibrateTilt();// 0x2fdc58ebd041 0x7e61a85aa0

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	bool SetCurrentLocale(FString Culture, const bool SaveToConfig);// 0x301a58ebd041 0x7e61a897e0
	bool SetCurrentLanguageAndLocale(FString Culture, const bool SaveToConfig);// 0x301958ebd041 0x7e61a898c0
	bool SetCurrentLanguage(FString Culture, const bool SaveToConfig);// 0x301858ebd041 0x7e61a899a0
	bool SetCurrentCulture(FString Culture, const bool SaveToConfig);// 0x301758ebd041 0x7e61a89a80
	bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString Culture, const bool SaveToConfig);// 0x301658ebd041 0x7e61a89b60
	FString GetSuitableCulture(out const FString[] AvailableCultures, FString CultureToMatch, FString FallbackCulture);// 0x301558ebd041 0x7e61a89c40
	FString GetNativeCulture(const enum TextCategory);// 0x301458ebd041 0x7e61a89d20
	FString[] GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);// 0x301358ebd041 0x7e61a89e00
	FString GetCurrentLocale();// 0x301258ebd041 0x7e61a89ee0
	FString GetCurrentLanguage();// 0x301158ebd041 0x7e61a89fc0
	FString GetCurrentCulture();// 0x301058ebd041 0x7e61a8a0a0
	FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0x300f58ebd041 0x7e61a8a180
	FString GetCultureDisplayName(FString Culture, const bool Localized);// 0x300e58ebd041 0x7e61a8a260
	void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0x300d58ebd041 0x7e61a8a340

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0x301f58ebd041 0x7e61a89380
	void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0x301e58ebd041 0x7e61a89460
	LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x301d58ebd041 0x7e61a89540
	float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x301c58ebd041 0x7e61a89620
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent, FName OptionalName, enum CreationFlags);// 0x301b58ebd041 0x7e61a89700

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	int Xor_IntInt(int A, int B);// 0x32e058ebd041 0x7e61b10860
	int64 Xor_Int64Int64(int64 A, int64 B);// 0x32df58ebd041 0x7e61b10940
	int Wrap(int Value, int Min, int Max);// 0x32de58ebd041 0x7e61b10a20
	Vector WeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float Weight);// 0x32dd58ebd041 0x7e61b10b00
	Rotator WeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float Weight);// 0x32dc58ebd041 0x7e61b10be0
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);// 0x32db58ebd041 0x7e61b10cc0
	double VSizeXYSquared(Vector A);// 0x32da58ebd041 0x7e61b10da0
	double VSizeXY(Vector A);// 0x32d958ebd041 0x7e61b10e80
	double VSizeSquared(Vector A);// 0x32d858ebd041 0x7e61b10f60
	double VSize2DSquared(Vector2D A);// 0x32d758ebd041 0x7e61b11040
	double VSize2D(Vector2D A);// 0x32d658ebd041 0x7e61b11120
	double VSize(Vector A);// 0x32d558ebd041 0x7e61b11200
	Vector VLerp(Vector A, Vector B, float Alpha);// 0x32d458ebd041 0x7e61b112e0
	Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x32d358ebd041 0x7e61b113c0
	Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x32d258ebd041 0x7e61b114a0
	Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, Vector MinValue, Vector MaxValue, bool bInitializeFromTarget);// 0x32d158ebd041 0x7e61b11580
	Vector Vector_Zero();// 0x32d058ebd041 0x7e61b11660
	Vector Vector_Up();// 0x32cf58ebd041 0x7e61b11740
	void Vector_UnwindEuler(out Vector A);// 0x32ce58ebd041 0x7e61b11820
	Vector2D Vector_UnitCartesianToSpherical(Vector A);// 0x32cd58ebd041 0x7e61b11900
	Vector Vector_ToRadians(Vector A);// 0x32cc58ebd041 0x7e61b119e0
	Vector Vector_ToDegrees(Vector A);// 0x32cb58ebd041 0x7e61b11ac0
	Vector Vector_SnappedToGrid(Vector InVect, float InGridSize);// 0x32ca58ebd041 0x7e61b11ba0
	void Vector_Set(out Vector A, double X, double Y, double Z);// 0x330b58ebd041 0x7e61b11c80
	Vector Vector_Right();// 0x32c858ebd041 0x7e61aee780
	Vector Vector_Reciprocal(out const Vector A);// 0x32c758ebd041 0x7e61aee860
	Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal);// 0x32c658ebd041 0x7e61aee940
	Vector Vector_One();// 0x32c558ebd041 0x7e61aeea20
	Vector Vector_NormalUnsafe(out const Vector A);// 0x32c458ebd041 0x7e61aeeb00
	void Vector_Normalize(out Vector A, float Tolerance);// 0x32c358ebd041 0x7e61aeebe0
	Vector Vector_Normal2D(Vector A, float Tolerance);// 0x32c258ebd041 0x7e61aeecc0
	Vector Vector_MirrorByPlane(Vector A, out const Plane InPlane);// 0x32c158ebd041 0x7e61aeeda0
	Vector Vector_Left();// 0x32c058ebd041 0x7e61aeee80
	bool Vector_IsZero(out const Vector A);// 0x32bf58ebd041 0x7e61aeef60
	bool Vector_IsUnit(out const Vector A, float SquaredLenthTolerance);// 0x32be58ebd041 0x7e61aef040
	bool Vector_IsUniform(out const Vector A, float Tolerance);// 0x32bd58ebd041 0x7e61aef120
	bool Vector_IsNormal(out const Vector A);// 0x32bc58ebd041 0x7e61aef200
	bool Vector_IsNearlyZero(out const Vector A, float Tolerance);// 0x32bb58ebd041 0x7e61aef2e0
	bool Vector_IsNAN(out const Vector A);// 0x32ba58ebd041 0x7e61aef3c0
	double Vector_HeadingAngle(Vector A);// 0x32b958ebd041 0x7e61aef4a0
	Vector Vector_GetSignVector(Vector A);// 0x32b858ebd041 0x7e61aef580
	Vector Vector_GetProjection(Vector A);// 0x32b758ebd041 0x7e61aef660
	double Vector_GetAbsMin(Vector A);// 0x32b658ebd041 0x7e61aef740
	double Vector_GetAbsMax(Vector A);// 0x32b558ebd041 0x7e61aef820
	Vector Vector_GetAbs(Vector A);// 0x32b458ebd041 0x7e61aef900
	Vector Vector_Forward();// 0x32b358ebd041 0x7e61aef9e0
	Vector Vector_Down();// 0x32b258ebd041 0x7e61aefac0
	double Vector_DistanceSquared(Vector v1, Vector v2);// 0x32b158ebd041 0x7e61aefba0
	double Vector_Distance2DSquared(Vector v1, Vector v2);// 0x32b058ebd041 0x7e61aefc80
	double Vector_Distance2D(Vector v1, Vector v2);// 0x32af58ebd041 0x7e61aefd60
	double Vector_Distance(Vector v1, Vector v2);// 0x32ae58ebd041 0x7e61aefe40
	double Vector_CosineAngle2D(Vector A, Vector B);// 0xffffff8158ebd000 0x7e61aeff20
	Vector Vector_ComponentMin(Vector A, Vector B);// 0x32ac58ebd041 0x7e61aecaa0
	Vector Vector_ComponentMax(Vector A, Vector B);// 0x32ab58ebd041 0x7e61aecb80
	Vector Vector_ClampSizeMax2D(Vector A, double Max);// 0x32aa58ebd041 0x7e61aecc60
	Vector Vector_ClampSizeMax(Vector A, double Max);// 0x32a958ebd041 0x7e61aecd40
	Vector Vector_ClampSize2D(Vector A, double Min, double Max);// 0x32a858ebd041 0x7e61aece20
	Vector Vector_BoundedToCube(Vector InVect, float InRadius);// 0x32a758ebd041 0x7e61aecf00
	Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax);// 0x32a658ebd041 0x7e61aecfe0
	Vector Vector_Backward();// 0x32a558ebd041 0x7e61aed0c0
	void Vector_Assign(out Vector A, out const Vector InVector);// 0x32a458ebd041 0x7e61aed1a0
	void Vector_AddBounded(out Vector A, Vector InAddVect, float InRadius);// 0x32a358ebd041 0x7e61aed280
	Vector4 Vector4_Zero();// 0x32a258ebd041 0x7e61aed360
	double Vector4_SizeSquared3(out const Vector4 A);// 0x32a158ebd041 0x7e61aed440
	double Vector4_SizeSquared(out const Vector4 A);// 0x32a058ebd041 0x7e61aed520
	double Vector4_Size3(out const Vector4 A);// 0x329f58ebd041 0x7e61aed600
	double Vector4_Size(out const Vector4 A);// 0x329e58ebd041 0x7e61aed6e0
	void Vector4_Set(out Vector4 A, double X, double Y, double Z, double W);// 0x329d58ebd041 0x7e61aed7c0
	Vector4 Vector4_NormalUnsafe3(out const Vector4 A);// 0x329c58ebd041 0x7e61aed8a0
	void Vector4_Normalize3(out Vector4 A, float Tolerance);// 0x329b58ebd041 0x7e61aed980
	Vector4 Vector4_Normal3(out const Vector4 A, float Tolerance);// 0x329a58ebd041 0x7e61aeda60
	Vector4 Vector4_Negated(out const Vector4 A);// 0x329958ebd041 0x7e61aedb40
	Vector4 Vector4_MirrorByVector3(out const Vector4 Direction, out const Vector4 SurfaceNormal);// 0x329858ebd041 0x7e61aedc20
	bool Vector4_IsZero(out const Vector4 A);// 0x329758ebd041 0x7e61aedd00
	bool Vector4_IsUnit3(out const Vector4 A, float SquaredLenthTolerance);// 0x329658ebd041 0x7e61aedde0
	bool Vector4_IsNormal3(out const Vector4 A);// 0x329558ebd041 0x7e61aedec0
	bool Vector4_IsNearlyZero3(out const Vector4 A, float Tolerance);// 0x329458ebd041 0x7e61aedfa0
	bool Vector4_IsNAN(out const Vector4 A);// 0x329358ebd041 0x7e61aee080
	double Vector4_DotProduct3(out const Vector4 A, out const Vector4 B);// 0x329258ebd041 0x7e61aee160
	double Vector4_DotProduct(out const Vector4 A, out const Vector4 B);// 0x329158ebd041 0x7e61aee240
	Vector4 Vector4_CrossProduct3(out const Vector4 A, out const Vector4 B);// 0x329058ebd041 0x7e61aee320
	void Vector4_Assign(out Vector4 A, out const Vector4 InVector);// 0x328f58ebd041 0x7e61aee400
	Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x328e58ebd041 0x7e61aee4e0
	Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x328d58ebd041 0x7e61aee5c0
	Vector2D Vector2D_Zero();// 0x32c958ebd041 0x7e61aee6a0
	Vector2D Vector2D_Unit45Deg();// 0x328b58ebd041 0x7e61aeadc0
	Vector2D Vector2D_One();// 0x328a58ebd041 0x7e61aeaea0
	Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x328958ebd041 0x7e61aeaf80
	DateTime UtcNow();// 0x328858ebd041 0x7e61aeb060
	Vector4 TransformVector4(out const Matrix Matrix, out const Vector4 Vec4);// 0x328758ebd041 0x7e61aeb140
	Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0x328658ebd041 0x7e61aeb220
	Vector TransformLocation(out const Transform T, Vector Location);// 0x328558ebd041 0x7e61aeb300
	Vector TransformDirection(out const Transform T, Vector Direction);// 0x328458ebd041 0x7e61aeb3e0
	float Transform_Determinant(out const Transform Transform);// 0x328358ebd041 0x7e61aeb4c0
	Vector2D ToSign2D(Vector2D A);// 0x328258ebd041 0x7e61aeb5a0
	Vector2D ToRounded2D(Vector2D A);// 0x328158ebd041 0x7e61aeb680
	void ToDirectionAndLength2D(Vector2D A, out Vector2D OutDir, out double OutLength);// 0x328058ebd041 0x7e61aeb760
	DateTime Today();// 0x327f58ebd041 0x7e61aeb840
	Transform TLerp(out const Transform A, out const Transform B, float Alpha, byte InterpMode);// 0x327e58ebd041 0x7e61aeb920
	Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0x327d58ebd041 0x7e61aeba00
	Timespan TimespanZeroValue();// 0x327c58ebd041 0x7e61aebae0
	float TimespanRatio(Timespan A, Timespan B);// 0x327b58ebd041 0x7e61aebbc0
	Timespan TimespanMinValue();// 0x327a58ebd041 0x7e61aebca0
	Timespan TimespanMaxValue();// 0x327958ebd041 0x7e61aebd80
	bool TimespanFromString(FString TimespanString, out Timespan Result);// 0x327858ebd041 0x7e61aebe60
	Transform TEase(out const Transform A, out const Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x327758ebd041 0x7e61aebf40
	double Tan(double A);// 0x327658ebd041 0x7e61aec020
	Vector Subtract_VectorVector(Vector A, Vector B);// 0x327558ebd041 0x7e61aec100
	Vector Subtract_VectorInt(Vector A, int B);// 0x327458ebd041 0x7e61aec1e0
	Vector Subtract_VectorFloat(Vector A, double B);// 0x327358ebd041 0x7e61aec2c0
	Vector4 Subtract_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x327258ebd041 0x7e61aec3a0
	Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0x327158ebd041 0x7e61aec480
	Vector2D Subtract_Vector2DFloat(Vector2D A, double B);// 0x327058ebd041 0x7e61aec560
	Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0x326f58ebd041 0x7e61aec640
	Quat Subtract_QuatQuat(out const Quat A, out const Quat B);// 0x326e58ebd041 0x7e61aec720
	LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x326d58ebd041 0x7e61aec800
	IntPoint Subtract_IntPointIntPoint(IntPoint A, IntPoint B);// 0x326c58ebd041 0x7e61aec8e0
	IntPoint Subtract_IntPointInt(IntPoint A, int B);// 0x32ad58ebd041 0x7e61aec9c0
	int Subtract_IntInt(int A, int B);// 0x326a58ebd041 0x7e61ae90e0
	int64 Subtract_Int64Int64(int64 A, int64 B);// 0x326958ebd041 0x7e61ae91c0
	double Subtract_DoubleDouble(double A, double B);// 0x326858ebd041 0x7e61ae92a0
	DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0x326758ebd041 0x7e61ae9380
	Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0x326658ebd041 0x7e61ae9460
	byte Subtract_ByteByte(byte A, byte B);// 0x326558ebd041 0x7e61ae9540
	double Square(double A);// 0x326458ebd041 0x7e61ae9620
	double Sqrt(double A);// 0x326358ebd041 0x7e61ae9700
	Vector Spherical2DToUnitCartesian(Vector2D A);// 0x326258ebd041 0x7e61ae97e0
	double Sin(double A);// 0x326158ebd041 0x7e61ae98c0
	int64 SignOfInteger64(int64 A);// 0x326058ebd041 0x7e61ae99a0
	int SignOfInteger(int A);// 0x325f58ebd041 0x7e61ae9a80
	double SignOfFloat(double A);// 0x325e58ebd041 0x7e61ae9b60
	void SetVectorSpringStateVelocity(out VectorSpringState SpringState, Vector Velocity);// 0x325d58ebd041 0x7e61ae9c40
	void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0x325c58ebd041 0x7e61ae9d20
	void SetQuaternionSpringStateAngularVelocity(out QuaternionSpringState SpringState, Vector AngularVelocity);// 0x325b58ebd041 0x7e61ae9e00
	void SetFloatSpringStateVelocity(out FloatSpringState SpringState, float Velocity);// 0x325a58ebd041 0x7e61ae9ee0
	void Set2D(out Vector2D A, double X, double Y);// 0x325958ebd041 0x7e61ae9fc0
	Vector SelectVector(Vector A, Vector B, bool bPickA);// 0x325858ebd041 0x7e61aea0a0
	Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0x325758ebd041 0x7e61aea180
	FString SelectString(FString A, FString B, bool bPickA);// 0x325658ebd041 0x7e61aea260
	Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0x325558ebd041 0x7e61aea340
	Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0x325458ebd041 0x7e61aea420
	int SelectInt(int A, int B, bool bPickA);// 0x325358ebd041 0x7e61aea500
	double SelectFloat(double A, double B, bool bPickA);// 0x325258ebd041 0x7e61aea5e0
	LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0x325158ebd041 0x7e61aea6c0
	class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0x325058ebd041 0x7e61aea7a0
	void SeedRandomStream(out RandomStream Stream);// 0x324f58ebd041 0x7e61aea880
	double SafeDivide(double A, double B);// 0x324e58ebd041 0x7e61aea960
	int64 Round64(double A);// 0x324d58ebd041 0x7e61aeaa40
	int Round(double A);// 0x324c58ebd041 0x7e61aeab20
	Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0x324b58ebd041 0x7e61aeac00
	Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0x328c58ebd041 0x7e61aeace0
	Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath);// 0x324958ebd041 0x7e61ae7400
	Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x324858ebd041 0x7e61ae74e0
	Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x324758ebd041 0x7e61ae75c0
	void RGBToHSV_Vector(LinearColor RGB, out LinearColor HSV);// 0x324658ebd041 0x7e61ae76a0
	void RGBToHSV(LinearColor InColor, out float H, out float S, out float V, out float A);// 0x324558ebd041 0x7e61ae7780
	LinearColor RGBLinearToHSV(LinearColor RGB);// 0x324458ebd041 0x7e61ae7860
	void ResetVectorSpringState(out VectorSpringState SpringState);// 0x324358ebd041 0x7e61ae7940
	void ResetRandomStream(out const RandomStream Stream);// 0x324258ebd041 0x7e61ae7a20
	void ResetQuaternionSpringState(out QuaternionSpringState SpringState);// 0x324158ebd041 0x7e61ae7b00
	void ResetFloatSpringState(out FloatSpringState SpringState);// 0x324058ebd041 0x7e61ae7be0
	Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0x323f58ebd041 0x7e61ae7cc0
	Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0x323e58ebd041 0x7e61ae7da0
	Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0x323d58ebd041 0x7e61ae7e80
	Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0x323c58ebd041 0x7e61ae7f60
	Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0x323b58ebd041 0x7e61ae8040
	Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0x323a58ebd041 0x7e61ae8120
	Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0x323958ebd041 0x7e61ae8200
	Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0x323858ebd041 0x7e61ae82e0
	Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0x323758ebd041 0x7e61ae83c0
	Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0x323658ebd041 0x7e61ae84a0
	Vector RandomUnitVector();// 0x323558ebd041 0x7e61ae8580
	Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0x323458ebd041 0x7e61ae8660
	Rotator RandomRotator(bool bRoll);// 0x323358ebd041 0x7e61ae8740
	Vector RandomPointInBoundingBoxFromStream(const Vector Center, const Vector HalfSize, out const RandomStream Stream);// 0x323258ebd041 0x7e61ae8820
	Vector RandomPointInBoundingBox(const Vector Center, const Vector HalfSize);// 0x323158ebd041 0x7e61ae8900
	int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0x323058ebd041 0x7e61ae89e0
	int RandomIntegerInRange(int Min, int Max);// 0x322f58ebd041 0x7e61ae8ac0
	int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0x322e58ebd041 0x7e61ae8ba0
	int64 RandomInteger64InRange(int64 Min, int64 Max);// 0x322d58ebd041 0x7e61ae8c80
	int64 RandomInteger64(int64 Max);// 0x322c58ebd041 0x7e61ae8d60
	int RandomInteger(int Max);// 0x322b58ebd041 0x7e61ae8e40
	float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0x322a58ebd041 0x7e61ae8f20
	double RandomFloatInRange(double Min, double Max);// 0x326b58ebd041 0x7e61ae9000
	float RandomFloatFromStream(out const RandomStream Stream);// 0x322858ebd041 0x7e61ae5720
	double RandomFloat();// 0x322758ebd041 0x7e61ae5800
	bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0x322658ebd041 0x7e61ae58e0
	bool RandomBoolWithWeight(float Weight);// 0x322558ebd041 0x7e61ae59c0
	bool RandomBoolFromStream(out const RandomStream Stream);// 0x322458ebd041 0x7e61ae5aa0
	bool RandomBool();// 0x322358ebd041 0x7e61ae5b80
	double RadiansToDegrees(double A);// 0x322258ebd041 0x7e61ae5c60
	Quat QuaternionSpringInterp(Quat Current, Quat Target, out QuaternionSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget);// 0x322158ebd041 0x7e61ae5d40
	Vector Quat_VectorUp(out const Quat Q);// 0x322058ebd041 0x7e61ae5e20
	Vector Quat_VectorRight(out const Quat Q);// 0x321f58ebd041 0x7e61ae5f00
	Vector Quat_VectorForward(out const Quat Q);// 0x321e58ebd041 0x7e61ae5fe0
	Vector Quat_UnrotateVector(out const Quat Q, out const Vector V);// 0x321d58ebd041 0x7e61ae60c0
	float Quat_SizeSquared(out const Quat Q);// 0x321c58ebd041 0x7e61ae61a0
	float Quat_Size(out const Quat Q);// 0x321b58ebd041 0x7e61ae6280
	void Quat_SetFromEuler(out Quat Q, out const Vector Euler);// 0x321a58ebd041 0x7e61ae6360
	void Quat_SetComponents(out Quat Q, float X, float Y, float Z, float W);// 0x321958ebd041 0x7e61ae6440
	Rotator Quat_Rotator(out const Quat Q);// 0x321858ebd041 0x7e61ae6520
	Vector Quat_RotateVector(out const Quat Q, out const Vector V);// 0x321758ebd041 0x7e61ae6600
	Quat Quat_Normalized(out const Quat Q, float Tolerance);// 0x321658ebd041 0x7e61ae66e0
	void Quat_Normalize(out Quat Q, float Tolerance);// 0x321558ebd041 0x7e61ae67c0
	Quat Quat_MakeFromEuler(out const Vector Euler);// 0x321458ebd041 0x7e61ae68a0
	Quat Quat_Log(out const Quat Q);// 0x321358ebd041 0x7e61ae6980
	bool Quat_IsNormalized(out const Quat Q);// 0x321258ebd041 0x7e61ae6a60
	bool Quat_IsNonFinite(out const Quat Q);// 0x321158ebd041 0x7e61ae6b40
	bool Quat_IsIdentity(out const Quat Q, float Tolerance);// 0x321058ebd041 0x7e61ae6c20
	bool Quat_IsFinite(out const Quat Q);// 0x320f58ebd041 0x7e61ae6d00
	Quat Quat_Inversed(out const Quat Q);// 0x320e58ebd041 0x7e61ae6de0
	Quat Quat_Identity();// 0x320d58ebd041 0x7e61ae6ec0
	Vector Quat_GetRotationAxis(out const Quat Q);// 0x320c58ebd041 0x7e61ae6fa0
	Vector Quat_GetAxisZ(out const Quat Q);// 0x320b58ebd041 0x7e61ae7080
	Vector Quat_GetAxisY(out const Quat Q);// 0x320a58ebd041 0x7e61ae7160
	Vector Quat_GetAxisX(out const Quat Q);// 0x320958ebd041 0x7e61ae7240
	float Quat_GetAngle(out const Quat Q);// 0x324a58ebd041 0x7e61ae7320
	Quat Quat_Exp(out const Quat Q);// 0x320758ebd041 0x7e61ae3a40
	Vector Quat_Euler(out const Quat Q);// 0x320658ebd041 0x7e61ae3b20
	void Quat_EnforceShortestArcWith(out Quat A, out const Quat B);// 0x320558ebd041 0x7e61ae3c00
	float Quat_AngularDistance(out const Quat A, out const Quat B);// 0x320458ebd041 0x7e61ae3ce0
	Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0x320358ebd041 0x7e61ae3dc0
	Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0x320258ebd041 0x7e61ae3ea0
	Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0x320158ebd041 0x7e61ae3f80
	bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0x320058ebd041 0x7e61ae4060
	float PerlinNoise1D(const float Value);// 0x31ff58ebd041 0x7e61ae4140
	int Percent_IntInt(int A, int B);// 0x31fe58ebd041 0x7e61ae4220
	double Percent_FloatFloat(double A, double B);// 0x31fd58ebd041 0x7e61ae4300
	byte Percent_ByteByte(byte A, byte B);// 0x31fc58ebd041 0x7e61ae43e0
	int Or_IntInt(int A, int B);// 0x31fb58ebd041 0x7e61ae44c0
	int64 Or_Int64Int64(int64 A, int64 B);// 0x31fa58ebd041 0x7e61ae45a0
	DateTime Now();// 0x31f958ebd041 0x7e61ae4680
	bool NotEqualExactly_VectorVector(Vector A, Vector B);// 0x31f858ebd041 0x7e61ae4760
	bool NotEqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x31f758ebd041 0x7e61ae4840
	bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x31f658ebd041 0x7e61ae4920
	bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x31f558ebd041 0x7e61ae4a00
	bool NotEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x31f458ebd041 0x7e61ae4ae0
	bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x31f358ebd041 0x7e61ae4bc0
	bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0x31f258ebd041 0x7e61ae4ca0
	bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x31f158ebd041 0x7e61ae4d80
	bool NotEqual_QuatQuat(out const Quat A, out const Quat B, float ErrorTolerance);// 0x31f058ebd041 0x7e61ae4e60
	bool NotEqual_ObjectObject(Object* A, Object* B);// 0x31ef58ebd041 0x7e61ae4f40
	bool NotEqual_NameName(FName A, FName B);// 0x31ee58ebd041 0x7e61ae5020
	bool NotEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x31ed58ebd041 0x7e61ae5100
	bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x31ec58ebd041 0x7e61ae51e0
	bool NotEqual_IntPointIntPoint(IntPoint A, IntPoint B);// 0x31eb58ebd041 0x7e61ae52c0
	bool NotEqual_IntInt(int A, int B);// 0x31ea58ebd041 0x7e61ae53a0
	bool NotEqual_Int64Int64(int64 A, int64 B);// 0x31e958ebd041 0x7e61ae5480
	bool NotEqual_DoubleDouble(double A, double B);// 0x31e858ebd041 0x7e61ae5560
	bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x322958ebd041 0x7e61ae5640
	bool NotEqual_ClassClass(class Object A, class Object B);// 0x31e658ebd041 0x7e61ae1d60
	bool NotEqual_ByteByte(byte A, byte B);// 0x31e558ebd041 0x7e61ae1e40
	bool NotEqual_BoolBool(bool A, bool B);// 0x31e458ebd041 0x7e61ae1f20
	bool Not_PreBool(bool A);// 0x31e358ebd041 0x7e61ae2000
	int64 Not_Int64(int64 A);// 0x31e258ebd041 0x7e61ae20e0
	int Not_Int(int A);// 0x31e158ebd041 0x7e61ae21c0
	Vector2D NormalSafe2D(Vector2D A, float Tolerance);// 0x31e058ebd041 0x7e61ae22a0
	double NormalizeToRange(double Value, double RangeMin, double RangeMax);// 0x31df58ebd041 0x7e61ae2380
	Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0x31de58ebd041 0x7e61ae2460
	float NormalizeAxis(float Angle);// 0x31dd58ebd041 0x7e61ae2540
	void Normalize2D(out Vector2D A, float Tolerance);// 0x31dc58ebd041 0x7e61ae2620
	Vector2D Normal2D(Vector2D A);// 0x31db58ebd041 0x7e61ae2700
	Vector Normal(Vector A, float Tolerance);// 0x31da58ebd041 0x7e61ae27e0
	Vector NegateVector(Vector A);// 0x31d958ebd041 0x7e61ae28c0
	Rotator NegateRotator(Rotator A);// 0x31d858ebd041 0x7e61ae29a0
	Vector2D Negated2D(out const Vector2D A);// 0x31d758ebd041 0x7e61ae2a80
	bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0x31d658ebd041 0x7e61ae2b60
	bool NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance);// 0x31d558ebd041 0x7e61ae2c40
	double MultiplyMultiply_FloatFloat(double Base, double Exp);// 0x31d458ebd041 0x7e61ae2d20
	double MultiplyByPi(double Value);// 0x31d358ebd041 0x7e61ae2e00
	Vector Multiply_VectorVector(Vector A, Vector B);// 0x31d258ebd041 0x7e61ae2ee0
	Vector Multiply_VectorInt(Vector A, int B);// 0x31d158ebd041 0x7e61ae2fc0
	Vector Multiply_VectorFloat(Vector A, double B);// 0x31d058ebd041 0x7e61ae30a0
	Vector4 Multiply_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x31cf58ebd041 0x7e61ae3180
	Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0x31ce58ebd041 0x7e61ae3260
	Vector2D Multiply_Vector2DFloat(Vector2D A, double B);// 0x31cd58ebd041 0x7e61ae3340
	Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0x31cc58ebd041 0x7e61ae3420
	Rotator Multiply_RotatorInt(Rotator A, int B);// 0x31cb58ebd041 0x7e61ae3500
	Rotator Multiply_RotatorFloat(Rotator A, float B);// 0x31ca58ebd041 0x7e61ae35e0
	Quat Multiply_QuatQuat(out const Quat A, out const Quat B);// 0x31c958ebd041 0x7e61ae36c0
	Matrix Multiply_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x31c858ebd041 0x7e61ae37a0
	Matrix Multiply_MatrixFloat(out const Matrix A, double B);// 0x31c758ebd041 0x7e61ae3880
	LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x320858ebd041 0x7e61ae3960
	LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0x31c558ebd041 0x7e61ae0080
	IntPoint Multiply_IntPointIntPoint(IntPoint A, IntPoint B);// 0x31c458ebd041 0x7e61ae0160
	IntPoint Multiply_IntPointInt(IntPoint A, int B);// 0x31c358ebd041 0x7e61ae0240
	int Multiply_IntInt(int A, int B);// 0x31c258ebd041 0x7e61ae0320
	double Multiply_IntFloat(int A, double B);// 0x31c158ebd041 0x7e61ae0400
	int64 Multiply_Int64Int64(int64 A, int64 B);// 0x31c058ebd041 0x7e61ae04e0
	double Multiply_DoubleDouble(double A, double B);// 0x31bf58ebd041 0x7e61ae05c0
	byte Multiply_ByteByte(byte A, byte B);// 0x31be58ebd041 0x7e61ae06a0
	Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0x31bd58ebd041 0x7e61ae0780
	void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0x31bc58ebd041 0x7e61ae0860
	void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0x31bb58ebd041 0x7e61ae0940
	void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0x31ba58ebd041 0x7e61ae0a20
	int64 MinInt64(int64 A, int64 B);// 0x31b958ebd041 0x7e61ae0b00
	void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0x31b858ebd041 0x7e61ae0be0
	void MinAreaRectangle(Object* WorldContextObject, out const Vector[] InPoints, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutRectLengthX, out float OutRectLengthY, bool bDebugDraw);// 0x31b758ebd041 0x7e61ae0cc0
	int Min(int A, int B);// 0x31b658ebd041 0x7e61ae0da0
	void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0x31b558ebd041 0x7e61ae0e80
	void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0x31b458ebd041 0x7e61ae0f60
	void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0x31b358ebd041 0x7e61ae1040
	int64 MaxInt64(int64 A, int64 B);// 0x31b258ebd041 0x7e61ae1120
	int Max(int A, int B);// 0x31b158ebd041 0x7e61ae1200
	Vector4 Matrix_TransformVector4(out const Matrix M, Vector4 V);// 0x31b058ebd041 0x7e61ae12e0
	Vector4 Matrix_TransformVector(out const Matrix M, Vector V);// 0x31af58ebd041 0x7e61ae13c0
	Vector4 Matrix_TransformPosition(out const Matrix M, Vector V);// 0x31ae58ebd041 0x7e61ae14a0
	Quat Matrix_ToQuat(out const Matrix M);// 0x31ad58ebd041 0x7e61ae1580
	void Matrix_SetOrigin(out Matrix M, Vector NewOrigin);// 0x31ac58ebd041 0x7e61ae1660
	void Matrix_SetColumn(out Matrix M, byte Column, Vector Value);// 0x31ab58ebd041 0x7e61ae1740
	void Matrix_SetAxis(out Matrix M, byte Axis, Vector AxisVector);// 0x31aa58ebd041 0x7e61ae1820
	Matrix Matrix_ScaleTranslation(out const Matrix M, Vector Scale3D);// 0x31a958ebd041 0x7e61ae1900
	Matrix Matrix_RemoveTranslation(out const Matrix M);// 0x31a858ebd041 0x7e61ae19e0
	void Matrix_RemoveScaling(out Matrix M, float Tolerance);// 0x31a758ebd041 0x7e61ae1ac0
	Matrix Matrix_Mirror(out const Matrix M, byte MirrorAxis, byte FlipAxis);// 0x31a658ebd041 0x7e61ae1ba0
	Vector Matrix_InverseTransformVector(out const Matrix M, Vector V);// 0x31e758ebd041 0x7e61ae1c80
	Vector Matrix_InverseTransformPosition(out const Matrix M, Vector V);// 0x31a458ebd041 0x7e61ace780
	Matrix Matrix_Identity();// 0x31a358ebd041 0x7e61ace860
	Vector Matrix_GetUnitAxis(out const Matrix M, byte Axis);// 0x31a258ebd041 0x7e61ace940
	void Matrix_GetUnitAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x31a158ebd041 0x7e61acea20
	Matrix Matrix_GetTransposed(out const Matrix M);// 0x31a058ebd041 0x7e61aceb00
	Matrix Matrix_GetTransposeAdjoint(out const Matrix M);// 0x319f58ebd041 0x7e61acebe0
	Vector Matrix_GetScaleVector(out const Matrix M, float Tolerance);// 0x319e58ebd041 0x7e61acecc0
	Vector Matrix_GetScaledAxis(out const Matrix M, byte Axis);// 0x319d58ebd041 0x7e61aceda0
	void Matrix_GetScaledAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x319c58ebd041 0x7e61acee80
	float Matrix_GetRotDeterminant(out const Matrix M);// 0x319b58ebd041 0x7e61acef60
	Rotator Matrix_GetRotator(out const Matrix M);// 0x319a58ebd041 0x7e61acf040
	Vector Matrix_GetOrigin(out const Matrix InMatrix);// 0x319958ebd041 0x7e61acf120
	float Matrix_GetMaximumAxisScale(out const Matrix M);// 0x319858ebd041 0x7e61acf200
	Matrix Matrix_GetMatrixWithoutScale(out const Matrix M, float Tolerance);// 0x319758ebd041 0x7e61acf2e0
	Matrix Matrix_GetInverse(out const Matrix M);// 0x319658ebd041 0x7e61acf3c0
	bool Matrix_GetFrustumTopPlane(out const Matrix M, out Plane OutPlane);// 0x319558ebd041 0x7e61acf4a0
	bool Matrix_GetFrustumRightPlane(out const Matrix M, out Plane OutPlane);// 0x319458ebd041 0x7e61acf580
	bool Matrix_GetFrustumNearPlane(out const Matrix M, out Plane OutPlane);// 0x319358ebd041 0x7e61acf660
	bool Matrix_GetFrustumLeftPlane(out const Matrix M, out Plane OutPlane);// 0x319258ebd041 0x7e61acf740
	bool Matrix_GetFrustumFarPlane(out const Matrix M, out Plane OutPlane);// 0x319158ebd041 0x7e61acf820
	bool Matrix_GetFrustumBottomPlane(out const Matrix M, out Plane OutPlane);// 0x319058ebd041 0x7e61acf900
	float Matrix_GetDeterminant(out const Matrix M);// 0x318f58ebd041 0x7e61acf9e0
	Vector Matrix_GetColumn(out const Matrix M, byte Column);// 0x318e58ebd041 0x7e61acfac0
	bool Matrix_ContainsNaN(out const Matrix M);// 0x318d58ebd041 0x7e61acfba0
	Matrix Matrix_ConcatenateTranslation(out const Matrix M, Vector Translation);// 0x318c58ebd041 0x7e61acfc80
	Matrix Matrix_ApplyScale(out const Matrix M, float Scale);// 0x318b58ebd041 0x7e61acfd60
	double MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB);// 0x318a58ebd041 0x7e61acfe40
	double MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB);// 0xffffff8158ebd000 0x7e61acff20
	Vector_NetQuantizeNormal MakeVector_NetQuantizeNormal(double X, double Y, double Z);// 0x318858ebd041 0x7e61accaa0
	Vector_NetQuantize100 MakeVector_NetQuantize100(double X, double Y, double Z);// 0x318758ebd041 0x7e61accb80
	Vector_NetQuantize10 MakeVector_NetQuantize10(double X, double Y, double Z);// 0x318658ebd041 0x7e61accc60
	Vector_NetQuantize MakeVector_NetQuantize(double X, double Y, double Z);// 0x318558ebd041 0x7e61accd40
	Vector4 MakeVector4(double X, double Y, double Z, double W);// 0x318458ebd041 0x7e61acce20
	Vector2D MakeVector2D(double X, double Y);// 0x318358ebd041 0x7e61accf00
	Vector MakeVector(double X, double Y, double Z);// 0x318258ebd041 0x7e61accfe0
	Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0x318158ebd041 0x7e61acd0c0
	Timespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);// 0x318058ebd041 0x7e61acd1a0
	Timespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);// 0x317f58ebd041 0x7e61acd280
	Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0x317e58ebd041 0x7e61acd360
	Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0x317d58ebd041 0x7e61acd440
	Rotator MakeRotFromZ(out const Vector Z);// 0x317c58ebd041 0x7e61acd520
	Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0x317b58ebd041 0x7e61acd600
	Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0x317a58ebd041 0x7e61acd6e0
	Rotator MakeRotFromY(out const Vector Y);// 0x317958ebd041 0x7e61acd7c0
	Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0x317858ebd041 0x7e61acd8a0
	Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0x317758ebd041 0x7e61acd980
	Rotator MakeRotFromX(out const Vector X);// 0x317658ebd041 0x7e61acda60
	Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0x317558ebd041 0x7e61acdb40
	Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0x317458ebd041 0x7e61acdc20
	Transform MakeRelativeTransform(out const Transform A, out const Transform RelativeTo);// 0x317358ebd041 0x7e61acdd00
	RandomStream MakeRandomStream(int InitialSeed);// 0x317258ebd041 0x7e61acdde0
	Quat MakeQuat(float X, float Y, float Z, float W);// 0x317158ebd041 0x7e61acdec0
	QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame);// 0x317058ebd041 0x7e61acdfa0
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0x316f58ebd041 0x7e61ace080
	Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0x316e58ebd041 0x7e61ace160
	FrameRate MakeFrameRate(int Numerator, int Denominator);// 0x316d58ebd041 0x7e61ace240
	DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);// 0x316c58ebd041 0x7e61ace320
	LinearColor MakeColor(float R, float G, float B, float A);// 0x316b58ebd041 0x7e61ace400
	BoxSphereBounds MakeBoxSphereBounds(Vector Origin, Vector BoxExtent, float SphereRadius);// 0x316a58ebd041 0x7e61ace4e0
	Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0x316958ebd041 0x7e61ace5c0
	Box MakeBox(Vector Min, Vector Max);// 0x31a558ebd041 0x7e61ace6a0
	double Loge(double A);// 0x316758ebd041 0x7e61acadc0
	double Log(double A, double Base);// 0x316658ebd041 0x7e61acaea0
	bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0x316558ebd041 0x7e61acaf80
	bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0x316458ebd041 0x7e61acb060
	LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha);// 0x316358ebd041 0x7e61acb140
	LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha);// 0x316258ebd041 0x7e61acb220
	LinearColor LinearColor_Yellow();// 0x316158ebd041 0x7e61acb300
	LinearColor LinearColor_White();// 0x316058ebd041 0x7e61acb3e0
	LinearColor LinearColor_Transparent();// 0x315f58ebd041 0x7e61acb4c0
	Color LinearColor_ToRGBE(LinearColor InLinearColor);// 0x315e58ebd041 0x7e61acb5a0
	LinearColor LinearColor_ToNewOpacity(LinearColor InColor, float InOpacity);// 0x315d58ebd041 0x7e61acb680
	void LinearColor_SetTemperature(out LinearColor InOutColor, float InTemperature);// 0x315c58ebd041 0x7e61acb760
	void LinearColor_SetRGBA(out LinearColor InOutColor, float R, float G, float B, float A);// 0x315b58ebd041 0x7e61acb840
	void LinearColor_SetRandomHue(out LinearColor InOutColor);// 0x315a58ebd041 0x7e61acb920
	void LinearColor_SetFromSRGB(out LinearColor InOutColor, out const Color InSRGB);// 0x315958ebd041 0x7e61acba00
	void LinearColor_SetFromPow22(out LinearColor InOutColor, out const Color InColor);// 0x315858ebd041 0x7e61acbae0
	void LinearColor_SetFromHSV(out LinearColor InOutColor, float H, float S, float V, float A);// 0x315758ebd041 0x7e61acbbc0
	void LinearColor_Set(out LinearColor InOutColor, LinearColor InColor);// 0x315658ebd041 0x7e61acbca0
	LinearColor LinearColor_Red();// 0x315558ebd041 0x7e61acbd80
	Color LinearColor_QuantizeRound(LinearColor InColor);// 0x315458ebd041 0x7e61acbe60
	Color LinearColor_Quantize(LinearColor InColor);// 0x315358ebd041 0x7e61acbf40
	bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance);// 0x315258ebd041 0x7e61acc020
	LinearColor LinearColor_Green();// 0x315158ebd041 0x7e61acc100
	LinearColor LinearColor_Gray();// 0x315058ebd041 0x7e61acc1e0
	float LinearColor_GetMin(LinearColor InColor);// 0x314f58ebd041 0x7e61acc2c0
	float LinearColor_GetMax(LinearColor InColor);// 0x314e58ebd041 0x7e61acc3a0
	float LinearColor_GetLuminance(LinearColor InColor);// 0x314d58ebd041 0x7e61acc480
	float LinearColor_Distance(LinearColor C1, LinearColor C2);// 0x314c58ebd041 0x7e61acc560
	LinearColor LinearColor_Desaturated(LinearColor InColor, float InDesaturation);// 0x314b58ebd041 0x7e61acc640
	LinearColor LinearColor_Blue();// 0x314a58ebd041 0x7e61acc720
	LinearColor LinearColor_Black();// 0x314958ebd041 0x7e61acc800
	Vector LessLess_VectorRotator(Vector A, Rotator B);// 0x314858ebd041 0x7e61acc8e0
	bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0x318958ebd041 0x7e61acc9c0
	bool LessEqual_IntInt(int A, int B);// 0x314658ebd041 0x7e61ac90e0
	bool LessEqual_Int64Int64(int64 A, int64 B);// 0x314558ebd041 0x7e61ac91c0
	bool LessEqual_DoubleDouble(double A, double B);// 0x314458ebd041 0x7e61ac92a0
	bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x314358ebd041 0x7e61ac9380
	bool LessEqual_ByteByte(byte A, byte B);// 0x314258ebd041 0x7e61ac9460
	bool Less_TimespanTimespan(Timespan A, Timespan B);// 0x314158ebd041 0x7e61ac9540
	bool Less_IntInt(int A, int B);// 0x314058ebd041 0x7e61ac9620
	bool Less_Int64Int64(int64 A, int64 B);// 0x313f58ebd041 0x7e61ac9700
	bool Less_DoubleDouble(double A, double B);// 0x313e58ebd041 0x7e61ac97e0
	bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0x313d58ebd041 0x7e61ac98c0
	bool Less_ByteByte(byte A, byte B);// 0x313c58ebd041 0x7e61ac99a0
	double Lerp(double A, double B, double Alpha);// 0x313b58ebd041 0x7e61ac9a80
	bool IsZero2D(out const Vector2D A);// 0x313a58ebd041 0x7e61ac9b60
	bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0x313958ebd041 0x7e61ac9c40
	bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0x313858ebd041 0x7e61ac9d20
	bool IsNearlyZero2D(out const Vector2D A, float Tolerance);// 0x313758ebd041 0x7e61ac9e00
	bool IsMorning(DateTime A);// 0x313658ebd041 0x7e61ac9ee0
	bool IsLeapYear(int Year);// 0x313558ebd041 0x7e61ac9fc0
	bool IsAfternoon(DateTime A);// 0x313458ebd041 0x7e61aca0a0
	Transform InvertTransform(out const Transform T);// 0x313358ebd041 0x7e61aca180
	Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0x313258ebd041 0x7e61aca260
	Vector InverseTransformLocation(out const Transform T, Vector Location);// 0x313158ebd041 0x7e61aca340
	Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0x313058ebd041 0x7e61aca420
	IntPoint IntPoint_Zero();// 0x312f58ebd041 0x7e61aca500
	IntPoint IntPoint_Up();// 0x312e58ebd041 0x7e61aca5e0
	IntPoint IntPoint_Right();// 0x312d58ebd041 0x7e61aca6c0
	IntPoint IntPoint_One();// 0x312c58ebd041 0x7e61aca7a0
	IntPoint IntPoint_Left();// 0x312b58ebd041 0x7e61aca880
	IntPoint IntPoint_Down();// 0x312a58ebd041 0x7e61aca960
	bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0x312958ebd041 0x7e61acaa40
	bool InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax);// 0x312858ebd041 0x7e61acab20
	bool InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin, bool InclusiveMax);// 0x312758ebd041 0x7e61acac00
	double Hypotenuse(double Width, double Height);// 0x316858ebd041 0x7e61acace0
	LinearColor HSVToRGBLinear(LinearColor HSV);// 0x312558ebd041 0x7e61ac7400
	void HSVToRGB_Vector(LinearColor HSV, out LinearColor RGB);// 0x312458ebd041 0x7e61ac74e0
	LinearColor HSVToRGB(float H, float S, float V, float A);// 0x312358ebd041 0x7e61ac75c0
	double GridSnap_Float(double Location, double GridSize);// 0x312258ebd041 0x7e61ac76a0
	Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0x312158ebd041 0x7e61ac7780
	bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0x312058ebd041 0x7e61ac7860
	bool GreaterEqual_IntInt(int A, int B);// 0x311f58ebd041 0x7e61ac7940
	bool GreaterEqual_Int64Int64(int64 A, int64 B);// 0x311e58ebd041 0x7e61ac7a20
	bool GreaterEqual_DoubleDouble(double A, double B);// 0x311d58ebd041 0x7e61ac7b00
	bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x311c58ebd041 0x7e61ac7be0
	bool GreaterEqual_ByteByte(byte A, byte B);// 0x311b58ebd041 0x7e61ac7cc0
	bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0x311a58ebd041 0x7e61ac7da0
	bool Greater_IntInt(int A, int B);// 0x311958ebd041 0x7e61ac7e80
	bool Greater_Int64Int64(int64 A, int64 B);// 0x311858ebd041 0x7e61ac7f60
	bool Greater_DoubleDouble(double A, double B);// 0x311758ebd041 0x7e61ac8040
	bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0x311658ebd041 0x7e61ac8120
	bool Greater_ByteByte(byte A, byte B);// 0x311558ebd041 0x7e61ac8200
	int GetYear(DateTime A);// 0x311458ebd041 0x7e61ac82e0
	void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0x311358ebd041 0x7e61ac83c0
	Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0x311258ebd041 0x7e61ac84a0
	Vector GetUpVector(Rotator InRot);// 0x311158ebd041 0x7e61ac8580
	float GetTotalSeconds(Timespan A);// 0x311058ebd041 0x7e61ac8660
	float GetTotalMinutes(Timespan A);// 0x310f58ebd041 0x7e61ac8740
	float GetTotalMilliseconds(Timespan A);// 0x310e58ebd041 0x7e61ac8820
	float GetTotalHours(Timespan A);// 0x310d58ebd041 0x7e61ac8900
	float GetTotalDays(Timespan A);// 0x310c58ebd041 0x7e61ac89e0
	Timespan GetTimeOfDay(DateTime A);// 0x310b58ebd041 0x7e61ac8ac0
	double GetTAU();// 0x310a58ebd041 0x7e61ac8ba0
	void GetSlopeDegreeAngles(out const Vector MyRightYAxis, out const Vector FloorNormal, out const Vector UpVector, out float OutSlopePitchDegreeAngle, out float OutSlopeRollDegreeAngle);// 0x310958ebd041 0x7e61ac8c80
	int GetSeconds(Timespan A);// 0x310858ebd041 0x7e61ac8d60
	int GetSecond(DateTime A);// 0x310758ebd041 0x7e61ac8e40
	Vector2D GetRotated2D(Vector2D A, float AngleDeg);// 0x310658ebd041 0x7e61ac8f20
	Vector GetRightVector(Rotator InRot);// 0x314758ebd041 0x7e61ac9000
	Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0x310458ebd041 0x7e61ac5720
	float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x310358ebd041 0x7e61ac5800
	float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x310258ebd041 0x7e61ac58e0
	double GetPI();// 0x310158ebd041 0x7e61ac59c0
	int GetMonth(DateTime A);// 0x310058ebd041 0x7e61ac5aa0
	int GetMinutes(Timespan A);// 0x30ff58ebd041 0x7e61ac5b80
	int GetMinute(DateTime A);// 0x30fe58ebd041 0x7e61ac5c60
	double GetMinElement(Vector A);// 0x30fd58ebd041 0x7e61ac5d40
	double GetMin2D(Vector2D A);// 0x30fc58ebd041 0x7e61ac5e20
	int GetMilliseconds(Timespan A);// 0x30fb58ebd041 0x7e61ac5f00
	int GetMillisecond(DateTime A);// 0x30fa58ebd041 0x7e61ac5fe0
	double GetMaxElement(Vector A);// 0x30f958ebd041 0x7e61ac60c0
	double GetMax2D(Vector2D A);// 0x30f858ebd041 0x7e61ac61a0
	int GetHours(Timespan A);// 0x30f758ebd041 0x7e61ac6280
	int GetHour12(DateTime A);// 0x30f658ebd041 0x7e61ac6360
	int GetHour(DateTime A);// 0x30f558ebd041 0x7e61ac6440
	Vector GetForwardVector(Rotator InRot);// 0x30f458ebd041 0x7e61ac6520
	Timespan GetDuration(Timespan A);// 0x30f358ebd041 0x7e61ac6600
	Vector GetDirectionUnitVector(Vector From, Vector To);// 0x30f258ebd041 0x7e61ac66e0
	int GetDays(Timespan A);// 0x30f158ebd041 0x7e61ac67c0
	int GetDayOfYear(DateTime A);// 0x30f058ebd041 0x7e61ac68a0
	int GetDay(DateTime A);// 0x30ef58ebd041 0x7e61ac6980
	DateTime GetDate(DateTime A);// 0x30ee58ebd041 0x7e61ac6a60
	void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0x30ed58ebd041 0x7e61ac6b40
	void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0x30ec58ebd041 0x7e61ac6c20
	double GetAbsMax2D(Vector2D A);// 0x30eb58ebd041 0x7e61ac6d00
	Vector2D GetAbs2D(Vector2D A);// 0x30ea58ebd041 0x7e61ac6de0
	double FWrap(double Value, double Min, double Max);// 0x30e958ebd041 0x7e61ac6ec0
	IntVector FTruncVector(out const Vector InVector);// 0x30e858ebd041 0x7e61ac6fa0
	int64 FTrunc64(double A);// 0x30e758ebd041 0x7e61ac7080
	int FTrunc(double A);// 0x30e658ebd041 0x7e61ac7160
	Timespan FromSeconds(float Seconds);// 0x30e558ebd041 0x7e61ac7240
	Timespan FromMinutes(float Minutes);// 0x312658ebd041 0x7e61ac7320
	Timespan FromMilliseconds(float Milliseconds);// 0x30e358ebd041 0x7e61ac3a40
	Timespan FromHours(float Hours);// 0x30e258ebd041 0x7e61ac3b20
	Timespan FromDays(float Days);// 0x30e158ebd041 0x7e61ac3c00
	double Fraction(double A);// 0x30e058ebd041 0x7e61ac3ce0
	int64 FMod64(double Dividend, double Divisor, out double Remainder);// 0x30df58ebd041 0x7e61ac3dc0
	int FMod(double Dividend, double Divisor, out double Remainder);// 0x30de58ebd041 0x7e61ac3ea0
	double FMin(double A, double B);// 0x30dd58ebd041 0x7e61ac3f80
	double FMax(double A, double B);// 0x30dc58ebd041 0x7e61ac4060
	float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget);// 0x30db58ebd041 0x7e61ac4140
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0x30da58ebd041 0x7e61ac4220
	double FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed);// 0x30d958ebd041 0x7e61ac4300
	double FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed);// 0x30d858ebd041 0x7e61ac43e0
	double FInterpEaseInOut(double A, double B, double Alpha, double Exponent);// 0x30d758ebd041 0x7e61ac44c0
	Rotator FindRelativeLookAtRotation(out const Transform StartTransform, out const Vector TargetLocation);// 0x30d658ebd041 0x7e61ac45a0
	void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0x30d558ebd041 0x7e61ac4680
	Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0x30d458ebd041 0x7e61ac4760
	Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x30d358ebd041 0x7e61ac4840
	Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x30d258ebd041 0x7e61ac4920
	int64 FFloor64(double A);// 0x30d158ebd041 0x7e61ac4a00
	int FFloor(double A);// 0x30d058ebd041 0x7e61ac4ae0
	double FClamp(double Value, double Min, double Max);// 0x30cf58ebd041 0x7e61ac4bc0
	int64 FCeil64(double A);// 0x30ce58ebd041 0x7e61ac4ca0
	int FCeil(double A);// 0x30cd58ebd041 0x7e61ac4d80
	double Exp(double A);// 0x30cc58ebd041 0x7e61ac4e60
	bool EqualExactly_VectorVector(Vector A, Vector B);// 0x30cb58ebd041 0x7e61ac4f40
	bool EqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x30ca58ebd041 0x7e61ac5020
	bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x30c958ebd041 0x7e61ac5100
	bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x30c858ebd041 0x7e61ac51e0
	bool EqualEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x30c758ebd041 0x7e61ac52c0
	bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x30c658ebd041 0x7e61ac53a0
	bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0x30c558ebd041 0x7e61ac5480
	bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0x30c458ebd041 0x7e61ac5560
	bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x310558ebd041 0x7e61ac5640
	bool EqualEqual_QuatQuat(out const Quat A, out const Quat B, float Tolerance);// 0x30c258ebd041 0x7e61ac1d60
	bool EqualEqual_ObjectObject(Object* A, Object* B);// 0x30c158ebd041 0x7e61ac1e40
	bool EqualEqual_NameName(FName A, FName B);// 0x30c058ebd041 0x7e61ac1f20
	bool EqualEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x30bf58ebd041 0x7e61ac2000
	bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x30be58ebd041 0x7e61ac20e0
	bool EqualEqual_IntInt(int A, int B);// 0x30bd58ebd041 0x7e61ac21c0
	bool EqualEqual_Int64Int64(int64 A, int64 B);// 0x30bc58ebd041 0x7e61ac22a0
	bool EqualEqual_DoubleDouble(double A, double B);// 0x30bb58ebd041 0x7e61ac2380
	bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x30ba58ebd041 0x7e61ac2460
	bool EqualEqual_ClassClass(class Object A, class Object B);// 0x30b958ebd041 0x7e61ac2540
	bool EqualEqual_ByteByte(byte A, byte B);// 0x30b858ebd041 0x7e61ac2620
	bool EqualEqual_BoolBool(bool A, bool B);// 0x30b758ebd041 0x7e61ac2700
	bool Equal_IntPointIntPoint(IntPoint A, IntPoint B);// 0x30b658ebd041 0x7e61ac27e0
	double Ease(double A, double B, double Alpha, byte EasingFunc, double BlendExp, int Steps);// 0x30b558ebd041 0x7e61ac28c0
	Vector DynamicWeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x30b458ebd041 0x7e61ac29a0
	Rotator DynamicWeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x30b358ebd041 0x7e61ac2a80
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x30b258ebd041 0x7e61ac2b60
	double DotProduct2D(Vector2D A, Vector2D B);// 0x30b158ebd041 0x7e61ac2c40
	double Dot_VectorVector(Vector A, Vector B);// 0x30b058ebd041 0x7e61ac2d20
	Vector Divide_VectorVector(Vector A, Vector B);// 0x30af58ebd041 0x7e61ac2e00
	Vector Divide_VectorInt(Vector A, int B);// 0x30ae58ebd041 0x7e61ac2ee0
	Vector Divide_VectorFloat(Vector A, double B);// 0x30ad58ebd041 0x7e61ac2fc0
	Vector4 Divide_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x30ac58ebd041 0x7e61ac30a0
	Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0x30ab58ebd041 0x7e61ac3180
	Vector2D Divide_Vector2DFloat(Vector2D A, double B);// 0x30aa58ebd041 0x7e61ac3260
	Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0x30a958ebd041 0x7e61ac3340
	LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x30a858ebd041 0x7e61ac3420
	IntPoint Divide_IntPointIntPoint(IntPoint A, IntPoint B);// 0x30a758ebd041 0x7e61ac3500
	IntPoint Divide_IntPointInt(IntPoint A, int B);// 0x30a658ebd041 0x7e61ac35e0
	int Divide_IntInt(int A, int B);// 0x30a558ebd041 0x7e61ac36c0
	int64 Divide_Int64Int64(int64 A, int64 B);// 0x30a458ebd041 0x7e61ac37a0
	double Divide_DoubleDouble(double A, double B);// 0x30a358ebd041 0x7e61ac3880
	byte Divide_ByteByte(byte A, byte B);// 0x30e458ebd041 0x7e61ac3960
	double DistanceSquared2D(Vector2D v1, Vector2D v2);// 0x30a158ebd041 0x7e61ac0080
	double Distance2D(Vector2D v1, Vector2D v2);// 0x30a058ebd041 0x7e61ac0160
	double DegTan(double A);// 0x309f58ebd041 0x7e61ac0240
	double DegSin(double A);// 0x309e58ebd041 0x7e61ac0320
	double DegreesToRadians(double A);// 0x309d58ebd041 0x7e61ac0400
	double DegCos(double A);// 0x309c58ebd041 0x7e61ac04e0
	double DegAtan2(double Y, double X);// 0x309b58ebd041 0x7e61ac05c0
	double DegAtan(double A);// 0x309a58ebd041 0x7e61ac06a0
	double DegAsin(double A);// 0x309958ebd041 0x7e61ac0780
	double DegAcos(double A);// 0x309858ebd041 0x7e61ac0860
	int DaysInYear(int Year);// 0x309758ebd041 0x7e61ac0940
	int DaysInMonth(int Year, int Month);// 0x309658ebd041 0x7e61ac0a20
	DateTime DateTimeMinValue();// 0x309558ebd041 0x7e61ac0b00
	DateTime DateTimeMaxValue();// 0x309458ebd041 0x7e61ac0be0
	bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0x309358ebd041 0x7e61ac0cc0
	bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0x309258ebd041 0x7e61ac0da0
	double CrossProduct2D(Vector2D A, Vector2D B);// 0x309158ebd041 0x7e61ac0e80
	Vector Cross_VectorVector(Vector A, Vector B);// 0x309058ebd041 0x7e61ac0f60
	Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0x308f58ebd041 0x7e61ac1040
	double Cos(double A);// 0x308e58ebd041 0x7e61ac1120
	Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0x308d58ebd041 0x7e61ac1200
	Vector2D Conv_VectorToVector2D(Vector InVector);// 0x308c58ebd041 0x7e61ac12e0
	Transform Conv_VectorToTransform(Vector InLocation);// 0x308b58ebd041 0x7e61ac13c0
	Rotator Conv_VectorToRotator(Vector InVec);// 0x308a58ebd041 0x7e61ac14a0
	Quat Conv_VectorToQuaternion(Vector InVec);// 0x308958ebd041 0x7e61ac1580
	LinearColor Conv_VectorToLinearColor(Vector InVec);// 0x308858ebd041 0x7e61ac1660
	Vector Conv_Vector4ToVector(out const Vector4 InVector4);// 0x308758ebd041 0x7e61ac1740
	Rotator Conv_Vector4ToRotator(out const Vector4 InVec);// 0x308658ebd041 0x7e61ac1820
	Quat Conv_Vector4ToQuaternion(out const Vector4 InVec);// 0x308558ebd041 0x7e61ac1900
	Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0x308458ebd041 0x7e61ac19e0
	IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D);// 0x308358ebd041 0x7e61ac1ac0
	Matrix Conv_TransformToMatrix(out const Transform Transform);// 0x308258ebd041 0x7e61ac1ba0
	Vector Conv_RotatorToVector(Rotator InRot);// 0x30c358ebd041 0x7e61ac1c80
	Transform Conv_RotatorToTransform(out const Rotator InRotator);// 0x308058ebd041 0x7e61a8e780
	Quat Conv_RotatorToQuaternion(Rotator InRot);// 0x307f58ebd041 0x7e61a8e860
	Transform Conv_MatrixToTransform(out const Matrix InMatrix);// 0x307e58ebd041 0x7e61a8e940
	Rotator Conv_MatrixToRotator(out const Matrix InMatrix);// 0x307d58ebd041 0x7e61a8ea20
	Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0x307c58ebd041 0x7e61a8eb00
	Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB);// 0x307b58ebd041 0x7e61a8ebe0
	Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0x307a58ebd041 0x7e61a8ecc0
	Vector Conv_IntToVector(int inInt);// 0x307958ebd041 0x7e61a8eda0
	IntVector Conv_IntToIntVector(int inInt);// 0x307858ebd041 0x7e61a8ee80
	int64 Conv_IntToInt64(int inInt);// 0x307758ebd041 0x7e61a8ef60
	float Conv_IntToFloat(int inInt);// 0x307658ebd041 0x7e61a8f040
	double Conv_IntToDouble(int inInt);// 0x307558ebd041 0x7e61a8f120
	byte Conv_IntToByte(int inInt);// 0x307458ebd041 0x7e61a8f200
	bool Conv_IntToBool(int inInt);// 0x307358ebd041 0x7e61a8f2e0
	Vector2D Conv_IntPointToVector2D(IntPoint InIntPoint);// 0x307258ebd041 0x7e61a8f3c0
	int Conv_Int64ToInt(int64 inInt);// 0x307158ebd041 0x7e61a8f4a0
	double Conv_Int64ToDouble(int64 inInt);// 0x307058ebd041 0x7e61a8f580
	byte Conv_Int64ToByte(int64 inInt);// 0x306f58ebd041 0x7e61a8f660
	Vector Conv_FloatToVector(float InFloat);// 0x306e58ebd041 0x7e61a8f740
	LinearColor Conv_FloatToLinearColor(float InFloat);// 0x306d58ebd041 0x7e61a8f820
	double Conv_FloatToDouble(float InFloat);// 0x306c58ebd041 0x7e61a8f900
	Vector Conv_DoubleToVector(double InDouble);// 0x306b58ebd041 0x7e61a8f9e0
	LinearColor Conv_DoubleToLinearColor(double InDouble);// 0x306a58ebd041 0x7e61a8fac0
	int64 Conv_DoubleToInt64(double InDouble);// 0x306958ebd041 0x7e61a8fba0
	float Conv_DoubleToFloat(double InDouble);// 0x306858ebd041 0x7e61a8fc80
	LinearColor Conv_ColorToLinearColor(Color InColor);// 0x306758ebd041 0x7e61a8fd60
	int64 Conv_ByteToInt64(byte InByte);// 0x306658ebd041 0x7e61a8fe40
	int Conv_ByteToInt(byte InByte);// 0xffffff8158ebd000 0x7e61a8ff20
	float Conv_ByteToFloat(byte InByte);// 0x306458ebd041 0x7e61a8caa0
	double Conv_ByteToDouble(byte InByte);// 0x306358ebd041 0x7e61a8cb80
	int Conv_BoolToInt(bool InBool);// 0x306258ebd041 0x7e61a8cc60
	float Conv_BoolToFloat(bool InBool);// 0x306158ebd041 0x7e61a8cd40
	byte Conv_BoolToByte(bool InBool);// 0x306058ebd041 0x7e61a8ce20
	Transform ComposeTransforms(out const Transform A, out const Transform B);// 0x305f58ebd041 0x7e61a8cf00
	Rotator ComposeRotators(Rotator A, Rotator B);// 0x305e58ebd041 0x7e61a8cfe0
	bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0x305d58ebd041 0x7e61a8d0c0
	Vector ClampVectorSize(Vector A, double Min, double Max);// 0x305c58ebd041 0x7e61a8d1a0
	int64 ClampInt64(int64 Value, int64 Min, int64 Max);// 0x305b58ebd041 0x7e61a8d280
	float ClampAxis(float Angle);// 0x305a58ebd041 0x7e61a8d360
	Vector2D ClampAxes2D(Vector2D A, double MinAxisVal, double MaxAxisVal);// 0x305958ebd041 0x7e61a8d440
	double ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees);// 0x305858ebd041 0x7e61a8d520
	int Clamp(int Value, int Min, int Max);// 0x305758ebd041 0x7e61a8d600
	LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0x305658ebd041 0x7e61a8d6e0
	void BreakVector_NetQuantizeNormal(Vector_NetQuantizeNormal InVec, out double X, out double Y, out double Z);// 0x305558ebd041 0x7e61a8d7c0
	void BreakVector_NetQuantize100(Vector_NetQuantize100 InVec, out double X, out double Y, out double Z);// 0x305458ebd041 0x7e61a8d8a0
	void BreakVector_NetQuantize10(Vector_NetQuantize10 InVec, out double X, out double Y, out double Z);// 0x305358ebd041 0x7e61a8d980
	void BreakVector_NetQuantize(Vector_NetQuantize InVec, out double X, out double Y, out double Z);// 0x305258ebd041 0x7e61a8da60
	void BreakVector4(out const Vector4 InVec, out double X, out double Y, out double Z, out double W);// 0x305158ebd041 0x7e61a8db40
	void BreakVector3f(Vector3f InVec, out float X, out float Y, out float Z);// 0x305058ebd041 0x7e61a8dc20
	void BreakVector2D(Vector2D InVec, out double X, out double Y);// 0x304f58ebd041 0x7e61a8dd00
	void BreakVector(Vector InVec, out double X, out double Y, out double Z);// 0x304e58ebd041 0x7e61a8dde0
	void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0x304d58ebd041 0x7e61a8dec0
	void BreakTimespan2(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int FractionNano);// 0x304c58ebd041 0x7e61a8dfa0
	void BreakTimespan(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int Milliseconds);// 0x304b58ebd041 0x7e61a8e080
	void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0x304a58ebd041 0x7e61a8e160
	void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0x304958ebd041 0x7e61a8e240
	void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0x304858ebd041 0x7e61a8e320
	void BreakQuat(out const Quat InQuat, out float X, out float Y, out float Z, out float W);// 0x304758ebd041 0x7e61a8e400
	void BreakQualifiedFrameTime(out const QualifiedFrameTime InFrameTime, out FrameNumber Frame, out FrameRate FrameRate, out float SubFrame);// 0x304658ebd041 0x7e61a8e4e0
	void BreakFrameRate(out const FrameRate InFrameRate, out int Numerator, out int Denominator);// 0x304558ebd041 0x7e61a8e5c0
	void BreakDateTime(DateTime InDateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int Second, out int Millisecond);// 0x308158ebd041 0x7e61a8e6a0
	void BreakColor(LinearColor InColor, out float R, out float G, out float B, out float A);// 0x304358ebd041 0x7e61a8adc0
	void BreakBoxSphereBounds(out const BoxSphereBounds InBoxSphereBounds, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0x304258ebd041 0x7e61a8aea0
	bool BooleanXOR(bool A, bool B);// 0x304158ebd041 0x7e61a8af80
	bool BooleanOR(bool A, bool B);// 0x304058ebd041 0x7e61a8b060
	bool BooleanNOR(bool A, bool B);// 0x303f58ebd041 0x7e61a8b140
	bool BooleanNAND(bool A, bool B);// 0x303e58ebd041 0x7e61a8b220
	bool BooleanAND(bool A, bool B);// 0x303d58ebd041 0x7e61a8b300
	byte BMin(byte A, byte B);// 0x303c58ebd041 0x7e61a8b3e0
	byte BMax(byte A, byte B);// 0x303b58ebd041 0x7e61a8b4c0
	double Atan2(double Y, double X);// 0x303a58ebd041 0x7e61a8b5a0
	double Atan(double A);// 0x303958ebd041 0x7e61a8b680
	double Asin(double A);// 0x303858ebd041 0x7e61a8b760
	int And_IntInt(int A, int B);// 0x303758ebd041 0x7e61a8b840
	int64 And_Int64Int64(int64 A, int64 B);// 0x303658ebd041 0x7e61a8b920
	Vector Add_VectorVector(Vector A, Vector B);// 0x303558ebd041 0x7e61a8ba00
	Vector Add_VectorInt(Vector A, int B);// 0x303458ebd041 0x7e61a8bae0
	Vector Add_VectorFloat(Vector A, double B);// 0x303358ebd041 0x7e61a8bbc0
	Vector4 Add_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x303258ebd041 0x7e61a8bca0
	Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0x303158ebd041 0x7e61a8bd80
	Vector2D Add_Vector2DFloat(Vector2D A, double B);// 0x303058ebd041 0x7e61a8be60
	Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0x302f58ebd041 0x7e61a8bf40
	Quat Add_QuatQuat(out const Quat A, out const Quat B);// 0x302e58ebd041 0x7e61a8c020
	Matrix Add_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x302d58ebd041 0x7e61a8c100
	LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x302c58ebd041 0x7e61a8c1e0
	IntPoint Add_IntPointIntPoint(IntPoint A, IntPoint B);// 0x302b58ebd041 0x7e61a8c2c0
	IntPoint Add_IntPointInt(IntPoint A, int B);// 0x302a58ebd041 0x7e61a8c3a0
	int Add_IntInt(int A, int B);// 0x302958ebd041 0x7e61a8c480
	int64 Add_Int64Int64(int64 A, int64 B);// 0x302858ebd041 0x7e61a8c560
	double Add_DoubleDouble(double A, double B);// 0x302758ebd041 0x7e61a8c640
	DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0x302658ebd041 0x7e61a8c720
	DateTime Add_DateTimeDateTime(DateTime A, DateTime B);// 0x302558ebd041 0x7e61a8c800
	byte Add_ByteByte(byte A, byte B);// 0x302458ebd041 0x7e61a8c8e0
	double Acos(double A);// 0x306558ebd041 0x7e61a8c9c0
	int64 Abs_Int64(int64 A);// 0x302258ebd041 0x7e61a890e0
	int Abs_Int(int A);// 0x302158ebd041 0x7e61a891c0
	double Abs(double A);// 0x302058ebd041 0x7e61a892a0

--------------------------------
Class: VectorSpringState

--------------------------------
Class: Timespan

--------------------------------
Class: QuaternionSpringState

--------------------------------
Class: FloatSpringState

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x10] 0x7e8412ee00
	Vector2D Max;//[Offset: 0x10, Size: 0x10] 0x7e8412ec80
	byte bIsValid;//[Offset: 0x20, Size: 0x1] 0x7e8412ec00

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	void MarkBit(out int Data, int Index);// 0x32ed58ebd041 0x7e61b136c0
	bool HasUnmarkedBit(int Data, int NumBits);// 0x32ec58ebd041 0x7e61b137a0
	bool HasMarkedBit(int Data, int NumBits);// 0x32eb58ebd041 0x7e61b13880
	byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0x332c58ebd041 0x7e61b13960
	int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0x32e958ebd041 0x7e61b10080
	int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x32e858ebd041 0x7e61b10160
	int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x32e758ebd041 0x7e61b10240
	byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0x32e658ebd041 0x7e61b10320
	FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0x32e558ebd041 0x7e61b10400
	FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0x32e458ebd041 0x7e61b104e0
	void ClearBit(out int Data, int Index);// 0x32e358ebd041 0x7e61b105c0
	void ClearAllBits(out int Data);// 0x32e258ebd041 0x7e61b106a0
	bool BitIsMarked(int Data, int Index);// 0x32e158ebd041 0x7e61b10780

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	void SetCastInsetShadowForAllAttachments(PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);// 0x330758ebd041 0x7e61b12000
	Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0x330658ebd041 0x7e61b120e0
	void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0x330558ebd041 0x7e61b121c0
	Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x330458ebd041 0x7e61b122a0
	LinearColor[] ReadRenderTargetRawUVArea(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, Box2D Area, bool bNormalize);// 0x330358ebd041 0x7e61b12380
	LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize);// 0x330258ebd041 0x7e61b12460
	LinearColor[] ReadRenderTargetRawPixelArea(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int MinX, int MinY, int MaxX, int MaxY, bool bNormalize);// 0x330158ebd041 0x7e61b12540
	LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y, bool bNormalize);// 0x330058ebd041 0x7e61b12620
	bool ReadRenderTargetRaw(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out LinearColor[] OutLinearSamples, bool bNormalize);// 0x32ff58ebd041 0x7e61b12700
	Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x32fe58ebd041 0x7e61b127e0
	bool ReadRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Color[] OutSamples, bool bNormalize);// 0x32fd58ebd041 0x7e61b128c0
	SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0x32fc58ebd041 0x7e61b129a0
	Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0x32fb58ebd041 0x7e61b12a80
	Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0x32fa58ebd041 0x7e61b12b60
	void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0x32f958ebd041 0x7e61b12c40
	void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0x32f858ebd041 0x7e61b12d20
	void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0x32f758ebd041 0x7e61b12e00
	void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0x32f658ebd041 0x7e61b12ee0
	TextureRenderTargetVolume* CreateRenderTargetVolume(Object* WorldContextObject, int Width, int Height, int Depth, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x32f558ebd041 0x7e61b12fc0
	TextureRenderTarget2DArray* CreateRenderTarget2DArray(Object* WorldContextObject, int Width, int Height, int Slices, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x32f458ebd041 0x7e61b130a0
	TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x32f358ebd041 0x7e61b13180
	void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0x32f258ebd041 0x7e61b13260
	void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0x32f158ebd041 0x7e61b13340
	Matrix CalculateProjectionMatrix(out const MinimalViewInfo MinimalViewInfo);// 0x32f058ebd041 0x7e61b13420
	void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0x32ef58ebd041 0x7e61b13500
	void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0x32ee58ebd041 0x7e61b135e0

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8] 0x7e61647400

--------------------------------
Class: TextureRenderTargetVolume.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x1f8, Size: 0x4] 0x7e61be6980
	int SizeY;//[Offset: 0x1fc, Size: 0x4] 0x7e61be6a00
	int SizeZ;//[Offset: 0x200, Size: 0x4] 0x7e61be6a80
	LinearColor ClearColor;//[Offset: 0x204, Size: 0x10] 0x7e61be6b00
	byte OverrideFormat;//[Offset: 0x214, Size: 0x1] 0x7e61be6b80
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1] 0x7e61be6c00
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1] 0x7e61be6c80

--------------------------------
Class: TextureRenderTarget2DArray.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x1f8, Size: 0x4] 0x7e61be6f80
	int SizeY;//[Offset: 0x1fc, Size: 0x4] 0x7e61be7000
	int Slices;//[Offset: 0x200, Size: 0x4] 0x7e61be7080
	LinearColor ClearColor;//[Offset: 0x204, Size: 0x10] 0x7e61be7100
	byte OverrideFormat;//[Offset: 0x214, Size: 0x1] 0x7e61be7180
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1] 0x7e61be7200
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1] 0x7e61be7280

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	FString TrimTrailing(FString SourceString);// 0x334c58ebd041 0x7e61b15720
	FString Trim(FString SourceString);// 0x334b58ebd041 0x7e61b15800
	FString ToUpper(FString SourceString);// 0x334a58ebd041 0x7e61b158e0
	FString ToLower(FString SourceString);// 0x334958ebd041 0x7e61b159c0
	FString TimeSecondsToString(float InSeconds);// 0x334858ebd041 0x7e61b15aa0
	bool StartsWith(FString SourceString, FString InPrefix, byte SearchCase);// 0x334758ebd041 0x7e61b15b80
	bool Split(FString SourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0x334658ebd041 0x7e61b15c60
	FString RightPad(FString SourceString, int ChCount);// 0x334558ebd041 0x7e61b15d40
	FString RightChop(FString SourceString, int Count);// 0x334458ebd041 0x7e61b15e20
	FString Right(FString SourceString, int Count);// 0x334358ebd041 0x7e61b15f00
	FString Reverse(FString SourceString);// 0x334258ebd041 0x7e61b15fe0
	int ReplaceInline(out FString SourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0x334158ebd041 0x7e61b160c0
	FString Replace(FString SourceString, FString From, FString To, byte SearchCase);// 0x334058ebd041 0x7e61b161a0
	FString[] ParseIntoArray(FString SourceString, FString Delimiter, const bool CullEmptyStrings);// 0x333f58ebd041 0x7e61b16280
	bool NotEqual_StrStr(FString A, FString B);// 0x333e58ebd041 0x7e61b16360
	bool NotEqual_StriStri(FString A, FString B);// 0x333d58ebd041 0x7e61b16440
	FString Mid(FString SourceString, int Start, int Count);// 0x333c58ebd041 0x7e61b16520
	bool MatchesWildcard(FString SourceString, FString Wildcard, byte SearchCase);// 0x333b58ebd041 0x7e61b16600
	int Len(FString S);// 0x333a58ebd041 0x7e61b166e0
	FString LeftPad(FString SourceString, int ChCount);// 0x333958ebd041 0x7e61b167c0
	FString LeftChop(FString SourceString, int Count);// 0x333858ebd041 0x7e61b168a0
	FString Left(FString SourceString, int Count);// 0x333758ebd041 0x7e61b16980
	FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0x333658ebd041 0x7e61b16a60
	bool IsNumeric(FString SourceString);// 0x333558ebd041 0x7e61b16b40
	bool IsEmpty(FString InString);// 0x333458ebd041 0x7e61b16c20
	FString GetSubstring(FString SourceString, int StartIndex, int Length);// 0x333358ebd041 0x7e61b16d00
	int GetCharacterAsNumber(FString SourceString, int Index);// 0x333258ebd041 0x7e61b16de0
	FString[] GetCharacterArrayFromString(FString SourceString);// 0x333158ebd041 0x7e61b16ec0
	int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0x333058ebd041 0x7e61b16fa0
	bool EqualEqual_StrStr(FString A, FString B);// 0x332f58ebd041 0x7e61b17080
	bool EqualEqual_StriStri(FString A, FString B);// 0x332e58ebd041 0x7e61b17160
	bool EndsWith(FString SourceString, FString InSuffix, byte SearchCase);// 0x332d58ebd041 0x7e61b17240
	int CullArray(FString SourceString, out FString[] inArray);// 0x336e58ebd041 0x7e61b17320
	FString Conv_VectorToString(Vector InVec);// 0x332b58ebd041 0x7e61b13a40
	FString Conv_Vector3fToString(Vector3f InVec);// 0x332a58ebd041 0x7e61b13b20
	FString Conv_Vector2dToString(Vector2D InVec);// 0x332958ebd041 0x7e61b13c00
	FString Conv_TransformToString(out const Transform InTrans);// 0x332858ebd041 0x7e61b13ce0
	void Conv_StringToVector3f(FString InString, out Vector3f OutConvertedVector, out bool OutIsValid);// 0x332758ebd041 0x7e61b13dc0
	void Conv_StringToVector2D(FString InString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0x332658ebd041 0x7e61b13ea0
	void Conv_StringToVector(FString InString, out Vector OutConvertedVector, out bool OutIsValid);// 0x332558ebd041 0x7e61b13f80
	void Conv_StringToRotator(FString InString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0x332458ebd041 0x7e61b14060
	FName Conv_StringToName(FString InString);// 0x332358ebd041 0x7e61b14140
	int Conv_StringToInt(FString InString);// 0x332258ebd041 0x7e61b14220
	double Conv_StringToDouble(FString InString);// 0x332158ebd041 0x7e61b14300
	void Conv_StringToColor(FString InString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0x332058ebd041 0x7e61b143e0
	FString Conv_RotatorToString(Rotator InRot);// 0x331f58ebd041 0x7e61b144c0
	FString Conv_ObjectToString(Object* InObj);// 0x331e58ebd041 0x7e61b145a0
	FString Conv_NameToString(FName InName);// 0x331d58ebd041 0x7e61b14680
	FString Conv_MatrixToString(out const Matrix InMatrix);// 0x331c58ebd041 0x7e61b14760
	FString Conv_IntVectorToString(IntVector InIntVec);// 0x331b58ebd041 0x7e61b14840
	FString Conv_IntToString(int inInt);// 0x331a58ebd041 0x7e61b14920
	FString Conv_IntPointToString(IntPoint InIntPoint);// 0x331958ebd041 0x7e61b14a00
	FString Conv_Int64ToString(int64 inInt);// 0x331858ebd041 0x7e61b14ae0
	FString Conv_DoubleToString(double InDouble);// 0x331758ebd041 0x7e61b14bc0
	FString Conv_ColorToString(LinearColor InColor);// 0x331658ebd041 0x7e61b14ca0
	FString Conv_ByteToString(byte InByte);// 0x331558ebd041 0x7e61b14d80
	FString Conv_BoolToString(bool InBool);// 0x331458ebd041 0x7e61b14e60
	bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0x331358ebd041 0x7e61b14f40
	FString Concat_StrStr(FString A, FString B);// 0x331258ebd041 0x7e61b15020
	FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString Suffix);// 0x331158ebd041 0x7e61b15100
	FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString Suffix);// 0x331058ebd041 0x7e61b151e0
	FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString Suffix);// 0x330f58ebd041 0x7e61b152c0
	FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString Suffix);// 0x330e58ebd041 0x7e61b153a0
	FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);// 0x330d58ebd041 0x7e61b15480
	FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString Suffix);// 0x330c58ebd041 0x7e61b15560
	FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix);// 0x334d58ebd041 0x7e61b15640
	FString BuildString_Double(FString AppendTo, FString Prefix, double InDouble, FString Suffix);// 0x330a58ebd041 0x7e61b11d60
	FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString Suffix);// 0x330958ebd041 0x7e61b11e40
	FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);// 0x330858ebd041 0x7e61b11f20

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	bool IsRegisteredTableId(const FName TableId);// 0x335458ebd041 0x7e61b189e0
	bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0x335358ebd041 0x7e61b18ac0
	FString GetTableNamespace(const FName TableId);// 0x335258ebd041 0x7e61b18ba0
	FString GetTableEntrySourceString(const FName TableId, FString Key);// 0x335158ebd041 0x7e61b18c80
	FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0x335058ebd041 0x7e61b18d60
	FName[] GetRegisteredStringTables();// 0x334f58ebd041 0x7e61b18e40
	FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0x334e58ebd041 0x7e61b18f20
	FString[] GetKeysFromStringTable(const FName TableId);// 0x338f58ebd041 0x7e61b19000

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	void UnregisterForRemoteNotifications();// 0xc8558ebd041 0x7e84e1b3e0
	void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0xc8458ebd041 0x7e84e1b4c0
	void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0xc8358ebd041 0x7e84e1b5a0
	void TransactObject(Object* Object);// 0xc8258ebd041 0x7e84e1b680
	void StackTrace();// 0xc8158ebd041 0x7e84e1b760
	bool SphereTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8058ebd041 0x7e84e1b840
	bool SphereTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7f58ebd041 0x7e84e1b920
	bool SphereTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7e58ebd041 0x7e84e1ba00
	bool SphereTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7d58ebd041 0x7e84e1bae0
	bool SphereTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7c58ebd041 0x7e84e1bbc0
	bool SphereTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7b58ebd041 0x7e84e1bca0
	bool SphereOverlapComponents(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xc7a58ebd041 0x7e84e1bd80
	bool SphereOverlapActors(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xc7958ebd041 0x7e84e1be60
	void SnapshotObject(Object* Object);// 0xc7858ebd041 0x7e84e1bf40
	void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0xc7758ebd041 0x7e84e1c020
	void ShowPlatformSpecificAchievementsScreen(const PlayerController* SpecificPlayer);// 0xc7658ebd041 0x7e84e1c100
	void ShowInterstitialAd();// 0xc7558ebd041 0x7e84e1c1e0
	void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0xc7458ebd041 0x7e84e1c2c0
	void SetWindowTitle(out const FText Title);// 0xc7358ebd041 0x7e84e1c3a0
	void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0xc7258ebd041 0x7e84e1c480
	void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0xc7158ebd041 0x7e84e1c560
	void SetVector3fPropertyByName(Object* Object, FName PropertyName, out const Vector3f Value);// 0xc6f58ebd041 0x7e84e1c640
	void SetUserActivity(out const UserActivity UserActivity);// 0xc6e58ebd041 0x7e84e1c720
	void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0xc6d58ebd041 0x7e84e1c800
	void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0xc6c58ebd041 0x7e84e1c8e0
	void SetSuppressViewportTransitionMessage(const Object* WorldContextObject, bool bState);// 0xd8e58ebd041 0x7e84e1c9c0
	void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0xc6958ebd041 0x7e84e190e0
	void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0xc6858ebd041 0x7e84e191c0
	void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0xc6758ebd041 0x7e84e192a0
	void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0xc6658ebd041 0x7e84e19380
	void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0xc6558ebd041 0x7e84e19460
	void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0xc6458ebd041 0x7e84e19540
	void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0xc6358ebd041 0x7e84e19620
	void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0xc6258ebd041 0x7e84e19700
	void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0xc6158ebd041 0x7e84e197e0
	void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0xc6058ebd041 0x7e84e198c0
	void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0xc5f58ebd041 0x7e84e199a0
	void SetGamepadsBlockDeviceFeedback(bool bBlock);// 0xc5e58ebd041 0x7e84e19a80
	void SetFieldPathPropertyByName(Object* Object, FName PropertyName, out const Value(FieldPathProperty) Value);// 0xc5d58ebd041 0x7e84e19b60
	void SetDoublePropertyByName(Object* Object, FName PropertyName, double Value);// 0xc5c58ebd041 0x7e84e19c40
	void SetColorPropertyByName(Object* Object, FName PropertyName, out const Color Value);// 0xc5a58ebd041 0x7e84e19d20
	void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0xc5958ebd041 0x7e84e19e00
	void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0xc5858ebd041 0x7e84e19ee0
	void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0xc5758ebd041 0x7e84e19fc0
	void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0xc5658ebd041 0x7e84e1a0a0
	void RetriggerableDelay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xc5558ebd041 0x7e84e1a180
	void ResetGamepadAssignmentToController(int ControllerId);// 0xc5458ebd041 0x7e84e1a260
	void ResetGamepadAssignments();// 0xc5358ebd041 0x7e84e1a340
	void RegisterForRemoteNotifications();// 0xc5158ebd041 0x7e84e1a420
	void QuitGame(const Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0xc5058ebd041 0x7e84e1a500
	void PrintWarning(FString InString);// 0xc4f58ebd041 0x7e84e1a5e0
	void PrintText(const Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration, const FName Key);// 0xc4e58ebd041 0x7e84e1a6c0
	void PrintString(const Object* WorldContextObject, FString InString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration, const FName Key);// 0xc4d58ebd041 0x7e84e1a7a0
	bool ParseParamValue(FString InString, FString InParam, out FString OutValue);// 0xc4c58ebd041 0x7e84e1a880
	bool ParseParam(FString InString, FString InParam);// 0xc4b58ebd041 0x7e84e1a960
	void ParseCommandLine(FString InCmdLine, out FString[] OutTokens, out FString[] OutSwitches, out <FString,FString> OutParams);// 0xc4a58ebd041 0x7e84e1aa40
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0xc3158ebd041 0x7e84e18580
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0xc3458ebd041 0x7e84e182e0
	bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xc4958ebd041 0x7e84e1ab20
	bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xc4858ebd041 0x7e84e1ac00
	bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xc8d58ebd041 0x7e84e1ace0
	bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xc4658ebd041 0x7e84e17400
	FString NormalizeFilename(FString InFilename);// 0xc4458ebd041 0x7e84e174e0
	void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0xc4358ebd041 0x7e84e175c0
	SoftObjectPath MakeSoftObjectPath(FString PathString);// 0xc4258ebd041 0x7e84e176a0
	SoftClassPath MakeSoftClassPath(FString PathString);// 0xc4158ebd041 0x7e84e17780
	FText MakeLiteralText(FText Value);// 0xc4058ebd041 0x7e84e17860
	FString MakeLiteralString(FString Value);// 0xc3f58ebd041 0x7e84e17940
	FName MakeLiteralName(FName Value);// 0xc3e58ebd041 0x7e84e17a20
	int64 MakeLiteralInt64(int64 Value);// 0xc3d58ebd041 0x7e84e17b00
	int MakeLiteralInt(int Value);// 0xc3c58ebd041 0x7e84e17be0
	float MakeLiteralFloat(float Value);// 0xc3b58ebd041 0x7e84e17cc0
	double MakeLiteralDouble(double Value);// 0xc3a58ebd041 0x7e84e17da0
	byte MakeLiteralByte(byte Value);// 0xc3958ebd041 0x7e84e17e80
	bool MakeLiteralBool(bool Value);// 0xc3858ebd041 0x7e84e17f60
	void LogString(FString InString, bool bPrintToLog);// 0xc3758ebd041 0x7e84e18040
	void LoadInterstitialAd(int AdIdIndex);// 0xc3658ebd041 0x7e84e18120
	class Object LoadClassAsset_Blocking(class Object AssetClass);// 0xc3558ebd041 0x7e84e18200
	void LoadAssetClass(const Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xc3358ebd041 0x7e84e183c0
	Object* LoadAsset_Blocking(Object* Asset);// 0xc3258ebd041 0x7e84e184a0
	void LoadAsset(const Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xc3058ebd041 0x7e84e18660
	bool LineTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2f58ebd041 0x7e84e18740
	bool LineTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2e58ebd041 0x7e84e18820
	bool LineTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2d58ebd041 0x7e84e18900
	bool LineTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2c58ebd041 0x7e84e189e0
	bool LineTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2b58ebd041 0x7e84e18ac0
	bool LineTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2a58ebd041 0x7e84e18ba0
	void LaunchURL(FString URL);// 0xc2958ebd041 0x7e84e18c80
	void K2_UnPauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc2858ebd041 0x7e84e18d60
	void K2_UnPauseTimerDelegate(delegate Delegate);// 0xc2758ebd041 0x7e84e18e40
	void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0xc2658ebd041 0x7e84e18f20
	bool K2_TimerExistsHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc6a58ebd041 0x7e84e19000
	bool K2_TimerExistsDelegate(delegate Delegate);// 0xc2458ebd041 0x7e84e15720
	bool K2_TimerExists(Object* Object, FString FunctionName);// 0xc2358ebd041 0x7e84e15800
	TimerHandle K2_SetTimerForNextTickDelegate(delegate Delegate);// 0xc2258ebd041 0x7e84e158e0
	TimerHandle K2_SetTimerForNextTick(Object* Object, FString FunctionName);// 0xc2158ebd041 0x7e84e159c0
	TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0xc2058ebd041 0x7e84e15aa0
	TimerHandle K2_SetTimer(Object* Object, FName FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0xc1f58ebd041 0x7e84e15b80
	void K2_PauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1e58ebd041 0x7e84e15c60
	void K2_PauseTimerDelegate(delegate Delegate);// 0xc1d58ebd041 0x7e84e15d40
	void K2_PauseTimer(Object* Object, FString FunctionName);// 0xc1c58ebd041 0x7e84e15e20
	bool K2_IsValidTimerHandle(TimerHandle Handle);// 0xc1b58ebd041 0x7e84e15f00
	bool K2_IsTimerPausedHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1a58ebd041 0x7e84e15fe0
	bool K2_IsTimerPausedDelegate(delegate Delegate);// 0xc1958ebd041 0x7e84e160c0
	bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0xc1858ebd041 0x7e84e161a0
	bool K2_IsTimerActiveHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1758ebd041 0x7e84e16280
	bool K2_IsTimerActiveDelegate(delegate Delegate);// 0xc1658ebd041 0x7e84e16360
	bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0xc1558ebd041 0x7e84e16440
	TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0xc1458ebd041 0x7e84e16520
	float K2_GetTimerRemainingTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1358ebd041 0x7e84e16600
	float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0xc1258ebd041 0x7e84e166e0
	float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0xc1158ebd041 0x7e84e167c0
	float K2_GetTimerElapsedTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1058ebd041 0x7e84e168a0
	float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0xc0f58ebd041 0x7e84e16980
	float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0xc0e58ebd041 0x7e84e16a60
	void K2_ClearTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc0d58ebd041 0x7e84e16b40
	void K2_ClearTimerDelegate(delegate Delegate);// 0xc0c58ebd041 0x7e84e16c20
	void K2_ClearTimer(Object* Object, FString FunctionName);// 0xc0a58ebd041 0x7e84e16d00
	void K2_ClearAndInvalidateTimerHandle(const Object* WorldContextObject, out TimerHandle Handle);// 0xc0958ebd041 0x7e84e16de0
	bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0xc0858ebd041 0x7e84e16ec0
	bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0xc0758ebd041 0x7e84e16fa0
	bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0xc0658ebd041 0x7e84e17080
	bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xc0558ebd041 0x7e84e17160
	bool IsValidClass(class Object Class);// 0xc0458ebd041 0x7e84e17240
	bool IsValid(const Object* Object);// 0xc4758ebd041 0x7e84e17320
	bool IsUnattended();// 0xc0258ebd041 0x7e84e13a40
	bool IsStandalone(const Object* WorldContextObject);// 0xc0158ebd041 0x7e84e13b20
	bool IsSplitScreen(const Object* WorldContextObject);// 0xc0058ebd041 0x7e84e13c00
	bool IsServer(const Object* WorldContextObject);// 0xbff58ebd041 0x7e84e13ce0
	bool IsScreensaverEnabled();// 0xbfe58ebd041 0x7e84e13dc0
	bool IsPackagedForDistribution();// 0xbfd58ebd041 0x7e84e13ea0
	bool IsLoggedIn(const PlayerController* SpecificPlayer);// 0xbfc58ebd041 0x7e84e13f80
	bool IsInterstitialAdRequested();// 0xbfb58ebd041 0x7e84e14060
	bool IsInterstitialAdAvailable();// 0xbfa58ebd041 0x7e84e14140
	bool IsDedicatedServer(const Object* WorldContextObject);// 0xbf958ebd041 0x7e84e14220
	bool IsControllerAssignedToGamepad(int ControllerId);// 0xbf858ebd041 0x7e84e14300
	void HideAdBanner();// 0xbf758ebd041 0x7e84e143e0
	bool HasMultipleLocalPlayers(const Object* WorldContextObject);// 0xbf658ebd041 0x7e84e144c0
	bool GetVolumeButtonsHandledBySystem();// 0xbf558ebd041 0x7e84e145a0
	FString GetUniqueDeviceId();// 0xbf458ebd041 0x7e84e14680
	FString GetSystemPath(const Object* Object);// 0xbf358ebd041 0x7e84e14760
	bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0xbf258ebd041 0x7e84e14840
	Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xbf158ebd041 0x7e84e14920
	class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xbf058ebd041 0x7e84e14a00
	int GetRenderingMaterialQualityLevel();// 0xbef58ebd041 0x7e84e14ae0
	int GetRenderingDetailMode();// 0xbee58ebd041 0x7e84e14bc0
	FString GetProjectSavedDirectory();// 0xbed58ebd041 0x7e84e14ca0
	FString GetProjectDirectory();// 0xbec58ebd041 0x7e84e14d80
	FString GetProjectContentDirectory();// 0xbeb58ebd041 0x7e84e14e60
	void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xbea58ebd041 0x7e84e14f40
	void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xbe958ebd041 0x7e84e15020
	PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0xbe858ebd041 0x7e84e15100
	PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0xbe758ebd041 0x7e84e151e0
	PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0xbe658ebd041 0x7e84e152c0
	PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0xbe558ebd041 0x7e84e153a0
	FString[] GetPreferredLanguages();// 0xbe458ebd041 0x7e84e15480
	FString GetPlatformUserName();// 0xbe358ebd041 0x7e84e15560
	FString GetPlatformUserDir();// 0xc2558ebd041 0x7e84e15640
	FString GetPathName(const Object* Object);// 0xbe158ebd041 0x7e84e11d60
	Object* GetOuterObject(const Object* Object);// 0xbe058ebd041 0x7e84e11e40
	FString GetObjectName(const Object* Object);// 0xbdf58ebd041 0x7e84e11f20
	Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xbde58ebd041 0x7e84e12000
	int GetMinYResolutionForUI();// 0xbdd58ebd041 0x7e84e120e0
	int GetMinYResolutionFor3DView();// 0xbdc58ebd041 0x7e84e121c0
	FString GetLocalCurrencySymbol();// 0xbdb58ebd041 0x7e84e122a0
	FString GetLocalCurrencyCode();// 0xbda58ebd041 0x7e84e12380
	float GetGameTimeInSeconds(const Object* WorldContextObject);// 0xbd958ebd041 0x7e84e12460
	FString GetGamepadControllerName(int ControllerId);// 0xbd858ebd041 0x7e84e12540
	Texture2D* GetGamepadButtonGlyph(FString ButtonKey, int ControllerIndex);// 0xbd758ebd041 0x7e84e12620
	FString GetGameName();// 0xbd658ebd041 0x7e84e12700
	FString GetGameBundleId();// 0xbd558ebd041 0x7e84e127e0
	int64 GetFrameCount();// 0xbd458ebd041 0x7e84e128c0
	FString GetEngineVersion();// 0xbd358ebd041 0x7e84e129a0
	FString GetDisplayName(const Object* Object);// 0xbd258ebd041 0x7e84e12a80
	FString GetDeviceId();// 0xbd158ebd041 0x7e84e12b60
	FString GetDefaultLocale();// 0xbd058ebd041 0x7e84e12c40
	FString GetDefaultLanguage();// 0xbcf58ebd041 0x7e84e12d20
	bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0xbce58ebd041 0x7e84e12e00
	bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0xbcd58ebd041 0x7e84e12ee0
	int GetConsoleVariableIntValue(FString VariableName);// 0xbcc58ebd041 0x7e84e12fc0
	float GetConsoleVariableFloatValue(FString VariableName);// 0xbcb58ebd041 0x7e84e130a0
	bool GetConsoleVariableBoolValue(FString VariableName);// 0xbca58ebd041 0x7e84e13180
	void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0xbc958ebd041 0x7e84e13260
	FString GetCommandLine();// 0xbc858ebd041 0x7e84e13340
	class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xbc758ebd041 0x7e84e13420
	FString GetClassDisplayName(class Object Class);// 0xbc658ebd041 0x7e84e13500
	FString GetBuildVersion();// 0xbc558ebd041 0x7e84e135e0
	FString GetBuildConfiguration();// 0xbc458ebd041 0x7e84e136c0
	int GetAdIDCount();// 0xbc358ebd041 0x7e84e137a0
	void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0xbc258ebd041 0x7e84e13880
	void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0xc0358ebd041 0x7e84e13960
	void ForceCloseAdBanner();// 0xbc058ebd041 0x7e84e10080
	void FlushPersistentDebugLines(const Object* WorldContextObject);// 0xbbf58ebd041 0x7e84e10160
	void FlushDebugStrings(const Object* WorldContextObject);// 0xbbe58ebd041 0x7e84e10240
	void ExecuteConsoleCommand(const Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0xbbd58ebd041 0x7e84e10320
	bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xbbc58ebd041 0x7e84e10400
	bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xbbb58ebd041 0x7e84e104e0
	bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xbba58ebd041 0x7e84e105c0
	bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xbb958ebd041 0x7e84e106a0
	int EndTransaction();// 0xbb858ebd041 0x7e84e10780
	void DrawDebugString(const Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0xbb758ebd041 0x7e84e10860
	void DrawDebugSphere(const Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xbb658ebd041 0x7e84e10940
	void DrawDebugPoint(const Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0xbb558ebd041 0x7e84e10a20
	void DrawDebugPlane(const Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0xbb458ebd041 0x7e84e10b00
	void DrawDebugLine(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0xbb358ebd041 0x7e84e10be0
	void DrawDebugFrustum(const Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0xbb258ebd041 0x7e84e10cc0
	void DrawDebugFloatHistoryTransform(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xbb158ebd041 0x7e84e10da0
	void DrawDebugFloatHistoryLocation(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xbb058ebd041 0x7e84e10e80
	void DrawDebugCylinder(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xbaf58ebd041 0x7e84e10f60
	void DrawDebugCoordinateSystem(const Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0xbae58ebd041 0x7e84e11040
	void DrawDebugConeInDegrees(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xbad58ebd041 0x7e84e11120
	void DrawDebugCone(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xbac58ebd041 0x7e84e11200
	void DrawDebugCircle(const Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0xbab58ebd041 0x7e84e112e0
	void DrawDebugCapsule(const Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0xbaa58ebd041 0x7e84e113c0
	void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0xba958ebd041 0x7e84e114a0
	void DrawDebugBox(const Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0xba858ebd041 0x7e84e11580
	void DrawDebugArrow(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0xba758ebd041 0x7e84e11660
	bool DoesImplementInterface(const Object* TestObject, class Interface Interface);// 0xba658ebd041 0x7e84e11740
	void DelayUntilNextTick(const Object* WorldContextObject, LatentActionInfo LatentInfo);// 0xba458ebd041 0x7e84e11820
	void Delay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xba358ebd041 0x7e84e11900
	void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0xba258ebd041 0x7e84e119e0
	FString ConvertToRelativePath(FString Filename);// 0xba158ebd041 0x7e84e11ac0
	FString ConvertToAbsolutePath(FString Filename);// 0xba058ebd041 0x7e84e11ba0
	Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0xbe258ebd041 0x7e84e11c80
	FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0xb9e58ebd041 0x7e8484e780
	Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0xb9d58ebd041 0x7e8484e860
	FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0xb9c58ebd041 0x7e8484e940
	class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0xb9b58ebd041 0x7e8484ea20
	class Object Conv_SoftClassPathToSoftClassRef(out const SoftClassPath SoftClassPath);// 0xb9a58ebd041 0x7e8484eb00
	FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0xb9958ebd041 0x7e8484ebe0
	FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0xb9858ebd041 0x7e8484ecc0
	Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0xb9758ebd041 0x7e8484eda0
	class Object Conv_ObjectToClass(Object* Object, class Object Class);// 0xb9658ebd041 0x7e8484ee80
	Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0xb9558ebd041 0x7e8484ef60
	class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0xb9458ebd041 0x7e8484f040
	void ControlScreensaver(bool bAllowScreenSaver);// 0xb9358ebd041 0x7e8484f120
	bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb9258ebd041 0x7e8484f200
	bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb9158ebd041 0x7e8484f2e0
	void CollectGarbage();// 0xb9058ebd041 0x7e8484f3c0
	bool CapsuleTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8f58ebd041 0x7e8484f4a0
	bool CapsuleTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8e58ebd041 0x7e8484f580
	bool CapsuleTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8d58ebd041 0x7e8484f660
	bool CapsuleTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8c58ebd041 0x7e8484f740
	bool CapsuleTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8b58ebd041 0x7e8484f820
	bool CapsuleTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8a58ebd041 0x7e8484f900
	bool CapsuleOverlapComponents(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb8958ebd041 0x7e8484f9e0
	bool CapsuleOverlapActors(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb8858ebd041 0x7e8484fac0
	bool CanLaunchURL(FString URL);// 0xb8758ebd041 0x7e8484fba0
	void CancelTransaction(const int Index);// 0xb8658ebd041 0x7e8484fc80
	void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0xb8558ebd041 0x7e8484fd60
	void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0xb8458ebd041 0x7e8484fe40
	bool BoxTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8158ebd000 0x7e8484ff20
	bool BoxTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8158ebd000 0x7e84843c00
	bool BoxTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8358ebd041 0x7e84843b20
	bool BoxTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8258ebd041 0x7e84843a40
	bool BoxTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb2d58ebd041 0x7e84847320
	bool BoxTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8058ebd041 0x7e84847240
	bool BoxOverlapComponents(const Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb7d58ebd041 0x7e84847160
	bool BoxOverlapActors(const Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb7c58ebd041 0x7e84847080
	int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0xb7a58ebd041 0x7e84846fa0
	DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0xb7958ebd041 0x7e84846ec0

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0x10] 0x7e84e3f000

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4] 0x7e84e3d500

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e84e3c980

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8] 0x7e84e35c80

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10] 0x7e84e2f1a0
	int MaxSamples;//[Offset: 0x10, Size: 0x4] 0x7e84de2100
	float MinValue;//[Offset: 0x14, Size: 0x4] 0x7e84de2080
	float MaxValue;//[Offset: 0x18, Size: 0x4] 0x7e84de2000
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7e84de1f80

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	FText TextTrimTrailing(out const FText InText);// 0x338258ebd041 0x7e61b19b60
	FText TextTrimPrecedingAndTrailing(out const FText InText);// 0x338158ebd041 0x7e61b19c40
	FText TextTrimPreceding(out const FText InText);// 0x338058ebd041 0x7e61b19d20
	FText TextToUpper(out const FText InText);// 0x337f58ebd041 0x7e61b19e00
	FText TextToLower(out const FText InText);// 0x337e58ebd041 0x7e61b19ee0
	bool TextIsTransient(out const FText InText);// 0x337d58ebd041 0x7e61b19fc0
	bool TextIsFromStringTable(out const FText Text);// 0x337c58ebd041 0x7e61b1a0a0
	bool TextIsEmpty(out const FText InText);// 0x337b58ebd041 0x7e61b1a180
	bool TextIsCultureInvariant(out const FText InText);// 0x337a58ebd041 0x7e61b1a260
	FText TextFromStringTable(const FName TableId, FString Key);// 0x337958ebd041 0x7e61b1a340
	bool StringTableIdAndKeyFromText(FText Text, out FName OutTableId, out FString OutKey);// 0x337858ebd041 0x7e61b1a420
	FText PolyglotDataToText(out const PolyglotTextData PolyglotData);// 0x337758ebd041 0x7e61b1a500
	bool NotEqual_TextText(out const FText A, out const FText B);// 0x337658ebd041 0x7e61b1a5e0
	bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x337558ebd041 0x7e61b1a6c0
	void IsPolyglotDataValid(out const PolyglotTextData PolyglotData, out bool IsValid, out FText ErrorMessage);// 0x337458ebd041 0x7e61b1a7a0
	FText GetEmptyText();// 0x337358ebd041 0x7e61b1a880
	FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0x337258ebd041 0x7e61b1a960
	bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0x337158ebd041 0x7e61b1aa40
	bool EqualEqual_TextText(out const FText A, out const FText B);// 0x337058ebd041 0x7e61b1ab20
	bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x336f58ebd041 0x7e61b1ac00
	FText Conv_VectorToText(Vector InVec);// 0x33b058ebd041 0x7e61b1ace0
	FText Conv_Vector2dToText(Vector2D InVec);// 0x336d58ebd041 0x7e61b17400
	FText Conv_TransformToText(out const Transform InTrans);// 0x336c58ebd041 0x7e61b174e0
	FString Conv_TextToString(out const FText InText);// 0x336b58ebd041 0x7e61b175c0
	FText Conv_StringToText(FString InString);// 0x336a58ebd041 0x7e61b176a0
	FText Conv_RotatorToText(Rotator InRot);// 0x336958ebd041 0x7e61b17780
	FText Conv_ObjectToText(Object* InObj);// 0x336858ebd041 0x7e61b17860
	FText Conv_NameToText(FName InName);// 0x336758ebd041 0x7e61b17940
	FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x336658ebd041 0x7e61b17a20
	FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x336558ebd041 0x7e61b17b00
	FText Conv_FloatToText(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x336458ebd041 0x7e61b17be0
	FText Conv_DoubleToText(double InDouble, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x336358ebd041 0x7e61b17cc0
	FText Conv_ColorToText(LinearColor InColor);// 0x336258ebd041 0x7e61b17da0
	FText Conv_ByteToText(byte Value);// 0x336158ebd041 0x7e61b17e80
	FText Conv_BoolToText(bool InBool);// 0x336058ebd041 0x7e61b17f60
	FText AsTimeZoneTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x335f58ebd041 0x7e61b18040
	FText AsTimeZoneDateTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x335e58ebd041 0x7e61b18120
	FText AsTimeZoneDate_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x335d58ebd041 0x7e61b18200
	FText AsTimespan_Timespan(out const Timespan InTimespan);// 0x335c58ebd041 0x7e61b182e0
	FText AsTime_DateTime(out const DateTime In);// 0x335b58ebd041 0x7e61b183c0
	FText AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x335a58ebd041 0x7e61b184a0
	FText AsDateTime_DateTime(out const DateTime In);// 0x335958ebd041 0x7e61b18580
	FText AsDate_DateTime(out const DateTime InDateTime);// 0x335858ebd041 0x7e61b18660
	FText AsCurrencyBase(int BaseValue, FString CurrencyCode);// 0x335758ebd041 0x7e61b18740
	FText AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x335658ebd041 0x7e61b18820
	FText AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x335558ebd041 0x7e61b18900

--------------------------------
Class: PolyglotTextData
	enum Category;//[Offset: 0x0, Size: 0x1] 0x7e841b70e0
	FString NativeCulture;//[Offset: 0x8, Size: 0x10] 0x7e841e2680
	FString Namespace;//[Offset: 0x18, Size: 0x10] 0x7e841e2600
	FString Key;//[Offset: 0x28, Size: 0x10] 0x7e841e2580
	FString NativeString;//[Offset: 0x38, Size: 0x10] 0x7e841e2500
	<FString,FString> LocalizedStrings;//[Offset: 0x48, Size: 0x50] 0x7e8414d3c0
	bool bIsMinimalPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7e841e2380
	FText CachedText;//[Offset: 0xa0, Size: 0x18] 0x7e841e2300

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10] 0x7e84e38500
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1] 0x7e84e38580
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18] 0x7e84e38600
	int64 ArgumentValueInt;//[Offset: 0x30, Size: 0x8] 0x7e84e38680
	float ArgumentValueFloat;//[Offset: 0x38, Size: 0x4] 0x7e8460e980
	double ArgumentValueDouble;//[Offset: 0x40, Size: 0x8] 0x7e84884580
	enum ArgumentValueGender;//[Offset: 0x48, Size: 0x1] 0x7e84e2fb00

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x7e61b3c500
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e61b3c580
	LayerActorStats[] ActorStats;//[Offset: 0x38, Size: 0x10] 0x7e61a57040

--------------------------------
Class: LayerActorStats
	ClassPtrProperty Type;//[Size: 0x8] 0x7e84e5ace0
	int Total;//[Offset: 0x8, Size: 0x4] 0x7e61649480

--------------------------------
Class: LevelPartitionInterface.Interface.Object

--------------------------------
Class: ActorContainer.Object
	<FName,Actor*> Actors;//[Offset: 0x28, Size: 0x50] 0x7e6167f640

--------------------------------
Class: LevelBounds.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x278, Size: 0x8] 0x7e61b3d500
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x7e61b3d580

--------------------------------
Class: LevelInstance.Actor.Object
	World* CookedWorldAsset;//[Offset: 0x278, Size: 0x28] 0x7e61b3d480

--------------------------------
Class: LevelInstanceComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelInstanceEditorInstanceActor.Actor.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingLevelInstanceEditor.LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelInstanceEditorObject.Object

--------------------------------
Class: LevelInstancePivot.Actor.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x178, Size: 0x1] 0x7e61b3d900
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x178, Size: 0x1] 0x7e61b3d980
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride, class LevelStreamingDynamic OptionalLevelStreamingClass, bool bLoadAsTempPackage);// 0x339258ebd041 0x7e61b1c720
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride, class LevelStreamingDynamic OptionalLevelStreamingClass, bool bLoadAsTempPackage);// 0x339158ebd041 0x7e61b1c800

--------------------------------
Class: LevelStreamingLevelInstance.LevelStreamingDynamic.LevelStreaming.Object

--------------------------------
Class: LevelInstanceSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x28, Size: 0x8] 0x7e61b3f200
	int[] Surfaces;//[Offset: 0x30, Size: 0x10] 0x7e61a56780

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	int8[] TypeToLayer;//[Offset: 0x2a8, Size: 0x10] 0x7e61a59020

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x278, Size: 0x8] 0x7e61b3f100

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2b0, Size: 0x8] 0x7e61b3f080

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18] 0x7e61b3f000

--------------------------------
Class: LightWeightInstanceBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	ActorInstanceHandle CreateNewLightWeightInstance(class Object ActorClass, Transform Transform, DataLayer* Layer, World* World);// 0x339858ebd041 0x7e61b1c1e0
	ActorInstanceHandle ConvertActorToLightWeightInstance(Actor* Actor);// 0x339758ebd041 0x7e61b1c2c0

--------------------------------
Class: ActorInstanceHandleInterface.Object

--------------------------------
Class: LightWeightInstanceManager.Actor.Object
	class Actor* RepresentedClass;//[Offset: 0x288, Size: 0x8] 0x7e61a58c60
	class Actor* AcceptedClass;//[Offset: 0x290, Size: 0x8] 0x7e61a58d00
	Transform[] InstanceTransforms;//[Offset: 0x298, Size: 0x10] 0x7e61a58da0
	int[] FreeIndices;//[Offset: 0x2f8, Size: 0x10] 0x7e61a58e40
	bool[] ValidIndices;//[Offset: 0x308, Size: 0x10] 0x7e61a58ee0
	void OnRep_Transforms();// 0x339958ebd041 0x7e61b1c100

--------------------------------
Class: LightWeightInstanceStaticMeshManager.LightWeightInstanceManager.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x320, Size: 0x28] 0x7e61b3e980
	HierarchicalInstancedStaticMeshComponent* InstancedStaticMeshComponent;//[Offset: 0x348, Size: 0x8] 0x7e61b3ea00
	int[] RenderingIndicesToDataIndices;//[Offset: 0x350, Size: 0x10] 0x7e61a58b20
	int[] DataIndicesToRenderingIndices;//[Offset: 0x360, Size: 0x10] 0x7e61a58bc0
	void OnRep_StaticMesh();// 0x339a58ebd041 0x7e61b1c020

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: LODSyncComponent.ActorComponent.Object
	int NumLODs;//[Offset: 0xb0, Size: 0x4] 0x7e61b40a00
	int ForcedLOD;//[Offset: 0xb4, Size: 0x4] 0x7e61b40a80
	int MinLOD;//[Offset: 0xb8, Size: 0x4] 0x7e61b40b00
	ComponentSync[] ComponentsToSync;//[Offset: 0xc0, Size: 0x10] 0x7e61a58580
	<FName,LODMappingData> CustomLODMapping;//[Offset: 0xd0, Size: 0x50] 0x7e6167f4c0
	int CurrentLOD;//[Offset: 0x120, Size: 0x4] 0x7e61b40d00
	int CurrentNumLODs;//[Offset: 0x124, Size: 0x4] 0x7e61b40d80
	PrimitiveComponent*[] DriveComponents;//[Offset: 0x128, Size: 0x10] 0x7e61a58620
	PrimitiveComponent*[] SubComponents;//[Offset: 0x138, Size: 0x10] 0x7e61a586c0
	FString GetLODSyncDebugText();// 0x339e58ebd041 0x7e61b1bca0

--------------------------------
Class: ComponentSync
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6164a880
	enum SyncOption;//[Offset: 0x8, Size: 0x1] 0x7e84e5a920

--------------------------------
Class: LODMappingData
	int[] Mapping;//[Offset: 0x0, Size: 0x10] 0x7e84e5a9c0
	int[] InverseMapping;//[Offset: 0x10, Size: 0x10] 0x7e84e5aa60

--------------------------------
Class: LODSyncInterface.Interface.Object

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10] 0x7e61b55480
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e61b55500
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7e61b55580

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50] 0x7e6167b5c0

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0x9] 0x7e61856300

--------------------------------
Class: MaterialQualityOverrides
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61575080
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e61575100
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e61575180
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7e61575200
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7e61575280
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7e61573200
	bool bForceDisablePreintegratedGF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7e61573280
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1] 0x7e61573300
	enum MobileShadowQuality;//[Offset: 0x8, Size: 0x1] 0x7e84dde3e0

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x538, Size: 0x10] 0x7e61a58440
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x33a058ebd041 0x7e61b1bae0
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x339f58ebd041 0x7e61b1bbc0

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x7e6164c580
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8] 0x7e6164c600
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7e6164a580
	float BaseSizeX;//[Offset: 0x14, Size: 0x4] 0x7e6164a600
	float BaseSizeY;//[Offset: 0x18, Size: 0x4] 0x7e6164a680
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8] 0x7e6164a700

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8] 0x7e61486f80
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8] 0x7e61487000
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61487080

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b44f80

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAbsorptionMediumMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b44f00

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b44d00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b44d80
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7e61b44e00
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7e61b44e80

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x40, Size: 0x8] 0x7e61486f00

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48, Size: 0x14] 0x7e61486e80

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x5c, Size: 0x8] 0x7e61486d00
	Guid ExpressionGuid;//[Offset: 0x64, Size: 0x10] 0x7e61486d80
	FName Group;//[Offset: 0x74, Size: 0x8] 0x7e61486e00

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float Threshold;//[Offset: 0x7c, Size: 0x4] 0x7e61b44c00
	byte Channel;//[Offset: 0x80, Size: 0x1] 0x7e61b44c80

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b44b00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b44b80

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b44a80

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b44a00

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b44980

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b44900

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b44880

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14] 0x7e61b44780
	ExpressionInput X;//[Offset: 0x50, Size: 0x14] 0x7e61b44800

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14] 0x7e61b44680
	ExpressionInput X;//[Offset: 0x50, Size: 0x14] 0x7e61b44700

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b44600

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x7e61b44580

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b44500

--------------------------------
Class: MaterialExpressionBinaryOp.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b44300
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b44380
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7e61b44400
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7e61b44480

--------------------------------
Class: MaterialExpressionLess.MaterialExpressionBinaryOp.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput Temp;//[Offset: 0x3c, Size: 0x14] 0x7e61b44280

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x3c, Size: 0x18] 0x7e61b46100
	MaterialAttributesInput B;//[Offset: 0x54, Size: 0x18] 0x7e61b46180
	ExpressionInput Alpha;//[Offset: 0x6c, Size: 0x14] 0x7e61b46200
	byte PixelAttributeBlendType;//[Offset: 0x80, Size: 0x1] 0x7e61b46280
	byte VertexAttributeBlendType;//[Offset: 0x81, Size: 0x1] 0x7e61b46300

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x18] 0x7e61b46080

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14] 0x7e61b45d80
	ExpressionInput Height;//[Offset: 0x50, Size: 0x14] 0x7e61b45e00
	ExpressionInput HeightRatioInput;//[Offset: 0x64, Size: 0x14] 0x7e61b45e80
	float HeightRatio;//[Offset: 0x78, Size: 0x4] 0x7e61b45f00
	float ReferencePlane;//[Offset: 0x7c, Size: 0x4] 0x7e61b45f80
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x7e61b46000

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b45d00

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x7e61b45c00
	Guid ExpressionGuid;//[Offset: 0x44, Size: 0x10] 0x7e61b45c80

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x54, Size: 0x10] 0x7e61b45a80
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x7e61b45b00
	byte PrimitiveDataIndex;//[Offset: 0x65, Size: 0x1] 0x7e61b45b80

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	byte MaskChannel;//[Offset: 0x66, Size: 0x1] 0x7e61b45a00

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b45700
	ExpressionInput Min;//[Offset: 0x50, Size: 0x14] 0x7e61b45780
	ExpressionInput Max;//[Offset: 0x64, Size: 0x14] 0x7e61b45800
	byte ClampMode;//[Offset: 0x78, Size: 0x1] 0x7e61b45880
	float MinDefault;//[Offset: 0x7c, Size: 0x4] 0x7e61b45900
	float MaxDefault;//[Offset: 0x80, Size: 0x4] 0x7e61b45980

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b45680

--------------------------------
Class: MaterialExpressionCloudSampleAttribute.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x40, Size: 0x8] 0x7e61b45500
	FName ParameterName;//[Offset: 0x48, Size: 0x8] 0x7e61b45580
	Guid ParameterId;//[Offset: 0x50, Size: 0x10] 0x7e61b45600

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x3c, Size: 0x4] 0x7e61b47380
	int SizeY;//[Offset: 0x40, Size: 0x4] 0x7e61b45300
	FString Text;//[Offset: 0x48, Size: 0x10] 0x7e61b45380
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10] 0x7e61b45400
	int FontSize;//[Offset: 0x68, Size: 0x4] 0x7e61b45480

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b47100
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e61b47180
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x7e61b47200
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x7e61b47280
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x7e61b47300

--------------------------------
Class: MaterialExpressionComposite.MaterialExpression.Object
	FString SubgraphName;//[Offset: 0x40, Size: 0x10] 0x7e61b46f80
	MaterialExpressionPinBase* InputExpressions;//[Offset: 0x50, Size: 0x8] 0x7e61b47000
	MaterialExpressionPinBase* OutputExpressions;//[Offset: 0x58, Size: 0x8] 0x7e61b47080

--------------------------------
Class: MaterialExpressionPinBase.MaterialExpression.Object
	CompositeReroute[] ReroutePins;//[Offset: 0x40, Size: 0x10] 0x7e61a57ea0
	byte PinDirection;//[Offset: 0x50, Size: 0x1] 0x7e61b4ca80

--------------------------------
Class: CompositeReroute
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6164cb00
	MaterialExpressionReroute* Expression;//[Offset: 0x8, Size: 0x8] 0x7e6164cb80

--------------------------------
Class: MaterialExpressionReroute.MaterialExpressionRerouteBase.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4e400

--------------------------------
Class: MaterialExpressionRerouteBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x7e61b46f00

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x7e61b46e00
	float G;//[Offset: 0x40, Size: 0x4] 0x7e61b46e80

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x7e61b46d80

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x7e61b46d00

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b46b80
	float Bias;//[Offset: 0x50, Size: 0x4] 0x7e61b46c00
	float Scale;//[Offset: 0x54, Size: 0x4] 0x7e61b46c80

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b46a80
	float Period;//[Offset: 0x50, Size: 0x4] 0x7e61b46b00

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b46980
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b46a00

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x54, Size: 0x4] 0x7e61b46800
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7e61b46880
	byte PrimitiveDataIndex;//[Offset: 0x59, Size: 0x1] 0x7e61b46900

--------------------------------
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	CurveLinearColor* Curve;//[Offset: 0x60, Size: 0x8] 0x7e61b46680
	CurveLinearColorAtlas* Atlas;//[Offset: 0x68, Size: 0x8] 0x7e61b46700
	ExpressionInput InputTime;//[Offset: 0x70, Size: 0x14] 0x7e61b46780

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString Code;//[Offset: 0x40, Size: 0x10] 0x7e61b48400
	byte OutputType;//[Offset: 0x50, Size: 0x1] 0x7e61b46380
	FString Description;//[Offset: 0x58, Size: 0x10] 0x7e61b46400
	CustomInput[] Inputs;//[Offset: 0x68, Size: 0x10] 0x7e61a581c0
	CustomOutput[] AdditionalOutputs;//[Offset: 0x78, Size: 0x10] 0x7e61a58260
	CustomDefine[] AdditionalDefines;//[Offset: 0x88, Size: 0x10] 0x7e61a58300
	FString[] IncludeFilePaths;//[Offset: 0x98, Size: 0x10] 0x7e61a583a0

--------------------------------
Class: CustomInput
	FName InputName;//[Offset: 0x0, Size: 0x8] 0x7e6164d100
	ExpressionInput Input;//[Offset: 0x8, Size: 0x14] 0x7e6164d180

--------------------------------
Class: CustomOutput
	FName OutputName;//[Offset: 0x0, Size: 0x8] 0x7e6164d000
	byte OutputType;//[Offset: 0x8, Size: 0x1] 0x7e6164d080

--------------------------------
Class: CustomDefine
	FString DefineName;//[Offset: 0x0, Size: 0x10] 0x7e6164cf00
	FString DefineValue;//[Offset: 0x10, Size: 0x10] 0x7e6164cf80

--------------------------------
Class: MaterialExpressionDBufferTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x7e61b48300
	byte DBufferTextureId;//[Offset: 0x50, Size: 0x1] 0x7e61b48380

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0x14] 0x7e61b48280

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0x14] 0x7e61b48200

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x3c, Size: 0x14] 0x7e61b48080
	float ConstWidth;//[Offset: 0x50, Size: 0x4] 0x7e61b48100
	float ConstHeight;//[Offset: 0x54, Size: 0x4] 0x7e61b48180

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x3c, Size: 0x14] 0x7e61b47e80
	ExpressionInput FadeDistance;//[Offset: 0x50, Size: 0x14] 0x7e61b47f00
	float OpacityDefault;//[Offset: 0x64, Size: 0x4] 0x7e61b47f80
	float FadeDistanceDefault;//[Offset: 0x68, Size: 0x4] 0x7e61b48000

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x39, Size: 0x1] 0x7e61b47d80
	ExpressionInput Depth;//[Offset: 0x3c, Size: 0x14] 0x7e61b47e00

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x3c, Size: 0x14] 0x7e61b47d00

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b47b80
	ExpressionInput Fraction;//[Offset: 0x50, Size: 0x14] 0x7e61b47c00
	LinearColor LuminanceFactors;//[Offset: 0x64, Size: 0x10] 0x7e61b47c80

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b47a80
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b47b00

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x7e61b47a00

--------------------------------
Class: MaterialExpressionDistanceFieldsRenderingSwitch.MaterialExpression.Object
	ExpressionInput No;//[Offset: 0x3c, Size: 0x14] 0x7e61b47900
	ExpressionInput Yes;//[Offset: 0x50, Size: 0x14] 0x7e61b47980

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x7e61b47880

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b47680
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b47700
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7e61b47780
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7e61b47800

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b47580
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b47600

--------------------------------
Class: MaterialExpressionDoubleVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	Vector4d DefaultValue;//[Offset: 0x60, Size: 0x20] 0x7e61b47500

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	FString[] ParamNames;//[Offset: 0x40, Size: 0x10] 0x7e61a58120
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10] 0x7e61b47400
	uint32 ParameterIndex;//[Offset: 0x60, Size: 0x4] 0x7e61b47480

--------------------------------
Class: MaterialExpressionExecBegin.MaterialExpression.Object
	ExpressionExecOutput Exec;//[Offset: 0x40, Size: 0x8] 0x7e61b49400

--------------------------------
Class: ExpressionExecOutput
	MaterialExpression* Expression;//[Offset: 0x0, Size: 0x8] 0x7e6164d200

--------------------------------
Class: MaterialExpressionExecEnd.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionEyeAdaptationInverse.MaterialExpression.Object
	ExpressionInput LightValueInput;//[Offset: 0x3c, Size: 0x14] 0x7e61b49300
	ExpressionInput AlphaInput;//[Offset: 0x50, Size: 0x14] 0x7e61b49380

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7e61b49280

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b49200

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b49100
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b49180

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x40, Size: 0x8] 0x7e61b49000
	int FontTexturePage;//[Offset: 0x48, Size: 0x4] 0x7e61b49080

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x4c, Size: 0x8] 0x7e61b48e80
	Guid ExpressionGuid;//[Offset: 0x54, Size: 0x10] 0x7e61b48f00
	FName Group;//[Offset: 0x64, Size: 0x8] 0x7e61b48f80

--------------------------------
Class: MaterialExpressionForLoop.MaterialExpression.Object
	ExpressionExecOutput LoopBody;//[Offset: 0x40, Size: 0x8] 0x7e61b48c00
	ExpressionExecOutput Completed;//[Offset: 0x48, Size: 0x8] 0x7e61b48c80
	ExpressionInput StartIndex;//[Offset: 0x50, Size: 0x14] 0x7e61b48d00
	ExpressionInput EndIndex;//[Offset: 0x64, Size: 0x14] 0x7e61b48d80
	ExpressionInput IndexStep;//[Offset: 0x78, Size: 0x14] 0x7e61b48e00

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b48b80

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x3c, Size: 0x14] 0x7e61b48900
	float Exponent;//[Offset: 0x50, Size: 0x4] 0x7e61b48980
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x54, Size: 0x14] 0x7e61b48a00
	float BaseReflectFraction;//[Offset: 0x68, Size: 0x4] 0x7e61b48a80
	ExpressionInput Normal;//[Offset: 0x6c, Size: 0x14] 0x7e61b48b00

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x3c, Size: 0x14] 0x7e61b48480
	FName InputName;//[Offset: 0x50, Size: 0x8] 0x7e61b48500
	FString Description;//[Offset: 0x58, Size: 0x10] 0x7e61b48580
	Guid ID;//[Offset: 0x68, Size: 0x10] 0x7e61b48600
	byte InputType;//[Offset: 0x78, Size: 0x1] 0x7e61b48680
	Vector4 PreviewValue;//[Offset: 0x80, Size: 0x20] 0x7e61b48700
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7e61b48780
	int SortPriority;//[Offset: 0xa4, Size: 0x4] 0x7e61b48800
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x7e61b48880

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FName OutputName;//[Offset: 0x3c, Size: 0x8] 0x7e61b4a280
	FString Description;//[Offset: 0x48, Size: 0x10] 0x7e61b4a300
	int SortPriority;//[Offset: 0x58, Size: 0x4] 0x7e61b4a380
	ExpressionInput A;//[Offset: 0x5c, Size: 0x14] 0x7e61b4a400
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7e61b4a480
	Guid ID;//[Offset: 0x74, Size: 0x10] 0x7e61b4a500

--------------------------------
Class: MaterialExpressionGenericConstant.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionConstantDouble.MaterialExpressionGenericConstant.MaterialExpression.Object
	double Value;//[Offset: 0x40, Size: 0x8] 0x7e61b4a200

--------------------------------
Class: MaterialExpressionGetLocal.MaterialExpression.Object
	FName LocalName;//[Offset: 0x3c, Size: 0x8] 0x7e61b4a180

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x18] 0x7e61b4a080
	Guid[] AttributeGetTypes;//[Offset: 0x58, Size: 0x10] 0x7e61a58080

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7e61b49f00
	ExpressionInput StaticIndirect;//[Offset: 0x50, Size: 0x14] 0x7e61b49f80
	ExpressionInput DynamicIndirect;//[Offset: 0x64, Size: 0x14] 0x7e61b4a000

--------------------------------
Class: MaterialExpressionHairAttributes.MaterialExpression.Object
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7e61b49e80

--------------------------------
Class: MaterialExpressionHairColor.MaterialExpression.Object
	ExpressionInput Melanin;//[Offset: 0x3c, Size: 0x14] 0x7e61b49d00
	ExpressionInput Redness;//[Offset: 0x50, Size: 0x14] 0x7e61b49d80
	ExpressionInput DyeColor;//[Offset: 0x64, Size: 0x14] 0x7e61b49e00

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b49900
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b49980
	ExpressionInput AGreaterThanB;//[Offset: 0x64, Size: 0x14] 0x7e61b49a00
	ExpressionInput AEqualsB;//[Offset: 0x78, Size: 0x14] 0x7e61b49a80
	ExpressionInput ALessThanB;//[Offset: 0x8c, Size: 0x14] 0x7e61b49b00
	float EqualsThreshold;//[Offset: 0xa0, Size: 0x4] 0x7e61b49b80
	float ConstB;//[Offset: 0xa4, Size: 0x4] 0x7e61b49c00
	float ConstAEqualsB;//[Offset: 0xa8, Size: 0x4] 0x7e61b49c80

--------------------------------
Class: MaterialExpressionIfThenElse.MaterialExpression.Object
	ExpressionExecOutput Then;//[Offset: 0x40, Size: 0x8] 0x7e61b49780
	ExpressionExecOutput Else;//[Offset: 0x48, Size: 0x8] 0x7e61b49800
	ExpressionInput Condition;//[Offset: 0x50, Size: 0x14] 0x7e61b49880

--------------------------------
Class: MaterialExpressionInverseLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b4b500
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b4b580
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14] 0x7e61b49500
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x7e61b49580
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x7e61b49600
	float ConstValue;//[Offset: 0x80, Size: 0x4] 0x7e61b49680
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7e61b49700

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0x14] 0x7e61b4b400
	ExpressionInput Lightmass;//[Offset: 0x50, Size: 0x14] 0x7e61b4b480

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b4b100
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b4b180
	ExpressionInput Alpha;//[Offset: 0x64, Size: 0x14] 0x7e61b4b200
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x7e61b4b280
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x7e61b4b300
	float ConstAlpha;//[Offset: 0x80, Size: 0x4] 0x7e61b4b380

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0x14] 0x7e61b4b080

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0x14] 0x7e61b4b000

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b4a680
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0x14] 0x7e61b4a700
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14] 0x7e61b4a780
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14] 0x7e61b4a800
	ExpressionInput Anisotropy;//[Offset: 0x8c, Size: 0x14] 0x7e61b4a880
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0x14] 0x7e61b4a900
	ExpressionInput Opacity;//[Offset: 0xb4, Size: 0x14] 0x7e61b4a980
	ExpressionInput OpacityMask;//[Offset: 0xc8, Size: 0x14] 0x7e61b4aa00
	ExpressionInput Normal;//[Offset: 0xdc, Size: 0x14] 0x7e61b4aa80
	ExpressionInput Tangent;//[Offset: 0xf0, Size: 0x14] 0x7e61b4ab00
	ExpressionInput WorldPositionOffset;//[Offset: 0x104, Size: 0x14] 0x7e61b4ab80
	ExpressionInput SubsurfaceColor;//[Offset: 0x118, Size: 0x14] 0x7e61b4ac00
	ExpressionInput ClearCoat;//[Offset: 0x12c, Size: 0x14] 0x7e61b4ac80
	ExpressionInput ClearCoatRoughness;//[Offset: 0x140, Size: 0x14] 0x7e61b4ad00
	ExpressionInput AmbientOcclusion;//[Offset: 0x154, Size: 0x14] 0x7e61b4ad80
	ExpressionInput Refraction;//[Offset: 0x168, Size: 0x14] 0x7e61b4ae00
	ExpressionInput CustomizedUVs;//[Offset: 0x17c, Size: 0x14] 0x7e61b4ae80
	ExpressionInput PixelDepthOffset;//[Offset: 0x21c, Size: 0x14] 0x7e61b4af00
	ExpressionInput ShadingModel;//[Offset: 0x230, Size: 0x14] 0x7e61b4af80

--------------------------------
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x7e61b4a600

--------------------------------
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object
	MaterialAttributesInput Input;//[Offset: 0x3c, Size: 0x18] 0x7e61b4c380
	MaterialLayersFunctions DefaultLayers;//[Offset: 0x58, Size: 0x20] 0x7e61b4c400
	MaterialExpressionMaterialFunctionCall*[] LayerCallers;//[Offset: 0x78, Size: 0x10] 0x7e61a57f40
	int NumActiveLayerCallers;//[Offset: 0x88, Size: 0x4] 0x7e61b4c500
	MaterialExpressionMaterialFunctionCall*[] BlendCallers;//[Offset: 0x90, Size: 0x10] 0x7e61a57fe0
	int NumActiveBlendCallers;//[Offset: 0xa0, Size: 0x4] 0x7e61b4c600
	bool bIsLayerGraphBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1] 0x7e61b4a580

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunctionInterface* MaterialFunction;//[Offset: 0x40, Size: 0x8] 0x7e61b4c280
	MaterialParameterInfo FunctionParameterInfo;//[Offset: 0x48, Size: 0x10] 0x7e61b4c300

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0x14] 0x7e61b4c180
	ExpressionInput MaterialProxy;//[Offset: 0x50, Size: 0x14] 0x7e61b4c200

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b4bf80
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b4c000
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7e61b4c080
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7e61b4c100

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b4bd80
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b4be00
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7e61b4be80
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7e61b4bf00

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b4bb80
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b4bc00
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7e61b4bc80
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7e61b4bd00

--------------------------------
Class: MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionNamedRerouteDeclaration.MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4ba00
	FName Name;//[Offset: 0x50, Size: 0x8] 0x7e61b4ba80
	Guid VariableGuid;//[Offset: 0x58, Size: 0x10] 0x7e61b4bb00

--------------------------------
Class: MaterialExpressionNamedRerouteUsage.MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object
	MaterialExpressionNamedRerouteDeclaration* Declaration;//[Offset: 0x40, Size: 0x8] 0x7e61b4b900
	Guid DeclarationGuid;//[Offset: 0x48, Size: 0x10] 0x7e61b4b980

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x7e61b4d400
	ExpressionInput FilterWidth;//[Offset: 0x50, Size: 0x14] 0x7e61b4d480
	float Scale;//[Offset: 0x64, Size: 0x4] 0x7e61b4d500
	int Quality;//[Offset: 0x68, Size: 0x4] 0x7e61b4d580
	byte NoiseFunction;//[Offset: 0x6c, Size: 0x1] 0x7e61b4d600
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1] 0x7e61b4d680
	int Levels;//[Offset: 0x70, Size: 0x4] 0x7e61b4b600
	float OutputMin;//[Offset: 0x74, Size: 0x4] 0x7e61b4b680
	float OutputMax;//[Offset: 0x78, Size: 0x4] 0x7e61b4b700
	float LevelScale;//[Offset: 0x7c, Size: 0x4] 0x7e61b4b780
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7e61b4b800
	uint32 RepeatSize;//[Offset: 0x84, Size: 0x4] 0x7e61b4b880

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x3c, Size: 0x14] 0x7e61b4d380

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4d300

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14] 0x7e61b4cf80
	ExpressionInput Time;//[Offset: 0x50, Size: 0x14] 0x7e61b4d000
	ExpressionInput Speed;//[Offset: 0x64, Size: 0x14] 0x7e61b4d080
	float SpeedX;//[Offset: 0x78, Size: 0x4] 0x7e61b4d100
	float SpeedY;//[Offset: 0x7c, Size: 0x4] 0x7e61b4d180
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x7e61b4d200
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7e61b4d280

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1] 0x7e61b4cf00

--------------------------------
Class: MaterialExpressionParticleSubUVProperties.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPathTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0x14] 0x7e61b4ce00
	ExpressionInput PathTraced;//[Offset: 0x50, Size: 0x14] 0x7e61b4ce80

--------------------------------
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0x14] 0x7e61b4cc80
	float ConstDefaultValue;//[Offset: 0x50, Size: 0x4] 0x7e61b4cd00
	uint32 DataIndex;//[Offset: 0x54, Size: 0x4] 0x7e61b4cd80

--------------------------------
Class: MaterialExpressionPerInstanceCustomData3Vector.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0x14] 0x7e61b4cb00
	LinearColor ConstDefaultValue;//[Offset: 0x50, Size: 0x10] 0x7e61b4cb80
	uint32 DataIndex;//[Offset: 0x60, Size: 0x4] 0x7e61b4cc00

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0x14] 0x7e61b4c880
	ExpressionInput Exponent;//[Offset: 0x50, Size: 0x14] 0x7e61b4c900
	float ConstExponent;//[Offset: 0x64, Size: 0x4] 0x7e61b4c980

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x3c, Size: 0x14] 0x7e61b4c780
	ExpressionInput PreviousFrame;//[Offset: 0x50, Size: 0x14] 0x7e61b4c800

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7e61b4c680
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0x14] 0x7e61b4c700

--------------------------------
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0x14] 0x7e61b4e680
	ExpressionInput RayTraced;//[Offset: 0x50, Size: 0x14] 0x7e61b4e700

--------------------------------
Class: MaterialExpressionReflectionCapturePassSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7e61b4e580
	ExpressionInput Reflection;//[Offset: 0x50, Size: 0x14] 0x7e61b4e600

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x3c, Size: 0x14] 0x7e61b4e480
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e61b4e500

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x3c, Size: 0x14] 0x7e61b4e180
	ExpressionInput RotationAngle;//[Offset: 0x50, Size: 0x14] 0x7e61b4e200
	ExpressionInput PivotPoint;//[Offset: 0x64, Size: 0x14] 0x7e61b4e280
	ExpressionInput Position;//[Offset: 0x78, Size: 0x14] 0x7e61b4e300
	float Period;//[Offset: 0x8c, Size: 0x4] 0x7e61b4e380

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14] 0x7e61b4de80
	ExpressionInput Time;//[Offset: 0x50, Size: 0x14] 0x7e61b4df00
	float CenterX;//[Offset: 0x64, Size: 0x4] 0x7e61b4df80
	float CenterY;//[Offset: 0x68, Size: 0x4] 0x7e61b4e000
	float Speed;//[Offset: 0x6c, Size: 0x4] 0x7e61b4e080
	uint32 ConstCoordinate;//[Offset: 0x70, Size: 0x4] 0x7e61b4e100

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4de00

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b4da80
	ExpressionInput Specular;//[Offset: 0x50, Size: 0x14] 0x7e61b4db00
	ExpressionInput Roughness;//[Offset: 0x64, Size: 0x14] 0x7e61b4db80
	ExpressionInput Normal;//[Offset: 0x78, Size: 0x14] 0x7e61b4dc00
	ExpressionInput WorldHeight;//[Offset: 0x8c, Size: 0x14] 0x7e61b4dc80
	ExpressionInput Opacity;//[Offset: 0xa0, Size: 0x14] 0x7e61b4dd00
	ExpressionInput Mask;//[Offset: 0xb4, Size: 0x14] 0x7e61b4dd80

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7e61b4d980
	ExpressionInput VirtualTextureOutput;//[Offset: 0x50, Size: 0x14] 0x7e61b4da00

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x7e61b4f600
	ExpressionInput WorldPosition;//[Offset: 0x50, Size: 0x14] 0x7e61b4f680
	ExpressionInput MipValue;//[Offset: 0x64, Size: 0x14] 0x7e61b4f700
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x78, Size: 0x8] 0x7e61b4f780
	enum MaterialType;//[Offset: 0x80, Size: 0x1] 0x7e61a57e00
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x7e61b4d780
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1] 0x7e61b4d800
	byte MipValueMode;//[Offset: 0x83, Size: 0x1] 0x7e61b4d880
	byte TextureAddressMode;//[Offset: 0x84, Size: 0x1] 0x7e61b4d900

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x88, Size: 0x8] 0x7e61b4f480
	Guid ExpressionGuid;//[Offset: 0x90, Size: 0x10] 0x7e61b4f500
	FName Group;//[Offset: 0xa0, Size: 0x8] 0x7e61b4f580

--------------------------------
Class: MaterialExpressionSamplePhysicsVectorField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x7e61b4f380
	byte FieldTarget;//[Offset: 0x50, Size: 0x1] 0x7e61b4f400

--------------------------------
Class: MaterialExpressionSamplePhysicsScalarField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x7e61b4f280
	byte FieldTarget;//[Offset: 0x50, Size: 0x1] 0x7e61b4f300

--------------------------------
Class: MaterialExpressionSamplePhysicsIntegerField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x7e61b4f180
	byte FieldTarget;//[Offset: 0x50, Size: 0x1] 0x7e61b4f200

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4f100

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x7e61b4ef00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4ef80
	ExpressionInput OffsetFraction;//[Offset: 0x50, Size: 0x14] 0x7e61b4f000
	Vector2D ConstInput;//[Offset: 0x68, Size: 0x10] 0x7e61b4f080

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x7e61b4ed00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4ed80
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0x14] 0x7e61b4ee00
	Vector2D ConstInput;//[Offset: 0x68, Size: 0x10] 0x7e61b4ee80

--------------------------------
Class: MaterialExpressionSceneDepthWithoutWater.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x7e61b4eb00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4eb80
	Vector2D ConstInput;//[Offset: 0x50, Size: 0x10] 0x7e61b4ec00
	float FallbackDepth;//[Offset: 0x60, Size: 0x4] 0x7e61b4ec80

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x7e61b4e980
	byte SceneTextureId;//[Offset: 0x50, Size: 0x1] 0x7e61b4ea00
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7e61b4ea80

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSetLocal.MaterialExpression.Object
	ExpressionExecOutput Exec;//[Offset: 0x40, Size: 0x8] 0x7e61b4e800
	ExpressionInput Value;//[Offset: 0x48, Size: 0x14] 0x7e61b4e880
	FName LocalName;//[Offset: 0x5c, Size: 0x8] 0x7e61b4e900

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x7e61a57cc0
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10] 0x7e61a57d60

--------------------------------
Class: MaterialExpressionShaderStageSwitch.MaterialExpression.Object
	ExpressionInput PixelShader;//[Offset: 0x3c, Size: 0x14] 0x7e61b4fe80
	ExpressionInput VertexShader;//[Offset: 0x50, Size: 0x14] 0x7e61b4ff00

--------------------------------
Class: MaterialExpressionShadingModel.MaterialExpression.Object
	byte ShadingModel;//[Offset: 0x39, Size: 0x1] 0x7e61b4fe00

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7e61b4fd00
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0x14] 0x7e61b4fd80

--------------------------------
Class: MaterialExpressionShadowReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x7e61b4fc00
	ExpressionInput Shadow;//[Offset: 0x50, Size: 0x14] 0x7e61b4fc80

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4fb80

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b4fa80
	float Period;//[Offset: 0x50, Size: 0x4] 0x7e61b4fb00

--------------------------------
Class: MaterialExpressionSingleLayerWaterMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput ScatteringCoefficients;//[Offset: 0x3c, Size: 0x14] 0x7e61b4f880
	ExpressionInput AbsorptionCoefficients;//[Offset: 0x50, Size: 0x14] 0x7e61b4f900
	ExpressionInput PhaseG;//[Offset: 0x64, Size: 0x14] 0x7e61b4f980
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x78, Size: 0x14] 0x7e61b4fa00

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDirection.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x7e61b4f800

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x7e61b51000
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0x14] 0x7e61b51080

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDiskLuminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x7e61b50f80

--------------------------------
Class: MaterialExpressionSkyAtmosphereAerialPerspective.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x7e61b50f00

--------------------------------
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereViewLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyLightEnvMapSample.MaterialExpression.Object
	ExpressionInput Direction;//[Offset: 0x3c, Size: 0x14] 0x7e61b50e00
	ExpressionInput Roughness;//[Offset: 0x50, Size: 0x14] 0x7e61b50e80

--------------------------------
Class: MaterialExpressionSmoothStep.MaterialExpression.Object
	ExpressionInput Min;//[Offset: 0x3c, Size: 0x14] 0x7e61b50b00
	ExpressionInput Max;//[Offset: 0x50, Size: 0x14] 0x7e61b50b80
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14] 0x7e61b50c00
	float ConstMin;//[Offset: 0x78, Size: 0x4] 0x7e61b50c80
	float ConstMax;//[Offset: 0x7c, Size: 0x4] 0x7e61b50d00
	float ConstValue;//[Offset: 0x80, Size: 0x4] 0x7e61b50d80

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x3c, Size: 0x14] 0x7e61b50880
	ExpressionInput Index;//[Offset: 0x50, Size: 0x14] 0x7e61b50900
	ExpressionInput Seed;//[Offset: 0x64, Size: 0x14] 0x7e61b50980
	uint32 ConstIndex;//[Offset: 0x78, Size: 0x4] 0x7e61b50a00
	Vector2D ConstSeed;//[Offset: 0x80, Size: 0x10] 0x7e61b50a80

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	ExpressionInput GeometryInput;//[Offset: 0x3c, Size: 0x14] 0x7e61b50400
	ExpressionInput WindInput;//[Offset: 0x50, Size: 0x14] 0x7e61b50480
	ExpressionInput LODInput;//[Offset: 0x64, Size: 0x14] 0x7e61b50500
	ExpressionInput ExtraBendWS;//[Offset: 0x78, Size: 0x14] 0x7e61b50580
	byte GeometryType;//[Offset: 0x8c, Size: 0x1] 0x7e61b50600
	byte WindType;//[Offset: 0x8d, Size: 0x1] 0x7e61b50680
	byte LODType;//[Offset: 0x8e, Size: 0x1] 0x7e61b50700
	float BillboardThreshold;//[Offset: 0x90, Size: 0x4] 0x7e61b50780
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x7e61b50800

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b50100
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b50180
	ExpressionInput Radius;//[Offset: 0x64, Size: 0x14] 0x7e61b50200
	ExpressionInput Hardness;//[Offset: 0x78, Size: 0x14] 0x7e61b50280
	float AttenuationRadius;//[Offset: 0x8c, Size: 0x4] 0x7e61b50300
	float HardnessPercent;//[Offset: 0x90, Size: 0x4] 0x7e61b50380

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x3c, Size: 0x14] 0x7e61b52100
	float ConstantDensity;//[Offset: 0x50, Size: 0x4] 0x7e61b50080

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b52080

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7e61b52000

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7e61b51f80

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7e61b51d80
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x7e61b51e00
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x7e61b51e80
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x7e61b51f00

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7e61b51b80
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b51c00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b51c80
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14] 0x7e61b51d00

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStep.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14] 0x7e61b51980
	ExpressionInput X;//[Offset: 0x50, Size: 0x14] 0x7e61b51a00
	float ConstY;//[Offset: 0x64, Size: 0x4] 0x7e61b51a80
	float ConstX;//[Offset: 0x68, Size: 0x4] 0x7e61b51b00

--------------------------------
Class: MaterialExpressionStrataBSDF.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStrataLegacyConversion.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b53000
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0x14] 0x7e61b53080
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14] 0x7e61b53100
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14] 0x7e61b53180
	ExpressionInput Anisotropy;//[Offset: 0x8c, Size: 0x14] 0x7e61b51100
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0x14] 0x7e61b51180
	ExpressionInput Normal;//[Offset: 0xb4, Size: 0x14] 0x7e61b51200
	ExpressionInput Tangent;//[Offset: 0xc8, Size: 0x14] 0x7e61b51280
	ExpressionInput SubsurfaceColor;//[Offset: 0xdc, Size: 0x14] 0x7e61b51300
	ExpressionInput ClearCoat;//[Offset: 0xf0, Size: 0x14] 0x7e61b51380
	ExpressionInput ClearCoatRoughness;//[Offset: 0x104, Size: 0x14] 0x7e61b51400
	ExpressionInput Opacity;//[Offset: 0x118, Size: 0x14] 0x7e61b51480
	ExpressionInput TransmittanceColor;//[Offset: 0x12c, Size: 0x14] 0x7e61b51500
	ExpressionInput WaterScatteringCoefficients;//[Offset: 0x140, Size: 0x14] 0x7e61b51580
	ExpressionInput WaterAbsorptionCoefficients;//[Offset: 0x154, Size: 0x14] 0x7e61b51600
	ExpressionInput WaterPhaseG;//[Offset: 0x168, Size: 0x14] 0x7e61b51680
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x17c, Size: 0x14] 0x7e61b51700
	ExpressionInput ClearCoatNormal;//[Offset: 0x190, Size: 0x14] 0x7e61b51780
	ExpressionInput ShadingModel;//[Offset: 0x1a4, Size: 0x14] 0x7e61b51800
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x1b8, Size: 0x8] 0x7e61b51880
	StrataMaterialInfo ConvertedStrataMaterialInfo;//[Offset: 0x1c0, Size: 0x18] 0x7e61b51900

--------------------------------
Class: StrataMaterialInfo
	byte ShadingModelField;//[Offset: 0x0, Size: 0x1] 0x7e6161d400
	byte bHasShadingModelFromExpression;//[Offset: 0x1, Size: 0x1] 0x7e6161d480
	SubsurfaceProfile*[] SubsurfaceProfiles;//[Offset: 0x8, Size: 0x10] 0x7e84e59520

--------------------------------
Class: MaterialExpressionStrataSlabBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b52580
	ExpressionInput EdgeColor;//[Offset: 0x50, Size: 0x14] 0x7e61b52600
	ExpressionInput Metallic;//[Offset: 0x64, Size: 0x14] 0x7e61b52680
	ExpressionInput Specular;//[Offset: 0x78, Size: 0x14] 0x7e61b52700
	ExpressionInput DiffuseAlbedo;//[Offset: 0x8c, Size: 0x14] 0x7e61b52780
	ExpressionInput F0;//[Offset: 0xa0, Size: 0x14] 0x7e61b52800
	ExpressionInput F90;//[Offset: 0xb4, Size: 0x14] 0x7e61b52880
	ExpressionInput Roughness;//[Offset: 0xc8, Size: 0x14] 0x7e61b52900
	ExpressionInput Anisotropy;//[Offset: 0xdc, Size: 0x14] 0x7e61b52980
	ExpressionInput Normal;//[Offset: 0xf0, Size: 0x14] 0x7e61b52a00
	ExpressionInput Tangent;//[Offset: 0x104, Size: 0x14] 0x7e61b52a80
	ExpressionInput SSSDMFP;//[Offset: 0x118, Size: 0x14] 0x7e61b52b00
	ExpressionInput SSSDMFPScale;//[Offset: 0x12c, Size: 0x14] 0x7e61b52b80
	ExpressionInput EmissiveColor;//[Offset: 0x140, Size: 0x14] 0x7e61b52c00
	ExpressionInput Haziness;//[Offset: 0x154, Size: 0x14] 0x7e61b52c80
	ExpressionInput ThinFilmThickness;//[Offset: 0x168, Size: 0x14] 0x7e61b52d00
	ExpressionInput Thickness;//[Offset: 0x17c, Size: 0x14] 0x7e61b52d80
	ExpressionInput FuzzAmount;//[Offset: 0x190, Size: 0x14] 0x7e61b52e00
	ExpressionInput FuzzColor;//[Offset: 0x1a4, Size: 0x14] 0x7e61b52e80
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x1b8, Size: 0x8] 0x7e61b52f00
	bool bUseMetalness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c0, Size: 0x1] 0x7e61b52f80

--------------------------------
Class: MaterialExpressionStrataVolumetricFogCloudBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput Albedo;//[Offset: 0x3c, Size: 0x14] 0x7e61b52380
	ExpressionInput Extinction;//[Offset: 0x50, Size: 0x14] 0x7e61b52400
	ExpressionInput EmissiveColor;//[Offset: 0x64, Size: 0x14] 0x7e61b52480
	ExpressionInput AmbientOcclusion;//[Offset: 0x78, Size: 0x14] 0x7e61b52500

--------------------------------
Class: MaterialExpressionStrataUnlitBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput EmissiveColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b52280
	ExpressionInput TransmittanceColor;//[Offset: 0x50, Size: 0x14] 0x7e61b52300

--------------------------------
Class: MaterialExpressionStrataHairBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b54000
	ExpressionInput Scatter;//[Offset: 0x50, Size: 0x14] 0x7e61b54080
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14] 0x7e61b54100
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14] 0x7e61b54180
	ExpressionInput Backlit;//[Offset: 0x8c, Size: 0x14] 0x7e61b54200
	ExpressionInput Tangent;//[Offset: 0xa0, Size: 0x14] 0x7e61b52180
	ExpressionInput EmissiveColor;//[Offset: 0xb4, Size: 0x14] 0x7e61b52200

--------------------------------
Class: MaterialExpressionStrataSingleLayerWaterBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b53a80
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0x14] 0x7e61b53b00
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14] 0x7e61b53b80
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14] 0x7e61b53c00
	ExpressionInput Normal;//[Offset: 0x8c, Size: 0x14] 0x7e61b53c80
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0x14] 0x7e61b53d00
	ExpressionInput TopMaterialOpacity;//[Offset: 0xb4, Size: 0x14] 0x7e61b53d80
	ExpressionInput WaterAlbedo;//[Offset: 0xc8, Size: 0x14] 0x7e61b53e00
	ExpressionInput WaterExtinction;//[Offset: 0xdc, Size: 0x14] 0x7e61b53e80
	ExpressionInput WaterPhaseG;//[Offset: 0xf0, Size: 0x14] 0x7e61b53f00
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x104, Size: 0x14] 0x7e61b53f80

--------------------------------
Class: MaterialExpressionStrataHorizontalMixing.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput Background;//[Offset: 0x3c, Size: 0x14] 0x7e61b53880
	ExpressionInput Foreground;//[Offset: 0x50, Size: 0x14] 0x7e61b53900
	ExpressionInput Mix;//[Offset: 0x64, Size: 0x14] 0x7e61b53980
	bool bUseParameterBlending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7e61b53a00

--------------------------------
Class: MaterialExpressionStrataVerticalLayering.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput Top;//[Offset: 0x3c, Size: 0x14] 0x7e61b53700
	ExpressionInput Base;//[Offset: 0x50, Size: 0x14] 0x7e61b53780
	bool bUseParameterBlending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1] 0x7e61b53800

--------------------------------
Class: MaterialExpressionStrataAdd.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b53580
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b53600
	bool bUseParameterBlending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1] 0x7e61b53680

--------------------------------
Class: MaterialExpressionStrataWeight.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b53480
	ExpressionInput Weight;//[Offset: 0x50, Size: 0x14] 0x7e61b53500

--------------------------------
Class: MaterialExpressionStrataTransmittanceToMFP.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b53380
	ExpressionInput Thickness;//[Offset: 0x50, Size: 0x14] 0x7e61b53400

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x7e61b55280
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x7e61b53200
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x7e61b53280
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x7e61b53300

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b55180
	float Period;//[Offset: 0x50, Size: 0x4] 0x7e61b55200

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b55100

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput Index;//[Offset: 0x3c, Size: 0x14] 0x7e61b54f00
	ExpressionInput Seed;//[Offset: 0x50, Size: 0x14] 0x7e61b54f80
	uint32 ConstIndex;//[Offset: 0x64, Size: 0x4] 0x7e61b55000
	Vector2D ConstSeed;//[Offset: 0x68, Size: 0x10] 0x7e61b55080

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x3c, Size: 0x4] 0x7e61b54c80
	float UTiling;//[Offset: 0x40, Size: 0x4] 0x7e61b54d00
	float VTiling;//[Offset: 0x44, Size: 0x4] 0x7e61b54d80
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61b54e00
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7e61b54e80

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x3c, Size: 0x14] 0x7e61b54b80
	byte Property;//[Offset: 0x50, Size: 0x1] 0x7e61b54c00

--------------------------------
Class: MaterialExpressionTextureSampleParameter2DArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterCubeArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1] 0x7e61b54b00

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialExpressionThinTranslucentMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0x14] 0x7e61b54a80

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7e61b54900
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x7e61b54980
	float Period;//[Offset: 0x3c, Size: 0x4] 0x7e61b54a00

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b54780
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x7e61b54800
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x7e61b54880

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b54600
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x7e61b54680
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x7e61b54700

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b54580

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x7e61b54300
	byte NoiseFunction;//[Offset: 0x50, Size: 0x1] 0x7e61b54380
	int Quality;//[Offset: 0x54, Size: 0x4] 0x7e61b54400
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7e61b54480
	uint32 TileSize;//[Offset: 0x5c, Size: 0x4] 0x7e61b54500

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x7e61b54280

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexTangentWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x39, Size: 0x1] 0x7e61b56300

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVirtualTextureFeatureSwitch.MaterialExpression.Object
	ExpressionInput No;//[Offset: 0x3c, Size: 0x14] 0x7e61b56200
	ExpressionInput Yes;//[Offset: 0x50, Size: 0x14] 0x7e61b56280

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialInput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput PhaseG;//[Offset: 0x3c, Size: 0x14] 0x7e61b55900
	ExpressionInput PhaseG2;//[Offset: 0x50, Size: 0x14] 0x7e61b55980
	ExpressionInput PhaseBlend;//[Offset: 0x64, Size: 0x14] 0x7e61b55a00
	ExpressionInput MultiScatteringContribution;//[Offset: 0x78, Size: 0x14] 0x7e61b55a80
	ExpressionInput MultiScatteringOcclusion;//[Offset: 0x8c, Size: 0x14] 0x7e61b55b00
	ExpressionInput MultiScatteringEccentricity;//[Offset: 0xa0, Size: 0x14] 0x7e61b55b80
	ExpressionInput ConservativeDensity;//[Offset: 0xb4, Size: 0x14] 0x7e61b55c00
	float ConstPhaseG;//[Offset: 0xc8, Size: 0x4] 0x7e61b55c80
	float ConstPhaseG2;//[Offset: 0xcc, Size: 0x4] 0x7e61b55d00
	float ConstPhaseBlend;//[Offset: 0xd0, Size: 0x4] 0x7e61b55d80
	bool PerSamplePhaseEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1] 0x7e61b55e00
	uint32 MultiScatteringApproximationOctaveCount;//[Offset: 0xd8, Size: 0x4] 0x7e61b55e80
	float ConstMultiScatteringContribution;//[Offset: 0xdc, Size: 0x4] 0x7e61b55f00
	float ConstMultiScatteringOcclusion;//[Offset: 0xe0, Size: 0x4] 0x7e61b55f80
	float ConstMultiScatteringEccentricity;//[Offset: 0xe4, Size: 0x4] 0x7e61b56000
	bool bGroundContribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x7e61b56080
	bool bGrayScaleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x7e61b56100
	bool bRayMarchVolumeShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1] 0x7e61b56180

--------------------------------
Class: MaterialExpressionWhileLoop.MaterialExpression.Object
	ExpressionExecOutput LoopBody;//[Offset: 0x40, Size: 0x8] 0x7e61b55780
	ExpressionExecOutput Completed;//[Offset: 0x48, Size: 0x8] 0x7e61b55800
	ExpressionInput Condition;//[Offset: 0x50, Size: 0x14] 0x7e61b55880

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x39, Size: 0x1] 0x7e61b55700

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object
	MaterialFunctionInterface* Parent;//[Offset: 0x40, Size: 0x8] 0x7e61b57080
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8] 0x7e61b57100
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10] 0x7e61a5a060
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10] 0x7e61a5a100
	DoubleVectorParameterValue[] DoubleVectorParameterValues;//[Offset: 0x70, Size: 0x10] 0x7e61a5a1a0
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x80, Size: 0x10] 0x7e61a5a240
	FontParameterValue[] FontParameterValues;//[Offset: 0x90, Size: 0x10] 0x7e61a5a2e0
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0xa0, Size: 0x10] 0x7e61a5a380
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xb0, Size: 0x10] 0x7e61a5a420
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0xc0, Size: 0x10] 0x7e61a5a4c0

--------------------------------
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	Actor*[] TargetActors;//[Offset: 0x278, Size: 0x10] 0x7e61a59fc0

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x1f8, Size: 0x8] 0x7e618eed00
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x27bf58ebd041 0x7e618d3dc0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x27be58ebd041 0x7e618d3ea0
	float K2_GetScalarParameterValue(FName ParameterName);// 0x27bd58ebd041 0x7e618d3f80

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x278, Size: 0x8] 0x7e61b58600
	FName MatineeControllerName;//[Offset: 0x280, Size: 0x8] 0x7e61b58680
	float PlayRate;//[Offset: 0x288, Size: 0x4] 0x7e61b58700
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1] 0x7e61b58780
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c, Size: 0x1] 0x7e61b58800
	float ForceStartPosition;//[Offset: 0x290, Size: 0x4] 0x7e61b58880
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1] 0x7e61b58900
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1] 0x7e61b58980
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1] 0x7e61b58a00
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1] 0x7e61b58a80
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x294, Size: 0x1] 0x7e61b58b00
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x294, Size: 0x1] 0x7e61b58b80
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x294, Size: 0x1] 0x7e61b58c00
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x294, Size: 0x1] 0x7e61b58c80
	int PreferredSplitScreenNum;//[Offset: 0x298, Size: 0x4] 0x7e61b58d00
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1] 0x7e61b58d80
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1] 0x7e61b58e00
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29c, Size: 0x1] 0x7e61b58e80
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29c, Size: 0x1] 0x7e61b58f00
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x2a0, Size: 0x10] 0x7e61a59b60
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1] 0x7e61b59000
	InterpGroupInst*[] GroupInst;//[Offset: 0x2b8, Size: 0x10] 0x7e61a59c00
	CameraCutInfo[] CameraCuts;//[Offset: 0x2c8, Size: 0x10] 0x7e61a59ca0
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1] 0x7e61b59180
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d8, Size: 0x1] 0x7e61b59200
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d8, Size: 0x1] 0x7e61b59280
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d8, Size: 0x1] 0x7e61b59300
	float InterpPosition;//[Offset: 0x2dc, Size: 0x4] 0x7e61b59380
	byte ReplicationForceIsPlaying;//[Offset: 0x2e4, Size: 0x1] 0x7e61b59400
	delegate OnPlay;//[Offset: 0x2e8, Size: 0x10] 0x7e61b59480
	delegate OnStop;//[Offset: 0x2f8, Size: 0x10] 0x7e61b57400
	delegate OnPause;//[Offset: 0x308, Size: 0x10] 0x7e61b57480
	void Stop();// 0x33bf58ebd041 0x7e61b1d980
	void SetPosition(float NewPosition, bool bJump);// 0x33be58ebd041 0x7e61b1da60
	void SetLoopingState(bool bNewLooping);// 0x33bd58ebd041 0x7e61b1db40
	void Reverse();// 0x33bc58ebd041 0x7e61b1dc20
	void Play();// 0x33bb58ebd041 0x7e61b1dd00
	void Pause();// 0x33ba58ebd041 0x7e61b1dde0
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x33b958ebd041 0x7e61b1dec0
	void ChangePlaybackDirection();// 0x33b858ebd041 0x7e61b1dfa0

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x7e6164ed80
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10] 0x7e84e5c5e0

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e6164ee80
	float Timestamp;//[Offset: 0x18, Size: 0x4] 0x7e6164ef00

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x320, Size: 0x8] 0x7e61b58580

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x7e61b58480
	bool bMeshReductionBackwardCompatible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7e61b58500

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0x33c258ebd041 0x7e61b1d6e0
	void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0x33c158ebd041 0x7e61b1d7c0
	void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0x33c058ebd041 0x7e61b1d8a0

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	PurchaseInfo[] AvailableProducts;//[Offset: 0x38, Size: 0x10] 0x7e61a59a20
	FString LastError;//[Offset: 0x48, Size: 0x10] 0x7e61b5a000
	FString LastErrorSolution;//[Offset: 0x58, Size: 0x10] 0x7e61b5a080

--------------------------------
Class: PurchaseInfo
	FString Identifier;//[Offset: 0x0, Size: 0x10] 0x7e61652600
	FString DisplayName;//[Offset: 0x10, Size: 0x10] 0x7e61652680
	FString DisplayDescription;//[Offset: 0x20, Size: 0x10] 0x7e61652700
	FString DisplayPrice;//[Offset: 0x30, Size: 0x10] 0x7e61652780

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationDataChunkActor.PartitionActor.Actor.Object
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x278, Size: 0x10] 0x7e61a598e0
	Box DataChunkActorBounds;//[Offset: 0x288, Size: 0x38] 0x7e61b59b80

--------------------------------
Class: NavigationDataInterface.Interface.Object

--------------------------------
Class: NullNavSysConfig.NavigationSystemConfig.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10] 0x7e61a597a0
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10] 0x7e61a59840

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0x18] 0x7e61657280
	Vector Right;//[Offset: 0x48, Size: 0x18] 0x7e61657300

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4] 0x7e61657380
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4] 0x7e61655300
	float SnapRadius;//[Offset: 0xc, Size: 0x4] 0x7e61655380
	float SnapHeight;//[Offset: 0x10, Size: 0x4] 0x7e61655400
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4] 0x7e61655480
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7e61655500
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x7e61655580
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x7e61655600
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x7e61655680
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1] 0x7e61655700
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1] 0x7e61655780
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1] 0x7e61655800
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1] 0x7e61655880
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x7e61655900
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x7e61655980
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x7e61655a00
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1] 0x7e61655a80
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1] 0x7e61655b00
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1] 0x7e61655b80
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1] 0x7e61655c00
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1] 0x7e61655c80
	byte Direction;//[Offset: 0x1c, Size: 0x1] 0x7e61655d00
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x7e61655d80
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x7e61655e00
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1] 0x7e61655e80
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1] 0x7e61655f00
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1] 0x7e61655f80
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1] 0x7e61656000
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1] 0x7e61656080
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1] 0x7e61656100
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1] 0x7e61656180
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1] 0x7e61656200
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8] 0x7e84e5bbe0

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0x18] 0x7e61657080
	Vector LeftEnd;//[Offset: 0x48, Size: 0x18] 0x7e61657100
	Vector RightStart;//[Offset: 0x60, Size: 0x18] 0x7e61657180
	Vector RightEnd;//[Offset: 0x78, Size: 0x18] 0x7e61657200

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object

--------------------------------
Class: StatePerObjectConfig.Object
	FString PerObjectConfigSection;//[Offset: 0x50, Size: 0x10] 0x7e6190c580
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e6190c600

--------------------------------
Class: EscalationManagerConfig.StatePerObjectConfig.Object
	FString[] EscalationSeverity;//[Offset: 0x68, Size: 0x10] 0x7e61899de0

--------------------------------
Class: NetFaultConfig.EscalationManagerConfig.StatePerObjectConfig.Object

--------------------------------
Class: NetPushModelHelpers.BlueprintFunctionLibrary.Object
	void MarkPropertyDirtyFromRepIndex(Object* Object, int RepIndex, FName PropertyName);// 0x33c458ebd041 0x7e61b1d520
	void MarkPropertyDirty(Object* Object, FName PropertyName);// 0x33c358ebd041 0x7e61b1d600

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61b5b200
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7e61b5b280
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4] 0x7e61b5b300
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4] 0x7e61b5b380
	NetworkEmulationProfileDescription[] NetworkEmulationProfiles;//[Offset: 0x48, Size: 0x10] 0x7e61a59700

--------------------------------
Class: NetworkEmulationProfileDescription
	FString ProfileName;//[Offset: 0x0, Size: 0x10] 0x7e61656500
	FString ToolTip;//[Offset: 0x10, Size: 0x10] 0x7e61656580

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectElementAssetDataInterface.Object

--------------------------------
Class: ObjectElementCounterInterface.Object

--------------------------------
Class: ObjectElementObjectInterface.Object

--------------------------------
Class: ObjectElementSelectionInterface.Object

--------------------------------
Class: ObjectLibrary.Object
	ClassPtrProperty ObjectBaseClass;//[Size: 0x8] 0x7e61a59520
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61b5ab80
	Object*[] Objects;//[Offset: 0x38, Size: 0x10] 0x7e61a595c0
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10] 0x7e61a59660
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7e61b5ad00
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7e61b5ad80

--------------------------------
Class: ObjectReferencer.Object
	Object*[] ReferencedObjects;//[Offset: 0x28, Size: 0x10] 0x7e61a59480

--------------------------------
Class: ObjectTraceWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PackedLevelActor.LevelInstance.Actor.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bd, Size: 0x1] 0x7e61b5a800
	float DamagePerSec;//[Offset: 0x2c0, Size: 0x4] 0x7e61b5a880
	class DamageType* DamageType;//[Offset: 0x2c8, Size: 0x8] 0x7e61a593e0
	float PainInterval;//[Offset: 0x2d0, Size: 0x4] 0x7e61b5a900
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1] 0x7e61b5a980
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1] 0x7e61b5aa00
	Controller* DamageInstigator;//[Offset: 0x2d8, Size: 0x8] 0x7e61b5aa80

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7e61b5d480

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x30, Size: 0x60] 0x7e61b5d380
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61b5d400

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object
	Vector Acceleration;//[Offset: 0x30, Size: 0x18] 0x7e61b5d300

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x30, Size: 0x8] 0x7e61b5d200
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x38, Size: 0x30] 0x7e61b5d280

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragScale;//[Offset: 0x30, Size: 0x8] 0x7e61b5d100
	RawDistributionFloat DragScaleRaw;//[Offset: 0x38, Size: 0x30] 0x7e61b5d180

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector AccelOverLife;//[Offset: 0x30, Size: 0x60] 0x7e61b5d080

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object
	Vector EndPoint0;//[Offset: 0x30, Size: 0x18] 0x7e61b5ce80
	Vector EndPoint1;//[Offset: 0x48, Size: 0x18] 0x7e61b5cf00
	RawDistributionFloat Range;//[Offset: 0x60, Size: 0x30] 0x7e61b5cf80
	RawDistributionFloat Strength;//[Offset: 0x90, Size: 0x30] 0x7e61b5d000

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x7e61b5ca00
	RawDistributionFloat Range;//[Offset: 0x38, Size: 0x30] 0x7e61b5ca80
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61b5cb00
	RawDistributionFloat Strength;//[Offset: 0x70, Size: 0x30] 0x7e61b5cb80
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7e61b5cc00
	byte SelectionMethod;//[Offset: 0xa1, Size: 0x1] 0x7e61b5cc80
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1] 0x7e61b5cd00
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1] 0x7e61b5cd80
	int LastSelIndex;//[Offset: 0xa4, Size: 0x4] 0x7e61b5ce00

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x60] 0x7e61b5e480
	RawDistributionFloat Range;//[Offset: 0x90, Size: 0x30] 0x7e61b5e500
	RawDistributionFloat Strength;//[Offset: 0xc0, Size: 0x30] 0x7e61b5e580
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7e61b5e600
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7e61b5e680
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x7e61b5e700
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x7e61b5c680
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1] 0x7e61b5c700
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1] 0x7e61b5c780
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1] 0x7e61b5c800
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1] 0x7e61b5c880
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf1, Size: 0x1] 0x7e61b5c900
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf1, Size: 0x1] 0x7e61b5c980

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object
	Vector Position;//[Offset: 0x30, Size: 0x18] 0x7e61b5e280
	float Radius;//[Offset: 0x48, Size: 0x4] 0x7e61b5e300
	DistributionFloat* Strength;//[Offset: 0x50, Size: 0x8] 0x7e61b5e380
	RawDistributionFloat StrengthRaw;//[Offset: 0x58, Size: 0x30] 0x7e61b5e400

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x2b, Size: 0x1] 0x7e61b5de80
	BeamModifierOptions PositionOptions;//[Offset: 0x2c, Size: 0x4] 0x7e61b5df00
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x60] 0x7e61b5df80
	BeamModifierOptions TangentOptions;//[Offset: 0x90, Size: 0x4] 0x7e61b5e000
	RawDistributionVector Tangent;//[Offset: 0x98, Size: 0x60] 0x7e61b5e080
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x7e61b5e100
	BeamModifierOptions StrengthOptions;//[Offset: 0xfc, Size: 0x4] 0x7e61b5e180
	RawDistributionFloat Strength;//[Offset: 0x100, Size: 0x30] 0x7e61b5e200

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61657e00
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61657e80
	bool bLock;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61657f00

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7e61b5f580
	int Frequency;//[Offset: 0x2c, Size: 0x4] 0x7e61b5f600
	int Frequency_LowRange;//[Offset: 0x30, Size: 0x4] 0x7e61b5f680
	RawDistributionVector NoiseRange;//[Offset: 0x38, Size: 0x60] 0x7e61b5f700
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x98, Size: 0x30] 0x7e61b5f780
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x7e61b5d700
	RawDistributionVector NoiseSpeed;//[Offset: 0xd0, Size: 0x60] 0x7e61b5d780
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1] 0x7e61b5d800
	float NoiseLockRadius;//[Offset: 0x134, Size: 0x4] 0x7e61b5d880
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1] 0x7e61b5d900
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 0x1] 0x7e61b5d980
	float NoiseLockTime;//[Offset: 0x13c, Size: 0x4] 0x7e61b5da00
	float NoiseTension;//[Offset: 0x140, Size: 0x4] 0x7e61b5da80
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 0x1] 0x7e61b5db00
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0x148, Size: 0x30] 0x7e61b5db80
	int NoiseTessellation;//[Offset: 0x178, Size: 0x4] 0x7e61b5dc00
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17c, Size: 0x1] 0x7e61b5dc80
	float FrequencyDistance;//[Offset: 0x180, Size: 0x4] 0x7e61b5dd00
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x184, Size: 0x1] 0x7e61b5dd80
	RawDistributionFloat NoiseScale;//[Offset: 0x188, Size: 0x30] 0x7e61b5de00

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x7e61b5f080
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x7e61b5f100
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7e61b5f180
	RawDistributionVector Source;//[Offset: 0x38, Size: 0x60] 0x7e61b5f200
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7e61b5f280
	byte SourceTangentMethod;//[Offset: 0x99, Size: 0x1] 0x7e61b5f300
	RawDistributionVector SourceTangent;//[Offset: 0xa0, Size: 0x60] 0x7e61b5f380
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x7e61b5f400
	RawDistributionFloat SourceStrength;//[Offset: 0x108, Size: 0x30] 0x7e61b5f480
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1] 0x7e61b5f500

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x2b, Size: 0x1] 0x7e61b5eb00
	FName TargetName;//[Offset: 0x2c, Size: 0x8] 0x7e61b5eb80
	RawDistributionVector Target;//[Offset: 0x38, Size: 0x60] 0x7e61b5ec00
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7e61b5ec80
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98, Size: 0x1] 0x7e61b5ed00
	byte TargetTangentMethod;//[Offset: 0x99, Size: 0x1] 0x7e61b5ed80
	RawDistributionVector TargetTangent;//[Offset: 0xa0, Size: 0x60] 0x7e61b5ee00
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x7e61b5ee80
	RawDistributionFloat TargetStrength;//[Offset: 0x108, Size: 0x30] 0x7e61b5ef00
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1] 0x7e61b5ef80
	float LockRadius;//[Offset: 0x13c, Size: 0x4] 0x7e61b5f000

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object
	RawDistributionFloat CameraOffset;//[Offset: 0x30, Size: 0x30] 0x7e61b5e980
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7e61b5ea00
	byte UpdateMethod;//[Offset: 0x61, Size: 0x1] 0x7e61b5ea80

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x30, Size: 0x60] 0x7e61b5f980
	RawDistributionVector DampingFactorRotation;//[Offset: 0x90, Size: 0x60] 0x7e61b5fa00
	RawDistributionFloat MaxCollisions;//[Offset: 0xf0, Size: 0x30] 0x7e61b5fa80
	byte CollisionCompletionOption;//[Offset: 0x120, Size: 0x1] 0x7e61b5fb00
	byte[] CollisionTypes;//[Offset: 0x128, Size: 0x10] 0x7e61a5b780
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1] 0x7e61b5fc00
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1] 0x7e61b5fc80
	RawDistributionFloat ParticleMass;//[Offset: 0x148, Size: 0x30] 0x7e61b5fd00
	float DirScalar;//[Offset: 0x178, Size: 0x4] 0x7e61b5fd80
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17c, Size: 0x1] 0x7e61b5fe00
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17c, Size: 0x1] 0x7e61b5fe80
	float VerticalFudgeFactor;//[Offset: 0x180, Size: 0x4] 0x7e61b5ff00
	RawDistributionFloat DelayAmount;//[Offset: 0x188, Size: 0x30] 0x7e61b5ff80
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1] 0x7e61b5e780
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b8, Size: 0x1] 0x7e61b5e800
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b8, Size: 0x1] 0x7e61b5e880
	float MaxCollisionDistance;//[Offset: 0x1bc, Size: 0x4] 0x7e61b5e900

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x30, Size: 0x30] 0x7e61b70e00
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x60, Size: 0x30] 0x7e61b70e80
	float Friction;//[Offset: 0x90, Size: 0x4] 0x7e61b70f00
	float RandomSpread;//[Offset: 0x94, Size: 0x4] 0x7e61b70f80
	float RandomDistribution;//[Offset: 0x98, Size: 0x4] 0x7e61b71000
	float RadiusScale;//[Offset: 0x9c, Size: 0x4] 0x7e61b71080
	float RadiusBias;//[Offset: 0xa0, Size: 0x4] 0x7e61b5f800
	byte Response;//[Offset: 0xa4, Size: 0x1] 0x7e61b5f880
	byte CollisionMode;//[Offset: 0xa5, Size: 0x1] 0x7e61b5f900

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x30, Size: 0x60] 0x7e61b70c80
	RawDistributionFloat StartAlpha;//[Offset: 0x90, Size: 0x30] 0x7e61b70d00
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e61b70d80

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x30, Size: 0x60] 0x7e61b70b00
	RawDistributionFloat AlphaOverLife;//[Offset: 0x90, Size: 0x30] 0x7e61b70b80
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e61b70c00

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x60] 0x7e61b70980
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x90, Size: 0x30] 0x7e61b70a00
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e61b70a80

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xc8, Size: 0x20] 0x7e61b70900

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e61657f80
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e61658000
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7e61658080
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7e61658100
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7e61658180
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10] 0x7e84e5baa0

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7e61b70700

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x38, Size: 0x30] 0x7e61b70380
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61b70400
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7e61b70480
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x7e61b70500
	RawDistributionVector InheritVelocityScale;//[Offset: 0x70, Size: 0x60] 0x7e61b70580
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xd0, Size: 0x10] 0x7e61a5b640
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1] 0x7e61b70680

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x60] 0x7e61b70100
	RawDistributionVector UpperRightCorner;//[Offset: 0x90, Size: 0x60] 0x7e61b70180
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7e61b70200
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7e61b70280
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x7e61b70300

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionFloat Height;//[Offset: 0x30, Size: 0x30] 0x7e61b72000
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7e61b72080
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7e61b72100
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x7e61b70080

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat LifeTime;//[Offset: 0x30, Size: 0x30] 0x7e61b71f80

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x7e61b71f00

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x7e61b71900
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7e61b71980
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x7e61b71a00
	float SpawnFraction;//[Offset: 0x30, Size: 0x4] 0x7e61b71a80
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x60] 0x7e61b71b00
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x98, Size: 0x30] 0x7e61b71b80
	RawDistributionFloat RadiusScale;//[Offset: 0xc8, Size: 0x30] 0x7e61b71c00
	RawDistributionFloat LightExponent;//[Offset: 0xf8, Size: 0x30] 0x7e61b71c80
	LightingChannels LightingChannels;//[Offset: 0x128, Size: 0x1] 0x7e61b71d00
	float VolumetricScatteringIntensity;//[Offset: 0x12c, Size: 0x4] 0x7e61b71d80
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x7e61b71e00
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1] 0x7e61b71e80

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x138, Size: 0x20] 0x7e61b71880

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x30, Size: 0x60] 0x7e61b71700
	float DistributeOverNPoints;//[Offset: 0x90, Size: 0x4] 0x7e61b71780
	float DistributeThreshold;//[Offset: 0x94, Size: 0x4] 0x7e61b71800

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x7e61b71200
	Vector UniversalOffset;//[Offset: 0x30, Size: 0x18] 0x7e61b71280
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x48, Size: 0x10] 0x7e61a5b5a0
	byte SelectionMethod;//[Offset: 0x58, Size: 0x1] 0x7e61b71380
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x7e61b71400
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x7e61b71480
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x7e61b71500
	float InheritVelocityScale;//[Offset: 0x5c, Size: 0x4] 0x7e61b71580
	FName SkelMeshActorParamName;//[Offset: 0x60, Size: 0x8] 0x7e61b71600
	int NumPreSelectedIndices;//[Offset: 0x68, Size: 0x4] 0x7e61b71680

--------------------------------
Class: LocationBoneSocketInfo
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8] 0x7e61657880
	Vector Offset;//[Offset: 0x8, Size: 0x18] 0x7e61657900

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x30, Size: 0x60] 0x7e61b73100
	RawDistributionVector LocationOffset;//[Offset: 0x90, Size: 0x60] 0x7e61b73180
	RawDistributionVector ScaleFactor;//[Offset: 0xf0, Size: 0x60] 0x7e61b71100
	RawDistributionVector Direction;//[Offset: 0x150, Size: 0x60] 0x7e61b71180

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x7e61b72e00
	byte SelectionMethod;//[Offset: 0x34, Size: 0x1] 0x7e61b72e80
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1] 0x7e61b72f00
	float InheritSourceVelocityScale;//[Offset: 0x38, Size: 0x4] 0x7e61b72f80
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7e61b73000
	float InheritSourceRotationScale;//[Offset: 0x40, Size: 0x4] 0x7e61b73080

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x7e61b72d80

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7e61b72880
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7e61b72900
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x7e61b72980
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x7e61b72a00
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x7e61b72a80
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x7e61b72b00
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x7e61b72b80
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x7e61b72c00
	RawDistributionFloat VelocityScale;//[Offset: 0x30, Size: 0x30] 0x7e61b72c80
	RawDistributionVector StartLocation;//[Offset: 0x60, Size: 0x60] 0x7e61b72d00

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e61b72680
	RawDistributionFloat StartRadius;//[Offset: 0xc8, Size: 0x30] 0x7e61b72700
	RawDistributionFloat StartHeight;//[Offset: 0xf8, Size: 0x30] 0x7e61b72780
	byte HeightAxis;//[Offset: 0x128, Size: 0x1] 0x7e61b72800

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x130, Size: 0x20] 0x7e61b72600

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0xc0, Size: 0x30] 0x7e61b72580

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xf0, Size: 0x20] 0x7e61b72500

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartOffset;//[Offset: 0x30, Size: 0x60] 0x7e61b72300
	RawDistributionFloat Height;//[Offset: 0x90, Size: 0x30] 0x7e61b72380
	RawDistributionFloat Angle;//[Offset: 0xc0, Size: 0x30] 0x7e61b72400
	RawDistributionFloat Thickness;//[Offset: 0xf0, Size: 0x30] 0x7e61b72480

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x7e61b73c00
	Vector UniversalOffset;//[Offset: 0x30, Size: 0x18] 0x7e61b73c80
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61b73d00
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7e61b73d80
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1] 0x7e61b73e00
	float InheritVelocityScale;//[Offset: 0x4c, Size: 0x4] 0x7e61b73e80
	FName SkelMeshActorParamName;//[Offset: 0x50, Size: 0x8] 0x7e61b73f00
	FName[] ValidAssociatedBones;//[Offset: 0x58, Size: 0x10] 0x7e61a5b460
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61b74000
	Vector NormalToCompare;//[Offset: 0x70, Size: 0x18] 0x7e61b74080
	float NormalCheckToleranceDegrees;//[Offset: 0x88, Size: 0x4] 0x7e61b74100
	float NormalCheckTolerance;//[Offset: 0x8c, Size: 0x4] 0x7e61b74180
	int[] ValidMaterialIndices;//[Offset: 0x90, Size: 0x10] 0x7e61a5b500
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7e61b72180
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x7e61b72200
	uint32 InheritUVChannel;//[Offset: 0xa4, Size: 0x4] 0x7e61b72280

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x98, Size: 0x20] 0x7e61b73b80

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x98, Size: 0x20] 0x7e61b73b00

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MaterialInterface*[] MeshMaterials;//[Offset: 0x30, Size: 0x10] 0x7e61a5b3c0

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x60] 0x7e61b73980
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61b73a00

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x30, Size: 0x60] 0x7e61b73900

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x60] 0x7e61b73880

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector RotRate;//[Offset: 0x30, Size: 0x60] 0x7e61b73780
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61b73800

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x90, Size: 0x20] 0x7e61b73700

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x98, Size: 0x20] 0x7e61b73680

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x2b, Size: 0x1] 0x7e61b73200

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10] 0x7e61a5b320
	int UpdateFlags;//[Offset: 0x40, Size: 0x4] 0x7e61b75200
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7e61b75280

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7e61657400
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e61657480
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7e61657500
	byte ValueMethod;//[Offset: 0x9, Size: 0x1] 0x7e61657580
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7e61657600
	RawDistributionFloat ParamValue;//[Offset: 0x10, Size: 0x30] 0x7e61657680

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48, Size: 0x20] 0x7e61b75100

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object
	Vector2D PivotOffset;//[Offset: 0x30, Size: 0x10] 0x7e61b75080

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x30] 0x7e61b75a00

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat RotationOverLife;//[Offset: 0x30, Size: 0x30] 0x7e61b75900
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7e61b75980

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x30] 0x7e61b75880

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat LifeMultiplier;//[Offset: 0x30, Size: 0x30] 0x7e61b75800

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x7e61b75780

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x7e61b75700

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x60] 0x7e61b75680

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x60] 0x7e61b75480
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61b75500
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x7e61b75580
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x7e61b75600

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x30, Size: 0x60] 0x7e61b77380
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61b75300
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x7e61b75380
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x7e61b75400

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object
	Vector2D SpeedScale;//[Offset: 0x30, Size: 0x10] 0x7e61b77280
	Vector2D MaxScale;//[Offset: 0x40, Size: 0x10] 0x7e61b77300

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x90, Size: 0x20] 0x7e61b77200

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector SourceMovementScale;//[Offset: 0x30, Size: 0x60] 0x7e61b77180

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x2c, Size: 0x4] 0x7e61b76980
	float MovementTolerance;//[Offset: 0x30, Size: 0x4] 0x7e61b76a00
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x38, Size: 0x30] 0x7e61b76a80
	float MaxFrameDistance;//[Offset: 0x68, Size: 0x4] 0x7e61b76b00
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7e61b76b80
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x7e61b76c00
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x7e61b76c80
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x7e61b76d00

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8] 0x7e61b76800
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x30] 0x7e61b76880
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61b76900

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8] 0x7e61be4a80
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4] 0x7e61be4b00
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4] 0x7e61be4b80
	byte BoundingMode;//[Offset: 0x38, Size: 0x1] 0x7e61be4c00
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1] 0x7e61be4c80
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4] 0x7e61be4d00

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x7e61b76680
	RawDistributionFloat FrameRate;//[Offset: 0x70, Size: 0x30] 0x7e61b76700
	int StartingFrame;//[Offset: 0xa0, Size: 0x4] 0x7e61b76780

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x7e61b78380
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x7e61b78400
	RawDistributionFloat SourceStrength;//[Offset: 0x38, Size: 0x30] 0x7e61b76380
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61b76400
	int SourceOffsetCount;//[Offset: 0x6c, Size: 0x4] 0x7e61b76480
	Vector[] SourceOffsetDefaults;//[Offset: 0x70, Size: 0x10] 0x7e61a5b000
	byte SelectionMethod;//[Offset: 0x80, Size: 0x1] 0x7e61b76580
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x7e61b76600

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7e61b78000
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7e61b78080
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x7e61b78100
	float TilingDistance;//[Offset: 0x2c, Size: 0x4] 0x7e61b78180
	float DistanceTessellationStepSize;//[Offset: 0x30, Size: 0x4] 0x7e61b78200
	float TangentTessellationStepSize;//[Offset: 0x34, Size: 0x4] 0x7e61b78280
	float WidthTessellationStepSize;//[Offset: 0x38, Size: 0x4] 0x7e61b78300

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x2b, Size: 0x1] 0x7e61b77700
	int TextureTile;//[Offset: 0x2c, Size: 0x4] 0x7e61b77780
	float TextureTileDistance;//[Offset: 0x30, Size: 0x4] 0x7e61b77800
	int Sheets;//[Offset: 0x34, Size: 0x4] 0x7e61b77880
	int MaxBeamCount;//[Offset: 0x38, Size: 0x4] 0x7e61b77900
	float Speed;//[Offset: 0x3c, Size: 0x4] 0x7e61b77980
	int InterpolationPoints;//[Offset: 0x40, Size: 0x4] 0x7e61b77a00
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7e61b77a80
	int UpVectorStepSize;//[Offset: 0x48, Size: 0x4] 0x7e61b77b00
	FName BranchParentName;//[Offset: 0x4c, Size: 0x8] 0x7e61b77b80
	RawDistributionFloat Distance;//[Offset: 0x58, Size: 0x30] 0x7e61b77c00
	byte TaperMethod;//[Offset: 0x88, Size: 0x1] 0x7e61b77c80
	RawDistributionFloat TaperFactor;//[Offset: 0x90, Size: 0x30] 0x7e61b77d00
	RawDistributionFloat TaperScale;//[Offset: 0xc0, Size: 0x30] 0x7e61b77d80
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7e61b77e00
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7e61b77e80
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x7e61b77f00
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x7e61b77f80

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x30, Size: 0x340] 0x7e61b77500
	GPUSpriteResourceData ResourceData;//[Offset: 0x370, Size: 0x240] 0x7e61b77580
	float CameraMotionBlurAmount;//[Offset: 0x5b0, Size: 0x4] 0x7e61b77600
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b4, Size: 0x1] 0x7e61b77680

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x8] 0x7e6165a080
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x8, Size: 0x8] 0x7e6165a100
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x10, Size: 0x8] 0x7e6165a180
	ParticleModule*[] SpawnModules;//[Offset: 0x18, Size: 0x10] 0x7e84e5e2a0
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x30, Size: 0xd0] 0x7e6165a280
	FloatDistribution VectorFieldScale;//[Offset: 0x100, Size: 0x20] 0x7e6165a300
	FloatDistribution DragCoefficient;//[Offset: 0x120, Size: 0x20] 0x7e6165a380
	FloatDistribution PointAttractorStrength;//[Offset: 0x140, Size: 0x20] 0x7e6165a400
	FloatDistribution Resilience;//[Offset: 0x160, Size: 0x20] 0x7e6165a480
	Vector ConstantAcceleration;//[Offset: 0x180, Size: 0x18] 0x7e6165a500
	Vector PointAttractorPosition;//[Offset: 0x198, Size: 0x18] 0x7e61658480
	float PointAttractorRadiusSq;//[Offset: 0x1b0, Size: 0x4] 0x7e61658500
	Vector OrbitOffsetBase;//[Offset: 0x1b8, Size: 0x18] 0x7e61658580
	Vector OrbitOffsetRange;//[Offset: 0x1d0, Size: 0x18] 0x7e61658600
	Vector2D InvMaxSize;//[Offset: 0x1e8, Size: 0x10] 0x7e61658680
	float InvRotationRateScale;//[Offset: 0x1f8, Size: 0x4] 0x7e61658700
	float MaxLifetime;//[Offset: 0x1fc, Size: 0x4] 0x7e61658780
	int MaxParticleCount;//[Offset: 0x200, Size: 0x4] 0x7e61658800
	byte ScreenAlignment;//[Offset: 0x204, Size: 0x1] 0x7e61658880
	byte LockAxisFlag;//[Offset: 0x205, Size: 0x1] 0x7e61658900
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1] 0x7e61658980
	byte CollisionMode;//[Offset: 0x207, Size: 0x1] 0x7e61658a00
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x7e61658a80
	float MinFacingCameraBlendDistance;//[Offset: 0x20c, Size: 0x4] 0x7e61658b00
	float MaxFacingCameraBlendDistance;//[Offset: 0x210, Size: 0x4] 0x7e61658b80
	RawDistributionVector DynamicColor;//[Offset: 0x218, Size: 0x60] 0x7e61658c00
	RawDistributionFloat DynamicAlpha;//[Offset: 0x278, Size: 0x30] 0x7e61658c80
	RawDistributionVector DynamicColorScale;//[Offset: 0x2a8, Size: 0x60] 0x7e61658d00
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x308, Size: 0x30] 0x7e61658d80

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0, Size: 0x8] 0x7e61658e00
	Transform Transform;//[Offset: 0x10, Size: 0x60] 0x7e61658e80
	Rotator MinInitialRotation;//[Offset: 0x70, Size: 0x18] 0x7e61658f00
	Rotator MaxInitialRotation;//[Offset: 0x88, Size: 0x18] 0x7e61658f80
	Rotator RotationRate;//[Offset: 0xa0, Size: 0x18] 0x7e61659000
	float Intensity;//[Offset: 0xb8, Size: 0x4] 0x7e61659080
	float Tightness;//[Offset: 0xbc, Size: 0x4] 0x7e61659100
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e61659180
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x7e61659200
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x7e61659280
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x7e61659300
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x7e61659380

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x28, Size: 0x38] 0x7e61bebd80
	float Intensity;//[Offset: 0x60, Size: 0x4] 0x7e61bebe00

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x7e84883400

--------------------------------
Class: GPUSpriteResourceData
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0x10] 0x7e84e5e0c0
	Color[] QuantizedMiscSamples;//[Offset: 0x10, Size: 0x10] 0x7e84e5e160
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x20, Size: 0x10] 0x7e84e5e200
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x20] 0x7e6165af00
	Vector4 ColorBias;//[Offset: 0x50, Size: 0x20] 0x7e6165af80
	Vector4 MiscScale;//[Offset: 0x70, Size: 0x20] 0x7e6165b000
	Vector4 MiscBias;//[Offset: 0x90, Size: 0x20] 0x7e6165b080
	Vector4 SimulationAttrCurveScale;//[Offset: 0xb0, Size: 0x20] 0x7e6165b100
	Vector4 SimulationAttrCurveBias;//[Offset: 0xd0, Size: 0x20] 0x7e6165b180
	Vector4 SubImageSize;//[Offset: 0xf0, Size: 0x20] 0x7e6165b200
	Vector4 SizeBySpeed;//[Offset: 0x110, Size: 0x20] 0x7e6165b280
	Vector ConstantAcceleration;//[Offset: 0x130, Size: 0x18] 0x7e6165b300
	Vector OrbitOffsetBase;//[Offset: 0x148, Size: 0x18] 0x7e6165b380
	Vector OrbitOffsetRange;//[Offset: 0x160, Size: 0x18] 0x7e6165b400
	Vector OrbitFrequencyBase;//[Offset: 0x178, Size: 0x18] 0x7e6165b480
	Vector OrbitFrequencyRange;//[Offset: 0x190, Size: 0x18] 0x7e6165b500
	Vector OrbitPhaseBase;//[Offset: 0x1a8, Size: 0x18] 0x7e6165b580
	Vector OrbitPhaseRange;//[Offset: 0x1c0, Size: 0x18] 0x7e61659500
	float GlobalVectorFieldScale;//[Offset: 0x1d8, Size: 0x4] 0x7e61659580
	float GlobalVectorFieldTightness;//[Offset: 0x1dc, Size: 0x4] 0x7e61659600
	float PerParticleVectorFieldScale;//[Offset: 0x1e0, Size: 0x4] 0x7e61659680
	float PerParticleVectorFieldBias;//[Offset: 0x1e4, Size: 0x4] 0x7e61659700
	float DragCoefficientScale;//[Offset: 0x1e8, Size: 0x4] 0x7e61659780
	float DragCoefficientBias;//[Offset: 0x1ec, Size: 0x4] 0x7e61659800
	float ResilienceScale;//[Offset: 0x1f0, Size: 0x4] 0x7e61659880
	float ResilienceBias;//[Offset: 0x1f4, Size: 0x4] 0x7e61659900
	float CollisionRadiusScale;//[Offset: 0x1f8, Size: 0x4] 0x7e61659980
	float CollisionRadiusBias;//[Offset: 0x1fc, Size: 0x4] 0x7e61659a00
	float CollisionTimeBias;//[Offset: 0x200, Size: 0x4] 0x7e61659a80
	float CollisionRandomSpread;//[Offset: 0x204, Size: 0x4] 0x7e61659b00
	float CollisionRandomDistribution;//[Offset: 0x208, Size: 0x4] 0x7e61659b80
	float OneMinusFriction;//[Offset: 0x20c, Size: 0x4] 0x7e61659c00
	float RotationRateScale;//[Offset: 0x210, Size: 0x4] 0x7e61659c80
	float CameraMotionBlurAmount;//[Offset: 0x214, Size: 0x4] 0x7e61659d00
	byte ScreenAlignment;//[Offset: 0x218, Size: 0x1] 0x7e61659d80
	byte LockAxisFlag;//[Offset: 0x219, Size: 0x1] 0x7e61659e00
	Vector2D PivotOffset;//[Offset: 0x220, Size: 0x10] 0x7e61659e80
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1] 0x7e61659f00
	float MinFacingCameraBlendDistance;//[Offset: 0x234, Size: 0x4] 0x7e61659f80
	float MaxFacingCameraBlendDistance;//[Offset: 0x238, Size: 0x4] 0x7e6165a000

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* Mesh;//[Offset: 0x30, Size: 0x8] 0x7e61b78d80
	float LODSizeScale;//[Offset: 0x40, Size: 0x4] 0x7e61b78e00
	bool bUseStaticMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7e61b78e80
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x7e61b78f00
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x7e61b78f80
	byte MeshAlignment;//[Offset: 0x45, Size: 0x1] 0x7e61b79000
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46, Size: 0x1] 0x7e61b79080
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46, Size: 0x1] 0x7e61b79100
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46, Size: 0x1] 0x7e61b79180
	RawDistributionVector RollPitchYawRange;//[Offset: 0x48, Size: 0x60] 0x7e61b79200
	byte AxisLockOption;//[Offset: 0xa8, Size: 0x1] 0x7e61b79280
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x7e61b79300
	byte CameraFacingUpAxisOption;//[Offset: 0xaa, Size: 0x1] 0x7e61b79380
	byte CameraFacingOption;//[Offset: 0xab, Size: 0x1] 0x7e61b79400
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7e61b79480
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x7e61b77400
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1] 0x7e61b77480

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x2c, Size: 0x4] 0x7e61b7a480
	int SheetsPerTrail;//[Offset: 0x30, Size: 0x4] 0x7e61b7a500
	int MaxTrailCount;//[Offset: 0x34, Size: 0x4] 0x7e61b78480
	int MaxParticleInTrailCount;//[Offset: 0x38, Size: 0x4] 0x7e61b78500
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7e61b78580
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7e61b78600
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7e61b78680
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x7e61b78700
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x7e61b78780
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x7e61b78800
	byte RenderAxis;//[Offset: 0x3d, Size: 0x1] 0x7e61b78880
	float TangentSpawningScalar;//[Offset: 0x40, Size: 0x4] 0x7e61b78900
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7e61b78980
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x7e61b78a00
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x7e61b78a80
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1] 0x7e61b78b00
	float TilingDistance;//[Offset: 0x48, Size: 0x4] 0x7e61b78b80
	float DistanceTessellationStepSize;//[Offset: 0x4c, Size: 0x4] 0x7e61b78c00
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e61b78c80
	float TangentTessellationScalar;//[Offset: 0x54, Size: 0x4] 0x7e61b78d00

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7e61b7a300
	float GlobalVectorFieldScale;//[Offset: 0x2c, Size: 0x4] 0x7e61b7a380
	float GlobalVectorFieldTightness;//[Offset: 0x30, Size: 0x4] 0x7e61b7a400

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8] 0x7e61b79d80
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0x18] 0x7e61b79e00
	Rotator RelativeRotation;//[Offset: 0x50, Size: 0x18] 0x7e61b79e80
	Vector RelativeScale3D;//[Offset: 0x68, Size: 0x18] 0x7e61b79f00
	float Intensity;//[Offset: 0x80, Size: 0x4] 0x7e61b79f80
	float Tightness;//[Offset: 0x84, Size: 0x4] 0x7e61b7a000
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7e61b7a080
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x7e61b7a100
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88, Size: 0x1] 0x7e61b7a180
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1] 0x7e61b7a200
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1] 0x7e61b7a280

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector MinInitialRotation;//[Offset: 0x30, Size: 0x18] 0x7e61b79c80
	Vector MaxInitialRotation;//[Offset: 0x48, Size: 0x18] 0x7e61b79d00

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector RotationRate;//[Offset: 0x30, Size: 0x18] 0x7e61b79c00

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8] 0x7e61b79b00
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x30] 0x7e61b79b80

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x30, Size: 0x8] 0x7e61b79a00
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x38, Size: 0x30] 0x7e61b79a80

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7e61b79900
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7e61b79980

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x30, Size: 0x60] 0x7e61b79800
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x90, Size: 0x30] 0x7e61b79880

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionFloat Angle;//[Offset: 0x30, Size: 0x30] 0x7e61b79680
	RawDistributionFloat Velocity;//[Offset: 0x60, Size: 0x30] 0x7e61b79700
	Vector Direction;//[Offset: 0x90, Size: 0x18] 0x7e61b79780

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x30, Size: 0x60] 0x7e61b79600

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x30, Size: 0x60] 0x7e61b79500
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61b79580

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xc0, Size: 0x20] 0x7e61b7b580

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7e61b7ec00
	Vector LastRemoteNoisePosition;//[Offset: 0xb8, Size: 0x18] 0x7e61b7ec80
	float NoiseLifetime;//[Offset: 0xd0, Size: 0x4] 0x7e61b7ed00
	float LastRemoteNoiseVolume;//[Offset: 0xd4, Size: 0x4] 0x7e61b7ed80
	float LastRemoteNoiseTime;//[Offset: 0xd8, Size: 0x4] 0x7e61b7ee00
	float LastLocalNoiseVolume;//[Offset: 0xdc, Size: 0x4] 0x7e61b7ee80
	float LastLocalNoiseTime;//[Offset: 0xe0, Size: 0x4] 0x7e61b7ef00
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0x33de58ebd041 0x7e61b1f3c0

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xb0, Size: 0x4] 0x7e61b7fd00
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xb8, Size: 0x8] 0x7e61b7fd80
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0x33e458ebd041 0x7e61b1ee80
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0x33e358ebd041 0x7e61b1ef60
	Transform GetBodyTargetTransform(FName BodyName);// 0x33e258ebd041 0x7e61b1f040
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0x33e158ebd041 0x7e61b1f120
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0x33e058ebd041 0x7e61b1f200
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0x33df58ebd041 0x7e61b1f2e0

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x278, Size: 0x8] 0x7e61b80b00
	Actor* ConstraintActor1;//[Offset: 0x280, Size: 0x8] 0x7e61b80b80
	Actor* ConstraintActor2;//[Offset: 0x288, Size: 0x8] 0x7e61b80c00
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x7e61b80c80

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x2b0, Size: 0x8] 0x7e61b82400
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2b8, Size: 0x8] 0x7e61b82480
	Actor* ConstraintActor2;//[Offset: 0x2c0, Size: 0x8] 0x7e61b82500
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2c8, Size: 0x8] 0x7e61b82580
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x2e0, Size: 0x8] 0x7e61b82600
	delegate OnConstraintBroken;//[Offset: 0x2e8, Size: 0x10] 0x7e61b82680
	delegate OnPlasticDeformation;//[Offset: 0x2f8, Size: 0x10] 0x7e61b82700
	ConstraintInstance ConstraintInstance;//[Offset: 0x308, Size: 0x270] 0x7e61b82780
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x340b58ebd041 0x7e61b90240
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x340a58ebd041 0x7e61b90320
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x340958ebd041 0x7e61b90400
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x340858ebd041 0x7e61b904e0
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x340758ebd041 0x7e61b905c0
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x340658ebd041 0x7e61b906a0
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x340558ebd041 0x7e61b90780
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x340458ebd041 0x7e61b90860
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x340358ebd041 0x7e61b90940
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, byte PlasticityType);// 0x340258ebd041 0x7e61b90a20
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x340158ebd041 0x7e61b90b00
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x340058ebd041 0x7e61b90be0
	void SetDisableCollision(bool bDisableCollision);// 0x33ff58ebd041 0x7e61b90cc0
	void SetContactTransferScale(float ContactTransferScale);// 0x33fe58ebd041 0x7e61b90da0
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x33fd58ebd041 0x7e61b90e80
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x33fc58ebd041 0x7e61b90f60
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x33fb58ebd041 0x7e61b91040
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x33fa58ebd041 0x7e61b91120
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x33f958ebd041 0x7e61b91200
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x33f858ebd041 0x7e61b912e0
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x33f758ebd041 0x7e61b913c0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x33f658ebd041 0x7e61b914a0
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x33f558ebd041 0x7e61b91580
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x33f458ebd041 0x7e61b91660
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x33f358ebd041 0x7e61b91740
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold);// 0x33f258ebd041 0x7e61b91820
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x33f158ebd041 0x7e61b91900
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x33f058ebd041 0x7e61b919e0
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x33ef58ebd041 0x7e61b91ac0
	void SetAngularDriveMode(byte DriveMode);// 0x33ee58ebd041 0x7e61b91ba0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x342f58ebd041 0x7e61b91c80
	bool IsBroken();// 0x33ec58ebd041 0x7e61b1e780
	float GetCurrentTwist();// 0x33eb58ebd041 0x7e61b1e860
	float GetCurrentSwing2();// 0x33ea58ebd041 0x7e61b1e940
	float GetCurrentSwing1();// 0x33e958ebd041 0x7e61b1ea20
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x33e858ebd041 0x7e61b1eb00
	ConstraintInstanceAccessor GetConstraint();// 0x33e758ebd041 0x7e61b1ebe0
	void GetConstrainedComponents(out PrimitiveComponent* OutComponent1, out FName OutBoneName1, out PrimitiveComponent* OutComponent2, out FName OutBoneName2);// 0x33e658ebd041 0x7e61b1ecc0
	void BreakConstraint();// 0x33e558ebd041 0x7e61b1eda0

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x7e61642000

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xb0, Size: 0x8] 0x7e61b83380
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x7e61b83400
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x7e61b83480
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x7e61b83500
	float LinearDamping;//[Offset: 0xc4, Size: 0x4] 0x7e61b83580
	float LinearStiffness;//[Offset: 0xc8, Size: 0x4] 0x7e61b83600
	float AngularDamping;//[Offset: 0xcc, Size: 0x4] 0x7e61b83680
	float AngularStiffness;//[Offset: 0xd0, Size: 0x4] 0x7e61b83700
	float InterpolationSpeed;//[Offset: 0x1a0, Size: 0x4] 0x7e61b83780
	void SetTargetRotation(Rotator NewRotation);// 0x341958ebd041 0x7e61b92fc0
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0x341858ebd041 0x7e61b930a0
	void SetTargetLocation(Vector NewLocation);// 0x341758ebd041 0x7e61b93180
	void SetLinearStiffness(float NewLinearStiffness);// 0x341658ebd041 0x7e61b93260
	void SetLinearDamping(float NewLinearDamping);// 0x341558ebd041 0x7e61b93340
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0x341458ebd041 0x7e61b93420
	void SetAngularStiffness(float NewAngularStiffness);// 0x341358ebd041 0x7e61b93500
	void SetAngularDamping(float NewAngularDamping);// 0x341258ebd041 0x7e61b935e0
	void ReleaseComponent();// 0x341158ebd041 0x7e61b936c0
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0x341058ebd041 0x7e61b937a0
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0x340f58ebd041 0x7e61b93880
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0x345058ebd041 0x7e61b93960
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0x340d58ebd041 0x7e61b90080
	PrimitiveComponent* GetGrabbedComponent();// 0x340c58ebd041 0x7e61b90160

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x2b0, Size: 0x4] 0x7e61b86280
	float SpringDamping;//[Offset: 0x2b4, Size: 0x4] 0x7e61b86300
	float SpringLengthAtRest;//[Offset: 0x2b8, Size: 0x4] 0x7e61b84280
	float SpringRadius;//[Offset: 0x2bc, Size: 0x4] 0x7e61b84300
	byte SpringChannel;//[Offset: 0x2c0, Size: 0x1] 0x7e61b84380
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x7e61b84400
	float SpringCompression;//[Offset: 0x2c4, Size: 0x4] 0x7e61b84480
	Vector GetSpringRestingPoint();// 0x341d58ebd041 0x7e61b92c40
	Vector GetSpringDirection();// 0x341c58ebd041 0x7e61b92d20
	Vector GetSpringCurrentEndPoint();// 0x341b58ebd041 0x7e61b92e00
	float GetNormalizedCompressionScalar();// 0x341a58ebd041 0x7e61b92ee0

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x278, Size: 0x8] 0x7e61b86200

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x2b0, Size: 0x4] 0x7e61b86180

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x278, Size: 0x8] 0x7e61b86080
	SceneComponent* SceneComponent;//[Offset: 0x280, Size: 0x8] 0x7e61b86100

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x288, Size: 0x8] 0x7e61b85f00
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x7e61b85f80
	void OnInterpToggle(bool bEnable);// 0x341e58ebd041 0x7e61b92b60

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x368, Size: 0x8] 0x7e61b86c80
	float NormalDistortionStrength;//[Offset: 0x370, Size: 0x4] 0x7e61b86d00
	float PrefilterRoughness;//[Offset: 0x374, Size: 0x4] 0x7e61b86d80
	float PrefilterRoughnessDistance;//[Offset: 0x378, Size: 0x4] 0x7e61b86e00
	int ScreenPercentage;//[Offset: 0x37c, Size: 0x4] 0x7e61b86e80
	float ExtraFOV;//[Offset: 0x380, Size: 0x4] 0x7e61b86f00
	float DistanceFromPlaneFadeStart;//[Offset: 0x384, Size: 0x4] 0x7e61b86f80
	float DistanceFromPlaneFadeEnd;//[Offset: 0x388, Size: 0x4] 0x7e61b87000
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x38c, Size: 0x4] 0x7e61b87080
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x390, Size: 0x4] 0x7e61b87100
	float AngleFromPlaneFadeStart;//[Offset: 0x394, Size: 0x4] 0x7e61b87180
	float AngleFromPlaneFadeEnd;//[Offset: 0x398, Size: 0x4] 0x7e61b87200
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1] 0x7e61b87280
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1] 0x7e61b87300

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2b0, Size: 0x1] 0x7e61a5c680
	byte CaptureSource;//[Offset: 0x2b1, Size: 0x1] 0x7e61b85300
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b2, Size: 0x1] 0x7e61b85380
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b2, Size: 0x1] 0x7e61b85400
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 0x1] 0x7e61b85480
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2b8, Size: 0x10] 0x7e61a5c720
	Actor*[] HiddenActors;//[Offset: 0x2c8, Size: 0x10] 0x7e61a5c7c0
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2d8, Size: 0x10] 0x7e61a5c860
	Actor*[] ShowOnlyActors;//[Offset: 0x2e8, Size: 0x10] 0x7e61a5c900
	float LODDistanceFactor;//[Offset: 0x2f8, Size: 0x4] 0x7e61b85700
	float MaxViewDistanceOverride;//[Offset: 0x2fc, Size: 0x4] 0x7e61b85780
	int CaptureSortPriority;//[Offset: 0x300, Size: 0x4] 0x7e61b85800
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1] 0x7e61b85880
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x308, Size: 0x10] 0x7e61a5c9a0
	FString ProfilingEventName;//[Offset: 0x348, Size: 0x10] 0x7e61b85980
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x342758ebd041 0x7e61b92380
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x342658ebd041 0x7e61b92460
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x342558ebd041 0x7e61b92540
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x342458ebd041 0x7e61b92620
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x342358ebd041 0x7e61b92700
	void HideComponent(PrimitiveComponent* InComponent);// 0x342258ebd041 0x7e61b927e0
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x342158ebd041 0x7e61b928c0
	void ClearShowOnlyComponents();// 0x342058ebd041 0x7e61b929a0
	void ClearHiddenComponents();// 0x341f58ebd041 0x7e61b92a80

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10] 0x7e61663c00
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e61663c80

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x328, Size: 0x4] 0x7e61b86b00
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x330, Size: 0x8] 0x7e61b86b80
	BoxComponent* PreviewCaptureBox;//[Offset: 0x338, Size: 0x8] 0x7e61b86c00

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xb0, Size: 0x10] 0x7e84e62c00
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc0, Size: 0x10] 0x7e84e62c80
	bool SupportsConvertibleLaptops();// 0xc8958ebd041 0x7e84e1b060
	void PlatformEventDelegate__DelegateSignature();// 0xc8858ebd041 0x7e84e1b140
	bool IsInTabletMode();// 0xc8758ebd041 0x7e84e1b220
	bool IsInLaptopMode();// 0xc8658ebd041 0x7e84e1b300

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x28, Size: 0x10] 0x7e61b86580
	int ResponseCode;//[Offset: 0x38, Size: 0x4] 0x7e61b86600
	int Tag;//[Offset: 0x3c, Size: 0x4] 0x7e61b86680
	FString StringResponse;//[Offset: 0x40, Size: 0x10] 0x7e61b86700
	byte[] BinaryResponse;//[Offset: 0x50, Size: 0x10] 0x7e61a5c5e0
	int GetNumHeaders();// 0x342a58ebd041 0x7e61b920e0
	FString GetHeaderValue(FString HeaderName);// 0x342958ebd041 0x7e61b921c0
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0x342858ebd041 0x7e61b922a0

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x29c, Size: 0x8] 0x7e61b8b380

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x288, Size: 0x8] 0x7e61b8a600
	void SetRadius(float NewRadius);// 0x346158ebd041 0x7e61b96440
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x346058ebd041 0x7e61b96520

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0x349b58ebd041 0x7e61b9a500
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0x349a58ebd041 0x7e61b9a5e0
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0x349958ebd041 0x7e61b9a6c0
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0x349858ebd041 0x7e61b9a7a0
	void ResetBoneTransformByName(FName BoneName);// 0x349758ebd041 0x7e61b9a880
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0x349658ebd041 0x7e61b9a960
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0x349558ebd041 0x7e61b9aa40
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0x349458ebd041 0x7e61b9ab20
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0x349358ebd041 0x7e61b9ac00
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0x34d458ebd041 0x7e61b9ace0

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 0x60] 0x7e61ba0a00
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7e61ba0a80
	int BasePoseIndex;//[Offset: 0xe4, Size: 0x4] 0x7e61ba0b00
	FName RetargetSource;//[Offset: 0xe8, Size: 0x8] 0x7e61ba0b80
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0xf0, Size: 0x10] 0x7e61a5dc60

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0x10] 0x7e84e5d800
	FName[] Tracks;//[Offset: 0x10, Size: 0x10] 0x7e84e5d8a0
	int[] TrackBoneIndices;//[Offset: 0x20, Size: 0x10] 0x7e84e5d940
	PoseAssetInfluences[] TrackPoseInfluenceIndices;//[Offset: 0x30, Size: 0x10] 0x7e84e5d9e0
	PoseData[] Poses;//[Offset: 0x40, Size: 0x10] 0x7e84e5da80
	AnimCurveBase[] Curves;//[Offset: 0x50, Size: 0x10] 0x7e84e5db20

--------------------------------
Class: PoseAssetInfluences
	PoseAssetInfluence[] Influences;//[Offset: 0x0, Size: 0x10] 0x7e84e5dbc0

--------------------------------
Class: PoseAssetInfluence
	int PoseIndex;//[Offset: 0x0, Size: 0x4] 0x7e6165e200
	int BoneTransformIndex;//[Offset: 0x4, Size: 0x4] 0x7e6165e280

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0x10] 0x7e84e5dc60
	float[] CurveData;//[Offset: 0x10, Size: 0x10] 0x7e84e5dd00

--------------------------------
Class: PoseWatchFolder.Object

--------------------------------
Class: PoseWatch.Object

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x2c0, Size: 0x6b0] 0x7e61ba0600
	float Priority;//[Offset: 0x970, Size: 0x4] 0x7e61ba0680
	float BlendRadius;//[Offset: 0x974, Size: 0x4] 0x7e61ba0700
	float BlendWeight;//[Offset: 0x978, Size: 0x4] 0x7e61ba0780
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x97c, Size: 0x1] 0x7e61ba0800
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x97c, Size: 0x1] 0x7e61ba0880
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x349c58ebd041 0x7e61b9a420

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x2c0, Size: 0x6b0] 0x7e61ba0200
	float Priority;//[Offset: 0x970, Size: 0x4] 0x7e61ba0280
	float BlendRadius;//[Offset: 0x974, Size: 0x4] 0x7e61ba0300
	float BlendWeight;//[Offset: 0x978, Size: 0x4] 0x7e61ba0380
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x97c, Size: 0x1] 0x7e61ba0400
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x97c, Size: 0x1] 0x7e61ba0480
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x349d58ebd041 0x7e61b9a340

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	Actor*[] OverrideVisibleActors;//[Offset: 0x2b0, Size: 0x10] 0x7e61a5da80
	Actor*[] OverrideInvisibleActors;//[Offset: 0x2c0, Size: 0x10] 0x7e61a5db20
	FName[] OverrideInvisibleLevels;//[Offset: 0x2d0, Size: 0x10] 0x7e61a5dbc0

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x7e61ba2080
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10] 0x7e61a5d9e0

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28] 0x7e6165dc00

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 0xc] 0x7e61ba1e00
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7e61ba1e80
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7e61ba1f00
	Object*[] ExplicitAssets;//[Offset: 0x40, Size: 0x10] 0x7e61a5d800
	class Object[] ExplicitBlueprints;//[Offset: 0x50, Size: 0x10] 0x7e61a5d940
	CollectionReference AssetCollection;//[Offset: 0x60, Size: 0x8] 0x7e61ba2000

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0, Size: 0x8] 0x7e61641f80

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x114, Size: 0x4] 0x7e84e64700
	float MaxSpeed;//[Offset: 0x118, Size: 0x4] 0x7e84e64780
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1] 0x7e84e64800
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11c, Size: 0x1] 0x7e84e64880
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11c, Size: 0x1] 0x7e84e64900
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11c, Size: 0x1] 0x7e84e64980
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11c, Size: 0x1] 0x7e84e64a00
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11c, Size: 0x1] 0x7e84e64a80
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11c, Size: 0x1] 0x7e84e64b00
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11c, Size: 0x1] 0x7e84e64b80
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11d, Size: 0x1] 0x7e84e64c00
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11d, Size: 0x1] 0x7e84e64c80
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11d, Size: 0x1] 0x7e84e64d00
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11d, Size: 0x1] 0x7e84e64d80
	float PreviousHitTime;//[Offset: 0x120, Size: 0x4] 0x7e84e64e00
	Vector PreviousHitNormal;//[Offset: 0x128, Size: 0x18] 0x7e84e64e80
	float ProjectileGravityScale;//[Offset: 0x140, Size: 0x4] 0x7e84e64f00
	float Buoyancy;//[Offset: 0x144, Size: 0x4] 0x7e84e64f80
	float Bounciness;//[Offset: 0x148, Size: 0x4] 0x7e84e65000
	float Friction;//[Offset: 0x14c, Size: 0x4] 0x7e84e65080
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x150, Size: 0x4] 0x7e84e65100
	float MinFrictionFraction;//[Offset: 0x154, Size: 0x4] 0x7e84e65180
	delegate OnProjectileBounce;//[Offset: 0x158, Size: 0x10] 0x7e84e65200
	delegate OnProjectileStop;//[Offset: 0x168, Size: 0x10] 0x7e84e65280
	float HomingAccelerationMagnitude;//[Offset: 0x178, Size: 0x4] 0x7e84e63200
	SceneComponent* HomingTargetComponent;//[Offset: 0x17c, Size: 0x8] 0x7e84e63280
	float MaxSimulationTimeStep;//[Offset: 0x184, Size: 0x4] 0x7e84e63300
	int MaxSimulationIterations;//[Offset: 0x188, Size: 0x4] 0x7e84e63380
	int BounceAdditionalIterations;//[Offset: 0x18c, Size: 0x4] 0x7e84e63400
	float InterpLocationTime;//[Offset: 0x190, Size: 0x4] 0x7e84e63480
	float InterpRotationTime;//[Offset: 0x194, Size: 0x4] 0x7e84e63500
	float InterpLocationMaxLagDistance;//[Offset: 0x198, Size: 0x4] 0x7e84e63580
	float InterpLocationSnapToTargetDistance;//[Offset: 0x19c, Size: 0x4] 0x7e84e63600
	void StopSimulating(out const HitResult HitResult);// 0xca558ebd041 0x7e84e1d520
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xca458ebd041 0x7e84e1d600
	void SetInterpolatedComponent(SceneComponent* Component);// 0xca358ebd041 0x7e84e1d6e0
	void ResetInterpolation();// 0xca258ebd041 0x7e84e1d7c0
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xca158ebd041 0x7e84e1d8a0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xca058ebd041 0x7e84e1d980
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0xc9f58ebd041 0x7e84e1da60
	Vector LimitVelocity(Vector NewVelocity);// 0xc9e58ebd041 0x7e84e1db40
	bool IsVelocityUnderSimulationThreshold();// 0xc9d58ebd041 0x7e84e1dc20
	bool IsInterpolationComplete();// 0xc9c58ebd041 0x7e84e1dd00

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x7e61ba1d80

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x278, Size: 0x8] 0x7e61ba1d00
	void ToggleForce();// 0x34a158ebd041 0x7e61b99fc0
	void FireImpulse();// 0x34a058ebd041 0x7e61b9a0a0
	void EnableForce();// 0x349f58ebd041 0x7e61b9a180
	void DisableForce();// 0x349e58ebd041 0x7e61b9a260

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x2b0, Size: 0x4] 0x7e61ba1800
	byte Falloff;//[Offset: 0x2b4, Size: 0x1] 0x7e61ba1880
	float ImpulseStrength;//[Offset: 0x2b8, Size: 0x4] 0x7e61ba1900
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1] 0x7e61ba1980
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 0x1] 0x7e61ba1a00
	float ForceStrength;//[Offset: 0x2c0, Size: 0x4] 0x7e61ba1a80
	float DestructibleDamage;//[Offset: 0x2c4, Size: 0x4] 0x7e61ba1b00
	byte[] ObjectTypesToAffect;//[Offset: 0x2c8, Size: 0x10] 0x7e61a5d760
	void RemoveObjectTypeToAffect(byte ObjectType);// 0x34a458ebd041 0x7e61b99d20
	void FireImpulse();// 0x34a358ebd041 0x7e61b99e00
	void AddObjectTypeToAffect(byte ObjectType);// 0x34a258ebd041 0x7e61b99ee0

--------------------------------
Class: RectLight.Light.Actor.Object
	RectLightComponent* RectLightComponent;//[Offset: 0x288, Size: 0x8] 0x7e61ba1780

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x3f0, Size: 0x4] 0x7e61ba1280
	float SourceHeight;//[Offset: 0x3f4, Size: 0x4] 0x7e61ba1300
	float BarnDoorAngle;//[Offset: 0x3f8, Size: 0x4] 0x7e61ba1380
	float BarnDoorLength;//[Offset: 0x3fc, Size: 0x4] 0x7e61ba1400
	Texture* SourceTexture;//[Offset: 0x400, Size: 0x8] 0x7e61ba1480
	void SetSourceWidth(float bNewValue);// 0x34a958ebd041 0x7e61b998c0
	void SetSourceTexture(Texture* bNewValue);// 0x34a858ebd041 0x7e61b999a0
	void SetSourceHeight(float NewValue);// 0x34a758ebd041 0x7e61b99a80
	void SetBarnDoorLength(float NewValue);// 0x34a658ebd041 0x7e61b99b60
	void SetBarnDoorAngle(float NewValue);// 0x34a558ebd041 0x7e61b99c40

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61ba5600
	int MaxMobileCascades;//[Offset: 0x3c, Size: 0x4] 0x7e61ba5680
	byte MobileAntiAliasing;//[Offset: 0x40, Size: 0x1] 0x7e61ba5700
	byte MobileFloatPrecisionMode;//[Offset: 0x41, Size: 0x1] 0x7e61ba5780
	bool bMobileAllowDitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42, Size: 0x1] 0x7e61ba5800
	bool bMobileVirtualTextures;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x42, Size: 0x1] 0x7e61ba5880
	bool bReflectionCaptureCompression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x42, Size: 0x1] 0x7e61ba5900
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x42, Size: 0x1] 0x7e61ba5980
	byte ShaderCompressionFormat;//[Offset: 0x43, Size: 0x1] 0x7e61ba5a00
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7e61ba5a80
	float MinScreenRadiusForLights;//[Offset: 0x48, Size: 0x4] 0x7e61ba5b00
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x4c, Size: 0x4] 0x7e61ba5b80
	float MinScreenRadiusForCSMdepth;//[Offset: 0x50, Size: 0x4] 0x7e61ba5c00
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7e61ba5c80
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x7e61ba5d00
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x7e61ba5d80
	bool bVirtualTextures;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x7e61ba5e00
	bool bVirtualTextureEnableAutoImport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1] 0x7e61ba5e80
	bool bVirtualTexturedLightmaps;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1] 0x7e61ba5f00
	bool bVirtualTextureAnisotropicFiltering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x54, Size: 0x1] 0x7e61ba5f80
	uint32 VirtualTextureTileSize;//[Offset: 0x58, Size: 0x4] 0x7e61ba6000
	uint32 VirtualTextureTileBorderSize;//[Offset: 0x5c, Size: 0x4] 0x7e61ba6080
	uint32 VirtualTextureFeedbackFactor;//[Offset: 0x60, Size: 0x4] 0x7e61ba6100
	byte WorkingColorSpaceChoice;//[Offset: 0x64, Size: 0x1] 0x7e61ba6180
	Vector2D RedChromaticityCoordinate;//[Offset: 0x68, Size: 0x10] 0x7e61ba6200
	Vector2D GreenChromaticityCoordinate;//[Offset: 0x78, Size: 0x10] 0x7e61ba6280
	Vector2D BlueChromaticityCoordinate;//[Offset: 0x88, Size: 0x10] 0x7e61ba6300
	Vector2D WhiteChromaticityCoordinate;//[Offset: 0x98, Size: 0x10] 0x7e61ba4280
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x7e61ba4300
	byte DynamicGlobalIllumination;//[Offset: 0xa9, Size: 0x1] 0x7e61ba4380
	byte Reflections;//[Offset: 0xaa, Size: 0x1] 0x7e61ba4400
	int ReflectionCaptureResolution;//[Offset: 0xac, Size: 0x4] 0x7e61ba4480
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7e61ba4500
	bool bUseHardwareRayTracingForLumen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x7e61ba4580
	enum LumenRayLightingMode;//[Offset: 0xb1, Size: 0x1] 0x7e61a5d580
	byte LumenSoftwareTracingMode;//[Offset: 0xb2, Size: 0x1] 0x7e61ba4680
	byte ShadowMapMethod;//[Offset: 0xb3, Size: 0x1] 0x7e61ba4700
	bool bEnableRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x7e61ba4780
	bool bEnableRayTracingShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1] 0x7e61ba4800
	bool bEnableRayTracingSkylight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1] 0x7e61ba4880
	bool bEnableRayTracingTextureLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1] 0x7e61ba4900
	bool bEnablePathTracing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1] 0x7e61ba4980
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1] 0x7e61ba4a00
	float DistanceFieldVoxelDensity;//[Offset: 0xb8, Size: 0x4] 0x7e61ba4a80
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x7e61ba4b00
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1] 0x7e61ba4b80
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1] 0x7e61ba4c00
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1] 0x7e61ba4c80
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbc, Size: 0x1] 0x7e61ba4d00
	byte TranslucentSortPolicy;//[Offset: 0xbd, Size: 0x1] 0x7e61ba4d80
	Vector TranslucentSortAxis;//[Offset: 0xc0, Size: 0x18] 0x7e61ba4e00
	byte HMDFixedFoveationLevel;//[Offset: 0xd8, Size: 0x1] 0x7e61ba4e80
	bool bHMDFixedFoveationDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1] 0x7e61ba4f00
	byte CustomDepthStencil;//[Offset: 0xda, Size: 0x1] 0x7e61ba4f80
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdb, Size: 0x1] 0x7e61ba5000
	byte bEnableAlphaChannelInPostProcessing;//[Offset: 0xdc, Size: 0x1] 0x7e61ba5080
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdd, Size: 0x1] 0x7e61ba5100
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdd, Size: 0x1] 0x7e61ba5180
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xdd, Size: 0x1] 0x7e61ba5200
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xdd, Size: 0x1] 0x7e61ba5280
	byte DefaultFeatureAutoExposure;//[Offset: 0xde, Size: 0x1] 0x7e61ba3200
	float DefaultFeatureAutoExposureBias;//[Offset: 0xe0, Size: 0x4] 0x7e61ba3280
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe4, Size: 0x1] 0x7e61ba3300
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe4, Size: 0x1] 0x7e61ba3380
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe4, Size: 0x1] 0x7e61ba3400
	bool bTemporalUpsampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe4, Size: 0x1] 0x7e61ba3480
	byte DefaultFeatureAntiAliasing;//[Offset: 0xe5, Size: 0x1] 0x7e61ba3500
	byte MSAASampleCount;//[Offset: 0xe6, Size: 0x1] 0x7e61ba3580
	enum DefaultLightUnits;//[Offset: 0xe7, Size: 0x1] 0x7e61a5d620
	byte DefaultBackBufferPixelFormat;//[Offset: 0xe8, Size: 0x1] 0x7e61ba3680
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe9, Size: 0x1] 0x7e61ba3700
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe9, Size: 0x1] 0x7e61ba3780
	byte EarlyZPass;//[Offset: 0xea, Size: 0x1] 0x7e61ba3800
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xeb, Size: 0x1] 0x7e61ba3880
	bool bEnableCSMCaching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xeb, Size: 0x1] 0x7e61ba3900
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xeb, Size: 0x1] 0x7e61ba3980
	byte ClearSceneMethod;//[Offset: 0xec, Size: 0x1] 0x7e61ba3a00
	byte VelocityPass;//[Offset: 0xed, Size: 0x1] 0x7e61ba3a80
	byte VertexDeformationOutputsVelocity;//[Offset: 0xee, Size: 0x1] 0x7e61ba3b00
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xef, Size: 0x1] 0x7e61ba3b80
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xef, Size: 0x1] 0x7e61ba3c00
	int GPUSimulationTextureSizeX;//[Offset: 0xf0, Size: 0x4] 0x7e61ba3c80
	int GPUSimulationTextureSizeY;//[Offset: 0xf4, Size: 0x4] 0x7e61ba3d00
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x7e61ba3d80
	byte GBufferFormat;//[Offset: 0xf9, Size: 0x1] 0x7e61ba3e00
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1] 0x7e61ba3e80
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 0x1] 0x7e61ba3f00
	bool bMultiView;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfa, Size: 0x1] 0x7e61ba3f80
	bool bMobilePostProcessing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfa, Size: 0x1] 0x7e61ba4000
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfa, Size: 0x1] 0x7e61ba4080
	bool bMobileUseHWsRGBEncoding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfa, Size: 0x1] 0x7e61ba4100
	bool bRoundRobinOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfa, Size: 0x1] 0x7e61ba4180
	bool bODSCapture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfa, Size: 0x1] 0x7e61ba4200
	bool bMeshStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfb, Size: 0x1] 0x7e61ba2180
	float WireframeCullThreshold;//[Offset: 0xfc, Size: 0x4] 0x7e61ba2200
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x7e61ba2280
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1] 0x7e61ba2300
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1] 0x7e61ba2380
	bool bSupportSkyAtmosphere;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1] 0x7e61ba2400
	bool bSupportSkyAtmosphereAffectsHeightFog;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1] 0x7e61ba2480
	bool bSupportCloudShadowOnForwardLitTranslucent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x100, Size: 0x1] 0x7e61ba2500
	bool bMaterialRoughDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x7e61ba2580
	bool bMaterialEnergyConservation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x7e61ba2600
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1] 0x7e61ba2680
	enum DefaultSkinCacheBehavior;//[Offset: 0x109, Size: 0x1] 0x7e61a5d6c0
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0x10c, Size: 0x4] 0x7e61ba2780
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1] 0x7e61ba2800
	bool bMobileEnableMovableLightCSMShaderCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1] 0x7e61ba2880
	bool bMobileEnableNoPrecomputedLightingCSMShader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 0x1] 0x7e61ba2900
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 0x1] 0x7e61ba2980
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 0x1] 0x7e61ba2a00
	uint32 MobileNumDynamicPointLights;//[Offset: 0x114, Size: 0x4] 0x7e61ba2a80
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1] 0x7e61ba2b00
	bool bMobileAllowMovableSpotlightShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118, Size: 0x1] 0x7e61ba2b80
	bool bSupport16BitBoneIndex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118, Size: 0x1] 0x7e61ba2c00
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x118, Size: 0x1] 0x7e61ba2c80
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x118, Size: 0x1] 0x7e61ba2d00
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x118, Size: 0x1] 0x7e61ba2d80
	bool bMobileAmbientOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x118, Size: 0x1] 0x7e61ba2e00
	bool bUseUnlimitedBoneInfluences;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x118, Size: 0x1] 0x7e61ba2e80
	int UnlimitedBonInfluencesThreshold;//[Offset: 0x11c, Size: 0x4] 0x7e61ba2f00
	PerPlatformInt MaxSkinBones;//[Offset: 0x120, Size: 0x4] 0x7e61ba2f80
	byte MobilePlanarReflectionMode;//[Offset: 0x124, Size: 0x1] 0x7e61ba3000
	bool bMobileSupportsGen4TAA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x125, Size: 0x1] 0x7e61ba3080
	PerPlatformBool bStreamSkeletalMeshLODs;//[Offset: 0x126, Size: 0x1] 0x7e61ba3100
	PerPlatformBool bDiscardSkeletalMeshOptionalLODs;//[Offset: 0x127, Size: 0x1] 0x7e61ba3180
	SoftObjectPath VisualizeCalibrationColorMaterialPath;//[Offset: 0x128, Size: 0x18] 0x7e61ba1100
	SoftObjectPath VisualizeCalibrationCustomMaterialPath;//[Offset: 0x140, Size: 0x18] 0x7e61ba1180
	SoftObjectPath VisualizeCalibrationGrayscaleMaterialPath;//[Offset: 0x158, Size: 0x18] 0x7e61ba1200

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61ba5580

--------------------------------
Class: ReplayNetConnection.NetConnection.Player.Object

--------------------------------
Class: ReplaySubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bLoadDefaultMapOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61ba5300
	void RequestCheckpoint();// 0x34ae58ebd041 0x7e61b99460
	bool IsRecording();// 0x34ad58ebd041 0x7e61b99540
	bool IsPlaying();// 0x34ac58ebd041 0x7e61b99620
	float GetReplayCurrentTime();// 0x34ab58ebd041 0x7e61b99700
	FString GetActiveReplayName();// 0x34aa58ebd041 0x7e61b997e0

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: Rig.Object
	TransformBase[] TransformBases;//[Offset: 0x30, Size: 0x10] 0x7e61a5d440
	Node[] Nodes;//[Offset: 0x40, Size: 0x10] 0x7e61a5d4e0

--------------------------------
Class: TransformBase
	FName Node;//[Offset: 0x0, Size: 0x8] 0x7e6165e800
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0x10] 0x7e6165e880

--------------------------------
Class: TransformBaseConstraint
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0x10] 0x7e84e5d3a0

--------------------------------
Class: RigTransformConstraint
	byte TranformType;//[Offset: 0x0, Size: 0x1] 0x7e6165e980
	FName ParentSpace;//[Offset: 0x4, Size: 0x8] 0x7e6165ea00
	float Weight;//[Offset: 0xc, Size: 0x4] 0x7e6165ea80

--------------------------------
Class: Node
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6165eb00
	FName ParentName;//[Offset: 0x8, Size: 0x8] 0x7e6165eb80
	Transform Transform;//[Offset: 0x10, Size: 0x60] 0x7e6165ec00
	FString DisplayName;//[Offset: 0x70, Size: 0x10] 0x7e6165ec80
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7e6165ed00

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0x118, Size: 0x18] 0x7e61ba6a80
	Vector PivotTranslation;//[Offset: 0x130, Size: 0x18] 0x7e61ba6b00
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x7e61ba6b80

--------------------------------
Class: RPCDoSDetectionConfig.Object
	bool bRPCDoSDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61ba6600
	bool bRPCDoSAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e61ba6680
	int HitchTimeQuotaMS;//[Offset: 0x2c, Size: 0x4] 0x7e61ba6700
	int HitchSuspendDetectionTimeMS;//[Offset: 0x30, Size: 0x4] 0x7e61ba6780
	FString[] DetectionSeverity;//[Offset: 0x38, Size: 0x10] 0x7e61a5d260
	int InitialConnectToleranceMS;//[Offset: 0x48, Size: 0x4] 0x7e61ba6880
	FName[] RPCBlockWhitelist;//[Offset: 0x50, Size: 0x10] 0x7e61a5d300
	RPCAnalyticsThreshold[] RPCAnalyticsThresholds;//[Offset: 0x60, Size: 0x10] 0x7e61a5d3a0
	double RPCAnalyticsOverrideChance;//[Offset: 0x70, Size: 0x8] 0x7e61ba6a00

--------------------------------
Class: RPCAnalyticsThreshold
	FName RPC;//[Offset: 0x0, Size: 0x8] 0x7e61661a80
	int CountPerSec;//[Offset: 0x8, Size: 0x4] 0x7e61661b00
	double TimePerSec;//[Offset: 0x10, Size: 0x8] 0x7e61661b80

--------------------------------
Class: RuntimeOptionsBase.Object

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x2b0, Size: 0x28] 0x7e61ba7600
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x7e61ba7680
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1] 0x7e61ba7700
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x2e0, Size: 0x8] 0x7e61ba7780
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x7e61ba7800
	uint32 ScalabilityGroup;//[Offset: 0x2ec, Size: 0x4] 0x7e61ba7880
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x7e61ba7900
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x2f8, Size: 0x8] 0x7e61ba7980
	int StreamLowMips;//[Offset: 0x300, Size: 0x4] 0x7e61ba7a00
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1] 0x7e61ba7a80
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1] 0x7e61ba7b00
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1] 0x7e61ba7b80
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 0x1] 0x7e61ba7c00
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0x34b458ebd041 0x7e61b9c8e0

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 0x8] 0x7e61becd00
	uint64 BuildHash;//[Offset: 0x30, Size: 0x8] 0x7e61becd80

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x2a8, Size: 0xc] 0x7e61bece00
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1] 0x7e61bece80
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1] 0x7e61becf00

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4] 0x7e61684680
	int TileBorderSize;//[Offset: 0x4, Size: 0x4] 0x7e61684700
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7e61684780
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7e61684800

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x278, Size: 0x8] 0x7e61ba7580

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x288, Size: 0x8] 0x7e61ba7480
	void OnInterpToggle(bool bEnable);// 0x34b558ebd041 0x7e61b9c800

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x368, Size: 0x1] 0x7e61ba8980
	float FOVAngle;//[Offset: 0x36c, Size: 0x4] 0x7e61ba8a00
	float OrthoWidth;//[Offset: 0x370, Size: 0x4] 0x7e61ba8a80
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x378, Size: 0x8] 0x7e61ba8b00
	byte CompositeMode;//[Offset: 0x380, Size: 0x1] 0x7e61ba8b80
	PostProcessSettings PostProcessSettings;//[Offset: 0x390, Size: 0x6b0] 0x7e61ba8c00
	float PostProcessBlendWeight;//[Offset: 0xa40, Size: 0x4] 0x7e61ba8c80
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa44, Size: 0x1] 0x7e61ba8d00
	float CustomNearClippingPlane;//[Offset: 0xa48, Size: 0x4] 0x7e61ba8d80
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 0x1] 0x7e61ba8e00
	Matrix CustomProjectionMatrix;//[Offset: 0xa50, Size: 0x80] 0x7e61ba8e80
	bool bUseFauxOrthoViewPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 0x1] 0x7e61ba8f00
	bool bEnableOrthographicTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad1, Size: 0x1] 0x7e61ba8f80
	int NumXTiles;//[Offset: 0xad4, Size: 0x4] 0x7e61ba9000
	int NumYTiles;//[Offset: 0xad8, Size: 0x4] 0x7e61ba9080
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 0x1] 0x7e61ba9100
	Vector ClipPlaneBase;//[Offset: 0xae0, Size: 0x18] 0x7e61ba9180
	Vector ClipPlaneNormal;//[Offset: 0xaf8, Size: 0x18] 0x7e61ba9200
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb10, Size: 0x1] 0x7e61ba9280
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb10, Size: 0x1] 0x7e61ba9300
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb11, Size: 0x1] 0x7e61ba9380
	void RemoveBlendable(interface classNone InBlendableObject);// 0x34b858ebd041 0x7e61b9c560
	void CaptureScene();// 0x34b758ebd041 0x7e61b9c640
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x34b658ebd041 0x7e61b9c720

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x368, Size: 0x8] 0x7e61ba8680
	bool bCaptureRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1] 0x7e61ba8700
	TextureRenderTargetCube* TextureTargetLeft;//[Offset: 0x378, Size: 0x8] 0x7e61ba8780
	TextureRenderTargetCube* TextureTargetRight;//[Offset: 0x380, Size: 0x8] 0x7e61ba8800
	TextureRenderTarget2D* TextureTargetODS;//[Offset: 0x388, Size: 0x8] 0x7e61ba8880
	float IPD;//[Offset: 0x390, Size: 0x4] 0x7e61ba8900
	void CaptureScene();// 0x34b958ebd041 0x7e61b9c480

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x1f8, Size: 0x4] 0x7e61be6d00
	LinearColor ClearColor;//[Offset: 0x1fc, Size: 0x10] 0x7e61be6d80
	byte OverrideFormat;//[Offset: 0x20c, Size: 0x1] 0x7e61be6e00
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 0x1] 0x7e61be6e80
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 0x1] 0x7e61be6f00

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x288, Size: 0x8] 0x7e61ba8580
	void OnInterpToggle(bool bEnable);// 0x34ba58ebd041 0x7e61b9c3a0

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	byte ShadowmapFlags;//[Offset: 0x2a8, Size: 0x1] 0x7e61baa980

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1] 0x7e61bae580
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 0x1] 0x7e61bae600
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x280, Size: 0x8] 0x7e61bae680
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x288, Size: 0x8] 0x7e61bae700
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x290, Size: 0x8] 0x7e61bac680
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x298, Size: 0x8] 0x7e61bac700
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x2a0, Size: 0x8] 0x7e61bac780
	void OnRep_ReplicatedPhysAsset();// 0x34d758ebd041 0x7e61b9e400
	void OnRep_ReplicatedMesh();// 0x34d658ebd041 0x7e61b9e4e0
	void OnRep_ReplicatedMaterial1();// 0x34d558ebd041 0x7e61b9e5c0
	void OnRep_ReplicatedMaterial0();// 0x351158ebd041 0x7e61b9e6a0

--------------------------------
Class: SkeletalMeshEditorData.Object

--------------------------------
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object
	FName SkeletalMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x7e61bb5900

--------------------------------
Class: SkyAtmosphere.Info.Actor.Object
	SkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x278, Size: 0x8] 0x7e61bb6d80

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x278, Size: 0x8] 0x7e618c1100
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x7e618c1180
	void OnRep_bEnabled();// 0x26e658ebd041 0x7e618ba960

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x7e61bb7d80
	byte SourceType;//[Offset: 0x2e1, Size: 0x1] 0x7e61bb7e00
	TextureCube* Cubemap;//[Offset: 0x2e8, Size: 0x8] 0x7e61bb7e80
	float SourceCubemapAngle;//[Offset: 0x2f0, Size: 0x4] 0x7e61bb7f00
	int CubemapResolution;//[Offset: 0x2f4, Size: 0x4] 0x7e61bb7f80
	float SkyDistanceThreshold;//[Offset: 0x2f8, Size: 0x4] 0x7e61bb8000
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1] 0x7e61bb8080
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1] 0x7e61bb8100
	LinearColor LowerHemisphereColor;//[Offset: 0x300, Size: 0x10] 0x7e61bb8180
	float OcclusionMaxDistance;//[Offset: 0x310, Size: 0x4] 0x7e61bb8200
	float Contrast;//[Offset: 0x314, Size: 0x4] 0x7e61bb8280
	float OcclusionExponent;//[Offset: 0x318, Size: 0x4] 0x7e61bb8300
	float MinOcclusion;//[Offset: 0x31c, Size: 0x4] 0x7e61bb8380
	Color OcclusionTint;//[Offset: 0x320, Size: 0x4] 0x7e61bb8400
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1] 0x7e61bb6380
	float CloudAmbientOcclusionStrength;//[Offset: 0x328, Size: 0x4] 0x7e61bb6400
	float CloudAmbientOcclusionExtent;//[Offset: 0x32c, Size: 0x4] 0x7e61bb6480
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x330, Size: 0x4] 0x7e61bb6500
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x334, Size: 0x4] 0x7e61bb6580
	byte OcclusionCombineMode;//[Offset: 0x338, Size: 0x1] 0x7e61bb6600
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3e8, Size: 0x8] 0x7e61bb6680
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x354d58ebd041 0x7e61bc21c0
	void SetOcclusionTint(out const Color InTint);// 0x354c58ebd041 0x7e61bc22a0
	void SetOcclusionExponent(float InOcclusionExponent);// 0x354b58ebd041 0x7e61bc2380
	void SetOcclusionContrast(float InOcclusionContrast);// 0x354a58ebd041 0x7e61bc2460
	void SetMinOcclusion(float InMinOcclusion);// 0x354958ebd041 0x7e61bc2540
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x354858ebd041 0x7e61bc2620
	void SetLightColor(LinearColor NewLightColor);// 0x354758ebd041 0x7e61bc2700
	void SetIntensity(float NewIntensity);// 0x354658ebd041 0x7e61bc27e0
	void SetIndirectLightingIntensity(float NewIntensity);// 0x354558ebd041 0x7e61bc28c0
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x354458ebd041 0x7e61bc29a0
	void SetCubemap(TextureCube* NewCubemap);// 0x354358ebd041 0x7e61bc2a80
	void RecaptureSky();// 0x354258ebd041 0x7e61bc2b60

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x30, Size: 0xc0] 0x7e61bb7d00

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SMInstanceElementAssetDataInterface.Object

--------------------------------
Class: SMInstanceElementHierarchyInterface.Object

--------------------------------
Class: SMInstanceElementIdMapTransactor.Object

--------------------------------
Class: SMInstanceElementSelectionInterface.Object

--------------------------------
Class: SMInstanceElementWorldInterface.Object

--------------------------------
Class: SMInstanceManager.Interface.Object

--------------------------------
Class: SMInstanceManagerProvider.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x7e61bb7500
	SoundNode* FirstNode;//[Offset: 0x178, Size: 0x8] 0x7e61bb7580
	float VolumeMultiplier;//[Offset: 0x180, Size: 0x4] 0x7e61bb7600
	float PitchMultiplier;//[Offset: 0x184, Size: 0x4] 0x7e61bb7680
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x188, Size: 0x3c8] 0x7e61bb7700
	float SubtitlePriority;//[Offset: 0x550, Size: 0x4] 0x7e61bb7780
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 0x1] 0x7e61bb7800
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 0x1] 0x7e61bb7880
	int CookedQualityIndex;//[Offset: 0x55c, Size: 0x4] 0x7e61bb7900
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x560, Size: 0x1] 0x7e61bb7980

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10] 0x7e61bd0ba0

--------------------------------
Class: SoundEffectPresetWidgetInterface.AudioPanelWidgetInterface.Interface.Object
	void OnPropertyChanged(SoundEffectPreset* Preset, FName PropertyName);// 0x355058ebd041 0x7e61bc1f20
	void OnConstructed(SoundEffectPreset* Preset);// 0x354f58ebd041 0x7e61bc2000
	class SoundEffectPreset GetClass();// 0x354e58ebd041 0x7e61bc20e0

--------------------------------
Class: SoundGroups.Object
	SoundGroup[] SoundGroupProfiles;//[Offset: 0x28, Size: 0x10] 0x7e61bd0ce0

--------------------------------
Class: SoundGroup
	byte SoundGroup;//[Offset: 0x0, Size: 0x1] 0x7e6166c380
	FString DisplayName;//[Offset: 0x8, Size: 0x10] 0x7e6166c400
	bool bAlwaysDecompressOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7e6166c480
	float DecompressedDuration;//[Offset: 0x1c, Size: 0x4] 0x7e6166c500

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x8] 0x7e61bb8d00
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x50, Size: 0x3c8] 0x7e61bb8d80
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1] 0x7e61bb8e00

--------------------------------
Class: SoundNodeBranch.SoundNode.Object
	FName BoolParameterName;//[Offset: 0x44, Size: 0x8] 0x7e61bb8c80

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x7e61bd0b00

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x44, Size: 0x4] 0x7e61bb8b00
	float DelayMax;//[Offset: 0x48, Size: 0x4] 0x7e61bb8b80

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x48, Size: 0x20] 0x7e61bb8a00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61bb8a80

--------------------------------
Class: DialogueWaveParameter
	DialogueWave* DialogueWave;//[Offset: 0x0, Size: 0x8] 0x7e6161a180
	DialogueContext Context;//[Offset: 0x8, Size: 0x18] 0x7e6161a200

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	DistanceDatum[] CrossFadeInput;//[Offset: 0x48, Size: 0x10] 0x7e61bd0a60

--------------------------------
Class: DistanceDatum
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4] 0x7e6166b600
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4] 0x7e6166b680
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4] 0x7e6166b700
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4] 0x7e6166b780
	float Volume;//[Offset: 0x10, Size: 0x4] 0x7e6166b800

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x44, Size: 0x4] 0x7e61bb8800
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e61bb8880
	float SmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x7e61bb8900

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object
	float LoopStart;//[Offset: 0x44, Size: 0x4] 0x7e61bba200
	float LoopEnd;//[Offset: 0x48, Size: 0x4] 0x7e61bba280
	float DurationAfterLoop;//[Offset: 0x4c, Size: 0x4] 0x7e61bba300
	int LoopCount;//[Offset: 0x50, Size: 0x4] 0x7e61bba380
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7e61bba400
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x7e61bba480
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x58, Size: 0x8] 0x7e61bba500
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x60, Size: 0x8] 0x7e61bb8480
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x68, Size: 0x88] 0x7e61bb8500
	RuntimeFloatCurve PitchCurve;//[Offset: 0xf0, Size: 0x88] 0x7e61bb8580
	float PitchMin;//[Offset: 0x178, Size: 0x4] 0x7e61bb8600
	float PitchMax;//[Offset: 0x17c, Size: 0x4] 0x7e61bb8680
	float VolumeMin;//[Offset: 0x180, Size: 0x4] 0x7e61bb8700
	float VolumeMax;//[Offset: 0x184, Size: 0x4] 0x7e61bb8780

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object
	int[] GroupSizes;//[Offset: 0x48, Size: 0x10] 0x7e61bd09c0

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x44, Size: 0x4] 0x7e61bba080
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61bba100

--------------------------------
Class: SoundNodeMature.SoundNode.Object

--------------------------------
Class: SoundNodeMixer.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x7e61bd0920

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x44, Size: 0x4] 0x7e61bb9e00
	float PitchMax;//[Offset: 0x48, Size: 0x4] 0x7e61bb9e80
	float VolumeMin;//[Offset: 0x4c, Size: 0x4] 0x7e61bb9f00
	float VolumeMax;//[Offset: 0x50, Size: 0x4] 0x7e61bb9f80

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x44, Size: 0x20] 0x7e61bb9d00
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x64, Size: 0x20] 0x7e61bb9d80

--------------------------------
Class: ModulatorContinuousParams
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e6166d380
	float Default;//[Offset: 0x8, Size: 0x4] 0x7e6166d400
	float MinInput;//[Offset: 0xc, Size: 0x4] 0x7e6166d480
	float MaxInput;//[Offset: 0x10, Size: 0x4] 0x7e6166d500
	float MinOutput;//[Offset: 0x14, Size: 0x4] 0x7e6166d580
	float MaxOutput;//[Offset: 0x18, Size: 0x4] 0x7e6166d600
	byte ParamMode;//[Offset: 0x1c, Size: 0x1] 0x7e6166d680

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x7e61bb9800
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x7e61bb9880
	float AmplitudeMin;//[Offset: 0x44, Size: 0x4] 0x7e61bb9900
	float AmplitudeMax;//[Offset: 0x48, Size: 0x4] 0x7e61bb9980
	float FrequencyMin;//[Offset: 0x4c, Size: 0x4] 0x7e61bb9a00
	float FrequencyMax;//[Offset: 0x50, Size: 0x4] 0x7e61bb9a80
	float OffsetMin;//[Offset: 0x54, Size: 0x4] 0x7e61bb9b00
	float OffsetMax;//[Offset: 0x58, Size: 0x4] 0x7e61bb9b80
	float CenterMin;//[Offset: 0x5c, Size: 0x4] 0x7e61bb9c00
	float CenterMax;//[Offset: 0x60, Size: 0x4] 0x7e61bb9c80

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x58, Size: 0x8] 0x7e61bb9780

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object
	int CookedQualityLevelIndex;//[Offset: 0x44, Size: 0x4] 0x7e61bb9700

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	float[] Weights;//[Offset: 0x48, Size: 0x10] 0x7e61bd07e0
	bool[] HasBeenUsed;//[Offset: 0x58, Size: 0x10] 0x7e61bd0880
	int NumRandomUsed;//[Offset: 0x68, Size: 0x4] 0x7e61bbb580
	int PreselectAtLevelLoad;//[Offset: 0x6c, Size: 0x4] 0x7e61bb9500
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7e61bb9580
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x7e61bb9600
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x7e61bb9680

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x48, Size: 0x8] 0x7e61bbb400

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object
	FName IntParameterName;//[Offset: 0x44, Size: 0x8] 0x7e61bbb380

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object
	FName WaveParameterName;//[Offset: 0x44, Size: 0x8] 0x7e61bbb300

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x48, Size: 0x28] 0x7e61bbb180
	SoundWave* SoundWave;//[Offset: 0x70, Size: 0x8] 0x7e61bbb200
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7e61bbb280

--------------------------------
Class: AudioParameterControllerInterface.Interface.Object
	void SetTriggerParameter(FName InName);// 0x285758ebd041 0x7e618dd980
	void SetStringParameter(FName InName, FString InValue);// 0x285658ebd041 0x7e618dda60
	void SetStringArrayParameter(FName InName, out const FString[] InValue);// 0x285558ebd041 0x7e618ddb40
	void SetParameters_Blueprint(out const AudioParameter[] InParameters);// 0x285458ebd041 0x7e618ddc20
	void SetObjectParameter(FName InName, Object* InValue);// 0x285358ebd041 0x7e618ddd00
	void SetObjectArrayParameter(FName InName, out const Object*[] InValue);// 0x285258ebd041 0x7e618ddde0
	void SetIntParameter(FName InName, int inInt);// 0x285158ebd041 0x7e618ddec0
	void SetIntArrayParameter(FName InName, out const int[] InValue);// 0x285058ebd041 0x7e618ddfa0
	void SetFloatParameter(FName InName, float InFloat);// 0x284f58ebd041 0x7e618de080
	void SetFloatArrayParameter(FName InName, out const float[] InValue);// 0x284e58ebd041 0x7e618de160
	void SetBoolParameter(FName InName, bool InBool);// 0x284d58ebd041 0x7e618de240
	void SetBoolArrayParameter(FName InName, out const bool[] InValue);// 0x284c58ebd041 0x7e618de320
	void ResetParameters();// 0x284b58ebd041 0x7e618de400

--------------------------------
Class: SoundParameterControllerInterface.AudioParameterControllerInterface.Interface.Object

--------------------------------
Class: AudioParameterConversionStatics.BlueprintFunctionLibrary.Object
	AudioParameter StringToAudioParameter(FName Name, FString String);// 0x355a58ebd041 0x7e61bc5020
	AudioParameter StringArrayToAudioParameter(FName Name, FString[] Strings);// 0x355958ebd041 0x7e61bc5100
	AudioParameter ObjectToAudioParameter(FName Name, Object* Object);// 0x355858ebd041 0x7e61bc51e0
	AudioParameter ObjectArrayToAudioParameter(FName Name, Object*[] Objects);// 0x355758ebd041 0x7e61bc52c0
	AudioParameter IntegerToAudioParameter(FName Name, int Integer);// 0x355658ebd041 0x7e61bc53a0
	AudioParameter IntegerArrayToAudioParameter(FName Name, int[] Integers);// 0x355558ebd041 0x7e61bc5480
	AudioParameter FloatToAudioParameter(FName Name, float Float);// 0x355458ebd041 0x7e61bc5560
	AudioParameter FloatArrayToAudioParameter(FName Name, float[] Floats);// 0x359558ebd041 0x7e61bc5640
	AudioParameter BooleanToAudioParameter(FName Name, bool Bool);// 0x355258ebd041 0x7e61bc1d60
	AudioParameter BooleanArrayToAudioParameter(FName Name, bool[] Bools);// 0x355158ebd041 0x7e61bc1e40

--------------------------------
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	FName SoundfieldEncodingFormat;//[Offset: 0x48, Size: 0x8] 0x7e61bbc700
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x50, Size: 0x8] 0x7e61bbc780
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x58, Size: 0x10] 0x7e61bd2720
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x68, Size: 0x8] 0x7e61bd27c0

--------------------------------
Class: SoundfieldEffectBase.Object
	SoundfieldEffectSettingsBase* Settings;//[Offset: 0x28, Size: 0x8] 0x7e61916780

--------------------------------
Class: SoundfieldEffectSettingsBase.Object

--------------------------------
Class: EndpointSubmix.SoundSubmixBase.Object
	FName EndpointType;//[Offset: 0x40, Size: 0x8] 0x7e61bbe700
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x48, Size: 0x8] 0x7e61bd2680
	AudioEndpointSettingsBase* EndpointSettings;//[Offset: 0x50, Size: 0x8] 0x7e61bbc680

--------------------------------
Class: AudioEndpointSettingsBase.Object

--------------------------------
Class: SoundfieldEndpointSubmix.SoundSubmixBase.Object
	FName SoundfieldEndpointType;//[Offset: 0x40, Size: 0x8] 0x7e61bbe500
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x48, Size: 0x8] 0x7e61bd24a0
	SoundfieldEndpointSettingsBase* EndpointSettings;//[Offset: 0x50, Size: 0x8] 0x7e61bbe580
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x58, Size: 0x8] 0x7e61bd2540
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x60, Size: 0x8] 0x7e61bbe600
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x68, Size: 0x10] 0x7e61bd25e0

--------------------------------
Class: SoundfieldEndpointSettingsBase.Object

--------------------------------
Class: SoundSubmixWidgetInterface.Interface.Object
	void OnConstructed(SoundSubmixBase* SoundSubmix);// 0x356758ebd041 0x7e61bc44c0

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x171, Size: 0x1] 0x7e61bbe400

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x280, Size: 0x8] 0x7e61bbe380

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x328, Size: 0x4] 0x7e61bbe200
	float CaptureDistanceScale;//[Offset: 0x32c, Size: 0x4] 0x7e61bbe280
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x330, Size: 0x8] 0x7e61bbe300

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x538, Size: 0x70] 0x7e615daa00
	InterpCurveVector SplineInfo;//[Offset: 0x5a8, Size: 0x18] 0x7e615daa80
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5c0, Size: 0x18] 0x7e615dab00
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5d8, Size: 0x18] 0x7e615dab80
	InterpCurveFloat SplineReparamTable;//[Offset: 0x5f0, Size: 0x18] 0x7e615dac00
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1] 0x7e615dac80
	int ReparamStepsPerSegment;//[Offset: 0x60c, Size: 0x4] 0x7e615dad00
	float Duration;//[Offset: 0x610, Size: 0x4] 0x7e615dad80
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1] 0x7e615dae00
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1] 0x7e615dae80
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1] 0x7e615daf00
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 0x1] 0x7e615daf80
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1] 0x7e615db000
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1] 0x7e615db080
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 0x1] 0x7e615db100
	float LoopPosition;//[Offset: 0x61c, Size: 0x4] 0x7e615db180
	Vector DefaultUpVector;//[Offset: 0x620, Size: 0x18] 0x7e615db200
	void UpdateSpline();// 0x1ea858ebd041 0x7e616d6fa0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x1ea758ebd041 0x7e616d7080
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x1ea658ebd041 0x7e616d7160
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x1ea558ebd041 0x7e616d7240
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x1ee658ebd041 0x7e616d7320
	void SetTangentColor(out const LinearColor TangentColor);// 0x1ea358ebd041 0x7e616d3a40
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x1ea258ebd041 0x7e616d3b20
	void SetSplineWorldPoints(out const Vector[] Points);// 0x1ea158ebd041 0x7e616d3c00
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x1ea058ebd041 0x7e616d3ce0
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x1e9f58ebd041 0x7e616d3dc0
	void SetSplineLocalPoints(out const Vector[] Points);// 0x1e9e58ebd041 0x7e616d3ea0
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x1e9d58ebd041 0x7e616d3f80
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x1e9c58ebd041 0x7e616d4060
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0x1e9b58ebd041 0x7e616d4140
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x1e9a58ebd041 0x7e616d4220
	void SetDrawDebug(bool bShow);// 0x1e9958ebd041 0x7e616d4300
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x1e9858ebd041 0x7e616d43e0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x1e9758ebd041 0x7e616d44c0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x1e9658ebd041 0x7e616d45a0
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x1e9558ebd041 0x7e616d4680
	bool IsClosedLoop();// 0x1e9458ebd041 0x7e616d4760
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x1e9358ebd041 0x7e616d4840
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x1e9258ebd041 0x7e616d4920
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x1e9158ebd041 0x7e616d4a00
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x1e9058ebd041 0x7e616d4ae0
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x1e8f58ebd041 0x7e616d4bc0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x1e8e58ebd041 0x7e616d4ca0
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x1e8d58ebd041 0x7e616d4d80
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x1e8c58ebd041 0x7e616d4e60
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x1e8b58ebd041 0x7e616d4f40
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x1e8a58ebd041 0x7e616d5020
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e8958ebd041 0x7e616d5100
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e8858ebd041 0x7e616d51e0
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e8758ebd041 0x7e616d52c0
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e8658ebd041 0x7e616d53a0
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x1e8558ebd041 0x7e616d5480
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x1e8458ebd041 0x7e616d5560
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x1ec558ebd041 0x7e616d5640
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x1e8258ebd041 0x7e616d1d60
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e8158ebd041 0x7e616d1e40
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e8058ebd041 0x7e616d1f20
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e7f58ebd041 0x7e616d2000
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e7e58ebd041 0x7e616d20e0
	byte GetSplinePointType(int PointIndex);// 0x1e7d58ebd041 0x7e616d21c0
	float GetSplineLength();// 0x1e7c58ebd041 0x7e616d22a0
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x1e7b58ebd041 0x7e616d2380
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x1e7a58ebd041 0x7e616d2460
	Vector GetScaleAtSplineInputKey(float InKey);// 0x1e7958ebd041 0x7e616d2540
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x1e7858ebd041 0x7e616d2620
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e7758ebd041 0x7e616d2700
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e7658ebd041 0x7e616d27e0
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e7558ebd041 0x7e616d28c0
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e7458ebd041 0x7e616d29a0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e7358ebd041 0x7e616d2a80
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e7258ebd041 0x7e616d2b60
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e7158ebd041 0x7e616d2c40
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e7058ebd041 0x7e616d2d20
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e6f58ebd041 0x7e616d2e00
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e6e58ebd041 0x7e616d2ee0
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e6d58ebd041 0x7e616d2fc0
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e6c58ebd041 0x7e616d30a0
	int GetNumberOfSplineSegments();// 0x1e6b58ebd041 0x7e616d3180
	int GetNumberOfSplinePoints();// 0x1e6a58ebd041 0x7e616d3260
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e6958ebd041 0x7e616d3340
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e6858ebd041 0x7e616d3420
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e6758ebd041 0x7e616d3500
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e6658ebd041 0x7e616d35e0
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x1e6558ebd041 0x7e616d36c0
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x1e6458ebd041 0x7e616d37a0
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e6358ebd041 0x7e616d3880
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x1ea458ebd041 0x7e616d3960
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x1e6158ebd041 0x7e616d0080
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x1e6058ebd041 0x7e616d0160
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x1e5f58ebd041 0x7e616d0240
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x1e5e58ebd041 0x7e616d0320
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e5d58ebd041 0x7e616d0400
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e5c58ebd041 0x7e616d04e0
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e5b58ebd041 0x7e616d05c0
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e5a58ebd041 0x7e616d06a0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x1e5958ebd041 0x7e616d0780
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e5858ebd041 0x7e616d0860
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5758ebd041 0x7e616d0940
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x1e5658ebd041 0x7e616d0a20
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5558ebd041 0x7e616d0b00
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x1e5458ebd041 0x7e616d0be0
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5358ebd041 0x7e616d0cc0
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5258ebd041 0x7e616d0da0
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5158ebd041 0x7e616d0e80
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5058ebd041 0x7e616d0f60
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x1e4f58ebd041 0x7e616d1040
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e4e58ebd041 0x7e616d1120
	bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, byte CoordinateSpace, const float MaxSquareDistanceFromSpline, out Vector[] OutPoints);// 0x1e4d58ebd041 0x7e616d1200
	bool ConvertSplineToPolyLine(byte CoordinateSpace, const float MaxSquareDistanceFromSpline, out Vector[] OutPoints);// 0x1e4c58ebd041 0x7e616d12e0
	bool ConvertSplineSegmentToPolyLine(int SplinePointStartIndex, byte CoordinateSpace, const float MaxSquareDistanceFromSpline, out Vector[] OutPoints);// 0x1e4b58ebd041 0x7e616d13c0
	void ClearSplinePoints(bool bUpdateSpline);// 0x1e4a58ebd041 0x7e616d14a0
	void AddSplineWorldPoint(out const Vector Position);// 0x1e4958ebd041 0x7e616d1580
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x1e4858ebd041 0x7e616d1660
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x1e4758ebd041 0x7e616d1740
	void AddSplineLocalPoint(out const Vector Position);// 0x1e4658ebd041 0x7e616d1820
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x1e4558ebd041 0x7e616d1900
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x1e4458ebd041 0x7e616d19e0

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18] 0x7e6166e180
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18] 0x7e6166e200
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18] 0x7e6166e280
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18] 0x7e6166e300
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8] 0x7e6166e380
	uint32 Version;//[Offset: 0x68, Size: 0x4] 0x7e6166e400

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10] 0x7e841b6e60
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e841e0e00
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x7e8412f200

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x7e841e0500
	Quat OutVal;//[Offset: 0x10, Size: 0x20] 0x7e841e0480
	Quat ArriveTangent;//[Offset: 0x30, Size: 0x20] 0x7e841e0400
	Quat LeaveTangent;//[Offset: 0x50, Size: 0x20] 0x7e841e0180
	byte InterpMode;//[Offset: 0x70, Size: 0x1] 0x7e841e0100

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4] 0x7e6166de00
	Vector Position;//[Offset: 0x8, Size: 0x18] 0x7e6166de80
	Vector ArriveTangent;//[Offset: 0x20, Size: 0x18] 0x7e6166df00
	Vector LeaveTangent;//[Offset: 0x38, Size: 0x18] 0x7e6166df80
	Rotator Rotation;//[Offset: 0x50, Size: 0x18] 0x7e6166e000
	Vector Scale;//[Offset: 0x68, Size: 0x18] 0x7e6166e080
	byte Type;//[Offset: 0x80, Size: 0x1] 0x7e6166e100

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x278, Size: 0x8] 0x7e61bbe180

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x5d0, Size: 0xb0] 0x7e61bbfd00
	Vector SplineUpDir;//[Offset: 0x680, Size: 0x18] 0x7e61bbfd80
	float SplineBoundaryMin;//[Offset: 0x698, Size: 0x4] 0x7e61bbfe00
	Guid CachedMeshBodySetupGuid;//[Offset: 0x69c, Size: 0x10] 0x7e61bbfe80
	BodySetup* BodySetup;//[Offset: 0x6b0, Size: 0x8] 0x7e61bbff00
	float SplineBoundaryMax;//[Offset: 0x6b8, Size: 0x4] 0x7e61bbff80
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6bc, Size: 0x1] 0x7e61bbe780
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6bc, Size: 0x1] 0x7e61bbe800
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6bc, Size: 0x1] 0x7e61bbe880
	byte ForwardAxis;//[Offset: 0x6bd, Size: 0x1] 0x7e61bbe900
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x6c0, Size: 0x4] 0x7e61bbe980
	void UpdateMesh();// 0x358558ebd041 0x7e61bc6440
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x358458ebd041 0x7e61bc6520
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x358358ebd041 0x7e61bc6600
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x358258ebd041 0x7e61bc66e0
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x358158ebd041 0x7e61bc67c0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x358058ebd041 0x7e61bc68a0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x357f58ebd041 0x7e61bc6980
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x357e58ebd041 0x7e61bc6a60
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x357d58ebd041 0x7e61bc6b40
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x357c58ebd041 0x7e61bc6c20
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x357b58ebd041 0x7e61bc6d00
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x357a58ebd041 0x7e61bc6de0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x357958ebd041 0x7e61bc6ec0
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x357858ebd041 0x7e61bc6fa0
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x357758ebd041 0x7e61bc7080
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x357658ebd041 0x7e61bc7160
	Vector GetStartTangent();// 0x357558ebd041 0x7e61bc7240
	Vector2D GetStartScale();// 0x35b658ebd041 0x7e61bc7320
	float GetStartRoll();// 0x357358ebd041 0x7e61bc3a40
	Vector GetStartPosition();// 0x357258ebd041 0x7e61bc3b20
	Vector2D GetStartOffset();// 0x357158ebd041 0x7e61bc3c00
	Vector GetSplineUpDir();// 0x357058ebd041 0x7e61bc3ce0
	byte GetForwardAxis();// 0x356f58ebd041 0x7e61bc3dc0
	Vector GetEndTangent();// 0x356e58ebd041 0x7e61bc3ea0
	Vector2D GetEndScale();// 0x356d58ebd041 0x7e61bc3f80
	float GetEndRoll();// 0x356c58ebd041 0x7e61bc4060
	Vector GetEndPosition();// 0x356b58ebd041 0x7e61bc4140
	Vector2D GetEndOffset();// 0x356a58ebd041 0x7e61bc4220
	float GetBoundaryMin();// 0x356958ebd041 0x7e61bc4300
	float GetBoundaryMax();// 0x356858ebd041 0x7e61bc43e0

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0x18] 0x7e6166d780
	Vector StartTangent;//[Offset: 0x18, Size: 0x18] 0x7e6166d800
	Vector2D StartScale;//[Offset: 0x30, Size: 0x10] 0x7e6166d880
	float StartRoll;//[Offset: 0x40, Size: 0x4] 0x7e6166d900
	Vector2D StartOffset;//[Offset: 0x48, Size: 0x10] 0x7e6166d980
	Vector EndPos;//[Offset: 0x58, Size: 0x18] 0x7e6166da00
	Vector2D EndScale;//[Offset: 0x70, Size: 0x10] 0x7e6166da80
	Vector EndTangent;//[Offset: 0x80, Size: 0x18] 0x7e6166db00
	float EndRoll;//[Offset: 0x98, Size: 0x4] 0x7e6166db80
	Vector2D EndOffset;//[Offset: 0xa0, Size: 0x10] 0x7e6166dc00

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x2b0, Size: 0x4] 0x7e61be0900
	Vector SocketOffset;//[Offset: 0x2b8, Size: 0x18] 0x7e61be0980
	Vector TargetOffset;//[Offset: 0x2d0, Size: 0x18] 0x7e61be0a00
	float ProbeSize;//[Offset: 0x2e8, Size: 0x4] 0x7e61be0a80
	byte ProbeChannel;//[Offset: 0x2ec, Size: 0x1] 0x7e61be0b00
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ed, Size: 0x1] 0x7e61be0b80
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ed, Size: 0x1] 0x7e61be0c00
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ed, Size: 0x1] 0x7e61be0c80
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ed, Size: 0x1] 0x7e61be0d00
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ed, Size: 0x1] 0x7e61be0d80
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ed, Size: 0x1] 0x7e61be0e00
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ed, Size: 0x1] 0x7e61be0e80
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ed, Size: 0x1] 0x7e61be0f00
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ee, Size: 0x1] 0x7e61be0f80
	float CameraLagSpeed;//[Offset: 0x2f0, Size: 0x4] 0x7e61be1000
	float CameraRotationLagSpeed;//[Offset: 0x2f4, Size: 0x4] 0x7e61be1080
	float CameraLagMaxTimeStep;//[Offset: 0x2f8, Size: 0x4] 0x7e61bbf800
	float CameraLagMaxDistance;//[Offset: 0x2fc, Size: 0x4] 0x7e61bbf880
	bool bClampToMaxPhysicsDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1] 0x7e61bbf900
	bool IsCollisionFixApplied();// 0x358a58ebd041 0x7e61bc5fe0
	Vector GetUnfixedCameraPosition();// 0x358958ebd041 0x7e61bc60c0
	Rotator GetTargetRotation();// 0x358858ebd041 0x7e61bc61a0

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x278, Size: 0x8] 0x7e618e6580
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x7e618e6600
	enum NavigationGeometryGatheringMode;//[Offset: 0x281, Size: 0x1] 0x7e618977c0
	void SetMobility(byte InMobility);// 0x27a458ebd041 0x7e618d5560

--------------------------------
Class: MeshDescriptionBaseBulkData.Object

--------------------------------
Class: StaticMeshDescriptionBulkData.MeshDescriptionBaseBulkData.Object

--------------------------------
Class: StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeQuad.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeCylinder.StereoLayerShape.Object
	float Radius;//[Offset: 0x28, Size: 0x4] 0x7e61be2580
	float OverlayArc;//[Offset: 0x2c, Size: 0x4] 0x7e61be2600
	int Height;//[Offset: 0x30, Size: 0x4] 0x7e61be2680
	void SetRadius(float InRadius);// 0x35a258ebd041 0x7e61bc84a0
	void SetOverlayArc(float InOverlayArc);// 0x35a158ebd041 0x7e61bc8580
	void SetHeight(int InHeight);// 0x35a058ebd041 0x7e61bc8660

--------------------------------
Class: StereoLayerShapeCubemap.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeEquirect.StereoLayerShape.Object
	Box2D LeftUVRect;//[Offset: 0x28, Size: 0x28] 0x7e61be2200
	Box2D RightUVRect;//[Offset: 0x50, Size: 0x28] 0x7e61be2280
	Vector2D LeftScale;//[Offset: 0x78, Size: 0x10] 0x7e61be2300
	Vector2D RightScale;//[Offset: 0x88, Size: 0x10] 0x7e61be2380
	Vector2D LeftBias;//[Offset: 0x98, Size: 0x10] 0x7e61be2400
	Vector2D RightBias;//[Offset: 0xa8, Size: 0x10] 0x7e61be2480
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x35a358ebd041 0x7e61bc83c0

--------------------------------
Class: EquirectProps
	Box2D LeftUVRect;//[Offset: 0x0, Size: 0x28] 0x7e61680680
	Box2D RightUVRect;//[Offset: 0x28, Size: 0x28] 0x7e61680700
	Vector2D LeftScale;//[Offset: 0x50, Size: 0x10] 0x7e61680780
	Vector2D RightScale;//[Offset: 0x60, Size: 0x10] 0x7e61680800
	Vector2D LeftBias;//[Offset: 0x70, Size: 0x10] 0x7e61680880
	Vector2D RightBias;//[Offset: 0x80, Size: 0x10] 0x7e61680900

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1] 0x7e61be3580
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1] 0x7e61be3600
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1] 0x7e61be3680
	Texture* Texture;//[Offset: 0x2b8, Size: 0x8] 0x7e61be3700
	Texture* LeftTexture;//[Offset: 0x2c0, Size: 0x8] 0x7e61be3780
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1] 0x7e61be3800
	Vector2D QuadSize;//[Offset: 0x2d0, Size: 0x10] 0x7e61be3880
	Box2D UVRect;//[Offset: 0x2e0, Size: 0x28] 0x7e61be3900
	float CylinderRadius;//[Offset: 0x308, Size: 0x4] 0x7e61be3980
	float CylinderOverlayArc;//[Offset: 0x30c, Size: 0x4] 0x7e61be3a00
	int CylinderHeight;//[Offset: 0x310, Size: 0x4] 0x7e61be3a80
	EquirectProps EquirectProps;//[Offset: 0x318, Size: 0x90] 0x7e61be3b00
	byte StereoLayerType;//[Offset: 0x3a8, Size: 0x1] 0x7e61be3b80
	byte StereoLayerShape;//[Offset: 0x3a9, Size: 0x1] 0x7e61be3c00
	StereoLayerShape* Shape;//[Offset: 0x3b0, Size: 0x8] 0x7e61be3c80
	int Priority;//[Offset: 0x3b8, Size: 0x4] 0x7e61be3d00
	void SetUVRect(Box2D InUVRect);// 0x35af58ebd041 0x7e61bc7940
	void SetTexture(Texture* InTexture);// 0x35ae58ebd041 0x7e61bc7a20
	void SetQuadSize(Vector2D InQuadSize);// 0x35ad58ebd041 0x7e61bc7b00
	void SetPriority(int InPriority);// 0x35ac58ebd041 0x7e61bc7be0
	void SetLeftTexture(Texture* InTexture);// 0x35ab58ebd041 0x7e61bc7cc0
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x35aa58ebd041 0x7e61bc7da0
	void MarkTextureForUpdate();// 0x35a958ebd041 0x7e61bc7e80
	Box2D GetUVRect();// 0x35a858ebd041 0x7e61bc7f60
	Texture* GetTexture();// 0x35a758ebd041 0x7e61bc8040
	Vector2D GetQuadSize();// 0x35a658ebd041 0x7e61bc8120
	int GetPriority();// 0x35a558ebd041 0x7e61bc8200
	Texture* GetLeftTexture();// 0x35a458ebd041 0x7e61bc82e0

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	void ShowSplashScreen();// 0x35b358ebd041 0x7e61bc75c0
	void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x35b258ebd041 0x7e61bc76a0
	void HideSplashScreen();// 0x35b158ebd041 0x7e61bc7780
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0x35b058ebd041 0x7e61bc7860

--------------------------------
Class: StringTable.Object

--------------------------------
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object
	WorldSubsystem* GetWorldSubsystem(Object* ContextObject, class WorldSubsystem Class);// 0x35b958ebd041 0x7e61bcaa40
	LocalPlayerSubsystem* GetLocalPlayerSubsystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0x35b858ebd041 0x7e61bcab20
	LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* ContextObject, class LocalPlayerSubsystem Class);// 0x35b758ebd041 0x7e61bcac00
	GameInstanceSubsystem* GetGameInstanceSubsystem(Object* ContextObject, class GameInstanceSubsystem Class);// 0x35f858ebd041 0x7e61bcace0
	EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0x35b558ebd041 0x7e61bc7400
	AudioEngineSubsystem* GetAudioEngineSubsystem(Object* ContextObject, class AudioEngineSubsystem Class);// 0x35b458ebd041 0x7e61bc74e0

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object
	FrameRate FrameRate;//[Offset: 0x2c, Size: 0x8] 0x7e61be4900
	bool bGenerateFullFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7e61be4980
	bool bUseHighPerformanceClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7e61be4a00

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x28, Size: 0x18] 0x7e61be4780
	FText UndefaultedText;//[Offset: 0x40, Size: 0x18] 0x7e61be4800
	FText TransientText;//[Offset: 0x58, Size: 0x18] 0x7e61be4880

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x278, Size: 0x8] 0x7e61be4700

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x538, Size: 0x18] 0x7e61be5a80
	MaterialInterface* TextMaterial;//[Offset: 0x550, Size: 0x8] 0x7e61be5b00
	Font* Font;//[Offset: 0x558, Size: 0x8] 0x7e61be5b80
	byte HorizontalAlignment;//[Offset: 0x560, Size: 0x1] 0x7e61be5c00
	byte VerticalAlignment;//[Offset: 0x561, Size: 0x1] 0x7e61be5c80
	Color TextRenderColor;//[Offset: 0x564, Size: 0x4] 0x7e61be5d00
	float XScale;//[Offset: 0x568, Size: 0x4] 0x7e61be5d80
	float YScale;//[Offset: 0x56c, Size: 0x4] 0x7e61be5e00
	float WorldSize;//[Offset: 0x570, Size: 0x4] 0x7e61be5e80
	float InvDefaultSize;//[Offset: 0x574, Size: 0x4] 0x7e61be5f00
	float HorizSpacingAdjust;//[Offset: 0x578, Size: 0x4] 0x7e61be5f80
	float VertSpacingAdjust;//[Offset: 0x57c, Size: 0x4] 0x7e61be6000
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 0x1] 0x7e61be6080
	void SetYScale(float Value);// 0x35c658ebd041 0x7e61bc9ee0
	void SetXScale(float Value);// 0x35c558ebd041 0x7e61bc9fc0
	void SetWorldSize(float Value);// 0x35c458ebd041 0x7e61bca0a0
	void SetVertSpacingAdjust(float Value);// 0x35c358ebd041 0x7e61bca180
	void SetVerticalAlignment(byte Value);// 0x35c258ebd041 0x7e61bca260
	void SetTextRenderColor(Color Value);// 0x35c158ebd041 0x7e61bca340
	void SetTextMaterial(MaterialInterface* Material);// 0x35c058ebd041 0x7e61bca420
	void SetHorizSpacingAdjust(float Value);// 0x35bf58ebd041 0x7e61bca500
	void SetHorizontalAlignment(byte Value);// 0x35be58ebd041 0x7e61bca5e0
	void SetFont(Font* Value);// 0x35bd58ebd041 0x7e61bca6c0
	void K2_SetText(out const FText Value);// 0x35bc58ebd041 0x7e61bca7a0
	Vector GetTextWorldSize();// 0x35bb58ebd041 0x7e61bca880
	Vector GetTextLocalSize();// 0x35ba58ebd041 0x7e61bca960

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x248, Size: 0x1] 0x7e61be5900
	byte AddressY;//[Offset: 0x249, Size: 0x1] 0x7e61be5980
	byte AddressZ;//[Offset: 0x24a, Size: 0x1] 0x7e61be5a00

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0x1f8, Size: 0x1] 0x7e61be5880

--------------------------------
Class: TextureCubeArray.Texture.StreamableRenderAsset.Object

--------------------------------
Class: TextureEncodingProjectSettings.DeveloperSettings.Object
	bool bFinalUsesRDO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61be5380
	int8 FinalRDOLambda;//[Offset: 0x39, Size: 0x1] 0x7e61be5400
	enum FinalEffortLevel;//[Offset: 0x3a, Size: 0x1] 0x7e61bd1960
	enum FinalUniversalTiling;//[Offset: 0x3b, Size: 0x1] 0x7e61bd1a00
	bool bFastUsesRDO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7e61be5580
	int8 FastRDOLambda;//[Offset: 0x3d, Size: 0x1] 0x7e61be5600
	enum FastEffortLevel;//[Offset: 0x3e, Size: 0x1] 0x7e61bd1aa0
	enum FastUniversalTiling;//[Offset: 0x3f, Size: 0x1] 0x7e61bd1b40
	enum CookUsesSpeed;//[Offset: 0x40, Size: 0x1] 0x7e61bd1be0
	enum EditorUsesSpeed;//[Offset: 0x41, Size: 0x1] 0x7e61bd1c80

--------------------------------
Class: TextureEncodingUserSettings.DeveloperSettings.Object
	enum ForceEncodeSpeed;//[Offset: 0x38, Size: 0x1] 0x7e61bd18c0

--------------------------------
Class: TextureMipDataProviderFactory.AssetUserData.Object

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98] 0x7e61be7d00
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x7e61be7d80
	void Stop();// 0x35de58ebd041 0x7e61bcc3a0
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x35dd58ebd041 0x7e61bcc480
	void SetTimelineLengthMode(byte NewLengthMode);// 0x35dc58ebd041 0x7e61bcc560
	void SetTimelineLength(float NewLength);// 0x35db58ebd041 0x7e61bcc640
	void SetPlayRate(float NewRate);// 0x35da58ebd041 0x7e61bcc720
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x35d958ebd041 0x7e61bcc800
	void SetNewTime(float NewTime);// 0x35d858ebd041 0x7e61bcc8e0
	void SetLooping(bool bNewLooping);// 0x361958ebd041 0x7e61bcc9c0
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x35d658ebd041 0x7e61bc90e0
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x35d558ebd041 0x7e61bc91c0
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x35d458ebd041 0x7e61bc92a0
	void ReverseFromEnd();// 0x35d358ebd041 0x7e61bc9380
	void Reverse();// 0x35d258ebd041 0x7e61bc9460
	void PlayFromStart();// 0x35d158ebd041 0x7e61bc9540
	void Play();// 0x35d058ebd041 0x7e61bc9620
	void OnRep_Timeline();// 0x35cf58ebd041 0x7e61bc9700
	bool IsReversing();// 0x35ce58ebd041 0x7e61bc97e0
	bool IsPlaying();// 0x35cd58ebd041 0x7e61bc98c0
	bool IsLooping();// 0x35cc58ebd041 0x7e61bc99a0
	float GetTimelineLength();// 0x35cb58ebd041 0x7e61bc9a80
	float GetScaledTimelineLength();// 0x35ca58ebd041 0x7e61bc9b60
	float GetPlayRate();// 0x35c958ebd041 0x7e61bc9c40
	float GetPlaybackPosition();// 0x35c858ebd041 0x7e61bc9d20
	bool GetIgnoreTimeDilation();// 0x35c758ebd041 0x7e61bc9e00

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1] 0x7e61683880
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7e61683900
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7e61683980
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7e61683a00
	float Length;//[Offset: 0x4, Size: 0x4] 0x7e61683a80
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7e61683b00
	float Position;//[Offset: 0xc, Size: 0x4] 0x7e61683b80
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10] 0x7e61690ec0
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10] 0x7e61690f60
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10] 0x7e61691000
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10] 0x7e616910a0
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10] 0x7e61683e00
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10] 0x7e61683e80
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8] 0x7e61683f00
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8] 0x7e61683f80

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61682500
	delegate EventFunc;//[Offset: 0x4, Size: 0x10] 0x7e61682580

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8] 0x7e61682300
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7e61682380
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7e61682400
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8] 0x7e61682480

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8] 0x7e61684200
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7e61682180
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7e61682200
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8] 0x7e61682280

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8] 0x7e61684000
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7e61684080
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7e61684100
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8] 0x7e61684180

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4] 0x7e61be7400

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x278, Size: 0x8] 0x7e61be9080

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0x35e558ebd041 0x7e61bcbd80
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0x35e458ebd041 0x7e61bcbe60
	void Init();// 0x35e358ebd041 0x7e61bcbf40
	int GetNumAccounts();// 0x35e258ebd041 0x7e61bcc020
	FString GetAccountName(int AccountIndex);// 0x35e158ebd041 0x7e61bcc100
	bool CanShowTweetUI();// 0x35e058ebd041 0x7e61bcc1e0
	bool AuthorizeAccounts();// 0x35df58ebd041 0x7e61bcc2c0

--------------------------------
Class: TypedElementCommonActions.Object
	ScriptTypedElementHandle[] K2_DuplicateSelectedElements(const TypedElementSelectionSet* SelectionSet, World* World, out const Vector LocationOffset);// 0x35e958ebd041 0x7e61bcba00
	ScriptTypedElementHandle[] DuplicateNormalizedElements(const ScriptTypedElementListProxy ElementList, World* World, out const Vector LocationOffset);// 0x35e858ebd041 0x7e61bcbae0
	bool DeleteSelectedElements(TypedElementSelectionSet* SelectionSet, World* World, out const TypedElementDeletionOptions DeletionOptions);// 0x35e758ebd041 0x7e61bcbbc0
	bool DeleteNormalizedElements(const ScriptTypedElementListProxy ElementList, World* World, TypedElementSelectionSet* InSelectionSet, out const TypedElementDeletionOptions DeletionOptions);// 0x35e658ebd041 0x7e61bcbca0

--------------------------------
Class: TypedElementSelectionSet.Object
	delegate OnPreSelectionChange;//[Offset: 0x828, Size: 0x10] 0x7e6144c780
	delegate OnSelectionChange;//[Offset: 0x838, Size: 0x10] 0x7e6144c800
	bool SetSelection(out const ScriptTypedElementHandle[] InElementHandles, const TypedElementSelectionOptions InSelectionOptions);// 0x117b58ebd041 0x7e6143fc80
	bool SelectElements(out const ScriptTypedElementHandle[] InElementHandles, const TypedElementSelectionOptions InSelectionOptions);// 0x117a58ebd041 0x7e6143fd60
	bool SelectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0x117958ebd041 0x7e6143fe40
	void RestoreSelectionState(out const TypedElementSelectionSetState InSelectionState);// 0xffffff8158ebd000 0x7e6143ff20
	void OnPreChangeDynamic__DelegateSignature(const TypedElementSelectionSet* SelectionSet);// 0x117758ebd041 0x7e6143caa0
	void OnChangeDynamic__DelegateSignature(const TypedElementSelectionSet* SelectionSet);// 0x117658ebd041 0x7e6143cb80
	ScriptTypedElementHandle[] K2_GetSelectedElementHandles(const class Interface InBaseInterfaceType);// 0x117458ebd041 0x7e6143cc60
	bool IsElementSelected(out const ScriptTypedElementHandle InElementHandle, const TypedElementIsSelectedOptions InSelectionOptions);// 0x117358ebd041 0x7e6143cd40
	bool HasSelectedObjects(const class Object InRequiredClass);// 0x117258ebd041 0x7e6143ce20
	bool HasSelectedElements(const class Interface InBaseInterfaceType);// 0x117158ebd041 0x7e6143cf00
	Object* GetTopSelectedObject(const class Object InRequiredClass);// 0x116f58ebd041 0x7e6143cfe0
	ScriptTypedElementHandle GetSelectionElement(out const ScriptTypedElementHandle InElementHandle, const enum InSelectionMethod);// 0x116e58ebd041 0x7e6143d0c0
	Object*[] GetSelectedObjects(const class Object InRequiredClass);// 0x116d58ebd041 0x7e6143d1a0
	int GetNumSelectedElements();// 0x116b58ebd041 0x7e6143d280
	TypedElementSelectionSetState GetCurrentSelectionState();// 0x116a58ebd041 0x7e6143d360
	Object* GetBottomSelectedObject(const class Object InRequiredClass);// 0x116958ebd041 0x7e6143d440
	bool DeselectElements(out const ScriptTypedElementHandle[] InElementHandles, const TypedElementSelectionOptions InSelectionOptions);// 0x116858ebd041 0x7e6143d520
	bool DeselectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0x116758ebd041 0x7e6143d600
	int CountSelectedObjects(const class Object InRequiredClass);// 0x116658ebd041 0x7e6143d6e0
	int CountSelectedElements(const class Interface InBaseInterfaceType);// 0x116558ebd041 0x7e6143d7c0
	bool ClearSelection(const TypedElementSelectionOptions InSelectionOptions);// 0x116458ebd041 0x7e6143d8a0
	bool CanSelectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0x116158ebd041 0x7e6143d980
	bool CanDeselectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0x115f58ebd041 0x7e6143da60
	bool AllowSelectionModifiers(out const ScriptTypedElementHandle InElementHandle);// 0x114f58ebd041 0x7e6143db40

--------------------------------
Class: ScriptTypedElementHandle

--------------------------------
Class: TypedElementSelectionOptions
	bool bAllowHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e6144bd80
	bool bAllowGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e6144be00
	bool bAllowLegacyNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e6144be80
	bool bWarnIfLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7e6144bf00
	enum ChildElementInclusionMethod;//[Offset: 0x4, Size: 0x1] 0x7e84855b00

--------------------------------
Class: TypedElementSelectionSetState
	TypedElementSelectionSet* CreatedFromSelectionSet;//[Offset: 0x0, Size: 0x8] 0x7e6144d600

--------------------------------
Class: TypedElementIsSelectedOptions
	bool bAllowIndirect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e6144d080

--------------------------------
Class: ScriptTypedElementListProxy

--------------------------------
Class: TypedElementDeletionOptions
	bool bVerifyDeletionCanHappen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61684b00
	bool bWarnAboutReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e61684b80
	bool bWarnAboutSoftReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e61684c00

--------------------------------
Class: TypedElementWorldInterface.Interface.Object
	bool SetWorldTransform(out const ScriptTypedElementHandle InElementHandle, out const Transform InTransform);// 0x35fc58ebd041 0x7e61bce320
	bool SetRelativeTransform(out const ScriptTypedElementHandle InElementHandle, out const Transform InTransform);// 0x35fb58ebd041 0x7e61bce400
	bool SetPivotOffset(out const ScriptTypedElementHandle InElementHandle, out const Vector InPivotOffset);// 0x35fa58ebd041 0x7e61bce4e0
	void NotifyMovementStarted(out const ScriptTypedElementHandle InElementHandle);// 0x35f958ebd041 0x7e61bce5c0
	void NotifyMovementOngoing(out const ScriptTypedElementHandle InElementHandle);// 0x363558ebd041 0x7e61bce6a0
	void NotifyMovementEnded(out const ScriptTypedElementHandle InElementHandle);// 0x35f758ebd041 0x7e61bcadc0
	bool IsTemplateElement(out const ScriptTypedElementHandle InElementHandle);// 0x35f658ebd041 0x7e61bcaea0
	bool GetWorldTransform(out const ScriptTypedElementHandle InElementHandle, out Transform OutTransform);// 0x35f558ebd041 0x7e61bcaf80
	bool GetRelativeTransform(out const ScriptTypedElementHandle InElementHandle, out Transform OutTransform);// 0x35f458ebd041 0x7e61bcb060
	bool GetPivotOffset(out const ScriptTypedElementHandle InElementHandle, out Vector OutPivotOffset);// 0x35f358ebd041 0x7e61bcb140
	World* GetOwnerWorld(out const ScriptTypedElementHandle InElementHandle);// 0x35f258ebd041 0x7e61bcb220
	Level* GetOwnerLevel(out const ScriptTypedElementHandle InElementHandle);// 0x35f158ebd041 0x7e61bcb300
	bool GetBounds(out const ScriptTypedElementHandle InElementHandle, out BoxSphereBounds OutBounds);// 0x35f058ebd041 0x7e61bcb3e0
	ScriptTypedElementHandle DuplicateElement(out const ScriptTypedElementHandle InElementHandle, World* InWorld, out const Vector InLocationOffset);// 0x35ef58ebd041 0x7e61bcb4c0
	bool DeleteElement(out const ScriptTypedElementHandle InElementHandle, World* InWorld, TypedElementSelectionSet* InSelectionSet, out const TypedElementDeletionOptions InDeletionOptions);// 0x35ee58ebd041 0x7e61bcb5a0
	bool CanMoveElement(out const ScriptTypedElementHandle InElementHandle, const enum InWorldType);// 0x35ed58ebd041 0x7e61bcb680
	bool CanEditElement(out const ScriptTypedElementHandle InElementHandle);// 0x35ec58ebd041 0x7e61bcb760
	bool CanDuplicateElement(out const ScriptTypedElementHandle InElementHandle);// 0x35eb58ebd041 0x7e61bcb840
	bool CanDeleteElement(out const ScriptTypedElementHandle InElementHandle);// 0x35ea58ebd041 0x7e61bcb920

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50] 0x7e6167ef80

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	byte Status;//[Offset: 0xc0, Size: 0x1] 0x7e61bea800
	Guid Guid;//[Offset: 0xc4, Size: 0x10] 0x7e61bea880

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1] 0x7e61bd3940
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50] 0x7e6167ee00
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50] 0x7e6167eec0
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18] 0x7e61bec100
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18] 0x7e61bec180
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18] 0x7e61bec200
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18] 0x7e61bec280
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18] 0x7e61bec300
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18] 0x7e61bec380
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18] 0x7e61bec400
	float ApplicationScale;//[Offset: 0x188, Size: 0x4] 0x7e61bec480
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1] 0x7e61bd39e0
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18] 0x7e61bec580
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88] 0x7e61bec600
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x7e61bea580
	IntPoint DesignScreenSize;//[Offset: 0x234, Size: 0x8] 0x7e61bea600
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x7e61bea680
	Object*[] CursorClasses;//[Offset: 0x240, Size: 0x10] 0x7e61bd3a80
	ClassPtrProperty CustomScalingRuleClassInstance;//[Size: 0x8] 0x7e61bd3b20
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x258, Size: 0x8] 0x7e61bea780

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8] 0x7e61684880
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x10] 0x7e61684900

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x68, Size: 0x8] 0x7e61beb700
	byte ConstructionOp;//[Offset: 0x70, Size: 0x1] 0x7e61beb780
	int VolumeSizeX;//[Offset: 0x74, Size: 0x4] 0x7e61beb800
	int VolumeSizeY;//[Offset: 0x78, Size: 0x4] 0x7e61beb880
	int VolumeSizeZ;//[Offset: 0x7c, Size: 0x4] 0x7e61beb900
	int SubImagesX;//[Offset: 0x80, Size: 0x4] 0x7e61beb980
	int SubImagesY;//[Offset: 0x84, Size: 0x4] 0x7e61beba00
	int FrameCount;//[Offset: 0x88, Size: 0x4] 0x7e61beba80
	float FramesPerSecond;//[Offset: 0x8c, Size: 0x4] 0x7e61bebb00
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61bebb80
	VectorFieldStatic* NoiseField;//[Offset: 0x98, Size: 0x8] 0x7e61bebc00
	float NoiseScale;//[Offset: 0xa0, Size: 0x4] 0x7e61bebc80
	float NoiseMax;//[Offset: 0xa4, Size: 0x4] 0x7e61bebd00

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x64, Size: 0x4] 0x7e61bed380
	int SizeY;//[Offset: 0x68, Size: 0x4] 0x7e61bed400
	int SizeZ;//[Offset: 0x6c, Size: 0x4] 0x7e61bed480
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7e61bed500

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x538, Size: 0x8] 0x7e61bed580
	float Intensity;//[Offset: 0x540, Size: 0x4] 0x7e61bed600
	float Tightness;//[Offset: 0x544, Size: 0x4] 0x7e61bed680
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1] 0x7e61beb600
	void SetIntensity(float NewIntensity);// 0x35fd58ebd041 0x7e61bce240

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x278, Size: 0x8] 0x7e61bed300

--------------------------------
Class: ViewportStatsSubsystem.WorldSubsystem.Subsystem.Object
	void RemoveDisplayDelegate(const int IndexToRemove);// 0x360058ebd041 0x7e61bcdfa0
	void AddTimedDisplay(FText Text, LinearColor Color, float Duration, out const Vector2D DisplayOffset);// 0x35ff58ebd041 0x7e61bce080
	int AddDisplayDelegate(out const delegate Delegate);// 0x35fe58ebd041 0x7e61bce160

--------------------------------
Class: VirtualTexture.Object

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object

--------------------------------
Class: VirtualTexturePoolConfig.Object
	int DefaultSizeInMegabyte;//[Offset: 0x28, Size: 0x4] 0x7e61becc00
	VirtualTextureSpacePoolConfig[] Pools;//[Offset: 0x30, Size: 0x10] 0x7e61bd38a0

--------------------------------
Class: VirtualTextureSpacePoolConfig
	int MinTileSize;//[Offset: 0x0, Size: 0x4] 0x7e61686300
	int MaxTileSize;//[Offset: 0x4, Size: 0x4] 0x7e61684280
	byte[] Formats;//[Offset: 0x8, Size: 0x10] 0x7e61690d80
	int SizeInMegabyte;//[Offset: 0x18, Size: 0x4] 0x7e61684380
	bool bEnableResidencyMipMapBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7e61684400
	bool bAllowSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x7e61684480
	uint32 ScalabilityGroup;//[Offset: 0x20, Size: 0x4] 0x7e61684500
	int MinScaledSizeInMegabyte;//[Offset: 0x24, Size: 0x4] 0x7e61684580
	int MaxScaledSizeInMegabyte;//[Offset: 0x28, Size: 0x4] 0x7e61684600

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerFilterVolume.Volume.Brush.Actor.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0x360658ebd041 0x7e61bcda60
	void LogText(Object* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);// 0x360558ebd041 0x7e61bcdb40
	void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString Text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0x360458ebd041 0x7e61bcdc20
	void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0x360358ebd041 0x7e61bcdd00
	void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0x360258ebd041 0x7e61bcdde0
	void EnableRecording(bool bEnabled);// 0x360158ebd041 0x7e61bcdec0

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: VOIPTalker.ActorComponent.Object
	VoiceSettings Settings;//[Offset: 0xb0, Size: 0x18] 0x7e61bedc00
	void RegisterWithPlayerState(PlayerState* OwningState);// 0x360b58ebd041 0x7e61bcd600
	float GetVoiceLevel();// 0x360a58ebd041 0x7e61bcd6e0
	VOIPTalker* CreateTalkerForPlayer(PlayerState* OwningState);// 0x360958ebd041 0x7e61bcd7c0
	void BPOnTalkingEnd();// 0x360858ebd041 0x7e61bcd8a0
	void BPOnTalkingBegin(AudioComponent* AudioComponent);// 0x360758ebd041 0x7e61bcd980

--------------------------------
Class: VoiceSettings
	SceneComponent* ComponentToAttachTo;//[Offset: 0x0, Size: 0x8] 0x7e61686180
	SoundAttenuation* AttenuationSettings;//[Offset: 0x8, Size: 0x8] 0x7e61686200
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x10, Size: 0x8] 0x7e61686280

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object
	void SetMicThreshold(float InThreshold);// 0x360c58ebd041 0x7e61bcd520

--------------------------------
Class: VolumetricCloudComponent.SceneComponent.ActorComponent.Object
	float LayerBottomAltitude;//[Offset: 0x2b0, Size: 0x4] 0x7e61beeb80
	float LayerHeight;//[Offset: 0x2b4, Size: 0x4] 0x7e61beec00
	float TracingStartMaxDistance;//[Offset: 0x2b8, Size: 0x4] 0x7e61beec80
	float TracingMaxDistance;//[Offset: 0x2bc, Size: 0x4] 0x7e61beed00
	float PlanetRadius;//[Offset: 0x2c0, Size: 0x4] 0x7e61beed80
	Color GroundAlbedo;//[Offset: 0x2c4, Size: 0x4] 0x7e61beee00
	MaterialInterface* Material;//[Offset: 0x2c8, Size: 0x8] 0x7e61beee80
	bool bUsePerSampleAtmosphericLightTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x7e61beef00
	float SkyLightCloudBottomOcclusion;//[Offset: 0x2d4, Size: 0x4] 0x7e61beef80
	float ViewSampleCountScale;//[Offset: 0x2d8, Size: 0x4] 0x7e61bef000
	float ReflectionViewSampleCountScale;//[Offset: 0x2dc, Size: 0x4] 0x7e61bef080
	float ReflectionSampleCountScale;//[Offset: 0x2e0, Size: 0x4] 0x7e61bef100
	float ShadowViewSampleCountScale;//[Offset: 0x2e4, Size: 0x4] 0x7e61bef180
	float ShadowReflectionViewSampleCountScale;//[Offset: 0x2e8, Size: 0x4] 0x7e61bef200
	float ShadowReflectionSampleCountScale;//[Offset: 0x2ec, Size: 0x4] 0x7e61bef280
	float ShadowTracingDistance;//[Offset: 0x2f0, Size: 0x4] 0x7e61bef300
	float StopTracingTransmittanceThreshold;//[Offset: 0x2f4, Size: 0x4] 0x7e61bef380
	void SetViewSampleCountScale(float NewValue);// 0x361d58ebd041 0x7e61bcfba0
	void SetTracingStartMaxDistance(float NewValue);// 0x361c58ebd041 0x7e61bcfc80
	void SetTracingMaxDistance(float NewValue);// 0x361b58ebd041 0x7e61bcfd60
	void SetStopTracingTransmittanceThreshold(float NewValue);// 0x361a58ebd041 0x7e61bcfe40
	void SetSkyLightCloudBottomOcclusion(float NewValue);// 0xffffff8158ebd000 0x7e61bcff20
	void SetShadowViewSampleCountScale(float NewValue);// 0x361858ebd041 0x7e61bccaa0
	void SetShadowTracingDistance(float NewValue);// 0x361758ebd041 0x7e61bccb80
	void SetShadowReflectionViewSampleCountScale(float NewValue);// 0x361658ebd041 0x7e61bccc60
	void SetShadowReflectionSampleCountScale(float NewValue);// 0x361558ebd041 0x7e61bccd40
	void SetReflectionViewSampleCountScale(float NewValue);// 0x361458ebd041 0x7e61bcce20
	void SetReflectionSampleCountScale(float NewValue);// 0x361358ebd041 0x7e61bccf00
	void SetPlanetRadius(float NewValue);// 0x361258ebd041 0x7e61bccfe0
	void SetMaterial(MaterialInterface* NewValue);// 0x361158ebd041 0x7e61bcd0c0
	void SetLayerHeight(float NewValue);// 0x361058ebd041 0x7e61bcd1a0
	void SetLayerBottomAltitude(float NewValue);// 0x360f58ebd041 0x7e61bcd280
	void SetGroundAlbedo(Color NewValue);// 0x360e58ebd041 0x7e61bcd360
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);// 0x360d58ebd041 0x7e61bcd440

--------------------------------
Class: VolumetricCloud.Info.Actor.Object
	VolumetricCloudComponent* VolumetricCloudComponent;//[Offset: 0x278, Size: 0x8] 0x7e61beeb00

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object
	Int32Interval AllowedMipLevelRange;//[Offset: 0x2b0, Size: 0x8] 0x7e61beea80

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4] 0x7e8412e600
	int Max;//[Offset: 0x4, Size: 0x4] 0x7e8412e580

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x278, Size: 0x8] 0x7e61beea00

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x2b0, Size: 0x4] 0x7e61befc80
	float Speed;//[Offset: 0x2b4, Size: 0x4] 0x7e61befd00
	float MinGustAmount;//[Offset: 0x2b8, Size: 0x4] 0x7e61befd80
	float MaxGustAmount;//[Offset: 0x2bc, Size: 0x4] 0x7e61befe00
	float Radius;//[Offset: 0x2c0, Size: 0x4] 0x7e61befe80
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1] 0x7e61beff00
	void SetWindType(enum InNewType);// 0x362358ebd041 0x7e61bcf660
	void SetStrength(float InNewStrength);// 0x362258ebd041 0x7e61bcf740
	void SetSpeed(float InNewSpeed);// 0x362158ebd041 0x7e61bcf820
	void SetRadius(float InNewRadius);// 0x362058ebd041 0x7e61bcf900
	void SetMinimumGustAmount(float InNewMinGust);// 0x361f58ebd041 0x7e61bcf9e0
	void SetMaximumGustAmount(float InNewMaxGust);// 0x361e58ebd041 0x7e61bcfac0

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: WorldPartitionEditorCell.Object

--------------------------------
Class: WorldPartitionEditorHash.Object

--------------------------------
Class: WorldPartitionEditorPerProjectUserSettings.Object

--------------------------------
Class: WorldPartitionEditorSpatialHash.WorldPartitionEditorHash.Object

--------------------------------
Class: WorldPartitionLevelStreamingDynamic.LevelStreamingDynamic.LevelStreaming.Object
	bool bShouldBeAlwaysLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1] 0x7e61bf1b80
	WorldPartitionRuntimeLevelStreamingCell* StreamingCell;//[Offset: 0x17c, Size: 0x8] 0x7e61bf1c00
	WorldPartition* OuterWorldPartition;//[Offset: 0x184, Size: 0x8] 0x7e61bf1c80

--------------------------------
Class: WorldPartitionRuntimeLevelStreamingCell.WorldPartitionRuntimeSpatialHashCell.WorldPartitionRuntimeCell.Object
	WorldPartitionLevelStreamingDynamic* LevelStreaming;//[Offset: 0xc8, Size: 0x8] 0x7e61bf1100
	void OnLevelShown();// 0x362c58ebd041 0x7e61bcee80
	void OnLevelHidden();// 0x362b58ebd041 0x7e61bcef60

--------------------------------
Class: WorldPartitionRuntimeSpatialHashCell.WorldPartitionRuntimeCell.Object
	Vector Position;//[Offset: 0x88, Size: 0x18] 0x7e61bf1180
	float Extent;//[Offset: 0xa0, Size: 0x4] 0x7e61bf1200
	int Level;//[Offset: 0xa4, Size: 0x4] 0x7e61bf1280

--------------------------------
Class: WorldPartitionLevelStreamingPolicy.WorldPartitionStreamingPolicy.Object
	<FName,FName> SubObjectsToCellRemapping;//[Offset: 0x9f0, Size: 0x50] 0x7e6167ed40

--------------------------------
Class: WorldPartitionMiniMap.Info.Actor.Object
	Box MiniMapWorldBounds;//[Offset: 0x278, Size: 0x38] 0x7e61bf1800
	Box2D UVOffset;//[Offset: 0x2b0, Size: 0x28] 0x7e61bf1880
	Texture2D* MiniMapTexture;//[Offset: 0x2d8, Size: 0x8] 0x7e61bf1900
	<ActorDataLayer> ExcludedDataLayers;//[Offset: 0x2e0, Size: 0x50] 0x7e61bd2d60
	int MiniMapTileSize;//[Offset: 0x330, Size: 0x4] 0x7e61bf1a00

--------------------------------
Class: WorldPartitionReplay.Actor.Object
	FName[] StreamingSourceNames;//[Offset: 0x278, Size: 0x10] 0x7e61bd2cc0

--------------------------------
Class: SpatialHashRuntimeGridInfo.Info.Actor.Object
	SpatialHashRuntimeGrid GridSettings;//[Offset: 0x278, Size: 0x1] 0x7e61bf3180

--------------------------------
Class: SpatialHashRuntimeGrid

--------------------------------
Class: WorldPartitionRuntimeSpatialHash.WorldPartitionRuntimeHash.Object
	SpatialHashStreamingGrid[] StreamingGrids;//[Offset: 0x28, Size: 0x10] 0x7e61bd2b80

--------------------------------
Class: SpatialHashStreamingGrid
	FName GridName;//[Offset: 0x0, Size: 0x8] 0x7e61685500
	Vector Origin;//[Offset: 0x8, Size: 0x18] 0x7e61685580
	int CellSize;//[Offset: 0x20, Size: 0x4] 0x7e61685600
	float LoadingRange;//[Offset: 0x24, Size: 0x4] 0x7e61685680
	bool bBlockOnSlowStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61685700
	LinearColor DebugColor;//[Offset: 0x2c, Size: 0x10] 0x7e61685780
	SpatialHashStreamingGridLevel[] GridLevels;//[Offset: 0x40, Size: 0x10] 0x7e61690a60
	Box WorldBounds;//[Offset: 0x50, Size: 0x38] 0x7e61685880
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7e61685900
	HLODLayer* HLODLayer;//[Offset: 0x90, Size: 0x8] 0x7e61685980

--------------------------------
Class: SpatialHashStreamingGridLevel
	SpatialHashStreamingGridLayerCell[] LayerCells;//[Offset: 0x0, Size: 0x10] 0x7e61690b00
	<int,int> LayerCellsMapping;//[Offset: 0x10, Size: 0x50] 0x7e61673a00

--------------------------------
Class: SpatialHashStreamingGridLayerCell
	WorldPartitionRuntimeSpatialHashCell*[] GridCells;//[Offset: 0x0, Size: 0x10] 0x7e61690ba0

--------------------------------
Class: WorldPartitionStreamingSourceComponent.ActorComponent.Object
	FName TargetGrid;//[Offset: 0xb8, Size: 0x8] 0x7e61bf2c80
	Color DebugColor;//[Offset: 0xc0, Size: 0x4] 0x7e61bf2d00
	HLODLayer* TargetHLODLayer;//[Offset: 0xc8, Size: 0x8] 0x7e61bf2d80
	StreamingSourceShape[] Shapes;//[Offset: 0xd0, Size: 0x10] 0x7e61bd29a0
	enum Priority;//[Offset: 0xe0, Size: 0x1] 0x7e61bd2a40
	bool bStreamingSourceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x7e61bf2f00
	enum TargetState;//[Offset: 0xe2, Size: 0x1] 0x7e61bd2ae0
	bool IsStreamingSourceEnabled();// 0x363058ebd041 0x7e61bceb00
	bool IsStreamingCompleted();// 0x362f58ebd041 0x7e61bcebe0
	void EnableStreamingSource();// 0x362e58ebd041 0x7e61bcecc0
	void DisableStreamingSource();// 0x362d58ebd041 0x7e61bceda0

--------------------------------
Class: StreamingSourceShape
	bool bUseGridLoadingRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61687300
	float Radius;//[Offset: 0x4, Size: 0x4] 0x7e61687380
	bool bIsSector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7e61685300
	float SectorAngle;//[Offset: 0xc, Size: 0x4] 0x7e61685380
	Vector Location;//[Offset: 0x10, Size: 0x18] 0x7e61685400
	Rotator Rotation;//[Offset: 0x28, Size: 0x18] 0x7e61685480

--------------------------------
Class: WorldPartitionSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsStreamingCompleted(enum QueryState, out const WorldPartitionStreamingQuerySource[] QuerySources, bool bExactState);// 0x363158ebd041 0x7e61bcea20

--------------------------------
Class: WorldPartitionStreamingQuerySource
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61687000
	float Radius;//[Offset: 0x18, Size: 0x4] 0x7e61687080
	bool bUseGridLoadingRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7e61687100
	FName[] DataLayers;//[Offset: 0x20, Size: 0x10] 0x7e616909c0
	bool bDataLayersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61687200
	bool bSpatialQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7e61687280

--------------------------------
Class: WorldPartitionVolume.Volume.Brush.Actor.Object

--------------------------------
Class: HierarchicalLODSetup.Object
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10] 0x7e61bd5100
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28] 0x7e61bf2a00

--------------------------------
Class: HierarchicalSimplification
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4] 0x7e61687a80
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4] 0x7e61687b00
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e61687b80
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7e61687c00
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7e61687c80
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7e61687d00
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x7e61687d80
	MeshProxySettings ProxySetting;//[Offset: 0xc, Size: 0xb8] 0x7e61687e00
	MeshMergingSettings MergeSetting;//[Offset: 0xc4, Size: 0xb4] 0x7e61687e80
	float DesiredBoundRadius;//[Offset: 0x178, Size: 0x4] 0x7e61687f00
	float DesiredFillingPercentage;//[Offset: 0x17c, Size: 0x4] 0x7e61687f80
	int MinNumberOfActorsToBuild;//[Offset: 0x180, Size: 0x4] 0x7e61688000

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7e61650680
	float VoxelSize;//[Offset: 0x4, Size: 0x4] 0x7e61650700
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x94] 0x7e61650780
	float MergeDistance;//[Offset: 0x9c, Size: 0x4] 0x7e61650800
	Color UnresolvedGeometryColor;//[Offset: 0xa0, Size: 0x4] 0x7e61650880
	float MaxRayCastDist;//[Offset: 0xa4, Size: 0x4] 0x7e61650900
	float HardAngleThreshold;//[Offset: 0xa8, Size: 0x4] 0x7e61650980
	int LightMapResolution;//[Offset: 0xac, Size: 0x4] 0x7e61650a00
	byte NormalCalculationMethod;//[Offset: 0xb0, Size: 0x1] 0x7e61650a80
	byte LandscapeCullingPrecision;//[Offset: 0xb1, Size: 0x1] 0x7e61650b00
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2, Size: 0x1] 0x7e61650b80
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2, Size: 0x1] 0x7e61650c00
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb2, Size: 0x1] 0x7e61650c80
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb2, Size: 0x1] 0x7e61650d00
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb2, Size: 0x1] 0x7e61650d80
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb2, Size: 0x1] 0x7e61650e00
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb2, Size: 0x1] 0x7e61650e80
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb2, Size: 0x1] 0x7e61650f00
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb3, Size: 0x1] 0x7e61650f80
	bool bGroupIdenticalMeshesForBaking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb3, Size: 0x1] 0x7e61651000
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb3, Size: 0x1] 0x7e61651080
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb3, Size: 0x1] 0x7e6164f800
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb3, Size: 0x1] 0x7e6164f880
	bool bGenerateNaniteEnabledMesh;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb3, Size: 0x1] 0x7e6164f900
	float NaniteProxyTrianglePercent;//[Offset: 0xb4, Size: 0x4] 0x7e6164f980

--------------------------------
Class: MaterialProxySettings
	byte TextureSizingType;//[Offset: 0x0, Size: 0x1] 0x7e61649c00
	IntPoint TextureSize;//[Offset: 0x4, Size: 0x8] 0x7e61649c80
	float TargetTexelDensityPerMeter;//[Offset: 0xc, Size: 0x4] 0x7e61649d00
	float MeshMaxScreenSizePercent;//[Offset: 0x10, Size: 0x4] 0x7e61649d80
	float MeshMinDrawDistance;//[Offset: 0x14, Size: 0x4] 0x7e61649e00
	float GutterSpace;//[Offset: 0x18, Size: 0x4] 0x7e61649e80
	float MetallicConstant;//[Offset: 0x1c, Size: 0x4] 0x7e61649f00
	float RoughnessConstant;//[Offset: 0x20, Size: 0x4] 0x7e61649f80
	float AnisotropyConstant;//[Offset: 0x24, Size: 0x4] 0x7e6164a000
	float SpecularConstant;//[Offset: 0x28, Size: 0x4] 0x7e6164a080
	float OpacityConstant;//[Offset: 0x2c, Size: 0x4] 0x7e6164a100
	float OpacityMaskConstant;//[Offset: 0x30, Size: 0x4] 0x7e6164a180
	float AmbientOcclusionConstant;//[Offset: 0x34, Size: 0x4] 0x7e6164a200
	byte MaterialMergeType;//[Offset: 0x38, Size: 0x1] 0x7e6164a280
	byte BlendMode;//[Offset: 0x39, Size: 0x1] 0x7e6164a300
	bool bAllowTwoSidedMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a, Size: 0x1] 0x7e6164a380
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a, Size: 0x1] 0x7e6164a400
	bool bTangentMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a, Size: 0x1] 0x7e6164a480
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a, Size: 0x1] 0x7e6164a500
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a, Size: 0x1] 0x7e61648480
	bool bAnisotropyMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3a, Size: 0x1] 0x7e61648500
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3a, Size: 0x1] 0x7e61648580
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3a, Size: 0x1] 0x7e61648600
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b, Size: 0x1] 0x7e61648680
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b, Size: 0x1] 0x7e61648700
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b, Size: 0x1] 0x7e61648780
	IntPoint DiffuseTextureSize;//[Offset: 0x3c, Size: 0x8] 0x7e61648800
	IntPoint NormalTextureSize;//[Offset: 0x44, Size: 0x8] 0x7e61648880
	IntPoint TangentTextureSize;//[Offset: 0x4c, Size: 0x8] 0x7e61648900
	IntPoint MetallicTextureSize;//[Offset: 0x54, Size: 0x8] 0x7e61648980
	IntPoint RoughnessTextureSize;//[Offset: 0x5c, Size: 0x8] 0x7e61648a00
	IntPoint AnisotropyTextureSize;//[Offset: 0x64, Size: 0x8] 0x7e61648a80
	IntPoint SpecularTextureSize;//[Offset: 0x6c, Size: 0x8] 0x7e61648b00
	IntPoint EmissiveTextureSize;//[Offset: 0x74, Size: 0x8] 0x7e61648b80
	IntPoint OpacityTextureSize;//[Offset: 0x7c, Size: 0x8] 0x7e61648c00
	IntPoint OpacityMaskTextureSize;//[Offset: 0x84, Size: 0x8] 0x7e61648c80
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x8c, Size: 0x8] 0x7e61648d00

--------------------------------
Class: MeshMergingSettings
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4] 0x7e61651c80
	enum OutputUVs;//[Offset: 0x4, Size: 0x1] 0x7e84e5c400
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x94] 0x7e61651d80
	int GutterSize;//[Offset: 0xa0, Size: 0x4] 0x7e61651e00
	int SpecificLOD;//[Offset: 0xa4, Size: 0x4] 0x7e61651e80
	enum LODSelectionType;//[Offset: 0xa8, Size: 0x1] 0x7e84e5c4a0
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x7e61651f80
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa9, Size: 0x1] 0x7e61652000
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa9, Size: 0x1] 0x7e61652080
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa9, Size: 0x1] 0x7e61652100
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa9, Size: 0x1] 0x7e61650080
	bool bCreateMergedMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa9, Size: 0x1] 0x7e61650100
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa9, Size: 0x1] 0x7e61650180
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa9, Size: 0x1] 0x7e61650200
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1] 0x7e61650280
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1] 0x7e61650300
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaa, Size: 0x1] 0x7e61650380
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaa, Size: 0x1] 0x7e61650400
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaa, Size: 0x1] 0x7e61650480
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xaa, Size: 0x1] 0x7e61650500
	bool bGenerateNaniteEnabledMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xaa, Size: 0x1] 0x7e61650580
	float NaniteFallbackTrianglePercent;//[Offset: 0xac, Size: 0x4] 0x7e61650600

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7e61486b80
	int AdditionalSlotIndex;//[Offset: 0x80, Size: 0x4] 0x7e61486c00
	FText SlotDisplayName;//[Offset: 0x88, Size: 0x18] 0x7e61486c80

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x5f8, Size: 0x8] 0x7e6148df00

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x560, Size: 0x8] 0x7e6148fe80
	MaterialInterface* Material;//[Offset: 0x568, Size: 0x8] 0x7e6148ff00
	float PlayRate;//[Offset: 0x570, Size: 0x4] 0x7e6148ff80
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x574, Size: 0x1] 0x7e6148e780
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x574, Size: 0x1] 0x7e6148e800
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x574, Size: 0x1] 0x7e6148e880
	float AccumulatedTime;//[Offset: 0x578, Size: 0x4] 0x7e6148e900
	int CachedFrameIndex;//[Offset: 0x57c, Size: 0x4] 0x7e6148e980
	LinearColor SpriteColor;//[Offset: 0x580, Size: 0x10] 0x7e6148ea00
	BodySetup* CachedBodySetup;//[Offset: 0x590, Size: 0x8] 0x7e6148ea80
	delegate OnFinishedPlaying;//[Offset: 0x598, Size: 0x10] 0x7e6148eb00
	void Stop();// 0x1e3658ebd041 0x7e614bf040
	void SetSpriteColor(LinearColor NewColor);// 0x1e3558ebd041 0x7e614bf120
	void SetPlayRate(float NewRate);// 0x1e3458ebd041 0x7e614bf200
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0x1e3358ebd041 0x7e614bf2e0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0x1e3258ebd041 0x7e614bf3c0
	void SetNewTime(float NewTime);// 0x1e3158ebd041 0x7e614bf4a0
	void SetLooping(bool bNewLooping);// 0x1e3058ebd041 0x7e614bf580
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0x1e2f58ebd041 0x7e614bf660
	void ReverseFromEnd();// 0x1e2e58ebd041 0x7e614bf740
	void Reverse();// 0x1e2d58ebd041 0x7e614bf820
	void PlayFromStart();// 0x1e2c58ebd041 0x7e614bf900
	void Play();// 0x1e2b58ebd041 0x7e614bf9e0
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0x1e2a58ebd041 0x7e614bfac0
	bool IsReversing();// 0x1e2958ebd041 0x7e614bfba0
	bool IsPlaying();// 0x1e2858ebd041 0x7e614bfc80
	bool IsLooping();// 0x1e2758ebd041 0x7e614bfd60
	LinearColor GetSpriteColor();// 0x1e2658ebd041 0x7e614bfe40
	float GetPlayRate();// 0xffffff8158ebd000 0x7e614bff20
	int GetPlaybackPositionInFrames();// 0x1e2458ebd041 0x7e614bcaa0
	float GetPlaybackPosition();// 0x1e2358ebd041 0x7e614bcb80
	int GetFlipbookLengthInFrames();// 0x1e2258ebd041 0x7e614bcc60
	float GetFlipbookLength();// 0x1e2158ebd041 0x7e614bcd40
	float GetFlipbookFramerate();// 0x1e2058ebd041 0x7e614bce20
	PaperFlipbook* GetFlipbook();// 0x1e1f58ebd041 0x7e614bcf00

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4] 0x7e6148f780
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10] 0x7e61693260
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8] 0x7e6148d780
	byte CollisionSource;//[Offset: 0x48, Size: 0x1] 0x7e6148d800
	bool IsValidKeyFrameIndex(int Index);// 0x1e1e58ebd041 0x7e614bcfe0
	float GetTotalDuration();// 0x1e1d58ebd041 0x7e614bd0c0
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0x1e1c58ebd041 0x7e614bd1a0
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0x1e1b58ebd041 0x7e614bd280
	int GetNumKeyFrames();// 0x1e1a58ebd041 0x7e614bd360
	int GetNumFrames();// 0x1e1958ebd041 0x7e614bd440
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0x1e1858ebd041 0x7e614bd520

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8] 0x7e614a3080
	int FrameRun;//[Offset: 0x8, Size: 0x4] 0x7e614a3100

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x7e61692f40
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x10] 0x7e615d0380
	Vector2D BakedSourceDimension;//[Offset: 0x58, Size: 0x10] 0x7e615d0400
	Texture2D* BakedSourceTexture;//[Offset: 0x68, Size: 0x8] 0x7e615d0480
	MaterialInterface* DefaultMaterial;//[Offset: 0x70, Size: 0x8] 0x7e615d0500
	MaterialInterface* AlternateMaterial;//[Offset: 0x78, Size: 0x8] 0x7e615d0580
	PaperSpriteSocket[] Sockets;//[Offset: 0x80, Size: 0x10] 0x7e61692fe0
	byte SpriteCollisionDomain;//[Offset: 0x90, Size: 0x1] 0x7e615d0680
	float PixelsPerUnrealUnit;//[Offset: 0x94, Size: 0x4] 0x7e615d0700
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8] 0x7e615d0780
	int AlternateMaterialSplitIndex;//[Offset: 0xa0, Size: 0x4] 0x7e615d0800
	Vector4[] BakedRenderData;//[Offset: 0xa8, Size: 0x10] 0x7e61693080

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x60] 0x7e614a2d80
	FName SocketName;//[Offset: 0x60, Size: 0x8] 0x7e614a2e00

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x278, Size: 0x8] 0x7e6148f700

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x278, Size: 0x8] 0x7e6148fe00

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x560, Size: 0x10] 0x7e61693120
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x570, Size: 0x10] 0x7e616931c0
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x1e3e58ebd041 0x7e614be940
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0x1e3d58ebd041 0x7e614bea20
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0x1e3c58ebd041 0x7e614beb00
	bool RemoveInstance(int InstanceIndex);// 0x1e3b58ebd041 0x7e614bebe0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x1e3a58ebd041 0x7e614becc0
	int GetInstanceCount();// 0x1e3958ebd041 0x7e614beda0
	void ClearInstances();// 0x1e3858ebd041 0x7e614bee80
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0x1e3758ebd041 0x7e614bef60

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x80] 0x7e614a2e80
	PaperSprite* SourceSprite;//[Offset: 0x80, Size: 0x8] 0x7e614a2f00
	Color VertexColor;//[Offset: 0x88, Size: 0x4] 0x7e614a2f80
	int MaterialIndex;//[Offset: 0x8c, Size: 0x4] 0x7e614a3000

--------------------------------
Class: PaperRuntimeSettings.Object
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e615d0900
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e615d0980
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7e615d0a00

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x278, Size: 0x8] 0x7e615d0280

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x560, Size: 0x8] 0x7e615d1e00
	MaterialInterface* MaterialOverride;//[Offset: 0x568, Size: 0x8] 0x7e615d1e80
	LinearColor SpriteColor;//[Offset: 0x570, Size: 0x10] 0x7e615d1f00
	void SetSpriteColor(LinearColor NewColor);// 0x1e4258ebd041 0x7e616d1ba0
	bool SetSprite(PaperSprite* NewSprite);// 0x1e8358ebd041 0x7e616d1c80
	PaperSprite* GetSprite();// 0x1e4058ebd041 0x7e614be780

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0x1e3f58ebd041 0x7e614be860

--------------------------------
Class: PaperTerrainActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x278, Size: 0x8] 0x7e615d1c80
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x280, Size: 0x8] 0x7e615d1d00
	PaperTerrainComponent* RenderComponent;//[Offset: 0x288, Size: 0x8] 0x7e615d1d80

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x538, Size: 0x8] 0x7e615d1680
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1] 0x7e615d1700
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1] 0x7e615d1780
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x548, Size: 0x8] 0x7e615d1800
	int RandomSeed;//[Offset: 0x550, Size: 0x4] 0x7e615d1880
	float SegmentOverlapAmount;//[Offset: 0x554, Size: 0x4] 0x7e615d1900
	LinearColor TerrainColor;//[Offset: 0x558, Size: 0x10] 0x7e615d1980
	int ReparamStepsPerSegment;//[Offset: 0x568, Size: 0x4] 0x7e615d1a00
	byte SpriteCollisionDomain;//[Offset: 0x56c, Size: 0x1] 0x7e615d1a80
	float CollisionThickness;//[Offset: 0x570, Size: 0x4] 0x7e615d1b00
	BodySetup* CachedBodySetup;//[Offset: 0x578, Size: 0x8] 0x7e615d1b80
	void SetTerrainColor(LinearColor NewColor);// 0x1e4358ebd041 0x7e616d1ac0

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x30, Size: 0x10] 0x7e61692e00
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8] 0x7e615d1600

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8] 0x7e614a2680
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10] 0x7e8458c540
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8] 0x7e614a2780
	float MinimumAngle;//[Offset: 0x20, Size: 0x4] 0x7e614a2800
	float MaximumAngle;//[Offset: 0x24, Size: 0x4] 0x7e614a2880
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e614a2900
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4] 0x7e614a2980
	int DrawOrder;//[Offset: 0x30, Size: 0x4] 0x7e614a2a00

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x28, Size: 0x18] 0x7e615dc380
	int LayerWidth;//[Offset: 0x40, Size: 0x4] 0x7e615dc400
	int LayerHeight;//[Offset: 0x44, Size: 0x4] 0x7e615dc480
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e615dc500
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7e615dc580
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1] 0x7e615dc600
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1] 0x7e615da580
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4] 0x7e615da600
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4] 0x7e615da680
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10] 0x7e615da700
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4] 0x7e615da780
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4] 0x7e615da800
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10] 0x7e616951a0
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8] 0x7e615da900
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10] 0x7e61695240

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8] 0x7e614a2580
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4] 0x7e614a2600

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8] 0x7e615df480
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8] 0x7e615df500
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x7e61694de0
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10] 0x7e615df600
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8] 0x7e615df680
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8] 0x7e615df700
	int WidthInTiles;//[Offset: 0x68, Size: 0x4] 0x7e615df780
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4] 0x7e615dd700
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4] 0x7e615dd780
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4] 0x7e615dd800
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10] 0x7e61694e80
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10] 0x7e61694f20
	int TileWidth;//[Offset: 0x98, Size: 0x4] 0x7e615dd980
	int TileHeight;//[Offset: 0x9c, Size: 0x4] 0x7e615dda00
	int Margin;//[Offset: 0xa0, Size: 0x4] 0x7e615dda80
	int Spacing;//[Offset: 0xa4, Size: 0x4] 0x7e615ddb00

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4] 0x7e614a3180
	int Top;//[Offset: 0x4, Size: 0x4] 0x7e614a1180
	int Right;//[Offset: 0x8, Size: 0x4] 0x7e614a1100
	int Bottom;//[Offset: 0xc, Size: 0x4] 0x7e614a1280

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8] 0x7e614a3e00
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30] 0x7e614a2480
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1] 0x7e614a2500

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10] 0x7e8458c360
	byte GeometryType;//[Offset: 0x10, Size: 0x1] 0x7e614a4200
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4] 0x7e614a2180
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4] 0x7e614a2200
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7e614a2280
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4] 0x7e614a2300
	float DetailAmount;//[Offset: 0x24, Size: 0x4] 0x7e614a2380
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4] 0x7e614a2400

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1] 0x7e8458c5e0
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10] 0x7e8458c400
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x10] 0x7e614a3f80
	Vector2D BoxPosition;//[Offset: 0x28, Size: 0x10] 0x7e614a4000
	float Rotation;//[Offset: 0x38, Size: 0x4] 0x7e614a4080
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7e614a4100

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0x10] 0x7e614a3d00
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4] 0x7e614a3d80

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x28, Size: 0x4] 0x7e615dbb00
	int MapHeight;//[Offset: 0x2c, Size: 0x4] 0x7e615dbb80
	int TileWidth;//[Offset: 0x30, Size: 0x4] 0x7e615dbc00
	int TileHeight;//[Offset: 0x34, Size: 0x4] 0x7e615dbc80
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4] 0x7e615dbd00
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4] 0x7e615dbd80
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4] 0x7e615dbe00
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4] 0x7e615dbe80
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28] 0x7e615dbf00
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8] 0x7e615dbf80
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10] 0x7e61695100
	float CollisionThickness;//[Offset: 0x88, Size: 0x4] 0x7e615dc080
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1] 0x7e615dc100
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1] 0x7e615dc180
	int HexSideLength;//[Offset: 0x90, Size: 0x4] 0x7e615dc200
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8] 0x7e615dc280
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4] 0x7e615dc300

--------------------------------
Class: PaperTileMapActor.Actor.Object
	PaperTileMapComponent* RenderComponent;//[Offset: 0x278, Size: 0x8] 0x7e615dba80

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MapWidth;//[Offset: 0x55c, Size: 0x4] 0x7e615ddb80
	int MapHeight;//[Offset: 0x560, Size: 0x4] 0x7e615ddc00
	int TileWidth;//[Offset: 0x564, Size: 0x4] 0x7e615ddc80
	int TileHeight;//[Offset: 0x568, Size: 0x4] 0x7e615ddd00
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x570, Size: 0x8] 0x7e615ddd80
	MaterialInterface* Material;//[Offset: 0x578, Size: 0x8] 0x7e615dde00
	PaperTileLayer*[] TileLayers;//[Offset: 0x580, Size: 0x10] 0x7e61694fc0
	LinearColor TileMapColor;//[Offset: 0x590, Size: 0x10] 0x7e615ddf00
	int UseSingleLayerIndex;//[Offset: 0x5a0, Size: 0x4] 0x7e615ddf80
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1] 0x7e615de000
	PaperTileMap* TileMap;//[Offset: 0x5a8, Size: 0x8] 0x7e615de080
	void SetTileMapColor(LinearColor NewColor);// 0x1ebb58ebd041 0x7e616d5f00
	bool SetTileMap(PaperTileMap* NewTileMap);// 0x1eba58ebd041 0x7e616d5fe0
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0x1eb958ebd041 0x7e616d60c0
	void SetLayerColor(LinearColor NewColor, int Layer);// 0x1eb858ebd041 0x7e616d61a0
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0x1eb758ebd041 0x7e616d6280
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0x1eb658ebd041 0x7e616d6360
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0x1eb558ebd041 0x7e616d6440
	void RebuildCollision();// 0x1eb458ebd041 0x7e616d6520
	bool OwnsTileMap();// 0x1eb358ebd041 0x7e616d6600
	void MakeTileMapEditable();// 0x1eb258ebd041 0x7e616d66e0
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0x1eb158ebd041 0x7e616d67c0
	LinearColor GetTileMapColor();// 0x1eb058ebd041 0x7e616d68a0
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x1eaf58ebd041 0x7e616d6980
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x1eae58ebd041 0x7e616d6a60
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0x1ead58ebd041 0x7e616d6b40
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0x1eac58ebd041 0x7e616d6c20
	LinearColor GetLayerColor(int Layer);// 0x1eab58ebd041 0x7e616d6d00
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0x1eaa58ebd041 0x7e616d6de0
	PaperTileLayer* AddNewLayer();// 0x1ea958ebd041 0x7e616d6ec0

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object
	PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0x1ebf58ebd041 0x7e616d5b80
	FName GetTileUserData(PaperTileInfo Tile);// 0x1ebe58ebd041 0x7e616d5c60
	Transform GetTileTransform(PaperTileInfo Tile);// 0x1ebd58ebd041 0x7e616d5d40
	void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0x1ebc58ebd041 0x7e616d5e20

--------------------------------
Class: AngelscriptAllScriptRootsCommandlet.Commandlet.Object

--------------------------------
Class: AngelscriptSettings.Object
	FString[] PreprocessorFlags;//[Offset: 0x28, Size: 0x10] 0x7e61694980
	bool bAllowScriptAssetReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e615df880
	bool bAutomaticImports;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e615df900
	bool bWarnOnManualImportStatements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x7e615df980
	enum MathNamespace;//[Offset: 0x3b, Size: 0x1] 0x7e61694a20
	enum DefaultPropertyEditSpecifier;//[Offset: 0x3c, Size: 0x1] 0x7e61694ac0
	enum DefaultPropertyEditSpecifierForStructs;//[Offset: 0x3d, Size: 0x1] 0x7e61694b60
	enum DefaultPropertyBlueprintSpecifier;//[Offset: 0x3e, Size: 0x1] 0x7e61694c00
	bool bMarkNonUpropertyPropertiesAsTransient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1] 0x7e615dfc00
	bool bStripBlueprintLibraryNamespaceSuffix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7e615dfc80
	float EditorMaximumScriptExecutionTime;//[Offset: 0x44, Size: 0x4] 0x7e615dfd00
	bool bScriptFloatIsFloat64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e615dfd80
	bool bDeprecateDoubleType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x7e615dfe00
	bool bWarnOnFloatConstantsForDoubleValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x7e615dfe80
	bool bWarnIntegerDivision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x7e615dff00

--------------------------------
Class: AngelscriptTestCommandlet.Commandlet.Object

--------------------------------
Class: AngelscriptTestSettings.DeveloperSettings.Object
	FString IntegrationTestMapRoot;//[Offset: 0x38, Size: 0x10] 0x7e616e0900
	bool bRunUnitTestsOnHotReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e616e0980
	int LimitNModulesToTestOnHotReload;//[Offset: 0x4c, Size: 0x4] 0x7e616e0a00
	int GarbageCollectEveryNTests;//[Offset: 0x50, Size: 0x4] 0x7e616e0a80
	class GameInstance* UnitTestGameInstanceClass;//[Offset: 0x58, Size: 0x28] 0x7e61694840
	bool bEnableCodeCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7e616e0b00
	FString[] CoverageExcludePatterns;//[Offset: 0x88, Size: 0x10] 0x7e616948e0
	bool bEnableDebugBreaksInTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7e616e0c00
	FString IntegrationTestNamingConvention;//[Offset: 0xa0, Size: 0x10] 0x7e616e0c80
	FString UnitTestNamingConvention;//[Offset: 0xb0, Size: 0x10] 0x7e616e0d00
	bool bEnableNetworkEmulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x7e616e0d80
	int InPacketsMinLatency;//[Offset: 0xd4, Size: 0x4] 0x7e616e0e00
	int InPacketsMaxLatency;//[Offset: 0xd8, Size: 0x4] 0x7e616e0e80
	int InPacketsPacketLossPercentage;//[Offset: 0xdc, Size: 0x4] 0x7e616e0f00
	int OutPacketsMinLatency;//[Offset: 0xe0, Size: 0x4] 0x7e616e0f80
	int OutPacketsMaxLatency;//[Offset: 0xe4, Size: 0x4] 0x7e616e1000
	int OutPacketsPacketLossPercentage;//[Offset: 0xe8, Size: 0x4] 0x7e616e1080

--------------------------------
Class: ASClass.Class.Struct.Field.Object

--------------------------------
Class: ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_NotThreadSafe.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_NoParams.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_DWordArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_QWordArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_FloatArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_FloatExtendedToDoubleArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_FloatExtendedToDoubleReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_DoubleArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_ByteArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_ReferenceArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_ObjectReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_DWordReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_FloatReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_ByteReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: FakeNetDriver.NetDriver.Object

--------------------------------
Class: GameplayLibrary.Object
	void AsyncSaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex, delegate Delegate);// 0x1ec158ebd041 0x7e616d59c0
	void AsyncLoadGameFromSlot(FString SlotName, const int UserIndex, delegate Delegate);// 0x1ec058ebd041 0x7e616d5aa0

--------------------------------
Class: GameplayTagContainerMixinLibrary.Object
	void RemoveTags(out GameplayTagContainer GameplayTagContainer, GameplayTagContainer TagsToRemove);// 0x1ed558ebd041 0x7e616d8200
	bool RemoveTag(out GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToRemove);// 0x1ed458ebd041 0x7e616d82e0
	int Num(out const GameplayTagContainer GameplayTagContainer);// 0x1ed358ebd041 0x7e616d83c0
	bool MatchesQuery(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagQuery Query);// 0x1ed258ebd041 0x7e616d84a0
	GameplayTag Last(out const GameplayTagContainer GameplayTagContainer);// 0x1ed158ebd041 0x7e616d8580
	bool IsValid(out const GameplayTagContainer GameplayTagContainer);// 0x1ed058ebd041 0x7e616d8660
	bool IsEmpty(out const GameplayTagContainer GameplayTagContainer);// 0x1ecf58ebd041 0x7e616d8740
	bool HasTagExact(out const GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToCheck);// 0x1ece58ebd041 0x7e616d8820
	bool HasTag(out const GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToCheck);// 0x1ecd58ebd041 0x7e616d8900
	bool HasAnyExact(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer ContainerToCheck);// 0x1ecc58ebd041 0x7e616d89e0
	bool HasAny(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer ContainerToCheck);// 0x1ecb58ebd041 0x7e616d8ac0
	bool HasAllExact(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer ContainerToCheck);// 0x1eca58ebd041 0x7e616d8ba0
	bool HasAll(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer ContainerToCheck);// 0x1ec958ebd041 0x7e616d8c80
	GameplayTagContainer GetGameplayTagParents(out const GameplayTagContainer GameplayTagContainer);// 0x1ec858ebd041 0x7e616d8d60
	GameplayTag First(out const GameplayTagContainer GameplayTagContainer);// 0x1ec758ebd041 0x7e616d8e40
	GameplayTagContainer FilterExact(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer OtherContainer);// 0x1ec658ebd041 0x7e616d8f20
	GameplayTagContainer Filter(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer OtherContainer);// 0x1f0758ebd041 0x7e616d9000
	void AddTagFast(out GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToAdd);// 0x1ec458ebd041 0x7e616d5720
	void AddTag(out GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToAdd);// 0x1ec358ebd041 0x7e616d5800
	void AddLeafTag(out GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToAdd);// 0x1ec258ebd041 0x7e616d58e0

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10] 0x7e84e52900
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10] 0x7e84dd8800

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8] 0x7e615c2000

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4] 0x7e615c1c80
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10] 0x7e84e527c0
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10] 0x7e84e52860
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x7e615c1e00
	FString AutoDescription;//[Offset: 0x38, Size: 0x10] 0x7e615c1e80

--------------------------------
Class: GameplayTagMixinLibrary.Object
	GameplayTag RequestDirectParent(out const GameplayTag GameplayTag);// 0x1ede58ebd041 0x7e616d7a20
	bool MatchesTagExact(out const GameplayTag GameplayTag, out const GameplayTag TagToCheck);// 0x1edd58ebd041 0x7e616d7b00
	int MatchesTagDepth(out const GameplayTag GameplayTag, out const GameplayTag TagToCheck);// 0x1edc58ebd041 0x7e616d7be0
	bool MatchesTag(out const GameplayTag GameplayTag, out const GameplayTag TagToCheck);// 0x1edb58ebd041 0x7e616d7cc0
	bool MatchesAnyExact(out const GameplayTag GameplayTag, out const GameplayTagContainer ContainerToCheck);// 0x1eda58ebd041 0x7e616d7da0
	bool MatchesAny(out const GameplayTag GameplayTag, out const GameplayTagContainer ContainerToCheck);// 0x1ed958ebd041 0x7e616d7e80
	bool IsValid(out const GameplayTag GameplayTag);// 0x1ed858ebd041 0x7e616d7f60
	GameplayTagContainer GetSingleTagContainer(out const GameplayTag GameplayTag);// 0x1ed758ebd041 0x7e616d8040
	GameplayTagContainer GetGameplayTagParents(out const GameplayTag GameplayTag);// 0x1ed658ebd041 0x7e616d8120

--------------------------------
Class: GameplayTagQueryMixinLibrary.Object
	bool Matches(out const GameplayTagQuery GameplayTagQuery, out const GameplayTagContainer Tags);// 0x1ee158ebd041 0x7e616d7780
	bool IsEmpty(out const GameplayTagQuery GameplayTagQuery);// 0x1ee058ebd041 0x7e616d7860
	FString GetDescription(out const GameplayTagQuery GameplayTagQuery);// 0x1edf58ebd041 0x7e616d7940

--------------------------------
Class: InputComponentScriptMixinLibrary.Object
	void BindVectorAxis(InputComponent* Component, out const Key AxisKey, out const delegate Delegate);// 0x1ee758ebd041 0x7e616dac00
	void BindKey(InputComponent* Component, out const Key Key, byte KeyEvent, out const delegate Delegate, bool bConsumeInput);// 0x1f2858ebd041 0x7e616dace0
	void BindChord(InputComponent* Component, out const InputChord Chord, byte KeyEvent, out const delegate Delegate);// 0x1ee558ebd041 0x7e616d7400
	void BindAxisKey(InputComponent* Component, out const FName AxisKey, out const delegate Delegate);// 0x1ee458ebd041 0x7e616d74e0
	void BindAxis(InputComponent* Component, out const FName AxisName, out const delegate Delegate);// 0x1ee358ebd041 0x7e616d75c0
	void BindAction(InputComponent* Component, out const FName ActionName, byte KeyEvent, out const delegate Delegate);// 0x1ee258ebd041 0x7e616d76a0

--------------------------------
Class: PlayerControllerInputScriptMixinLibrary.Object
	void PushInputComponent(PlayerController* PlayerController, InputComponent* Component);// 0x1eea58ebd041 0x7e616da960
	void PopInputComponent(PlayerController* PlayerController, InputComponent* Component);// 0x1ee958ebd041 0x7e616daa40
	PlayerInput* GetPlayerInput(PlayerController* PlayerController);// 0x1ee858ebd041 0x7e616dab20

--------------------------------
Class: PlayerInputScriptMixinLibrary.Object
	void SetMouseSensitivity(PlayerInput* PlayerInput, const float Sensitivity);// 0x1ef758ebd041 0x7e616d9e00
	void RemoveAxisMapping(PlayerInput* PlayerInput, out const InputAxisKeyMapping KeyMapping);// 0x1ef658ebd041 0x7e616d9ee0
	void RemoveActionMapping(PlayerInput* PlayerInput, out const InputActionKeyMapping KeyMapping);// 0x1ef558ebd041 0x7e616d9fc0
	void InvertAxis(PlayerInput* PlayerInput, const FName AxisName);// 0x1ef458ebd041 0x7e616da0a0
	float GetMouseSensitivityY(PlayerInput* PlayerInput);// 0x1ef358ebd041 0x7e616da180
	float GetMouseSensitivityX(PlayerInput* PlayerInput);// 0x1ef258ebd041 0x7e616da260
	InputAxisKeyMapping[] GetKeysForAxis(PlayerInput* PlayerInput, const FName AxisName);// 0x1ef158ebd041 0x7e616da340
	InputActionKeyMapping[] GetKeysForAction(PlayerInput* PlayerInput, const FName ActionName);// 0x1ef058ebd041 0x7e616da420
	InputAxisKeyMapping[] GetEngineDefinedAxisMappings(PlayerInput* PlayerInput, const FName AxisName);// 0x1eef58ebd041 0x7e616da500
	InputActionKeyMapping[] GetEngineDefinedActionMappings(PlayerInput* PlayerInput, const FName ActionName);// 0x1eee58ebd041 0x7e616da5e0
	void ForceRebuildingKeyMaps(PlayerInput* PlayerInput, const bool bRestoreDefaults);// 0x1eed58ebd041 0x7e616da6c0
	void AddAxisMapping(PlayerInput* PlayerInput, out const InputAxisKeyMapping KeyMapping);// 0x1eec58ebd041 0x7e616da7a0
	void AddActionMapping(PlayerInput* PlayerInput, out const InputActionKeyMapping KeyMapping);// 0x1eeb58ebd041 0x7e616da880

--------------------------------
Class: TestTerminatorComponent.ActorComponent.Object
	void ServerTerminatorReplicated();// 0x1ef858ebd041 0x7e616d9d20

--------------------------------
Class: TestTerminator.Actor.Object

--------------------------------
Class: LatentAutomationCommand.Object
	World* World;//[Offset: 0x28, Size: 0x8] 0x7e616e7280
	bool bAllowTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e616e7300
	bool bAlsoRunOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7e616e7380
	bool UpdateOnClient();// 0x1f0158ebd041 0x7e616d9540
	bool Update();// 0x1f0058ebd041 0x7e616d9620
	bool HasAuthority();// 0x1eff58ebd041 0x7e616d9700
	FString DescribeOnClient();// 0x1efe58ebd041 0x7e616d97e0
	FString Describe();// 0x1efd58ebd041 0x7e616d98c0
	bool BeforeOnClient();// 0x1efc58ebd041 0x7e616d99a0
	void Before();// 0x1efb58ebd041 0x7e616d9a80
	bool AfterOnClient();// 0x1efa58ebd041 0x7e616d9b60
	void After();// 0x1ef958ebd041 0x7e616d9c40

--------------------------------
Class: LatentAutomationCommandClientExecutor.Actor.Object
	LatentAutomationCommand* LatentCommand;//[Offset: 0x290, Size: 0x8] 0x7e616e8100
	bool bCanStartBefore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x7e616e8180
	bool bCanStartUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1] 0x7e616e8200
	bool bCanStartAfter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1] 0x7e616e8280
	void ServerLatentCommandDescribeOnClient(FString NewDescription);// 0x1f1358ebd041 0x7e616dbf40
	void ServerLatentCommandClientReady();// 0x1f1258ebd041 0x7e616dc020
	void ServerLatentCommandClientDone();// 0x1f1158ebd041 0x7e616dc100
	void ServerLatentCommandClientChecked();// 0x1f1058ebd041 0x7e616dc1e0
	void ServerFail(FString Message);// 0x1f0f58ebd041 0x7e616dc2c0
	void ServerAssertTrue(bool bExpression, FString Message);// 0x1f0e58ebd041 0x7e616dc3a0
	void ServerAssertSame(const Object* Expected, const Object* Actual, FString Message);// 0x1f0d58ebd041 0x7e616dc480
	void ServerAssertNull(const Object* Object, FString Message);// 0x1f0c58ebd041 0x7e616dc560
	void ServerAssertNotSame(const Object* Expected, const Object* Actual, FString Message);// 0x1f0b58ebd041 0x7e616dc640
	void ServerAssertNotNull(const Object* Object, FString Message);// 0x1f0a58ebd041 0x7e616dc720
	void ServerAssertFalse(bool bExpression, FString Message);// 0x1f0958ebd041 0x7e616dc800
	void Fail(FString Message);// 0x1f0858ebd041 0x7e616dc8e0
	void AssertTrue(bool bExpression, FString Message);// 0x1f4958ebd041 0x7e616dc9c0
	void AssertSame(const Object* Expected, const Object* Actual, FString Message);// 0x1f0658ebd041 0x7e616d90e0
	void AssertNull(const Object* Object, FString Message);// 0x1f0558ebd041 0x7e616d91c0
	void AssertNotSame(const Object* Expected, const Object* Actual, FString Message);// 0x1f0458ebd041 0x7e616d92a0
	void AssertNotNull(const Object* Object, FString Message);// 0x1f0358ebd041 0x7e616d9380
	void AssertFalse(bool bExpression, FString Message);// 0x1f0258ebd041 0x7e616d9460

--------------------------------
Class: RuntimeFloatCurveMixinLibrary.Object
	void GetValueRange_Double(out const RuntimeFloatCurve Target, out double MinValue, out double MaxValue);// 0x1f1b58ebd041 0x7e616db840
	void GetValueRange(out const RuntimeFloatCurve Target, out float MinValue, out float MaxValue);// 0x1f1a58ebd041 0x7e616db920
	void GetTimeRange_Double(out const RuntimeFloatCurve Target, out double MinTime, out double MaxTime);// 0x1f1958ebd041 0x7e616dba00
	void GetTimeRange(out const RuntimeFloatCurve Target, out float MinTime, out float MaxTime);// 0x1f1858ebd041 0x7e616dbae0
	int GetNumKeys(out const RuntimeFloatCurve Target);// 0x1f1758ebd041 0x7e616dbbc0
	float GetFloatValue(out const RuntimeFloatCurve Target, const float InTime, const float DefaultValue);// 0x1f1658ebd041 0x7e616dbca0
	bool Equals(out const RuntimeFloatCurve Target, out const RuntimeFloatCurve Other);// 0x1f1558ebd041 0x7e616dbd80
	void AddDefaultKey(out RuntimeFloatCurve Target, float InTime, float InValue);// 0x1f1458ebd041 0x7e616dbe60

--------------------------------
Class: ScriptEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	bool bIsTickableWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e616e9380
	bool bIsTickableInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e616e9400
	void BP_Tick(float DeltaTime);// 0x1f1f58ebd041 0x7e616db4c0
	bool BP_ShouldCreateSubsystem(Object* Outer);// 0x1f1e58ebd041 0x7e616db5a0
	void BP_Initialize();// 0x1f1d58ebd041 0x7e616db680
	void BP_Deinitialize();// 0x1f1c58ebd041 0x7e616db760

--------------------------------
Class: ScriptGameInstanceSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool BP_ShouldCreateSubsystem(Object* Outer);// 0x1f2358ebd041 0x7e616db140
	void BP_Initialize();// 0x1f2258ebd041 0x7e616db220
	GameInstance* BP_GetGameInstance();// 0x1f2158ebd041 0x7e616db300
	void BP_Deinitialize();// 0x1f2058ebd041 0x7e616db3e0

--------------------------------
Class: ScriptLocalPlayerSubsystem.LocalPlayerSubsystem.Subsystem.Object
	bool BP_ShouldCreateSubsystem(Object* Outer);// 0x1f2758ebd041 0x7e616dadc0
	void BP_Initialize();// 0x1f2658ebd041 0x7e616daea0
	LocalPlayer* BP_GetLocalPlayer();// 0x1f2558ebd041 0x7e616daf80
	void BP_Deinitialize();// 0x1f2458ebd041 0x7e616db060

--------------------------------
Class: ScriptWorldSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool bCreateForLevelEditorWorlds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e616e8e00
	bool bCreateForGameWorlds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x7e616e8e80
	void BP_UpdateStreamingState();// 0x1f2f58ebd041 0x7e616de080
	void BP_Tick(float DeltaTime);// 0x1f2e58ebd041 0x7e616de160
	bool BP_ShouldCreateSubsystem(Object* Outer);// 0x1f2d58ebd041 0x7e616de240
	void BP_PostInitialize();// 0x1f2c58ebd041 0x7e616de320
	void BP_OnWorldComponentsUpdated();// 0x1f2b58ebd041 0x7e616de400
	void BP_OnWorldBeginPlay();// 0x1f2a58ebd041 0x7e616de4e0
	void BP_Initialize();// 0x1f2958ebd041 0x7e616de5c0
	void BP_Deinitialize();// 0x1f6558ebd041 0x7e616de6a0

--------------------------------
Class: SoftReferenceStatics.Object

--------------------------------
Class: SubsystemLibrary.Object
	WorldSubsystem* GetWorldSubsystem(Object* WorldContextObject, class WorldSubsystem Class);// 0x1f3558ebd041 0x7e616ddb40
	LocalPlayerSubsystem* GetLocalPlayerSubsystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0x1f3458ebd041 0x7e616ddc20
	LocalPlayerSubsystem* GetLocalPlayerSubsystemFromLocalPlayer(Object* WorldContextObject, LocalPlayer* LocalPlayer, class LocalPlayerSubsystem Class);// 0x1f3358ebd041 0x7e616ddd00
	LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* WorldContextObject, class LocalPlayerSubsystem Class);// 0x1f3258ebd041 0x7e616ddde0
	GameInstanceSubsystem* GetGameInstanceSubsystem(Object* WorldContextObject, class GameInstanceSubsystem Class);// 0x1f3158ebd041 0x7e616ddec0
	EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0x1f3058ebd041 0x7e616ddfa0

--------------------------------
Class: TimelineComponentMixinLibrary.Object
	void SetTimelineFinishedFunc(TimelineComponent* Component, delegate NewTimelineFinishedFunc);// 0x1f3a58ebd041 0x7e616dd6e0
	void AddInterpVector(TimelineComponent* Component, CurveVector* VectorCurve, delegate InterpFunc, FName PropertyName, FName TrackName);// 0x1f3958ebd041 0x7e616dd7c0
	void AddInterpLinearColor(TimelineComponent* Component, CurveLinearColor* LinearColorCurve, delegate InterpFunc, FName PropertyName, FName TrackName);// 0x1f3858ebd041 0x7e616dd8a0
	void AddInterpFloat(TimelineComponent* Component, CurveFloat* FloatCurve, delegate InterpFunc, FName PropertyName, FName TrackName);// 0x1f3758ebd041 0x7e616dd980
	void AddEvent(TimelineComponent* Component, float Time, delegate EventFunc);// 0x1f3658ebd041 0x7e616dda60

--------------------------------
Class: AssetManagerMixinLibrary.Object
	void GetPrimaryAssetTypeInfoList(AssetManager* AssetManager, out PrimaryAssetTypeInfo[] AssetTypeInfoList);// 0x1f4158ebd041 0x7e616dd0c0
	bool GetPrimaryAssetTypeInfo(AssetManager* AssetManager, PrimaryAssetType PrimaryAssetType, out PrimaryAssetTypeInfo AssetTypeInfo);// 0x1f4058ebd041 0x7e616dd1a0
	Object* GetPrimaryAssetObject(AssetManager* AssetManager, out const PrimaryAssetId PrimaryAssetId);// 0x1f3f58ebd041 0x7e616dd280
	bool GetPrimaryAssetIdList(AssetManager* AssetManager, PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] PrimaryAssetIdList);// 0x1f3e58ebd041 0x7e616dd360
	PrimaryAssetId GetPrimaryAssetIdForObject(AssetManager* AssetManager, Object* Object);// 0x1f3d58ebd041 0x7e616dd440
	bool GetPrimaryAssetDataList(AssetManager* AssetManager, PrimaryAssetType PrimaryAssetType, out AssetData[] AssetDataList);// 0x1f3c58ebd041 0x7e616dd520
	bool GetPrimaryAssetData(AssetManager* AssetManager, out PrimaryAssetId PrimaryAssetId, out AssetData AssetData);// 0x1f3b58ebd041 0x7e616dd600

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8] 0x7e8412bf80
	FName PackageName;//[Offset: 0x8, Size: 0x8] 0x7e8412bf00
	FName PackagePath;//[Offset: 0x10, Size: 0x8] 0x7e8412be80
	FName AssetName;//[Offset: 0x18, Size: 0x8] 0x7e8412be00
	FName AssetClass;//[Offset: 0x20, Size: 0x8] 0x7e8412bd80

--------------------------------
Class: ObjectInWorld.Object
	World* World;//[Offset: 0x28, Size: 0x8] 0x7e616eb280
	void SetWorldContext(Object* WorldContext);// 0x1f4458ebd041 0x7e616dce20
	void SetWorld(World* InWorld);// 0x1f4358ebd041 0x7e616dcf00
	void DestroyObject();// 0x1f4258ebd041 0x7e616dcfe0

--------------------------------
Class: ObjectTickable.Object
	World* World;//[Offset: 0x30, Size: 0x8] 0x7e616eb000
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e616eb080
	void SetWorldContext(Object* WorldContext);// 0x1f4858ebd041 0x7e616dcaa0
	void SetWorld(World* InWorld);// 0x1f4758ebd041 0x7e616dcb80
	void DestroyObject();// 0x1f4658ebd041 0x7e616dcc60
	void BP_Tick(float DeltaTime);// 0x1f4558ebd041 0x7e616dcd40

--------------------------------
Class: WidgetBlueprintStatics.Object
	UserWidget* CreateWidget(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0xffffff8158ebd000 0x7e616dff20

--------------------------------
Class: WorldCollisionStatics.Object

--------------------------------
Class: ControlRig.Object
	enum ExecutionType;//[Offset: 0x46, Size: 0x1] 0x7e61695d80
	RigVMRuntimeSettings VMRuntimeSettings;//[Offset: 0x50, Size: 0x50] 0x7e616ed600
	<RigElementKey,RigControlElementCustomization> ControlCustomizations;//[Offset: 0xa0, Size: 0x50] 0x7e616797c0
	RigVM* VM;//[Offset: 0xf0, Size: 0x8] 0x7e616eb680
	RigHierarchy* DynamicHierarchy;//[Offset: 0xf8, Size: 0x8] 0x7e616eb700
	ControlRigShapeLibrary* GizmoLibrary;//[Offset: 0x100, Size: 0x28] 0x7e616eb780
	ControlRigShapeLibrary*[] ShapeLibraries;//[Offset: 0x128, Size: 0x10] 0x7e61695e20
	<FName,CachedPropertyPath> InputProperties;//[Offset: 0x148, Size: 0x50] 0x7e61679880
	<FName,CachedPropertyPath> OutputProperties;//[Offset: 0x198, Size: 0x50] 0x7e61679940
	ControlRigDrawContainer DrawContainer;//[Offset: 0x288, Size: 0x18] 0x7e616eba80
	AnimationDataSourceRegistry* DataSourceRegistry;//[Offset: 0x2b8, Size: 0x8] 0x7e616ebb00
	FName[] EventQueue;//[Offset: 0x2c0, Size: 0x10] 0x7e61695ec0
	RigInfluenceMapPerEvent Influences;//[Offset: 0x378, Size: 0x60] 0x7e616ebc00
	ControlRig* InteractionRig;//[Offset: 0x3d8, Size: 0x8] 0x7e616ebc80
	class ControlRig* InteractionRigClass;//[Offset: 0x3e0, Size: 0x8] 0x7e61695f60
	AssetUserData*[] AssetUserData;//[Offset: 0x3e8, Size: 0x10] 0x7e61696000
	bool SupportsEvent(out const FName InEventName);// 0x1f6458ebd041 0x7e616de780
	bool SetVariableFromString(out const FName InVariableName, FString InValue);// 0x1f6358ebd041 0x7e616de860
	void SetInteractionRigClass(class ControlRig InInteractionRigClass);// 0x1f6258ebd041 0x7e616de940
	void SetInteractionRig(ControlRig* InInteractionRig);// 0x1f6158ebd041 0x7e616dea20
	void SetFramesPerSecond(float InFramesPerSecond);// 0x1f6058ebd041 0x7e616deb00
	void SetDeltaTime(float InDeltaTime);// 0x1f5f58ebd041 0x7e616debe0
	void SetAbsoluteTime(float InAbsoluteTime, bool InSetDeltaTimeZero);// 0x1f5e58ebd041 0x7e616decc0
	void SetAbsoluteAndDeltaTime(float InAbsoluteTime, float InDeltaTime);// 0x1f5d58ebd041 0x7e616deda0
	void SelectControl(out const FName InControlName, bool bSelect);// 0x1f5c58ebd041 0x7e616dee80
	void RequestSetup();// 0x1f5b58ebd041 0x7e616def60
	void RequestInit();// 0x1f5a58ebd041 0x7e616df040
	bool IsControlSelected(out const FName InControlName);// 0x1f5958ebd041 0x7e616df120
	RigVM* GetVM();// 0x1f5858ebd041 0x7e616df200
	FName GetVariableType(out const FName InVariableName);// 0x1f5758ebd041 0x7e616df2e0
	FString GetVariableAsString(out const FName InVariableName);// 0x1f5658ebd041 0x7e616df3c0
	FName[] GetSupportedEvents();// 0x1f5558ebd041 0x7e616df4a0
	FName[] GetScriptAccessibleVariables();// 0x1f5458ebd041 0x7e616df580
	class ControlRig GetInteractionRigClass();// 0x1f5358ebd041 0x7e616df660
	ControlRig* GetInteractionRig();// 0x1f5258ebd041 0x7e616df740
	RigHierarchy* GetHierarchy();// 0x1f5158ebd041 0x7e616df820
	float GetCurrentFramesPerSecond();// 0x1f5058ebd041 0x7e616df900
	float GetAbsoluteTime();// 0x1f4f58ebd041 0x7e616df9e0
	ControlRig*[] FindControlRigs(Object* Outer, class ControlRig OptionalClass);// 0x1f4e58ebd041 0x7e616dfac0
	void Execute(const enum State, out const FName InEventName);// 0x1f4d58ebd041 0x7e616dfba0
	FName[] CurrentControlSelection();// 0x1f4c58ebd041 0x7e616dfc80
	bool ClearControlSelection();// 0x1f4b58ebd041 0x7e616dfd60
	bool CanExecute();// 0x1f4a58ebd041 0x7e616dfe40

--------------------------------
Class: RigVMRuntimeSettings
	int MaximumArraySize;//[Offset: 0x0, Size: 0x4] 0x7e61484500

--------------------------------
Class: RigElementKey
	enum Type;//[Offset: 0x0, Size: 0x1] 0x7e8485bfa0
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7e614a4a80

--------------------------------
Class: RigControlElementCustomization
	RigElementKey[] AvailableSpaces;//[Offset: 0x0, Size: 0x10] 0x7e84855e20
	RigElementKey[] RemovedSpaces;//[Offset: 0x10, Size: 0x10] 0x7e84855ce0

--------------------------------
Class: RigVM.Object
	RigVMMemoryStorage* WorkMemoryStorageObject;//[Offset: 0x28, Size: 0x8] 0x7e61c30480
	RigVMMemoryStorage* LiteralMemoryStorageObject;//[Offset: 0x30, Size: 0x8] 0x7e61c30500
	RigVMMemoryStorage* DebugMemoryStorageObject;//[Offset: 0x38, Size: 0x8] 0x7e61c30580
	RigVMByteCode ByteCodeStorage;//[Offset: 0x60, Size: 0x30] 0x7e61c30600
	RigVMInstructionArray Instructions;//[Offset: 0x98, Size: 0x10] 0x7e61c30680
	RigVMExecuteContext Context;//[Offset: 0xb0, Size: 0xc0] 0x7e61c30700
	uint32 NumExecutions;//[Offset: 0x170, Size: 0x4] 0x7e61c30780
	FName[] FunctionNamesStorage;//[Offset: 0x178, Size: 0x10] 0x7e61bdbc80
	RigVMParameter[] Parameters;//[Offset: 0x1a8, Size: 0x10] 0x7e61bdbd20
	<FName,int> ParametersNameMap;//[Offset: 0x1b8, Size: 0x50] 0x7e6167eb00
	RigVM* DeferredVMToCopy;//[Offset: 0x2a0, Size: 0x8] 0x7e61c30a00
	void SetParameterValueVector2D(out const FName InParameterName, out const Vector2D InValue, int InArrayIndex);// 0x374358ebd041 0x7e61c0f9e0
	void SetParameterValueVector(out const FName InParameterName, out const Vector InValue, int InArrayIndex);// 0x374258ebd041 0x7e61c0fac0
	void SetParameterValueTransform(out const FName InParameterName, out const Transform InValue, int InArrayIndex);// 0x374158ebd041 0x7e61c0fba0
	void SetParameterValueString(out const FName InParameterName, FString InValue, int InArrayIndex);// 0x374058ebd041 0x7e61c0fc80
	void SetParameterValueQuat(out const FName InParameterName, out const Quat InValue, int InArrayIndex);// 0x373f58ebd041 0x7e61c0fd60
	void SetParameterValueName(out const FName InParameterName, out const FName InValue, int InArrayIndex);// 0x373e58ebd041 0x7e61c0fe40
	void SetParameterValueInt(out const FName InParameterName, int InValue, int InArrayIndex);// 0xffffff8158ebd000 0x7e61c0ff20
	void SetParameterValueFloat(out const FName InParameterName, float InValue, int InArrayIndex);// 0x373c58ebd041 0x7e61c0caa0
	void SetParameterValueDouble(out const FName InParameterName, double InValue, int InArrayIndex);// 0x373b58ebd041 0x7e61c0cb80
	void SetParameterValueBool(out const FName InParameterName, bool InValue, int InArrayIndex);// 0x373a58ebd041 0x7e61c0cc60
	RigVMStatistics GetStatistics();// 0x373958ebd041 0x7e61c0cd40
	FString GetRigVMFunctionName(int InFunctionIndex);// 0x373858ebd041 0x7e61c0ce20
	Vector2D GetParameterValueVector2D(out const FName InParameterName, int InArrayIndex);// 0x373758ebd041 0x7e61c0cf00
	Vector GetParameterValueVector(out const FName InParameterName, int InArrayIndex);// 0x373658ebd041 0x7e61c0cfe0
	Transform GetParameterValueTransform(out const FName InParameterName, int InArrayIndex);// 0x373558ebd041 0x7e61c0d0c0
	FString GetParameterValueString(out const FName InParameterName, int InArrayIndex);// 0x373458ebd041 0x7e61c0d1a0
	Quat GetParameterValueQuat(out const FName InParameterName, int InArrayIndex);// 0x373358ebd041 0x7e61c0d280
	FName GetParameterValueName(out const FName InParameterName, int InArrayIndex);// 0x373258ebd041 0x7e61c0d360
	int GetParameterValueInt(out const FName InParameterName, int InArrayIndex);// 0x373158ebd041 0x7e61c0d440
	float GetParameterValueFloat(out const FName InParameterName, int InArrayIndex);// 0x373058ebd041 0x7e61c0d520
	double GetParameterValueDouble(out const FName InParameterName, int InArrayIndex);// 0x372f58ebd041 0x7e61c0d600
	bool GetParameterValueBool(out const FName InParameterName, int InArrayIndex);// 0x372e58ebd041 0x7e61c0d6e0
	bool Execute(out const FName InEntryName);// 0x372d58ebd041 0x7e61c0d7c0
	int AddRigVMFunction(ScriptStruct* InRigVMStruct, out const FName InMethodName);// 0x372c58ebd041 0x7e61c0d8a0

--------------------------------
Class: RigVMMemoryStorage.Object

--------------------------------
Class: RigVMByteCode
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10] 0x7e61693a80
	int NumInstructions;//[Offset: 0x10, Size: 0x4] 0x7e61484600
	RigVMByteCodeEntry[] Entries;//[Offset: 0x18, Size: 0x10] 0x7e61693b20

--------------------------------
Class: RigVMByteCodeEntry
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61484700
	int InstructionIndex;//[Offset: 0x8, Size: 0x4] 0x7e61484780

--------------------------------
Class: RigVMInstructionArray
	RigVMInstruction[] Instructions;//[Offset: 0x0, Size: 0x10] 0x7e61693bc0

--------------------------------
Class: RigVMInstruction
	uint64 ByteCodeIndex;//[Offset: 0x0, Size: 0x8] 0x7e61484880
	enum OpCode;//[Offset: 0x8, Size: 0x1] 0x7e61693c60
	byte OperandAlignment;//[Offset: 0x9, Size: 0x1] 0x7e61484980

--------------------------------
Class: RigVMStatistics
	int BytesForCDO;//[Offset: 0x0, Size: 0x4] 0x7e61487180
	int BytesPerInstance;//[Offset: 0x4, Size: 0x4] 0x7e61487200
	RigVMMemoryStatistics LiteralMemory;//[Offset: 0x8, Size: 0xc] 0x7e61487280
	RigVMMemoryStatistics WorkMemory;//[Offset: 0x14, Size: 0xc] 0x7e61487300
	RigVMMemoryStatistics DebugMemory;//[Offset: 0x20, Size: 0xc] 0x7e61487380
	int BytesForCaching;//[Offset: 0x2c, Size: 0x4] 0x7e61485300
	RigVMByteCodeStatistics ByteCode;//[Offset: 0x30, Size: 0x8] 0x7e61485380

--------------------------------
Class: RigVMMemoryStatistics
	int RegisterCount;//[Offset: 0x0, Size: 0x4] 0x7e61485500
	int DataBytes;//[Offset: 0x4, Size: 0x4] 0x7e61485580
	int TotalBytes;//[Offset: 0x8, Size: 0x4] 0x7e61485600

--------------------------------
Class: RigVMByteCodeStatistics
	int InstructionCount;//[Offset: 0x0, Size: 0x4] 0x7e61485400
	int DataBytes;//[Offset: 0x4, Size: 0x4] 0x7e61485480

--------------------------------
Class: RigVMExecuteContext

--------------------------------
Class: RigVMParameter
	enum Type;//[Offset: 0x0, Size: 0x1] 0x7e61693d00
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7e61484b00
	int RegisterIndex;//[Offset: 0xc, Size: 0x4] 0x7e61484b80
	FString CPPType;//[Offset: 0x10, Size: 0x10] 0x7e61484c00
	ScriptStruct* ScriptStruct;//[Offset: 0x20, Size: 0x8] 0x7e61484c80
	FName ScriptStructPath;//[Offset: 0x28, Size: 0x8] 0x7e61484d00

--------------------------------
Class: RigHierarchy.Object
	uint16 TopologyVersion;//[Offset: 0x58, Size: 0x2] 0x7e61735f00
	bool bEnableDirtyPropagation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x7e61735f80
	int TransformStackIndex;//[Offset: 0xd0, Size: 0x4] 0x7e61736000
	RigHierarchyController* HierarchyController;//[Offset: 0x130, Size: 0x8] 0x7e61736080
	<RigElementKey,RigElementKey> PreviousNameMap;//[Offset: 0x188, Size: 0x50] 0x7e616794c0
	RigHierarchy* HierarchyForCacheValidation;//[Offset: 0x1f8, Size: 0x8] 0x7e61736200
	bool SwitchToWorldSpace(RigElementKey InChild, bool bInitial, bool bAffectChildren);// 0x208858ebd041 0x7e616fe780
	bool SwitchToParent(RigElementKey InChild, RigElementKey InParent, bool bInitial, bool bAffectChildren);// 0x208758ebd041 0x7e616fe860
	bool SwitchToDefaultParent(RigElementKey InChild, bool bInitial, bool bAffectChildren);// 0x208658ebd041 0x7e616fe940
	RigElementKey[] SortKeys(out const RigElementKey[] InKeys);// 0x208558ebd041 0x7e616fea20
	void SetPose_ForBlueprint(RigPose InPose);// 0x208458ebd041 0x7e616feb00
	bool SetParentWeightArray(RigElementKey InChild, RigElementWeight[] InWeights, bool bInitial, bool bAffectChildren);// 0x208358ebd041 0x7e616febe0
	bool SetParentWeight(RigElementKey InChild, RigElementKey InParent, RigElementWeight InWeight, bool bInitial, bool bAffectChildren);// 0x208258ebd041 0x7e616fecc0
	void SetLocalTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x208158ebd041 0x7e616feda0
	void SetLocalTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x208058ebd041 0x7e616fee80
	void SetGlobalTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo);// 0x207f58ebd041 0x7e616fef60
	void SetGlobalTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo);// 0x207e58ebd041 0x7e616ff040
	void SetCurveValueByIndex(int InElementIndex, float InValue, bool bSetupUndo);// 0x207d58ebd041 0x7e616ff120
	void SetCurveValue(RigElementKey InKey, float InValue, bool bSetupUndo);// 0x207c58ebd041 0x7e616ff200
	void SetControlVisibilityByIndex(int InElementIndex, bool bVisibility);// 0x207b58ebd041 0x7e616ff2e0
	void SetControlVisibility(RigElementKey InKey, bool bVisibility);// 0x207a58ebd041 0x7e616ff3c0
	void SetControlValueByIndex(int InElementIndex, RigControlValue InValue, enum InValueType, bool bSetupUndo, bool bPrintPythonCommands);// 0x207958ebd041 0x7e616ff4a0
	void SetControlValue(RigElementKey InKey, RigControlValue InValue, enum InValueType, bool bSetupUndo, bool bPrintPythonCommands);// 0x207858ebd041 0x7e616ff580
	void SetControlShapeTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bSetupUndo);// 0x207758ebd041 0x7e616ff660
	void SetControlShapeTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bSetupUndo);// 0x207658ebd041 0x7e616ff740
	void SetControlSettingsByIndex(int InElementIndex, RigControlSettings InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);// 0x207558ebd041 0x7e616ff820
	void SetControlSettings(RigElementKey InKey, RigControlSettings InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);// 0x207458ebd041 0x7e616ff900
	void SetControlOffsetTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x207358ebd041 0x7e616ff9e0
	void SetControlOffsetTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x207258ebd041 0x7e616ffac0
	void SendAutoKeyEvent(RigElementKey InElement, float InOffsetInSeconds, bool bAsynchronous);// 0x207158ebd041 0x7e616ffba0
	void ResetPoseToInitial(enum InTypeFilter);// 0x207058ebd041 0x7e616ffc80
	void ResetCurveValues();// 0x206f58ebd041 0x7e616ffd60
	void Reset();// 0x206e58ebd041 0x7e616ffe40
	int Num();// 0xffffff8158ebd000 0x7e616fff20
	RigControlValue MakeControlValueFromVector2D(Vector2D InValue);// 0x206c58ebd041 0x7e616fcaa0
	RigControlValue MakeControlValueFromVector(Vector InValue);// 0x206b58ebd041 0x7e616fcb80
	RigControlValue MakeControlValueFromTransformNoScale(TransformNoScale InValue);// 0x206a58ebd041 0x7e616fcc60
	RigControlValue MakeControlValueFromTransform(Transform InValue);// 0x206958ebd041 0x7e616fcd40
	RigControlValue MakeControlValueFromRotator(Rotator InValue);// 0x206858ebd041 0x7e616fce20
	RigControlValue MakeControlValueFromInt(int InValue);// 0x206758ebd041 0x7e616fcf00
	RigControlValue MakeControlValueFromFloat(float InValue);// 0x206658ebd041 0x7e616fcfe0
	RigControlValue MakeControlValueFromEulerTransform(EulerTransform InValue);// 0x206558ebd041 0x7e616fd0c0
	RigControlValue MakeControlValueFromBool(bool InValue);// 0x206458ebd041 0x7e616fd1a0
	bool IsValidIndex(int InElementIndex);// 0x206358ebd041 0x7e616fd280
	bool IsSelectedByIndex(int InIndex);// 0x206258ebd041 0x7e616fd360
	bool IsSelected(RigElementKey InKey);// 0x206158ebd041 0x7e616fd440
	bool IsParentedTo(RigElementKey InChild, RigElementKey InParent);// 0x206058ebd041 0x7e616fd520
	Vector GetVectorFromControlValue(RigControlValue InValue);// 0x205f58ebd041 0x7e616fd600
	Vector2D GetVector2DFromControlValue(RigControlValue InValue);// 0x205e58ebd041 0x7e616fd6e0
	TransformNoScale GetTransformNoScaleFromControlValue(RigControlValue InValue);// 0x205d58ebd041 0x7e616fd7c0
	Transform GetTransformFromControlValue(RigControlValue InValue);// 0x205c58ebd041 0x7e616fd8a0
	RigElementKey[] GetSelectedKeys(enum InTypeFilter);// 0x205b58ebd041 0x7e616fd980
	Rotator GetRotatorFromControlValue(RigControlValue InValue);// 0x205a58ebd041 0x7e616fda60
	RigElementKey[] GetRigidBodyKeys(bool bTraverse);// 0x205958ebd041 0x7e616fdb40
	RigElementKey[] GetReferenceKeys(bool bTraverse);// 0x205858ebd041 0x7e616fdc20
	RigElementKey GetPreviousParent(out const RigElementKey InKey);// 0x205758ebd041 0x7e616fdd00
	FName GetPreviousName(out const RigElementKey InKey);// 0x205658ebd041 0x7e616fdde0
	RigPose GetPose(bool bInitial);// 0x205558ebd041 0x7e616fdec0
	RigElementWeight[] GetParentWeightArray(RigElementKey InChild, bool bInitial);// 0x205458ebd041 0x7e616fdfa0
	RigElementWeight GetParentWeight(RigElementKey InChild, RigElementKey InParent, bool bInitial);// 0x205358ebd041 0x7e616fe080
	Transform GetParentTransformByIndex(int InElementIndex, bool bInitial);// 0x205258ebd041 0x7e616fe160
	Transform GetParentTransform(RigElementKey InKey, bool bInitial);// 0x205158ebd041 0x7e616fe240
	RigElementKey[] GetParents(RigElementKey InKey, bool bRecursive);// 0x205058ebd041 0x7e616fe320
	int GetNumberOfParents(RigElementKey InKey);// 0x204f58ebd041 0x7e616fe400
	RigElementKey[] GetNullKeys(bool bTraverse);// 0x204e58ebd041 0x7e616fe4e0
	Transform GetLocalTransformByIndex(int InElementIndex, bool bInitial);// 0x204d58ebd041 0x7e616fe5c0
	Transform GetLocalTransform(RigElementKey InKey, bool bInitial);// 0x208958ebd041 0x7e616fe6a0
	RigElementKey GetKey(int InElementIndex);// 0x204b58ebd041 0x7e616fadc0
	int GetIntFromControlValue(RigControlValue InValue);// 0x204a58ebd041 0x7e616faea0
	int GetIndex_ForBlueprint(RigElementKey InKey);// 0x204958ebd041 0x7e616faf80
	Transform GetGlobalTransformByIndex(int InElementIndex, bool bInitial);// 0x204858ebd041 0x7e616fb060
	Transform GetGlobalTransform(RigElementKey InKey, bool bInitial);// 0x204758ebd041 0x7e616fb140
	Transform GetGlobalControlShapeTransformByIndex(int InElementIndex, bool bInitial);// 0x204658ebd041 0x7e616fb220
	Transform GetGlobalControlShapeTransform(RigElementKey InKey, bool bInitial);// 0x204558ebd041 0x7e616fb300
	Transform GetGlobalControlOffsetTransformByIndex(int InElementIndex, bool bInitial);// 0x204458ebd041 0x7e616fb3e0
	Transform GetGlobalControlOffsetTransform(RigElementKey InKey, bool bInitial);// 0x204358ebd041 0x7e616fb4c0
	float GetFloatFromControlValue(RigControlValue InValue);// 0x204258ebd041 0x7e616fb5a0
	RigElementKey GetFirstParent(RigElementKey InKey);// 0x204158ebd041 0x7e616fb680
	EulerTransform GetEulerTransformFromControlValue(RigControlValue InValue);// 0x204058ebd041 0x7e616fb760
	float GetCurveValueByIndex(int InElementIndex);// 0x203f58ebd041 0x7e616fb840
	float GetCurveValue(RigElementKey InKey);// 0x203e58ebd041 0x7e616fb920
	RigElementKey[] GetCurveKeys();// 0x203d58ebd041 0x7e616fba00
	RigControlValue GetControlValueByIndex(int InElementIndex, enum InValueType);// 0x203c58ebd041 0x7e616fbae0
	RigControlValue GetControlValue(RigElementKey InKey, enum InValueType);// 0x203b58ebd041 0x7e616fbbc0
	RigHierarchyController* GetController(bool bCreateIfNeeded);// 0x203a58ebd041 0x7e616fbca0
	RigElementKey[] GetControlKeys(bool bTraverse);// 0x203958ebd041 0x7e616fbd80
	RigElementKey[] GetChildren(RigElementKey InKey, bool bRecursive);// 0x203858ebd041 0x7e616fbe60
	RigElementKey[] GetBoneKeys(bool bTraverse);// 0x203758ebd041 0x7e616fbf40
	RigElementKey[] GetAllKeys_ForBlueprint(bool bTraverse);// 0x203658ebd041 0x7e616fc020
	RigNullElement FindNull_ForBlueprintOnly(out const RigElementKey InKey);// 0x203558ebd041 0x7e616fc100
	RigControlElement FindControl_ForBlueprintOnly(out const RigElementKey InKey);// 0x203458ebd041 0x7e616fc1e0
	RigBoneElement FindBone_ForBlueprintOnly(out const RigElementKey InKey);// 0x203358ebd041 0x7e616fc2c0
	void CopyPose(RigHierarchy* InHierarchy, bool bCurrent, bool bInitial);// 0x203258ebd041 0x7e616fc3a0
	void CopyHierarchy(RigHierarchy* InHierarchy);// 0x203158ebd041 0x7e616fc480
	bool Contains_ForBlueprint(RigElementKey InKey);// 0x203058ebd041 0x7e616fc560

--------------------------------
Class: RigPose
	RigPoseElement[] Elements;//[Offset: 0x0, Size: 0x10] 0x7e848565a0
	int HierarchyTopologyVersion;//[Offset: 0x10, Size: 0x4] 0x7e614c3d80
	int PoseHash;//[Offset: 0x14, Size: 0x4] 0x7e614c3e00

--------------------------------
Class: RigPoseElement
	CachedRigElement Index;//[Offset: 0x0, Size: 0x20] 0x7e614c3e80
	Transform GlobalTransform;//[Offset: 0x20, Size: 0x60] 0x7e614c3f00
	Transform LocalTransform;//[Offset: 0x80, Size: 0x60] 0x7e614c3f80
	float CurveValue;//[Offset: 0xe0, Size: 0x4] 0x7e614c4000

--------------------------------
Class: CachedRigElement
	RigElementKey Key;//[Offset: 0x0, Size: 0xc] 0x7e614a4b00
	uint16 Index;//[Offset: 0xc, Size: 0x2] 0x7e614a4b80
	int ContainerVersion;//[Offset: 0x10, Size: 0x4] 0x7e614a4c00

--------------------------------
Class: RigElementWeight
	float Location;//[Offset: 0x0, Size: 0x4] 0x7e614c3100
	float Rotation;//[Offset: 0x4, Size: 0x4] 0x7e614c3180
	float Scale;//[Offset: 0x8, Size: 0x4] 0x7e614c1100

--------------------------------
Class: RigControlValue
	RigControlValueStorage FloatStorage;//[Offset: 0x0, Size: 0x84] 0x7e614ab300
	Transform Storage;//[Offset: 0x90, Size: 0x60] 0x7e614ab380

--------------------------------
Class: RigControlValueStorage
	float Float00;//[Offset: 0x0, Size: 0x4] 0x7e614ac380
	float Float01;//[Offset: 0x4, Size: 0x4] 0x7e614ac400
	float Float02;//[Offset: 0x8, Size: 0x4] 0x7e614ac480
	float Float03;//[Offset: 0xc, Size: 0x4] 0x7e614ac500
	float Float10;//[Offset: 0x10, Size: 0x4] 0x7e614ac580
	float Float11;//[Offset: 0x14, Size: 0x4] 0x7e614ac600
	float Float12;//[Offset: 0x18, Size: 0x4] 0x7e614aa580
	float Float13;//[Offset: 0x1c, Size: 0x4] 0x7e614aa600
	float Float20;//[Offset: 0x20, Size: 0x4] 0x7e614aa680
	float Float21;//[Offset: 0x24, Size: 0x4] 0x7e614aa700
	float Float22;//[Offset: 0x28, Size: 0x4] 0x7e614aa780
	float Float23;//[Offset: 0x2c, Size: 0x4] 0x7e614aa800
	float Float30;//[Offset: 0x30, Size: 0x4] 0x7e614aa880
	float Float31;//[Offset: 0x34, Size: 0x4] 0x7e614aa900
	float Float32;//[Offset: 0x38, Size: 0x4] 0x7e614aa980
	float Float33;//[Offset: 0x3c, Size: 0x4] 0x7e614aaa00
	float Float00;//[Offset: 0x40, Size: 0x4] 0x7e614aaa80
	float Float01;//[Offset: 0x44, Size: 0x4] 0x7e614aab00
	float Float02;//[Offset: 0x48, Size: 0x4] 0x7e614aab80
	float Float03;//[Offset: 0x4c, Size: 0x4] 0x7e614aac00
	float Float10;//[Offset: 0x50, Size: 0x4] 0x7e614aac80
	float Float11;//[Offset: 0x54, Size: 0x4] 0x7e614aad00
	float Float12;//[Offset: 0x58, Size: 0x4] 0x7e614aad80
	float Float13;//[Offset: 0x5c, Size: 0x4] 0x7e614aae00
	float Float20;//[Offset: 0x60, Size: 0x4] 0x7e614aae80
	float Float21;//[Offset: 0x64, Size: 0x4] 0x7e614aaf00
	float Float22;//[Offset: 0x68, Size: 0x4] 0x7e614aaf80
	float Float23;//[Offset: 0x6c, Size: 0x4] 0x7e614ab000
	float Float30;//[Offset: 0x70, Size: 0x4] 0x7e614ab080
	float Float31;//[Offset: 0x74, Size: 0x4] 0x7e614ab100
	float Float32;//[Offset: 0x78, Size: 0x4] 0x7e614ab180
	float Float33;//[Offset: 0x7c, Size: 0x4] 0x7e614ab200
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7e614ab280

--------------------------------
Class: RigControlSettings
	enum ControlType;//[Offset: 0x0, Size: 0x1] 0x7e84856000
	FName DisplayName;//[Offset: 0x4, Size: 0x8] 0x7e614c2780
	enum PrimaryAxis;//[Offset: 0xc, Size: 0x1] 0x7e84855ec0
	bool bIsCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7e614c2880
	bool bAnimatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1] 0x7e614c2900
	RigControlLimitEnabled[] LimitEnabled;//[Offset: 0x10, Size: 0x10] 0x7e84855d80
	bool bDrawLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7e614c2a00
	RigControlValue MinimumValue;//[Offset: 0x30, Size: 0xf0] 0x7e614c2a80
	RigControlValue MaximumValue;//[Offset: 0x120, Size: 0xf0] 0x7e614c2b00
	bool bShapeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x7e614c2b80
	bool bShapeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1] 0x7e614c2c00
	FName ShapeName;//[Offset: 0x214, Size: 0x8] 0x7e614c2c80
	LinearColor ShapeColor;//[Offset: 0x21c, Size: 0x10] 0x7e614c2d00
	bool bIsTransientControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1] 0x7e614c2d80
	Enum* ControlEnum;//[Offset: 0x230, Size: 0x8] 0x7e614c2e00
	RigControlElementCustomization Customization;//[Offset: 0x238, Size: 0x20] 0x7e614c2e80

--------------------------------
Class: RigControlLimitEnabled
	bool bMinimum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e614c1880
	bool bMaximum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e614c1900

--------------------------------
Class: TransformNoScale
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e6156d980
	Quat Rotation;//[Offset: 0x20, Size: 0x20] 0x7e6156da00

--------------------------------
Class: EulerTransform
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e614e2100
	Rotator Rotation;//[Offset: 0x18, Size: 0x18] 0x7e614e0080
	Vector Scale;//[Offset: 0x30, Size: 0x18] 0x7e614e0100

--------------------------------
Class: RigHierarchyController.Object
	bool bReportWarningsAndErrors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61738500
	RigHierarchy* Hierarchy;//[Offset: 0x2c, Size: 0x8] 0x7e61738580
	bool SetSelection(out const RigElementKey[] InKeys, bool bPrintPythonCommand);// 0x20a258ebd041 0x7e617406a0
	bool SetParent(RigElementKey InChild, RigElementKey InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x20a158ebd041 0x7e61740780
	void SetHierarchy(RigHierarchy* InHierarchy);// 0x20a058ebd041 0x7e61740860
	bool SetControlSettings(RigElementKey InKey, RigControlSettings InSettings, bool bSetupUndo);// 0x209f58ebd041 0x7e61740940
	bool SelectElement(RigElementKey InKey, bool bSelect, bool bClearSelection);// 0x209e58ebd041 0x7e61740a20
	RigElementKey RenameElement(RigElementKey InElement, FName InName, bool bSetupUndo, bool bPrintPythonCommand, bool bClearSelection);// 0x209d58ebd041 0x7e61740b00
	bool RemoveParent(RigElementKey InChild, RigElementKey InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x209c58ebd041 0x7e61740be0
	bool RemoveElement(RigElementKey InElement, bool bSetupUndo, bool bPrintPythonCommand);// 0x209b58ebd041 0x7e61740cc0
	bool RemoveAllParents(RigElementKey InChild, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x209a58ebd041 0x7e61740da0
	RigElementKey[] MirrorElements(RigElementKey[] InKeys, RigMirrorSettings InSettings, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);// 0x209958ebd041 0x7e61740e80
	RigElementKey[] ImportFromText(FString InContent, bool bReplaceExistingElements, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);// 0x209858ebd041 0x7e61740f60
	RigElementKey[] ImportCurves(Skeleton* InSkeleton, FName InNameSpace, bool bSelectCurves, bool bSetupUndo, bool bPrintPythonCommand);// 0x209758ebd041 0x7e61741040
	RigElementKey[] ImportBones(Skeleton* InSkeleton, FName InNameSpace, bool bReplaceExistingBones, bool bRemoveObsoleteBones, bool bSelectBones, bool bSetupUndo, bool bPrintPythonCommand);// 0x209658ebd041 0x7e61741120
	RigHierarchy* GetHierarchy();// 0x209558ebd041 0x7e61741200
	RigControlSettings GetControlSettings(RigElementKey InKey);// 0x209458ebd041 0x7e617412e0
	FString ExportToText(RigElementKey[] InKeys);// 0x209358ebd041 0x7e617413c0
	FString ExportSelectionToText();// 0x209258ebd041 0x7e617414a0
	RigElementKey[] DuplicateElements(RigElementKey[] InKeys, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);// 0x209158ebd041 0x7e61741580
	bool DeselectElement(RigElementKey InKey);// 0x209058ebd041 0x7e61741660
	bool ClearSelection();// 0x208f58ebd041 0x7e61741740
	RigElementKey AddRigidBody(FName InName, RigElementKey InParent, RigRigidBodySettings InSettings, Transform InLocalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x208e58ebd041 0x7e61741820
	bool AddParent(RigElementKey InChild, RigElementKey InParent, float InWeight, bool bMaintainGlobalTransform, bool bSetupUndo);// 0x208d58ebd041 0x7e61741900
	RigElementKey AddNull(FName InName, RigElementKey InParent, Transform InTransform, bool bTransformInGlobal, bool bSetupUndo, bool bPrintPythonCommand);// 0x208c58ebd041 0x7e617419e0
	RigElementKey AddCurve(FName InName, float InValue, bool bSetupUndo, bool bPrintPythonCommand);// 0x208b58ebd041 0x7e61741ac0
	RigElementKey AddControl_ForBlueprint(FName InName, RigElementKey InParent, RigControlSettings InSettings, RigControlValue InValue, bool bSetupUndo);// 0x208a58ebd041 0x7e61741ba0
	RigElementKey AddBone(FName InName, RigElementKey InParent, Transform InTransform, bool bTransformInGlobal, enum InBoneType, bool bSetupUndo, bool bPrintPythonCommand);// 0x20cb58ebd041 0x7e61741c80

--------------------------------
Class: RigMirrorSettings
	byte MirrorAxis;//[Offset: 0x0, Size: 0x1] 0x7e614c1680
	byte AxisToFlip;//[Offset: 0x1, Size: 0x1] 0x7e614c1700
	FString SearchString;//[Offset: 0x8, Size: 0x10] 0x7e614c1780
	FString ReplaceString;//[Offset: 0x18, Size: 0x10] 0x7e614c1800

--------------------------------
Class: RigRigidBodySettings
	float Mass;//[Offset: 0x0, Size: 0x4] 0x7e614c2500

--------------------------------
Class: RigNullElement.RigMultiParentElement.RigTransformElement.RigBaseElement

--------------------------------
Class: RigMultiParentElement.RigTransformElement.RigBaseElement
	RigCurrentAndInitialTransform Parent;//[Offset: 0x250, Size: 0x1c0] 0x7e614c3080

--------------------------------
Class: RigTransformElement.RigBaseElement
	RigCurrentAndInitialTransform Pose;//[Offset: 0x50, Size: 0x1c0] 0x7e614c1180

--------------------------------
Class: RigBaseElement
	RigElementKey Key;//[Offset: 0x8, Size: 0xc] 0x7e614c1200
	int Index;//[Offset: 0x14, Size: 0x4] 0x7e614c1280
	int SubIndex;//[Offset: 0x18, Size: 0x4] 0x7e614c1300
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7e614c1380

--------------------------------
Class: RigCurrentAndInitialTransform
	RigLocalAndGlobalTransform Current;//[Offset: 0x0, Size: 0xe0] 0x7e614c1400
	RigLocalAndGlobalTransform Initial;//[Offset: 0xe0, Size: 0xe0] 0x7e614c1480

--------------------------------
Class: RigLocalAndGlobalTransform
	RigComputedTransform Local;//[Offset: 0x0, Size: 0x70] 0x7e614c1500
	RigComputedTransform Global;//[Offset: 0x70, Size: 0x70] 0x7e614c1580

--------------------------------
Class: RigComputedTransform
	Transform Transform;//[Offset: 0x0, Size: 0x60] 0x7e614c1600

--------------------------------
Class: RigControlElement.RigMultiParentElement.RigTransformElement.RigBaseElement
	RigControlSettings Settings;//[Offset: 0x510, Size: 0x260] 0x7e614c2580
	RigCurrentAndInitialTransform Offset;//[Offset: 0x770, Size: 0x1c0] 0x7e614c2600
	RigCurrentAndInitialTransform Shape;//[Offset: 0x930, Size: 0x1c0] 0x7e614c2680

--------------------------------
Class: RigBoneElement.RigSingleParentElement.RigTransformElement.RigBaseElement
	enum BoneType;//[Offset: 0x258, Size: 0x1] 0x7e84855a60

--------------------------------
Class: RigSingleParentElement.RigTransformElement.RigBaseElement

--------------------------------
Class: ControlRigShapeLibrary.Object
	ControlRigShapeDefinition DefaultShape;//[Offset: 0x30, Size: 0xa0] 0x7e61708a80
	Material* DefaultMaterial;//[Offset: 0xd0, Size: 0x28] 0x7e61708b00
	FName MaterialColorParameter;//[Offset: 0xf8, Size: 0x8] 0x7e61708b80
	ControlRigShapeDefinition[] Shapes;//[Offset: 0x100, Size: 0x10] 0x7e61698b20

--------------------------------
Class: ControlRigShapeDefinition
	FName ShapeName;//[Offset: 0x0, Size: 0x8] 0x7e614a9880
	StaticMesh* StaticMesh;//[Offset: 0x8, Size: 0x28] 0x7e614a9900
	Transform Transform;//[Offset: 0x30, Size: 0x60] 0x7e614a9980

--------------------------------
Class: ControlRigDrawContainer
	ControlRigDrawInstruction[] Instructions;//[Offset: 0x8, Size: 0x10] 0x7e84853c60

--------------------------------
Class: ControlRigDrawInstruction
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e614a9a00
	byte PrimitiveType;//[Offset: 0x8, Size: 0x1] 0x7e614a9a80
	Vector[] Positions;//[Offset: 0x10, Size: 0x10] 0x7e84853d00
	LinearColor Color;//[Offset: 0x20, Size: 0x10] 0x7e614a9b80
	float Thickness;//[Offset: 0x30, Size: 0x4] 0x7e614a9c00
	Transform Transform;//[Offset: 0x40, Size: 0x60] 0x7e614a9c80

--------------------------------
Class: AnimationDataSourceRegistry.Object
	<FName,Object*> DataSources;//[Offset: 0x28, Size: 0x50] 0x7e6167b680

--------------------------------
Class: RigInfluenceMapPerEvent
	RigInfluenceMap[] Maps;//[Offset: 0x0, Size: 0x10] 0x7e84853f80
	<FName,int> EventToIndex;//[Offset: 0x10, Size: 0x50] 0x7e8487f7c0

--------------------------------
Class: RigInfluenceMap
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x7e614c3980
	RigInfluenceEntry[] Entries;//[Offset: 0x8, Size: 0x10] 0x7e84856500
	<RigElementKey,int> KeyToIndex;//[Offset: 0x18, Size: 0x50] 0x7e8487f940

--------------------------------
Class: RigInfluenceEntry
	RigElementKey Source;//[Offset: 0x0, Size: 0xc] 0x7e614c3c00
	RigElementKey[] AffectedList;//[Offset: 0x10, Size: 0x10] 0x7e84856640

--------------------------------
Class: AdditiveControlRig.ControlRig.Object

--------------------------------
Class: ControlRigAnimInstance.AnimInstance.Object

--------------------------------
Class: ControlRigBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object

--------------------------------
Class: ControlRigComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class ControlRig* ControlRigClass;//[Offset: 0x538, Size: 0x8] 0x7e61698ee0
	delegate OnPreInitializeDelegate;//[Offset: 0x540, Size: 0x10] 0x7e61707d80
	delegate OnPostInitializeDelegate;//[Offset: 0x550, Size: 0x10] 0x7e61707e00
	delegate OnPreSetupDelegate;//[Offset: 0x560, Size: 0x10] 0x7e61707e80
	delegate OnPostSetupDelegate;//[Offset: 0x570, Size: 0x10] 0x7e61707f00
	delegate OnPreForwardsSolveDelegate;//[Offset: 0x580, Size: 0x10] 0x7e61707f80
	delegate OnPostForwardsSolveDelegate;//[Offset: 0x590, Size: 0x10] 0x7e61708000
	ControlRigComponentMappedElement[] MappedElements;//[Offset: 0x5a0, Size: 0x10] 0x7e61698f80
	bool bEnableLazyEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1] 0x7e61708100
	float LazyEvaluationPositionThreshold;//[Offset: 0x5b4, Size: 0x4] 0x7e61708180
	float LazyEvaluationRotationThreshold;//[Offset: 0x5b8, Size: 0x4] 0x7e61708200
	float LazyEvaluationScaleThreshold;//[Offset: 0x5bc, Size: 0x4] 0x7e61708280
	bool bResetTransformBeforeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1] 0x7e61708300
	bool bResetInitialsBeforeSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1] 0x7e61708380
	bool bUpdateRigOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c2, Size: 0x1] 0x7e61708400
	bool bUpdateInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c3, Size: 0x1] 0x7e61706380
	bool bDrawBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1] 0x7e61706400
	bool bShowDebugDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c5, Size: 0x1] 0x7e61706480
	ControlRig* ControlRig;//[Offset: 0x5c8, Size: 0x8] 0x7e61706500
	void Update(float DeltaTime);// 0x1ff458ebd041 0x7e616f8660
	void SetMappedElements(ControlRigComponentMappedElement[] NewMappedElements);// 0x1ff358ebd041 0x7e616f8740
	void SetInitialSpaceTransform(FName SpaceName, Transform InitialTransform, enum Space);// 0x1ff258ebd041 0x7e616f8820
	void SetInitialBoneTransform(FName BoneName, Transform InitialTransform, enum Space, bool bPropagateToChildren);// 0x1ff158ebd041 0x7e616f8900
	void SetControlVector2D(FName ControlName, Vector2D Value);// 0x1ff058ebd041 0x7e616f89e0
	void SetControlTransform(FName ControlName, Transform Value, enum Space);// 0x1fef58ebd041 0x7e616f8ac0
	void SetControlScale(FName ControlName, Vector Value, enum Space);// 0x1fee58ebd041 0x7e616f8ba0
	void SetControlRotator(FName ControlName, Rotator Value, enum Space);// 0x1fed58ebd041 0x7e616f8c80
	void SetControlPosition(FName ControlName, Vector Value, enum Space);// 0x1fec58ebd041 0x7e616f8d60
	void SetControlOffset(FName ControlName, Transform OffsetTransform, enum Space);// 0x1feb58ebd041 0x7e616f8e40
	void SetControlInt(FName ControlName, int Value);// 0x1fea58ebd041 0x7e616f8f20
	void SetControlFloat(FName ControlName, float Value);// 0x202b58ebd041 0x7e616f9000
	void SetControlBool(FName ControlName, bool Value);// 0x1fe858ebd041 0x7e616f5720
	void SetBoneTransform(FName BoneName, Transform Transform, enum Space, float Weight, bool bPropagateToChildren);// 0x1fe758ebd041 0x7e616f5800
	void SetBoneInitialTransformsFromSkeletalMesh(SkeletalMesh* InSkeletalMesh);// 0x1fe658ebd041 0x7e616f58e0
	void OnPreSetup(ControlRigComponent* Component);// 0x1fe558ebd041 0x7e616f59c0
	void OnPreInitialize(ControlRigComponent* Component);// 0x1fe458ebd041 0x7e616f5aa0
	void OnPreForwardsSolve(ControlRigComponent* Component);// 0x1fe358ebd041 0x7e616f5b80
	void OnPostSetup(ControlRigComponent* Component);// 0x1fe258ebd041 0x7e616f5c60
	void OnPostInitialize(ControlRigComponent* Component);// 0x1fe158ebd041 0x7e616f5d40
	void OnPostForwardsSolve(ControlRigComponent* Component);// 0x1fe058ebd041 0x7e616f5e20
	void Initialize();// 0x1fdf58ebd041 0x7e616f5f00
	Transform GetSpaceTransform(FName SpaceName, enum Space);// 0x1fde58ebd041 0x7e616f5fe0
	Transform GetInitialSpaceTransform(FName SpaceName, enum Space);// 0x1fdd58ebd041 0x7e616f60c0
	Transform GetInitialBoneTransform(FName BoneName, enum Space);// 0x1fdc58ebd041 0x7e616f61a0
	FName[] GetElementNames(enum ElementType);// 0x1fdb58ebd041 0x7e616f6280
	Vector2D GetControlVector2D(FName ControlName);// 0x1fda58ebd041 0x7e616f6360
	Transform GetControlTransform(FName ControlName, enum Space);// 0x1fd958ebd041 0x7e616f6440
	Vector GetControlScale(FName ControlName, enum Space);// 0x1fd858ebd041 0x7e616f6520
	Rotator GetControlRotator(FName ControlName, enum Space);// 0x1fd758ebd041 0x7e616f6600
	ControlRig* GetControlRig();// 0x1fd658ebd041 0x7e616f66e0
	Vector GetControlPosition(FName ControlName, enum Space);// 0x1fd558ebd041 0x7e616f67c0
	Transform GetControlOffset(FName ControlName, enum Space);// 0x1fd458ebd041 0x7e616f68a0
	int GetControlInt(FName ControlName);// 0x1fd358ebd041 0x7e616f6980
	float GetControlFloat(FName ControlName);// 0x1fd258ebd041 0x7e616f6a60
	bool GetControlBool(FName ControlName);// 0x1fd158ebd041 0x7e616f6b40
	Transform GetBoneTransform(FName BoneName, enum Space);// 0x1fd058ebd041 0x7e616f6c20
	float GetAbsoluteTime();// 0x1fcf58ebd041 0x7e616f6d00
	bool DoesElementExist(FName Name, enum ElementType);// 0x1fce58ebd041 0x7e616f6de0
	void ClearMappedElements();// 0x1fcd58ebd041 0x7e616f6ec0
	bool CanExecute();// 0x1fcc58ebd041 0x7e616f6fa0
	void AddMappedSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, ControlRigComponentMappedBone[] Bones, ControlRigComponentMappedCurve[] Curves);// 0x1fcb58ebd041 0x7e616f7080
	void AddMappedElements(ControlRigComponentMappedElement[] NewMappedElements);// 0x1fca58ebd041 0x7e616f7160
	void AddMappedComponents(ControlRigComponentMappedComponent[] Components);// 0x1fc958ebd041 0x7e616f7240
	void AddMappedCompleteSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent);// 0x200a58ebd041 0x7e616f7320

--------------------------------
Class: ControlRigComponentMappedElement
	ComponentReference ComponentReference;//[Offset: 0x0, Size: 0x28] 0x7e614aa300
	int TransformIndex;//[Offset: 0x28, Size: 0x4] 0x7e614aa380
	FName TransformName;//[Offset: 0x2c, Size: 0x8] 0x7e614aa400
	enum ElementType;//[Offset: 0x34, Size: 0x1] 0x7e84853a80
	FName ElementName;//[Offset: 0x38, Size: 0x8] 0x7e614aa500
	enum Direction;//[Offset: 0x40, Size: 0x1] 0x7e848539e0
	Transform Offset;//[Offset: 0x50, Size: 0x60] 0x7e614a8500
	float Weight;//[Offset: 0xb0, Size: 0x4] 0x7e614a8580
	enum Space;//[Offset: 0xb4, Size: 0x1] 0x7e84853940
	SceneComponent* SceneComponent;//[Offset: 0xb8, Size: 0x8] 0x7e614a8680
	int ElementIndex;//[Offset: 0xc0, Size: 0x4] 0x7e614a8700
	int SubIndex;//[Offset: 0xc4, Size: 0x4] 0x7e614a8780

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8] 0x7e614aa180
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8] 0x7e614aa200
	FString PathToComponent;//[Offset: 0x10, Size: 0x10] 0x7e614aa280

--------------------------------
Class: ControlRigComponentMappedBone
	FName Source;//[Offset: 0x0, Size: 0x8] 0x7e614a9e80
	FName Target;//[Offset: 0x8, Size: 0x8] 0x7e614a9f00

--------------------------------
Class: ControlRigComponentMappedCurve
	FName Source;//[Offset: 0x0, Size: 0x8] 0x7e614a9d80
	FName Target;//[Offset: 0x8, Size: 0x8] 0x7e614a9e00

--------------------------------
Class: ControlRigComponentMappedComponent
	SceneComponent* Component;//[Offset: 0x0, Size: 0x8] 0x7e614a9f80
	FName ElementName;//[Offset: 0x8, Size: 0x8] 0x7e614aa000
	enum ElementType;//[Offset: 0x10, Size: 0x1] 0x7e84853bc0
	enum Direction;//[Offset: 0x11, Size: 0x1] 0x7e848538a0

--------------------------------
Class: ControlRigControlActor.Actor.Object
	Actor* ActorToTrack;//[Offset: 0x278, Size: 0x8] 0x7e61707700
	class ControlRig* ControlRigClass;//[Offset: 0x280, Size: 0x8] 0x7e61698bc0
	bool bRefreshOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x7e61707780
	bool bIsSelectable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1] 0x7e61707800
	MaterialInterface* MaterialOverride;//[Offset: 0x290, Size: 0x8] 0x7e61707880
	FString ColorParameter;//[Offset: 0x298, Size: 0x10] 0x7e61707900
	bool bCastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x7e61707980
	SceneComponent* ActorRootComponent;//[Offset: 0x2b0, Size: 0x8] 0x7e61707a00
	ControlRig* ControlRig;//[Offset: 0x2b8, Size: 0x8] 0x7e61707a80
	FName[] ControlNames;//[Offset: 0x2c0, Size: 0x10] 0x7e61698c60
	Transform[] ShapeTransforms;//[Offset: 0x2d0, Size: 0x10] 0x7e61698d00
	StaticMeshComponent*[] Components;//[Offset: 0x2e0, Size: 0x10] 0x7e61698da0
	MaterialInstanceDynamic*[] Materials;//[Offset: 0x2f0, Size: 0x10] 0x7e61698e40
	FName ColorParameterName;//[Offset: 0x300, Size: 0x8] 0x7e61707d00
	void Refresh();// 0x1ff658ebd041 0x7e616f84a0
	void Clear();// 0x1ff558ebd041 0x7e616f8580

--------------------------------
Class: ControlRigShapeActor.Actor.Object
	SceneComponent* ActorRootComponent;//[Offset: 0x278, Size: 0x8] 0x7e61708c80
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x280, Size: 0x8] 0x7e61708d00
	uint32 ControlRigIndex;//[Offset: 0x288, Size: 0x4] 0x7e61708d80
	FName ControlName;//[Offset: 0x28c, Size: 0x8] 0x7e61708e00
	FName ColorParameterName;//[Offset: 0x294, Size: 0x8] 0x7e61708e80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1] 0x7e61708f00
	bool bSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1] 0x7e61708f80
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29c, Size: 0x1] 0x7e61709000
	bool bHovered;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29c, Size: 0x1] 0x7e61709080
	void SetSelected(bool bInSelected);// 0x200458ebd041 0x7e616f7860
	void SetSelectable(bool bInSelectable);// 0x200358ebd041 0x7e616f7940
	void SetHovered(bool bInHovered);// 0x200258ebd041 0x7e616f7a20
	void SetGlobalTransform(out const Transform InTransform);// 0x200158ebd041 0x7e616f7b00
	void SetEnabled(bool bInEnabled);// 0x200058ebd041 0x7e616f7be0
	void OnTransformChanged(out const Transform NewTransform);// 0x1fff58ebd041 0x7e616f7cc0
	void OnSelectionChanged(bool bIsSelected);// 0x1ffe58ebd041 0x7e616f7da0
	void OnManipulatingChanged(bool bIsManipulating);// 0x1ffd58ebd041 0x7e616f7e80
	void OnHoveredChanged(bool bIsSelected);// 0x1ffc58ebd041 0x7e616f7f60
	void OnEnabledChanged(bool bIsEnabled);// 0x1ffb58ebd041 0x7e616f8040
	bool IsSelectedInEditor();// 0x1ffa58ebd041 0x7e616f8120
	bool IsHovered();// 0x1ff958ebd041 0x7e616f8200
	bool IsEnabled();// 0x1ff858ebd041 0x7e616f82e0
	Transform GetGlobalTransform();// 0x1ff758ebd041 0x7e616f83c0

--------------------------------
Class: ControlRigLayerInstance.AnimInstance.Object

--------------------------------
Class: ControlRigValidationPass.Object

--------------------------------
Class: ControlRigNumericalValidationPass.ControlRigValidationPass.Object
	bool bCheckControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61708580
	bool bCheckBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e61708600
	bool bCheckCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7e61708680
	float TranslationPrecision;//[Offset: 0x2c, Size: 0x4] 0x7e61708700
	float RotationPrecision;//[Offset: 0x30, Size: 0x4] 0x7e61708780
	float ScalePrecision;//[Offset: 0x34, Size: 0x4] 0x7e61708800
	float CurvePrecision;//[Offset: 0x38, Size: 0x4] 0x7e61708880
	FName EventNameA;//[Offset: 0x3c, Size: 0x8] 0x7e61708900
	FName EventNameB;//[Offset: 0x44, Size: 0x8] 0x7e61708980
	RigPose Pose;//[Offset: 0x50, Size: 0x70] 0x7e61708a00

--------------------------------
Class: ControlRigObjectHolder.Object
	Object*[] Objects;//[Offset: 0x28, Size: 0x10] 0x7e61698a80

--------------------------------
Class: ControlRigPoseAsset.Object
	ControlRigControlPose Pose;//[Offset: 0x28, Size: 0x60] 0x7e61709e00
	void SelectControls(ControlRig* InControlRig, bool bDoMirror);// 0x200b58ebd041 0x7e616fac00
	void SavePose(ControlRig* InControlRig, bool bUseAll);// 0x204c58ebd041 0x7e616face0
	void ReplaceControlName(out const FName CurrentName, out const FName NewName);// 0x200958ebd041 0x7e616f7400
	void PastePose(ControlRig* InControlRig, bool bDoKey, bool bDoMirror);// 0x200858ebd041 0x7e616f74e0
	void GetCurrentPose(ControlRig* InControlRig, out ControlRigControlPose OutPose);// 0x200758ebd041 0x7e616f75c0
	FName[] GetControlNames();// 0x200658ebd041 0x7e616f76a0
	bool DoesMirrorMatch(ControlRig* ControlRig, out const FName ControlName);// 0x200558ebd041 0x7e616f7780

--------------------------------
Class: ControlRigControlPose
	RigControlCopy[] CopyOfControls;//[Offset: 0x0, Size: 0x10] 0x7e84851500

--------------------------------
Class: RigControlCopy
	FName Name;//[Offset: 0x8, Size: 0x8] 0x7e614ac280
	enum ControlType;//[Offset: 0x10, Size: 0x1] 0x7e84853da0
	RigControlValue Value;//[Offset: 0x20, Size: 0xf0] 0x7e614ab400
	RigElementKey ParentKey;//[Offset: 0x110, Size: 0xc] 0x7e614ab480
	Transform OffsetTransform;//[Offset: 0x120, Size: 0x60] 0x7e614ab500
	Transform ParentTransform;//[Offset: 0x180, Size: 0x60] 0x7e614ab580
	Transform LocalTransform;//[Offset: 0x1e0, Size: 0x60] 0x7e614a9500
	Transform GlobalTransform;//[Offset: 0x240, Size: 0x60] 0x7e614a9580

--------------------------------
Class: ControlRigPoseMirrorSettings.Object
	FString RightSide;//[Offset: 0x28, Size: 0x10] 0x7e61709c00
	FString LeftSide;//[Offset: 0x38, Size: 0x10] 0x7e61709c80
	byte MirrorAxis;//[Offset: 0x48, Size: 0x1] 0x7e61709d00
	byte AxisToFlip;//[Offset: 0x49, Size: 0x1] 0x7e61709d80

--------------------------------
Class: ControlRigPoseProjectSettings.Object
	DirectoryPath[] RootSaveDirs;//[Offset: 0x28, Size: 0x10] 0x7e61698940

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 0x8] 0x7e6170b200
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 0x50] 0x7e6170b280
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 0xa0] 0x7e6170b300
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 0x50] 0x7e61679640
	ClassPtrProperty DirectorClass;//[Size: 0x8] 0x7e61698440
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 0x10] 0x7e616984e0
	void RemoveMetaDataByClass(class Object InClass);// 0x201258ebd041 0x7e616fa5e0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x201158ebd041 0x7e616fa6c0
	Object* FindMetaDataByClass(class Object InClass);// 0x201058ebd041 0x7e616fa7a0
	Object* CopyMetaData(Object* InMetaData);// 0x200f58ebd041 0x7e616fa880

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50] 0x7e615e0940
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50] 0x7e84e531c0

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10] 0x7e84e53260

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10] 0x7e615ceb00
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18] 0x7e615ceb80
	FString ObjectPath;//[Offset: 0x28, Size: 0x10] 0x7e615cec00

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c] 0x7e615ce780
	FString ComponentName;//[Offset: 0x20, Size: 0x10] 0x7e615ce800
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8] 0x7e615ce880

--------------------------------
Class: ControlRigSequence.LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	AnimSequence* LastExportedToAnimationSequence;//[Offset: 0x1c8, Size: 0x28] 0x7e6170b080
	SkeletalMesh* LastExportedUsingSkeletalMesh;//[Offset: 0x1f0, Size: 0x28] 0x7e6170b100
	float LastExportedFrameRate;//[Offset: 0x218, Size: 0x4] 0x7e6170b180

--------------------------------
Class: ControlRigSettings.DeveloperSettings.Object

--------------------------------
Class: ControlRigEditorSettings.DeveloperSettings.Object

--------------------------------
Class: ControlRigSnapSettings.Object
	bool bKeepOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e6170ae80
	bool bSnapPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e6170af00
	bool bSnapRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7e6170af80
	bool bSnapScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x7e6170b000

--------------------------------
Class: ControlRigValidator.Object
	ControlRigValidationPass*[] Passes;//[Offset: 0x28, Size: 0x10] 0x7e616983a0

--------------------------------
Class: FKControlRig.ControlRig.Object
	bool[] IsControlActive;//[Offset: 0x488, Size: 0x10] 0x7e61698260
	enum ApplyMode;//[Offset: 0x498, Size: 0x1] 0x7e61698300

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x30, Size: 0x1] 0x7e61897c20

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	BoolParameterNameAndCurve[] BoolParameterNamesAndCurves;//[Offset: 0xe0, Size: 0x10] 0x7e61697c20
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0xf0, Size: 0x10] 0x7e61697cc0
	Vector2DParameterNameAndCurves[] Vector2DParameterNamesAndCurves;//[Offset: 0x100, Size: 0x10] 0x7e61697d60
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0x110, Size: 0x10] 0x7e61697e00
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0x120, Size: 0x10] 0x7e61697ea0
	TransformParameterNameAndCurves[] TransformParameterNamesAndCurves;//[Offset: 0x130, Size: 0x10] 0x7e61697f40
	bool RemoveVectorParameter(FName InParameterName);// 0x202f58ebd041 0x7e616fc640
	bool RemoveVector2DParameter(FName InParameterName);// 0x202e58ebd041 0x7e616fc720
	bool RemoveTransformParameter(FName InParameterName);// 0x202d58ebd041 0x7e616fc800
	bool RemoveScalarParameter(FName InParameterName);// 0x202c58ebd041 0x7e616fc8e0
	bool RemoveColorParameter(FName InParameterName);// 0x206d58ebd041 0x7e616fc9c0
	bool RemoveBoolParameter(FName InParameterName);// 0x202a58ebd041 0x7e616f90e0
	void GetParameterNames(out <FName> ParameterNames);// 0x202958ebd041 0x7e616f91c0
	void AddVectorParameterKey(FName InParameterName, FrameNumber InTime, Vector InValue);// 0x202858ebd041 0x7e616f92a0
	void AddVector2DParameterKey(FName InParameterName, FrameNumber InTime, Vector2D InValue);// 0x202758ebd041 0x7e616f9380
	void AddTransformParameterKey(FName InParameterName, FrameNumber InTime, out const Transform InValue);// 0x202658ebd041 0x7e616f9460
	void AddScalarParameterKey(FName InParameterName, FrameNumber InTime, float InValue);// 0x202558ebd041 0x7e616f9540
	void AddColorParameterKey(FName InParameterName, FrameNumber InTime, LinearColor InValue);// 0x202458ebd041 0x7e616f9620
	void AddBoolParameterKey(FName InParameterName, FrameNumber InTime, bool InValue);// 0x202358ebd041 0x7e616f9700

--------------------------------
Class: BoolParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e614afe80
	MovieSceneBoolChannel ParameterCurve;//[Offset: 0x8, Size: 0xd8] 0x7e614ae880

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x7e84dd31c0
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e614aff80
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7e614ae780
	bool[] Values;//[Offset: 0x68, Size: 0x10] 0x7e84dd3120

--------------------------------
Class: MovieSceneChannel

--------------------------------
Class: ScalarParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e614afd00
	MovieSceneFloatChannel ParameterCurve;//[Offset: 0x8, Size: 0xe8] 0x7e614afd80

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x50, Size: 0x1] 0x7e614ae480
	byte PostInfinityExtrap;//[Offset: 0x51, Size: 0x1] 0x7e614ae500
	FrameNumber[] Times;//[Offset: 0x58, Size: 0x10] 0x7e84856c80
	MovieSceneFloatValue[] Values;//[Offset: 0x68, Size: 0x10] 0x7e84857180
	float DefaultValue;//[Offset: 0x78, Size: 0x4] 0x7e614aca80
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7e614acb00
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x80, Size: 0x60] 0x7e614acb80
	FrameRate TickResolution;//[Offset: 0xe0, Size: 0x8] 0x7e614acc00

--------------------------------
Class: MovieSceneFloatValue
	float Value;//[Offset: 0x0, Size: 0x4] 0x7e614ae600
	MovieSceneTangentData Tangent;//[Offset: 0x4, Size: 0x14] 0x7e614ac800
	byte InterpMode;//[Offset: 0x18, Size: 0x1] 0x7e614ac880
	byte TangentMode;//[Offset: 0x19, Size: 0x1] 0x7e614ac900
	byte PaddingByte;//[Offset: 0x1a, Size: 0x1] 0x7e614ac980

--------------------------------
Class: MovieSceneTangentData
	float ArriveTangent;//[Offset: 0x0, Size: 0x4] 0x7e614ae680
	float LeaveTangent;//[Offset: 0x4, Size: 0x4] 0x7e614ae700
	float ArriveTangentWeight;//[Offset: 0x8, Size: 0x4] 0x7e614ac680
	float LeaveTangentWeight;//[Offset: 0xc, Size: 0x4] 0x7e614ac700
	byte TangentWeightMode;//[Offset: 0x10, Size: 0x1] 0x7e614ac780

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable

--------------------------------
Class: KeyHandleLookupTable

--------------------------------
Class: Vector2DParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e614ae980
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xe8] 0x7e614aea00
	MovieSceneFloatChannel YCurve;//[Offset: 0xf0, Size: 0xe8] 0x7e614aea80

--------------------------------
Class: VectorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e614aeb80
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xe8] 0x7e614aec00
	MovieSceneFloatChannel YCurve;//[Offset: 0xf0, Size: 0xe8] 0x7e614aec80
	MovieSceneFloatChannel ZCurve;//[Offset: 0x1d8, Size: 0xe8] 0x7e614aed00

--------------------------------
Class: ColorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e614aee00
	MovieSceneFloatChannel RedCurve;//[Offset: 0x8, Size: 0xe8] 0x7e614aee80
	MovieSceneFloatChannel GreenCurve;//[Offset: 0xf0, Size: 0xe8] 0x7e614aef00
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x1d8, Size: 0xe8] 0x7e614aef80
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x2c0, Size: 0xe8] 0x7e614af000

--------------------------------
Class: TransformParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e614af100
	MovieSceneFloatChannel Translation;//[Offset: 0x8, Size: 0xe8] 0x7e614af180
	MovieSceneFloatChannel Rotation;//[Offset: 0x2c0, Size: 0xe8] 0x7e614af200
	MovieSceneFloatChannel Scale;//[Offset: 0x578, Size: 0xe8] 0x7e614af280

--------------------------------
Class: MovieSceneControlRigParameterSection.MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	ControlRig* ControlRig;//[Offset: 0x158, Size: 0x8] 0x7e6170c800
	class ControlRig* ControlRigClass;//[Offset: 0x160, Size: 0x8] 0x7e6169a240
	bool[] ControlsMask;//[Offset: 0x168, Size: 0x10] 0x7e6169a2e0
	MovieSceneTransformMask TransformMask;//[Offset: 0x178, Size: 0x4] 0x7e6170c900
	MovieSceneFloatChannel Weight;//[Offset: 0x180, Size: 0xe8] 0x7e6170c980
	<FName,ChannelMapInfo> ControlChannelMap;//[Offset: 0x268, Size: 0x50] 0x7e61679580
	EnumParameterNameAndCurve[] EnumParameterNamesAndCurves;//[Offset: 0x2b8, Size: 0x10] 0x7e6169a380
	IntegerParameterNameAndCurve[] IntegerParameterNamesAndCurves;//[Offset: 0x2c8, Size: 0x10] 0x7e6169a420
	SpaceControlNameAndChannel[] SpaceChannels;//[Offset: 0x2d8, Size: 0x10] 0x7e6169a4c0

--------------------------------
Class: MovieSceneTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x7e615b8800

--------------------------------
Class: ChannelMapInfo
	int ControlIndex;//[Offset: 0x0, Size: 0x4] 0x7e614af480
	int TotalChannelIndex;//[Offset: 0x4, Size: 0x4] 0x7e614af500
	int ChannelIndex;//[Offset: 0x8, Size: 0x4] 0x7e614af580
	int ParentControlIndex;//[Offset: 0xc, Size: 0x4] 0x7e614af600
	FName ChannelTypeName;//[Offset: 0x10, Size: 0x8] 0x7e614af680
	bool bDoesHaveSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e614af700
	int SpaceChannelIndex;//[Offset: 0x1c, Size: 0x4] 0x7e614af780
	int MaskIndex;//[Offset: 0x20, Size: 0x4] 0x7e614ad700
	int CategoryIndex;//[Offset: 0x24, Size: 0x4] 0x7e614ad780

--------------------------------
Class: EnumParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e614ade00
	MovieSceneByteChannel ParameterCurve;//[Offset: 0x8, Size: 0xe0] 0x7e614ae100

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x7e84857400
	byte DefaultValue;//[Offset: 0x60, Size: 0x1] 0x7e614adf00
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7e614adf80
	byte[] Values;//[Offset: 0x68, Size: 0x10] 0x7e84857360
	Enum* Enum;//[Offset: 0x78, Size: 0x8] 0x7e614ae080

--------------------------------
Class: IntegerParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7e614adb00
	MovieSceneIntegerChannel ParameterCurve;//[Offset: 0x8, Size: 0xd8] 0x7e614add80

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x7e848572c0
	int DefaultValue;//[Offset: 0x60, Size: 0x4] 0x7e614adc00
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x7e614adc80
	int[] Values;//[Offset: 0x68, Size: 0x10] 0x7e848574a0

--------------------------------
Class: SpaceControlNameAndChannel
	FName ControlName;//[Offset: 0x0, Size: 0x8] 0x7e614ad800
	MovieSceneControlRigSpaceChannel SpaceCurve;//[Offset: 0x8, Size: 0xe8] 0x7e614ada80

--------------------------------
Class: MovieSceneControlRigSpaceChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x50, Size: 0x10] 0x7e84857720
	MovieSceneControlRigSpaceBaseKey[] KeyValues;//[Offset: 0x60, Size: 0x10] 0x7e848575e0

--------------------------------
Class: MovieSceneControlRigSpaceBaseKey
	enum SpaceType;//[Offset: 0x0, Size: 0x1] 0x7e84857680
	RigElementKey ControlRigElement;//[Offset: 0x4, Size: 0xc] 0x7e614ad980

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneControlRigParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	ControlRig* ControlRig;//[Offset: 0xb8, Size: 0x8] 0x7e6170e480
	MovieSceneSection* SectionToKey;//[Offset: 0xc0, Size: 0x8] 0x7e6170e500
	MovieSceneSection*[] Sections;//[Offset: 0xc8, Size: 0x10] 0x7e6169a100
	FName TrackName;//[Offset: 0xd8, Size: 0x8] 0x7e6170e600

--------------------------------
Class: MovieSceneBindingExtensions.BlueprintFunctionLibrary.Object
	void SetParent(out const SequencerBindingProxy InBinding, out const SequencerBindingProxy InParentBinding);// 0x20b458ebd041 0x7e617430a0
	void SetName(out const SequencerBindingProxy InBinding, FString InName);// 0x20b358ebd041 0x7e61743180
	void SetDisplayName(out const SequencerBindingProxy InBinding, out const FText InDisplayName);// 0x20b258ebd041 0x7e61743260
	void RemoveTrack(out const SequencerBindingProxy InBinding, MovieSceneTrack* TrackToRemove);// 0x20b158ebd041 0x7e61743340
	void Remove(out const SequencerBindingProxy InBinding);// 0x20b058ebd041 0x7e61743420
	void MoveBindingContents(out const SequencerBindingProxy SourceBindingId, out const SequencerBindingProxy DestinationBindingId);// 0x20af58ebd041 0x7e61743500
	bool IsValid(out const SequencerBindingProxy InBinding);// 0x20ae58ebd041 0x7e617435e0
	MovieSceneTrack*[] GetTracks(out const SequencerBindingProxy InBinding);// 0x20ad58ebd041 0x7e617436c0
	class Object GetPossessedObjectClass(out const SequencerBindingProxy InBinding);// 0x20ac58ebd041 0x7e617437a0
	SequencerBindingProxy GetParent(out const SequencerBindingProxy InBinding);// 0x20ab58ebd041 0x7e61743880
	Object* GetObjectTemplate(out const SequencerBindingProxy InBinding);// 0x20ec58ebd041 0x7e61743960
	FString GetName(out const SequencerBindingProxy InBinding);// 0x20a958ebd041 0x7e61740080
	Guid GetId(out const SequencerBindingProxy InBinding);// 0x20a858ebd041 0x7e61740160
	FText GetDisplayName(out const SequencerBindingProxy InBinding);// 0x20a758ebd041 0x7e61740240
	SequencerBindingProxy[] GetChildPossessables(out const SequencerBindingProxy InBinding);// 0x20a658ebd041 0x7e61740320
	MovieSceneTrack*[] FindTracksByType(out const SequencerBindingProxy InBinding, class MovieSceneTrack TrackType);// 0x20a558ebd041 0x7e61740400
	MovieSceneTrack*[] FindTracksByExactType(out const SequencerBindingProxy InBinding, class MovieSceneTrack TrackType);// 0x20a458ebd041 0x7e617404e0
	MovieSceneTrack* AddTrack(out const SequencerBindingProxy InBinding, class MovieSceneTrack TrackType);// 0x20a358ebd041 0x7e617405c0

--------------------------------
Class: SequencerBindingProxy
	Guid BindingID;//[Offset: 0x0, Size: 0x10] 0x7e61525480
	MovieSceneSequence* Sequence;//[Offset: 0x10, Size: 0x8] 0x7e61525500

--------------------------------
Class: MovieSceneEventTrackExtensions.BlueprintFunctionLibrary.Object
	class Object GetBoundObjectPropertyClass(out const MovieSceneEvent EventKey);// 0x20b758ebd041 0x7e61742e00
	MovieSceneEventTriggerSection* AddEventTriggerSection(MovieSceneEventTrack* InTrack);// 0x20b658ebd041 0x7e61742ee0
	MovieSceneEventRepeaterSection* AddEventRepeaterSection(MovieSceneEventTrack* InTrack);// 0x20b558ebd041 0x7e61742fc0

--------------------------------
Class: MovieSceneEvent
	MovieSceneEventPtrs Ptrs;//[Offset: 0x0, Size: 0x28] 0x7e615bb500

--------------------------------
Class: MovieSceneEventPtrs
	Function* Function;//[Offset: 0x0, Size: 0x8] 0x7e615bb580
	FieldPathProperty BoundObjectProperty;//[Size: 0x20] 0x7e615b9500

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7e6191ac80
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x7e6191ad00
	enum EventPosition;//[Offset: 0xa1, Size: 0x1] 0x7e6189c720
	MovieSceneSection*[] Sections;//[Offset: 0xa8, Size: 0x10] 0x7e6189c7c0

--------------------------------
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEventChannel EventChannel;//[Offset: 0xe8, Size: 0xd0] 0x7e6191ac00

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x50, Size: 0x10] 0x7e84dda2e0
	MovieSceneEvent[] KeyValues;//[Offset: 0x60, Size: 0x10] 0x7e84dda240

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEvent Event;//[Offset: 0xe8, Size: 0x28] 0x7e6191af80

--------------------------------
Class: MovieSceneFolderExtensions.BlueprintFunctionLibrary.Object
	bool SetFolderName(MovieSceneFolder* Folder, FName InFolderName);// 0x20c458ebd041 0x7e617422a0
	bool SetFolderColor(MovieSceneFolder* Folder, Color InFolderColor);// 0x20c358ebd041 0x7e61742380
	bool RemoveChildObjectBinding(MovieSceneFolder* Folder, const SequencerBindingProxy InObjectBinding);// 0x20c258ebd041 0x7e61742460
	bool RemoveChildMasterTrack(MovieSceneFolder* Folder, MovieSceneTrack* InMasterTrack);// 0x20c158ebd041 0x7e61742540
	bool RemoveChildFolder(MovieSceneFolder* TargetFolder, MovieSceneFolder* FolderToRemove);// 0x20c058ebd041 0x7e61742620
	FName GetFolderName(MovieSceneFolder* Folder);// 0x20bf58ebd041 0x7e61742700
	Color GetFolderColor(MovieSceneFolder* Folder);// 0x20be58ebd041 0x7e617427e0
	SequencerBindingProxy[] GetChildObjectBindings(MovieSceneFolder* Folder);// 0x20bd58ebd041 0x7e617428c0
	MovieSceneTrack*[] GetChildMasterTracks(MovieSceneFolder* Folder);// 0x20bc58ebd041 0x7e617429a0
	MovieSceneFolder*[] GetChildFolders(MovieSceneFolder* Folder);// 0x20bb58ebd041 0x7e61742a80
	bool AddChildObjectBinding(MovieSceneFolder* Folder, SequencerBindingProxy InObjectBinding);// 0x20ba58ebd041 0x7e61742b60
	bool AddChildMasterTrack(MovieSceneFolder* Folder, MovieSceneTrack* InMasterTrack);// 0x20b958ebd041 0x7e61742c40
	bool AddChildFolder(MovieSceneFolder* TargetFolder, MovieSceneFolder* FolderToAdd);// 0x20b858ebd041 0x7e61742d20

--------------------------------
Class: MovieSceneFolder.Object
	FName FolderName;//[Offset: 0x28, Size: 0x8] 0x7e61904d80
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10] 0x7e6189a380
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10] 0x7e6189a420
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10] 0x7e6189a4c0

--------------------------------
Class: MovieScenePropertyTrackExtensions.BlueprintFunctionLibrary.Object
	void SetPropertyNameAndPath(MovieScenePropertyTrack* Track, out const FName InPropertyName, FString InPropertyPath);// 0x20ca58ebd041 0x7e61741d60
	void SetObjectPropertyClass(MovieSceneObjectPropertyTrack* Track, class Object PropertyClass);// 0x20c958ebd041 0x7e61741e40
	FName GetUniqueTrackName(MovieScenePropertyTrack* Track);// 0x20c858ebd041 0x7e61741f20
	FString GetPropertyPath(MovieScenePropertyTrack* Track);// 0x20c758ebd041 0x7e61742000
	FName GetPropertyName(MovieScenePropertyTrack* Track);// 0x20c658ebd041 0x7e617420e0
	class Object GetObjectPropertyClass(MovieSceneObjectPropertyTrack* Track);// 0x20c558ebd041 0x7e617421c0

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection* SectionToKey;//[Offset: 0x90, Size: 0x8] 0x7e6180e400
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x98, Size: 0x14] 0x7e6180e480
	MovieSceneSection*[] Sections;//[Offset: 0xb0, Size: 0x10] 0x7e617b9b60

--------------------------------
Class: MovieScenePropertyBinding
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x7e6152b980
	FName PropertyPath;//[Offset: 0x8, Size: 0x8] 0x7e6152ba00
	bool bCanUseClassLookup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e6152ba80

--------------------------------
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	ClassPtrProperty PropertyClass;//[Size: 0x8] 0x7e6189c180

--------------------------------
Class: MovieSceneScriptingKey.Object

--------------------------------
Class: MovieSceneScriptingActorReferenceKey.MovieSceneScriptingKey.Object
	void SetValue(out const MovieSceneObjectBindingID InNewValue);// 0x20ce58ebd041 0x7e617453a0
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x20cd58ebd041 0x7e61745480
	MovieSceneObjectBindingID GetValue();// 0x20cc58ebd041 0x7e61745560
	FrameTime GetTime(enum TimeUnit);// 0x210d58ebd041 0x7e61745640

--------------------------------
Class: MovieSceneScriptingChannel.Object
	FName ChannelName;//[Offset: 0x28, Size: 0x8] 0x7e6173b900

--------------------------------
Class: MovieSceneScriptingActorReferenceChannel.MovieSceneScriptingChannel.Object
	void SetDefault(MovieSceneObjectBindingID InDefaultValue);// 0x20d558ebd041 0x7e61744d80
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x20d458ebd041 0x7e61744e60
	void RemoveDefault();// 0x20d358ebd041 0x7e61744f40
	bool HasDefault();// 0x20d258ebd041 0x7e61745020
	MovieSceneScriptingKey*[] GetKeys();// 0x20d158ebd041 0x7e61745100
	MovieSceneObjectBindingID GetDefault();// 0x20d058ebd041 0x7e617451e0
	MovieSceneScriptingActorReferenceKey* AddKey(const FrameNumber InTime, MovieSceneObjectBindingID NewValue, float SubFrame, enum TimeUnit);// 0x20cf58ebd041 0x7e617452c0

--------------------------------
Class: MovieSceneScriptingBoolKey.MovieSceneScriptingKey.Object
	void SetValue(bool InNewValue);// 0x20d958ebd041 0x7e61744a00
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x20d858ebd041 0x7e61744ae0
	bool GetValue();// 0x20d758ebd041 0x7e61744bc0
	FrameTime GetTime(enum TimeUnit);// 0x20d658ebd041 0x7e61744ca0

--------------------------------
Class: MovieSceneScriptingBoolChannel.MovieSceneScriptingChannel.Object
	void SetDefault(bool InDefaultValue);// 0x20e358ebd041 0x7e61744140
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x20e258ebd041 0x7e61744220
	void RemoveDefault();// 0x20e158ebd041 0x7e61744300
	bool HasDefault();// 0x20e058ebd041 0x7e617443e0
	int GetNumKeys();// 0x20df58ebd041 0x7e617444c0
	MovieSceneScriptingKey*[] GetKeys();// 0x20de58ebd041 0x7e617445a0
	bool GetDefault();// 0x20dd58ebd041 0x7e61744680
	bool[] EvaluateKeys(SequencerScriptingRange Range, FrameRate FrameRate);// 0x20dc58ebd041 0x7e61744760
	SequencerScriptingRange ComputeEffectiveRange();// 0x20db58ebd041 0x7e61744840
	MovieSceneScriptingBoolKey* AddKey(out const FrameNumber InTime, bool NewValue, float SubFrame, enum TimeUnit);// 0x20da58ebd041 0x7e61744920

--------------------------------
Class: SequencerScriptingRange
	bool bHasStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61527300
	bool bHasEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61527380
	int InclusiveStart;//[Offset: 0x4, Size: 0x4] 0x7e61525300
	int ExclusiveEnd;//[Offset: 0x8, Size: 0x4] 0x7e61525380
	FrameRate InternalRate;//[Offset: 0xc, Size: 0x8] 0x7e61525400

--------------------------------
Class: MovieSceneScriptingByteKey.MovieSceneScriptingKey.Object
	void SetValue(byte InNewValue);// 0x20e758ebd041 0x7e61743dc0
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x20e658ebd041 0x7e61743ea0
	byte GetValue();// 0x20e558ebd041 0x7e61743f80
	FrameTime GetTime(enum TimeUnit);// 0x20e458ebd041 0x7e61744060

--------------------------------
Class: MovieSceneScriptingByteChannel.MovieSceneScriptingChannel.Object
	void SetDefault(byte InDefaultValue);// 0x20ee58ebd041 0x7e61747160
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x20ed58ebd041 0x7e61747240
	void RemoveDefault();// 0x212e58ebd041 0x7e61747320
	bool HasDefault();// 0x20eb58ebd041 0x7e61743a40
	MovieSceneScriptingKey*[] GetKeys();// 0x20ea58ebd041 0x7e61743b20
	byte GetDefault();// 0x20e958ebd041 0x7e61743c00
	MovieSceneScriptingByteKey* AddKey(out const FrameNumber InTime, byte NewValue, float SubFrame, enum TimeUnit, enum InInterpolation);// 0x20e858ebd041 0x7e61743ce0

--------------------------------
Class: MovieSceneScriptingDoubleKey.MovieSceneScriptingKey.Object
	void SetValue(double InNewValue);// 0x210058ebd041 0x7e617461a0
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x20ff58ebd041 0x7e61746280
	void SetTangentWeightMode(byte InNewValue);// 0x20fe58ebd041 0x7e61746360
	void SetTangentMode(byte InNewValue);// 0x20fd58ebd041 0x7e61746440
	void SetLeaveTangentWeight(float InNewValue);// 0x20fc58ebd041 0x7e61746520
	void SetLeaveTangent(float InNewValue);// 0x20fb58ebd041 0x7e61746600
	void SetInterpolationMode(byte InNewValue);// 0x20fa58ebd041 0x7e617466e0
	void SetArriveTangentWeight(float InNewValue);// 0x20f958ebd041 0x7e617467c0
	void SetArriveTangent(float InNewValue);// 0x20f858ebd041 0x7e617468a0
	double GetValue();// 0x20f758ebd041 0x7e61746980
	FrameTime GetTime(enum TimeUnit);// 0x20f658ebd041 0x7e61746a60
	byte GetTangentWeightMode();// 0x20f558ebd041 0x7e61746b40
	byte GetTangentMode();// 0x20f458ebd041 0x7e61746c20
	float GetLeaveTangentWeight();// 0x20f358ebd041 0x7e61746d00
	float GetLeaveTangent();// 0x20f258ebd041 0x7e61746de0
	byte GetInterpolationMode();// 0x20f158ebd041 0x7e61746ec0
	float GetArriveTangentWeight();// 0x20f058ebd041 0x7e61746fa0
	float GetArriveTangent();// 0x20ef58ebd041 0x7e61747080

--------------------------------
Class: MovieSceneScriptingDoubleChannel.MovieSceneScriptingChannel.Object
	void SetPreInfinityExtrapolation(byte InExtrapolation);// 0x210e58ebd041 0x7e61748f20
	void SetPostInfinityExtrapolation(byte InExtrapolation);// 0x214f58ebd041 0x7e61749000
	void SetDefault(double InDefaultValue);// 0x210c58ebd041 0x7e61745720
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x210b58ebd041 0x7e61745800
	void RemoveDefault();// 0x210a58ebd041 0x7e617458e0
	bool HasDefault();// 0x210958ebd041 0x7e617459c0
	byte GetPreInfinityExtrapolation();// 0x210858ebd041 0x7e61745aa0
	byte GetPostInfinityExtrapolation();// 0x210758ebd041 0x7e61745b80
	int GetNumKeys();// 0x210658ebd041 0x7e61745c60
	MovieSceneScriptingKey*[] GetKeys();// 0x210558ebd041 0x7e61745d40
	double GetDefault();// 0x210458ebd041 0x7e61745e20
	double[] EvaluateKeys(SequencerScriptingRange Range, FrameRate FrameRate);// 0x210358ebd041 0x7e61745f00
	SequencerScriptingRange ComputeEffectiveRange();// 0x210258ebd041 0x7e61745fe0
	MovieSceneScriptingDoubleKey* AddKey(out const FrameNumber InTime, double NewValue, float SubFrame, enum TimeUnit, enum InInterpolation);// 0x210158ebd041 0x7e617460c0

--------------------------------
Class: MovieSceneScriptingEventKey.MovieSceneScriptingKey.Object
	void SetValue(out const MovieSceneEvent InNewValue);// 0x211258ebd041 0x7e61748ba0
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x211158ebd041 0x7e61748c80
	MovieSceneEvent GetValue();// 0x211058ebd041 0x7e61748d60
	FrameTime GetTime(enum TimeUnit);// 0x210f58ebd041 0x7e61748e40

--------------------------------
Class: MovieSceneScriptingEventChannel.MovieSceneScriptingChannel.Object
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x211558ebd041 0x7e61748900
	MovieSceneScriptingKey*[] GetKeys();// 0x211458ebd041 0x7e617489e0
	MovieSceneScriptingEventKey* AddKey(out const FrameNumber InTime, MovieSceneEvent NewValue, float SubFrame, enum TimeUnit);// 0x211358ebd041 0x7e61748ac0

--------------------------------
Class: MovieSceneScriptingFloatKey.MovieSceneScriptingKey.Object
	void SetValue(float InNewValue);// 0x212758ebd041 0x7e61747940
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x212658ebd041 0x7e61747a20
	void SetTangentWeightMode(byte InNewValue);// 0x212558ebd041 0x7e61747b00
	void SetTangentMode(byte InNewValue);// 0x212458ebd041 0x7e61747be0
	void SetLeaveTangentWeight(float InNewValue);// 0x212358ebd041 0x7e61747cc0
	void SetLeaveTangent(float InNewValue);// 0x212258ebd041 0x7e61747da0
	void SetInterpolationMode(byte InNewValue);// 0x212158ebd041 0x7e61747e80
	void SetArriveTangentWeight(float InNewValue);// 0x212058ebd041 0x7e61747f60
	void SetArriveTangent(float InNewValue);// 0x211f58ebd041 0x7e61748040
	float GetValue();// 0x211e58ebd041 0x7e61748120
	FrameTime GetTime(enum TimeUnit);// 0x211d58ebd041 0x7e61748200
	byte GetTangentWeightMode();// 0x211c58ebd041 0x7e617482e0
	byte GetTangentMode();// 0x211b58ebd041 0x7e617483c0
	float GetLeaveTangentWeight();// 0x211a58ebd041 0x7e617484a0
	float GetLeaveTangent();// 0x211958ebd041 0x7e61748580
	byte GetInterpolationMode();// 0x211858ebd041 0x7e61748660
	float GetArriveTangentWeight();// 0x211758ebd041 0x7e61748740
	float GetArriveTangent();// 0x211658ebd041 0x7e61748820

--------------------------------
Class: MovieSceneScriptingActualFloatKey.MovieSceneScriptingFloatKey.MovieSceneScriptingKey.Object

--------------------------------
Class: MovieSceneScriptingDoubleAsFloatKey.MovieSceneScriptingFloatKey.MovieSceneScriptingKey.Object

--------------------------------
Class: MovieSceneScriptingFloatChannel.MovieSceneScriptingChannel.Object
	void SetPreInfinityExtrapolation(byte InExtrapolation);// 0x213558ebd041 0x7e6174a6c0
	void SetPostInfinityExtrapolation(byte InExtrapolation);// 0x213458ebd041 0x7e6174a7a0
	void SetDefault(float InDefaultValue);// 0x213358ebd041 0x7e6174a880
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x213258ebd041 0x7e6174a960
	void RemoveDefault();// 0x213158ebd041 0x7e6174aa40
	bool HasDefault();// 0x213058ebd041 0x7e6174ab20
	byte GetPreInfinityExtrapolation();// 0x212f58ebd041 0x7e6174ac00
	byte GetPostInfinityExtrapolation();// 0x217058ebd041 0x7e6174ace0
	int GetNumKeys();// 0x212d58ebd041 0x7e61747400
	MovieSceneScriptingKey*[] GetKeys();// 0x212c58ebd041 0x7e617474e0
	float GetDefault();// 0x212b58ebd041 0x7e617475c0
	float[] EvaluateKeys(SequencerScriptingRange Range, FrameRate FrameRate);// 0x212a58ebd041 0x7e617476a0
	SequencerScriptingRange ComputeEffectiveRange();// 0x212958ebd041 0x7e61747780
	MovieSceneScriptingFloatKey* AddKey(out const FrameNumber InTime, float NewValue, float SubFrame, enum TimeUnit, enum InInterpolation);// 0x212858ebd041 0x7e61747860

--------------------------------
Class: MovieSceneScriptingIntegerKey.MovieSceneScriptingKey.Object
	void SetValue(int InNewValue);// 0x213958ebd041 0x7e6174a340
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x213858ebd041 0x7e6174a420
	int GetValue();// 0x213758ebd041 0x7e6174a500
	FrameTime GetTime(enum TimeUnit);// 0x213658ebd041 0x7e6174a5e0

--------------------------------
Class: MovieSceneScriptingIntegerChannel.MovieSceneScriptingChannel.Object
	void SetDefault(int InDefaultValue);// 0x214058ebd041 0x7e61749d20
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x213f58ebd041 0x7e61749e00
	void RemoveDefault();// 0x213e58ebd041 0x7e61749ee0
	bool HasDefault();// 0x213d58ebd041 0x7e61749fc0
	MovieSceneScriptingKey*[] GetKeys();// 0x213c58ebd041 0x7e6174a0a0
	int GetDefault();// 0x213b58ebd041 0x7e6174a180
	MovieSceneScriptingIntegerKey* AddKey(out const FrameNumber InTime, int NewValue, float SubFrame, enum TimeUnit);// 0x213a58ebd041 0x7e6174a260

--------------------------------
Class: MovieSceneScriptingObjectPathKey.MovieSceneScriptingKey.Object
	void SetValue(Object* InNewValue);// 0x214458ebd041 0x7e617499a0
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x214358ebd041 0x7e61749a80
	Object* GetValue();// 0x214258ebd041 0x7e61749b60
	FrameTime GetTime(enum TimeUnit);// 0x214158ebd041 0x7e61749c40

--------------------------------
Class: MovieSceneScriptingObjectPathChannel.MovieSceneScriptingChannel.Object
	void SetDefault(Object* InDefaultValue);// 0x214b58ebd041 0x7e61749380
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x214a58ebd041 0x7e61749460
	void RemoveDefault();// 0x214958ebd041 0x7e61749540
	bool HasDefault();// 0x214858ebd041 0x7e61749620
	MovieSceneScriptingKey*[] GetKeys();// 0x214758ebd041 0x7e61749700
	Object* GetDefault();// 0x214658ebd041 0x7e617497e0
	MovieSceneScriptingObjectPathKey* AddKey(const FrameNumber InTime, Object* NewValue, float SubFrame, enum TimeUnit);// 0x214558ebd041 0x7e617498c0

--------------------------------
Class: MovieSceneScriptingStringKey.MovieSceneScriptingKey.Object
	void SetValue(FString InNewValue);// 0x219158ebd041 0x7e6174c9c0
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x214e58ebd041 0x7e617490e0
	FString GetValue();// 0x214d58ebd041 0x7e617491c0
	FrameTime GetTime(enum TimeUnit);// 0x214c58ebd041 0x7e617492a0

--------------------------------
Class: MovieSceneScriptingStringChannel.MovieSceneScriptingChannel.Object
	void SetDefault(FString InDefaultValue);// 0x215658ebd041 0x7e6174c3a0
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x215558ebd041 0x7e6174c480
	void RemoveDefault();// 0x215458ebd041 0x7e6174c560
	bool HasDefault();// 0x215358ebd041 0x7e6174c640
	MovieSceneScriptingKey*[] GetKeys();// 0x215258ebd041 0x7e6174c720
	FString GetDefault();// 0x215158ebd041 0x7e6174c800
	MovieSceneScriptingStringKey* AddKey(out const FrameNumber InTime, FString NewValue, float SubFrame, enum TimeUnit);// 0x215058ebd041 0x7e6174c8e0

--------------------------------
Class: MovieSceneSectionExtensions.BlueprintFunctionLibrary.Object
	void SetStartFrameSeconds(MovieSceneSection* Section, float StartTime);// 0x216958ebd041 0x7e6174b300
	void SetStartFrameBounded(MovieSceneSection* Section, bool bIsBounded);// 0x216858ebd041 0x7e6174b3e0
	void SetStartFrame(MovieSceneSection* Section, int StartFrame);// 0x216758ebd041 0x7e6174b4c0
	void SetRangeSeconds(MovieSceneSection* Section, float StartTime, float EndTime);// 0x216658ebd041 0x7e6174b5a0
	void SetRange(MovieSceneSection* Section, int StartFrame, int EndFrame);// 0x216558ebd041 0x7e6174b680
	void SetEndFrameSeconds(MovieSceneSection* Section, float EndTime);// 0x216458ebd041 0x7e6174b760
	void SetEndFrameBounded(MovieSceneSection* Section, bool bIsBounded);// 0x216358ebd041 0x7e6174b840
	void SetEndFrame(MovieSceneSection* Section, int EndFrame);// 0x216258ebd041 0x7e6174b920
	bool HasStartFrame(MovieSceneSection* Section);// 0x216158ebd041 0x7e6174ba00
	bool HasEndFrame(MovieSceneSection* Section);// 0x216058ebd041 0x7e6174bae0
	float GetStartFrameSeconds(MovieSceneSection* Section);// 0x215f58ebd041 0x7e6174bbc0
	int GetStartFrame(MovieSceneSection* Section);// 0x215e58ebd041 0x7e6174bca0
	int GetParentSequenceFrame(MovieSceneSubSection* Section, int InFrame, MovieSceneSequence* ParentSequence);// 0x215d58ebd041 0x7e6174bd80
	float GetEndFrameSeconds(MovieSceneSection* Section);// 0x215c58ebd041 0x7e6174be60
	int GetEndFrame(MovieSceneSection* Section);// 0x215b58ebd041 0x7e6174bf40
	MovieSceneScriptingChannel*[] GetChannelsByType(MovieSceneSection* Section, class MovieSceneScriptingChannel ChannelType);// 0x215a58ebd041 0x7e6174c020
	MovieSceneScriptingChannel*[] GetChannels(MovieSceneSection* Section);// 0x215958ebd041 0x7e6174c100
	MovieSceneScriptingChannel*[] GetAllChannels(MovieSceneSection* Section);// 0x215858ebd041 0x7e6174c1e0
	MovieSceneScriptingChannel*[] FindChannelsByType(MovieSceneSection* Section, class MovieSceneScriptingChannel ChannelType);// 0x215758ebd041 0x7e6174c2c0

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0xdc, Size: 0x24] 0x7e617a6080
	float StartOffset;//[Offset: 0x100, Size: 0x4] 0x7e617a6100
	float TimeScale;//[Offset: 0x104, Size: 0x4] 0x7e617a6180
	float PrerollTime;//[Offset: 0x108, Size: 0x4] 0x7e617a6200
	byte NetworkMask;//[Offset: 0x10c, Size: 0x1] 0x7e617a6280
	MovieSceneSequence* SubSequence;//[Offset: 0x110, Size: 0x8] 0x7e617a6300
	void SetSequence(MovieSceneSequence* Sequence);// 0x221758ebd041 0x7e61796d00
	MovieSceneSequence* GetSequence();// 0x221658ebd041 0x7e61796de0

--------------------------------
Class: MovieSceneSectionParameters
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4] 0x7e615a2c00
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7e615a2c80
	FrameNumber EndFrameOffset;//[Offset: 0x8, Size: 0x4] 0x7e615a2d00
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x7e615a2d80
	float TimeScale;//[Offset: 0x10, Size: 0x4] 0x7e615a2e00
	int HierarchicalBias;//[Offset: 0x14, Size: 0x4] 0x7e615a2e80
	float StartOffset;//[Offset: 0x18, Size: 0x4] 0x7e615a2f00
	float PrerollTime;//[Offset: 0x1c, Size: 0x4] 0x7e615a2f80
	float PostrollTime;//[Offset: 0x20, Size: 0x4] 0x7e615a3000

--------------------------------
Class: MovieSceneSequenceExtensions.BlueprintFunctionLibrary.Object
	void SortMarkedFrames(MovieSceneSequence* Sequence);// 0x21a658ebd041 0x7e6174ecc0
	void SetWorkRangeStart(MovieSceneSequence* InSequence, float StartTimeInSeconds);// 0x21a558ebd041 0x7e6174eda0
	void SetWorkRangeEnd(MovieSceneSequence* InSequence, float EndTimeInSeconds);// 0x21a458ebd041 0x7e6174ee80
	void SetViewRangeStart(MovieSceneSequence* InSequence, float StartTimeInSeconds);// 0x21a358ebd041 0x7e6174ef60
	void SetViewRangeEnd(MovieSceneSequence* InSequence, float EndTimeInSeconds);// 0x21a258ebd041 0x7e6174f040
	void SetTickResolutionDirectly(MovieSceneSequence* Sequence, FrameRate TickResolution);// 0x21a158ebd041 0x7e6174f120
	void SetTickResolution(MovieSceneSequence* Sequence, FrameRate TickResolution);// 0x21a058ebd041 0x7e6174f200
	void SetReadOnly(MovieSceneSequence* Sequence, bool bInReadOnly);// 0x219f58ebd041 0x7e6174f2e0
	void SetPlaybackStartSeconds(MovieSceneSequence* Sequence, float StartTime);// 0x219e58ebd041 0x7e6174f3c0
	void SetPlaybackStart(MovieSceneSequence* Sequence, int StartFrame);// 0x219d58ebd041 0x7e6174f4a0
	void SetPlaybackEndSeconds(MovieSceneSequence* Sequence, float EndTime);// 0x219c58ebd041 0x7e6174f580
	void SetPlaybackEnd(MovieSceneSequence* Sequence, int EndFrame);// 0x219b58ebd041 0x7e6174f660
	void SetMarkedFrame(MovieSceneSequence* Sequence, int InMarkIndex, FrameNumber InFrameNumber);// 0x219a58ebd041 0x7e6174f740
	void SetEvaluationType(MovieSceneSequence* InSequence, enum InEvaluationType);// 0x219958ebd041 0x7e6174f820
	void SetDisplayRate(MovieSceneSequence* Sequence, FrameRate DisplayRate);// 0x219858ebd041 0x7e6174f900
	void SetClockSource(MovieSceneSequence* InSequence, enum InClockSource);// 0x219758ebd041 0x7e6174f9e0
	SequencerBindingProxy ResolveBindingID(MovieSceneSequence* MasterSequence, MovieSceneObjectBindingID InObjectBindingID);// 0x219658ebd041 0x7e6174fac0
	bool RemoveMasterTrack(MovieSceneSequence* Sequence, MovieSceneTrack* MasterTrack);// 0x219558ebd041 0x7e6174fba0
	SequencerScriptingRange MakeRangeSeconds(MovieSceneSequence* Sequence, float StartTime, float Duration);// 0x219458ebd041 0x7e6174fc80
	SequencerScriptingRange MakeRange(MovieSceneSequence* Sequence, int StartFrame, int Duration);// 0x219358ebd041 0x7e6174fd60
	MovieSceneObjectBindingID MakeBindingID(MovieSceneSequence* MasterSequence, out const SequencerBindingProxy InBinding, enum Space);// 0x219258ebd041 0x7e6174fe40
	Object*[] LocateBoundObjects(MovieSceneSequence* Sequence, out const SequencerBindingProxy InBinding, Object* Context);// 0xffffff8158ebd000 0x7e6174ff20
	bool IsReadOnly(MovieSceneSequence* Sequence);// 0x219058ebd041 0x7e6174caa0
	float GetWorkRangeStart(MovieSceneSequence* InSequence);// 0x218f58ebd041 0x7e6174cb80
	float GetWorkRangeEnd(MovieSceneSequence* InSequence);// 0x218e58ebd041 0x7e6174cc60
	float GetViewRangeStart(MovieSceneSequence* InSequence);// 0x218d58ebd041 0x7e6174cd40
	float GetViewRangeEnd(MovieSceneSequence* InSequence);// 0x218c58ebd041 0x7e6174ce20
	Timecode GetTimecodeSource(MovieSceneSequence* Sequence);// 0x218b58ebd041 0x7e6174cf00
	FrameRate GetTickResolution(MovieSceneSequence* Sequence);// 0x218a58ebd041 0x7e6174cfe0
	SequencerBindingProxy[] GetSpawnables(MovieSceneSequence* Sequence);// 0x218958ebd041 0x7e6174d0c0
	MovieSceneFolder*[] GetRootFoldersInSequence(MovieSceneSequence* Sequence);// 0x218858ebd041 0x7e6174d1a0
	SequencerBindingProxy[] GetPossessables(MovieSceneSequence* Sequence);// 0x218758ebd041 0x7e6174d280
	MovieSceneObjectBindingID GetPortableBindingID(MovieSceneSequence* MasterSequence, MovieSceneSequence* DestinationSequence, out const SequencerBindingProxy InBinding);// 0x218658ebd041 0x7e6174d360
	float GetPlaybackStartSeconds(MovieSceneSequence* Sequence);// 0x218558ebd041 0x7e6174d440
	int GetPlaybackStart(MovieSceneSequence* Sequence);// 0x218458ebd041 0x7e6174d520
	SequencerScriptingRange GetPlaybackRange(MovieSceneSequence* Sequence);// 0x218358ebd041 0x7e6174d600
	float GetPlaybackEndSeconds(MovieSceneSequence* Sequence);// 0x218258ebd041 0x7e6174d6e0
	int GetPlaybackEnd(MovieSceneSequence* Sequence);// 0x218158ebd041 0x7e6174d7c0
	MovieScene* GetMovieScene(MovieSceneSequence* Sequence);// 0x218058ebd041 0x7e6174d8a0
	MovieSceneTrack*[] GetMasterTracks(MovieSceneSequence* Sequence);// 0x217f58ebd041 0x7e6174d980
	MovieSceneMarkedFrame[] GetMarkedFrames(MovieSceneSequence* Sequence);// 0x217e58ebd041 0x7e6174da60
	enum GetEvaluationType(MovieSceneSequence* InSequence);// 0x217d58ebd041 0x7e6174db40
	FrameRate GetDisplayRate(MovieSceneSequence* Sequence);// 0x217c58ebd041 0x7e6174dc20
	enum GetClockSource(MovieSceneSequence* InSequence);// 0x217b58ebd041 0x7e6174dd00
	SequencerBindingProxy[] GetBindings(MovieSceneSequence* Sequence);// 0x217a58ebd041 0x7e6174dde0
	MovieSceneObjectBindingID GetBindingID(out const SequencerBindingProxy InBinding);// 0x217958ebd041 0x7e6174dec0
	int FindNextMarkedFrame(MovieSceneSequence* Sequence, FrameNumber InFrameNumber, bool bForward);// 0x217858ebd041 0x7e6174dfa0
	MovieSceneTrack*[] FindMasterTracksByType(MovieSceneSequence* Sequence, class MovieSceneTrack TrackType);// 0x217758ebd041 0x7e6174e080
	MovieSceneTrack*[] FindMasterTracksByExactType(MovieSceneSequence* Sequence, class MovieSceneTrack TrackType);// 0x217658ebd041 0x7e6174e160
	int FindMarkedFrameByLabel(MovieSceneSequence* Sequence, FString InLabel);// 0x217558ebd041 0x7e6174e240
	int FindMarkedFrameByFrameNumber(MovieSceneSequence* Sequence, FrameNumber InFrameNumber);// 0x217458ebd041 0x7e6174e320
	SequencerBindingProxy FindBindingByName(MovieSceneSequence* Sequence, FString Name);// 0x217358ebd041 0x7e6174e400
	SequencerBindingProxy FindBindingById(MovieSceneSequence* Sequence, Guid BindingID);// 0x217258ebd041 0x7e6174e4e0
	void DeleteMarkedFrames(MovieSceneSequence* Sequence);// 0x217158ebd041 0x7e6174e5c0
	void DeleteMarkedFrame(MovieSceneSequence* Sequence, int DeleteIndex);// 0x21ad58ebd041 0x7e6174e6a0
	SequencerBindingProxy AddSpawnableFromInstance(MovieSceneSequence* Sequence, Object* ObjectToSpawn);// 0x216f58ebd041 0x7e6174adc0
	SequencerBindingProxy AddSpawnableFromClass(MovieSceneSequence* Sequence, class Object ClassToSpawn);// 0x216e58ebd041 0x7e6174aea0
	MovieSceneFolder* AddRootFolderToSequence(MovieSceneSequence* Sequence, FString NewFolderName);// 0x216d58ebd041 0x7e6174af80
	SequencerBindingProxy AddPossessable(MovieSceneSequence* Sequence, Object* ObjectToPossess);// 0x216c58ebd041 0x7e6174b060
	MovieSceneTrack* AddMasterTrack(MovieSceneSequence* Sequence, class MovieSceneTrack TrackType);// 0x216b58ebd041 0x7e6174b140
	int AddMarkedFrame(MovieSceneSequence* Sequence, out const MovieSceneMarkedFrame InMarkedFrame);// 0x216a58ebd041 0x7e6174b220

--------------------------------
Class: MovieSceneTrackExtensions.BlueprintFunctionLibrary.Object
	void SetTrackRowDisplayName(MovieSceneTrack* Track, out const FText InName, int RowIndex);// 0x21b358ebd041 0x7e61791740
	void SetSortingOrder(MovieSceneTrack* Track, int SortingOrder);// 0x21b258ebd041 0x7e61791820
	void SetSectionToKey(MovieSceneTrack* Track, MovieSceneSection* Section);// 0x21b158ebd041 0x7e61791900
	void SetDisplayName(MovieSceneTrack* Track, out const FText InName);// 0x21b058ebd041 0x7e617919e0
	void SetColorTint(MovieSceneTrack* Track, out const Color ColorTint);// 0x21af58ebd041 0x7e61791ac0
	void RemoveSection(MovieSceneTrack* Track, MovieSceneSection* Section);// 0x21ae58ebd041 0x7e61791ba0
	FText GetTrackRowDisplayName(MovieSceneTrack* Track, int RowIndex);// 0x21ef58ebd041 0x7e61791c80
	int GetSortingOrder(MovieSceneTrack* Track);// 0x21ac58ebd041 0x7e6174e780
	MovieSceneSection* GetSectionToKey(MovieSceneTrack* Track);// 0x21ab58ebd041 0x7e6174e860
	MovieSceneSection*[] GetSections(MovieSceneTrack* Track);// 0x21aa58ebd041 0x7e6174e940
	FText GetDisplayName(MovieSceneTrack* Track);// 0x21a958ebd041 0x7e6174ea20
	Color GetColorTint(MovieSceneTrack* Track);// 0x21a858ebd041 0x7e6174eb00
	MovieSceneSection* AddSection(MovieSceneTrack* Track);// 0x21a758ebd041 0x7e6174ebe0

--------------------------------
Class: MovieSceneFloatVectorTrackExtensions.BlueprintFunctionLibrary.Object
	void SetNumChannelsUsed(MovieSceneFloatVectorTrack* Track, int InNumChannelsUsed);// 0x21b558ebd041 0x7e61791580
	int GetNumChannelsUsed(MovieSceneFloatVectorTrack* Track);// 0x21b458ebd041 0x7e61791660

--------------------------------
Class: MovieSceneFloatVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xc0, Size: 0x4] 0x7e6191c980

--------------------------------
Class: MovieSceneDoubleVectorTrackExtensions.BlueprintFunctionLibrary.Object
	void SetNumChannelsUsed(MovieSceneDoubleVectorTrack* Track, int InNumChannelsUsed);// 0x21b758ebd041 0x7e617913c0
	int GetNumChannelsUsed(MovieSceneDoubleVectorTrack* Track);// 0x21b658ebd041 0x7e617914a0

--------------------------------
Class: MovieSceneDoubleVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xc0, Size: 0x4] 0x7e6191c900

--------------------------------
Class: SequencerScriptingRangeExtensions.BlueprintFunctionLibrary.Object
	void SetStartSeconds(out SequencerScriptingRange Range, float Start);// 0x21c358ebd041 0x7e61790940
	void SetStartFrame(out SequencerScriptingRange Range, int Start);// 0x21c258ebd041 0x7e61790a20
	void SetEndSeconds(out SequencerScriptingRange Range, float End);// 0x21c158ebd041 0x7e61790b00
	void SetEndFrame(out SequencerScriptingRange Range, int End);// 0x21c058ebd041 0x7e61790be0
	void RemoveStart(out SequencerScriptingRange Range);// 0x21bf58ebd041 0x7e61790cc0
	void RemoveEnd(out SequencerScriptingRange Range);// 0x21be58ebd041 0x7e61790da0
	bool HasStart(out const SequencerScriptingRange Range);// 0x21bd58ebd041 0x7e61790e80
	bool HasEnd(out const SequencerScriptingRange Range);// 0x21bc58ebd041 0x7e61790f60
	float GetStartSeconds(out const SequencerScriptingRange Range);// 0x21bb58ebd041 0x7e61791040
	int GetStartFrame(out const SequencerScriptingRange Range);// 0x21ba58ebd041 0x7e61791120
	float GetEndSeconds(out const SequencerScriptingRange Range);// 0x21b958ebd041 0x7e61791200
	int GetEndFrame(out const SequencerScriptingRange Range);// 0x21b858ebd041 0x7e617912e0

--------------------------------
Class: RetargetChainSettings.Object
	FName SourceChain;//[Offset: 0x28, Size: 0x8] 0x7e6177b180
	FName TargetChain;//[Offset: 0x30, Size: 0x8] 0x7e6177b200
	bool CopyPoseUsingFK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e6177b280
	enum RotationMode;//[Offset: 0x39, Size: 0x1] 0x7e6169d620
	float RotationAlpha;//[Offset: 0x3c, Size: 0x4] 0x7e6177b380
	enum TranslationMode;//[Offset: 0x40, Size: 0x1] 0x7e6169d6c0
	float TranslationAlpha;//[Offset: 0x44, Size: 0x4] 0x7e6177b480
	bool DriveIKGoal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e6177b500
	float BlendToSource;//[Offset: 0x4c, Size: 0x4] 0x7e6177b580
	Vector BlendToSourceWeights;//[Offset: 0x50, Size: 0x18] 0x7e61779500
	Vector StaticOffset;//[Offset: 0x68, Size: 0x18] 0x7e61779580
	float Extension;//[Offset: 0x80, Size: 0x4] 0x7e61779600
	float MatchSourceVelocity;//[Offset: 0x84, Size: 0x4] 0x7e61779680
	float VelocityThreshold;//[Offset: 0x88, Size: 0x4] 0x7e61779700

--------------------------------
Class: IKRetargeter.Object
	IKRigDefinition* SourceIKRigAsset;//[Offset: 0x28, Size: 0x8] 0x7e6177ac80
	IKRigDefinition* TargetIKRigAsset;//[Offset: 0x30, Size: 0x8] 0x7e6177ad00
	bool bRetargetRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e6177ad80
	bool bRetargetFK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e6177ae00
	bool bRetargetIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x7e6177ae80
	<FName,IKRetargetPose> RetargetPoses;//[Offset: 0x40, Size: 0x50] 0x7e6167c580
	RetargetChainMap[] ChainMapping;//[Offset: 0x90, Size: 0x10] 0x7e6169d4e0
	RetargetChainSettings*[] ChainSettings;//[Offset: 0xa0, Size: 0x10] 0x7e6169d580
	FName CurrentRetargetPose;//[Offset: 0xb0, Size: 0x8] 0x7e6177b100

--------------------------------
Class: IKRigDefinition.Object
	SkeletalMesh* PreviewSkeletalMesh;//[Offset: 0x30, Size: 0x8] 0x7e6177c280
	IKRigSkeleton Skeleton;//[Offset: 0x38, Size: 0x70] 0x7e6177c300
	IKRigEffectorGoal*[] Goals;//[Offset: 0xa8, Size: 0x10] 0x7e6169d3a0
	IKRigSolver*[] Solvers;//[Offset: 0xb8, Size: 0x10] 0x7e6169d440
	RetargetDefinition RetargetDefinition;//[Offset: 0xc8, Size: 0x18] 0x7e6177c480

--------------------------------
Class: IKRigSkeleton
	FName[] BoneNames;//[Offset: 0x0, Size: 0x10] 0x7e84e268c0
	int[] ParentIndices;//[Offset: 0x10, Size: 0x10] 0x7e84e26820
	FName[] ExcludedBones;//[Offset: 0x20, Size: 0x10] 0x7e84e26780
	Transform[] CurrentPoseGlobal;//[Offset: 0x30, Size: 0x10] 0x7e84e29020
	Transform[] CurrentPoseLocal;//[Offset: 0x40, Size: 0x10] 0x7e84e28f80
	Transform[] RefPoseGlobal;//[Offset: 0x50, Size: 0x10] 0x7e84e28ee0

--------------------------------
Class: IKRigEffectorGoal.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8] 0x7e6177c500
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7e6177c580
	float PositionAlpha;//[Offset: 0x38, Size: 0x4] 0x7e6177c600
	float RotationAlpha;//[Offset: 0x3c, Size: 0x4] 0x7e6177a580
	Transform CurrentTransform;//[Offset: 0x40, Size: 0x60] 0x7e6177a600
	Transform InitialTransform;//[Offset: 0xa0, Size: 0x60] 0x7e6177a680

--------------------------------
Class: IKRigSolver.Object

--------------------------------
Class: RetargetDefinition
	FName RootBone;//[Offset: 0x0, Size: 0x8] 0x7e61528080
	BoneChain[] BoneChains;//[Offset: 0x8, Size: 0x10] 0x7e84e28e40

--------------------------------
Class: BoneChain
	FName ChainName;//[Offset: 0x0, Size: 0x8] 0x7e61528180
	BoneReference StartBone;//[Offset: 0x8, Size: 0x10] 0x7e61528200
	BoneReference EndBone;//[Offset: 0x18, Size: 0x10] 0x7e61528280
	FName IKGoalName;//[Offset: 0x28, Size: 0x8] 0x7e61528300

--------------------------------
Class: IKRetargetPose
	Vector RootTranslationOffset;//[Offset: 0x0, Size: 0x18] 0x7e61528380
	<FName,Quat> BoneRotationOffsets;//[Offset: 0x18, Size: 0x50] 0x7e6150bec0

--------------------------------
Class: RetargetChainMap
	FName SourceChain;//[Offset: 0x0, Size: 0x8] 0x7e61526400
	FName TargetChain;//[Offset: 0x8, Size: 0x8] 0x7e61526480

--------------------------------
Class: IKRetargetProcessor.Object
	IKRigProcessor* IKRigProcessor;//[Offset: 0xf8, Size: 0x8] 0x7e6177ac00

--------------------------------
Class: IKRigProcessor.Object
	IKRigSolver*[] Solvers;//[Offset: 0x28, Size: 0x10] 0x7e6169d300

--------------------------------
Class: IKRigComponent.ActorComponent.Object
	void SetIKRigGoalTransform(const FName GoalName, const Transform Transform, const float PositionAlpha, const float RotationAlpha);// 0x21c758ebd041 0x7e617905c0
	void SetIKRigGoalPositionAndRotation(const FName GoalName, const Vector Position, const Quat Rotation, const float PositionAlpha, const float RotationAlpha);// 0x21c658ebd041 0x7e617906a0
	void SetIKRigGoal(out const IKRigGoal Goal);// 0x21c558ebd041 0x7e61790780
	void ClearAllGoals();// 0x21c458ebd041 0x7e61790860

--------------------------------
Class: IKRigGoal
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61526800
	enum TransformSource;//[Offset: 0x8, Size: 0x1] 0x7e84e28da0
	BoneReference SourceBone;//[Offset: 0xc, Size: 0x10] 0x7e61526900
	Vector Position;//[Offset: 0x20, Size: 0x18] 0x7e61526980
	Rotator Rotation;//[Offset: 0x38, Size: 0x18] 0x7e61526a00
	float PositionAlpha;//[Offset: 0x50, Size: 0x4] 0x7e61526a80
	float RotationAlpha;//[Offset: 0x54, Size: 0x4] 0x7e61526b00
	enum PositionSpace;//[Offset: 0x58, Size: 0x1] 0x7e84e28d00
	enum RotationSpace;//[Offset: 0x59, Size: 0x1] 0x7e84e28c60
	Vector FinalBlendedPosition;//[Offset: 0x60, Size: 0x18] 0x7e61526c80
	Quat FinalBlendedRotation;//[Offset: 0x80, Size: 0x20] 0x7e61526d00

--------------------------------
Class: IKGoalCreatorInterface.Interface.Object
	void AddIKGoals(out <FName,IKRigGoal> OutGoals);// 0x21c858ebd041 0x7e617904e0

--------------------------------
Class: IKRig_BodyMoverEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8] 0x7e6177bf80
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7e6177c000
	float InfluenceMultiplier;//[Offset: 0x38, Size: 0x4] 0x7e6177c080

--------------------------------
Class: IKRig_BodyMover.IKRigSolver.Object
	FName RootBone;//[Offset: 0x28, Size: 0x8] 0x7e6177b900
	float PositionAlpha;//[Offset: 0x30, Size: 0x4] 0x7e6177b980
	float PositionPositiveX;//[Offset: 0x34, Size: 0x4] 0x7e6177ba00
	float PositionNegativeX;//[Offset: 0x38, Size: 0x4] 0x7e6177ba80
	float PositionPositiveY;//[Offset: 0x3c, Size: 0x4] 0x7e6177bb00
	float PositionNegativeY;//[Offset: 0x40, Size: 0x4] 0x7e6177bb80
	float PositionPositiveZ;//[Offset: 0x44, Size: 0x4] 0x7e6177bc00
	float PositionNegativeZ;//[Offset: 0x48, Size: 0x4] 0x7e6177bc80
	float RotationAlpha;//[Offset: 0x4c, Size: 0x4] 0x7e6177bd00
	float RotateXAlpha;//[Offset: 0x50, Size: 0x4] 0x7e6177bd80
	float RotateYAlpha;//[Offset: 0x54, Size: 0x4] 0x7e6177be00
	float RotateZAlpha;//[Offset: 0x58, Size: 0x4] 0x7e6177be80
	IKRig_BodyMoverEffector*[] Effectors;//[Offset: 0x60, Size: 0x10] 0x7e6169d260

--------------------------------
Class: IKRig_LimbEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8] 0x7e6177b800
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7e6177b880

--------------------------------
Class: IKRig_LimbSolver.IKRigSolver.Object
	FName RootName;//[Offset: 0x28, Size: 0x8] 0x7e6177d300
	float ReachPrecision;//[Offset: 0x30, Size: 0x4] 0x7e6177d380
	byte HingeRotationAxis;//[Offset: 0x34, Size: 0x1] 0x7e6177d400
	int MaxIterations;//[Offset: 0x38, Size: 0x4] 0x7e6177d480
	bool bEnableLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7e6177d500
	float MinRotationAngle;//[Offset: 0x40, Size: 0x4] 0x7e6177d580
	bool bAveragePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7e6177d600
	float PullDistribution;//[Offset: 0x48, Size: 0x4] 0x7e6177d680
	float ReachStepAlpha;//[Offset: 0x4c, Size: 0x4] 0x7e6177b600
	bool bEnableTwistCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e6177b680
	byte EndBoneForwardAxis;//[Offset: 0x51, Size: 0x1] 0x7e6177b700
	IKRig_LimbEffector* Effector;//[Offset: 0x58, Size: 0x8] 0x7e6177b780

--------------------------------
Class: IKRig_FBIKEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8] 0x7e6177d000
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7e6177d080
	float StrengthAlpha;//[Offset: 0x38, Size: 0x4] 0x7e6177d100
	float PullChainAlpha;//[Offset: 0x3c, Size: 0x4] 0x7e6177d180
	float PinRotation;//[Offset: 0x40, Size: 0x4] 0x7e6177d200
	int IndexInSolver;//[Offset: 0x44, Size: 0x4] 0x7e6177d280

--------------------------------
Class: IKRig_PBIKBoneSettings.Object
	FName bone;//[Offset: 0x28, Size: 0x8] 0x7e6177c900
	float RotationStiffness;//[Offset: 0x30, Size: 0x4] 0x7e6177c980
	float PositionStiffness;//[Offset: 0x34, Size: 0x4] 0x7e6177ca00
	enum X;//[Offset: 0x38, Size: 0x1] 0x7e6169d080
	float MinX;//[Offset: 0x3c, Size: 0x4] 0x7e6177cb00
	float MaxX;//[Offset: 0x40, Size: 0x4] 0x7e6177cb80
	enum Y;//[Offset: 0x44, Size: 0x1] 0x7e6169d120
	float MinY;//[Offset: 0x48, Size: 0x4] 0x7e6177cc80
	float MaxY;//[Offset: 0x4c, Size: 0x4] 0x7e6177cd00
	enum Z;//[Offset: 0x50, Size: 0x1] 0x7e6169d1c0
	float MinZ;//[Offset: 0x54, Size: 0x4] 0x7e6177ce00
	float MaxZ;//[Offset: 0x58, Size: 0x4] 0x7e6177ce80
	bool bUsePreferredAngles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x7e6177cf00
	Vector PreferredAngles;//[Offset: 0x60, Size: 0x18] 0x7e6177cf80

--------------------------------
Class: IKRigPBIKSolver.IKRigSolver.Object
	FName RootBone;//[Offset: 0x28, Size: 0x8] 0x7e6177e580
	int Iterations;//[Offset: 0x30, Size: 0x4] 0x7e6177e600
	float MassMultiplier;//[Offset: 0x34, Size: 0x4] 0x7e6177e680
	float MinMassMultiplier;//[Offset: 0x38, Size: 0x4] 0x7e6177e700
	bool bAllowStretch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7e6177c680
	enum RootBehavior;//[Offset: 0x3d, Size: 0x1] 0x7e6169cea0
	bool bStartSolveFromInputPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1] 0x7e6177c780
	IKRig_FBIKEffector*[] Effectors;//[Offset: 0x40, Size: 0x10] 0x7e6169cf40
	IKRig_PBIKBoneSettings*[] BoneSettings;//[Offset: 0x50, Size: 0x10] 0x7e6169cfe0

--------------------------------
Class: IKRig_PoleSolverEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8] 0x7e6177e400
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x7e6177e480
	float Alpha;//[Offset: 0x38, Size: 0x4] 0x7e6177e500

--------------------------------
Class: IKRig_PoleSolver.IKRigSolver.Object
	FName RootName;//[Offset: 0x28, Size: 0x8] 0x7e6177e280
	FName EndName;//[Offset: 0x30, Size: 0x8] 0x7e6177e300
	IKRig_PoleSolverEffector* Effector;//[Offset: 0x38, Size: 0x8] 0x7e6177e380

--------------------------------
Class: IKRig_SetTransformEffector.Object
	bool bEnablePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e6177e100
	bool bEnableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e6177e180
	float Alpha;//[Offset: 0x2c, Size: 0x4] 0x7e6177e200

--------------------------------
Class: IKRig_SetTransform.IKRigSolver.Object
	FName Goal;//[Offset: 0x28, Size: 0x8] 0x7e6177df80
	FName RootBone;//[Offset: 0x30, Size: 0x8] 0x7e6177e000
	IKRig_SetTransformEffector* Effector;//[Offset: 0x38, Size: 0x8] 0x7e6177e080

--------------------------------
Class: CameraAnimationCameraModifier.CameraModifier.Object
	ActiveCameraAnimationInfo[] ActiveAnimations;//[Offset: 0x48, Size: 0x10] 0x7e6169f740
	uint16 InstanceSerialNumber;//[Offset: 0x58, Size: 0x2] 0x7e6177ec80
	void StopCameraAnimation(out const CameraAnimationHandle Handle, bool bImmediate);// 0x21d758ebd041 0x7e61793180
	void StopAllCameraAnimationsOf(CameraAnimationSequence* Sequence, bool bImmediate);// 0x21d658ebd041 0x7e61793260
	void StopAllCameraAnimations(bool bImmediate);// 0x21d558ebd041 0x7e61793340
	CameraAnimationHandle PlayCameraAnimation(CameraAnimationSequence* Sequence, CameraAnimationParams Params);// 0x21d458ebd041 0x7e61793420
	bool IsCameraAnimationActive(out const CameraAnimationHandle Handle);// 0x21d358ebd041 0x7e61793500
	CameraAnimationCameraModifier* GetCameraAnimationCameraModifierFromPlayerController(const PlayerController* PlayerController);// 0x21d258ebd041 0x7e617935e0
	CameraAnimationCameraModifier* GetCameraAnimationCameraModifierFromID(const Object* WorldContextObject, int ControllerId);// 0x21d158ebd041 0x7e617936c0
	CameraAnimationCameraModifier* GetCameraAnimationCameraModifier(const Object* WorldContextObject, int PlayerIndex);// 0x21d058ebd041 0x7e617937a0

--------------------------------
Class: ActiveCameraAnimationInfo
	CameraAnimationSequence* Sequence;//[Offset: 0x0, Size: 0x8] 0x7e6152c500
	CameraAnimationParams Params;//[Offset: 0x8, Size: 0x40] 0x7e6152c580
	CameraAnimationHandle Handle;//[Offset: 0x48, Size: 0x4] 0x7e6152c600
	CameraAnimationSequencePlayer* Player;//[Offset: 0x50, Size: 0x8] 0x7e6152a580
	CameraAnimationSequenceCameraStandIn* CameraStandIn;//[Offset: 0x58, Size: 0x8] 0x7e6152a600
	float EaseInCurrentTime;//[Offset: 0x60, Size: 0x4] 0x7e6152a680
	float EaseOutCurrentTime;//[Offset: 0x64, Size: 0x4] 0x7e6152a700
	bool bIsEasingIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7e6152a780
	bool bIsEasingOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x7e6152a800

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x7e617a1900
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 0x28] 0x7e6169f380
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 0x28] 0x7e617a1980
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 0x50] 0x7e6167c400

--------------------------------
Class: CameraAnimationParams
	float PlayRate;//[Offset: 0x0, Size: 0x4] 0x7e6152a880
	float Scale;//[Offset: 0x4, Size: 0x4] 0x7e6152a900
	enum EaseInType;//[Offset: 0x8, Size: 0x1] 0x7e84e29de0
	float EaseInDuration;//[Offset: 0xc, Size: 0x4] 0x7e6152aa00
	enum EaseOutType;//[Offset: 0x10, Size: 0x1] 0x7e84e29d40
	float EaseOutDuration;//[Offset: 0x14, Size: 0x4] 0x7e6152ab00
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e6152ab80
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7e6152ac00
	float DurationOverride;//[Offset: 0x1c, Size: 0x4] 0x7e6152ac80
	enum PlaySpace;//[Offset: 0x20, Size: 0x1] 0x7e84e29ca0
	Rotator UserPlaySpaceRot;//[Offset: 0x28, Size: 0x18] 0x7e6152ad80

--------------------------------
Class: CameraAnimationHandle

--------------------------------
Class: CameraAnimationSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x2a8, Size: 0x8] 0x7e617a1200
	MovieSceneSequence* Sequence;//[Offset: 0x2b0, Size: 0x8] 0x7e617a1280
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2b8, Size: 0xe0] 0x7e617a1300

--------------------------------
Class: CameraAnimationSequenceCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 0x4] 0x7e617a1380
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7e617a1400
	float AspectRatio;//[Offset: 0x38, Size: 0x4] 0x7e617a1480
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x6b0] 0x7e617a1500
	float PostProcessBlendWeight;//[Offset: 0x6f0, Size: 0x4] 0x7e617a1580
	CameraFilmbackSettings Filmback;//[Offset: 0x6f4, Size: 0xc] 0x7e617a1600
	CameraLensSettings LensSettings;//[Offset: 0x700, Size: 0x18] 0x7e617a1680
	CameraFocusSettings FocusSettings;//[Offset: 0x718, Size: 0x68] 0x7e617a1700
	float CurrentFocalLength;//[Offset: 0x780, Size: 0x4] 0x7e617a1780
	float CurrentAperture;//[Offset: 0x784, Size: 0x4] 0x7e617a1800
	float CurrentFocusDistance;//[Offset: 0x788, Size: 0x4] 0x7e617a1880

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x7e615bdc00
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x7e615bdc80
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4] 0x7e615bdd00

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4] 0x7e615bd800
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4] 0x7e615bd880
	float MinFStop;//[Offset: 0x8, Size: 0x4] 0x7e615bd900
	float MaxFStop;//[Offset: 0xc, Size: 0x4] 0x7e615bd980
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4] 0x7e615bda00
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4] 0x7e615bda80

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x7e84dd8440
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x7e615bf300
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x48] 0x7e615bf380
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x7e615bf400
	Color DebugFocusPlaneColor;//[Offset: 0x54, Size: 0x4] 0x7e615bf480
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7e615bf500
	float FocusSmoothingInterpSpeed;//[Offset: 0x5c, Size: 0x4] 0x7e615bf580
	float FocusOffset;//[Offset: 0x60, Size: 0x4] 0x7e615bf600

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28] 0x7e615bf680
	Vector RelativeOffset;//[Offset: 0x28, Size: 0x18] 0x7e615bf700
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7e615bf780

--------------------------------
Class: TestCameraShake.CameraShakeBase.Object

--------------------------------
Class: SimpleCameraShakePattern.CameraShakePattern.Object
	float Duration;//[Offset: 0x28, Size: 0x4] 0x7e6177e780
	float BlendInTime;//[Offset: 0x2c, Size: 0x4] 0x7e6177e800
	float BlendOutTime;//[Offset: 0x30, Size: 0x4] 0x7e6177e880

--------------------------------
Class: ConstantCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	Vector LocationOffset;//[Offset: 0x38, Size: 0x18] 0x7e6177ff00
	Rotator RotationOffset;//[Offset: 0x50, Size: 0x18] 0x7e6177ff80

--------------------------------
Class: CompositeCameraShakePattern.CameraShakePattern.Object
	CameraShakePattern*[] ChildPatterns;//[Offset: 0x28, Size: 0x10] 0x7e6169f6a0

--------------------------------
Class: DefaultCameraShakeBase.CameraShakeBase.Object

--------------------------------
Class: PerlinNoiseCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	float LocationAmplitudeMultiplier;//[Offset: 0x34, Size: 0x4] 0x7e617a2080
	float LocationFrequencyMultiplier;//[Offset: 0x38, Size: 0x4] 0x7e617a2100
	PerlinNoiseShaker X;//[Offset: 0x3c, Size: 0x8] 0x7e617a0080
	PerlinNoiseShaker Y;//[Offset: 0x44, Size: 0x8] 0x7e617a0100
	PerlinNoiseShaker Z;//[Offset: 0x4c, Size: 0x8] 0x7e617a0180
	float RotationAmplitudeMultiplier;//[Offset: 0x54, Size: 0x4] 0x7e617a0200
	float RotationFrequencyMultiplier;//[Offset: 0x58, Size: 0x4] 0x7e617a0280
	PerlinNoiseShaker Pitch;//[Offset: 0x5c, Size: 0x8] 0x7e617a0300
	PerlinNoiseShaker Yaw;//[Offset: 0x64, Size: 0x8] 0x7e617a0380
	PerlinNoiseShaker Roll;//[Offset: 0x6c, Size: 0x8] 0x7e617a0400
	PerlinNoiseShaker FOV;//[Offset: 0x74, Size: 0x8] 0x7e617a0480

--------------------------------
Class: PerlinNoiseShaker
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7e6152bf00
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7e6152bf80

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0xe8, Size: 0x4] 0x7e617a0600
	float OscillationBlendInTime;//[Offset: 0xec, Size: 0x4] 0x7e617a0680
	float OscillationBlendOutTime;//[Offset: 0xf0, Size: 0x4] 0x7e617a0700
	ROscillator RotOscillation;//[Offset: 0xf4, Size: 0x24] 0x7e617a0780
	VOscillator LocOscillation;//[Offset: 0x118, Size: 0x24] 0x7e617a0800
	FOscillator FOVOscillation;//[Offset: 0x13c, Size: 0xc] 0x7e617a0880
	float AnimPlayRate;//[Offset: 0x148, Size: 0x4] 0x7e617a0900
	float AnimScale;//[Offset: 0x14c, Size: 0x4] 0x7e617a0980
	float AnimBlendInTime;//[Offset: 0x150, Size: 0x4] 0x7e617a0a00
	float AnimBlendOutTime;//[Offset: 0x154, Size: 0x4] 0x7e617a0a80
	float RandomAnimSegmentDuration;//[Offset: 0x158, Size: 0x4] 0x7e617a0b00
	CameraAnim* Anim;//[Offset: 0x160, Size: 0x8] 0x7e617a0b80
	CameraAnimationSequence* AnimSequence;//[Offset: 0x168, Size: 0x8] 0x7e617a0c00
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x7e617a0c80
	float OscillatorTimeRemaining;//[Offset: 0x174, Size: 0x4] 0x7e617a0d00
	CameraAnimInst* AnimInst;//[Offset: 0x178, Size: 0x8] 0x7e617a0d80
	SequenceCameraShakePattern* SequenceShakePattern;//[Offset: 0x1f8, Size: 0x8] 0x7e617a0e00
	MatineeCameraShake* StartMatineeCameraShakeFromSource(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x21df58ebd041 0x7e61792a80
	MatineeCameraShake* StartMatineeCameraShake(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x21de58ebd041 0x7e61792b60
	void ReceiveStopShake(bool bImmediately);// 0x21dd58ebd041 0x7e61792c40
	void ReceivePlayShake(float Scale);// 0x21dc58ebd041 0x7e61792d20
	bool ReceiveIsFinished();// 0x21db58ebd041 0x7e61792e00
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x21da58ebd041 0x7e61792ee0

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc] 0x7e6152c180
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc] 0x7e6152c200
	FOscillator Roll;//[Offset: 0x18, Size: 0xc] 0x7e6152c280

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7e6152c300
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7e6152c380
	byte InitialOffset;//[Offset: 0x8, Size: 0x1] 0x7e6152c400
	enum Waveform;//[Offset: 0x9, Size: 0x1] 0x7e84e29e80

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc] 0x7e6152c000
	FOscillator Y;//[Offset: 0xc, Size: 0xc] 0x7e6152c080
	FOscillator Z;//[Offset: 0x18, Size: 0xc] 0x7e6152c100

--------------------------------
Class: SequenceCameraShakePattern.CameraShakePattern.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x28, Size: 0x8] 0x7e617a2e00
	float PlayRate;//[Offset: 0x30, Size: 0x4] 0x7e617a2e80
	float Scale;//[Offset: 0x34, Size: 0x4] 0x7e617a2f00
	float BlendInTime;//[Offset: 0x38, Size: 0x4] 0x7e617a2f80
	float BlendOutTime;//[Offset: 0x3c, Size: 0x4] 0x7e617a3000
	float RandomSegmentDuration;//[Offset: 0x40, Size: 0x4] 0x7e617a3080
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7e617a3100
	CameraAnimationSequencePlayer* Player;//[Offset: 0x48, Size: 0x8] 0x7e617a3180
	CameraAnimationSequenceCameraStandIn* CameraStandIn;//[Offset: 0x50, Size: 0x8] 0x7e617a1100

--------------------------------
Class: MatineeCameraShakePattern.CameraShakePattern.Object

--------------------------------
Class: MovieSceneCameraShakeEvaluator.Object

--------------------------------
Class: MovieSceneMatineeCameraShakeEvaluator.MovieSceneCameraShakeEvaluator.Object

--------------------------------
Class: MatineeCameraShakeFunctionLibrary.BlueprintFunctionLibrary.Object
	MatineeCameraShake* Conv_MatineeCameraShake(CameraShakeBase* CameraShake);// 0x21e058ebd041 0x7e617929a0

--------------------------------
Class: WaveOscillatorCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	float LocationAmplitudeMultiplier;//[Offset: 0x34, Size: 0x4] 0x7e617a1b00
	float LocationFrequencyMultiplier;//[Offset: 0x38, Size: 0x4] 0x7e617a1b80
	WaveOscillator X;//[Offset: 0x3c, Size: 0xc] 0x7e617a1c00
	WaveOscillator Y;//[Offset: 0x48, Size: 0xc] 0x7e617a1c80
	WaveOscillator Z;//[Offset: 0x54, Size: 0xc] 0x7e617a1d00
	float RotationAmplitudeMultiplier;//[Offset: 0x60, Size: 0x4] 0x7e617a1d80
	float RotationFrequencyMultiplier;//[Offset: 0x64, Size: 0x4] 0x7e617a1e00
	WaveOscillator Pitch;//[Offset: 0x68, Size: 0xc] 0x7e617a1e80
	WaveOscillator Yaw;//[Offset: 0x74, Size: 0xc] 0x7e617a1f00
	WaveOscillator Roll;//[Offset: 0x80, Size: 0xc] 0x7e617a1f80
	WaveOscillator FOV;//[Offset: 0x8c, Size: 0xc] 0x7e617a2000

--------------------------------
Class: WaveOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7e6152bd80
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7e6152be00
	enum InitialOffsetType;//[Offset: 0x8, Size: 0x1] 0x7e84e29f20

--------------------------------
Class: CameraAnimationSequenceSubsystem.WorldSubsystem.Subsystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x30, Size: 0x8] 0x7e617a1180

--------------------------------
Class: SequenceCameraShakeTestUtil.BlueprintFunctionLibrary.Object
	bool GetPostProcessBlendCache(PlayerController* PlayerController, int PPIndex, out PostProcessSettings OutPPSettings, out float OutPPBlendWeight);// 0x21e358ebd041 0x7e61792700
	MinimalViewInfo GetLastFrameCameraCachePOV(PlayerController* PlayerController);// 0x21e258ebd041 0x7e617927e0
	MinimalViewInfo GetCameraCachePOV(PlayerController* PlayerController);// 0x21e158ebd041 0x7e617928c0

--------------------------------
Class: TemplateSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x288, Size: 0x14] 0x7e617a2480
	TemplateSequencePlayer* SequencePlayer;//[Offset: 0x2a0, Size: 0x8] 0x7e617a2500
	SoftObjectPath TemplateSequence;//[Offset: 0x2a8, Size: 0x18] 0x7e617a2580
	TemplateSequenceBindingOverrideData BindingOverride;//[Offset: 0x2c0, Size: 0xc] 0x7e617a2600
	void SetSequence(TemplateSequence* InSequence);// 0x21e858ebd041 0x7e617922a0
	void SetBinding(Actor* Actor, bool bOverridesDefault);// 0x21e758ebd041 0x7e61792380
	TemplateSequence* LoadSequence();// 0x21e658ebd041 0x7e61792460
	TemplateSequencePlayer* GetSequencePlayer();// 0x21e558ebd041 0x7e61792540
	TemplateSequence* GetSequence();// 0x21e458ebd041 0x7e61792620

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e615a3200
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4] 0x7e615a3280
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7e615a3300
	float StartTime;//[Offset: 0xc, Size: 0x4] 0x7e615a3380
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7e615a3400
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7e615a3480
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7e615a3500
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7e615a3580
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x7e615a3600
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x7e615a3680
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x7e615a3700
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x7e615a3780

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4] 0x7e615a3980

--------------------------------
Class: TemplateSequencePlayer.MovieSceneSequencePlayer.Object
	TemplateSequencePlayer* CreateTemplateSequencePlayer(Object* WorldContextObject, TemplateSequence* TemplateSequence, MovieSceneSequencePlaybackSettings Settings, out TemplateSequenceActor* OutActor);// 0x221558ebd041 0x7e61796ec0

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x238, Size: 0x10] 0x7e617a4600
	delegate OnPlayReverse;//[Offset: 0x248, Size: 0x10] 0x7e617a4680
	delegate OnStop;//[Offset: 0x258, Size: 0x10] 0x7e617a4700
	delegate OnPause;//[Offset: 0x268, Size: 0x10] 0x7e617a4780
	delegate OnFinished;//[Offset: 0x278, Size: 0x10] 0x7e617a4800
	byte Status;//[Offset: 0x288, Size: 0x1] 0x7e617a4880
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x289, Size: 0x1] 0x7e617a4900
	MovieSceneSequence* Sequence;//[Offset: 0x290, Size: 0x8] 0x7e617a4980
	FrameNumber StartTime;//[Offset: 0x298, Size: 0x4] 0x7e617a4a00
	int DurationFrames;//[Offset: 0x29c, Size: 0x4] 0x7e617a4a80
	float DurationSubFrames;//[Offset: 0x2a0, Size: 0x4] 0x7e617a4b00
	int CurrentNumLoops;//[Offset: 0x2a4, Size: 0x4] 0x7e617a4b80
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2a8, Size: 0x14] 0x7e617a4c00
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2c0, Size: 0xe0] 0x7e617a4c80
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x420, Size: 0x10] 0x7e617a4d00
	interface class None* PlaybackClient;//[Offset: 0x430, Size: 0x10] 0x7e617a4d80
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x440, Size: 0x8] 0x7e617a4e00
	void StopAtCurrentTime();// 0x221458ebd041 0x7e61796fa0
	void Stop();// 0x221358ebd041 0x7e61797080
	void SetTimeRange(float StartTime, float Duration);// 0x221258ebd041 0x7e61797160
	void SetPlayRate(float PlayRate);// 0x221158ebd041 0x7e61797240
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0x225258ebd041 0x7e61797320
	void SetFrameRate(FrameRate FrameRate);// 0x220f58ebd041 0x7e61793a40
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0x220e58ebd041 0x7e61793b20
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x220d58ebd041 0x7e61793c00
	void ScrubToSeconds(float TimeInSeconds);// 0x220c58ebd041 0x7e61793ce0
	bool ScrubToMarkedFrame(FString InLabel);// 0x220b58ebd041 0x7e61793dc0
	void ScrubToFrame(FrameTime NewPosition);// 0x220a58ebd041 0x7e61793ea0
	void Scrub();// 0x220958ebd041 0x7e61793f80
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x220858ebd041 0x7e61794060
	void RPC_OnFinishPlaybackEvent(FrameTime StoppedTime);// 0x220758ebd041 0x7e61794140
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x220658ebd041 0x7e61794220
	void RestoreState();// 0x220558ebd041 0x7e61794300
	void PlayToSeconds(float TimeInSeconds);// 0x220458ebd041 0x7e617943e0
	bool PlayToMarkedFrame(FString InLabel);// 0x220358ebd041 0x7e617944c0
	void PlayToFrame(FrameTime NewPosition);// 0x220258ebd041 0x7e617945a0
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams, MovieSceneSequencePlayToParams PlayToParams);// 0x220158ebd041 0x7e61794680
	void PlayReverse();// 0x220058ebd041 0x7e61794760
	void PlayLooping(int NumLoops);// 0x21ff58ebd041 0x7e61794840
	void Play();// 0x21fe58ebd041 0x7e61794920
	void Pause();// 0x21fd58ebd041 0x7e61794a00
	void JumpToSeconds(float TimeInSeconds);// 0x21fc58ebd041 0x7e61794ae0
	bool JumpToMarkedFrame(FString InLabel);// 0x21fb58ebd041 0x7e61794bc0
	void JumpToFrame(FrameTime NewPosition);// 0x21fa58ebd041 0x7e61794ca0
	bool IsReversed();// 0x21f958ebd041 0x7e61794d80
	bool IsPlaying();// 0x21f858ebd041 0x7e61794e60
	bool IsPaused();// 0x21f758ebd041 0x7e61794f40
	void GoToEndAndStop();// 0x21f658ebd041 0x7e61795020
	QualifiedFrameTime GetStartTime();// 0x21f558ebd041 0x7e61795100
	FString GetSequenceName(bool bAddClientInfo);// 0x21f458ebd041 0x7e617951e0
	MovieSceneSequence* GetSequence();// 0x21f358ebd041 0x7e617952c0
	float GetPlayRate();// 0x21f258ebd041 0x7e617953a0
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x21f158ebd041 0x7e61795480
	FrameRate GetFrameRate();// 0x21f058ebd041 0x7e61795560
	int GetFrameDuration();// 0x223158ebd041 0x7e61795640
	QualifiedFrameTime GetEndTime();// 0x21ee58ebd041 0x7e61791d60
	QualifiedFrameTime GetDuration();// 0x21ed58ebd041 0x7e61791e40
	bool GetDisableCameraCuts();// 0x21ec58ebd041 0x7e61791f20
	QualifiedFrameTime GetCurrentTime();// 0x21eb58ebd041 0x7e61792000
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x21ea58ebd041 0x7e617920e0
	void ChangePlaybackDirection();// 0x21e958ebd041 0x7e617921c0

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 0x8] 0x7e615a5000
	float Time;//[Offset: 0x8, Size: 0x4] 0x7e615a5080
	FString MarkedFrame;//[Offset: 0x10, Size: 0x10] 0x7e615a5100
	enum PositionType;//[Offset: 0x20, Size: 0x1] 0x7e84ddd9e0
	enum UpdateMethod;//[Offset: 0x21, Size: 0x1] 0x7e84ddd940
	bool bHasJumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1] 0x7e615a5280

--------------------------------
Class: MovieSceneSequencePlayToParams
	bool bExclusive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615a4f80

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8] 0x7e615a3800
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1] 0x7e615a3880
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4] 0x7e615a3900

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	MovieSceneSequenceActorPointers[] SequenceActors;//[Offset: 0x28, Size: 0x10] 0x7e6189a2e0
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8] 0x7e61904c00

--------------------------------
Class: MovieSceneSequenceActorPointers
	Actor* SequenceActor;//[Offset: 0x0, Size: 0x8] 0x7e615a4e80
	interface class None* SequenceActorInterface;//[Offset: 0x8, Size: 0x10] 0x7e615a4f00

--------------------------------
Class: TemplateSequenceBindingOverrideData
	Object* Object;//[Offset: 0x0, Size: 0x8] 0x7e6152bc80
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7e6152bd00

--------------------------------
Class: TemplateSequenceSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	TemplateSectionPropertyScale[] PropertyScales;//[Offset: 0x120, Size: 0x10] 0x7e6169f100

--------------------------------
Class: TemplateSectionPropertyScale
	Guid ObjectBinding;//[Offset: 0x0, Size: 0x10] 0x7e6152b900
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x10, Size: 0x14] 0x7e6152bb00
	enum PropertyScaleType;//[Offset: 0x24, Size: 0x4] 0x7e84e29fc0
	MovieSceneFloatChannel FloatChannel;//[Offset: 0x28, Size: 0xe8] 0x7e6152bc00

--------------------------------
Class: MovieSceneEntitySystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x28, Size: 0x8] 0x7e617a5f80

--------------------------------
Class: TemplateSequenceSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: TemplateSequencePropertyScalingInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: TemplateSequencePropertyScalingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7e6169f060

--------------------------------
Class: TemplateSequenceTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: OodleNetworkTrainerCommandlet.Commandlet.Object
	bool bCompressionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x7e617a5b00
	bool bWriteV5Dictionaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x7e617a5b80
	int HashTableSize;//[Offset: 0x7c, Size: 0x4] 0x7e617a5c00
	int DictionarySize;//[Offset: 0x80, Size: 0x4] 0x7e617a5c80
	int DictionaryTrials;//[Offset: 0x84, Size: 0x4] 0x7e617a5d00
	int TrialRandomness;//[Offset: 0x88, Size: 0x4] 0x7e617a5d80
	int TrialGenerations;//[Offset: 0x8c, Size: 0x4] 0x7e617a5e00
	bool bNoTrials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7e617a5e80

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object
	AnimSequence* AnimationToPlay;//[Offset: 0x348, Size: 0x8] 0x7e617a5800
	float PermutationTimeOffset;//[Offset: 0x350, Size: 0x4] 0x7e617a5880
	float PlayRate;//[Offset: 0x354, Size: 0x4] 0x7e617a5900
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1] 0x7e617a5980
	AnimSharingInstance* Instance;//[Offset: 0x360, Size: 0x8] 0x7e617a5a00
	void GetInstancedActors(out Actor*[] Actors);// 0x221858ebd041 0x7e61796c20

--------------------------------
Class: AnimSharingInstance.Object
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 0x10] 0x7e6169ee80
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0x88, Size: 0x8] 0x7e617a7300
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xc8, Size: 0x10] 0x7e6169ef20
	Enum* StateEnum;//[Offset: 0xe8, Size: 0x8] 0x7e617a5300
	Actor* SharingActor;//[Offset: 0xf0, Size: 0x8] 0x7e617a5380

--------------------------------
Class: AnimationSharingStateProcessor.Object
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 0x28] 0x7e617a6900
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0x221e58ebd041 0x7e617966e0
	Enum* GetAnimationStateEnum();// 0x221d58ebd041 0x7e617967c0

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object
	SkeletalMeshComponent* FromComponent;//[Offset: 0x348, Size: 0x8] 0x7e617a5600
	SkeletalMeshComponent* ToComponent;//[Offset: 0x350, Size: 0x8] 0x7e617a5680
	float BlendTime;//[Offset: 0x358, Size: 0x4] 0x7e617a5700
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1] 0x7e617a5780

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x348, Size: 0x8] 0x7e617a5400
	AnimSequence* AdditiveAnimation;//[Offset: 0x350, Size: 0x8] 0x7e617a5480
	float Alpha;//[Offset: 0x358, Size: 0x4] 0x7e617a5500
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1] 0x7e617a5580

--------------------------------
Class: AnimationSharingManager.Object
	Skeleton*[] Skeletons;//[Offset: 0x28, Size: 0x10] 0x7e6169ed40
	AnimSharingInstance*[] PerSkeletonData;//[Offset: 0x38, Size: 0x10] 0x7e6169ede0
	void RegisterActorWithSkeletonBP(Actor* InActor, const Skeleton* SharingSkeleton);// 0x221c58ebd041 0x7e617968a0
	AnimationSharingManager* GetAnimationSharingManager(Object* WorldContextObject);// 0x221b58ebd041 0x7e61796980
	bool CreateAnimationSharingManager(Object* WorldContextObject, const AnimationSharingSetup* Setup);// 0x221a58ebd041 0x7e61796a60
	bool AnimationSharingEnabled();// 0x221958ebd041 0x7e61796b40

--------------------------------
Class: AnimationSharingSetup.Object
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 0x10] 0x7e6169eca0
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 0x10] 0x7e617a6d00

--------------------------------
Class: PerSkeletonAnimationSharingSetup
	Skeleton* Skeleton;//[Offset: 0x0, Size: 0x8] 0x7e6152d080
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 0x8] 0x7e6152d100
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x10, Size: 0x8] 0x7e84e2a380
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x18, Size: 0x8] 0x7e84e2a2e0
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x20, Size: 0x8] 0x7e84e2a240
	AnimationStateEntry[] AnimationStates;//[Offset: 0x28, Size: 0x10] 0x7e84e2a1a0

--------------------------------
Class: AnimationStateEntry
	byte State;//[Offset: 0x0, Size: 0x1] 0x7e6152d200
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 0x10] 0x7e84e2a100
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e6152d300
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7e6152d380
	float BlendTime;//[Offset: 0x1c, Size: 0x4] 0x7e6152d400
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7e6152d480
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x7e6152d500
	byte NextState;//[Offset: 0x22, Size: 0x1] 0x7e6152d580
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 0x4] 0x7e6152d600
	float WiggleTimePercentage;//[Offset: 0x28, Size: 0x4] 0x7e6152d680
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7e6152b600

--------------------------------
Class: AnimationSetup
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8] 0x7e6152b680
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x8, Size: 0x8] 0x7e84e2a060
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x10, Size: 0x4] 0x7e6152b780
	PerPlatformBool Enabled;//[Offset: 0x14, Size: 0x1] 0x7e6152b880

--------------------------------
Class: AnimationSharingScalability
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 0x1] 0x7e6152ce00
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 0x4] 0x7e6152ce80
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 0x4] 0x7e6152cf00
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 0x4] 0x7e6152d000

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 0x18] 0x7e617a6880

--------------------------------
Class: MyPluginObject.Object
	MyPluginStruct MyStruct;//[Offset: 0x28, Size: 0x10] 0x7e617a6800

--------------------------------
Class: MyPluginStruct
	FString TestString;//[Offset: 0x0, Size: 0x10] 0x7e6152cd80

--------------------------------
Class: AudioCurveSourceComponent.AudioComponent.SceneComponent.ActorComponent.Object
	FName CurveSourceBindingName;//[Offset: 0xb28, Size: 0x8] 0x7e617ab300
	float CurveSyncOffset;//[Offset: 0xb30, Size: 0x4] 0x7e617ab380

--------------------------------
Class: DatasmithObjectTemplate.Object

--------------------------------
Class: DatasmithActorTemplate.DatasmithObjectTemplate.Object
	<FName> Layers;//[Offset: 0x30, Size: 0x50] 0x7e6169fec0
	<FName> Tags;//[Offset: 0x80, Size: 0x50] 0x7e6169ff60

--------------------------------
Class: DatasmithAdditionalData.Object

--------------------------------
Class: DatasmithAreaLightActor.Actor.Object
	byte Mobility;//[Offset: 0x278, Size: 0x1] 0x7e617aa980
	enum LightType;//[Offset: 0x279, Size: 0x1] 0x7e6169fce0
	enum LightShape;//[Offset: 0x27a, Size: 0x1] 0x7e6169fd80
	Vector2D Dimensions;//[Offset: 0x280, Size: 0x10] 0x7e617aab00
	float Intensity;//[Offset: 0x290, Size: 0x4] 0x7e617aab80
	enum IntensityUnits;//[Offset: 0x294, Size: 0x1] 0x7e6169fe20
	LinearColor Color;//[Offset: 0x298, Size: 0x10] 0x7e617aac80
	float Temperature;//[Offset: 0x2a8, Size: 0x4] 0x7e617aad00
	TextureLightProfile* IESTexture;//[Offset: 0x2b0, Size: 0x8] 0x7e617aad80
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1] 0x7e617aae00
	float IESBrightnessScale;//[Offset: 0x2bc, Size: 0x4] 0x7e617aae80
	Rotator Rotation;//[Offset: 0x2c0, Size: 0x18] 0x7e617aaf00
	float SourceRadius;//[Offset: 0x2d8, Size: 0x4] 0x7e617aaf80
	float SourceLength;//[Offset: 0x2dc, Size: 0x4] 0x7e617ab000
	float AttenuationRadius;//[Offset: 0x2e0, Size: 0x4] 0x7e617ab080
	float SpotlightInnerAngle;//[Offset: 0x2e4, Size: 0x4] 0x7e617ab100
	float SpotlightOuterAngle;//[Offset: 0x2e8, Size: 0x4] 0x7e617ab180

--------------------------------
Class: DatasmithAreaLightActorTemplate.DatasmithObjectTemplate.Object
	enum LightType;//[Offset: 0x29, Size: 0x1] 0x7e6169fb00
	enum LightShape;//[Offset: 0x2a, Size: 0x1] 0x7e6169fba0
	Vector2D Dimensions;//[Offset: 0x30, Size: 0x10] 0x7e617ac480
	LinearColor Color;//[Offset: 0x40, Size: 0x10] 0x7e617ac500
	float Intensity;//[Offset: 0x50, Size: 0x4] 0x7e617ac580
	enum IntensityUnits;//[Offset: 0x54, Size: 0x1] 0x7e6169fc40
	float Temperature;//[Offset: 0x58, Size: 0x4] 0x7e617aa580
	TextureLightProfile* IESTexture;//[Offset: 0x60, Size: 0x28] 0x7e617aa600
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7e617aa680
	float IESBrightnessScale;//[Offset: 0x8c, Size: 0x4] 0x7e617aa700
	Rotator Rotation;//[Offset: 0x90, Size: 0x18] 0x7e617aa780
	float SourceRadius;//[Offset: 0xa8, Size: 0x4] 0x7e617aa800
	float SourceLength;//[Offset: 0xac, Size: 0x4] 0x7e617aa880
	float AttenuationRadius;//[Offset: 0xb0, Size: 0x4] 0x7e617aa900

--------------------------------
Class: DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshCADImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithTranslatedSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithCADImportSceneData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithMDLSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithGLTFSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	FString Generator;//[Offset: 0x28, Size: 0x10] 0x7e617ac100
	float Version;//[Offset: 0x38, Size: 0x4] 0x7e617ac180
	FString Author;//[Offset: 0x40, Size: 0x10] 0x7e617ac200
	FString License;//[Offset: 0x50, Size: 0x10] 0x7e617ac280
	FString Source;//[Offset: 0x60, Size: 0x10] 0x7e617ac300

--------------------------------
Class: DatasmithStaticMeshGLTFImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceMeshName;//[Offset: 0x28, Size: 0x10] 0x7e617ac080

--------------------------------
Class: DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e617abe80
	FString TexturesDir;//[Offset: 0x30, Size: 0x10] 0x7e617abf00
	byte IntermediateSerialization;//[Offset: 0x40, Size: 0x1] 0x7e617abf80
	bool bColorizeMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7e617ac000

--------------------------------
Class: DatasmithDeltaGenAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithDeltaGenSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7e617ab980
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x7e617aba00
	bool bRemoveInvisibleNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7e617aba80
	bool bSimplifyNodeHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x7e617abb00
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1] 0x7e617abb80
	FString VarPath;//[Offset: 0x48, Size: 0x10] 0x7e617abc00
	bool bImportPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7e617abc80
	FString PosPath;//[Offset: 0x60, Size: 0x10] 0x7e617abd00
	bool bImportTml;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7e617abd80
	FString TmlPath;//[Offset: 0x78, Size: 0x10] 0x7e617abe00

--------------------------------
Class: DatasmithVREDAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithVREDSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7e617ad500
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x7e617ad580
	bool bImportMats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7e617ad600
	FString MatsPath;//[Offset: 0x48, Size: 0x10] 0x7e617ad680
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7e617ab600
	bool bCleanVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7e617ab680
	FString VarPath;//[Offset: 0x60, Size: 0x10] 0x7e617ab700
	bool bImportLightInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7e617ab780
	FString LightInfoPath;//[Offset: 0x78, Size: 0x10] 0x7e617ab800
	bool bImportClipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7e617ab880
	FString ClipInfoPath;//[Offset: 0x90, Size: 0x10] 0x7e617ab900

--------------------------------
Class: DatasmithIFCSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshIFCImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceGlobalId;//[Offset: 0x28, Size: 0x10] 0x7e617ad480

--------------------------------
Class: DatasmithAssetUserData.AssetUserData.Object
	<FName,FString> MetaData;//[Offset: 0x28, Size: 0x50] 0x7e6167c340

--------------------------------
Class: DatasmithCineCameraActorTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraLookatTrackingSettingsTemplate LookatTrackingSettings;//[Offset: 0x30, Size: 0x30] 0x7e617ad300

--------------------------------
Class: DatasmithCameraLookatTrackingSettingsTemplate
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e6152cc00
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e6152cc80
	Actor* ActorToTrack;//[Offset: 0x8, Size: 0x28] 0x7e6152cd00

--------------------------------
Class: DatasmithCineCameraComponentTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraFilmbackSettingsTemplate FilmbackSettings;//[Offset: 0x2c, Size: 0x8] 0x7e617ad000
	DatasmithCameraLensSettingsTemplate LensSettings;//[Offset: 0x34, Size: 0x4] 0x7e617ad080
	DatasmithCameraFocusSettingsTemplate FocusSettings;//[Offset: 0x38, Size: 0x8] 0x7e617ad100
	float CurrentFocalLength;//[Offset: 0x40, Size: 0x4] 0x7e617ad180
	float CurrentAperture;//[Offset: 0x44, Size: 0x4] 0x7e617ad200
	DatasmithPostProcessSettingsTemplate PostProcessSettings;//[Offset: 0x50, Size: 0x40] 0x7e617ad280

--------------------------------
Class: DatasmithCameraFilmbackSettingsTemplate
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x7e6152cb00
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x7e6152cb80

--------------------------------
Class: DatasmithCameraLensSettingsTemplate
	float MaxFStop;//[Offset: 0x0, Size: 0x4] 0x7e6152ca80

--------------------------------
Class: DatasmithCameraFocusSettingsTemplate
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x7e84e2a420
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x7e6152ca00

--------------------------------
Class: DatasmithPostProcessSettingsTemplate
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e6152e380
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e6152e400
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e6152e480
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e6152e500
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e6152e580
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7e6152e600
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7e6152e680
	float WhiteTemp;//[Offset: 0x4, Size: 0x4] 0x7e6152e700
	float VignetteIntensity;//[Offset: 0x8, Size: 0x4] 0x7e6152c680
	Vector4 ColorSaturation;//[Offset: 0x10, Size: 0x20] 0x7e6152c700
	byte AutoExposureMethod;//[Offset: 0x30, Size: 0x1] 0x7e6152c780
	float CameraISO;//[Offset: 0x34, Size: 0x4] 0x7e6152c800
	float CameraShutterSpeed;//[Offset: 0x38, Size: 0x4] 0x7e6152c880
	float DepthOfFieldFstop;//[Offset: 0x3c, Size: 0x4] 0x7e6152c900

--------------------------------
Class: DatasmithContentBlueprintLibrary.BlueprintFunctionLibrary.Object
	FString GetDatasmithUserDataValueForKey(Object* Object, FName Key);// 0x224458ebd041 0x7e61797f60
	void GetDatasmithUserDataKeysAndValuesForValue(Object* Object, FString StringToMatch, out FName[] OutKeys, out FString[] OutValues);// 0x224358ebd041 0x7e61798040
	DatasmithAssetUserData* GetDatasmithUserData(Object* Object);// 0x224258ebd041 0x7e61798120

--------------------------------
Class: DatasmithCustomActionBase.Object

--------------------------------
Class: DatasmithDecalComponentTemplate.DatasmithObjectTemplate.Object
	int SortOrder;//[Offset: 0x2c, Size: 0x4] 0x7e617aca00
	Vector DecalSize;//[Offset: 0x30, Size: 0x18] 0x7e617aca80
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8] 0x7e617acb00

--------------------------------
Class: DatasmithImportedSequencesActor.Actor.Object
	LevelSequence*[] ImportedSequences;//[Offset: 0x278, Size: 0x10] 0x7e6169f920
	void PlayLevelSequence(LevelSequence* SequenceToPlay);// 0x224558ebd041 0x7e61797e80

--------------------------------
Class: DatasmithOptionsBase.Object

--------------------------------
Class: DatasmithCommonTessellationOptions.DatasmithOptionsBase.Object
	DatasmithTessellationOptions Options;//[Offset: 0x28, Size: 0x10] 0x7e617ac880

--------------------------------
Class: DatasmithTessellationOptions
	float ChordTolerance;//[Offset: 0x0, Size: 0x4] 0x7e6152da00
	float MaxEdgeLength;//[Offset: 0x4, Size: 0x4] 0x7e6152da80
	float NormalTolerance;//[Offset: 0x8, Size: 0x4] 0x7e6152db00
	enum StitchingTechnique;//[Offset: 0xc, Size: 0x1] 0x7e84e27d60

--------------------------------
Class: DatasmithImportOptions.DatasmithOptionsBase.Object
	enum SearchPackagePolicy;//[Offset: 0x28, Size: 0x1] 0x7e617b1140
	enum MaterialConflictPolicy;//[Offset: 0x29, Size: 0x1] 0x7e617b11e0
	enum TextureConflictPolicy;//[Offset: 0x2a, Size: 0x1] 0x7e617b1280
	enum StaticMeshActorImportPolicy;//[Offset: 0x2b, Size: 0x1] 0x7e617b1320
	enum LightImportPolicy;//[Offset: 0x2c, Size: 0x1] 0x7e617b13c0
	enum CameraImportPolicy;//[Offset: 0x2d, Size: 0x1] 0x7e617b1460
	enum OtherActorImportPolicy;//[Offset: 0x2e, Size: 0x1] 0x7e6169f7e0
	enum MaterialQuality;//[Offset: 0x2f, Size: 0x1] 0x7e6169f880
	DatasmithImportBaseOptions BaseOptions;//[Offset: 0x30, Size: 0x14] 0x7e617ae700
	DatasmithReimportOptions ReimportOptions;//[Offset: 0x44, Size: 0x2] 0x7e617ac680
	FString Filename;//[Offset: 0x48, Size: 0x10] 0x7e617ac700
	FString FilePath;//[Offset: 0x58, Size: 0x10] 0x7e617ac780
	FString SourceUri;//[Offset: 0x68, Size: 0x10] 0x7e617ac800

--------------------------------
Class: DatasmithImportBaseOptions
	enum SceneHandling;//[Offset: 0x0, Size: 0x1] 0x7e84e27cc0
	bool bIncludeGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e6152dc80
	bool bIncludeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e6152dd00
	bool bIncludeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7e6152dd80
	bool bIncludeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7e6152de00
	bool bIncludeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7e6152de80
	DatasmithAssetImportOptions AssetOptions;//[Offset: 0x8, Size: 0x8] 0x7e6152df00
	DatasmithStaticMeshImportOptions StaticMeshOptions;//[Offset: 0x10, Size: 0x4] 0x7e6152df80

--------------------------------
Class: DatasmithAssetImportOptions
	FName PackagePath;//[Offset: 0x0, Size: 0x8] 0x7e6152e300

--------------------------------
Class: DatasmithStaticMeshImportOptions
	enum MinLightmapResolution;//[Offset: 0x0, Size: 0x1] 0x7e84e27c20
	enum MaxLightmapResolution;//[Offset: 0x1, Size: 0x1] 0x7e84e2a4c0
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e6152e200
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7e6152e280

--------------------------------
Class: DatasmithReimportOptions
	bool bUpdateActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e6152e000
	bool bRespawnDeletedActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e6152e080

--------------------------------
Class: DatasmithLandscapeTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* LandscapeMaterial;//[Offset: 0x30, Size: 0x8] 0x7e617ae200
	int StaticLightingLOD;//[Offset: 0x38, Size: 0x4] 0x7e617ae280

--------------------------------
Class: DatasmithLightComponentTemplate.DatasmithObjectTemplate.Object
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7e617add00
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x7e617add80
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x7e617ade00
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x7e617ade80
	float Intensity;//[Offset: 0x2c, Size: 0x4] 0x7e617adf00
	float Temperature;//[Offset: 0x30, Size: 0x4] 0x7e617adf80
	float IESBrightnessScale;//[Offset: 0x34, Size: 0x4] 0x7e617ae000
	LinearColor LightColor;//[Offset: 0x38, Size: 0x10] 0x7e617ae080
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x48, Size: 0x8] 0x7e617ae100
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x8] 0x7e617ae180

--------------------------------
Class: DatasmithMaterialInstanceTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* ParentMaterial;//[Offset: 0x30, Size: 0x28] 0x7e617ad900
	<FName,float> ScalarParameterValues;//[Offset: 0x58, Size: 0x50] 0x7e6167c100
	<FName,LinearColor> VectorParameterValues;//[Offset: 0xa8, Size: 0x50] 0x7e6167c1c0
	<FName,Texture*> TextureParameterValues;//[Offset: 0xf8, Size: 0x50] 0x7e6167c280
	DatasmithStaticParameterSetTemplate StaticParameters;//[Offset: 0x148, Size: 0x50] 0x7e617adc80

--------------------------------
Class: DatasmithStaticParameterSetTemplate
	<FName,bool> StaticSwitchParameters;//[Offset: 0x0, Size: 0x50] 0x7e6150f640

--------------------------------
Class: DatasmithPointLightComponentTemplate.DatasmithObjectTemplate.Object
	enum IntensityUnits;//[Offset: 0x29, Size: 0x1] 0x7e617b10a0
	float SourceRadius;//[Offset: 0x2c, Size: 0x4] 0x7e617ad780
	float SourceLength;//[Offset: 0x30, Size: 0x4] 0x7e617ad800
	float AttenuationRadius;//[Offset: 0x34, Size: 0x4] 0x7e617ad880

--------------------------------
Class: DatasmithPostProcessVolumeTemplate.DatasmithObjectTemplate.Object
	DatasmithPostProcessSettingsTemplate Settings;//[Offset: 0x30, Size: 0x40] 0x7e617af680
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7e617af700
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x7e617af780

--------------------------------
Class: DatasmithScene.Object

--------------------------------
Class: DatasmithSceneActor.Actor.Object
	DatasmithScene* Scene;//[Offset: 0x278, Size: 0x8] 0x7e617af500
	<FName,Actor*> RelatedActors;//[Offset: 0x280, Size: 0x50] 0x7e6167c040

--------------------------------
Class: DatasmithSceneComponentTemplate.DatasmithObjectTemplate.Object
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x60] 0x7e617af280
	byte Mobility;//[Offset: 0x90, Size: 0x1] 0x7e617af300
	SceneComponent* AttachParent;//[Offset: 0x98, Size: 0x28] 0x7e617af380
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7e617af400
	<FName> Tags;//[Offset: 0xc8, Size: 0x50] 0x7e617b1000

--------------------------------
Class: DatasmithSkyLightComponentTemplate.DatasmithObjectTemplate.Object
	byte SourceType;//[Offset: 0x29, Size: 0x1] 0x7e617af100
	int CubemapResolution;//[Offset: 0x2c, Size: 0x4] 0x7e617af180
	TextureCube* Cubemap;//[Offset: 0x30, Size: 0x8] 0x7e617af200

--------------------------------
Class: DatasmithSpotLightComponentTemplate.DatasmithObjectTemplate.Object
	float InnerConeAngle;//[Offset: 0x2c, Size: 0x4] 0x7e617af000
	float OuterConeAngle;//[Offset: 0x30, Size: 0x4] 0x7e617af080

--------------------------------
Class: DatasmithStaticMeshComponentTemplate.DatasmithObjectTemplate.Object
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 0x8] 0x7e617aef00
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x38, Size: 0x10] 0x7e617b0f60

--------------------------------
Class: DatasmithStaticMeshTemplate.DatasmithObjectTemplate.Object
	DatasmithMeshSectionInfoMapTemplate SectionInfoMap;//[Offset: 0x30, Size: 0x50] 0x7e617aec80
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 0x4] 0x7e617aed00
	int LightMapResolution;//[Offset: 0x84, Size: 0x4] 0x7e617aed80
	DatasmithMeshBuildSettingsTemplate[] BuildSettings;//[Offset: 0x88, Size: 0x10] 0x7e617b0e20
	DatasmithStaticMaterialTemplate[] StaticMaterials;//[Offset: 0x98, Size: 0x10] 0x7e617b0ec0

--------------------------------
Class: DatasmithMeshSectionInfoMapTemplate
	<uint32,DatasmithMeshSectionInfoTemplate> Map;//[Offset: 0x0, Size: 0x50] 0x7e6150f280

--------------------------------
Class: DatasmithMeshSectionInfoTemplate
	int MaterialIndex;//[Offset: 0x0, Size: 0x4] 0x7e6152f300

--------------------------------
Class: DatasmithMeshBuildSettingsTemplate
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e6152f480
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e6152f500
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e6152f580
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e6152f600
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e6152f680
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7e6152f700
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7e6152f780
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4] 0x7e6152d700
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4] 0x7e6152d780
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4] 0x7e6152d800

--------------------------------
Class: DatasmithStaticMaterialTemplate
	FName MaterialSlotName;//[Offset: 0x0, Size: 0x8] 0x7e6152f380
	MaterialInterface* MaterialInterface;//[Offset: 0x8, Size: 0x8] 0x7e6152f400

--------------------------------
Class: LevelVariantSets.Object
	ClassPtrProperty DirectorClass;//[Size: 0x8] 0x7e617b0ce0
	VariantSet*[] VariantSets;//[Offset: 0x30, Size: 0x10] 0x7e617b0d80
	VariantSet* GetVariantSetByName(FString VariantSetName);// 0x224858ebd041 0x7e61797be0
	VariantSet* GetVariantSet(int VariantSetIndex);// 0x224758ebd041 0x7e61797cc0
	int GetNumVariantSets();// 0x224658ebd041 0x7e61797da0

--------------------------------
Class: VariantSet.Object
	FText DisplayText;//[Offset: 0x28, Size: 0x18] 0x7e617c3180
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7e617c1100
	Variant*[] Variants;//[Offset: 0x60, Size: 0x10] 0x7e617b0420
	Texture2D* Thumbnail;//[Offset: 0x70, Size: 0x8] 0x7e617c1200
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x226f58ebd041 0x7e61799380
	void SetThumbnailFromFile(FString FilePath);// 0x226e58ebd041 0x7e61799460
	void SetThumbnailFromEditorViewport();// 0x226d58ebd041 0x7e61799540
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x226c58ebd041 0x7e61799620
	void SetDisplayText(out const FText NewDisplayText);// 0x226b58ebd041 0x7e61799700
	Variant* GetVariantByName(FString VariantName);// 0x226a58ebd041 0x7e617997e0
	Variant* GetVariant(int VariantIndex);// 0x226958ebd041 0x7e617998c0
	Texture2D* GetThumbnail();// 0x226858ebd041 0x7e617999a0
	LevelVariantSets* GetParent();// 0x226758ebd041 0x7e61799a80
	int GetNumVariants();// 0x226658ebd041 0x7e61799b60
	FText GetDisplayText();// 0x226558ebd041 0x7e61799c40

--------------------------------
Class: Variant.Object
	VariantDependency[] Dependencies;//[Offset: 0x28, Size: 0x10] 0x7e617b0600
	FText DisplayText;//[Offset: 0x38, Size: 0x18] 0x7e617c1d80
	VariantObjectBinding*[] ObjectBindings;//[Offset: 0x68, Size: 0x10] 0x7e617b06a0
	Texture2D* Thumbnail;//[Offset: 0x78, Size: 0x8] 0x7e617c1e80
	void SwitchOn();// 0x226458ebd041 0x7e61799d20
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x226358ebd041 0x7e61799e00
	void SetThumbnailFromFile(FString FilePath);// 0x226258ebd041 0x7e61799ee0
	void SetThumbnailFromEditorViewport();// 0x226158ebd041 0x7e61799fc0
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x226058ebd041 0x7e6179a0a0
	void SetDisplayText(out const FText NewDisplayText);// 0x225f58ebd041 0x7e6179a180
	void SetDependency(int Index, out VariantDependency Dependency);// 0x225e58ebd041 0x7e6179a260
	bool IsActive();// 0x225d58ebd041 0x7e6179a340
	Texture2D* GetThumbnail();// 0x225c58ebd041 0x7e6179a420
	VariantSet* GetParent();// 0x225b58ebd041 0x7e6179a500
	int GetNumDependencies();// 0x225a58ebd041 0x7e6179a5e0
	int GetNumActors();// 0x225958ebd041 0x7e6179a6c0
	FText GetDisplayText();// 0x225858ebd041 0x7e6179a7a0
	Variant*[] GetDependents(LevelVariantSets* LevelVariantSets, bool bOnlyEnabledDependencies);// 0x225758ebd041 0x7e6179a880
	VariantDependency GetDependency(int Index);// 0x225658ebd041 0x7e6179a960
	Actor* GetActor(int ActorIndex);// 0x225558ebd041 0x7e6179aa40
	void DeleteDependency(int Index);// 0x225458ebd041 0x7e6179ab20
	int AddDependency(out VariantDependency Dependency);// 0x225358ebd041 0x7e6179ac00

--------------------------------
Class: VariantDependency
	VariantSet* VariantSet;//[Offset: 0x0, Size: 0x28] 0x7e6152ee00
	Variant* Variant;//[Offset: 0x28, Size: 0x28] 0x7e6152ee80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e6152ef00

--------------------------------
Class: VariantObjectBinding.Object
	FString CachedActorLabel;//[Offset: 0x28, Size: 0x10] 0x7e617c1a80
	SoftObjectPath ObjectPtr;//[Offset: 0x38, Size: 0x18] 0x7e617c1b00
	Object* LazyObjectPtr;//[Offset: 0x50, Size: 0x1c] 0x7e617c1b80
	PropertyValue*[] CapturedProperties;//[Offset: 0x70, Size: 0x10] 0x7e617b04c0
	FunctionCaller[] FunctionCallers;//[Offset: 0x80, Size: 0x10] 0x7e617b0560

--------------------------------
Class: PropertyValue.Object
	Properties(FieldPathProperty)[] Properties;//[Offset: 0x88, Size: 0x10] 0x7e617b0880
	int[] PropertyIndices;//[Offset: 0x98, Size: 0x10] 0x7e617b0920
	CapturedPropSegment[] CapturedPropSegments;//[Offset: 0xa8, Size: 0x10] 0x7e617b09c0
	FString FullDisplayString;//[Offset: 0xb8, Size: 0x10] 0x7e617c1080
	FName PropertySetterName;//[Offset: 0xc8, Size: 0x8] 0x7e617af800
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0xd0, Size: 0x50] 0x7e6167bec0
	bool bHasRecordedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x7e617af980
	ClassPtrProperty LeafPropertyClass;//[Size: 0x8] 0x7e617b0a60
	byte[] ValueBytes;//[Offset: 0x138, Size: 0x10] 0x7e617b0b00
	enum PropCategory;//[Offset: 0x148, Size: 0x1] 0x7e617b0ba0
	bool HasRecordedData();// 0x224f58ebd041 0x7e617975c0
	FText GetPropertyTooltip();// 0x224e58ebd041 0x7e617976a0
	FString GetFullDisplayString();// 0x224d58ebd041 0x7e61797780

--------------------------------
Class: CapturedPropSegment
	FString PropertyName;//[Offset: 0x0, Size: 0x10] 0x7e6152f000
	int PropertyIndex;//[Offset: 0x10, Size: 0x4] 0x7e6152f080
	FString ComponentName;//[Offset: 0x18, Size: 0x10] 0x7e6152f100

--------------------------------
Class: FunctionCaller
	FName FunctionName;//[Offset: 0x0, Size: 0x8] 0x7e6152f180

--------------------------------
Class: LevelVariantSetsActor.Actor.Object
	SoftObjectPath LevelVariantSets;//[Offset: 0x278, Size: 0x18] 0x7e617afc80
	<DirectorInstances_Key(ClassPtrProperty),LevelVariantSetsFunctionDirector*> DirectorInstances;//[Offset: 0x290, Size: 0x50] 0x7e6167bf80
	bool SwitchOnVariantByName(FString VariantSetName, FString VariantName);// 0x224c58ebd041 0x7e61797860
	bool SwitchOnVariantByIndex(int VariantSetIndex, int VariantIndex);// 0x224b58ebd041 0x7e61797940
	void SetLevelVariantSets(LevelVariantSets* InVariantSets);// 0x224a58ebd041 0x7e61797a20
	LevelVariantSets* GetLevelVariantSets(bool bLoad);// 0x224958ebd041 0x7e61797b00

--------------------------------
Class: LevelVariantSetsFunctionDirector.Object

--------------------------------
Class: PropertyValueTransform.PropertyValue.Object

--------------------------------
Class: PropertyValueVisibility.PropertyValue.Object

--------------------------------
Class: PropertyValueColor.PropertyValue.Object

--------------------------------
Class: PropertyValueMaterial.PropertyValue.Object

--------------------------------
Class: PropertyValueOption.PropertyValue.Object

--------------------------------
Class: PropertyValueSoftObject.PropertyValue.Object

--------------------------------
Class: SwitchActor.Actor.Object
	SceneComponent* SceneComponent;//[Offset: 0x290, Size: 0x8] 0x7e617c0c00
	int LastSelectedOption;//[Offset: 0x298, Size: 0x4] 0x7e617c0c80
	void SelectOption(int OptionIndex);// 0x229458ebd041 0x7e6179ace0
	int GetSelectedOption();// 0x225158ebd041 0x7e61797400
	Actor*[] GetOptions();// 0x225058ebd041 0x7e617974e0

--------------------------------
Class: AutomationUtilsBlueprintLibrary.BlueprintFunctionLibrary.Object
	void TakeGameplayAutomationScreenshot(const FString ScreenshotName, float MaxGlobalError, float MaxLocalError, FString MapNameOverride);// 0x227058ebd041 0x7e617992a0

--------------------------------
Class: ClothConfigBase.Object

--------------------------------
Class: ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothConfig.ClothConfigCommon.ClothConfigBase.Object
	enum MassMode;//[Offset: 0x28, Size: 0x1] 0x7e617b0380
	float UniformMass;//[Offset: 0x2c, Size: 0x4] 0x7e617c3f00
	float TotalMass;//[Offset: 0x30, Size: 0x4] 0x7e617c3f80
	float Density;//[Offset: 0x34, Size: 0x4] 0x7e617c4000
	float MinPerParticleMass;//[Offset: 0x38, Size: 0x4] 0x7e617c4080
	ChaosClothWeightedValue EdgeStiffnessWeighted;//[Offset: 0x3c, Size: 0x8] 0x7e617c4100
	ChaosClothWeightedValue BendingStiffnessWeighted;//[Offset: 0x44, Size: 0x8] 0x7e617c4180
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7e617c4200
	ChaosClothWeightedValue AreaStiffnessWeighted;//[Offset: 0x50, Size: 0x8] 0x7e617c2180
	float VolumeStiffness;//[Offset: 0x58, Size: 0x4] 0x7e617c2200
	ChaosClothWeightedValue TetherStiffness;//[Offset: 0x5c, Size: 0x8] 0x7e617c2280
	ChaosClothWeightedValue TetherScale;//[Offset: 0x64, Size: 0x8] 0x7e617c2300
	bool bUseGeodesicDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x7e617c2380
	float ShapeTargetStiffness;//[Offset: 0x70, Size: 0x4] 0x7e617c2400
	float CollisionThickness;//[Offset: 0x74, Size: 0x4] 0x7e617c2480
	float FrictionCoefficient;//[Offset: 0x78, Size: 0x4] 0x7e617c2500
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7e617c2580
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1] 0x7e617c2600
	float SelfCollisionThickness;//[Offset: 0x80, Size: 0x4] 0x7e617c2680
	bool bUseLegacyBackstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7e617c2700
	float DampingCoefficient;//[Offset: 0x88, Size: 0x4] 0x7e617c2780
	float LocalDampingCoefficient;//[Offset: 0x8c, Size: 0x4] 0x7e617c2800
	bool bUsePointBasedWindModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7e617c2880
	ChaosClothWeightedValue Drag;//[Offset: 0x94, Size: 0x8] 0x7e617c2900
	ChaosClothWeightedValue Lift;//[Offset: 0x9c, Size: 0x8] 0x7e617c2980
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1] 0x7e617c2a00
	float GravityScale;//[Offset: 0xa8, Size: 0x4] 0x7e617c2a80
	Vector Gravity;//[Offset: 0xb0, Size: 0x18] 0x7e617c2b00
	ChaosClothWeightedValue AnimDriveStiffness;//[Offset: 0xc8, Size: 0x8] 0x7e617c2b80
	ChaosClothWeightedValue AnimDriveDamping;//[Offset: 0xd0, Size: 0x8] 0x7e617c2c00
	Vector LinearVelocityScale;//[Offset: 0xd8, Size: 0x18] 0x7e617c2c80
	float AngularVelocityScale;//[Offset: 0xf0, Size: 0x4] 0x7e617c2d00
	float FictitiousAngularScale;//[Offset: 0xf4, Size: 0x4] 0x7e617c2d80
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x7e617c2e00
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1] 0x7e617c2e80
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1] 0x7e617c2f00

--------------------------------
Class: ChaosClothWeightedValue
	float Low;//[Offset: 0x0, Size: 0x4] 0x7e6152ed00
	float High;//[Offset: 0x4, Size: 0x4] 0x7e6152ed80

--------------------------------
Class: ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothSharedSimConfig.ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object
	int IterationCount;//[Offset: 0x28, Size: 0x4] 0x7e617c3c00
	int MaxIterationCount;//[Offset: 0x2c, Size: 0x4] 0x7e617c3c80
	int SubdivisionCount;//[Offset: 0x30, Size: 0x4] 0x7e617c3d00
	bool bUseLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7e617c3d80
	bool bUseXPBDConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7e617c3e00

--------------------------------
Class: ChaosClothingSimulationFactory.ClothingSimulationFactory.Object

--------------------------------
Class: ChaosClothingInteractor.ClothingInteractor.Object
	void SetWind(Vector2D Drag, Vector2D Lift, float AirDensity, Vector WindVelocity);// 0x227e58ebd041 0x7e6179c020
	void SetVelocityScale(Vector LinearVelocityScale, float AngularVelocityScale, float FictitiousAngularScale);// 0x227d58ebd041 0x7e6179c100
	void SetMaterialLinear(float EdgeStiffness, float BendingStiffness, float AreaStiffness);// 0x227c58ebd041 0x7e6179c1e0
	void SetMaterial(Vector2D EdgeStiffness, Vector2D BendingStiffness, Vector2D AreaStiffness);// 0x227b58ebd041 0x7e6179c2c0
	void SetLongRangeAttachmentLinear(float TetherStiffness, float TetherScale);// 0x227a58ebd041 0x7e6179c3a0
	void SetLongRangeAttachment(Vector2D TetherStiffness, Vector2D TetherScale);// 0x227958ebd041 0x7e6179c480
	void SetGravity(float GravityScale, bool bIsGravityOverridden, Vector GravityOverride);// 0x227858ebd041 0x7e6179c560
	void SetDamping(float DampingCoefficient);// 0x227758ebd041 0x7e6179c640
	void SetCollision(float CollisionThickness, float FrictionCoefficient, bool bUseCCD, float SelfCollisionThickness);// 0x227658ebd041 0x7e6179c720
	void SetBackstop(bool bEnabled);// 0x227558ebd041 0x7e6179c800
	void SetAnimDriveLinear(float AnimDriveStiffness);// 0x227458ebd041 0x7e6179c8e0
	void SetAnimDrive(Vector2D AnimDriveStiffness, Vector2D AnimDriveDamping);// 0x22b558ebd041 0x7e6179c9c0
	void SetAerodynamics(float DragCoefficient, float LiftCoefficient, Vector WindVelocity);// 0x227258ebd041 0x7e617990e0
	void ResetAndTeleport(bool bReset, bool bTeleport);// 0x227158ebd041 0x7e617991c0

--------------------------------
Class: ChaosClothingSimulationInteractor.ClothingSimulationInteractor.Object

--------------------------------
Class: MovieSceneGeometryCollectionSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCollectionParams Params;//[Offset: 0xe0, Size: 0x30] 0x7e617c4400

--------------------------------
Class: MovieSceneGeometryCollectionParams
	SoftObjectPath GeometryCollectionCache;//[Offset: 0x8, Size: 0x18] 0x7e6152eb00
	FrameNumber StartFrameOffset;//[Offset: 0x20, Size: 0x4] 0x7e6152eb80
	FrameNumber EndFrameOffset;//[Offset: 0x24, Size: 0x4] 0x7e6152ec00
	float PlayRate;//[Offset: 0x28, Size: 0x4] 0x7e6152ec80

--------------------------------
Class: MovieSceneGeometryCollectionTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10] 0x7e617b02e0

--------------------------------
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object
	void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, Vector PlanePosition, Vector PlaneNormal, bool bCreateOtherHalf, out ProceduralMeshComponent* OutOtherHalfProcMesh, enum CapOption, MaterialInterface* CapMaterial);// 0x229758ebd041 0x7e6179e400
	void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x229658ebd041 0x7e6179e4e0
	void GetSectionFromProceduralMesh(ProceduralMeshComponent* InProcMesh, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x229558ebd041 0x7e6179e5c0
	void GenerateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x22d158ebd041 0x7e6179e6a0
	void CreateGridMeshWelded(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, float GridSpacing);// 0x229358ebd041 0x7e6179adc0
	void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0x229258ebd041 0x7e6179aea0
	void CreateGridMeshSplit(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, out Vector2D[] UV1s, float GridSpacing);// 0x229158ebd041 0x7e6179af80
	void CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComponent, int LODIndex, ProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);// 0x229058ebd041 0x7e6179b060
	void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0x228f58ebd041 0x7e6179b140
	void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out ProcMeshTangent[] Tangents);// 0x228e58ebd041 0x7e6179b220

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1] 0x7e617c9200
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1] 0x7e617c9280
	BodySetup* ProcMeshBodySetup;//[Offset: 0x570, Size: 0x8] 0x7e617c9300
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x578, Size: 0x10] 0x7e617b2ea0
	KConvexElem[] CollisionConvexElems;//[Offset: 0x588, Size: 0x10] 0x7e617b2f40
	BoxSphereBounds LocalBounds;//[Offset: 0x598, Size: 0x38] 0x7e617c9480
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x5d0, Size: 0x10] 0x7e617b2fe0
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x22a258ebd041 0x7e6179da60
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x22a158ebd041 0x7e6179db40
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x22a058ebd041 0x7e6179dc20
	bool IsMeshSectionVisible(int SectionIndex);// 0x229f58ebd041 0x7e6179dd00
	int GetNumSections();// 0x229e58ebd041 0x7e6179dde0
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x229d58ebd041 0x7e6179dec0
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x229c58ebd041 0x7e6179dfa0
	void ClearMeshSection(int SectionIndex);// 0x229b58ebd041 0x7e6179e080
	void ClearCollisionConvexMeshes();// 0x229a58ebd041 0x7e6179e160
	void ClearAllMeshSections();// 0x229958ebd041 0x7e6179e240
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x229858ebd041 0x7e6179e320

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0x18] 0x7e6152e880
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e6152e900

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10] 0x7e84e25380
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10] 0x7e84e252e0
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x38] 0x7e6152fb80
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7e6152fc00
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7e6152fc80

--------------------------------
Class: ProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0x18] 0x7e6152fd00
	Vector Normal;//[Offset: 0x18, Size: 0x18] 0x7e6152fd80
	ProcMeshTangent Tangent;//[Offset: 0x30, Size: 0x20] 0x7e6152fe00
	Color Color;//[Offset: 0x50, Size: 0x4] 0x7e6152fe80
	Vector2D UV0;//[Offset: 0x58, Size: 0x10] 0x7e6152ff00
	Vector2D UV1;//[Offset: 0x68, Size: 0x10] 0x7e6152ff80
	Vector2D UV2;//[Offset: 0x78, Size: 0x10] 0x7e6152e780
	Vector2D UV3;//[Offset: 0x88, Size: 0x10] 0x7e6152e800

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceChaosDestruction.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	<ChaosSolverActor*> ChaosSolverActorSet;//[Offset: 0x38, Size: 0x50] 0x7e617b51a0
	enum DataSourceType;//[Offset: 0x88, Size: 0x1] 0x7e617b5240
	int DataProcessFrequency;//[Offset: 0x8c, Size: 0x4] 0x7e617c9c00
	int MaxNumberOfDataEntriesToSpawn;//[Offset: 0x90, Size: 0x4] 0x7e617c9c80
	bool DoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x7e617c9d00
	Vector2D SpawnMultiplierMinMax;//[Offset: 0x98, Size: 0x10] 0x7e617c9d80
	float SpawnChance;//[Offset: 0xa8, Size: 0x4] 0x7e617c9e00
	Vector2D ImpulseToSpawnMinMax;//[Offset: 0xb0, Size: 0x10] 0x7e617c9e80
	Vector2D SpeedToSpawnMinMax;//[Offset: 0xc0, Size: 0x10] 0x7e617c9f00
	Vector2D MassToSpawnMinMax;//[Offset: 0xd0, Size: 0x10] 0x7e617c9f80
	Vector2D ExtentMinToSpawnMinMax;//[Offset: 0xe0, Size: 0x10] 0x7e617ca000
	Vector2D ExtentMaxToSpawnMinMax;//[Offset: 0xf0, Size: 0x10] 0x7e617ca080
	Vector2D VolumeToSpawnMinMax;//[Offset: 0x100, Size: 0x10] 0x7e617ca100
	Vector2D SolverTimeToSpawnMinMax;//[Offset: 0x110, Size: 0x10] 0x7e617ca180
	int SurfaceTypeToSpawn;//[Offset: 0x120, Size: 0x4] 0x7e617ca200
	enum LocationFilteringMode;//[Offset: 0x124, Size: 0x1] 0x7e617b29a0
	enum LocationXToSpawn;//[Offset: 0x125, Size: 0x1] 0x7e617b2a40
	Vector2D LocationXToSpawnMinMax;//[Offset: 0x128, Size: 0x10] 0x7e617ca380
	enum LocationYToSpawn;//[Offset: 0x138, Size: 0x1] 0x7e617b2ae0
	Vector2D LocationYToSpawnMinMax;//[Offset: 0x140, Size: 0x10] 0x7e617ca480
	enum LocationZToSpawn;//[Offset: 0x150, Size: 0x1] 0x7e617b2b80
	Vector2D LocationZToSpawnMinMax;//[Offset: 0x158, Size: 0x10] 0x7e617c8480
	float TrailMinSpeedToSpawn;//[Offset: 0x168, Size: 0x4] 0x7e617c8500
	enum DataSortingType;//[Offset: 0x16c, Size: 0x1] 0x7e617b2c20
	bool bGetExternalCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1] 0x7e617c8600
	bool DoSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1] 0x7e617c8680
	Vector SpatialHashVolumeMin;//[Offset: 0x170, Size: 0x18] 0x7e617c8700
	Vector SpatialHashVolumeMax;//[Offset: 0x188, Size: 0x18] 0x7e617c8780
	Vector SpatialHashVolumeCellSize;//[Offset: 0x1a0, Size: 0x18] 0x7e617c8800
	int MaxDataPerCell;//[Offset: 0x1b8, Size: 0x4] 0x7e617c8880
	bool bApplyMaterialsFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1] 0x7e617c8900
	<PhysicalMaterial*> ChaosBreakingMaterialSet;//[Offset: 0x1c0, Size: 0x50] 0x7e617b2cc0
	bool bGetExternalBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x7e617c8a00
	bool bGetExternalTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1] 0x7e617c8a80
	Vector2D RandomPositionMagnitudeMinMax;//[Offset: 0x218, Size: 0x10] 0x7e617c8b00
	float InheritedVelocityMultiplier;//[Offset: 0x228, Size: 0x4] 0x7e617c8b80
	enum RandomVelocityGenerationType;//[Offset: 0x22c, Size: 0x1] 0x7e617b2d60
	Vector2D RandomVelocityMagnitudeMinMax;//[Offset: 0x230, Size: 0x10] 0x7e617c8c80
	float SpreadAngleMax;//[Offset: 0x240, Size: 0x4] 0x7e617c8d00
	Vector VelocityOffsetMin;//[Offset: 0x248, Size: 0x18] 0x7e617c8d80
	Vector VelocityOffsetMax;//[Offset: 0x260, Size: 0x18] 0x7e617c8e00
	Vector2D FinalVelocityMagnitudeMinMax;//[Offset: 0x278, Size: 0x10] 0x7e617c8e80
	float MaxLatency;//[Offset: 0x288, Size: 0x4] 0x7e617c8f00
	enum DebugType;//[Offset: 0x28c, Size: 0x1] 0x7e617b2e00
	int LastSpawnedPointID;//[Offset: 0x290, Size: 0x4] 0x7e617c9000
	float LastSpawnTime;//[Offset: 0x294, Size: 0x4] 0x7e617c9080
	float SolverTime;//[Offset: 0x2a8, Size: 0x4] 0x7e617c9100
	float TimeStampOfLastProcessedData;//[Offset: 0x2ac, Size: 0x4] 0x7e617c9180

--------------------------------
Class: ChaosSolverActor.Actor.Object
	ChaosSolverConfiguration Properties;//[Offset: 0x278, Size: 0x6c] 0x7e61905800
	float TimeStepMultiplier;//[Offset: 0x2e4, Size: 0x4] 0x7e61905880
	int CollisionIterations;//[Offset: 0x2e8, Size: 0x4] 0x7e61905900
	int PushOutIterations;//[Offset: 0x2ec, Size: 0x4] 0x7e61905980
	int PushOutPairIterations;//[Offset: 0x2f0, Size: 0x4] 0x7e61905a00
	float ClusterConnectionFactor;//[Offset: 0x2f4, Size: 0x4] 0x7e61905a80
	enum ClusterUnionConnectionType;//[Offset: 0x2f8, Size: 0x1] 0x7e61899f20
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1] 0x7e61905b80
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2fc, Size: 0x10] 0x7e61905c00
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1] 0x7e61905c80
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x310, Size: 0x10] 0x7e61905d00
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1] 0x7e61905d80
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x324, Size: 0x10] 0x7e61905e00
	float MassScale;//[Offset: 0x334, Size: 0x4] 0x7e61905e80
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x7e61905f00
	bool bHasFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1] 0x7e61905f80
	float FloorHeight;//[Offset: 0x33c, Size: 0x4] 0x7e61906000
	ChaosDebugSubstepControl ChaosDebugSubstepControl;//[Offset: 0x340, Size: 0x3] 0x7e61906080
	BillboardComponent* SpriteComponent;//[Offset: 0x348, Size: 0x8] 0x7e61906100
	ChaosGameplayEventDispatcher* GameplayEventDispatcherComponent;//[Offset: 0x368, Size: 0x8] 0x7e61906180
	void SetSolverActive(bool bActive);// 0x27e158ebd041 0x7e618d59c0
	void SetAsCurrentWorldSolver();// 0x27e058ebd041 0x7e618d5aa0

--------------------------------
Class: ChaosDebugSubstepControl
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615a6000
	bool bSubstep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e615a6080
	bool bStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e615a6100

--------------------------------
Class: ChaosGameplayEventDispatcher.ChaosEventListenerComponent.ActorComponent.Object
	<PrimitiveComponent*,ChaosHandlerSet> CollisionEventRegistrations;//[Offset: 0x1c8, Size: 0x50] 0x7e6167dc00
	<PrimitiveComponent*,BreakEventCallbackWrapper> BreakEventRegistrations;//[Offset: 0x218, Size: 0x50] 0x7e6167dcc0
	<PrimitiveComponent*,RemovalEventCallbackWrapper> RemovalEventRegistrations;//[Offset: 0x268, Size: 0x50] 0x7e6167dd80

--------------------------------
Class: ChaosEventListenerComponent.ActorComponent.Object

--------------------------------
Class: ChaosHandlerSet
	<Object*> ChaosHandlers;//[Offset: 0x8, Size: 0x50] 0x7e84ddde40

--------------------------------
Class: BreakEventCallbackWrapper

--------------------------------
Class: RemovalEventCallbackWrapper

--------------------------------
Class: NiagaraDataInterfaceGeometryCollection.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	GeometryCollectionActor* GeometryCollectionActor;//[Offset: 0x38, Size: 0x8] 0x7e617c9a80

--------------------------------
Class: GeometryCollectionActor.Actor.Object
	GeometryCollectionComponent* GeometryCollectionComponent;//[Offset: 0x278, Size: 0x8] 0x7e6190d100
	GeometryCollectionDebugDrawComponent* GeometryCollectionDebugDrawComponent;//[Offset: 0x280, Size: 0x8] 0x7e6190d180
	bool RaycastSingle(Vector Start, Vector End, out HitResult OutHit);// 0x281158ebd041 0x7e618da340

--------------------------------
Class: GeometryCollectionComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0x568, Size: 0x8] 0x7e61424400
	GeometryCollection* RestCollection;//[Offset: 0x658, Size: 0x8] 0x7e61424480
	FieldSystemActor*[] InitializationFields;//[Offset: 0x660, Size: 0x10] 0x7e84dd2b80
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1] 0x7e61424580
	enum ObjectType;//[Offset: 0x678, Size: 0x1] 0x7e84dd2ae0
	bool bForceMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 0x1] 0x7e61424680
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67a, Size: 0x1] 0x7e61424700
	int ClusterGroupIndex;//[Offset: 0x67c, Size: 0x4] 0x7e61424780
	int MaxClusterLevel;//[Offset: 0x680, Size: 0x4] 0x7e61424800
	float[] DamageThreshold;//[Offset: 0x688, Size: 0x10] 0x7e84dd2a40
	bool bUseSizeSpecificDamageThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1] 0x7e61424900
	enum ClusterConnectionType;//[Offset: 0x699, Size: 0x1] 0x7e84dd29a0
	int CollisionGroup;//[Offset: 0x69c, Size: 0x4] 0x7e61424a00
	float CollisionSampleFraction;//[Offset: 0x6a0, Size: 0x4] 0x7e61424a80
	float LinearEtherDrag;//[Offset: 0x6a4, Size: 0x4] 0x7e61424b00
	float AngularEtherDrag;//[Offset: 0x6a8, Size: 0x4] 0x7e61424b80
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0x6b0, Size: 0x8] 0x7e61424c00
	enum InitialVelocityType;//[Offset: 0x6b8, Size: 0x1] 0x7e848536c0
	Vector InitialLinearVelocity;//[Offset: 0x6c0, Size: 0x18] 0x7e61424d00
	Vector InitialAngularVelocity;//[Offset: 0x6d8, Size: 0x18] 0x7e61424d80
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x6f0, Size: 0x8] 0x7e61424e00
	GeomComponentCacheParameters CacheParameters;//[Offset: 0x6f8, Size: 0x50] 0x7e61423780
	Transform[] RestTransforms;//[Offset: 0x748, Size: 0x10] 0x7e84854fc0
	delegate NotifyGeometryCollectionPhysicsStateChange;//[Offset: 0x758, Size: 0x10] 0x7e61423880
	delegate NotifyGeometryCollectionPhysicsLoadingStateChange;//[Offset: 0x768, Size: 0x10] 0x7e61423900
	delegate OnChaosBreakEvent;//[Offset: 0x790, Size: 0x10] 0x7e61423980
	delegate OnChaosRemovalEvent;//[Offset: 0x7a0, Size: 0x10] 0x7e61423a00
	float DesiredCacheTime;//[Offset: 0x7b0, Size: 0x4] 0x7e61423a80
	bool CachePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 0x1] 0x7e61423b00
	delegate OnChaosPhysicsCollision;//[Offset: 0x7b8, Size: 0x10] 0x7e61423b80
	bool bNotifyBreaks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1] 0x7e61423c00
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 0x1] 0x7e61423c80
	bool bNotifyTrailing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ca, Size: 0x1] 0x7e61423d00
	bool bNotifyRemovals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cb, Size: 0x1] 0x7e61423d80
	bool bStoreVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 0x1] 0x7e61423e00
	bool bShowBoneColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd, Size: 0x1] 0x7e61423e80
	bool bEnableReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ce, Size: 0x1] 0x7e61423f00
	bool bEnableAbandonAfterLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cf, Size: 0x1] 0x7e61423f80
	int ReplicationAbandonClusterLevel;//[Offset: 0x7d0, Size: 0x4] 0x7e61424000
	GeometryCollectionRepData RepData;//[Offset: 0x7d8, Size: 0x18] 0x7e61424080
	BodySetup* DummyBodySetup;//[Offset: 0xa70, Size: 0x8] 0x7e61424100
	InstancedStaticMeshComponent*[] EmbeddedGeometryComponents;//[Offset: 0xa80, Size: 0x10] 0x7e841b74a0
	void SetNotifyRemovals(bool bNewNotifyRemovals);// 0xfe458ebd041 0x7e613dd440
	void SetNotifyBreaks(bool bNewNotifyBreaks);// 0xfe358ebd041 0x7e613dd520
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0xfe158ebd041 0x7e613dd600
	void OnRep_RepData(out const GeometryCollectionRepData OldData);// 0xfe058ebd041 0x7e613dd6e0
	void NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0xfdf58ebd041 0x7e613dd7c0
	void NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0xfde58ebd041 0x7e613dd8a0
	void NetAbandonCluster(int TransformIndex);// 0xfdd58ebd041 0x7e613dd980
	void ApplyPhysicsField(bool Enabled, enum Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0xfdc58ebd041 0x7e613dda60
	void ApplyKinematicField(float Radius, Vector Position);// 0xfdb58ebd041 0x7e613ddb40

--------------------------------
Class: ChaosPhysicsCollisionInfo
	PrimitiveComponent* Component;//[Offset: 0x0, Size: 0x8] 0x7e61403e80
	PrimitiveComponent* OtherComponent;//[Offset: 0x8, Size: 0x8] 0x7e61403f00
	Vector Location;//[Offset: 0x10, Size: 0x18] 0x7e61403f80
	Vector Normal;//[Offset: 0x28, Size: 0x18] 0x7e61404000
	Vector AccumulatedImpulse;//[Offset: 0x40, Size: 0x18] 0x7e61404080
	Vector Velocity;//[Offset: 0x58, Size: 0x18] 0x7e61404100
	Vector OtherVelocity;//[Offset: 0x70, Size: 0x18] 0x7e61404180
	Vector AngularVelocity;//[Offset: 0x88, Size: 0x18] 0x7e61404200
	Vector OtherAngularVelocity;//[Offset: 0xa0, Size: 0x18] 0x7e61402180
	float Mass;//[Offset: 0xb8, Size: 0x4] 0x7e61402300
	float OtherMass;//[Offset: 0xbc, Size: 0x4] 0x7e61402200

--------------------------------
Class: GeometryCollectionRepData

--------------------------------
Class: GeometryCollection.Object
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e6190ff80
	int ClusterGroupIndex;//[Offset: 0x34, Size: 0x4] 0x7e6190e780
	int MaxClusterLevel;//[Offset: 0x38, Size: 0x4] 0x7e6190e800
	float[] DamageThreshold;//[Offset: 0x40, Size: 0x10] 0x7e618992a0
	enum ClusterConnectionType;//[Offset: 0x50, Size: 0x1] 0x7e61899340
	MaterialInterface*[] Materials;//[Offset: 0x58, Size: 0x10] 0x7e618993e0
	GeometryCollectionEmbeddedExemplar[] EmbeddedGeometryExemplar;//[Offset: 0x68, Size: 0x10] 0x7e61899480
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7e6190ea80
	bool bStripOnCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x7e6190eb00
	bool EnableNanite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x7e6190eb80
	bool bMassAsDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x7e6190ec00
	float Mass;//[Offset: 0x7c, Size: 0x4] 0x7e6190ec80
	float MinimumMassClamp;//[Offset: 0x80, Size: 0x4] 0x7e6190ed00
	bool bRemoveOnMaxSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7e6190ed80
	Vector2D MaximumSleepTime;//[Offset: 0x88, Size: 0x10] 0x7e6190ee00
	Vector2D RemovalDuration;//[Offset: 0x98, Size: 0x10] 0x7e6190ee80
	GeometryCollectionSizeSpecificData[] SizeSpecificData;//[Offset: 0xa8, Size: 0x10] 0x7e61899520
	bool EnableRemovePiecesOnFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x7e6190ef80
	MaterialInterface*[] RemoveOnFractureMaterials;//[Offset: 0xc0, Size: 0x10] 0x7e618995c0
	Guid PersistentGuid;//[Offset: 0xd0, Size: 0x10] 0x7e6190f080
	Guid StateGuid;//[Offset: 0xe0, Size: 0x10] 0x7e6190f100
	int BoneSelectedMaterialIndex;//[Offset: 0xf0, Size: 0x4] 0x7e6190f180

--------------------------------
Class: GeometryCollectionEmbeddedExemplar
	SoftObjectPath StaticMeshExemplar;//[Offset: 0x0, Size: 0x18] 0x7e615a6580
	float StartCullDistance;//[Offset: 0x18, Size: 0x4] 0x7e615a6600
	float EndCullDistance;//[Offset: 0x1c, Size: 0x4] 0x7e615a6680
	int InstanceCount;//[Offset: 0x20, Size: 0x4] 0x7e615a6700

--------------------------------
Class: GeometryCollectionSizeSpecificData
	float MaxSize;//[Offset: 0x0, Size: 0x4] 0x7e615a7f00
	GeometryCollectionCollisionTypeData[] CollisionShapes;//[Offset: 0x8, Size: 0x10] 0x7e84dd9160
	int DamageThreshold;//[Offset: 0x18, Size: 0x4] 0x7e615a8000

--------------------------------
Class: GeometryCollectionCollisionTypeData
	enum CollisionType;//[Offset: 0x0, Size: 0x1] 0x7e84dd90c0
	enum ImplicitType;//[Offset: 0x1, Size: 0x1] 0x7e84ddb960
	GeometryCollectionLevelSetData LevelSet;//[Offset: 0x4, Size: 0x10] 0x7e615a8180
	GeometryCollectionCollisionParticleData CollisionParticles;//[Offset: 0x14, Size: 0x8] 0x7e615a8200
	float CollisionObjectReductionPercentage;//[Offset: 0x1c, Size: 0x4] 0x7e615a8280
	float CollisionMarginFraction;//[Offset: 0x20, Size: 0x4] 0x7e615a8300

--------------------------------
Class: GeometryCollectionLevelSetData
	int MinLevelSetResolution;//[Offset: 0x0, Size: 0x4] 0x7e615a6380
	int MaxLevelSetResolution;//[Offset: 0x4, Size: 0x4] 0x7e615a6400
	int MinClusterLevelSetResolution;//[Offset: 0x8, Size: 0x4] 0x7e615a6480
	int MaxClusterLevelSetResolution;//[Offset: 0xc, Size: 0x4] 0x7e615a6500

--------------------------------
Class: GeometryCollectionCollisionParticleData
	float CollisionParticlesFraction;//[Offset: 0x0, Size: 0x4] 0x7e615a8380
	int MaximumCollisionParticles;//[Offset: 0x4, Size: 0x4] 0x7e615a8400

--------------------------------
Class: FieldSystemActor.Actor.Object
	FieldSystemComponent* FieldSystemComponent;//[Offset: 0x278, Size: 0x8] 0x7e61905700

--------------------------------
Class: FieldSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FieldSystem* FieldSystem;//[Offset: 0x538, Size: 0x8] 0x7e61906380
	bool bIsWorldField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1] 0x7e61906400
	bool bIsChaosField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1] 0x7e61906480
	ChaosSolverActor*[] SupportedSolvers;//[Offset: 0x548, Size: 0x10] 0x7e61899e80
	FieldObjectCommands ConstructionCommands;//[Offset: 0x558, Size: 0x30] 0x7e61906580
	FieldObjectCommands BufferCommands;//[Offset: 0x588, Size: 0x30] 0x7e61906600
	void ResetFieldSystem();// 0x27ec58ebd041 0x7e618d89e0
	void RemovePersistentFields();// 0x27eb58ebd041 0x7e618d8ac0
	void ApplyUniformVectorFalloffForce(bool Enabled, Vector Position, Vector Direction, float Radius, float Magnitude);// 0x27ea58ebd041 0x7e618d8ba0
	void ApplyStrainField(bool Enabled, Vector Position, float Radius, float Magnitude, int Iterations);// 0x27e958ebd041 0x7e618d8c80
	void ApplyStayDynamicField(bool Enabled, Vector Position, float Radius);// 0x27e858ebd041 0x7e618d8d60
	void ApplyRadialVectorFalloffForce(bool Enabled, Vector Position, float Radius, float Magnitude);// 0x27e758ebd041 0x7e618d8e40
	void ApplyRadialForce(bool Enabled, Vector Position, float Magnitude);// 0x27e658ebd041 0x7e618d8f20
	void ApplyPhysicsField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x282758ebd041 0x7e618d9000
	void ApplyLinearForce(bool Enabled, Vector Direction, float Magnitude);// 0x27e458ebd041 0x7e618d5720
	void AddPersistentField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x27e358ebd041 0x7e618d5800
	void AddFieldCommand(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x27e258ebd041 0x7e618d58e0

--------------------------------
Class: FieldSystemMetaData.ActorComponent.Object

--------------------------------
Class: FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldSystem.Object

--------------------------------
Class: FieldObjectCommands
	FName[] TargetNames;//[Offset: 0x0, Size: 0x10] 0x7e84ddb460
	FieldNodeBase*[] RootNodes;//[Offset: 0x10, Size: 0x10] 0x7e84dddf80
	FieldSystemMetaData*[] MetaDatas;//[Offset: 0x20, Size: 0x10] 0x7e84dddee0

--------------------------------
Class: ChaosPhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x7e61857f00
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x7e61857f80
	float Restitution;//[Offset: 0x30, Size: 0x4] 0x7e61858000
	float LinearEtherDrag;//[Offset: 0x34, Size: 0x4] 0x7e61858080
	float AngularEtherDrag;//[Offset: 0x38, Size: 0x4] 0x7e61858100
	float SleepingLinearVelocityThreshold;//[Offset: 0x3c, Size: 0x4] 0x7e61858180
	float SleepingAngularVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x7e61858200

--------------------------------
Class: GeomComponentCacheParameters
	enum CacheMode;//[Offset: 0x0, Size: 0x1] 0x7e848529a0
	GeometryCollectionCache* TargetCache;//[Offset: 0x8, Size: 0x8] 0x7e61424f00
	float ReverseCacheBeginTime;//[Offset: 0x10, Size: 0x4] 0x7e61424f80
	bool SaveCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x7e61425000
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x7e61425080
	int CollisionDataSizeMax;//[Offset: 0x18, Size: 0x4] 0x7e61425100
	bool DoCollisionDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7e61425180
	float CollisionDataSpatialHashRadius;//[Offset: 0x20, Size: 0x4] 0x7e61425200
	int MaxCollisionPerCell;//[Offset: 0x24, Size: 0x4] 0x7e61425280
	bool SaveBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61423200
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e61423280
	int BreakingDataSizeMax;//[Offset: 0x2c, Size: 0x4] 0x7e61423300
	bool DoBreakingDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61423380
	float BreakingDataSpatialHashRadius;//[Offset: 0x34, Size: 0x4] 0x7e61423400
	int MaxBreakingPerCell;//[Offset: 0x38, Size: 0x4] 0x7e61423480
	bool SaveTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7e61423500
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x7e61423580
	int TrailingDataSizeMax;//[Offset: 0x40, Size: 0x4] 0x7e61423600
	float TrailingMinSpeedThreshold;//[Offset: 0x44, Size: 0x4] 0x7e61423680
	float TrailingMinVolumeThreshold;//[Offset: 0x48, Size: 0x4] 0x7e61423700

--------------------------------
Class: GeometryCollectionCache.Object
	RecordedTransformTrack RecordedData;//[Offset: 0x28, Size: 0x10] 0x7e6190cf80
	GeometryCollection* SupportedCollection;//[Offset: 0x38, Size: 0x8] 0x7e6190d000
	Guid CompatibleCollectionState;//[Offset: 0x40, Size: 0x10] 0x7e6190d080

--------------------------------
Class: RecordedTransformTrack
	RecordedFrame[] Records;//[Offset: 0x0, Size: 0x10] 0x7e84ddea20

--------------------------------
Class: RecordedFrame
	Transform[] Transforms;//[Offset: 0x0, Size: 0x10] 0x7e84dde980
	int[] TransformIndices;//[Offset: 0x10, Size: 0x10] 0x7e84dde8e0
	int[] PreviousTransformIndices;//[Offset: 0x20, Size: 0x10] 0x7e84dde840
	bool[] DisabledFlags;//[Offset: 0x30, Size: 0x10] 0x7e84dde7a0
	SolverCollisionData[] Collisions;//[Offset: 0x40, Size: 0x10] 0x7e84dde700
	SolverBreakingData[] Breakings;//[Offset: 0x50, Size: 0x10] 0x7e84dde660
	<SolverTrailingData> Trailings;//[Offset: 0x60, Size: 0x50] 0x7e84dde5c0
	float Timestamp;//[Offset: 0xb0, Size: 0x4] 0x7e61577080

--------------------------------
Class: SolverCollisionData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61575600
	Vector AccumulatedImpulse;//[Offset: 0x18, Size: 0x18] 0x7e61575680
	Vector Normal;//[Offset: 0x30, Size: 0x18] 0x7e61575700
	Vector Velocity1;//[Offset: 0x48, Size: 0x18] 0x7e61575780
	Vector Velocity2;//[Offset: 0x60, Size: 0x18] 0x7e61575800
	Vector AngularVelocity1;//[Offset: 0x78, Size: 0x18] 0x7e61575880
	Vector AngularVelocity2;//[Offset: 0x90, Size: 0x18] 0x7e61575900
	float Mass1;//[Offset: 0xa8, Size: 0x4] 0x7e61575980
	float Mass2;//[Offset: 0xac, Size: 0x4] 0x7e61575a00
	int ParticleIndex;//[Offset: 0xb0, Size: 0x4] 0x7e61575a80
	int LevelsetIndex;//[Offset: 0xb4, Size: 0x4] 0x7e61575b00
	int ParticleIndexMesh;//[Offset: 0xb8, Size: 0x4] 0x7e61575b80
	int LevelsetIndexMesh;//[Offset: 0xbc, Size: 0x4] 0x7e61575c00

--------------------------------
Class: SolverBreakingData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61575300
	Vector Velocity;//[Offset: 0x18, Size: 0x18] 0x7e61575380
	Vector AngularVelocity;//[Offset: 0x30, Size: 0x18] 0x7e61575400
	float Mass;//[Offset: 0x48, Size: 0x4] 0x7e61575480
	int ParticleIndex;//[Offset: 0x4c, Size: 0x4] 0x7e61575500
	int ParticleIndexMesh;//[Offset: 0x50, Size: 0x4] 0x7e61575580

--------------------------------
Class: SolverTrailingData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61577100
	Vector Velocity;//[Offset: 0x18, Size: 0x18] 0x7e61577180
	Vector AngularVelocity;//[Offset: 0x30, Size: 0x18] 0x7e61577200
	float Mass;//[Offset: 0x48, Size: 0x4] 0x7e61577280
	int ParticleIndex;//[Offset: 0x4c, Size: 0x4] 0x7e61577300
	int ParticleIndexMesh;//[Offset: 0x50, Size: 0x4] 0x7e61577380

--------------------------------
Class: GeometryCollectionDebugDrawComponent.ActorComponent.Object
	GeometryCollectionDebugDrawActor* GeometryCollectionDebugDrawActor;//[Offset: 0xb0, Size: 0x8] 0x7e6190f200
	GeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor;//[Offset: 0xb8, Size: 0x8] 0x7e6190f280

--------------------------------
Class: GeometryCollectionDebugDrawActor.Actor.Object
	GeometryCollectionDebugDrawWarningMessage WarningMessage;//[Offset: 0x278, Size: 0x1] 0x7e6190f300
	GeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody;//[Offset: 0x280, Size: 0x18] 0x7e6190f380
	bool bDebugDrawWholeCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x7e6190f400
	bool bDebugDrawHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1] 0x7e6190f480
	bool bDebugDrawClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1] 0x7e6190f500
	enum HideGeometry;//[Offset: 0x29b, Size: 0x1] 0x7e61899660
	bool bShowRigidBodyId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x7e6190f600
	bool bShowRigidBodyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1] 0x7e6190f680
	bool bCollisionAtOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e, Size: 0x1] 0x7e6190f700
	bool bShowRigidBodyTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f, Size: 0x1] 0x7e6190f780
	bool bShowRigidBodyInertia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x7e6190d700
	bool bShowRigidBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1] 0x7e6190d780
	bool bShowRigidBodyForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1] 0x7e6190d800
	bool bShowRigidBodyInfos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3, Size: 0x1] 0x7e6190d880
	bool bShowTransformIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1] 0x7e6190d900
	bool bShowTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 0x1] 0x7e6190d980
	bool bShowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 0x1] 0x7e6190da00
	bool bShowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 0x1] 0x7e6190da80
	bool bShowConnectivityEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x7e6190db00
	bool bShowGeometryIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1] 0x7e6190db80
	bool bShowGeometryTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa, Size: 0x1] 0x7e6190dc00
	bool bShowBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ab, Size: 0x1] 0x7e6190dc80
	bool bShowFaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1] 0x7e6190dd00
	bool bShowFaceIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1] 0x7e6190dd80
	bool bShowFaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae, Size: 0x1] 0x7e6190de00
	bool bShowSingleFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af, Size: 0x1] 0x7e6190de80
	int SingleFaceIndex;//[Offset: 0x2b0, Size: 0x4] 0x7e6190df00
	bool bShowVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1] 0x7e6190df80
	bool bShowVertexIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1] 0x7e6190e000
	bool bShowVertexNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b6, Size: 0x1] 0x7e6190e080
	bool bUseActiveVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b7, Size: 0x1] 0x7e6190e100
	float PointThickness;//[Offset: 0x2b8, Size: 0x4] 0x7e6190e180
	float LineThickness;//[Offset: 0x2bc, Size: 0x4] 0x7e6190e200
	bool bTextShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x7e6190e280
	float TextScale;//[Offset: 0x2c4, Size: 0x4] 0x7e6190e300
	float NormalScale;//[Offset: 0x2c8, Size: 0x4] 0x7e6190e380
	float AxisScale;//[Offset: 0x2cc, Size: 0x4] 0x7e6190e400
	float ArrowScale;//[Offset: 0x2d0, Size: 0x4] 0x7e6190e480
	Color RigidBodyIdColor;//[Offset: 0x2d4, Size: 0x4] 0x7e6190e500
	float RigidBodyTransformScale;//[Offset: 0x2d8, Size: 0x4] 0x7e6190e580
	Color RigidBodyCollisionColor;//[Offset: 0x2dc, Size: 0x4] 0x7e6190e600
	Color RigidBodyInertiaColor;//[Offset: 0x2e0, Size: 0x4] 0x7e6190e680
	Color RigidBodyVelocityColor;//[Offset: 0x2e4, Size: 0x4] 0x7e6190e700
	Color RigidBodyForceColor;//[Offset: 0x2e8, Size: 0x4] 0x7e6190c680
	Color RigidBodyInfoColor;//[Offset: 0x2ec, Size: 0x4] 0x7e6190c700
	Color TransformIndexColor;//[Offset: 0x2f0, Size: 0x4] 0x7e6190c780
	float TransformScale;//[Offset: 0x2f4, Size: 0x4] 0x7e6190c800
	Color LevelColor;//[Offset: 0x2f8, Size: 0x4] 0x7e6190c880
	Color ParentColor;//[Offset: 0x2fc, Size: 0x4] 0x7e6190c900
	float ConnectivityEdgeThickness;//[Offset: 0x300, Size: 0x4] 0x7e6190c980
	Color GeometryIndexColor;//[Offset: 0x304, Size: 0x4] 0x7e6190ca00
	float GeometryTransformScale;//[Offset: 0x308, Size: 0x4] 0x7e6190ca80
	Color BoundingBoxColor;//[Offset: 0x30c, Size: 0x4] 0x7e6190cb00
	Color FaceColor;//[Offset: 0x310, Size: 0x4] 0x7e6190cb80
	Color FaceIndexColor;//[Offset: 0x314, Size: 0x4] 0x7e6190cc00
	Color FaceNormalColor;//[Offset: 0x318, Size: 0x4] 0x7e6190cc80
	Color SingleFaceColor;//[Offset: 0x31c, Size: 0x4] 0x7e6190cd00
	Color VertexColor;//[Offset: 0x320, Size: 0x4] 0x7e6190cd80
	Color VertexIndexColor;//[Offset: 0x324, Size: 0x4] 0x7e6190ce00
	Color VertexNormalColor;//[Offset: 0x328, Size: 0x4] 0x7e6190ce80
	BillboardComponent* SpriteComponent;//[Offset: 0x330, Size: 0x8] 0x7e6190cf00

--------------------------------
Class: GeometryCollectionDebugDrawWarningMessage

--------------------------------
Class: GeometryCollectionDebugDrawActorSelectedRigidBody
	int ID;//[Offset: 0x0, Size: 0x4] 0x7e615a6900
	ChaosSolverActor* Solver;//[Offset: 0x8, Size: 0x8] 0x7e615a6980
	GeometryCollectionActor* GeometryCollection;//[Offset: 0x10, Size: 0x8] 0x7e615a6a00

--------------------------------
Class: GeometryCollectionRenderLevelSetActor.Actor.Object
	VolumeTexture* TargetVolumeTexture;//[Offset: 0x278, Size: 0x8] 0x7e6190fc80
	Material* RayMarchMaterial;//[Offset: 0x280, Size: 0x8] 0x7e6190fd00
	float SurfaceTolerance;//[Offset: 0x288, Size: 0x4] 0x7e6190fd80
	float Isovalue;//[Offset: 0x28c, Size: 0x4] 0x7e6190fe00
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x7e6190fe80
	bool RenderVolumeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1] 0x7e6190ff00

--------------------------------
Class: NiagaraDataInterfacePhysicsField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7e617b5100

--------------------------------
Class: MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	NiagaraVariable Parameter;//[Offset: 0xa0, Size: 0x20] 0x7e617c9980

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 0x10] 0x7e84e254c0

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61540c80
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 0x4] 0x7e61540d80

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 0x4] 0x7e61540d00

--------------------------------
Class: MovieSceneNiagaraBoolParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraColorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraFloatParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraIntegerParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraSystemSpawnSection.MovieSceneSection.MovieSceneSignedObject.Object
	enum SectionStartBehavior;//[Offset: 0xdc, Size: 0x4] 0x7e617b4e80
	enum SectionEvaluateBehavior;//[Offset: 0xe0, Size: 0x4] 0x7e617b4f20
	enum SectionEndBehavior;//[Offset: 0xe4, Size: 0x4] 0x7e617b4fc0
	enum AgeUpdateMode;//[Offset: 0xe8, Size: 0x1] 0x7e617b5060
	bool bAllowScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x7e617c9900

--------------------------------
Class: MovieSceneNiagaraSystemTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraVectorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int ChannelsUsed;//[Offset: 0xc8, Size: 0x4] 0x7e617c9680

--------------------------------
Class: NiagaraActor.Actor.Object
	NiagaraComponent* NiagaraComponent;//[Offset: 0x278, Size: 0x8] 0x7e617cb580
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x7e617c9500
	void SetDestroyOnSystemFinish(bool bShouldDestroyOnSystemFinish);// 0x22a458ebd041 0x7e6179d8a0
	void OnNiagaraSystemFinished(NiagaraComponent* FinishedComponent);// 0x22a358ebd041 0x7e6179d980

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x538, Size: 0x8] 0x7e617cff80
	enum TickBehavior;//[Offset: 0x540, Size: 0x1] 0x7e617b4480
	int RandomSeedOffset;//[Offset: 0x544, Size: 0x4] 0x7e617ce800
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x548, Size: 0xd8] 0x7e617ce880
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x620, Size: 0x1] 0x7e617ce900
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x620, Size: 0x1] 0x7e617ce980
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x655, Size: 0x1] 0x7e617cea00
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x655, Size: 0x1] 0x7e617cea80
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x655, Size: 0x1] 0x7e617ceb00
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x655, Size: 0x1] 0x7e617ceb80
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x658, Size: 0x4] 0x7e617cec00
	delegate OnSystemFinished;//[Offset: 0x660, Size: 0x10] 0x7e617cec80
	SceneComponent* AutoAttachParent;//[Offset: 0x670, Size: 0x8] 0x7e617ced00
	FName AutoAttachSocketName;//[Offset: 0x678, Size: 0x8] 0x7e617ced80
	enum AutoAttachLocationRule;//[Offset: 0x680, Size: 0x1] 0x7e617b4520
	enum AutoAttachRotationRule;//[Offset: 0x681, Size: 0x1] 0x7e617b45c0
	enum AutoAttachScaleRule;//[Offset: 0x682, Size: 0x1] 0x7e617b4660
	bool bAllowScalability;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68c, Size: 0x1] 0x7e617cef80
	NiagaraCullProxyComponent* CullProxy;//[Offset: 0x7b0, Size: 0x8] 0x7e617cf000
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0x22fa58ebd041 0x7e617e3260
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0x22f958ebd041 0x7e617e3340
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0x22f858ebd041 0x7e617e3420
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0x22f758ebd041 0x7e617e3500
	void SetVariableTexture(FName InVariableName, Texture* Texture);// 0x22f658ebd041 0x7e617e35e0
	void SetVariableStaticMesh(FName InVariableName, StaticMesh* InValue);// 0x22f558ebd041 0x7e617e36c0
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0x22f458ebd041 0x7e617e37a0
	void SetVariablePosition(FName InVariableName, Vector InValue);// 0x22f358ebd041 0x7e617e3880
	void SetVariableObject(FName InVariableName, Object* Object);// 0x233458ebd041 0x7e617e3960
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0x22f158ebd041 0x7e617e0080
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0x22f058ebd041 0x7e617e0160
	void SetVariableInt(FName InVariableName, int InValue);// 0x22ef58ebd041 0x7e617e0240
	void SetVariableFloat(FName InVariableName, float InValue);// 0x22ee58ebd041 0x7e617e0320
	void SetVariableBool(FName InVariableName, bool InValue);// 0x22ed58ebd041 0x7e617e0400
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0x22ec58ebd041 0x7e617e04e0
	void SetTickBehavior(enum NewTickBehavior);// 0x22eb58ebd041 0x7e617e05c0
	void SetSystemFixedBounds(Box LocalBounds);// 0x22ea58ebd041 0x7e617e06a0
	void SetSeekDelta(float InSeekDelta);// 0x22e958ebd041 0x7e617e0780
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0x22e858ebd041 0x7e617e0860
	void SetRandomSeedOffset(int NewRandomSeedOffset);// 0x22e758ebd041 0x7e617e0940
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance, float PreviewMaxDistance);// 0x22e658ebd041 0x7e617e0a20
	void SetPaused(bool bInPaused);// 0x22e558ebd041 0x7e617e0b00
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0x22e458ebd041 0x7e617e0be0
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0x22e358ebd041 0x7e617e0cc0
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0x22e258ebd041 0x7e617e0da0
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0x22e158ebd041 0x7e617e0e80
	void SetNiagaraVariablePosition(FString InVariableName, Vector InValue);// 0x22e058ebd041 0x7e617e0f60
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0x22df58ebd041 0x7e617e1040
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0x22de58ebd041 0x7e617e1120
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0x22dd58ebd041 0x7e617e1200
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0x22dc58ebd041 0x7e617e12e0
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0x22db58ebd041 0x7e617e13c0
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0x22da58ebd041 0x7e617e14a0
	void SetMaxSimTime(float InMaxTime);// 0x22d958ebd041 0x7e617e1580
	void SetLockDesiredAgeDeltaTimeToSeekDelta(bool bLock);// 0x22d858ebd041 0x7e617e1660
	void SetGpuComputeDebug(bool bEnableDebug);// 0x22d758ebd041 0x7e617e1740
	void SetForceSolo(bool bInForceSolo);// 0x22d658ebd041 0x7e617e1820
	void SetForceLocalPlayerEffect(bool bIsPlayerEffect);// 0x22d558ebd041 0x7e617e1900
	void SetEmitterFixedBounds(FName EmitterName, Box LocalBounds);// 0x22d458ebd041 0x7e617e19e0
	void SetDesiredAge(float InDesiredAge);// 0x22d358ebd041 0x7e617e1ac0
	void SetCustomTimeDilation(float Dilation);// 0x22d258ebd041 0x7e617e1ba0
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0x231358ebd041 0x7e617e1c80
	void SetAutoDestroy(bool bInAutoDestroy);// 0x22d058ebd041 0x7e6179e780
	void SetAsset(NiagaraSystem* InAsset, bool bResetExistingOverrideParameters);// 0x22cf58ebd041 0x7e6179e860
	void SetAllowScalability(bool bAllow);// 0x22ce58ebd041 0x7e6179e940
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0x22cd58ebd041 0x7e6179ea20
	void SeekToDesiredAge(float InDesiredAge);// 0x22cc58ebd041 0x7e6179eb00
	void ResetSystem();// 0x22cb58ebd041 0x7e6179ebe0
	void ReinitializeSystem();// 0x22ca58ebd041 0x7e6179ecc0
	bool IsPaused();// 0x22c958ebd041 0x7e6179eda0
	void InitForPerformanceBaseline();// 0x22c858ebd041 0x7e6179ee80
	enum GetTickBehavior();// 0x22c758ebd041 0x7e6179ef60
	Box GetSystemFixedBounds();// 0x22c658ebd041 0x7e6179f040
	float GetSeekDelta();// 0x22c558ebd041 0x7e6179f120
	int GetRandomSeedOffset();// 0x22c458ebd041 0x7e6179f200
	bool GetPreviewLODDistanceEnabled();// 0x22c358ebd041 0x7e6179f2e0
	float GetPreviewLODDistance();// 0x22c258ebd041 0x7e6179f3c0
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0x22c158ebd041 0x7e6179f4a0
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0x22c058ebd041 0x7e6179f580
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0x22bf58ebd041 0x7e6179f660
	float GetMaxSimTime();// 0x22be58ebd041 0x7e6179f740
	bool GetLockDesiredAgeDeltaTimeToSeekDelta();// 0x22bd58ebd041 0x7e6179f820
	bool GetForceSolo();// 0x22bc58ebd041 0x7e6179f900
	bool GetForceLocalPlayerEffect();// 0x22bb58ebd041 0x7e6179f9e0
	Box GetEmitterFixedBounds(FName EmitterName);// 0x22ba58ebd041 0x7e6179fac0
	float GetDesiredAge();// 0x22b958ebd041 0x7e6179fba0
	NiagaraDataInterface* GetDataInterface(FString Name);// 0x22b858ebd041 0x7e6179fc80
	float GetCustomTimeDilation();// 0x22b758ebd041 0x7e6179fd60
	NiagaraSystem* GetAsset();// 0x22b658ebd041 0x7e6179fe40
	bool GetAllowScalability();// 0xffffff8158ebd000 0x7e6179ff20
	enum GetAgeUpdateMode();// 0x22b458ebd041 0x7e6179caa0
	void ClearSystemFixedBounds();// 0x22b358ebd041 0x7e6179cb80
	void ClearEmitterFixedBounds(FName EmitterName);// 0x22b258ebd041 0x7e6179cc60
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0x22b158ebd041 0x7e6179cd40
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0x22b058ebd041 0x7e6179ce20

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bSupportLargeWorldCoordinates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e61808d80
	bool bOverrideCastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7e61808e00
	bool bOverrideReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7e61808e80
	bool bOverrideRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1] 0x7e61808f00
	bool bOverrideCustomDepthStencilValue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1] 0x7e61808f80
	bool bOverrideCustomDepthStencilWriteMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1] 0x7e61809000
	bool bCastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1] 0x7e61809080
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1] 0x7e61809100
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x7e61809180
	enum CustomDepthStencilWriteMask;//[Offset: 0x32, Size: 0x1] 0x7e617ba060
	int CustomDepthStencilValue;//[Offset: 0x34, Size: 0x4] 0x7e61809280
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61809300
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e61809380
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1] 0x7e61809400
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7e61809480
	NiagaraEffectType* EffectType;//[Offset: 0x40, Size: 0x8] 0x7e61807400
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e61807480
	bool bOverrideAllowCullingForLocalPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1] 0x7e61807500
	bool bAllowCullingForLocalPlayersOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1] 0x7e61807580
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x50, Size: 0x10] 0x7e617ba100
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x60, Size: 0x10] 0x7e61807680
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x70, Size: 0x10] 0x7e617ba1a0
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x80, Size: 0x10] 0x7e617ba240
	NiagaraScript* SystemSpawnScript;//[Offset: 0x90, Size: 0x8] 0x7e61807800
	NiagaraScript* SystemUpdateScript;//[Offset: 0x98, Size: 0x8] 0x7e61807880
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xb0, Size: 0x228] 0x7e61807900
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2d8, Size: 0xd8] 0x7e61807980
	Box FixedBounds;//[Offset: 0x3b0, Size: 0x38] 0x7e61807a00
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1] 0x7e61807a80
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1] 0x7e61807b00
	int RandomSeed;//[Offset: 0x3ec, Size: 0x4] 0x7e61807b80
	float WarmupTime;//[Offset: 0x3f0, Size: 0x4] 0x7e61807c00
	int WarmupTickCount;//[Offset: 0x3f4, Size: 0x4] 0x7e61807c80
	float WarmupTickDelta;//[Offset: 0x3f8, Size: 0x4] 0x7e61807d00
	bool bFixedTickDelta;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1] 0x7e61807d80
	float FixedTickDeltaTime;//[Offset: 0x400, Size: 0x4] 0x7e61807e00
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1] 0x7e61807e80
	bool bNeedsGPUContextInitForDataInterfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 0x1] 0x7e61807f00
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x408, Size: 0x10] 0x7e617ba2e0

--------------------------------
Class: NiagaraEffectType.Object
	bool bAllowCullingForLocalPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e617fc100
	enum UpdateFrequency;//[Offset: 0x2c, Size: 0x4] 0x7e617b7040
	enum CullReaction;//[Offset: 0x30, Size: 0x4] 0x7e617b70e0
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x38, Size: 0x8] 0x7e617fc280
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x40, Size: 0x10] 0x7e617b7180
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x50, Size: 0x10] 0x7e617fc380
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x60, Size: 0x10] 0x7e617fc400
	NiagaraBaselineController* PerformanceBaselineController;//[Offset: 0x78, Size: 0x8] 0x7e617fc480
	NiagaraPerfBaselineStats PerfBaselineStats;//[Offset: 0x80, Size: 0x10] 0x7e617fc500
	Guid PerfBaselineVersion;//[Offset: 0x90, Size: 0x10] 0x7e617fc580

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30] 0x7e6154a000
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e6154a080
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7e6154a100
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7e6154a180
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1] 0x7e6154a200
	float MaxDistance;//[Offset: 0x34, Size: 0x4] 0x7e6154a280
	int MaxInstances;//[Offset: 0x38, Size: 0x4] 0x7e6154a300
	int MaxSystemInstances;//[Offset: 0x3c, Size: 0x4] 0x7e6154a380
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 0x4] 0x7e6154a400
	enum CullProxyMode;//[Offset: 0x44, Size: 0x4] 0x7e84e27680
	int MaxSystemProxies;//[Offset: 0x48, Size: 0x4] 0x7e6154a500
	NiagaraGlobalBudgetScaling BudgetScaling;//[Offset: 0x4c, Size: 0x38] 0x7e61548480

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 0x4] 0x7e61549800
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 0x10] 0x7e84e277c0
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 0x10] 0x7e84e27720

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x7e61549880
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 0x4] 0x7e61549900
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 0x4] 0x7e61549980

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 0x8] 0x7e61549a80
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7e61549b00
	int MinInt;//[Offset: 0xc, Size: 0x4] 0x7e61549b80
	int MaxInt;//[Offset: 0x10, Size: 0x4] 0x7e61549c00
	float MinFloat;//[Offset: 0x14, Size: 0x4] 0x7e61549c80
	float MaxFloat;//[Offset: 0x18, Size: 0x4] 0x7e61549d00
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x7e61549d80
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x7e61549e00
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1] 0x7e61549e80
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1] 0x7e61549f00

--------------------------------
Class: NiagaraGlobalBudgetScaling
	bool bCullByGlobalBudget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61548500
	bool bScaleMaxDistanceByGlobalBudgetUse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61548580
	bool bScaleMaxInstanceCountByGlobalBudgetUse;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61548600
	bool bScaleSystemInstanceCountByGlobalBudgetUse;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e61548680
	float MaxGlobalBudgetUsage;//[Offset: 0x4, Size: 0x4] 0x7e61548700
	NiagaraLinearRamp MaxDistanceScaleByGlobalBudgetUse;//[Offset: 0x8, Size: 0x10] 0x7e61548780
	NiagaraLinearRamp MaxInstanceCountScaleByGlobalBudgetUse;//[Offset: 0x18, Size: 0x10] 0x7e61548800
	NiagaraLinearRamp MaxSystemInstanceCountScaleByGlobalBudgetUse;//[Offset: 0x28, Size: 0x10] 0x7e61548880

--------------------------------
Class: NiagaraLinearRamp
	float StartX;//[Offset: 0x0, Size: 0x4] 0x7e61548900
	float StartY;//[Offset: 0x4, Size: 0x4] 0x7e61548980
	float EndX;//[Offset: 0x8, Size: 0x4] 0x7e61548a00
	float EndY;//[Offset: 0xc, Size: 0x4] 0x7e61548a80

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10] 0x7e84e27860

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10] 0x7e84e279a0

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30] 0x7e6154b380
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e6154b400
	float SpawnCountScale;//[Offset: 0x34, Size: 0x4] 0x7e6154b480

--------------------------------
Class: NiagaraBaselineController.Object
	float TestDuration;//[Offset: 0x28, Size: 0x4] 0x7e61801180
	NiagaraEffectType* EffectType;//[Offset: 0x30, Size: 0x8] 0x7e61801200
	NiagaraPerfBaselineActor* Owner;//[Offset: 0x38, Size: 0x8] 0x7e61801280
	NiagaraSystem* System;//[Offset: 0x40, Size: 0x28] 0x7e61801300
	bool OnTickTest();// 0x234d58ebd041 0x7e617e5d40
	void OnOwnerTick(float DeltaTime);// 0x234c58ebd041 0x7e617e5e20
	void OnEndTest(NiagaraPerfBaselineStats Stats);// 0x234b58ebd041 0x7e617e5f00
	void OnBeginTest();// 0x234a58ebd041 0x7e617e5fe0
	NiagaraSystem* GetSystem();// 0x234958ebd041 0x7e617e60c0

--------------------------------
Class: NiagaraPerfBaselineStats
	float PerInstanceAvg_GT;//[Offset: 0x0, Size: 0x4] 0x7e6154d480
	float PerInstanceAvg_RT;//[Offset: 0x4, Size: 0x4] 0x7e6154d500
	float PerInstanceMax_GT;//[Offset: 0x8, Size: 0x4] 0x7e6154d580
	float PerInstanceMax_RT;//[Offset: 0xc, Size: 0x4] 0x7e6154d600

--------------------------------
Class: NiagaraPerfBaselineActor.Actor.Object
	NiagaraBaselineController* Controller;//[Offset: 0x278, Size: 0x8] 0x7e61803080
	TextRenderComponent* Label;//[Offset: 0x280, Size: 0x8] 0x7e61803100

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1] 0x7e6154b580
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1] 0x7e61549500
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1] 0x7e61549580
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1] 0x7e61549600
	bool bOverrideGlobalBudgetScalingSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 0x1] 0x7e61549680
	bool bOverrideCullProxySettings;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 0x1] 0x7e61549700

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10] 0x7e84e27900

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 0x10] 0x7e6154c600
	FName IdName;//[Offset: 0x10, Size: 0x8] 0x7e6154a580
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e6154a600
	FName Name;//[Offset: 0x1c, Size: 0x8] 0x7e6154a680
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 0x8] 0x7e6154a700

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e617fd280
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e617fd300
	int RandomSeed;//[Offset: 0x2c, Size: 0x4] 0x7e617fd380
	enum AllocationMode;//[Offset: 0x30, Size: 0x1] 0x7e617b6c80
	int PreAllocationCount;//[Offset: 0x34, Size: 0x4] 0x7e617fd480
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 0x28] 0x7e617fd500
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 0x28] 0x7e617fd580
	enum SimTarget;//[Offset: 0x88, Size: 0x1] 0x7e617b6d20
	Box FixedBounds;//[Offset: 0x90, Size: 0x38] 0x7e617fd680
	int MinDetailLevel;//[Offset: 0xc8, Size: 0x4] 0x7e617fb600
	int MaxDetailLevel;//[Offset: 0xcc, Size: 0x4] 0x7e617fb680
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xd0, Size: 0x14] 0x7e617fb700
	NiagaraPlatformSet Platforms;//[Offset: 0xe8, Size: 0x30] 0x7e617fb780
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0x118, Size: 0x10] 0x7e617fb800
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1] 0x7e617fb880
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 0x1] 0x7e617fb900
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x128, Size: 0x1] 0x7e617fb980
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x128, Size: 0x1] 0x7e617fba00
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x128, Size: 0x1] 0x7e617fba80
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x128, Size: 0x1] 0x7e617fbb00
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x128, Size: 0x1] 0x7e617fbb80
	float MaxDeltaTimePerTick;//[Offset: 0x12c, Size: 0x4] 0x7e617fbc00
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1] 0x7e617fbc80
	int MaxGPUParticlesSpawnPerFrame;//[Offset: 0x134, Size: 0x4] 0x7e617fbd00
	NiagaraParameterStore RendererBindings;//[Offset: 0x138, Size: 0x88] 0x7e617fbd80
	FString UniqueEmitterName;//[Offset: 0x1d8, Size: 0x10] 0x7e617fbe00
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x1e8, Size: 0x10] 0x7e617b6dc0
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x1f8, Size: 0x10] 0x7e617b6e60
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x208, Size: 0x10] 0x7e617b6f00
	NiagaraScript* GPUComputeScript;//[Offset: 0x218, Size: 0x8] 0x7e617fc000
	FName[] SharedEventGeneratorIds;//[Offset: 0x220, Size: 0x10] 0x7e617b6fa0

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 0x8] 0x7e6154ad80
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 0x10] 0x7e84e24fc0
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 0x10] 0x7e84e27ae0

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 0x1] 0x7e617b8260
	Guid UsageId;//[Offset: 0x2c, Size: 0x10] 0x7e61804780
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 0x88] 0x7e61804800
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xc8, Size: 0xa8] 0x7e61804880
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x170, Size: 0x10] 0x7e617b8300
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x180, Size: 0x58] 0x7e61804980
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1e8, Size: 0x138] 0x7e61804a00
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x320, Size: 0x10] 0x7e617b83a0
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x330, Size: 0x10] 0x7e617b8440
	void RaiseOnGPUCompilationComplete();// 0x235658ebd041 0x7e617e8f20

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 0x8] 0x7e6154d680
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 0x10] 0x7e84e22cc0
	byte[] ParameterData;//[Offset: 0x20, Size: 0x10] 0x7e84e22c20
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 0x10] 0x7e84e22b80
	Object*[] UObjects;//[Offset: 0x40, Size: 0x10] 0x7e84e22ae0
	NiagaraPositionSource[] OriginalPositionData;//[Offset: 0x50, Size: 0x10] 0x7e84e22a40

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 0x4] 0x7e6154b880
	NiagaraLwcStructConverter StructConverter;//[Offset: 0x10, Size: 0x10] 0x7e6154bc00

--------------------------------
Class: NiagaraLwcStructConverter
	NiagaraStructConversionStep[] ConversionSteps;//[Offset: 0x0, Size: 0x10] 0x7e84e25240

--------------------------------
Class: NiagaraStructConversionStep
	int SourceBytes;//[Offset: 0x0, Size: 0x4] 0x7e6154b900
	int SourceOffset;//[Offset: 0x4, Size: 0x4] 0x7e6154b980
	int SimulationBytes;//[Offset: 0x8, Size: 0x4] 0x7e6154ba00
	int SimulationOffset;//[Offset: 0xc, Size: 0x4] 0x7e6154ba80
	enum ConversionType;//[Offset: 0x10, Size: 0x1] 0x7e84e229a0

--------------------------------
Class: NiagaraPositionSource
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6154bc80
	Vector Value;//[Offset: 0x8, Size: 0x18] 0x7e6154bd00

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x88, Size: 0x4] 0x7e6154ef00
	uint32 PaddedParameterSize;//[Offset: 0x8c, Size: 0x4] 0x7e6154ef80
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x90, Size: 0x10] 0x7e84e210a0
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7e6154f080

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 0x2] 0x7e6154f100
	uint16 DestOffset;//[Offset: 0x2, Size: 0x2] 0x7e6154f180
	uint16 SrcSize;//[Offset: 0x4, Size: 0x2] 0x7e6154f200
	uint16 DestSize;//[Offset: 0x6, Size: 0x2] 0x7e6154f280

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20] 0x7e6154bd80
	int SrcOffset;//[Offset: 0x20, Size: 0x4] 0x7e6154be00
	int DestOffset;//[Offset: 0x24, Size: 0x4] 0x7e6154be80

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 0x10] 0x7e6154e480
	enum ScriptUsageType;//[Offset: 0x10, Size: 0x1] 0x7e84e231c0
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 0x10] 0x7e6154e580
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x7e6154e600
	bool bDisableDebugSwitches;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x7e6154e680
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1] 0x7e6154e700
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1] 0x7e6154c680
	Guid BaseScriptID;//[Offset: 0x28, Size: 0x10] 0x7e6154c700
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 0x10] 0x7e6154c780
	Guid ScriptVersionID;//[Offset: 0x48, Size: 0x10] 0x7e6154c800

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 0x10] 0x7e84e25420

--------------------------------
Class: NiagaraVMExecutableData
	NiagaraVMExecutableByteCode ByteCode;//[Offset: 0x0, Size: 0x18] 0x7e6154f300
	NiagaraVMExecutableByteCode OptimizedByteCode;//[Offset: 0x18, Size: 0x18] 0x7e6154f380
	int NumTempRegisters;//[Offset: 0x68, Size: 0x4] 0x7e6154f400
	int NumUserPtrs;//[Offset: 0x6c, Size: 0x4] 0x7e6154f480
	NiagaraCompilerTag[] CompileTags;//[Offset: 0x70, Size: 0x10] 0x7e84e21000
	byte[] ScriptLiterals;//[Offset: 0x80, Size: 0x10] 0x7e84e20f60
	NiagaraVariable[] Attributes;//[Offset: 0x90, Size: 0x10] 0x7e84e23a80
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0xa0, Size: 0x1] 0x7e6154f680
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0xa8, Size: 0x10] 0x7e84e239e0
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0xb8, Size: 0x10] 0x7e84e23940
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0xd8, Size: 0x10] 0x7e84e238a0
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0xe8, Size: 0x10] 0x7e84e23800
	NiagaraStatScope[] StatScopes;//[Offset: 0xf8, Size: 0x10] 0x7e84e23760
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0x108, Size: 0x10] 0x7e84e23620
	enum LastCompileStatus;//[Offset: 0x118, Size: 0x1] 0x7e84e23580
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0x120, Size: 0x10] 0x7e84e23300
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1] 0x7e6154e280
	bool bNeedsGPUContextInit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 0x1] 0x7e6154e300

--------------------------------
Class: NiagaraVMExecutableByteCode
	byte[] Data;//[Offset: 0x0, Size: 0x10] 0x7e84e23260
	int UncompressedSize;//[Offset: 0x10, Size: 0x4] 0x7e6154e400

--------------------------------
Class: NiagaraCompilerTag
	NiagaraVariable Variable;//[Offset: 0x0, Size: 0x20] 0x7e6154c880
	FString StringValue;//[Offset: 0x20, Size: 0x10] 0x7e6154c900

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61542000

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61543080
	int UserPtrIdx;//[Offset: 0x8, Size: 0x4] 0x7e61543100
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 0x10] 0x7e61543180
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 0x8] 0x7e61541100
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 0x8] 0x7e61541180
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61541200

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 0x8] 0x7e61541400
	uint16 UnderlyingType;//[Offset: 0x8, Size: 0x2] 0x7e61541480
	byte Flags;//[Offset: 0xa, Size: 0x1] 0x7e61541500

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61542c00
	FName OwnerName;//[Offset: 0x8, Size: 0x8] 0x7e61542c80
	bool[] InputParamLocations;//[Offset: 0x10, Size: 0x10] 0x7e84e25b00
	int NumOutputs;//[Offset: 0x20, Size: 0x4] 0x7e61542d80
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 0x10] 0x7e84e25a60

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 0x8] 0x7e61542e80
	FName Value;//[Offset: 0x8, Size: 0x8] 0x7e61542f00

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61540080
	enum Type;//[Offset: 0x8, Size: 0x1] 0x7e84e257e0

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 0xc] 0x7e61542080
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 0x10] 0x7e84e25880

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 0x8] 0x7e61542f80
	FName FriendlyName;//[Offset: 0x8, Size: 0x8] 0x7e61543000

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 0x10] 0x7e6154d880
	FString DIClassName;//[Offset: 0x10, Size: 0x10] 0x7e6154d900
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 0x10] 0x7e84e236c0

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 0x8] 0x7e6154db00
	FName EnabledBinding;//[Offset: 0x8, Size: 0x8] 0x7e6154db80
	FName IterationSource;//[Offset: 0x10, Size: 0x8] 0x7e6154dc00
	enum ExecuteBehavior;//[Offset: 0x18, Size: 0x1] 0x7e84e234e0
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x7e6154dd00
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x7e6154dd80
	bool bParticleIterationStateEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x7e6154de00
	FName ParticleIterationStateBinding;//[Offset: 0x1c, Size: 0x8] 0x7e6154de80
	IntPoint ParticleIterationStateRange;//[Offset: 0x28, Size: 0x8] 0x7e6154df00
	FName[] OutputDestinations;//[Offset: 0x30, Size: 0x10] 0x7e84e23440
	int NumIterations;//[Offset: 0x40, Size: 0x4] 0x7e6154e000
	FName NumIterationsBinding;//[Offset: 0x44, Size: 0x8] 0x7e6154e080
	enum GpuDispatchType;//[Offset: 0x4c, Size: 0x1] 0x7e84e233a0
	IntVector GpuDispatchNumThreads;//[Offset: 0x50, Size: 0xc] 0x7e6154e180

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 0x8] 0x7e61801580
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 0x10] 0x7e617b8c60
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 0x8] 0x7e61801680
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 0x8] 0x7e61801700
	Guid CompileId;//[Offset: 0x50, Size: 0x10] 0x7e61801780

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 0x8] 0x7e61801800
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 0x10] 0x7e617b8d00
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 0x88] 0x7e61801900
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0x234858ebd041 0x7e617e61a0
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0x234758ebd041 0x7e617e6280
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0x234658ebd041 0x7e617e6360
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0x234558ebd041 0x7e617e6440
	void SetIntParameter(FString InVariableName, int InValue);// 0x234458ebd041 0x7e617e6520
	void SetFloatParameter(FString InVariableName, float InValue);// 0x234358ebd041 0x7e617e6600
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0x234258ebd041 0x7e617e66e0
	void SetBoolParameter(FString InVariableName, bool InValue);// 0x234158ebd041 0x7e617e67c0
	Vector GetVectorParameter(FString InVariableName);// 0x234058ebd041 0x7e617e68a0
	Vector4 GetVector4Parameter(FString InVariableName);// 0x233f58ebd041 0x7e617e6980
	Vector2D GetVector2DParameter(FString InVariableName);// 0x233e58ebd041 0x7e617e6a60
	Quat GetQuatParameter(FString InVariableName);// 0x233d58ebd041 0x7e617e6b40
	int GetIntParameter(FString InVariableName);// 0x233c58ebd041 0x7e617e6c20
	float GetFloatParameter(FString InVariableName);// 0x233b58ebd041 0x7e617e6d00
	LinearColor GetColorParameter(FString InVariableName);// 0x233a58ebd041 0x7e617e6de0
	bool GetBoolParameter(FString InVariableName);// 0x233958ebd041 0x7e617e6ec0

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 0x8] 0x7e61541280
	FName Name;//[Offset: 0x8, Size: 0x8] 0x7e61541300
	int UserPtrIdx;//[Offset: 0x10, Size: 0x4] 0x7e61541380
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 0x10] 0x7e61541580
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 0x8] 0x7e61541600
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 0x8] 0x7e61541680

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6154b080
	FName SourceEventGenerator;//[Offset: 0x8, Size: 0x8] 0x7e6154b100
	FName SourceEmitter;//[Offset: 0x10, Size: 0x8] 0x7e6154b180

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 0x4] 0x7e6154af00
	FName ID;//[Offset: 0x4, Size: 0x8] 0x7e6154af80
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 0x40] 0x7e6154b000

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 0x10] 0x7e84e23bc0
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 0x10] 0x7e84e23b20
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 0xc] 0x7e61544780
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 0x4] 0x7e61544800
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 0x4] 0x7e61544880
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 0x4] 0x7e61544900
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61544980
	enum SimTarget;//[Offset: 0x39, Size: 0x1] 0x7e84e26640

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 0x4] 0x7e61544a80
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 0x4] 0x7e61544b00
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 0x4] 0x7e61544b80
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 0x60] 0x7e61544f00

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 0x10] 0x7e84e265a0
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 0x10] 0x7e84e26500
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 0x10] 0x7e84e26460
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 0x10] 0x7e84e263c0
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 0x10] 0x7e84e26320
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 0x10] 0x7e84e26280

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 0x4] 0x7e6154a780
	float Medium;//[Offset: 0x4, Size: 0x4] 0x7e6154a800
	float High;//[Offset: 0x8, Size: 0x4] 0x7e6154a880
	float Epic;//[Offset: 0xc, Size: 0x4] 0x7e6154a900
	float Cine;//[Offset: 0x10, Size: 0x4] 0x7e6154a980

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10] 0x7e84e27a40

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e6154b280

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 0x30] 0x7e617cfb00
	int SortOrderHint;//[Offset: 0x58, Size: 0x4] 0x7e617cfb80
	enum MotionVectorSetting;//[Offset: 0x5c, Size: 0x4] 0x7e617b43e0
	NiagaraVariableAttributeBinding RendererEnabledBinding;//[Offset: 0x60, Size: 0x58] 0x7e617cfc80
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x7e617cfd00
	bool bAllowInCullProxies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1] 0x7e617cfd80
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1] 0x7e617cfe00

--------------------------------
Class: NiagaraVariableAttributeBinding
	NiagaraVariableBase ParamMapVariable;//[Offset: 0x0, Size: 0xc] 0x7e61542580
	NiagaraVariable DataSetVariable;//[Offset: 0x10, Size: 0x20] 0x7e61542600
	NiagaraVariable RootVariable;//[Offset: 0x30, Size: 0x20] 0x7e61542680
	byte BindingSourceMode;//[Offset: 0x50, Size: 0x1] 0x7e61542700
	bool bBindingExistsOnSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1] 0x7e61542780
	bool bIsCachedParticleValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51, Size: 0x1] 0x7e61542800

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 0x1] 0x7e84e25060
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 0x4] 0x7e6154aa80
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 0x4] 0x7e6154ab00
	Guid SourceEmitterID;//[Offset: 0x34, Size: 0x10] 0x7e6154ab80
	FName SourceEventName;//[Offset: 0x44, Size: 0x8] 0x7e6154ac00
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7e6154ac80
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 0x4] 0x7e6154ad00

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 0x8] 0x7e61805e80
	FName SimulationStageName;//[Offset: 0x30, Size: 0x8] 0x7e61805f00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61805f80

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 0x88] 0x7e6154f800
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x88, Size: 0x40] 0x7e6154f880
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xc8, Size: 0x40] 0x7e6154f900
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0x108, Size: 0x40] 0x7e6154f980
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x148, Size: 0x20] 0x7e6154fa00
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x168, Size: 0x20] 0x7e6154fa80
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x188, Size: 0x20] 0x7e6154fb00
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x1a8, Size: 0x10] 0x7e84e24020
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1b8, Size: 0x20] 0x7e6154fc00
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1d8, Size: 0x20] 0x7e6154fc80
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1f8, Size: 0x20] 0x7e6154fd00
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x218, Size: 0x10] 0x7e84e213c0

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 0x10] 0x7e84e21320
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 0x10] 0x7e84e21280

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 0x4] 0x7e6154ff00
	int DataSetComponentOffset;//[Offset: 0x4, Size: 0x4] 0x7e6154ff80

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x88, Size: 0x50] 0x7e61555080

--------------------------------
Class: NiagaraCullProxyComponent.NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraCulledComponentInfo[] Instances;//[Offset: 0x7b8, Size: 0x10] 0x7e617b3ee0

--------------------------------
Class: NiagaraCulledComponentInfo

--------------------------------
Class: NiagaraBakerSettings.Object
	float StartSeconds;//[Offset: 0x28, Size: 0x4] 0x7e617cae00
	float DurationSeconds;//[Offset: 0x2c, Size: 0x4] 0x7e617cae80
	int FramesPerSecond;//[Offset: 0x30, Size: 0x4] 0x7e617caf00
	bool bPreviewLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7e617caf80
	IntPoint FramesPerDimension;//[Offset: 0x38, Size: 0x8] 0x7e617cb000
	NiagaraBakerTextureSettings[] OutputTextures;//[Offset: 0x40, Size: 0x10] 0x7e617b4d40
	enum CameraViewportMode;//[Offset: 0x50, Size: 0x4] 0x7e617b4de0
	Vector CameraViewportLocation;//[Offset: 0x58, Size: 0x18] 0x7e617cb180
	Rotator CameraViewportRotation;//[Offset: 0x100, Size: 0x18] 0x7e617cb200
	float CameraOrbitDistance;//[Offset: 0x1a8, Size: 0x4] 0x7e617cb280
	float CameraFOV;//[Offset: 0x1ac, Size: 0x4] 0x7e617cb300
	float CameraOrthoWidth;//[Offset: 0x1b0, Size: 0x4] 0x7e617cb380
	bool bUseCameraAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 0x1] 0x7e617cb400
	float CameraAspectRatio;//[Offset: 0x1b8, Size: 0x4] 0x7e617cb480
	bool bRenderComponentOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 0x1] 0x7e617cb500

--------------------------------
Class: NiagaraBakerTextureSettings
	NiagaraBakerTextureSource SourceBinding;//[Offset: 0x0, Size: 0x8] 0x7e61540180
	bool bUseFrameSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e61540200
	IntPoint FrameSize;//[Offset: 0xc, Size: 0x8] 0x7e61540280
	IntPoint TextureSize;//[Offset: 0x14, Size: 0x8] 0x7e61540300
	Texture2D* GeneratedTexture;//[Offset: 0x20, Size: 0x8] 0x7e61540380

--------------------------------
Class: NiagaraBakerTextureSource
	FName SourceName;//[Offset: 0x0, Size: 0x8] 0x7e61540400

--------------------------------
Class: NiagaraComponentPool.Object
	<NiagaraSystem*,NCPool> WorldParticleSystemPools;//[Offset: 0x28, Size: 0x50] 0x7e6167bd40

--------------------------------
Class: NCPool
	NCPoolElement[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x7e84e25ec0

--------------------------------
Class: NCPoolElement
	NiagaraComponent* Component;//[Offset: 0x0, Size: 0x8] 0x7e61543c00

--------------------------------
Class: NiagaraComponentRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	class SceneComponent* ComponentType;//[Offset: 0xd0, Size: 0x8] 0x7e617b42a0
	uint32 ComponentCountLimit;//[Offset: 0xd8, Size: 0x4] 0x7e617f0f80
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0xe0, Size: 0x58] 0x7e617f1000
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x138, Size: 0x58] 0x7e617f1080
	bool bAssignComponentsOnParticleID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1] 0x7e617cf800
	bool bOnlyCreateComponentsOnParticleSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1] 0x7e617cf880
	bool bOnlyActivateNewlyAquiredComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1] 0x7e617cf900
	int RendererVisibility;//[Offset: 0x194, Size: 0x4] 0x7e617cf980
	SceneComponent* TemplateComponent;//[Offset: 0x198, Size: 0x8] 0x7e617cfa00
	NiagaraComponentPropertyBinding[] PropertyBindings;//[Offset: 0x1a0, Size: 0x10] 0x7e617b4340

--------------------------------
Class: NiagaraComponentPropertyBinding
	NiagaraVariableAttributeBinding AttributeBinding;//[Offset: 0x0, Size: 0x58] 0x7e61543800
	FName PropertyName;//[Offset: 0x58, Size: 0x8] 0x7e61543880
	NiagaraTypeDefinition PropertyType;//[Offset: 0x60, Size: 0x10] 0x7e61543900
	FName MetadataSetterName;//[Offset: 0x70, Size: 0x8] 0x7e61543980
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0x78, Size: 0x50] 0x7e61550f40
	NiagaraVariable WritableValue;//[Offset: 0xc8, Size: 0x20] 0x7e61543b00

--------------------------------
Class: NiagaraComponentSettings.Object
	<FName> SuppressActivationList;//[Offset: 0x28, Size: 0x50] 0x7e617b3f80
	<FName> ForceAutoPooolingList;//[Offset: 0x78, Size: 0x50] 0x7e617b4020
	<NiagaraEmitterNameSettingsRef> SuppressEmitterList;//[Offset: 0xc8, Size: 0x50] 0x7e617b40c0
	<NiagaraEmitterNameSettingsRef> GPUEmitterAllowList;//[Offset: 0x118, Size: 0x50] 0x7e617b4160
	<FName> GpuDataInterfaceDenyList;//[Offset: 0x168, Size: 0x50] 0x7e617b4200

--------------------------------
Class: NiagaraEmitterNameSettingsRef
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x7e61543700
	FString EmitterName;//[Offset: 0x8, Size: 0x10] 0x7e61543780

--------------------------------
Class: NiagaraConvertInPlaceUtilityBase.Object

--------------------------------
Class: NiagaraDataInterface2DArrayTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture2DArray* Texture;//[Offset: 0x38, Size: 0x8] 0x7e617f0b80
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20] 0x7e617f0c00

--------------------------------
Class: NiagaraUserParameterBinding
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20] 0x7e61542200

--------------------------------
Class: NiagaraDataInterfaceActorComponent.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7e617f0a00
	Actor* SourceActor;//[Offset: 0x34, Size: 0x1c] 0x7e617f0a80
	NiagaraUserParameterBinding ActorOrComponentParameter;//[Offset: 0x50, Size: 0x20] 0x7e617f0b00

--------------------------------
Class: NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum GpuSyncMode;//[Offset: 0x6c, Size: 0x4] 0x7e617b3e40
	int MaxElements;//[Offset: 0x70, Size: 0x4] 0x7e617f0980

--------------------------------
Class: NiagaraDataInterfaceArrayFloat.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] FloatData;//[Offset: 0x78, Size: 0x10] 0x7e617b66e0

--------------------------------
Class: NiagaraDataInterfaceArrayFloat2.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector2D[] FloatData;//[Offset: 0x78, Size: 0x10] 0x7e617b6640

--------------------------------
Class: NiagaraDataInterfaceArrayFloat3.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector[] FloatData;//[Offset: 0x78, Size: 0x10] 0x7e617b65a0

--------------------------------
Class: NiagaraDataInterfaceArrayPosition.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraPosition[] PositionData;//[Offset: 0x78, Size: 0x10] 0x7e617b6500

--------------------------------
Class: NiagaraPosition.Vector3f

--------------------------------
Class: NiagaraDataInterfaceArrayFloat4.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector4[] FloatData;//[Offset: 0x78, Size: 0x10] 0x7e617b6460

--------------------------------
Class: NiagaraDataInterfaceArrayColor.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	LinearColor[] ColorData;//[Offset: 0x78, Size: 0x10] 0x7e617b63c0

--------------------------------
Class: NiagaraDataInterfaceArrayQuat.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Quat[] QuatData;//[Offset: 0x78, Size: 0x10] 0x7e617b6320

--------------------------------
Class: NiagaraDataInterfaceArrayFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetNiagaraArrayVectorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector Value, bool bSizeToFit);// 0x231e58ebd041 0x7e617e4ca0
	void SetNiagaraArrayVector4Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector4 Value, bool bSizeToFit);// 0x231d58ebd041 0x7e617e4d80
	void SetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector4[] ArrayData);// 0x231c58ebd041 0x7e617e4e60
	void SetNiagaraArrayVector2DValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector2D Value, bool bSizeToFit);// 0x231b58ebd041 0x7e617e4f40
	void SetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector2D[] ArrayData);// 0x231a58ebd041 0x7e617e5020
	void SetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector[] ArrayData);// 0x231958ebd041 0x7e617e5100
	void SetNiagaraArrayQuatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Quat Value, bool bSizeToFit);// 0x231858ebd041 0x7e617e51e0
	void SetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Quat[] ArrayData);// 0x231758ebd041 0x7e617e52c0
	void SetNiagaraArrayPositionValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector Value, bool bSizeToFit);// 0x231658ebd041 0x7e617e53a0
	void SetNiagaraArrayPosition(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector[] ArrayData);// 0x231558ebd041 0x7e617e5480
	void SetNiagaraArrayInt32Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, int Value, bool bSizeToFit);// 0x231458ebd041 0x7e617e5560
	void SetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName, out const int[] ArrayData);// 0x235558ebd041 0x7e617e5640
	void SetNiagaraArrayFloatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, float Value, bool bSizeToFit);// 0x231258ebd041 0x7e617e1d60
	void SetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const float[] ArrayData);// 0x231158ebd041 0x7e617e1e40
	void SetNiagaraArrayColorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const LinearColor Value, bool bSizeToFit);// 0x231058ebd041 0x7e617e1f20
	void SetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName, out const LinearColor[] ArrayData);// 0x230f58ebd041 0x7e617e2000
	void SetNiagaraArrayBoolValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const bool Value, bool bSizeToFit);// 0x230e58ebd041 0x7e617e20e0
	void SetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName, out const bool[] ArrayData);// 0x230d58ebd041 0x7e617e21c0
	Vector GetNiagaraArrayVectorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230c58ebd041 0x7e617e22a0
	Vector4 GetNiagaraArrayVector4Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230b58ebd041 0x7e617e2380
	Vector4[] GetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230a58ebd041 0x7e617e2460
	Vector2D GetNiagaraArrayVector2DValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230958ebd041 0x7e617e2540
	Vector2D[] GetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230858ebd041 0x7e617e2620
	Vector[] GetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230758ebd041 0x7e617e2700
	Quat GetNiagaraArrayQuatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230658ebd041 0x7e617e27e0
	Quat[] GetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230558ebd041 0x7e617e28c0
	Vector GetNiagaraArrayPositionValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230458ebd041 0x7e617e29a0
	Vector[] GetNiagaraArrayPosition(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230358ebd041 0x7e617e2a80
	int GetNiagaraArrayInt32Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230258ebd041 0x7e617e2b60
	int[] GetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230158ebd041 0x7e617e2c40
	float GetNiagaraArrayFloatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230058ebd041 0x7e617e2d20
	float[] GetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x22ff58ebd041 0x7e617e2e00
	LinearColor GetNiagaraArrayColorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x22fe58ebd041 0x7e617e2ee0
	LinearColor[] GetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x22fd58ebd041 0x7e617e2fc0
	bool GetNiagaraArrayBoolValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x22fc58ebd041 0x7e617e30a0
	bool[] GetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x22fb58ebd041 0x7e617e3180

--------------------------------
Class: NiagaraDataInterfaceArrayInt32.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int[] IntData;//[Offset: 0x78, Size: 0x10] 0x7e617b5740

--------------------------------
Class: NiagaraDataInterfaceArrayBool.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	bool[] BoolData;//[Offset: 0x78, Size: 0x10] 0x7e617b56a0

--------------------------------
Class: NiagaraDataInterfaceArrayNiagaraID.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraID[] IntData;//[Offset: 0x78, Size: 0x10] 0x7e617b5600

--------------------------------
Class: NiagaraID
	int Index;//[Offset: 0x0, Size: 0x4] 0x7e61560300
	int AcquireTag;//[Offset: 0x4, Size: 0x4] 0x7e61560380

--------------------------------
Class: NiagaraDataInterfaceAsyncGpuTrace.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int MaxTracesPerParticle;//[Offset: 0x34, Size: 0x4] 0x7e617f6300
	int MaxRetraces;//[Offset: 0x38, Size: 0x4] 0x7e617f4280
	byte TraceProvider;//[Offset: 0x3c, Size: 0x1] 0x7e617f4300

--------------------------------
Class: NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8] 0x7e617f6280

--------------------------------
Class: NiagaraDataInterfaceAudioOscilloscope.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8] 0x7e617f6100
	int Resolution;//[Offset: 0x40, Size: 0x4] 0x7e617f6180
	float ScopeInMilliseconds;//[Offset: 0x44, Size: 0x4] 0x7e617f6200

--------------------------------
Class: NiagaraDataInterfaceAudioPlayer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundBase* SoundToPlay;//[Offset: 0x38, Size: 0x8] 0x7e617f5d80
	SoundAttenuation* Attenuation;//[Offset: 0x40, Size: 0x8] 0x7e617f5e00
	SoundConcurrency* Concurrency;//[Offset: 0x48, Size: 0x8] 0x7e617f5e80
	FName[] ParameterNames;//[Offset: 0x50, Size: 0x10] 0x7e617b5560
	bool bLimitPlaysPerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e617f5f80
	int MaxPlaysPerTick;//[Offset: 0x64, Size: 0x4] 0x7e617f6000
	bool bStopWhenComponentIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7e617f6080

--------------------------------
Class: NiagaraDataInterfaceAudioSpectrum.NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Resolution;//[Offset: 0x40, Size: 0x4] 0x7e617f5b80
	float MinimumFrequency;//[Offset: 0x44, Size: 0x4] 0x7e617f5c00
	float MaximumFrequency;//[Offset: 0x48, Size: 0x4] 0x7e617f5c80
	float NoiseFloorDb;//[Offset: 0x4c, Size: 0x4] 0x7e617f5d00

--------------------------------
Class: NiagaraDataInterfaceCamera.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int PlayerControllerIndex;//[Offset: 0x34, Size: 0x4] 0x7e617f5a80
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e617f5b00

--------------------------------
Class: NiagaraDataInterfaceCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] ShaderLUT;//[Offset: 0x38, Size: 0x10] 0x7e617b54c0
	float LUTMinTime;//[Offset: 0x48, Size: 0x4] 0x7e617f5680
	float LUTMaxTime;//[Offset: 0x4c, Size: 0x4] 0x7e617f5700
	float LUTInvTimeRange;//[Offset: 0x50, Size: 0x4] 0x7e617f5780
	float LUTNumSamplesMinusOne;//[Offset: 0x54, Size: 0x4] 0x7e617f5800
	bool bUseLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1] 0x7e617f5880
	bool bExposeCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1] 0x7e617f5900
	FName ExposedName;//[Offset: 0x60, Size: 0x8] 0x7e617f5980
	Texture2D* ExposedTexture;//[Offset: 0x68, Size: 0x8] 0x7e617f5a00

--------------------------------
Class: NiagaraDataInterfaceColorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve RedCurve;//[Offset: 0x70, Size: 0x80] 0x7e617f5400
	RichCurve GreenCurve;//[Offset: 0xf0, Size: 0x80] 0x7e617f5480
	RichCurve BlueCurve;//[Offset: 0x170, Size: 0x80] 0x7e617f5500
	RichCurve AlphaCurve;//[Offset: 0x1f0, Size: 0x80] 0x7e617f5580

--------------------------------
Class: NiagaraDataInterfaceCubeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	TextureCube* Texture;//[Offset: 0x38, Size: 0x8] 0x7e617f5300
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20] 0x7e617f5380

--------------------------------
Class: NiagaraDataInterfaceCurlNoise.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 Seed;//[Offset: 0x34, Size: 0x4] 0x7e617f7380

--------------------------------
Class: NiagaraDataInterfaceCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve Curve;//[Offset: 0x70, Size: 0x80] 0x7e617f7300

--------------------------------
Class: NiagaraDataInterfaceDebugDraw.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 OverrideMaxLineInstances;//[Offset: 0x34, Size: 0x4] 0x7e617f7280

--------------------------------
Class: NiagaraDataInterfaceEmitterProperties.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraDataInterfaceEmitterBinding EmitterBinding;//[Offset: 0x34, Size: 0xc] 0x7e617f7200

--------------------------------
Class: NiagaraDataInterfaceEmitterBinding
	enum BindingMode;//[Offset: 0x0, Size: 0x4] 0x7e84e25f60
	FName EmitterName;//[Offset: 0x4, Size: 0x8] 0x7e61543680

--------------------------------
Class: NiagaraParticleCallbackHandler.Interface.Object
	void ReceiveParticleData(out const BasicParticleData[] Data, NiagaraSystem* NiagaraSystem, out const Vector SimulationPositionOffset);// 0x231f58ebd041 0x7e617e4bc0

--------------------------------
Class: BasicParticleData
	Vector Position;//[Offset: 0x0, Size: 0x18] 0x7e61543480
	float Size;//[Offset: 0x18, Size: 0x4] 0x7e61543500
	Vector Velocity;//[Offset: 0x20, Size: 0x18] 0x7e61543580

--------------------------------
Class: NiagaraDataInterfaceExport.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding CallbackHandlerParameter;//[Offset: 0x38, Size: 0x20] 0x7e617f6e80
	enum GPUAllocationMode;//[Offset: 0x58, Size: 0x1] 0x7e617b5380
	int GPUAllocationFixedSize;//[Offset: 0x5c, Size: 0x4] 0x7e617f6f80
	float GPUAllocationPerParticleSize;//[Offset: 0x60, Size: 0x4] 0x7e617f7000

--------------------------------
Class: NiagaraDataInterfaceGBuffer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumCellsX;//[Offset: 0x34, Size: 0x4] 0x7e617f6b80
	int NumCellsY;//[Offset: 0x38, Size: 0x4] 0x7e617f6c00
	int NumCellsMaxAxis;//[Offset: 0x3c, Size: 0x4] 0x7e617f6c80
	int NumAttributes;//[Offset: 0x40, Size: 0x4] 0x7e617f6d00
	bool SetGridFromMaxAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7e617f6d80
	Vector2D WorldBBoxSize;//[Offset: 0x48, Size: 0x10] 0x7e617f6e00

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x58, Size: 0x20] 0x7e617f8280
	enum OverrideBufferFormat;//[Offset: 0x78, Size: 0x1] 0x7e617b52e0
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1] 0x7e617f8380
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0xd0, Size: 0x50] 0x7e6167bc80
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x232358ebd041 0x7e617e4840
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x232258ebd041 0x7e617e4920
	bool FillTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, int AttributeIndex);// 0x232158ebd041 0x7e617e4a00
	bool FillRawTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, out int TilesX, out int TilesY);// 0x232058ebd041 0x7e617e4ae0

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollectionReader.NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0x120, Size: 0x10] 0x7e617f8180
	FString DIName;//[Offset: 0x130, Size: 0x10] 0x7e617f8200

--------------------------------
Class: NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector NumCells;//[Offset: 0x34, Size: 0xc] 0x7e617f7f00
	float CellSize;//[Offset: 0x40, Size: 0x4] 0x7e617f7f80
	int NumCellsMaxAxis;//[Offset: 0x44, Size: 0x4] 0x7e617f8000
	enum SetResolutionMethod;//[Offset: 0x48, Size: 0x4] 0x7e617b7b80
	Vector WorldBBoxSize;//[Offset: 0x50, Size: 0x18] 0x7e617f8100

--------------------------------
Class: NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0x68, Size: 0x4] 0x7e617f7400
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x70, Size: 0x20] 0x7e617f7480
	enum OverrideBufferFormat;//[Offset: 0x90, Size: 0x1] 0x7e617b7ae0
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x7e617f7580
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x232758ebd041 0x7e617e44c0
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x232658ebd041 0x7e617e45a0
	bool FillVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, int AttributeIndex);// 0x232558ebd041 0x7e617e4680
	bool FillRawVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, out int TilesX, out int TilesY, out int TileZ);// 0x232458ebd041 0x7e617e4760

--------------------------------
Class: NiagaraDataInterfaceGrid3DCollectionReader.NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xe8, Size: 0x10] 0x7e617f9400
	FString DIName;//[Offset: 0xf8, Size: 0x10] 0x7e617f9480

--------------------------------
Class: NiagaraDataInterfaceIntRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntPoint Size;//[Offset: 0x34, Size: 0x8] 0x7e617f9200
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x40, Size: 0x20] 0x7e617f9280
	<uint64,TextureRenderTarget2D*> ManagedRenderTargets;//[Offset: 0x60, Size: 0x50] 0x7e6167bbc0

--------------------------------
Class: NiagaraDataInterfaceLandscape.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* SourceLandscape;//[Offset: 0x38, Size: 0x8] 0x7e617f9080
	enum SourceMode;//[Offset: 0x40, Size: 0x1] 0x7e617b79a0
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0x48, Size: 0x10] 0x7e617b7a40

--------------------------------
Class: NiagaraDataInterfaceMeshRendererInfo.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraMeshRendererProperties* MeshRenderer;//[Offset: 0x38, Size: 0x8] 0x7e617f9000

--------------------------------
Class: NiagaraMeshRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraMeshRendererMeshProperties[] Meshes;//[Offset: 0xd0, Size: 0x10] 0x7e617b8da0
	enum SourceMode;//[Offset: 0xe0, Size: 0x1] 0x7e617b8e40
	enum SortMode;//[Offset: 0xe1, Size: 0x1] 0x7e617b8ee0
	bool bOverrideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe2, Size: 0x1] 0x7e61800a00
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe2, Size: 0x1] 0x7e61800a80
	bool bGpuLowLatencyTranslucency;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe2, Size: 0x1] 0x7e61800b00
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe2, Size: 0x1] 0x7e61800b80
	bool bEnableFrustumCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe2, Size: 0x1] 0x7e61800c00
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe2, Size: 0x1] 0x7e61800c80
	bool bEnableMeshFlipbook;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe2, Size: 0x1] 0x7e61800d00
	NiagaraMeshMaterialOverride[] OverrideMaterials;//[Offset: 0xe8, Size: 0x10] 0x7e617b8f80
	Vector2D SubImageSize;//[Offset: 0xf8, Size: 0x10] 0x7e61800e00
	enum FacingMode;//[Offset: 0x108, Size: 0x1] 0x7e617b9020
	bool bLockedAxisEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x109, Size: 0x1] 0x7e61800f00
	Vector LockedAxis;//[Offset: 0x110, Size: 0x18] 0x7e61800f80
	enum LockedAxisSpace;//[Offset: 0x128, Size: 0x1] 0x7e617b6780
	float MinCameraDistance;//[Offset: 0x12c, Size: 0x4] 0x7e61801080
	float MaxCameraDistance;//[Offset: 0x130, Size: 0x4] 0x7e617ff800
	uint32 RendererVisibility;//[Offset: 0x134, Size: 0x4] 0x7e617ff880
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x138, Size: 0x58] 0x7e617ff900
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x190, Size: 0x58] 0x7e617ff980
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x1e8, Size: 0x58] 0x7e617ffa00
	NiagaraVariableAttributeBinding MeshOrientationBinding;//[Offset: 0x240, Size: 0x58] 0x7e617ffa80
	NiagaraVariableAttributeBinding ScaleBinding;//[Offset: 0x298, Size: 0x58] 0x7e617ffb00
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x2f0, Size: 0x58] 0x7e617ffb80
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x348, Size: 0x58] 0x7e617ffc00
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x3a0, Size: 0x58] 0x7e617ffc80
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x3f8, Size: 0x58] 0x7e617ffd00
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x450, Size: 0x58] 0x7e617ffd80
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x4a8, Size: 0x58] 0x7e617ffe00
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x500, Size: 0x58] 0x7e617ffe80
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x558, Size: 0x58] 0x7e617fff00
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x5b0, Size: 0x58] 0x7e617fff80
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x608, Size: 0x58] 0x7e617fe780
	NiagaraVariableAttributeBinding MeshIndexBinding;//[Offset: 0x660, Size: 0x58] 0x7e617fe800
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x6b8, Size: 0x10] 0x7e617b6820
	NiagaraVariableAttributeBinding PrevPositionBinding;//[Offset: 0x6c8, Size: 0x58] 0x7e617fe900
	NiagaraVariableAttributeBinding PrevScaleBinding;//[Offset: 0x720, Size: 0x58] 0x7e617fe980
	NiagaraVariableAttributeBinding PrevMeshOrientationBinding;//[Offset: 0x778, Size: 0x58] 0x7e617fea00
	NiagaraVariableAttributeBinding PrevCameraOffsetBinding;//[Offset: 0x7d0, Size: 0x58] 0x7e617fea80
	NiagaraVariableAttributeBinding PrevVelocityBinding;//[Offset: 0x828, Size: 0x58] 0x7e617feb00
	StaticMesh* ParticleMesh;//[Offset: 0x8e8, Size: 0x8] 0x7e617feb80
	Vector PivotOffset;//[Offset: 0x8f0, Size: 0x18] 0x7e617fec00
	enum PivotOffsetSpace;//[Offset: 0x908, Size: 0x1] 0x7e617b68c0

--------------------------------
Class: NiagaraMeshRendererMeshProperties
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x8] 0x7e6154bf80
	NiagaraUserParameterBinding UserParamBinding;//[Offset: 0x8, Size: 0x20] 0x7e6154c000
	Vector Scale;//[Offset: 0x28, Size: 0x18] 0x7e6154c080
	Rotator Rotation;//[Offset: 0x40, Size: 0x18] 0x7e6154c100
	Vector PivotOffset;//[Offset: 0x58, Size: 0x18] 0x7e6154c180
	enum PivotOffsetSpace;//[Offset: 0x70, Size: 0x1] 0x7e84e25100

--------------------------------
Class: NiagaraMeshMaterialOverride
	MaterialInterface* ExplicitMat;//[Offset: 0x0, Size: 0x8] 0x7e6154c280
	NiagaraUserParameterBinding UserParamBinding;//[Offset: 0x8, Size: 0x20] 0x7e6154c300

--------------------------------
Class: NiagaraMaterialAttributeBinding
	FName MaterialParameterName;//[Offset: 0x0, Size: 0x8] 0x7e61542380
	NiagaraVariableBase NiagaraVariable;//[Offset: 0x8, Size: 0xc] 0x7e61542400
	NiagaraVariableBase ResolvedNiagaraVariable;//[Offset: 0x14, Size: 0xc] 0x7e61542480
	NiagaraVariableBase NiagaraChildVariable;//[Offset: 0x20, Size: 0xc] 0x7e61542500

--------------------------------
Class: NiagaraDataInterfaceNeighborGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 MaxNeighborsPerCell;//[Offset: 0x68, Size: 0x4] 0x7e617f8f80

--------------------------------
Class: NiagaraDataInterfaceOcclusion.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceParticleRead.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0x38, Size: 0x10] 0x7e617f8f00

--------------------------------
Class: NiagaraDataInterfacePlatformSet.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x38, Size: 0x30] 0x7e617f8e80

--------------------------------
Class: NiagaraDataInterfaceRasterizationGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0x68, Size: 0x4] 0x7e617f8d00
	float Precision;//[Offset: 0x6c, Size: 0x4] 0x7e617f8d80
	int ResetValue;//[Offset: 0x70, Size: 0x4] 0x7e617f8e00

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntPoint Size;//[Offset: 0x34, Size: 0x8] 0x7e617f8880
	enum MipMapGeneration;//[Offset: 0x3c, Size: 0x1] 0x7e617b7860
	enum MipMapGenerationType;//[Offset: 0x3d, Size: 0x1] 0x7e617b7900
	byte OverrideRenderTargetFormat;//[Offset: 0x3e, Size: 0x1] 0x7e617f8a00
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f, Size: 0x1] 0x7e617f8a80
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f, Size: 0x1] 0x7e617f8b00
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x40, Size: 0x20] 0x7e617f8b80
	<uint64,TextureRenderTarget2D*> ManagedRenderTargets;//[Offset: 0xb0, Size: 0x50] 0x7e6167bb00

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2DArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0x34, Size: 0xc] 0x7e617f8500
	byte OverrideRenderTargetFormat;//[Offset: 0x40, Size: 0x1] 0x7e617f8580
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x7e617f8600
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x7e617f8680
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x48, Size: 0x20] 0x7e617f8700
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x68, Size: 0x50] 0x7e6167ba40

--------------------------------
Class: NiagaraDataInterfaceRenderTargetCube.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Size;//[Offset: 0x34, Size: 0x4] 0x7e617fa280
	byte OverrideRenderTargetFormat;//[Offset: 0x38, Size: 0x1] 0x7e617fa300
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x7e617fa380
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x7e617fa400
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x40, Size: 0x20] 0x7e617fa480
	<uint64,TextureRenderTargetCube*> ManagedRenderTargets;//[Offset: 0x60, Size: 0x50] 0x7e6167b980

--------------------------------
Class: NiagaraDataInterfaceRenderTargetVolume.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0x34, Size: 0xc] 0x7e617f9f00
	byte OverrideRenderTargetFormat;//[Offset: 0x40, Size: 0x1] 0x7e617f9f80
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x7e617fa000
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x7e617fa080
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x48, Size: 0x20] 0x7e617fa100
	<uint64,TextureRenderTargetVolume*> ManagedRenderTargets;//[Offset: 0x68, Size: 0x50] 0x7e6167b8c0

--------------------------------
Class: NiagaraDataInterfaceRigidMeshCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString Tag;//[Offset: 0x38, Size: 0x10] 0x7e617f9d80
	bool OnlyUseMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e617f9e00
	int MaxNumPrimitives;//[Offset: 0x4c, Size: 0x4] 0x7e617f9e80

--------------------------------
Class: NiagaraDataInterfaceSimpleCounter.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum GpuSyncMode;//[Offset: 0x34, Size: 0x4] 0x7e617b77c0
	int InitialValue;//[Offset: 0x38, Size: 0x4] 0x7e617f9d00

--------------------------------
Class: NiagaraDataInterfaceSkeletalMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1] 0x7e617b74a0
	Actor* Source;//[Offset: 0x38, Size: 0x8] 0x7e617f9680
	NiagaraUserParameterBinding MeshUserParameter;//[Offset: 0x40, Size: 0x20] 0x7e617f9700
	SkeletalMeshComponent* SourceComponent;//[Offset: 0x60, Size: 0x8] 0x7e617f9780
	enum SkinningMode;//[Offset: 0x68, Size: 0x1] 0x7e617b7540
	FName[] SamplingRegions;//[Offset: 0x70, Size: 0x10] 0x7e617b75e0
	int WholeMeshLOD;//[Offset: 0x80, Size: 0x4] 0x7e617f9900
	FName[] FilteredBones;//[Offset: 0x88, Size: 0x10] 0x7e617b7680
	FName[] FilteredSockets;//[Offset: 0x98, Size: 0x10] 0x7e617b7720
	FName ExcludeBoneName;//[Offset: 0xa8, Size: 0x8] 0x7e617f9a80
	bool bExcludeBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7e617f9b00
	int UvSetIndex;//[Offset: 0xb4, Size: 0x4] 0x7e617f9b80
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x7e617f9c00

--------------------------------
Class: NiagaraDataInterfaceSpline.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* Source;//[Offset: 0x38, Size: 0x8] 0x7e617fb500
	NiagaraUserParameterBinding SplineUserParameter;//[Offset: 0x40, Size: 0x20] 0x7e617fb580
	bool bUseLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e617f9500
	int NumLUTSteps;//[Offset: 0x64, Size: 0x4] 0x7e617f9580

--------------------------------
Class: NiagaraDataInterfaceStaticMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1] 0x7e617b7360
	StaticMesh* DefaultMesh;//[Offset: 0x38, Size: 0x8] 0x7e617fb200
	Actor* Source;//[Offset: 0x40, Size: 0x8] 0x7e617fb280
	StaticMeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8] 0x7e617fb300
	NDIStaticMeshSectionFilter SectionFilter;//[Offset: 0x50, Size: 0x10] 0x7e617fb380
	bool bUsePhysicsBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e617fb400
	FName[] FilteredSockets;//[Offset: 0x68, Size: 0x10] 0x7e617b7400

--------------------------------
Class: NDIStaticMeshSectionFilter
	int[] AllowedMaterialSlots;//[Offset: 0x0, Size: 0x10] 0x7e84e261e0

--------------------------------
Class: NiagaraDataInterfaceTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture* Texture;//[Offset: 0x38, Size: 0x8] 0x7e617fb080
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20] 0x7e617fb100

--------------------------------
Class: NiagaraDataInterfaceUObjectPropertyReader.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding UObjectParameterBinding;//[Offset: 0x38, Size: 0x20] 0x7e617fad00
	NiagaraUObjectPropertyReaderRemap[] PropertyRemap;//[Offset: 0x58, Size: 0x10] 0x7e617b7220
	Actor* SourceActor;//[Offset: 0x68, Size: 0x1c] 0x7e617fae00
	ClassPtrProperty SourceActorComponentClass;//[Size: 0x8] 0x7e617b72c0
	void SetUObjectReaderPropertyRemap(NiagaraComponent* NiagaraComponent, FName UserParameterName, FName GraphName, FName RemapName);// 0x232858ebd041 0x7e617e43e0

--------------------------------
Class: NiagaraUObjectPropertyReaderRemap
	FName GraphName;//[Offset: 0x0, Size: 0x8] 0x7e61544f80
	FName RemapName;//[Offset: 0x8, Size: 0x8] 0x7e61545000

--------------------------------
Class: NiagaraDataInterfaceVector2DCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x7e617fac00
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x7e617fac80

--------------------------------
Class: NiagaraDataInterfaceVector4Curve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x7e617faa00
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x7e617faa80
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80] 0x7e617fab00
	RichCurve WCurve;//[Offset: 0x1f0, Size: 0x80] 0x7e617fab80

--------------------------------
Class: NiagaraDataInterfaceVectorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x7e617fa880
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x7e617fa900
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80] 0x7e617fa980

--------------------------------
Class: NiagaraDataInterfaceVectorField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VectorField* Field;//[Offset: 0x38, Size: 0x8] 0x7e617fa680
	bool bTileX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7e617fa700
	bool bTileY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7e617fa780
	bool bTileZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7e617fa800

--------------------------------
Class: NiagaraDataInterfaceVolumeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VolumeTexture* Texture;//[Offset: 0x38, Size: 0x8] 0x7e617fa580
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20] 0x7e617fa600

--------------------------------
Class: NiagaraDebugHUDSettings.Object
	NiagaraDebugHUDSettingsData Data;//[Offset: 0x48, Size: 0x220] 0x7e617fc600

--------------------------------
Class: NiagaraDebugHUDSettingsData
	bool bHudEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61549000
	bool bValidateSystemSimulationDataBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e61549080
	bool bValidateParticleDataBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e61549100
	bool bOverviewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7e61549180
	enum OverviewMode;//[Offset: 0x4, Size: 0x4] 0x7e84e27360
	enum OverviewFont;//[Offset: 0x8, Size: 0x4] 0x7e84e272c0
	Vector2D OverviewLocation;//[Offset: 0x10, Size: 0x10] 0x7e61549300
	FString ActorFilter;//[Offset: 0x20, Size: 0x10] 0x7e61549380
	bool bComponentFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61549400
	FString ComponentFilter;//[Offset: 0x38, Size: 0x10] 0x7e61549480
	bool bSystemFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e61547400
	FString SystemFilter;//[Offset: 0x50, Size: 0x10] 0x7e61547480
	bool bEmitterFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e61547500
	FString EmitterFilter;//[Offset: 0x68, Size: 0x10] 0x7e61547580
	bool bActorFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7e61547600
	enum SystemDebugVerbosity;//[Offset: 0x7c, Size: 0x4] 0x7e84e27220
	enum SystemEmitterVerbosity;//[Offset: 0x80, Size: 0x4] 0x7e84e27180
	bool bSystemShowBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7e61547780
	bool bSystemShowActiveOnlyInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x7e61547800
	bool bShowSystemVariables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1] 0x7e61547880
	NiagaraDebugHUDVariable[] SystemVariables;//[Offset: 0x88, Size: 0x10] 0x7e84e270e0
	NiagaraDebugHudTextOptions SystemTextOptions;//[Offset: 0x98, Size: 0x18] 0x7e61547980
	bool bShowParticleVariables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x7e61547a00
	bool bEnableGpuParticleReadback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1] 0x7e61547a80
	bool bShowParticleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1] 0x7e61547b00
	NiagaraDebugHUDVariable[] ParticlesVariables;//[Offset: 0xb8, Size: 0x10] 0x7e84e27040
	NiagaraDebugHudTextOptions ParticleTextOptions;//[Offset: 0xc8, Size: 0x18] 0x7e61547c00
	bool bShowParticlesVariablesWithSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7e61547c80
	bool bShowParticleVariablesVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x7e61547d00
	bool bUseMaxParticlesToDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x7e61547d80
	bool bUseParticleDisplayClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 0x1] 0x7e61547e00
	Vector2D ParticleDisplayClip;//[Offset: 0xe8, Size: 0x10] 0x7e61547e80
	bool bUseParticleDisplayCenterRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x7e61547f00
	float ParticleDisplayCenterRadius;//[Offset: 0xfc, Size: 0x4] 0x7e61547f80
	int MaxParticlesToDisplay;//[Offset: 0x100, Size: 0x4] 0x7e61548000
	int PerfReportFrames;//[Offset: 0x104, Size: 0x4] 0x7e61548080
	enum PerfSampleMode;//[Offset: 0x108, Size: 0x4] 0x7e84e26fa0
	enum PerfGraphMode;//[Offset: 0x10c, Size: 0x4] 0x7e84e26f00
	int PerfHistoryFrames;//[Offset: 0x110, Size: 0x4] 0x7e61548200
	float PerfGraphTimeRange;//[Offset: 0x114, Size: 0x4] 0x7e61548280
	Vector2D PerfGraphSize;//[Offset: 0x118, Size: 0x10] 0x7e61548300
	LinearColor PerfGraphAxisColor;//[Offset: 0x128, Size: 0x10] 0x7e61548380
	bool bEnableSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x7e61548400
	int SmoothingWidth;//[Offset: 0x13c, Size: 0x4] 0x7e61546380
	LinearColor DefaultBackgroundColor;//[Offset: 0x140, Size: 0x10] 0x7e61546400
	LinearColor OverviewHeadingColor;//[Offset: 0x150, Size: 0x10] 0x7e61546480
	LinearColor OverviewDetailColor;//[Offset: 0x160, Size: 0x10] 0x7e61546500
	LinearColor OverviewDetailHighlightColor;//[Offset: 0x170, Size: 0x10] 0x7e61546580
	LinearColor InWorldErrorTextColor;//[Offset: 0x180, Size: 0x10] 0x7e61546600
	LinearColor InWorldTextColor;//[Offset: 0x190, Size: 0x10] 0x7e61546680
	LinearColor MessageInfoTextColor;//[Offset: 0x1a0, Size: 0x10] 0x7e61546700
	LinearColor MessageWarningTextColor;//[Offset: 0x1b0, Size: 0x10] 0x7e61546780
	LinearColor MessageErrorTextColor;//[Offset: 0x1c0, Size: 0x10] 0x7e61546800
	float SystemColorTableOpacity;//[Offset: 0x1d0, Size: 0x4] 0x7e61546880
	uint32 SystemColorSeed;//[Offset: 0x1d4, Size: 0x4] 0x7e61546900
	Vector SystemColorHSVMin;//[Offset: 0x1d8, Size: 0x18] 0x7e61546980
	Vector SystemColorHSVMax;//[Offset: 0x1f0, Size: 0x18] 0x7e61546a00
	enum PlaybackMode;//[Offset: 0x208, Size: 0x1] 0x7e84e26e60
	bool bPlaybackRateEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1] 0x7e61546b00
	float PlaybackRate;//[Offset: 0x20c, Size: 0x4] 0x7e61546b80
	bool bLoopTimeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x7e61546c00
	float LoopTime;//[Offset: 0x214, Size: 0x4] 0x7e61546c80
	bool bShowGlobalBudgetInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x7e61546d00

--------------------------------
Class: NiagaraDebugHUDVariable
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61546d80
	FString Name;//[Offset: 0x8, Size: 0x10] 0x7e61546e00

--------------------------------
Class: NiagaraDebugHudTextOptions
	enum Font;//[Offset: 0x0, Size: 0x4] 0x7e84e26dc0
	enum HorizontalAlignment;//[Offset: 0x4, Size: 0x1] 0x7e84e26d20
	enum VerticalAlignment;//[Offset: 0x5, Size: 0x1] 0x7e84e26c80
	Vector2D ScreenOffset;//[Offset: 0x8, Size: 0x10] 0x7e61547000

--------------------------------
Class: NiagaraEditorDataBase.Object

--------------------------------
Class: NiagaraEditorParametersAdapterBase.Object

--------------------------------
Class: NiagaraSignificanceHandlerDistance.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSignificanceHandlerAge.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction_SpawnParticles.NiagaraEventReceiverEmitterAction.Object
	uint32 NumParticles;//[Offset: 0x28, Size: 0x4] 0x7e617fd200

--------------------------------
Class: NiagaraFunctionLibrary.BlueprintFunctionLibrary.Object
	NiagaraComponent* SpawnSystemAttachedWithParams(out FXSystemSpawnParameters SpawnParams);// 0x233858ebd041 0x7e617e6fa0
	NiagaraComponent* SpawnSystemAttached(NiagaraSystem* SystemTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x233758ebd041 0x7e617e7080
	NiagaraComponent* SpawnSystemAtLocationWithParams(out FXSystemSpawnParameters SpawnParams);// 0x233658ebd041 0x7e617e7160
	NiagaraComponent* SpawnSystemAtLocation(const Object* WorldContextObject, NiagaraSystem* SystemTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x233558ebd041 0x7e617e7240
	void SetVolumeTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, VolumeTexture* Texture);// 0x237658ebd041 0x7e617e7320
	void SetTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture* Texture);// 0x233358ebd041 0x7e617e3a40
	void SetTexture2DArrayObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture2DArray* Texture);// 0x233258ebd041 0x7e617e3b20
	void SetSkeletalMeshDataInterfaceSamplingRegions(NiagaraComponent* NiagaraSystem, FString OverrideName, out const FName[] SamplingRegions);// 0x233158ebd041 0x7e617e3c00
	void SetComponentNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject, PrimitiveComponent* Primitive, int CollisionGroup);// 0x233058ebd041 0x7e617e3ce0
	void SetActorNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject, Actor* Actor, int CollisionGroup);// 0x232f58ebd041 0x7e617e3dc0
	void ReleaseNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject, int CollisionGroup);// 0x232e58ebd041 0x7e617e3ea0
	void OverrideSystemUserVariableStaticMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMeshComponent* StaticMeshComponent);// 0x232d58ebd041 0x7e617e3f80
	void OverrideSystemUserVariableStaticMesh(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMesh* StaticMesh);// 0x232c58ebd041 0x7e617e4060
	void OverrideSystemUserVariableSkeletalMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, SkeletalMeshComponent* SkeletalMeshComponent);// 0x232b58ebd041 0x7e617e4140
	NiagaraParameterCollectionInstance* GetNiagaraParameterCollection(Object* WorldContextObject, NiagaraParameterCollection* Collection);// 0x232a58ebd041 0x7e617e4220
	int AcquireNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject);// 0x232958ebd041 0x7e617e4300

--------------------------------
Class: FXSystemSpawnParameters

--------------------------------
Class: NiagaraLensEffectBase.NiagaraActor.Actor.Object
	Transform DesiredRelativeTransform;//[Offset: 0x290, Size: 0x60] 0x7e617ff400
	float BaseAuthoredFOV;//[Offset: 0x2f0, Size: 0x4] 0x7e617ff480
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 0x1] 0x7e617ff500
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 0x1] 0x7e617ff580
	class Actor[] EmittersToTreatAsSame;//[Offset: 0x2f8, Size: 0x10] 0x7e617b6a00
	PlayerCameraManager* OwningCameraManager;//[Offset: 0x308, Size: 0x8] 0x7e617ff600

--------------------------------
Class: NiagaraLightRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x7e617fed00
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1] 0x7e617fed80
	bool bAlphaScalesBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd0, Size: 0x1] 0x7e617fee00
	float RadiusScale;//[Offset: 0xd4, Size: 0x4] 0x7e617fee80
	float DefaultExponent;//[Offset: 0xd8, Size: 0x4] 0x7e617fef00
	Vector ColorAdd;//[Offset: 0xe0, Size: 0x18] 0x7e617fef80
	int RendererVisibility;//[Offset: 0xf8, Size: 0x4] 0x7e617ff000
	NiagaraVariableAttributeBinding LightRenderingEnabledBinding;//[Offset: 0x100, Size: 0x58] 0x7e617ff080
	NiagaraVariableAttributeBinding LightExponentBinding;//[Offset: 0x158, Size: 0x58] 0x7e617ff100
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x1b0, Size: 0x58] 0x7e617ff180
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x208, Size: 0x58] 0x7e617ff200
	NiagaraVariableAttributeBinding RadiusBinding;//[Offset: 0x260, Size: 0x58] 0x7e617ff280
	NiagaraVariableAttributeBinding VolumetricScatteringBinding;//[Offset: 0x2b8, Size: 0x58] 0x7e617ff300
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x310, Size: 0x58] 0x7e617ff380

--------------------------------
Class: NiagaraMessageDataBase.Object

--------------------------------
Class: NiagaraParameterDefinitionsBase.Object

--------------------------------
Class: NiagaraBaselineController_Basic.NiagaraBaselineController.Object
	int NumInstances;//[Offset: 0x68, Size: 0x4] 0x7e61803180
	NiagaraComponent*[] SpawnedComponents;//[Offset: 0x70, Size: 0x10] 0x7e617b8bc0

--------------------------------
Class: NiagaraPrecompileContainer.Object
	NiagaraScript*[] Scripts;//[Offset: 0x28, Size: 0x10] 0x7e617b8b20
	NiagaraSystem* System;//[Offset: 0x38, Size: 0x8] 0x7e61803000

--------------------------------
Class: NiagaraPreviewBase.Actor.Object
	void SetSystem(NiagaraSystem* InSystem);// 0x234f58ebd041 0x7e617e5b80
	void SetLabelText(out const FText InXAxisText, out const FText InYAxisText);// 0x234e58ebd041 0x7e617e5c60

--------------------------------
Class: NiagaraPreviewAxis.Object
	int Num();// 0x235158ebd041 0x7e617e59c0
	void ApplyToPreview(NiagaraComponent* PreviewComponent, int PreviewIndex, bool bIsXAxis, out FString OutLabelText);// 0x235058ebd041 0x7e617e5aa0

--------------------------------
Class: NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	FName Param;//[Offset: 0x28, Size: 0x8] 0x7e61802a80
	int Count;//[Offset: 0x30, Size: 0x4] 0x7e61802b00

--------------------------------
Class: NiagaraPreviewAxis_InterpParamInt32.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	int Min;//[Offset: 0x34, Size: 0x4] 0x7e61802980
	int Max;//[Offset: 0x38, Size: 0x4] 0x7e61802a00

--------------------------------
Class: NiagaraPreviewAxis_InterpParamFloat.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	float Min;//[Offset: 0x34, Size: 0x4] 0x7e61802880
	float Max;//[Offset: 0x38, Size: 0x4] 0x7e61802900

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector2D.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector2D Min;//[Offset: 0x38, Size: 0x10] 0x7e61802780
	Vector2D Max;//[Offset: 0x48, Size: 0x10] 0x7e61802800

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector Min;//[Offset: 0x38, Size: 0x18] 0x7e61802680
	Vector Max;//[Offset: 0x50, Size: 0x18] 0x7e61802700

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector4.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector4 Min;//[Offset: 0x40, Size: 0x20] 0x7e61802580
	Vector4 Max;//[Offset: 0x60, Size: 0x20] 0x7e61802600

--------------------------------
Class: NiagaraPreviewAxis_InterpParamLinearColor.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	LinearColor Min;//[Offset: 0x34, Size: 0x10] 0x7e61802480
	LinearColor Max;//[Offset: 0x44, Size: 0x10] 0x7e61802500

--------------------------------
Class: NiagaraPreviewGrid.Actor.Object
	NiagaraSystem* System;//[Offset: 0x278, Size: 0x8] 0x7e61803f80
	enum ResetMode;//[Offset: 0x280, Size: 0x1] 0x7e617b88a0
	NiagaraPreviewAxis* PreviewAxisX;//[Offset: 0x288, Size: 0x8] 0x7e61804080
	NiagaraPreviewAxis* PreviewAxisY;//[Offset: 0x290, Size: 0x8] 0x7e61804100
	class NiagaraPreviewBase* PreviewClass;//[Offset: 0x298, Size: 0x8] 0x7e617b8940
	float SpacingX;//[Offset: 0x2a0, Size: 0x4] 0x7e61804180
	float SpacingY;//[Offset: 0x2a4, Size: 0x4] 0x7e61804200
	int NumX;//[Offset: 0x2a8, Size: 0x4] 0x7e61802180
	int NumY;//[Offset: 0x2ac, Size: 0x4] 0x7e61802200
	ChildActorComponent*[] PreviewComponents;//[Offset: 0x2b0, Size: 0x10] 0x7e617b89e0
	void SetPaused(bool bPaused);// 0x239758ebd041 0x7e617e9000
	void GetPreviews(out NiagaraComponent*[] OutPreviews);// 0x235458ebd041 0x7e617e5720
	void DeactivatePreviews();// 0x235358ebd041 0x7e617e5800
	void ActivatePreviews(bool bReset);// 0x235258ebd041 0x7e617e58e0

--------------------------------
Class: NiagaraRibbonRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0xd0, Size: 0x8] 0x7e61804b80
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0xd8, Size: 0x20] 0x7e61804c00
	enum FacingMode;//[Offset: 0xf8, Size: 0x1] 0x7e617b84e0
	NiagaraRibbonUVSettings UV0Settings;//[Offset: 0x100, Size: 0x38] 0x7e61804d00
	NiagaraRibbonUVSettings UV1Settings;//[Offset: 0x138, Size: 0x38] 0x7e61804d80
	enum DrawDirection;//[Offset: 0x170, Size: 0x1] 0x7e617b8580
	enum Shape;//[Offset: 0x171, Size: 0x1] 0x7e617b8620
	bool bEnableAccurateGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1] 0x7e61804f00
	int WidthSegmentationCount;//[Offset: 0x174, Size: 0x4] 0x7e61804f80
	int MultiPlaneCount;//[Offset: 0x178, Size: 0x4] 0x7e61805000
	int TubeSubdivisions;//[Offset: 0x17c, Size: 0x4] 0x7e61805080
	NiagaraRibbonShapeCustomVertex[] CustomVertices;//[Offset: 0x180, Size: 0x10] 0x7e617b86c0
	float CurveTension;//[Offset: 0x190, Size: 0x4] 0x7e61805180
	enum TessellationMode;//[Offset: 0x194, Size: 0x1] 0x7e617b8760
	int TessellationFactor;//[Offset: 0x198, Size: 0x4] 0x7e61805280
	bool bUseConstantFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1] 0x7e61803200
	float TessellationAngle;//[Offset: 0x1a0, Size: 0x4] 0x7e61803280
	bool bScreenSpaceTessellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1] 0x7e61803300
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x1a8, Size: 0x58] 0x7e61803380
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x200, Size: 0x58] 0x7e61803400
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x258, Size: 0x58] 0x7e61803480
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x2b0, Size: 0x58] 0x7e61803500
	NiagaraVariableAttributeBinding RibbonTwistBinding;//[Offset: 0x308, Size: 0x58] 0x7e61803580
	NiagaraVariableAttributeBinding RibbonWidthBinding;//[Offset: 0x360, Size: 0x58] 0x7e61803600
	NiagaraVariableAttributeBinding RibbonFacingBinding;//[Offset: 0x3b8, Size: 0x58] 0x7e61803680
	NiagaraVariableAttributeBinding RibbonIdBinding;//[Offset: 0x410, Size: 0x58] 0x7e61803700
	NiagaraVariableAttributeBinding RibbonLinkOrderBinding;//[Offset: 0x468, Size: 0x58] 0x7e61803780
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x4c0, Size: 0x58] 0x7e61803800
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x518, Size: 0x58] 0x7e61803880
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x570, Size: 0x58] 0x7e61803900
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x5c8, Size: 0x58] 0x7e61803980
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x620, Size: 0x58] 0x7e61803a00
	NiagaraVariableAttributeBinding RibbonUVDistance;//[Offset: 0x678, Size: 0x58] 0x7e61803a80
	NiagaraVariableAttributeBinding U0OverrideBinding;//[Offset: 0x6d0, Size: 0x58] 0x7e61803b00
	NiagaraVariableAttributeBinding V0RangeOverrideBinding;//[Offset: 0x728, Size: 0x58] 0x7e61803b80
	NiagaraVariableAttributeBinding U1OverrideBinding;//[Offset: 0x780, Size: 0x58] 0x7e61803c00
	NiagaraVariableAttributeBinding V1RangeOverrideBinding;//[Offset: 0x7d8, Size: 0x58] 0x7e61803c80
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x830, Size: 0x10] 0x7e617b8800
	NiagaraVariableAttributeBinding PrevPositionBinding;//[Offset: 0x840, Size: 0x58] 0x7e61803d80
	NiagaraVariableAttributeBinding PrevRibbonWidthBinding;//[Offset: 0x898, Size: 0x58] 0x7e61803e00
	NiagaraVariableAttributeBinding PrevRibbonFacingBinding;//[Offset: 0x8f0, Size: 0x58] 0x7e61803e80
	NiagaraVariableAttributeBinding PrevRibbonTwistBinding;//[Offset: 0x948, Size: 0x58] 0x7e61803f00

--------------------------------
Class: NiagaraRibbonUVSettings
	enum DistributionMode;//[Offset: 0x0, Size: 0x4] 0x7e84e22f40
	enum LeadingEdgeMode;//[Offset: 0x4, Size: 0x4] 0x7e84e22ea0
	enum TrailingEdgeMode;//[Offset: 0x8, Size: 0x4] 0x7e84e22e00
	float TilingLength;//[Offset: 0xc, Size: 0x4] 0x7e6154ce00
	Vector2D Offset;//[Offset: 0x10, Size: 0x10] 0x7e6154ce80
	Vector2D Scale;//[Offset: 0x20, Size: 0x10] 0x7e6154cf00
	bool bEnablePerParticleUOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e6154cf80
	bool bEnablePerParticleVRangeOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7e6154d000

--------------------------------
Class: NiagaraRibbonShapeCustomVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x10] 0x7e6154d080
	Vector2D Normal;//[Offset: 0x10, Size: 0x10] 0x7e6154d100
	float TextureV;//[Offset: 0x20, Size: 0x4] 0x7e6154d180

--------------------------------
Class: NiagaraScriptSourceBase.Object

--------------------------------
Class: NiagaraSettings.DeveloperSettings.Object
	bool bSystemsSupportLargeWorldCoordinates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61806000
	bool bEnforceStrictStackTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e61806080
	SoftObjectPath DefaultEffectType;//[Offset: 0x40, Size: 0x18] 0x7e61806100
	LinearColor PositionPinTypeColor;//[Offset: 0x58, Size: 0x10] 0x7e61806180
	FText[] QualityLevels;//[Offset: 0x68, Size: 0x10] 0x7e617b7f40
	<FString,FText> ComponentRendererWarningsPerClass;//[Offset: 0x78, Size: 0x50] 0x7e6167b800
	byte DefaultRenderTargetFormat;//[Offset: 0xc8, Size: 0x1] 0x7e61804280
	enum DefaultGridFormat;//[Offset: 0xc9, Size: 0x1] 0x7e617b7fe0
	enum DefaultRendererMotionVectorSetting;//[Offset: 0xcc, Size: 0x4] 0x7e617b8080
	enum DefaultPixelCoverageMode;//[Offset: 0xd0, Size: 0x1] 0x7e617b8120
	byte NDISkelMesh_GpuMaxInfluences;//[Offset: 0xd1, Size: 0x1] 0x7e61804480
	byte NDISkelMesh_GpuUniformSamplingFormat;//[Offset: 0xd2, Size: 0x1] 0x7e61804500
	byte NDISkelMesh_AdjacencyTriangleIndexFormat;//[Offset: 0xd3, Size: 0x1] 0x7e61804580
	bool NDIStaticMesh_AllowDistanceFields;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1] 0x7e61804600
	byte[] NDICollisionQuery_AsyncGpuTraceProviderOrder;//[Offset: 0xd8, Size: 0x10] 0x7e617b81c0

--------------------------------
Class: NiagaraSimulationStageGeneric.NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x40, Size: 0x58] 0x7e61805780
	enum IterationSource;//[Offset: 0x98, Size: 0x1] 0x7e617b7e00
	int Iterations;//[Offset: 0x9c, Size: 0x4] 0x7e61805880
	NiagaraVariableAttributeBinding NumIterationsBinding;//[Offset: 0xa0, Size: 0x58] 0x7e61805900
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1] 0x7e61805980
	enum ExecuteBehavior;//[Offset: 0xf9, Size: 0x1] 0x7e617b7ea0
	bool bDisablePartialParticleUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1] 0x7e61805a80
	NiagaraVariableDataInterfaceBinding DataInterface;//[Offset: 0x100, Size: 0x20] 0x7e61805b00
	bool bParticleIterationStateEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x7e61805b80
	NiagaraVariableAttributeBinding ParticleIterationStateBinding;//[Offset: 0x128, Size: 0x58] 0x7e61805c00
	IntPoint ParticleIterationStateRange;//[Offset: 0x180, Size: 0x8] 0x7e61805c80
	bool bGpuDispatchForceLinear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1] 0x7e61805d00
	bool bOverrideGpuDispatchNumThreads;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 0x1] 0x7e61805d80
	IntVector OverrideGpuDispatchNumThreads;//[Offset: 0x18c, Size: 0xc] 0x7e61805e00

--------------------------------
Class: NiagaraVariableDataInterfaceBinding
	NiagaraVariable BoundVariable;//[Offset: 0x0, Size: 0x20] 0x7e61542300

--------------------------------
Class: NiagaraSpriteRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0xd0, Size: 0x8] 0x7e61808100
	enum SourceMode;//[Offset: 0xd8, Size: 0x1] 0x7e617ba380
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0xe0, Size: 0x20] 0x7e61808200
	enum Alignment;//[Offset: 0x100, Size: 0x1] 0x7e617ba420
	enum FacingMode;//[Offset: 0x101, Size: 0x1] 0x7e617ba4c0
	Vector2D PivotInUVSpace;//[Offset: 0x108, Size: 0x10] 0x7e61808380
	float MacroUVRadius;//[Offset: 0x118, Size: 0x4] 0x7e61808400
	enum SortMode;//[Offset: 0x11c, Size: 0x1] 0x7e617b7c20
	Vector2D SubImageSize;//[Offset: 0x120, Size: 0x10] 0x7e61806400
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1] 0x7e61806480
	bool bRemoveHMDRollInVR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 0x1] 0x7e61806500
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x130, Size: 0x1] 0x7e61806580
	bool bGpuLowLatencyTranslucency;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x130, Size: 0x1] 0x7e61806600
	enum PixelCoverageMode;//[Offset: 0x131, Size: 0x1] 0x7e617b7cc0
	float PixelCoverageBlend;//[Offset: 0x134, Size: 0x4] 0x7e61806700
	float MinFacingCameraBlendDistance;//[Offset: 0x138, Size: 0x4] 0x7e61806780
	float MaxFacingCameraBlendDistance;//[Offset: 0x13c, Size: 0x4] 0x7e61806800
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1] 0x7e61806880
	float MinCameraDistance;//[Offset: 0x144, Size: 0x4] 0x7e61806900
	float MaxCameraDistance;//[Offset: 0x148, Size: 0x4] 0x7e61806980
	uint32 RendererVisibility;//[Offset: 0x14c, Size: 0x4] 0x7e61806a00
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x150, Size: 0x58] 0x7e61806a80
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x1a8, Size: 0x58] 0x7e61806b00
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x200, Size: 0x58] 0x7e61806b80
	NiagaraVariableAttributeBinding SpriteRotationBinding;//[Offset: 0x258, Size: 0x58] 0x7e61806c00
	NiagaraVariableAttributeBinding SpriteSizeBinding;//[Offset: 0x2b0, Size: 0x58] 0x7e61806c80
	NiagaraVariableAttributeBinding SpriteFacingBinding;//[Offset: 0x308, Size: 0x58] 0x7e61806d00
	NiagaraVariableAttributeBinding SpriteAlignmentBinding;//[Offset: 0x360, Size: 0x58] 0x7e61806d80
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x3b8, Size: 0x58] 0x7e61806e00
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x410, Size: 0x58] 0x7e61806e80
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x468, Size: 0x58] 0x7e61806f00
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x4c0, Size: 0x58] 0x7e61806f80
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x518, Size: 0x58] 0x7e61807000
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x570, Size: 0x58] 0x7e61807080
	NiagaraVariableAttributeBinding UVScaleBinding;//[Offset: 0x5c8, Size: 0x58] 0x7e61807100
	NiagaraVariableAttributeBinding PivotOffsetBinding;//[Offset: 0x620, Size: 0x58] 0x7e61807180
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x678, Size: 0x58] 0x7e61807200
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x6d0, Size: 0x58] 0x7e61807280
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x728, Size: 0x58] 0x7e61807300
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x780, Size: 0x58] 0x7e61807380
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x7d8, Size: 0x10] 0x7e617b7d60
	NiagaraVariableAttributeBinding PrevPositionBinding;//[Offset: 0x7e8, Size: 0x58] 0x7e61805380
	NiagaraVariableAttributeBinding PrevVelocityBinding;//[Offset: 0x840, Size: 0x58] 0x7e61805400
	NiagaraVariableAttributeBinding PrevSpriteRotationBinding;//[Offset: 0x898, Size: 0x58] 0x7e61805480
	NiagaraVariableAttributeBinding PrevSpriteSizeBinding;//[Offset: 0x8f0, Size: 0x58] 0x7e61805500
	NiagaraVariableAttributeBinding PrevSpriteFacingBinding;//[Offset: 0x948, Size: 0x58] 0x7e61805580
	NiagaraVariableAttributeBinding PrevSpriteAlignmentBinding;//[Offset: 0x9a0, Size: 0x58] 0x7e61805600
	NiagaraVariableAttributeBinding PrevCameraOffsetBinding;//[Offset: 0x9f8, Size: 0x58] 0x7e61805680
	NiagaraVariableAttributeBinding PrevPivotOffsetBinding;//[Offset: 0xa50, Size: 0x58] 0x7e61805700

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	NiagaraSystem* Template;//[Offset: 0x30, Size: 0x8] 0x7e6180a300
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x7e6180a380
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18] 0x7e6180a400
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18] 0x7e6180a480
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7e6180a500
	FXSystemComponent* GetSpawnedEffect(MeshComponent* MeshComp);// 0x235c58ebd041 0x7e617e89e0

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffectAdvanced.AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	bool bEnableNormalizedNotifyProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x7e6180a080
	FName NotifyProgressUserParameter;//[Offset: 0x74, Size: 0x8] 0x7e6180a100
	CurveParameterPair[] AnimCurves;//[Offset: 0x80, Size: 0x10] 0x7e617b9fc0
	float GetNotifyProgress(MeshComponent* MeshComp);// 0x235d58ebd041 0x7e617e8900

--------------------------------
Class: CurveParameterPair
	FName AnimCurveName;//[Offset: 0x0, Size: 0x8] 0x7e61562e80
	FName UserVariableName;//[Offset: 0x8, Size: 0x8] 0x7e61562f00

--------------------------------
Class: AnimNotify_PlayNiagaraEffect.AnimNotify.Object
	NiagaraSystem* Template;//[Offset: 0x38, Size: 0x8] 0x7e61809980
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18] 0x7e61809a00
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18] 0x7e61809a80
	Vector Scale;//[Offset: 0x70, Size: 0x18] 0x7e61809b00
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7e61809b80
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e61809c00
	FName SocketName;//[Offset: 0xc4, Size: 0x8] 0x7e61809c80
	FXSystemComponent* GetSpawnedEffect();// 0x236158ebd041 0x7e617e8580

--------------------------------
Class: GeometryCache.Object
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0x10] 0x7e617b9e80
	GeometryCacheTrack*[] Tracks;//[Offset: 0x40, Size: 0x10] 0x7e617b9f20
	int StartFrame;//[Offset: 0x60, Size: 0x4] 0x7e61809800
	int EndFrame;//[Offset: 0x64, Size: 0x4] 0x7e61809880
	uint64 Hash;//[Offset: 0x68, Size: 0x8] 0x7e61809900

--------------------------------
Class: GeometryCacheTrack.Object
	float Duration;//[Offset: 0x28, Size: 0x4] 0x7e6180c200

--------------------------------
Class: GeometryCacheActor.Actor.Object
	GeometryCacheComponent* GeometryCacheComponent;//[Offset: 0x278, Size: 0x8] 0x7e61809600
	GeometryCacheComponent* GetGeometryCacheComponent();// 0x236258ebd041 0x7e617e84a0

--------------------------------
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GeometryCache* GeometryCache;//[Offset: 0x560, Size: 0x8] 0x7e6180c280
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1] 0x7e6180c300
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1] 0x7e6180c380
	bool bExtrapolateFrames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a, Size: 0x1] 0x7e6180c400
	float StartTimeOffset;//[Offset: 0x56c, Size: 0x4] 0x7e6180c480
	float PlaybackSpeed;//[Offset: 0x570, Size: 0x4] 0x7e6180c500
	float MotionVectorScale;//[Offset: 0x574, Size: 0x4] 0x7e6180c580
	int NumTracks;//[Offset: 0x578, Size: 0x4] 0x7e6180c600
	float ElapsedTime;//[Offset: 0x57c, Size: 0x4] 0x7e6180a580
	float Duration;//[Offset: 0x5cc, Size: 0x4] 0x7e6180a600
	bool bManualTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1] 0x7e6180a680
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1] 0x7e6180a700
	LinearColor WireframeOverrideColor;//[Offset: 0x5d4, Size: 0x10] 0x7e6180a780
	void TickAtThisTime(const float Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping);// 0x237e58ebd041 0x7e617ea5e0
	void Stop();// 0x237d58ebd041 0x7e617ea6c0
	void SetWireframeOverrideColor(const LinearColor Color);// 0x237c58ebd041 0x7e617ea7a0
	void SetStartTimeOffset(const float NewStartTimeOffset);// 0x237b58ebd041 0x7e617ea880
	void SetPlaybackSpeed(const float NewPlaybackSpeed);// 0x237a58ebd041 0x7e617ea960
	void SetOverrideWireframeColor(bool bOverride);// 0x237958ebd041 0x7e617eaa40
	void SetMotionVectorScale(const float NewMotionVectorScale);// 0x237858ebd041 0x7e617eab20
	void SetLooping(const bool bNewLooping);// 0x237758ebd041 0x7e617eac00
	bool SetGeometryCache(GeometryCache* NewGeomCache);// 0x23b858ebd041 0x7e617eace0
	void SetExtrapolateFrames(const bool bNewExtrapolating);// 0x237558ebd041 0x7e617e7400
	void PlayReversedFromEnd();// 0x237458ebd041 0x7e617e74e0
	void PlayReversed();// 0x237358ebd041 0x7e617e75c0
	void PlayFromStart();// 0x237258ebd041 0x7e617e76a0
	void Play();// 0x237158ebd041 0x7e617e7780
	void Pause();// 0x237058ebd041 0x7e617e7860
	bool IsPlayingReversed();// 0x236f58ebd041 0x7e617e7940
	bool IsPlaying();// 0x236e58ebd041 0x7e617e7a20
	bool IsLooping();// 0x236d58ebd041 0x7e617e7b00
	bool IsExtrapolatingFrames();// 0x236c58ebd041 0x7e617e7be0
	LinearColor GetWireframeOverrideColor();// 0x236b58ebd041 0x7e617e7cc0
	float GetStartTimeOffset();// 0x236a58ebd041 0x7e617e7da0
	float GetPlaybackSpeed();// 0x236958ebd041 0x7e617e7e80
	float GetPlaybackDirection();// 0x236858ebd041 0x7e617e7f60
	bool GetOverrideWireframeColor();// 0x236758ebd041 0x7e617e8040
	int GetNumberOfFrames();// 0x236658ebd041 0x7e617e8120
	float GetMotionVectorScale();// 0x236558ebd041 0x7e617e8200
	float GetDuration();// 0x236458ebd041 0x7e617e82e0
	float GetAnimationTime();// 0x236358ebd041 0x7e617e83c0

--------------------------------
Class: GeometryCacheCodecBase.Object
	int[] TopologyRanges;//[Offset: 0x28, Size: 0x10] 0x7e617b9de0

--------------------------------
Class: GeometryCacheCodecRaw.GeometryCacheCodecBase.Object
	int DummyProperty;//[Offset: 0x38, Size: 0x4] 0x7e61809500

--------------------------------
Class: GeometryCacheCodecV1.GeometryCacheCodecBase.Object

--------------------------------
Class: GeometryCacheTrack_FlipbookAnimation.GeometryCacheTrack.Object
	uint32 NumMeshSamples;//[Offset: 0x54, Size: 0x4] 0x7e6180c080
	void AddMeshSample(out const GeometryCacheMeshData MeshData, const float SampleTime);// 0x237f58ebd041 0x7e617ea500

--------------------------------
Class: GeometryCacheMeshData

--------------------------------
Class: GeometryCacheTrackStreamable.GeometryCacheTrack.Object
	GeometryCacheCodecBase* Codec;//[Offset: 0x58, Size: 0x8] 0x7e6180bf80
	float StartSampleTime;//[Offset: 0xc8, Size: 0x4] 0x7e6180c000

--------------------------------
Class: GeometryCacheTrack_TransformAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x238058ebd041 0x7e617ea420

--------------------------------
Class: GeometryCacheTrack_TransformGroupAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x238158ebd041 0x7e617ea340

--------------------------------
Class: NiagaraGeometryCacheRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraGeometryCacheReference[] GeometryCaches;//[Offset: 0xd0, Size: 0x10] 0x7e617b9d40
	bool bIsLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7e6180b900
	uint32 ComponentCountLimit;//[Offset: 0xe4, Size: 0x4] 0x7e6180b980
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xe8, Size: 0x58] 0x7e6180ba00
	NiagaraVariableAttributeBinding RotationBinding;//[Offset: 0x140, Size: 0x58] 0x7e6180ba80
	NiagaraVariableAttributeBinding ScaleBinding;//[Offset: 0x198, Size: 0x58] 0x7e6180bb00
	NiagaraVariableAttributeBinding ElapsedTimeBinding;//[Offset: 0x1f0, Size: 0x58] 0x7e6180bb80
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x248, Size: 0x58] 0x7e6180bc00
	NiagaraVariableAttributeBinding ArrayIndexBinding;//[Offset: 0x2a0, Size: 0x58] 0x7e6180bc80
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x2f8, Size: 0x58] 0x7e6180bd00
	int RendererVisibility;//[Offset: 0x350, Size: 0x4] 0x7e6180bd80
	bool bAssignComponentsOnParticleID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1] 0x7e6180be00

--------------------------------
Class: NiagaraGeometryCacheReference
	GeometryCache* GeometryCache;//[Offset: 0x0, Size: 0x8] 0x7e61562900
	NiagaraUserParameterBinding GeometryCacheUserParamBinding;//[Offset: 0x8, Size: 0x20] 0x7e61562980
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x28, Size: 0x10] 0x7e84e247a0

--------------------------------
Class: MovieSceneGeometryCacheSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCacheParams Params;//[Offset: 0xe0, Size: 0x40] 0x7e6180b800

--------------------------------
Class: MovieSceneGeometryCacheParams
	GeometryCache* GeometryCacheAsset;//[Offset: 0x0, Size: 0x8] 0x7e61562480
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x7e61562500
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x7e61562580
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x7e61562600
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x7e61562680
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7e61562700
	float StartOffset;//[Offset: 0x1c, Size: 0x4] 0x7e61562780
	float EndOffset;//[Offset: 0x20, Size: 0x4] 0x7e61562800
	SoftObjectPath GeometryCache;//[Offset: 0x28, Size: 0x18] 0x7e61562880

--------------------------------
Class: MovieSceneGeometryCacheTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10] 0x7e617b9ca0

--------------------------------
Class: AndroidMediaSettings.Object
	bool CacheableVideoSampleBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e6180b700

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x238758ebd041 0x7e617e9e00
	void SetMediaOptionString(out const FName Key, FString Value);// 0x238658ebd041 0x7e617e9ee0
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x238558ebd041 0x7e617e9fc0
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x238458ebd041 0x7e617ea0a0
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x238358ebd041 0x7e617ea180
	FString GetUrl();// 0x238258ebd041 0x7e617ea260

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 0x8] 0x7e6180d280

--------------------------------
Class: ImgMediaSource.BaseMediaSource.MediaSource.Object
	bool IsPathRelativeToProjectRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7e6180cb80
	FrameRate FrameRateOverride;//[Offset: 0x8c, Size: 0x8] 0x7e6180cc00
	FString ProxyOverride;//[Offset: 0x98, Size: 0x10] 0x7e6180cc80
	bool bFillGapsInSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1] 0x7e6180cd00
	DirectoryPath SequencePath;//[Offset: 0xb0, Size: 0x10] 0x7e6180cd80
	void SetSequencePath(FString Path);// 0x238f58ebd041 0x7e617e9700
	void SetMipLevelDistance(float Distance);// 0x238e58ebd041 0x7e617e97e0
	void RemoveTargetObject(Actor* InActor);// 0x238d58ebd041 0x7e617e98c0
	void RemoveGlobalCamera(Actor* InActor);// 0x238c58ebd041 0x7e617e99a0
	FString GetSequencePath();// 0x238b58ebd041 0x7e617e9a80
	void GetProxies(out FString[] OutProxies);// 0x238a58ebd041 0x7e617e9b60
	void AddTargetObject(Actor* InActor, float Width);// 0x238958ebd041 0x7e617e9c40
	void AddGlobalCamera(Actor* InActor);// 0x238858ebd041 0x7e617e9d20

--------------------------------
Class: ImgMediaPlaybackComponent.ActorComponent.Object
	float Width;//[Offset: 0xb0, Size: 0x4] 0x7e6180ca80
	float LODBias;//[Offset: 0xb4, Size: 0x4] 0x7e6180cb00

--------------------------------
Class: ImgMediaSettings.Object
	FrameRate DefaultFrameRate;//[Offset: 0x28, Size: 0x8] 0x7e6180e680
	float CacheBehindPercentage;//[Offset: 0x30, Size: 0x4] 0x7e6180e700
	float CacheSizeGB;//[Offset: 0x34, Size: 0x4] 0x7e6180c680
	int CacheThreads;//[Offset: 0x38, Size: 0x4] 0x7e6180c700
	int CacheThreadStackSizeKB;//[Offset: 0x3c, Size: 0x4] 0x7e6180c780
	float GlobalCacheSizeGB;//[Offset: 0x40, Size: 0x4] 0x7e6180c800
	bool UseGlobalCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7e6180c880
	uint32 ExrDecoderThreads;//[Offset: 0x48, Size: 0x4] 0x7e6180c900
	FString DefaultProxy;//[Offset: 0x50, Size: 0x10] 0x7e6180c980
	bool UseDefaultProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e6180ca00

--------------------------------
Class: MovieSceneMediaPlayerPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe0, Size: 0x8] 0x7e6180e580
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x7e6180e600

--------------------------------
Class: MovieSceneMediaPlayerPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMediaSection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe0, Size: 0x8] 0x7e6180e080
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x7e6180e100
	FrameNumber StartFrameOffset;//[Offset: 0xec, Size: 0x4] 0x7e6180e180
	MediaTexture* MediaTexture;//[Offset: 0xf0, Size: 0x8] 0x7e6180e200
	MediaSoundComponent* MediaSoundComponent;//[Offset: 0xf8, Size: 0x8] 0x7e6180e280
	bool bUseExternalMediaPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x7e6180e300
	MediaPlayer* ExternalMediaPlayer;//[Offset: 0x108, Size: 0x8] 0x7e6180e380

--------------------------------
Class: MediaTexture.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x1f0, Size: 0x1] 0x7e619a4d00
	byte AddressY;//[Offset: 0x1f1, Size: 0x1] 0x7e619a4d80
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1] 0x7e619a4e00
	LinearColor ClearColor;//[Offset: 0x1f4, Size: 0x10] 0x7e619a4e80
	bool EnableGenMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1] 0x7e619a4f00
	byte NumMips;//[Offset: 0x205, Size: 0x1] 0x7e619a4f80
	bool NewStyleOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 0x1] 0x7e619a5000
	byte OutputFormat;//[Offset: 0x207, Size: 0x1] 0x7e619a5080
	float CurrentAspectRatio;//[Offset: 0x208, Size: 0x4] 0x7e619a5100
	byte CurrentOrientation;//[Offset: 0x20c, Size: 0x1] 0x7e619a5180
	MediaPlayer* MediaPlayer;//[Offset: 0x210, Size: 0x8] 0x7e619a5200
	void UpdateResource();// 0x2c1958ebd041 0x7e619b3340
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x2c1858ebd041 0x7e619b3420
	int GetWidth();// 0x2c1758ebd041 0x7e619b3500
	int GetTextureNumMips();// 0x2c1658ebd041 0x7e619b35e0
	MediaPlayer* GetMediaPlayer();// 0x2c1558ebd041 0x7e619b36c0
	int GetHeight();// 0x2c1458ebd041 0x7e619b37a0
	float GetAspectRatio();// 0x2c1358ebd041 0x7e619b3880

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10] 0x7e619a2900
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10] 0x7e619a2980
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10] 0x7e619a2a00
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10] 0x7e619a2a80
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10] 0x7e619a2b00
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10] 0x7e619a2b80
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10] 0x7e619a2c00
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10] 0x7e619a2c80
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8] 0x7e619a2d00
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8] 0x7e619a2d80
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8] 0x7e619a2e00
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7e619a2e80
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x7e619a2f00
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1] 0x7e619a2f80
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1] 0x7e619a3000
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8] 0x7e619a3080
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4] 0x7e619a3100
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8] 0x7e619a3180
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4] 0x7e619a1100
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4] 0x7e619a1180
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0x18] 0x7e619a1200
	Guid PlayerGuid;//[Offset: 0x128, Size: 0x10] 0x7e619a1280
	bool SupportsSeeking();// 0x2bfc58ebd041 0x7e619b12e0
	bool SupportsScrubbing();// 0x2bfb58ebd041 0x7e619b13c0
	bool SupportsRate(float Rate, bool Unthinned);// 0x2bfa58ebd041 0x7e619b14a0
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x2bf958ebd041 0x7e619b1580
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x2bf858ebd041 0x7e619b1660
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x2bf758ebd041 0x7e619b1740
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x2bf658ebd041 0x7e619b1820
	void SetTimeDelay(Timespan TimeDelay);// 0x2bf558ebd041 0x7e619b1900
	bool SetRate(float Rate);// 0x2bf458ebd041 0x7e619b19e0
	bool SetNativeVolume(float Volume);// 0x2bf358ebd041 0x7e619b1ac0
	void SetMediaOptions(const MediaSource* Options);// 0x2bf258ebd041 0x7e619b1ba0
	bool SetLooping(bool Looping);// 0x2c3358ebd041 0x7e619b1c80
	void SetDesiredPlayerName(FName PlayerName);// 0x2bf058ebd041 0x7e6198e780
	void SetBlockOnTime(out const Timespan Time);// 0x2bef58ebd041 0x7e6198e860
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x2bee58ebd041 0x7e6198e940
	bool Seek(out const Timespan Time);// 0x2bed58ebd041 0x7e6198ea20
	bool Rewind();// 0x2bec58ebd041 0x7e6198eb00
	bool Reopen();// 0x2beb58ebd041 0x7e6198ebe0
	bool Previous();// 0x2bea58ebd041 0x7e6198ecc0
	void PlayAndSeek();// 0x2be958ebd041 0x7e6198eda0
	bool Play();// 0x2be858ebd041 0x7e6198ee80
	bool Pause();// 0x2be758ebd041 0x7e6198ef60
	bool OpenUrl(FString URL);// 0x2be658ebd041 0x7e6198f040
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0x2be558ebd041 0x7e6198f120
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0x2be458ebd041 0x7e6198f200
	bool OpenSource(MediaSource* MediaSource);// 0x2be358ebd041 0x7e6198f2e0
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x2be258ebd041 0x7e6198f3c0
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x2be158ebd041 0x7e6198f4a0
	bool OpenFile(FString FilePath);// 0x2be058ebd041 0x7e6198f580
	bool Next();// 0x2bdf58ebd041 0x7e6198f660
	bool IsReady();// 0x2bde58ebd041 0x7e6198f740
	bool IsPreparing();// 0x2bdd58ebd041 0x7e6198f820
	bool IsPlaying();// 0x2bdc58ebd041 0x7e6198f900
	bool IsPaused();// 0x2bdb58ebd041 0x7e6198f9e0
	bool IsLooping();// 0x2bda58ebd041 0x7e6198fac0
	bool IsConnecting();// 0x2bd958ebd041 0x7e6198fba0
	bool IsClosed();// 0x2bd858ebd041 0x7e6198fc80
	bool IsBuffering();// 0x2bd758ebd041 0x7e6198fd60
	bool HasError();// 0x2bd658ebd041 0x7e6198fe40
	Rotator GetViewRotation();// 0xffffff8158ebd000 0x7e6198ff20
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x2bd458ebd041 0x7e6198caa0
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x2bd358ebd041 0x7e6198cb80
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x2bd258ebd041 0x7e6198cc60
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x2bd158ebd041 0x7e6198cd40
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x2bd058ebd041 0x7e6198ce20
	float GetVerticalFieldOfView();// 0x2bcf58ebd041 0x7e6198cf00
	FString GetUrl();// 0x2bce58ebd041 0x7e6198cfe0
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x2bcd58ebd041 0x7e6198d0c0
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x2bcc58ebd041 0x7e6198d1a0
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x2bcb58ebd041 0x7e6198d280
	MediaTimeStampInfo* GetTimeStamp();// 0x2bca58ebd041 0x7e6198d360
	Timespan GetTimeDelay();// 0x2bc958ebd041 0x7e6198d440
	Timespan GetTime();// 0x2bc858ebd041 0x7e6198d520
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x2bc758ebd041 0x7e6198d600
	int GetSelectedTrack(enum TrackType);// 0x2bc658ebd041 0x7e6198d6e0
	float GetRate();// 0x2bc558ebd041 0x7e6198d7c0
	int GetPlaylistIndex();// 0x2bc458ebd041 0x7e6198d8a0
	MediaPlaylist* GetPlaylist();// 0x2bc358ebd041 0x7e6198d980
	FName GetPlayerName();// 0x2bc258ebd041 0x7e6198da60
	int GetNumTracks(enum TrackType);// 0x2bc158ebd041 0x7e6198db40
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x2bc058ebd041 0x7e6198dc20
	FText GetMediaName();// 0x2bbf58ebd041 0x7e6198dd00
	float GetHorizontalFieldOfView();// 0x2bbe58ebd041 0x7e6198dde0
	Timespan GetDuration();// 0x2bbd58ebd041 0x7e6198dec0
	FName GetDesiredPlayerName();// 0x2bbc58ebd041 0x7e6198dfa0
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x2bbb58ebd041 0x7e6198e080
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x2bba58ebd041 0x7e6198e160
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x2bb958ebd041 0x7e6198e240
	void Close();// 0x2bb858ebd041 0x7e6198e320
	bool CanPlayUrl(FString URL);// 0x2bb758ebd041 0x7e6198e400
	bool CanPlaySource(MediaSource* MediaSource);// 0x2bb658ebd041 0x7e6198e4e0
	bool CanPause();// 0x2bb558ebd041 0x7e6198e5c0

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c] 0x7e615c2480
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8] 0x7e615c2500
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1] 0x7e84e52040
	enum Loop;//[Offset: 0x29, Size: 0x1] 0x7e84e520e0

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4] 0x7e615c2680
	int Caption;//[Offset: 0x4, Size: 0x4] 0x7e615c2700
	int MetaData;//[Offset: 0x8, Size: 0x4] 0x7e615c2780
	int Script;//[Offset: 0xc, Size: 0x4] 0x7e615c2800
	int Subtitle;//[Offset: 0x10, Size: 0x4] 0x7e615c2880
	int Text;//[Offset: 0x14, Size: 0x4] 0x7e615c2900
	int Video;//[Offset: 0x18, Size: 0x4] 0x7e615c2980

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10] 0x7e619740c0
	bool Replace(int Index, MediaSource* Replacement);// 0x2c0858ebd041 0x7e619b0860
	bool RemoveAt(int Index);// 0x2c0758ebd041 0x7e619b0940
	bool Remove(MediaSource* MediaSource);// 0x2c0658ebd041 0x7e619b0a20
	int Num();// 0x2c0558ebd041 0x7e619b0b00
	void Insert(MediaSource* MediaSource, int Index);// 0x2c0458ebd041 0x7e619b0be0
	MediaSource* GetRandom(out int OutIndex);// 0x2c0358ebd041 0x7e619b0cc0
	MediaSource* GetPrevious(out int InOutIndex);// 0x2c0258ebd041 0x7e619b0da0
	MediaSource* GetNext(out int InOutIndex);// 0x2c0158ebd041 0x7e619b0e80
	MediaSource* Get(int Index);// 0x2c0058ebd041 0x7e619b0f60
	bool AddUrl(FString URL);// 0x2bff58ebd041 0x7e619b1040
	bool AddFile(FString FilePath);// 0x2bfe58ebd041 0x7e619b1120
	bool Add(MediaSource* MediaSource);// 0x2bfd58ebd041 0x7e619b1200

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 0x8] 0x7e6199e080
	int64 SequenceIndex;//[Offset: 0x30, Size: 0x8] 0x7e6199e100

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x7a0, Size: 0x4] 0x7e619766e0
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 0x1] 0x7e619a3500
	float RateAdjustmentFactor;//[Offset: 0x7a8, Size: 0x4] 0x7e619a3580
	FloatRange RateAdjustmentRange;//[Offset: 0x7ac, Size: 0x10] 0x7e619a3600
	MediaPlayer* MediaPlayer;//[Offset: 0x7c0, Size: 0x8] 0x7e619a3680
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0x2c5458ebd041 0x7e619b3960
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x2c1158ebd041 0x7e619b0080
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0x2c1058ebd041 0x7e619b0160
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0x2c0f58ebd041 0x7e619b0240
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0x2c0e58ebd041 0x7e619b0320
	MediaSoundComponentSpectralData[] GetSpectralData();// 0x2c0d58ebd041 0x7e619b0400
	MediaSoundComponentSpectralData[] GetNormalizedSpectralData();// 0x2c0c58ebd041 0x7e619b04e0
	MediaPlayer* GetMediaPlayer();// 0x2c0b58ebd041 0x7e619b05c0
	float GetEnvelopeValue();// 0x2c0a58ebd041 0x7e619b06a0
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x2c0958ebd041 0x7e619b0780

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1] 0x7e61818e80
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1] 0x7e61818f00
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1] 0x7e61818f80
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1] 0x7e61819000
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 0x1] 0x7e61819080
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 0x1] 0x7e61819100
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b0, Size: 0x1] 0x7e61819180
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2b8, Size: 0x8] 0x7e61819200
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x2c0, Size: 0x3c8] 0x7e61819280
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x688, Size: 0x8] 0x7e61819300
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x690, Size: 0x50] 0x7e617baec0
	SoundClass* SoundClass;//[Offset: 0x6e0, Size: 0x8] 0x7e61819400
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x6e8, Size: 0x8] 0x7e61819480
	SoundSubmixBase* SoundSubmix;//[Offset: 0x6f0, Size: 0x8] 0x7e61817400
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x6f8, Size: 0x10] 0x7e617baf60
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x708, Size: 0x10] 0x7e617bb000
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x718, Size: 0x10] 0x7e617bb0a0
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x728, Size: 0x1] 0x7e61817600
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x728, Size: 0x1] 0x7e61817680
	int EnvelopeFollowerAttackTime;//[Offset: 0x72c, Size: 0x4] 0x7e61817700
	int EnvelopeFollowerReleaseTime;//[Offset: 0x730, Size: 0x4] 0x7e61817780
	delegate OnAudioEnvelopeValue;//[Offset: 0x738, Size: 0x10] 0x7e61817800
	SynthSound* Synth;//[Offset: 0x768, Size: 0x8] 0x7e61817880
	AudioComponent* AudioComponent;//[Offset: 0x770, Size: 0x8] 0x7e61817900
	void Stop();// 0x23d158ebd041 0x7e617ed0c0
	void Start();// 0x23d058ebd041 0x7e617ed1a0
	void SetVolumeMultiplier(float VolumeMultiplier);// 0x23cf58ebd041 0x7e617ed280
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x23ce58ebd041 0x7e617ed360
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x23cd58ebd041 0x7e617ed440
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x23cc58ebd041 0x7e617ed520
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x23cb58ebd041 0x7e617ed600
	bool IsPlaying();// 0x23ca58ebd041 0x7e617ed6e0

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x7e615c2280
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x7e615c2300

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x390, Size: 0x8] 0x7e61990b00

--------------------------------
Class: MovieSceneMediaTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] MediaSections;//[Offset: 0x98, Size: 0x10] 0x7e617b9ac0

--------------------------------
Class: TcpMessagingSettings.Object
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e6180dd80
	FString ListenEndpoint;//[Offset: 0x30, Size: 0x10] 0x7e6180de00
	FString[] ConnectToEndpoints;//[Offset: 0x40, Size: 0x10] 0x7e617b9a20
	int ConnectionRetryDelay;//[Offset: 0x50, Size: 0x4] 0x7e6180df00
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7e6180df80

--------------------------------
Class: UdpMessagingSettings.Object
	bool EnabledByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e6180f700
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e6180f780
	bool bAutoRepair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7e6180d700
	float MaxSendRate;//[Offset: 0x2c, Size: 0x4] 0x7e6180d780
	uint32 AutoRepairAttemptLimit;//[Offset: 0x30, Size: 0x4] 0x7e6180d800
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7e6180d880
	FString UnicastEndpoint;//[Offset: 0x38, Size: 0x10] 0x7e6180d900
	FString MulticastEndpoint;//[Offset: 0x48, Size: 0x10] 0x7e6180d980
	enum MessageFormat;//[Offset: 0x58, Size: 0x1] 0x7e617b9840
	byte MulticastTimeToLive;//[Offset: 0x59, Size: 0x1] 0x7e6180da80
	FString[] StaticEndpoints;//[Offset: 0x60, Size: 0x10] 0x7e617b98e0
	bool EnableTunnel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7e6180db80
	FString TunnelUnicastEndpoint;//[Offset: 0x78, Size: 0x10] 0x7e6180dc00
	FString TunnelMulticastEndpoint;//[Offset: 0x88, Size: 0x10] 0x7e6180dc80
	FString[] RemoteTunnelEndpoints;//[Offset: 0x98, Size: 0x10] 0x7e617b9980

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x7e6180f600
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x68, Size: 0x20] 0x7e6180f680

--------------------------------
Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 0x10] 0x7e84e24ac0
	ActorSequenceObjectReferences[] References;//[Offset: 0x10, Size: 0x10] 0x7e84e24a20

--------------------------------
Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0x10] 0x7e84e24980

--------------------------------
Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 0x1] 0x7e84e248e0
	Guid ActorId;//[Offset: 0x4, Size: 0x10] 0x7e61563b00
	FString PathToComponent;//[Offset: 0x18, Size: 0x10] 0x7e61563b80

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xb8, Size: 0x14] 0x7e6180f480
	ActorSequence* Sequence;//[Offset: 0xd0, Size: 0x8] 0x7e6180f500
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xd8, Size: 0x8] 0x7e6180f580

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object

--------------------------------
Class: NamedInterfaces.Object
	NamedInterface[] NamedInterfaces;//[Offset: 0x28, Size: 0x10] 0x7e617b9700
	NamedInterfaceDef[] NamedInterfaceDefs;//[Offset: 0x38, Size: 0x10] 0x7e617b97a0

--------------------------------
Class: NamedInterface
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x7e61563800
	Object* InterfaceObject;//[Offset: 0x8, Size: 0x8] 0x7e61563880

--------------------------------
Class: NamedInterfaceDef
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x7e61563700
	FString InterfaceClassName;//[Offset: 0x8, Size: 0x10] 0x7e61563780

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0x239158ebd041 0x7e617e9540
	void OnMatchEnded(FString Match);// 0x239058ebd041 0x7e617e9620

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10] 0x7e6180f080

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object
	bool CheckPermission(FString permission);// 0x239458ebd041 0x7e617e92a0
	AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] Permissions);// 0x239358ebd041 0x7e617e9380

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object
	void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out float Progress);// 0x239658ebd041 0x7e617e90e0
	void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out FText Title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0x239558ebd041 0x7e617e91c0

--------------------------------
Class: AchievementQueryCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e6180fc80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e6180fd00
	AchievementQueryCallbackProxy* CacheAchievements(Object* WorldContextObject, PlayerController* PlayerController);// 0x239858ebd041 0x7e617ec8e0
	AchievementQueryCallbackProxy* CacheAchievementDescriptions(Object* WorldContextObject, PlayerController* PlayerController);// 0x23d958ebd041 0x7e617ec9c0

--------------------------------
Class: AchievementWriteCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e6180f880
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e6180f900
	AchievementWriteCallbackProxy* WriteAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementName, float Progress, int UserTag);// 0x239958ebd041 0x7e617ec800

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61810f00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61810f80
	ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0x239a58ebd041 0x7e617ec720

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61810b80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61810c00
	CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0x239b58ebd041 0x7e617ec640

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61810900
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61810980
	DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0x239c58ebd041 0x7e617ec560

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61810480
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61810500
	EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0x239d58ebd041 0x7e617ec480

--------------------------------
Class: EndTurnCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61810100
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61810180
	EndTurnCallbackProxy* EndTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, interface classNone TurnBasedMatchInterface);// 0x239e58ebd041 0x7e617ec3a0

--------------------------------
Class: FindSessionsCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61811a80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61811b00
	FString GetServerName(out const BlueprintSessionResult Result);// 0x23a358ebd041 0x7e617ebf40
	int GetPingInMs(out const BlueprintSessionResult Result);// 0x23a258ebd041 0x7e617ec020
	int GetMaxPlayers(out const BlueprintSessionResult Result);// 0x23a158ebd041 0x7e617ec100
	int GetCurrentPlayers(out const BlueprintSessionResult Result);// 0x23a058ebd041 0x7e617ec1e0
	FindSessionsCallbackProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0x239f58ebd041 0x7e617ec2c0

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61811580
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61811600
	FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0x23a458ebd041 0x7e617ebe60

--------------------------------
Class: InAppPurchaseCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7e61811300
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7e61811380
	InAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest ProductRequest);// 0x23a558ebd041 0x7e617ebd80

--------------------------------
Class: InAppPurchaseProductRequest
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x7e61563600
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e61563680

--------------------------------
Class: InAppPurchaseCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7e61812f80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7e61813000
	InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseUnprocessedPurchases(PlayerController* PlayerController);// 0x23a858ebd041 0x7e617ebae0
	InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseQueryOwned(PlayerController* PlayerController);// 0x23a758ebd041 0x7e617ebbc0
	InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest2 ProductRequest);// 0x23a658ebd041 0x7e617ebca0

--------------------------------
Class: InAppPurchaseProductRequest2
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x7e61563380
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e61563400

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7e61812d00
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7e61812d80
	InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x23a958ebd041 0x7e617eba00

--------------------------------
Class: InAppPurchaseQueryCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7e61812a80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7e61812b00
	InAppPurchaseQueryCallbackProxy2* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x23aa58ebd041 0x7e617eb920

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7e61812800
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7e61812880
	InAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest[] ConsumableProductFlags, PlayerController* PlayerController);// 0x23ab58ebd041 0x7e617eb840

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7e61812580
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7e61812600
	InAppPurchaseRestoreCallbackProxy2* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest2[] ConsumableProductFlags, PlayerController* PlayerController);// 0x23ac58ebd041 0x7e617eb760

--------------------------------
Class: IpConnection.NetConnection.Player.Object
	float SocketErrorDisconnectDelay;//[Offset: 0x3290, Size: 0x4] 0x7e61813e00

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x764, Size: 0x1] 0x7e61813900
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x764, Size: 0x1] 0x7e61813980
	uint32 MaxPortCountToTry;//[Offset: 0x768, Size: 0x4] 0x7e61813a00
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x77c, Size: 0x4] 0x7e61813a80
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x780, Size: 0x4] 0x7e61813b00
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x784, Size: 0x4] 0x7e61813b80
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x788, Size: 0x4] 0x7e61813c00
	double MaxSecondsInReceive;//[Offset: 0x790, Size: 0x8] 0x7e61813c80
	int NbPacketsBetweenReceiveTimeTest;//[Offset: 0x798, Size: 0x4] 0x7e61813d00
	float ResolutionConnectionTimeout;//[Offset: 0x79c, Size: 0x4] 0x7e61813d80

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61813600
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61813680
	JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0x23ad58ebd041 0x7e617eb680

--------------------------------
Class: LeaderboardBlueprintLibrary.BlueprintFunctionLibrary.Object
	bool WriteLeaderboardInteger(PlayerController* PlayerController, FName StatName, int StatValue);// 0x23ae58ebd041 0x7e617eb5a0

--------------------------------
Class: LeaderboardFlushCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7e61815280
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7e61813200
	LeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(PlayerController* PlayerController, FName SessionName);// 0x23af58ebd041 0x7e617eb4c0

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7e61815000
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7e61815080
	LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0x23b058ebd041 0x7e617eb3e0

--------------------------------
Class: LogoutCallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61814d80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61814e00
	LogoutCallbackProxy* Logout(Object* WorldContextObject, PlayerController* PlayerController);// 0x23b158ebd041 0x7e617eb300

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x280, Size: 0x4] 0x7e61814c00
	float BeaconConnectionTimeout;//[Offset: 0x284, Size: 0x4] 0x7e61814c80
	NetDriver* NetDriver;//[Offset: 0x288, Size: 0x8] 0x7e61814d00

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x2a8, Size: 0x8] 0x7e61814a80
	NetConnection* BeaconConnection;//[Offset: 0x2b0, Size: 0x8] 0x7e61814b00
	enum ConnectionState;//[Offset: 0x2b8, Size: 0x1] 0x7e617bb820
	void ClientOnConnected();// 0x23b258ebd041 0x7e617eb220

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x278, Size: 0x10] 0x7e61814780
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x288, Size: 0x8] 0x7e617bb640
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x290, Size: 0x10] 0x7e617bb6e0

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object
	int ListenPort;//[Offset: 0x2a8, Size: 0x4] 0x7e61814880
	bool bAuthRequired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1] 0x7e61814900
	uint32 MaxAuthTokenSize;//[Offset: 0x2b0, Size: 0x4] 0x7e61814980
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x308, Size: 0x10] 0x7e617bb780

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object
	<FName,FName> MappedUniqueNetIdTypes;//[Offset: 0x28, Size: 0x50] 0x7e6167b740
	FName[] CompatibleUniqueNetIdTypes;//[Offset: 0x78, Size: 0x10] 0x7e617bb5a0
	FName VoiceSubsystemNameOverride;//[Offset: 0x88, Size: 0x8] 0x7e61814700

--------------------------------
Class: OnlinePIESettings.DeveloperSettings.Object
	bool bOnlinePIEEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61814480
	PIELoginSettingsInternal[] Logins;//[Offset: 0x40, Size: 0x10] 0x7e617bb500

--------------------------------
Class: PIELoginSettingsInternal
	FString ID;//[Offset: 0x0, Size: 0x10] 0x7e61564900
	FString Token;//[Offset: 0x10, Size: 0x10] 0x7e61564980
	FString Type;//[Offset: 0x20, Size: 0x10] 0x7e61564a00
	byte[] TokenBytes;//[Offset: 0x30, Size: 0x10] 0x7e84e24c00

--------------------------------
Class: OnlineServicesEngineInterfaceImpl.OnlineEngineInterface.Object

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x7e61814380
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1] 0x7e61814400

--------------------------------
Class: PartyBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x338, Size: 0x10] 0x7e61815c00
	PartyReservation PendingReservation;//[Offset: 0x348, Size: 0x58] 0x7e61815c80
	enum RequestType;//[Offset: 0x3a0, Size: 0x1] 0x7e617bb460
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1] 0x7e61815d80
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1] 0x7e61815e00
	void ServerUpdateReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x23bb58ebd041 0x7e617ee400
	void ServerReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x23ba58ebd041 0x7e617ee4e0
	void ServerRemoveMemberFromReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x23b958ebd041 0x7e617ee5c0
	void ServerCancelReservationRequest(const UniqueNetIdRepl PartyLeader);// 0x23f558ebd041 0x7e617ee6a0
	void ServerAddOrUpdateReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x23b758ebd041 0x7e617eadc0
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x23b658ebd041 0x7e617eaea0
	void ClientSendReservationFull();// 0x23b558ebd041 0x7e617eaf80
	void ClientReservationResponse(byte ReservationResponse);// 0x23b458ebd041 0x7e617eb060
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x23b358ebd041 0x7e617eb140

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 0x4] 0x7e61564700
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 0x30] 0x7e61564780
	PlayerReservation[] PartyMembers;//[Offset: 0x38, Size: 0x10] 0x7e84e24d40
	PlayerReservation[] RemovedPartyMembers;//[Offset: 0x48, Size: 0x10] 0x7e84e24ca0

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueId;//[Offset: 0x0, Size: 0x30] 0x7e61564b80
	FString ValidationStr;//[Offset: 0x30, Size: 0x10] 0x7e61564c00
	FString Platform;//[Offset: 0x40, Size: 0x10] 0x7e61564c80
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e61564d00
	float ElapsedTime;//[Offset: 0x54, Size: 0x4] 0x7e61564d80

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PartyBeaconState* State;//[Offset: 0x2a0, Size: 0x8] 0x7e61815a00
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x7e61815a80
	float SessionTimeoutSecs;//[Offset: 0x30c, Size: 0x4] 0x7e61815b00
	float TravelSessionTimeoutSecs;//[Offset: 0x310, Size: 0x4] 0x7e61815b80

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x7e61815380
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x7e61815400
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x7e61815480
	int NumTeams;//[Offset: 0x38, Size: 0x4] 0x7e61815500
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 0x4] 0x7e61815580
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 0x8] 0x7e61815600
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 0x4] 0x7e61815680
	int ForceTeamNum;//[Offset: 0x4c, Size: 0x4] 0x7e61815700
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e61815780
	FString[] PlatformCrossplayRestrictions;//[Offset: 0x58, Size: 0x10] 0x7e617bb280
	PartyBeaconCrossplayPlatformMapping[] PlatformTypeMapping;//[Offset: 0x68, Size: 0x10] 0x7e617bb320
	bool bEnableRemovalRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7e61815900
	PartyReservation[] Reservations;//[Offset: 0x80, Size: 0x10] 0x7e617bb3c0

--------------------------------
Class: PartyBeaconCrossplayPlatformMapping
	FString PlatformName;//[Offset: 0x0, Size: 0x10] 0x7e61564600
	FString PlatformType;//[Offset: 0x10, Size: 0x10] 0x7e61564680

--------------------------------
Class: QuitMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61817080
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61817100
	QuitMatchCallbackProxy* QuitMatch(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, byte Outcome, int TurnTimeoutInSeconds);// 0x23bc58ebd041 0x7e617ee320

--------------------------------
Class: ShowLoginUICallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61816e00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61816e80
	ShowLoginUICallbackProxy* ShowExternalLoginUI(Object* WorldContextObject, PlayerController* InPlayerController);// 0x23bd58ebd041 0x7e617ee240

--------------------------------
Class: SpectatorBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x338, Size: 0x10] 0x7e61816880
	SpectatorReservation PendingReservation;//[Offset: 0x348, Size: 0x88] 0x7e61816900
	enum RequestType;//[Offset: 0x3d0, Size: 0x1] 0x7e617bb1e0
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1] 0x7e61816a00
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 0x1] 0x7e61816a80
	void ServerReservationRequest(FString SessionId, const SpectatorReservation Reservation);// 0x23c358ebd041 0x7e617edd00
	void ServerCancelReservationRequest(const UniqueNetIdRepl Spectator);// 0x23c258ebd041 0x7e617edde0
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x23c158ebd041 0x7e617edec0
	void ClientSendReservationFull();// 0x23c058ebd041 0x7e617edfa0
	void ClientReservationResponse(byte ReservationResponse);// 0x23bf58ebd041 0x7e617ee080
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x23be58ebd041 0x7e617ee160

--------------------------------
Class: SpectatorReservation
	UniqueNetIdRepl SpectatorId;//[Offset: 0x0, Size: 0x30] 0x7e61564500
	PlayerReservation Spectator;//[Offset: 0x30, Size: 0x58] 0x7e61564580

--------------------------------
Class: SpectatorBeaconHost.OnlineBeaconHostObject.Actor.Object
	SpectatorBeaconState* State;//[Offset: 0x2a0, Size: 0x8] 0x7e61816680
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x7e61816700
	float SessionTimeoutSecs;//[Offset: 0x30c, Size: 0x4] 0x7e61816780
	float TravelSessionTimeoutSecs;//[Offset: 0x310, Size: 0x4] 0x7e61816800

--------------------------------
Class: SpectatorBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x7e61816400
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x7e61816480
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x7e61816500
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61816580
	SpectatorReservation[] Reservations;//[Offset: 0x40, Size: 0x10] 0x7e617bb140

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	void ServerPong();// 0x23c558ebd041 0x7e617edb40
	void ClientPing();// 0x23c458ebd041 0x7e617edc20

--------------------------------
Class: TestBeaconHost.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: TurnBasedBlueprintLibrary.BlueprintFunctionLibrary.Object
	void RegisterTurnBasedMatchInterfaceObject(Object* WorldContextObject, PlayerController* PlayerController, Object* Object);// 0x23c958ebd041 0x7e617ed7c0
	void GetPlayerDisplayName(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, int PlayerIndex, out FString PlayerDisplayName);// 0x23c858ebd041 0x7e617ed8a0
	void GetMyPlayerIndex(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out int PlayerIndex);// 0x23c758ebd041 0x7e617ed980
	void GetIsMyTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out bool bIsMyTurn);// 0x23c658ebd041 0x7e617eda60

--------------------------------
Class: VoipListenerSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	bool IsIdling();// 0x23d258ebd041 0x7e617ecfe0

--------------------------------
Class: LayersBlueprintLibrary.BlueprintFunctionLibrary.Object
	void RemoveActorFromLayer(Actor* InActor, out const ActorLayer Layer);// 0x23d558ebd041 0x7e617ecd40
	Actor*[] GetActors(Object* WorldContextObject, out const ActorLayer ActorLayer);// 0x23d458ebd041 0x7e617ece20
	void AddActorToLayer(Actor* InActor, out const ActorLayer Layer);// 0x23d358ebd041 0x7e617ecf00

--------------------------------
Class: ActorLayer
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e61564480

--------------------------------
Class: AndroidFileServerBPLibrary.BlueprintFunctionLibrary.Object
	bool StopFileServer(bool bUSB, bool bNetwork);// 0x23d858ebd041 0x7e617ecaa0
	bool StartFileServer(bool bUSB, bool bNetwork, int Port);// 0x23d758ebd041 0x7e617ecb80
	byte IsFileServerRunning();// 0x23d658ebd041 0x7e617ecc60

--------------------------------
Class: AppleImageUtilsBaseAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e61819900
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7e61819980
	AppleImageUtilsImageConversionResult ConversionResult;//[Offset: 0x60, Size: 0x20] 0x7e61819a00
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToTIFF(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x23dc58ebd041 0x7e617efc80
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToPNG(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x23db58ebd041 0x7e617efd60
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToJPEG(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x23da58ebd041 0x7e617efe40
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToHEIF(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xffffff8158ebd000 0x7e617eff20

--------------------------------
Class: AppleImageUtilsImageConversionResult
	FString Error;//[Offset: 0x0, Size: 0x10] 0x7e84e6a000
	byte[] ImageData;//[Offset: 0x10, Size: 0x10] 0x7e84dd3c60

--------------------------------
Class: AppleImageInterface.Interface.Object

--------------------------------
Class: ArchVisCharacter.Character.Pawn.Actor.Object
	FString LookUpAxisName;//[Offset: 0x5f8, Size: 0x10] 0x7e61819500
	FString LookUpAtRateAxisName;//[Offset: 0x608, Size: 0x10] 0x7e61819580
	FString TurnAxisName;//[Offset: 0x618, Size: 0x10] 0x7e61819600
	FString TurnAtRateAxisName;//[Offset: 0x628, Size: 0x10] 0x7e61819680
	FString MoveForwardAxisName;//[Offset: 0x638, Size: 0x10] 0x7e61819700
	FString MoveRightAxisName;//[Offset: 0x648, Size: 0x10] 0x7e61819780
	float MouseSensitivityScale_Pitch;//[Offset: 0x658, Size: 0x4] 0x7e61819800
	float MouseSensitivityScale_Yaw;//[Offset: 0x65c, Size: 0x4] 0x7e61819880

--------------------------------
Class: ArchVisCharMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationalAcceleration;//[Offset: 0xef8, Size: 0x18] 0x7e61831680
	Rotator RotationalDeceleration;//[Offset: 0xf10, Size: 0x18] 0x7e61831700
	Rotator MaxRotationalVelocity;//[Offset: 0xf28, Size: 0x18] 0x7e61831780
	float MinPitch;//[Offset: 0xf40, Size: 0x4] 0x7e61831800
	float MaxPitch;//[Offset: 0xf44, Size: 0x4] 0x7e61831880
	float WalkingFriction;//[Offset: 0xf48, Size: 0x4] 0x7e61831900
	float WalkingSpeed;//[Offset: 0xf4c, Size: 0x4] 0x7e61831980
	float WalkingAcceleration;//[Offset: 0xf50, Size: 0x4] 0x7e61831a00

--------------------------------
Class: AssetTagsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	FName[] GetCollectionsContainingAssetPtr(const Object* AssetPtr);// 0x245858ebd041 0x7e61823960
	FName[] GetCollectionsContainingAssetData(out const AssetData AssetData);// 0x241558ebd041 0x7e61820080
	FName[] GetCollectionsContainingAsset(const FName AssetPathName);// 0x241458ebd041 0x7e61820160
	FName[] GetCollections();// 0x241358ebd041 0x7e61820240
	AssetData[] GetAssetsInCollection(const FName Name);// 0x241258ebd041 0x7e61820320
	bool CollectionExists(const FName Name);// 0x241158ebd041 0x7e61820400

--------------------------------
Class: AudioGenerator.Object

--------------------------------
Class: AudioCapture.AudioGenerator.Object
	void StopCapturingAudio();// 0x241a58ebd041 0x7e618235e0
	void StartCapturingAudio();// 0x241958ebd041 0x7e618236c0
	bool IsCapturingAudio();// 0x241858ebd041 0x7e618237a0
	bool GetAudioCaptureDeviceInfo(out AudioCaptureDeviceInfo OutInfo);// 0x241758ebd041 0x7e61823880

--------------------------------
Class: AudioCaptureDeviceInfo
	FName DeviceName;//[Offset: 0x0, Size: 0x8] 0x7e61566100
	int NumInputChannels;//[Offset: 0x8, Size: 0x4] 0x7e61566180
	int SampleRate;//[Offset: 0xc, Size: 0x4] 0x7e61566200

--------------------------------
Class: AudioCaptureFunctionLibrary.BlueprintFunctionLibrary.Object
	AudioCapture* CreateAudioCapture();// 0x241b58ebd041 0x7e61823500

--------------------------------
Class: AudioCaptureBlueprintLibrary.BlueprintFunctionLibrary.Object
	void GetAvailableAudioInputDevices(const Object* WorldContextObject, out const delegate OnObtainDevicesEvent);// 0x241d58ebd041 0x7e61823340
	FString Conv_AudioInputDeviceInfoToString(out const AudioInputDeviceInfo Info);// 0x241c58ebd041 0x7e61823420

--------------------------------
Class: AudioInputDeviceInfo
	FString DeviceName;//[Offset: 0x0, Size: 0x10] 0x7e61566280
	FString DeviceID;//[Offset: 0x10, Size: 0x10] 0x7e61566300
	int InputChannels;//[Offset: 0x20, Size: 0x4] 0x7e61564280
	int PreferredSampleRate;//[Offset: 0x24, Size: 0x4] 0x7e61564300
	bool bSupportsHardwareAEC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e61564380

--------------------------------
Class: AudioCaptureComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int JitterLatencyFrames;//[Offset: 0x7a0, Size: 0x4] 0x7e61832d80

--------------------------------
Class: CableActor.Actor.Object
	CableComponent* CableComponent;//[Offset: 0x278, Size: 0x8] 0x7e61832d00

--------------------------------
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAttachStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 0x1] 0x7e61834000
	bool bAttachEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 0x1] 0x7e61834080
	ComponentReference AttachEndTo;//[Offset: 0x560, Size: 0x28] 0x7e61834100
	FName AttachEndToSocketName;//[Offset: 0x588, Size: 0x8] 0x7e61834180
	Vector EndLocation;//[Offset: 0x590, Size: 0x18] 0x7e61834200
	float CableLength;//[Offset: 0x5a8, Size: 0x4] 0x7e61832180
	int NumSegments;//[Offset: 0x5ac, Size: 0x4] 0x7e61832200
	float SubstepTime;//[Offset: 0x5b0, Size: 0x4] 0x7e61832280
	int SolverIterations;//[Offset: 0x5b4, Size: 0x4] 0x7e61832300
	bool bEnableStiffness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1] 0x7e61832380
	bool bUseSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1] 0x7e61832400
	bool bSkipCableUpdateWhenNotVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 0x1] 0x7e61832480
	bool bSkipCableUpdateWhenNotOwnerRecentlyRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bb, Size: 0x1] 0x7e61832500
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1] 0x7e61832580
	float CollisionFriction;//[Offset: 0x5c0, Size: 0x4] 0x7e61832600
	Vector CableForce;//[Offset: 0x5c8, Size: 0x18] 0x7e61832680
	float CableGravityScale;//[Offset: 0x5e0, Size: 0x4] 0x7e61832700
	float CableWidth;//[Offset: 0x5e4, Size: 0x4] 0x7e61832780
	int NumSides;//[Offset: 0x5e8, Size: 0x4] 0x7e61832800
	float TileMaterial;//[Offset: 0x5ec, Size: 0x4] 0x7e61832880
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0x242258ebd041 0x7e61822ee0
	void SetAttachEndTo(Actor* Actor, FName ComponentProperty, FName SocketName);// 0x242158ebd041 0x7e61822fc0
	void GetCableParticleLocations(out Vector[] Locations);// 0x242058ebd041 0x7e618230a0
	SceneComponent* GetAttachedComponent();// 0x241f58ebd041 0x7e61823180
	Actor* GetAttachedActor();// 0x241e58ebd041 0x7e61823260

--------------------------------
Class: CustomMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool SetCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x242558ebd041 0x7e61822c40
	void ClearCustomMeshTriangles();// 0x242458ebd041 0x7e61822d20
	void AddCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x242358ebd041 0x7e61822e00

--------------------------------
Class: CustomMeshTriangle
	Vector Vertex0;//[Offset: 0x0, Size: 0x18] 0x7e61565f80
	Vector Vertex1;//[Offset: 0x18, Size: 0x18] 0x7e61566000
	Vector Vertex2;//[Offset: 0x30, Size: 0x18] 0x7e61566080

--------------------------------
Class: GooglePADFunctionLibrary.BlueprintFunctionLibrary.Object
	enum ShowCellularDataConfirmation();// 0x243458ebd041 0x7e61821f20
	enum RequestRemoval(FString Name);// 0x243358ebd041 0x7e61822000
	enum RequestInfo(const FString[] AssetPacks);// 0x243258ebd041 0x7e618220e0
	enum RequestDownload(const FString[] AssetPacks);// 0x243158ebd041 0x7e618221c0
	void ReleaseDownloadState(const int State);// 0x243058ebd041 0x7e618222a0
	void ReleaseAssetPackLocation(const int Location);// 0x242f58ebd041 0x7e61822380
	int GetTotalBytesToDownload(const int State);// 0x242e58ebd041 0x7e61822460
	enum GetStorageMethod(const int Location);// 0x242d58ebd041 0x7e61822540
	enum GetShowCellularDataConfirmationStatus(out enum Status);// 0x242c58ebd041 0x7e61822620
	enum GetDownloadStatus(const int State);// 0x242b58ebd041 0x7e61822700
	enum GetDownloadState(FString Name, out int State);// 0x242a58ebd041 0x7e618227e0
	int GetBytesDownloaded(const int State);// 0x242958ebd041 0x7e618228c0
	FString GetAssetsPath(const int Location);// 0x242858ebd041 0x7e618229a0
	enum GetAssetPackLocation(FString Name, out int Location);// 0x242758ebd041 0x7e61822a80
	enum CancelDownload(const FString[] AssetPacks);// 0x242658ebd041 0x7e61822b60

--------------------------------
Class: LocationServices.BlueprintFunctionLibrary.Object
	bool StopLocationServices();// 0x243b58ebd041 0x7e618252c0
	bool StartLocationServices();// 0x243a58ebd041 0x7e618253a0
	bool IsLocationAccuracyAvailable(enum Accuracy);// 0x243958ebd041 0x7e61825480
	bool InitLocationServices(enum Accuracy, float UpdateFrequency, float MinDistanceFilter);// 0x243858ebd041 0x7e61825560
	LocationServicesImpl* GetLocationServicesImpl();// 0x247958ebd041 0x7e61825640
	LocationServicesData GetLastKnownLocation();// 0x243658ebd041 0x7e61821d60
	bool AreLocationServicesEnabled();// 0x243558ebd041 0x7e61821e40

--------------------------------
Class: LocationServicesImpl.Object
	delegate OnLocationChanged;//[Offset: 0x28, Size: 0x10] 0x7e61834b00

--------------------------------
Class: LocationServicesData
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x7e84e69c80
	float Longitude;//[Offset: 0x4, Size: 0x4] 0x7e84e69d00
	float Latitude;//[Offset: 0x8, Size: 0x4] 0x7e84e69e00
	float HorizontalAccuracy;//[Offset: 0xc, Size: 0x4] 0x7e84e69d80
	float VerticalAccuracy;//[Offset: 0x10, Size: 0x4] 0x7e84e69f00
	float Altitude;//[Offset: 0x14, Size: 0x4] 0x7e84e69e80

--------------------------------
Class: MobileInstalledContent.Object
	bool Mount(int PakOrder, FString MountPoint);// 0x244258ebd041 0x7e61824ca0
	float GetInstalledContentSize();// 0x244158ebd041 0x7e61824d80
	float GetDiskFreeSpace();// 0x244058ebd041 0x7e61824e60

--------------------------------
Class: MobilePendingContent.MobileInstalledContent.Object
	void StartInstall(delegate OnSucceeded, delegate OnFailed);// 0x244958ebd041 0x7e61824680
	float GetTotalDownloadedSize();// 0x244858ebd041 0x7e61824760
	float GetRequiredDiskSpace();// 0x244758ebd041 0x7e61824840
	float GetInstallProgress();// 0x244658ebd041 0x7e61824920
	FText GetDownloadStatusText();// 0x244558ebd041 0x7e61824a00
	float GetDownloadSpeed();// 0x244458ebd041 0x7e61824ae0
	float GetDownloadSize();// 0x244358ebd041 0x7e61824bc0

--------------------------------
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object
	void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed);// 0x244e58ebd041 0x7e61824220
	bool HasActiveWiFiConnection();// 0x244d58ebd041 0x7e61824300
	FString[] GetSupportedPlatformNames();// 0x244c58ebd041 0x7e618243e0
	MobileInstalledContent* GetInstalledContent(FString InstallDirectory);// 0x244b58ebd041 0x7e618244c0
	FString GetActiveDeviceProfileName();// 0x244a58ebd041 0x7e618245a0

--------------------------------
Class: ResonanceAudioSoundfieldSettings.SoundfieldEncodingSettingsBase.Object
	enum RenderMode;//[Offset: 0x28, Size: 0x1] 0x7e617bc400

--------------------------------
Class: ResonanceAudioBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetGlobalReverbPreset(ResonanceAudioReverbPluginPreset* InPreset);// 0x245058ebd041 0x7e61824060
	ResonanceAudioReverbPluginPreset* GetGlobalReverbPreset();// 0x244f58ebd041 0x7e61824140

--------------------------------
Class: ResonanceAudioReverbPluginPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	ResonanceAudioReverbPluginSettings Settings;//[Offset: 0x100, Size: 0x70] 0x7e61835680
	void SetRoomRotation(out const Quat InRotation);// 0x245958ebd041 0x7e61827240
	void SetRoomPosition(out const Vector InPosition);// 0x249a58ebd041 0x7e61827320
	void SetRoomMaterials(out const enum[] InMaterials);// 0x245758ebd041 0x7e61823a40
	void SetRoomDimensions(out const Vector InDimensions);// 0x245658ebd041 0x7e61823b20
	void SetReverbTimeModifier(float InReverbTimeModifier);// 0x245558ebd041 0x7e61823c00
	void SetReverbGain(float InReverbGain);// 0x245458ebd041 0x7e61823ce0
	void SetReverbBrightness(float InReverbBrightness);// 0x245358ebd041 0x7e61823dc0
	void SetReflectionScalar(float InReflectionScalar);// 0x245258ebd041 0x7e61823ea0
	void SetEnableRoomEffects(bool bInEnableRoomEffects);// 0x245158ebd041 0x7e61823f80

--------------------------------
Class: ResonanceAudioReverbPluginSettings
	bool bEnableRoomEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61565800
	bool bGetTransformFromAudioVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e61565880
	Vector RoomPosition;//[Offset: 0x8, Size: 0x18] 0x7e61565900
	Quat RoomRotation;//[Offset: 0x20, Size: 0x20] 0x7e61565980
	Vector RoomDimensions;//[Offset: 0x40, Size: 0x18] 0x7e61565a00
	enum LeftWallMaterial;//[Offset: 0x58, Size: 0x1] 0x7e84e225e0
	enum RightWallMaterial;//[Offset: 0x59, Size: 0x1] 0x7e84e22540
	enum FloorMaterial;//[Offset: 0x5a, Size: 0x1] 0x7e84e224a0
	enum CeilingMaterial;//[Offset: 0x5b, Size: 0x1] 0x7e84e22400
	enum FrontWallMaterial;//[Offset: 0x5c, Size: 0x1] 0x7e84e24f20
	enum BackWallMaterial;//[Offset: 0x5d, Size: 0x1] 0x7e84e24e80
	float ReflectionScalar;//[Offset: 0x60, Size: 0x4] 0x7e61565d80
	float ReverbGain;//[Offset: 0x64, Size: 0x4] 0x7e61565e00
	float ReverbTimeModifier;//[Offset: 0x68, Size: 0x4] 0x7e61565e80
	float ReverbBrightness;//[Offset: 0x6c, Size: 0x4] 0x7e61565f00

--------------------------------
Class: ResonanceAudioDirectivityVisualizer.Actor.Object
	Material* Material;//[Offset: 0x2e8, Size: 0x8] 0x7e61835b80
	ResonanceAudioSpatializationSourceSettings* Settings;//[Offset: 0x2f0, Size: 0x8] 0x7e61835c00

--------------------------------
Class: ResonanceAudioSpatializationSourceSettings.SpatializationPluginSourceSettingsBase.Object
	enum SpatializationMethod;//[Offset: 0x28, Size: 0x1] 0x7e617bc0e0
	float Pattern;//[Offset: 0x2c, Size: 0x4] 0x7e61837000
	float Sharpness;//[Offset: 0x30, Size: 0x4] 0x7e61837080
	bool bToggleVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7e61837100
	float Scale;//[Offset: 0x38, Size: 0x4] 0x7e61837180
	float Spread;//[Offset: 0x3c, Size: 0x4] 0x7e61837200
	enum Rolloff;//[Offset: 0x40, Size: 0x1] 0x7e617bc180
	float MinDistance;//[Offset: 0x44, Size: 0x4] 0x7e61837300
	float MaxDistance;//[Offset: 0x48, Size: 0x4] 0x7e61837380
	void SetSoundSourceSpread(float InSpread);// 0x245b58ebd041 0x7e61827080
	void SetSoundSourceDirectivity(float InPattern, float InSharpness);// 0x245a58ebd041 0x7e61827160

--------------------------------
Class: ResonanceAudioSettings.Object
	SoftObjectPath OutputSubmix;//[Offset: 0x28, Size: 0x18] 0x7e61835480
	enum QualityMode;//[Offset: 0x40, Size: 0x1] 0x7e617bc220
	SoftObjectPath GlobalReverbPreset;//[Offset: 0x48, Size: 0x18] 0x7e61835580
	SoftObjectPath GlobalSourcePreset;//[Offset: 0x60, Size: 0x18] 0x7e61835600

--------------------------------
Class: AmbisonicsEncodingSettings.SoundfieldEncodingSettingsBase.Object
	int AmbisonicsOrder;//[Offset: 0x28, Size: 0x4] 0x7e61836f00

--------------------------------
Class: ModularSynthPresetBank.Object
	ModularSynthPresetBankEntry[] Presets;//[Offset: 0x28, Size: 0x10] 0x7e617bc040

--------------------------------
Class: ModularSynthPresetBankEntry
	FString PresetName;//[Offset: 0x0, Size: 0x10] 0x7e61567980
	ModularSynthPreset Preset;//[Offset: 0x10, Size: 0xd0] 0x7e61567a00

--------------------------------
Class: ModularSynthPreset.TableRowBase
	bool bEnablePolyphony;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e61567a80
	enum Osc1Type;//[Offset: 0x9, Size: 0x1] 0x7e84e20740
	float Osc1Gain;//[Offset: 0xc, Size: 0x4] 0x7e61567b80
	float Osc1Octave;//[Offset: 0x10, Size: 0x4] 0x7e61567c00
	float Osc1Semitones;//[Offset: 0x14, Size: 0x4] 0x7e61567c80
	float Osc1Cents;//[Offset: 0x18, Size: 0x4] 0x7e61567d00
	float Osc1PulseWidth;//[Offset: 0x1c, Size: 0x4] 0x7e61567d80
	enum Osc2Type;//[Offset: 0x20, Size: 0x1] 0x7e84e206a0
	float Osc2Gain;//[Offset: 0x24, Size: 0x4] 0x7e61567e80
	float Osc2Octave;//[Offset: 0x28, Size: 0x4] 0x7e61567f00
	float Osc2Semitones;//[Offset: 0x2c, Size: 0x4] 0x7e61567f80
	float Osc2Cents;//[Offset: 0x30, Size: 0x4] 0x7e61568000
	float Osc2PulseWidth;//[Offset: 0x34, Size: 0x4] 0x7e61568080
	float Portamento;//[Offset: 0x38, Size: 0x4] 0x7e61568100
	bool bEnableUnison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7e61568180
	bool bEnableOscillatorSync;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7e61568200
	float Spread;//[Offset: 0x40, Size: 0x4] 0x7e61568280
	float Pan;//[Offset: 0x44, Size: 0x4] 0x7e61568300
	float LFO1Frequency;//[Offset: 0x48, Size: 0x4] 0x7e61568380
	float LFO1Gain;//[Offset: 0x4c, Size: 0x4] 0x7e61568400
	enum LFO1Type;//[Offset: 0x50, Size: 0x1] 0x7e84e20600
	enum LFO1Mode;//[Offset: 0x51, Size: 0x1] 0x7e84e20560
	enum LFO1PatchType;//[Offset: 0x52, Size: 0x1] 0x7e84e204c0
	float LFO2Frequency;//[Offset: 0x54, Size: 0x4] 0x7e61566500
	float LFO2Gain;//[Offset: 0x58, Size: 0x4] 0x7e61566580
	enum LFO2Type;//[Offset: 0x5c, Size: 0x1] 0x7e84e20420
	enum LFO2Mode;//[Offset: 0x5d, Size: 0x1] 0x7e84e20380
	enum LFO2PatchType;//[Offset: 0x5e, Size: 0x1] 0x7e84e202e0
	float GainDb;//[Offset: 0x60, Size: 0x4] 0x7e61566780
	float AttackTime;//[Offset: 0x64, Size: 0x4] 0x7e61566800
	float DecayTime;//[Offset: 0x68, Size: 0x4] 0x7e61566880
	float SustainGain;//[Offset: 0x6c, Size: 0x4] 0x7e61566900
	float ReleaseTime;//[Offset: 0x70, Size: 0x4] 0x7e61566980
	enum ModEnvPatchType;//[Offset: 0x74, Size: 0x1] 0x7e84e20240
	enum ModEnvBiasPatchType;//[Offset: 0x75, Size: 0x1] 0x7e84e201a0
	bool bInvertModulationEnvelope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76, Size: 0x1] 0x7e61566b00
	bool bInvertModulationEnvelopeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76, Size: 0x1] 0x7e61566b80
	float ModulationEnvelopeDepth;//[Offset: 0x78, Size: 0x4] 0x7e61566c00
	float ModulationEnvelopeAttackTime;//[Offset: 0x7c, Size: 0x4] 0x7e61566c80
	float ModulationEnvelopeDecayTime;//[Offset: 0x80, Size: 0x4] 0x7e61566d00
	float ModulationEnvelopeSustainGain;//[Offset: 0x84, Size: 0x4] 0x7e61566d80
	float ModulationEnvelopeReleaseTime;//[Offset: 0x88, Size: 0x4] 0x7e61566e00
	bool bLegato;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x7e61566e80
	bool bRetrigger;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x7e61566f00
	float FilterFrequency;//[Offset: 0x90, Size: 0x4] 0x7e61566f80
	float FilterQ;//[Offset: 0x94, Size: 0x4] 0x7e61567000
	enum FilterType;//[Offset: 0x98, Size: 0x1] 0x7e84e20100
	enum FilterAlgorithm;//[Offset: 0x99, Size: 0x1] 0x7e84e20060
	bool bStereoDelayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a, Size: 0x1] 0x7e61567180
	enum StereoDelayMode;//[Offset: 0x9b, Size: 0x1] 0x7e84e22900
	float StereoDelayTime;//[Offset: 0x9c, Size: 0x4] 0x7e61567280
	float StereoDelayFeedback;//[Offset: 0xa0, Size: 0x4] 0x7e61567300
	float StereoDelayWetlevel;//[Offset: 0xa4, Size: 0x4] 0x7e61567380
	float StereoDelayRatio;//[Offset: 0xa8, Size: 0x4] 0x7e61565300
	bool bChorusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7e61565380
	float ChorusDepth;//[Offset: 0xb0, Size: 0x4] 0x7e61565400
	float ChorusFeedback;//[Offset: 0xb4, Size: 0x4] 0x7e61565480
	float ChorusFrequency;//[Offset: 0xb8, Size: 0x4] 0x7e61565500
	EpicSynth1Patch[] Patches;//[Offset: 0xc0, Size: 0x10] 0x7e84e22860

--------------------------------
Class: EpicSynth1Patch
	enum PatchSource;//[Offset: 0x0, Size: 0x1] 0x7e84e227c0
	Synth1PatchCable[] PatchCables;//[Offset: 0x8, Size: 0x10] 0x7e84e22680

--------------------------------
Class: Synth1PatchCable
	float Depth;//[Offset: 0x0, Size: 0x4] 0x7e61565680
	enum Destination;//[Offset: 0x4, Size: 0x1] 0x7e84e22720

--------------------------------
Class: ModularSynthLibrary.BlueprintFunctionLibrary.Object
	void AddModularSynthPresetToBankAsset(ModularSynthPresetBank* InBank, out const ModularSynthPreset Preset, FString PresetName);// 0x245c58ebd041 0x7e61826fa0

--------------------------------
Class: ModularSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int VoiceCount;//[Offset: 0x7a0, Size: 0x4] 0x7e61838500
	void SetSynthPreset(out const ModularSynthPreset SynthPreset);// 0x249758ebd041 0x7e618275c0
	void SetSustainGain(float SustainGain);// 0x249658ebd041 0x7e618276a0
	void SetStereoDelayWetlevel(float DelayWetlevel);// 0x249558ebd041 0x7e61827780
	void SetStereoDelayTime(float DelayTimeMsec);// 0x249458ebd041 0x7e61827860
	void SetStereoDelayRatio(float DelayRatio);// 0x249358ebd041 0x7e61827940
	void SetStereoDelayMode(enum StereoDelayMode);// 0x249258ebd041 0x7e61827a20
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);// 0x249158ebd041 0x7e61827b00
	void SetStereoDelayFeedback(float DelayFeedback);// 0x249058ebd041 0x7e61827be0
	void SetSpread(float Spread);// 0x248f58ebd041 0x7e61827cc0
	void SetReleaseTime(float ReleaseTimeMsec);// 0x248e58ebd041 0x7e61827da0
	void SetPortamento(float Portamento);// 0x248d58ebd041 0x7e61827e80
	void SetPitchBend(float PitchBend);// 0x248c58ebd041 0x7e61827f60
	void SetPan(float Pan);// 0x248b58ebd041 0x7e61828040
	void SetOscType(int OscIndex, enum OscType);// 0x248a58ebd041 0x7e61828120
	void SetOscSync(const bool bIsSynced);// 0x248958ebd041 0x7e61828200
	void SetOscSemitones(int OscIndex, float Semitones);// 0x248858ebd041 0x7e618282e0
	void SetOscPulsewidth(int OscIndex, float Pulsewidth);// 0x248758ebd041 0x7e618283c0
	void SetOscOctave(int OscIndex, float Octave);// 0x248658ebd041 0x7e618284a0
	void SetOscGainMod(int OscIndex, float OscGainMod);// 0x248558ebd041 0x7e61828580
	void SetOscGain(int OscIndex, float OscGain);// 0x248458ebd041 0x7e61828660
	void SetOscFrequencyMod(int OscIndex, float OscFreqMod);// 0x248358ebd041 0x7e61828740
	void SetOscCents(int OscIndex, float Cents);// 0x248258ebd041 0x7e61828820
	void SetModEnvSustainGain(const float SustainGain);// 0x248158ebd041 0x7e61828900
	void SetModEnvReleaseTime(const float Release);// 0x248058ebd041 0x7e618289e0
	void SetModEnvPatch(const enum InPatchType);// 0x247f58ebd041 0x7e61828ac0
	void SetModEnvInvert(const bool bInvert);// 0x247e58ebd041 0x7e61828ba0
	void SetModEnvDepth(const float Depth);// 0x247d58ebd041 0x7e61828c80
	void SetModEnvDecayTime(const float DecayTimeMsec);// 0x247c58ebd041 0x7e61828d60
	void SetModEnvBiasPatch(const enum InPatchType);// 0x247b58ebd041 0x7e61828e40
	void SetModEnvBiasInvert(const bool bInvert);// 0x247a58ebd041 0x7e61828f20
	void SetModEnvAttackTime(const float AttackTimeMsec);// 0x24bb58ebd041 0x7e61829000
	void SetLFOType(int LFOIndex, enum LFOType);// 0x247858ebd041 0x7e61825720
	void SetLFOPatch(int LFOIndex, enum LFOPatchType);// 0x247758ebd041 0x7e61825800
	void SetLFOMode(int LFOIndex, enum LFOMode);// 0x247658ebd041 0x7e618258e0
	void SetLFOGainMod(int LFOIndex, float GainMod);// 0x247558ebd041 0x7e618259c0
	void SetLFOGain(int LFOIndex, float Gain);// 0x247458ebd041 0x7e61825aa0
	void SetLFOFrequencyMod(int LFOIndex, float FrequencyModHz);// 0x247358ebd041 0x7e61825b80
	void SetLFOFrequency(int LFOIndex, float FrequencyHz);// 0x247258ebd041 0x7e61825c60
	void SetGainDb(float GainDb);// 0x247158ebd041 0x7e61825d40
	void SetFilterType(enum FilterType);// 0x247058ebd041 0x7e61825e20
	void SetFilterQMod(float FilterQ);// 0x246f58ebd041 0x7e61825f00
	void SetFilterQ(float FilterQ);// 0x246e58ebd041 0x7e61825fe0
	void SetFilterFrequencyMod(float FilterFrequencyHz);// 0x246d58ebd041 0x7e618260c0
	void SetFilterFrequency(float FilterFrequencyHz);// 0x246c58ebd041 0x7e618261a0
	void SetFilterAlgorithm(enum FilterAlgorithm);// 0x246b58ebd041 0x7e61826280
	void SetEnableUnison(bool EnableUnison);// 0x246a58ebd041 0x7e61826360
	void SetEnableRetrigger(bool RetriggerEnabled);// 0x246958ebd041 0x7e61826440
	void SetEnablePolyphony(bool bEnablePolyphony);// 0x246858ebd041 0x7e61826520
	bool SetEnablePatch(const PatchId PatchId, const bool bIsEnabled);// 0x246758ebd041 0x7e61826600
	void SetEnableLegato(bool LegatoEnabled);// 0x246658ebd041 0x7e618266e0
	void SetDecayTime(float DecayTimeMsec);// 0x246558ebd041 0x7e618267c0
	void SetChorusFrequency(float Frequency);// 0x246458ebd041 0x7e618268a0
	void SetChorusFeedback(float Feedback);// 0x246358ebd041 0x7e61826980
	void SetChorusEnabled(bool EnableChorus);// 0x246258ebd041 0x7e61826a60
	void SetChorusDepth(float Depth);// 0x246158ebd041 0x7e61826b40
	void SetAttackTime(float AttackTimeMsec);// 0x246058ebd041 0x7e61826c20
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x245f58ebd041 0x7e61826d00
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);// 0x245e58ebd041 0x7e61826de0
	PatchId CreatePatch(const enum PatchSource, out const Synth1PatchCable[] PatchCables, const bool bEnableByDefault);// 0x245d58ebd041 0x7e61826ec0

--------------------------------
Class: PatchId
	int ID;//[Offset: 0x0, Size: 0x4] 0x7e61567900

--------------------------------
Class: SourceEffectBitCrusherPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectBitCrusherSettings Settings;//[Offset: 0xc0, Size: 0x30] 0x7e6183a280
	void SetSettings(out const SourceEffectBitCrusherBaseSettings Settings);// 0x249d58ebd041 0x7e6182aa40
	void SetSampleRateModulator(const SoundModulatorBase* Modulator);// 0x249c58ebd041 0x7e6182ab20
	void SetSampleRate(float SampleRate);// 0x249b58ebd041 0x7e6182ac00
	void SetModulationSettings(out const SourceEffectBitCrusherSettings ModulationSettings);// 0x24dc58ebd041 0x7e6182ace0
	void SetBits(float Bits);// 0x249958ebd041 0x7e61827400
	void SetBitModulator(const SoundModulatorBase* Modulator);// 0x249858ebd041 0x7e618274e0

--------------------------------
Class: SourceEffectBitCrusherSettings
	float CrushedSampleRate;//[Offset: 0x0, Size: 0x4] 0x7e61567500
	SoundModulationDestinationSettings SampleRateModulation;//[Offset: 0x8, Size: 0x10] 0x7e61567580
	float CrushedBits;//[Offset: 0x18, Size: 0x4] 0x7e61567600
	SoundModulationDestinationSettings BitModulation;//[Offset: 0x20, Size: 0x10] 0x7e61567780

--------------------------------
Class: SourceEffectBitCrusherBaseSettings
	float SampleRate;//[Offset: 0x0, Size: 0x4] 0x7e61567800
	float BitDepth;//[Offset: 0x4, Size: 0x4] 0x7e61567880

--------------------------------
Class: SourceEffectChorusPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectChorusSettings Settings;//[Offset: 0x108, Size: 0x78] 0x7e61839b00
	void SetWetModulator(const SoundModulatorBase* Modulator);// 0x24ab58ebd041 0x7e61829e00
	void SetWet(float WetAmount);// 0x24aa58ebd041 0x7e61829ee0
	void SetSpreadModulator(const SoundModulatorBase* Modulator);// 0x24a958ebd041 0x7e61829fc0
	void SetSpread(float Spread);// 0x24a858ebd041 0x7e6182a0a0
	void SetSettings(out const SourceEffectChorusBaseSettings Settings);// 0x24a758ebd041 0x7e6182a180
	void SetModulationSettings(out const SourceEffectChorusSettings ModulationSettings);// 0x24a658ebd041 0x7e6182a260
	void SetFrequencyModulator(const SoundModulatorBase* Modulator);// 0x24a558ebd041 0x7e6182a340
	void SetFrequency(float Frequency);// 0x24a458ebd041 0x7e6182a420
	void SetFeedbackModulator(const SoundModulatorBase* Modulator);// 0x24a358ebd041 0x7e6182a500
	void SetFeedback(float Feedback);// 0x24a258ebd041 0x7e6182a5e0
	void SetDryModulator(const SoundModulatorBase* Modulator);// 0x24a158ebd041 0x7e6182a6c0
	void SetDry(float DryAmount);// 0x24a058ebd041 0x7e6182a7a0
	void SetDepthModulator(const SoundModulatorBase* Modulator);// 0x249f58ebd041 0x7e6182a880
	void SetDepth(float Depth);// 0x249e58ebd041 0x7e6182a960

--------------------------------
Class: SourceEffectChorusSettings
	float Depth;//[Offset: 0x0, Size: 0x4] 0x7e61568d00
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7e61568d80
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7e61568e00
	float WetLevel;//[Offset: 0xc, Size: 0x4] 0x7e61568e80
	float DryLevel;//[Offset: 0x10, Size: 0x4] 0x7e61568f00
	float Spread;//[Offset: 0x14, Size: 0x4] 0x7e61568f80
	SoundModulationDestinationSettings DepthModulation;//[Offset: 0x18, Size: 0x10] 0x7e61569000
	SoundModulationDestinationSettings FrequencyModulation;//[Offset: 0x28, Size: 0x10] 0x7e61569080
	SoundModulationDestinationSettings FeedbackModulation;//[Offset: 0x38, Size: 0x10] 0x7e61569100
	SoundModulationDestinationSettings WetModulation;//[Offset: 0x48, Size: 0x10] 0x7e61569180
	SoundModulationDestinationSettings DryModulation;//[Offset: 0x58, Size: 0x10] 0x7e61569200
	SoundModulationDestinationSettings SpreadModulation;//[Offset: 0x68, Size: 0x10] 0x7e61569280

--------------------------------
Class: SourceEffectChorusBaseSettings
	float Depth;//[Offset: 0x0, Size: 0x4] 0x7e61569300
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7e61569380
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7e61569400
	float WetLevel;//[Offset: 0xc, Size: 0x4] 0x7e61569480
	float DryLevel;//[Offset: 0x10, Size: 0x4] 0x7e61567400
	float Spread;//[Offset: 0x14, Size: 0x4] 0x7e61567480

--------------------------------
Class: SourceEffectDynamicsProcessorPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectDynamicsProcessorSettings Settings;//[Offset: 0xb4, Size: 0x28] 0x7e61839a00
	void SetSettings(out const SourceEffectDynamicsProcessorSettings InSettings);// 0x24ac58ebd041 0x7e61829d20

--------------------------------
Class: SourceEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x7e84e20880
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x7e84e207e0
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x7e61568800
	float AttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7e61568880
	float ReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x7e61568900
	float ThresholdDb;//[Offset: 0x10, Size: 0x4] 0x7e61568980
	float Ratio;//[Offset: 0x14, Size: 0x4] 0x7e61568a00
	float KneeBandwidthDb;//[Offset: 0x18, Size: 0x4] 0x7e61568a80
	float InputGainDb;//[Offset: 0x1c, Size: 0x4] 0x7e61568b00
	float OutputGainDb;//[Offset: 0x20, Size: 0x4] 0x7e61568b80
	bool bStereoLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x7e61568c00
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x7e61568c80

--------------------------------
Class: EnvelopeFollowerListener.ActorComponent.Object
	delegate OnEnvelopeFollowerUpdate;//[Offset: 0xb0, Size: 0x10] 0x7e61839980

--------------------------------
Class: SourceEffectEnvelopeFollowerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEnvelopeFollowerSettings Settings;//[Offset: 0x98, Size: 0xc] 0x7e61839780
	void UnregisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x24af58ebd041 0x7e61829a80
	void SetSettings(out const SourceEffectEnvelopeFollowerSettings InSettings);// 0x24ae58ebd041 0x7e61829b60
	void RegisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x24ad58ebd041 0x7e61829c40

--------------------------------
Class: SourceEffectEnvelopeFollowerSettings
	float AttackTime;//[Offset: 0x0, Size: 0x4] 0x7e61568500
	float ReleaseTime;//[Offset: 0x4, Size: 0x4] 0x7e61568580
	enum PeakMode;//[Offset: 0x8, Size: 0x1] 0x7e84e20920
	bool bIsAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7e61568680

--------------------------------
Class: SourceEffectEQPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEQSettings Settings;//[Offset: 0xa0, Size: 0x10] 0x7e61839680
	void SetSettings(out const SourceEffectEQSettings InSettings);// 0x24b058ebd041 0x7e618299a0

--------------------------------
Class: SourceEffectEQSettings
	SourceEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x7e84e209c0

--------------------------------
Class: SourceEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x7e6156a400
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x7e6156a480
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x7e6156a500
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7e61568480

--------------------------------
Class: SourceEffectFilterPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFilterSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x7e61839580
	void SetSettings(out const SourceEffectFilterSettings InSettings);// 0x24b158ebd041 0x7e618298c0

--------------------------------
Class: SourceEffectFilterSettings
	enum FilterCircuit;//[Offset: 0x0, Size: 0x1] 0x7e84e20c40
	enum FilterType;//[Offset: 0x1, Size: 0x1] 0x7e84e20ba0
	float CutoffFrequency;//[Offset: 0x4, Size: 0x4] 0x7e61569d80
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x7e61569e00
	SourceEffectFilterAudioBusModulationSettings[] AudioBusModulation;//[Offset: 0x10, Size: 0x10] 0x7e84e20b00

--------------------------------
Class: SourceEffectFilterAudioBusModulationSettings
	AudioBus* AudioBus;//[Offset: 0x0, Size: 0x8] 0x7e61569f00
	int EnvelopeFollowerAttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7e61569f80
	int EnvelopeFollowerReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x7e6156a000
	float EnvelopeGainMultiplier;//[Offset: 0x10, Size: 0x4] 0x7e6156a080
	enum FilterParam;//[Offset: 0x14, Size: 0x1] 0x7e84e20a60
	float MinFrequencyModulation;//[Offset: 0x18, Size: 0x4] 0x7e6156a180
	float MaxFrequencyModulation;//[Offset: 0x1c, Size: 0x4] 0x7e6156a200
	float MinResonanceModulation;//[Offset: 0x20, Size: 0x4] 0x7e6156a280
	float MaxResonanceModulation;//[Offset: 0x24, Size: 0x4] 0x7e6156a300

--------------------------------
Class: SourceEffectFoldbackDistortionPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFoldbackDistortionSettings Settings;//[Offset: 0x98, Size: 0xc] 0x7e6183b580
	void SetSettings(out const SourceEffectFoldbackDistortionSettings InSettings);// 0x24b258ebd041 0x7e618297e0

--------------------------------
Class: SourceEffectFoldbackDistortionSettings
	float InputGainDb;//[Offset: 0x0, Size: 0x4] 0x7e61569b00
	float ThresholdDb;//[Offset: 0x4, Size: 0x4] 0x7e61569b80
	float OutputGainDb;//[Offset: 0x8, Size: 0x4] 0x7e61569c00

--------------------------------
Class: SourceEffectMidSideSpreaderPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectMidSideSpreaderSettings Settings;//[Offset: 0x94, Size: 0x8] 0x7e6183b480
	void SetSettings(out const SourceEffectMidSideSpreaderSettings InSettings);// 0x24b358ebd041 0x7e61829700

--------------------------------
Class: SourceEffectMidSideSpreaderSettings
	float SpreadAmount;//[Offset: 0x0, Size: 0x4] 0x7e61569900
	enum InputMode;//[Offset: 0x4, Size: 0x1] 0x7e84e20d80
	enum OutputMode;//[Offset: 0x5, Size: 0x1] 0x7e84e20ce0
	bool bEqualPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7e61569a80

--------------------------------
Class: SourceEffectMotionFilterPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectMotionFilterSettings Settings;//[Offset: 0x108, Size: 0x78] 0x7e6183b380
	void SetSettings(out const SourceEffectMotionFilterSettings InSettings);// 0x24b458ebd041 0x7e61829620

--------------------------------
Class: SourceEffectMotionFilterSettings
	enum MotionFilterTopology;//[Offset: 0x0, Size: 0x1] 0x7e84e21640
	float MotionFilterMix;//[Offset: 0x4, Size: 0x4] 0x7e6156b280
	SourceEffectIndividualFilterSettings FilterASettings;//[Offset: 0x8, Size: 0xc] 0x7e6156b300
	SourceEffectIndividualFilterSettings FilterBSettings;//[Offset: 0x14, Size: 0xc] 0x7e6156b380
	<enum,SourceEffectMotionFilterModulationSettings> ModulationMappings;//[Offset: 0x20, Size: 0x50] 0x7e61558440
	float DryVolumeDb;//[Offset: 0x70, Size: 0x4] 0x7e6156b500

--------------------------------
Class: SourceEffectIndividualFilterSettings
	enum FilterCircuit;//[Offset: 0x0, Size: 0x1] 0x7e84e20ec0
	enum FilterType;//[Offset: 0x1, Size: 0x1] 0x7e84e20e20
	float CutoffFrequency;//[Offset: 0x4, Size: 0x4] 0x7e61569800
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x7e61569880

--------------------------------
Class: SourceEffectMotionFilterModulationSettings
	enum ModulationSource;//[Offset: 0x0, Size: 0x1] 0x7e84e21460
	Vector2D ModulationInputRange;//[Offset: 0x8, Size: 0x10] 0x7e61569500
	Vector2D ModulationOutputMinimumRange;//[Offset: 0x18, Size: 0x10] 0x7e61569580
	Vector2D ModulationOutputMaximumRange;//[Offset: 0x28, Size: 0x10] 0x7e61569600
	float UpdateEaseMS;//[Offset: 0x38, Size: 0x4] 0x7e61569680

--------------------------------
Class: SourceEffectPannerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPannerSettings Settings;//[Offset: 0x94, Size: 0x8] 0x7e6183b280
	void SetSettings(out const SourceEffectPannerSettings InSettings);// 0x24b558ebd041 0x7e61829540

--------------------------------
Class: SourceEffectPannerSettings
	float Spread;//[Offset: 0x0, Size: 0x4] 0x7e6156b100
	float Pan;//[Offset: 0x4, Size: 0x4] 0x7e6156b180

--------------------------------
Class: SourceEffectPhaserPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPhaserSettings Settings;//[Offset: 0x9c, Size: 0x10] 0x7e6183b180
	void SetSettings(out const SourceEffectPhaserSettings InSettings);// 0x24b658ebd041 0x7e61829460

--------------------------------
Class: SourceEffectPhaserSettings
	float WetLevel;//[Offset: 0x0, Size: 0x4] 0x7e6156ae80
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7e6156af00
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7e6156af80
	enum LFOType;//[Offset: 0xc, Size: 0x1] 0x7e84e216e0
	bool UseQuadraturePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7e6156b080

--------------------------------
Class: SourceEffectRingModulationPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectRingModulationSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x7e6183b080
	void SetSettings(out const SourceEffectRingModulationSettings InSettings);// 0x24b758ebd041 0x7e61829380

--------------------------------
Class: SourceEffectRingModulationSettings
	enum ModulatorType;//[Offset: 0x0, Size: 0x1] 0x7e84e21780
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7e6156ac00
	float Depth;//[Offset: 0x8, Size: 0x4] 0x7e6156ac80
	float DryLevel;//[Offset: 0xc, Size: 0x4] 0x7e6156ad00
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x7e6156ad80
	AudioBus* AudioBusModulator;//[Offset: 0x18, Size: 0x8] 0x7e6156ae00

--------------------------------
Class: SourceEffectSimpleDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectSimpleDelaySettings Settings;//[Offset: 0xa4, Size: 0x18] 0x7e6183af80
	void SetSettings(out const SourceEffectSimpleDelaySettings InSettings);// 0x24b858ebd041 0x7e618292a0

--------------------------------
Class: SourceEffectSimpleDelaySettings
	float SpeedOfSound;//[Offset: 0x0, Size: 0x4] 0x7e6156a880
	float DelayAmount;//[Offset: 0x4, Size: 0x4] 0x7e6156a900
	float DryAmount;//[Offset: 0x8, Size: 0x4] 0x7e6156a980
	float WetAmount;//[Offset: 0xc, Size: 0x4] 0x7e6156aa00
	float Feedback;//[Offset: 0x10, Size: 0x4] 0x7e6156aa80
	bool bDelayBasedOnDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7e6156ab00

--------------------------------
Class: SourceEffectStereoDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x7e6183ae80
	void SetSettings(out const SourceEffectStereoDelaySettings InSettings);// 0x24b958ebd041 0x7e618291c0

--------------------------------
Class: SourceEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x7e84e218c0
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7e6156c500
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7e6156c580
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x7e6156c600
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x7e6156a580
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x7e6156a600
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e6156a680
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x7e84e21820
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x7e6156a780
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x7e6156a800

--------------------------------
Class: SourceEffectWaveShaperPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectWaveShaperSettings Settings;//[Offset: 0x94, Size: 0x8] 0x7e6183ad80
	void SetSettings(out const SourceEffectWaveShaperSettings InSettings);// 0x24ba58ebd041 0x7e618290e0

--------------------------------
Class: SourceEffectWaveShaperSettings
	float Amount;//[Offset: 0x0, Size: 0x4] 0x7e6156c380
	float OutputGainDb;//[Offset: 0x4, Size: 0x4] 0x7e6156c400

--------------------------------
Class: AudioImpulseResponse.Object
	float[] ImpulseResponse;//[Offset: 0x28, Size: 0x10] 0x7e617be160
	int NumChannels;//[Offset: 0x38, Size: 0x4] 0x7e6183ab00
	int SampleRate;//[Offset: 0x3c, Size: 0x4] 0x7e6183ab80
	float NormalizationVolumeDb;//[Offset: 0x40, Size: 0x4] 0x7e6183ac00
	bool bTrueStereo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7e6183ac80
	float[] IRData;//[Offset: 0x48, Size: 0x10] 0x7e617be200

--------------------------------
Class: SubmixEffectConvolutionReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x68, Size: 0x8] 0x7e6183a780
	SubmixEffectConvolutionReverbSettings Settings;//[Offset: 0x70, Size: 0x28] 0x7e6183a800
	enum BlockSize;//[Offset: 0x98, Size: 0x1] 0x7e617be0c0
	bool bEnableHardwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x7e6183a900
	void SetSettings(out const SubmixEffectConvolutionReverbSettings InSettings);// 0x24bc58ebd041 0x7e6182c8e0
	void SetImpulseResponse(AudioImpulseResponse* InImpulseResponse);// 0x24fd58ebd041 0x7e6182c9c0

--------------------------------
Class: SubmixEffectConvolutionReverbSettings
	float NormalizationVolumeDb;//[Offset: 0x0, Size: 0x4] 0x7e6156be80
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7e6156bf00
	bool bMixInputChannelFormatToImpulseResponseFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7e6156bf80
	bool bMixReverbOutputToOutputChannelFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7e6156c000
	float SurroundRearChannelBleedDb;//[Offset: 0x8, Size: 0x4] 0x7e6156c080
	bool bInvertRearChannelBleedPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7e6156c100
	bool bSurroundRearChannelFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7e6156c180
	float SurroundRearChannelBleedAmount;//[Offset: 0x10, Size: 0x4] 0x7e6156c200
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x18, Size: 0x8] 0x7e6156c280
	bool AllowHArdwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7e6156c300

--------------------------------
Class: SubmixEffectDelayStatics.BlueprintFunctionLibrary.Object
	SubmixEffectDelaySettings SetMaximumDelayLength(out SubmixEffectDelaySettings DelaySettings, float MaximumDelayLength);// 0x24bf58ebd041 0x7e6182c640
	SubmixEffectDelaySettings SetInterpolationTime(out SubmixEffectDelaySettings DelaySettings, float InterpolationTime);// 0x24be58ebd041 0x7e6182c720
	SubmixEffectDelaySettings SetDelayLength(out SubmixEffectDelaySettings DelaySettings, float DelayLength);// 0x24bd58ebd041 0x7e6182c800

--------------------------------
Class: SubmixEffectDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4] 0x7e6156bd00
	float InterpolationTime;//[Offset: 0x4, Size: 0x4] 0x7e6156bd80
	float DelayLength;//[Offset: 0x8, Size: 0x4] 0x7e6156be00

--------------------------------
Class: SubmixEffectDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDelaySettings Settings;//[Offset: 0x98, Size: 0xc] 0x7e6183c080
	SubmixEffectDelaySettings DynamicSettings;//[Offset: 0xa4, Size: 0xc] 0x7e6183c100
	void SetSettings(out const SubmixEffectDelaySettings InSettings);// 0x24c458ebd041 0x7e6182c1e0
	void SetInterpolationTime(float Time);// 0x24c358ebd041 0x7e6182c2c0
	void SetDelay(float Length);// 0x24c258ebd041 0x7e6182c3a0
	void SetDefaultSettings(out const SubmixEffectDelaySettings InSettings);// 0x24c158ebd041 0x7e6182c480
	float GetMaxDelayInMilliseconds();// 0x24c058ebd041 0x7e6182c560

--------------------------------
Class: SubmixEffectFilterPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFilterSettings Settings;//[Offset: 0x98, Size: 0xc] 0x7e6183bc00
	void SetSettings(out const SubmixEffectFilterSettings InSettings);// 0x24cb58ebd041 0x7e6182bbc0
	void SetFilterType(enum InType);// 0x24ca58ebd041 0x7e6182bca0
	void SetFilterQMod(float InQ);// 0x24c958ebd041 0x7e6182bd80
	void SetFilterQ(float InQ);// 0x24c858ebd041 0x7e6182be60
	void SetFilterCutoffFrequencyMod(float InFrequency);// 0x24c758ebd041 0x7e6182bf40
	void SetFilterCutoffFrequency(float InFrequency);// 0x24c658ebd041 0x7e6182c020
	void SetFilterAlgorithm(enum InAlgorithm);// 0x24c558ebd041 0x7e6182c100

--------------------------------
Class: SubmixEffectFilterSettings
	enum FilterType;//[Offset: 0x0, Size: 0x1] 0x7e84e21a00
	enum FilterAlgorithm;//[Offset: 0x1, Size: 0x1] 0x7e84e21960
	float FilterFrequency;//[Offset: 0x4, Size: 0x4] 0x7e6156bc00
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x7e6156bc80

--------------------------------
Class: SubmixEffectFlexiverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFlexiverbSettings Settings;//[Offset: 0x9c, Size: 0x10] 0x7e6183bb00
	void SetSettings(out const SubmixEffectFlexiverbSettings InSettings);// 0x24cc58ebd041 0x7e6182bae0

--------------------------------
Class: SubmixEffectFlexiverbSettings
	float PreDelay;//[Offset: 0x0, Size: 0x4] 0x7e6156b900
	float DecayTime;//[Offset: 0x4, Size: 0x4] 0x7e6156b980
	float RoomDampening;//[Offset: 0x8, Size: 0x4] 0x7e6156ba00
	int Complexity;//[Offset: 0xc, Size: 0x4] 0x7e6156ba80

--------------------------------
Class: SubmixEffectMultibandCompressorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectMultibandCompressorSettings Settings;//[Offset: 0xc8, Size: 0x38] 0x7e6183b900
	void SetSettings(out const SubmixEffectMultibandCompressorSettings InSettings);// 0x24d058ebd041 0x7e6182b760
	void SetExternalSubmix(SoundSubmix* Submix);// 0x24cf58ebd041 0x7e6182b840
	void SetAudioBus(AudioBus* AudioBus);// 0x24ce58ebd041 0x7e6182b920
	void ResetKey();// 0x24cd58ebd041 0x7e6182ba00

--------------------------------
Class: SubmixEffectMultibandCompressorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x7e84e21d20
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x7e84e21c80
	enum LinkMode;//[Offset: 0x2, Size: 0x1] 0x7e84e21be0
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x7e6156d100
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7e6156d180
	bool bFourPole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7e6156d200
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x7e6156d280
	enum KeySource;//[Offset: 0xb, Size: 0x1] 0x7e84e21b40
	AudioBus* ExternalAudioBus;//[Offset: 0x10, Size: 0x8] 0x7e6156d380
	SoundSubmix* ExternalSubmix;//[Offset: 0x18, Size: 0x8] 0x7e6156d400
	float KeyGainDb;//[Offset: 0x20, Size: 0x4] 0x7e6156d480
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x7e6156d500
	DynamicsBandSettings[] Bands;//[Offset: 0x28, Size: 0x10] 0x7e84e21aa0

--------------------------------
Class: DynamicsBandSettings
	float CrossoverTopFrequency;//[Offset: 0x0, Size: 0x4] 0x7e6156d600
	float AttackTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7e6156d680
	float ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7e6156b600
	float ThresholdDb;//[Offset: 0xc, Size: 0x4] 0x7e6156b680
	float Ratio;//[Offset: 0x10, Size: 0x4] 0x7e6156b700
	float KneeBandwidthDb;//[Offset: 0x14, Size: 0x4] 0x7e6156b780
	float InputGainDb;//[Offset: 0x18, Size: 0x4] 0x7e6156b800
	float OutputGainDb;//[Offset: 0x1c, Size: 0x4] 0x7e6156b880

--------------------------------
Class: SubmixEffectStereoDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x7e6183b800
	void SetSettings(out const SubmixEffectStereoDelaySettings InSettings);// 0x24d158ebd041 0x7e6182b680

--------------------------------
Class: SubmixEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x7e84e21e60
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7e6156cb00
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7e6156cb80
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x7e6156cc00
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x7e6156cc80
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x7e6156cd00
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e6156cd80
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x7e84e21dc0
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x7e6156ce80
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x7e6156cf00

--------------------------------
Class: SubmixEffectTapDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectTapDelaySettings Settings;//[Offset: 0xa8, Size: 0x18] 0x7e6183d380
	void SetTap(int TapId, out const TapDelayInfo TapInfo);// 0x24d958ebd041 0x7e6182af80
	void SetSettings(out const SubmixEffectTapDelaySettings InSettings);// 0x24d858ebd041 0x7e6182b060
	void SetInterpolationTime(float Time);// 0x24d758ebd041 0x7e6182b140
	void RemoveTap(int TapId);// 0x24d658ebd041 0x7e6182b220
	void GetTapIds(out int[] TapIds);// 0x24d558ebd041 0x7e6182b300
	void GetTap(int TapId, out TapDelayInfo TapInfo);// 0x24d458ebd041 0x7e6182b3e0
	float GetMaxDelayInMilliseconds();// 0x24d358ebd041 0x7e6182b4c0
	void AddTap(out int TapId);// 0x24d258ebd041 0x7e6182b5a0

--------------------------------
Class: SubmixEffectTapDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4] 0x7e6156e700
	float InterpolationTime;//[Offset: 0x4, Size: 0x4] 0x7e6156c680
	TapDelayInfo[] Taps;//[Offset: 0x8, Size: 0x10] 0x7e84e21fa0

--------------------------------
Class: TapDelayInfo
	enum TapLineMode;//[Offset: 0x0, Size: 0x1] 0x7e84e21f00
	float DelayLength;//[Offset: 0x4, Size: 0x4] 0x7e6156c800
	float Gain;//[Offset: 0x8, Size: 0x4] 0x7e6156c880
	int OutputChannel;//[Offset: 0xc, Size: 0x4] 0x7e6156c900
	float PanInDegrees;//[Offset: 0x10, Size: 0x4] 0x7e6156c980
	int TapId;//[Offset: 0x14, Size: 0x4] 0x7e6156ca00

--------------------------------
Class: Synth2DSlider.Widget.Visual.Object
	float ValueX;//[Offset: 0x128, Size: 0x4] 0x7e6183c880
	float ValueY;//[Offset: 0x12c, Size: 0x4] 0x7e6183c900
	delegate ValueXDelegate;//[Offset: 0x130, Size: 0x10] 0x7e6183c980
	delegate ValueYDelegate;//[Offset: 0x140, Size: 0x10] 0x7e6183ca00
	Synth2DSliderStyle WidgetStyle;//[Offset: 0x150, Size: 0x3e0] 0x7e6183ca80
	LinearColor SliderHandleColor;//[Offset: 0x530, Size: 0x10] 0x7e6183cb00
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1] 0x7e6183cb80
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1] 0x7e6183cc00
	float StepSize;//[Offset: 0x544, Size: 0x4] 0x7e6183cc80
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1] 0x7e6183cd00
	delegate OnMouseCaptureBegin;//[Offset: 0x550, Size: 0x10] 0x7e6183cd80
	delegate OnMouseCaptureEnd;//[Offset: 0x560, Size: 0x10] 0x7e6183ce00
	delegate OnControllerCaptureBegin;//[Offset: 0x570, Size: 0x10] 0x7e6183ce80
	delegate OnControllerCaptureEnd;//[Offset: 0x580, Size: 0x10] 0x7e6183cf00
	delegate OnValueChangedX;//[Offset: 0x590, Size: 0x10] 0x7e6183cf80
	delegate OnValueChangedY;//[Offset: 0x5a0, Size: 0x10] 0x7e6183d000
	void SetValue(Vector2D InValue);// 0x24df58ebd041 0x7e6182e400
	void SetStepSize(float InValue);// 0x24de58ebd041 0x7e6182e4e0
	void SetSliderHandleColor(LinearColor InValue);// 0x24dd58ebd041 0x7e6182e5c0
	void SetLocked(bool InValue);// 0x251958ebd041 0x7e6182e6a0
	void SetIndentHandle(bool InValue);// 0x24db58ebd041 0x7e6182adc0
	Vector2D GetValue();// 0x24da58ebd041 0x7e6182aea0

--------------------------------
Class: Synth2DSliderStyle.SlateWidgetStyle
	SlateBrush NormalThumbImage;//[Offset: 0x10, Size: 0xc0] 0x7e6156e400
	SlateBrush DisabledThumbImage;//[Offset: 0xd0, Size: 0xc0] 0x7e6156e480
	SlateBrush NormalBarImage;//[Offset: 0x190, Size: 0xc0] 0x7e6156e500
	SlateBrush DisabledBarImage;//[Offset: 0x250, Size: 0xc0] 0x7e6156e580
	SlateBrush BackgroundImage;//[Offset: 0x310, Size: 0xc0] 0x7e6156e600
	float BarThickness;//[Offset: 0x3d0, Size: 0x4] 0x7e6156e680

--------------------------------
Class: GranularSynth.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* GranulatedSoundWave;//[Offset: 0x7a0, Size: 0x8] 0x7e6183d980
	void SetSustainGain(const float SustainGain);// 0x24f358ebd041 0x7e6182d280
	void SetSoundWave(SoundWave* InSoundWave);// 0x24f258ebd041 0x7e6182d360
	void SetScrubMode(const bool bScrubMode);// 0x24f158ebd041 0x7e6182d440
	void SetReleaseTimeMsec(const float ReleaseTimeMsec);// 0x24f058ebd041 0x7e6182d520
	void SetPlayheadTime(const float InPositionSec, const float LerpTimeSec, enum SeekType);// 0x24ef58ebd041 0x7e6182d600
	void SetPlaybackSpeed(const float InPlayheadRate);// 0x24ee58ebd041 0x7e6182d6e0
	void SetGrainVolume(const float BaseVolume, const Vector2D VolumeRange);// 0x24ed58ebd041 0x7e6182d7c0
	void SetGrainsPerSecond(const float InGrainsPerSecond);// 0x24ec58ebd041 0x7e6182d8a0
	void SetGrainProbability(const float InGrainProbability);// 0x24eb58ebd041 0x7e6182d980
	void SetGrainPitch(const float BasePitch, const Vector2D PitchRange);// 0x24ea58ebd041 0x7e6182da60
	void SetGrainPan(const float BasePan, const Vector2D PanRange);// 0x24e958ebd041 0x7e6182db40
	void SetGrainEnvelopeType(const enum EnvelopeType);// 0x24e858ebd041 0x7e6182dc20
	void SetGrainDuration(const float BaseDurationMsec, const Vector2D DurationRange);// 0x24e758ebd041 0x7e6182dd00
	void SetDecayTime(const float DecayTimeMsec);// 0x24e658ebd041 0x7e6182dde0
	void SetAttackTime(const float AttackTimeMsec);// 0x24e558ebd041 0x7e6182dec0
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x24e458ebd041 0x7e6182dfa0
	void NoteOff(const float Note, const bool bKill);// 0x24e358ebd041 0x7e6182e080
	bool IsLoaded();// 0x24e258ebd041 0x7e6182e160
	float GetSampleDuration();// 0x24e158ebd041 0x7e6182e240
	float GetCurrentPlayheadTime();// 0x24e058ebd041 0x7e6182e320

--------------------------------
Class: MonoWaveTableSynthPreset.Object
	FString PresetName;//[Offset: 0x28, Size: 0x10] 0x7e6183f780
	bool bLockKeyframesToGridBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e6183d700
	int LockKeyframesToGrid;//[Offset: 0x3c, Size: 0x4] 0x7e6183d780
	int WaveTableResolution;//[Offset: 0x40, Size: 0x4] 0x7e6183d800
	RuntimeFloatCurve[] WaveTable;//[Offset: 0x48, Size: 0x10] 0x7e617bdd00
	bool bNormalizeWaveTables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7e6183d900

--------------------------------
Class: SynthComponentMonoWaveTable.SynthComponent.SceneComponent.ActorComponent.Object
	delegate OnTableAltered;//[Offset: 0x7a0, Size: 0x10] 0x7e61850c00
	delegate OnNumTablesChanged;//[Offset: 0x7b0, Size: 0x10] 0x7e61850c80
	MonoWaveTableSynthPreset* CurrentPreset;//[Offset: 0x7c0, Size: 0x8] 0x7e61850d00
	void SetWaveTablePosition(float InPosition);// 0x251f58ebd041 0x7e61751740
	void SetSustainPedalState(bool InSustainPedalState);// 0x251e58ebd041 0x7e61751820
	void SetPosLfoType(const enum InLfoType);// 0x251d58ebd041 0x7e61751900
	void SetPosLfoFrequency(const float InLfoFrequency);// 0x251c58ebd041 0x7e617519e0
	void SetPosLfoDepth(const float InLfoDepth);// 0x251b58ebd041 0x7e61751ac0
	void SetPositionEnvelopeSustainGain(const float InSustainGain);// 0x251a58ebd041 0x7e61751ba0
	void SetPositionEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x255b58ebd041 0x7e61751c80
	void SetPositionEnvelopeInvert(const bool bInInvert);// 0x251858ebd041 0x7e6182e780
	void SetPositionEnvelopeDepth(const float InDepth);// 0x251758ebd041 0x7e6182e860
	void SetPositionEnvelopeDecayTime(const float InDecayTimeMsec);// 0x251658ebd041 0x7e6182e940
	void SetPositionEnvelopeBiasInvert(const bool bInBiasInvert);// 0x251558ebd041 0x7e6182ea20
	void SetPositionEnvelopeBiasDepth(const float InDepth);// 0x251458ebd041 0x7e6182eb00
	void SetPositionEnvelopeAttackTime(const float InAttackTimeMsec);// 0x251358ebd041 0x7e6182ebe0
	void SetLowPassFilterResonance(float InNewQ);// 0x251258ebd041 0x7e6182ecc0
	void SetFrequencyWithMidiNote(const float InMidiNote);// 0x251158ebd041 0x7e6182eda0
	void SetFrequencyPitchBend(const float FrequencyOffsetCents);// 0x251058ebd041 0x7e6182ee80
	void SetFrequency(const float FrequencyHz);// 0x250f58ebd041 0x7e6182ef60
	void SetFilterEnvelopeSustainGain(const float InSustainGain);// 0x250e58ebd041 0x7e6182f040
	void SetFilterEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x250d58ebd041 0x7e6182f120
	void SetFilterEnvelopenDecayTime(const float InDecayTimeMsec);// 0x250c58ebd041 0x7e6182f200
	void SetFilterEnvelopeInvert(const bool bInInvert);// 0x250b58ebd041 0x7e6182f2e0
	void SetFilterEnvelopeDepth(const float InDepth);// 0x250a58ebd041 0x7e6182f3c0
	void SetFilterEnvelopeBiasInvert(const bool bInBiasInvert);// 0x250958ebd041 0x7e6182f4a0
	void SetFilterEnvelopeBiasDepth(const float InDepth);// 0x250858ebd041 0x7e6182f580
	void SetFilterEnvelopeAttackTime(const float InAttackTimeMsec);// 0x250758ebd041 0x7e6182f660
	bool SetCurveValue(int TableIndex, int KeyframeIndex, const float NewValue);// 0x250658ebd041 0x7e6182f740
	bool SetCurveTangent(int TableIndex, float InNewTangent);// 0x250558ebd041 0x7e6182f820
	bool SetCurveInterpolationType(enum InterpolationType, int TableIndex);// 0x250458ebd041 0x7e6182f900
	void SetAmpEnvelopeSustainGain(const float InSustainGain);// 0x250358ebd041 0x7e6182f9e0
	void SetAmpEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x250258ebd041 0x7e6182fac0
	void SetAmpEnvelopeInvert(const bool bInInvert);// 0x250158ebd041 0x7e6182fba0
	void SetAmpEnvelopeDepth(const float InDepth);// 0x250058ebd041 0x7e6182fc80
	void SetAmpEnvelopeDecayTime(const float InDecayTimeMsec);// 0x24ff58ebd041 0x7e6182fd60
	void SetAmpEnvelopeBiasInvert(const bool bInBiasInvert);// 0x24fe58ebd041 0x7e6182fe40
	void SetAmpEnvelopeBiasDepth(const float InDepth);// 0xffffff8158ebd000 0x7e6182ff20
	void SetAmpEnvelopeAttackTime(const float InAttackTimeMsec);// 0x24fc58ebd041 0x7e6182caa0
	void RefreshWaveTable(int Index);// 0x24fb58ebd041 0x7e6182cb80
	void RefreshAllWaveTables();// 0x24fa58ebd041 0x7e6182cc60
	void NoteOn(const float InMidiNote, const float InVelocity);// 0x24f958ebd041 0x7e6182cd40
	void NoteOff(const float InMidiNote);// 0x24f858ebd041 0x7e6182ce20
	int GetNumTableEntries();// 0x24f758ebd041 0x7e6182cf00
	int GetMaxTableIndex();// 0x24f658ebd041 0x7e6182cfe0
	float[] GetKeyFrameValuesForTable(float TableIndex);// 0x24f558ebd041 0x7e6182d0c0
	float GetCurveTangent(int TableIndex);// 0x24f458ebd041 0x7e6182d1a0

--------------------------------
Class: SynthComponentToneGenerator.SynthComponent.SceneComponent.ActorComponent.Object
	float Frequency;//[Offset: 0x7a0, Size: 0x4] 0x7e61850880
	float Volume;//[Offset: 0x7a4, Size: 0x4] 0x7e61850900
	RuntimeFloatCurve DistanceAttenuationCurve;//[Offset: 0x7a8, Size: 0x88] 0x7e61850980
	Vector2D DistanceRange;//[Offset: 0x830, Size: 0x10] 0x7e61850a00
	float AttenuationDbAtMaxRange;//[Offset: 0x840, Size: 0x4] 0x7e61850a80
	void SetVolume(float InVolume);// 0x252158ebd041 0x7e61751580
	void SetFrequency(float InFrequency);// 0x252058ebd041 0x7e61751660

--------------------------------
Class: SynthSamplePlayer.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* SoundWave;//[Offset: 0x7a0, Size: 0x8] 0x7e61850100
	delegate OnSampleLoaded;//[Offset: 0x7a8, Size: 0x10] 0x7e61850180
	delegate OnSamplePlaybackProgress;//[Offset: 0x7b8, Size: 0x10] 0x7e61850200
	void SetSoundWave(SoundWave* InSoundWave);// 0x252a58ebd041 0x7e61750da0
	void SetScrubTimeWidth(float InScrubTimeWidthSec);// 0x252958ebd041 0x7e61750e80
	void SetScrubMode(bool bScrubMode);// 0x252858ebd041 0x7e61750f60
	void SetPitch(float InPitch, float TimeSec);// 0x252758ebd041 0x7e61751040
	void SeekToTime(float TimeSec, enum SeekType, bool bWrap);// 0x252658ebd041 0x7e61751120
	bool IsLoaded();// 0x252558ebd041 0x7e61751200
	float GetSampleDuration();// 0x252458ebd041 0x7e617512e0
	float GetCurrentPlaybackProgressTime();// 0x252358ebd041 0x7e617513c0
	float GetCurrentPlaybackProgressPercent();// 0x252258ebd041 0x7e617514a0

--------------------------------
Class: SynthesisUtilitiesBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	float GetLogFrequency(float InLinearValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x252c58ebd041 0x7e61750be0
	float GetLinearFrequency(float InLogFrequencyValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x252b58ebd041 0x7e61750cc0

--------------------------------
Class: SynthKnob.Widget.Visual.Object
	float Value;//[Offset: 0x128, Size: 0x4] 0x7e61851200
	float StepSize;//[Offset: 0x12c, Size: 0x4] 0x7e61851280
	float MouseSpeed;//[Offset: 0x130, Size: 0x4] 0x7e61851300
	float MouseFineTuneSpeed;//[Offset: 0x134, Size: 0x4] 0x7e61851380
	bool ShowTooltipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1] 0x7e61851400
	FText ParameterName;//[Offset: 0x140, Size: 0x18] 0x7e61851480
	FText ParameterUnits;//[Offset: 0x158, Size: 0x18] 0x7e61851500
	delegate ValueDelegate;//[Offset: 0x170, Size: 0x10] 0x7e61851580
	SynthKnobStyle WidgetStyle;//[Offset: 0x180, Size: 0x320] 0x7e61851600
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1] 0x7e61851680
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 0x1] 0x7e61851700
	delegate OnMouseCaptureBegin;//[Offset: 0x4a8, Size: 0x10] 0x7e61851780
	delegate OnMouseCaptureEnd;//[Offset: 0x4b8, Size: 0x10] 0x7e61851800
	delegate OnControllerCaptureBegin;//[Offset: 0x4c8, Size: 0x10] 0x7e61851880
	delegate OnControllerCaptureEnd;//[Offset: 0x4d8, Size: 0x10] 0x7e61851900
	delegate OnValueChanged;//[Offset: 0x4e8, Size: 0x10] 0x7e61851980
	void SetValue(float InValue);// 0x253058ebd041 0x7e61750860
	void SetStepSize(float InValue);// 0x252f58ebd041 0x7e61750940
	void SetLocked(bool InValue);// 0x252e58ebd041 0x7e61750a20
	float GetValue();// 0x252d58ebd041 0x7e61750b00

--------------------------------
Class: SynthKnobStyle.SlateWidgetStyle
	SlateBrush LargeKnob;//[Offset: 0x10, Size: 0xc0] 0x7e6156e080
	SlateBrush LargeKnobOverlay;//[Offset: 0xd0, Size: 0xc0] 0x7e6156e100
	SlateBrush MediumKnob;//[Offset: 0x190, Size: 0xc0] 0x7e6156e180
	SlateBrush MediumKnobOverlay;//[Offset: 0x250, Size: 0xc0] 0x7e6156e200
	float MinValueAngle;//[Offset: 0x310, Size: 0x4] 0x7e6156e280
	float MaxValueAngle;//[Offset: 0x314, Size: 0x4] 0x7e6156e300
	enum KnobSize;//[Offset: 0x318, Size: 0x1] 0x7e84e22040

--------------------------------
Class: AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioSynesthesiaSettings.AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	SoundWave* Sound;//[Offset: 0x28, Size: 0x8] 0x7e61851100
	float DurationInSeconds;//[Offset: 0x30, Size: 0x4] 0x7e61851180

--------------------------------
Class: AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object

--------------------------------
Class: ConstantQNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object
	float StartingFrequency;//[Offset: 0x28, Size: 0x4] 0x7e61852c80
	int NumBands;//[Offset: 0x2c, Size: 0x4] 0x7e61852d00
	float NumBandsPerOctave;//[Offset: 0x30, Size: 0x4] 0x7e61852d80
	float AnalysisPeriod;//[Offset: 0x34, Size: 0x4] 0x7e61852e00
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61852e80
	enum FFTSize;//[Offset: 0x39, Size: 0x1] 0x7e617bd800
	enum WindowType;//[Offset: 0x3a, Size: 0x1] 0x7e617bd8a0
	enum SpectrumType;//[Offset: 0x3b, Size: 0x1] 0x7e617bd940
	float BandWidthStretch;//[Offset: 0x3c, Size: 0x4] 0x7e61853080
	enum CQTNormalization;//[Offset: 0x40, Size: 0x1] 0x7e617bd9e0
	float NoiseFloorDb;//[Offset: 0x44, Size: 0x4] 0x7e61853180

--------------------------------
Class: ConstantQNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	ConstantQNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x7e61852900
	void GetNormalizedChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x253258ebd041 0x7e617506a0
	void GetChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x253158ebd041 0x7e61750780

--------------------------------
Class: LoudnessSettings.AudioSynesthesiaSettings.AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4] 0x7e61852600
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4] 0x7e61852680
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4] 0x7e61852700
	enum CurveType;//[Offset: 0x34, Size: 0x1] 0x7e617bd620
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4] 0x7e61852800
	float ExpectedMaxLoudness;//[Offset: 0x3c, Size: 0x4] 0x7e61852880

--------------------------------
Class: AudioAnalyzer.Object
	AudioBus* AudioBus;//[Offset: 0x28, Size: 0x8] 0x7e61852380
	AudioAnalyzerSubsystem* AudioAnalyzerSubsystem;//[Offset: 0x38, Size: 0x8] 0x7e61852400
	void StopAnalyzing(const Object* WorldContextObject);// 0x253458ebd041 0x7e617504e0
	void StartAnalyzing(const Object* WorldContextObject, AudioBus* AudioBusToAnalyze);// 0x253358ebd041 0x7e617505c0

--------------------------------
Class: AudioAnalyzerSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	AudioAnalyzer*[] AudioAnalyzers;//[Offset: 0x30, Size: 0x10] 0x7e61bdbbe0

--------------------------------
Class: LoudnessAnalyzer.AudioAnalyzer.Object
	LoudnessSettings* Settings;//[Offset: 0x90, Size: 0x8] 0x7e61854200
	delegate OnOverallLoudnessResults;//[Offset: 0x98, Size: 0x10] 0x7e61852180
	delegate OnPerChannelLoudnessResults;//[Offset: 0xa8, Size: 0x10] 0x7e61852200
	delegate OnLatestOverallLoudnessResults;//[Offset: 0xb8, Size: 0x10] 0x7e61852280
	delegate OnLatestPerChannelLoudnessResults;//[Offset: 0xc8, Size: 0x10] 0x7e61852300

--------------------------------
Class: LoudnessNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4] 0x7e61853f80
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4] 0x7e61854000
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4] 0x7e61854080
	enum CurveType;//[Offset: 0x34, Size: 0x1] 0x7e617bd580
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4] 0x7e61854180

--------------------------------
Class: LoudnessNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	LoudnessNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x7e61853a00
	void GetNormalizedLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x253858ebd041 0x7e61750160
	void GetNormalizedChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x253758ebd041 0x7e61750240
	void GetLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x253658ebd041 0x7e61750320
	void GetChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x253558ebd041 0x7e61750400

--------------------------------
Class: MeterSettings.AudioSynesthesiaSettings.AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4] 0x7e61853700
	enum PeakMode;//[Offset: 0x2c, Size: 0x1] 0x7e617bd4e0
	int MeterAttackTime;//[Offset: 0x30, Size: 0x4] 0x7e61853800
	int MeterReleaseTime;//[Offset: 0x34, Size: 0x4] 0x7e61853880
	int PeakHoldTime;//[Offset: 0x38, Size: 0x4] 0x7e61853900
	float ClippingThreshold;//[Offset: 0x3c, Size: 0x4] 0x7e61853980

--------------------------------
Class: MeterAnalyzer.AudioAnalyzer.Object
	MeterSettings* Settings;//[Offset: 0x90, Size: 0x8] 0x7e61853480
	delegate OnOverallMeterResults;//[Offset: 0x98, Size: 0x10] 0x7e61853500
	delegate OnPerChannelMeterResults;//[Offset: 0xc0, Size: 0x10] 0x7e61853580
	delegate OnLatestOverallMeterResults;//[Offset: 0xe8, Size: 0x10] 0x7e61853600
	delegate OnLatestPerChannelMeterResults;//[Offset: 0x110, Size: 0x10] 0x7e61853680

--------------------------------
Class: OnsetNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61853200
	float GranularityInSeconds;//[Offset: 0x2c, Size: 0x4] 0x7e61853280
	float Sensitivity;//[Offset: 0x30, Size: 0x4] 0x7e61853300
	float MinimumFrequency;//[Offset: 0x34, Size: 0x4] 0x7e61853380
	float MaximumFrequency;//[Offset: 0x38, Size: 0x4] 0x7e61853400

--------------------------------
Class: OnsetNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	OnsetNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x7e61854d80
	void GetNormalizedChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x257c58ebd041 0x7e61753960
	void GetChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x253958ebd041 0x7e61750080

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontBulkData.Object

--------------------------------
Class: FontFaceInterface.Interface.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateTypes.Object

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8] 0x7e61854c00

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x3b0] 0x7e61854a80

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0xa10] 0x7e61854a00

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x30, Size: 0x600] 0x7e61854980

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x10, Size: 0x5a0] 0x7e6142b180
	SlateSound PressedSlateSound;//[Offset: 0x5b0, Size: 0x18] 0x7e6142b200
	SlateSound SelectionChangeSlateSound;//[Offset: 0x5c8, Size: 0x18] 0x7e6142b300
	Margin ContentPadding;//[Offset: 0x5e0, Size: 0x10] 0x7e6142b380
	Margin MenuRowPadding;//[Offset: 0x5f0, Size: 0x10] 0x7e6142b400

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x10, Size: 0x3b0] 0x7e6142ad00
	SlateBrush DownArrowImage;//[Offset: 0x3c0, Size: 0xc0] 0x7e6142ad80
	Vector2D ShadowOffset;//[Offset: 0x480, Size: 0x10] 0x7e6142ae00
	LinearColor ShadowColorAndOpacity;//[Offset: 0x490, Size: 0x10] 0x7e6142ae80
	SlateBrush MenuBorderBrush;//[Offset: 0x4a0, Size: 0xc0] 0x7e6142af00
	Margin MenuBorderPadding;//[Offset: 0x560, Size: 0x10] 0x7e6142af80
	Margin ContentPadding;//[Offset: 0x570, Size: 0x10] 0x7e6142b000
	Margin DownArrowPadding;//[Offset: 0x580, Size: 0x10] 0x7e6142b080
	byte DownArrowAlign;//[Offset: 0x590, Size: 0x1] 0x7e6142b100

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x30, Size: 0x5a0] 0x7e61854900

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0xad0] 0x7e61854880

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x10, Size: 0xc0] 0x7e61440f80
	SlateBrush BackgroundImageHovered;//[Offset: 0xd0, Size: 0xc0] 0x7e61441000
	SlateBrush BackgroundImageFocused;//[Offset: 0x190, Size: 0xc0] 0x7e61441080
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x250, Size: 0xc0] 0x7e6142f800
	Margin Padding;//[Offset: 0x310, Size: 0x10] 0x7e6142f880
	SlateFontInfo Font;//[Offset: 0x320, Size: 0x58] 0x7e6142f900
	SlateColor ForegroundColor;//[Offset: 0x378, Size: 0x14] 0x7e6142f980
	SlateColor BackgroundColor;//[Offset: 0x38c, Size: 0x14] 0x7e6142fa00
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x3a0, Size: 0x14] 0x7e6142fa80
	SlateColor FocusedForegroundColor;//[Offset: 0x3b4, Size: 0x14] 0x7e6142fb00
	Margin HScrollBarPadding;//[Offset: 0x3c8, Size: 0x10] 0x7e6142fb80
	Margin VScrollBarPadding;//[Offset: 0x3d8, Size: 0x10] 0x7e6142fc00
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x3f0, Size: 0x6e0] 0x7e6142e900

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8] 0x7e6142b700
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8] 0x7e6142b780
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20] 0x7e6142ba80
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8] 0x7e6142bb00
	int Size;//[Offset: 0x48, Size: 0x4] 0x7e6142bb80
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4] 0x7e6142bc00

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4] 0x7e6142b800
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7e6142b880
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7e6142b900
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8] 0x7e6142b980
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10] 0x7e6142ba00

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x10, Size: 0xc0] 0x7e6142fc80
	SlateBrush VerticalBackgroundImage;//[Offset: 0xd0, Size: 0xc0] 0x7e6142fd00
	SlateBrush VerticalTopSlotImage;//[Offset: 0x190, Size: 0xc0] 0x7e6142fd80
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x250, Size: 0xc0] 0x7e6142fe00
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x310, Size: 0xc0] 0x7e6142fe80
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x3d0, Size: 0xc0] 0x7e6142ff00
	SlateBrush NormalThumbImage;//[Offset: 0x490, Size: 0xc0] 0x7e6142ff80
	SlateBrush HoveredThumbImage;//[Offset: 0x550, Size: 0xc0] 0x7e6142e780
	SlateBrush DraggedThumbImage;//[Offset: 0x610, Size: 0xc0] 0x7e6142e800
	float Thickness;//[Offset: 0x6d0, Size: 0x4] 0x7e6142e880

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextStyle EditableTextStyle;//[Offset: 0x30, Size: 0x2c0] 0x7e61854800

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x7e6142de80
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x14] 0x7e6142df00
	SlateBrush BackgroundImageSelected;//[Offset: 0x80, Size: 0xc0] 0x7e6142df80
	SlateBrush BackgroundImageComposing;//[Offset: 0x140, Size: 0xc0] 0x7e6142e000
	SlateBrush CaretImage;//[Offset: 0x200, Size: 0xc0] 0x7e6142e080

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x30, Size: 0x260] 0x7e61854780

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x10, Size: 0xc0] 0x7e6156f800
	SlateBrush FillImage;//[Offset: 0xd0, Size: 0xc0] 0x7e6156f880
	SlateBrush MarqueeImage;//[Offset: 0x190, Size: 0xc0] 0x7e6156f900
	bool EnableFillAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x7e6156f980

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x6e0] 0x7e61854700

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x30, Size: 0x310] 0x7e61854680

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	float BarThickness;//[Offset: 0x8, Size: 0x4] 0x7e61573080
	SlateBrush TopShadowBrush;//[Offset: 0x10, Size: 0xc0] 0x7e61573100
	SlateBrush BottomShadowBrush;//[Offset: 0xd0, Size: 0xc0] 0x7e61573180
	SlateBrush LeftShadowBrush;//[Offset: 0x190, Size: 0xc0] 0x7e61571100
	SlateBrush RightShadowBrush;//[Offset: 0x250, Size: 0xc0] 0x7e61571180

--------------------------------
Class: SlateSettings.Object
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61854600

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x590] 0x7e61854580

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x10, Size: 0xc0] 0x7e61446380
	SlateBrush ActiveBackgroundBrush;//[Offset: 0xd0, Size: 0xc0] 0x7e61446400
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x190, Size: 0xc0] 0x7e61446480
	SlateBrush ActiveFillBrush;//[Offset: 0x250, Size: 0xc0] 0x7e61446500
	SlateBrush HoveredFillBrush;//[Offset: 0x310, Size: 0xc0] 0x7e61446580
	SlateBrush InactiveFillBrush;//[Offset: 0x3d0, Size: 0xc0] 0x7e61446600
	SlateBrush ArrowsImage;//[Offset: 0x490, Size: 0xc0] 0x7e61446680
	SlateColor ForegroundColor;//[Offset: 0x550, Size: 0x14] 0x7e61446700
	Margin TextPadding;//[Offset: 0x564, Size: 0x10] 0x7e61446780
	Margin InsetPadding;//[Offset: 0x574, Size: 0x10] 0x7e61446800

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object
	TextBlockStyle TextBlockStyle;//[Offset: 0x30, Size: 0x310] 0x7e61854500

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x7e61441d00
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x14] 0x7e61441d80
	Vector2D ShadowOffset;//[Offset: 0x78, Size: 0x10] 0x7e61441e00
	LinearColor ShadowColorAndOpacity;//[Offset: 0x88, Size: 0x10] 0x7e61441e80
	SlateColor SelectedBackgroundColor;//[Offset: 0x98, Size: 0x14] 0x7e61441f00
	SlateColor HighlightColor;//[Offset: 0xac, Size: 0x14] 0x7e61441f80
	SlateBrush HighlightShape;//[Offset: 0xc0, Size: 0xc0] 0x7e61442000
	SlateBrush StrikeBrush;//[Offset: 0x180, Size: 0xc0] 0x7e61442080
	SlateBrush UnderlineBrush;//[Offset: 0x240, Size: 0xc0] 0x7e61442100
	enum TransformPolicy;//[Offset: 0x300, Size: 0x1] 0x7e8485a100
	enum OverflowPolicy;//[Offset: 0x301, Size: 0x1] 0x7e8485a060

--------------------------------
Class: ToolMenuBase.Object

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0x253b58ebd041 0x7e61753880

--------------------------------
Class: ImageWriteOptions
	enum Format;//[Offset: 0x0, Size: 0x1] 0x7e84dde340
	delegate OnComplete;//[Offset: 0x4, Size: 0x10] 0x7e61573480
	int CompressionQuality;//[Offset: 0x14, Size: 0x4] 0x7e61573500
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e61573580
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7e61573600

--------------------------------
Class: GameNetworkManagerSettings.Object
	int MinDynamicBandwidth;//[Offset: 0x28, Size: 0x4] 0x7e61857080
	int MaxDynamicBandwidth;//[Offset: 0x2c, Size: 0x4] 0x7e61857100
	int TotalNetBandwidth;//[Offset: 0x30, Size: 0x4] 0x7e61857180
	int BadPingThreshold;//[Offset: 0x34, Size: 0x4] 0x7e61857200
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e61857280
	float StandbyRxCheatTime;//[Offset: 0x3c, Size: 0x4] 0x7e61857300
	float StandbyTxCheatTime;//[Offset: 0x40, Size: 0x4] 0x7e61857380
	float PercentMissingForRxStandby;//[Offset: 0x44, Size: 0x4] 0x7e61855300
	float PercentMissingForTxStandby;//[Offset: 0x48, Size: 0x4] 0x7e61855380
	float PercentForBadPing;//[Offset: 0x4c, Size: 0x4] 0x7e61855400
	float JoinInProgressStandbyWaitTime;//[Offset: 0x50, Size: 0x4] 0x7e61855480

--------------------------------
Class: GameSessionSettings.Object
	int MaxSpectators;//[Offset: 0x28, Size: 0x4] 0x7e61856f00
	int MaxPlayers;//[Offset: 0x2c, Size: 0x4] 0x7e61856f80
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e61857000

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: GeneralProjectSettings.Object
	FString CompanyName;//[Offset: 0x28, Size: 0x10] 0x7e61856500
	FString CompanyDistinguishedName;//[Offset: 0x38, Size: 0x10] 0x7e61856580
	FString CopyrightNotice;//[Offset: 0x48, Size: 0x10] 0x7e61856600
	FString Description;//[Offset: 0x58, Size: 0x10] 0x7e61856680
	FString Homepage;//[Offset: 0x68, Size: 0x10] 0x7e61856700
	FString LicensingTerms;//[Offset: 0x78, Size: 0x10] 0x7e61856780
	FString PrivacyPolicy;//[Offset: 0x88, Size: 0x10] 0x7e61856800
	Guid ProjectID;//[Offset: 0x98, Size: 0x10] 0x7e61856880
	FString ProjectName;//[Offset: 0xa8, Size: 0x10] 0x7e61856900
	FString ProjectVersion;//[Offset: 0xb8, Size: 0x10] 0x7e61856980
	FString SupportContact;//[Offset: 0xc8, Size: 0x10] 0x7e61856a00
	FText ProjectDisplayedTitle;//[Offset: 0xd8, Size: 0x18] 0x7e61856a80
	FText ProjectDebugTitleInfo;//[Offset: 0xf0, Size: 0x18] 0x7e61856b00
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x7e61856b80
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1] 0x7e61856c00
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1] 0x7e61856c80
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1] 0x7e61856d00
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x7e61856d80
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x7e61856e00
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x7e61856e80

--------------------------------
Class: HudSettings.Object
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7e61856400
	FName[] DebugDisplay;//[Offset: 0x30, Size: 0x10] 0x7e617bcea0

--------------------------------
Class: DeveloperSettingsBackedByCVars.DeveloperSettings.Object

--------------------------------
Class: PlatformSettings.Object

--------------------------------
Class: PlatformSettingsManager.Object
	<class PlatformSettings,PlatformSettingsInstances> SettingsMap;//[Offset: 0x28, Size: 0x50] 0x7e6167b500

--------------------------------
Class: PlatformSettingsInstances
	PlatformSettings* PlatformInstance;//[Offset: 0x0, Size: 0x8] 0x7e61574b00
	<FName,PlatformSettings*> OtherPlatforms;//[Offset: 0x8, Size: 0x50] 0x7e6155b2c0

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0x254558ebd041 0x7e61752fc0
	void StartReconstruction();// 0x254458ebd041 0x7e617530a0
	void PauseReconstruction();// 0x254358ebd041 0x7e61753180
	bool IsReconstructionStarted();// 0x254258ebd041 0x7e61753260
	bool IsReconstructionPaused();// 0x254158ebd041 0x7e61753340
	void DisconnectMRMesh();// 0x254058ebd041 0x7e61753420
	void ConnectMRMesh(MRMeshComponent* Mesh);// 0x253f58ebd041 0x7e61753500

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x540, Size: 0x8] 0x7e6185a480
	MaterialInterface* WireframeMaterial;//[Offset: 0x548, Size: 0x8] 0x7e6185a500
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1] 0x7e61858480
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1] 0x7e61858500
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 0x1] 0x7e61858580
	MRMeshBodyHolder*[] BodyHolders;//[Offset: 0x598, Size: 0x10] 0x7e617bf6a0
	void SetWireframeMaterial(MaterialInterface* InMaterial);// 0x255058ebd041 0x7e61752620
	void SetWireframeColor(out const LinearColor InColor);// 0x254f58ebd041 0x7e61752700
	void SetUseWireframe(bool bUseWireframe);// 0x254e58ebd041 0x7e617527e0
	void SetEnableMeshOcclusion(bool bEnable);// 0x254d58ebd041 0x7e617528c0
	void RequestNavMeshUpdate();// 0x254c58ebd041 0x7e617529a0
	bool IsConnected();// 0x254b58ebd041 0x7e61752a80
	LinearColor GetWireframeColor();// 0x254a58ebd041 0x7e61752b60
	bool GetUseWireframe();// 0x254958ebd041 0x7e61752c40
	bool GetEnableMeshOcclusion();// 0x254858ebd041 0x7e61752d20
	void ForceNavMeshUpdate();// 0x254758ebd041 0x7e61752e00
	void Clear();// 0x254658ebd041 0x7e61752ee0

--------------------------------
Class: MRMeshBodyHolder.Object
	BodySetup* BodySetup;//[Offset: 0x30, Size: 0x8] 0x7e61858a80
	BodyInstance BodyInstance;//[Offset: 0x38, Size: 0x188] 0x7e61858b00

--------------------------------
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object
	delegate OnMeshTrackerUpdated;//[Offset: 0x2b0, Size: 0x10] 0x7e61400480
	bool ScanWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x7e61400500
	bool RequestNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x7e61400600
	bool RequestVertexConfidence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1] 0x7e61400580
	enum VertexColorMode;//[Offset: 0x2c3, Size: 0x1] 0x7e84dd22c0
	Color[] BlockVertexColors;//[Offset: 0x2c8, Size: 0x10] 0x7e84dd20e0
	LinearColor VertexColorFromConfidenceZero;//[Offset: 0x2d8, Size: 0x10] 0x7e61400780
	LinearColor VertexColorFromConfidenceOne;//[Offset: 0x2e8, Size: 0x10] 0x7e61400800
	float UpdateInterval;//[Offset: 0x2f8, Size: 0x4] 0x7e61400880
	MRMeshComponent* MRMesh;//[Offset: 0x300, Size: 0x8] 0x7e61400900
	void OnMockDataMeshTrackerUpdated__DelegateSignature(int Index, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const float[] Confidence);// 0xeb158ebd041 0x7e613d51e0
	void DisconnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0xeb058ebd041 0x7e613d52c0
	void ConnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0xeae58ebd041 0x7e613d53a0

--------------------------------
Class: ARActor.Actor.Object
	ARComponent* AddARComponent(class ARComponent InComponentClass, out const Guid NativeID);// 0x255158ebd041 0x7e61752540

--------------------------------
Class: ARComponent.SceneComponent.ActorComponent.Object
	Guid NativeID;//[Offset: 0x2b0, Size: 0x10] 0x7e6185dc00
	bool bUseDefaultReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x7e6185dc80
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x2f8, Size: 0x8] 0x7e6185dd00
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x300, Size: 0x8] 0x7e6185dd80
	MRMeshComponent* MRMeshComponent;//[Offset: 0x308, Size: 0x8] 0x7e6185de00
	ARTrackedGeometry* MyTrackedGeometry;//[Offset: 0x310, Size: 0x8] 0x7e6185de80
	void UpdateVisualization();// 0x259b58ebd041 0x7e61755800
	void SetNativeID(Guid NativeID);// 0x259a58ebd041 0x7e617558e0
	void ReceiveRemove();// 0x259958ebd041 0x7e617559c0
	void OnRep_Payload();// 0x259858ebd041 0x7e61755aa0
	MRMeshComponent* GetMRMesh();// 0x259758ebd041 0x7e61755b80

--------------------------------
Class: ARTrackedGeometry.Object
	Guid UniqueId;//[Offset: 0x28, Size: 0x10] 0x7e618c3380
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x60] 0x7e618c3400
	Transform LocalToAlignedTrackingTransform;//[Offset: 0xa0, Size: 0x60] 0x7e618c3480
	enum TrackingState;//[Offset: 0x100, Size: 0x1] 0x7e61894f20
	MRMeshComponent* UnderlyingMesh;//[Offset: 0x110, Size: 0x8] 0x7e618c3580
	enum ObjectClassification;//[Offset: 0x118, Size: 0x1] 0x7e61894fc0
	enum SpatialMeshUsageFlags;//[Offset: 0x119, Size: 0x1] 0x7e61895060
	int LastUpdateFrameNumber;//[Offset: 0x130, Size: 0x4] 0x7e618c3700
	FName DebugName;//[Offset: 0x140, Size: 0x8] 0x7e618c3780
	bool IsTracked();// 0x26f358ebd041 0x7e618b9e00
	bool HasSpatialMeshUsageFlag(const enum InFlag);// 0x26f258ebd041 0x7e618b9ee0
	MRMeshComponent* GetUnderlyingMesh();// 0x26f158ebd041 0x7e618b9fc0
	enum GetTrackingState();// 0x26f058ebd041 0x7e618ba0a0
	enum GetObjectClassification();// 0x26ef58ebd041 0x7e618ba180
	FString GetName();// 0x26ee58ebd041 0x7e618ba260
	Transform GetLocalToWorldTransform();// 0x26ed58ebd041 0x7e618ba340
	Transform GetLocalToTrackingTransform();// 0x26ec58ebd041 0x7e618ba420
	float GetLastUpdateTimestamp();// 0x26eb58ebd041 0x7e618ba500
	int GetLastUpdateFrameNumber();// 0x26ea58ebd041 0x7e618ba5e0
	FName GetDebugName();// 0x26e958ebd041 0x7e618ba6c0

--------------------------------
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object
	void UnpinComponent(SceneComponent* ComponentToUnpin);// 0x258e58ebd041 0x7e61756360
	bool ToggleARCapture(const bool bOnOff, const enum CaptureType);// 0x258d58ebd041 0x7e61756440
	void StopARSession();// 0x258c58ebd041 0x7e61756520
	void StartARSession(ARSessionConfig* SessionConfig);// 0x258b58ebd041 0x7e61756600
	void SetEnabledXRCamera(bool bOnOff);// 0x258a58ebd041 0x7e617566e0
	void SetARWorldScale(float InWorldScale);// 0x258958ebd041 0x7e617567c0
	void SetARWorldOriginLocationAndRotation(Vector OriginLocation, Rotator OriginRotation, bool bIsTransformInWorldSpace, bool bMaintainUpDirection);// 0x258858ebd041 0x7e617568a0
	void SetAlignmentTransform(out const Transform InAlignmentTransform);// 0x258758ebd041 0x7e61756980
	bool SaveARPinToLocalStore(FName InSaveName, ARPin* InPin);// 0x258658ebd041 0x7e61756a60
	IntPoint ResizeXRCamera(out const IntPoint InSize);// 0x258558ebd041 0x7e61756b40
	void RemovePin(ARPin* PinToRemove);// 0x258458ebd041 0x7e61756c20
	void RemoveARPinFromLocalStore(FName InSaveName);// 0x258358ebd041 0x7e61756d00
	void RemoveAllARPinsFromLocalStore();// 0x258258ebd041 0x7e61756de0
	ARPin* PinComponentToTraceResult(SceneComponent* ComponentToPin, out const ARTraceResult TraceResult, const FName DebugName);// 0x258158ebd041 0x7e61756ec0
	bool PinComponentToARPin(SceneComponent* ComponentToPin, ARPin* Pin);// 0x258058ebd041 0x7e61756fa0
	ARPin* PinComponent(SceneComponent* ComponentToPin, out const Transform PinToWorldTransform, ARTrackedGeometry* TrackedGeometry, const FName DebugName);// 0x257f58ebd041 0x7e61757080
	void PauseARSession();// 0x257e58ebd041 0x7e61757160
	<FName,ARPin*> LoadARPinsFromLocalStore();// 0x257d58ebd041 0x7e61757240
	ARTraceResult[] LineTraceTrackedObjects3D(const Vector Start, const Vector End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x25be58ebd041 0x7e61757320
	ARTraceResult[] LineTraceTrackedObjects(const Vector2D ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x257b58ebd041 0x7e61753a40
	bool IsSessionTypeSupported(enum SessionType);// 0x257a58ebd041 0x7e61753b20
	bool IsSessionTrackingFeatureSupported(enum SessionType, enum SessionTrackingFeature);// 0x257958ebd041 0x7e61753c00
	bool IsSceneReconstructionSupported(enum SessionType, enum SceneReconstructionMethod);// 0x257858ebd041 0x7e61753ce0
	bool IsARSupported();// 0x257758ebd041 0x7e61753dc0
	bool IsARPinLocalStoreSupported();// 0x257658ebd041 0x7e61753ea0
	bool IsARPinLocalStoreReady();// 0x257558ebd041 0x7e61753f80
	enum GetWorldMappingStatus();// 0x257458ebd041 0x7e61754060
	enum GetTrackingQualityReason();// 0x257358ebd041 0x7e61754140
	enum GetTrackingQuality();// 0x257258ebd041 0x7e61754220
	ARVideoFormat[] GetSupportedVideoFormats(enum SessionType);// 0x257158ebd041 0x7e61754300
	ARSessionConfig* GetSessionConfig();// 0x257058ebd041 0x7e617543e0
	Vector[] GetPointCloud();// 0x256f58ebd041 0x7e617544c0
	ARTexture* GetPersonSegmentationImage();// 0x256e58ebd041 0x7e617545a0
	ARTexture* GetPersonSegmentationDepthImage();// 0x256d58ebd041 0x7e61754680
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x256c58ebd041 0x7e61754760
	int GetNumberOfTrackedFacesSupported();// 0x256b58ebd041 0x7e61754840
	ARLightEstimate* GetCurrentLightEstimate();// 0x256a58ebd041 0x7e61754920
	bool GetCameraIntrinsics(out ARCameraIntrinsics OutCameraIntrinsics);// 0x256958ebd041 0x7e61754a00
	ARTextureCameraImage* GetCameraImage();// 0x256858ebd041 0x7e61754ae0
	ARTextureCameraDepth* GetCameraDepth();// 0x256758ebd041 0x7e61754bc0
	float GetARWorldScale();// 0x256658ebd041 0x7e61754ca0
	ARTexture* GetARTexture(enum TextureType);// 0x256558ebd041 0x7e61754d80
	ARSessionStatus GetARSessionStatus();// 0x256458ebd041 0x7e61754e60
	ARTrackedPose*[] GetAllTrackedPoses();// 0x256358ebd041 0x7e61754f40
	ARTrackedPoint*[] GetAllTrackedPoints();// 0x256258ebd041 0x7e61755020
	ARPlaneGeometry*[] GetAllTrackedPlanes();// 0x256158ebd041 0x7e61755100
	ARTrackedImage*[] GetAllTrackedImages();// 0x256058ebd041 0x7e617551e0
	AREnvironmentCaptureProbe*[] GetAllTrackedEnvironmentCaptureProbes();// 0x255f58ebd041 0x7e617552c0
	ARPose2D[] GetAllTracked2DPoses();// 0x255e58ebd041 0x7e617553a0
	ARPin*[] GetAllPins();// 0x255d58ebd041 0x7e61755480
	ARTrackedGeometry*[] GetAllGeometriesByClass(class ARTrackedGeometry GeometryClass);// 0x255c58ebd041 0x7e61755560
	ARTrackedGeometry*[] GetAllGeometries();// 0x259d58ebd041 0x7e61755640
	Transform GetAlignmentTransform();// 0x255a58ebd041 0x7e61751d60
	ARTrackedPoint*[] FindTrackedPointsByName(FString PointName);// 0x255958ebd041 0x7e61751e40
	void DebugDrawTrackedGeometry(ARTrackedGeometry* TrackedGeometry, Object* WorldContextObject, LinearColor Color, float OutlineThickness, float PersistForSeconds);// 0x255858ebd041 0x7e61751f20
	void DebugDrawPin(ARPin* ARPin, Object* WorldContextObject, LinearColor Color, float Scale, float PersistForSeconds);// 0x255758ebd041 0x7e61752000
	void CalculateClosestIntersection(out const Vector[] StartPoints, out const Vector[] EndPoints, out Vector ClosestIntersection);// 0x255658ebd041 0x7e617520e0
	void CalculateAlignmentTransform(out const Transform TransformInFirstCoordinateSystem, out const Transform TransformInSecondCoordinateSystem, out Transform AlignmentTransform);// 0x255558ebd041 0x7e617521c0
	bool AddTrackedPointWithName(out const Transform WorldTransform, FString PointName, bool bDeletePointsWithSameName);// 0x255458ebd041 0x7e617522a0
	ARCandidateImage* AddRuntimeCandidateImage(ARSessionConfig* SessionConfig, Texture2D* CandidateTexture, FString FriendlyName, float PhysicalWidth);// 0x255358ebd041 0x7e61752380
	bool AddManualEnvironmentCaptureProbe(Vector Location, Vector Extent);// 0x255258ebd041 0x7e61752460

--------------------------------
Class: ARSessionConfig.DataAsset.Object
	bool bGenerateMeshDataFromTrackedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61883a80
	bool bGenerateCollisionForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7e61883b00
	bool bGenerateNavMeshForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x7e61883b80
	bool bUseMeshDataForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x7e61883c00
	bool bRenderMeshDataInWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7e61883c80
	bool bTrackSceneObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7e61883d00
	bool bUsePersonSegmentationForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x7e61883d80
	bool bUseSceneDepthForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x7e61883e00
	bool bUseAutomaticImageScaleEstimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61883e80
	bool bUseStandardOnboardingUX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7e61883f00
	enum WorldAlignment;//[Offset: 0x3a, Size: 0x1] 0x7e618920e0
	enum SessionType;//[Offset: 0x3b, Size: 0x1] 0x7e61892180
	enum PlaneDetectionMode;//[Offset: 0x3c, Size: 0x1] 0x7e61892220
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x7e61884100
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1] 0x7e61884180
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1] 0x7e61884200
	enum LightEstimationMode;//[Offset: 0x40, Size: 0x1] 0x7e618922c0
	enum FrameSyncMode;//[Offset: 0x41, Size: 0x1] 0x7e61892360
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7e61882280
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x7e61882300
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7e61882380
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x7e61882400
	ARCandidateImage*[] CandidateImages;//[Offset: 0x48, Size: 0x10] 0x7e61892400
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x58, Size: 0x4] 0x7e61882500
	enum EnvironmentCaptureProbeType;//[Offset: 0x5c, Size: 0x1] 0x7e618924a0
	byte[] WorldMapData;//[Offset: 0x60, Size: 0x10] 0x7e61892540
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x70, Size: 0x10] 0x7e618925e0
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x80, Size: 0xc] 0x7e61882700
	bool bUseOptimalVideoFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x7e61882780
	enum FaceTrackingDirection;//[Offset: 0x8d, Size: 0x1] 0x7e61892680
	enum FaceTrackingUpdate;//[Offset: 0x8e, Size: 0x1] 0x7e61892720
	int MaxNumberOfTrackedFaces;//[Offset: 0x90, Size: 0x4] 0x7e61882900
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x98, Size: 0x10] 0x7e618927c0
	enum EnabledSessionTrackingFeature;//[Offset: 0xa8, Size: 0x1] 0x7e61892860
	enum SceneReconstructionMethod;//[Offset: 0xa9, Size: 0x1] 0x7e61892900
	class ARPlaneComponent* PlaneComponentClass;//[Offset: 0xb0, Size: 0x8] 0x7e61890060
	class ARPointComponent* PointComponentClass;//[Offset: 0xb8, Size: 0x8] 0x7e61890100
	class ARFaceComponent* FaceComponentClass;//[Offset: 0xc0, Size: 0x8] 0x7e618901a0
	class ARImageComponent* ImageComponentClass;//[Offset: 0xc8, Size: 0x8] 0x7e61890240
	class ARQRCodeComponent* QRCodeComponentClass;//[Offset: 0xd0, Size: 0x8] 0x7e618902e0
	class ARPoseComponent* PoseComponentClass;//[Offset: 0xd8, Size: 0x8] 0x7e61890380
	class AREnvironmentProbeComponent* EnvironmentProbeComponentClass;//[Offset: 0xe0, Size: 0x8] 0x7e61890420
	class ARObjectComponent* ObjectComponentClass;//[Offset: 0xe8, Size: 0x8] 0x7e618904c0
	class ARMeshComponent* MeshComponentClass;//[Offset: 0xf0, Size: 0x8] 0x7e61890560
	class ARGeoAnchorComponent* GeoAnchorComponentClass;//[Offset: 0xf8, Size: 0x8] 0x7e61890600
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x100, Size: 0x8] 0x7e61882b00
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x108, Size: 0x8] 0x7e61882b80
	bool ShouldResetTrackedObjects();// 0x25f658ebd041 0x7e6175b5a0
	bool ShouldResetCameraTracking();// 0x25f558ebd041 0x7e6175b680
	bool ShouldRenderCameraOverlay();// 0x25f458ebd041 0x7e6175b760
	bool ShouldEnableCameraTracking();// 0x25f358ebd041 0x7e6175b840
	bool ShouldEnableAutoFocus();// 0x25f258ebd041 0x7e6175b920
	void SetWorldMapData(byte[] WorldMapData);// 0x25f158ebd041 0x7e6175ba00
	void SetSessionTrackingFeatureToEnable(enum InSessionTrackingFeature);// 0x25f058ebd041 0x7e6175bae0
	void SetSceneReconstructionMethod(enum InSceneReconstructionMethod);// 0x25ef58ebd041 0x7e6175bbc0
	void SetResetTrackedObjects(bool bNewValue);// 0x25ee58ebd041 0x7e6175bca0
	void SetResetCameraTracking(bool bNewValue);// 0x25ed58ebd041 0x7e6175bd80
	void SetFaceTrackingUpdate(enum InUpdate);// 0x25ec58ebd041 0x7e6175be60
	void SetFaceTrackingDirection(enum InDirection);// 0x25eb58ebd041 0x7e6175bf40
	void SetEnableAutoFocus(bool bNewValue);// 0x25ea58ebd041 0x7e6175c020
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0x25e958ebd041 0x7e6175c100
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0x25e858ebd041 0x7e6175c1e0
	byte[] GetWorldMapData();// 0x25e758ebd041 0x7e6175c2c0
	enum GetWorldAlignment();// 0x25e658ebd041 0x7e6175c3a0
	enum GetSessionType();// 0x25e558ebd041 0x7e6175c480
	enum GetSceneReconstructionMethod();// 0x25e458ebd041 0x7e6175c560
	enum GetPlaneDetectionMode();// 0x25e358ebd041 0x7e6175c640
	int GetMaxNumSimultaneousImagesTracked();// 0x25e258ebd041 0x7e6175c720
	enum GetLightEstimationMode();// 0x25e158ebd041 0x7e6175c800
	enum GetFrameSyncMode();// 0x25e058ebd041 0x7e6175c8e0
	enum GetFaceTrackingUpdate();// 0x262158ebd041 0x7e6175c9c0
	enum GetFaceTrackingDirection();// 0x25de58ebd041 0x7e617590e0
	enum GetEnvironmentCaptureProbeType();// 0x25dd58ebd041 0x7e617591c0
	enum GetEnabledSessionTrackingFeature();// 0x25dc58ebd041 0x7e617592a0
	ARVideoFormat GetDesiredVideoFormat();// 0x25db58ebd041 0x7e61759380
	ARCandidateObject*[] GetCandidateObjectList();// 0x25da58ebd041 0x7e61759460
	ARCandidateImage*[] GetCandidateImageList();// 0x25d958ebd041 0x7e61759540
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0x25d858ebd041 0x7e61759620
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0x25d758ebd041 0x7e61759700

--------------------------------
Class: ARVideoFormat
	int FPS;//[Offset: 0x0, Size: 0x4] 0x7e61579480
	int Width;//[Offset: 0x4, Size: 0x4] 0x7e61577400
	int Height;//[Offset: 0x8, Size: 0x4] 0x7e61577480

--------------------------------
Class: ARCandidateObject.DataAsset.Object
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10] 0x7e61894520
	FString FriendlyName;//[Offset: 0x40, Size: 0x10] 0x7e618c6b80
	Box BoundingBox;//[Offset: 0x50, Size: 0x38] 0x7e618c6c00
	void SetFriendlyName(FString NewName);// 0x271258ebd041 0x7e618bbca0
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0x271158ebd041 0x7e618bbd80
	void SetBoundingBox(out const Box InBoundingBox);// 0x271058ebd041 0x7e618bbe60
	FString GetFriendlyName();// 0x270f58ebd041 0x7e618bbf40
	byte[] GetCandidateObjectData();// 0x270e58ebd041 0x7e618bc020
	Box GetBoundingBox();// 0x270d58ebd041 0x7e618bc100

--------------------------------
Class: ARCandidateImage.DataAsset.Object
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8] 0x7e618c6f80
	FString FriendlyName;//[Offset: 0x38, Size: 0x10] 0x7e618c7000
	float Width;//[Offset: 0x48, Size: 0x4] 0x7e618c7080
	float Height;//[Offset: 0x4c, Size: 0x4] 0x7e618c7100
	enum Orientation;//[Offset: 0x50, Size: 0x1] 0x7e61894700
	float GetPhysicalWidth();// 0x270c58ebd041 0x7e618bc1e0
	float GetPhysicalHeight();// 0x270b58ebd041 0x7e618bc2c0
	enum GetOrientation();// 0x270a58ebd041 0x7e618bc3a0
	FString GetFriendlyName();// 0x270958ebd041 0x7e618bc480
	Texture2D* GetCandidateTexture();// 0x270858ebd041 0x7e618bc560

--------------------------------
Class: ARPlaneComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPlaneUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xd0] 0x7e6185d780
	void SetPlaneComponentDebugMode(enum NewDebugMode);// 0x25a158ebd041 0x7e61758c80
	void SetObjectClassificationDebugColors(out const <enum,LinearColor> InColors);// 0x25a058ebd041 0x7e61758d60
	void ServerUpdatePayload(const ARPlaneUpdatePayload NewPayload);// 0x259f58ebd041 0x7e61758e40
	void ReceiveUpdate(out const ARPlaneUpdatePayload Payload);// 0x259e58ebd041 0x7e61758f20
	void ReceiveAdd(out const ARPlaneUpdatePayload Payload);// 0x25df58ebd041 0x7e61759000
	<enum,LinearColor> GetObjectClassificationDebugColors();// 0x259c58ebd041 0x7e61755720

--------------------------------
Class: ARPlaneUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7e61576500
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7e61576580
	Vector Center;//[Offset: 0x80, Size: 0x18] 0x7e61576600
	Vector Extents;//[Offset: 0x98, Size: 0x18] 0x7e61576680
	Vector[] BoundaryVertices;//[Offset: 0xb0, Size: 0x10] 0x7e84ddeb60
	enum ObjectClassification;//[Offset: 0xc0, Size: 0x1] 0x7e84ddeac0

--------------------------------
Class: ARSessionPayload
	int ConfigFlags;//[Offset: 0x0, Size: 0x4] 0x7e61576800
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x8, Size: 0x8] 0x7e61576880
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x10, Size: 0x8] 0x7e61576900

--------------------------------
Class: ARPointComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPointUpdatePayload ReplicatedPayload;//[Offset: 0x32c, Size: 0x1] 0x7e6185f680
	void ServerUpdatePayload(const ARPointUpdatePayload NewPayload);// 0x25a458ebd041 0x7e617589e0
	void ReceiveUpdate(out const ARPointUpdatePayload Payload);// 0x25a358ebd041 0x7e61758ac0
	void ReceiveAdd(out const ARPointUpdatePayload Payload);// 0x25a258ebd041 0x7e61758ba0

--------------------------------
Class: ARPointUpdatePayload

--------------------------------
Class: ARFaceComponent.ARComponent.SceneComponent.ActorComponent.Object
	enum TransformSetting;//[Offset: 0x32c, Size: 0x1] 0x7e617bfce0
	bool bUpdateVertexNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1] 0x7e6185f300
	bool bFaceOutOfScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 0x1] 0x7e6185f380
	ARFaceUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x60] 0x7e6185f400
	void SetFaceComponentDebugMode(enum NewDebugMode);// 0x25a858ebd041 0x7e61758660
	void ServerUpdatePayload(const ARFaceUpdatePayload NewPayload);// 0x25a758ebd041 0x7e61758740
	void ReceiveUpdate(out const ARFaceUpdatePayload Payload);// 0x25a658ebd041 0x7e61758820
	void ReceiveAdd(out const ARFaceUpdatePayload Payload);// 0x25a558ebd041 0x7e61758900

--------------------------------
Class: ARFaceUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7e61578400
	Vector LeftEyePosition;//[Offset: 0x18, Size: 0x18] 0x7e61576380
	Vector RightEyePosition;//[Offset: 0x30, Size: 0x18] 0x7e61576400
	Vector LookAtTarget;//[Offset: 0x48, Size: 0x18] 0x7e61576480

--------------------------------
Class: ARImageComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARImageUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xa0] 0x7e6185f000
	void SetImageComponentDebugMode(enum NewDebugMode);// 0x25ac58ebd041 0x7e617582e0
	void ServerUpdatePayload(const ARImageUpdatePayload NewPayload);// 0x25ab58ebd041 0x7e617583c0
	void ReceiveUpdate(out const ARImageUpdatePayload Payload);// 0x25aa58ebd041 0x7e617584a0
	void ReceiveAdd(out const ARImageUpdatePayload Payload);// 0x25a958ebd041 0x7e61758580

--------------------------------
Class: ARImageUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7e61578200
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7e61578280
	ARCandidateImage* DetectedImage;//[Offset: 0x80, Size: 0x8] 0x7e61578300
	Vector2D EstimatedSize;//[Offset: 0x88, Size: 0x10] 0x7e61578380

--------------------------------
Class: ARQRCodeComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARQRCodeUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xb0] 0x7e6185ed80
	void SetQRCodeComponentDebugMode(enum NewDebugMode);// 0x25b058ebd041 0x7e61757f60
	void ServerUpdatePayload(const ARQRCodeUpdatePayload NewPayload);// 0x25af58ebd041 0x7e61758040
	void ReceiveUpdate(out const ARQRCodeUpdatePayload Payload);// 0x25ae58ebd041 0x7e61758120
	void ReceiveAdd(out const ARQRCodeUpdatePayload Payload);// 0x25ad58ebd041 0x7e61758200

--------------------------------
Class: ARQRCodeUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7e61578000
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7e61578080
	Vector Extents;//[Offset: 0x80, Size: 0x18] 0x7e61578100
	FString QRCode;//[Offset: 0x98, Size: 0x10] 0x7e61578180

--------------------------------
Class: ARPoseComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPoseUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x70] 0x7e6185eb00
	void SetPoseComponentDebugMode(enum NewDebugMode);// 0x25b458ebd041 0x7e61757be0
	void ServerUpdatePayload(const ARPoseUpdatePayload NewPayload);// 0x25b358ebd041 0x7e61757cc0
	void ReceiveUpdate(out const ARPoseUpdatePayload Payload);// 0x25b258ebd041 0x7e61757da0
	void ReceiveAdd(out const ARPoseUpdatePayload Payload);// 0x25b158ebd041 0x7e61757e80

--------------------------------
Class: ARPoseUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x60] 0x7e61577f00
	Transform[] JointTransforms;//[Offset: 0x60, Size: 0x10] 0x7e84ddec00

--------------------------------
Class: AREnvironmentProbeComponent.ARComponent.SceneComponent.ActorComponent.Object
	AREnvironmentProbeUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x60] 0x7e6185e900
	void ServerUpdatePayload(const AREnvironmentProbeUpdatePayload NewPayload);// 0x25b758ebd041 0x7e61757940
	void ReceiveUpdate(out const AREnvironmentProbeUpdatePayload Payload);// 0x25b658ebd041 0x7e61757a20
	void ReceiveAdd(out const AREnvironmentProbeUpdatePayload Payload);// 0x25b558ebd041 0x7e61757b00

--------------------------------
Class: AREnvironmentProbeUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x60] 0x7e61577e80

--------------------------------
Class: ARObjectComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARObjectUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x60] 0x7e6185ff80
	void ServerUpdatePayload(const ARObjectUpdatePayload NewPayload);// 0x25ba58ebd041 0x7e617576a0
	void ReceiveUpdate(out const ARObjectUpdatePayload Payload);// 0x25b958ebd041 0x7e61757780
	void ReceiveAdd(out const ARObjectUpdatePayload Payload);// 0x25b858ebd041 0x7e61757860

--------------------------------
Class: ARObjectUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x60] 0x7e61577e00

--------------------------------
Class: ARMeshComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARMeshUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x90] 0x7e6185fd80
	void ServerUpdatePayload(const ARMeshUpdatePayload NewPayload);// 0x25bd58ebd041 0x7e61757400
	void ReceiveUpdate(out const ARMeshUpdatePayload Payload);// 0x25bc58ebd041 0x7e617574e0
	void ReceiveAdd(out const ARMeshUpdatePayload Payload);// 0x25bb58ebd041 0x7e617575c0

--------------------------------
Class: ARMeshUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7e61577c80
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7e61577d00
	enum ObjectClassification;//[Offset: 0x80, Size: 0x1] 0x7e84ddeca0

--------------------------------
Class: ARGeoAnchorComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARGeoAnchorUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xa0] 0x7e6185fb00
	void SetGeoAnchorComponentDebugMode(enum NewDebugMode);// 0x25c158ebd041 0x7e6175aa40
	void ServerUpdatePayload(const ARGeoAnchorUpdatePayload NewPayload);// 0x25c058ebd041 0x7e6175ab20
	void ReceiveUpdate(out const ARGeoAnchorUpdatePayload Payload);// 0x25bf58ebd041 0x7e6175ac00
	void ReceiveAdd(out const ARGeoAnchorUpdatePayload Payload);// 0x260058ebd041 0x7e6175ace0

--------------------------------
Class: ARGeoAnchorUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x7e61577900
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60] 0x7e61577980
	float Longitude;//[Offset: 0x80, Size: 0x4] 0x7e61577a00
	float Latitude;//[Offset: 0x84, Size: 0x4] 0x7e61577a80
	float AltitudeMeters;//[Offset: 0x88, Size: 0x4] 0x7e61577b00
	enum AltitudeSource;//[Offset: 0x8c, Size: 0x1] 0x7e84dded40
	FString AnchorName;//[Offset: 0x90, Size: 0x10] 0x7e61577c00

--------------------------------
Class: ARPin.Object
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x28, Size: 0x8] 0x7e61881c00
	SceneComponent* PinnedComponent;//[Offset: 0x30, Size: 0x8] 0x7e61881c80
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x60] 0x7e61881d00
	Transform LocalToAlignedTrackingTransform;//[Offset: 0xa0, Size: 0x60] 0x7e61881d80
	enum TrackingState;//[Offset: 0x100, Size: 0x1] 0x7e61891280
	delegate OnARTrackingStateChanged;//[Offset: 0x120, Size: 0x10] 0x7e61881e80
	delegate OnARTransformUpdated;//[Offset: 0x130, Size: 0x10] 0x7e61881f00
	enum GetTrackingState();// 0x25d658ebd041 0x7e617597e0
	ARTrackedGeometry* GetTrackedGeometry();// 0x25d558ebd041 0x7e617598c0
	SceneComponent* GetPinnedComponent();// 0x25d458ebd041 0x7e617599a0
	Transform GetLocalToWorldTransform();// 0x25d358ebd041 0x7e61759a80
	Transform GetLocalToTrackingTransform();// 0x25d258ebd041 0x7e61759b60
	FName GetDebugName();// 0x25d158ebd041 0x7e61759c40
	void DebugDraw(World* World, out const LinearColor Color, float Scale, float PersistForSeconds);// 0x25d058ebd041 0x7e61759d20

--------------------------------
Class: ARTraceResult
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4] 0x7e61577600
	enum TraceChannel;//[Offset: 0x4, Size: 0x1] 0x7e84ddede0
	Transform LocalTransform;//[Offset: 0x10, Size: 0x60] 0x7e61577700
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x70, Size: 0x8] 0x7e61577780

--------------------------------
Class: ARTexture.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x1f0, Size: 0x1] 0x7e61892b80
	float Timestamp;//[Offset: 0x1f4, Size: 0x4] 0x7e618c4200
	Guid ExternalTextureGuid;//[Offset: 0x1f8, Size: 0x10] 0x7e618c2180
	Vector2D Size;//[Offset: 0x208, Size: 0x10] 0x7e618c2200

--------------------------------
Class: ARLightEstimate.Object

--------------------------------
Class: ARCameraIntrinsics
	IntPoint ImageResolution;//[Offset: 0x0, Size: 0x8] 0x7e61578e00
	Vector2D FocalLength;//[Offset: 0x8, Size: 0x10] 0x7e61578e80
	Vector2D PrincipalPoint;//[Offset: 0x18, Size: 0x10] 0x7e61578f00

--------------------------------
Class: ARTextureCameraImage.ARTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object
	enum DepthQuality;//[Offset: 0x218, Size: 0x1] 0x7e61892a40
	enum DepthAccuracy;//[Offset: 0x219, Size: 0x1] 0x7e61892ae0
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 0x1] 0x7e618c4100

--------------------------------
Class: ARSessionStatus
	FString AdditionalInfo;//[Offset: 0x0, Size: 0x10] 0x7e61577500
	enum Status;//[Offset: 0x10, Size: 0x1] 0x7e84ddee80

--------------------------------
Class: ARTrackedPose.ARTrackedGeometry.Object
	ARPose3D TrackedPose;//[Offset: 0x158, Size: 0x50] 0x7e618c6280
	ARPose3D GetTrackedPoseData();// 0x270258ebd041 0x7e618b90e0

--------------------------------
Class: ARPose3D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x7e61578f80
	Transform[] JointTransforms;//[Offset: 0x28, Size: 0x10] 0x7e84dde020
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x7e84ddd300
	enum JointTransformSpace;//[Offset: 0x48, Size: 0x1] 0x7e84ddd620

--------------------------------
Class: ARSkeletonDefinition
	int NumJoints;//[Offset: 0x0, Size: 0x4] 0x7e61579300
	FName[] JointNames;//[Offset: 0x8, Size: 0x10] 0x7e84ddefc0
	int[] ParentIndices;//[Offset: 0x18, Size: 0x10] 0x7e84ddef20

--------------------------------
Class: ARTrackedPoint.ARTrackedGeometry.Object

--------------------------------
Class: ARPlaneGeometry.ARTrackedGeometry.Object
	enum Orientation;//[Offset: 0x158, Size: 0x1] 0x7e61894ca0
	Vector Center;//[Offset: 0x160, Size: 0x18] 0x7e618c5000
	Vector Extent;//[Offset: 0x178, Size: 0x18] 0x7e618c5080
	Vector[] BoundaryPolygon;//[Offset: 0x190, Size: 0x10] 0x7e61894d40
	ARPlaneGeometry* SubsumedBy;//[Offset: 0x1a0, Size: 0x8] 0x7e618c5180
	ARPlaneGeometry* GetSubsumedBy();// 0x26f858ebd041 0x7e618b99a0
	enum GetOrientation();// 0x26f758ebd041 0x7e618b9a80
	Vector GetExtent();// 0x26f658ebd041 0x7e618b9b60
	Vector GetCenter();// 0x26f558ebd041 0x7e618b9c40
	Vector[] GetBoundaryPolygonInLocalSpace();// 0x26f458ebd041 0x7e618b9d20

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object
	ARCandidateImage* DetectedImage;//[Offset: 0x158, Size: 0x8] 0x7e618c4d80
	Vector2D EstimatedSize;//[Offset: 0x160, Size: 0x10] 0x7e618c4e00
	Vector2D GetEstimateSize();// 0x26fa58ebd041 0x7e618b97e0
	ARCandidateImage* GetDetectedImage();// 0x26f958ebd041 0x7e618b98c0

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object
	Vector Extent;//[Offset: 0x158, Size: 0x18] 0x7e618c4380
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0x170, Size: 0x8] 0x7e618c4400
	Vector GetExtent();// 0x270058ebd041 0x7e618b92a0
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0x26ff58ebd041 0x7e618b9380

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x290, Size: 0x1] 0x7e618929a0
	float Timestamp;//[Offset: 0x294, Size: 0x4] 0x7e618c3e80
	Guid ExternalTextureGuid;//[Offset: 0x298, Size: 0x10] 0x7e618c3f00
	Vector2D Size;//[Offset: 0x2a8, Size: 0x10] 0x7e618c3f80

--------------------------------
Class: ARPose2D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x7e61579180
	Vector2D[] JointLocations;//[Offset: 0x28, Size: 0x10] 0x7e84ddf100
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x7e84ddf060

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object
	ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0x259458ebd041 0x7e61755e20
	enum GetTraceChannel(out const ARTraceResult TraceResult);// 0x259358ebd041 0x7e61755f00
	Transform GetLocalTransform(out const ARTraceResult TraceResult);// 0x259258ebd041 0x7e61755fe0
	Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0x259158ebd041 0x7e617560c0
	Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0x259058ebd041 0x7e617561a0
	float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0x258f58ebd041 0x7e61756280

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object

--------------------------------
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7e6185e300
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7e6185e380
	ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject);// 0x259558ebd041 0x7e61755d40

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7e6185e000
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7e6185e080
	ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0x259658ebd041 0x7e61755c60

--------------------------------
Class: ARDependencyHandler.Object
	void StartARSessionLatent(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo);// 0x25c658ebd041 0x7e6175a5e0
	void RequestARSessionPermission(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo, out enum OutPermissionResult);// 0x25c558ebd041 0x7e6175a6c0
	void InstallARService(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutInstallResult);// 0x25c458ebd041 0x7e6175a7a0
	ARDependencyHandler* GetARDependencyHandler();// 0x25c358ebd041 0x7e6175a880
	void CheckARServiceAvailability(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutAvailability);// 0x25c258ebd041 0x7e6175a960

--------------------------------
Class: ARGeoTrackingSupport.Object
	ARGeoTrackingSupport* GetGeoTrackingSupport();// 0x25cc58ebd041 0x7e6175a0a0
	enum GetGeoTrackingStateReason();// 0x25cb58ebd041 0x7e6175a180
	enum GetGeoTrackingState();// 0x25ca58ebd041 0x7e6175a260
	enum GetGeoTrackingAccuracy();// 0x25c958ebd041 0x7e6175a340
	bool AddGeoAnchorAtLocationWithAltitude(float Longitude, float Latitude, float AltitudeMeters, FString OptionalAnchorName);// 0x25c858ebd041 0x7e6175a420
	bool AddGeoAnchorAtLocation(float Longitude, float Latitude, FString OptionalAnchorName);// 0x25c758ebd041 0x7e6175a500

--------------------------------
Class: CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7e61401780
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7e61401800
	void GeoTrackingAvailabilityDelegate__DelegateSignature(bool bIsAvailable, FString Error);// 0xec658ebd041 0x7e613d4140
	CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailabilityAtLocation(Object* WorldContextObject, float Longitude, float Latitude);// 0xec558ebd041 0x7e613d4220
	CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailability(Object* WorldContextObject);// 0xec458ebd041 0x7e613d4300

--------------------------------
Class: GetGeoLocationAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7e61401300
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7e61401380
	void GetGeoLocationDelegate__DelegateSignature(float Longitude, float Latitude, float Altitude, FString Error);// 0xec858ebd041 0x7e613d3f80
	GetGeoLocationAsyncTaskBlueprintProxy* GetGeoLocationAtWorldPosition(Object* WorldContextObject, out const Vector WorldPosition);// 0xec758ebd041 0x7e613d4060

--------------------------------
Class: ARLifeCycleComponent.SceneComponent.ActorComponent.Object
	delegate OnARActorSpawnedDelegate;//[Offset: 0x2b0, Size: 0x10] 0x7e61401c80
	delegate OnARActorToBeDestroyedDelegate;//[Offset: 0x2c0, Size: 0x10] 0x7e61401d00
	void ServerSpawnARActor(class Object ComponentClass, Guid NativeID);// 0xec258ebd041 0x7e613d44c0
	void ServerDestroyARActor(ARActor* Actor);// 0xec158ebd041 0x7e613d45a0
	void InstanceARActorToBeDestroyedDelegate__DelegateSignature(ARActor* Actor);// 0xec058ebd041 0x7e613d4680
	void InstanceARActorSpawnedDelegate__DelegateSignature(class Object ComponentClass, Guid NativeID, ARActor* SpawnedActor);// 0xebf58ebd041 0x7e613d4760

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4] 0x7e61880380
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4] 0x7e61880400
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10] 0x7e61880480
	float GetAmbientIntensityLumens();// 0x25cf58ebd041 0x7e61759e00
	float GetAmbientColorTemperatureKelvin();// 0x25ce58ebd041 0x7e61759ee0
	LinearColor GetAmbientColor();// 0x25cd58ebd041 0x7e61759fc0

--------------------------------
Class: AROriginActor.Actor.Object

--------------------------------
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object
	int BufferSizePerChunk;//[Offset: 0x35c, Size: 0x4] 0x7e61885500
	void SetPreviewImageData(byte[] ImageData);// 0xffffff8158ebd000 0x7e6175ff20
	void SetARWorldSharingIsReady();// 0x262058ebd041 0x7e6175caa0
	void SetARSharedWorldData(byte[] ARWorldData);// 0x261f58ebd041 0x7e6175cb80
	ARSharedWorldGameState* GetARSharedWorldGameState();// 0x261e58ebd041 0x7e6175cc60

--------------------------------
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object
	byte[] PreviewImageData;//[Offset: 0x2e0, Size: 0x10] 0x7e61891500
	byte[] ARWorldData;//[Offset: 0x2f0, Size: 0x10] 0x7e618915a0
	int PreviewImageBytesTotal;//[Offset: 0x300, Size: 0x4] 0x7e61886b80
	int ARWorldBytesTotal;//[Offset: 0x304, Size: 0x4] 0x7e61886c00
	int PreviewImageBytesDelivered;//[Offset: 0x308, Size: 0x4] 0x7e61886c80
	int ARWorldBytesDelivered;//[Offset: 0x30c, Size: 0x4] 0x7e61886d00
	void K2_OnARWorldMapIsReady();// 0x262e58ebd041 0x7e6175f3c0

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerMarkReadyForReceiving();// 0x26e558ebd041 0x7e618baa40
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0x26e458ebd041 0x7e618bab20
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0x26e358ebd041 0x7e618bac00
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0x272458ebd041 0x7e618bace0

--------------------------------
Class: ARSkyLight.SkyLight.Info.Actor.Object
	AREnvironmentCaptureProbe* CaptureProbe;//[Offset: 0x288, Size: 0x8] 0x7e618c3100
	void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe);// 0x26e758ebd041 0x7e618ba880

--------------------------------
Class: ARTraceResultDummy.Object

--------------------------------
Class: ARTrackedQRCode.ARTrackedImage.ARTrackedGeometry.Object
	FString QRCode;//[Offset: 0x170, Size: 0x10] 0x7e618c4c80
	int Version;//[Offset: 0x180, Size: 0x4] 0x7e618c4d00

--------------------------------
Class: ARFaceGeometry.ARTrackedGeometry.Object
	Vector LookAtTarget;//[Offset: 0x158, Size: 0x18] 0x7e618c4580
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1] 0x7e618c4600
	<enum,float> BlendShapes;//[Offset: 0x178, Size: 0x50] 0x7e6167b140
	Transform LeftEyeTransform;//[Offset: 0x200, Size: 0x60] 0x7e618c4780
	Transform RightEyeTransform;//[Offset: 0x260, Size: 0x60] 0x7e618c4800
	Transform GetWorldSpaceEyeTransform(enum Eye);// 0x26fe58ebd041 0x7e618b9460
	Transform GetLocalSpaceEyeTransform(enum Eye);// 0x26fd58ebd041 0x7e618b9540
	float GetBlendShapeValue(enum BlendShape);// 0x26fc58ebd041 0x7e618b9620
	<enum,float> GetBlendShapes();// 0x26fb58ebd041 0x7e618b9700

--------------------------------
Class: ARTrackedObject.ARTrackedGeometry.Object
	ARCandidateObject* DetectedObject;//[Offset: 0x158, Size: 0x8] 0x7e618c4280
	ARCandidateObject* GetDetectedObject();// 0x270158ebd041 0x7e618b91c0

--------------------------------
Class: ARMeshGeometry.ARTrackedGeometry.Object
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x274558ebd041 0x7e618bc9c0

--------------------------------
Class: ARGeoAnchor.ARTrackedGeometry.Object
	float GetLongitude();// 0x270758ebd041 0x7e618bc640
	float GetLatitude();// 0x270658ebd041 0x7e618bc720
	enum GetAltitudeSource();// 0x270558ebd041 0x7e618bc800
	float GetAltitudeMeters();// 0x270458ebd041 0x7e618bc8e0

--------------------------------
Class: ARTrackableNotifyComponent.ActorComponent.Object
	delegate OnAddTrackedGeometry;//[Offset: 0xb0, Size: 0x10] 0x7e618c5380
	delegate OnUpdateTrackedGeometry;//[Offset: 0xc0, Size: 0x10] 0x7e618c5400
	delegate OnRemoveTrackedGeometry;//[Offset: 0xd0, Size: 0x10] 0x7e618c5480
	delegate OnAddTrackedPlane;//[Offset: 0xe0, Size: 0x10] 0x7e618c5500
	delegate OnUpdateTrackedPlane;//[Offset: 0xf0, Size: 0x10] 0x7e618c5580
	delegate OnRemoveTrackedPlane;//[Offset: 0x100, Size: 0x10] 0x7e618c5600
	delegate OnAddTrackedPoint;//[Offset: 0x110, Size: 0x10] 0x7e618c5680
	delegate OnUpdateTrackedPoint;//[Offset: 0x120, Size: 0x10] 0x7e618c5700
	delegate OnRemoveTrackedPoint;//[Offset: 0x130, Size: 0x10] 0x7e618c5780
	delegate OnAddTrackedImage;//[Offset: 0x140, Size: 0x10] 0x7e618c5800
	delegate OnUpdateTrackedImage;//[Offset: 0x150, Size: 0x10] 0x7e618c5880
	delegate OnRemoveTrackedImage;//[Offset: 0x160, Size: 0x10] 0x7e618c5900
	delegate OnAddTrackedFace;//[Offset: 0x170, Size: 0x10] 0x7e618c5980
	delegate OnUpdateTrackedFace;//[Offset: 0x180, Size: 0x10] 0x7e618c5a00
	delegate OnRemoveTrackedFace;//[Offset: 0x190, Size: 0x10] 0x7e618c5a80
	delegate OnAddTrackedEnvProbe;//[Offset: 0x1a0, Size: 0x10] 0x7e618c5b00
	delegate OnUpdateTrackedEnvProbe;//[Offset: 0x1b0, Size: 0x10] 0x7e618c5b80
	delegate OnRemoveTrackedEnvProbe;//[Offset: 0x1c0, Size: 0x10] 0x7e618c5c00
	delegate OnAddTrackedObject;//[Offset: 0x1d0, Size: 0x10] 0x7e618c5c80
	delegate OnUpdateTrackedObject;//[Offset: 0x1e0, Size: 0x10] 0x7e618c5d00
	delegate OnRemoveTrackedObject;//[Offset: 0x1f0, Size: 0x10] 0x7e618c5d80

--------------------------------
Class: ARTypesDummyClass.Object

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0x273f58ebd041 0x7e618bcf00
	void SetXRTimedInputActionDelegate(out const FName ActionName, out const delegate InDelegate);// 0x273e58ebd041 0x7e618bcfe0
	void SetXRDisconnectDelegate(out const delegate InDisconnectedDelegate);// 0x273d58ebd041 0x7e618bd0c0
	void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0x273c58ebd041 0x7e618bd1a0
	void SetTrackingOrigin(byte Origin);// 0x273b58ebd041 0x7e618bd280
	void SetSpectatorScreenTexture(Texture* InTexture);// 0x273a58ebd041 0x7e618bd360
	void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0x273958ebd041 0x7e618bd440
	void SetSpectatorScreenMode(enum Mode);// 0x273858ebd041 0x7e618bd520
	void SetClippingPlanes(float Near, float Far);// 0x273758ebd041 0x7e618bd600
	void ResetOrientationAndPosition(float Yaw, byte Options);// 0x273658ebd041 0x7e618bd6e0
	bool IsSpectatorScreenModeControllable();// 0x273558ebd041 0x7e618bd7c0
	bool IsInLowPersistenceMode();// 0x273458ebd041 0x7e618bd8a0
	bool IsHeadMountedDisplayEnabled();// 0x273358ebd041 0x7e618bd980
	bool IsHeadMountedDisplayConnected();// 0x273258ebd041 0x7e618bda60
	bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0x273158ebd041 0x7e618bdb40
	bool HasValidTrackingPosition();// 0x273058ebd041 0x7e618bdc20
	int GetXRSystemFlags();// 0x272f58ebd041 0x7e618bdd00
	float GetWorldToMetersScale(Object* WorldContext);// 0x272e58ebd041 0x7e618bdde0
	void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0x272d58ebd041 0x7e618bdec0
	FString GetVersionString();// 0x272c58ebd041 0x7e618bdfa0
	Transform GetTrackingToWorldTransform(Object* WorldContext);// 0x272b58ebd041 0x7e618be080
	void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int Index);// 0x272a58ebd041 0x7e618be160
	byte GetTrackingOrigin();// 0x272958ebd041 0x7e618be240
	float GetScreenPercentage();// 0x272858ebd041 0x7e618be320
	void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0x272758ebd041 0x7e618be400
	Vector2D GetPlayAreaBounds(byte Origin);// 0x272658ebd041 0x7e618be4e0
	float GetPixelDensity();// 0x272558ebd041 0x7e618be5c0
	void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0x276158ebd041 0x7e618be6a0
	int GetNumOfTrackingSensors();// 0x272358ebd041 0x7e618badc0
	void GetMotionControllerData(Object* WorldContext, const enum Hand, out XRMotionControllerData MotionControllerData);// 0x272258ebd041 0x7e618baea0
	byte GetHMDWornState();// 0x272158ebd041 0x7e618baf80
	FName GetHMDDeviceName();// 0x272058ebd041 0x7e618bb060
	void GetHMDData(Object* WorldContext, out XRHMDData HMDData);// 0x271f58ebd041 0x7e618bb140
	void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x271e58ebd041 0x7e618bb220
	void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x271d58ebd041 0x7e618bb300
	bool GetControllerTransformForTime(Object* WorldContext, const int ControllerIndex, const FName MotionSource, Timespan Time, out bool bTimeWasUsed, out Rotator Orientation, out Vector Position, out bool bProvidedLinearVelocity, out Vector LinearVelocity, out bool bProvidedAngularVelocity, out Vector AngularVelocityRadPerSec, out bool bProvidedLinearAcceleration, out Vector LinearAcceleration);// 0x271c58ebd041 0x7e618bb3e0
	XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0x271b58ebd041 0x7e618bb4c0
	void EnableLowPersistenceMode(bool bEnable);// 0x271a58ebd041 0x7e618bb5a0
	bool EnableHMD(bool bEnable);// 0x271958ebd041 0x7e618bb680
	void DisconnectRemoteXRDevice();// 0x271858ebd041 0x7e618bb760
	byte ConnectRemoteXRDevice(FString IpAddress, const int BitRate);// 0x271758ebd041 0x7e618bb840
	bool ConfigureGestures(out const XRGestureConfig GestureConfig);// 0x271658ebd041 0x7e618bb920
	void ClearXRTimedInputActionDelegate(out const FName ActionPath);// 0x271558ebd041 0x7e618bba00
	void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0x271458ebd041 0x7e618bbae0
	void BreakKey(Key InKey, out FString InteractionProfile, out enum Hand, out FName MotionSource, out FString Indentifier, out FString Component);// 0x271358ebd041 0x7e618bbbc0

--------------------------------
Class: XRDeviceId
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x7e6157a400
	int DeviceID;//[Offset: 0x8, Size: 0x4] 0x7e6157a480

--------------------------------
Class: XRMotionControllerData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e6157a500
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x7e61578480
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x7e61578500
	enum DeviceVisualType;//[Offset: 0x1c, Size: 0x1] 0x7e84ddbb40
	enum HandIndex;//[Offset: 0x1d, Size: 0x1] 0x7e84ddbaa0
	enum TrackingStatus;//[Offset: 0x1e, Size: 0x1] 0x7e84ddba00
	Vector GripPosition;//[Offset: 0x20, Size: 0x18] 0x7e61578700
	Quat GripRotation;//[Offset: 0x40, Size: 0x20] 0x7e61578780
	Vector AimPosition;//[Offset: 0x60, Size: 0x18] 0x7e61578800
	Quat AimRotation;//[Offset: 0x80, Size: 0x20] 0x7e61578880
	Vector[] HandKeyPositions;//[Offset: 0xa0, Size: 0x10] 0x7e84dde2a0
	Quat[] HandKeyRotations;//[Offset: 0xb0, Size: 0x10] 0x7e84dde200
	float[] HandKeyRadii;//[Offset: 0xc0, Size: 0x10] 0x7e84dde160
	bool bIsGrasped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x7e61578a80

--------------------------------
Class: XRHMDData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61578b00
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x7e61578b80
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x7e61578c00
	enum TrackingStatus;//[Offset: 0x1c, Size: 0x1] 0x7e84dde0c0
	Vector Position;//[Offset: 0x20, Size: 0x18] 0x7e61578d00
	Quat Rotation;//[Offset: 0x40, Size: 0x20] 0x7e61578d80

--------------------------------
Class: XRGestureConfig
	bool bTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e6157a100
	bool bHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e6157a180
	enum AxisGesture;//[Offset: 0x2, Size: 0x1] 0x7e84ddbbe0
	bool bNavigationAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7e6157a280
	bool bNavigationAxisY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7e6157a300
	bool bNavigationAxisZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7e6157a380

--------------------------------
Class: HandKeypointConversion.BlueprintFunctionLibrary.Object
	int Conv_HandKeypointToInt32(enum Input);// 0x274058ebd041 0x7e618bce20

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x538, Size: 0x4] 0x7e618ca900
	enum Hand;//[Offset: 0x53c, Size: 0x1] 0x7e61893e40
	FName MotionSource;//[Offset: 0x540, Size: 0x8] 0x7e618caa00
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1] 0x7e618caa80
	enum CurrentTrackingStatus;//[Offset: 0x549, Size: 0x1] 0x7e61893ee0
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 0x1] 0x7e618cab80
	FName DisplayModelSource;//[Offset: 0x54c, Size: 0x8] 0x7e618cac00
	StaticMesh* CustomDisplayMesh;//[Offset: 0x558, Size: 0x8] 0x7e618cac80
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x560, Size: 0x10] 0x7e61893f80
	PrimitiveComponent* DisplayComponent;//[Offset: 0x608, Size: 0x8] 0x7e618cad80
	void SetTrackingSource(const enum NewSource);// 0x274b58ebd041 0x7e618bf9e0
	void SetTrackingMotionSource(const FName NewSource);// 0x274a58ebd041 0x7e618bfac0
	void SetShowDeviceModel(const bool bShowControllerModel);// 0x274958ebd041 0x7e618bfba0
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0x274858ebd041 0x7e618bfc80
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0x274758ebd041 0x7e618bfd60
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0x274658ebd041 0x7e618bfe40
	void OnMotionControllerUpdated();// 0xffffff8158ebd000 0x7e618bff20
	bool IsTracked();// 0x274458ebd041 0x7e618bcaa0
	enum GetTrackingSource();// 0x274358ebd041 0x7e618bcb80
	float GetParameterValue(FName InName, out bool bValueFound);// 0x274258ebd041 0x7e618bcc60
	Vector GetHandJointPosition(int jointIndex, out bool bValueFound);// 0x274158ebd041 0x7e618bcd40

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);// 0x275d58ebd041 0x7e618bea20
	bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0x275c58ebd041 0x7e618beb00
	bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0x275b58ebd041 0x7e618bebe0
	bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x275a58ebd041 0x7e618becc0
	bool IsMotionTrackedDeviceCountManagementNecessary();// 0x275958ebd041 0x7e618beda0
	bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0x275858ebd041 0x7e618bee80
	int GetMotionTrackingEnabledControllerCount();// 0x275758ebd041 0x7e618bef60
	int GetMaximumMotionTrackedControllerCount();// 0x275658ebd041 0x7e618bf040
	FName GetActiveTrackingSystemName();// 0x275558ebd041 0x7e618bf120
	FName[] EnumerateMotionSources();// 0x275458ebd041 0x7e618bf200
	bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x275358ebd041 0x7e618bf2e0
	bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x275258ebd041 0x7e618bf3c0
	bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0x275158ebd041 0x7e618bf4a0
	void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x275058ebd041 0x7e618bf580
	void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x274f58ebd041 0x7e618bf660
	void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0x274e58ebd041 0x7e618bf740
	void DisableMotionTrackingOfAllControllers();// 0x274d58ebd041 0x7e618bf820
	void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x274c58ebd041 0x7e618bf900

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xb0, Size: 0x10] 0x7e61402c00
	delegate HMDTrackingInitializedDelegate;//[Offset: 0xc0, Size: 0x10] 0x7e61402c80
	delegate HMDRecenteredDelegate;//[Offset: 0xd0, Size: 0x10] 0x7e61402d00
	delegate HMDLostDelegate;//[Offset: 0xe0, Size: 0x10] 0x7e61402d80
	delegate HMDReconnectedDelegate;//[Offset: 0xf0, Size: 0x10] 0x7e61402e00
	delegate HMDConnectCanceledDelegate;//[Offset: 0x100, Size: 0x10] 0x7e61402e80
	delegate HMDPutOnHeadDelegate;//[Offset: 0x110, Size: 0x10] 0x7e61402f00
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x120, Size: 0x10] 0x7e61402f80
	delegate VRControllerRecenteredDelegate;//[Offset: 0x130, Size: 0x10] 0x7e61403000

--------------------------------
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object
	PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId);// 0x275f58ebd041 0x7e618be860
	PrimitiveComponent* AddDeviceVisualizationComponentBlocking(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform);// 0x275e58ebd041 0x7e618be940

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10] 0x7e618ccc00
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10] 0x7e618ccc80
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8] 0x7e618ccd00
	AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0x27a358ebd041 0x7e618d1c80
	AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0x276058ebd041 0x7e618be780

--------------------------------
Class: XRLoadingScreenFunctionLibrary.BlueprintFunctionLibrary.Object
	void ShowLoadingScreen();// 0x276658ebd041 0x7e618d1820
	void SetLoadingScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x276558ebd041 0x7e618d1900
	void HideLoadingScreen();// 0x276458ebd041 0x7e618d19e0
	void ClearLoadingScreenSplashes();// 0x276358ebd041 0x7e618d1ac0
	void AddLoadingScreenSplash(Texture* Texture, Vector Translation, Rotator Rotation, Vector2D Size, Rotator DeltaRotation, bool bClearBeforeAdd);// 0x276258ebd041 0x7e618d1ba0

--------------------------------
Class: EyeTrackerFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetEyeTrackedPlayer(PlayerController* PlayerController);// 0x276b58ebd041 0x7e618d13c0
	bool IsStereoGazeDataAvailable();// 0x276a58ebd041 0x7e618d14a0
	bool IsEyeTrackerConnected();// 0x276958ebd041 0x7e618d1580
	bool GetStereoGazeData(out EyeTrackerStereoGazeData OutGazeData);// 0x276858ebd041 0x7e618d1660
	bool GetGazeData(out EyeTrackerGazeData OutGazeData);// 0x276758ebd041 0x7e618d1740

--------------------------------
Class: EyeTrackerStereoGazeData
	Vector LeftEyeOrigin;//[Offset: 0x0, Size: 0x18] 0x7e61579c00
	Vector LeftEyeDirection;//[Offset: 0x18, Size: 0x18] 0x7e61579c80
	Vector RightEyeOrigin;//[Offset: 0x30, Size: 0x18] 0x7e61579d00
	Vector RightEyeDirection;//[Offset: 0x48, Size: 0x18] 0x7e61579d80
	Vector FixationPoint;//[Offset: 0x60, Size: 0x18] 0x7e61579e00
	float ConfidenceValue;//[Offset: 0x78, Size: 0x4] 0x7e61579e80

--------------------------------
Class: EyeTrackerGazeData
	Vector GazeOrigin;//[Offset: 0x0, Size: 0x18] 0x7e61579f00
	Vector GazeDirection;//[Offset: 0x18, Size: 0x18] 0x7e61579f80
	Vector FixationPoint;//[Offset: 0x30, Size: 0x18] 0x7e6157a000
	float ConfidenceValue;//[Offset: 0x48, Size: 0x4] 0x7e6157a080

--------------------------------
Class: TypedElementCounterInterface.Interface.Object

--------------------------------
Class: TestTypedElementInterfaceA.Interface.Object
	bool SetDisplayName(out const ScriptTypedElementHandle InElementHandle, FText InNewName, bool bNotify);// 0x276d58ebd041 0x7e618d1200
	FText GetDisplayName(out const ScriptTypedElementHandle InElementHandle);// 0x276c58ebd041 0x7e618d12e0

--------------------------------
Class: TestTypedElementInterfaceB.Interface.Object
	bool MarkAsTested(out const ScriptTypedElementHandle InElementHandle);// 0x276e58ebd041 0x7e618d1120

--------------------------------
Class: TestTypedElementInterfaceC.Interface.Object
	bool GetIsTested(out const ScriptTypedElementHandle InElementHandle);// 0x276f58ebd041 0x7e618d1040

--------------------------------
Class: TestTypedElementInterfaceA_ImplTyped.Object

--------------------------------
Class: TestTypedElementInterfaceA_ImplUntyped.Object

--------------------------------
Class: TestTypedElementInterfaceBAndC_Typed.Object

--------------------------------
Class: TypedElementHandleLibrary.Object
	void Release(out ScriptTypedElementHandle ElementHandle);// 0x277358ebd041 0x7e618d0cc0
	bool NotEqual(out const ScriptTypedElementHandle LHS, out const ScriptTypedElementHandle RHS);// 0x277258ebd041 0x7e618d0da0
	bool IsSet(out const ScriptTypedElementHandle ElementHandle);// 0x277158ebd041 0x7e618d0e80
	bool Equal(out const ScriptTypedElementHandle LHS, out const ScriptTypedElementHandle RHS);// 0x277058ebd041 0x7e618d0f60

--------------------------------
Class: TypedElementListLibrary.Object
	void Shrink(ScriptTypedElementListProxy ElementList);// 0x278758ebd041 0x7e618d3500
	void Reset(ScriptTypedElementListProxy ElementList);// 0x278658ebd041 0x7e618d35e0
	void Reserve(ScriptTypedElementListProxy ElementList, const int Size);// 0x278558ebd041 0x7e618d36c0
	bool Remove(ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle ElementHandle);// 0x278458ebd041 0x7e618d37a0
	int Num(const ScriptTypedElementListProxy ElementList);// 0x278358ebd041 0x7e618d3880
	bool IsValidIndex(const ScriptTypedElementListProxy ElementList, const int Index);// 0x27c458ebd041 0x7e618d3960
	bool HasElementsOfType(const ScriptTypedElementListProxy ElementList, const FName ElementTypeName);// 0x278158ebd041 0x7e618d0080
	bool HasElements(const ScriptTypedElementListProxy ElementList, const class Interface BaseInterfaceType);// 0x278058ebd041 0x7e618d0160
	Object* GetElementInterface(const ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle ElementHandle, const class Interface BaseInterfaceType);// 0x277f58ebd041 0x7e618d0240
	ScriptTypedElementHandle[] GetElementHandles(const ScriptTypedElementListProxy ElementList, const class Interface BaseInterfaceType);// 0x277e58ebd041 0x7e618d0320
	ScriptTypedElementHandle GetElementHandleAt(const ScriptTypedElementListProxy ElementList, const int Index);// 0x277d58ebd041 0x7e618d0400
	void Empty(ScriptTypedElementListProxy ElementList, const int Slack);// 0x277c58ebd041 0x7e618d04e0
	ScriptTypedElementListProxy CreateScriptElementList(TypedElementRegistry* Registry);// 0x277b58ebd041 0x7e618d05c0
	int CountElementsOfType(const ScriptTypedElementListProxy ElementList, const FName ElementTypeName);// 0x277a58ebd041 0x7e618d06a0
	int CountElements(const ScriptTypedElementListProxy ElementList, const class Interface BaseInterfaceType);// 0x277958ebd041 0x7e618d0780
	bool Contains(const ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle ElementHandle);// 0x277858ebd041 0x7e618d0860
	ScriptTypedElementListProxy Clone(const ScriptTypedElementListProxy ElementList);// 0x277758ebd041 0x7e618d0940
	void AppendList(ScriptTypedElementListProxy ElementList, const ScriptTypedElementListProxy OtherElementList);// 0x277658ebd041 0x7e618d0a20
	void Append(ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle[] ElementHandles);// 0x277558ebd041 0x7e618d0b00
	bool Add(ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle ElementHandle);// 0x277458ebd041 0x7e618d0be0

--------------------------------
Class: TypedElementRegistry.Object
	TypedElementRegistry* GetInstance();// 0x278958ebd041 0x7e618d3340
	Object* GetElementInterface(out const ScriptTypedElementHandle InElementHandle, const class Interface InBaseInterfaceType);// 0x278858ebd041 0x7e618d3420

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x890, Size: 0x10] 0x7e618e3c80
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x8a0, Size: 0x10] 0x7e618e3d00
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1] 0x7e618e3d80
	Guid GenerationGuid;//[Offset: 0x8b4, Size: 0x10] 0x7e618e3e00

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object
	int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x27e558ebd041 0x7e618d5640
	void FoliageOverlappingBoxTransforms(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box, out Transform[] OutTransforms);// 0x27a258ebd041 0x7e618d1d60
	int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0x27a158ebd041 0x7e618d1e40

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10] 0x7e618e6980
	float Density;//[Offset: 0x38, Size: 0x4] 0x7e618e6a00
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4] 0x7e618e6a80
	float Radius;//[Offset: 0x40, Size: 0x4] 0x7e618e6b00
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7e618e6b80
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 0x4] 0x7e618e6c00
	enum Scaling;//[Offset: 0x4c, Size: 0x1] 0x7e61897ae0
	FloatInterval ScaleX;//[Offset: 0x50, Size: 0x8] 0x7e618e6d00
	FloatInterval ScaleY;//[Offset: 0x58, Size: 0x8] 0x7e618e6d80
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 0x8] 0x7e618e6e00
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 0xc] 0x7e618e6e80
	byte VertexColorMask;//[Offset: 0x98, Size: 0x1] 0x7e618e6f00
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 0x4] 0x7e618e6f80
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7e618e7000
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 0x8] 0x7e618e7080
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7e618e7100
	bool AverageNormal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x7e618e7180
	bool AverageNormalSingleComponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1] 0x7e618e7200
	float AlignMaxAngle;//[Offset: 0xb0, Size: 0x4] 0x7e618e7280
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x7e618e7300
	float RandomPitchAngle;//[Offset: 0xb8, Size: 0x4] 0x7e618e7380
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 0x8] 0x7e618e5300
	FloatInterval Height;//[Offset: 0xc4, Size: 0x8] 0x7e618e5380
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 0x10] 0x7e61897b80
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4] 0x7e618e5480
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 0x10] 0x7e618952e0
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 0x4] 0x7e618e5580
	FName LandscapeLayer;//[Offset: 0xfc, Size: 0x8] 0x7e618e5600
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x7e618e5680
	Vector CollisionScale;//[Offset: 0x108, Size: 0x18] 0x7e618e5700
	int AverageNormalSampleCount;//[Offset: 0x120, Size: 0x4] 0x7e618e5780
	BoxSphereBounds MeshBounds;//[Offset: 0x128, Size: 0x38] 0x7e618e5800
	Vector LowBoundOriginRadius;//[Offset: 0x160, Size: 0x18] 0x7e618e5880
	byte Mobility;//[Offset: 0x178, Size: 0x1] 0x7e618e5900
	Int32Interval CullDistance;//[Offset: 0x17c, Size: 0x8] 0x7e618e5980
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x184, Size: 0x1] 0x7e618e5a00
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x184, Size: 0x1] 0x7e618e5a80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x184, Size: 0x1] 0x7e618e5b00
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x184, Size: 0x1] 0x7e618e5b80
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x184, Size: 0x1] 0x7e618e5c00
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x184, Size: 0x1] 0x7e618e5c80
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x184, Size: 0x1] 0x7e618e5d00
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x184, Size: 0x1] 0x7e618e5d80
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x185, Size: 0x1] 0x7e618e5e00
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x185, Size: 0x1] 0x7e618e5e80
	int OverriddenLightMapRes;//[Offset: 0x188, Size: 0x4] 0x7e618e5f00
	enum LightmapType;//[Offset: 0x18c, Size: 0x1] 0x7e61895380
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18d, Size: 0x1] 0x7e618e6000
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18d, Size: 0x1] 0x7e618e6080
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18d, Size: 0x1] 0x7e618e6100
	BodyInstance BodyInstance;//[Offset: 0x190, Size: 0x188] 0x7e618e6180
	byte CustomNavigableGeometry;//[Offset: 0x318, Size: 0x1] 0x7e618e6200
	LightingChannels LightingChannels;//[Offset: 0x319, Size: 0x1] 0x7e618e6280
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31a, Size: 0x1] 0x7e618e6300
	enum CustomDepthStencilWriteMask;//[Offset: 0x31b, Size: 0x1] 0x7e61895420
	int CustomDepthStencilValue;//[Offset: 0x31c, Size: 0x4] 0x7e618e4300
	int TranslucencySortPriority;//[Offset: 0x320, Size: 0x4] 0x7e618e4380
	float CollisionRadius;//[Offset: 0x324, Size: 0x4] 0x7e618e4400
	float ShadeRadius;//[Offset: 0x328, Size: 0x4] 0x7e618e4480
	int NumSteps;//[Offset: 0x32c, Size: 0x4] 0x7e618e4500
	float InitialSeedDensity;//[Offset: 0x330, Size: 0x4] 0x7e618e4580
	float AverageSpreadDistance;//[Offset: 0x334, Size: 0x4] 0x7e618e4600
	float SpreadVariance;//[Offset: 0x338, Size: 0x4] 0x7e618e4680
	int SeedsPerStep;//[Offset: 0x33c, Size: 0x4] 0x7e618e4700
	int DistributionSeed;//[Offset: 0x340, Size: 0x4] 0x7e618e4780
	float MaxInitialSeedOffset;//[Offset: 0x344, Size: 0x4] 0x7e618e4800
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x7e618e4880
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1] 0x7e618e4900
	float MaxInitialAge;//[Offset: 0x34c, Size: 0x4] 0x7e618e4980
	float MaxAge;//[Offset: 0x350, Size: 0x4] 0x7e618e4a00
	float OverlapPriority;//[Offset: 0x354, Size: 0x4] 0x7e618e4a80
	FloatInterval ProceduralScale;//[Offset: 0x358, Size: 0x8] 0x7e618e4b00
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x360, Size: 0x88] 0x7e618e4b80
	FoliageDensityFalloff DensityFalloff;//[Offset: 0x3e8, Size: 0x90] 0x7e618e4c00
	int ChangeCount;//[Offset: 0x478, Size: 0x4] 0x7e618e4c80
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47c, Size: 0x1] 0x7e618e4d00
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47c, Size: 0x1] 0x7e618e4d80
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47c, Size: 0x1] 0x7e618e4e00
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47c, Size: 0x1] 0x7e618e4e80
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x47c, Size: 0x1] 0x7e618e4f00
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x47c, Size: 0x1] 0x7e618e4f80
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47c, Size: 0x1] 0x7e618e5000
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x47c, Size: 0x1] 0x7e618e5080
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47d, Size: 0x1] 0x7e618e5100
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47d, Size: 0x1] 0x7e618e5180
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47d, Size: 0x1] 0x7e618e5200
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47d, Size: 0x1] 0x7e618e5280
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x47d, Size: 0x1] 0x7e618e3200
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x47d, Size: 0x1] 0x7e618e3280
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47d, Size: 0x1] 0x7e618e3300
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x47d, Size: 0x1] 0x7e618e3380
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47e, Size: 0x1] 0x7e618e3400
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x480, Size: 0x10] 0x7e618954c0
	int VirtualTextureCullMips;//[Offset: 0x490, Size: 0x4] 0x7e618e3500
	enum VirtualTextureRenderPassType;//[Offset: 0x494, Size: 0x1] 0x7e61895560

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4] 0x7e8412de80
	float Max;//[Offset: 0x4, Size: 0x4] 0x7e8412de00

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61579a80
	float MaskThreshold;//[Offset: 0x4, Size: 0x4] 0x7e61579b00
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e61579b80

--------------------------------
Class: FoliageDensityFalloff
	bool bUseFalloffCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e61579980
	RuntimeFloatCurve FalloffCurve;//[Offset: 0x8, Size: 0x88] 0x7e61579a00

--------------------------------
Class: FoliageType_Actor.FoliageType.Object
	class Actor* ActorClass;//[Offset: 0x498, Size: 0x8] 0x7e618979a0
	bool bShouldAttachToBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1] 0x7e618e6880
	bool bStaticMeshOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 0x1] 0x7e618e6900
	class FoliageInstancedStaticMeshComponent* StaticMeshOnlyComponentClass;//[Offset: 0x4a8, Size: 0x8] 0x7e61897a40

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* Mesh;//[Offset: 0x498, Size: 0x8] 0x7e618e6780
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x4a0, Size: 0x10] 0x7e61897860
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x4b0, Size: 0x8] 0x7e61897900

--------------------------------
Class: InstancedFoliageActor.ISMPartitionActor.PartitionActor.Actor.Object

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x288, Size: 0x8] 0x7e618e7c80
	Vector TouchingActorEntryPosition;//[Offset: 0x290, Size: 0x18] 0x7e618e7d00
	Vector FoliageVelocity;//[Offset: 0x2a8, Size: 0x18] 0x7e618e7d80
	Vector FoliageForce;//[Offset: 0x2c0, Size: 0x18] 0x7e618e7e00
	Vector FoliagePosition;//[Offset: 0x2d8, Size: 0x18] 0x7e618e7e80
	float FoliageDamageImpulseScale;//[Offset: 0x2f0, Size: 0x4] 0x7e618e7f00
	float FoliageTouchImpulseScale;//[Offset: 0x2f4, Size: 0x4] 0x7e618e7f80
	float FoliageStiffness;//[Offset: 0x2f8, Size: 0x4] 0x7e618e8000
	float FoliageStiffnessQuadratic;//[Offset: 0x2fc, Size: 0x4] 0x7e618e8080
	float FoliageDamping;//[Offset: 0x300, Size: 0x4] 0x7e618e8100
	float MaxDamageImpulse;//[Offset: 0x304, Size: 0x4] 0x7e618e8180
	float MaxTouchImpulse;//[Offset: 0x308, Size: 0x4] 0x7e618e8200
	float MaxForce;//[Offset: 0x30c, Size: 0x4] 0x7e618e8280
	float Mass;//[Offset: 0x310, Size: 0x4] 0x7e618e8300
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x27a558ebd041 0x7e618d5480

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x2b0, Size: 0x8] 0x7e618e7600
	FoliageDensityFalloff DensityFalloff;//[Offset: 0x2b8, Size: 0x90] 0x7e618e7680

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x2b0, Size: 0x8] 0x7e618e9080

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xb0, Size: 0x8] 0x7e618e7400
	float TileOverlap;//[Offset: 0xb8, Size: 0x4] 0x7e618e7480
	Volume* SpawningVolume;//[Offset: 0xc0, Size: 0x8] 0x7e618e7500
	Guid ProceduralGuid;//[Offset: 0xc8, Size: 0x10] 0x7e618e7580

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x28, Size: 0x4] 0x7e618e9200
	float TileSize;//[Offset: 0x2c, Size: 0x4] 0x7e618e9280
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4] 0x7e618e9300
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4] 0x7e618e9380
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10] 0x7e61897680
	void Simulate(int NumSteps);// 0x27a658ebd041 0x7e618d53a0

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8] 0x7e61579800
	FoliageType* TypeInstance;//[Offset: 0x8, Size: 0x8] 0x7e61579880
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e61579900
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8] 0x7e84ddbc80

--------------------------------
Class: ProceduralFoliageTile.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x28, Size: 0x8] 0x7e618e9100
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0xd0, Size: 0x10] 0x7e618975e0

--------------------------------
Class: ProceduralFoliageInstance
	Quat Rotation;//[Offset: 0x0, Size: 0x20] 0x7e61579500
	Vector Location;//[Offset: 0x20, Size: 0x18] 0x7e61579580
	float Age;//[Offset: 0x38, Size: 0x4] 0x7e61579600
	Vector Normal;//[Offset: 0x40, Size: 0x18] 0x7e61579680
	float Scale;//[Offset: 0x58, Size: 0x4] 0x7e61579700
	FoliageType* Type;//[Offset: 0x60, Size: 0x8] 0x7e61579780

--------------------------------
Class: ControlPointMeshActor.Actor.Object
	ControlPointMeshComponent* ControlPointMeshComponent;//[Offset: 0x278, Size: 0x8] 0x7e618e9000

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x5c8, Size: 0x4] 0x7e618e8f80

--------------------------------
Class: LandscapeSplineInterface.Interface.Object

--------------------------------
Class: LandscapeProxy.PartitionActor.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x280, Size: 0x8] 0x7e618ea700
	Guid LandscapeGuid;//[Offset: 0x288, Size: 0x10] 0x7e618ea780
	IntPoint LandscapeSectionOffset;//[Offset: 0x298, Size: 0x8] 0x7e618ea800
	int MaxLODLevel;//[Offset: 0x2a0, Size: 0x4] 0x7e618ea880
	float LODDistanceFactor;//[Offset: 0x2a4, Size: 0x4] 0x7e618ea900
	byte LODFalloff;//[Offset: 0x2a8, Size: 0x1] 0x7e618ea980
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x2ac, Size: 0x4] 0x7e618eaa00
	float LOD0ScreenSize;//[Offset: 0x2b0, Size: 0x4] 0x7e618eaa80
	float LOD0DistributionSetting;//[Offset: 0x2b4, Size: 0x4] 0x7e618eab00
	float LODDistributionSetting;//[Offset: 0x2b8, Size: 0x4] 0x7e618eab80
	int StaticLightingLOD;//[Offset: 0x2bc, Size: 0x4] 0x7e618eac00
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x2c0, Size: 0x8] 0x7e618eac80
	float StreamingDistanceMultiplier;//[Offset: 0x2c8, Size: 0x4] 0x7e618ead00
	MaterialInterface* LandscapeMaterial;//[Offset: 0x2d0, Size: 0x8] 0x7e618ead80
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x2f8, Size: 0x8] 0x7e618eae00
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x300, Size: 0x10] 0x7e618970e0
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x7e618eaf00
	byte MeshHolesMaxLod;//[Offset: 0x311, Size: 0x1] 0x7e618eaf80
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x318, Size: 0x10] 0x7e61897180
	bool bSetCreateRuntimeVirtualTextureVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1] 0x7e618eb080
	int VirtualTextureNumLods;//[Offset: 0x32c, Size: 0x4] 0x7e618eb100
	int VirtualTextureLodBias;//[Offset: 0x330, Size: 0x4] 0x7e618eb180
	enum VirtualTextureRenderPassType;//[Offset: 0x334, Size: 0x1] 0x7e61897220
	float NegativeZBoundsExtension;//[Offset: 0x338, Size: 0x4] 0x7e618eb280
	float PositiveZBoundsExtension;//[Offset: 0x33c, Size: 0x4] 0x7e618eb300
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x340, Size: 0x10] 0x7e618972c0
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x350, Size: 0x10] 0x7e61897360
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x360, Size: 0x10] 0x7e61897400
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1] 0x7e618eb500
	float StaticLightingResolution;//[Offset: 0x3d8, Size: 0x4] 0x7e618eb580
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 0x1] 0x7e618e9500
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3dc, Size: 0x1] 0x7e618e9580
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3dc, Size: 0x1] 0x7e618e9600
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3dc, Size: 0x1] 0x7e618e9680
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3dc, Size: 0x1] 0x7e618e9700
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3dc, Size: 0x1] 0x7e618e9780
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3dc, Size: 0x1] 0x7e618e9800
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3dc, Size: 0x1] 0x7e618e9880
	LightingChannels LightingChannels;//[Offset: 0x3dd, Size: 0x1] 0x7e618e9900
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3de, Size: 0x1] 0x7e618e9980
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3de, Size: 0x1] 0x7e618e9a00
	enum CustomDepthStencilWriteMask;//[Offset: 0x3df, Size: 0x1] 0x7e618974a0
	int CustomDepthStencilValue;//[Offset: 0x3e0, Size: 0x4] 0x7e618e9b00
	float LDMaxDrawDistance;//[Offset: 0x3e4, Size: 0x4] 0x7e618e9b80
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3e8, Size: 0x18] 0x7e618e9c00
	int CollisionMipLevel;//[Offset: 0x400, Size: 0x4] 0x7e618e9c80
	int SimpleCollisionMipLevel;//[Offset: 0x404, Size: 0x4] 0x7e618e9d00
	float CollisionThickness;//[Offset: 0x408, Size: 0x4] 0x7e618e9d80
	BodyInstance BodyInstance;//[Offset: 0x410, Size: 0x188] 0x7e618e9e00
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x598, Size: 0x1] 0x7e618e9e80
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x598, Size: 0x1] 0x7e618e9f00
	int ComponentSizeQuads;//[Offset: 0x59c, Size: 0x4] 0x7e618e9f80
	int SubsectionSizeQuads;//[Offset: 0x5a0, Size: 0x4] 0x7e618ea000
	int NumSubsections;//[Offset: 0x5a4, Size: 0x4] 0x7e618ea080
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a8, Size: 0x1] 0x7e618ea100
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a8, Size: 0x1] 0x7e618ea180
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 0x1] 0x7e618ea200
	enum NavigationGeometryGatheringMode;//[Offset: 0x5aa, Size: 0x1] 0x7e61897540
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ab, Size: 0x1] 0x7e618ea300
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1] 0x7e618ea380
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x27ae58ebd041 0x7e618d4ca0
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x27ad58ebd041 0x7e618d4d80
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x27ac58ebd041 0x7e618d4e60
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0x27ab58ebd041 0x7e618d4f40
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x27aa58ebd041 0x7e618d5020
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0x27a958ebd041 0x7e618d5100
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x27a858ebd041 0x7e618d51e0
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x27a758ebd041 0x7e618d52c0

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x538, Size: 0x10] 0x7e618986c0
	LandscapeSplineSegment*[] Segments;//[Offset: 0x548, Size: 0x10] 0x7e61898760
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x558, Size: 0x10] 0x7e61898800
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x27c058ebd041 0x7e618d3ce0

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0x18] 0x7e618ef880
	Rotator Rotation;//[Offset: 0x40, Size: 0x18] 0x7e618ef900
	float Width;//[Offset: 0x58, Size: 0x4] 0x7e618ef980
	float LayerWidthRatio;//[Offset: 0x5c, Size: 0x4] 0x7e618efa00
	float SideFalloff;//[Offset: 0x60, Size: 0x4] 0x7e618efa80
	float LeftSideFalloffFactor;//[Offset: 0x64, Size: 0x4] 0x7e618efb00
	float RightSideFalloffFactor;//[Offset: 0x68, Size: 0x4] 0x7e618efb80
	float LeftSideLayerFalloffFactor;//[Offset: 0x6c, Size: 0x4] 0x7e618efc00
	float RightSideLayerFalloffFactor;//[Offset: 0x70, Size: 0x4] 0x7e618efc80
	float EndFalloff;//[Offset: 0x74, Size: 0x4] 0x7e618efd00
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x78, Size: 0x10] 0x7e61898940
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x88, Size: 0x10] 0x7e618989e0
	Box Bounds;//[Offset: 0x98, Size: 0x38] 0x7e618efe80
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xd0, Size: 0x8] 0x7e618eff00

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8] 0x7e6157ba00
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7e6157ba80

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18] 0x7e61900d00
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18] 0x7e61900d80
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x7e61898580
	Box Bounds;//[Offset: 0x80, Size: 0x38] 0x7e61900e80
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xb8, Size: 0x10] 0x7e61898620

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8] 0x7e6157d480
	float TangentLen;//[Offset: 0x8, Size: 0x4] 0x7e6157d500
	FName SocketName;//[Offset: 0xc, Size: 0x8] 0x7e6157d580

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0x18] 0x7e6157d600
	Vector Left;//[Offset: 0x18, Size: 0x18] 0x7e6157d680
	Vector Right;//[Offset: 0x30, Size: 0x18] 0x7e6157b600
	Vector FalloffLeft;//[Offset: 0x48, Size: 0x18] 0x7e6157b680
	Vector FalloffRight;//[Offset: 0x60, Size: 0x18] 0x7e6157b700
	Vector LayerLeft;//[Offset: 0x78, Size: 0x18] 0x7e6157b780
	Vector LayerRight;//[Offset: 0x90, Size: 0x18] 0x7e6157b800
	Vector LayerFalloffLeft;//[Offset: 0xa8, Size: 0x18] 0x7e6157b880
	Vector LayerFalloffRight;//[Offset: 0xc0, Size: 0x18] 0x7e6157b900
	float StartEndFalloff;//[Offset: 0xd8, Size: 0x4] 0x7e6157b980

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x7e6157bb00
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7e6157bb80

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x7e618edf00
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8] 0x7e618edf80
	float Hardness;//[Offset: 0x38, Size: 0x4] 0x7e618ee000
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10] 0x7e618ee080

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x538, Size: 0x4] 0x7e618ece00
	int SectionBaseY;//[Offset: 0x53c, Size: 0x4] 0x7e618ece80
	int ComponentSizeQuads;//[Offset: 0x540, Size: 0x4] 0x7e618ecf00
	int SubsectionSizeQuads;//[Offset: 0x544, Size: 0x4] 0x7e618ecf80
	int NumSubsections;//[Offset: 0x548, Size: 0x4] 0x7e618ed000
	MaterialInterface* OverrideMaterial;//[Offset: 0x550, Size: 0x8] 0x7e618ed080
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x558, Size: 0x8] 0x7e618ed100
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x560, Size: 0x10] 0x7e61896aa0
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x570, Size: 0x10] 0x7e61896b40
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x580, Size: 0x10] 0x7e61896be0
	int8[] LODIndexToMaterialIndex;//[Offset: 0x590, Size: 0x10] 0x7e61896c80
	Texture2D* XYOffsetmapTexture;//[Offset: 0x5a0, Size: 0x8] 0x7e618ed380
	Vector4 WeightmapScaleBias;//[Offset: 0x5b0, Size: 0x20] 0x7e618ed400
	float WeightmapSubsectionOffset;//[Offset: 0x5d0, Size: 0x4] 0x7e618ed480
	Vector4 HeightmapScaleBias;//[Offset: 0x5e0, Size: 0x20] 0x7e618ed500
	Box CachedLocalBox;//[Offset: 0x600, Size: 0x38] 0x7e618ed580
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x638, Size: 0x1c] 0x7e618ed600
	Texture2D* HeightmapTexture;//[Offset: 0x658, Size: 0x8] 0x7e618ed680
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x660, Size: 0x10] 0x7e61896d20
	Texture2D*[] WeightmapTextures;//[Offset: 0x670, Size: 0x10] 0x7e61896dc0
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x680, Size: 0x8] 0x7e618eb700
	Guid MapBuildDataId;//[Offset: 0x688, Size: 0x10] 0x7e618eb780
	Guid[] IrrelevantLights;//[Offset: 0x698, Size: 0x10] 0x7e61896e60
	int CollisionMipLevel;//[Offset: 0x6a8, Size: 0x4] 0x7e618eb880
	int SimpleCollisionMipLevel;//[Offset: 0x6ac, Size: 0x4] 0x7e618eb900
	float NegativeZBoundsExtension;//[Offset: 0x6b0, Size: 0x4] 0x7e618eb980
	float PositiveZBoundsExtension;//[Offset: 0x6b4, Size: 0x4] 0x7e618eba00
	float StaticLightingResolution;//[Offset: 0x6b8, Size: 0x4] 0x7e618eba80
	int ForcedLOD;//[Offset: 0x6bc, Size: 0x4] 0x7e618ebb00
	int LODBias;//[Offset: 0x6c0, Size: 0x4] 0x7e618ebb80
	Guid StateId;//[Offset: 0x6c4, Size: 0x10] 0x7e618ebc00
	Guid BakedTextureMaterialGuid;//[Offset: 0x6d4, Size: 0x10] 0x7e618ebc80
	Guid LastBakedTextureMaterialGuid;//[Offset: 0x6e4, Size: 0x10] 0x7e618ebd00
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x6f8, Size: 0x8] 0x7e618ebd80
	byte MobileBlendableLayerMask;//[Offset: 0x700, Size: 0x1] 0x7e618ebe00
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x708, Size: 0x8] 0x7e618ebe80
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x710, Size: 0x10] 0x7e61896f00
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x720, Size: 0x10] 0x7e61896fa0
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x27b558ebd041 0x7e618d4680
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0x27b458ebd041 0x7e618d4760
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0x27b358ebd041 0x7e618d4840

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x7e6157aa00
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7e6157aa80

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x538, Size: 0x10] 0x7e61896820
	int SectionBaseX;//[Offset: 0x548, Size: 0x4] 0x7e618ee500
	int SectionBaseY;//[Offset: 0x54c, Size: 0x4] 0x7e618ee580
	int CollisionSizeQuads;//[Offset: 0x550, Size: 0x4] 0x7e618ee600
	float CollisionScale;//[Offset: 0x554, Size: 0x4] 0x7e618ee680
	int SimpleCollisionSizeQuads;//[Offset: 0x558, Size: 0x4] 0x7e618ee700
	byte[] CollisionQuadFlags;//[Offset: 0x560, Size: 0x10] 0x7e618968c0
	Guid HeightfieldGuid;//[Offset: 0x570, Size: 0x10] 0x7e618ec700
	Box CachedLocalBox;//[Offset: 0x580, Size: 0x38] 0x7e618ec780
	LandscapeComponent* RenderComponent;//[Offset: 0x5b8, Size: 0x1c] 0x7e618ec800
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x5e8, Size: 0x10] 0x7e61896960
	LandscapeComponent* GetRenderComponent();// 0x27b658ebd041 0x7e618d45a0

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8] 0x7e6157ab00
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1] 0x7e6157ab80
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1] 0x7e6157ac00

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: Landscape.LandscapeProxy.PartitionActor.Actor.Object

--------------------------------
Class: LandscapeBlueprintBrushBase.Actor.Object
	void RequestLandscapeUpdate();// 0x27b258ebd041 0x7e618d4920
	TextureRenderTarget2D* Render(bool InIsHeightmap, TextureRenderTarget2D* InCombinedResult, out const FName InWeightmapLayerName);// 0x27b158ebd041 0x7e618d4a00
	void Initialize(out const Transform InLandscapeTransform, out const IntPoint InLandscapeSize, out const IntPoint InLandscapeRenderTargetSize);// 0x27b058ebd041 0x7e618d4ae0
	void GetBlueprintRenderDependencies(out Object*[] OutStreamableAssets);// 0x27af58ebd041 0x7e618d4bc0

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10] 0x7e61896a00
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e618eca00
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8] 0x7e618eca80
	float GrassDensity;//[Offset: 0x48, Size: 0x4] 0x7e618ecb00
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4] 0x7e618ecb80
	int StartCullDistance;//[Offset: 0x50, Size: 0x4] 0x7e618ecc00
	int EndCullDistance;//[Offset: 0x54, Size: 0x4] 0x7e618ecc80
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7e618ecd00
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7e618ecd80

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8] 0x7e6157be80
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10] 0x7e84ddc040
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 0x4] 0x7e6157bf80
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7e6157c000
	float PlacementJitter;//[Offset: 0x20, Size: 0x4] 0x7e6157c080
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 0x4] 0x7e6157c100
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 0x4] 0x7e6157c180
	int MinLOD;//[Offset: 0x2c, Size: 0x4] 0x7e6157c200
	enum Scaling;//[Offset: 0x30, Size: 0x1] 0x7e84ddbfa0
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8] 0x7e6157c300
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8] 0x7e6157c380
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8] 0x7e6157c400
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7e6157c480
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x7e6157c500
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1] 0x7e6157c580
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1] 0x7e6157c600
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7e6157a580
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7e6157a600
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x7e6157a680

--------------------------------
Class: LandscapeHLODBuilder.HLODBuilder.Object

--------------------------------
Class: LandscapeInfo.Object
	Landscape* LandscapeActor;//[Offset: 0x28, Size: 0x1c] 0x7e618ee100
	Guid LandscapeGuid;//[Offset: 0x44, Size: 0x10] 0x7e618ee180
	int ComponentSizeQuads;//[Offset: 0x54, Size: 0x4] 0x7e618ee200
	int SubsectionSizeQuads;//[Offset: 0x58, Size: 0x4] 0x7e618ee280
	int ComponentNumSubsections;//[Offset: 0x5c, Size: 0x4] 0x7e618ee300
	Vector DrawScale;//[Offset: 0x60, Size: 0x18] 0x7e618ee380
	LandscapeStreamingProxy*[] Proxies;//[Offset: 0x118, Size: 0x10] 0x7e61896780

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.PartitionActor.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x5b0, Size: 0x1c] 0x7e61900c80

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LandscapeMaterialTextureStreamingInfo[] TextureStreamingInfo;//[Offset: 0x200, Size: 0x10] 0x7e61898b20
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1] 0x7e618eeb00
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1] 0x7e618eeb80
	bool bMobile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1] 0x7e618eec00
	bool bEditorToolUsage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1] 0x7e618eec80

--------------------------------
Class: LandscapeMaterialTextureStreamingInfo
	FName TextureName;//[Offset: 0x0, Size: 0x8] 0x7e6157bc80
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x7e6157bd00

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid MeshGuid;//[Offset: 0x638, Size: 0x10] 0x7e618eea00

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x278, Size: 0x8] 0x7e618ee980

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x5c8, Size: 0x10] 0x7e618ee800
	IntPoint[] ProxyComponentBases;//[Offset: 0x5d8, Size: 0x10] 0x7e61898a80
	int8 ProxyLOD;//[Offset: 0x5e8, Size: 0x1] 0x7e618ee900

--------------------------------
Class: LandscapeSettings.DeveloperSettings.Object
	int MaxNumberOfLayers;//[Offset: 0x38, Size: 0x4] 0x7e618ee780

--------------------------------
Class: LandscapeSplineActor.Actor.Object
	Guid LandscapeGuid;//[Offset: 0x280, Size: 0x10] 0x7e618eff80

--------------------------------
Class: LandscapeSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 0x8] 0x7e61900b80
	Guid LayerGuid;//[Offset: 0x48, Size: 0x10] 0x7e61900c00

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	GrassInput[] GrassTypes;//[Offset: 0x40, Size: 0x10] 0x7e618984e0

--------------------------------
Class: GrassInput
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7e6157ce80
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x8] 0x7e6157cf00
	ExpressionInput Input;//[Offset: 0x10, Size: 0x14] 0x7e6157cf80

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object
	LayerBlendInput[] Layers;//[Offset: 0x40, Size: 0x10] 0x7e61898440

--------------------------------
Class: LayerBlendInput
	FName LayerName;//[Offset: 0x0, Size: 0x8] 0x7e6157cb00
	byte BlendType;//[Offset: 0x8, Size: 0x1] 0x7e6157cb80
	ExpressionInput LayerInput;//[Offset: 0xc, Size: 0x14] 0x7e6157cc00
	ExpressionInput HeightInput;//[Offset: 0x20, Size: 0x14] 0x7e6157cc80
	float PreviewWeight;//[Offset: 0x34, Size: 0x4] 0x7e6157cd00
	Vector ConstLayerInput;//[Offset: 0x38, Size: 0x18] 0x7e6157cd80
	float ConstHeightInput;//[Offset: 0x50, Size: 0x4] 0x7e6157ce00

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x39, Size: 0x1] 0x7e61900780
	byte CustomUVType;//[Offset: 0x3a, Size: 0x1] 0x7e61900800
	float MappingScale;//[Offset: 0x3c, Size: 0x4] 0x7e61900880
	float MappingRotation;//[Offset: 0x40, Size: 0x4] 0x7e61900900
	float MappingPanU;//[Offset: 0x44, Size: 0x4] 0x7e61900980
	float MappingPanV;//[Offset: 0x48, Size: 0x4] 0x7e61900a00

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x7e61900680
	float PreviewWeight;//[Offset: 0x44, Size: 0x4] 0x7e61900700

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object
	ExpressionInput LayerUsed;//[Offset: 0x3c, Size: 0x14] 0x7e61900480
	ExpressionInput LayerNotUsed;//[Offset: 0x50, Size: 0x14] 0x7e61900500
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x7e61900580
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7e61900600

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0x14] 0x7e61900200
	ExpressionInput Layer;//[Offset: 0x50, Size: 0x14] 0x7e61900280
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x7e61900300
	float PreviewWeight;//[Offset: 0x6c, Size: 0x4] 0x7e61900380
	Vector ConstBase;//[Offset: 0x70, Size: 0x18] 0x7e61900400

--------------------------------
Class: MaterialExpressionLandscapePhysicalMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	PhysicalMaterialInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x7e618983a0

--------------------------------
Class: PhysicalMaterialInput
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8] 0x7e6157ca00
	ExpressionInput Input;//[Offset: 0x8, Size: 0x14] 0x7e6157ca80

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedFixedRateCustomTimeStep.GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object
	FrameRate FrameRate;//[Offset: 0x28, Size: 0x8] 0x7e61900100

--------------------------------
Class: GenlockedTimecodeProvider.TimecodeProvider.Object
	bool bUseGenlockToCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7e61901d00

--------------------------------
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object
	FrameTime TransformTime(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate DestinationRate);// 0x27d958ebd041 0x7e618d60c0
	FrameNumber Subtract_FrameNumberInteger(FrameNumber A, int B);// 0x27d858ebd041 0x7e618d61a0
	FrameNumber Subtract_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x27d758ebd041 0x7e618d6280
	FrameTime SnapFrameTimeToRate(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate SnapToRate);// 0x27d658ebd041 0x7e618d6360
	FrameTime Multiply_SecondsFrameRate(float TimeInSeconds, out const FrameRate FrameRate);// 0x27d558ebd041 0x7e618d6440
	FrameNumber Multiply_FrameNumberInteger(FrameNumber A, int B);// 0x27d458ebd041 0x7e618d6520
	bool IsValid_MultipleOf(out const FrameRate InFrameRate, out const FrameRate OtherFramerate);// 0x27d358ebd041 0x7e618d6600
	bool IsValid_Framerate(out const FrameRate InFrameRate);// 0x27d258ebd041 0x7e618d66e0
	FrameRate GetTimecodeFrameRate();// 0x27d158ebd041 0x7e618d67c0
	Timecode GetTimecode();// 0x27d058ebd041 0x7e618d68a0
	FrameNumber Divide_FrameNumberInteger(FrameNumber A, int B);// 0x27cf58ebd041 0x7e618d6980
	FString Conv_TimecodeToString(out const Timecode InTimecode, bool bForceSignDisplay);// 0x27ce58ebd041 0x7e618d6a60
	float Conv_QualifiedFrameTimeToSeconds(out const QualifiedFrameTime InFrameTime);// 0x27cd58ebd041 0x7e618d6b40
	float Conv_FrameRateToSeconds(out const FrameRate InFrameRate);// 0x27cc58ebd041 0x7e618d6c20
	int Conv_FrameNumberToInteger(out const FrameNumber InFrameNumber);// 0x27cb58ebd041 0x7e618d6d00
	FrameNumber Add_FrameNumberInteger(FrameNumber A, int B);// 0x27ca58ebd041 0x7e618d6de0
	FrameNumber Add_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x27c958ebd041 0x7e618d6ec0

--------------------------------
Class: TimeSynchronizationSource.Object
	bool bUseForSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e61902680
	int FrameOffset;//[Offset: 0x2c, Size: 0x4] 0x7e61902700

--------------------------------
Class: MovieSceneCustomClockSource.Interface.Object
	void OnTick(float DeltaSeconds, float InPlayRate);// 0x27dd58ebd041 0x7e618d5d40
	void OnStopPlaying(out const QualifiedFrameTime InStopTime);// 0x27dc58ebd041 0x7e618d5e20
	void OnStartPlaying(out const QualifiedFrameTime InStartTime);// 0x27db58ebd041 0x7e618d5f00
	FrameTime OnRequestCurrentTime(out const QualifiedFrameTime InCurrentTime, float InPlayRate);// 0x27da58ebd041 0x7e618d5fe0

--------------------------------
Class: MovieSceneDeterminismSource.Interface.Object

--------------------------------
Class: MovieSceneEntityProvider.Interface.Object

--------------------------------
Class: MovieSceneEvaluationHook.Interface.Object

--------------------------------
Class: MovieScenePlaybackClient.Interface.Object

--------------------------------
Class: MovieSceneTrackTemplateProducer.Interface.Object

--------------------------------
Class: NodeAndChannelMappings.Interface.Object

--------------------------------
Class: MovieSceneNodeGroup.Object

--------------------------------
Class: MovieSceneNodeGroupCollection.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10] 0x7e61897e00

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18] 0x7e6157f780
	Object* Object;//[Offset: 0x18, Size: 0x28] 0x7e6157d700
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7e6157d780

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object

--------------------------------
Class: MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x7e61903b00
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xe0, Size: 0xd8] 0x7e61903b80

--------------------------------
Class: MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneGenericBoundObjectInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoundSceneComponentInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSceneComponentImpersonator.Interface.Object

--------------------------------
Class: MovieSceneValueDecomposer.Interface.Object

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8] 0x7e61905200

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object
	float OnEvaluate(float Interp);// 0x27de58ebd041 0x7e618d5c60

--------------------------------
Class: MovieSceneEvalTimeSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEvaluationHookSystem.MovieSceneEntitySystem.Object
	<MovieSceneEvaluationInstanceKey,MovieSceneEvaluationHookEventContainer> PendingEventsByRootInstance;//[Offset: 0x40, Size: 0x50] 0x7e6167de40

--------------------------------
Class: MovieSceneEvaluationInstanceKey

--------------------------------
Class: MovieSceneEvaluationHookEventContainer
	MovieSceneEvaluationHookEvent[] Events;//[Offset: 0x0, Size: 0x10] 0x7e84ddd080

--------------------------------
Class: MovieSceneEvaluationHookEvent
	MovieSceneEvaluationHookComponent Hook;//[Offset: 0x0, Size: 0x20] 0x7e615a0880

--------------------------------
Class: MovieSceneEvaluationHookComponent
	interface class None* Interface;//[Offset: 0x0, Size: 0x10] 0x7e6157e700

--------------------------------
Class: MovieSceneHookSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bRequiresRangedHook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7e61904c80
	bool bRequiresTriggerHooks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x7e61904d00

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object

--------------------------------
Class: MovieSceneMasterInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedStateSystemInterface.Interface.Object

--------------------------------
Class: MovieSceneCachePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneRestorePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSequenceActor.Interface.Object

--------------------------------
Class: MovieSceneSpawnablesSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7e6189a240
	Guid ObjectGuid;//[Offset: 0xa0, Size: 0x10] 0x7e61904b00

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7e61904980
	MovieSceneSection*[] SectionArray;//[Offset: 0xa0, Size: 0x10] 0x7e6189a1a0

--------------------------------
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x7e61904900

--------------------------------
Class: TestMovieSceneSubTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0xa0, Size: 0x10] 0x7e6189a100

--------------------------------
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneEvalHookTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0x90, Size: 0x10] 0x7e6189a060

--------------------------------
Class: TestMovieSceneEvalHookSection.MovieSceneHookSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTrackInstance.Object
	Object* AnimatedObject;//[Offset: 0x28, Size: 0x8] 0x7e61904600
	bool bIsMasterTrackInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61904680
	MovieSceneEntitySystemLinker* PrivateLinker;//[Offset: 0x38, Size: 0x8] 0x7e61904700
	MovieSceneTrackInstanceInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x7e61899fc0

--------------------------------
Class: MovieSceneTrackInstanceInput
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8] 0x7e615a6300

--------------------------------
Class: MovieSceneTrackInstanceInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTrackInstanceSystem.MovieSceneEntitySystem.Object
	MovieSceneTrackInstanceInstantiator* Instantiator;//[Offset: 0x40, Size: 0x8] 0x7e61904580

--------------------------------
Class: ChaosDebugDrawComponent.ActorComponent.Object

--------------------------------
Class: ChaosNotifyHandlerInterface.Interface.Object

--------------------------------
Class: ChaosSolverEngineBlueprintLibrary.BlueprintFunctionLibrary.Object
	HitResult ConvertPhysicsCollisionToHitResult(out const ChaosPhysicsCollisionInfo PhysicsCollision);// 0x27df58ebd041 0x7e618d5b80

--------------------------------
Class: ChaosSolver.Object

--------------------------------
Class: ChaosSolverSettings.DeveloperSettings.Object
	SoftClassPath DefaultChaosSolverActorClass;//[Offset: 0x40, Size: 0x18] 0x7e61905780

--------------------------------
Class: FieldSystemMetaDataIteration.FieldSystemMetaData.ActorComponent.Object
	int Iterations;//[Offset: 0xb0, Size: 0x4] 0x7e61908300
	FieldSystemMetaDataIteration* SetMetaDataIteration(int Iterations);// 0x27ed58ebd041 0x7e618d8900

--------------------------------
Class: FieldSystemMetaDataProcessingResolution.FieldSystemMetaData.ActorComponent.Object
	byte ResolutionType;//[Offset: 0xb0, Size: 0x1] 0x7e61908180
	FieldSystemMetaDataProcessingResolution* SetMetaDataaProcessingResolutionType(byte ResolutionType);// 0x27ee58ebd041 0x7e618d8820

--------------------------------
Class: FieldSystemMetaDataFilter.FieldSystemMetaData.ActorComponent.Object
	byte FilterType;//[Offset: 0xb0, Size: 0x1] 0x7e61907e00
	byte ObjectType;//[Offset: 0xb1, Size: 0x1] 0x7e61907e80
	byte PositionType;//[Offset: 0xb2, Size: 0x1] 0x7e61907f00
	FieldSystemMetaDataFilter* SetMetaDataFilterType(byte FilterType, byte ObjectType, byte PositionType);// 0x27ef58ebd041 0x7e618d8740

--------------------------------
Class: FieldNodeInt.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeFloat.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeVector.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: UniformInteger.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	int Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e61907c80
	UniformInteger* SetUniformInteger(int Magnitude);// 0x27f058ebd041 0x7e618d8660

--------------------------------
Class: RadialIntMask.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	float Radius;//[Offset: 0xb0, Size: 0x4] 0x7e61907700
	Vector Position;//[Offset: 0xb8, Size: 0x18] 0x7e61907780
	int InteriorValue;//[Offset: 0xd0, Size: 0x4] 0x7e61907800
	int ExteriorValue;//[Offset: 0xd4, Size: 0x4] 0x7e61907880
	byte SetMaskCondition;//[Offset: 0xd8, Size: 0x1] 0x7e61907900
	RadialIntMask* SetRadialIntMask(float Radius, Vector Position, int InteriorValue, int ExteriorValue, byte SetMaskConditionIn);// 0x27f158ebd041 0x7e618d8580

--------------------------------
Class: UniformScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e61907580
	UniformScalar* SetUniformScalar(float Magnitude);// 0x27f258ebd041 0x7e618d84a0

--------------------------------
Class: WaveScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e61908f80
	Vector Position;//[Offset: 0xb8, Size: 0x18] 0x7e61909000
	float Wavelength;//[Offset: 0xd0, Size: 0x4] 0x7e61909080
	float Period;//[Offset: 0xd4, Size: 0x4] 0x7e61909100
	byte Function;//[Offset: 0xd8, Size: 0x1] 0x7e61909180
	byte Falloff;//[Offset: 0xd9, Size: 0x1] 0x7e61909200
	WaveScalar* SetWaveScalar(float Magnitude, Vector Position, float Wavelength, float Period, float Time, byte Function, byte Falloff);// 0x27f358ebd041 0x7e618d83c0

--------------------------------
Class: RadialFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e61908800
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x7e61908880
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x7e61908900
	float Default;//[Offset: 0xbc, Size: 0x4] 0x7e61908980
	float Radius;//[Offset: 0xc0, Size: 0x4] 0x7e61908a00
	Vector Position;//[Offset: 0xc8, Size: 0x18] 0x7e61908a80
	byte Falloff;//[Offset: 0xe0, Size: 0x1] 0x7e61908b00
	RadialFalloff* SetRadialFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Radius, Vector Position, byte Falloff);// 0x27f458ebd041 0x7e618d82e0

--------------------------------
Class: PlaneFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e6190a080
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x7e6190a100
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x7e6190a180
	float Default;//[Offset: 0xbc, Size: 0x4] 0x7e6190a200
	float Distance;//[Offset: 0xc0, Size: 0x4] 0x7e6190a280
	Vector Position;//[Offset: 0xc8, Size: 0x18] 0x7e6190a300
	Vector Normal;//[Offset: 0xe0, Size: 0x18] 0x7e6190a380
	byte Falloff;//[Offset: 0xf8, Size: 0x1] 0x7e6190a400
	PlaneFalloff* SetPlaneFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Distance, Vector Position, Vector Normal, byte Falloff);// 0x27f558ebd041 0x7e618d8200

--------------------------------
Class: BoxFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e61909a00
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x7e61909a80
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x7e61909b00
	float Default;//[Offset: 0xbc, Size: 0x4] 0x7e61909b80
	Transform Transform;//[Offset: 0xc0, Size: 0x60] 0x7e61909c00
	byte Falloff;//[Offset: 0x120, Size: 0x1] 0x7e61909c80
	BoxFalloff* SetBoxFalloff(float Magnitude, float MinRange, float MaxRange, float Default, Transform Transform, byte Falloff);// 0x27f658ebd041 0x7e618d8120

--------------------------------
Class: NoiseField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float MinRange;//[Offset: 0xb0, Size: 0x4] 0x7e61909680
	float MaxRange;//[Offset: 0xb4, Size: 0x4] 0x7e61909700
	Transform Transform;//[Offset: 0xc0, Size: 0x60] 0x7e61909780
	NoiseField* SetNoiseField(float MinRange, float MaxRange, Transform Transform);// 0x27f758ebd041 0x7e618d8040

--------------------------------
Class: UniformVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e6190b500
	Vector Direction;//[Offset: 0xb8, Size: 0x18] 0x7e6190b580
	UniformVector* SetUniformVector(float Magnitude, Vector Direction);// 0x27f858ebd041 0x7e618d7f60

--------------------------------
Class: RadialVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e6190b280
	Vector Position;//[Offset: 0xb8, Size: 0x18] 0x7e6190b300
	RadialVector* SetRadialVector(float Magnitude, Vector Position);// 0x27f958ebd041 0x7e618d7e80

--------------------------------
Class: RandomVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e6190b100
	RandomVector* SetRandomVector(float Magnitude);// 0x27fa58ebd041 0x7e618d7da0

--------------------------------
Class: OperatorField.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x7e6190ac80
	FieldNodeBase* RightField;//[Offset: 0xb8, Size: 0x8] 0x7e6190ad00
	FieldNodeBase* LeftField;//[Offset: 0xc0, Size: 0x8] 0x7e6190ad80
	byte Operation;//[Offset: 0xc8, Size: 0x1] 0x7e6190ae00
	OperatorField* SetOperatorField(float Magnitude, const FieldNodeBase* LeftField, const FieldNodeBase* RightField, byte Operation);// 0x27fb58ebd041 0x7e618d7cc0

--------------------------------
Class: ToIntegerField.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	FieldNodeFloat* FloatField;//[Offset: 0xb0, Size: 0x8] 0x7e6190ab00
	ToIntegerField* SetToIntegerField(const FieldNodeFloat* FloatField);// 0x27fc58ebd041 0x7e618d7be0

--------------------------------
Class: ToFloatField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	FieldNodeInt* IntField;//[Offset: 0xb0, Size: 0x8] 0x7e6190a980
	ToFloatField* SetToFloatField(const FieldNodeInt* IntegerField);// 0x27fd58ebd041 0x7e618d7b00

--------------------------------
Class: CullingField.FieldNodeBase.ActorComponent.Object
	FieldNodeBase* Culling;//[Offset: 0xb0, Size: 0x8] 0x7e6190a600
	FieldNodeBase* Field;//[Offset: 0xb8, Size: 0x8] 0x7e6190a680
	byte Operation;//[Offset: 0xc0, Size: 0x1] 0x7e6190a700
	CullingField* SetCullingField(const FieldNodeBase* Culling, const FieldNodeBase* Field, byte Operation);// 0x27fe58ebd041 0x7e618d7a20

--------------------------------
Class: ReturnResultsTerminal.FieldNodeBase.ActorComponent.Object
	ReturnResultsTerminal* SetReturnResultsTerminal();// 0x27ff58ebd041 0x7e618d7940

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10] 0x7e61899d40

--------------------------------
Class: NetAnalyticsDataConfig
	FName DataName;//[Offset: 0x0, Size: 0x8] 0x7e615a5780
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7e615a5800

--------------------------------
Class: ChaosDestructionListener.SceneComponent.ActorComponent.Object
	bool bIsCollisionEventListeningEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1] 0x7e6190d400
	bool bIsBreakingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1] 0x7e6190d480
	bool bIsTrailingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1] 0x7e6190d500
	bool bIsRemovalEventListeningEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1] 0x7e6190d580
	ChaosCollisionEventRequestSettings CollisionEventRequestSettings;//[Offset: 0x2b4, Size: 0x18] 0x7e6190d600
	ChaosBreakingEventRequestSettings BreakingEventRequestSettings;//[Offset: 0x2cc, Size: 0x18] 0x7e6190d680
	ChaosTrailingEventRequestSettings TrailingEventRequestSettings;//[Offset: 0x2e4, Size: 0x18] 0x7e6190b600
	ChaosRemovalEventRequestSettings RemovalEventRequestSettings;//[Offset: 0x2fc, Size: 0x10] 0x7e6190b680
	<ChaosSolverActor*> ChaosSolverActors;//[Offset: 0x310, Size: 0x50] 0x7e61899700
	<GeometryCollectionActor*> GeometryCollectionActors;//[Offset: 0x360, Size: 0x50] 0x7e618997a0
	delegate OnCollisionEvents;//[Offset: 0x3b0, Size: 0x10] 0x7e6190b800
	delegate OnBreakingEvents;//[Offset: 0x3c0, Size: 0x10] 0x7e6190b880
	delegate OnTrailingEvents;//[Offset: 0x3d0, Size: 0x10] 0x7e6190b900
	delegate OnRemovalEvents;//[Offset: 0x3e0, Size: 0x10] 0x7e6190b980
	void SortTrailingEvents(out ChaosTrailingEventData[] TrailingEvents, enum SortMethod);// 0x281058ebd041 0x7e618da420
	void SortRemovalEvents(out ChaosRemovalEventData[] RemovalEvents, enum SortMethod);// 0x280f58ebd041 0x7e618da500
	void SortCollisionEvents(out ChaosCollisionEventData[] CollisionEvents, enum SortMethod);// 0x280e58ebd041 0x7e618da5e0
	void SortBreakingEvents(out ChaosBreakingEventData[] BreakingEvents, enum SortMethod);// 0x280d58ebd041 0x7e618da6c0
	void SetTrailingEventRequestSettings(out const ChaosTrailingEventRequestSettings InSettings);// 0x280c58ebd041 0x7e618da7a0
	void SetTrailingEventEnabled(bool bIsEnabled);// 0x280b58ebd041 0x7e618da880
	void SetRemovalEventRequestSettings(out const ChaosRemovalEventRequestSettings InSettings);// 0x280a58ebd041 0x7e618da960
	void SetRemovalEventEnabled(bool bIsEnabled);// 0x280958ebd041 0x7e618daa40
	void SetCollisionEventRequestSettings(out const ChaosCollisionEventRequestSettings InSettings);// 0x280858ebd041 0x7e618dab20
	void SetCollisionEventEnabled(bool bIsEnabled);// 0x280758ebd041 0x7e618dac00
	void SetBreakingEventRequestSettings(out const ChaosBreakingEventRequestSettings InSettings);// 0x284858ebd041 0x7e618dace0
	void SetBreakingEventEnabled(bool bIsEnabled);// 0x280558ebd041 0x7e618d7400
	void RemoveGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x280458ebd041 0x7e618d74e0
	void RemoveChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x280358ebd041 0x7e618d75c0
	bool IsEventListening();// 0x280258ebd041 0x7e618d76a0
	void AddGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x280158ebd041 0x7e618d7780
	void AddChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x280058ebd041 0x7e618d7860

--------------------------------
Class: ChaosCollisionEventRequestSettings
	int MaxNumberResults;//[Offset: 0x0, Size: 0x4] 0x7e615a6f80
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7e615a7000
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7e615a7080
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x7e615a7100
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x7e615a7180
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x7e84ddb6e0

--------------------------------
Class: ChaosBreakingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4] 0x7e615a7280
	float MinRadius;//[Offset: 0x4, Size: 0x4] 0x7e615a7300
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7e615a7380
	float MinMass;//[Offset: 0xc, Size: 0x4] 0x7e615a5300
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x7e615a5380
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x7e84ddb640

--------------------------------
Class: ChaosTrailingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4] 0x7e615a6a80
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7e615a6b00
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7e615a6b80
	float MinAngularSpeed;//[Offset: 0xc, Size: 0x4] 0x7e615a6c00
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x7e615a6c80
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x7e84ddb820

--------------------------------
Class: ChaosRemovalEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4] 0x7e615a6d80
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7e615a6e00
	float MaxDistance;//[Offset: 0x8, Size: 0x4] 0x7e615a6e80
	enum SortMethod;//[Offset: 0xc, Size: 0x1] 0x7e84ddb780

--------------------------------
Class: ChaosTrailingEventData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61404f00
	Vector Velocity;//[Offset: 0x18, Size: 0x18] 0x7e61404f80
	Vector AngularVelocity;//[Offset: 0x30, Size: 0x18] 0x7e61405000
	float Mass;//[Offset: 0x48, Size: 0x4] 0x7e61405080
	int ParticleIndex;//[Offset: 0x4c, Size: 0x4] 0x7e61405100

--------------------------------
Class: ChaosRemovalEventData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61405280
	float Mass;//[Offset: 0x18, Size: 0x4] 0x7e61403200
	int ParticleIndex;//[Offset: 0x1c, Size: 0x4] 0x7e61403280

--------------------------------
Class: ChaosCollisionEventData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61403580
	Vector Normal;//[Offset: 0x18, Size: 0x18] 0x7e61403600
	Vector Velocity1;//[Offset: 0x30, Size: 0x18] 0x7e61403680
	Vector Velocity2;//[Offset: 0x48, Size: 0x18] 0x7e61403700
	float Mass1;//[Offset: 0x60, Size: 0x4] 0x7e61403780
	float Mass2;//[Offset: 0x64, Size: 0x4] 0x7e61403800
	Vector Impulse;//[Offset: 0x68, Size: 0x18] 0x7e61403880

--------------------------------
Class: ChaosBreakingEventData
	Vector Location;//[Offset: 0x0, Size: 0x18] 0x7e61403980
	Vector Velocity;//[Offset: 0x18, Size: 0x18] 0x7e61403a00
	float Mass;//[Offset: 0x30, Size: 0x4] 0x7e61403a80

--------------------------------
Class: AnimationStateMachineLibrary.BlueprintFunctionLibrary.Object
	bool IsStateBlendingOut(out const AnimUpdateContext UpdateContext, out const AnimationStateResultReference Node);// 0x281558ebd041 0x7e618d9fc0
	bool IsStateBlendingIn(out const AnimUpdateContext UpdateContext, out const AnimationStateResultReference Node);// 0x281458ebd041 0x7e618da0a0
	void ConvertToAnimationStateResultPure(out const AnimNodeReference Node, out AnimationStateResultReference AnimationState, out bool Result);// 0x281358ebd041 0x7e618da180
	void ConvertToAnimationStateResult(out const AnimNodeReference Node, out AnimationStateResultReference AnimationState, out enum Result);// 0x281258ebd041 0x7e618da260

--------------------------------
Class: AnimUpdateContext.AnimExecutionContext

--------------------------------
Class: AnimExecutionContext

--------------------------------
Class: AnimationStateResultReference.AnimNodeReference

--------------------------------
Class: AnimNodeReference

--------------------------------
Class: AnimExecutionContextLibrary.BlueprintFunctionLibrary.Object
	float GetDeltaTime(out const AnimUpdateContext Context);// 0x281d58ebd041 0x7e618d98c0
	float GetCurrentWeight(out const AnimUpdateContext Context);// 0x281c58ebd041 0x7e618d99a0
	AnimNodeReference GetAnimNodeReference(AnimInstance* Instance, int Index);// 0x281b58ebd041 0x7e618d9a80
	AnimInstance* GetAnimInstance(out const AnimExecutionContext Context);// 0x281a58ebd041 0x7e618d9b60
	AnimUpdateContext ConvertToUpdateContext(out const AnimExecutionContext Context, out enum Result);// 0x281958ebd041 0x7e618d9c40
	AnimPoseContext ConvertToPoseContext(out const AnimExecutionContext Context, out enum Result);// 0x281858ebd041 0x7e618d9d20
	AnimInitializationContext ConvertToInitializationContext(out const AnimExecutionContext Context, out enum Result);// 0x281758ebd041 0x7e618d9e00
	AnimComponentSpacePoseContext ConvertToComponentSpacePoseContext(out const AnimExecutionContext Context, out enum Result);// 0x281658ebd041 0x7e618d9ee0

--------------------------------
Class: AnimPoseContext.AnimExecutionContext

--------------------------------
Class: AnimInitializationContext.AnimExecutionContext

--------------------------------
Class: AnimComponentSpacePoseContext.AnimExecutionContext

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x38, Size: 0x8] 0x7e61910480

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object
	FName NotifyName;//[Offset: 0x2c, Size: 0x8] 0x7e61910400

--------------------------------
Class: AnimSequencerInstance.AnimInstance.Object

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0x282858ebd041 0x7e618dc8e0
	void K2_StartProfilingTimer();// 0x286958ebd041 0x7e618dc9c0
	Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0x282658ebd041 0x7e618d90e0
	float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0x282558ebd041 0x7e618d91c0
	Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0x282458ebd041 0x7e618d92a0
	float K2_EndProfilingTimer(bool bLog, FString LogPrefix);// 0x282358ebd041 0x7e618d9380
	float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0x282258ebd041 0x7e618d9460
	Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0x282158ebd041 0x7e618d9540
	float K2_CalculateVelocityFromSockets(float DeltaSeconds, SkeletalMeshComponent* Component, const FName SocketOrBoneName, const FName ReferenceSocketOrBone, byte SocketSpace, Vector OffsetInBoneSpace, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax, enum EasingType, out const RuntimeFloatCurve CustomCurve);// 0x282058ebd041 0x7e618d9620
	float K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, Vector Position, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax);// 0x281f58ebd041 0x7e618d9700
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x281e58ebd041 0x7e618d97e0

--------------------------------
Class: PositionHistory
	Vector[] Positions;//[Offset: 0x0, Size: 0x10] 0x7e84dd6960
	float Range;//[Offset: 0x10, Size: 0x4] 0x7e615b7c80

--------------------------------
Class: LinkedAnimGraphLibrary.BlueprintFunctionLibrary.Object
	bool HasLinkedAnimInstance(out const LinkedAnimGraphReference Node);// 0x282c58ebd041 0x7e618dc560
	AnimInstance* GetLinkedAnimInstance(out const LinkedAnimGraphReference Node);// 0x282b58ebd041 0x7e618dc640
	void ConvertToLinkedAnimGraphPure(out const AnimNodeReference Node, out LinkedAnimGraphReference LinkedAnimGraph, out bool Result);// 0x282a58ebd041 0x7e618dc720
	LinkedAnimGraphReference ConvertToLinkedAnimGraph(out const AnimNodeReference Node, out enum Result);// 0x282958ebd041 0x7e618dc800

--------------------------------
Class: LinkedAnimGraphReference.AnimNodeReference

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10] 0x7e61913480
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10] 0x7e61913500
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10] 0x7e61913580
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10] 0x7e61913600
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10] 0x7e61913680
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x283158ebd041 0x7e618dc100
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x283058ebd041 0x7e618dc1e0
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x282f58ebd041 0x7e618dc2c0
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x282e58ebd041 0x7e618dc3a0
	PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0x282d58ebd041 0x7e618dc480

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: SequenceEvaluatorLibrary.BlueprintFunctionLibrary.Object
	SequenceEvaluatorReference SetSequenceWithInertialBlending(out const AnimUpdateContext UpdateContext, out const SequenceEvaluatorReference SequenceEvaluator, AnimSequenceBase* Sequence, float BlendTime);// 0x283958ebd041 0x7e618dba00
	SequenceEvaluatorReference SetSequence(out const SequenceEvaluatorReference SequenceEvaluator, AnimSequenceBase* Sequence);// 0x283858ebd041 0x7e618dbae0
	SequenceEvaluatorReference SetExplicitTime(out const SequenceEvaluatorReference SequenceEvaluator, float Time);// 0x283758ebd041 0x7e618dbbc0
	AnimSequenceBase* GetSequence(out const SequenceEvaluatorReference SequenceEvaluator);// 0x283658ebd041 0x7e618dbca0
	float GetAccumulatedTime(out const SequenceEvaluatorReference SequenceEvaluator);// 0x283558ebd041 0x7e618dbd80
	void ConvertToSequenceEvaluatorPure(out const AnimNodeReference Node, out SequenceEvaluatorReference SequenceEvaluator, out bool Result);// 0x283458ebd041 0x7e618dbe60
	SequenceEvaluatorReference ConvertToSequenceEvaluator(out const AnimNodeReference Node, out enum Result);// 0x283358ebd041 0x7e618dbf40
	SequenceEvaluatorReference AdvanceTime(out const AnimUpdateContext UpdateContext, out const SequenceEvaluatorReference SequenceEvaluator, float PlayRate);// 0x283258ebd041 0x7e618dc020

--------------------------------
Class: SequenceEvaluatorReference.AnimNodeReference

--------------------------------
Class: SequencePlayerLibrary.BlueprintFunctionLibrary.Object
	SequencePlayerReference SetStartPosition(out const SequencePlayerReference SequencePlayer, float StartPosition);// 0x284658ebd041 0x7e618daea0
	SequencePlayerReference SetSequenceWithInertialBlending(out const AnimUpdateContext UpdateContext, out const SequencePlayerReference SequencePlayer, AnimSequenceBase* Sequence, float BlendTime);// 0x284558ebd041 0x7e618daf80
	SequencePlayerReference SetSequence(out const SequencePlayerReference SequencePlayer, AnimSequenceBase* Sequence);// 0x284458ebd041 0x7e618db060
	SequencePlayerReference SetPlayRate(out const SequencePlayerReference SequencePlayer, float PlayRate);// 0x284358ebd041 0x7e618db140
	SequencePlayerReference SetAccumulatedTime(out const SequencePlayerReference SequencePlayer, float Time);// 0x284258ebd041 0x7e618db220
	float GetStartPosition(out const SequencePlayerReference SequencePlayer);// 0x284158ebd041 0x7e618db300
	AnimSequenceBase* GetSequencePure(out const SequencePlayerReference SequencePlayer);// 0x284058ebd041 0x7e618db3e0
	SequencePlayerReference GetSequence(out const SequencePlayerReference SequencePlayer, out AnimSequenceBase* SequenceBase);// 0x283f58ebd041 0x7e618db4c0
	float GetPlayRate(out const SequencePlayerReference SequencePlayer);// 0x283e58ebd041 0x7e618db5a0
	bool GetLoopAnimation(out const SequencePlayerReference SequencePlayer);// 0x283d58ebd041 0x7e618db680
	float GetAccumulatedTime(out const SequencePlayerReference SequencePlayer);// 0x283c58ebd041 0x7e618db760
	void ConvertToSequencePlayerPure(out const AnimNodeReference Node, out SequencePlayerReference SequencePlayer, out bool Result);// 0x283b58ebd041 0x7e618db840
	SequencePlayerReference ConvertToSequencePlayer(out const AnimNodeReference Node, out enum Result);// 0x283a58ebd041 0x7e618db920

--------------------------------
Class: SequencePlayerReference.AnimNodeReference

--------------------------------
Class: SequencerAnimationSupport.Interface.Object

--------------------------------
Class: SkeletalControlLibrary.BlueprintFunctionLibrary.Object
	SkeletalControlReference SetAlpha(out const SkeletalControlReference SkeletalControl, float Alpha);// 0x284a58ebd041 0x7e618de4e0
	float GetAlpha(out const SkeletalControlReference SkeletalControl);// 0x284958ebd041 0x7e618de5c0
	void ConvertToSkeletalControlPure(out const AnimNodeReference Node, out SkeletalControlReference SkeletalControl, out bool Result);// 0x288558ebd041 0x7e618de6a0
	SkeletalControlReference ConvertToSkeletalControl(out const AnimNodeReference Node, out enum Result);// 0x284758ebd041 0x7e618dadc0

--------------------------------
Class: SkeletalControlReference.AnimNodeReference

--------------------------------
Class: AudioCodecEncoderSettings.Object
	int Version;//[Offset: 0x28, Size: 0x4] 0x7e61916800

--------------------------------
Class: DummyEndpointSettings.AudioEndpointSettingsBase.Object

--------------------------------
Class: AudioPcmEncoderSettings.AudioCodecEncoderSettings.Object
	enum BitDepthConversion;//[Offset: 0x2c, Size: 0x1] 0x7e6189b140

--------------------------------
Class: ByteChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: DoubleChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: FloatChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object
	Transform BP_GetTransformOrigin();// 0x285858ebd041 0x7e618dd8a0

--------------------------------
Class: IntegerChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid ConstraintId;//[Offset: 0xdc, Size: 0x10] 0x7e61916480
	MovieSceneObjectBindingID ConstraintBindingID;//[Offset: 0xec, Size: 0x18] 0x7e61916500
	void SetConstraintBindingID(out const MovieSceneObjectBindingID InConstraintBindingID);// 0x285a58ebd041 0x7e618dd6e0
	MovieSceneObjectBindingID GetConstraintBindingID();// 0x285958ebd041 0x7e618dd7c0

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	FName AttachSocketName;//[Offset: 0x110, Size: 0x8] 0x7e61918180
	FName AttachComponentName;//[Offset: 0x118, Size: 0x8] 0x7e61918200
	enum AttachmentLocationRule;//[Offset: 0x120, Size: 0x1] 0x7e6189ad80
	enum AttachmentRotationRule;//[Offset: 0x121, Size: 0x1] 0x7e6189ae20
	enum AttachmentScaleRule;//[Offset: 0x122, Size: 0x1] 0x7e6189aec0
	enum DetachmentLocationRule;//[Offset: 0x123, Size: 0x1] 0x7e6189af60
	enum DetachmentRotationRule;//[Offset: 0x124, Size: 0x1] 0x7e6189b000
	enum DetachmentScaleRule;//[Offset: 0x125, Size: 0x1] 0x7e6189b0a0

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x90, Size: 0x10] 0x7e6189ace0

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TimingCurve;//[Offset: 0x108, Size: 0xe8] 0x7e61917e00
	enum FrontAxisEnum;//[Offset: 0x1f0, Size: 0x1] 0x7e6189aba0
	enum UpAxisEnum;//[Offset: 0x1f1, Size: 0x1] 0x7e6189ac40
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f2, Size: 0x1] 0x7e61917f80
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1] 0x7e61918000
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1] 0x7e61918080

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScenePropertySystem.MovieSceneEntitySystem.Object
	MovieScenePropertyInstantiatorSystem* InstantiatorSystem;//[Offset: 0x48, Size: 0x8] 0x7e61917d80

--------------------------------
Class: MovieScenePropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4] 0x7e61917a80
	MovieSceneDoubleChannel Translation;//[Offset: 0xf0, Size: 0xf0] 0x7e61917b00
	MovieSceneDoubleChannel Rotation;//[Offset: 0x3c0, Size: 0xf0] 0x7e61917b80
	MovieSceneDoubleChannel Scale;//[Offset: 0x690, Size: 0xf0] 0x7e61917c00
	MovieSceneFloatChannel ManualWeight;//[Offset: 0x960, Size: 0xe8] 0x7e61917c80
	bool bUseQuaternionInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 0x1] 0x7e61917d00

--------------------------------
Class: MovieSceneDoubleChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x50, Size: 0x1] 0x7e6157ed00
	byte PostInfinityExtrap;//[Offset: 0x51, Size: 0x1] 0x7e6157ed80
	FrameNumber[] Times;//[Offset: 0x58, Size: 0x10] 0x7e84ddf880
	MovieSceneDoubleValue[] Values;//[Offset: 0x68, Size: 0x10] 0x7e84ddf7e0
	double DefaultValue;//[Offset: 0x78, Size: 0x8] 0x7e6157ef00
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7e6157ef80
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x88, Size: 0x60] 0x7e6157f000
	FrameRate TickResolution;//[Offset: 0xe8, Size: 0x8] 0x7e6157f080

--------------------------------
Class: MovieSceneDoubleValue
	double Value;//[Offset: 0x0, Size: 0x8] 0x7e6157f100
	MovieSceneTangentData Tangent;//[Offset: 0x8, Size: 0x14] 0x7e6157f180
	byte InterpMode;//[Offset: 0x1c, Size: 0x1] 0x7e6157f200
	byte TangentMode;//[Offset: 0x1d, Size: 0x1] 0x7e6157f280
	byte PaddingByte;//[Offset: 0x1e, Size: 0x1] 0x7e6157f300

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneActorReferenceData ActorReferenceData;//[Offset: 0xe0, Size: 0xf8] 0x7e61917900
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x1d8, Size: 0x80] 0x7e61917980
	FString[] ActorGuidStrings;//[Offset: 0x258, Size: 0x10] 0x7e6189ab00

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x50, Size: 0x10] 0x7e84dd7220
	MovieSceneActorReferenceKey DefaultValue;//[Offset: 0x60, Size: 0x28] 0x7e615b8580
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x88, Size: 0x10] 0x7e84dd7180

--------------------------------
Class: MovieSceneActorReferenceKey
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18] 0x7e615b8680
	FName ComponentName;//[Offset: 0x18, Size: 0x8] 0x7e615b8700
	FName SocketName;//[Offset: 0x20, Size: 0x8] 0x7e615b8780

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x7e84e5b1e0
	int DefaultValue;//[Offset: 0x78, Size: 0x4] 0x7e61645400
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7e61645480

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61645500
	int Value;//[Offset: 0x4, Size: 0x4] 0x7e61645580

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object
	SoundBase* Sound;//[Offset: 0xe0, Size: 0x8] 0x7e61918b00
	FrameNumber StartFrameOffset;//[Offset: 0xe8, Size: 0x4] 0x7e61918b80
	float StartOffset;//[Offset: 0xec, Size: 0x4] 0x7e61918c00
	float AudioStartTime;//[Offset: 0xf0, Size: 0x4] 0x7e61918c80
	float AudioDilationFactor;//[Offset: 0xf4, Size: 0x4] 0x7e61918d00
	float AudioVolume;//[Offset: 0xf8, Size: 0x4] 0x7e61918d80
	MovieSceneFloatChannel SoundVolume;//[Offset: 0x100, Size: 0xe8] 0x7e61918e00
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x1e8, Size: 0xe8] 0x7e61918e80
	<FName,MovieSceneFloatChannel> Inputs_Float;//[Offset: 0x2d0, Size: 0x50] 0x7e6167d840
	<FName,MovieSceneStringChannel> Inputs_String;//[Offset: 0x320, Size: 0x50] 0x7e6167d900
	<FName,MovieSceneBoolChannel> Inputs_Bool;//[Offset: 0x370, Size: 0x50] 0x7e6167d9c0
	<FName,MovieSceneIntegerChannel> Inputs_Int;//[Offset: 0x3c0, Size: 0x50] 0x7e6167da80
	<FName,MovieSceneAudioTriggerChannel> Inputs_Trigger;//[Offset: 0x410, Size: 0x50] 0x7e6167db40
	MovieSceneActorReferenceData AttachActorData;//[Offset: 0x460, Size: 0xf8] 0x7e61919400
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1] 0x7e61919480
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 0x1] 0x7e61917400
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 0x1] 0x7e61917480
	SoundAttenuation* AttenuationSettings;//[Offset: 0x560, Size: 0x8] 0x7e61917500
	delegate OnQueueSubtitles;//[Offset: 0x568, Size: 0x10] 0x7e61917580
	delegate OnAudioFinished;//[Offset: 0x578, Size: 0x10] 0x7e61917600
	delegate OnAudioPlaybackPercent;//[Offset: 0x588, Size: 0x10] 0x7e61917680
	void SetStartOffset(FrameNumber InStartOffset);// 0x285e58ebd041 0x7e618dd360
	void SetSound(SoundBase* InSound);// 0x285d58ebd041 0x7e618dd440
	FrameNumber GetStartOffset();// 0x285c58ebd041 0x7e618dd520
	SoundBase* GetSound();// 0x285b58ebd041 0x7e618dd600

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x7e84dd7c20
	FString[] Values;//[Offset: 0x60, Size: 0x10] 0x7e84dda4c0
	FString DefaultValue;//[Offset: 0x70, Size: 0x10] 0x7e615ba900
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7e615ba980

--------------------------------
Class: MovieSceneAudioTriggerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x7e84ddc680
	bool[] Values;//[Offset: 0x60, Size: 0x10] 0x7e84ddc5e0

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AudioSections;//[Offset: 0x98, Size: 0x10] 0x7e6189aa60

--------------------------------
Class: MovieSceneBaseValueEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneBytePropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel ByteCurve;//[Offset: 0xe8, Size: 0xe0] 0x7e61918a00

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xc0, Size: 0x8] 0x7e61918980

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xe0, Size: 0x20] 0x7e61918600
	CameraAnim* CameraAnim;//[Offset: 0x100, Size: 0x8] 0x7e61918680
	float PlayRate;//[Offset: 0x108, Size: 0x4] 0x7e61918700
	float PlayScale;//[Offset: 0x10c, Size: 0x4] 0x7e61918780
	float BlendInTime;//[Offset: 0x110, Size: 0x4] 0x7e61918800
	float BlendOutTime;//[Offset: 0x114, Size: 0x4] 0x7e61918880
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x7e61918900

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8] 0x7e615ba180
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7e615ba200
	float PlayScale;//[Offset: 0xc, Size: 0x4] 0x7e615ba280
	float BlendInTime;//[Offset: 0x10, Size: 0x4] 0x7e615ba300
	float BlendOutTime;//[Offset: 0x14, Size: 0x4] 0x7e615ba380
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e615ba400

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x98, Size: 0x10] 0x7e6189a9c0

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bLockPreviousCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x7e6191a300
	Guid CameraGuid;//[Offset: 0xec, Size: 0x10] 0x7e6191a380
	MovieSceneObjectBindingID CameraBindingID;//[Offset: 0xfc, Size: 0x18] 0x7e6191a400
	Transform InitialCameraCutTransform;//[Offset: 0x120, Size: 0x60] 0x7e6191a480
	bool bHasInitialCameraCutTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1] 0x7e6191a500
	void SetCameraBindingID(out const MovieSceneObjectBindingID InCameraBindingID);// 0x286058ebd041 0x7e618dd1a0
	MovieSceneObjectBindingID GetCameraBindingID();// 0x285f58ebd041 0x7e618dd280

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bCanBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7e6191a200
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10] 0x7e6189a920

--------------------------------
Class: MovieSceneCameraCutTrackInstance.MovieSceneTrackInstance.Object

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x28] 0x7e6191a000
	class CameraShakeBase* ShakeClass;//[Offset: 0x108, Size: 0x8] 0x7e6189a7e0
	float PlayScale;//[Offset: 0x110, Size: 0x4] 0x7e6191a080
	enum PlaySpace;//[Offset: 0x114, Size: 0x1] 0x7e6189a880
	Rotator UserDefinedPlaySpace;//[Offset: 0x118, Size: 0x18] 0x7e6191a180

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x7e84ddc860
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x7e615b9f00
	enum PlaySpace;//[Offset: 0xc, Size: 0x1] 0x7e84dd72c0
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0x18] 0x7e615ba000

--------------------------------
Class: MovieSceneCameraShakeSourceShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x28] 0x7e61919f80

--------------------------------
Class: MovieSceneCameraShakeSourceShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x98, Size: 0x10] 0x7e6189a740

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSourceTriggerChannel Channel;//[Offset: 0xe0, Size: 0xd0] 0x7e61919e80

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x50, Size: 0x10] 0x7e84dd9fc0
	MovieSceneCameraShakeSourceTrigger[] KeyValues;//[Offset: 0x60, Size: 0x10] 0x7e84dd9f20

--------------------------------
Class: MovieSceneCameraShakeSourceTrigger
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x7e84dd9e80
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x7e615b9c00
	enum PlaySpace;//[Offset: 0xc, Size: 0x1] 0x7e84dd9de0
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0x18] 0x7e615b9d00

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10] 0x7e6189a6a0

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x98, Size: 0x10] 0x7e6189a600

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString ShotDisplayName;//[Offset: 0x118, Size: 0x10] 0x7e61919b80
	FText DisplayName;//[Offset: 0x128, Size: 0x18] 0x7e61919c00
	void SetShotDisplayName(FString InShotDisplayName);// 0x286258ebd041 0x7e618dcfe0
	FString GetShotDisplayName();// 0x286158ebd041 0x7e618dd0c0

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneColorPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel RedCurve;//[Offset: 0xe8, Size: 0xe8] 0x7e61919980
	MovieSceneFloatChannel GreenCurve;//[Offset: 0x1d0, Size: 0xe8] 0x7e61919a00
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x2b8, Size: 0xe8] 0x7e61919a80
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x3a0, Size: 0xe8] 0x7e61919b00

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7e61919900

--------------------------------
Class: MovieSceneComponentAttachmentInvalidatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentAttachmentSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentMobilitySystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentTransformSystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneCVarSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCVarOverrides ConsoleVariables;//[Offset: 0xe8, Size: 0x50] 0x7e61919780
	void SetFromString(FString InString);// 0x286458ebd041 0x7e618dce20
	FString GetString();// 0x286358ebd041 0x7e618dcf00

--------------------------------
Class: MovieSceneCVarOverrides
	<FString,FString> ValuesByCVar;//[Offset: 0x0, Size: 0x50] 0x7e6159c1c0

--------------------------------
Class: MovieSceneCVarTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7e6189a560

--------------------------------
Class: MovieSceneCVarTrackInstance.MovieSceneTrackInstance.Object

--------------------------------
Class: MovieSceneDataLayerSection.MovieSceneSection.MovieSceneSignedObject.Object
	ActorDataLayer[] DataLayers;//[Offset: 0xe8, Size: 0x10] 0x7e6189c900
	enum DesiredState;//[Offset: 0xf8, Size: 0x1] 0x7e6189c9a0
	enum PrerollState;//[Offset: 0xf9, Size: 0x1] 0x7e6189ca40
	bool bFlushOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1] 0x7e6191b380
	void SetPrerollState(enum InPrerollState);// 0x286c58ebd041 0x7e618dfc80
	void SetFlushOnUnload(bool bFlushOnUnload);// 0x286b58ebd041 0x7e618dfd60
	void SetDesiredState(enum InDesiredState);// 0x286a58ebd041 0x7e618dfe40
	void SetDataLayers(out const ActorDataLayer[] InDataLayers);// 0xffffff8158ebd000 0x7e618dff20
	enum GetPrerollState();// 0x286858ebd041 0x7e618dcaa0
	bool GetFlushOnUnload();// 0x286758ebd041 0x7e618dcb80
	enum GetDesiredState();// 0x286658ebd041 0x7e618dcc60
	ActorDataLayer[] GetDataLayers();// 0x286558ebd041 0x7e618dcd40

--------------------------------
Class: MovieSceneDataLayerSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDataLayerTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7e6189c860

--------------------------------
Class: MovieSceneDeferredComponentMovementSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDoublePropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDoubleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneDoubleChannel DoubleCurve;//[Offset: 0xe8, Size: 0xf0] 0x7e6191b100

--------------------------------
Class: MovieSceneDoubleTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEnumPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel EnumCurve;//[Offset: 0xe8, Size: 0xe0] 0x7e6191b080

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xc0, Size: 0x8] 0x7e6191b000

--------------------------------
Class: MovieSceneEulerTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0xe0, Size: 0x78] 0x7e6191ae80
	MovieSceneEventSectionData EventData;//[Offset: 0x158, Size: 0xd0] 0x7e6191af00

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x7e84e5bdc0

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7e61653f80
	FName Value;//[Offset: 0x4, Size: 0x8] 0x7e61654000

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10] 0x7e84dda420
	EventPayload[] KeyValues;//[Offset: 0x60, Size: 0x10] 0x7e84dda380

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x7e615bb300
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28] 0x7e615bb380

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostEvalEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFadeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xe8] 0x7e6191aa80
	LinearColor FadeColor;//[Offset: 0x1c8, Size: 0x10] 0x7e6191ab00
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 0x1] 0x7e6191ab80

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe8, Size: 0xe8] 0x7e6191aa00

--------------------------------
Class: MovieSceneHierarchicalBiasSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneInitialValueSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneIntegerChannel IntegerCurve;//[Offset: 0xe8, Size: 0xd8] 0x7e6191a980

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneInterrogatedPropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object
	enum Visibility;//[Offset: 0xe8, Size: 0x1] 0x7e6189c360
	FName[] LevelNames;//[Offset: 0xf0, Size: 0x10] 0x7e6189c400
	void SetVisibility(enum InVisibility);// 0x287058ebd041 0x7e618df900
	void SetLevelNames(out const FName[] InLevelNames);// 0x286f58ebd041 0x7e618df9e0
	enum GetVisibility();// 0x286e58ebd041 0x7e618dfac0
	FName[] GetLevelNames();// 0x286d58ebd041 0x7e618dfba0

--------------------------------
Class: MovieSceneLevelVisibilitySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7e6189c2c0

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7e6189c220

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MaterialParameterCollection* MPC;//[Offset: 0xa8, Size: 0x8] 0x7e6191c600

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xa8, Size: 0x4] 0x7e6191c580

--------------------------------
Class: MovieSceneMotionVectorSimulationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel ObjectChannel;//[Offset: 0xe0, Size: 0x108] 0x7e6191c500

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel
	ClassPtrProperty PropertyClass;//[Size: 0x8] 0x7e84ddd440
	FrameNumber[] Times;//[Offset: 0x58, Size: 0x10] 0x7e84ddd3a0
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x68, Size: 0x10] 0x7e84ddd6c0
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x78, Size: 0x30] 0x7e615a1880

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28] 0x7e615a1900
	Object* HardPtr;//[Offset: 0x28, Size: 0x8] 0x7e615a1980

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10] 0x7e6189c0e0

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xe0, Size: 0xe0] 0x7e6191c400

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x98, Size: 0x10] 0x7e6189c040

--------------------------------
Class: MovieScenePiecewiseBoolBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseByteBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseDoubleBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseEnumBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseFloatBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseIntegerBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneAsyncAction_SequencePrediction.BlueprintAsyncActionBase.Object
	delegate Result;//[Offset: 0x30, Size: 0x10] 0x7e6191b980
	delegate Failure;//[Offset: 0x40, Size: 0x10] 0x7e6191ba00
	MovieSceneSequencePlayer* SequencePlayer;//[Offset: 0x60, Size: 0x8] 0x7e6191ba80
	SceneComponent* SceneComponent;//[Offset: 0x68, Size: 0x8] 0x7e6191bb00
	MovieSceneAsyncAction_SequencePrediction* PredictWorldTransformAtTime(MovieSceneSequencePlayer* Player, SceneComponent* TargetComponent, float TimeInSeconds);// 0x287458ebd041 0x7e618df580
	MovieSceneAsyncAction_SequencePrediction* PredictWorldTransformAtFrame(MovieSceneSequencePlayer* Player, SceneComponent* TargetComponent, FrameTime FrameTime);// 0x287358ebd041 0x7e618df660
	MovieSceneAsyncAction_SequencePrediction* PredictLocalTransformAtTime(MovieSceneSequencePlayer* Player, SceneComponent* TargetComponent, float TimeInSeconds);// 0x287258ebd041 0x7e618df740
	MovieSceneAsyncAction_SequencePrediction* PredictLocalTransformAtFrame(MovieSceneSequencePlayer* Player, SceneComponent* TargetComponent, FrameTime FrameTime);// 0x287158ebd041 0x7e618df820

--------------------------------
Class: MovieScenePredictionSystem.MovieSceneEntitySystem.Object
	MovieSceneAsyncAction_SequencePrediction*[] PendingPredictions;//[Offset: 0xd0, Size: 0x10] 0x7e6189bf00
	MovieSceneAsyncAction_SequencePrediction*[] ProcessingPredictions;//[Offset: 0xe0, Size: 0x10] 0x7e6189bfa0

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xe0, Size: 0x108] 0x7e6191b800

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xc8, Size: 0x4] 0x7e6191b780

--------------------------------
Class: MovieSceneQuaternionInterpolationRotationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xe0, Size: 0x128] 0x7e6191cf00
	AnimSequence* AnimSequence;//[Offset: 0x208, Size: 0x8] 0x7e6191cf80
	AnimSequenceBase* Animation;//[Offset: 0x210, Size: 0x8] 0x7e6191d000
	float StartOffset;//[Offset: 0x218, Size: 0x4] 0x7e6191d080
	float EndOffset;//[Offset: 0x21c, Size: 0x4] 0x7e6191d100
	float PlayRate;//[Offset: 0x220, Size: 0x4] 0x7e6191d180
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1] 0x7e6191d200
	FName SlotName;//[Offset: 0x228, Size: 0x8] 0x7e6191d280
	Vector StartLocationOffset;//[Offset: 0x230, Size: 0x18] 0x7e6191d300
	Rotator StartRotationOffset;//[Offset: 0x248, Size: 0x18] 0x7e6191d380
	bool bMatchWithPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x7e6191d400
	FName MatchedBoneName;//[Offset: 0x264, Size: 0x8] 0x7e6191d480
	Vector MatchedLocationOffset;//[Offset: 0x270, Size: 0x18] 0x7e6191d500
	Rotator MatchedRotationOffset;//[Offset: 0x288, Size: 0x18] 0x7e6191d580
	bool bMatchTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x7e6191d600
	bool bMatchIncludeZHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1] 0x7e6191d680
	bool bMatchRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1] 0x7e6191b600
	bool bMatchRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3, Size: 0x1] 0x7e6191b680
	bool bMatchRotationRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1] 0x7e6191b700

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8] 0x7e615bc280
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x7e615bc300
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x7e615bc380
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x7e615bc400
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x7e615bc480
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7e615bc500
	FName SlotName;//[Offset: 0x1c, Size: 0x8] 0x7e615bc580
	MirrorDataTable* MirrorDataTable;//[Offset: 0x28, Size: 0x8] 0x7e615bc600
	MovieSceneFloatChannel Weight;//[Offset: 0x30, Size: 0xe8] 0x7e615ba580
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x7e615ba600
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x7e615ba680
	float StartOffset;//[Offset: 0x11c, Size: 0x4] 0x7e615ba700
	float EndOffset;//[Offset: 0x120, Size: 0x4] 0x7e615ba780

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10] 0x7e6189be60
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1] 0x7e6191cd80
	MovieSceneSkeletalAnimRootMotionTrackParams RootMotionParams;//[Offset: 0xb0, Size: 0x30] 0x7e6191ce00
	bool bBlendFirstChildOfRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7e6191ce80

--------------------------------
Class: MovieSceneSkeletalAnimRootMotionTrackParams

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xe8] 0x7e6191cc80

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneStringChannel StringCurve;//[Offset: 0xe0, Size: 0xe8] 0x7e6191cc00

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTransformOriginSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatVectorPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDoubleVectorPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFloatVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel Curves;//[Offset: 0xe8, Size: 0xe8] 0x7e6191cb00
	int ChannelsUsed;//[Offset: 0x488, Size: 0x4] 0x7e6191cb80

--------------------------------
Class: MovieSceneDoubleVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneDoubleChannel Curves;//[Offset: 0xe8, Size: 0xf0] 0x7e6191ca00
	int ChannelsUsed;//[Offset: 0x4a8, Size: 0x4] 0x7e6191ca80

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneHierarchicalEasingInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: WeightAndEasingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7e6191c700
	delegate OnFail;//[Offset: 0x40, Size: 0x10] 0x7e6191c780
	AsyncTaskDownloadImage* DownloadImage(FString URL);// 0x287558ebd041 0x7e618df4a0

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x10b758ebd041 0x7e61437160
	PanelSlot* GetContentSlot();// 0x10b658ebd041 0x7e61437240
	Widget* GetContent();// 0x10f858ebd041 0x7e61437320

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x13c, Size: 0x10] 0x7e6191df80
	byte HorizontalAlignment;//[Offset: 0x14c, Size: 0x1] 0x7e6191e000
	byte VerticalAlignment;//[Offset: 0x14d, Size: 0x1] 0x7e6191e080
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 0x1] 0x7e6191e100
	float BlurStrength;//[Offset: 0x150, Size: 0x4] 0x7e6191e180
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1] 0x7e6191e200
	int BlurRadius;//[Offset: 0x158, Size: 0x4] 0x7e6191e280
	Vector4 CornerRadius;//[Offset: 0x160, Size: 0x20] 0x7e6191e300
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x180, Size: 0xc0] 0x7e6191e380
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x287d58ebd041 0x7e618deda0
	void SetPadding(Margin InPadding);// 0x287c58ebd041 0x7e618dee80
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x287b58ebd041 0x7e618def60
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x287a58ebd041 0x7e618df040
	void SetCornerRadius(Vector4 InCornerRadius);// 0x287958ebd041 0x7e618df120
	void SetBlurStrength(float InStrength);// 0x287858ebd041 0x7e618df200
	void SetBlurRadius(int InBlurRadius);// 0x287758ebd041 0x7e618df2e0
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x287658ebd041 0x7e618df3c0

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7e6191db80
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7e6191dc00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7e6191dc80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x288058ebd041 0x7e618deb00
	void SetPadding(Margin InPadding);// 0x287f58ebd041 0x7e618debe0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x287e58ebd041 0x7e618decc0

--------------------------------
Class: BoolBinding.PropertyBinding.Object
	bool GetValue();// 0x288158ebd041 0x7e618dea20

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x139, Size: 0x1] 0x7e6191ed00
	byte VerticalAlignment;//[Offset: 0x13a, Size: 0x1] 0x7e6191ed80
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13b, Size: 0x1] 0x7e6191ee00
	LinearColor ContentColorAndOpacity;//[Offset: 0x13c, Size: 0x10] 0x7e6191ee80
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x14c, Size: 0x10] 0x7e6191ef00
	Margin Padding;//[Offset: 0x15c, Size: 0x10] 0x7e6191ef80
	SlateBrush Background;//[Offset: 0x170, Size: 0xc0] 0x7e6191f000
	delegate BackgroundDelegate;//[Offset: 0x230, Size: 0x10] 0x7e6191f080
	LinearColor BrushColor;//[Offset: 0x240, Size: 0x10] 0x7e6191f100
	delegate BrushColorDelegate;//[Offset: 0x250, Size: 0x10] 0x7e6191f180
	Vector2D DesiredSizeScale;//[Offset: 0x260, Size: 0x10] 0x7e6191f200
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x7e6191f280
	delegate OnMouseButtonDownEvent;//[Offset: 0x274, Size: 0x10] 0x7e6191f300
	delegate OnMouseButtonUpEvent;//[Offset: 0x284, Size: 0x10] 0x7e6191f380
	delegate OnMouseMoveEvent;//[Offset: 0x294, Size: 0x10] 0x7e6191f400
	delegate OnMouseDoubleClickEvent;//[Offset: 0x2a4, Size: 0x10] 0x7e6191f480
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x288c58ebd041 0x7e61841660
	void SetPadding(Margin InPadding);// 0x288b58ebd041 0x7e61841740
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x288a58ebd041 0x7e61841820
	void SetDesiredSizeScale(Vector2D InScale);// 0x288958ebd041 0x7e61841900
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x288858ebd041 0x7e618419e0
	void SetBrushFromTexture(Texture2D* Texture);// 0x288758ebd041 0x7e61841ac0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x288658ebd041 0x7e61841ba0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x28c758ebd041 0x7e61841c80
	void SetBrushColor(LinearColor InBrushColor);// 0x288458ebd041 0x7e618de780
	void SetBrush(out const SlateBrush InBrush);// 0x288358ebd041 0x7e618de860
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x288258ebd041 0x7e618de940

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7e6191ea00
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7e6191ea80
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7e6191eb00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x288f58ebd041 0x7e618413c0
	void SetPadding(Margin InPadding);// 0x288e58ebd041 0x7e618414a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x288d58ebd041 0x7e61841580

--------------------------------
Class: BrushBinding.PropertyBinding.Object
	SlateBrush GetValue();// 0x289058ebd041 0x7e618412e0

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x140, Size: 0x8] 0x7e6191f800
	ButtonStyle WidgetStyle;//[Offset: 0x150, Size: 0x3b0] 0x7e6191f880
	LinearColor ColorAndOpacity;//[Offset: 0x500, Size: 0x10] 0x7e6191f900
	LinearColor BackgroundColor;//[Offset: 0x510, Size: 0x10] 0x7e6191f980
	byte ClickMethod;//[Offset: 0x520, Size: 0x1] 0x7e6191fa00
	byte TouchMethod;//[Offset: 0x521, Size: 0x1] 0x7e6191fa80
	byte PressMethod;//[Offset: 0x522, Size: 0x1] 0x7e6191fb00
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x523, Size: 0x1] 0x7e6191fb80
	delegate OnClicked;//[Offset: 0x528, Size: 0x10] 0x7e6191fc00
	delegate OnPressed;//[Offset: 0x538, Size: 0x10] 0x7e6191fc80
	delegate OnReleased;//[Offset: 0x548, Size: 0x10] 0x7e6191fd00
	delegate OnHovered;//[Offset: 0x558, Size: 0x10] 0x7e6191fd80
	delegate OnUnhovered;//[Offset: 0x568, Size: 0x10] 0x7e6191fe00
	void SetTouchMethod(byte InTouchMethod);// 0x289758ebd041 0x7e61840cc0
	void SetStyle(out const ButtonStyle InStyle);// 0x289658ebd041 0x7e61840da0
	void SetPressMethod(byte InPressMethod);// 0x289558ebd041 0x7e61840e80
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x289458ebd041 0x7e61840f60
	void SetClickMethod(byte InClickMethod);// 0x289358ebd041 0x7e61841040
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x289258ebd041 0x7e61841120
	bool IsPressed();// 0x289158ebd041 0x7e61841200

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7e61930e00
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7e61930e80
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7e61930f00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x289a58ebd041 0x7e61840a20
	void SetPadding(Margin InPadding);// 0x289958ebd041 0x7e61840b00
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x289858ebd041 0x7e61840be0

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x289b58ebd041 0x7e61840940

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x40] 0x7e61930180
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7e61930200
	int ZOrder;//[Offset: 0x7c, Size: 0x4] 0x7e61930280
	void SetZOrder(int InZOrder);// 0x28ad58ebd041 0x7e61843340
	void SetSize(Vector2D InSize);// 0x28ac58ebd041 0x7e61843420
	void SetPosition(Vector2D InPosition);// 0x28ab58ebd041 0x7e61843500
	void SetOffsets(Margin InOffset);// 0x28aa58ebd041 0x7e618435e0
	void SetMinimum(Vector2D InMinimumAnchors);// 0x28a958ebd041 0x7e618436c0
	void SetMaximum(Vector2D InMaximumAnchors);// 0x28a858ebd041 0x7e618437a0
	void SetLayout(out const AnchorData InLayoutData);// 0x28a758ebd041 0x7e61843880
	void SetAutoSize(bool InbAutoSize);// 0x28e858ebd041 0x7e61843960
	void SetAnchors(Anchors InAnchors);// 0x28a558ebd041 0x7e61840080
	void SetAlignment(Vector2D InAlignment);// 0x28a458ebd041 0x7e61840160
	int GetZOrder();// 0x28a358ebd041 0x7e61840240
	Vector2D GetSize();// 0x28a258ebd041 0x7e61840320
	Vector2D GetPosition();// 0x28a158ebd041 0x7e61840400
	Margin GetOffsets();// 0x28a058ebd041 0x7e618404e0
	AnchorData GetLayout();// 0x289f58ebd041 0x7e618405c0
	bool GetAutoSize();// 0x289e58ebd041 0x7e618406a0
	Anchors GetAnchors();// 0x289d58ebd041 0x7e61840780
	Vector2D GetAlignment();// 0x289c58ebd041 0x7e61840860

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10] 0x7e615bba00
	Anchors Anchors;//[Offset: 0x10, Size: 0x20] 0x7e615bba80
	Vector2D Alignment;//[Offset: 0x30, Size: 0x10] 0x7e615bbb00

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x139, Size: 0x1] 0x7e6189bc80
	delegate CheckedStateDelegate;//[Offset: 0x13c, Size: 0x10] 0x7e61931480
	CheckBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0xa10] 0x7e61931500
	SlateWidgetStyleAsset* Style;//[Offset: 0xb60, Size: 0x8] 0x7e61931580
	SlateBrushAsset* UncheckedImage;//[Offset: 0xb68, Size: 0x8] 0x7e61931600
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0xb70, Size: 0x8] 0x7e61931680
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0xb78, Size: 0x8] 0x7e61931700
	SlateBrushAsset* CheckedImage;//[Offset: 0xb80, Size: 0x8] 0x7e61931780
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0xb88, Size: 0x8] 0x7e61931800
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0xb90, Size: 0x8] 0x7e61931880
	SlateBrushAsset* UndeterminedImage;//[Offset: 0xb98, Size: 0x8] 0x7e61931900
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0xba0, Size: 0x8] 0x7e61931980
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0xba8, Size: 0x8] 0x7e61931a00
	byte HorizontalAlignment;//[Offset: 0xbb0, Size: 0x1] 0x7e61931a80
	Margin Padding;//[Offset: 0xbb4, Size: 0x10] 0x7e61931b00
	SlateColor BorderBackgroundColor;//[Offset: 0xbc4, Size: 0x14] 0x7e61931b80
	byte ClickMethod;//[Offset: 0xbd8, Size: 0x1] 0x7e61931c00
	byte TouchMethod;//[Offset: 0xbd9, Size: 0x1] 0x7e61931c80
	byte PressMethod;//[Offset: 0xbda, Size: 0x1] 0x7e61931d00
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdb, Size: 0x1] 0x7e61931d80
	delegate OnCheckStateChanged;//[Offset: 0xbe0, Size: 0x10] 0x7e61931e00
	void SetTouchMethod(byte InTouchMethod);// 0x28b558ebd041 0x7e61842c40
	void SetPressMethod(byte InPressMethod);// 0x28b458ebd041 0x7e61842d20
	void SetIsChecked(bool InIsChecked);// 0x28b358ebd041 0x7e61842e00
	void SetClickMethod(byte InClickMethod);// 0x28b258ebd041 0x7e61842ee0
	void SetCheckedState(enum InCheckedState);// 0x28b158ebd041 0x7e61842fc0
	bool IsPressed();// 0x28b058ebd041 0x7e618430a0
	bool IsChecked();// 0x28af58ebd041 0x7e61843180
	enum GetCheckedState();// 0x28ae58ebd041 0x7e61843260

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object
	enum GetValue();// 0x28b658ebd041 0x7e61842b60

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x128, Size: 0x4] 0x7e61933000
	float Period;//[Offset: 0x12c, Size: 0x4] 0x7e61933080
	float Radius;//[Offset: 0x130, Size: 0x4] 0x7e61933100
	SlateBrushAsset* PieceImage;//[Offset: 0x138, Size: 0x8] 0x7e61933180
	SlateBrush Image;//[Offset: 0x140, Size: 0xc0] 0x7e61931100
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1] 0x7e61931180
	void SetRadius(float InRadius);// 0x28b958ebd041 0x7e618428c0
	void SetPeriod(float InPeriod);// 0x28b858ebd041 0x7e618429a0
	void SetNumberOfPieces(int InNumberOfPieces);// 0x28b758ebd041 0x7e61842a80

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0x28bb58ebd041 0x7e61842700
	LinearColor GetLinearValue();// 0x28ba58ebd041 0x7e618427e0

--------------------------------
Class: ComboBox.Widget.Visual.Object
	Object*[] Items;//[Offset: 0x128, Size: 0x10] 0x7e6189bb40
	delegate OnGenerateWidgetEvent;//[Offset: 0x138, Size: 0x10] 0x7e61932e00
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1] 0x7e61932e80

--------------------------------
Class: ComboBoxKey.Widget.Visual.Object
	FName[] Options;//[Offset: 0x128, Size: 0x10] 0x7e84859520
	FName SelectedOption;//[Offset: 0x138, Size: 0x8] 0x7e6142a680
	ComboBoxStyle WidgetStyle;//[Offset: 0x140, Size: 0x600] 0x7e6142b480
	TableRowStyle ItemStyle;//[Offset: 0x740, Size: 0xc50] 0x7e61429d80
	SlateColor ForegroundColor;//[Offset: 0x1390, Size: 0x14] 0x7e61429e00
	Margin ContentPadding;//[Offset: 0x13a4, Size: 0x10] 0x7e61429e80
	float MaxListHeight;//[Offset: 0x13b4, Size: 0x4] 0x7e61429f00
	bool bHasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b8, Size: 0x1] 0x7e61429f80
	bool bEnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b9, Size: 0x1] 0x7e6142a000
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ba, Size: 0x1] 0x7e6142a080
	delegate OnGenerateContentWidget;//[Offset: 0x13bc, Size: 0x10] 0x7e6142a100
	delegate OnGenerateItemWidget;//[Offset: 0x13cc, Size: 0x10] 0x7e6142a180
	delegate OnSelectionChanged;//[Offset: 0x13e0, Size: 0x10] 0x7e6142a200
	delegate OnOpening;//[Offset: 0x13f0, Size: 0x10] 0x7e6142a280
	void SetSelectedOption(FName Option);// 0x106b58ebd041 0x7e61433260
	bool RemoveOption(FName Option);// 0x106a58ebd041 0x7e61433340
	void OnSelectionChangedEvent__DelegateSignature(FName SelectedItem, byte SelectionType);// 0x106958ebd041 0x7e61433420
	void OnOpeningEvent__DelegateSignature();// 0x106858ebd041 0x7e61433500
	bool IsOpen();// 0x106758ebd041 0x7e614335e0
	FName GetSelectedOption();// 0x106658ebd041 0x7e614336c0
	Widget* GenerateWidgetEvent__DelegateSignature(FName Item);// 0x106558ebd041 0x7e614337a0
	void ClearSelection();// 0x106458ebd041 0x7e61433880
	void ClearOptions();// 0x10b558ebd041 0x7e61433960
	void AddOption(FName Option);// 0x106258ebd041 0x7e61430080

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x10, Size: 0xc0] 0x7e6142b500
	SlateBrush ActiveHoveredBrush;//[Offset: 0xd0, Size: 0xc0] 0x7e6142b580
	SlateBrush ActiveBrush;//[Offset: 0x190, Size: 0xc0] 0x7e61429500
	SlateBrush InactiveHoveredBrush;//[Offset: 0x250, Size: 0xc0] 0x7e61429580
	SlateBrush InactiveBrush;//[Offset: 0x310, Size: 0xc0] 0x7e61429600
	bool bUseParentRowBrush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1] 0x7e61429680
	SlateBrush ParentRowBackgroundBrush;//[Offset: 0x3e0, Size: 0xc0] 0x7e61429700
	SlateBrush ParentRowBackgroundHoveredBrush;//[Offset: 0x4a0, Size: 0xc0] 0x7e61429780
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x560, Size: 0xc0] 0x7e61429800
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x620, Size: 0xc0] 0x7e61429880
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x6e0, Size: 0xc0] 0x7e61429900
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x7a0, Size: 0xc0] 0x7e61429980
	SlateColor TextColor;//[Offset: 0x860, Size: 0x14] 0x7e61429a00
	SlateColor SelectedTextColor;//[Offset: 0x874, Size: 0x14] 0x7e61429a80
	SlateBrush DropIndicator_Above;//[Offset: 0x890, Size: 0xc0] 0x7e61429b00
	SlateBrush DropIndicator_Onto;//[Offset: 0x950, Size: 0xc0] 0x7e61429b80
	SlateBrush DropIndicator_Below;//[Offset: 0xa10, Size: 0xc0] 0x7e61429c00
	SlateBrush ActiveHighlightedBrush;//[Offset: 0xad0, Size: 0xc0] 0x7e61429c80
	SlateBrush InactiveHighlightedBrush;//[Offset: 0xb90, Size: 0xc0] 0x7e61429d00

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x128, Size: 0x10] 0x7e848597a0
	FString SelectedOption;//[Offset: 0x138, Size: 0x10] 0x7e6142d480
	ComboBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0x600] 0x7e6142d500
	TableRowStyle ItemStyle;//[Offset: 0x750, Size: 0xc50] 0x7e6142d580
	Margin ContentPadding;//[Offset: 0x13a0, Size: 0x10] 0x7e6142d600
	float MaxListHeight;//[Offset: 0x13b0, Size: 0x4] 0x7e6142d680
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b4, Size: 0x1] 0x7e6142b600
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b5, Size: 0x1] 0x7e6142b680
	SlateFontInfo Font;//[Offset: 0x13b8, Size: 0x58] 0x7e6142bc80
	SlateColor ForegroundColor;//[Offset: 0x1410, Size: 0x14] 0x7e6142bd00
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1424, Size: 0x1] 0x7e6142bd80
	delegate OnGenerateWidgetEvent;//[Offset: 0x1428, Size: 0x10] 0x7e6142be00
	delegate OnSelectionChanged;//[Offset: 0x1438, Size: 0x10] 0x7e6142be80
	delegate OnOpening;//[Offset: 0x1448, Size: 0x10] 0x7e6142bf00
	void SetSelectedOption(FString Option);// 0x108058ebd041 0x7e61432540
	void SetSelectedIndex(const int Index);// 0x107f58ebd041 0x7e61432620
	bool RemoveOption(FString Option);// 0x107e58ebd041 0x7e61432700
	void RefreshOptions();// 0x107d58ebd041 0x7e614327e0
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x107c58ebd041 0x7e614328c0
	void OnOpeningEvent__DelegateSignature();// 0x107b58ebd041 0x7e614329a0
	bool IsOpen();// 0x107a58ebd041 0x7e61432a80
	FString GetSelectedOption();// 0x107958ebd041 0x7e61432b60
	int GetSelectedIndex();// 0x107858ebd041 0x7e61432c40
	int GetOptionCount();// 0x107758ebd041 0x7e61432d20
	FString GetOptionAtIndex(int Index);// 0x107658ebd041 0x7e61432e00
	int FindOptionIndex(FString Option);// 0x107558ebd041 0x7e61432ee0
	void ClearSelection();// 0x107458ebd041 0x7e61432fc0
	void ClearOptions();// 0x107358ebd041 0x7e614330a0
	void AddOption(FString Option);// 0x106c58ebd041 0x7e61433180

--------------------------------
Class: DynamicEntryBoxBase.Widget.Visual.Object
	enum EntryBoxType;//[Offset: 0x128, Size: 0x1] 0x7e6189e200
	Vector2D EntrySpacing;//[Offset: 0x130, Size: 0x10] 0x7e61932200
	Vector2D[] SpacingPattern;//[Offset: 0x140, Size: 0x10] 0x7e6189e2a0
	SlateChildSize EntrySizeRule;//[Offset: 0x150, Size: 0x8] 0x7e61932300
	byte EntryHorizontalAlignment;//[Offset: 0x158, Size: 0x1] 0x7e61932380
	byte EntryVerticalAlignment;//[Offset: 0x159, Size: 0x1] 0x7e61932400
	int MaxElementSize;//[Offset: 0x15c, Size: 0x4] 0x7e61932480
	RadialBoxSettings RadialBoxSettings;//[Offset: 0x160, Size: 0x10] 0x7e61932500
	UserWidgetPool EntryWidgetPool;//[Offset: 0x180, Size: 0x88] 0x7e61932580
	void SetRadialSettings(out const RadialBoxSettings InSettings);// 0x28c258ebd041 0x7e618420e0
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0x28c158ebd041 0x7e618421c0
	int GetNumEntries();// 0x28c058ebd041 0x7e618422a0
	UserWidget*[] GetAllEntries();// 0x28bf58ebd041 0x7e61842380

--------------------------------
Class: RadialBoxSettings
	float StartingAngle;//[Offset: 0x0, Size: 0x4] 0x7e615bb700
	bool bDistributeItemsEvenly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7e615bb780
	float AngleBetweenItems;//[Offset: 0x8, Size: 0x4] 0x7e615bb800
	float SectorCentralAngle;//[Offset: 0xc, Size: 0x4] 0x7e615bb880

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4] 0x7e615bd200
	byte SizeRule;//[Offset: 0x4, Size: 0x1] 0x7e615bd280

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10] 0x7e84dd7ea0
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10] 0x7e84dd7e00

--------------------------------
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x208, Size: 0x8] 0x7e6189e0c0
	void Reset(bool bDeleteWidgets);// 0x28c658ebd041 0x7e61841d60
	void RemoveEntry(UserWidget* EntryWidget);// 0x28c558ebd041 0x7e61841e40
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0x28c458ebd041 0x7e61841f20
	UserWidget* BP_CreateEntry();// 0x28c358ebd041 0x7e61842000

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x7e6142dc80
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10] 0x7e6142dd00
	FText HintText;//[Offset: 0x150, Size: 0x18] 0x7e6142dd80
	delegate HintTextDelegate;//[Offset: 0x168, Size: 0x10] 0x7e6142de00
	EditableTextStyle WidgetStyle;//[Offset: 0x180, Size: 0x2c0] 0x7e6142e100
	SlateWidgetStyleAsset* Style;//[Offset: 0x440, Size: 0x8] 0x7e6142e180
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x448, Size: 0x8] 0x7e6142e200
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x450, Size: 0x8] 0x7e6142e280
	SlateBrushAsset* CaretImage;//[Offset: 0x458, Size: 0x8] 0x7e6142e300
	SlateFontInfo Font;//[Offset: 0x460, Size: 0x58] 0x7e6142e380
	SlateColor ColorAndOpacity;//[Offset: 0x4b8, Size: 0x14] 0x7e6142e400
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1] 0x7e6142e480
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 0x1] 0x7e6142e500
	float MinimumDesiredWidth;//[Offset: 0x4d0, Size: 0x4] 0x7e6142e580
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1] 0x7e6142e600
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1] 0x7e6142e680
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d6, Size: 0x1] 0x7e6142e700
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d7, Size: 0x1] 0x7e6142c680
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1] 0x7e6142c700
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d9, Size: 0x1] 0x7e6142c780
	byte KeyboardType;//[Offset: 0x4da, Size: 0x1] 0x7e6142c800
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x4db, Size: 0x1] 0x7e6142c900
	enum VirtualKeyboardTrigger;//[Offset: 0x4dc, Size: 0x1] 0x7e84859b60
	enum VirtualKeyboardDismissAction;//[Offset: 0x4dd, Size: 0x1] 0x7e84859ac0
	byte Justification;//[Offset: 0x4de, Size: 0x1] 0x7e6142ca80
	enum OverflowPolicy;//[Offset: 0x4df, Size: 0x1] 0x7e84859a20
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x4e0, Size: 0x3] 0x7e6142cd80
	delegate OnTextChanged;//[Offset: 0x4e8, Size: 0x10] 0x7e6142ce00
	delegate OnTextCommitted;//[Offset: 0x4f8, Size: 0x10] 0x7e6142ce80
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0x108b58ebd041 0x7e61431d60
	void SetText(FText InText);// 0x108a58ebd041 0x7e61431e40
	void SetJustification(byte InJustification);// 0x108958ebd041 0x7e61431f20
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x108858ebd041 0x7e61432000
	void SetIsPassword(bool InbIsPassword);// 0x108758ebd041 0x7e614320e0
	void SetHintText(FText InHintText);// 0x108658ebd041 0x7e614321c0
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x108558ebd041 0x7e614322a0
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x108458ebd041 0x7e61432380
	FText GetText();// 0x108158ebd041 0x7e61432460

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e6142c880

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e6142cb80
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e6142cc00
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1] 0x7e84859700
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1] 0x7e848598e0

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x7e61440e80
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10] 0x7e61440f00
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0xad0] 0x7e6142e980
	SlateWidgetStyleAsset* Style;//[Offset: 0xc20, Size: 0x8] 0x7e6142ea00
	FText HintText;//[Offset: 0xc28, Size: 0x18] 0x7e6142ea80
	delegate HintTextDelegate;//[Offset: 0xc40, Size: 0x10] 0x7e6142eb00
	SlateFontInfo Font;//[Offset: 0xc50, Size: 0x58] 0x7e6142eb80
	LinearColor ForegroundColor;//[Offset: 0xca8, Size: 0x10] 0x7e6142ec00
	LinearColor BackgroundColor;//[Offset: 0xcb8, Size: 0x10] 0x7e6142ec80
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xcc8, Size: 0x10] 0x7e6142ed00
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 0x1] 0x7e6142ed80
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd9, Size: 0x1] 0x7e6142ee00
	float MinimumDesiredWidth;//[Offset: 0xcdc, Size: 0x4] 0x7e6142ee80
	Margin Padding;//[Offset: 0xce0, Size: 0x10] 0x7e6142ef00
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 0x1] 0x7e6142ef80
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf1, Size: 0x1] 0x7e6142f000
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf2, Size: 0x1] 0x7e6142f080
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf3, Size: 0x1] 0x7e6142f100
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1] 0x7e6142f180
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 0x1] 0x7e6142f200
	byte KeyboardType;//[Offset: 0xcf6, Size: 0x1] 0x7e6142f280
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xcf7, Size: 0x1] 0x7e6142f300
	enum VirtualKeyboardTrigger;//[Offset: 0xcf8, Size: 0x1] 0x7e84859de0
	enum VirtualKeyboardDismissAction;//[Offset: 0xcf9, Size: 0x1] 0x7e84859d40
	byte Justification;//[Offset: 0xcfa, Size: 0x1] 0x7e6142f480
	enum OverflowPolicy;//[Offset: 0xcfb, Size: 0x1] 0x7e84859ca0
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xcfc, Size: 0x3] 0x7e6142f580
	delegate OnTextChanged;//[Offset: 0xd00, Size: 0x10] 0x7e6142f600
	delegate OnTextCommitted;//[Offset: 0xd10, Size: 0x10] 0x7e6142f680
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0x109c58ebd041 0x7e61434bc0
	void SetText(FText InText);// 0x109b58ebd041 0x7e61434ca0
	void SetJustification(byte InJustification);// 0x109a58ebd041 0x7e61434d80
	void SetIsReadOnly(bool bReadOnly);// 0x109958ebd041 0x7e61434e60
	void SetIsPassword(bool bIsPassword);// 0x109858ebd041 0x7e61434f40
	void SetHintText(FText InText);// 0x109758ebd041 0x7e61435020
	void SetForegroundColor(LinearColor Color);// 0x109658ebd041 0x7e61435100
	void SetError(FText InError);// 0x109558ebd041 0x7e614351e0
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x109458ebd041 0x7e614352c0
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x109358ebd041 0x7e614353a0
	bool HasError();// 0x109258ebd041 0x7e61435480
	FText GetText();// 0x109158ebd041 0x7e61435560
	void ClearError();// 0x10d658ebd041 0x7e61435640

--------------------------------
Class: ExpandableArea.Widget.Visual.Object
	ExpandableAreaStyle Style;//[Offset: 0x130, Size: 0x1a0] 0x7e61933a00
	SlateBrush BorderBrush;//[Offset: 0x2d0, Size: 0xc0] 0x7e61933a80
	SlateColor BorderColor;//[Offset: 0x390, Size: 0x14] 0x7e61933b00
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1] 0x7e61933b80
	float MaxHeight;//[Offset: 0x3a8, Size: 0x4] 0x7e61933c00
	Margin HeaderPadding;//[Offset: 0x3ac, Size: 0x10] 0x7e61933c80
	Margin AreaPadding;//[Offset: 0x3bc, Size: 0x10] 0x7e61933d00
	delegate OnExpansionChanged;//[Offset: 0x3d0, Size: 0x10] 0x7e61933d80
	Widget* HeaderContent;//[Offset: 0x3e0, Size: 0x8] 0x7e61933e00
	Widget* BodyContent;//[Offset: 0x3e8, Size: 0x8] 0x7e61933e80
	void SetIsExpanded_Animated(bool IsExpanded);// 0x28c958ebd041 0x7e61845480
	void SetIsExpanded(bool IsExpanded);// 0x28c858ebd041 0x7e61845560
	bool GetIsExpanded();// 0x290958ebd041 0x7e61845640

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle
	SlateBrush CollapsedImage;//[Offset: 0x10, Size: 0xc0] 0x7e61570f80
	SlateBrush ExpandedImage;//[Offset: 0xd0, Size: 0xc0] 0x7e61571000
	float RolloutAnimationSeconds;//[Offset: 0x190, Size: 0x4] 0x7e61571080

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0x28ca58ebd041 0x7e618453a0

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x140, Size: 0x10] 0x7e6189df80
	float[] RowFill;//[Offset: 0x150, Size: 0x10] 0x7e6189e020
	void SetRowFill(int ColumnIndex, float Coefficient);// 0x28cd58ebd041 0x7e61845100
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0x28cc58ebd041 0x7e618451e0
	GridSlot* AddChildToGrid(Widget* Content, int InRow, int InColumn);// 0x28cb58ebd041 0x7e618452c0

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7e61934c80
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7e61934d00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7e61934d80
	int Row;//[Offset: 0x4c, Size: 0x4] 0x7e61934e00
	int RowSpan;//[Offset: 0x50, Size: 0x4] 0x7e61934e80
	int Column;//[Offset: 0x54, Size: 0x4] 0x7e61934f00
	int ColumnSpan;//[Offset: 0x58, Size: 0x4] 0x7e61934f80
	int Layer;//[Offset: 0x5c, Size: 0x4] 0x7e61935000
	Vector2D Nudge;//[Offset: 0x60, Size: 0x10] 0x7e61935080
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x28d658ebd041 0x7e61844920
	void SetRowSpan(int InRowSpan);// 0x28d558ebd041 0x7e61844a00
	void SetRow(int InRow);// 0x28d458ebd041 0x7e61844ae0
	void SetPadding(Margin InPadding);// 0x28d358ebd041 0x7e61844bc0
	void SetNudge(Vector2D InNudge);// 0x28d258ebd041 0x7e61844ca0
	void SetLayer(int InLayer);// 0x28d158ebd041 0x7e61844d80
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x28d058ebd041 0x7e61844e60
	void SetColumnSpan(int InColumnSpan);// 0x28cf58ebd041 0x7e61844f40
	void SetColumn(int InColumn);// 0x28ce58ebd041 0x7e61845020

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x28d758ebd041 0x7e61844840

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x7e61934780
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8] 0x7e61934800
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x7e61934880
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x7e61934900
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x28db58ebd041 0x7e618444c0
	void SetSize(SlateChildSize InSize);// 0x28da58ebd041 0x7e618445a0
	void SetPadding(Margin InPadding);// 0x28d958ebd041 0x7e61844680
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x28d858ebd041 0x7e61844760

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x130, Size: 0xc0] 0x7e61935c80
	delegate BrushDelegate;//[Offset: 0x1f0, Size: 0x10] 0x7e61935d00
	LinearColor ColorAndOpacity;//[Offset: 0x200, Size: 0x10] 0x7e61935d80
	delegate ColorAndOpacityDelegate;//[Offset: 0x210, Size: 0x10] 0x7e61935e00
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x7e61935e80
	delegate OnMouseButtonDownEvent;//[Offset: 0x224, Size: 0x10] 0x7e61935f00
	void SetOpacity(float InOpacity);// 0x28e958ebd041 0x7e61847240
	void SetDesiredSizeOverride(Vector2D DesiredSize);// 0x292a58ebd041 0x7e61847320
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x28e758ebd041 0x7e61843a40
	void SetBrushTintColor(SlateColor TintColor);// 0x28e658ebd041 0x7e61843b20
	void SetBrushResourceObject(Object* ResourceObject);// 0x28e558ebd041 0x7e61843c00
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x28e458ebd041 0x7e61843ce0
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x28e358ebd041 0x7e61843dc0
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x28e258ebd041 0x7e61843ea0
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x28e158ebd041 0x7e61843f80
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x28e058ebd041 0x7e61844060
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x28df58ebd041 0x7e61844140
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x28de58ebd041 0x7e61844220
	void SetBrush(out const SlateBrush InBrush);// 0x28dd58ebd041 0x7e61844300
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x28dc58ebd041 0x7e618443e0

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0x130, Size: 0x3b0] 0x7e61441c80
	TextBlockStyle TextStyle;//[Offset: 0x4e0, Size: 0x310] 0x7e61440180
	InputChord SelectedKey;//[Offset: 0x7f0, Size: 0x20] 0x7e61440200
	SlateFontInfo Font;//[Offset: 0x810, Size: 0x58] 0x7e61440280
	Margin Margin;//[Offset: 0x868, Size: 0x10] 0x7e61440300
	LinearColor ColorAndOpacity;//[Offset: 0x878, Size: 0x10] 0x7e61440380
	FText KeySelectionText;//[Offset: 0x888, Size: 0x18] 0x7e61440400
	FText NoKeySpecifiedText;//[Offset: 0x8a0, Size: 0x18] 0x7e61440480
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 0x1] 0x7e61440500
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 0x1] 0x7e61440580
	Key[] EscapeKeys;//[Offset: 0x8c0, Size: 0x10] 0x7e84859fc0
	delegate OnKeySelected;//[Offset: 0x8d0, Size: 0x10] 0x7e61440680
	delegate OnIsSelectingKeyChanged;//[Offset: 0x8e0, Size: 0x10] 0x7e61440700
	void SetTextBlockVisibility(const enum InVisibility);// 0x10a958ebd041 0x7e61434300
	void SetSelectedKey(out const InputChord InSelectedKey);// 0x10a858ebd041 0x7e614343e0
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0x10a758ebd041 0x7e614344c0
	void SetKeySelectionText(FText InKeySelectionText);// 0x10a658ebd041 0x7e614345a0
	void SetEscapeKeys(out const Key[] InKeys);// 0x10a558ebd041 0x7e61434680
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0x10a458ebd041 0x7e61434760
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0x10a258ebd041 0x7e61434840
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0x10a158ebd041 0x7e61434920
	void OnIsSelectingKeyChanged__DelegateSignature();// 0x10a058ebd041 0x7e61434a00
	bool GetIsSelectingKey();// 0x109d58ebd041 0x7e61434ae0

--------------------------------
Class: Int32Binding.PropertyBinding.Object
	int GetValue();// 0x28ea58ebd041 0x7e61847160

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x7e61935a00
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1] 0x7e61935a80
	void SetCanCache(bool CanCache);// 0x28ed58ebd041 0x7e61846ec0
	void InvalidateCache();// 0x28ec58ebd041 0x7e61846fa0
	bool GetCanCache();// 0x28eb58ebd041 0x7e61847080

--------------------------------
Class: UserListEntry.Interface.Object
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x28f058ebd041 0x7e61846c20
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x28ef58ebd041 0x7e61846d00
	void BP_OnEntryReleased();// 0x28ee58ebd041 0x7e61846de0

--------------------------------
Class: UserListEntryLibrary.BlueprintFunctionLibrary.Object
	bool IsListItemSelected(interface classNone UserListEntry);// 0x28f358ebd041 0x7e61846980
	bool IsListItemExpanded(interface classNone UserListEntry);// 0x28f258ebd041 0x7e61846a60
	ListViewBase* GetOwningListView(interface classNone UserListEntry);// 0x28f158ebd041 0x7e61846b40

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x128, Size: 0x8] 0x7e6189dda0
	float WheelScrollMultiplier;//[Offset: 0x130, Size: 0x4] 0x7e61936e00
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1] 0x7e61936e80
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1] 0x7e61936f00
	bool bEnableRightClickScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 0x1] 0x7e61936f80
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137, Size: 0x1] 0x7e61937000
	float FixedLineScrollOffset;//[Offset: 0x138, Size: 0x4] 0x7e61937080
	bool bAllowDragging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1] 0x7e61937100
	delegate BP_OnEntryGenerated;//[Offset: 0x140, Size: 0x10] 0x7e61937180
	delegate BP_OnEntryReleased;//[Offset: 0x150, Size: 0x10] 0x7e61937200
	UserWidgetPool EntryWidgetPool;//[Offset: 0x160, Size: 0x88] 0x7e61937280
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x28fe58ebd041 0x7e61845fe0
	void SetScrollOffset(const float InScrollOffset);// 0x28fd58ebd041 0x7e618460c0
	void SetScrollbarVisibility(enum InVisibility);// 0x28fc58ebd041 0x7e618461a0
	void ScrollToTop();// 0x28fb58ebd041 0x7e61846280
	void ScrollToBottom();// 0x28fa58ebd041 0x7e61846360
	void RequestRefresh();// 0x28f958ebd041 0x7e61846440
	void RegenerateAllEntries();// 0x28f858ebd041 0x7e61846520
	float GetScrollOffset();// 0x28f758ebd041 0x7e61846600
	UserWidget*[] GetDisplayedEntryWidgets();// 0x28f658ebd041 0x7e618466e0

--------------------------------
Class: UserObjectListEntry.UserListEntry.Interface.Object
	void OnListItemObjectSet(Object* ListItemObject);// 0x28f458ebd041 0x7e618468a0

--------------------------------
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object
	Object* GetListItemObject(interface classNone UserObjectListEntry);// 0x28f558ebd041 0x7e618467c0

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	TableViewStyle WidgetStyle;//[Offset: 0x300, Size: 0xd0] 0x7e61937780
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x3d0, Size: 0x6e0] 0x7e61937800
	byte Orientation;//[Offset: 0xab0, Size: 0x1] 0x7e61937880
	byte SelectionMode;//[Offset: 0xab1, Size: 0x1] 0x7e61937900
	enum ConsumeMouseWheel;//[Offset: 0xab2, Size: 0x1] 0x7e6189da80
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab3, Size: 0x1] 0x7e61937a00
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab4, Size: 0x1] 0x7e61937a80
	float EntrySpacing;//[Offset: 0xab8, Size: 0x4] 0x7e61937b00
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabc, Size: 0x1] 0x7e61937b80
	Object*[] ListItems;//[Offset: 0xac0, Size: 0x10] 0x7e6189db20
	delegate BP_OnEntryInitialized;//[Offset: 0xae0, Size: 0x10] 0x7e61937c80
	delegate BP_OnItemClicked;//[Offset: 0xaf0, Size: 0x10] 0x7e61937d00
	delegate BP_OnItemDoubleClicked;//[Offset: 0xb00, Size: 0x10] 0x7e61937d80
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0xb10, Size: 0x10] 0x7e61937e00
	delegate BP_OnItemSelectionChanged;//[Offset: 0xb20, Size: 0x10] 0x7e61937e80
	delegate BP_OnItemScrolledIntoView;//[Offset: 0xb30, Size: 0x10] 0x7e61937f00
	void SetSelectionMode(byte SelectionMode);// 0x291758ebd041 0x7e618483c0
	void SetSelectedIndex(int Index);// 0x291658ebd041 0x7e618484a0
	void ScrollIndexIntoView(int Index);// 0x291558ebd041 0x7e61848580
	void RemoveItem(Object* Item);// 0x291458ebd041 0x7e61848660
	void OnListItemOuterEndPlayed(Actor* ItemOuter, byte EndPlayReason);// 0x291358ebd041 0x7e61848740
	void OnListItemEndPlayed(Actor* Item, byte EndPlayReason);// 0x291258ebd041 0x7e61848820
	void NavigateToIndex(int Index);// 0x291158ebd041 0x7e61848900
	bool IsRefreshPending();// 0x291058ebd041 0x7e618489e0
	int GetNumItems();// 0x290f58ebd041 0x7e61848ac0
	Object*[] GetListItems();// 0x290e58ebd041 0x7e61848ba0
	Object* GetItemAt(int Index);// 0x290d58ebd041 0x7e61848c80
	int GetIndexForItem(const Object* Item);// 0x290c58ebd041 0x7e61848d60
	void ClearListItems();// 0x290b58ebd041 0x7e61848e40
	void BP_SetSelectedItem(Object* Item);// 0x290a58ebd041 0x7e61848f20
	void BP_SetListItems(out const Object*[] InListItems);// 0x294b58ebd041 0x7e61849000
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x290858ebd041 0x7e61845720
	void BP_ScrollItemIntoView(Object* Item);// 0x290758ebd041 0x7e61845800
	void BP_NavigateToItem(Object* Item);// 0x290658ebd041 0x7e618458e0
	bool BP_IsItemVisible(Object* Item);// 0x290558ebd041 0x7e618459c0
	bool BP_GetSelectedItems(out Object*[] Items);// 0x290458ebd041 0x7e61845aa0
	Object* BP_GetSelectedItem();// 0x290358ebd041 0x7e61845b80
	int BP_GetNumItemsSelected();// 0x290258ebd041 0x7e61845c60
	void BP_ClearSelection();// 0x290158ebd041 0x7e61845d40
	void BP_CancelScrollIntoView();// 0x290058ebd041 0x7e61845e20
	void AddItem(Object* Item);// 0x28ff58ebd041 0x7e61845f00

--------------------------------
Class: TableViewStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x10, Size: 0xc0] 0x7e61570280

--------------------------------
Class: ListViewDesignerPreviewItem.Object

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0x140, Size: 0x8] 0x7e8485a2e0
	delegate OnGetMenuContentEvent;//[Offset: 0x148, Size: 0x10] 0x7e61442b00
	delegate OnGetUserMenuContentEvent;//[Offset: 0x158, Size: 0x10] 0x7e61442b80
	byte Placement;//[Offset: 0x168, Size: 0x1] 0x7e61442c00
	bool bFitInWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1] 0x7e61442c80
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1] 0x7e61442d00
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1] 0x7e61442d80
	delegate OnMenuOpenChanged;//[Offset: 0x170, Size: 0x10] 0x7e61442e80
	void ToggleOpen(bool bFocusOnOpen);// 0x10c158ebd041 0x7e614368a0
	bool ShouldOpenDueToClick();// 0x10c058ebd041 0x7e61436980
	void SetPlacement(byte InPlacement);// 0x10bf58ebd041 0x7e61436a60
	void Open(bool bFocusMenu);// 0x10be58ebd041 0x7e61436b40
	bool IsOpen();// 0x10bd58ebd041 0x7e61436c20
	bool HasOpenSubMenus();// 0x10bc58ebd041 0x7e61436d00
	UserWidget* GetUserWidget__DelegateSignature();// 0x10bb58ebd041 0x7e61436de0
	Vector2D GetMenuPosition();// 0x10ba58ebd041 0x7e61436ec0
	void FitInWindow(bool bFit);// 0x10b958ebd041 0x7e61436fa0
	void Close();// 0x10b858ebd041 0x7e61437080

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object
	byte GetValue();// 0x291858ebd041 0x7e618482e0

--------------------------------
Class: MovieScene2DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieScene2DTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4] 0x7e61937400
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xe8] 0x7e61937480
	MovieSceneFloatChannel Rotation;//[Offset: 0x2c0, Size: 0xe8] 0x7e61937500
	MovieSceneFloatChannel Scale;//[Offset: 0x3a8, Size: 0xe8] 0x7e61937580
	MovieSceneFloatChannel Shear;//[Offset: 0x578, Size: 0xe8] 0x7e61937600

--------------------------------
Class: MovieScene2DTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x7e615bb980

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMarginPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TopCurve;//[Offset: 0xe8, Size: 0xe8] 0x7e61939300
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x1d0, Size: 0xe8] 0x7e61939380
	MovieSceneFloatChannel RightCurve;//[Offset: 0x2b8, Size: 0xe8] 0x7e61939400
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x3a0, Size: 0xe8] 0x7e61939480

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName[] BrushPropertyNamePath;//[Offset: 0xa8, Size: 0x10] 0x7e6189d9e0
	FName TrackName;//[Offset: 0xb8, Size: 0x8] 0x7e61939280

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x128, Size: 0x3] 0x7e61443b80
	byte Justification;//[Offset: 0x12b, Size: 0x1] 0x7e61443c00
	enum WrappingPolicy;//[Offset: 0x12c, Size: 0x1] 0x7e8485a4c0
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12d, Size: 0x1] 0x7e61443d00
	float WrapTextAt;//[Offset: 0x130, Size: 0x4] 0x7e61443d80
	Margin Margin;//[Offset: 0x134, Size: 0x10] 0x7e61443e00
	float LineHeightPercentage;//[Offset: 0x144, Size: 0x4] 0x7e61443e80
	void SetJustification(byte InJustification);// 0x10e258ebd041 0x7e61438580

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18] 0x7e61445080
	FText HintText;//[Offset: 0x160, Size: 0x18] 0x7e61445100
	delegate HintTextDelegate;//[Offset: 0x178, Size: 0x10] 0x7e61445180
	TextBlockStyle WidgetStyle;//[Offset: 0x190, Size: 0x310] 0x7e61445200
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1] 0x7e61445280
	SlateFontInfo Font;//[Offset: 0x4a8, Size: 0x58] 0x7e61443200
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1] 0x7e61443280
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1] 0x7e61443300
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 0x1] 0x7e61443380
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x503, Size: 0x1] 0x7e61443400
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1] 0x7e61443480
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x505, Size: 0x1] 0x7e61443500
	enum VirtualKeyboardDismissAction;//[Offset: 0x506, Size: 0x1] 0x7e8485a1a0
	delegate OnTextChanged;//[Offset: 0x508, Size: 0x10] 0x7e61443600
	delegate OnTextCommitted;//[Offset: 0x518, Size: 0x10] 0x7e61443680
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0x10ea58ebd041 0x7e61437e80
	void SetText(FText InText);// 0x10e958ebd041 0x7e61437f60
	void SetIsReadOnly(bool bReadOnly);// 0x10e858ebd041 0x7e61438040
	void SetHintText(FText InHintText);// 0x10e758ebd041 0x7e61438120
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x10e658ebd041 0x7e61438200
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x10e558ebd041 0x7e614382e0
	FText GetText();// 0x10e458ebd041 0x7e614383c0
	FText GetHintText();// 0x10e358ebd041 0x7e614384a0

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18] 0x7e61444300
	FText HintText;//[Offset: 0x160, Size: 0x18] 0x7e61444380
	delegate HintTextDelegate;//[Offset: 0x178, Size: 0x10] 0x7e61444400
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x190, Size: 0xad0] 0x7e61444480
	TextBlockStyle TextStyle;//[Offset: 0xc60, Size: 0x310] 0x7e61444500
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf70, Size: 0x1] 0x7e61444580
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf71, Size: 0x1] 0x7e61444600
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xf72, Size: 0x1] 0x7e61444680
	enum VirtualKeyboardDismissAction;//[Offset: 0xf73, Size: 0x1] 0x7e84857b80
	SlateWidgetStyleAsset* Style;//[Offset: 0xf78, Size: 0x8] 0x7e61444780
	SlateFontInfo Font;//[Offset: 0xf80, Size: 0x58] 0x7e61444800
	LinearColor ForegroundColor;//[Offset: 0xfd8, Size: 0x10] 0x7e61444880
	LinearColor BackgroundColor;//[Offset: 0xfe8, Size: 0x10] 0x7e61444900
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xff8, Size: 0x10] 0x7e61444980
	delegate OnTextChanged;//[Offset: 0x1008, Size: 0x10] 0x7e61444a00
	delegate OnTextCommitted;//[Offset: 0x1018, Size: 0x10] 0x7e61444a80
	void SetTextStyle(out const TextBlockStyle InTextStyle);// 0x10f458ebd041 0x7e614375c0
	void SetText(FText InText);// 0x10f358ebd041 0x7e614376a0
	void SetIsReadOnly(bool bReadOnly);// 0x10f258ebd041 0x7e61437780
	void SetHintText(FText InHintText);// 0x10f158ebd041 0x7e61437860
	void SetForegroundColor(LinearColor Color);// 0x10f058ebd041 0x7e61437940
	void SetError(FText InError);// 0x10ef58ebd041 0x7e61437a20
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x10ee58ebd041 0x7e61437b00
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x10ed58ebd041 0x7e61437be0
	FText GetText();// 0x10ec58ebd041 0x7e61437cc0
	FText GetHintText();// 0x10eb58ebd041 0x7e61437da0

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x291958ebd041 0x7e61848200

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x7e61938e00
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x7e61938e80
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x7e61938f00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x291c58ebd041 0x7e61847f60
	void SetPadding(Margin InPadding);// 0x291b58ebd041 0x7e61848040
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x291a58ebd041 0x7e61848120

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x130, Size: 0x260] 0x7e61938600
	SlateWidgetStyleAsset* Style;//[Offset: 0x390, Size: 0x8] 0x7e61938680
	SlateBrushAsset* BackgroundImage;//[Offset: 0x398, Size: 0x8] 0x7e61938700
	SlateBrushAsset* FillImage;//[Offset: 0x3a0, Size: 0x8] 0x7e61938780
	SlateBrushAsset* MarqueeImage;//[Offset: 0x3a8, Size: 0x8] 0x7e61938800
	float Percent;//[Offset: 0x3b0, Size: 0x4] 0x7e61938880
	byte BarFillType;//[Offset: 0x3b4, Size: 0x1] 0x7e61938900
	byte BarFillStyle;//[Offset: 0x3b5, Size: 0x1] 0x7e61938980
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 0x1] 0x7e61938a00
	Vector2D BorderPadding;//[Offset: 0x3b8, Size: 0x10] 0x7e61938a80
	delegate PercentDelegate;//[Offset: 0x3c8, Size: 0x10] 0x7e61938b00
	LinearColor FillColorAndOpacity;//[Offset: 0x3d8, Size: 0x10] 0x7e61938b80
	delegate FillColorAndOpacityDelegate;//[Offset: 0x3e8, Size: 0x10] 0x7e61938c00
	void SetPercent(float InPercent);// 0x291f58ebd041 0x7e61847cc0
	void SetIsMarquee(bool InbIsMarquee);// 0x291e58ebd041 0x7e61847da0
	void SetFillColorAndOpacity(LinearColor InColor);// 0x291d58ebd041 0x7e61847e80

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bRetainRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x7e6193a080
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1] 0x7e6193a100
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1] 0x7e6193a180
	int Phase;//[Offset: 0x13c, Size: 0x4] 0x7e6193a200
	int PhaseCount;//[Offset: 0x140, Size: 0x4] 0x7e6193a280
	MaterialInterface* EffectMaterial;//[Offset: 0x148, Size: 0x8] 0x7e6193a300
	FName TextureParameter;//[Offset: 0x150, Size: 0x8] 0x7e6193a380
	void SetTextureParameter(FName TextureParameter);// 0x292558ebd041 0x7e61847780
	void SetRetainRendering(bool bInRetainRendering);// 0x292458ebd041 0x7e61847860
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x292358ebd041 0x7e61847940
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x292258ebd041 0x7e61847a20
	void RequestRender();// 0x292158ebd041 0x7e61847b00
	MaterialInstanceDynamic* GetEffectMaterial();// 0x292058ebd041 0x7e61847be0

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18] 0x7e6193b580
	DataTable* TextStyleSet;//[Offset: 0x160, Size: 0x8] 0x7e61939500
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x168, Size: 0x10] 0x7e6189d580
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1] 0x7e61939580
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x180, Size: 0x310] 0x7e61939600
	float MinDesiredWidth;//[Offset: 0x490, Size: 0x4] 0x7e61939680
	enum TextTransformPolicy;//[Offset: 0x494, Size: 0x1] 0x7e6189d620
	enum TextOverflowPolicy;//[Offset: 0x495, Size: 0x1] 0x7e6189d6c0
	TextBlockStyle DefaultTextStyle;//[Offset: 0x4a0, Size: 0x310] 0x7e61939800
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x7b0, Size: 0x10] 0x7e6189d760
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x293658ebd041 0x7e6184a260
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x293558ebd041 0x7e6184a340
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0x293458ebd041 0x7e6184a420
	void SetText(out const FText InText);// 0x293358ebd041 0x7e6184a500
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x293258ebd041 0x7e6184a5e0
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x293158ebd041 0x7e6184a6c0
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x293058ebd041 0x7e6184a7a0
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x292f58ebd041 0x7e6184a880
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x292e58ebd041 0x7e6184a960
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x292d58ebd041 0x7e6184aa40
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x292c58ebd041 0x7e6184ab20
	void SetAutoWrapText(bool InAutoTextWrap);// 0x292b58ebd041 0x7e6184ac00
	void RefreshTextLayout();// 0x296c58ebd041 0x7e6184ace0
	FText GetText();// 0x292958ebd041 0x7e61847400
	MaterialInstanceDynamic* GetDefaultDynamicMaterial();// 0x292858ebd041 0x7e618474e0
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x292758ebd041 0x7e618475c0
	void ClearAllDefaultStyleOverrides();// 0x292658ebd041 0x7e618476a0

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8] 0x7e6193b500

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x7e6193b100
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1] 0x7e6193b180
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1] 0x7e6193b200
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1] 0x7e6193b280
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x293758ebd041 0x7e6184a180

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e6193ae80
	Margin SafeAreaScale;//[Offset: 0x3c, Size: 0x10] 0x7e6193af00
	byte HAlign;//[Offset: 0x4c, Size: 0x1] 0x7e6193af80
	byte VAlign;//[Offset: 0x4d, Size: 0x1] 0x7e6193b000
	Margin Padding;//[Offset: 0x50, Size: 0x10] 0x7e6193b080

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x139, Size: 0x1] 0x7e6193aa80
	byte StretchDirection;//[Offset: 0x13a, Size: 0x1] 0x7e6193ab00
	float UserSpecifiedScale;//[Offset: 0x13c, Size: 0x4] 0x7e6193ab80
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1] 0x7e6193ac00
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x293b58ebd041 0x7e61849e00
	void SetStretchDirection(byte InStretchDirection);// 0x293a58ebd041 0x7e61849ee0
	void SetStretch(byte InStretch);// 0x293958ebd041 0x7e61849fc0
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x293858ebd041 0x7e6184a0a0

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7e6193a780
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7e6193a800
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7e6193a880
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x293e58ebd041 0x7e61849b60
	void SetPadding(Margin InPadding);// 0x293d58ebd041 0x7e61849c40
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x293c58ebd041 0x7e61849d20

--------------------------------
Class: ScrollBar.Widget.Visual.Object
	ScrollBarStyle WidgetStyle;//[Offset: 0x130, Size: 0x6e0] 0x7e6193c400
	SlateWidgetStyleAsset* Style;//[Offset: 0x810, Size: 0x8] 0x7e6193c480
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1] 0x7e6193c500
	bool bAlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 0x1] 0x7e6193c580
	byte Orientation;//[Offset: 0x81a, Size: 0x1] 0x7e6193c600
	Vector2D Thickness;//[Offset: 0x820, Size: 0x10] 0x7e6193a580
	Margin Padding;//[Offset: 0x830, Size: 0x10] 0x7e6193a600
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0x293f58ebd041 0x7e61849a80

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x140, Size: 0x310] 0x7e6193d000
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x450, Size: 0x6e0] 0x7e6193d080
	SlateWidgetStyleAsset* Style;//[Offset: 0xb30, Size: 0x8] 0x7e6193d100
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0xb38, Size: 0x8] 0x7e6193d180
	byte Orientation;//[Offset: 0xb40, Size: 0x1] 0x7e6193d200
	enum ScrollBarVisibility;//[Offset: 0xb41, Size: 0x1] 0x7e6189cf40
	enum ConsumeMouseWheel;//[Offset: 0xb42, Size: 0x1] 0x7e6189cfe0
	Vector2D ScrollbarThickness;//[Offset: 0xb48, Size: 0x10] 0x7e6193d380
	Margin ScrollbarPadding;//[Offset: 0xb58, Size: 0x10] 0x7e6193d400
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 0x1] 0x7e6193d480
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb69, Size: 0x1] 0x7e6193d500
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6a, Size: 0x1] 0x7e6193d580
	bool BackPadScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6b, Size: 0x1] 0x7e6193d600
	bool FrontPadScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 0x1] 0x7e6193d680
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6d, Size: 0x1] 0x7e6193b600
	enum NavigationDestination;//[Offset: 0xb6e, Size: 0x1] 0x7e6189d080
	float NavigationScrollPadding;//[Offset: 0xb70, Size: 0x4] 0x7e6193b700
	enum ScrollWhenFocusChanges;//[Offset: 0xb74, Size: 0x1] 0x7e6189d120
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb75, Size: 0x1] 0x7e6193b800
	float WheelScrollMultiplier;//[Offset: 0xb78, Size: 0x4] 0x7e6193b880
	delegate OnUserScrolled;//[Offset: 0xb80, Size: 0x10] 0x7e6193b900
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x295258ebd041 0x7e6184c3a0
	void SetScrollWhenFocusChanges(enum NewScrollWhenFocusChanges);// 0x295158ebd041 0x7e6184c480
	void SetScrollOffset(float NewScrollOffset);// 0x295058ebd041 0x7e6184c560
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0x294f58ebd041 0x7e6184c640
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x294e58ebd041 0x7e6184c720
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x294d58ebd041 0x7e6184c800
	void SetOrientation(byte NewOrientation);// 0x294c58ebd041 0x7e6184c8e0
	void SetNavigationDestination(const enum NewNavigationDestination);// 0x298d58ebd041 0x7e6184c9c0
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x294a58ebd041 0x7e618490e0
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x294958ebd041 0x7e618491c0
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x294858ebd041 0x7e618492a0
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x294758ebd041 0x7e61849380
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x294658ebd041 0x7e61849460
	void ScrollToStart();// 0x294558ebd041 0x7e61849540
	void ScrollToEnd();// 0x294458ebd041 0x7e61849620
	float GetViewOffsetFraction();// 0x294358ebd041 0x7e61849700
	float GetScrollOffsetOfEnd();// 0x294258ebd041 0x7e618497e0
	float GetScrollOffset();// 0x294158ebd041 0x7e618498c0
	void EndInertialScrolling();// 0x294058ebd041 0x7e618499a0

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7e6193cd00
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7e6193cd80
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7e6193ce00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x295558ebd041 0x7e6184c100
	void SetPadding(Margin InPadding);// 0x295458ebd041 0x7e6184c1e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x295358ebd041 0x7e6184c2c0

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x150, Size: 0x4] 0x7e6193e200
	float HeightOverride;//[Offset: 0x154, Size: 0x4] 0x7e6193e280
	float MinDesiredWidth;//[Offset: 0x158, Size: 0x4] 0x7e6193e300
	float MinDesiredHeight;//[Offset: 0x15c, Size: 0x4] 0x7e6193e380
	float MaxDesiredWidth;//[Offset: 0x160, Size: 0x4] 0x7e6193e400
	float MaxDesiredHeight;//[Offset: 0x164, Size: 0x4] 0x7e6193e480
	float MinAspectRatio;//[Offset: 0x168, Size: 0x4] 0x7e6193e500
	float MaxAspectRatio;//[Offset: 0x16c, Size: 0x4] 0x7e6193e580
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x7e6193e600
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x170, Size: 0x1] 0x7e6193e680
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x170, Size: 0x1] 0x7e6193e700
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x170, Size: 0x1] 0x7e6193c680
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x170, Size: 0x1] 0x7e6193c700
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x170, Size: 0x1] 0x7e6193c780
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x170, Size: 0x1] 0x7e6193c800
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x170, Size: 0x1] 0x7e6193c880
	void SetWidthOverride(float InWidthOverride);// 0x296558ebd041 0x7e6184b300
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x296458ebd041 0x7e6184b3e0
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x296358ebd041 0x7e6184b4c0
	void SetMinAspectRatio(float InMinAspectRatio);// 0x296258ebd041 0x7e6184b5a0
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x296158ebd041 0x7e6184b680
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x296058ebd041 0x7e6184b760
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x295f58ebd041 0x7e6184b840
	void SetHeightOverride(float InHeightOverride);// 0x295e58ebd041 0x7e6184b920
	void ClearWidthOverride();// 0x295d58ebd041 0x7e6184ba00
	void ClearMinDesiredWidth();// 0x295c58ebd041 0x7e6184bae0
	void ClearMinDesiredHeight();// 0x295b58ebd041 0x7e6184bbc0
	void ClearMinAspectRatio();// 0x295a58ebd041 0x7e6184bca0
	void ClearMaxDesiredWidth();// 0x295958ebd041 0x7e6184bd80
	void ClearMaxDesiredHeight();// 0x295858ebd041 0x7e6184be60
	void ClearMaxAspectRatio();// 0x295758ebd041 0x7e6184bf40
	void ClearHeightOverride();// 0x295658ebd041 0x7e6184c020

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7e6193df00
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x7e6193df80
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x7e6193e000
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x296858ebd041 0x7e6184b060
	void SetPadding(Margin InPadding);// 0x296758ebd041 0x7e6184b140
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x296658ebd041 0x7e6184b220

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0x297858ebd041 0x7e6184dc20
	Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0x297758ebd041 0x7e6184dd00
	float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0x297658ebd041 0x7e6184dde0
	float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0x297558ebd041 0x7e6184dec0
	void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate, bool bIncludeWindowPosition);// 0x297458ebd041 0x7e6184dfa0
	void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate, bool bIncludeWindowPosition);// 0x297358ebd041 0x7e6184e080
	void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0x297258ebd041 0x7e6184e160
	void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x297158ebd041 0x7e6184e240
	Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0x297058ebd041 0x7e6184e320
	bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0x296f58ebd041 0x7e6184e400
	Vector2D GetLocalTopLeft(out const Geometry Geometry);// 0x296e58ebd041 0x7e6184e4e0
	Vector2D GetLocalSize(out const Geometry Geometry);// 0x296d58ebd041 0x7e6184e5c0
	Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0x29a958ebd041 0x7e6184e6a0
	bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0x296b58ebd041 0x7e6184adc0
	void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x296a58ebd041 0x7e6184aea0
	Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0x296958ebd041 0x7e6184af80

--------------------------------
Class: SlateVectorArtData.Object
	SlateMeshVertex[] VertexData;//[Offset: 0x28, Size: 0x10] 0x7e6189f740
	uint32[] IndexData;//[Offset: 0x38, Size: 0x10] 0x7e6189cea0
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8] 0x7e6193fd80
	Vector2D ExtentMin;//[Offset: 0x50, Size: 0x10] 0x7e6193fe00
	Vector2D ExtentMax;//[Offset: 0x60, Size: 0x10] 0x7e6193fe80

--------------------------------
Class: SlateMeshVertex
	Vector2f Position;//[Offset: 0x0, Size: 0x8] 0x7e615bd300
	Color Color;//[Offset: 0x8, Size: 0x4] 0x7e615bd380
	Vector2f UV0;//[Offset: 0xc, Size: 0x8] 0x7e615bd400
	Vector2f UV1;//[Offset: 0x14, Size: 0x8] 0x7e615bd480
	Vector2f UV2;//[Offset: 0x1c, Size: 0x8] 0x7e615bd500
	Vector2f UV3;//[Offset: 0x24, Size: 0x8] 0x7e615bd580
	Vector2f UV4;//[Offset: 0x2c, Size: 0x8] 0x7e615bd600
	Vector2f UV5;//[Offset: 0x34, Size: 0x8] 0x7e615bd680

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x128, Size: 0x4] 0x7e61940700
	delegate ValueDelegate;//[Offset: 0x12c, Size: 0x10] 0x7e61940780
	float MinValue;//[Offset: 0x13c, Size: 0x4] 0x7e61940800
	float MaxValue;//[Offset: 0x140, Size: 0x4] 0x7e61940880
	SliderStyle WidgetStyle;//[Offset: 0x150, Size: 0x4a0] 0x7e61940900
	byte Orientation;//[Offset: 0x5f0, Size: 0x1] 0x7e61940980
	LinearColor SliderBarColor;//[Offset: 0x5f4, Size: 0x10] 0x7e61940a00
	LinearColor SliderHandleColor;//[Offset: 0x604, Size: 0x10] 0x7e61940a80
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1] 0x7e61940b00
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1] 0x7e61940b80
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1] 0x7e61940c00
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 0x1] 0x7e61940c80
	float StepSize;//[Offset: 0x618, Size: 0x4] 0x7e61940d00
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1] 0x7e61940d80
	delegate OnMouseCaptureBegin;//[Offset: 0x620, Size: 0x10] 0x7e61940e00
	delegate OnMouseCaptureEnd;//[Offset: 0x630, Size: 0x10] 0x7e61940e80
	delegate OnControllerCaptureBegin;//[Offset: 0x640, Size: 0x10] 0x7e61940f00
	delegate OnControllerCaptureEnd;//[Offset: 0x650, Size: 0x10] 0x7e61940f80
	delegate OnValueChanged;//[Offset: 0x660, Size: 0x10] 0x7e61941000
	void SetValue(float InValue);// 0x298258ebd041 0x7e6184d360
	void SetStepSize(float InValue);// 0x298158ebd041 0x7e6184d440
	void SetSliderHandleColor(LinearColor InValue);// 0x298058ebd041 0x7e6184d520
	void SetSliderBarColor(LinearColor InValue);// 0x297f58ebd041 0x7e6184d600
	void SetMinValue(float InValue);// 0x297e58ebd041 0x7e6184d6e0
	void SetMaxValue(float InValue);// 0x297d58ebd041 0x7e6184d7c0
	void SetLocked(bool InValue);// 0x297c58ebd041 0x7e6184d8a0
	void SetIndentHandle(bool InValue);// 0x297b58ebd041 0x7e6184d980
	float GetValue();// 0x297a58ebd041 0x7e6184da60
	float GetNormalizedValue();// 0x297958ebd041 0x7e6184db40

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x10, Size: 0xc0] 0x7e61570800
	SlateBrush HoveredBarImage;//[Offset: 0xd0, Size: 0xc0] 0x7e61570880
	SlateBrush DisabledBarImage;//[Offset: 0x190, Size: 0xc0] 0x7e61570900
	SlateBrush NormalThumbImage;//[Offset: 0x250, Size: 0xc0] 0x7e61570980
	SlateBrush HoveredThumbImage;//[Offset: 0x310, Size: 0xc0] 0x7e61570a00
	SlateBrush DisabledThumbImage;//[Offset: 0x3d0, Size: 0xc0] 0x7e61570a80
	float BarThickness;//[Offset: 0x490, Size: 0x4] 0x7e61570b00

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x128, Size: 0x10] 0x7e61940600
	void SetSize(Vector2D InSize);// 0x298358ebd041 0x7e6184d280

--------------------------------
Class: SpinBox.Widget.Visual.Object
	float Value;//[Offset: 0x128, Size: 0x4] 0x7e61448380
	delegate ValueDelegate;//[Offset: 0x12c, Size: 0x10] 0x7e61448400
	SpinBoxStyle WidgetStyle;//[Offset: 0x140, Size: 0x590] 0x7e61446880
	SlateWidgetStyleAsset* Style;//[Offset: 0x6d0, Size: 0x8] 0x7e61446900
	int MinFractionalDigits;//[Offset: 0x6d8, Size: 0x4] 0x7e61446980
	int MaxFractionalDigits;//[Offset: 0x6dc, Size: 0x4] 0x7e61446a00
	bool bAlwaysUsesDeltaSnap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1] 0x7e61446a80
	float Delta;//[Offset: 0x6e4, Size: 0x4] 0x7e61446b00
	float SliderExponent;//[Offset: 0x6e8, Size: 0x4] 0x7e61446b80
	SlateFontInfo Font;//[Offset: 0x6f0, Size: 0x58] 0x7e61446c00
	byte Justification;//[Offset: 0x748, Size: 0x1] 0x7e61446c80
	float MinDesiredWidth;//[Offset: 0x74c, Size: 0x4] 0x7e61446d00
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1] 0x7e61446d80
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 0x1] 0x7e61446e00
	SlateColor ForegroundColor;//[Offset: 0x754, Size: 0x14] 0x7e61446e80
	delegate OnValueChanged;//[Offset: 0x768, Size: 0x10] 0x7e61446f00
	delegate OnValueCommitted;//[Offset: 0x778, Size: 0x10] 0x7e61446f80
	delegate OnBeginSliderMovement;//[Offset: 0x788, Size: 0x10] 0x7e61447000
	delegate OnEndSliderMovement;//[Offset: 0x798, Size: 0x10] 0x7e61447080
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a8, Size: 0x1] 0x7e61447100
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a8, Size: 0x1] 0x7e61447180
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a8, Size: 0x1] 0x7e61447200
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7a8, Size: 0x1] 0x7e61447280
	float MinValue;//[Offset: 0x7ac, Size: 0x4] 0x7e61447300
	float MaxValue;//[Offset: 0x7b0, Size: 0x4] 0x7e61447380
	float MinSliderValue;//[Offset: 0x7b4, Size: 0x4] 0x7e61445300
	float MaxSliderValue;//[Offset: 0x7b8, Size: 0x4] 0x7e61445380
	void SetValue(float NewValue);// 0x111058ebd041 0x7e614397e0
	void SetMinValue(float NewValue);// 0x110f58ebd041 0x7e614398c0
	void SetMinSliderValue(float NewValue);// 0x110e58ebd041 0x7e614399a0
	void SetMinFractionalDigits(int NewValue);// 0x110d58ebd041 0x7e61439a80
	void SetMaxValue(float NewValue);// 0x110c58ebd041 0x7e61439b60
	void SetMaxSliderValue(float NewValue);// 0x110b58ebd041 0x7e61439c40
	void SetMaxFractionalDigits(int NewValue);// 0x110a58ebd041 0x7e61439d20
	void SetForegroundColor(SlateColor InForegroundColor);// 0x110958ebd041 0x7e61439e00
	void SetDelta(float NewValue);// 0x110858ebd041 0x7e61439ee0
	void SetAlwaysUsesDeltaSnap(bool bNewValue);// 0x110758ebd041 0x7e61439fc0
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0x110658ebd041 0x7e6143a0a0
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0x110558ebd041 0x7e6143a180
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0x110458ebd041 0x7e6143a260
	float GetValue();// 0x110358ebd041 0x7e6143a340
	float GetMinValue();// 0x110258ebd041 0x7e6143a420
	float GetMinSliderValue();// 0x110158ebd041 0x7e6143a500
	int GetMinFractionalDigits();// 0x110058ebd041 0x7e6143a5e0
	float GetMaxValue();// 0x10ff58ebd041 0x7e6143a6c0
	float GetMaxSliderValue();// 0x10fe58ebd041 0x7e6143a7a0
	int GetMaxFractionalDigits();// 0x10fd58ebd041 0x7e6143a880
	float GetDelta();// 0x10fc58ebd041 0x7e6143a960
	bool GetAlwaysUsesDeltaSnap();// 0x10fb58ebd041 0x7e6143aa40
	void ClearMinValue();// 0x10fa58ebd041 0x7e6143ab20
	void ClearMinSliderValue();// 0x10f958ebd041 0x7e6143ac00
	void ClearMaxValue();// 0x114058ebd041 0x7e6143ace0
	void ClearMaxSliderValue();// 0x10f658ebd041 0x7e61437400

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0x298558ebd041 0x7e6184d0c0
	FString GetStringValue();// 0x298458ebd041 0x7e6184d1a0

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18] 0x7e61941780
	delegate TextDelegate;//[Offset: 0x160, Size: 0x10] 0x7e61941800
	SlateColor ColorAndOpacity;//[Offset: 0x170, Size: 0x14] 0x7e61941880
	delegate ColorAndOpacityDelegate;//[Offset: 0x184, Size: 0x10] 0x7e61941900
	SlateFontInfo Font;//[Offset: 0x198, Size: 0x58] 0x7e61941980
	SlateBrush StrikeBrush;//[Offset: 0x1f0, Size: 0xc0] 0x7e61941a00
	Vector2D ShadowOffset;//[Offset: 0x2b0, Size: 0x10] 0x7e61941a80
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2c0, Size: 0x10] 0x7e61941b00
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2d0, Size: 0x10] 0x7e61941b80
	float MinDesiredWidth;//[Offset: 0x2e0, Size: 0x4] 0x7e61941c00
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1] 0x7e61941c80
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1] 0x7e61941d00
	enum TextTransformPolicy;//[Offset: 0x2e6, Size: 0x1] 0x7e6189f4c0
	enum TextOverflowPolicy;//[Offset: 0x2e7, Size: 0x1] 0x7e6189f560
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x7e61941e80
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x299358ebd041 0x7e6184f9e0
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0x299258ebd041 0x7e6184fac0
	void SetText(FText InText);// 0x299158ebd041 0x7e6184fba0
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x299058ebd041 0x7e6184fc80
	void SetShadowOffset(Vector2D InShadowOffset);// 0x298f58ebd041 0x7e6184fd60
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x298e58ebd041 0x7e6184fe40
	void SetOpacity(float InOpacity);// 0xffffff8158ebd000 0x7e6184ff20
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x298c58ebd041 0x7e6184caa0
	void SetFont(SlateFontInfo InFontInfo);// 0x298b58ebd041 0x7e6184cb80
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x298a58ebd041 0x7e6184cc60
	void SetAutoWrapText(bool InAutoTextWrap);// 0x298958ebd041 0x7e6184cd40
	FText GetText();// 0x298858ebd041 0x7e6184ce20
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x298758ebd041 0x7e6184cf00
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x298658ebd041 0x7e6184cfe0

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x128, Size: 0x4] 0x7e61941280
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1] 0x7e61941300
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1] 0x7e61941380
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1] 0x7e61941400
	SlateBrushAsset* PieceImage;//[Offset: 0x130, Size: 0x8] 0x7e61941480
	SlateBrush Image;//[Offset: 0x140, Size: 0xc0] 0x7e61941500
	void SetNumberOfPieces(int InNumberOfPieces);// 0x299758ebd041 0x7e6184f660
	void SetAnimateVertically(bool bInAnimateVertically);// 0x299658ebd041 0x7e6184f740
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0x299558ebd041 0x7e6184f820
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0x299458ebd041 0x7e6184f900

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0xb40, Size: 0x4] 0x7e61942f80
	float EntryWidth;//[Offset: 0xb44, Size: 0x4] 0x7e61943000
	enum TileAlignment;//[Offset: 0xb48, Size: 0x1] 0x7e6189f420
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49, Size: 0x1] 0x7e61943100
	void SetEntryWidth(float NewWidth);// 0x299b58ebd041 0x7e6184f2e0
	void SetEntryHeight(float NewHeight);// 0x299a58ebd041 0x7e6184f3c0
	float GetEntryWidth();// 0x299958ebd041 0x7e6184f4a0
	float GetEntryHeight();// 0x299858ebd041 0x7e6184f580

--------------------------------
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object
	delegate BP_OnGetItemChildren;//[Offset: 0xb50, Size: 0x10] 0x7e61942d80
	delegate BP_OnItemExpansionChanged;//[Offset: 0xb60, Size: 0x10] 0x7e61942e00
	void SetItemExpansion(Object* Item, bool bExpandItem);// 0x299e58ebd041 0x7e6184f040
	void ExpandAll();// 0x299d58ebd041 0x7e6184f120
	void CollapseAll();// 0x299c58ebd041 0x7e6184f200

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0x13c, Size: 0x10] 0x7e61942500
	float MinDesiredSlotWidth;//[Offset: 0x14c, Size: 0x4] 0x7e61942580
	float MinDesiredSlotHeight;//[Offset: 0x150, Size: 0x4] 0x7e61942600
	void SetSlotPadding(Margin InSlotPadding);// 0x29a458ebd041 0x7e6184eb00
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0x29a358ebd041 0x7e6184ebe0
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0x29a258ebd041 0x7e6184ecc0
	UniformGridSlot* AddChildToUniformGrid(Widget* Content, int InRow, int InColumn);// 0x29a158ebd041 0x7e6184eda0

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1] 0x7e61944200
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1] 0x7e61942180
	int Row;//[Offset: 0x3c, Size: 0x4] 0x7e61942200
	int Column;//[Offset: 0x40, Size: 0x4] 0x7e61942280
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29a858ebd041 0x7e6184e780
	void SetRow(int InRow);// 0x29a758ebd041 0x7e6184e860
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29a658ebd041 0x7e6184e940
	void SetColumn(int InColumn);// 0x29a558ebd041 0x7e6184ea20

--------------------------------
Class: UserWidgetBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x2a0458ebd041 0x7e61954060

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8] 0x7e61949e80
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x7e61949f00
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x7e61949f80
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x7e6194a000
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a0858ebd041 0x7e61953ce0
	void SetSize(SlateChildSize InSize);// 0x2a0758ebd041 0x7e61953dc0
	void SetPadding(Margin InPadding);// 0x2a0658ebd041 0x7e61953ea0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a0558ebd041 0x7e61953f80

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor BackgroundColor;//[Offset: 0x13c, Size: 0x10] 0x7e61949b00
	Actor* Spawn(class Actor ActorClass);// 0x2a0e58ebd041 0x7e61957160
	void SetViewRotation(Rotator Rotation);// 0x2a0d58ebd041 0x7e61957240
	void SetViewLocation(Vector Location);// 0x2a4e58ebd041 0x7e61957320
	Rotator GetViewRotation();// 0x2a0b58ebd041 0x7e61953a40
	World* GetViewportWorld();// 0x2a0a58ebd041 0x7e61953b20
	Vector GetViewLocation();// 0x2a0958ebd041 0x7e61953c00

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object
	enum GetValue();// 0x2a0f58ebd041 0x7e61957080

--------------------------------
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7e6189ea20

--------------------------------
Class: BlueprintWidgetAnimationDelegateBinding
	enum Action;//[Offset: 0x0, Size: 0x1] 0x7e84dd7f40
	FName AnimationToBind;//[Offset: 0x4, Size: 0x8] 0x7e615bca80
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x7e615bcb00
	FName UserTag;//[Offset: 0x14, Size: 0x8] 0x7e615bcb80

--------------------------------
Class: WidgetAnimationPlayCallbackProxy.Object
	delegate Finished;//[Offset: 0x28, Size: 0x10] 0x7e6194aa00
	WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x2a1958ebd041 0x7e619567c0
	WidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x2a1858ebd041 0x7e619568a0

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0x2a1a58ebd041 0x7e619566e0

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	WidgetTree* WidgetTree;//[Offset: 0x3b8, Size: 0x8] 0x7e6194a700
	bool bClassRequiresNativeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1] 0x7e6194a780
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x3c8, Size: 0x10] 0x7e6189e840
	WidgetAnimation*[] Animations;//[Offset: 0x3d8, Size: 0x10] 0x7e6189e8e0
	FName[] NamedSlots;//[Offset: 0x3e8, Size: 0x10] 0x7e6189e980

--------------------------------
Class: DelegateRuntimeBinding
	FString ObjectName;//[Offset: 0x0, Size: 0x10] 0x7e615bc780
	FName PropertyName;//[Offset: 0x10, Size: 0x8] 0x7e615bc800
	FName FunctionName;//[Offset: 0x18, Size: 0x8] 0x7e615bc880
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0x28] 0x7e615bc900
	enum Kind;//[Offset: 0x48, Size: 0x1] 0x7e84dd7fe0

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	EventReply UnlockMouse(out EventReply Reply);// 0x114e58ebd041 0x7e6143dc20
	EventReply Unhandled();// 0x114c58ebd041 0x7e6143dd00
	void SetWindowTitleBarState(Widget* TitleBarContent, enum Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);// 0x114b58ebd041 0x7e6143dde0
	void SetWindowTitleBarOnCloseClickedDelegate(delegate Delegate);// 0x114a58ebd041 0x7e6143dec0
	void SetWindowTitleBarCloseButtonActive(bool bActive);// 0x114958ebd041 0x7e6143dfa0
	EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0x114858ebd041 0x7e6143e080
	EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0x114758ebd041 0x7e6143e160
	void SetInputMode_UIOnlyEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode);// 0x114658ebd041 0x7e6143e240
	void SetInputMode_GameOnly(PlayerController* PlayerController);// 0x114458ebd041 0x7e6143e320
	void SetInputMode_GameAndUIEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0x114358ebd041 0x7e6143e400
	bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0x114258ebd041 0x7e6143e4e0
	void SetFocusToGameViewport();// 0x114158ebd041 0x7e6143e5c0
	void SetColorVisionDeficiencyType(enum Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);// 0x138758ebd041 0x7e6143e6a0
	void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0x113f58ebd041 0x7e6143adc0
	void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0x113e58ebd041 0x7e6143aea0
	void RestorePreviousWindowTitleBarState();// 0x113d58ebd041 0x7e6143af80
	EventReply ReleaseMouseCapture(out EventReply Reply);// 0x113c58ebd041 0x7e6143b060
	EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0x113b58ebd041 0x7e6143b140
	void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();// 0x113a58ebd041 0x7e6143b220
	SlateBrush NoResourceBrush();// 0x113958ebd041 0x7e6143b300
	SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0x113858ebd041 0x7e6143b3e0
	SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0x113758ebd041 0x7e6143b4c0
	SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0x113658ebd041 0x7e6143b5a0
	EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0x113558ebd041 0x7e6143b680
	bool IsDragDropping();// 0x113458ebd041 0x7e6143b760
	EventReply Handled();// 0x113358ebd041 0x7e6143b840
	void GetSafeZonePadding(Object* WorldContextObject, out Vector4 SafePadding, out Vector2D SafePaddingScale, out Vector4 SpillOverPadding);// 0x113158ebd041 0x7e6143b920
	KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0x113058ebd041 0x7e6143ba00
	InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0x112e58ebd041 0x7e6143bae0
	InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0x112c58ebd041 0x7e6143bbc0
	InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0x112a58ebd041 0x7e6143bca0
	InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0x112958ebd041 0x7e6143bd80
	MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0x112858ebd041 0x7e6143be60
	DragDropOperation* GetDragDroppingContent();// 0x112758ebd041 0x7e6143bf40
	Texture2D* GetBrushResourceAsTexture2D(out const SlateBrush Brush);// 0x112658ebd041 0x7e6143c020
	MaterialInterface* GetBrushResourceAsMaterial(out const SlateBrush Brush);// 0x112558ebd041 0x7e6143c100
	Object* GetBrushResource(out const SlateBrush Brush);// 0x112458ebd041 0x7e6143c1e0
	void GetAllWidgetsWithInterface(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class Interface Interface, bool TopLevelOnly);// 0x112358ebd041 0x7e6143c2c0
	void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0x112258ebd041 0x7e6143c3a0
	EventReply EndDragDrop(out EventReply Reply);// 0x112158ebd041 0x7e6143c480
	void DrawTextFormatted(out PaintContext Context, out const FText Text, Vector2D Position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0x112058ebd041 0x7e6143c560
	void DrawText(out PaintContext Context, FString InString, Vector2D Position, LinearColor Tint);// 0x111f58ebd041 0x7e6143c640
	void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x111e58ebd041 0x7e6143c720
	void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x111c58ebd041 0x7e6143c800
	void DrawBox(out PaintContext Context, Vector2D Position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0x111b58ebd041 0x7e6143c8e0
	void DismissAllMenus();// 0x117858ebd041 0x7e6143c9c0
	EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0x111958ebd041 0x7e614390e0
	EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0x111858ebd041 0x7e614391c0
	DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0x111758ebd041 0x7e614392a0
	UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0x111658ebd041 0x7e61439380
	EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0x111558ebd041 0x7e61439460
	EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0x111458ebd041 0x7e61439540
	EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0x111358ebd041 0x7e61439620
	void CancelDragDrop();// 0x111158ebd041 0x7e61439700

--------------------------------
Class: NavigationEvent.InputEvent

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x559, Size: 0x1] 0x7e6189fc40
	enum TimingPolicy;//[Offset: 0x55a, Size: 0x1] 0x7e6189fce0
	class UserWidget* WidgetClass;//[Offset: 0x560, Size: 0x8] 0x7e6189fd80
	IntPoint DrawSize;//[Offset: 0x568, Size: 0x8] 0x7e6194e580
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1] 0x7e6194e600
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 0x1] 0x7e6194e680
	float RedrawTime;//[Offset: 0x574, Size: 0x4] 0x7e6194e700
	IntPoint CurrentDrawSize;//[Offset: 0x580, Size: 0x8] 0x7e6194c680
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1] 0x7e6194c700
	Vector2D Pivot;//[Offset: 0x590, Size: 0x10] 0x7e6194c780
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1] 0x7e6194c800
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 0x1] 0x7e6194c880
	enum WindowVisibility;//[Offset: 0x5a2, Size: 0x1] 0x7e6189fe20
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a3, Size: 0x1] 0x7e6194c980
	LocalPlayer* OwnerPlayer;//[Offset: 0x5a8, Size: 0x8] 0x7e6194ca00
	LinearColor BackgroundColor;//[Offset: 0x5b0, Size: 0x10] 0x7e6194ca80
	LinearColor TintColorAndOpacity;//[Offset: 0x5c0, Size: 0x10] 0x7e6194cb00
	float OpacityFromTexture;//[Offset: 0x5d0, Size: 0x4] 0x7e6194cb80
	enum BlendMode;//[Offset: 0x5d4, Size: 0x1] 0x7e6189fec0
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 0x1] 0x7e6194cc80
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d6, Size: 0x1] 0x7e6194cd00
	BodySetup* BodySetup;//[Offset: 0x5d8, Size: 0x8] 0x7e6194cd80
	MaterialInterface* TranslucentMaterial;//[Offset: 0x5e0, Size: 0x8] 0x7e6194ce00
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x5e8, Size: 0x8] 0x7e6194ce80
	MaterialInterface* OpaqueMaterial;//[Offset: 0x5f0, Size: 0x8] 0x7e6194cf00
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x5f8, Size: 0x8] 0x7e6194cf80
	MaterialInterface* MaskedMaterial;//[Offset: 0x600, Size: 0x8] 0x7e6194d000
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x608, Size: 0x8] 0x7e6194d080
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x610, Size: 0x8] 0x7e6194d100
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x618, Size: 0x8] 0x7e6194d180
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 0x1] 0x7e6194d200
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 0x1] 0x7e6194d280
	FName SharedLayerName;//[Offset: 0x624, Size: 0x8] 0x7e6194d300
	int LayerZOrder;//[Offset: 0x62c, Size: 0x4] 0x7e6194d380
	enum GeometryMode;//[Offset: 0x630, Size: 0x1] 0x7e6189ff60
	float CylinderArcAngle;//[Offset: 0x634, Size: 0x4] 0x7e6194d480
	enum TickMode;//[Offset: 0x638, Size: 0x1] 0x7e6189e340
	UserWidget* Widget;//[Offset: 0x668, Size: 0x8] 0x7e6194d580
	void SetWindowVisibility(enum InVisibility);// 0x2a4058ebd041 0x7e61957f60
	void SetWindowFocusable(bool bInWindowFocusable);// 0x2a3f58ebd041 0x7e61958040
	void SetWidgetSpace(enum NewSpace);// 0x2a3e58ebd041 0x7e61958120
	void SetWidget(UserWidget* Widget);// 0x2a3d58ebd041 0x7e61958200
	void SetTwoSided(const bool bWantTwoSided);// 0x2a3c58ebd041 0x7e619582e0
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x2a3b58ebd041 0x7e619583c0
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x2a3a58ebd041 0x7e619584a0
	void SetTickMode(enum InTickMode);// 0x2a3958ebd041 0x7e61958580
	void SetRedrawTime(float InRedrawTime);// 0x2a3858ebd041 0x7e61958660
	void SetPivot(out const Vector2D InPivot);// 0x2a3758ebd041 0x7e61958740
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x2a3658ebd041 0x7e61958820
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x2a3558ebd041 0x7e61958900
	void SetGeometryMode(enum InGeometryMode);// 0x2a3458ebd041 0x7e619589e0
	void SetDrawSize(Vector2D Size);// 0x2a3358ebd041 0x7e61958ac0
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x2a3258ebd041 0x7e61958ba0
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x2a3158ebd041 0x7e61958c80
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x2a3058ebd041 0x7e61958d60
	void RequestRenderUpdate();// 0x2a2f58ebd041 0x7e61958e40
	void RequestRedraw();// 0x2a2e58ebd041 0x7e61958f20
	bool IsWidgetVisible();// 0x2a6f58ebd041 0x7e61959000
	enum GetWindowVisiblility();// 0x2a2c58ebd041 0x7e61955720
	bool GetWindowFocusable();// 0x2a2b58ebd041 0x7e61955800
	enum GetWidgetSpace();// 0x2a2a58ebd041 0x7e619558e0
	UserWidget* GetWidget();// 0x2a2958ebd041 0x7e619559c0
	UserWidget* GetUserWidgetObject();// 0x2a2858ebd041 0x7e61955aa0
	bool GetTwoSided();// 0x2a2758ebd041 0x7e61955b80
	bool GetTickWhenOffscreen();// 0x2a2658ebd041 0x7e61955c60
	TextureRenderTarget2D* GetRenderTarget();// 0x2a2558ebd041 0x7e61955d40
	float GetRedrawTime();// 0x2a2458ebd041 0x7e61955e20
	Vector2D GetPivot();// 0x2a2358ebd041 0x7e61955f00
	LocalPlayer* GetOwnerPlayer();// 0x2a2258ebd041 0x7e61955fe0
	MaterialInstanceDynamic* GetMaterialInstance();// 0x2a2158ebd041 0x7e619560c0
	bool GetManuallyRedraw();// 0x2a2058ebd041 0x7e619561a0
	enum GetGeometryMode();// 0x2a1f58ebd041 0x7e61956280
	Vector2D GetDrawSize();// 0x2a1e58ebd041 0x7e61956360
	bool GetDrawAtDesiredSize();// 0x2a1d58ebd041 0x7e61956440
	float GetCylinderArcAngle();// 0x2a1c58ebd041 0x7e61956520
	Vector2D GetCurrentDrawSize();// 0x2a1b58ebd041 0x7e61956600

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x2b0, Size: 0x10] 0x7e6194f180
	int VirtualUserIndex;//[Offset: 0x2d0, Size: 0x4] 0x7e6194f200
	int PointerIndex;//[Offset: 0x2d4, Size: 0x4] 0x7e6194f280
	byte TraceChannel;//[Offset: 0x2d8, Size: 0x1] 0x7e6194f300
	float InteractionDistance;//[Offset: 0x2dc, Size: 0x4] 0x7e6194f380
	enum InteractionSource;//[Offset: 0x2e0, Size: 0x1] 0x7e6189fba0
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1] 0x7e6194f480
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 0x1] 0x7e6194f500
	float DebugSphereLineThickness;//[Offset: 0x2e4, Size: 0x4] 0x7e6194f580
	float DebugLineThickness;//[Offset: 0x2e8, Size: 0x4] 0x7e6194f600
	LinearColor DebugColor;//[Offset: 0x2ec, Size: 0x10] 0x7e6194f680
	HitResult CustomHitResult;//[Offset: 0x378, Size: 0xe8] 0x7e6194f700
	Vector2D LocalHitLocation;//[Offset: 0x460, Size: 0x10] 0x7e6194f780
	Vector2D LastLocalHitLocation;//[Offset: 0x470, Size: 0x10] 0x7e6194d700
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x480, Size: 0x8] 0x7e6194d780
	HitResult LastHitResult;//[Offset: 0x488, Size: 0xe8] 0x7e6194d800
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1] 0x7e6194d880
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 0x1] 0x7e6194d900
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 0x1] 0x7e6194d980
	void SetFocus(Widget* FocusWidget);// 0x2a4f58ebd041 0x7e6195ac00
	void SetCustomHitResult(out const HitResult HitResult);// 0x2a9058ebd041 0x7e6195ace0
	bool SendKeyChar(FString Characters, bool bRepeat);// 0x2a4d58ebd041 0x7e61957400
	void ScrollWheel(float ScrollDelta);// 0x2a4c58ebd041 0x7e619574e0
	void ReleasePointerKey(Key Key);// 0x2a4b58ebd041 0x7e619575c0
	bool ReleaseKey(Key Key);// 0x2a4a58ebd041 0x7e619576a0
	void PressPointerKey(Key Key);// 0x2a4958ebd041 0x7e61957780
	bool PressKey(Key Key, bool bRepeat);// 0x2a4858ebd041 0x7e61957860
	bool PressAndReleaseKey(Key Key);// 0x2a4758ebd041 0x7e61957940
	bool IsOverInteractableWidget();// 0x2a4658ebd041 0x7e61957a20
	bool IsOverHitTestVisibleWidget();// 0x2a4558ebd041 0x7e61957b00
	bool IsOverFocusableWidget();// 0x2a4458ebd041 0x7e61957be0
	HitResult GetLastHitResult();// 0x2a4358ebd041 0x7e61957cc0
	WidgetComponent* GetHoveredWidgetComponent();// 0x2a4258ebd041 0x7e61957da0
	Vector2D Get2DHitLocation();// 0x2a4158ebd041 0x7e61957e80

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object
	WrapBoxSlot* SlotAsWrapBoxSlot(Widget* Widget);// 0x2a6558ebd041 0x7e619598c0
	WidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(Widget* Widget);// 0x2a6458ebd041 0x7e619599a0
	VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0x2a6358ebd041 0x7e61959a80
	UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0x2a6258ebd041 0x7e61959b60
	SizeBoxSlot* SlotAsSizeBoxSlot(Widget* Widget);// 0x2a6158ebd041 0x7e61959c40
	ScrollBoxSlot* SlotAsScrollBoxSlot(Widget* Widget);// 0x2a6058ebd041 0x7e61959d20
	ScaleBoxSlot* SlotAsScaleBoxSlot(Widget* Widget);// 0x2a5f58ebd041 0x7e61959e00
	SafeZoneSlot* SlotAsSafeBoxSlot(Widget* Widget);// 0x2a5e58ebd041 0x7e61959ee0
	OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0x2a5d58ebd041 0x7e61959fc0
	HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0x2a5c58ebd041 0x7e6195a0a0
	GridSlot* SlotAsGridSlot(Widget* Widget);// 0x2a5b58ebd041 0x7e6195a180
	CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0x2a5a58ebd041 0x7e6195a260
	BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0x2a5958ebd041 0x7e6195a340
	void RemoveAllWidgets(Object* WorldContextObject);// 0x2a5858ebd041 0x7e6195a420
	bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x2a5758ebd041 0x7e6195a500
	Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0x2a5658ebd041 0x7e6195a5e0
	Vector2D GetViewportSize(Object* WorldContextObject);// 0x2a5558ebd041 0x7e6195a6c0
	float GetViewportScale(Object* WorldContextObject);// 0x2a5458ebd041 0x7e6195a7a0
	Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0x2a5358ebd041 0x7e6195a880
	bool GetMousePositionScaledByDPI(PlayerController* Player, out float LocationX, out float LocationY);// 0x2a5258ebd041 0x7e6195a960
	Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0x2a5158ebd041 0x7e6195aa40
	Vector2D GetMousePositionOnPlatform();// 0x2a5058ebd041 0x7e6195ab20

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7e61963180
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e61961100
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 0x4] 0x7e61961180
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x7e61961200
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x7e61961280
	bool bForceNewLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x7e61961300
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a7d58ebd041 0x7e6195bd80
	void SetPadding(Margin InPadding);// 0x2a7c58ebd041 0x7e6195be60
	void SetNewLine(bool InForceNewLine);// 0x2a7b58ebd041 0x7e6195bf40
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a7a58ebd041 0x7e6195c020
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0x2a7958ebd041 0x7e6195c100
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0x2a7858ebd041 0x7e6195c1e0

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x7e61960080
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x7e61960100
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x7e61960180
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a6e58ebd041 0x7e619590e0
	void SetPadding(Margin InPadding);// 0x2a6d58ebd041 0x7e619591c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a6c58ebd041 0x7e619592a0

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x13c, Size: 0x4] 0x7e61960380
	void SetActiveWidgetIndex(int Index);// 0x2a6b58ebd041 0x7e61959380
	void SetActiveWidget(Widget* Widget);// 0x2a6a58ebd041 0x7e61959460
	Widget* GetWidgetAtIndex(int Index);// 0x2a6958ebd041 0x7e61959540
	int GetNumWidgets();// 0x2a6858ebd041 0x7e61959620
	int GetActiveWidgetIndex();// 0x2a6758ebd041 0x7e61959700
	Widget* GetActiveWidget();// 0x2a6658ebd041 0x7e619597e0

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x7e61961e80
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1] 0x7e61961f00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a7158ebd041 0x7e6195c800
	void SetPadding(Margin InPadding);// 0x2a7058ebd041 0x7e6195c8e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2ab158ebd041 0x7e6195c9c0

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x7e61961b80
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x7e61961c00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x7e61961c80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a7458ebd041 0x7e6195c560
	void SetPadding(Margin InPadding);// 0x2a7358ebd041 0x7e6195c640
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a7258ebd041 0x7e6195c720

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x140, Size: 0x10] 0x7e61961700
	float WrapSize;//[Offset: 0x150, Size: 0x4] 0x7e61961780
	bool bExplicitWrapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1] 0x7e61961800
	byte HorizontalAlignment;//[Offset: 0x155, Size: 0x1] 0x7e61961880
	byte Orientation;//[Offset: 0x156, Size: 0x1] 0x7e61961900
	void SetInnerSlotPadding(Vector2D InPadding);// 0x2a7758ebd041 0x7e6195c2c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a7658ebd041 0x7e6195c3a0
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0x2a7558ebd041 0x7e6195c480

--------------------------------
Class: TypedElementAssetDataInterface.Interface.Object
	AssetData GetAssetData(out const ScriptTypedElementHandle InElementHandle);// 0x2a7f58ebd041 0x7e6195bbc0
	AssetData[] GetAllReferencedAssetDatas(out const ScriptTypedElementHandle InElementHandle);// 0x2a7e58ebd041 0x7e6195bca0

--------------------------------
Class: TypedElementHierarchyInterface.Interface.Object
	ScriptTypedElementHandle GetParentElement(out const ScriptTypedElementHandle InElementHandle, const bool bAllowCreate);// 0x2a8158ebd041 0x7e6195ba00
	void GetChildElements(out const ScriptTypedElementHandle InElementHandle, out ScriptTypedElementHandle[] OutElementHandles, const bool bAllowCreate);// 0x2a8058ebd041 0x7e6195bae0

--------------------------------
Class: TypedElementObjectInterface.Interface.Object
	class Object GetObjectClass(out const ScriptTypedElementHandle InElementHandle);// 0x2a8358ebd041 0x7e6195b840
	Object* GetObject(out const ScriptTypedElementHandle InElementHandle);// 0x2a8258ebd041 0x7e6195b920

--------------------------------
Class: TypedElementSelectionInterface.Interface.Object
	bool SelectElement(out const ScriptTypedElementHandle InElementHandle, ScriptTypedElementListProxy InSelectionSet, out const TypedElementSelectionOptions InSelectionOptions);// 0x2a8a58ebd041 0x7e6195b220
	bool IsElementSelected(out const ScriptTypedElementHandle InElementHandle, const ScriptTypedElementListProxy InSelectionSet, out const TypedElementIsSelectedOptions InSelectionOptions);// 0x2a8958ebd041 0x7e6195b300
	ScriptTypedElementHandle GetSelectionElement(out const ScriptTypedElementHandle InElementHandle, const ScriptTypedElementListProxy InCurrentSelection, const enum InSelectionMethod);// 0x2a8858ebd041 0x7e6195b3e0
	bool DeselectElement(out const ScriptTypedElementHandle InElementHandle, ScriptTypedElementListProxy InSelectionSet, out const TypedElementSelectionOptions InSelectionOptions);// 0x2a8758ebd041 0x7e6195b4c0
	bool CanSelectElement(out const ScriptTypedElementHandle InElementHandle, out const TypedElementSelectionOptions InSelectionOptions);// 0x2a8658ebd041 0x7e6195b5a0
	bool CanDeselectElement(out const ScriptTypedElementHandle InElementHandle, out const TypedElementSelectionOptions InSelectionOptions);// 0x2a8558ebd041 0x7e6195b680
	bool AllowSelectionModifiers(out const ScriptTypedElementHandle InElementHandle, const ScriptTypedElementListProxy InSelectionSet);// 0x2a8458ebd041 0x7e6195b760

--------------------------------
Class: TypedElementSelectionSetLibrary.Object
	bool SetSelectionFromList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionOptions SelectionOptions);// 0x2a8f58ebd041 0x7e6195adc0
	bool SelectElementsFromList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionOptions SelectionOptions);// 0x2a8e58ebd041 0x7e6195aea0
	ScriptTypedElementListProxy GetNormalizedSelection(TypedElementSelectionSet* SelectionSet, const TypedElementSelectionNormalizationOptions NormalizationOptions);// 0x2a8d58ebd041 0x7e6195af80
	ScriptTypedElementListProxy GetNormalizedElementList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionNormalizationOptions NormalizationOptions);// 0x2a8c58ebd041 0x7e6195b060
	bool DeselectElementsFromList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionOptions SelectionOptions);// 0x2a8b58ebd041 0x7e6195b140

--------------------------------
Class: TypedElementSelectionNormalizationOptions
	bool bExpandGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615be080
	bool bFollowAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e615be100

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x278, Size: 0x4] 0x7e61965280
	float CraneYaw;//[Offset: 0x27c, Size: 0x4] 0x7e61963200
	float CraneArmLength;//[Offset: 0x280, Size: 0x4] 0x7e61963280
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1] 0x7e61963300
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1] 0x7e61963380
	SceneComponent* TransformComponent;//[Offset: 0x288, Size: 0x8] 0x7e61963400
	SceneComponent* CraneYawControl;//[Offset: 0x290, Size: 0x8] 0x7e61963480
	SceneComponent* CranePitchControl;//[Offset: 0x298, Size: 0x8] 0x7e61963500
	SceneComponent* CraneCameraMount;//[Offset: 0x2a0, Size: 0x8] 0x7e61963580

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x278, Size: 0x4] 0x7e61964f80
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x7e61965000
	SceneComponent* TransformComponent;//[Offset: 0x280, Size: 0x8] 0x7e61965080
	SplineComponent* RailSplineComponent;//[Offset: 0x288, Size: 0x8] 0x7e61965100
	SceneComponent* RailCameraMount;//[Offset: 0x290, Size: 0x8] 0x7e61965180
	SplineComponent* GetRailSplineComponent();// 0x2acd58ebd041 0x7e6195e6a0

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x960, Size: 0x68] 0x7e61964a00
	CineCameraComponent* GetCineCameraComponent();// 0x2a9258ebd041 0x7e6195e4e0

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e615bdd80
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e615bde00
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4] 0x7e615bde80
	Actor* ActorToTrack;//[Offset: 0x20, Size: 0x28] 0x7e615bdf00
	Vector RelativeOffset;//[Offset: 0x48, Size: 0x18] 0x7e615bdf80
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7e615be000

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0xa10, Size: 0xc] 0x7e61967300
	CameraFilmbackSettings Filmback;//[Offset: 0xa1c, Size: 0xc] 0x7e61967380
	CameraLensSettings LensSettings;//[Offset: 0xa28, Size: 0x18] 0x7e61965300
	CameraFocusSettings FocusSettings;//[Offset: 0xa40, Size: 0x68] 0x7e61965380
	float CurrentFocalLength;//[Offset: 0xaa8, Size: 0x4] 0x7e61965400
	float CurrentAperture;//[Offset: 0xaac, Size: 0x4] 0x7e61965480
	float CurrentFocusDistance;//[Offset: 0xab0, Size: 0x4] 0x7e61965500
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0xac0, Size: 0x10] 0x7e619713c0
	NamedLensPreset[] LensPresets;//[Offset: 0xad0, Size: 0x10] 0x7e61971460
	FString DefaultFilmbackPresetName;//[Offset: 0xae0, Size: 0x10] 0x7e61965680
	FString DefaultFilmbackPreset;//[Offset: 0xaf0, Size: 0x10] 0x7e61965700
	FString DefaultLensPresetName;//[Offset: 0xb00, Size: 0x10] 0x7e61965780
	float DefaultLensFocalLength;//[Offset: 0xb10, Size: 0x4] 0x7e61965800
	float DefaultLensFStop;//[Offset: 0xb14, Size: 0x4] 0x7e61965880
	void SetLensPresetByName(FString InPresetName);// 0x2aa958ebd041 0x7e6195d0c0
	void SetFilmbackPresetByName(FString InPresetName);// 0x2aa858ebd041 0x7e6195d1a0
	void SetCurrentFocalLength(float InFocalLength);// 0x2aa758ebd041 0x7e6195d280
	float GetVerticalFieldOfView();// 0x2aa658ebd041 0x7e6195d360
	NamedLensPreset[] GetLensPresetsCopy();// 0x2aa558ebd041 0x7e6195d440
	FString GetLensPresetName();// 0x2aa458ebd041 0x7e6195d520
	float GetHorizontalFieldOfView();// 0x2aa358ebd041 0x7e6195d600
	NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0x2aa258ebd041 0x7e6195d6e0
	FString GetFilmbackPresetName();// 0x2aa158ebd041 0x7e6195d7c0
	FString GetDefaultFilmbackPresetName();// 0x2aa058ebd041 0x7e6195d8a0

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7e615bd700
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18] 0x7e615bd780

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7e615bdb00
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc] 0x7e615bdb80

--------------------------------
Class: AudioLinkBlueprintInterface.Interface.Object
	void StopLink();// 0x2aad58ebd041 0x7e6195cd40
	void SetLinkSound(SoundBase* NewSound);// 0x2aac58ebd041 0x7e6195ce20
	void PlayLink(float StartTime);// 0x2aab58ebd041 0x7e6195cf00
	bool IsLinkPlaying();// 0x2aaa58ebd041 0x7e6195cfe0

--------------------------------
Class: AudioDeviceNotificationSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	delegate DefaultCaptureDeviceChanged;//[Offset: 0x38, Size: 0x10] 0x7e61966e80
	delegate DefaultRenderDeviceChanged;//[Offset: 0x60, Size: 0x10] 0x7e61966f00
	delegate DeviceAdded;//[Offset: 0x88, Size: 0x10] 0x7e61966f80
	delegate DeviceRemoved;//[Offset: 0xb0, Size: 0x10] 0x7e61967000
	delegate DeviceStateChanged;//[Offset: 0xd8, Size: 0x10] 0x7e61967080
	delegate DeviceSwitched;//[Offset: 0x100, Size: 0x10] 0x7e61967100

--------------------------------
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object
	float TrimAudioCache(float InMegabytesToFree);// 0x2ad358ebd041 0x7e61981740
	void SwapAudioOutputDevice(const Object* WorldContextObject, FString NewDeviceId, out const delegate OnCompletedDeviceSwap);// 0x2ad258ebd041 0x7e61981820
	SoundWave* StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundSubmix* SubmixToRecord, SoundWave* ExistingSoundWaveToOverwrite);// 0x2ad158ebd041 0x7e61981900
	void StopAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x2ad058ebd041 0x7e619819e0
	void StopAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToStopAnalyzing);// 0x2acf58ebd041 0x7e61981ac0
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration, SoundSubmix* SubmixToRecord);// 0x2ace58ebd041 0x7e61981ba0
	void StartAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x2b0f58ebd041 0x7e61981c80
	void StartAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToAnalyze, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x2acc58ebd041 0x7e6195e780
	void SetSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset*[] SubmixEffectPresetChain, float FadeTimeSec);// 0x2acb58ebd041 0x7e6195e860
	void SetBypassSourceEffectChainEntry(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex, bool bBypassed);// 0x2aca58ebd041 0x7e6195e940
	void ResumeRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x2ac958ebd041 0x7e6195ea20
	void ReplaceSubmixEffect(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac858ebd041 0x7e6195eb00
	void ReplaceSoundEffectSubmix(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac758ebd041 0x7e6195ebe0
	void RemoveSubmixEffectPresetAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0x2ac658ebd041 0x7e6195ecc0
	void RemoveSubmixEffectPreset(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac558ebd041 0x7e6195eda0
	void RemoveSubmixEffectAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0x2ac458ebd041 0x7e6195ee80
	void RemoveSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac358ebd041 0x7e6195ef60
	void RemoveSourceEffectFromPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex);// 0x2ac258ebd041 0x7e6195f040
	void RemoveMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac158ebd041 0x7e6195f120
	void PrimeSoundForPlayback(SoundWave* SoundWave, const delegate OnLoadCompletion);// 0x2ac058ebd041 0x7e6195f200
	void PrimeSoundCueForPlayback(SoundCue* SoundCue);// 0x2abf58ebd041 0x7e6195f2e0
	void PauseRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x2abe58ebd041 0x7e6195f3c0
	SoundSubmixSpectralAnalysisBandSettings[] MakePresetSpectralAnalysisBandSettings(enum InBandPresetType, int InNumBands, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x2abd58ebd041 0x7e6195f4a0
	SoundSubmixSpectralAnalysisBandSettings[] MakeMusicalSpectralAnalysisBandSettings(int InNumSemitones, enum InStartingMusicalNote, int InStartingOctave, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x2abc58ebd041 0x7e6195f580
	SoundSubmixSpectralAnalysisBandSettings[] MakeFullSpectrumSpectralAnalysisBandSettings(int InNumBands, float InMinimumFrequency, float InMaximumFrequency, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x2abb58ebd041 0x7e6195f660
	bool IsAudioBusActive(const Object* WorldContextObject, AudioBus* AudioBus);// 0x2aba58ebd041 0x7e6195f740
	void GetPhaseForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Phases, SoundSubmix* SubmixToAnalyze);// 0x2ab958ebd041 0x7e6195f820
	int GetNumberOfEntriesInSourceEffectChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain);// 0x2ab858ebd041 0x7e6195f900
	void GetMagnitudeForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Magnitudes, SoundSubmix* SubmixToAnalyze);// 0x2ab758ebd041 0x7e6195f9e0
	void GetCurrentAudioOutputDeviceName(const Object* WorldContextObject, out const delegate OnObtainCurrentDeviceEvent);// 0x2ab658ebd041 0x7e6195fac0
	void GetAvailableAudioOutputDevices(const Object* WorldContextObject, out const delegate OnObtainDevicesEvent);// 0x2ab558ebd041 0x7e6195fba0
	FString Conv_AudioOutputDeviceInfoToString(out const AudioOutputDeviceInfo Info);// 0x2ab458ebd041 0x7e6195fc80
	void ClearSubmixEffects(const Object* WorldContextObject, SoundSubmix* SoundSubmix);// 0x2ab358ebd041 0x7e6195fd60
	void ClearSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, float FadeTimeSec);// 0x2ab258ebd041 0x7e6195fe40
	void ClearMasterSubmixEffects(const Object* WorldContextObject);// 0xffffff8158ebd000 0x7e6195ff20
	int AddSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ab058ebd041 0x7e6195caa0
	void AddSourceEffectToPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, SourceEffectChainEntry Entry);// 0x2aaf58ebd041 0x7e6195cb80
	void AddMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2aae58ebd041 0x7e6195cc60

--------------------------------
Class: AudioOutputDeviceInfo
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7e6144e100
	FString DeviceID;//[Offset: 0x10, Size: 0x10] 0x7e6144e180
	int NumChannels;//[Offset: 0x20, Size: 0x4] 0x7e6144e200
	int SampleRate;//[Offset: 0x24, Size: 0x4] 0x7e6144e300
	enum Format;//[Offset: 0x28, Size: 0x1] 0x7e848568c0
	enum[] OutputChannelArray;//[Offset: 0x30, Size: 0x10] 0x7e84856780
	bool bIsSystemDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7e6144e480
	bool bIsCurrentDevice;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x7e6144e500

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0xf0, Size: 0x60] 0x7e6196ce80
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings Settings);// 0x2af058ebd041 0x7e619837a0
	void SetExternalSubmix(SoundSubmix* Submix);// 0x2aef58ebd041 0x7e61983880
	void SetAudioBus(AudioBus* AudioBus);// 0x2b3058ebd041 0x7e61983960
	void ResetKey();// 0x2aed58ebd041 0x7e61980080

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x7e84dd86c0
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x7e84dd8620
	enum LinkMode;//[Offset: 0x2, Size: 0x1] 0x7e84dd8580
	float InputGainDb;//[Offset: 0x4, Size: 0x4] 0x7e615bfe80
	float ThresholdDb;//[Offset: 0x8, Size: 0x4] 0x7e615bff00
	float Ratio;//[Offset: 0xc, Size: 0x4] 0x7e615bff80
	float KneeBandwidthDb;//[Offset: 0x10, Size: 0x4] 0x7e615be780
	float LookAheadMsec;//[Offset: 0x14, Size: 0x4] 0x7e615be800
	float AttackTimeMsec;//[Offset: 0x18, Size: 0x4] 0x7e615be880
	float ReleaseTimeMsec;//[Offset: 0x1c, Size: 0x4] 0x7e615be900
	enum KeySource;//[Offset: 0x20, Size: 0x1] 0x7e84dd84e0
	AudioBus* ExternalAudioBus;//[Offset: 0x28, Size: 0x8] 0x7e615bea00
	SoundSubmix* ExternalSubmix;//[Offset: 0x30, Size: 0x8] 0x7e615bea80
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7e615beb00
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7e615beb80
	bool bBypass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x7e615bec00
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x7e615bec80
	float KeyGainDb;//[Offset: 0x3c, Size: 0x4] 0x7e615bed00
	float OutputGainDb;//[Offset: 0x40, Size: 0x4] 0x7e615bed80
	SubmixEffectDynamicProcessorFilterSettings KeyHighshelf;//[Offset: 0x44, Size: 0xc] 0x7e615bee00
	SubmixEffectDynamicProcessorFilterSettings KeyLowshelf;//[Offset: 0x50, Size: 0xc] 0x7e615bee80

--------------------------------
Class: SubmixEffectDynamicProcessorFilterSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e615bef00
	float Cutoff;//[Offset: 0x4, Size: 0x4] 0x7e615bef80
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x7e615bf000

--------------------------------
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectSubmixEQSettings Settings;//[Offset: 0xa0, Size: 0x10] 0x7e6196cd80
	void SetSettings(out const SubmixEffectSubmixEQSettings InSettings);// 0x2af158ebd041 0x7e619836c0

--------------------------------
Class: SubmixEffectSubmixEQSettings
	SubmixEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x7e84dd8760

--------------------------------
Class: SubmixEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x7e615bfb00
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x7e615bfb80
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x7e615bfc00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7e615bfc80

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectReverbSettings Settings;//[Offset: 0xcc, Size: 0x40] 0x7e6196cb00
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0x2af358ebd041 0x7e61983500
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0x2af258ebd041 0x7e619835e0

--------------------------------
Class: SubmixEffectReverbSettings
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615c0b80
	float ReflectionsDelay;//[Offset: 0x4, Size: 0x4] 0x7e615c0c00
	float GainHF;//[Offset: 0x8, Size: 0x4] 0x7e615c0c80
	float ReflectionsGain;//[Offset: 0xc, Size: 0x4] 0x7e615c0d00
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7e615c0d80
	float LateDelay;//[Offset: 0x14, Size: 0x4] 0x7e615c0e00
	float DecayTime;//[Offset: 0x18, Size: 0x4] 0x7e615c0e80
	float Density;//[Offset: 0x1c, Size: 0x4] 0x7e615c0f00
	float Diffusion;//[Offset: 0x20, Size: 0x4] 0x7e615c0f80
	float AirAbsorptionGainHF;//[Offset: 0x24, Size: 0x4] 0x7e615c1000
	float DecayHFRatio;//[Offset: 0x28, Size: 0x4] 0x7e615c1080
	float LateGain;//[Offset: 0x2c, Size: 0x4] 0x7e615bf800
	float Gain;//[Offset: 0x30, Size: 0x4] 0x7e615bf880
	float WetLevel;//[Offset: 0x34, Size: 0x4] 0x7e615bf900
	float DryLevel;//[Offset: 0x38, Size: 0x4] 0x7e615bf980
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7e615bfa00

--------------------------------
Class: QuartzSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsQuartzEnabled();// 0x2b0658ebd041 0x7e61982460
	bool IsClockRunning(const Object* WorldContextObject, FName ClockName);// 0x2b0558ebd041 0x7e61982540
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0x2b0458ebd041 0x7e61982620
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0x2b0358ebd041 0x7e61982700
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0x2b0258ebd041 0x7e619827e0
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0x2b0158ebd041 0x7e619828c0
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0x2b0058ebd041 0x7e619829a0
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0x2aff58ebd041 0x7e61982a80
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0x2afe58ebd041 0x7e61982b60
	float GetEstimatedClockRunTime(const Object* WorldContextObject, out const FName InClockName);// 0x2afd58ebd041 0x7e61982c40
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, FName ClockName, out const enum QuantizationType, float Multiplier);// 0x2afc58ebd041 0x7e61982d20
	QuartzTransportTimeStamp GetCurrentClockTimestamp(const Object* WorldContextObject, out const FName InClockName);// 0x2afb58ebd041 0x7e61982e00
	float GetAudioRenderThreadToGameThreadMinLatency();// 0x2afa58ebd041 0x7e61982ee0
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0x2af958ebd041 0x7e61982fc0
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0x2af858ebd041 0x7e619830a0
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0x2af758ebd041 0x7e61983180
	void DeleteClockByName(const Object* WorldContextObject, FName ClockName);// 0x2af658ebd041 0x7e61983260
	void DeleteClockByHandle(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle);// 0x2af558ebd041 0x7e61983340
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists, bool bUseAudioEngineClockManager);// 0x2af458ebd041 0x7e61983420

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 0x18] 0x7e6165f100
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7e6165f180

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 0x4] 0x7e6165f780
	enum BeatType;//[Offset: 0x4, Size: 0x1] 0x7e84e5d580
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 0x10] 0x7e84e5d620

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 0x4] 0x7e6165d800
	enum PulseDuration;//[Offset: 0x4, Size: 0x1] 0x7e84e5d6c0

--------------------------------
Class: JsonUtilitiesDummyObject.Object

--------------------------------
Class: AssetRegistryHelpers.Object
	SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0x2b1558ebd041 0x7e61985100
	ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0x2b1458ebd041 0x7e619851e0
	bool IsValid(out const AssetData InAssetData);// 0x2b1358ebd041 0x7e619852c0
	bool IsUAsset(out const AssetData InAssetData);// 0x2b1258ebd041 0x7e619853a0
	bool IsRedirector(out const AssetData InAssetData);// 0x2b1158ebd041 0x7e61985480
	bool IsAssetLoaded(out const AssetData InAssetData);// 0x2b1058ebd041 0x7e61985560
	bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0x2b5158ebd041 0x7e61985640
	FString GetFullName(out const AssetData InAssetData);// 0x2b0e58ebd041 0x7e61981d60
	FString GetExportTextName(out const AssetData InAssetData);// 0x2b0d58ebd041 0x7e61981e40
	class Object GetClass(out const AssetData InAssetData);// 0x2b0c58ebd041 0x7e61981f20
	interface classNone GetAssetRegistry();// 0x2b0b58ebd041 0x7e61982000
	Object* GetAsset(out const AssetData InAssetData);// 0x2b0a58ebd041 0x7e619820e0
	AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0x2b0958ebd041 0x7e619821c0

--------------------------------
Class: ARFilter
	FName[] PackageNames;//[Offset: 0x0, Size: 0x10] 0x7e841b9020
	FName[] PackagePaths;//[Offset: 0x10, Size: 0x10] 0x7e841b6960
	FName[] ObjectPaths;//[Offset: 0x20, Size: 0x10] 0x7e841b68c0
	FName[] ClassNames;//[Offset: 0x30, Size: 0x10] 0x7e841b8f80
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x90, Size: 0x50] 0x7e841b8ee0
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x7e8412b800
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x7e8412d880
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x7e8412ae80

--------------------------------
Class: TagAndValue
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x7e615c0a00
	FString Value;//[Offset: 0x8, Size: 0x10] 0x7e615c0a80

--------------------------------
Class: AssetRegistry.Interface.Object
	void WaitForPackage(FString PackageName);// 0x2b2d58ebd041 0x7e61983c00
	void WaitForCompletion();// 0x2b2c58ebd041 0x7e61983ce0
	void UseFilterToExcludeAssets(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x2b2b58ebd041 0x7e61983dc0
	void SearchAllAssets(bool bSynchronousSearch);// 0x2b2a58ebd041 0x7e61983ea0
	void ScanPathsSynchronous(out const FString[] InPaths, bool bForceRescan, bool bIgnoreDenyListScanFilters);// 0x2b2958ebd041 0x7e61983f80
	void ScanModifiedAssetFiles(out const FString[] InFilePaths);// 0x2b2858ebd041 0x7e61984060
	void ScanFilesSynchronous(out const FString[] InFilePaths, bool bForceRescan);// 0x2b2758ebd041 0x7e61984140
	void RunAssetsThroughFilter(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x2b2658ebd041 0x7e61984220
	void PrioritizeSearchPath(FString PathToPrioritize);// 0x2b2558ebd041 0x7e61984300
	bool K2_GetReferencers(FName PackageName, out const AssetRegistryDependencyOptions ReferenceOptions, out FName[] OutReferencers);// 0x2b2458ebd041 0x7e619843e0
	bool K2_GetDependencies(FName PackageName, out const AssetRegistryDependencyOptions DependencyOptions, out FName[] OutDependencies);// 0x2b2358ebd041 0x7e619844c0
	bool IsSearchAsync();// 0x2b2258ebd041 0x7e619845a0
	bool IsSearchAllAssets();// 0x2b2158ebd041 0x7e61984680
	bool IsLoadingAssets();// 0x2b2058ebd041 0x7e61984760
	bool HasAssets(const FName PackagePath, const bool bRecursive);// 0x2b1f58ebd041 0x7e61984840
	void GetSubPaths(FString InBasePath, out FString[] OutPathList, bool bInRecurse);// 0x2b1e58ebd041 0x7e61984920
	bool GetAssetsByPaths(FName[] PackagePaths, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0x2b1d58ebd041 0x7e61984a00
	bool GetAssetsByPath(FName PackagePath, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0x2b1c58ebd041 0x7e61984ae0
	bool GetAssetsByPackageName(FName PackageName, out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x2b1b58ebd041 0x7e61984bc0
	bool GetAssetsByClass(FName ClassName, out AssetData[] OutAssetData, bool bSearchSubClasses);// 0x2b1a58ebd041 0x7e61984ca0
	bool GetAssets(out const ARFilter Filter, out AssetData[] OutAssetData);// 0x2b1958ebd041 0x7e61984d80
	AssetData GetAssetByObjectPath(const FName ObjectPath, bool bIncludeOnlyOnDiskAssets);// 0x2b1858ebd041 0x7e61984e60
	void GetAllCachedPaths(out FString[] OutPathList);// 0x2b1758ebd041 0x7e61984f40
	bool GetAllAssets(out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x2b1658ebd041 0x7e61985020

--------------------------------
Class: AssetRegistryDependencyOptions
	bool bIncludeSoftPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615c0780
	bool bIncludeHardPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7e615c0800
	bool bIncludeSearchableNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7e615c0880
	bool bIncludeSoftManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7e615c0900
	bool bIncludeHardManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7e615c0980

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object
	bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x2b4b58ebd041 0x7e61985b80
	bool NotEqual_TagTag(GameplayTag A, FString B);// 0x2b4a58ebd041 0x7e61985c60
	bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0x2b4958ebd041 0x7e61985d40
	bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x2b4858ebd041 0x7e61985e20
	bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x2b4758ebd041 0x7e61985f00
	bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0x2b4658ebd041 0x7e61985fe0
	bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x2b4558ebd041 0x7e619860c0
	GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0x2b4458ebd041 0x7e619861a0
	GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0x2b4358ebd041 0x7e61986280
	GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0x2b4258ebd041 0x7e61986360
	GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0x2b4158ebd041 0x7e61986440
	GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0x2b4058ebd041 0x7e61986520
	bool IsTagQueryEmpty(out const GameplayTagQuery TagQuery);// 0x2b3f58ebd041 0x7e61986600
	bool IsGameplayTagValid(GameplayTag GameplayTag);// 0x2b3e58ebd041 0x7e619866e0
	bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0x2b3d58ebd041 0x7e619867c0
	bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x2b3c58ebd041 0x7e619868a0
	bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x2b3b58ebd041 0x7e61986980
	bool HasAllMatchingGameplayTags(interface classNone TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0x2b3a58ebd041 0x7e61986a60
	FName GetTagName(out const GameplayTag GameplayTag);// 0x2b3958ebd041 0x7e61986b40
	int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0x2b3858ebd041 0x7e61986c20
	FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0x2b3758ebd041 0x7e61986d00
	FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0x2b3658ebd041 0x7e61986de0
	void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0x2b3558ebd041 0x7e61986ec0
	bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x2b3458ebd041 0x7e61986fa0
	bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x2b3358ebd041 0x7e61987080
	bool DoesTagAssetInterfaceHaveTag(interface classNone TagContainerInterface, GameplayTag Tag);// 0x2b3258ebd041 0x7e61987160
	bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0x2b3158ebd041 0x7e61987240
	void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0x2b7258ebd041 0x7e61987320
	void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0x2b2f58ebd041 0x7e61983a40
	void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x2b2e58ebd041 0x7e61983b20

--------------------------------
Class: GameplayTagAssetInterface.Interface.Object
	bool HasMatchingGameplayTag(GameplayTag TagToCheck);// 0x2b4f58ebd041 0x7e61985800
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x2b4e58ebd041 0x7e619858e0
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x2b4d58ebd041 0x7e619859c0
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0x2b4c58ebd041 0x7e61985aa0

--------------------------------
Class: EditableGameplayTagQuery.Object
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x7e61995580
	EditableGameplayTagQueryExpression* RootExpression;//[Offset: 0x48, Size: 0x8] 0x7e61995600
	GameplayTagQuery TagQueryExportText_Helper;//[Offset: 0x50, Size: 0x48] 0x7e61995680

--------------------------------
Class: EditableGameplayTagQueryExpression.Object

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x7e61995500

--------------------------------
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x7e61995480

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x7e61995400

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7e619718c0

--------------------------------
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7e61971820

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7e61971780

--------------------------------
Class: GameplayTagsManager.Object
	<FName,GameplayTagSource> TagSources;//[Offset: 0x160, Size: 0x50] 0x7e6167d6c0
	DataTable*[] GameplayTagTables;//[Offset: 0x230, Size: 0x10] 0x7e619716e0

--------------------------------
Class: GameplayTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8] 0x7e615c1800
	enum SourceType;//[Offset: 0x8, Size: 0x1] 0x7e84e52720
	GameplayTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8] 0x7e615c1900
	RestrictedGameplayTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8] 0x7e615c1980

--------------------------------
Class: GameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x7e61997100
	GameplayTagTableRow[] GameplayTagList;//[Offset: 0x38, Size: 0x10] 0x7e61971640

--------------------------------
Class: GameplayTagTableRow.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8] 0x7e615c1a80
	FString DevComment;//[Offset: 0x10, Size: 0x10] 0x7e615c1b00

--------------------------------
Class: RestrictedGameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x7e61997000
	RestrictedGameplayTagTableRow[] RestrictedGameplayTagList;//[Offset: 0x38, Size: 0x10] 0x7e619715a0

--------------------------------
Class: RestrictedGameplayTagTableRow.GameplayTagTableRow.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7e615c1a00

--------------------------------
Class: GameplayTagsSettings.GameplayTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e61996a00
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x7e61996a80
	bool ClearInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x7e61996b00
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x7e61996b80
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10] 0x7e61996c00
	GameplayTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10] 0x7e61973bc0
	SoftObjectPath[] GameplayTagTableList;//[Offset: 0x70, Size: 0x10] 0x7e61973c60
	GameplayTagRedirect[] GameplayTagRedirects;//[Offset: 0x80, Size: 0x10] 0x7e61973d00
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10] 0x7e61973da0
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4] 0x7e61996e80
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4] 0x7e61996f00
	RestrictedConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10] 0x7e61971500

--------------------------------
Class: GameplayTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0x10] 0x7e615c1700
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10] 0x7e84e52680

--------------------------------
Class: GameplayTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8] 0x7e615c1b80
	FName NewTagName;//[Offset: 0x8, Size: 0x8] 0x7e615c1c00

--------------------------------
Class: RestrictedConfigInfo
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10] 0x7e615c1600
	FString[] Owners;//[Offset: 0x10, Size: 0x10] 0x7e84e525e0

--------------------------------
Class: GameplayTagsDeveloperSettings.DeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x38, Size: 0x10] 0x7e61996900
	FName FavoriteTagSource;//[Offset: 0x48, Size: 0x8] 0x7e61996980

--------------------------------
Class: PacketHandlerProfileConfig.Object
	FString[] Components;//[Offset: 0x28, Size: 0x10] 0x7e61973b20

--------------------------------
Class: ClothSharedSimConfigBase.Object

--------------------------------
Class: ClothPhysicalMeshDataBase_Legacy.Object
	Vector3f[] Vertices;//[Offset: 0x28, Size: 0x10] 0x7e619748e0
	Vector3f[] Normals;//[Offset: 0x38, Size: 0x10] 0x7e61974980
	uint32[] Indices;//[Offset: 0x48, Size: 0x10] 0x7e61974a20
	float[] InverseMasses;//[Offset: 0x58, Size: 0x10] 0x7e61974ac0
	ClothVertBoneData[] BoneData;//[Offset: 0x68, Size: 0x10] 0x7e61974b60
	int NumFixedVerts;//[Offset: 0x78, Size: 0x4] 0x7e6199c980
	int MaxBoneWeights;//[Offset: 0x7c, Size: 0x4] 0x7e6199ca00
	uint32[] SelfCollisionIndices;//[Offset: 0x80, Size: 0x10] 0x7e61974c00

--------------------------------
Class: ClothVertBoneData
	int NumInfluences;//[Offset: 0x0, Size: 0x4] 0x7e615c2a00
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2] 0x7e615c2a80
	float BoneWeights;//[Offset: 0x1c, Size: 0x4] 0x7e615c2b00

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x88, Size: 0x10] 0x7e6199e680
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x7e6199e700
	void SetFilePath(FString Path);// 0x2baf58ebd041 0x7e6198b140

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x2bb258ebd041 0x7e6198aea0
	void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x2bb158ebd041 0x7e6198af80
	void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x2bb058ebd041 0x7e6198b060

--------------------------------
Class: MediaCaptureDevice
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x7e615c2380
	FString URL;//[Offset: 0x18, Size: 0x10] 0x7e615c2400

--------------------------------
Class: MediaComponent.ActorComponent.Object
	MediaTexture* MediaTexture;//[Offset: 0xb0, Size: 0x8] 0x7e6199e180
	MediaPlayer* MediaPlayer;//[Offset: 0xb8, Size: 0x8] 0x7e6199e200
	MediaTexture* GetMediaTexture();// 0x2bf158ebd041 0x7e6198e6a0
	MediaPlayer* GetMediaPlayer();// 0x2bb358ebd041 0x7e6198adc0

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x80, Size: 0x8] 0x7e619a4c80

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString StreamUrl;//[Offset: 0x88, Size: 0x10] 0x7e619a4c00

--------------------------------
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object
	bool bUseTimeSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7e619a4a80
	int FrameDelay;//[Offset: 0x8c, Size: 0x4] 0x7e619a4b00
	double TimeDelay;//[Offset: 0x90, Size: 0x8] 0x7e619a4b80

--------------------------------
Class: AnimSequenceLevelSequenceLink.AssetUserData.Object
	Guid SkelTrackGuid;//[Offset: 0x28, Size: 0x10] 0x7e619a4980
	SoftObjectPath PathToLevelSequence;//[Offset: 0x38, Size: 0x18] 0x7e619a4a00

--------------------------------
Class: DefaultLevelSequenceInstanceData.Object
	Actor* TransformOriginActor;//[Offset: 0x30, Size: 0x8] 0x7e619a4880
	Transform TransformOrigin;//[Offset: 0x40, Size: 0x60] 0x7e619a4900

--------------------------------
Class: LevelSequenceMetaData.Interface.Object

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e619a4680
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18] 0x7e619a4700
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8] 0x7e619a4780
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x2c1a58ebd041 0x7e619b3260

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x290, Size: 0x14] 0x7e615cf100
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x2a8, Size: 0x8] 0x7e615cf180
	LevelSequence* LevelSequenceAsset;//[Offset: 0x2b0, Size: 0x8] 0x7e615cf200
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x2b8, Size: 0x2] 0x7e615cf380
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x2c0, Size: 0x8] 0x7e615cf400
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x2c8, Size: 0x8] 0x7e615cf480
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x7e615cf500
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1] 0x7e615cf580
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1] 0x7e615cf600
	Object* DefaultInstanceData;//[Offset: 0x2d8, Size: 0x8] 0x7e615cf680
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2e0, Size: 0x8] 0x7e615cf700
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x7e615cf780
	void ShowBurnin();// 0x1a5e58ebd041 0x7e614ba880
	void SetSequence(LevelSequence* InSequence);// 0x1a5d58ebd041 0x7e614ba960
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x1a5c58ebd041 0x7e614baa40
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x1a5b58ebd041 0x7e614bab20
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x1a5a58ebd041 0x7e614bac00
	void ResetBindings();// 0x1e0458ebd041 0x7e614bace0
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x1a5858ebd041 0x7e614b7400
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x1a5758ebd041 0x7e614b74e0
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x1a5658ebd041 0x7e614b75c0
	void OnLevelSequenceLoaded__DelegateSignature();// 0x1a5558ebd041 0x7e614b76a0
	LevelSequence* LoadSequence();// 0x1a5458ebd041 0x7e614b7780
	void HideBurnin();// 0x1a5358ebd041 0x7e614b7860
	LevelSequencePlayer* GetSequencePlayer();// 0x1a5258ebd041 0x7e614b7940
	LevelSequence* GetSequence();// 0x1a5158ebd041 0x7e614b7a20
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x1a5058ebd041 0x7e614b7b00
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x1a4f58ebd041 0x7e614b7be0
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x1a4e58ebd041 0x7e614b7cc0
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x1a4958ebd041 0x7e614b7da0

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x4d0, Size: 0x10] 0x7e619a5c00
	CameraComponent* GetActiveCameraComponent();// 0x2c2458ebd041 0x7e619b29a0
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x2c2358ebd041 0x7e619b2a80

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615cf280
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1] 0x7e615cf300

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x290, Size: 0xa8] 0x7e619a4480
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x338, Size: 0x8] 0x7e619a4500
	void SetSettings(Object* InSettings);// 0x2c1c58ebd041 0x7e619b30a0
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x2c1b58ebd041 0x7e619b3180

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10] 0x7e615cfb00
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10] 0x7e615cfb80
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10] 0x7e615cfc00
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10] 0x7e615cfc80
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10] 0x7e615cfd00
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10] 0x7e615cfd80
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10] 0x7e615cfe00
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28] 0x7e615cfe80
	LevelSequence* ActiveShot;//[Offset: 0x98, Size: 0x8] 0x7e615cff00
	MovieSceneSequenceID ShotID;//[Offset: 0xa0, Size: 0x4] 0x7e615cff80

--------------------------------
Class: LevelSequenceAnimSequenceLink.AssetUserData.Object
	LevelSequenceAnimSequenceLinkItem[] AnimSequenceLinks;//[Offset: 0x28, Size: 0x10] 0x7e61976640

--------------------------------
Class: LevelSequenceAnimSequenceLinkItem
	Guid SkelTrackGuid;//[Offset: 0x0, Size: 0x10] 0x7e615cec80
	SoftObjectPath PathToAnimSequence;//[Offset: 0x10, Size: 0x18] 0x7e615ced00
	bool bExportTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e615ced80
	bool bExportMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e615cee00
	bool bExportAttributeCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7e615cee80
	bool bExportMaterialCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x7e615cef00
	bool bRecordInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7e615cef80

--------------------------------
Class: LevelSequenceDirector.Object
	LevelSequencePlayer* Player;//[Offset: 0x28, Size: 0x8] 0x7e619a5f80
	int SubSequenceID;//[Offset: 0x30, Size: 0x4] 0x7e619a6000
	int MovieScenePlayerIndex;//[Offset: 0x34, Size: 0x4] 0x7e619a6080
	void OnCreated();// 0x2c2258ebd041 0x7e619b2b60
	MovieSceneSequence* GetSequence();// 0x2c2158ebd041 0x7e619b2c40
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x2c2058ebd041 0x7e619b2d20
	Object* GetBoundObject(MovieSceneObjectBindingID ObjectBinding);// 0x2c1f58ebd041 0x7e619b2e00
	Actor*[] GetBoundActors(MovieSceneObjectBindingID ObjectBinding);// 0x2c1e58ebd041 0x7e619b2ee0
	Actor* GetBoundActor(MovieSceneObjectBindingID ObjectBinding);// 0x2c1d58ebd041 0x7e619b2fc0

--------------------------------
Class: LegacyLevelSequenceDirectorBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelSequenceProjectSettings.DeveloperSettings.Object
	bool bDefaultLockEngineToDisplayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e619a5a00
	FString DefaultDisplayRate;//[Offset: 0x40, Size: 0x10] 0x7e619a5a80
	FString DefaultTickResolution;//[Offset: 0x50, Size: 0x10] 0x7e619a5b00
	enum DefaultClockSource;//[Offset: 0x60, Size: 0x1] 0x7e619763c0

--------------------------------
Class: LevelSequenceMediaController.Actor.Object
	LevelSequenceActor* Sequence;//[Offset: 0x280, Size: 0x8] 0x7e619a5700
	MediaComponent* MediaComponent;//[Offset: 0x288, Size: 0x8] 0x7e619a5780
	float ServerStartTimeSeconds;//[Offset: 0x290, Size: 0x4] 0x7e619a5800
	void SynchronizeToServer(float DesyncThresholdSeconds);// 0x2c2958ebd041 0x7e619b2540
	void Play();// 0x2c2858ebd041 0x7e619b2620
	void OnRep_ServerStartTimeSeconds();// 0x2c2758ebd041 0x7e619b2700
	LevelSequenceActor* GetSequence();// 0x2c2658ebd041 0x7e619b27e0
	MediaComponent* GetMediaComponent();// 0x2c2558ebd041 0x7e619b28c0

--------------------------------
Class: MovieSceneCaptureProtocolBase.Object
	enum State;//[Offset: 0x50, Size: 0x1] 0x7e61976280
	bool IsCapturing();// 0x2c2b58ebd041 0x7e619b2380
	enum GetState();// 0x2c2a58ebd041 0x7e619b2460

--------------------------------
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MasterAudioSubmixCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	FString Filename;//[Offset: 0x58, Size: 0x10] 0x7e619a5500

--------------------------------
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	CompositionGraphCapturePasses IncludeRenderPasses;//[Offset: 0x58, Size: 0x10] 0x7e619a7280
	bool bCaptureFramesInHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7e619a7300
	int HDRCompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x7e619a7380
	byte CaptureGamut;//[Offset: 0x70, Size: 0x1] 0x7e619a5300
	SoftObjectPath PostProcessingMaterial;//[Offset: 0x78, Size: 0x18] 0x7e619a5380
	bool bDisableScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7e619a5400
	MaterialInterface* PostProcessingMaterialPtr;//[Offset: 0x98, Size: 0x8] 0x7e619a5480

--------------------------------
Class: CompositionGraphCapturePasses
	FString[] Value;//[Offset: 0x0, Size: 0x10] 0x7e84e53120

--------------------------------
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	int CompressionQuality;//[Offset: 0xd8, Size: 0x4] 0x7e619a7200

--------------------------------
Class: ImageSequenceProtocol_BMP.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_PNG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_EXR.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x7e619a7100
	byte CaptureGamut;//[Offset: 0xd9, Size: 0x1] 0x7e619a7180

--------------------------------
Class: MovieSceneCaptureInterface.Interface.Object

--------------------------------
Class: MovieSceneCapture.Object
	SoftClassPath ImageCaptureProtocolType;//[Offset: 0x38, Size: 0x18] 0x7e619a6b80
	SoftClassPath AudioCaptureProtocolType;//[Offset: 0x50, Size: 0x18] 0x7e619a6c00
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol;//[Offset: 0x68, Size: 0x8] 0x7e619a6c80
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol;//[Offset: 0x70, Size: 0x8] 0x7e619a6d00
	MovieSceneCaptureSettings Settings;//[Offset: 0x78, Size: 0x70] 0x7e619a6d80
	bool bUseSeparateProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x7e619a6e00
	bool bCloseEditorWhenCaptureStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x7e619a6e80
	FString AdditionalCommandLineArguments;//[Offset: 0xf0, Size: 0x10] 0x7e619a6f00
	FString InheritedCommandLineArguments;//[Offset: 0x100, Size: 0x10] 0x7e619a6f80
	void SetImageCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x2c2f58ebd041 0x7e619b2000
	void SetAudioCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x2c2e58ebd041 0x7e619b20e0
	MovieSceneCaptureProtocolBase* GetImageCaptureProtocol();// 0x2c2d58ebd041 0x7e619b21c0
	MovieSceneCaptureProtocolBase* GetAudioCaptureProtocol();// 0x2c2c58ebd041 0x7e619b22a0

--------------------------------
Class: MovieSceneCaptureSettings
	DirectoryPath OutputDirectory;//[Offset: 0x0, Size: 0x10] 0x7e615f0680
	class GameModeBase* GameModeOverride;//[Offset: 0x10, Size: 0x8] 0x7e84e53080
	FString OutputFormat;//[Offset: 0x18, Size: 0x10] 0x7e615f0700
	bool bOverwriteExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e615f0780
	bool bUseRelativeFrameNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e615f0800
	int HandleFrames;//[Offset: 0x2c, Size: 0x4] 0x7e615f0880
	FString MovieExtension;//[Offset: 0x30, Size: 0x10] 0x7e615f0900
	byte ZeroPadFrameNumbers;//[Offset: 0x40, Size: 0x1] 0x7e615f0980
	FrameRate FrameRate;//[Offset: 0x44, Size: 0x8] 0x7e615f0a00
	bool bUseCustomFrameRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7e615f0a80
	FrameRate CustomFrameRate;//[Offset: 0x50, Size: 0x8] 0x7e615f0b00
	CaptureResolution Resolution;//[Offset: 0x58, Size: 0x8] 0x7e615f0b80
	bool bEnableTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e615f0c00
	bool bCinematicEngineScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7e615f0c80
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1] 0x7e615f0d00
	bool bAllowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1] 0x7e615f0d80
	bool bAllowTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x7e615f0e00
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x7e615f0e80
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x7e615f0f00
	bool bUsePathTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x7e615f0f80
	int PathTracerSamplePerPixel;//[Offset: 0x68, Size: 0x4] 0x7e615f1000

--------------------------------
Class: CaptureResolution
	int ResX;//[Offset: 0x0, Size: 0x4] 0x7e615f1080
	int ResY;//[Offset: 0x4, Size: 0x4] 0x7e615cf800

--------------------------------
Class: LevelCapture.MovieSceneCapture.Object
	bool bAutoStartCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x7e619a6a80
	Guid PrerequisiteActorId;//[Offset: 0x234, Size: 0x10] 0x7e619a6b00

--------------------------------
Class: MovieSceneCaptureEnvironment.Object
	bool IsCaptureInProgress();// 0x2c3458ebd041 0x7e619b5560
	int GetCaptureFrameNumber();// 0x2c7558ebd041 0x7e619b5640
	float GetCaptureElapsedTime();// 0x2c3258ebd041 0x7e619b1d60
	MovieSceneImageCaptureProtocolBase* FindImageCaptureProtocol();// 0x2c3158ebd041 0x7e619b1e40
	MovieSceneAudioCaptureProtocolBase* FindAudioCaptureProtocol();// 0x2c3058ebd041 0x7e619b1f20

--------------------------------
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	World* World;//[Offset: 0x58, Size: 0x8] 0x7e619a8300
	void StopCapturingFinalPixels();// 0x2c4458ebd041 0x7e619b4760
	void StartCapturingFinalPixels(out const CapturedPixelsID StreamID);// 0x2c4358ebd041 0x7e619b4840
	void ResolveBuffer(Texture* Buffer, out const CapturedPixelsID BufferID);// 0x2c4258ebd041 0x7e619b4920
	void OnWarmUp();// 0x2c4158ebd041 0x7e619b4a00
	void OnTick();// 0x2c4058ebd041 0x7e619b4ae0
	void OnStartCapture();// 0x2c3f58ebd041 0x7e619b4bc0
	bool OnSetup();// 0x2c3e58ebd041 0x7e619b4ca0
	void OnPreTick();// 0x2c3d58ebd041 0x7e619b4d80
	void OnPixelsReceived(out const CapturedPixels Pixels, out const CapturedPixelsID ID, FrameMetrics FrameMetrics);// 0x2c3c58ebd041 0x7e619b4e60
	void OnPauseCapture();// 0x2c3b58ebd041 0x7e619b4f40
	void OnFinalize();// 0x2c3a58ebd041 0x7e619b5020
	void OnCaptureFrame();// 0x2c3958ebd041 0x7e619b5100
	bool OnCanFinalize();// 0x2c3858ebd041 0x7e619b51e0
	void OnBeginFinalize();// 0x2c3758ebd041 0x7e619b52c0
	FrameMetrics GetCurrentFrameMetrics();// 0x2c3658ebd041 0x7e619b53a0
	FString GenerateFilename(out const FrameMetrics InFrameMetrics);// 0x2c3558ebd041 0x7e619b5480

--------------------------------
Class: CapturedPixelsID
	<FName,FName> Identifiers;//[Offset: 0x0, Size: 0x50] 0x7e615e0100

--------------------------------
Class: CapturedPixels

--------------------------------
Class: FrameMetrics
	float TotalElapsedTime;//[Offset: 0x0, Size: 0x4] 0x7e615cf880
	float FrameDelta;//[Offset: 0x4, Size: 0x4] 0x7e615cf900
	int FrameNumber;//[Offset: 0x8, Size: 0x4] 0x7e615cf980
	int NumDroppedFrames;//[Offset: 0xc, Size: 0x4] 0x7e615cfa00

--------------------------------
Class: UserDefinedImageCaptureProtocol.UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	enum Format;//[Offset: 0xd8, Size: 0x1] 0x7e619760a0
	bool bEnableCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x7e619a7e00
	int CompressionQuality;//[Offset: 0xdc, Size: 0x4] 0x7e619a7e80
	void WriteImageToDisk(out const CapturedPixels PixelData, out const CapturedPixelsID StreamID, out const FrameMetrics FrameMetrics, bool bCopyImageData);// 0x2c4758ebd041 0x7e619b44c0
	FString GenerateFilenameForCurrentFrame();// 0x2c4658ebd041 0x7e619b45a0
	FString GenerateFilenameForBuffer(Texture* Buffer, out const CapturedPixelsID StreamID);// 0x2c4558ebd041 0x7e619b4680

--------------------------------
Class: VideoCaptureProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bUseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7e619a7c80
	float CompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x7e619a7d00

--------------------------------
Class: MoviePlayerSettings.Object
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7e619a7b00
	bool bMoviesAreSkippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e619a7b80
	FString[] StartupMovies;//[Offset: 0x30, Size: 0x10] 0x7e61976000

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 0x10] 0x7e61bd4980

--------------------------------
Class: OverlayItem
	Timespan StartTime;//[Offset: 0x0, Size: 0x8] 0x7e6168c280
	Timespan EndTime;//[Offset: 0x8, Size: 0x8] 0x7e6168c300
	FString Text;//[Offset: 0x10, Size: 0x10] 0x7e6168c380
	Vector2D Position;//[Offset: 0x20, Size: 0x10] 0x7e6168c400

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 0x8] 0x7e61bf5180
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 0x50] 0x7e6167ec80

--------------------------------
Class: BuildPatchManifest.Object
	byte ManifestFileVersion;//[Offset: 0x28, Size: 0x1] 0x7e61bf4a80
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7e61bf4b00
	uint32 AppID;//[Offset: 0x2c, Size: 0x4] 0x7e61bf4b80
	FString AppName;//[Offset: 0x30, Size: 0x10] 0x7e61bf4c00
	FString BuildVersion;//[Offset: 0x40, Size: 0x10] 0x7e61bf4c80
	FString LaunchExe;//[Offset: 0x50, Size: 0x10] 0x7e61bf4d00
	FString LaunchCommand;//[Offset: 0x60, Size: 0x10] 0x7e61bf4d80
	<FString> PrereqIds;//[Offset: 0x70, Size: 0x50] 0x7e61bd4700
	FString PrereqName;//[Offset: 0xc0, Size: 0x10] 0x7e61bf4e80
	FString PrereqPath;//[Offset: 0xd0, Size: 0x10] 0x7e61bf4f00
	FString PrereqArgs;//[Offset: 0xe0, Size: 0x10] 0x7e61bf4f80
	FileManifestData[] FileManifestList;//[Offset: 0xf0, Size: 0x10] 0x7e61bd47a0
	ChunkInfoData[] ChunkList;//[Offset: 0x100, Size: 0x10] 0x7e61bd4840
	CustomFieldData[] CustomFields;//[Offset: 0x110, Size: 0x10] 0x7e61bd48e0

--------------------------------
Class: FileManifestData
	FString Filename;//[Offset: 0x0, Size: 0x10] 0x7e6168b900
	SHAHashData FileHash;//[Offset: 0x10, Size: 0x14] 0x7e6168b980
	ChunkPartData[] FileChunkParts;//[Offset: 0x28, Size: 0x10] 0x7e616925e0
	FString[] InstallTags;//[Offset: 0x38, Size: 0x10] 0x7e61692680
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7e6168bb00
	FString SymlinkTarget;//[Offset: 0x50, Size: 0x10] 0x7e6168bb80
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e6168bc00
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7e6168bc80

--------------------------------
Class: SHAHashData
	byte Hash;//[Offset: 0x0, Size: 0x1] 0x7e6168c100

--------------------------------
Class: ChunkPartData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x7e6168bd00
	uint32 Offset;//[Offset: 0x10, Size: 0x4] 0x7e6168bd80
	uint32 Size;//[Offset: 0x14, Size: 0x4] 0x7e6168be00

--------------------------------
Class: ChunkInfoData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x7e6168be80
	uint64 Hash;//[Offset: 0x10, Size: 0x8] 0x7e6168bf00
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14] 0x7e6168bf80
	int64 FileSize;//[Offset: 0x30, Size: 0x8] 0x7e6168c000
	byte GroupNumber;//[Offset: 0x38, Size: 0x1] 0x7e6168c080

--------------------------------
Class: CustomFieldData
	FString Key;//[Offset: 0x0, Size: 0x10] 0x7e6168c180
	FString Value;//[Offset: 0x10, Size: 0x10] 0x7e6168c200

--------------------------------
Class: ClothingAssetCustomData.Object

--------------------------------
Class: ClothingAssetCommon.ClothingAssetBase.Object
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 0x8] 0x7e61bf4600
	<FName,ClothConfigBase*> ClothConfigs;//[Offset: 0x50, Size: 0x50] 0x7e6167ebc0
	ClothLODDataCommon[] LODData;//[Offset: 0xa0, Size: 0x10] 0x7e61bd4480
	int[] LodMap;//[Offset: 0xb0, Size: 0x10] 0x7e61bd4520
	FName[] UsedBoneNames;//[Offset: 0xc0, Size: 0x10] 0x7e61bd45c0
	int[] UsedBoneIndices;//[Offset: 0xd0, Size: 0x10] 0x7e61bd4660
	int ReferenceBoneIndex;//[Offset: 0xe0, Size: 0x4] 0x7e61bf4980
	ClothingAssetCustomData* CustomData;//[Offset: 0xe8, Size: 0x8] 0x7e61bf4a00

--------------------------------
Class: ClothLODDataCommon
	ClothPhysicalMeshData PhysicalMeshData;//[Offset: 0x0, Size: 0xd8] 0x7e6168c800
	ClothCollisionData CollisionData;//[Offset: 0xd8, Size: 0x40] 0x7e6168c880
	bool bUseMultipleInfluences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x7e6168c900
	float SkinningKernelRadius;//[Offset: 0x11c, Size: 0x4] 0x7e6168c980
	bool bSmoothTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x7e6168ca00

--------------------------------
Class: ClothPhysicalMeshData
	Vector3f[] Vertices;//[Offset: 0x0, Size: 0x10] 0x7e616920e0
	Vector3f[] Normals;//[Offset: 0x10, Size: 0x10] 0x7e61692180
	uint32[] Indices;//[Offset: 0x20, Size: 0x10] 0x7e61692220
	<uint32,PointWeightMap> WeightMaps;//[Offset: 0x30, Size: 0x50] 0x7e61674b40
	float[] InverseMasses;//[Offset: 0x80, Size: 0x10] 0x7e61692360
	ClothVertBoneData[] BoneData;//[Offset: 0x90, Size: 0x10] 0x7e61692400
	uint32[] SelfCollisionIndices;//[Offset: 0xa0, Size: 0x10] 0x7e616924a0
	ClothTetherData EuclideanTethers;//[Offset: 0xb0, Size: 0x10] 0x7e6168e700
	ClothTetherData GeodesicTethers;//[Offset: 0xc0, Size: 0x10] 0x7e6168c680
	int MaxBoneWeights;//[Offset: 0xd0, Size: 0x4] 0x7e6168c700
	int NumFixedVerts;//[Offset: 0xd4, Size: 0x4] 0x7e6168c780

--------------------------------
Class: PointWeightMap
	float[] Values;//[Offset: 0x0, Size: 0x10] 0x7e616922c0

--------------------------------
Class: ClothTetherData

--------------------------------
Class: ClothCollisionData
	ClothCollisionPrim_Sphere[] Spheres;//[Offset: 0x0, Size: 0x10] 0x7e84e52180
	ClothCollisionPrim_SphereConnection[] SphereConnections;//[Offset: 0x10, Size: 0x10] 0x7e84e52220
	ClothCollisionPrim_Convex[] Convexes;//[Offset: 0x20, Size: 0x10] 0x7e84e524a0
	ClothCollisionPrim_Box[] Boxes;//[Offset: 0x30, Size: 0x10] 0x7e84e52540

--------------------------------
Class: ClothCollisionPrim_Sphere
	int BoneIndex;//[Offset: 0x0, Size: 0x4] 0x7e615c2b80
	float Radius;//[Offset: 0x4, Size: 0x4] 0x7e615c2c00
	Vector LocalPosition;//[Offset: 0x8, Size: 0x18] 0x7e615c2c80

--------------------------------
Class: ClothCollisionPrim_SphereConnection
	int SphereIndices;//[Offset: 0x0, Size: 0x4] 0x7e615c2d80

--------------------------------
Class: ClothCollisionPrim_Convex
	ClothCollisionPrim_ConvexFace[] Faces;//[Offset: 0x0, Size: 0x10] 0x7e84e52360
	Vector[] SurfacePoints;//[Offset: 0x10, Size: 0x10] 0x7e84e52400
	int BoneIndex;//[Offset: 0x20, Size: 0x4] 0x7e615c3080

--------------------------------
Class: ClothCollisionPrim_ConvexFace
	Plane Plane;//[Offset: 0x0, Size: 0x20] 0x7e615c2e80
	int[] Indices;//[Offset: 0x20, Size: 0x10] 0x7e84e522c0

--------------------------------
Class: ClothCollisionPrim_Box
	Vector LocalPosition;//[Offset: 0x0, Size: 0x18] 0x7e615c3180
	Quat LocalRotation;//[Offset: 0x20, Size: 0x20] 0x7e615c1100
	Vector HalfExtents;//[Offset: 0x40, Size: 0x18] 0x7e615c1180
	int BoneIndex;//[Offset: 0x58, Size: 0x4] 0x7e615c1200

--------------------------------
Class: ClothLODDataCommon_Legacy.Object
	ClothPhysicalMeshDataBase_Legacy* PhysicalMeshData;//[Offset: 0x28, Size: 0x8] 0x7e61bf4480
	ClothPhysicalMeshData ClothPhysicalMeshData;//[Offset: 0x30, Size: 0xd8] 0x7e61bf4500
	ClothCollisionData CollisionData;//[Offset: 0x108, Size: 0x40] 0x7e61bf4580

--------------------------------
Class: ClothConfigNv.ClothConfigCommon.ClothConfigBase.Object
	enum ClothingWindMethod;//[Offset: 0x28, Size: 0x1] 0x7e61bd4340
	ClothConstraintSetupNv VerticalConstraint;//[Offset: 0x2c, Size: 0x10] 0x7e61bf5600
	ClothConstraintSetupNv HorizontalConstraint;//[Offset: 0x3c, Size: 0x10] 0x7e61bf5680
	ClothConstraintSetupNv BendConstraint;//[Offset: 0x4c, Size: 0x10] 0x7e61bf5700
	ClothConstraintSetupNv ShearConstraint;//[Offset: 0x5c, Size: 0x10] 0x7e61bf5780
	float SelfCollisionRadius;//[Offset: 0x6c, Size: 0x4] 0x7e61bf5800
	float SelfCollisionStiffness;//[Offset: 0x70, Size: 0x4] 0x7e61bf5880
	float SelfCollisionCullScale;//[Offset: 0x74, Size: 0x4] 0x7e61bf5900
	Vector Damping;//[Offset: 0x78, Size: 0x18] 0x7e61bf5980
	float Friction;//[Offset: 0x90, Size: 0x4] 0x7e61bf5a00
	float WindDragCoefficient;//[Offset: 0x94, Size: 0x4] 0x7e61bf5a80
	float WindLiftCoefficient;//[Offset: 0x98, Size: 0x4] 0x7e61bf5b00
	Vector LinearDrag;//[Offset: 0xa0, Size: 0x18] 0x7e61bf5b80
	Vector AngularDrag;//[Offset: 0xb8, Size: 0x18] 0x7e61bf5c00
	Vector LinearInertiaScale;//[Offset: 0xd0, Size: 0x18] 0x7e61bf5c80
	Vector AngularInertiaScale;//[Offset: 0xe8, Size: 0x18] 0x7e61bf5d00
	Vector CentrifugalInertiaScale;//[Offset: 0x100, Size: 0x18] 0x7e61bf5d80
	float SolverFrequency;//[Offset: 0x118, Size: 0x4] 0x7e61bf5e00
	float StiffnessFrequency;//[Offset: 0x11c, Size: 0x4] 0x7e61bf5e80
	float GravityScale;//[Offset: 0x120, Size: 0x4] 0x7e61bf5f00
	Vector GravityOverride;//[Offset: 0x128, Size: 0x18] 0x7e61bf5f80
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1] 0x7e61bf6000
	float TetherStiffness;//[Offset: 0x144, Size: 0x4] 0x7e61bf6080
	float TetherLimit;//[Offset: 0x148, Size: 0x4] 0x7e61bf6100
	float CollisionThickness;//[Offset: 0x14c, Size: 0x4] 0x7e61bf6180
	float AnimDriveSpringStiffness;//[Offset: 0x150, Size: 0x4] 0x7e61bf6200
	float AnimDriveDamperStiffness;//[Offset: 0x154, Size: 0x4] 0x7e61bf6280
	enum WindMethod;//[Offset: 0x158, Size: 0x1] 0x7e61bd43e0
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x15c, Size: 0x10] 0x7e61bf4280
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x16c, Size: 0x10] 0x7e61bf4300
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x17c, Size: 0x10] 0x7e61bf4380
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x18c, Size: 0x10] 0x7e61bf4400

--------------------------------
Class: ClothConstraintSetupNv
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7e6168dd80
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x7e6168de00
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x7e6168de80
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x7e6168df00

--------------------------------
Class: ClothConstraintSetup_Legacy
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7e6168b700
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x7e6168b780
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x7e6168b800
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x7e6168b880

--------------------------------
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractorNv.ClothingSimulationInteractor.Object
	void SetAnimDriveDamperStiffness(float InStiffness);// 0x363358ebd041 0x7e61bce860

--------------------------------
Class: ClothPhysicalMeshDataNv_Legacy.ClothPhysicalMeshDataBase_Legacy.Object
	float[] MaxDistances;//[Offset: 0xe0, Size: 0x10] 0x7e61bd40c0
	float[] BackstopDistances;//[Offset: 0xf0, Size: 0x10] 0x7e61bd4160
	float[] BackstopRadiuses;//[Offset: 0x100, Size: 0x10] 0x7e61bd4200
	float[] AnimDriveMultipliers;//[Offset: 0x110, Size: 0x10] 0x7e61bd42a0

--------------------------------
Class: AndroidRuntimeSettings.Object
	FString PackageName;//[Offset: 0x28, Size: 0x10] 0x7e61bf9e80
	int StoreVersion;//[Offset: 0x38, Size: 0x4] 0x7e61bf9f00
	int StoreVersionOffsetArmV7;//[Offset: 0x3c, Size: 0x4] 0x7e61bf9f80
	int StoreVersionOffsetArm64;//[Offset: 0x40, Size: 0x4] 0x7e61bfa000
	int StoreVersionOffsetX8664;//[Offset: 0x44, Size: 0x4] 0x7e61bfa080
	FString ApplicationDisplayName;//[Offset: 0x48, Size: 0x10] 0x7e61bfa100
	FString VersionDisplayName;//[Offset: 0x58, Size: 0x10] 0x7e61bfa180
	int MinSDKVersion;//[Offset: 0x68, Size: 0x4] 0x7e61bfa200
	int TargetSDKVersion;//[Offset: 0x6c, Size: 0x4] 0x7e61bfa280
	byte InstallLocation;//[Offset: 0x70, Size: 0x1] 0x7e61bfa300
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x7e61bfa380
	bool bEnableLint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1] 0x7e61bfa400
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1] 0x7e61bfa480
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x7e61bfa500
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x7e61bf8480
	bool bForceSmallOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1] 0x7e61bf8500
	bool bAllowLargeOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1] 0x7e61bf8580
	bool bAllowPatchOBBFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7e61bf8600
	bool bAllowOverflowOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x7e61bf8680
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x7e61bf8700
	bool bPublicLogFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x7e61bf8780
	byte Orientation;//[Offset: 0x7c, Size: 0x1] 0x7e61bf8800
	float MaxAspectRatio;//[Offset: 0x80, Size: 0x4] 0x7e61bf8880
	bool bUseDisplayCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7e61bf8900
	bool bRestoreNotificationsOnReboot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x7e61bf8980
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1] 0x7e61bf8a00
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1] 0x7e61bf8a80
	byte DepthBufferPreference;//[Offset: 0x88, Size: 0x1] 0x7e61bf8b00
	bool bValidateTextureFormats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x7e61bf8b80
	bool bForceCompressNativeLibs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x7e61bf8c00
	bool bEnableAdvancedBinaryCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x7e61bf8c80
	bool bEnableBundle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x7e61bf8d00
	bool bEnableUniversalAPK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1] 0x7e61bf8d80
	bool bBundleABISplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1] 0x7e61bf8e00
	bool bBundleLanguageSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f, Size: 0x1] 0x7e61bf8e80
	bool bBundleDensitySplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7e61bf8f00
	FString[] ExtraManifestNodeTags;//[Offset: 0x98, Size: 0x10] 0x7e61bd63c0
	FString[] ExtraApplicationNodeTags;//[Offset: 0xa8, Size: 0x10] 0x7e61bd6460
	FString ExtraApplicationSettings;//[Offset: 0xb8, Size: 0x10] 0x7e61bf9080
	FString[] ExtraActivityNodeTags;//[Offset: 0xc8, Size: 0x10] 0x7e61bd6500
	FString ExtraActivitySettings;//[Offset: 0xd8, Size: 0x10] 0x7e61bf9180
	FString[] ExtraPermissions;//[Offset: 0xe8, Size: 0x10] 0x7e61bd65a0
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x7e61bf9280
	byte[] PackageForOculusMobile;//[Offset: 0x100, Size: 0x10] 0x7e61bd6640
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x7e61bf9380
	FString KeyStore;//[Offset: 0x118, Size: 0x10] 0x7e61bf9400
	FString KeyAlias;//[Offset: 0x128, Size: 0x10] 0x7e61bf9480
	FString KeyStorePassword;//[Offset: 0x138, Size: 0x10] 0x7e61bf7400
	FString KeyPassword;//[Offset: 0x148, Size: 0x10] 0x7e61bf7480
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1] 0x7e61bf7500
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1] 0x7e61bf7580
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 0x1] 0x7e61bf7600
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 0x1] 0x7e61bf7680
	bool bSupportsVulkanSM5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1] 0x7e61bf7700
	DirectoryPath DebugVulkanLayerDirectory;//[Offset: 0x160, Size: 0x10] 0x7e61bf7780
	FString[] DebugVulkanDeviceLayers;//[Offset: 0x170, Size: 0x10] 0x7e61bd66e0
	FString[] DebugVulkanInstanceLayers;//[Offset: 0x180, Size: 0x10] 0x7e61bd3e40
	bool bAndroidOpenGLSupportsBackbufferSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1] 0x7e61bf7900
	bool bDetectVulkanByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1] 0x7e61bf7980
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1] 0x7e61bf7a00
	bool bSaveSymbols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193, Size: 0x1] 0x7e61bf7a80
	bool bForceLDLinker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1] 0x7e61bf7b00
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195, Size: 0x1] 0x7e61bf7b80
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x196, Size: 0x1] 0x7e61bf7c00
	FString GamesAppID;//[Offset: 0x198, Size: 0x10] 0x7e61bf7c80
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x1a8, Size: 0x10] 0x7e61bd3ee0
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x1b8, Size: 0x10] 0x7e61bd3f80
	bool bEnableSnapshots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1] 0x7e61bf7e00
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1] 0x7e61bf7e80
	FString AdMobAdUnitID;//[Offset: 0x1d0, Size: 0x10] 0x7e61bf7f00
	FString[] AdMobAdUnitIDs;//[Offset: 0x1e0, Size: 0x10] 0x7e61bd4020
	FString GooglePlayLicenseKey;//[Offset: 0x1f0, Size: 0x10] 0x7e61bf8000
	FString GCMClientSenderID;//[Offset: 0x200, Size: 0x10] 0x7e61bf8080
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x7e61bf8100
	bool bAllowIMU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1] 0x7e61bf8180
	bool bAllowControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 0x1] 0x7e61bf8200
	bool bBlockAndroidKeysOnControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213, Size: 0x1] 0x7e61bf8280
	bool bControllersBlockDeviceFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 0x1] 0x7e61bf8300
	byte AndroidAudio;//[Offset: 0x215, Size: 0x1] 0x7e61bf8380
	int AudioSampleRate;//[Offset: 0x218, Size: 0x4] 0x7e61bf8400
	int AudioCallbackBufferFrameSize;//[Offset: 0x21c, Size: 0x4] 0x7e61bf6380
	int AudioNumBuffersToEnqueue;//[Offset: 0x220, Size: 0x4] 0x7e61bf6400
	int AudioMaxChannels;//[Offset: 0x224, Size: 0x4] 0x7e61bf6480
	int AudioNumSourceWorkers;//[Offset: 0x228, Size: 0x4] 0x7e61bf6500
	FString SpatializationPlugin;//[Offset: 0x230, Size: 0x10] 0x7e61bf6580
	FString ReverbPlugin;//[Offset: 0x240, Size: 0x10] 0x7e61bf6600
	FString OcclusionPlugin;//[Offset: 0x250, Size: 0x10] 0x7e61bf6680
	PlatformRuntimeAudioCompressionOverrides CompressionOverrides;//[Offset: 0x260, Size: 0x10] 0x7e61bf6700
	int CacheSizeKB;//[Offset: 0x270, Size: 0x4] 0x7e61bf6780
	int MaxChunkSizeOverrideKB;//[Offset: 0x274, Size: 0x4] 0x7e61bf6800
	bool bResampleForDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x7e61bf6880
	int SoundCueCookQualityIndex;//[Offset: 0x27c, Size: 0x4] 0x7e61bf6900
	float MaxSampleRate;//[Offset: 0x280, Size: 0x4] 0x7e61bf6980
	float HighSampleRate;//[Offset: 0x284, Size: 0x4] 0x7e61bf6a00
	float MedSampleRate;//[Offset: 0x288, Size: 0x4] 0x7e61bf6a80
	float LowSampleRate;//[Offset: 0x28c, Size: 0x4] 0x7e61bf6b00
	float MinSampleRate;//[Offset: 0x290, Size: 0x4] 0x7e61bf6b80
	float CompressionQualityModifier;//[Offset: 0x294, Size: 0x4] 0x7e61bf6c00
	float AutoStreamingThreshold;//[Offset: 0x298, Size: 0x4] 0x7e61bf6c80
	byte AndroidGraphicsDebugger;//[Offset: 0x29c, Size: 0x1] 0x7e61bf6d00
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x2a0, Size: 0x10] 0x7e61bf6d80
	bool bEnableMaliPerfCounters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x7e61bf6e00
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1] 0x7e61bf6e80
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1] 0x7e61bf6f00
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 0x1] 0x7e61bf6f80
	float TextureFormatPriority_ETC2;//[Offset: 0x2b4, Size: 0x4] 0x7e61bf7000
	float TextureFormatPriority_DXT;//[Offset: 0x2b8, Size: 0x4] 0x7e61bf7080
	float TextureFormatPriority_ASTC;//[Offset: 0x2bc, Size: 0x4] 0x7e61bf7100
	FString SDKAPILevelOverride;//[Offset: 0x2c0, Size: 0x10] 0x7e61bf7180
	FString NDKAPILevelOverride;//[Offset: 0x2d0, Size: 0x10] 0x7e61bf7200
	FString BuildToolsOverride;//[Offset: 0x2e0, Size: 0x10] 0x7e61bf7280
	bool bStreamLandscapeMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x7e61bf7300
	bool bEnableDomStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1] 0x7e61bf7380

--------------------------------
Class: GooglePlayAchievementMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7e6168f580
	FString AchievementID;//[Offset: 0x10, Size: 0x10] 0x7e6168f600

--------------------------------
Class: GooglePlayLeaderboardMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7e6168f480
	FString LeaderboardID;//[Offset: 0x10, Size: 0x10] 0x7e6168f500

--------------------------------
Class: PlatformRuntimeAudioCompressionOverrides
	bool bOverrideCompressionTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7e615bf080
	float DurationThreshold;//[Offset: 0x4, Size: 0x4] 0x7e615bf100
	int MaxNumRandomBranches;//[Offset: 0x8, Size: 0x4] 0x7e615bf180
	int SoundCueQualityIndex;//[Offset: 0xc, Size: 0x4] 0x7e615bf200

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x280, Size: 0x8] 0x7e61bf9880
	NavDataConfig NavDataConfig;//[Offset: 0x288, Size: 0x88] 0x7e61bf9900
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1] 0x7e61bf9980
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 0x1] 0x7e61bf9a00
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310, Size: 0x1] 0x7e61bf9a80
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x310, Size: 0x1] 0x7e61bf9b00
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x310, Size: 0x1] 0x7e61bf9b80
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x310, Size: 0x1] 0x7e61bf9c00
	enum RuntimeGeneration;//[Offset: 0x311, Size: 0x1] 0x7e61bd6280
	float ObservedPathsTickInterval;//[Offset: 0x314, Size: 0x4] 0x7e61bf9d00
	uint32 DataVersion;//[Offset: 0x318, Size: 0x4] 0x7e61bf9d80
	SupportedAreaData[] SupportedAreas;//[Offset: 0x428, Size: 0x10] 0x7e61bd6320

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8] 0x7e61656280
	Color Color;//[Offset: 0x38, Size: 0x4] 0x7e61656300
	Vector DefaultQueryExtent;//[Offset: 0x40, Size: 0x18] 0x7e61654280
	class Actor* NavigationDataClass;//[Offset: 0x58, Size: 0x8] 0x7e84e5bc80
	class Actor* NavDataClass;//[Offset: 0x60, Size: 0x28] 0x7e84e5bd20

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10] 0x7e6168f100
	int AreaID;//[Offset: 0x10, Size: 0x4] 0x7e6168f180
	ClassPtrProperty AreaClass;//[Size: 0x8] 0x7e61691f00

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4] 0x7e61bfaf80
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4] 0x7e61bfb000
	Color DrawColor;//[Offset: 0x34, Size: 0x4] 0x7e61bfb080
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4] 0x7e61bfb100
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7e61bfb180
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7e61bfb200
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7e61bfb280
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x7e61bfb300
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x7e61bfb380
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x7e61bfb400
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x7e61bfb480
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x7e61bfb500
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x7e61bfb580
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1] 0x7e61bf9500
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1] 0x7e61bf9580
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1] 0x7e61bf9600
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1] 0x7e61bf9680
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1] 0x7e61bf9700
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1] 0x7e61bf9780
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1] 0x7e61bf9800

--------------------------------
Class: NavAreaMeta.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.NavAreaBase.Object
	class NavArea* Agent0Area;//[Offset: 0x48, Size: 0x8] 0x7e61bd5880
	class NavArea* Agent1Area;//[Offset: 0x50, Size: 0x8] 0x7e61bd5920
	class NavArea* Agent2Area;//[Offset: 0x58, Size: 0x8] 0x7e61bd59c0
	class NavArea* Agent3Area;//[Offset: 0x60, Size: 0x8] 0x7e61bd5a60
	class NavArea* Agent4Area;//[Offset: 0x68, Size: 0x8] 0x7e61bd5b00
	class NavArea* Agent5Area;//[Offset: 0x70, Size: 0x8] 0x7e61bd5ba0
	class NavArea* Agent6Area;//[Offset: 0x78, Size: 0x8] 0x7e61bd5c40
	class NavArea* Agent7Area;//[Offset: 0x80, Size: 0x8] 0x7e61bd5ce0
	class NavArea* Agent8Area;//[Offset: 0x88, Size: 0x8] 0x7e61bd5d80
	class NavArea* Agent9Area;//[Offset: 0x90, Size: 0x8] 0x7e61bd5e20
	class NavArea* Agent10Area;//[Offset: 0x98, Size: 0x8] 0x7e61bd5ec0
	class NavArea* Agent11Area;//[Offset: 0xa0, Size: 0x8] 0x7e61bd5f60
	class NavArea* Agent12Area;//[Offset: 0xa8, Size: 0x8] 0x7e61bd6000
	class NavArea* Agent13Area;//[Offset: 0xb0, Size: 0x8] 0x7e61bd60a0
	class NavArea* Agent14Area;//[Offset: 0xb8, Size: 0x8] 0x7e61bd6140
	class NavArea* Agent15Area;//[Offset: 0xc0, Size: 0x8] 0x7e61bd61e0

--------------------------------
Class: NavArea_Default.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_LowHeight.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Null.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object

--------------------------------
Class: NavCollision.NavCollisionBase.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10] 0x7e61bd56a0
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10] 0x7e61bd5740
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8] 0x7e61bd57e0
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x7e61bfae80
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x7e61bfaf00

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0x18] 0x7e6168f300
	float Radius;//[Offset: 0x18, Size: 0x4] 0x7e6168f380
	float Height;//[Offset: 0x1c, Size: 0x4] 0x7e6168f400

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0x18] 0x7e6168f200
	Vector Extent;//[Offset: 0x18, Size: 0x18] 0x7e6168f280

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: NavigationGraphNode.Actor.Object

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object
	NavGraphNode Node;//[Offset: 0x2b0, Size: 0x18] 0x7e61bfac00
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x2c8, Size: 0x8] 0x7e61bfac80
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x2d0, Size: 0x8] 0x7e61bfad00

--------------------------------
Class: NavGraphNode
	Object* Owner;//[Offset: 0x0, Size: 0x8] 0x7e6168f080

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xb0, Size: 0x4] 0x7e61bfab00
	float TileRemovalRadius;//[Offset: 0xb4, Size: 0x4] 0x7e61bfab80

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10] 0x7e61bfc600
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10] 0x7e61bd5600
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1] 0x7e61bfa600
	bool IsValid();// 0x363b58ebd041 0x7e61c01740
	bool IsStringPulled();// 0x363a58ebd041 0x7e61c01820
	bool IsPartial();// 0x363958ebd041 0x7e61c01900
	float GetPathLength();// 0x363858ebd041 0x7e61c019e0
	float GetPathCost();// 0x363758ebd041 0x7e61c01ac0
	FString GetDebugString();// 0x363658ebd041 0x7e61c01ba0
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x367758ebd041 0x7e61c01c80
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x363458ebd041 0x7e61bce780

--------------------------------
Class: NavigationPathGenerator.Interface.Object

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10] 0x7e61bd5560
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4] 0x7e61bfc500
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4] 0x7e61bfc580

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8] 0x7e61691e60
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4] 0x7e6168ee80
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4] 0x7e6168ef00
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7e6168ef80
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7e6168f000
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7e8412ca80

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e6168ff00
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e6168ff80
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e6168e780
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7e6168e800
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7e6168e880
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7e6168e900
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7e6168e980
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7e6168ea00
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7e6168ea80
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7e6168eb00
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7e6168eb80
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7e6168ec00
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7e6168ec80
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7e6168ed00
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7e6168ed80
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7e6168ee00

--------------------------------
Class: NavigationSystemV1.NavigationSystemBase.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8] 0x7e61bfee80
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8] 0x7e61bfef00
	FName DefaultAgentName;//[Offset: 0x38, Size: 0x8] 0x7e61bfef80
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x40, Size: 0x28] 0x7e61bd7180
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61bff000
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x7e61bff080
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x7e61bff100
	bool bShouldDiscardSubLevelNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x7e61bff180
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x7e61bff200
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x7e61bff280
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x7e61bff300
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x7e61bff380
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1] 0x7e61bff400
	float ActiveTilesUpdateInterval;//[Offset: 0x6c, Size: 0x4] 0x7e61bff480
	enum DataGatheringMode;//[Offset: 0x70, Size: 0x1] 0x7e61bd7220
	float DirtyAreaWarningSizeThreshold;//[Offset: 0x74, Size: 0x4] 0x7e61bff580
	float GatheringNavModifiersWarningLimitTime;//[Offset: 0x78, Size: 0x4] 0x7e61bff600
	NavDataConfig[] SupportedAgents;//[Offset: 0x80, Size: 0x10] 0x7e61bd72c0
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x90, Size: 0x4] 0x7e61bff700
	Box BuildBounds;//[Offset: 0x98, Size: 0x38] 0x7e61bff780
	NavigationData*[] NavDataSet;//[Offset: 0xd0, Size: 0x10] 0x7e61bd7360
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0xe0, Size: 0x10] 0x7e61bd7400
	delegate OnNavDataRegisteredEvent;//[Offset: 0x100, Size: 0x10] 0x7e61bfd800
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0x110, Size: 0x10] 0x7e61bfd880
	enum OperationMode;//[Offset: 0x1fc, Size: 0x1] 0x7e61bd74a0
	float DirtyAreasUpdateFreq;//[Offset: 0x1624, Size: 0x4] 0x7e61bfd980
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x365358ebd041 0x7e61c00240
	void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x365258ebd041 0x7e61c00320
	void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x365158ebd041 0x7e61c00400
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x365058ebd041 0x7e61c004e0
	void SetGeometryGatheringMode(enum NewMode);// 0x364f58ebd041 0x7e61c005c0
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x364e58ebd041 0x7e61c006a0
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x364d58ebd041 0x7e61c00780
	Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x364c58ebd041 0x7e61c00860
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x364b58ebd041 0x7e61c00940
	bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x364a58ebd041 0x7e61c00a20
	bool K2_ReplaceAreaInOctreeData(const Object* Object, class NavArea OldArea, class NavArea NewArea);// 0x364958ebd041 0x7e61c00b00
	bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x364858ebd041 0x7e61c00be0
	bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364758ebd041 0x7e61c00cc0
	bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364658ebd041 0x7e61c00da0
	bool K2_GetRandomLocationInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364558ebd041 0x7e61c00e80
	bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x364458ebd041 0x7e61c00f60
	bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x364358ebd041 0x7e61c01040
	Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364258ebd041 0x7e61c01120
	Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364158ebd041 0x7e61c01200
	byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364058ebd041 0x7e61c012e0
	byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x363f58ebd041 0x7e61c013c0
	NavigationSystemV1* GetNavigationSystem(Object* WorldContextObject);// 0x363e58ebd041 0x7e61c014a0
	NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x363d58ebd041 0x7e61c01580
	NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x363c58ebd041 0x7e61c01660

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x2b0, Size: 0x4] 0x7e61c10580

--------------------------------
Class: NavigationSystemModuleConfig.NavigationSystemConfig.Object
	bool bStrictlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1] 0x7e61bfec80
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1] 0x7e61bfed00
	bool bAutoSpawnMissingNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 0x1] 0x7e61bfed80
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4d, Size: 0x1] 0x7e61bfee00

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x288, Size: 0x8] 0x7e61c10f00
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x290, Size: 0x8] 0x7e61c10f80
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1] 0x7e61c11000
	NavAgentProperties NavAgentProps;//[Offset: 0x2a0, Size: 0x30] 0x7e61c11080
	Vector QueryingExtent;//[Offset: 0x2d0, Size: 0x18] 0x7e61bff800
	NavigationData* MyNavData;//[Offset: 0x2e8, Size: 0x8] 0x7e61bff880
	Vector ProjectedLocation;//[Offset: 0x2f0, Size: 0x18] 0x7e61bff900
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 0x1] 0x7e61bff980
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x308, Size: 0x1] 0x7e61bffa00
	float CostLimitFactor;//[Offset: 0x30c, Size: 0x4] 0x7e61bffa80
	float MinimumCostLimit;//[Offset: 0x310, Size: 0x4] 0x7e61bffb00
	bool bBacktracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 0x1] 0x7e61bffb80
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 0x1] 0x7e61bffc00
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 0x1] 0x7e61bffc80
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 0x1] 0x7e61bffd00
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 0x1] 0x7e61bffd80
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 0x1] 0x7e61bffe00
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x314, Size: 0x1] 0x7e61bffe80
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x314, Size: 0x1] 0x7e61bfff00
	byte CostDisplayMode;//[Offset: 0x315, Size: 0x1] 0x7e61bfff80
	Vector2D TextCanvasOffset;//[Offset: 0x318, Size: 0x10] 0x7e61bfe780
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1] 0x7e61bfe800
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 0x1] 0x7e61bfe880
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 0x1] 0x7e61bfe900
	float PathfindingTime;//[Offset: 0x32c, Size: 0x4] 0x7e61bfe980
	float PathCost;//[Offset: 0x330, Size: 0x4] 0x7e61bfea00
	int PathfindingSteps;//[Offset: 0x334, Size: 0x4] 0x7e61bfea80
	NavigationTestingActor* OtherActor;//[Offset: 0x338, Size: 0x8] 0x7e61bfeb00
	class NavigationQueryFilter* FilterClass;//[Offset: 0x340, Size: 0x8] 0x7e61bd70e0
	int ShowStepIndex;//[Offset: 0x348, Size: 0x4] 0x7e61bfeb80
	float OffsetFromCornersDistance;//[Offset: 0x34c, Size: 0x4] 0x7e61bfec00

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NavigationLink[] Links;//[Offset: 0x540, Size: 0x10] 0x7e61bd7040

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7e61c10d00
	Object* CachedNavParent;//[Offset: 0xf8, Size: 0x8] 0x7e61c10d80
	void SetNavigationRelevancy(bool bRelevant);// 0x365458ebd041 0x7e61c00160

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0x108, Size: 0x4] 0x7e61c10600
	class NavArea* EnabledAreaClass;//[Offset: 0x110, Size: 0x8] 0x7e61bd6e60
	class NavArea* DisabledAreaClass;//[Offset: 0x118, Size: 0x8] 0x7e61bd6f00
	NavAgentSelector SupportedAgents;//[Offset: 0x120, Size: 0x4] 0x7e61c10680
	Vector LinkRelativeStart;//[Offset: 0x128, Size: 0x18] 0x7e61c10700
	Vector LinkRelativeEnd;//[Offset: 0x140, Size: 0x18] 0x7e61c10780
	byte LinkDirection;//[Offset: 0x158, Size: 0x1] 0x7e61c10800
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 0x1] 0x7e61c10880
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 0x1] 0x7e61c10900
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x159, Size: 0x1] 0x7e61c10980
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x159, Size: 0x1] 0x7e61c10a00
	Vector ObstacleOffset;//[Offset: 0x160, Size: 0x18] 0x7e61c10a80
	Vector ObstacleExtent;//[Offset: 0x178, Size: 0x18] 0x7e61c10b00
	class NavArea* ObstacleAreaClass;//[Offset: 0x190, Size: 0x8] 0x7e61bd6fa0
	float BroadcastRadius;//[Offset: 0x198, Size: 0x4] 0x7e61c10b80
	float BroadcastInterval;//[Offset: 0x19c, Size: 0x4] 0x7e61c10c00
	byte BroadcastChannel;//[Offset: 0x1a0, Size: 0x1] 0x7e61c10c80

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkHostInterface.Interface.Object

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshRenderingComponent.DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0x100, Size: 0x8] 0x7e61bd6d20
	Vector FailsafeExtent;//[Offset: 0x108, Size: 0x18] 0x7e61c10480
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x7e61c10500
	void SetAreaClass(class NavArea NewAreaClass);// 0x365558ebd041 0x7e61c00080

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x2b8, Size: 0x8] 0x7e61bd6be0
	bool bMaskFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x7e61c10400
	void SetAreaClass(class NavArea NewAreaClass);// 0x369858ebd041 0x7e61c03960

--------------------------------
Class: NavNodeInterface.Interface.Object

--------------------------------
Class: NavSystemConfigOverride.Actor.Object
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x278, Size: 0x8] 0x7e61c10280
	enum OverridePolicy;//[Offset: 0x280, Size: 0x1] 0x7e61bd6b40
	bool bLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x281, Size: 0x1] 0x7e61c10380

--------------------------------
Class: NavTestRenderingComponent.DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 0x1] 0x7e61c12400
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 0x1] 0x7e61c12480
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48c, Size: 0x1] 0x7e61c12500
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48c, Size: 0x1] 0x7e61c12580
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48c, Size: 0x1] 0x7e61c12600
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48c, Size: 0x1] 0x7e61c12680
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48c, Size: 0x1] 0x7e61c12700
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x48c, Size: 0x1] 0x7e61c12780
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48d, Size: 0x1] 0x7e61c12800
	bool bDrawPolygonFlags;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48d, Size: 0x1] 0x7e61c12880
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48d, Size: 0x1] 0x7e61c12900
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48d, Size: 0x1] 0x7e61c12980
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48d, Size: 0x1] 0x7e61c12a00
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48d, Size: 0x1] 0x7e61c12a80
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48d, Size: 0x1] 0x7e61c12b00
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x48d, Size: 0x1] 0x7e61c12b80
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48e, Size: 0x1] 0x7e61c12c00
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48e, Size: 0x1] 0x7e61c12c80
	float DrawOffset;//[Offset: 0x490, Size: 0x4] 0x7e61c12d00
	RecastNavMeshTileGenerationDebug TileGenerationDebug;//[Offset: 0x494, Size: 0x14] 0x7e61c12d80
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a8, Size: 0x1] 0x7e61c12e00
	int TilePoolSize;//[Offset: 0x4ac, Size: 0x4] 0x7e61c12e80
	float TileSizeUU;//[Offset: 0x4b0, Size: 0x4] 0x7e61c12f00
	float CellSize;//[Offset: 0x4b4, Size: 0x4] 0x7e61c12f80
	float CellHeight;//[Offset: 0x4b8, Size: 0x4] 0x7e61c13000
	float AgentRadius;//[Offset: 0x4bc, Size: 0x4] 0x7e61c13080
	float AgentHeight;//[Offset: 0x4c0, Size: 0x4] 0x7e61c13100
	float AgentMaxSlope;//[Offset: 0x4c4, Size: 0x4] 0x7e61c13180
	float AgentMaxStepHeight;//[Offset: 0x4c8, Size: 0x4] 0x7e61c11100
	float MinRegionArea;//[Offset: 0x4cc, Size: 0x4] 0x7e61c11180
	float MergeRegionSize;//[Offset: 0x4d0, Size: 0x4] 0x7e61c11200
	float MaxSimplificationError;//[Offset: 0x4d4, Size: 0x4] 0x7e61c11280
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x4d8, Size: 0x4] 0x7e61c11300
	int TileNumberHardLimit;//[Offset: 0x4dc, Size: 0x4] 0x7e61c11380
	int PolyRefTileBits;//[Offset: 0x4e0, Size: 0x4] 0x7e61c11400
	int PolyRefNavPolyBits;//[Offset: 0x4e4, Size: 0x4] 0x7e61c11480
	int PolyRefSaltBits;//[Offset: 0x4e8, Size: 0x4] 0x7e61c11500
	Vector NavMeshOriginOffset;//[Offset: 0x4f0, Size: 0x18] 0x7e61c11580
	float DefaultDrawDistance;//[Offset: 0x508, Size: 0x4] 0x7e61c11600
	float DefaultMaxSearchNodes;//[Offset: 0x50c, Size: 0x4] 0x7e61c11680
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x510, Size: 0x4] 0x7e61c11700
	byte RegionPartitioning;//[Offset: 0x514, Size: 0x1] 0x7e61c11780
	byte LayerPartitioning;//[Offset: 0x515, Size: 0x1] 0x7e61c11800
	int RegionChunkSplits;//[Offset: 0x518, Size: 0x4] 0x7e61c11880
	int LayerChunkSplits;//[Offset: 0x51c, Size: 0x4] 0x7e61c11900
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 0x1] 0x7e61c11980
	bool bIsWorldPartitioned;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 0x1] 0x7e61c11a00
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x520, Size: 0x1] 0x7e61c11a80
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x520, Size: 0x1] 0x7e61c11b00
	bool bUseExtraTopCellWhenMarkingAreas;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x520, Size: 0x1] 0x7e61c11b80
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x520, Size: 0x1] 0x7e61c11c00
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x520, Size: 0x1] 0x7e61c11c80
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x520, Size: 0x1] 0x7e61c11d00
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x521, Size: 0x1] 0x7e61c11d80
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x521, Size: 0x1] 0x7e61c11e00
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x521, Size: 0x1] 0x7e61c11e80
	bool bUseVirtualGeometryFilteringAndDirtying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x521, Size: 0x1] 0x7e61c11f00
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x521, Size: 0x1] 0x7e61c11f80
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x521, Size: 0x1] 0x7e61c12000
	float TileSetUpdateInterval;//[Offset: 0x524, Size: 0x4] 0x7e61c12080
	float HeuristicScale;//[Offset: 0x528, Size: 0x4] 0x7e61c12100
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x52c, Size: 0x4] 0x7e61c10080
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0x365758ebd041 0x7e61c03880

--------------------------------
Class: RecastNavMeshTileGenerationDebug
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61480480
	IntVector TileCoordinate;//[Offset: 0x4, Size: 0xc] 0x7e61480500
	bool bHeightfieldSolidFromRasterization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7e61480580
	bool bHeightfieldSolidPostRadiusFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7e61480600
	bool bHeightfieldSolidPostHeightFiltering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7e61480680
	bool bCompactHeightfield;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7e61480700
	bool bCompactHeightfieldEroded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x7e61480780
	bool bCompactHeightfieldRegions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x7e61480800
	bool bCompactHeightfieldDistances;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x7e61480880
	bool bTileCacheLayerAreas;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x7e61480900
	bool bTileCacheLayerRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1] 0x7e61480980
	bool bTileCacheContours;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1] 0x7e61480a00
	bool bTileCachePolyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1] 0x7e61480a80
	bool bTileCacheDetailMesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1] 0x7e61480b00

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8] 0x7e6144f980
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1] 0x7e84856aa0
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8] 0x7e6144fb00
	void ReadyForActivation();// 0x137c58ebd041 0x7e6143ebe0
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x137b58ebd041 0x7e6143ecc0
	void EndTask();// 0x137958ebd041 0x7e6143eda0

--------------------------------
Class: GameplayTaskOwnerInterface.Interface.Object

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4] 0x7e61c12280
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1] 0x7e61c12300
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x7e61c12380

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1] 0x7e61c13e80
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10] 0x7e61bd8da0
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10] 0x7e61bd8e40
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10] 0x7e61bd8ee0
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10] 0x7e61bd8f80
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10] 0x7e61c14100
	void OnRep_SimulatedTasks();// 0x365958ebd041 0x7e61c036c0
	enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x365858ebd041 0x7e61c037a0

--------------------------------
Class: GameplayTask_ClaimResource.GameplayTask.Object
	GameplayTask_ClaimResource* ClaimResources(interface classNone InTaskOwner, class GameplayTaskResource[] ResourceClasses, const byte Priority, const FName TaskInstanceName);// 0x365b58ebd041 0x7e61c03500
	GameplayTask_ClaimResource* ClaimResource(interface classNone InTaskOwner, class GameplayTaskResource ResourceClass, const byte Priority, const FName TaskInstanceName);// 0x365a58ebd041 0x7e61c035e0

--------------------------------
Class: GameplayTask_SpawnActor.GameplayTask.Object
	delegate Success;//[Offset: 0x60, Size: 0x10] 0x7e61c13480
	delegate DidNotSpawn;//[Offset: 0x70, Size: 0x10] 0x7e61c13500
	class Actor* ClassToSpawn;//[Offset: 0xb0, Size: 0x8] 0x7e61bd8a80
	GameplayTask_SpawnActor* SpawnActor(interface classNone TaskOwner, Vector SpawnLocation, Rotator SpawnRotation, class Actor Class, bool bSpawnOnlyOnAuthority);// 0x365e58ebd041 0x7e61c03260
	void FinishSpawningActor(Object* WorldContextObject, Actor* SpawnedActor);// 0x365d58ebd041 0x7e61c03340
	bool BeginSpawningActor(Object* WorldContextObject, out Actor* SpawnedActor);// 0x365c58ebd041 0x7e61c03420

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x60, Size: 0x10] 0x7e6144f900
	delegate OnTimeExpired;//[Offset: 0x70, Size: 0x10] 0x7e6144fa00

--------------------------------
Class: GameplayTask_WaitDelay.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x60, Size: 0x10] 0x7e614a0f80
	GameplayTask_WaitDelay* TaskWaitDelay(interface classNone TaskOwner, float Time, const byte Priority);// 0x138058ebd041 0x7e6143e940
	void TaskDelayDelegate__DelegateSignature();// 0x137f58ebd041 0x7e6143ea20

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7e61c13280
	delegate OnFail;//[Offset: 0x38, Size: 0x10] 0x7e61c13300
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x365f58ebd041 0x7e61c03180

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4] 0x7e614a0780

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object
	void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0x366f58ebd041 0x7e61c02380
	Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail, Actor* Owner);// 0x366e58ebd041 0x7e61c02460
	void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x366d58ebd041 0x7e61c02540
	void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x366c58ebd041 0x7e61c02620
	void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0x366b58ebd041 0x7e61c02700
	void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0x366a58ebd041 0x7e61c027e0
	bool IsValidAIRotation(Rotator Rotation);// 0x366958ebd041 0x7e61c028c0
	bool IsValidAILocation(Vector Location);// 0x366858ebd041 0x7e61c029a0
	bool IsValidAIDirection(Vector DirectionVector);// 0x366758ebd041 0x7e61c02a80
	int GetNextNavLinkIndex(const Controller* Controller);// 0x366658ebd041 0x7e61c02b60
	Vector[] GetCurrentPathPoints(Controller* Controller);// 0x366558ebd041 0x7e61c02c40
	int GetCurrentPathIndex(const Controller* Controller);// 0x366458ebd041 0x7e61c02d20
	NavigationPath* GetCurrentPath(Controller* Controller);// 0x366358ebd041 0x7e61c02e00
	BlackboardComponent* GetBlackboard(Actor* Target);// 0x366258ebd041 0x7e61c02ee0
	AIController* GetAIController(Actor* ControlledActor);// 0x366158ebd041 0x7e61c02fc0
	AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0x366058ebd041 0x7e61c030a0

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8] 0x7e61c1c000
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8] 0x7e61c1c080
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10] 0x7e61bd97a0
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10] 0x7e61bd9840

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10] 0x7e61bd90c0
	BTService*[] Services;//[Offset: 0x68, Size: 0x10] 0x7e61bd9160
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7e61c1d800

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10] 0x7e61c1d880
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8] 0x7e61c1d900
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8] 0x7e61c1d980

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8] 0x7e61482e80
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8] 0x7e61482f00
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10] 0x7e61691aa0
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10] 0x7e61691b40

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10] 0x7e61bdb500
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x7e61c25280

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4] 0x7e61c23d80
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4] 0x7e61c23e00
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7e61c23e80
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7e61c23f00

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x7e61c1f680
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1] 0x7e61c1f700

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1] 0x7e61483100
	uint16 Number;//[Offset: 0x2, Size: 0x2] 0x7e61483180

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8] 0x7e61c1dd00
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10] 0x7e61bd9340
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61c1de00

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8] 0x7e61481100
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8] 0x7e61481180
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7e61481200

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8] 0x7e61c1de80
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8] 0x7e61c1df00
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8] 0x7e61c1df80
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10] 0x7e61bd93e0
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x36c758ebd041 0x7e61c083c0
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x36c658ebd041 0x7e61c084a0
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x36c558ebd041 0x7e61c08580
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x36c458ebd041 0x7e61c08660
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x36c358ebd041 0x7e61c08740
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x36c258ebd041 0x7e61c08820
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x36c158ebd041 0x7e61c08900
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x36c058ebd041 0x7e61c089e0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x36bf58ebd041 0x7e61c08ac0
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x36be58ebd041 0x7e61c08ba0
	bool IsVectorValueSet(out const FName KeyName);// 0x36bd58ebd041 0x7e61c08c80
	Vector GetValueAsVector(out const FName KeyName);// 0x36bc58ebd041 0x7e61c08d60
	FString GetValueAsString(out const FName KeyName);// 0x36bb58ebd041 0x7e61c08e40
	Rotator GetValueAsRotator(out const FName KeyName);// 0x36ba58ebd041 0x7e61c08f20
	Object* GetValueAsObject(out const FName KeyName);// 0x36fb58ebd041 0x7e61c09000
	FName GetValueAsName(out const FName KeyName);// 0x36b858ebd041 0x7e61c05720
	int GetValueAsInt(out const FName KeyName);// 0x36b758ebd041 0x7e61c05800
	float GetValueAsFloat(out const FName KeyName);// 0x36b658ebd041 0x7e61c058e0
	byte GetValueAsEnum(out const FName KeyName);// 0x36b558ebd041 0x7e61c059c0
	class Object GetValueAsClass(out const FName KeyName);// 0x36b458ebd041 0x7e61c05aa0
	bool GetValueAsBool(out const FName KeyName);// 0x36b358ebd041 0x7e61c05b80
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x36b258ebd041 0x7e61c05c60
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x36b158ebd041 0x7e61c05d40
	void ClearValue(out const FName KeyName);// 0x36b058ebd041 0x7e61c05e20

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8] 0x7e61c1bd80
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8] 0x7e61c1be00
	void StopLogic(FString Reason);// 0x36ab58ebd041 0x7e61c06280
	void StartLogic();// 0x36aa58ebd041 0x7e61c06360
	void RestartLogic();// 0x36a958ebd041 0x7e61c06440
	bool IsRunning();// 0x36a858ebd041 0x7e61c06520
	bool IsPaused();// 0x36a758ebd041 0x7e61c06600

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1] 0x7e61c16400
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1] 0x7e61c16480
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1] 0x7e61c16500
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 0x1] 0x7e61c16580
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x348, Size: 0x1] 0x7e61c16600
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x348, Size: 0x1] 0x7e61c16680
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x348, Size: 0x1] 0x7e61c16700
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x350, Size: 0x8] 0x7e61c16780
	BrainComponent* BrainComponent;//[Offset: 0x358, Size: 0x8] 0x7e61c16800
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x360, Size: 0x8] 0x7e61c16880
	PawnActionsComponent* ActionsComp;//[Offset: 0x368, Size: 0x8] 0x7e61c16900
	BlackboardComponent* Blackboard;//[Offset: 0x370, Size: 0x8] 0x7e61c16980
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x378, Size: 0x8] 0x7e61c16a00
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x380, Size: 0x8] 0x7e61bd8620
	delegate ReceiveMoveCompleted;//[Offset: 0x388, Size: 0x10] 0x7e61c16a80
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x368458ebd041 0x7e61c04ae0
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x368358ebd041 0x7e61c04bc0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x368258ebd041 0x7e61c04ca0
	void SetMoveBlockDetection(bool bEnable);// 0x368158ebd041 0x7e61c04d80
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x368058ebd041 0x7e61c04e60
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x367f58ebd041 0x7e61c04f40
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x367e58ebd041 0x7e61c05020
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x367d58ebd041 0x7e61c05100
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x367c58ebd041 0x7e61c051e0
	void K2_SetFocus(Actor* NewFocus);// 0x367b58ebd041 0x7e61c052c0
	void K2_SetFocalPoint(Vector FP);// 0x367a58ebd041 0x7e61c053a0
	void K2_ClearFocus();// 0x367958ebd041 0x7e61c05480
	bool HasPartialPath();// 0x367858ebd041 0x7e61c05560
	PathFollowingComponent* GetPathFollowingComponent();// 0x36b958ebd041 0x7e61c05640
	byte GetMoveStatus();// 0x367658ebd041 0x7e61c01d60
	Vector GetImmediateMoveDestination();// 0x367558ebd041 0x7e61c01e40
	Actor* GetFocusActor();// 0x367458ebd041 0x7e61c01f20
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x367358ebd041 0x7e61c02000
	Vector GetFocalPoint();// 0x367258ebd041 0x7e61c020e0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x367158ebd041 0x7e61c021c0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x367058ebd041 0x7e61c022a0

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8] 0x7e61c26f00
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x8] 0x7e61c26f80
	void OnNavDataRegistered(NavigationData* NavData);// 0x370958ebd041 0x7e61c0bd80
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x370858ebd041 0x7e61c0be60
	Vector GetPathDestination();// 0x370758ebd041 0x7e61c0bf40
	byte GetPathActionType();// 0x370658ebd041 0x7e61c0c020

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10] 0x7e61bd7ea0
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8] 0x7e61bd7f40
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8] 0x7e61c17a00
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10] 0x7e61c17a80
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10] 0x7e61c17b00
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x180, Size: 0x10] 0x7e61c17b80
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x368e58ebd041 0x7e61c04220
	void RequestStimuliListenerUpdate();// 0x368d58ebd041 0x7e61c04300
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x368c58ebd041 0x7e61c043e0
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x368b58ebd041 0x7e61c044c0
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x368a58ebd041 0x7e61c045a0
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x368958ebd041 0x7e61c04680
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x368858ebd041 0x7e61c04760
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x368758ebd041 0x7e61c04840
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x368658ebd041 0x7e61c04920
	void ForgetAll();// 0x368558ebd041 0x7e61c04a00

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4] 0x7e61c18f80
	float MaxAge;//[Offset: 0x2c, Size: 0x4] 0x7e61c19000
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7e61c19080

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4] 0x7e61c19100
	enum NotifyType;//[Offset: 0x2c, Size: 0x1] 0x7e61bda2e0
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x7e61c19200
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x7e61c19280
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8] 0x7e61c19300

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10] 0x7e61bda380
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4] 0x7e61c19400
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x369758ebd041 0x7e61c03a40
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x369658ebd041 0x7e61c03b20
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x369558ebd041 0x7e61c03c00
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x369458ebd041 0x7e61c03ce0
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x369358ebd041 0x7e61c03dc0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8] 0x7e61c17880

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4] 0x7e614a0b00
	float ExpirationAge;//[Offset: 0x4, Size: 0x4] 0x7e614a0b80
	float Strength;//[Offset: 0x8, Size: 0x4] 0x7e614a0c00
	Vector StimulusLocation;//[Offset: 0x10, Size: 0x18] 0x7e614a0c80
	Vector ReceiverLocation;//[Offset: 0x28, Size: 0x18] 0x7e614a0d00
	FName Tag;//[Offset: 0x40, Size: 0x8] 0x7e614a0d80
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x7e614a0e80

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18] 0x7e61c1aa00
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18] 0x7e61c1aa80
	SoftClassPath EnvQueryManagerClassName;//[Offset: 0x88, Size: 0x18] 0x7e61c1ab00
	float AcceptanceRadius;//[Offset: 0xa0, Size: 0x4] 0x7e61c1ab80
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0xa4, Size: 0x4] 0x7e61c1ac00
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0xa8, Size: 0x4] 0x7e61c1ac80
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1] 0x7e61c1ad00
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1] 0x7e61c1ad80
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1] 0x7e61c1ae00
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1] 0x7e61c1ae80
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x7e61c1af00
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1] 0x7e61c1af80
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1] 0x7e61c1b000
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1] 0x7e61c1b080
	bool bClearBBEntryOnBTEQSFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1] 0x7e61c1b100
	byte DefaultSightCollisionChannel;//[Offset: 0xb5, Size: 0x1] 0x7e61c1b180
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xb8, Size: 0x8] 0x7e61c1b200
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xc0, Size: 0x8] 0x7e61c1b280
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xc8, Size: 0x8] 0x7e61c1b300
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xd0, Size: 0x10] 0x7e61bd98e0
	AIHotSpotManager* HotSpotManager;//[Offset: 0xe0, Size: 0x8] 0x7e61c1b400
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xe8, Size: 0x8] 0x7e61c1b480
	void AILoggingVerbose();// 0x36a458ebd041 0x7e61c068a0
	void AIIgnorePlayers();// 0x36a358ebd041 0x7e61c06980

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4] 0x7e61c1b780
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10] 0x7e61bd95c0
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10] 0x7e61bd9660

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8] 0x7e61481480
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8] 0x7e61481500

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 0x10] 0x7e61bd9700
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 0x8] 0x7e61c1b980
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x36ae58ebd041 0x7e61c05fe0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x36ad58ebd041 0x7e61c060c0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x36ac58ebd041 0x7e61c061a0

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10] 0x7e61bdcb80
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10] 0x7e61bdcc20
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10] 0x7e61bdccc0
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4] 0x7e61c28700
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x7e61c28780
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4] 0x7e61c28800
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8] 0x7e61c28880
	double ExecutionTimeWarningSeconds;//[Offset: 0x140, Size: 0x8] 0x7e61c28900
	double HandlingResultTimeWarningSeconds;//[Offset: 0x148, Size: 0x8] 0x7e61c28980
	double GenerationTimeWarningSeconds;//[Offset: 0x150, Size: 0x8] 0x7e61c28a00
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x371358ebd041 0x7e61c0b4c0

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8] 0x7e61482300

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8] 0x7e61c26700
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10] 0x7e61bdb140

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8] 0x7e61c28480
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10] 0x7e61bdcae0

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10] 0x7e61c28080
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8] 0x7e61bdaf60
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61c28100

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4] 0x7e61c28180

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4] 0x7e61c29c00
	byte TestPurpose;//[Offset: 0x30, Size: 0x1] 0x7e61c29c80
	FString TestComment;//[Offset: 0x38, Size: 0x10] 0x7e61c29d00
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1] 0x7e61c29d80
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1] 0x7e61c29e00
	byte FilterType;//[Offset: 0x4a, Size: 0x1] 0x7e61c29e80
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38] 0x7e61c29f00
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38] 0x7e61c29f80
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38] 0x7e61c2a000
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1] 0x7e61c2a080
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1] 0x7e61c2a100
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1] 0x7e61c2a180
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1] 0x7e61bdca40
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38] 0x7e61c2a280
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38] 0x7e61c2a300
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38] 0x7e61c2a380
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38] 0x7e61c2a400
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1] 0x7e61c2a480
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x7e61c2a500

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7e61480200

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	ClassPtrProperty PropertyType;//[Size: 0x8] 0x7e61691dc0

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8] 0x7e61480380
	FName DataField;//[Offset: 0x18, Size: 0x8] 0x7e61480400

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x7e61480280

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4] 0x7e614a1e00
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8] 0x7e8458c4a0
	int OptionIndex;//[Offset: 0x60, Size: 0x4] 0x7e614a1e80
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10] 0x7e614a1f00
	void SetNamedParam(FName ParamName, float Value);// 0x139558ebd041 0x7e614b12e0
	Vector[] GetResultsAsLocations();// 0x139458ebd041 0x7e614b13c0
	Actor*[] GetResultsAsActors();// 0x139358ebd041 0x7e614b14a0
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x139258ebd041 0x7e614b1580
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x139158ebd041 0x7e614b1660
	float GetItemScore(int ItemIndex);// 0x138f58ebd041 0x7e614b1740
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x138e58ebd041 0x7e614b1820

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x371f58ebd041 0x7e61c0e400
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x371e58ebd041 0x7e61c0e4e0
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x371d58ebd041 0x7e61c0e5c0
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x431a8bd3d8ebd000 0x7e61c0e6a0
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x371b58ebd041 0x7e61c0adc0
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x371a58ebd041 0x7e61c0aea0
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x371958ebd041 0x7e61c0af80

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x7e61480080
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10] 0x7e61691d20
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7e61480180

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8] 0x7e61c2e700
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10] 0x7e61bdbf00
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10] 0x7e61bdbfa0
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8] 0x7e61c2c780
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x372658ebd041 0x7e61c0dde0
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x372558ebd041 0x7e61c0dec0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x372458ebd041 0x7e61c0dfa0
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x372358ebd041 0x7e61c0e080

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8] 0x7e61c2ce00
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8] 0x7e61c2ce80
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8] 0x7e61c2cf00
	Object* Instigator;//[Offset: 0x40, Size: 0x8] 0x7e61c2cf80
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8] 0x7e61c2d000
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7e61c2d080
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7e61c2d100
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x7e61c2d180
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x7e61c2d200
	byte GetActionPriority();// 0x372258ebd041 0x7e61c0e160
	void Finish(byte WithResult);// 0x372158ebd041 0x7e61c0e240
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x372058ebd041 0x7e61c0e320

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8] 0x7e61484e80

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8] 0x7e61484f00

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object
	FName ParamName;//[Offset: 0x28, Size: 0x8] 0x7e61c18300
	float FloatValue;//[Offset: 0x30, Size: 0x4] 0x7e61c18380
	int IntValue;//[Offset: 0x34, Size: 0x4] 0x7e61c18400
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7e61c16380

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object
	float Min;//[Offset: 0x3c, Size: 0x4] 0x7e61c18180
	float Max;//[Offset: 0x40, Size: 0x4] 0x7e61c18200
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x7e61c18280

--------------------------------
Class: AIPerceptionListenerInterface.Interface.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7e61c17900
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xb8, Size: 0x10] 0x7e61bd7cc0
	void UnregisterFromSense(class AISense SenseClass);// 0x369258ebd041 0x7e61c03ea0
	void UnregisterFromPerceptionSystem();// 0x369158ebd041 0x7e61c03f80
	void RegisterWithPerceptionSystem();// 0x369058ebd041 0x7e61c04060
	void RegisterForSense(class AISense SenseClass);// 0x368f58ebd041 0x7e61c04140

--------------------------------
Class: AIResourceInterface.Interface.Object

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object

--------------------------------
Class: AIResource_Logic.GameplayTaskResource.Object

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: AISenseConfig_Blueprint.AISenseConfig.Object
	class AISense_Blueprint* Implementation;//[Offset: 0x48, Size: 0x8] 0x7e61bda240

--------------------------------
Class: AISense_Blueprint.AISense.Object
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x78, Size: 0x8] 0x7e61bd9ca0
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x80, Size: 0x10] 0x7e61bd9d40
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x90, Size: 0x10] 0x7e61bd9de0
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0x369e58ebd041 0x7e61c06de0
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x369d58ebd041 0x7e61c06ec0
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x369c58ebd041 0x7e61c06fa0
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x369b58ebd041 0x7e61c07080
	void K2_OnNewPawn(Pawn* NewPawn);// 0x369a58ebd041 0x7e61c07160
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0x369958ebd041 0x7e61c07240
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0x36da58ebd041 0x7e61c07320

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8] 0x7e61bda1a0

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7e61bd9c00
	void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation, FName Tag);// 0x369f58ebd041 0x7e61c06d00

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4] 0x7e61481d00
	Vector Location;//[Offset: 0x8, Size: 0x18] 0x7e61481d80
	Vector HitLocation;//[Offset: 0x20, Size: 0x18] 0x7e61481e00
	Actor* DamagedActor;//[Offset: 0x38, Size: 0x8] 0x7e61481e80
	Actor* Instigator;//[Offset: 0x40, Size: 0x8] 0x7e61481f00
	FName Tag;//[Offset: 0x48, Size: 0x8] 0x7e61481f80

--------------------------------
Class: AISenseConfig_Hearing.AISenseConfig.Object
	class AISense_Hearing* Implementation;//[Offset: 0x48, Size: 0x8] 0x7e61bda100
	float HearingRange;//[Offset: 0x50, Size: 0x4] 0x7e61c18d80
	float LoSHearingRange;//[Offset: 0x54, Size: 0x4] 0x7e61c18e00
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7e61c18e80
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x7e61c18f00

--------------------------------
Class: AISense_Hearing.AISense.Object
	AINoiseEvent[] NoiseEvents;//[Offset: 0x78, Size: 0x10] 0x7e61bd9b60
	float SpeedOfSoundSq;//[Offset: 0x88, Size: 0x4] 0x7e61c19c00
	void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag);// 0x36a058ebd041 0x7e61c06c20

--------------------------------
Class: AINoiseEvent
	Vector NoiseLocation;//[Offset: 0x8, Size: 0x18] 0x7e61481a80
	float Loudness;//[Offset: 0x20, Size: 0x4] 0x7e61481b00
	float MaxRange;//[Offset: 0x24, Size: 0x4] 0x7e61481b80
	Actor* Instigator;//[Offset: 0x28, Size: 0x8] 0x7e61481c00
	FName Tag;//[Offset: 0x30, Size: 0x8] 0x7e61481c80

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7e61482000
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7e61482080
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7e61482100

--------------------------------
Class: AISenseConfig_Prediction.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8] 0x7e61bda060
	float SightRadius;//[Offset: 0x50, Size: 0x4] 0x7e61c18a00
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4] 0x7e61c18a80
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4] 0x7e61c18b00
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x7e61c18b80
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4] 0x7e61c18c00
	float PointOfViewBackwardOffset;//[Offset: 0x64, Size: 0x4] 0x7e61c18c80
	float NearClippingRadius;//[Offset: 0x68, Size: 0x4] 0x7e61c18d00

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4] 0x7e61c19500
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4] 0x7e61c19580
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8] 0x7e61c19600
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4] 0x7e61c19680
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4] 0x7e61c19700
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4] 0x7e61c19780

--------------------------------
Class: AISenseConfig_Team.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Touch.AISenseConfig.Object

--------------------------------
Class: AISenseEvent_Damage.AISenseEvent.Object
	AIDamageEvent Event;//[Offset: 0x28, Size: 0x50] 0x7e61c18980

--------------------------------
Class: AISenseEvent_Hearing.AISenseEvent.Object
	AINoiseEvent Event;//[Offset: 0x28, Size: 0x40] 0x7e61c18900

--------------------------------
Class: AISense_Prediction.AISense.Object
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7e61bd9ac0
	void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0x36a258ebd041 0x7e61c06a60
	void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0x36a158ebd041 0x7e61c06b40

--------------------------------
Class: AIPredictionEvent
	Actor* Requestor;//[Offset: 0x0, Size: 0x8] 0x7e61481980
	Actor* PredictedActor;//[Offset: 0x8, Size: 0x8] 0x7e61481a00

--------------------------------
Class: AISense_Team.AISense.Object
	AITeamStimulusEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7e61bd9a20

--------------------------------
Class: AITeamStimulusEvent
	Actor* Broadcaster;//[Offset: 0x40, Size: 0x8] 0x7e61481780
	Actor* Enemy;//[Offset: 0x48, Size: 0x8] 0x7e61481800

--------------------------------
Class: AISense_Touch.AISense.Object
	AITouchEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x7e61bd9980

--------------------------------
Class: AITouchEvent
	Actor* TouchReceiver;//[Offset: 0x18, Size: 0x8] 0x7e61481680
	Actor* OtherActor;//[Offset: 0x20, Size: 0x8] 0x7e61481700

--------------------------------
Class: AISightTargetInterface.Interface.Object

--------------------------------
Class: AITask.GameplayTask.Object
	AIController* OwnerController;//[Offset: 0x60, Size: 0x8] 0x7e61c1a980

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object

--------------------------------
Class: AITask_MoveTo.AITask.GameplayTask.Object
	delegate OnRequestFailed;//[Offset: 0x68, Size: 0x10] 0x7e61c1c380
	delegate OnMoveFinished;//[Offset: 0x78, Size: 0x10] 0x7e61c1c400
	AIMoveRequest MoveRequest;//[Offset: 0x88, Size: 0x48] 0x7e61c1c480
	AITask_MoveTo* AIMoveTo(AIController* Controller, Vector GoalLocation, Actor* GoalActor, float AcceptanceRadius, byte StopOnOverlap, byte AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, byte ProjectGoalOnNavigation);// 0x36a558ebd041 0x7e61c067c0

--------------------------------
Class: AIMoveRequest
	Actor* GoalActor;//[Offset: 0x0, Size: 0x8] 0x7e61481600

--------------------------------
Class: AITask_RunEQS.AITask.GameplayTask.Object
	AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate);// 0x36a658ebd041 0x7e61c066e0

--------------------------------
Class: BehaviorTreeTypes.Object

--------------------------------
Class: BlackboardAssetProvider.Interface.Object
	BlackboardData* GetBlackboardAsset();// 0x36af58ebd041 0x7e61c05f00

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Class.BlackboardKeyType.Object
	ClassPtrProperty BaseClass;//[Size: 0x8] 0x7e61bd92a0

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object
	Enum* EnumType;//[Offset: 0x30, Size: 0x8] 0x7e61c1db80
	FString EnumName;//[Offset: 0x38, Size: 0x10] 0x7e61c1dc00
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7e61c1dc80

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Name.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object
	FString EnumName;//[Offset: 0x30, Size: 0x10] 0x7e61c1da80
	Enum* EnumType;//[Offset: 0x40, Size: 0x8] 0x7e61c1db00

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	ClassPtrProperty BaseClass;//[Size: 0x8] 0x7e61bd9200

--------------------------------
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x30, Size: 0x10] 0x7e61c1da00

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object
	byte FinishMode;//[Offset: 0x8c, Size: 0x1] 0x7e61c1f780

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x60, Size: 0x28] 0x7e61c1f600

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10] 0x7e61691be0
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8] 0x7e61481300
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8] 0x7e61691c80
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1] 0x7e61481380
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1] 0x7e61481400

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int IntValue;//[Offset: 0x88, Size: 0x4] 0x7e61c1f300
	float FloatValue;//[Offset: 0x8c, Size: 0x4] 0x7e61c1f380
	FString StringValue;//[Offset: 0x90, Size: 0x10] 0x7e61c1f400
	FString CachedDescription;//[Offset: 0xa0, Size: 0x10] 0x7e61c1f480
	byte OperationType;//[Offset: 0xb0, Size: 0x1] 0x7e61c1f500
	byte NotifyObserver;//[Offset: 0xb1, Size: 0x1] 0x7e61c1f580

--------------------------------
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x60, Size: 0x8] 0x7e61c1fb80
	Actor* ActorOwner;//[Offset: 0x68, Size: 0x8] 0x7e61c1fc00
	FName[] ObservedKeyNames;//[Offset: 0x70, Size: 0x10] 0x7e61bdb960
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7e61c1fd00
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x7e61c1fd80
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x7e61c1fe00
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x36d558ebd041 0x7e61c07780
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x36d458ebd041 0x7e61c07860
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36d358ebd041 0x7e61c07940
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0x36d258ebd041 0x7e61c07a20
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36d158ebd041 0x7e61c07b00
	void ReceiveObserverActivated(Actor* OwnerActor);// 0x36d058ebd041 0x7e61c07be0
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36cf58ebd041 0x7e61c07cc0
	void ReceiveExecutionStart(Actor* OwnerActor);// 0x36ce58ebd041 0x7e61c07da0
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0x36cd58ebd041 0x7e61c07e80
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0x36cc58ebd041 0x7e61c07f60
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36cb58ebd041 0x7e61c08040
	bool PerformConditionCheck(Actor* OwnerActor);// 0x36ca58ebd041 0x7e61c08120
	bool IsDecoratorObserverActive();// 0x36c958ebd041 0x7e61c08200
	bool IsDecoratorExecutionActive();// 0x36c858ebd041 0x7e61c082e0

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ActorToCheck;//[Offset: 0x60, Size: 0x28] 0x7e61c1f980
	enum TagsToMatch;//[Offset: 0x88, Size: 0x1] 0x7e61bdb8c0
	GameplayTagContainer GameplayTags;//[Offset: 0x90, Size: 0x20] 0x7e61c1fa80
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10] 0x7e61c1fb00

--------------------------------
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte Operator;//[Offset: 0x5a, Size: 0x1] 0x7e61c1f800
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x7e61c1f880
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x7e61c1f900

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x7e61c20f00
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x7e61c20f80
	BlackboardKeySelector ConeDirection;//[Offset: 0x88, Size: 0x28] 0x7e61c21000
	BlackboardKeySelector Observed;//[Offset: 0xb0, Size: 0x28] 0x7e61c21080

--------------------------------
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float CoolDownTime;//[Offset: 0x5c, Size: 0x4] 0x7e61c20e80

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x7e61c20c80
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x7e61c20d00
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7e61c20d80
	byte PathQueryType;//[Offset: 0xb1, Size: 0x1] 0x7e61c20e00
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8] 0x7e61bdb820

--------------------------------
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x88, Size: 0x4] 0x7e61c20980
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x90, Size: 0x38] 0x7e61c20a00
	enum GeometricDistanceType;//[Offset: 0xc8, Size: 0x1] 0x7e61bdb780
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1] 0x7e61c20b00
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1] 0x7e61c20b80
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1] 0x7e61c20c00

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class Object* TestClass;//[Offset: 0x88, Size: 0x8] 0x7e61bdb6e0

--------------------------------
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x7e61c20700
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x7e61c20780
	BlackboardKeySelector Observed;//[Offset: 0x88, Size: 0x28] 0x7e61c20800
	bool bUseSelfAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7e61c20880
	bool bUseSelfAsObserved;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x7e61c20900

--------------------------------
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int NumLoops;//[Offset: 0x5c, Size: 0x4] 0x7e61c20580
	bool bInfiniteLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7e61c20600
	float InfiniteLoopTimeoutTime;//[Offset: 0x64, Size: 0x4] 0x7e61c20680

--------------------------------
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x7e61c20400
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x7e61c20480
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7e61c20500

--------------------------------
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x7e61c20200
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x7e61c20280
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7e61c20300
	bool bActivatesCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x7e61c20380

--------------------------------
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float TimeLimit;//[Offset: 0x5c, Size: 0x4] 0x7e61c20180

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object
	void StopUsingExternalEvent(BTNode* NodeOwner);// 0x36f058ebd041 0x7e61c099a0
	void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0x36ef58ebd041 0x7e61c09a80
	void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0x36ee58ebd041 0x7e61c09b60
	void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0x36ed58ebd041 0x7e61c09c40
	void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0x36ec58ebd041 0x7e61c09d20
	void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0x36eb58ebd041 0x7e61c09e00
	void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0x36ea58ebd041 0x7e61c09ee0
	void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0x36e958ebd041 0x7e61c09fc0
	void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0x36e858ebd041 0x7e61c0a0a0
	void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0x36e758ebd041 0x7e61c0a180
	void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0x36e658ebd041 0x7e61c0a260
	void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0x36e558ebd041 0x7e61c0a340
	BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0x36e458ebd041 0x7e61c0a420
	BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0x36e358ebd041 0x7e61c0a500
	Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36e258ebd041 0x7e61c0a5e0
	FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36e158ebd041 0x7e61c0a6c0
	Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36e058ebd041 0x7e61c0a7a0
	Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36df58ebd041 0x7e61c0a880
	FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36de58ebd041 0x7e61c0a960
	int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36dd58ebd041 0x7e61c0aa40
	float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36dc58ebd041 0x7e61c0ab20
	byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36db58ebd041 0x7e61c0ac00
	class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x371c58ebd041 0x7e61c0ace0
	bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36d958ebd041 0x7e61c07400
	Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36d858ebd041 0x7e61c074e0
	void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36d758ebd041 0x7e61c075c0
	void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36d658ebd041 0x7e61c076a0

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x68, Size: 0x28] 0x7e61c23d00

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8] 0x7e61c23380
	Actor* ActorOwner;//[Offset: 0x70, Size: 0x8] 0x7e61c23400
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x7e61c23480
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x7e61c23500
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x36f958ebd041 0x7e61c091c0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x36f858ebd041 0x7e61c092a0
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36f758ebd041 0x7e61c09380
	void ReceiveSearchStart(Actor* OwnerActor);// 0x36f658ebd041 0x7e61c09460
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36f558ebd041 0x7e61c09540
	void ReceiveDeactivation(Actor* OwnerActor);// 0x36f458ebd041 0x7e61c09620
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36f358ebd041 0x7e61c09700
	void ReceiveActivation(Actor* OwnerActor);// 0x36f258ebd041 0x7e61c097e0
	bool IsServiceActive();// 0x36f158ebd041 0x7e61c098c0

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	byte FocusPriority;//[Offset: 0x90, Size: 0x1] 0x7e61c23300

--------------------------------
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0x90, Size: 0x48] 0x7e61c23200
	bool bUpdateBBOnFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x7e61c23280

--------------------------------
Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8] 0x7e61485000
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10] 0x7e61693da0
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28] 0x7e61485100
	byte RunMode;//[Offset: 0x40, Size: 0x1] 0x7e61485180
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x7e61485200

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7e61485280
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x7e61691500
	float Value;//[Offset: 0xc, Size: 0x4] 0x7e61483280
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28] 0x7e61483300

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x70, Size: 0x28] 0x7e61c25180

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x70, Size: 0x8] 0x7e61c24700
	Actor* ActorOwner;//[Offset: 0x78, Size: 0x8] 0x7e61c24780
	IntervalCountdown TickInterval;//[Offset: 0x80, Size: 0x8] 0x7e61c24800
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x7e61c24880
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0x370558ebd041 0x7e61c0c100
	void SetFinishOnMessage(FName MessageName);// 0x370458ebd041 0x7e61c0c1e0
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x370358ebd041 0x7e61c0c2c0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x370258ebd041 0x7e61c0c3a0
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x370158ebd041 0x7e61c0c480
	void ReceiveExecute(Actor* OwnerActor);// 0x370058ebd041 0x7e61c0c560
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36ff58ebd041 0x7e61c0c640
	void ReceiveAbort(Actor* OwnerActor);// 0x36fe58ebd041 0x7e61c0c720
	bool IsTaskExecuting();// 0x36fd58ebd041 0x7e61c0c800
	bool IsTaskAborting();// 0x36fc58ebd041 0x7e61c0c8e0
	void FinishExecute(bool bSuccess);// 0x373d58ebd041 0x7e61c0c9c0
	void FinishAbort();// 0x36fa58ebd041 0x7e61c090e0

--------------------------------
Class: IntervalCountdown
	float Interval;//[Offset: 0x0, Size: 0x4] 0x7e61481580

--------------------------------
Class: BTTask_FinishWithResult.BTTaskNode.BTNode.Object
	byte Result;//[Offset: 0x69, Size: 0x1] 0x7e61c24680

--------------------------------
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object
	bool bWaitForGameplayTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x7e61c24600

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object
	float Loudnes;//[Offset: 0x6c, Size: 0x4] 0x7e61c24580

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x98, Size: 0x4] 0x7e61c26100
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa0, Size: 0x8] 0x7e61bdb460
	float ObservedBlackboardValueTolerance;//[Offset: 0xa8, Size: 0x4] 0x7e61c26180
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x7e61c26200
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x7e61c26280
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1] 0x7e61c26300
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1] 0x7e61c24280
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1] 0x7e61c24300
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1] 0x7e61c24380
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xac, Size: 0x1] 0x7e61c24400
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1] 0x7e61c24480
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1] 0x7e61c24500

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1] 0x7e61c25f80
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae, Size: 0x1] 0x7e61c26000
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xae, Size: 0x1] 0x7e61c26080

--------------------------------
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object
	AnimationAsset* AnimationToPlay;//[Offset: 0x70, Size: 0x8] 0x7e61c25d00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7e61c25d80
	bool bNonBlocking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x7e61c25e00
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0x80, Size: 0x8] 0x7e61c25e80
	SkeletalMeshComponent* CachedSkelMesh;//[Offset: 0x88, Size: 0x8] 0x7e61c25f00

--------------------------------
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object
	SoundCue* SoundToPlay;//[Offset: 0x70, Size: 0x8] 0x7e61c25c80

--------------------------------
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object
	PawnAction* Action;//[Offset: 0x70, Size: 0x8] 0x7e61c25c00

--------------------------------
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float Precision;//[Offset: 0x98, Size: 0x4] 0x7e61c25b80

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object
	BehaviorTree* BehaviorAsset;//[Offset: 0x70, Size: 0x8] 0x7e61c25b00

--------------------------------
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object
	GameplayTag InjectionTag;//[Offset: 0x6c, Size: 0x8] 0x7e61c25980
	BehaviorTree* DefaultBehaviorAsset;//[Offset: 0x78, Size: 0x8] 0x7e61c25a00
	BehaviorTree* BehaviorAsset;//[Offset: 0x80, Size: 0x8] 0x7e61c25a80

--------------------------------
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	EnvQuery* QueryTemplate;//[Offset: 0x98, Size: 0x8] 0x7e61c25580
	EnvNamedValue[] QueryParams;//[Offset: 0xa0, Size: 0x10] 0x7e61bdb320
	AIDynamicParam[] QueryConfig;//[Offset: 0xb0, Size: 0x10] 0x7e61bdb3c0
	byte RunMode;//[Offset: 0xc0, Size: 0x1] 0x7e61c25700
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0xc8, Size: 0x28] 0x7e61c25780
	bool bUseBBKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x7e61c25800
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0xf8, Size: 0x48] 0x7e61c25880
	bool bUpdateBBOnFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1] 0x7e61c25900

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7e61482180
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x7e616918c0
	float Value;//[Offset: 0xc, Size: 0x4] 0x7e61482280

--------------------------------
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x6c, Size: 0x8] 0x7e61c25400
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x7e61c25480
	float CooldownDuration;//[Offset: 0x78, Size: 0x4] 0x7e61c25500

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x6c, Size: 0x4] 0x7e61c25300
	float RandomDeviation;//[Offset: 0x70, Size: 0x4] 0x7e61c25380

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x78, Size: 0x28] 0x7e61c27380

--------------------------------
Class: CrowdAgentInterface.Interface.Object

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x2e0, Size: 0x18] 0x7e61c26e00
	void SuspendCrowdSteering(bool bSuspend);// 0x370a58ebd041 0x7e61c0bca0

--------------------------------
Class: CrowdManager.CrowdManagerBase.Object
	NavigationData* MyNavData;//[Offset: 0x28, Size: 0x8] 0x7e61c26800
	CrowdAvoidanceConfig[] AvoidanceConfig;//[Offset: 0x30, Size: 0x10] 0x7e61bdb1e0
	CrowdAvoidanceSamplingPattern[] SamplingPatterns;//[Offset: 0x40, Size: 0x10] 0x7e61bdb280
	int MaxAgents;//[Offset: 0x50, Size: 0x4] 0x7e61c26980
	float MaxAgentRadius;//[Offset: 0x54, Size: 0x4] 0x7e61c26a00
	int MaxAvoidedAgents;//[Offset: 0x58, Size: 0x4] 0x7e61c26a80
	int MaxAvoidedWalls;//[Offset: 0x5c, Size: 0x4] 0x7e61c26b00
	float NavmeshCheckInterval;//[Offset: 0x60, Size: 0x4] 0x7e61c26b80
	float PathOptimizationInterval;//[Offset: 0x64, Size: 0x4] 0x7e61c26c00
	float SeparationDirClamp;//[Offset: 0x68, Size: 0x4] 0x7e61c26c80
	float PathOffsetRadiusMultiplier;//[Offset: 0x6c, Size: 0x4] 0x7e61c26d00
	bool bResolveCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x70, Size: 0x1] 0x7e61c26d80

--------------------------------
Class: CrowdAvoidanceConfig
	float VelocityBias;//[Offset: 0x0, Size: 0x4] 0x7e61482980
	float DesiredVelocityWeight;//[Offset: 0x4, Size: 0x4] 0x7e61482a00
	float CurrentVelocityWeight;//[Offset: 0x8, Size: 0x4] 0x7e61482a80
	float SideBiasWeight;//[Offset: 0xc, Size: 0x4] 0x7e61482b00
	float ImpactTimeWeight;//[Offset: 0x10, Size: 0x4] 0x7e61482b80
	float ImpactTimeRange;//[Offset: 0x14, Size: 0x4] 0x7e61482c00
	byte CustomPatternIdx;//[Offset: 0x18, Size: 0x1] 0x7e61482c80
	byte AdaptiveDivisions;//[Offset: 0x19, Size: 0x1] 0x7e61482d00
	byte AdaptiveRings;//[Offset: 0x1a, Size: 0x1] 0x7e61482d80
	byte AdaptiveDepth;//[Offset: 0x1b, Size: 0x1] 0x7e61482e00

--------------------------------
Class: CrowdAvoidanceSamplingPattern
	float[] Angles;//[Offset: 0x0, Size: 0x10] 0x7e61691960
	float[] Radii;//[Offset: 0x10, Size: 0x10] 0x7e61691a00

--------------------------------
Class: DetourCrowdAIController.AIController.Controller.Actor.Object

--------------------------------
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object
	void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, out Vector ResultingLocation);// 0x370e58ebd041 0x7e61c0b920
	void ProvideSingleActor(Object* QuerierObject, Actor* QuerierActor, out Actor* ResultingActor);// 0x370d58ebd041 0x7e61c0ba00
	void ProvideLocationsSet(Object* QuerierObject, Actor* QuerierActor, out Vector[] ResultingLocationSet);// 0x370c58ebd041 0x7e61c0bae0
	void ProvideActorsSet(Object* QuerierObject, Actor* QuerierActor, out Actor*[] ResultingActorsSet);// 0x370b58ebd041 0x7e61c0bbc0

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object

--------------------------------
Class: EnvQueryContext_Querier.EnvQueryContext.Object

--------------------------------
Class: EnvQueryDebugHelpers.Object

--------------------------------
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* SearchedActorClass;//[Offset: 0x50, Size: 0x8] 0x7e61bdae20
	AIDataProviderBoolValue GenerateOnlyActorsInRadius;//[Offset: 0x58, Size: 0x38] 0x7e61c27f80
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x90, Size: 0x38] 0x7e61c28000
	class EnvQueryContext* SearchCenter;//[Offset: 0xc8, Size: 0x8] 0x7e61bdaec0

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	FText GeneratorsActionDescription;//[Offset: 0x50, Size: 0x18] 0x7e61c27d00
	class EnvQueryContext* Context;//[Offset: 0x68, Size: 0x8] 0x7e61bdac40
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x70, Size: 0x8] 0x7e61bdace0
	Object* GetQuerier();// 0x371258ebd041 0x7e61c0b5a0
	void DoItemGeneration(out const Vector[] ContextLocations);// 0x371158ebd041 0x7e61c0b680
	void AddGeneratedVector(Vector GeneratedVector);// 0x371058ebd041 0x7e61c0b760
	void AddGeneratedActor(Actor* GeneratedActor);// 0x370f58ebd041 0x7e61c0b840

--------------------------------
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object
	EnvQueryGenerator*[] Generators;//[Offset: 0x50, Size: 0x10] 0x7e61bdab00
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x7e61c27c00
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x7e61c27c80
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x68, Size: 0x8] 0x7e61bdaba0

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x50, Size: 0x38] 0x7e61c27b00

--------------------------------
Class: EnvTraceData
	int VersionNum;//[Offset: 0x0, Size: 0x4] 0x7e61483900
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x8, Size: 0x8] 0x7e61691640
	float ProjectDown;//[Offset: 0x10, Size: 0x4] 0x7e61483980
	float ProjectUp;//[Offset: 0x14, Size: 0x4] 0x7e61483a00
	float ExtentX;//[Offset: 0x18, Size: 0x4] 0x7e61483a80
	float ExtentY;//[Offset: 0x1c, Size: 0x4] 0x7e61483b00
	float ExtentZ;//[Offset: 0x20, Size: 0x4] 0x7e61483b80
	float PostProjectionVerticalOffset;//[Offset: 0x24, Size: 0x4] 0x7e61483c00
	byte TraceChannel;//[Offset: 0x28, Size: 0x1] 0x7e61483c80
	byte SerializedChannel;//[Offset: 0x29, Size: 0x1] 0x7e61483d00
	FName TraceProfileName;//[Offset: 0x2c, Size: 0x8] 0x7e61483d80
	byte TraceShape;//[Offset: 0x34, Size: 0x1] 0x7e61483e00
	byte TraceMode;//[Offset: 0x35, Size: 0x1] 0x7e61483e80
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36, Size: 0x1] 0x7e61483f00
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x36, Size: 0x1] 0x7e61483f80
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x36, Size: 0x1] 0x7e61484000
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x36, Size: 0x1] 0x7e61484080
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x36, Size: 0x1] 0x7e61484100
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x36, Size: 0x1] 0x7e61484180

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x88, Size: 0x38] 0x7e61c27880
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0xc0, Size: 0x38] 0x7e61c27900
	AIDataProviderFloatValue AngleStep;//[Offset: 0xf8, Size: 0x38] 0x7e61c27980
	AIDataProviderFloatValue Range;//[Offset: 0x130, Size: 0x38] 0x7e61c27a00
	class EnvQueryContext* CenterActor;//[Offset: 0x168, Size: 0x8] 0x7e61bdaa60
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x7e61c27a80

--------------------------------
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object
	class EnvQueryContext* QueryContext;//[Offset: 0x50, Size: 0x8] 0x7e61bda9c0

--------------------------------
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue InnerRadius;//[Offset: 0x88, Size: 0x38] 0x7e61c27480
	AIDataProviderFloatValue OuterRadius;//[Offset: 0xc0, Size: 0x38] 0x7e61c27500
	AIDataProviderIntValue NumberOfRings;//[Offset: 0xf8, Size: 0x38] 0x7e61c27580
	AIDataProviderIntValue PointsPerRing;//[Offset: 0x130, Size: 0x38] 0x7e61c27600
	EnvDirection ArcDirection;//[Offset: 0x168, Size: 0x20] 0x7e61c27680
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x188, Size: 0x38] 0x7e61c27700
	bool bUseSpiralPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x7e61c27780
	class EnvQueryContext* Center;//[Offset: 0x1c8, Size: 0x8] 0x7e61bda920
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 0x1] 0x7e61c27800

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue
	int DefaultValue;//[Offset: 0x30, Size: 0x4] 0x7e61480300

--------------------------------
Class: EnvDirection
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x8] 0x7e616916e0
	class EnvQueryContext* LineTo;//[Offset: 0x8, Size: 0x8] 0x7e61691780
	class EnvQueryContext* Rotation;//[Offset: 0x10, Size: 0x8] 0x7e61691820
	byte DirMode;//[Offset: 0x18, Size: 0x1] 0x7e61484200

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x88, Size: 0x38] 0x7e61c29000
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xc0, Size: 0x38] 0x7e61c29080
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xf8, Size: 0x38] 0x7e61c29100
	enum PointOnCircleSpacingMethod;//[Offset: 0x130, Size: 0x1] 0x7e61bda7e0
	EnvDirection ArcDirection;//[Offset: 0x138, Size: 0x20] 0x7e61c29200
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x158, Size: 0x38] 0x7e61c29280
	float AngleRadians;//[Offset: 0x190, Size: 0x4] 0x7e61c29300
	class EnvQueryContext* CircleCenter;//[Offset: 0x198, Size: 0x8] 0x7e61bda880
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1] 0x7e61c29380
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x1a8, Size: 0x38] 0x7e61c29400
	EnvTraceData TraceData;//[Offset: 0x1e0, Size: 0x38] 0x7e61c29480
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x7e61c27400

--------------------------------
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue GridSize;//[Offset: 0x88, Size: 0x38] 0x7e61c28f00
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xc0, Size: 0x38] 0x7e61c28f80
	class EnvQueryContext* GenerateAround;//[Offset: 0xf8, Size: 0x8] 0x7e61bda740

--------------------------------
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderBoolValue PathToItem;//[Offset: 0x100, Size: 0x38] 0x7e61c28e00
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x138, Size: 0x8] 0x7e61bda6a0
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x140, Size: 0x38] 0x7e61c28e80

--------------------------------
Class: EnvQueryGenerator_PerceivedActors.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* AllowedActorClass;//[Offset: 0x50, Size: 0x8] 0x7e61bdce00
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x58, Size: 0x38] 0x7e61c28d00
	class EnvQueryContext* ListenerContext;//[Offset: 0x90, Size: 0x8] 0x7e61bda560
	class AISense* SenseToUse;//[Offset: 0x98, Size: 0x8] 0x7e61bda600
	bool bIncludeKnownActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x7e61c28d80

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x7e61c29b80
	class EnvQueryContext* DistanceTo;//[Offset: 0x1f8, Size: 0x8] 0x7e61bdc9a0

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object
	EnvDirection LineA;//[Offset: 0x1f8, Size: 0x20] 0x7e61c29980
	EnvDirection LineB;//[Offset: 0x218, Size: 0x20] 0x7e61c29a00
	enum TestMode;//[Offset: 0x238, Size: 0x1] 0x7e61bdc900
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x7e61c29b00

--------------------------------
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x1f8, Size: 0x48] 0x7e61c29700
	bool bRejectIncompatibleItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x7e61c29780
	bool bUpdatedToUseQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1] 0x7e61c29800
	enum TagsToMatch;//[Offset: 0x242, Size: 0x1] 0x7e61bdc860
	GameplayTagContainer GameplayTags;//[Offset: 0x248, Size: 0x20] 0x7e61c29900

--------------------------------
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object
	EnvOverlapData OverlapData;//[Offset: 0x1f8, Size: 0x30] 0x7e61c29680

--------------------------------
Class: EnvOverlapData
	float ExtentX;//[Offset: 0x0, Size: 0x4] 0x7e61483480
	float ExtentY;//[Offset: 0x4, Size: 0x4] 0x7e61483500
	float ExtentZ;//[Offset: 0x8, Size: 0x4] 0x7e61483580
	Vector ShapeOffset;//[Offset: 0x10, Size: 0x18] 0x7e61483600
	byte OverlapChannel;//[Offset: 0x28, Size: 0x1] 0x7e61483680
	byte OverlapShape;//[Offset: 0x29, Size: 0x1] 0x7e61483700
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 0x1] 0x7e61483780
	bool bOverlapComplex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a, Size: 0x1] 0x7e61483800
	bool bSkipOverlapQuerier;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a, Size: 0x1] 0x7e61483880

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x7e61c29500
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8] 0x7e61bdc720
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x200, Size: 0x38] 0x7e61c29580
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x238, Size: 0x38] 0x7e61c29600
	class NavigationQueryFilter* FilterClass;//[Offset: 0x270, Size: 0x8] 0x7e61bdc7c0

--------------------------------
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x278, Size: 0x38] 0x7e61c2b580

--------------------------------
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x1f8, Size: 0x38] 0x7e61c2b500

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x1f8, Size: 0x38] 0x7e61c2b300
	AIDataProviderBoolValue TraceFromContext;//[Offset: 0x230, Size: 0x38] 0x7e61c2b380
	AIDataProviderFloatValue ItemHeightOffset;//[Offset: 0x268, Size: 0x38] 0x7e61c2b400
	AIDataProviderFloatValue ContextHeightOffset;//[Offset: 0x2a0, Size: 0x38] 0x7e61c2b480
	class EnvQueryContext* Context;//[Offset: 0x2d8, Size: 0x8] 0x7e61bdc680

--------------------------------
Class: EnvQueryTest_Volume.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* VolumeContext;//[Offset: 0x1f8, Size: 0x8] 0x7e61bdc540
	class Volume* VolumeClass;//[Offset: 0x200, Size: 0x8] 0x7e61bdc5e0
	bool bDoComplexVolumeTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x7e61c2b280

--------------------------------
Class: EnvQueryTypes.Object

--------------------------------
Class: EQSQueryResultSourceInterface.Interface.Object

--------------------------------
Class: EQSRenderingComponent.DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object
	EnvQuery* QueryTemplate;//[Offset: 0x600, Size: 0x8] 0x7e61c2ac00
	EnvNamedValue[] QueryParams;//[Offset: 0x608, Size: 0x10] 0x7e61bdc360
	AIDynamicParam[] QueryConfig;//[Offset: 0x618, Size: 0x10] 0x7e61bdc400
	float TimeLimitPerStep;//[Offset: 0x628, Size: 0x4] 0x7e61c2ad80
	int StepToDebugDraw;//[Offset: 0x62c, Size: 0x4] 0x7e61c2ae00
	enum HighlightMode;//[Offset: 0x630, Size: 0x1] 0x7e61bdc4a0
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x631, Size: 0x1] 0x7e61c2af00
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x631, Size: 0x1] 0x7e61c2af80
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x631, Size: 0x1] 0x7e61c2b000
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x631, Size: 0x1] 0x7e61c2b080
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x631, Size: 0x1] 0x7e61c2b100
	byte QueryingMode;//[Offset: 0x632, Size: 0x1] 0x7e61c2b180
	NavAgentProperties NavAgentProperties;//[Offset: 0x638, Size: 0x30] 0x7e61c2b200

--------------------------------
Class: GenericTeamAgentInterface.Interface.Object

--------------------------------
Class: GridPathAIController.AIController.Controller.Actor.Object

--------------------------------
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	NavLocalGridManager* GridManager;//[Offset: 0x2c8, Size: 0x8] 0x7e61c2ab80

--------------------------------
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x288, Size: 0x10] 0x7e61bdc220
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x298, Size: 0x10] 0x7e61bdc2c0
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x2a8, Size: 0x8] 0x7e61c2a700
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x7e61c2a780
	delegate OnSmartLinkReached;//[Offset: 0x2b8, Size: 0x10] 0x7e61c2a800
	void SetSmartLinkEnabled(bool bEnabled);// 0x371858ebd041 0x7e61c0b060
	void ResumePathFollowing(Actor* Agent);// 0x371758ebd041 0x7e61c0b140
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x371658ebd041 0x7e61c0b220
	bool IsSmartLinkEnabled();// 0x371558ebd041 0x7e61c0b300
	bool HasMovingAgents();// 0x371458ebd041 0x7e61c0b3e0

--------------------------------
Class: PathFollowingManager.Object

--------------------------------
Class: PawnAction_BlueprintBase.PawnAction.Object
	void ActionTick(Pawn* ControlledPawn, float DeltaSeconds);// 0x372b58ebd041 0x7e61c0d980
	void ActionStart(Pawn* ControlledPawn);// 0x372a58ebd041 0x7e61c0da60
	void ActionResume(Pawn* ControlledPawn);// 0x372958ebd041 0x7e61c0db40
	void ActionPause(Pawn* ControlledPawn);// 0x372858ebd041 0x7e61c0dc20
	void ActionFinished(Pawn* ControlledPawn, byte WithResult);// 0x372758ebd041 0x7e61c0dd00

--------------------------------
Class: PawnAction_Move.PawnAction.Object
	Actor* GoalActor;//[Offset: 0x90, Size: 0x8] 0x7e61c2de80
	Vector GoalLocation;//[Offset: 0x98, Size: 0x18] 0x7e61c2df00
	float AcceptableRadius;//[Offset: 0xb0, Size: 0x4] 0x7e61c2df80
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8] 0x7e61bdbe60
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7e61c2e000
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x7e61c2e080
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x7e61c2e100
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x7e61c2e180
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x7e61c2e200
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x7e61c2e280
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc0, Size: 0x1] 0x7e61c2e300

--------------------------------
Class: PawnAction_Repeat.PawnAction.Object
	PawnAction* ActionToRepeat;//[Offset: 0x90, Size: 0x8] 0x7e61c2dd00
	PawnAction* RecentActionCopy;//[Offset: 0x98, Size: 0x8] 0x7e61c2dd80
	byte ChildFailureHandlingMode;//[Offset: 0xa0, Size: 0x1] 0x7e61c2de00

--------------------------------
Class: PawnAction_Sequence.PawnAction.Object
	PawnAction*[] ActionSequence;//[Offset: 0x90, Size: 0x10] 0x7e61bdbdc0
	byte ChildFailureHandlingMode;//[Offset: 0xa0, Size: 0x1] 0x7e61c2dc00
	PawnAction* RecentActionCopy;//[Offset: 0xa8, Size: 0x8] 0x7e61c2dc80

--------------------------------
Class: PawnAction_Wait.PawnAction.Object
	float TimeToWait;//[Offset: 0x90, Size: 0x4] 0x7e61c2db00

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object
	float HearingThreshold;//[Offset: 0xb0, Size: 0x4] 0x7e614a1300
	float LOSHearingThreshold;//[Offset: 0xb4, Size: 0x4] 0x7e614a1380
	float SightRadius;//[Offset: 0xb8, Size: 0x4] 0x7e614a1400
	float SensingInterval;//[Offset: 0xbc, Size: 0x4] 0x7e614a1480
	float HearingMaxSoundAge;//[Offset: 0xc0, Size: 0x4] 0x7e614a1500
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x7e614a1580
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1] 0x7e614a1600
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1] 0x7e614a1680
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1] 0x7e614a1700
	delegate OnSeePawn;//[Offset: 0xd0, Size: 0x10] 0x7e614a1780
	delegate OnHearNoise;//[Offset: 0xe0, Size: 0x10] 0x7e614a1800
	float PeripheralVisionAngle;//[Offset: 0xf0, Size: 0x4] 0x7e614a1880
	float PeripheralVisionCosine;//[Offset: 0xf4, Size: 0x4] 0x7e614a1900
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0x139c58ebd041 0x7e614b0cc0
	void SetSensingInterval(const float NewSensingInterval);// 0x139b58ebd041 0x7e614b0da0
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0x139a58ebd041 0x7e614b0e80
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0x139958ebd041 0x7e614b0f60
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0x139858ebd041 0x7e614b1040
	float GetPeripheralVisionCosine();// 0x139758ebd041 0x7e614b1120
	float GetPeripheralVisionAngle();// 0x139658ebd041 0x7e614b1200

--------------------------------
Class: VisualLoggerExtension.Object

--------------------------------
Class: RigVMMemoryStorageGeneratorClass.Class.Struct.Field.Object

--------------------------------
Class: CTPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: TPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: HumanPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: ZombiePlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: BaseController.PlayerController.Controller.Actor.Object
	ASFunction_NotThreadSafe HideHUD;//[Size: 0x0] 0x7e5a623d00
	ASFunction_ReferenceArg ShowHUD;//[Size: 0x0] 0x7e5a623e80
	ASFunction_NotThreadSafe TouchMove;//[Size: 0x0] 0x7e5a624000
	ASFunction_NotThreadSafe TouchReleased;//[Size: 0x0] 0x7e5a624180
	ASFunction_NotThreadSafe TouchPressed;//[Size: 0x0] 0x7e5a624300
	ASFunction_NoParams PopShowcursor;//[Size: 0x0] 0x7e5a624780
	ASFunction_NoParams PushShowCursor;//[Size: 0x0] 0x7e5a624900
	ASFunction_ReferenceArg PressedEsc;//[Size: 0x0] 0x7e5a624a80
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1] 0x7e5a624c00
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1] 0x7e5a624d80

--------------------------------
Class: CrosshairComponent.ActorComponent.Object
	Vector PunchAngle;//[Offset: 0xb0, Size: 0x18] 0x7e61df9900
	double CrossHairOffset;//[Offset: 0xc8, Size: 0x8] 0x7e61dfb480
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1] 0x7e5a623880
	ASFunction_DoubleArg DropPunchAngle;//[Size: 0x0] 0x7e5a623a00

--------------------------------
Class: FootStepComponent.ActorComponent.Object
	SoundWave* FootStepSound1;//[Offset: 0xc0, Size: 0x8] 0x7e61dfb200
	SoundWave* FootStepSound2;//[Offset: 0xc8, Size: 0x8] 0x7e62017200
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1] 0x7e5a623580
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1] 0x7e5a623700

--------------------------------
Class: HealthComponent.ActorComponent.Object
	delegate Event_OnTakeDamage;//[Offset: 0xb0, Size: 0x10] 0x7e61df9680
	delegate Event_OnUserDied;//[Offset: 0xc0, Size: 0x10] 0x7e62016d00
	delegate Event_OnClientHealthChange;//[Offset: 0xd0, Size: 0x10] 0x7e61df9700
	int health;//[Offset: 0xe0, Size: 0x4] 0x7e62016e80
	int maxHealth;//[Offset: 0xe4, Size: 0x4] 0x7e61df9800
	ASFunction_NoParams Rep_Health;//[Size: 0x0] 0x7e5a628b00
	ASFunction_DWordArg DecHp;//[Size: 0x0] 0x7e5a628c80
	ASFunction_ReferenceArg TakeDamage;//[Size: 0x0] 0x7e5a628e00
	ASFunction_DWordArg IncHp;//[Size: 0x0] 0x7e5a629100
	ASFunction_DWordArg SetHealth;//[Size: 0x0] 0x7e5a629280
	ASFunction_ByteReturn GetIsDead;//[Size: 0x0] 0x7e5a629400
	ASFunction_DWordReturn GetMaxHealth;//[Size: 0x0] 0x7e5a623280
	ASFunction_DWordReturn GetHealth;//[Size: 0x0] 0x7e5a623400

--------------------------------
Class: HudManagerComponent.ActorComponent.Object
	LiveGameUI* GameHud;//[Offset: 0xb0, Size: 0x8] 0x7e61dfb400
	class LiveGameUI* MobileGameHudClass;//[Offset: 0xb8, Size: 0x8] 0x7e5cecb500
	class LiveGameUI* PCGameHudClass;//[Offset: 0xc0, Size: 0x8] 0x7e5cecb5a0
	ASFunction_NotThreadSafe HideHUD;//[Size: 0x0] 0x7e5a628380
	ASFunction_NoParams ShowHudClient;//[Size: 0x0] 0x7e5a628500
	ASFunction_NotThreadSafe ShowHUD;//[Size: 0x0] 0x7e5a628680
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1] 0x7e5a628980

--------------------------------
Class: LiveGameUI.UserWidget.Widget.Visual.Object
	ProgressBar* ProgressBar_Hp;//[Offset: 0x290, Size: 0x8] 0x7e59f93b80
	TextBlock* TextBlock_Hp;//[Offset: 0x298, Size: 0x8] 0x7e59f93c00
	TextBlock* TextBlock_Clip;//[Offset: 0x2a0, Size: 0x8] 0x7e59f93c80
	TextBlock* TextBlock_Ammo;//[Offset: 0x2a8, Size: 0x8] 0x7e59f93d00
	WpnShow* MainWeapon;//[Offset: 0x2b0, Size: 0x8] 0x7e59f93d80
	WpnShow* SecondWeapon;//[Offset: 0x2b8, Size: 0x8] 0x7e59f93e00
	WpnShow* Knife;//[Offset: 0x2c0, Size: 0x8] 0x7e59f93e80
	MobileButton* Button_Shoot2;//[Offset: 0x2d0, Size: 0x8] 0x7e59f93f00
	Button* Button_Reload;//[Offset: 0x2d8, Size: 0x8] 0x7e59f93f80
	MobileSwitchButton* Button_Crouch;//[Offset: 0x2e0, Size: 0x8] 0x7e59f94000
	MobileButton* Button_Jump;//[Offset: 0x2e8, Size: 0x8] 0x7e59f94080
	Button* Button_Throw;//[Offset: 0x2f0, Size: 0x8] 0x7e59f94100
	MobileSwitchButton* Button_SwitchShoot;//[Offset: 0x2f8, Size: 0x8] 0x7e59f94180
	Button* Button_Jianshi;//[Offset: 0x300, Size: 0x8] 0x7e59f94200
	ASFunction_NotThreadSafe UpdateAmmo;//[Size: 0x0] 0x7e5a672b00
	ASFunction_NotThreadSafe UpdateCurrentWeapon;//[Size: 0x0] 0x7e5a672c80
	ASFunction_ReferenceArg UpdateWeapons;//[Size: 0x0] 0x7e5a672e00
	ASFunction_NotThreadSafe UpdateHp;//[Size: 0x0] 0x7e5a672f80
	ASFunction_NoParams ReloadPressed;//[Size: 0x0] 0x7e5a673100
	ASFunction_NoParams ShootRelease;//[Size: 0x0] 0x7e5a62f880
	ASFunction_NoParams ShootPressed;//[Size: 0x0] 0x7e5a62fa00
	ASFunction_ByteArg Crouch;//[Size: 0x0] 0x7e5a62fb80
	ASFunction_NoParams Jump;//[Size: 0x0] 0x7e5a62fe80
	ASFunction_NoParams ThrowWeapon;//[Size: 0x0] 0x7e5a62c700
	ASFunction_ObjectReturn GetLocalController;//[Size: 0x0] 0x7e5a62c880
	ASFunction_NoParams Jianshi;//[Size: 0x0] 0x7e5a62ca00
	ASFunction_NoParams Construct;//[Size: 0x1] 0x7e5a62cb80

--------------------------------
Class: WpnShow.UserWidget.Widget.Visual.Object
	Image* Image_Wpn;//[Offset: 0x290, Size: 0x8] 0x7e59f93400
	TextBlock* TextBlock_Name;//[Offset: 0x298, Size: 0x8] 0x7e59f93480
	Image* Image_TextGround;//[Offset: 0x2a0, Size: 0x8] 0x7e59f93500
	Image* Image_TextGround_NotCurrent;//[Offset: 0x2a8, Size: 0x8] 0x7e59f93580
	Button* Button_Change;//[Offset: 0x2b0, Size: 0x8] 0x7e59f93600
	enum WpnSlot;//[Offset: 0x2b8, Size: 0x1] 0x7e5ceccc20
	ASFunction_NoParams ChangeWpn;//[Size: 0x0] 0x7e5a672500
	ASFunction_ByteArg SetCurrentWeapon;//[Size: 0x0] 0x7e5a672680
	ASFunction_NotThreadSafe UpdateWeapon;//[Size: 0x0] 0x7e5a672800
	ASFunction_NoParams Construct;//[Size: 0x1] 0x7e5a672980

--------------------------------
Class: MobileButton.UserWidget.Widget.Visual.Object
	Button* Button;//[Offset: 0x290, Size: 0x8] 0x7e59f95100
	Texture2D* PressedTexture;//[Offset: 0x298, Size: 0x8] 0x7e59f95180
	Texture2D* ReleasedTexture;//[Offset: 0x2a0, Size: 0x8] 0x7e59f95200
	Image* Image_fg;//[Offset: 0x2a8, Size: 0x8] 0x7e59f95280
	Texture2D* MarkTexture;//[Offset: 0x2b0, Size: 0x8] 0x7e59f93200
	Image* Image_bg;//[Offset: 0x2b8, Size: 0x8] 0x7e59f93280
	ASFunction_NoParams OnReleased;//[Size: 0x0] 0x7e5a671d80
	ASFunction_NoParams OnPressed;//[Size: 0x0] 0x7e5a671f00
	ASFunction_NoParams Construct;//[Size: 0x1] 0x7e5a672200

--------------------------------
Class: MobileSwitchButton.UserWidget.Widget.Visual.Object
	Button* Button;//[Offset: 0x290, Size: 0x8] 0x7e59f94e00
	Image* Image_fg;//[Offset: 0x298, Size: 0x8] 0x7e59f94e80
	Texture2D* Image_State1;//[Offset: 0x2a0, Size: 0x8] 0x7e59f94f00
	Texture2D* Image_State2;//[Offset: 0x2a8, Size: 0x8] 0x7e59f94f80
	bool IsChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x7e59f95000
	delegate OnStateChange;//[Offset: 0x2b8, Size: 0x10] 0x7e59f95080
	ASFunction_NoParams Reset;//[Size: 0x0] 0x7e5a671900
	ASFunction_NoParams OnSwitch;//[Size: 0x0] 0x7e5a671a80
	ASFunction_NoParams Construct;//[Size: 0x1] 0x7e5a671c00

--------------------------------
Class: PlayerInputComponent.InputComponent.ActorComponent.Object
	ASFunction_ReferenceArg Input_Crouch_R;//[Size: 0x0] 0x7e5a626880
	ASFunction_ReferenceArg Input_Crouch_P;//[Size: 0x0] 0x7e5a626a00
	ASFunction_ReferenceArg Input_Jump;//[Size: 0x0] 0x7e5a626b80
	ASFunction_FloatArg Input_LookRight;//[Size: 0x0] 0x7e5a626d00
	ASFunction_FloatArg Input_LookUp;//[Size: 0x0] 0x7e5a627000
	ASFunction_FloatArg Input_MoveRight;//[Size: 0x0] 0x7e5a627180
	ASFunction_FloatArg Input_MoveForward;//[Size: 0x0] 0x7e5a627300
	ASFunction_ReferenceArg Input_Common_Axis;//[Size: 0x0] 0x7e5a627480
	ASFunction_ReferenceArg Input_Common_DoubleClick;//[Size: 0x0] 0x7e5a627600
	ASFunction_ReferenceArg Input_Common_Repeat;//[Size: 0x0] 0x7e5a627780
	ASFunction_ReferenceArg Input_Common_Released;//[Size: 0x0] 0x7e5a627a80
	ASFunction_ReferenceArg Input_Common_Pressed;//[Size: 0x0] 0x7e5a627d80
	ASFunction_FloatArg Test;//[Size: 0x0] 0x7e5a627f00
	ASFunction_NoParams BindInput;//[Size: 0x0] 0x7e5a628080
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1] 0x7e5a628200

--------------------------------
Class: WeaponSystemComponent.ActorComponent.Object
	bool CanPickUpWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x7e62012b00
	BaseWeapon*[] Weapons;//[Offset: 0xb8, Size: 0x10] 0x7e5cecb460
	BaseWeapon* currentWeapon;//[Offset: 0xc8, Size: 0x8] 0x7e62012a80
	BaseWeapon* LastWeapon;//[Offset: 0xd8, Size: 0x8] 0x7e62012980
	ASFunction_NoParams RefreshHud;//[Size: 0x0] 0x7e5a62af00
	ASFunction_NoParams ChangeToSlot4;//[Size: 0x0] 0x7e5a62b080
	ASFunction_NoParams ChangeToLastWeapon;//[Size: 0x0] 0x7e5a62b200
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x0] 0x7e5a62b380
	ASFunction_ByteArg ChangeToWeapon;//[Size: 0x0] 0x7e5a62b500
	ASFunction_ByteArg ChangeToWeapon_SV;//[Size: 0x0] 0x7e5a62b800
	ASFunction_ByteArg ChangeToWeaponImpl;//[Size: 0x0] 0x7e5a62b980
	ASFunction_NoParams AutoSwitchWeapon;//[Size: 0x0] 0x7e5a62bb00
	ASFunction_ByteArg ThrowWeappon;//[Size: 0x0] 0x7e5a62bc80
	ASFunction_ByteArg ConfiscateWeapon;//[Size: 0x0] 0x7e5a62be00
	ASFunction_NotThreadSafe GiveWeapon;//[Size: 0x0] 0x7e5a62bf80
	ASFunction_NoParams OnDied;//[Size: 0x0] 0x7e5a62c100
	ASFunction_NoParams Rep_Weapons;//[Size: 0x0] 0x7e5a62c400
	ASFunction_NoParams Rep_CurrentWeapon;//[Size: 0x0] 0x7e5a62c580
	ASFunction_NotThreadSafe PickWeapon;//[Size: 0x0] 0x7e5a626400
	ASFunction_NotThreadSafe SetCurrentWeapon;//[Size: 0x0] 0x7e5a626580
	ASFunction_ObjectReturn GetCurrentWeapon;//[Size: 0x0] 0x7e5a626700

--------------------------------
Class: BaseWeapon.Actor.Object
	SkeletalMesh* FPWeaponSkeletalMesh;//[Offset: 0x278, Size: 0x8] 0x7e59f96200
	StaticMesh* TPWeaponStaticMesh;//[Offset: 0x280, Size: 0x8] 0x7e59f96280
	StaticMesh* FPMagazineSkeletalMesh;//[Offset: 0x288, Size: 0x8] 0x7e59f96300
	class AnimInstance* FPWeaponAnimBlueprint;//[Offset: 0x290, Size: 0x8] 0x7e5cecc400
	class AnimInstance* FPArmAnimBlueprint;//[Offset: 0x298, Size: 0x8] 0x7e5cecc4a0
	AnimSequence* ViewAnim;//[Offset: 0x2a0, Size: 0x8] 0x7e59f94280
	class AnimInstance* TPPlayerAnimBlueprint;//[Offset: 0x2a8, Size: 0x8] 0x7e5cecc540
	class AnimInstance* TPWeaponAnimBlueprint;//[Offset: 0x2b0, Size: 0x8] 0x7e5cecc5e0
	enum Slot;//[Offset: 0x2b8, Size: 0x1] 0x7e5cecc680
	bool Throwable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1] 0x7e59f94380
	FString WpnName;//[Offset: 0x2c0, Size: 0x10] 0x7e59f94400
	Texture2D* BigWeaponIcon;//[Offset: 0x2d0, Size: 0x8] 0x7e59f94480
	Texture2D* SmallWeaponIcon;//[Offset: 0x2d8, Size: 0x8] 0x7e59f94500
	bool IsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x7e59f94580
	double CrossHairDefaultOfs;//[Offset: 0x2e8, Size: 0x8] 0x7e59f94600
	ASFunction_NoParams RefreshHud;//[Size: 0x0] 0x7e5a675980
	ASFunction_ByteReturn CheckCanView;//[Size: 0x0] 0x7e5a675c80
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x0] 0x7e5a675e00
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1] 0x7e5a675f80
	ASFunction_NotThreadSafe SetScalarParamterValue;//[Size: 0x0] 0x7e5a676100
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1] 0x7e5a676280
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x0] 0x7e5a670100
	ASFunction_NoParams PutDown;//[Size: 0x0] 0x7e5a670400
	ASFunction_NotThreadSafe PutDown_CL;//[Size: 0x0] 0x7e5a670580
	ASFunction_NotThreadSafe PutOn_CL;//[Size: 0x0] 0x7e5a670700
	ASFunction_NotThreadSafe GetWeaponSampleInfo;//[Size: 0x0] 0x7e5a670880
	ASFunction_NoParams PutOn;//[Size: 0x0] 0x7e5a670a00

--------------------------------
Class: BasePlayer.Character.Pawn.Actor.Object
	SkeletalMesh* PlayerArmSkeletalMesh;//[Offset: 0x600, Size: 0x8] 0x7e62013f80
	SkeletalMesh* PlayerSkeletalMesh;//[Offset: 0x608, Size: 0x8] 0x7e62013e00
	enum Team;//[Offset: 0x610, Size: 0x1] 0x7e5cecace0
	CameraComponent* FPCameraComp;//[Offset: 0x618, Size: 0x8] 0x7e62013d80
	SceneComponent* FPRootComp;//[Offset: 0x620, Size: 0x8] 0x7e62013d00
	SkeletalMeshComponent* FPArmComp;//[Offset: 0x628, Size: 0x8] 0x7e62013c80
	SkeletalMeshComponent* FPWeaponComp;//[Offset: 0x630, Size: 0x8] 0x7e62013c00
	StaticMeshComponent* FPMagazineComp;//[Offset: 0x638, Size: 0x8] 0x7e62013b80
	SkeletalMeshComponent* TPWeaponComp;//[Offset: 0x640, Size: 0x8] 0x7e62013b00
	StaticMeshComponent* TPMagazineComp;//[Offset: 0x648, Size: 0x8] 0x7e62013a80
	PlayerInputComponent* PlayerInputComponent;//[Offset: 0x650, Size: 0x8] 0x7e62011080
	WeaponSystemComponent* WeaponSystemComponet;//[Offset: 0x658, Size: 0x8] 0x7e62011000
	FootStepComponent* FootStepComponent;//[Offset: 0x660, Size: 0x8] 0x7e62010f80
	HudManagerComponent* HudManagerComponent;//[Offset: 0x668, Size: 0x8] 0x7e62010f00
	HealthComponent* HealthCompnent;//[Offset: 0x670, Size: 0x8] 0x7e62010e80
	CrosshairComponent* CrosshariComponent;//[Offset: 0x678, Size: 0x8] 0x7e62010e00
	double FloorDistance;//[Offset: 0x698, Size: 0x8] 0x7e62010d80
	double LookUp;//[Offset: 0x6a0, Size: 0x8] 0x7e62010d00
	<enum,AnimSequenceBase*> DamageAnimations;//[Offset: 0x6a8, Size: 0x50] 0x7e61ccf700
	AnimSequenceBase* DefaultDamageAnimation;//[Offset: 0x6f8, Size: 0x8] 0x7e62011480
	<enum,AnimSequenceBase*> DieAnimations;//[Offset: 0x700, Size: 0x50] 0x7e61ccf640
	AnimSequenceBase* DefaultDieAnimation;//[Offset: 0x750, Size: 0x8] 0x7e62011380
	SoundWave*[] DamageSounds;//[Offset: 0x758, Size: 0x10] 0x7e5cecaec0
	SoundWave*[] BigDamageSounds;//[Offset: 0x768, Size: 0x10] 0x7e5cecaf60
	SoundWave*[] DiedSounds;//[Offset: 0x778, Size: 0x10] 0x7e5cecb000
	ParticleSystem*[] BloodParticleSystems;//[Offset: 0x788, Size: 0x10] 0x7e5cecb0a0
	ASFunction_NoParams ReceiveDestroyed;//[Size: 0x1] 0x7e5a62f280
	ASFunction_NoParams RefreshHud;//[Size: 0x0] 0x7e5a62f400
	ASFunction_ReferenceArg OnTakeDamage;//[Size: 0x0] 0x7e5a62f580
	ASFunction_NoParams OnDiedAnimationPlayEnd;//[Size: 0x0] 0x7e5a62f700
	ASFunction_ReferenceArg CL_OnUserDied;//[Size: 0x0] 0x7e5a629580
	ASFunction_ReferenceArg OnUserDied;//[Size: 0x0] 0x7e5a629700
	ASFunction_NoParams OnClientHealthChange;//[Size: 0x0] 0x7e5a629880
	ASFunction_NoParams OnJumped;//[Size: 0x1] 0x7e5a629a00
	ASFunction_NotThreadSafe ReceiveUnpossessed;//[Size: 0x1] 0x7e5a629b80
	ASFunction_NotThreadSafe ReceivePossessed;//[Size: 0x1] 0x7e5a629d00
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1] 0x7e5a629e80
	ASFunction_ByteReturn GetWeaponState;//[Size: 0x0] 0x7e5a62a000
	ASFunction_ObjectReturn GetCurrentWeapon;//[Size: 0x0] 0x7e5a62a180
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x0] 0x7e5a62a300
	ASFunction_ReferenceArg ThrowWeapon;//[Size: 0x0] 0x7e5a62a480
	ASFunction_NotThreadSafe GetPawnSimapleInfo;//[Size: 0x0] 0x7e5a62a780
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1] 0x7e5a62a900
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1] 0x7e5a62aa80
	ASFunction_DoubleArg CL_AddControllerYawInput;//[Size: 0x0] 0x7e5a62ac00
	ASFunction_DoubleArg CL_AddControllerPitchInput;//[Size: 0x0] 0x7e5a62ad80

--------------------------------
Class: BaseZombie.BasePlayer.Character.Pawn.Actor.Object

--------------------------------
Class: Human.BasePlayer.Character.Pawn.Actor.Object

--------------------------------
Class: G1SGameInstance.GameInstance.Object
	G1SSaveGame* SaveGame;//[Offset: 0x1a8, Size: 0x8] 0x7e62011e00
	ASFunction_NoParams ReceiveInit;//[Size: 0x1] 0x7e5a624480

--------------------------------
Class: G1SSaveGame.SaveGame.Object
	double MouseSpeed;//[Offset: 0x28, Size: 0x8] 0x7e62012000
	FString PlayerName;//[Offset: 0x30, Size: 0x10] 0x7e62012080
	ASFunction_ReferenceArg SetPlayerName;//[Size: 0x0] 0x7e5a62ee00
	ASFunction_NotThreadSafe GetPlayerName;//[Size: 0x0] 0x7e5a62ef80

--------------------------------
Class: G1SPhysicalMaterial.PhysicalMaterial.Object
	PhysicalMaterialHitInfo[] MaterialHitInfos;//[Offset: 0x80, Size: 0x10] 0x7e5cecab00
	ASFunction_NotThreadSafe GetMaterialHitInfo;//[Size: 0x0] 0x7e5a62f100

--------------------------------
Class: PhysicalMaterialHitInfo
	ParticleSystem* WallAsh;//[Offset: 0x0, Size: 0x8] 0x7e61dfda80
	Material* BulletScars;//[Offset: 0x8, Size: 0x8] 0x7e61dfe300
	Material* KnifeMark;//[Offset: 0x10, Size: 0x8] 0x7e61dfe380
	Material* KnifeAsh;//[Offset: 0x18, Size: 0x8] 0x7e61dfe480
	SoundWave* KnifeHitSound;//[Offset: 0x20, Size: 0x8] 0x7e61dff280

--------------------------------
Class: PawnPhysicalMaterial.PhysicalMaterial.Object
	enum HitPart;//[Offset: 0x80, Size: 0x1] 0x7e5cecaa60

--------------------------------
Class: Trajectory.Actor.Object
	NiagaraComponent* PS;//[Offset: 0x278, Size: 0x8] 0x7e62010180
	ASFunction_NoParams _DestroyActor;//[Size: 0x0] 0x7e5a62e800
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1] 0x7e5a62eb00
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1] 0x7e5a62ec80

--------------------------------
Class: BaseGameMode.GameMode.GameModeBase.Info.Actor.Object
	WeaponFactory* WeaonFactory;//[Offset: 0x370, Size: 0x8] 0x7e62010280
	ASFunction_NotThreadSafe K2_OnLogout;//[Size: 0x1] 0x7e5a62dd80
	ASFunction_NotThreadSafe K2_PostLogin;//[Size: 0x1] 0x7e5a62e080
	ASFunction_NotThreadSafe OnPlayerDied;//[Size: 0x0] 0x7e5a62e200
	ASFunction_NotThreadSafe OnPlayerInjuried;//[Size: 0x0] 0x7e5a62e380
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1] 0x7e5a62e500
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1] 0x7e5a62e680

--------------------------------
Class: WeaponFactory.Object
	<enum,class Object> Weapons;//[Offset: 0x28, Size: 0x50] 0x7e61cccb80
	ASFunction_NotThreadSafe GetWeapon;//[Size: 0x0] 0x7e5a62d300
	ASFunction_NotThreadSafe RegistWeapon;//[Size: 0x0] 0x7e5a62d480
	ASFunction_NoParams Init;//[Size: 0x0] 0x7e5a62d600

--------------------------------
Class: BaseGameState.GameState.GameStateBase.Info.Actor.Object
	<int,BasePlayerState*> PlayerStates;//[Offset: 0x2e0, Size: 0x50] 0x7e61ccc880
	ASFunction_DWordArg RemovePlayerState;//[Size: 0x0] 0x7e5a62d900
	ASFunction_NotThreadSafe AddPlayerState;//[Size: 0x0] 0x7e5a62da80
	ASFunction_NoParams Rep_PlayerStates;//[Size: 0x0] 0x7e5a62dc00

--------------------------------
Class: BasePlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: BaseGameHud.HUD.Actor.Object
	Texture* ShootButton;//[Offset: 0x370, Size: 0x8] 0x7e62011a80
	Texture* ShootButtonBG;//[Offset: 0x378, Size: 0x8] 0x7e62011a00
	Texture* ShootButtonBG2;//[Offset: 0x380, Size: 0x8] 0x7e62011980
	CrossHair hair;//[Offset: 0x388, Size: 0x20] 0x7e62011900
	Vector DamageLocation;//[Offset: 0x3a8, Size: 0x18] 0x7e62011880
	double TakeDamageTime;//[Offset: 0x3c0, Size: 0x8] 0x7e62010c80
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1] 0x7e5a623b80
	ASFunction_NotThreadSafe ReceiveDrawHUD;//[Size: 0x1] 0x7e5a62d180

--------------------------------
Class: CrossHair
	LinearColor Color;//[Offset: 0x0, Size: 0x10] 0x7e61dfd700
	int LineLength;//[Offset: 0x10, Size: 0x4] 0x7e61dfd900
	int SpacingLength;//[Offset: 0x14, Size: 0x4] 0x7e61dfdc80
	int Offset;//[Offset: 0x18, Size: 0x4] 0x7e61dfdb00

--------------------------------
Class: CommonComponent.UserWidget.Widget.Visual.Object
	MobileButton* Button_Exit;//[Offset: 0x290, Size: 0x8] 0x7e62011c00
	ASFunction_NoParams OnExit;//[Size: 0x0] 0x7e5a62cd00
	ASFunction_NoParams Construct;//[Size: 0x1] 0x7e5a62ce80

--------------------------------
Class: SubPage.UserWidget.Widget.Visual.Object
	Standalone* MainPage;//[Offset: 0x290, Size: 0x8] 0x7e59f94d80
	Button* Button_Return;//[Offset: 0x298, Size: 0x8] 0x7e62013180
	ASFunction_NoParams OnButton_ReturnClick;//[Size: 0x0] 0x7e5a671600
	ASFunction_NoParams Construct;//[Size: 0x1] 0x7e5a671780

--------------------------------
Class: Standalone.UserWidget.Widget.Visual.Object
	Button* Button_Exit;//[Offset: 0x290, Size: 0x8] 0x7e59f94980
	Button* Button_NewGame;//[Offset: 0x298, Size: 0x8] 0x7e59f94a00
	Button* Button_Online;//[Offset: 0x2a0, Size: 0x8] 0x7e59f94a80
	class SubPage* NewGameWidget;//[Offset: 0x2a8, Size: 0x8] 0x7e5cecc900
	class SubPage* OnlineWidget;//[Offset: 0x2b0, Size: 0x8] 0x7e5cecc9a0
	NewGame* NewGame;//[Offset: 0x2b8, Size: 0x8] 0x7e59f94b00
	SubPage* Online;//[Offset: 0x2c0, Size: 0x8] 0x7e59f94b80
	ASFunction_NoParams OnButton_NewGameClicked;//[Size: 0x0] 0x7e5a671000
	ASFunction_NoParams OnButton_OnlineClicked;//[Size: 0x0] 0x7e5a671180
	ASFunction_NoParams OnButton_ExitClicked;//[Size: 0x0] 0x7e5a671300
	ASFunction_NoParams Construct;//[Size: 0x1] 0x7e5a671480

--------------------------------
Class: NewGame.SubPage.UserWidget.Widget.Visual.Object
	Button* Button_StartGame;//[Offset: 0x2a0, Size: 0x8] 0x7e59f94c80

--------------------------------
Class: Module_Base_UserInterface_Outside_StandaloneStatics.Object
	ASFunction_NotThreadSafe InitOutSideUMG;//[Size: 0x0] 0x7e5a670e80

--------------------------------
Class: Module_Base_Util_UtilStatics.Object
	ASFunction_NotThreadSafe IsFPController;//[Size: 0x0] 0x7e5a670b80
	ASFunction_NotThreadSafe IsMobile;//[Size: 0x0] 0x7e5a670d00

--------------------------------
Class: BaseGun.BaseWeapon.Actor.Object
	WeaponStateComponent* WeaponStateComp;//[Offset: 0x300, Size: 0x8] 0x7e59f95500
	double PutOnTime;//[Offset: 0x308, Size: 0x8] 0x7e59f95580
	double FireTime;//[Offset: 0x310, Size: 0x8] 0x7e59f95600
	double ReloadTime;//[Offset: 0x318, Size: 0x8] 0x7e59f95680
	int MaxClip;//[Offset: 0x320, Size: 0x4] 0x7e59f95700
	int MaxAmmo;//[Offset: 0x324, Size: 0x4] 0x7e59f95780
	WeaponDamageInfo DamageInfo;//[Offset: 0x328, Size: 0x58] 0x7e59f95800
	AnimSet[] FireAnim;//[Offset: 0x380, Size: 0x10] 0x7e5cecc180
	AnimSet[] CrouchFireAnim;//[Offset: 0x390, Size: 0x10] 0x7e5cecc220
	SoundWave*[] FireSound;//[Offset: 0x3a0, Size: 0x10] 0x7e5cecc2c0
	ParticleSystem* FirePartic;//[Offset: 0x3b0, Size: 0x8] 0x7e59f95a00
	int Clip;//[Offset: 0x3b8, Size: 0x4] 0x7e59f95a80
	int Ammo;//[Offset: 0x3bc, Size: 0x4] 0x7e59f95b00
	BlueprintGeneratedClass* Trajectory;//[Offset: 0x3c0, Size: 0x8] 0x7e59f95b80
	RecoilForceComponent* RecoilForceComponent;//[Offset: 0x3d0, Size: 0x8] 0x7e59f95c00
	double Accuracy;//[Offset: 0x3d8, Size: 0x8] 0x7e59f95c80
	double MoltenTime;//[Offset: 0x3e0, Size: 0x8] 0x7e59f95d00
	ASFunction_ByteReturn CheckCanView;//[Size: 0x1] 0x7e5a679400
	ASFunction_NotThreadSafe PutOn_CL;//[Size: 0x1] 0x7e5a673280
	ASFunction_NoParams PutOn;//[Size: 0x1] 0x7e5a673400
	ASFunction_NoParams PutDown;//[Size: 0x1] 0x7e5a673580
	ASFunction_ByteReturn IsOnFire;//[Size: 0x0] 0x7e5a673700
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x1] 0x7e5a673880
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x1] 0x7e5a673a00
	ASFunction_NoParams OnReloadEnd;//[Size: 0x0] 0x7e5a673b80
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1] 0x7e5a673d00
	ASFunction_NoParams OnReloadStart;//[Size: 0x0] 0x7e5a673e80
	ASFunction_NoParams Reload;//[Size: 0x0] 0x7e5a674000
	ASFunction_NotThreadSafe CalcAccuracy;//[Size: 0x0] 0x7e5a674180
	ASFunction_NotThreadSafe CalcEndPosition;//[Size: 0x0] 0x7e5a674300
	ASFunction_NotThreadSafe OnHitActorShow;//[Size: 0x0] 0x7e5a674480
	ASFunction_NotThreadSafe OnHitActor;//[Size: 0x0] 0x7e5a674600
	ASFunction_NotThreadSafe Fire_Impl;//[Size: 0x0] 0x7e5a674780
	ASFunction_NoParams FireStart;//[Size: 0x0] 0x7e5a674900
	ASFunction_NoParams UserConstructionScript;//[Size: 0x2] 0x7e5a674a80
	ASFunction_NoParams RefreshHud;//[Size: 0x1] 0x7e5a674c00
	ASFunction_NoParams Rep_AmmoAndClip;//[Size: 0x0] 0x7e5a674d80
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x2] 0x7e5a675080
	ASFunction_DWordArg SetAmmo;//[Size: 0x0] 0x7e5a675200
	ASFunction_DWordReturn GetAmmo;//[Size: 0x0] 0x7e5a675500
	ASFunction_DWordArg SetClip;//[Size: 0x0] 0x7e5a675680
	ASFunction_DWordReturn GetClip;//[Size: 0x0] 0x7e5a675800

--------------------------------
Class: WeaponStateComponent.ActorComponent.Object
	enum CurrentState;//[Offset: 0xb0, Size: 0x1] 0x7e5cece2a0
	<enum,TimingStateInfo> TimingStates;//[Offset: 0xb8, Size: 0x50] 0x7e61ccd180
	ASFunction_NoParams ClearState;//[Size: 0x0] 0x7e5a67a780
	ASFunction_ByteArg RegistPermanentState;//[Size: 0x0] 0x7e5a67a900
	ASFunction_ByteArg FoceToState;//[Size: 0x0] 0x7e5a67ac00
	ASFunction_NotThreadSafe ToState;//[Size: 0x0] 0x7e5a67ad80
	ASFunction_NotThreadSafe RegistTimingState;//[Size: 0x0] 0x7e5a67af00
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1] 0x7e5a67b080
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x0] 0x7e5a67b380

--------------------------------
Class: TimingStateInfo
	double Time;//[Offset: 0x0, Size: 0x8] 0x7e62014980
	delegate Begin;//[Offset: 0x8, Size: 0x10] 0x7e61dfb600
	delegate End;//[Offset: 0x18, Size: 0x10] 0x7e61dfbb80

--------------------------------
Class: WeaponDamageInfo
	<enum,int> Damage;//[Offset: 0x0, Size: 0x50] 0x7e61ccf100
	int DefaultDamage;//[Offset: 0x50, Size: 0x4] 0x7e61dfbf80

--------------------------------
Class: RecoilForceComponent.ActorComponent.Object
	double[] UpBase;//[Offset: 0xb0, Size: 0x10] 0x7e5cecbaa0
	double[] LateralBase;//[Offset: 0xc0, Size: 0x10] 0x7e5cecbb40
	double[] UpModifier;//[Offset: 0xd0, Size: 0x10] 0x7e5cecbbe0
	double[] LateralModifier;//[Offset: 0xe0, Size: 0x10] 0x7e5cecbc80
	double[] UpMax;//[Offset: 0xf0, Size: 0x10] 0x7e5cecbd20
	double[] LateralMax;//[Offset: 0x100, Size: 0x10] 0x7e5cecbdc0
	int[] DirectionChange;//[Offset: 0x110, Size: 0x10] 0x7e5cecbe60
	int ShotsFired;//[Offset: 0x120, Size: 0x4] 0x7e59f98f80
	double DecreaseShotsFired;//[Offset: 0x128, Size: 0x8] 0x7e59f99000
	bool bDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x7e59f99080
	ASFunction_NotThreadSafe KickBack;//[Size: 0x0] 0x7e5a67b500
	ASFunction_NotThreadSafe CalcEndPosition;//[Size: 0x0] 0x7e5a67b680
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1] 0x7e5a67b800
	ASFunction_NoParams Fire;//[Size: 0x0] 0x7e5a67b980

--------------------------------
Class: AutomaticGun.BaseGun.BaseWeapon.Actor.Object
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x2] 0x7e5a678e00
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x2] 0x7e5a678f80
	ASFunction_NoParams PutOn;//[Size: 0x2] 0x7e5a679100
	ASFunction_NoParams EndFire;//[Size: 0x0] 0x7e5a679280
	ASFunction_NoParams StartFire;//[Size: 0x0] 0x7e5a674f00

--------------------------------
Class: BaseGrenade.BaseWeapon.Actor.Object
	WeaponStateComponent* WeaponStateComp;//[Offset: 0x300, Size: 0x8] 0x7e59f96500
	double PutOnTime;//[Offset: 0x308, Size: 0x8] 0x7e59f96580
	AnimSequence* HoldOnAnim;//[Offset: 0x310, Size: 0x8] 0x7e59f96600
	ASFunction_NoParams PutDown;//[Size: 0x1] 0x7e5a678500
	ASFunction_NoParams PutOn;//[Size: 0x1] 0x7e5a678680
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x1] 0x7e5a678800
	ASFunction_NoParams UserConstructionScript;//[Size: 0x2] 0x7e5a678980

--------------------------------
Class: BaseKnife.BaseWeapon.Actor.Object
	WeaponStateComponent* WeaponStateComp;//[Offset: 0x300, Size: 0x8] 0x7e59f97800
	double PutOnTime;//[Offset: 0x308, Size: 0x8] 0x7e59f97880
	double Fire1Time;//[Offset: 0x310, Size: 0x8] 0x7e59f97900
	double Fire1DamageTime;//[Offset: 0x318, Size: 0x8] 0x7e59f97980
	double Fire1Distance;//[Offset: 0x320, Size: 0x8] 0x7e59f97a00
	double Fire1Angle;//[Offset: 0x328, Size: 0x8] 0x7e59f97a80
	AnimSet Fire1Anim;//[Offset: 0x330, Size: 0x28] 0x7e59f97b00
	Material* Hit1Mark;//[Offset: 0x358, Size: 0x8] 0x7e59f97b80
	KnifeHitSound Hit1Sound;//[Offset: 0x360, Size: 0x10] 0x7e59f97c00
	double Fire2Time;//[Offset: 0x370, Size: 0x8] 0x7e59f97c80
	double Fire2DamageTime;//[Offset: 0x378, Size: 0x8] 0x7e59f97d00
	double Fire2Distance;//[Offset: 0x380, Size: 0x8] 0x7e59f97d80
	double Fire2Angle;//[Offset: 0x388, Size: 0x8] 0x7e59f97e00
	AnimSet Fire2Anim;//[Offset: 0x390, Size: 0x28] 0x7e59f97e80
	Material* Hit2Mark;//[Offset: 0x3b8, Size: 0x8] 0x7e59f97f00
	KnifeHitSound Hit2Sound;//[Offset: 0x3c0, Size: 0x10] 0x7e59f97f80
	WeaponDamageInfo Hit1DamageInfo;//[Offset: 0x3d0, Size: 0x58] 0x7e59f98000
	WeaponDamageInfo Hit2DamageInfo;//[Offset: 0x428, Size: 0x58] 0x7e59f98080
	WeaponDamageInfo Hit3DamageInfo;//[Offset: 0x480, Size: 0x58] 0x7e59f98100
	double Fire3Time;//[Offset: 0x4d8, Size: 0x8] 0x7e59f98180
	double Fire3DamageTime;//[Offset: 0x4e0, Size: 0x8] 0x7e59f98200
	double Fire3Distance;//[Offset: 0x4e8, Size: 0x8] 0x7e59f98280
	double Fire3Angle;//[Offset: 0x4f0, Size: 0x8] 0x7e59f98300
	AnimSet Fire3Anim;//[Offset: 0x4f8, Size: 0x28] 0x7e59f98380
	Material* Hit3Mark;//[Offset: 0x520, Size: 0x8] 0x7e59f98400
	KnifeHitSound Hit3Sound;//[Offset: 0x528, Size: 0x10] 0x7e59f96380
	double LastFire1Time;//[Offset: 0x538, Size: 0x8] 0x7e59f96400
	ASFunction_NoParams RefreshHud;//[Size: 0x1] 0x7e5a676880
	ASFunction_NotThreadSafe PutOn_CL;//[Size: 0x1] 0x7e5a676a00
	ASFunction_NoParams PutDown;//[Size: 0x1] 0x7e5a676b80
	ASFunction_NoParams PutOn;//[Size: 0x1] 0x7e5a676e80
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x1] 0x7e5a677000
	ASFunction_NoParams Input_Fire3;//[Size: 0x0] 0x7e5a677180
	ASFunction_NoParams Input_Fire1;//[Size: 0x0] 0x7e5a677300
	ASFunction_NoParams Fire3Damage;//[Size: 0x0] 0x7e5a677480
	ASFunction_NoParams Fire3;//[Size: 0x0] 0x7e5a677600
	ASFunction_NoParams Fire2Damage;//[Size: 0x0] 0x7e5a677780
	ASFunction_NoParams Fire1Damage;//[Size: 0x0] 0x7e5a677900
	ASFunction_NoParams Fire2;//[Size: 0x0] 0x7e5a677a80
	ASFunction_NoParams Fire1;//[Size: 0x0] 0x7e5a677d80
	ASFunction_NoParams UserConstructionScript;//[Size: 0x2] 0x7e5a677f00
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x2] 0x7e5a678080
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x1] 0x7e5a678200
	ASFunction_ByteReturn CheckCanView;//[Size: 0x1] 0x7e5a678380

--------------------------------
Class: KnifeHitSound
	SoundWave* HitSound;//[Offset: 0x0, Size: 0x8] 0x7e61dfb680
	SoundWave* HitAirSound;//[Offset: 0x8, Size: 0x8] 0x7e61dfc100

--------------------------------
Class: SemiAutomaticGun.BaseGun.BaseWeapon.Actor.Object
	ASFunction_NoParams Fire;//[Size: 0x0] 0x7e5a676400
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x2] 0x7e5a676580

--------------------------------
Class: WeaponPack.Actor.Object
	StaticMeshComponent* WeaponComponent;//[Offset: 0x278, Size: 0x8] 0x7e59f99480
	BaseWeapon* Weapon;//[Offset: 0x280, Size: 0x8] 0x7e59f97400
	ASFunction_NoParams Rep_Weapon;//[Size: 0x0] 0x7e5a67bb00
	ASFunction_ObjectReturn GetWeapon;//[Size: 0x0] 0x7e5a67bf80
	ASFunction_NotThreadSafe SetWeapon;//[Size: 0x0] 0x7e5a67c100
	ASFunction_NotThreadSafe TouchEvent;//[Size: 0x0] 0x7e5a67c280
	ASFunction_NoParams Destroy;//[Size: 0x0] 0x7e5a67c400
	ASFunction_NoParams ReceiveDestroyed;//[Size: 0x1] 0x7e5a67c580

--------------------------------
Class: WeaponAnimBlueprint.AnimInstance.Object
	enum CurrentState;//[Offset: 0x350, Size: 0x1] 0x7e5cecdee0
	BaseWeapon* currentWeapon;//[Offset: 0x358, Size: 0x8] 0x7e59f99b80
	double Speed;//[Offset: 0x360, Size: 0x8] 0x7e59f99c00
	double Direction;//[Offset: 0x368, Size: 0x8] 0x7e59f99c80
	bool IsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1] 0x7e59f99d00
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1] 0x7e59f99d80
	double LookUp;//[Offset: 0x378, Size: 0x8] 0x7e59f99e00
	ASFunction_DoubleArg Tick;//[Size: 0x0] 0x7e5a67a600

--------------------------------
Class: WeaponAnimBlueprint3P.WeaponAnimBlueprint.AnimInstance.Object
	AnimSequence* ReloadAnim;//[Offset: 0x380, Size: 0x8] 0x7e59f99900
	AnimSequence* PutonAnim;//[Offset: 0x388, Size: 0x8] 0x7e59f99980
	AnimSequence* IdleAnim;//[Offset: 0x390, Size: 0x8] 0x7e59f99a00

--------------------------------
Class: WeaponAnimBlurprint1P.WeaponAnimBlueprint.AnimInstance.Object
	AnimSequence* IdleAnim;//[Offset: 0x380, Size: 0x8] 0x7e59f9b580
	AnimSequence* RunAnim;//[Offset: 0x388, Size: 0x8] 0x7e59f99500
	AnimSequence* PutonAnim;//[Offset: 0x390, Size: 0x8] 0x7e59f99580
	AnimSequence* ReloadAnim;//[Offset: 0x398, Size: 0x8] 0x7e59f99600
	AnimSequence* JumpBegin;//[Offset: 0x3a0, Size: 0x8] 0x7e59f99680
	AnimSequence* JumpLoop;//[Offset: 0x3a8, Size: 0x8] 0x7e59f99700
	AnimSequence* JumpEnd;//[Offset: 0x3b0, Size: 0x8] 0x7e59f99780
	AnimSequence* CrouchBegin;//[Offset: 0x3b8, Size: 0x8] 0x7e59f99800
	AnimSequence* CrouchEnd;//[Offset: 0x3c0, Size: 0x8] 0x7e59f99880

--------------------------------
Class: DefaultGameMode.BaseGameMode.GameMode.GameModeBase.Info.Actor.Object
	ASFunction_NoParams UserConstructionScript;//[Size: 0x2] 0x7e5a67a300

--------------------------------
Class: DeathMatchMode.DefaultGameMode.BaseGameMode.GameMode.GameModeBase.Info.Actor.Object
	Actor*[] CTPlayerStarts;//[Offset: 0x378, Size: 0x10] 0x7e5cecdd00
	Actor*[] TPlayerStarts;//[Offset: 0x390, Size: 0x10] 0x7e5cecdda0
	class TDMScoreBoard* ScoreBoard;//[Offset: 0x3a8, Size: 0x8] 0x7e5cecde40
	ASFunction_NotThreadSafe K2_OnLogout;//[Size: 0x2] 0x7e5a67f700
	ASFunction_NotThreadSafe K2_PostLogin;//[Size: 0x2] 0x7e5a679580
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1] 0x7e5a679700
	ASFunction_NotThreadSafe OnChooseTeam;//[Size: 0x0] 0x7e5a679880
	ASFunction_NotThreadSafe OnRespawnActor;//[Size: 0x0] 0x7e5a679b80
	ASFunction_NotThreadSafe OnPlayerDied;//[Size: 0x1] 0x7e5a679d00
	ASFunction_NotThreadSafe OnPlayerInjuried;//[Size: 0x1] 0x7e5a679e80
	ASFunction_NotThreadSafe GetPlayer;//[Size: 0x0] 0x7e5a67a000
	ASFunction_NoParams UserConstructionScript;//[Size: 0x3] 0x7e5a67a180

--------------------------------
Class: TDMScoreBoard.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock_CT;//[Offset: 0x290, Size: 0x8] 0x7e59f9c200
	TextBlock* TextBlock_T;//[Offset: 0x298, Size: 0x8] 0x7e59f9c280
	ASFunction_DWordArg SetTScore;//[Size: 0x0] 0x7e5a67e080
	ASFunction_DWordArg SetCTScore;//[Size: 0x0] 0x7e5a67e200

--------------------------------
Class: TimeTask.Object
	double Time;//[Offset: 0x28, Size: 0x8] 0x7e59f9ab80
	TDMController* Controller;//[Offset: 0x30, Size: 0x8] 0x7e59f9ac00
	BasePlayer* Player;//[Offset: 0x38, Size: 0x8] 0x7e59f9ac80
	delegate Func;//[Offset: 0x40, Size: 0x10] 0x7e59f9ad00

--------------------------------
Class: TDMController.BaseController.PlayerController.Controller.Actor.Object
	enum ChooseTeam;//[Offset: 0x810, Size: 0x1] 0x7e5cecdbc0
	int KillNum;//[Offset: 0x814, Size: 0x4] 0x7e59f9aa00
	int DeadNum;//[Offset: 0x818, Size: 0x4] 0x7e59f9aa80
	TDMScoreBoard* ScoreBoard;//[Offset: 0x820, Size: 0x8] 0x7e59f9ab00
	ASFunction_ReferenceArg ShowScoreBoard;//[Size: 0x0] 0x7e5a67f400
	ASFunction_ByteArg OnChooseTeam;//[Size: 0x0] 0x7e5a67f580

--------------------------------
Class: TDMGameState.BaseGameState.GameState.GameStateBase.Info.Actor.Object
	int _CTKillNum;//[Offset: 0x330, Size: 0x4] 0x7e59f9a800
	int _TKillNum;//[Offset: 0x334, Size: 0x4] 0x7e59f9a880
	ASFunction_NoParams Rep_Score;//[Size: 0x0] 0x7e5a67e380
	ASFunction_NoParams Rep_PlayerStates;//[Size: 0x1] 0x7e5a67e500
	ASFunction_NotThreadSafe GetPlayerDeadNum;//[Size: 0x0] 0x7e5a67e680
	ASFunction_NotThreadSafe SetPlayerDeadNum;//[Size: 0x0] 0x7e5a67e800
	ASFunction_NotThreadSafe GetPlayerKillNum;//[Size: 0x0] 0x7e5a67e980
	ASFunction_NotThreadSafe SetPlayerKillNum;//[Size: 0x0] 0x7e5a67ec80
	ASFunction_DWordArg SetTKillNum;//[Size: 0x0] 0x7e5a67ee00
	ASFunction_DWordReturn GetTKillNum;//[Size: 0x0] 0x7e5a67ef80
	ASFunction_DWordArg SetCTKillNum;//[Size: 0x0] 0x7e5a67f100
	ASFunction_DWordReturn GetCTKillNum;//[Size: 0x0] 0x7e5a67f280

--------------------------------
Class: TDMPlayerState.BasePlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: TDMUserList.UserWidget.Widget.Visual.Object

--------------------------------
Class: DefaultFactory.WeaponFactory.Object
	ASFunction_NoParams Init;//[Size: 0x1] 0x7e5a67df00

--------------------------------
Class: AK47.AutomaticGun.BaseGun.BaseWeapon.Actor.Object
	ASFunction_NotThreadSafe CalcAccuracy;//[Size: 0x1] 0x7e5a67dd80

--------------------------------
Class: Deagle.SemiAutomaticGun.BaseGun.BaseWeapon.Actor.Object

--------------------------------
Class: M4A1.AutomaticGun.BaseGun.BaseWeapon.Actor.Object
	ASFunction_NotThreadSafe CalcAccuracy;//[Size: 0x1] 0x7e5a67dc00

--------------------------------
Class: Background_C.UserWidget.Widget.Visual.Object

--------------------------------
Class: ListRoom_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8] 0x7e84881680
	Button* Button;//[Offset: 0x298, Size: 0x8] 0x7e84881700
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 0x8] 0x7e84881780
	TextBlock* TextBlock;//[Offset: 0x2a8, Size: 0x8] 0x7e84881500
	TextBlock* TextBlock;//[Offset: 0x2b0, Size: 0x8] 0x7e84881900
	BlueprintSessionResult Result;//[Offset: 0x2b8, Size: 0x108] 0x7e84881a80
	static void Init(BlueprintSessionResult Result, int CallFunc_GetPingInMs_ReturnValue, FString CallFunc_GetServerName_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_GetMaxPlayers_ReturnValue, int CallFunc_GetCurrentPlayers_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x45db5913d001 0x7e8484caa0
	void OnFailure_B62835F84A491C83023EFE921920FB07();// 0x45885913d001 0x7e84840160
	void OnSuccess_B62835F84A491C83023EFE921920FB07();// 0xffffffffbaacbe80 0x7e84840320
	void OnListItemObjectSet(Object* ListItemObject);// 0x45895913d001 0x7e84840240
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x456e5913d001 0x7e61c0ef60
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x386558ebd031 0x7e61c0f040
	void BP_OnEntryReleased();// 0x45705913d001 0x7e5a44adc0
	void BndEvt__ListRoom_Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xa246b5807e43b0aa 0x7e5a44aea0
	void ExecuteUbergraph_ListRoom(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Object* K2Node_Event_ListItemObject, bool K2Node_Event_bIsSelected, bool K2Node_Event_bIsExpanded, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, JoinSessionCallbackProxy* CallFunc_JoinSession_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x456d5913d001 0x7e61c0ee80

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: NewGame_Content_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8] 0x7e84882500
	Button* Button_Return;//[Offset: 0x298, Size: 0x8] 0x7e84882580
	Button* Button_StartGame;//[Offset: 0x2a0, Size: 0x8] 0x7eb4ea2180
	ComboBoxString* ComboBoxString;//[Offset: 0x2a8, Size: 0x8] 0x7eb4ea5300
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x7eb4ea5200
	void OnFailure_400BCC634143E4D48B08979E0286E637();// 0x459d5913d001 0x7e84840780
	void OnSuccess_400BCC634143E4D48B08979E0286E637();// 0x45b35913d001 0x7e84840860
	void BndEvt__NewGame_Button_StartGame_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x459a5913d001 0x7e848404e0
	void BndEvt__NewGame_Content_Button_Return_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x459b5913d001 0x7e848405c0
	void ExecuteUbergraph_NewGame_Content(int EntryPoint, int CallFunc_GetSelectedIndex_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchInteger_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, CreateSessionCallbackProxy* CallFunc_CreateSession_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x459c5913d001 0x7e848406a0

--------------------------------
Class: KeySettings_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8] 0x7e5b1b1500
	Button* Button_apply;//[Offset: 0x298, Size: 0x8] 0x7e5b1b1480
	Button* Button_GameSettings;//[Offset: 0x2a0, Size: 0x8] 0x7e5b1b3500
	Button* Button_KeySettings;//[Offset: 0x2a8, Size: 0x8] 0x7e5b1b3480
	Button* Button_ReturnMune;//[Offset: 0x2b0, Size: 0x8] 0x7e5b1b3400
	Button* Button_ScreenSettings;//[Offset: 0x2b8, Size: 0x8] 0x7e5b1b3380
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x7e5b1b3300
	Slider* Slider;//[Offset: 0x2c8, Size: 0x8] 0x7e5b1b3280
	TextBlock* TextBlock_MouseSpeed;//[Offset: 0x2d0, Size: 0x8] 0x7e5b1b3200
	G1SSaveGame* GameSave;//[Offset: 0x2d8, Size: 0x8] 0x7e5b1b3180
	void PreConstruct(bool IsDesignTime);// 0x47905913d000 0x7e844cf4a0
	void BndEvt__Settings_Button_91_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x47685913d001 0x7e844cf2e0
	void BndEvt__KeySettings_Button_ScreenSettings_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x47665913d001 0x7e844cf120
	void BndEvt__KeySettings_Button_GameSettings_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x47655913d001 0x7e844cf040
	void BndEvt__KeySettings_Slider_308_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x47675913d001 0x7e844cf200
	void BndEvt__KeySettings_Button_apply_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x47645913d001 0x7e844cef60
	void ExecuteUbergraph_KeySettings(int EntryPoint, bool CallFunc_SaveGameToSlot_ReturnValue, bool K2Node_Event_IsDesignTime, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, ScreenSettings_C* CallFunc_Create_ReturnValue, GameSettings_C* CallFunc_Create_ReturnValue, float K2Node_ComponentBoundEvent_Value, FText CallFunc_Conv_FloatToText_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, G1SGameInstance* K2Node_DynamicCast_AsG1SGame_Instance, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_FloatToText_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_SetValue_InValue_NarrowingCast, float CallFunc_Conv_FloatToText_Value_NarrowingCast, double K2Node_VariableSet_MouseSpeed_WideningCast);// 0x47695913d001 0x7e844cf3c0

--------------------------------
Class: ScreenSettings_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8] 0x7e5b1b5b00
	Button* Button_AllLeft;//[Offset: 0x298, Size: 0x8] 0x7e5b1b5a80
	Button* Button_AllRight;//[Offset: 0x2a0, Size: 0x8] 0x7e5b1b5a00
	Button* Button_apply;//[Offset: 0x2a8, Size: 0x8] 0x7e5b1b5980
	Button* Button_ColorationLeft;//[Offset: 0x2b0, Size: 0x8] 0x7e5b1b5900
	Button* Button_ColorationRight;//[Offset: 0x2b8, Size: 0x8] 0x7e5b1b5880
	Button* Button_GameSettings;//[Offset: 0x2c0, Size: 0x8] 0x7e5b1b5800
	Button* Button_JaggiesLeft;//[Offset: 0x2c8, Size: 0x8] 0x7e5b1b5780
	Button* Button_JaggiesRight;//[Offset: 0x2d0, Size: 0x8] 0x7e5b1b5700
	Button* Button_KeySettings;//[Offset: 0x2d8, Size: 0x8] 0x7e5b1b5680
	Button* Button_LightLeft;//[Offset: 0x2e0, Size: 0x8] 0x7e5b1b7700
	Button* Button_LightRight;//[Offset: 0x2e8, Size: 0x8] 0x7e5b1b7680
	Button* Button_PlantLeft;//[Offset: 0x2f0, Size: 0x8] 0x7e5b1b7600
	Button* Button_PlantRight;//[Offset: 0x2f8, Size: 0x8] 0x7e5b1b7580
	Button* Button_ProcessingLeft;//[Offset: 0x300, Size: 0x8] 0x7e5b1b7500
	Button* Button_ProcessingRight;//[Offset: 0x308, Size: 0x8] 0x7e5b1b7480
	Button* Button_ReflectionLeft;//[Offset: 0x310, Size: 0x8] 0x7e5b1b7400
	Button* Button_ReflectionRight;//[Offset: 0x318, Size: 0x8] 0x7e5b1b7380
	Button* Button_ReturnMune;//[Offset: 0x320, Size: 0x8] 0x7e5b1b7300
	Button* Button_ScreenSettings;//[Offset: 0x328, Size: 0x8] 0x7e5b1b7280
	Button* Button_ShadeLeft;//[Offset: 0x330, Size: 0x8] 0x7e5b1b7200
	Button* Button_ShadeRight;//[Offset: 0x338, Size: 0x8] 0x7e5b1b7180
	Button* Button_SpecialEffectLeft;//[Offset: 0x340, Size: 0x8] 0x7e5b1b7100
	Button* Button_SpecialEffectRight;//[Offset: 0x348, Size: 0x8] 0x7e5b1b7080
	Button* Button_TextureLeft;//[Offset: 0x350, Size: 0x8] 0x7e5b1b7000
	Button* Button_TextureRihgt;//[Offset: 0x358, Size: 0x8] 0x7e5b1b6f80
	Button* Button_ViewLeft;//[Offset: 0x360, Size: 0x8] 0x7e5b1b6f00
	Button* Button_ViewRight;//[Offset: 0x368, Size: 0x8] 0x7e5b1b6e80
	ComboBoxString* ComboBoxString_Resolution;//[Offset: 0x370, Size: 0x8] 0x7e5b1b6e00
	ComboBoxString* ComboBoxString_WindowMode;//[Offset: 0x378, Size: 0x8] 0x7e5b1b6d80
	Image* Image;//[Offset: 0x380, Size: 0x8] 0x7e5b1b6d00
	TextBlock* TextBlock;//[Offset: 0x388, Size: 0x8] 0x7e5b1b6c80
	TextBlock* TextBlock;//[Offset: 0x390, Size: 0x8] 0x7e5b1b6c00
	TextBlock* TextBlock;//[Offset: 0x398, Size: 0x8] 0x7e5b1b6b80
	TextBlock* TextBlock;//[Offset: 0x3a0, Size: 0x8] 0x7e5b1b6b00
	TextBlock* TextBlock;//[Offset: 0x3a8, Size: 0x8] 0x7e5b1b6a80
	TextBlock* TextBlock;//[Offset: 0x3b0, Size: 0x8] 0x7e5b1b6a00
	TextBlock* TextBlock;//[Offset: 0x3b8, Size: 0x8] 0x7e5b1b6980
	TextBlock* TextBlock;//[Offset: 0x3c0, Size: 0x8] 0x7e5b1b6900
	TextBlock* TextBlock;//[Offset: 0x3c8, Size: 0x8] 0x7e5b1b6880
	TextBlock* TextBlock;//[Offset: 0x3d0, Size: 0x8] 0x7e5b1b6800
	TextBlock* TextBlock;//[Offset: 0x3d8, Size: 0x8] 0x7e5b1b6780
	int ShadeQuality;//[Offset: 0x3e0, Size: 0x4] 0x7e5b1b6700
	FText[] QualityLevels;//[Offset: 0x3e8, Size: 0x10] 0x7e5a6aa9c0
	FText[] ShadeLevels;//[Offset: 0x3f8, Size: 0x10] 0x7e5a6aa920
	int AllQuality;//[Offset: 0x408, Size: 0x4] 0x7e5b1b8680
	int ViewQuality;//[Offset: 0x40c, Size: 0x4] 0x7e5b1b8600
	FText[] ViewLevels;//[Offset: 0x410, Size: 0x10] 0x7e5a6aa880
	int JaggiesQuality;//[Offset: 0x420, Size: 0x4] 0x7e5b1b8500
	FText[] JaggiesLevels;//[Offset: 0x428, Size: 0x10] 0x7e5a6aa7e0
	int LightQuality;//[Offset: 0x438, Size: 0x4] 0x7e5b1b8400
	FText[] LightLevels;//[Offset: 0x440, Size: 0x10] 0x7e5a6aa740
	FText[] ReflectionLevels;//[Offset: 0x450, Size: 0x10] 0x7e5a6aa6a0
	int ReflectionQuality;//[Offset: 0x460, Size: 0x4] 0x7e5b1b8280
	int TextureQuality;//[Offset: 0x464, Size: 0x4] 0x7e5b1b8200
	FText[] TextueLeveles;//[Offset: 0x468, Size: 0x10] 0x7e5a6aa600
	int SpecialEffectQuality;//[Offset: 0x478, Size: 0x4] 0x7e5b1b8100
	FText[] SpecialEffectLevels;//[Offset: 0x480, Size: 0x10] 0x7e5a6aa560
	int PlantQuality;//[Offset: 0x490, Size: 0x4] 0x7e5b1b8000
	FText[] PlantLevels;//[Offset: 0x498, Size: 0x10] 0x7e5a6ac860
	int ColorationQuality;//[Offset: 0x4a8, Size: 0x4] 0x7e5b1b7f00
	FText[] ColorationLevels;//[Offset: 0x4b0, Size: 0x10] 0x7e5a6ac7c0
	int ProcessingQuality;//[Offset: 0x4c0, Size: 0x4] 0x7e5b1b7e00
	FText[] ProcessingLevels;//[Offset: 0x4c8, Size: 0x10] 0x7e5a6ac720
	void GetData(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, byte CallFunc_GetFullscreenMode_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, IntPoint CallFunc_GetScreenResolution_ReturnValue, IntPoint[] K2Node_MakeArray_Array, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, IntPoint CallFunc_Array_Get_Item, int CallFunc_GetShadingQuality_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_BuildString_Int_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetFoliageQuality_ReturnValue, int CallFunc_GetVisualEffectQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetTextureQuality_ReturnValue, int CallFunc_GetReflectionQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetShadowQuality_ReturnValue, int CallFunc_GetPostProcessingQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetGlobalIlluminationQuality_ReturnValue, int CallFunc_GetAntiAliasingQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetViewDistanceQuality_ReturnValue);// 0x45d25913d001 0x7e8484d280
	void AllLevels(bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x45b55913d001 0x7e84840a20
	FText ProcessingQualityLevels();// 0x45d65913d001 0x7e8484cf00
	FText ColorationQualityLevels();// 0x45cf5913d001 0x7e8484d520
	FText PlantQualityLevels();// 0x45d55913d001 0x7e8484cfe0
	FText SpecialEffectQualityLevels();// 0xffffff8158ebd000 0x7e844cbae0
	FText TextureQualityLevels();// 0x45de5913d001 0x7e844ce780
	FText ReflectionQualityLevels();// 0x45d75913d001 0x7e8484ce20
	FText LightQuealityLevels();// 0x45d45913d001 0x7e8484d0c0
	FText JaggiesQualityLevels();// 0x45d35913d001 0x7e8484d1a0
	FText ViewQualityLevels();// 0xffffffffdd62b920 0x7e844ce860
	FText AllQualityLevels();// 0x45b65913d001 0x7e84840b00
	void All Quakity(bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x45b45913d001 0x7e84840940
	void SetAllWindowModes(int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x45d95913d001 0x7e8484cc60
	void SetAllSupportedResolutions(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, IntPoint[] CallFunc_GetSupportedFullscreenResolutions_Resolutions, bool CallFunc_GetSupportedFullscreenResolutions_ReturnValue, int CallFunc_Array_Length_ReturnValue, IntPoint CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_BuildString_Int_ReturnValue);// 0x45d85913d001 0x7e8484cd40
	FText ShadeQualityLevels();// 0x45da5913d001 0x7e8484cb80
	void BndEvt__Settings_Button_91_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x45ce5913d001 0x7e8484d600
	void BndEvt__ScreenSettings_Button_4_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x45b85913d001 0x7e84840cc0
	void BndEvt__ScreenSettings_Button_3_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x45b75913d001 0x7e84840be0
	void BndEvt__ScreenSettings_Button_GameSettings_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x45be5913d001 0x7e84841200
	void BndEvt__ScreenSettings_Button_KeySettings_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x45c15913d001 0x7e848414a0
	void Construct();// 0x45d05913d001 0x7e8484d440
	void BndEvt__ScreenSettings_Button_apply_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x45bb5913d001 0x7e84840f60
	void BndEvt__ScreenSettings_Button_AllLeft_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x45b95913d001 0x7e84840da0
	void BndEvt__ScreenSettings_Button_AllRight_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();// 0x45ba5913d001 0x7e84840e80
	void BndEvt__ScreenSettings_Button_ViewLeft_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x45cc5913d001 0x7e8484d7c0
	void BndEvt__ScreenSettings_Button_ViewRight_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x45cd5913d001 0x7e8484d6e0
	void BndEvt__ScreenSettings_Button_JaggiesLeft_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0x45bf5913d001 0x7e848412e0
	void BndEvt__ScreenSettings_Button_JaggiesRight_K2Node_ComponentBoundEvent_11_OnButtonClickedEvent__DelegateSignature();// 0x45c05913d001 0x7e848413c0
	void BndEvt__ScreenSettings_Button_LightLeft_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();// 0x45c25913d001 0x7e84841580
	void BndEvt__ScreenSettings_Button_LightRight_K2Node_ComponentBoundEvent_13_OnButtonClickedEvent__DelegateSignature();// 0x45c35913d001 0x7e84841660
	void BndEvt__ScreenSettings_Button_ReflectionLeft_K2Node_ComponentBoundEvent_14_OnButtonClickedEvent__DelegateSignature();// 0x45c85913d001 0x7e84841ac0
	void BndEvt__ScreenSettings_Button_ReflectionRight_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();// 0x45c95913d001 0x7e84841ba0
	void BndEvt__ScreenSettings_Button_TextureLeft_K2Node_ComponentBoundEvent_16_OnButtonClickedEvent__DelegateSignature();// 0x45ca5913d001 0x7e8484d980
	void BndEvt__ScreenSettings_Button_TextureRihgt_K2Node_ComponentBoundEvent_17_OnButtonClickedEvent__DelegateSignature();// 0x45cb5913d001 0x7e8484d8a0
	void BndEvt__ScreenSettings_Button_SpecialEffectLeft_K2Node_ComponentBoundEvent_18_OnButtonClickedEvent__DelegateSignature();// 0xffffff8158ebd000 0x7e84841c80
	void BndEvt__ScreenSettings_Button_SpecialEffectRight_K2Node_ComponentBoundEvent_19_OnButtonClickedEvent__DelegateSignature();// 0xc32f5c0 0x7e8484da60
	void BndEvt__ScreenSettings_Button_PlantLeft_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();// 0x45c45913d001 0x7e84841740
	void BndEvt__ScreenSettings_Button_PlantRight_K2Node_ComponentBoundEvent_21_OnButtonClickedEvent__DelegateSignature();// 0x45c55913d001 0x7e84841820
	void BndEvt__ScreenSettings_Button_ColorationLeft_K2Node_ComponentBoundEvent_22_OnButtonClickedEvent__DelegateSignature();// 0x45bc5913d001 0x7e84841040
	void BndEvt__ScreenSettings_Button_ColorationRight_K2Node_ComponentBoundEvent_23_OnButtonClickedEvent__DelegateSignature();// 0x45bd5913d001 0x7e84841120
	void BndEvt__ScreenSettings_Button_ProcessingLeft_K2Node_ComponentBoundEvent_24_OnButtonClickedEvent__DelegateSignature();// 0x45c65913d001 0x7e84841900
	void BndEvt__ScreenSettings_Button_ProcessingRight_K2Node_ComponentBoundEvent_25_OnButtonClickedEvent__DelegateSignature();// 0x45c75913d001 0x7e848419e0
	static void ExecuteUbergraph_ScreenSettings(int EntryPoint, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, GameSettings_C* CallFunc_Create_ReturnValue, KeySettings_C* CallFunc_Create_ReturnValue, IntPoint[] CallFunc_GetSupportedFullscreenResolutions_Resolutions, bool CallFunc_GetSupportedFullscreenResolutions_ReturnValue, int CallFunc_GetSelectedIndex_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetSelectedIndex_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue);// 0x45d15913d001 0x7e8484d360

--------------------------------
Class: GameSettings_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8] 0x7e5b1b3080
	Button* Button_apply;//[Offset: 0x298, Size: 0x8] 0x7e5b1b2900
	Button* Button_GameSettings;//[Offset: 0x2a0, Size: 0x8] 0x7e5b1b2880
	Button* Button_KeySettings;//[Offset: 0x2a8, Size: 0x8] 0x7e5b1b2800
	Button* Button_ReturnMune;//[Offset: 0x2b0, Size: 0x8] 0x7e5b1b2780
	Button* Button_ScreenSettings;//[Offset: 0x2b8, Size: 0x8] 0x7e5b1b2700
	EditableTextBox* EditableTextBox_Name;//[Offset: 0x2c0, Size: 0x8] 0x7e5b1b2680
	Image* Image;//[Offset: 0x2c8, Size: 0x8] 0x7e5b1b2600
	G1SSaveGame* Save Game;//[Offset: 0x2d0, Size: 0x8] 0x7e5b1b2580
	void PreConstruct(bool IsDesignTime);// 0x47635913d001 0x7e844cee80
	void BndEvt__Settings_Button_91_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x472f5913d001 0x7e844cecc0
	void BndEvt__GameSettings_Button_ScreenSettings_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x472e5913d001 0x7e844cebe0
	void BndEvt__GameSettings_Button_KeySettings_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x472d5913d001 0x7e844ceb00
	void BndEvt__GameSettings_Button_apply_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x472c5913d001 0x7e844cea20
	static void ExecuteUbergraph_GameSettings(int EntryPoint, bool K2Node_Event_IsDesignTime, bool CallFunc_SaveGameToSlot_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, ScreenSettings_C* CallFunc_Create_ReturnValue, KeySettings_C* CallFunc_Create_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, G1SGameInstance* K2Node_DynamicCast_AsG1SGame_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x47305913d001 0x7e844ceda0

--------------------------------
Class: Online_C.SubPage.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8] 0x7e5b1b8e80
	Button* Button_Search;//[Offset: 0x2a8, Size: 0x8] 0x7e5b1b8e00
	ListView* ListView;//[Offset: 0x2b0, Size: 0x8] 0x7e5b1b8d80
	BlueprintSessionResult NewVar;//[Offset: 0x2b8, Size: 0x108] 0x7e5b1b8d00
	void OnFailure_90503AB4401B9E4328F3BBA97FBDED6E(out const BlueprintSessionResult[] Results);// 0x47955913d001 0x7e844cf820
	void OnSuccess_90503AB4401B9E4328F3BBA97FBDED6E(out const BlueprintSessionResult[] Results);// 0x47ac5913d001 0x7e844cf900
	void BndEvt__Online_Button_Search_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x47935913d001 0x7e844cf660
	void ExecuteUbergraph_Online(int EntryPoint, const BlueprintSessionResult[] K2Node_CustomEvent_Results, delegate K2Node_CreateDelegate_OutputDelegate, const BlueprintSessionResult[] K2Node_CustomEvent_Results, delegate K2Node_CreateDelegate_OutputDelegate, BlueprintSessionResult[] Temp_struct_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, BlueprintSessionResult CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, FindSessionsCallbackProxy* CallFunc_FindSessions_ReturnValue, ListRoom_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x47945913d001 0x7e844cf740

--------------------------------
Class: Standalone_Content_C.Standalone.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c8, Size: 0x8] 0x7e5b1bb500
	Button* Button_Setting;//[Offset: 0x2d0, Size: 0x8] 0x7e5b1bb480
	EditableTextBox* EditableTextBox;//[Offset: 0x2d8, Size: 0x8] 0x7e5b1bb400
	FText GetText();// 0x48135913d009 0x7e844cfd60
	void BndEvt__Standalone_Content_Button_Online_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x47ae5913d001 0x7e844cfac0
	void BndEvt__Standalone_Content_Button_NewGame_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x47ad5913d001 0x7e844cf9e0
	void BndEvt__Standalone_Content_Button_Setting_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x47af5913d001 0x7e844cfba0
	static void ExecuteUbergraph_Standalone_Content(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, G1SGameInstance* K2Node_DynamicCast_AsG1SGame_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, NewGame_Content_C* CallFunc_Create_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ScreenSettings_C* CallFunc_Create_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x47b05913d001 0x7e844cfc80

--------------------------------
Class: Standalone_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x7e5b1bbd00
	CameraActor* CameraActor_1_ExecuteUbergraph_Standalone_RefProperty;//[Offset: 0x288, Size: 0x8] 0x7e5b1bbc80
	void ReceiveBeginPlay();// 0xffffff8158ebd000 0x7e844cdb40
	void ExecuteUbergraph_Standalone(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue);// 0x48205913d001 0x7e844cda60

--------------------------------
