Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x1c01fa0

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidJavaSurfaceViewDevices.Object
	JavaSurfaceViewDevice[] SurfaceViewDevices;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: JavaSurfaceViewDevice
	FString Manufacturer;//[Offset: 0x0, Size: 0xc]
	FString Model;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object
	ProfileMatch[] MatchProfile;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: ProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0xc]
	ProfileMatchItem[] Match;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1]
	byte CompareType;//[Offset: 0x1, Size: 0x1]
	FString MatchString;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c, Size: 0x3c]
	uint32 MaxDelayBeginPlayNumber;//[Offset: 0x58, Size: 0x4]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	float CustomTimeDilation;//[Offset: 0x60, Size: 0x4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 0x1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64, Size: 0x1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x64, Size: 0x1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x64, Size: 0x1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x64, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x65, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x65, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x65, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x65, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x65, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x66, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x66, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x66, Size: 0x1]
	byte RemoteRole;//[Offset: 0x67, Size: 0x1]
	Actor* Owner;//[Offset: 0x68, Size: 0x4]
	byte WorldParallelismID;//[Offset: 0x6c, Size: 0x1]
	FName NetDriverName;//[Offset: 0x78, Size: 0x8]
	RepMovement ReplicatedMovement;//[Offset: 0x80, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0xb4, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xb8, Size: 0x38]
	byte Role;//[Offset: 0xf0, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf1, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xf2, Size: 0x1]
	int InputPriority;//[Offset: 0xf4, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 0x4]
	float NetCullDistanceSquared;//[Offset: 0xfc, Size: 0x4]
	int NetTag;//[Offset: 0x100, Size: 0x4]
	float NetConsiderFrequency;//[Offset: 0x108, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x10c, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x110, Size: 0x4]
	float NetPriority;//[Offset: 0x118, Size: 0x4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x120, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x120, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x120, Size: 0x1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x120, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x120, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x121, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x121, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x121, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x121, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x121, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x122, Size: 0x1]
	Pawn* Instigator;//[Offset: 0x130, Size: 0x4]
	Actor*[] Children;//[Offset: 0x134, Size: 0xc]
	SceneComponent* RootComponent;//[Offset: 0x140, Size: 0x4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x144, Size: 0xc]
	FName[] Layers;//[Offset: 0x158, Size: 0xc]
	ChildActorComponent* ParentComponent;//[Offset: 0x164, Size: 0x8]
	FName[] Tags;//[Offset: 0x16c, Size: 0xc]
	uint64 HiddenEditorViews;//[Offset: 0x178, Size: 0x8]
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 0xc]
	delegate OnTakePointDamage;//[Offset: 0x18c, Size: 0xc]
	delegate OnActorBeginOverlap;//[Offset: 0x198, Size: 0xc]
	delegate OnActorEndOverlap;//[Offset: 0x1a4, Size: 0xc]
	delegate OnBeginCursorOver;//[Offset: 0x1b0, Size: 0xc]
	delegate OnEndCursorOver;//[Offset: 0x1bc, Size: 0xc]
	delegate OnClicked;//[Offset: 0x1c8, Size: 0xc]
	delegate OnReleased;//[Offset: 0x1d4, Size: 0xc]
	delegate OnInputTouchBegin;//[Offset: 0x1e0, Size: 0xc]
	delegate OnInputTouchEnd;//[Offset: 0x1ec, Size: 0xc]
	delegate OnInputTouchEnter;//[Offset: 0x1f8, Size: 0xc]
	delegate OnInputTouchLeave;//[Offset: 0x204, Size: 0xc]
	delegate OnActorHit;//[Offset: 0x210, Size: 0xc]
	delegate OnDestroyed;//[Offset: 0x21c, Size: 0xc]
	delegate OnEndPlay;//[Offset: 0x228, Size: 0xc]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2ac, Size: 0xc]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2b8, Size: 0xc]
	bool WasRecentlyRendered(float Tolerance);// 0x2ca9074
	void UserConstructionScript();// 0x1c01fa0
	void TearOff();// 0x133d2f0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x2ca8fb8
	void SetTickGroup(byte NewTickGroup);// 0x2ca8f40
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x2ca8ec0
	void SetReplicates(bool bInReplicates);// 0x2ca8e40
	void SetReplicateMovement(bool bInReplicateMovement);// 0x2ca8db8
	void SetOwner(Actor* NewOwner);// 0x13bd228
	void SetNetDormancy(byte NewDormancy);// 0x2ca8d40
	void SetLifeSpan(float InLifespan);// 0x2ca8cc0
	void SetActorTickInterval(float TickInterval);// 0x2ca8c48
	void SetActorTickEnabled(bool bEnabled);// 0x2ca8bc8
	void SetActorScale3D(Vector NewScale3D);// 0x2ca8b58
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x2ca8ae8
	void SetActorHiddenInGame(bool bNewHidden);// 0x2ca8a60
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x2ca89e0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1343d34
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1343dd0
	void ReceiveTick(float DeltaSeconds);// 0x1c01fa0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1c01fa0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1c01fa0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1c01fa0
	void ReceiveEndPlay(byte EndPlayReason);// 0x1c01fa0
	void ReceiveDestroyed();// 0x1c01fa0
	void ReceiveBeginPlay();// 0x1c01fa0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1c01fa0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1c01fa0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1c01fa0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1c01fa0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1c01fa0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1c01fa0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1c01fa0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1c01fa0
	void ReceiveActorEndCursorOver();// 0x1c01fa0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1c01fa0
	void ReceiveActorBeginCursorOver();// 0x1c01fa0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x2ca88cc
	void OnRep_ReplicateMovement();// 0x131b67c
	void OnRep_ReplicatedMovement();// 0x12e0f50
	void OnRep_Owner();// 0x13e61a0
	void OnRep_Instigator();// 0x2ca88b0
	void OnRep_AttachmentReplication();// 0x131b1dc
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x2ca8714
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x1389ff0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x2ca864c
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca8430
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x2ca835c
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca8150
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca7fcc
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca7e50
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca7c80
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca7b00
	void K2_OnReset();// 0x1c01fa0
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1c01fa0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1c01fa0
	SceneComponent* K2_GetRootComponent();// 0x2ca7ae4
	Rotator K2_GetActorRotation();// 0x2ca79dc
	Vector K2_GetActorLocation();// 0x2ca7978
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x2ca7878
	void K2_DestroyComponent(ActorComponent* Component);// 0x2ca7800
	void K2_DestroyActor();// 0x2ca77e4
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2ca7604
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2ca7424
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x2ca72d0
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x2ca717c
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca6f70
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca6de8
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca6c6c
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca6a60
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca68dc
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca6760
	bool IsOverlappingActor(const Actor* Other);// 0x2ca66e0
	bool IsChildActor();// 0x2ca66b8
	bool IsActorTickEnabled();// 0x2ca6690
	bool IsActorBeingDestroyed();// 0x2ca666c
	bool HasAuthority();// 0x2ca6644
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x2ca65c4
	Vector GetVelocity();// 0x2ca6574
	Transform GetTransform();// 0x2ca64e0
	bool GetTickableWhenPaused();// 0x2ca64b8
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x2ca6438
	byte GetRemoteRole();// 0x2ca641c
	ChildActorComponent* GetParentComponent();// 0x2ca63f4
	Actor* GetParentActor();// 0x2ca63cc
	Actor* GetOwner();// 0x2ca63b0
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x2ca62e4
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2ca61d0
	float GetLifeSpan();// 0x2ca61a0
	Controller* GetInstigatorController();// 0x2ca6178
	Pawn* GetInstigator();// 0x2ca6150
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x2ca5e4c
	float GetInputAxisValue(const FName InputAxisName);// 0x2ca5dcc
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x2ca5ad4
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x2ca5a54
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x2ca59d4
	float GetGameTimeSinceCreation();// 0x2ca59ac
	float GetDotProductTo(const Actor* OtherActor);// 0x2ca592c
	float GetDistanceTo(const Actor* OtherActor);// 0x2ca58ac
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x2ca5758
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x2ca5650
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x2ca55d0
	FName GetAttachParentSocketName();// 0x2ca5590
	Actor* GetAttachParentActor();// 0x2ca5568
	void GetAttachedActors(out Actor*[] OutActors);// 0x2ca549c
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x2ca5380
	Vector GetActorUpVector();// 0x2ca530c
	float GetActorTimeDilation();// 0x2ca52e4
	float GetActorTickInterval();// 0x2ca52bc
	Vector GetActorScale3D();// 0x2ca5274
	Vector GetActorRightVector();// 0x2ca5200
	Vector GetActorRelativeScale3D();// 0x2ca51b8
	Vector GetActorForwardVector();// 0x2ca5144
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x2ca5064
	bool GetActorEnableCollision();// 0x2ca5044
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x2ca4f1c
	void ForceNetUpdate();// 0x13ea624
	void ForceNetConsider();// 0x2ca4f00
	void FlushNetDormancy();// 0x2ca4eec
	void EnableInput(PlayerController* PlayerController);// 0x2ca4e6c
	void DisableInput(PlayerController* PlayerController);// 0x2ca4dec
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x2ca4d6c
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2ca4cec
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x2ca4c6c
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x2ca4a80
	bool ActorHasTag(FName Tag);// 0x2ca4a00

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x5, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	float TickInterval;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 0xc]
	FName AttachSocket;//[Offset: 0x28, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc4, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xcc, Size: 0x4]
	FName AttachSocketName;//[Offset: 0xd0, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 0xc]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe4, Size: 0xc]
	Vector RelativeLocation;//[Offset: 0x118, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x124, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x130, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x1a0, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ac, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ac, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ac, Size: 0x1]
	bool bVisibleInVeryLowLevelDevice;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ac, Size: 0x1]
	bool bVisibleInLowLevelDevice;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1ac, Size: 0x1]
	bool bVisibleInMidLevelDevice;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ac, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ad, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ad, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ad, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ad, Size: 0x1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ad, Size: 0x1]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ae, Size: 0x1]
	byte Mobility;//[Offset: 0x1af, Size: 0x1]
	byte DetailMode;//[Offset: 0x1b0, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x200, Size: 0xc]
	void ToggleVisibility(bool bPropagateToChildren);// 0x2dd9c50
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x2dd9b8c
	void SetWorldScale3D(Vector NewScale);// 0x2dd9b1c
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x2dd9a48
	void SetRelativeScale3D(Vector NewScale3D);// 0x2dd99d0
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x2dd98fc
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x2dd97dc
	void ResetRelativeTransform();// 0x2dd97c8
	void OnRep_Visibility(bool OldValue);// 0x2dd9748
	void OnRep_Transform();// 0x2dd9734
	void OnRep_AttachSocketName();// 0x2dd9720
	void OnRep_AttachParent();// 0x2dd9720
	void OnRep_AttachChildren();// 0x2dd970c
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd9500
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd9384
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd91c8
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd904c
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd8e40
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd8cb8
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd8afc
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd8980
	Transform K2_GetComponentToWorld();// 0x2dd88f8
	Vector K2_GetComponentScale();// 0x2dd88b0
	Rotator K2_GetComponentRotation();// 0x2dd8868
	Vector K2_GetComponentLocation();// 0x2dd8820
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x2dd86d0
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2dd84e8
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x2dd838c
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd8180
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd8000
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd7e84
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd7d08
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd7b8c
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd7980
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd77fc
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dd7680
	bool IsVisible();// 0x2dd7650
	bool IsSimulatingPhysics(FName BoneName);// 0x2dd75c8
	bool IsAnySimulatingPhysics();// 0x2dd7598
	Vector GetUpVector();// 0x2dd7550
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x2dd7428
	Rotator GetSocketRotation(FName InSocketName);// 0x2dd738c
	Quat GetSocketQuaternion(FName InSocketName);// 0x2dd72f0
	Vector GetSocketLocation(FName InSocketName);// 0x2dd7254
	Vector GetRightVector();// 0x2dd720c
	Transform GetRelativeTransform();// 0x2dd7184
	PhysicsVolume* GetPhysicsVolume();// 0x2dd715c
	void GetParentComponents(out SceneComponent*[] Parents);// 0x2dd7090
	int GetNumChildrenComponents();// 0x2dd7068
	Vector GetForwardVector();// 0x2daefac
	Vector GetComponentVelocity();// 0x2dd7018
	Transform GetComponentTransformViewTranslatedBP();// 0x2dd6f9c
	Transform GetComponentLocal(Transform LocalTransform);// 0x2dd6e50
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x2dd6d34
	SceneComponent* GetChildComponent(int ChildIndex);// 0x2dd6cb4
	FName GetAttachSocketName();// 0x2dd6c98
	SceneComponent* GetAttachParent();// 0x2dd6c7c
	FName[] GetAllSocketNames();// 0x2dd6bbc
	bool DoesSocketExist(FName InSocketName);// 0x2dd6b34
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x2dd6a5c

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 0x3c]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0xc]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	float NetUpdateFrequency;//[Offset: 0x70, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0xc]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x85, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86, Size: 0x1]
	enum CreationMethod;//[Offset: 0x88, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x8c, Size: 0xc]
	delegate OnComponentActivated;//[Offset: 0x9c, Size: 0xc]
	delegate OnComponentDeactivated;//[Offset: 0xa8, Size: 0xc]
	void ToggleActive();// 0x13e61a0
	void SetTickGroup(byte NewTickGroup);// 0x2cac480
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x2cac400
	void SetIsReplicated(bool ShouldReplicate);// 0x2cac380
	void SetComponentTickInterval(float TickInterval);// 0x2cac308
	void SetComponentTickEnabled(bool bEnabled);// 0x2cac280
	void SetAutoActivate(bool bNewAutoActivate);// 0x12fdedc
	void SetActive(bool bNewActive, bool bReset);// 0x2cac1a8
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2cac128
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x2cac0a8
	void ReceiveTick(float DeltaSeconds);// 0x1c01fa0
	void ReceiveEndPlay(byte EndPlayReason);// 0x1c01fa0
	void ReceiveBeginPlay();// 0x1c01fa0
	void OnRep_IsActive();// 0x2cac094
	void K2_DestroyComponent(Object* Object);// 0x2cac01c
	bool IsComponentTickEnabled();// 0x2cabff4
	bool IsBeingDestroyed();// 0x2cabfd4
	bool IsActive();// 0x2cabfa4
	Actor* GetOwner();// 0x2cabf88
	float GetComponentTickInterval();// 0x2cabf60
	void ForceNetUpdate();// 0x13ea624
	void Deactivate();// 0x13e6168
	bool ComponentHasTag(FName Tag);// 0x2cabee0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2cabe60
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x2cabde0
	void Activate(bool bReset);// 0x12fde54

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2f0, Size: 0x4]
	int Priority;//[Offset: 0x2f4, Size: 0x4]
	float FluidFriction;//[Offset: 0x2f8, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2c8, Size: 0x1]
	Color BrushColor;//[Offset: 0x2cc, Size: 0x4]
	int PolyFlags;//[Offset: 0x2d0, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4, Size: 0x1]
	Model* Brush;//[Offset: 0x2d8, Size: 0x4]
	BrushComponent* BrushComponent;//[Offset: 0x2dc, Size: 0x4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x2e4, Size: 0xc]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x500, Size: 0x4]
	BodySetup* BrushBodySetup;//[Offset: 0x504, Size: 0x4]
	Vector PrePivot;//[Offset: 0x508, Size: 0xc]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x23c, Size: 0x4]
	float MinDrawDistance;//[Offset: 0x240, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x244, Size: 0x4]
	float MaxDrawDistanceOffset;//[Offset: 0x248, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x24c, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x250, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x251, Size: 0x1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x252, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x252, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x252, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x252, Size: 0x1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x253, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x253, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x253, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x253, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x253, Size: 0x1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x253, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x253, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x253, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x254, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x254, Size: 0x1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x254, Size: 0x1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x254, Size: 0x1]
	LinearColor IdeaOutlineColor;//[Offset: 0x258, Size: 0x10]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	float IdeaOutlineThickness;//[Offset: 0x26c, Size: 0x4]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x270, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x270, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x270, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x270, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x270, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x270, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x271, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x271, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x271, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x271, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x271, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x271, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x271, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x271, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x272, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x272, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x272, Size: 0x1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x272, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x272, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x272, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x272, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x272, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x273, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x273, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x273, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x273, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x274, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x276, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x277, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x278, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x27c, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x280, Size: 0x4]
	int VisibilityId;//[Offset: 0x284, Size: 0x4]
	float BoundsScale;//[Offset: 0x294, Size: 0x4]
	float LastSubmitTime;//[Offset: 0x298, Size: 0x4]
	float LastRenderTime;//[Offset: 0x29c, Size: 0x4]
	float LastRenderTimeOnScreen;//[Offset: 0x2a0, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x2a4, Size: 0xc]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2b0, Size: 0xc]
	BodyInstance BodyInstance;//[Offset: 0x2c8, Size: 0x148]
	delegate OnComponentHit;//[Offset: 0x410, Size: 0xc]
	delegate OnComponentBeginOverlap;//[Offset: 0x41c, Size: 0xc]
	delegate OnComponentEndOverlap;//[Offset: 0x428, Size: 0xc]
	delegate OnComponentWake;//[Offset: 0x434, Size: 0xc]
	delegate OnComponentSleep;//[Offset: 0x440, Size: 0xc]
	delegate OnBeginCursorOver;//[Offset: 0x458, Size: 0xc]
	delegate OnEndCursorOver;//[Offset: 0x464, Size: 0xc]
	delegate OnClicked;//[Offset: 0x470, Size: 0xc]
	delegate OnReleased;//[Offset: 0x47c, Size: 0xc]
	delegate OnInputTouchBegin;//[Offset: 0x488, Size: 0xc]
	delegate OnInputTouchEnd;//[Offset: 0x494, Size: 0xc]
	delegate OnInputTouchEnter;//[Offset: 0x4a0, Size: 0xc]
	delegate OnInputTouchLeave;//[Offset: 0x4ac, Size: 0xc]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x4c0, Size: 0x4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x4c4, Size: 0x3c]
	void WakeRigidBody(FName BoneName);// 0x2dc8240
	void WakeAllRigidBodies();// 0x2ce2874
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x2dc81a8
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x2dc8130
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x1343e64
	void SetSimulatePhysics(bool bSimulate);// 0x2dc80a8
	void SetRenderInMono(bool bValue);// 0x2dc8028
	void SetRenderInMainPass(bool bValue);// 0x2dc7fa8
	void SetRenderCustomDepth(bool bValue);// 0x2dc7f28
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x2dc7ea8
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x2dc7e28
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2dc7d14
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2dc7bf0
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2dc7bf0
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x2dc7adc
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2dc79c8
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2dc7890
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2dc7890
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x2dc7810
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x2dc7790
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x2dc7708
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x2dc7644
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2dc7580
	void SetMassScale(FName BoneName, float InMassScale);// 0x2dc74b4
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x2dc7398
	void SetLockedAxis(byte LockedAxis);// 0x2dc7318
	void SetLinearDamping(float InDamping);// 0x132b1dc
	void SetEnableGravity(bool bGravityEnabled);// 0x2dc7290
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x2dc7210
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x2dc7198
	void SetCustomDepthStencilValue(int Value);// 0x2dc7120
	void SetCullDistance(float NewCullDistance);// 0x2dc70a8
	void SetConstraintMode(byte ConstraintMode);// 0x2dc7028
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x2dc6f64
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x2dc6ee4
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x2dc6e64
	void SetCollisionObjectType(byte Channel);// 0x2dc6de4
	void SetCollisionEnabled(byte NewType);// 0x2dc6d64
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x2dc6ca4
	void SetCastShadow(bool NewCastShadow);// 0x2dc6c24
	void SetBoundsScale(float NewBoundsScale);// 0x2dc6bac
	void SetAngularDamping(float InDamping);// 0x2dc6b2c
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x2dc6a60
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x2dc6984
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x2dc687c
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x2dc67a0
	void SetAllMassScale(float InMassScale);// 0x2dc6720
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x2dc6634
	void PutRigidBodyToSleep(FName BoneName);// 0x2dc65bc
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x2dc64f4
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x2dc6420
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2dc6130
	bool K2_IsQueryCollisionEnabled();// 0x2dc60f0
	bool K2_IsPhysicsCollisionEnabled();// 0x2dc60b0
	bool K2_IsCollisionEnabled();// 0x2dc6078
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x2dc5ff8
	bool IsOverlappingActor(const Actor* Other);// 0x2dc5f78
	bool IsGravityEnabled();// 0x2dc5f48
	bool IsAnyRigidBodyAwake();// 0x14d4d04
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x2dc5e84
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x2dc5dc0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x2dc5d84
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x2dc5ca0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x2dc5c0c
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x2dc5b78
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x2dc5acc
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x2dc5acc
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x2dc5a00
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2dc58ec
	int GetNumMaterials();// 0x2dc58bc
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x2dc57e0
	MaterialInterface* GetMaterial(int ElementIndex);// 0x2dc5758
	float GetMassScale(FName BoneName);// 0x2dc56d0
	float GetMass();// 0x2dc56a0
	float GetLinearDamping();// 0x2dc5670
	Vector GetInertiaTensor(FName BoneName);// 0x2dc55d4
	byte GetCollisionResponseToChannel(byte Channel);// 0x2dc554c
	FName GetCollisionProfileName();// 0x2dc550c
	byte GetCollisionObjectType();// 0x2dc54dc
	byte GetCollisionEnabled();// 0x12fb3a0
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x2dc53ac
	Vector GetCenterOfMass(FName BoneName);// 0x2dc5318
	float GetAngularDamping();// 0x2dc52e8
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x2dc521c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x2dc5150
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x2dc50c8
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x2dc5008
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x2dc4f48
	void ClearMoveIgnoreComponents();// 0x2dc4f18
	void ClearMoveIgnoreActors();// 0x2dc4f04
	bool CanCharacterStepUp(Pawn* Pawn);// 0x2dc4e7c
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x2dc4c38
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x2dc4d48
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x2dc4c38
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x2dc4a94
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x2dc48f0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x2dc47d8
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2dc46c0
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x2dc45a8
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x2dc4490
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x2dc4378
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x2dc4260
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x2dc4124
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2dc400c

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 0x34]
	FName BoneName;//[Offset: 0x50, Size: 0x8]
	byte PhysicsType;//[Offset: 0x58, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 0x4]
	byte CollisionReponse;//[Offset: 0x60, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x61, Size: 0x1]
	BodyInstance DefaultInstance;//[Offset: 0x68, Size: 0x148]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x1b0, Size: 0x10]
	float BuildScale;//[Offset: 0x1c0, Size: 0x4]
	Vector BuildScale3D;//[Offset: 0x1c4, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0xc]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 0xc]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 0xc]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 0x40]
	Vector Center;//[Offset: 0x50, Size: 0xc]
	float Radius;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 0x40]
	Quat Orientation;//[Offset: 0x50, Size: 0x10]
	Vector Center;//[Offset: 0x60, Size: 0xc]
	Rotator Rotation;//[Offset: 0x6c, Size: 0xc]
	float X;//[Offset: 0x78, Size: 0x4]
	float Y;//[Offset: 0x7c, Size: 0x4]
	float Z;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 0x40]
	Quat Orientation;//[Offset: 0x50, Size: 0x10]
	Vector Center;//[Offset: 0x60, Size: 0xc]
	Rotator Rotation;//[Offset: 0x6c, Size: 0xc]
	float Radius;//[Offset: 0x78, Size: 0x4]
	float Length;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10, Size: 0xc]
	Box ElemBox;//[Offset: 0x1c, Size: 0x1c]
	Transform Transform;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	float Restitution;//[Offset: 0x24, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float Density;//[Offset: 0x2c, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x34, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x38, Size: 0x4]
	byte SurfaceType;//[Offset: 0x3c, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x40, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x4]
	float FrictionScale;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19, Size: 0x1]
	byte DOFMode;//[Offset: 0x1a, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x1b, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 0x8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x2c]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57, Size: 0x1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57, Size: 0x1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x64, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	byte ObjectType;//[Offset: 0x98, Size: 0x1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4, Size: 0x4]
	float MaxAngularVelocity;//[Offset: 0xb8, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xc4, Size: 0x4]
	int PositionSolverIterationCount;//[Offset: 0xc8, Size: 0x4]
	uint64 RigidActorSyncId;//[Offset: 0xe0, Size: 0x8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8, Size: 0x8]
	int VelocitySolverIterationCount;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20, Size: 0x4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x28, Size: 0x14]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x3c, Size: 0xc]
	void SetStreamingTextureMipOffset(int NewMipOffset);// 0x14f30b0
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x2d89540
	PhysicalMaterial* GetPhysicalMaterial();// 0x2d89510
	Material* GetBaseMaterial();// 0x2d894e8

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 0x24]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x4c, Size: 0x4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x50, Size: 0x38]
	ColorMaterialInput SpecularColor;//[Offset: 0x88, Size: 0x38]
	ColorMaterialInput BaseColor;//[Offset: 0xc0, Size: 0x38]
	ScalarMaterialInput Metallic;//[Offset: 0xf8, Size: 0x38]
	ScalarMaterialInput Specular;//[Offset: 0x130, Size: 0x38]
	ScalarMaterialInput Roughness;//[Offset: 0x168, Size: 0x38]
	VectorMaterialInput Normal;//[Offset: 0x1a0, Size: 0x40]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e0, Size: 0x38]
	ScalarMaterialInput Opacity;//[Offset: 0x218, Size: 0x38]
	ScalarMaterialInput OpacityMask;//[Offset: 0x250, Size: 0x38]
	byte MaterialDomain;//[Offset: 0x288, Size: 0x1]
	byte BlendMode;//[Offset: 0x289, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x28a, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x28b, Size: 0x1]
	byte ShadingModel;//[Offset: 0x28c, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x290, Size: 0x4]
	float VertexOffsetAlongNormal;//[Offset: 0x294, Size: 0x4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a0, Size: 0x40]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e0, Size: 0x40]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x320, Size: 0x38]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x358, Size: 0x38]
	ScalarMaterialInput ClearCoat;//[Offset: 0x390, Size: 0x38]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3c8, Size: 0x38]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x400, Size: 0x38]
	ScalarMaterialInput Refraction;//[Offset: 0x438, Size: 0x38]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x470, Size: 0x40]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x670, Size: 0x38]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6a8, Size: 0x38]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e0, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e0, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6e0, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6e0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6e0, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6e0, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6e0, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6e0, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x6e4, Size: 0x4]
	byte TranslucencyLightingMode;//[Offset: 0x6e8, Size: 0x1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x6ec, Size: 0x4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0, Size: 0x1]
	float TranslucentShadowDensityScale;//[Offset: 0x6f4, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x6f8, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x6fc, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x700, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x704, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x708, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x718, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71c, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71c, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71c, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71c, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71c, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71c, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71d, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71d, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71d, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71d, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71d, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71d, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71d, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71d, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71e, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71e, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71e, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71e, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71e, Size: 0x1]
	bool bIgnoreForceUseVertexNormal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71e, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71e, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71e, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71f, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71f, Size: 0x1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71f, Size: 0x1]
	bool bBatchSimilarMaterialInstances;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71f, Size: 0x1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71f, Size: 0x1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71f, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71f, Size: 0x1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71f, Size: 0x1]
	byte ShadowOverride;//[Offset: 0x720, Size: 0x1]
	byte SimpleVertexNormalSituation;//[Offset: 0x721, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x722, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x722, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x722, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x723, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x724, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x724, Size: 0x1]
	float MaxDisplacement;//[Offset: 0x728, Size: 0x4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72c, Size: 0x1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72c, Size: 0x1]
	int EditorX;//[Offset: 0x730, Size: 0x4]
	int EditorY;//[Offset: 0x734, Size: 0x4]
	int EditorPitch;//[Offset: 0x738, Size: 0x4]
	int EditorYaw;//[Offset: 0x73c, Size: 0x4]
	MaterialExpression*[] Expressions;//[Offset: 0x740, Size: 0xc]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x74c, Size: 0xc]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x758, Size: 0xc]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x764, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x764, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x764, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x764, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x764, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x764, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x764, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x764, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x768, Size: 0x4]
	byte BlendableLocation;//[Offset: 0x76c, Size: 0x1]
	int BlendablePriority;//[Offset: 0x770, Size: 0x4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 0x1]
	byte RefractionMode;//[Offset: 0x775, Size: 0x1]
	float RefractionDepthBias;//[Offset: 0x778, Size: 0x4]
	Guid stateID;//[Offset: 0x77c, Size: 0x10]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x814, Size: 0xc]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	Color Constant;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FString InputName;//[Offset: 0x4, Size: 0xc]
	int Mask;//[Offset: 0x10, Size: 0x4]
	int MaskR;//[Offset: 0x14, Size: 0x4]
	int MaskG;//[Offset: 0x18, Size: 0x4]
	int MaskB;//[Offset: 0x1c, Size: 0x4]
	int MaskA;//[Offset: 0x20, Size: 0x4]
	FName ExpressionName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float Constant;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	Vector Constant;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float ConstantX;//[Offset: 0x34, Size: 0x4]
	float ConstantY;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FString InputName;//[Offset: 0x4, Size: 0xc]
	int Mask;//[Offset: 0x10, Size: 0x4]
	int MaskR;//[Offset: 0x14, Size: 0x4]
	int MaskG;//[Offset: 0x18, Size: 0x4]
	int MaskB;//[Offset: 0x1c, Size: 0x4]
	int MaskA;//[Offset: 0x20, Size: 0x4]
	FName ExpressionName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 0x4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 0x4]
	FString Desc;//[Offset: 0x24, Size: 0xc]
	Color BorderColor;//[Offset: 0x30, Size: 0x4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 0x1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 0x1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 0x1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 0x1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 0x1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 0x1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 0x1]
	ExpressionOutput[] Outputs;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c, Size: 0x10]
	FString Description;//[Offset: 0x2c, Size: 0xc]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c, Size: 0xc]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 0xc]
	int Mask;//[Offset: 0xc, Size: 0x4]
	int MaskR;//[Offset: 0x10, Size: 0x4]
	int MaskG;//[Offset: 0x14, Size: 0x4]
	int MaskB;//[Offset: 0x18, Size: 0x4]
	int MaskA;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 0x10]
	MaterialFunction* Function;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 0xc]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20, Size: 0x10]
	int LODBias;//[Offset: 0x30, Size: 0x4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 0x4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c, Size: 0xc]
	int CachedCombinedLODBias;//[Offset: 0x48, Size: 0x4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	byte CompressionSettings;//[Offset: 0x4d, Size: 0x1]
	byte Filter;//[Offset: 0x4e, Size: 0x1]
	byte LODGroup;//[Offset: 0x4f, Size: 0x1]
	bool bDisableCrunchCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float CrunchCompressionAmmount;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Distance;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x54, Size: 0x4]
	int Item;//[Offset: 0x58, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 0x8]
	Actor* Actor;//[Offset: 0x64, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	int FaceIndex;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x2d88da8
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x2d88cec
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x2d88c28
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float alpha);// 0x2d88b28
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x2d88a98
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x2d88a18
	float K2_GetScalarParameterValue(FName ParameterName);// 0x2d88998
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x2d88920
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x2d888a8
	void CopyInterpParameters(MaterialInstance* Source);// 0x2d88830

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x4c, Size: 0x4]
	MaterialInterface* Parent;//[Offset: 0x50, Size: 0x4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x58, Size: 0xc]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x64, Size: 0xc]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70, Size: 0xc]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x7c, Size: 0xc]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x8c, Size: 0x10]
	Texture*[] PermutationTextureReferences;//[Offset: 0xb0, Size: 0xc]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Font* FontValue;//[Offset: 0x8, Size: 0x4]
	int FontPage;//[Offset: 0xc, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 0xc]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 0xc]
	int IsRemapped;//[Offset: 0x3c, Size: 0x4]
	float EmScale;//[Offset: 0x40, Size: 0x4]
	float Ascent;//[Offset: 0x44, Size: 0x4]
	float Descent;//[Offset: 0x48, Size: 0x4]
	float Leading;//[Offset: 0x4c, Size: 0x4]
	int Kerning;//[Offset: 0x50, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 0x90]
	int NumCharacters;//[Offset: 0xe4, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 0xc]
	float ScalingFactor;//[Offset: 0xf4, Size: 0x4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x100, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 0x18]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0x94, Size: 0x4]
	int LevelIndex;//[Offset: 0x98, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0x9c, Size: 0x4]
	IntPoint ImportedSize;//[Offset: 0xa0, Size: 0x8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xa8, Size: 0x8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb2, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb2, Size: 0x1]
	byte AddressX;//[Offset: 0xb3, Size: 0x1]
	byte AddressY;//[Offset: 0xb4, Size: 0x1]
	int Blueprint_GetSizeY();// 0x2df677c
	int Blueprint_GetSizeX();// 0x2df6754

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0xc]
	float Height;//[Offset: 0xc, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	byte CharacterSet;//[Offset: 0x11, Size: 0x1]
	FString Chars;//[Offset: 0x14, Size: 0xc]
	FString UnicodeRange;//[Offset: 0x20, Size: 0xc]
	FString CharsFilePath;//[Offset: 0x2c, Size: 0xc]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 0xc]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 0x4]
	int XPadding;//[Offset: 0x64, Size: 0x4]
	int YPadding;//[Offset: 0x68, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	int Kerning;//[Offset: 0x80, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0xc]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x14]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0xc]
	enum Hinting;//[Offset: 0xc, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 0x1]
	Object* FontFaceAsset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0, Size: 0xc]
	Int32Range[] CharacterRanges;//[Offset: 0xc, Size: 0xc]
	float ScalingFactor;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	float ParameterValue;//[Offset: 0x8, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4]
	byte BlendMode;//[Offset: 0xc, Size: 0x1]
	byte ShadingModel;//[Offset: 0xd, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc, Size: 0x1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x2d0, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x2d4, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x2d5, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x2d8, Size: 0x4]
	PlayerState* PlayerState;//[Offset: 0x2dc, Size: 0x4]
	byte RemoteViewPitch;//[Offset: 0x2e0, Size: 0x1]
	Controller* LastHitBy;//[Offset: 0x2e4, Size: 0x4]
	Controller* Controller;//[Offset: 0x2e8, Size: 0x4]
	Vector ControlInputVector;//[Offset: 0x2f4, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x300, Size: 0xc]
	void SpawnDefaultController();// 0x2da8800
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x2da8778
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x2da86a8
	void ReceiveUnpossessed(Controller* OldController);// 0x1c01fa0
	void ReceivePossessed(Controller* NewController);// 0x1c01fa0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x2da8554
	void OnRep_PlayerState();// 0x14ec2e8
	void OnRep_Controller();// 0x2ce27bc
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2da8440
	Vector K2_GetMovementInputVector();// 0x2da8370
	bool IsPlayerControlled();// 0x2da8410
	bool IsMoveInputIgnored();// 0x2ce25f8
	bool IsLocallyControlled();// 0x2da83e0
	bool IsControlled();// 0x2da83b8
	Vector GetPendingMovementInputVector();// 0x2da8370
	Vector GetNavAgentLocation();// 0x2ce2534
	PawnMovementComponent* GetMovementComponent();// 0x1413dd0
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x2da82f8
	Vector GetLastMovementInputVector();// 0x2da82b0
	Rotator GetControlRotation();// 0x2da8260
	Controller* GetController();// 0x12de3e8
	Rotator GetBaseAimRotation();// 0x2da8210
	void DetachFromControllerPendingDestroy();// 0x14cf790
	Vector ConsumeMovementInputVector();// 0x2da81c0
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x2da80ac
	void AddControllerYawInput(float Val);// 0x2da802c
	void AddControllerRollInput(float Val);// 0x132b1dc
	void AddControllerPitchInput(float Val);// 0x148a230

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x2cc, Size: 0x4]
	Character* Character;//[Offset: 0x2d8, Size: 0x4]
	PlayerState* PlayerState;//[Offset: 0x2dc, Size: 0x4]
	SceneComponent* TransformComponent;//[Offset: 0x2e0, Size: 0x4]
	Rotator ControlRotation;//[Offset: 0x2e4, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	FName StateName;//[Offset: 0x300, Size: 0x8]
	Actor* ObservedActor;//[Offset: 0x308, Size: 0x4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x30c, Size: 0xc]
	void UnPossess();// 0x2ce2a9c
	void StopMovement();// 0x2ce2a80
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x2ce29a0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x2ce2918
	void SetIgnoreLookInput(bool bNewLookInput);// 0x2ce2890
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x14bcf78
	void ResetIgnoreMoveInput();// 0x2ce2874
	void ResetIgnoreLookInput();// 0x2ce2858
	void ResetIgnoreInputFlags();// 0x148884c
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1c01fa0
	void Possess(Pawn* InPawn);// 0x2ce27d8
	void OnRep_PlayerState();// 0x14ec2e8
	void OnRep_Pawn();// 0x2ce27bc
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x2ce26a0
	Pawn* K2_GetPawn();// 0x2ce2678
	bool IsPlayerController();// 0x2ce2658
	bool IsMoveInputIgnored();// 0x2ce2628
	bool IsLookInputIgnored();// 0x2ce25f8
	bool IsLocalPlayerController();// 0x2ce25b4
	bool IsLocalController();// 0x2ce2584
	Actor* GetViewTarget();// 0x14ebcf0
	Rotator GetDesiredRotation();// 0x2ce2534
	Rotator GetControlRotation();// 0x2ce24e4
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x2ce2418
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x2ce2350
	PlayerController* CastToPlayerController();// 0x2ce2328

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x30c, Size: 0x4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x310, Size: 0x4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x314, Size: 0x4]
	BasedMovementInfo BasedMovement;//[Offset: 0x318, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x348, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x378, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x37c, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x390, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3a0, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x3b0, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 0x1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3b4, Size: 0x4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3b8, Size: 0x4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3bc, Size: 0x4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x3c0, Size: 0x4]
	float CrouchedEyeHeight;//[Offset: 0x3c8, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3cc, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3cc, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3cc, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3cc, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3cc, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3cc, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3cc, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cd, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x3d0, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x3d4, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x3d8, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x3dc, Size: 0x4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e0, Size: 0x1]
	delegate OnReachedJumpApex;//[Offset: 0x3e4, Size: 0xc]
	delegate MovementModeChangedDelegate;//[Offset: 0x3fc, Size: 0xc]
	delegate OnCharacterMovementUpdated;//[Offset: 0x408, Size: 0xc]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x414, Size: 0x90]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4b0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x4f0, Size: 0xc]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x500, Size: 0xe0]
	void UnCrouch(bool bClientSimulation);// 0x2cd9084
	void StopJumping();// 0x2cd9068
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x2cd8fe8
	void SetReplicateMovement(bool bInReplicateMovement);// 0x2ca8db8
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x2cd8f24
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x2cd8e0c
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x2cd8c8c
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x2cd8c78
	void OnRep_RootMotion();// 0x2cd8c64
	void OnRep_ReplicatedBasedMovement();// 0x2cd8c48
	void OnRep_IsCrouched();// 0x2cd8c2c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1c01fa0
	void OnLanded(out const HitResult Hit);// 0x1c01fa0
	void OnJumped();// 0x2cd8c10
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2cd8af4
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1c01fa0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1c01fa0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1c01fa0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1c01fa0
	void Jump();// 0x2cd8ad8
	bool IsPlayingRootMotion();// 0x2cd8ab0
	bool IsPlayingNetworkedRootMotionMontage();// 0x2cd8a88
	bool IsJumpProvidingForce();// 0x14d4d04
	AnimMontage* GetCurrentMontage();// 0x2cd8a60
	Vector GetBaseTranslationOffset();// 0x2cd8a3c
	Rotator GetBaseRotationOffsetRotator();// 0x2cd89d8
	float GetAnimRootMotionTranslationScale();// 0x2cd89b0
	void Crouch(bool bClientSimulation);// 0x2cd8928
	void ClientCheatWalk();// 0x2cd890c
	void ClientCheatGhost();// 0x2cd88f0
	void ClientCheatFly();// 0x14e62c0
	bool CanJumpInternal();// 0x2cd88c0
	bool CanJump();// 0x2cd8898
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x2cd87d0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x60c, Size: 0x1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x610, Size: 0x4]
	class AnimInstance* AnimClass;//[Offset: 0x614, Size: 0x4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x618, Size: 0x4]
	AnimInstance*[] SubInstances;//[Offset: 0x61c, Size: 0xc]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x628, Size: 0x4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x62c, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x660, Size: 0xc]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x66c, Size: 0xc]
	float GlobalAnimRateScale;//[Offset: 0x68c, Size: 0x4]
	enum UseAsyncScene;//[Offset: 0x690, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x691, Size: 0x1]
	byte KinematicBonesUpdateType;//[Offset: 0x692, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x693, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x694, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x694, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x694, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x694, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x694, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x694, Size: 0x1]
	FName[] DisallowedAnimCurves;//[Offset: 0x698, Size: 0xc]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a4, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a4, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a4, Size: 0x1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6a4, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6a4, Size: 0x1]
	float ClothBlendWeight;//[Offset: 0x6a8, Size: 0x4]
	Vector RootBoneTranslation;//[Offset: 0x6b0, Size: 0xc]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6bc, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6bc, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6bc, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6be, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x6c0, Size: 0x4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c5, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c5, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c5, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c5, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c5, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6c5, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6c5, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6c5, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x6c6, Size: 0x2]
	Vector LineCheckBoundsScale;//[Offset: 0x6c8, Size: 0xc]
	delegate OnConstraintBroken;//[Offset: 0x6d8, Size: 0xc]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x798, Size: 0x4]
	float TeleportDistanceThreshold;//[Offset: 0x79c, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x7a0, Size: 0x4]
	delegate OnAnimInitialized;//[Offset: 0x890, Size: 0xc]
	bool ReuseAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c, Size: 0x1]
	AnimSequence* SequenceToPlay;//[Offset: 0x928, Size: 0x4]
	AnimationAsset* AnimToPlay;//[Offset: 0x92c, Size: 0x4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x930, Size: 0x1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x930, Size: 0x1]
	float DefaultPosition;//[Offset: 0x934, Size: 0x4]
	float DefaultPlayRate;//[Offset: 0x938, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x93c, Size: 0x4]
	float LastPoseTickTime;//[Offset: 0x940, Size: 0x4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 0x1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97e, Size: 0x1]
	enum CurrentTickMode;//[Offset: 0x97f, Size: 0x1]
	bool bEnableConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x984, Size: 0x1]
	bool bEnableShouldUseLodMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x985, Size: 0x1]
	bool bEnableShouldUseMidLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x986, Size: 0x1]
	bool bEnableUseSkipMapForDistanceFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x987, Size: 0x1]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0x988, Size: 0xc]
	LODToSkipFrame[] ConfigLODToFrameSkipMap;//[Offset: 0x994, Size: 0xc]
	float ConfigMinDistFromMainChar;//[Offset: 0x9a0, Size: 0x4]
	float ConfigMaxDistFromMainChar;//[Offset: 0x9a4, Size: 0x4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0x9a8, Size: 0x4]
	bool bEnableNewURO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 0x1]
	bool bShouldUseMinLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ad, Size: 0x1]
	bool bShouldUseLodMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ae, Size: 0x1]
	bool bUseSkipMapForDistanceFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9af, Size: 0x1]
	float[] BaseVisibleDistanceFactorThesholds;//[Offset: 0x9b0, Size: 0xc]
	LODToSkipFrame[] LODToFrameSkipMap;//[Offset: 0x9bc, Size: 0xc]
	float MinDistFromMainChar;//[Offset: 0x9c8, Size: 0x4]
	float MaxDistFromMainChar;//[Offset: 0x9cc, Size: 0x4]
	int BaseNonRenderedUpdateRate;//[Offset: 0x9d0, Size: 0x4]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x2de0e24
	void SuspendClothingSimulation();// 0x2de0e10
	void Stop();// 0x2de0dfc
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x2de0cec
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x1343e64
	void SetTickMode(enum BatchedStatus);// 0x2de0c78
	void SetTeleportRotationThreshold(float Threshold);// 0x2de0c00
	void SetTeleportDistanceThreshold(float Threshold);// 0x2de0b88
	void SetPosition(float InPos, bool bFireNotifies);// 0x2de0ac4
	void SetPlayRate(float Rate);// 0x2de0a4c
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x2de09d4
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x2de08b0
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x2de079c
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x2de071c
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x2de0600
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x2de0538
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x2de04b8
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x2de03ec
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x2de02d0
	void SetClothMaxDistanceScale(float Scale);// 0x2de0258
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x2de0188
	void SetAnimInstanceClass(class Object NewClass);// 0x2de0110
	void SetAnimationMode(byte InAnimationMode);// 0x2de0098
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x2de0020
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x2ddfecc
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x2ddfdb0
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x2ddfd30
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2ddfc10
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2ddfaf0
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x2ddf9a0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x2ddf920
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2ddf85c
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x2ddf730
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x2ddf5bc
	void ResumeClothingSimulation();// 0x2ddf5a8
	void ResetClothTeleportMode();// 0x2ddf594
	void ResetAllowedAnimCurveEvaluation();// 0x2ddf580
	void ResetAllBodiesSimulatePhysics();// 0x2ddf56c
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x2ddf4a8
	void Play(bool bLooping);// 0x2ddf428
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x2ddf280
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x2ddf094
	bool IsPlaying();// 0x2ddf06c
	bool IsClothingSimulationSuspended();// 0x2ddf044
	bool IsBodyGravityEnabled(FName BoneName);// 0x2ddefc4
	enum GetTickMode();// 0x2ddefa8
	float GetTeleportRotationThreshold();// 0x2ddef80
	float GetTeleportDistanceThreshold();// 0x2ddef80
	AnimInstance*[] GetSubAnimInstances();// 0x2ddeec0
	Vector GetSkeletalCenterOfMass();// 0x2ddee78
	AnimInstance* GetPostProcessInstance();// 0x2ddee50
	float GetPosition();// 0x2ddee28
	float GetPlayRate();// 0x2ddee00
	float GetMorphTarget(FName MorphTargetName);// 0x2dded80
	bool GetDisableAnimCurves();// 0x2dded5c
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x2ddebdc
	float GetClothMaxDistanceScale();// 0x2ddebb4
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x2ddeae0
	AnimInstance* GetAnimInstance();// 0x2ddeab8
	byte GetAnimationMode();// 0x2ddea90
	bool GetAllowedAnimCurveEvaluate();// 0x2ddea70
	void ForceClothNextUpdateTeleportAndReset();// 0x2ddea5c
	void ForceClothNextUpdateTeleport();// 0x2ddea48
	FName FindConstraintBoneName(int ConstraintIndex);// 0x2dde9c0
	void ClearMorphTargets();// 0x2dde9ac
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x2dde89c
	void BindClothToMasterPoseComponent();// 0x2dde888
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x2dde7bc
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x2dde654
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x2dde4ec
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2dde3cc

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x51c, Size: 0x4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x520, Size: 0x8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c, Size: 0x1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x588, Size: 0x4]
	int ForcedLodModel;//[Offset: 0x58c, Size: 0x4]
	int MinLodModel;//[Offset: 0x590, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5a0, Size: 0xc]
	float StreamingDistanceMultiplier;//[Offset: 0x5ac, Size: 0x4]
	Color WireframeColor;//[Offset: 0x5b0, Size: 0x4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b4, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b4, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b4, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b4, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c4, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c4, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c4, Size: 0x1]
	byte MeshComponentUpdateFlag;//[Offset: 0x5c5, Size: 0x1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c6, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c7, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c7, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c7, Size: 0x1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x5c8, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c9, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c9, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5cc, Size: 0x4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d0, Size: 0x1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x5dc, Size: 0x1c]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 0x1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fa, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fb, Size: 0x1]
	void UnHideBoneByName(FName BoneName);// 0x2de4ae8
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2de4924
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2de4760
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x2de4650
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x2de4540
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x2de4474
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x2de43a8
	void SetMinLOD(int InNewMinLOD);// 0x2de4330
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x2de42b8
	void SetForcedLOD(int InNewForcedLOD);// 0x2de4240
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x2de41c0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x2de4140
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x2de40c8
	bool IsBoneHiddenByName(FName BoneName);// 0x2de4048
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x2de3f84
	FName GetSocketBoneName(FName InSocketName);// 0x2de3ef8
	FName GetParentBone(FName BoneName);// 0x2de3e6c
	int GetNumBones();// 0x2de3e44
	FName GetBoneName(int BoneIndex);// 0x2de3dbc
	int GetBoneIndex(FName BoneName);// 0x2de3d3c
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x2de3bc4
	void ClearVertexColorOverride(int LODIndex);// 0x2de3b4c
	void ClearSkinWeightOverride(int LODIndex);// 0x2de3ad4
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x2de3a08

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x500, Size: 0xc]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x2d8bda0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x2d8bcdc
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x2d8bbc8
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x2d8bb40
	FName[] GetMaterialSlotNames();// 0x2d8ba78
	MaterialInterface*[] GetMaterials();// 0x2d8b9b0
	int GetMaterialIndex(FName MaterialSlotName);// 0x2d8b928

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 0x4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float CullingScreenSize;//[Offset: 0x34, Size: 0x4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x38, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x54, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0x70, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x7c, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0x88, Size: 0xc]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x94, Size: 0xc]
	byte SkelMirrorAxis;//[Offset: 0xa0, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0xa1, Size: 0x1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xa4, Size: 0xc]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0xb4, Size: 0x4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xb8, Size: 0x4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xbc, Size: 0x4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xc0, Size: 0xc]
	MorphTarget*[] MorphTargets;//[Offset: 0xcc, Size: 0xc]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x1e4, Size: 0xc]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x1f0, Size: 0x4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x1f4, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x200, Size: 0xc]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x210, Size: 0xc]
	int NumSockets();// 0x2ddcb5c
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x2ddca90
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x2ddca10
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x2ddc990
	BoxSphereBounds GetImportedBounds();// 0x2ddc93c
	BoxSphereBounds GetBounds();// 0x2ddc8e8
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x2ddc80c
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x2ddc78c

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20, Size: 0xc]
	Transform[] RefLocalPoses;//[Offset: 0x2c, Size: 0xc]
	Guid VirtualBoneGuid;//[Offset: 0x108, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x118, Size: 0xc]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124, Size: 0xc]
	SmartNameContainer SmartNames;//[Offset: 0x16c, Size: 0x3c]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8, Size: 0xc]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x270, Size: 0xc]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 0x8]
	FName BoneName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x2de29ec
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x2de295c

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 0x4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x18]
	float BlendScale;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0xc]
	bool[] bEnableShadowCasting;//[Offset: 0x14, Size: 0xc]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20, Size: 0xc]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30, Size: 0x148]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178, Size: 0x8c]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204, Size: 0x214]
	FName[] RemovedBones;//[Offset: 0x418, Size: 0xc]
	BoneReference[] BonesToRemove;//[Offset: 0x424, Size: 0xc]
	AnimSequence* BakePose;//[Offset: 0x430, Size: 0x4]
	FString SourceImportFilename;//[Offset: 0x434, Size: 0xc]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 0x1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 0x1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 0x1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 0x4]
	int ScreenSize;//[Offset: 0xc, Size: 0x4]
	float WeldingThreshold;//[Offset: 0x10, Size: 0x4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float NormalsThreshold;//[Offset: 0x18, Size: 0x4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1d, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 0x1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 0x4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c, Size: 0xc]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]
	int LODChainLastIndex;//[Offset: 0x3c, Size: 0x4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44, Size: 0x68]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac, Size: 0x94]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	AnimSequence* BakePose;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte MaterialLODType;//[Offset: 0x1, Size: 0x1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	byte TextureWidth;//[Offset: 0x3, Size: 0x1]
	byte TextureHeight;//[Offset: 0x4, Size: 0x1]
	byte SamplingQuality;//[Offset: 0x5, Size: 0x1]
	int GutterSpace;//[Offset: 0x8, Size: 0x4]
	byte TextureStrech;//[Offset: 0xc, Size: 0x1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 0xc]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24, Size: 0x44]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 0x1]
	byte Caster;//[Offset: 0x1, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	byte ColorChannels;//[Offset: 0x3, Size: 0x1]
	int BitsPerChannel;//[Offset: 0x4, Size: 0x4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8]
	byte TextureSizingType;//[Offset: 0x8, Size: 0x1]
	float GutterSpace;//[Offset: 0xc, Size: 0x4]
	enum SamplingQuality;//[Offset: 0x10, Size: 0x1]
	enum UVStrech;//[Offset: 0x11, Size: 0x1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float MetallicConstant;//[Offset: 0x18, Size: 0x4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float RoughnessConstant;//[Offset: 0x20, Size: 0x4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float SpecularConstant;//[Offset: 0x28, Size: 0x4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float OpacityConstant;//[Offset: 0x30, Size: 0x4]
	float AOConstant;//[Offset: 0x34, Size: 0x4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 0x4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 0x4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 0x8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 0x8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 0x8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 0x8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 0x8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 0x8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 0x8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 0x8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 0x8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 0x1]
	byte BlendMode;//[Offset: 0x91, Size: 0x1]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80, Size: 0xc]
	byte AdditiveAnimType;//[Offset: 0xf0, Size: 0x1]
	byte RefPoseType;//[Offset: 0xf1, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0xf4, Size: 0x4]
	int RefFrameIndex;//[Offset: 0xf8, Size: 0x4]
	int EncodingPkgVersion;//[Offset: 0xfc, Size: 0x4]
	FName RetargetSource;//[Offset: 0x100, Size: 0x8]
	enum Interpolation;//[Offset: 0x108, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x10a, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c, Size: 0xc]
	float SequenceLength;//[Offset: 0x68, Size: 0x4]
	float RateScale;//[Offset: 0x6c, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x70, Size: 0xc]
	float GetPlayLength();// 0x131fe70

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20, Size: 0x4]
	AnimMetaData*[] MetaData;//[Offset: 0x44, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 0x4]
	FName NotifyName;//[Offset: 0x38, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 0x4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 0x4]
	float Duration;//[Offset: 0x48, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 0x24]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	byte MontageTickType;//[Offset: 0x71, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x78, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int TrackIndex;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 0x4]
	int SlotIndex;//[Offset: 0x8, Size: 0x4]
	int SegmentIndex;//[Offset: 0xc, Size: 0x4]
	byte LinkMethod;//[Offset: 0x10, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 0x4]
	float SegmentLength;//[Offset: 0x18, Size: 0x4]
	float LinkValue;//[Offset: 0x1c, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c, Size: 0x2c]
	float BlendInTime;//[Offset: 0xa8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 0x2c]
	float BlendOutTime;//[Offset: 0xd8, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0xdc, Size: 0x4]
	FName SyncGroup;//[Offset: 0xe0, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0xe8, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0xec, Size: 0x18]
	CompositeSection[] CompositeSections;//[Offset: 0x104, Size: 0xc]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110, Size: 0xc]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c, Size: 0xc]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x12a, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c, Size: 0xc]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138, Size: 0xc]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144, Size: 0x20]
	FName TimeStretchCurveName;//[Offset: 0x168, Size: 0x8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 0x4]
	float blendTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 0x54]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	float GetFloatValue(float InTime);// 0x2ce4e6c

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x2ce48a8
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x2ce47c8

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x41, Size: 0x1]
	float DefaultValue;//[Offset: 0x44, Size: 0x4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 0x3c]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28, Size: 0x8]
	float StartTime;//[Offset: 0x30, Size: 0x4]
	FName NextSectionName;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x4]
	float StartPos;//[Offset: 0x4, Size: 0x4]
	float AnimStartTime;//[Offset: 0x8, Size: 0x4]
	float AnimEndTime;//[Offset: 0xc, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x10, Size: 0x4]
	int LoopingCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28, Size: 0x8]
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0xc]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation);// 0x1c01fa0
	FString GetNotifyName();// 0x2cba744

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x1c01fa0
	bool Received_NotifyEnd(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation);// 0x1c01fa0
	bool Received_NotifyBegin(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x1c01fa0
	FString GetNotifyName();// 0x2cba744

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 0x54]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0x10]
	int CurveTypeFlags;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int ScreenSize;//[Offset: 0x4, Size: 0x4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 0x4]
	int MergeDistance;//[Offset: 0x10, Size: 0x4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float ClippingLevel;//[Offset: 0x18, Size: 0x4]
	int AxisIndex;//[Offset: 0x1c, Size: 0x4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24, Size: 0x68]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 0x1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4, Size: 0x148]
	MeshProxySettings ProxySettings;//[Offset: 0x14c, Size: 0xc4]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 0x94]
	int TextureWidth;//[Offset: 0x98, Size: 0x4]
	int TextureHeight;//[Offset: 0x9c, Size: 0x4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 0x1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	float MergeDistance;//[Offset: 0xa8, Size: 0x4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 0x4]
	int LightMapResolution;//[Offset: 0xb0, Size: 0x4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 0x1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 0x1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 0x4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 0x1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c, Size: 0xc]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28, Size: 0xc]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34, Size: 0xc]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc, Size: 0x4]
	BodySetup*[] BodySetup;//[Offset: 0xc0, Size: 0xc]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x258, Size: 0xc]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 0x1a0]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 0xc]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 0x8]
	Vector Pos1;//[Offset: 0x28, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x34, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x40, Size: 0xc]
	Vector Pos2;//[Offset: 0x4c, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x58, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x64, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c, Size: 0x3c]
	Blueprint* SourceAsset;//[Offset: 0x58, Size: 0x28]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 0x8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 0x4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 0x4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 0x4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 0xc]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 0xc]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 0x4]
	byte BlueprintType;//[Offset: 0x68, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 0x4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 0x4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 0x4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 0xc]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 0xc]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 0x4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 0x4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 0x4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 0x4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 0x38]
	FName VariableName;//[Offset: 0x60, Size: 0x8]
	FName AttachToName;//[Offset: 0x68, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 0xc]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 0xc]
	Guid VariableGuid;//[Offset: 0x9c, Size: 0x10]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 0x8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 0x8]
	bool bIsLazyLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 0x4]
	byte LengthMode;//[Offset: 0x20, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 0x1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 0xc]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 0xc]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 0xc]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 0xc]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 0xc]
	Guid TimelineGuid;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 0x54]
	Vector GetVectorValue(float InTime);// 0x2ce60dc

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 0x54]
	LinearColor GetLinearColorValue(float InTime);// 0x2ce5254

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 0xc]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 0x4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 0x38]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x4]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 0x8]
	FString ApexFileName;//[Offset: 0x8, Size: 0xc]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 0x4]
	float HorizontalResistance;//[Offset: 0x4, Size: 0x4]
	float BendResistance;//[Offset: 0x8, Size: 0x4]
	float ShearResistance;//[Offset: 0xc, Size: 0x4]
	float Friction;//[Offset: 0x10, Size: 0x4]
	float Damping;//[Offset: 0x14, Size: 0x4]
	float TetherStiffness;//[Offset: 0x18, Size: 0x4]
	float TetherLimit;//[Offset: 0x1c, Size: 0x4]
	float Drag;//[Offset: 0x20, Size: 0x4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 0x4]
	float GravityScale;//[Offset: 0x28, Size: 0x4]
	float MassScale;//[Offset: 0x2c, Size: 0x4]
	float InertiaBlend;//[Offset: 0x30, Size: 0x4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 0x4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 0x4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 0x4]
	float SolverFrequency;//[Offset: 0x40, Size: 0x4]
	float FiberCompression;//[Offset: 0x44, Size: 0x4]
	float FiberExpansion;//[Offset: 0x48, Size: 0x4]
	float FiberResistance;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c, Size: 0x4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20, Size: 0x4]
	byte RootMotionMode;//[Offset: 0x24, Size: 0x1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c, Size: 0xc]
	delegate OnMontageStarted;//[Offset: 0x38, Size: 0xc]
	delegate OnMontageEnded;//[Offset: 0x44, Size: 0xc]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50, Size: 0xc]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118, Size: 0xc]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x2cb346c
	Pawn* TryGetPawnOwner();// 0x1550134
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x2cb467c
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x2cb4564
	void SetRootMotionMode(byte Value);// 0x2cb44e4
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x2cb4420
	void SavePoseSnapshot(FName SnapshotName);// 0x2cb43a0
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x2cb4128
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x2cb3f40
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x2cb3e84
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x2cb3dc8
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x2cb3d0c
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x2cb3c04
	void Montage_Resume(const AnimMontage* Montage);// 0x2cb3b8c
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x14e2330
	void Montage_Pause(const AnimMontage* Montage);// 0x2cb3b14
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x2cb3a58
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x2cb399c
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x2cb391c
	bool Montage_IsActive(const AnimMontage* Montage);// 0x2cb389c
	float Montage_GetPosition(const AnimMontage* Montage);// 0x2cb381c
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x2cb379c
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x2cb36c4
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x2cb3644
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x2cb35bc
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x2cb353c
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x2cb346c
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x2cb32fc
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x2cb3238
	bool IsAnyMontagePlaying();// 0x2cb3210
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x2cb3144
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x2cb3014
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x2cb2f7c
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x2cb2eb8
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x2cb2df4
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x2cb2d30
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x2cb2c6c
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x2cb2ba8
	SkeletalMeshComponent* GetOwningComponent();// 0x2cb2b80
	Actor* GetOwningActor();// 0x2cb2b58
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x2cb2a94
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x2cb29d0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x2cb290c
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x2cb2848
	float GetInstanceMachineWeight(int MachineIndex);// 0x2cb27c8
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x2cb2748
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x2cb26c8
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x2cb2648
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x2cb25c8
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x2cb2548
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x2cb24c8
	float GetCurveValue(FName CurveName);// 0x2cb2448
	FName GetCurrentStateName(int MachineIndex);// 0x2cb23c0
	AnimMontage* GetCurrentActiveMontage();// 0x2cb2398
	void ClearMorphTargets();// 0x2cb2384
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x2cb22a4
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x1c01fa0
	void BlueprintPostEvaluateAnimation();// 0x1c01fa0
	void BlueprintInitializeAnimation();// 0x1c01fa0
	void BlueprintBeginPlay();// 0x1c01fa0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0xc]
	FName[] BoneNames;//[Offset: 0xc, Size: 0xc]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 0x8]
	FName SnapshotName;//[Offset: 0x20, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 0xc]
	Guid AssetGuid;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	float SavedPosition;//[Offset: 0x8, Size: 0x4]
	float SavedPlayRate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: LODToSkipFrame
	int SkipFrame;//[Offset: 0x0, Size: 0x4]
	int SkipAnimCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x12c, Size: 0x4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	float GravityScale;//[Offset: 0x134, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x138, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x13c, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x140, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x144, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x148, Size: 0x4]
	byte MovementMode;//[Offset: 0x14c, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x14d, Size: 0x1]
	float GroundFriction;//[Offset: 0x170, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x174, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x178, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x17c, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x180, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x184, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x188, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x18c, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x190, Size: 0x4]
	float BrakingFriction;//[Offset: 0x194, Size: 0x4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 0x1]
	float BrakingDecelerationWalking;//[Offset: 0x19c, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1a0, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1a4, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1a8, Size: 0x4]
	float AirControl;//[Offset: 0x1ac, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1b0, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1b4, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1b8, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1bc, Size: 0x4]
	float Buoyancy;//[Offset: 0x1c0, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1c4, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1c8, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1cc, Size: 0xc]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1dc, Size: 0x4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1e0, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x1e4, Size: 0x4]
	float Mass;//[Offset: 0x1e8, Size: 0x4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	float StandingDownwardForceScale;//[Offset: 0x1f4, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x1f8, Size: 0x4]
	float PushForceFactor;//[Offset: 0x1fc, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x200, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x204, Size: 0x4]
	float MinTouchForce;//[Offset: 0x208, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x20c, Size: 0x4]
	float RepulsionForce;//[Offset: 0x210, Size: 0x4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	float CrouchedSpeedMultiplier;//[Offset: 0x218, Size: 0x4]
	float UpperImpactNormalScale;//[Offset: 0x21c, Size: 0x4]
	Vector Acceleration;//[Offset: 0x220, Size: 0xc]
	Vector LastUpdateLocation;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateVelocity;//[Offset: 0x250, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x25c, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x260, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x26c, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x278, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x284, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x288, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x28c, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x290, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x294, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x298, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x29c, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2a0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2a4, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2a8, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2ac, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2b0, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2b4, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2b8, Size: 0x4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x2bd, Size: 0x1]
	float LedgeCheckThreshold;//[Offset: 0x2c0, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2c4, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2c8, Size: 0x98]
	byte DefaultLandMovementMode;//[Offset: 0x360, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x361, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x362, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x363, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x363, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x363, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x363, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x363, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x363, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x363, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x363, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x364, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x364, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x364, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x364, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x364, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x364, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x364, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x365, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x365, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x365, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x365, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x365, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x365, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x365, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x366, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x366, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x366, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x378, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x37c, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x388, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x38c, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x390, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x394, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x398, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x39c, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x448, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x44c, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x450, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x454, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x458, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x45c, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x460, Size: 0x3c]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4a4, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4a8, Size: 0x90]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5d0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x610, Size: 0xc]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61d, Size: 0x1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x2cdcf80
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x2cdcf08
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x2cdce44
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x2cdcdc0
	void SetGroupsToIgnore(int GroupFlags);// 0x2cdcd48
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x2cdccc4
	void SetGroupsToAvoid(int GroupFlags);// 0x2cdcc4c
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x2cdcbc8
	void SetAvoidanceGroup(int GroupFlags);// 0x2cdcb50
	void SetAvoidanceEnabled(bool bEnable);// 0x2cdcad0
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x2cdc97c
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x2cdc444
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x2cdbf0c
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x2cdbb80
	float K2_GetWalkableFloorZ();// 0x2cdbb58
	float K2_GetWalkableFloorAngle();// 0x2cdbb30
	float K2_GetModifiedMaxAcceleration();// 0x12de3b8
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x2cdba48
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x2cdb888
	bool IsWalking();// 0x2cdb858
	bool IsWalkable(out const HitResult Hit);// 0x143af18
	float GetValidPerchRadius();// 0x2cdb830
	float GetPerchRadiusThreshold();// 0x2cdb808
	PrimitiveComponent* GetMovementBase();// 0x2cdb7e0
	float GetMinAnalogSpeed();// 0x2cdb7b0
	float GetMaxJumpHeightWithJumpTime();// 0x2cdb780
	float GetMaxJumpHeight();// 0x2cdb750
	float GetMaxBrakingDeceleration();// 0x2cdb720
	float GetMaxAcceleration();// 0x14ebe08
	Vector GetImpartedMovementBaseVelocity();// 0x2cdb6d0
	Vector GetCurrentAcceleration();// 0x2cdb688
	Character* GetCharacterOwner();// 0x14dc9fc
	float GetAnalogInputModifier();// 0x2cdb660
	void DisableMovement();// 0x2cdb644
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x2cdb404
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x2cdaffc
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x2cdacd8
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x2cdaa30
	void ClientAckGoodMove(float TimeStamp);// 0x2cda9b0
	void ClearAccumulatedForces();// 0x14cf860
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2cda7ac
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x2cda650
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x2cda584
	void AddForce(Vector force);// 0x2cda50c

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x120, Size: 0x4]
	Vector K2_GetInputVector();// 0x2da94b4
	bool IsMoveInputIgnored();// 0x2da94fc
	Vector GetPendingInputVector();// 0x2da94b4
	Pawn* GetPawnOwner();// 0x2da948c
	Vector GetLastInputVector();// 0x2da9444
	Vector ConsumeInputVector();// 0x2da93f4
	void AddInputVector(Vector WorldVector, bool bForce);// 0x2da9328

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf4, Size: 0x18]
	float FixedPathBrakingDistance;//[Offset: 0x10c, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x114, Size: 0x4]
	void StopMovementKeepPathing();// 0x2d976b8
	void StopActiveMovement();// 0x14255b4
	bool IsSwimming();// 0x2d97688
	bool IsMovingOnGround();// 0x2cdb858
	bool IsFlying();// 0x2d97658
	bool IsFalling();// 0x2d97628
	bool IsCrouching();// 0x1849a18

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xbc, Size: 0x4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 0x4]
	Vector Velocity;//[Offset: 0xc8, Size: 0xc]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xd5, Size: 0x1]
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1]
	void StopMovementImmediately();// 0x2d8efb4
	void SnapUpdatedComponentToPlane();// 0x2d8ef98
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x2d8ef18
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x2d8eea0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x2d8ee28
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x2d8ed60
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x2d8ecd8
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x2d8ec58
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x183c13c
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x2d8ea94
	float K2_GetModifiedMaxSpeed();// 0x134683c
	float K2_GetMaxSpeedModifier();// 0x2d8ea64
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x12fbcec
	Vector GetPlaneConstraintOrigin();// 0x2d8ea30
	Vector GetPlaneConstraintNormal();// 0x2d8e9fc
	enum GetPlaneConstraintAxisSetting();// 0x2d8e9e0
	PhysicsVolume* GetPhysicsVolume();// 0x13b2494
	float GetMaxSpeed();// 0x2d8e9b0
	float GetGravityZ();// 0x2d8e980
	Vector ConstrainNormalToPlane(Vector Normal);// 0x2d8e8e4
	Vector ConstrainLocationToPlane(Vector Location);// 0x2d8e848
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x2d8e7ac

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	class NavigationData* PreferredNavData;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2c8, Size: 0x4]
	NavDataConfig NavDataConfig;//[Offset: 0x2d0, Size: 0x50]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x321, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x324, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x328, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3b4, Size: 0xc]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18, Size: 0x8]
	Color Color;//[Offset: 0x20, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x24, Size: 0xc]
	class NavigationData* NavigationDataClass;//[Offset: 0x30, Size: 0x4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38, Size: 0x18]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0xc]
	int AreaID;//[Offset: 0xc, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0x10, Size: 0x88]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 0xc]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x510, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x514, Size: 0x4]
	float CapsuleHeight;//[Offset: 0x518, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x2cd7780
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x2cd76b8
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x2cd75f0
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x2cd7504
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x2cd7420
	float GetUnscaledCapsuleRadius();// 0x2cd7404
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x2cd73d4
	float GetUnscaledCapsuleHalfHeight();// 0x2cd73b8
	float GetShapeScale();// 0x2cd7370
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x2cd7240
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x2cd7118
	float GetScaledCapsuleRadius();// 0x2cd70c0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x2cd705c
	float GetScaledCapsuleHalfHeight();// 0x2cd7008

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x500, Size: 0x4]
	BodySetup* ShapeBodySetup;//[Offset: 0x504, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x508, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x508, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x508, Size: 0x1]
	class NavArea* AreaClass;//[Offset: 0x50c, Size: 0x4]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x20, Size: 0x4]
	Color DrawColor;//[Offset: 0x24, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x4]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0xe0]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 0x4]
	float Position;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 0xc]
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 0x4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 0x90]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 0xc]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2c8, Size: 0x4]
	byte Ping;//[Offset: 0x2cc, Size: 0x1]
	FString PlayerName;//[Offset: 0x2d0, Size: 0xc]
	int PlayerID;//[Offset: 0x2e8, Size: 0x4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ec, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ec, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ec, Size: 0x1]
	int StartTime;//[Offset: 0x2f0, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2f4, Size: 0x4]
	FString SavedNetworkAddress;//[Offset: 0x2fc, Size: 0xc]
	UniqueNetIdRepl UniqueId;//[Offset: 0x308, Size: 0xc]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1c01fa0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1c01fa0
	void OnRep_UniqueId();// 0x133cf7c
	void OnRep_Score();// 0x133c1bc
	void OnRep_PlayerName();// 0x133c1a0
	void OnRep_bIsInactive();// 0x12ee368

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	float DamageImpulse;//[Offset: 0x20, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 0x4]
	float DamageFalloff;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x318, Size: 0x4]
	Pawn* AcknowledgedPawn;//[Offset: 0x320, Size: 0x4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x324, Size: 0x4]
	HUD* MyHUD;//[Offset: 0x32c, Size: 0x4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x330, Size: 0x4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x334, Size: 0x4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x33c, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x354, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x358, Size: 0xc]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x364, Size: 0xc]
	float LastSpectatorStateSynchTime;//[Offset: 0x374, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x378, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x384, Size: 0xc]
	int ClientCap;//[Offset: 0x390, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x394, Size: 0x4]
	class CheatManager* CheatClass;//[Offset: 0x398, Size: 0x4]
	PlayerInput* PlayerInput;//[Offset: 0x39c, Size: 0x4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3a0, Size: 0xc]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40c, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x40d, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x43c, Size: 0x4]
	NetConnection* NetConnection;//[Offset: 0x440, Size: 0x4]
	float InputYawScale;//[Offset: 0x450, Size: 0x4]
	float InputPitchScale;//[Offset: 0x454, Size: 0x4]
	float InputRollScale;//[Offset: 0x458, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45c, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x45c, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x45c, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x460, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x464, Size: 0xc]
	byte DefaultMouseCursor;//[Offset: 0x470, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x471, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x472, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x473, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x474, Size: 0x4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 0x1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4f8, Size: 0x4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fc, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x508, Size: 0x4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x54c, Size: 0x4]
	Vector SpawnLocation;//[Offset: 0x550, Size: 0xc]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	uint16 SeamlessTravelCount;//[Offset: 0x562, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x564, Size: 0x2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 0x1]
	bool WasInputKeyJustReleased(Key Key);// 0x2dbc1dc
	bool WasInputKeyJustPressed(Key Key);// 0x2dbbee8
	void ToggleSpeaking(bool bInSpeaking);// 0x2dbbe60
	void SwitchLevel(FString URL);// 0x2dbbd9c
	void StopHapticEffect(enum Hand);// 0x2dbbd24
	void StartFire(byte FireModeNum);// 0x2dbbca4
	void SetVirtualJoystickVisibility(bool bVisible);// 0x2dbbc1c
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x2dbba7c
	void SetName(FString S);// 0x2dbb9b8
	void SetMouseLocation(const int X, const int Y);// 0x2dbb8fc
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x2dbb840
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x2dbb740
	void SetControllerLightColor(Color Color);// 0x2dbb6d0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x2dbb504
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x2dbb3f8
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x2dbb2e8
	void ServerViewPrevPlayer();// 0x2dbb28c
	void ServerViewNextPlayer();// 0x2dbb230
	void ServerVerifyViewTarget();// 0x2dbb1d4
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x2dbb0c8
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x2dbafc4
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x2dbaaa8
	void ServerToggleAILogging();// 0x2dbaa4c
	void ServerShortTimeout();// 0x2dba9f0
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x2dba928
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x2dba810
	void ServerRestartPlayer();// 0x2dba7b4
	void ServerPause();// 0x2dba758
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x2dba6b4
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x2dba198
	void ServerCheckClientPossessionReliable();// 0x2dba13c
	void ServerCheckClientPossession();// 0x2dba0e0
	void ServerChangeName(FString S);// 0x2db9fec
	void ServerCamera(FName NewMode);// 0x2db9f38
	void ServerAcknowledgePossession(Pawn* P);// 0x2db9e84
	void SendToConsole(FString Command);// 0x2db9dc0
	void RestartLevel();// 0x14e4650
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x2db9ca0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x2db9b50
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x2db9870
	void Pause();// 0x2db984c
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x2db97c4
	void LocalTravel(FString URL);// 0x2db9700
	bool IsInputKeyDown(Key Key);// 0x2db940c
	void GetViewportSize(out int SizeX, out int SizeY);// 0x2db932c
	SpectatorPawn* GetSpectatorPawn();// 0x1489b40
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x2db9244
	Vector GetInputVectorKeyState(Key Key);// 0x2db8f40
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2db8dc0
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x2db8ce0
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x2db8b5c
	float GetInputKeyTimeDown(Key Key);// 0x2db8864
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x2db8740
	float GetInputAnalogKeyState(Key Key);// 0x2db8448
	HUD* GetHUD();// 0x2db8420
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x2db824c
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2db80d0
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2db7f54
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x2db7dc4
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2db7c8c
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2db7b54
	Vector GetFocalLocation();// 0x14ae708
	void FOV(float NewFOV);// 0x2db7ad4
	void EnableCheats();// 0x18550a8
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x2db7968
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x2db7888
	void ConsoleKey(Key Key);// 0x2db7594
	void ClientWasKicked(const FText KickReason);// 0x2db7400
	void ClientVoiceHandshakeComplete();// 0x2db73e4
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x2db722c
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x2db6ec0
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x2db6d10
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x2db6b70
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x2db69d4
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x2db6910
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x2db6844
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x2db67c4
	void ClientStartOnlineSession();// 0x14912a4
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x14415a4
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x2db66bc
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x2db6634
	void ClientSetHUD(class HUD NewHUDClass);// 0x2db65b4
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x2db64ac
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x2db6330
	void ClientSetCameraMode(FName NewCamMode);// 0x2db62b0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x2db610c
	void ClientSetBlockOnAsyncLoading();// 0x2db60f0
	void ClientReturnToMainMenu(FString ReturnReason);// 0x2db602c
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x184ae6c
	void ClientRestart(Pawn* NewPawn);// 0x2db5fac
	void ClientReset();// 0x2db5f90
	void ClientRepObjRef(Object* Object);// 0x2db5f10
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x2db5d78
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x2db5c1c
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x2db5af8
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x2db59a4
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x2db589c
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x2db5730
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x2db55dc
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x2db530c
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x2db4fa0
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x2db4e4c
	void ClientIgnoreMoveInput(bool bIgnore);// 0x2db4dc4
	void ClientIgnoreLookInput(bool bIgnore);// 0x2db4d3c
	void ClientGotoState(FName NewState);// 0x2db4cbc
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x2db4bf0
	void ClientForceGarbageCollection();// 0x2db4bd4
	void ClientFlushLevelStreaming();// 0x2db4bc0
	void ClientEndOnlineSession();// 0x1491190
	void ClientEnableNetworkVoice(bool bEnable);// 0x2db4b38
	void ClientCommitMapChange();// 0x2db4b1c
	void ClientClearCameraLensEffects();// 0x2db4b00
	void ClientCapBandwidth(int Cap);// 0x2db4a80
	void ClientCancelPendingMapChange();// 0x18538c8
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x2db4974
	void ClearAudioListenerOverride();// 0x2db4960
	void Camera(FName NewMode);// 0x2db48e0
	void AddYawInput(float Val);// 0x2db4860
	void AddRollInput(float Val);// 0x2db47e0
	void AddPitchInput(float Val);// 0x2db4760
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x14a8518

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 0x4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2c8, Size: 0x4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc, Size: 0x1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cc, Size: 0x1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cc, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x2d0, Size: 0xc]
	FName[] DebugDisplay;//[Offset: 0x2e4, Size: 0xc]
	FName[] ToggledDebugCategories;//[Offset: 0x2f0, Size: 0xc]
	Canvas* Canvas;//[Offset: 0x2fc, Size: 0x4]
	Canvas* DebugCanvas;//[Offset: 0x300, Size: 0x4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x304, Size: 0xc]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x310, Size: 0x4]
	Actor* ShowDebugTargetActor;//[Offset: 0x314, Size: 0x4]
	Actor* UpdateShowDebugTargetActor();// 0x1c01fa0
	void ShowHUD();// 0x133c1bc
	void ShowDebugToggleSubCategory(FName Category);// 0x2d12be0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x2d12b68
	void ShowDebugForMoifiedTargetActor();// 0x2d12b54
	void ShowDebug(FName DebugType);// 0x2d12ad4
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x2d12a10
	void RemoveAllDebugStrings();// 0x2d129fc
	void ReceiveHitBoxRelease(const FName BoxName);// 0x1c01fa0
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x1c01fa0
	void ReceiveHitBoxClick(const FName BoxName);// 0x1c01fa0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x1c01fa0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x1c01fa0
	Vector Project(Vector Location);// 0x2d12968
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x2d1276c
	PlayerController* GetOwningPlayerController();// 0x253e73c
	Pawn* GetOwningPawn();// 0x2d12744
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x2d124ec
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x2d12354
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2d11edc
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x2d11c64
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x2d11ac8
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x2d11744
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x2d1151c
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2d11144
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x2d10f60
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x2d10dfc
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x2d10c60
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x2d10870

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 0x4]
	float OrgY;//[Offset: 0x20, Size: 0x4]
	float ClipX;//[Offset: 0x24, Size: 0x4]
	float ClipY;//[Offset: 0x28, Size: 0x4]
	Color DrawColor;//[Offset: 0x2c, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	int SizeX;//[Offset: 0x34, Size: 0x4]
	int SizeY;//[Offset: 0x38, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x40, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 0x4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 0x4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 0x4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x2cd60dc
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x2cd5fcc
	Vector K2_Project(Vector WorldLocation);// 0x2cd5f38
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x2cd5d94
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x2cd5ac0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x2cd56b8
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x2cd5524
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x2cd5380
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x2cd5168
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x2cd5010
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x2cd4f10
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x2cd49f0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x2cd48d4

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 0xc]
	FString DebugText;//[Offset: 0x1c, Size: 0xc]
	float TimeRemaining;//[Offset: 0x28, Size: 0x4]
	float Duration;//[Offset: 0x2c, Size: 0x4]
	Color TextColor;//[Offset: 0x30, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 0xc]
	Font* Font;//[Offset: 0x44, Size: 0x4]
	float FontScale;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2c8, Size: 0x4]
	SceneComponent* TransformComponent;//[Offset: 0x2cc, Size: 0x4]
	float DefaultFOV;//[Offset: 0x2d8, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x2e0, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x2e8, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x330, Size: 0x530]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x860, Size: 0x530]
	TViewTarget ViewTarget;//[Offset: 0xd90, Size: 0x540]
	TViewTarget PendingViewTarget;//[Offset: 0x12d0, Size: 0x540]
	CameraModifier*[] ModifierList;//[Offset: 0x1824, Size: 0xc]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x1830, Size: 0xc]
	float FreeCamDistance;//[Offset: 0x183c, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x1840, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x184c, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1868, Size: 0xc]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1874, Size: 0x4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1878, Size: 0x4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1898, Size: 0xc]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x18b0, Size: 0xc]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x18bc, Size: 0xc]
	CameraActor* AnimCameraActor;//[Offset: 0x18c8, Size: 0x4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18cc, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18cc, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18cc, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18cd, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x18d0, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x18d4, Size: 0x4]
	float ViewYawMin;//[Offset: 0x18d8, Size: 0x4]
	float ViewYawMax;//[Offset: 0x18dc, Size: 0x4]
	float ViewRollMin;//[Offset: 0x18e0, Size: 0x4]
	float ViewRollMax;//[Offset: 0x18e4, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x2db2098
	void StopCameraFade();// 0x2ce2874
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x2db1fcc
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x2db1f00
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x2db1e34
	void StopAllCameraShakes(bool bImmediately);// 0x2db1dac
	void StopAllCameraAnims(bool bImmediate);// 0x2db1d24
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x2db1b38
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x2db1a24
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x2d01d98
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x2db19a4
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x2db1848
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x2db1524
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x2db13bc
	void OnPhotographySessionStart();// 0x133cf7c
	void OnPhotographySessionEnd();// 0x12ee368
	void OnPhotographyMultiPartCaptureStart();// 0x133c1a0
	void OnPhotographyMultiPartCaptureEnd();// 0x133c1bc
	PlayerController* GetOwningPlayerController();// 0x2db138c
	float GetFOVAngle();// 0x2cdb780
	Rotator GetCameraRotation();// 0x2db1344
	Vector GetCameraLocation();// 0x2db12fc
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x2db1274
	void ClearCameraLensEffects();// 0x2da8800
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x1c01fa0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x2db11ec
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x14cf358

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x520]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 0xc]
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]
	float FOV;//[Offset: 0x24, Size: 0x4]
	float OrthoWidth;//[Offset: 0x28, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 0x4]
	float AspectRatio;//[Offset: 0x34, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x39, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x4d0]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x510, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	float WhiteTemp;//[Offset: 0x14, Size: 0x4]
	float WhiteTint;//[Offset: 0x18, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 0x10]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 0x4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float FilmSlope;//[Offset: 0x174, Size: 0x4]
	float FilmToe;//[Offset: 0x178, Size: 0x4]
	float FilmShoulder;//[Offset: 0x17c, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x180, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 0x10]
	float FilmContrast;//[Offset: 0x1e4, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 0x4]
	byte BloomMethod;//[Offset: 0x208, Size: 0x1]
	float BloomIntensity;//[Offset: 0x20c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x210, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x214, Size: 0x4]
	float Bloom1Size;//[Offset: 0x218, Size: 0x4]
	float Bloom2Size;//[Offset: 0x21c, Size: 0x4]
	float Bloom3Size;//[Offset: 0x220, Size: 0x4]
	float Bloom4Size;//[Offset: 0x224, Size: 0x4]
	float Bloom5Size;//[Offset: 0x228, Size: 0x4]
	float Bloom6Size;//[Offset: 0x22c, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 0x10]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 0x4]
	float BloomConvolutionSize;//[Offset: 0x294, Size: 0x4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 0x8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0, Size: 0xc]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2bc, Size: 0x4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x2d4, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x2e4, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x2e8, Size: 0x4]
	byte AutoExposureMethod;//[Offset: 0x2ec, Size: 0x1]
	float AutoExposureLowPercent;//[Offset: 0x2f0, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x2f4, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x2f8, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x2fc, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x300, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x304, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x308, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x30c, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x310, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x314, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x318, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x328, Size: 0x4]
	int LensFlareCount;//[Offset: 0x32c, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x330, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x334, Size: 0x4]
	LinearColor LensFlareTints;//[Offset: 0x338, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x3b8, Size: 0x4]
	float GrainJitter;//[Offset: 0x3bc, Size: 0x4]
	float GrainIntensity;//[Offset: 0x3c0, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x3c4, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3c8, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x3cc, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3d4, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3d8, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x3dc, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x3e0, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x3e4, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x3e8, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x3ec, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x3f0, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x3f4, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x3f8, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x408, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x40c, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x410, Size: 0x4]
	byte DepthOfFieldMethod;//[Offset: 0x414, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x415, Size: 0x1]
	float DepthOfFieldFstop;//[Offset: 0x418, Size: 0x4]
	float DepthOfFieldSensorWidth;//[Offset: 0x41c, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x420, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x424, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x428, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x42c, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x430, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x434, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x438, Size: 0x4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x43c, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x440, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x444, Size: 0x4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x448, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x44c, Size: 0x4]
	float DepthOfFieldColorThreshold;//[Offset: 0x450, Size: 0x4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x454, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x458, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x45c, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x460, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x464, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x468, Size: 0x4]
	float LPVIntensity;//[Offset: 0x46c, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x470, Size: 0x4]
	float LPVSize;//[Offset: 0x474, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x478, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x47c, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x480, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x484, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x488, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x48c, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x490, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x494, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x498, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x49c, Size: 0x4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4a0, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4a4, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4a8, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x4ac, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4b0, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x4b4, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x4b8, Size: 0xc]
	Object*[] Blendables;//[Offset: 0x4c4, Size: 0xc]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x520]
	PlayerState* PlayerState;//[Offset: 0x530, Size: 0x4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	byte Priority;//[Offset: 0x1d, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 0x4]
	float AlphaInTime;//[Offset: 0x24, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x28, Size: 0x4]
	float alpha;//[Offset: 0x2c, Size: 0x4]
	bool IsDisabled();// 0x1391ee8
	Actor* GetViewTarget();// 0x154f800
	void EnableModifier();// 0x15c567c
	void DisableModifier(bool bImmediate);// 0x2cd2904
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x1c01fa0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x1c01fa0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x300, Size: 0x4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x304, Size: 0x4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x308, Size: 0x4]
	Transform RelativeTransform;//[Offset: 0x310, Size: 0x30]
	float BaseFOV;//[Offset: 0x340, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x348, Size: 0xc]
	float DistFromCamera;//[Offset: 0x354, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2c8, Size: 0x4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x2d0, Size: 0xc]
	delegate OnParticleBurst;//[Offset: 0x2dc, Size: 0xc]
	delegate OnParticleDeath;//[Offset: 0x2e8, Size: 0xc]
	delegate OnParticleCollide;//[Offset: 0x2f4, Size: 0xc]
	void ToggleActive();// 0x2cf05f8
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x2cf0538
	void SetTemplate(ParticleSystem* NewTemplate);// 0x12de114
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2cf047c
	void SetFloatParameter(FName ParameterName, float Param);// 0x2cf03b8
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x2cf02f0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x2cf0234
	void OnRep_bCurrentlyActive();// 0x133c1a0
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x12de094
	bool IsActive();// 0x2cf020c
	void Deactivate();// 0x2cf01f8
	void Activate();// 0x2cf01e4

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 0x4]
	float WarmupTime;//[Offset: 0x28, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 0xc]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 0x4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 0x4]
	float CullingScreenSize;//[Offset: 0x4c, Size: 0x4]
	byte LODMethod;//[Offset: 0x50, Size: 0x1]
	float[] LODDistances;//[Offset: 0x54, Size: 0xc]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x64, Size: 0xc]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	Box FixedRelativeBoundingBox;//[Offset: 0x74, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0x90, Size: 0x4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 0x1]
	float Delay;//[Offset: 0x98, Size: 0x4]
	float DelayLow;//[Offset: 0x9c, Size: 0x4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa4, Size: 0x4]
	enum InsignificantReaction;//[Offset: 0xa8, Size: 0x1]
	float InsignificanceDelay;//[Offset: 0xac, Size: 0x4]
	bool IsImportant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb1, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xb4, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xc0, Size: 0x4]
	byte OcclusionBoundsMethod;//[Offset: 0xc4, Size: 0x1]
	Box CustomOcclusionBounds;//[Offset: 0xc8, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe4, Size: 0xc]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf0, Size: 0xc]
	BoxSphereBounds GetBounds();// 0x2da4638
	Box GetBoundingBox();// 0x2da45e4
	bool ContainsEmitterType(class Object TypeData);// 0x2da4564

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 0xc]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 0x4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 0x4]
	byte DetailMode;//[Offset: 0x50, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x52, Size: 0x1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 0x4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 0xc]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 0x4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 0x4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 0x4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 0xc]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 0xc]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 0xc]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 0xc]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 0xc]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x24, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x30, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x3c, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44, Size: 0x4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	byte SortMode;//[Offset: 0x49, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a, Size: 0x1]
	float EmitterDuration;//[Offset: 0x4c, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0x50, Size: 0x4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	int EmitterLoops;//[Offset: 0x58, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c, Size: 0x28]
	byte ParticleBurstMethod;//[Offset: 0x84, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x88, Size: 0xc]
	float EmitterDelay;//[Offset: 0x94, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0x98, Size: 0x4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0x9d, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xa0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xa4, Size: 0x4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	float RandomImageTime;//[Offset: 0xac, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xb0, Size: 0x4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xb8, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xc4, Size: 0x4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	int MaxDrawCount;//[Offset: 0xcc, Size: 0x4]
	int MaxDrawCountInLowDevice;//[Offset: 0xd0, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd4, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0xd8, Size: 0x4]
	byte BoundingMode;//[Offset: 0xdc, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xdd, Size: 0x1]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	byte EmitterNormalsMode;//[Offset: 0xe4, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xe8, Size: 0xc]
	Vector NormalsCylinderDirection;//[Offset: 0xf4, Size: 0xc]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	FName[] NamedMaterialOverrides;//[Offset: 0x104, Size: 0xc]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	byte LODValidity;//[Offset: 0x1e, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 0x4]
	float MaxValue;//[Offset: 0x20, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x1c]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]
	byte EntryCount;//[Offset: 0x1, Size: 0x1]
	byte EntryStride;//[Offset: 0x2, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	float TimeBias;//[Offset: 0x8, Size: 0x4]
	float[] Values;//[Offset: 0xc, Size: 0xc]
	byte LockFlag;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20, Size: 0x28]
	RawDistributionFloat RateScale;//[Offset: 0x48, Size: 0x28]
	byte ParticleBurstMethod;//[Offset: 0x70, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x74, Size: 0xc]
	RawDistributionFloat BurstScale;//[Offset: 0x80, Size: 0x28]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24, Size: 0x40]
	OrbitOptions OffsetOptions;//[Offset: 0x64, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x68, Size: 0x40]
	OrbitOptions RotationOptions;//[Offset: 0xa8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac, Size: 0x40]
	OrbitOptions RotationRateOptions;//[Offset: 0xec, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 0x4]
	float MaxValue;//[Offset: 0x20, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x24, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x30, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f, Size: 0x1]
	FName EventName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x500, Size: 0x4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x504, Size: 0xc]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x510, Size: 0xc]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51c, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51d, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x51d, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51d, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51e, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51e, Size: 0x1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x51e, Size: 0x1]
	bool bIsImportant;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51e, Size: 0x1]
	byte LODMethod;//[Offset: 0x520, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x521, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x524, Size: 0xc]
	delegate OnParticleSpawn;//[Offset: 0x530, Size: 0xc]
	delegate OnParticleBurst;//[Offset: 0x53c, Size: 0xc]
	delegate OnParticleDeath;//[Offset: 0x548, Size: 0xc]
	delegate OnParticleCollide;//[Offset: 0x554, Size: 0xc]
	Vector OldPosition;//[Offset: 0x560, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x56c, Size: 0xc]
	float WarmupTime;//[Offset: 0x578, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x57c, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x584, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x58c, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x5ac, Size: 0xc]
	float CustomTimeDilation;//[Offset: 0x5c0, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x604, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x610, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x618, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x619, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x61a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x644, Size: 0xc]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x2da70ec
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2da6f94
	void SetTemplate(ParticleSystem* NewTemplate);// 0x2da6f1c
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2da6e60
	void SetFloatParameter(FName ParameterName, float Param);// 0x2da6d9c
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x2da6cc8
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x2da6c00
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x2da6af4
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x2da69ec
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x2da68e0
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x2da67d4
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x2da66cc
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x2da65c0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x2da64fc
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x2da63cc
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x2da6228
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x2da616c
	ParticleSystem* GetTemplate();// 0x2da6144
	int GetNumActiveParticles();// 0x2da611c
	MaterialInterface* GetNamedMaterial(FName InName);// 0x2da6094
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x2da5f78
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x2da5e58
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x2da5d3c
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x2da5c20
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x2da5b00
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x2da59e4
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x2da590c
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x2da576c
	void EndTrails();// 0x2da5758
	void DisableTickWhenNoParticle(bool StartCheck);// 0x2da56d8
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x2da560c
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2da54b4

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 0xc]
	int ActiveTab;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0xc]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 0xc]
	float ViewStartInput;//[Offset: 0x18, Size: 0x4]
	float ViewEndInput;//[Offset: 0x1c, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x20, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x4]
	Color CurveColor;//[Offset: 0x4, Size: 0x4]
	FString CurveName;//[Offset: 0x8, Size: 0xc]
	int bHideCurve;//[Offset: 0x14, Size: 0x4]
	int bColorCurve;//[Offset: 0x18, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 0x4]
	int bClamp;//[Offset: 0x20, Size: 0x4]
	float ClampLow;//[Offset: 0x24, Size: 0x4]
	float ClampHigh;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x30, Size: 0xc]
	float SplitScreenShakeScale;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	float OscillationDuration;//[Offset: 0x20, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x80, Size: 0x4]
	float AnimScale;//[Offset: 0x84, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 0x4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 0x4]
	float ShakeScale;//[Offset: 0x134, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 0x4]
	void ReceiveStopShake(bool bImmediately);// 0x1c01fa0
	void ReceivePlayShake(float Scale);// 0x1c01fa0
	bool ReceiveIsFinished();// 0x134fd24
	void BlueprintUpdateCameraShake(float DeltaTime, float alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x1c01fa0

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 0x4]
	float AnimLength;//[Offset: 0x20, Size: 0x4]
	Box BoundingBox;//[Offset: 0x24, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	float BaseFOV;//[Offset: 0x44, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 0x4d0]
	float BasePostProcessBlendWeight;//[Offset: 0x520, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 0xc]
	FName GroupName;//[Offset: 0x30, Size: 0x8]
	Color GroupColor;//[Offset: 0x38, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 0xc]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 0x4]
	byte ActiveCondition;//[Offset: 0x34, Size: 0x1]
	FString TrackTitle;//[Offset: 0x38, Size: 0xc]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 0x4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 0x4]
	float PlayRate;//[Offset: 0x3c, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 0x4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 0x4]
	byte PlaySpace;//[Offset: 0x58, Size: 0x1]
	void Stop(bool bImmediate);// 0x2cd13a0
	void SetScale(float NewDuration);// 0x15056e0
	void SetDuration(float NewDuration);// 0x2cd1328

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 0x4]
	Actor* GroupActor;//[Offset: 0x20, Size: 0x4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 0x14]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 0x14]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 0xc]
	FName LookAtGroupName;//[Offset: 0x80, Size: 0x8]
	float LinCurveTension;//[Offset: 0x88, Size: 0x4]
	float AngCurveTension;//[Offset: 0x8c, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1]
	byte RotMode;//[Offset: 0x91, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2c8, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x2cc, Size: 0x4]
	SceneComponent* SceneComponent;//[Offset: 0x2d0, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 0x1]
	float AspectRatio;//[Offset: 0x2e0, Size: 0x4]
	float FOVAngle;//[Offset: 0x2e4, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x2e8, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0, Size: 0x4d0]
	int GetAutoActivatePlayerIndex();// 0x2cd0d78

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x238, Size: 0x4]
	float OrthoWidth;//[Offset: 0x23c, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x240, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x244, Size: 0x4]
	float AspectRatio;//[Offset: 0x248, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x24d, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x250, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x4d0]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77c, Size: 0x1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x2cd1da8
	void SetProjectionMode(byte InProjectionMode);// 0x2cd1d34
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x2cd1cc0
	void SetOrthoWidth(float InOrthoWidth);// 0x2cd1c4c
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x2cd1bd8
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x2cd1b64
	void SetFieldOfView(float InFieldOfView);// 0x1340e70
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x2cd1adc
	void SetAspectRatio(float InAspectRatio);// 0x2cd1a68
	void SetActive(bool bNewActive, bool bReset);// 0x2cac1a8
	void RemoveBlendable(interface class InBlendableObject);// 0x2cd1978
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x13df5a0
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x2cd1900
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x2cd17d0

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 0x4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 0x4]
	void Walk();// 0x15c567c
	void ViewSelf();// 0x2ca88b0
	void ViewPlayer(FString S);// 0x2cdf2c4
	void ViewClass(class Actor DesiredClass);// 0x149844c
	void ViewActor(FName actorName);// 0x2cdf244
	void ToggleDebugCamera();// 0x2cdf228
	void ToggleAILogging();// 0x2cdf20c
	void TestCollisionDistance();// 0x2cdf1f0
	void Teleport();// 0x13e6184
	void Summon(FString ClassName);// 0x2cdf12c
	void StreamLevelOut(FName PackageName);// 0x2cdf0ac
	void StreamLevelIn(FName PackageName);// 0x2cdf02c
	void Slomo(float NewTimeDilation);// 0x2cdefac
	void SetWorldOrigin();// 0x2cdef98
	void SetNavDrawDistance(float DrawDistance);// 0x2cdef20
	void SetMouseSensitivityToDefault();// 0x2cdef0c
	void ServerToggleAILogging();// 0x2cdeeb0
	void ReceiveInitCheatManager();// 0x1c01fa0
	void ReceiveEndPlay();// 0x1c01fa0
	void RebuildNavigation();// 0x2cdee94
	void PlayersOnly();// 0x12fe1b8
	void OnlyLoadLevel(FName PackageName);// 0x1443adc
	void LogLoc();// 0x2cdee78
	void InvertMouse();// 0x2cdee64
	void God();// 0x1521b70
	void Ghost();// 0x138ffc4
	void FreezeFrame(float Delay);// 0x12ebee0
	void Fly();// 0x12fe19c
	void FlushLog();// 0x2cdee48
	void EnableDebugCamera();// 0x2cdee2c
	void DumpVoiceMutingState();// 0x2cdee10
	void DumpPartyState();// 0x14e2578
	void DumpOnlineSessionState();// 0x2cdedf4
	void DumpChatState();// 0x2cdedd8
	void DisableDebugCamera();// 0x2cdedbc
	void DestroyTarget();// 0x12fe664
	void DestroyPawns(class Pawn aClass);// 0x2cded3c
	void DestroyAllPawnsExceptTarget();// 0x2cded20
	void DestroyAll(class Actor aClass);// 0x2380ff0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x2cdec5c
	void DebugCapsuleSweepPawn();// 0x2cdec40
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x2cdebb8
	void DebugCapsuleSweepClear();// 0x2cdeb9c
	void DebugCapsuleSweepChannel(byte Channel);// 0x2cdeb1c
	void DebugCapsuleSweepCapture();// 0x2cdeb00
	void DebugCapsuleSweep();// 0x1343db4
	void DamageTarget(float DamageAmount);// 0x2cdea80
	void CheatScript(FString ScriptName);// 0x2cde928
	void ChangeSize(float F);// 0x1506e34
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x2cde72c
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x2cde54c
	void BugIt(FString ScreenShotDescription);// 0x2cde488

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56d, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x570, Size: 0x4]
	float SpeedScale;//[Offset: 0x584, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x588, Size: 0x4]
	float InitialAccel;//[Offset: 0x58c, Size: 0x4]
	float InitialDecel;//[Offset: 0x590, Size: 0x4]
	void ToggleDisplay();// 0x2ce7f70
	void ShowDebugSelectedInfo();// 0x2ce7f54
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x2ce7edc
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x1c01fa0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x1c01fa0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x1c01fa0
	Actor* GetSelectedActor();// 0x2ce7eb4

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x500, Size: 0x4]
	float FrustumAngle;//[Offset: 0x504, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x508, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x50c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x510, Size: 0x4]
	Texture* Texture;//[Offset: 0x514, Size: 0x4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 0x1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160, Size: 0xc]
	FName[] InvertedAxis;//[Offset: 0x190, Size: 0xc]
	void SetMouseSensitivity(const float Sensitivity);// 0x2dbfc68
	void SetBind(FName BindName, FString Command);// 0x2dbfb60
	void InvertAxisKey(const Key AxisKey);// 0x2dbf874
	void InvertAxis(const FName AxisName);// 0x2dbf7fc
	void ClearSmoothing();// 0x2dbf7e8

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x10]
	FString Command;//[Offset: 0x10, Size: 0xc]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 0xc]
	float Duration;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 0x58]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x54]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 0xc]
	NetDriver* Driver;//[Offset: 0x3c, Size: 0x4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 0x4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 0x4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 0xc]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 0xc]
	Actor* ViewTarget;//[Offset: 0x60, Size: 0x4]
	Actor* OwningActor;//[Offset: 0x64, Size: 0x4]
	int MaxPacket;//[Offset: 0x68, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xec, Size: 0xc]
	double LastReceiveTime;//[Offset: 0x148, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x29538, Size: 0xc]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x295b0, Size: 0x4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 0xc]
	FString ReplicationDriverClassName;//[Offset: 0x2c, Size: 0xc]
	int MaxDownloadSize;//[Offset: 0x38, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x40, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x44, Size: 0x4]
	int MaxClientRate;//[Offset: 0x48, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x4c, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x50, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x54, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x58, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x5c, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x60, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x64, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x6c, Size: 0x4]
	NetConnection*[] ClientConnections;//[Offset: 0x70, Size: 0xc]
	World* World;//[Offset: 0xc4, Size: 0x4]
	Package* WorldPackage;//[Offset: 0xc8, Size: 0x4]
	class Object* NetConnectionClass;//[Offset: 0xdc, Size: 0x4]
	class Object* ReplicationDriverClass;//[Offset: 0xe0, Size: 0x4]
	Property* RoleProperty;//[Offset: 0xe4, Size: 0x4]
	Property* RemoteRoleProperty;//[Offset: 0xe8, Size: 0x4]
	FName NetDriverName;//[Offset: 0xf0, Size: 0x8]
	float Time;//[Offset: 0x11c, Size: 0x4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x49c, Size: 0x3c]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x528, Size: 0x4]

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 0x4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 0x4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 0x4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 0x4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 0x4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 0x4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 0xc]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 0xc]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 0xc]
	FString StreamingLevelsPrefix;//[Offset: 0x60, Size: 0xc]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c, Size: 0x4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70, Size: 0x4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74, Size: 0x4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78, Size: 0x4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c, Size: 0x7c]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xfc, Size: 0x4]
	NavigationSystem* NavigationSystem;//[Offset: 0x11c, Size: 0x4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x120, Size: 0x4]
	GameStateBase* GameState;//[Offset: 0x124, Size: 0x4]
	AISystemBase* AISystem;//[Offset: 0x128, Size: 0x4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x12c, Size: 0x4]
	Level*[] Levels;//[Offset: 0x130, Size: 0xc]
	LevelCollection[] LevelCollections;//[Offset: 0x13c, Size: 0xc]
	Level* CurrentLevel;//[Offset: 0x14c, Size: 0x4]
	GameInstance* OwningGameInstance;//[Offset: 0x150, Size: 0x4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x154, Size: 0xc]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x160, Size: 0x4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x164, Size: 0x4]
	WorldComposition* WorldComposition;//[Offset: 0x70c, Size: 0x4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x752, Size: 0x1]

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 0x4]
	Model* Model;//[Offset: 0x8c, Size: 0x4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 0xc]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 0x4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 0x4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 0x4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 0x4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 0xc]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 0xc]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	Guid LevelBuildDataId;//[Offset: 0x154, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x164, Size: 0x4]
	IntVector LightBuildLevelOffset;//[Offset: 0x168, Size: 0xc]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x174, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x174, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x174, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x1c8, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1d0, Size: 0xc]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x1ec, Size: 0xc]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x50c, Size: 0x4]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x1c01fa0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x2d73b70
	bool RemoteEvent(FName EventName);// 0x2d73ae8
	void LevelReset();// 0x1c01fa0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2cc, Size: 0x4]
	BillboardComponent* GoodSprite;//[Offset: 0x2d0, Size: 0x4]
	BillboardComponent* BadSprite;//[Offset: 0x2d4, Size: 0x4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x500, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x504, Size: 0x1]
	float ScreenSize;//[Offset: 0x508, Size: 0x4]
	float U;//[Offset: 0x50c, Size: 0x4]
	float UL;//[Offset: 0x510, Size: 0x4]
	float V;//[Offset: 0x514, Size: 0x4]
	float VL;//[Offset: 0x518, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x2cc55b4
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x2cc541c
	void SetSprite(Texture2D* NewSprite);// 0x2cc539c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	Vector2D[] FOVCulling;//[Offset: 0x2d0, Size: 0xc]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 0x1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc, Size: 0x1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dc, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dc, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2dc, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dc, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2dc, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2dc, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dd, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dd, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dd, Size: 0x1]
	float KillZ;//[Offset: 0x2e0, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2e4, Size: 0x4]
	float WorldGravityZ;//[Offset: 0x2e8, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2ec, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2f0, Size: 0x4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2f4, Size: 0x4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2f8, Size: 0x4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2fc, Size: 0x4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]
	Vector DefaultColorScale;//[Offset: 0x304, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x310, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x314, Size: 0x4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]
	float MaxWorldSize;//[Offset: 0x31c, Size: 0x4]
	int RegionSizeNear;//[Offset: 0x320, Size: 0x4]
	int RegionSizeFar;//[Offset: 0x324, Size: 0x4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	int Graduation;//[Offset: 0x32c, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x330, Size: 0x4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 0x1]
	int VisibilityCellSize;//[Offset: 0x338, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x33c, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33d, Size: 0x1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x340, Size: 0x50]
	float WorldToMeters;//[Offset: 0x390, Size: 0x4]
	float MonoCullingDistance;//[Offset: 0x394, Size: 0x4]
	BookMark* BookMarks;//[Offset: 0x398, Size: 0x4]
	float TimeDilation;//[Offset: 0x3c0, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x3c4, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x3c8, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x3cc, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x3d0, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x3d4, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x3d8, Size: 0x4]
	PlayerState* Pauser;//[Offset: 0x3dc, Size: 0x4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e0, Size: 0x1]
	NetViewer[] ReplicationViewers;//[Offset: 0x3e4, Size: 0xc]
	AssetUserData*[] AssetUserData;//[Offset: 0x3f0, Size: 0xc]
	float[] LODRelativeDistances;//[Offset: 0x3fc, Size: 0xc]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	int WorldCompositionNums;//[Offset: 0x40c, Size: 0x4]
	int CompositionBlockLength;//[Offset: 0x410, Size: 0x4]
	void OnRep_WorldGravityZ();// 0x133c1a0

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 0x4]
	float LastImpactSoundTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x2c8, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x2cc, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x2d0, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x2d4, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x2d8, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x2e0, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x2e4, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x2e8, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x2ec, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x2f0, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x2f4, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2f8, Size: 0x4]
	float MoveRepSize;//[Offset: 0x2fc, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x300, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x304, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x308, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x30c, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x310, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x314, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x318, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x31c, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x320, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x324, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x32c, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x334, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x338, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x33c, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x340, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 0x4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 0x4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 0x4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 0x4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 0x4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 0x4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 0x4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x20, Size: 0x4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 0x1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 0x4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 0x4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 0x4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 0x4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x40, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 0x4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 0x4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x4]
	Actor* InViewer;//[Offset: 0x4, Size: 0x4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 0x4]
	Vector ViewLocation;//[Offset: 0xc, Size: 0xc]
	Vector ViewDir;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20, Size: 0x8]
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0xc]
	Transform LevelTransform;//[Offset: 0x70, Size: 0x30]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa1, Size: 0x1]
	int LevelLODIndex;//[Offset: 0xa4, Size: 0x4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 0x1]
	Color DrawColor;//[Offset: 0xac, Size: 0x4]
	LinearColor LevelColor;//[Offset: 0xb0, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc0, Size: 0xc]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xcc, Size: 0x4]
	FString[] Keywords;//[Offset: 0xd4, Size: 0xc]
	delegate OnLevelLoaded;//[Offset: 0xe0, Size: 0xc]
	delegate OnLevelUnloaded;//[Offset: 0xec, Size: 0xc]
	delegate OnLevelShown;//[Offset: 0xf8, Size: 0xc]
	delegate OnLevelHidden;//[Offset: 0x104, Size: 0xc]
	Level* LoadedLevel;//[Offset: 0x110, Size: 0x4]
	Level* PendingUnloadLevel;//[Offset: 0x114, Size: 0x4]
	Level*[] UnloadingLevels;//[Offset: 0x118, Size: 0xc]
	bool IsStreamingStatePending();// 0x2d7447c
	bool IsLevelVisible();// 0x2d74454
	bool IsLevelLoaded();// 0x2d74430
	FName GetWorldAssetPackageFName();// 0x2d743f0
	LevelScriptActor* GetLevelScriptActor();// 0x2d743c8
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x2d74268

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2f0, Size: 0xc]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x2fd, Size: 0x1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x5fc, Size: 0x3c]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x888, Size: 0x4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x4]
	Level* Level;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4, Size: 0x3c]
	<class Object> EnabledClasses;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0, Size: 0x4]
	Object*[] Pool;//[Offset: 0x4, Size: 0xc]
	<Object*,uint32> RecycleTime;//[Offset: 0x10, Size: 0x3c]
	int Size;//[Offset: 0x4c, Size: 0x4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c, Size: 0x4]
	NavigationData* AbstractNavData;//[Offset: 0x20, Size: 0x4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x24, Size: 0x4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	enum DataGatheringMode;//[Offset: 0x29, Size: 0x1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 0x1]
	float ActiveTilesUpdateInterval;//[Offset: 0x2c, Size: 0x4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x30, Size: 0xc]
	float UpdateInterval;//[Offset: 0x3c, Size: 0x4]
	float DirtyAreasUpdateFreq;//[Offset: 0x40, Size: 0x4]
	NavigationData*[] NavDataSet;//[Offset: 0x44, Size: 0xc]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x50, Size: 0xc]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa4, Size: 0xc]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb0, Size: 0xc]
	enum OperationMode;//[Offset: 0x160, Size: 0x1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x2d94094
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x2d9401c
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x2d93f5c
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x2d93ea8
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x2d93e30
	void SetGeometryGatheringMode(enum NewMode);// 0x2d93db8
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x2d93da4
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x2d93ca4
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x2d93af8
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x2d93a80
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x2d93880
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x2d93690
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d934a0
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d932b0
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x2d93238
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x2d931c0
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d93014
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d92e68
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d92c64
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d92a60
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x2d929e8
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x2d9283c
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x2d9265c

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 0xc]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 0x4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 0xc]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x4]
	float TravelCostOverride;//[Offset: 0x4, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c, Size: 0xc]
	Vector[] PathPoints;//[Offset: 0x28, Size: 0xc]
	byte RecalculateOnInvalidation;//[Offset: 0x34, Size: 0x1]
	bool IsValid();// 0x2d91c64
	bool IsStringPulled();// 0x1457648
	bool IsPartial();// 0x2d91c3c
	float GetPathLength();// 0x2d91c14
	float GetPathCost();// 0x2d91bec
	FString GetDebugString();// 0x2d91b2c
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x2d91aac
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x2d919dc

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2c8, Size: 0xc]
	class GameSession* GameSessionClass;//[Offset: 0x2d4, Size: 0x4]
	class GameStateBase* GameStateClass;//[Offset: 0x2d8, Size: 0x4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x2dc, Size: 0x4]
	class PlayerState* PlayerStateClass;//[Offset: 0x2e0, Size: 0x4]
	class HUD* HUDClass;//[Offset: 0x2e4, Size: 0x4]
	class Pawn* DefaultPawnClass;//[Offset: 0x2e8, Size: 0x4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2ec, Size: 0x4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2f0, Size: 0x4]
	GameSession* GameSession;//[Offset: 0x2f4, Size: 0x4]
	GameStateBase* GameState;//[Offset: 0x2f8, Size: 0x4]
	FText DefaultPlayerName;//[Offset: 0x2fc, Size: 0xc]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x308, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x308, Size: 0x1]
	void StartPlay();// 0x2d02048
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x2d01f7c
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x2d01e20
	bool ShouldReset(Actor* ActorToReset);// 0x2d01d98
	void ReturnToMainMenuHost();// 0x2d01d7c
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x2d01c20
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x1854ad8
	void RestartPlayer(Controller* NewPlayer);// 0x132b1dc
	void ResetLevel();// 0x2d01c00
	bool PlayerCanRestart(PlayerController* Player);// 0x152e1cc
	bool MustSpectate(PlayerController* NewPlayerController);// 0x2d01b78
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1c01fa0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1c01fa0
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1c01fa0
	void K2_OnLogout(Controller* ExitingController);// 0x1c01fa0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x1c01fa0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x2d01a70
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x150791c
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x12de094
	bool HasMatchStarted();// 0x2ce2584
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x133ec7c
	int GetNumSpectators();// 0x14ebcf0
	int GetNumPlayers();// 0x2cdb7b0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x1492204
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x2d01960
	Actor* ChoosePlayerStart(Controller* Player);// 0x133fbd4
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x1852a74
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x2d01894

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2c8, Size: 0x4]
	int MaxPlayers;//[Offset: 0x2cc, Size: 0x4]
	int MaxPartySize;//[Offset: 0x2d0, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2d4, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	FName SessionName;//[Offset: 0x2d8, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2c8, Size: 0x4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2cc, Size: 0x4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2d0, Size: 0x4]
	PlayerState*[] PlayerArray;//[Offset: 0x2d4, Size: 0xc]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x2e4, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2e8, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x2ec, Size: 0x4]
	void OnRep_SpectatorClass();// 0x2ce27bc
	void OnRep_ReplicatedWorldTimeSeconds();// 0x1341488
	void OnRep_ReplicatedHasBegunPlay();// 0x14ec2e8
	void OnRep_GameModeClass();// 0x2d0cfdc
	bool HasMatchStarted();// 0x14921a4
	bool HasBegunPlay();// 0x2d0cfac
	float GetServerWorldTimeSeconds();// 0x1413dd0
	float GetPlayerStartTime(Controller* Controller);// 0x2d0cf24
	float GetPlayerRespawnDelay(Controller* Controller);// 0x2d0ce9c

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x30c, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x310, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x314, Size: 0x4]
	SphereComponent* CollisionComponent;//[Offset: 0x318, Size: 0x4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x31c, Size: 0x4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	void TurnAtRate(float Rate);// 0x2cea66c
	void MoveUp_World(float Val);// 0x2cea5ec
	void MoveRight(float Val);// 0x2cea56c
	void MoveForward(float Val);// 0x14e433c
	void LookUpAtRate(float Rate);// 0x2cea4f4

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x510, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x2de7f7c
	float GetUnscaledSphereRadius();// 0x2cd73b8
	float GetShapeScale();// 0x2cd7370
	float GetScaledSphereRadius();// 0x2cd7008

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x51c, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x520, Size: 0x4]
	int MinLod;//[Offset: 0x524, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x528, Size: 0x4]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x52c, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x52c, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x52c, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x52c, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x52c, Size: 0x1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x52c, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x52c, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x52c, Size: 0x1]
	float StreamingDistanceMultiplier;//[Offset: 0x530, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x534, Size: 0xc]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x540, Size: 0xc]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x550, Size: 0x3c]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x58c, Size: 0x18]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a4, Size: 0x1]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x253ec30
	void SetForcedLodModel(int NewForcedLodModel);// 0x2df295c
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x1396184
	void SetDirty();// 0x2df2948
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x2df28d0
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x2df27f8

--------------------------------
Class: StaticMesh.Object
	FName LODGroup;//[Offset: 0x30, Size: 0x8]
	int MinLod;//[Offset: 0x38, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x3c, Size: 0xc]
	BodySetup* BodySetup;//[Offset: 0x48, Size: 0x4]
	int LODForCollision;//[Offset: 0x4c, Size: 0x4]
	float CullingScreenSize;//[Offset: 0x50, Size: 0x4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57, Size: 0x1]
	bool bIsVisibleInVeryLowDevice;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57, Size: 0x1]
	bool bIsVisibleInLowDevice;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57, Size: 0x1]
	bool bIsVisibleInMidDevice;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57, Size: 0x1]
	int SupportCPUInstancesLOD;//[Offset: 0x58, Size: 0x4]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x94, Size: 0x4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xc0, Size: 0xc]
	Vector PositiveBoundsExtension;//[Offset: 0xd4, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xe0, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xec, Size: 0x1c]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x108, Size: 0xc]
	int ElementToIgnoreForTexFactor;//[Offset: 0x114, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x118, Size: 0xc]
	NavCollision* NavCollision;//[Offset: 0x124, Size: 0x4]
	int GetNumSections(int InLOD);// 0x2df1f4c
	int GetNumLODs();// 0x2df1f24
	int GetMaterialIndex(FName MaterialSlotName);// 0x2df1ea4
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x2df1e24
	BoxSphereBounds GetBounds();// 0x2df1dd0
	Box GetBoundingBox();// 0x2df1d7c

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x40, Size: 0xc]
	FString Tag;//[Offset: 0x4c, Size: 0xc]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58, Size: 0xc]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64, Size: 0xc]
	class NavArea* AreaClass;//[Offset: 0x70, Size: 0x4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 0x1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	float Height;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0xc]
	Vector Extent;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	PackedNormal Normal;//[Offset: 0xc, Size: 0x4]
	Color Color;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 0x1]
	byte Y;//[Offset: 0x1, Size: 0x1]
	byte Z;//[Offset: 0x2, Size: 0x1]
	byte W;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x38, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x34, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x2cc4f7c
	int GetObjectCount();// 0x2cc4f54
	int GetNewAvoidanceUID();// 0x2cc4f2c
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x2cc4e9c

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 0x4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 0x4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 0x4]
	<Level*> Levels;//[Offset: 0x14, Size: 0x3c]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24, Size: 0xc]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30, Size: 0xc]
	OnlineSession* OnlineSession;//[Offset: 0x3c, Size: 0x4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	void ReceiveShutdown();// 0x1c01fa0
	void ReceiveInit();// 0x1c01fa0
	void HandleTravelError(byte FailureType);// 0x1c01fa0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x1c01fa0
	int GetDeviceLevel();// 0x1481d0c
	void DebugRemovePlayer(int ControllerId);// 0x2cdefac
	void DebugCreatePlayer(int ControllerId);// 0x2d003b4

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38, Size: 0x4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c, Size: 0x4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	int ControllerId;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24, Size: 0x4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28, Size: 0xc]
	World* World;//[Offset: 0x58, Size: 0x4]
	GameInstance* GameInstance;//[Offset: 0x5c, Size: 0x4]
	void SSSwapControllers();// 0x131b67c
	void ShowTitleSafeArea();// 0x133d2f0
	void SetConsoleTarget(int PlayerIndex);// 0x12ebee0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 0x4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 0x4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 0x4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x4]
	class Object* WithinClass;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 0x4]
	World* World;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x98, Size: 0xc]
	double TilesStreamingTimeThreshold;//[Offset: 0xa8, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0xb4, Size: 0x4]
	FString PVEBordersName;//[Offset: 0xb8, Size: 0xc]
	FString[] UnloadTileOnServer;//[Offset: 0xc4, Size: 0xc]
	<FString> UnloadTileSet;//[Offset: 0xd0, Size: 0x3c]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x2d1720c
	bool WasControllerKeyJustPressed(Key Key);// 0x2d1720c
	bool IsControllerKeyDown(Key Key);// 0x2d1720c
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2d1708c
	Vector GetControllerVectorKeyState(Key Key);// 0x2d16d88
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x2d16ca8
	float GetControllerKeyTimeDown(Key Key);// 0x2d1688c
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x2d16b84
	float GetControllerAnalogKeyState(Key Key);// 0x2d1688c

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 0xc]
	float ActiveOpacity;//[Offset: 0x28, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x34, Size: 0x4]
	float ActivationDelay;//[Offset: 0x38, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float StartupDelay;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x4]
	Texture2D* Image2;//[Offset: 0x4, Size: 0x4]
	Vector2D Center;//[Offset: 0x8, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x10, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x18, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x28, Size: 0x8]
	Key MainInputKey;//[Offset: 0x30, Size: 0x10]
	Key AltInputKey;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe0, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0xf0, Size: 0x1c]
	delegate ForegroundColorDelegate;//[Offset: 0x110, Size: 0x10]
	Margin Padding;//[Offset: 0x120, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x130, Size: 0xc]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x13c, Size: 0xc]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x148, Size: 0xc]
	WidgetTree* WidgetTree;//[Offset: 0x154, Size: 0x4]
	int Priority;//[Offset: 0x158, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c, Size: 0x1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15c, Size: 0x1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15c, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15c, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x160, Size: 0x4]
	void UnregisterInputComponent();// 0x23a8980
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1c01fa0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x23a88b4
	void StopListeningForAllInputActions();// 0x23a88a0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x23a8828
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x23a8768
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x23a86ac
	void SetPadding(Margin InPadding);// 0x23a8624
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x23a85ac
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x23a8534
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x23a8478
	void SetInputActionPriority(int NewPriority);// 0x23a8400
	void SetInputActionBlocking(bool bShouldBlock);// 0x23a8380
	void SetForegroundColor(SlateColor InForegroundColor);// 0x23a8060
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x23a7fe0
	void SetDesiredSizeInViewport(Vector2D Size);// 0x23a7f70
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x23a7ef4
	void SetAnchorsInViewport(Anchors Anchors);// 0x23a7e6c
	void SetAlignmentInViewport(Vector2D Alignment);// 0x23a7dfc
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x23a7d84
	void RemoveFromViewport();// 0x23a7d70
	void RegisterInputComponent();// 0x23a7d5c
	void PreConstruct(bool IsDesignTime);// 0x1c01fa0
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x23a7b88
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x23a79f8
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x23a7978
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c01fa0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c01fa0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x1c01fa0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1c01fa0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x1c01fa0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c01fa0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1c01fa0
	void OnPaint(out PaintContext Context);// 0x1c01fa0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c01fa0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c01fa0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1c01fa0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c01fa0
	void OnMouseCaptureLost();// 0x1c01fa0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c01fa0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c01fa0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x1c01fa0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x1c01fa0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1c01fa0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1c01fa0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x1c01fa0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x1c01fa0
	void OnFocusLost(FocusEvent InFocusEvent);// 0x1c01fa0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c01fa0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c01fa0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c01fa0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c01fa0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x1c01fa0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1c01fa0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x23a78f8
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x23a7878
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x1c01fa0
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x1c01fa0
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x23a76e8
	bool IsPlayingAnimation();// 0x23a76c0
	bool IsListeningForInputAction(FName ActionName);// 0x23a7640
	bool IsInViewport();// 0x23a740c
	bool IsInteractable();// 0x1c01fa0
	bool IsAnyAnimationPlaying();// 0x23a7618
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x23a7598
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x23a7518
	Widget* GetWidgetFromName(out const FName Name);// 0x23a7484
	Pawn* GetOwningPlayerPawn();// 0x23a745c
	PlayerController* GetOwningPlayer();// 0x154f800
	LocalPlayer* GetOwningLocalPlayer();// 0x23a7434
	bool GetIsVisible();// 0x23a740c
	bool GetDontPaintWhenChildEmpty();// 0x23a73e4
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x23a7364
	Anchors GetAnchorsInViewport();// 0x23a7320
	Vector2D GetAlignmentInViewport();// 0x23a72e0
	void Destruct();// 0x1c01fa0
	void Construct();// 0x1c01fa0
	void AddToViewport(int ZOrder);// 0x23a7268
	bool AddToPlayerScreen(int ZOrder);// 0x23a71e8

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 0x4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 0x10]
	FText ToolTipText;//[Offset: 0x30, Size: 0xc]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 0x4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x78, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0x94, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 0x1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 0x1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 0x1]
	byte UsedLayerPolicy;//[Offset: 0x9d, Size: 0x1]
	byte PreservedLayerNum;//[Offset: 0x9e, Size: 0x1]
	byte Cursor;//[Offset: 0x9f, Size: 0x1]
	enum Clipping;//[Offset: 0xa0, Size: 0x1]
	enum Visibility;//[Offset: 0xa1, Size: 0x1]
	WidgetNavigation* Navigation;//[Offset: 0xa4, Size: 0x4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc0, Size: 0xc]
	void SetVisibility(enum InVisibility);// 0x23ac3d4
	void SetUserFocus(PlayerController* PlayerController);// 0x23ac35c
	void SetToolTipText(out const FText InToolTipText);// 0x23ac1b8
	void SetToolTip(Widget* Widget);// 0x23ac140
	void SetRenderTranslation(Vector2D Translation);// 0x23ac0d0
	void SetRenderTransformPivot(Vector2D Pivot);// 0x23ac060
	void SetRenderTransform(WidgetTransform InTransform);// 0x23abf88
	void SetRenderShear(Vector2D Shear);// 0x23abf18
	void SetRenderScale(Vector2D Scale);// 0x23abea8
	void SetRenderAngle(float Angle);// 0x23abe30
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x23abd28
	void SetKeyboardFocus();// 0x23abd14
	void SetIsEnabled(bool bInIsEnabled);// 0x12fde54
	void SetCursor(byte InCursor);// 0x23abc9c
	void SetClipping(enum InClipping);// 0x23abc24
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x23abb68
	void ResetCursor();// 0x23abb54
	void RemoveFromParent();// 0x13e6184
	EventReply OnReply__DelegateSignature();// 0x1c01fa0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1c01fa0
	bool IsVisible();// 0x23abb2c
	bool IsHovered();// 0x23abb04
	void InvalidateLayoutAndVolatility();// 0x23abaf0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x23aba70
	bool HasUserFocus(PlayerController* PlayerController);// 0x23ab9f0
	bool HasMouseCapture();// 0x23ab9c8
	bool HasKeyboardFocus();// 0x23ab9a0
	bool HasFocusedDescendants();// 0x23ab978
	bool HasAnyUserFocus();// 0x23ab950
	Widget* GetWidget__DelegateSignature();// 0x1c01fa0
	enum GetVisibility();// 0x23ab928
	FText GetText__DelegateSignature();// 0x1c01fa0
	enum GetSlateVisibility__DelegateSignature();// 0x1c01fa0
	SlateColor GetSlateColor__DelegateSignature();// 0x1c01fa0
	SlateBrush GetSlateBrush__DelegateSignature();// 0x1c01fa0
	PanelWidget* GetParent();// 0x23ab900
	PlayerController* GetOwningPlayer();// 0x154f800
	byte GetMouseCursor__DelegateSignature();// 0x1c01fa0
	LinearColor GetLinearColor__DelegateSignature();// 0x1c01fa0
	bool GetIsEnabled();// 0x23ab8d8
	int GetInt32__DelegateSignature();// 0x1c01fa0
	float GetFloat__DelegateSignature();// 0x1c01fa0
	Vector2D GetDesiredSize();// 0x23ab898
	enum GetClipping();// 0x23ab870
	enum GetCheckBoxState__DelegateSignature();// 0x1c01fa0
	Geometry GetCachedGeometry();// 0x23ab840
	Geometry GetCachedAllottedGeometry();// 0x23ab810
	bool GetBool__DelegateSignature();// 0x1c01fa0
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x1c01fa0
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x1c01fa0
	void ForceVolatile(bool bForce);// 0x23ab790
	void ForceLayoutPrepass();// 0x23ab77c

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 0x4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220, Size: 0xc]
	delegate OnAnimationFinished;//[Offset: 0x22c, Size: 0xc]
	MovieScene* MovieScene;//[Offset: 0x238, Size: 0x4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c, Size: 0xc]
	float GetStartTime();// 0x23ad1ec
	float GetEndTime();// 0x23ad1c4

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x48, Size: 0x194]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1dc, Size: 0x2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1e0, Size: 0x3c]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x3c]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 0x24]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 0x78]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114, Size: 0x7c]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneSegment[] Segments;//[Offset: 0x14, Size: 0xc]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0xc]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 0xc]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 0xc]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0xc]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0xc]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x3c]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 0x3c]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 0x4]
	Object* SequenceKeyObject;//[Offset: 0x4, Size: 0x4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8, Size: 0x8]
	Guid SourceSequenceSignature;//[Offset: 0x10, Size: 0x10]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20, Size: 0x4]
	FloatRange PreRollRange;//[Offset: 0x24, Size: 0x10]
	FloatRange PostRollRange;//[Offset: 0x34, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float Offset;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4, Size: 0x3c]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x48, Size: 0xc]
	MovieScenePossessable[] Possessables;//[Offset: 0x54, Size: 0xc]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x60, Size: 0xc]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x6c, Size: 0xc]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x78, Size: 0x4]
	FloatRange SelectionRange;//[Offset: 0x7c, Size: 0x10]
	FloatRange PlaybackRange;//[Offset: 0x8c, Size: 0x10]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float FixedFrameInterval;//[Offset: 0xa0, Size: 0x4]
	float InTime;//[Offset: 0xa4, Size: 0x4]
	float OutTime;//[Offset: 0xa8, Size: 0x4]
	float StartTime;//[Offset: 0xac, Size: 0x4]
	float endTime;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	FString Name;//[Offset: 0x10, Size: 0xc]
	Object* ObjectTemplate;//[Offset: 0x1c, Size: 0x4]
	Guid[] ChildPossessables;//[Offset: 0x20, Size: 0xc]
	enum Ownership;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	FString Name;//[Offset: 0x10, Size: 0xc]
	class Object* PossessedObjectClass;//[Offset: 0x1c, Size: 0x4]
	Guid ParentGuid;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0xc]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 0x4]
	Widget*[] AllWidgets;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: Geometry

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 0xc]
	Object* Payload;//[Offset: 0x28, Size: 0x4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 0x4]
	enum Pivot;//[Offset: 0x30, Size: 0x1]
	Vector2D Offset;//[Offset: 0x34, Size: 0x8]
	delegate OnDrop;//[Offset: 0x3c, Size: 0xc]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 0xc]
	delegate OnDragged;//[Offset: 0x54, Size: 0xc]
	void Drop(out const PointerEvent PointerEvent);// 0x2388ba8
	void Dragged(out const PointerEvent PointerEvent);// 0x2388974
	void DragCancelled(out const PointerEvent PointerEvent);// 0x2388740

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 0x4]
	Widget* Content;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xcc, Size: 0xc]
	bool RemoveChildAt(int Index);// 0x2392ea4
	bool RemoveChild(Widget* Content);// 0x2392e24
	bool HasChild(Widget* Content);// 0x2392da4
	bool HasAnyChildren();// 0x2392d7c
	int GetChildrenCount();// 0x15536d8
	int GetChildIndex(Widget* Content);// 0x2392cfc
	Widget* GetChildAt(int Index);// 0x2392c7c
	void DoToAllChildren(delegate Act, bool MultFrame);// 0x2392b8c
	void ClearChildren();// 0x2392b78
	PanelSlot* AddChild(Widget* Content);// 0x2392af8

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20, Size: 0x18]
	WidgetNavigationData Down;//[Offset: 0x38, Size: 0x18]
	WidgetNavigationData Left;//[Offset: 0x50, Size: 0x18]
	WidgetNavigationData Right;//[Offset: 0x68, Size: 0x18]
	WidgetNavigationData Next;//[Offset: 0x80, Size: 0x18]
	WidgetNavigationData Previous;//[Offset: 0x98, Size: 0x18]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 0x8]
	Widget* Widget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 0xc]
	FName DestinationProperty;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0xc, Size: 0x4]
	Field* Field;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4, Size: 0x8]
	Margin Margin;//[Offset: 0xc, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x1c, Size: 0x1c]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Object* ResourceObject;//[Offset: 0x3c, Size: 0x4]
	Object* SoftResourceObject;//[Offset: 0x40, Size: 0x28]
	FName ResourceName;//[Offset: 0x68, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x70, Size: 0x14]
	byte DrawAs;//[Offset: 0x84, Size: 0x1]
	byte Tiling;//[Offset: 0x85, Size: 0x1]
	byte Mirroring;//[Offset: 0x86, Size: 0x1]
	byte ImageType;//[Offset: 0x87, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundBase.Object

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x4]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2c8, Size: 0x4]
	FName MatineeControllerName;//[Offset: 0x2d0, Size: 0x8]
	float PlayRate;//[Offset: 0x2d8, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x2e0, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e4, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e4, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e4, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e4, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e4, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e4, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e4, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x2e8, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ec, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ec, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x2f0, Size: 0xc]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x300, Size: 0xc]
	CameraCutInfo[] CameraCuts;//[Offset: 0x30c, Size: 0xc]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x318, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x318, Size: 0x1]
	float InterpPosition;//[Offset: 0x31c, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x324, Size: 0x1]
	delegate OnPlay;//[Offset: 0x328, Size: 0xc]
	delegate OnStop;//[Offset: 0x334, Size: 0xc]
	delegate OnPause;//[Offset: 0x340, Size: 0xc]
	void Stop();// 0x12ee368
	void SetPosition(float NewPosition, bool bJump);// 0x2d8af28
	void SetLoopingState(bool bNewLooping);// 0x2d8aea0
	void Reverse();// 0x133cf7c
	void Play();// 0x133c1a0
	void Pause();// 0x13416fc
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x2d8acf8
	void ChangePlaybackDirection();// 0x1366804

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 0x4]
	float PathBuildTime;//[Offset: 0x20, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 0xc]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 0x4]
	float EdSectionStart;//[Offset: 0x34, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x38, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 0x4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float TimeStamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x238, Size: 0x4]
	Actor* ChildActor;//[Offset: 0x23c, Size: 0x4]
	Actor* ChildActorTemplate;//[Offset: 0x240, Size: 0x4]
	void SetChildActorClass(class Actor InClass);// 0x2ce0684

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ActorComponentPool.Object
	ActorComponent*[] Pool;//[Offset: 0x1c, Size: 0xc]
	ActorComponent* Template;//[Offset: 0x28, Size: 0x4]
	class Object* ActorClass;//[Offset: 0x2c, Size: 0x4]
	FString ComponentName;//[Offset: 0x30, Size: 0xc]
	Actor* Outer;//[Offset: 0x3c, Size: 0x4]
	bool PreLoadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	void Return(ActorComponent* Component);// 0x12ebf60
	ActorComponent* Get();// 0x1550134

--------------------------------
Class: AnimInstancePool.Object
	AnimInstance*[] Pool;//[Offset: 0x1c, Size: 0xc]
	void Return(AnimInstance* Instance);// 0x12ebf60
	AnimInstance* Get();// 0x1550134

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float AnimLength;//[Offset: 0x64, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0x84, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88, Size: 0xc]
	int SampleIndexWithMarkers;//[Offset: 0x94, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0x98, Size: 0xc]
	EditorElement[] GridSamples;//[Offset: 0xa4, Size: 0xc]
	BlendParameter BlendParameters;//[Offset: 0xb0, Size: 0x18]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x18]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x4]
	Vector SampleValue;//[Offset: 0x4, Size: 0xc]
	float RateScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0xc]
	float Min;//[Offset: 0xc, Size: 0x4]
	float Max;//[Offset: 0x10, Size: 0x4]
	int GridNum;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x30, Size: 0x4]
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x34, Size: 0xc]
	class AnimCompress* DefaultCompressionAlgorithm;//[Offset: 0x40, Size: 0x4]
	byte RotationCompressionFormat;//[Offset: 0x44, Size: 0x1]
	byte TranslationCompressionFormat;//[Offset: 0x45, Size: 0x1]
	float MaxCurveError;//[Offset: 0x48, Size: 0x4]
	float AlternativeCompressionThreshold;//[Offset: 0x4c, Size: 0x4]
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bOnlyCheckForMissingSkeletalMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bTryFixedBitwiseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bTryPerTrackBitwiseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	bool bTryLinearKeyRemovalCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1]
	bool bTryIntervalKeyRemoval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bUseDefaultCompressAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]

--------------------------------
Class: AnimCompress.Object
	FString Description;//[Offset: 0x1c, Size: 0xc]
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	byte TranslationCompressionFormat;//[Offset: 0x29, Size: 0x1]
	byte RotationCompressionFormat;//[Offset: 0x2a, Size: 0x1]
	byte ScaleCompressionFormat;//[Offset: 0x2b, Size: 0x1]
	float MaxCurveError;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xac, Size: 0x4]
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0xc]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	LinearColor Color;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x14c, Size: 0x4]
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x154, Size: 0xc]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x160, Size: 0xc]
	TimelineTemplate*[] Timelines;//[Offset: 0x16c, Size: 0xc]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x178, Size: 0x4]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x17c, Size: 0x4]
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x180, Size: 0x4]
	Function* UberGraphFunction;//[Offset: 0x184, Size: 0x4]
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x188, Size: 0x3c]

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x1d8, Size: 0xc]
	Skeleton* TargetSkeleton;//[Offset: 0x1e4, Size: 0x4]
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x1e8, Size: 0xc]
	int RootAnimNodeIndex;//[Offset: 0x1f4, Size: 0x4]
	int[] OrderedSavedPoseIndices;//[Offset: 0x1f8, Size: 0xc]
	FName[] SyncGroupNames;//[Offset: 0x214, Size: 0xc]

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8]
	int InitialState;//[Offset: 0x8, Size: 0x4]
	BakedAnimationState[] States;//[Offset: 0xc, Size: 0xc]
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8]
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0xc]
	int StateRootNodeIndex;//[Offset: 0x14, Size: 0x4]
	int StartNotify;//[Offset: 0x18, Size: 0x4]
	int EndNotify;//[Offset: 0x1c, Size: 0x4]
	int FullyBlendedNotify;//[Offset: 0x20, Size: 0x4]
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	int EntryRuleNodeIndex;//[Offset: 0x28, Size: 0x4]
	int[] PlayerNodeIndices;//[Offset: 0x2c, Size: 0xc]
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4]
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4]
	int TransitionIndex;//[Offset: 0x8, Size: 0x4]
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	int[] PoseEvaluatorLinks;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4]
	int NextState;//[Offset: 0xc, Size: 0x4]
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4]
	int StartNotify;//[Offset: 0x14, Size: 0x4]
	int EndNotify;//[Offset: 0x18, Size: 0x4]
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4]
	enum BlendMode;//[Offset: 0x20, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x24, Size: 0x4]
	BlendProfile* BlendProfile;//[Offset: 0x28, Size: 0x4]
	byte LogicType;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimClassData.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x20, Size: 0xc]
	Skeleton* TargetSkeleton;//[Offset: 0x2c, Size: 0x4]
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x30, Size: 0xc]
	int RootAnimNodeIndex;//[Offset: 0x3c, Size: 0x4]
	int[] OrderedSavedPoseIndices;//[Offset: 0x40, Size: 0xc]
	StructProperty* RootAnimNodeProperty;//[Offset: 0x4c, Size: 0x4]
	StructProperty*[] AnimNodeProperties;//[Offset: 0x50, Size: 0xc]
	FName[] SyncGroupNames;//[Offset: 0x5c, Size: 0xc]

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0x7c, Size: 0xc]

--------------------------------
Class: AnimCompress_Automatic.AnimCompress.Object
	float MaxEndEffectorError;//[Offset: 0x30, Size: 0x4]
	bool bTryFixedBitwiseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bTryPerTrackBitwiseCompression;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool bTryLinearKeyRemovalCompression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	bool bTryIntervalKeyRemoval;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 0x1]
	bool bRunCurrentDefaultCompressor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 0x1]
	bool bAutoReplaceIfExistingErrorTooGreat;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 0x1]
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.Object
	float MaxPosDiff;//[Offset: 0x30, Size: 0x4]
	float MaxAngleDiff;//[Offset: 0x34, Size: 0x4]
	float MaxScaleDiff;//[Offset: 0x38, Size: 0x4]
	float MaxEffectorDiff;//[Offset: 0x3c, Size: 0x4]
	float MinEffectorDiff;//[Offset: 0x40, Size: 0x4]
	float EffectorDiffSocket;//[Offset: 0x44, Size: 0x4]
	float ParentKeyScale;//[Offset: 0x48, Size: 0x4]
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.Object
	float MaxZeroingThreshold;//[Offset: 0x50, Size: 0x4]
	float MaxPosDiffBitwise;//[Offset: 0x54, Size: 0x4]
	float MaxAngleDiffBitwise;//[Offset: 0x58, Size: 0x4]
	float MaxScaleDiffBitwise;//[Offset: 0x5c, Size: 0x4]
	byte[] AllowedRotationFormats;//[Offset: 0x60, Size: 0xc]
	byte[] AllowedTranslationFormats;//[Offset: 0x6c, Size: 0xc]
	byte[] AllowedScaleFormats;//[Offset: 0x78, Size: 0xc]
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	float ResampledFramerate;//[Offset: 0x88, Size: 0x4]
	int MinKeysForResampling;//[Offset: 0x8c, Size: 0x4]
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	int TrackHeightBias;//[Offset: 0x94, Size: 0x4]
	float ParentingDivisor;//[Offset: 0x98, Size: 0x4]
	float ParentingDivisorExponent;//[Offset: 0x9c, Size: 0x4]
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	float RotationErrorSourceRatio;//[Offset: 0xa4, Size: 0x4]
	float TranslationErrorSourceRatio;//[Offset: 0xa8, Size: 0x4]
	float ScaleErrorSourceRatio;//[Offset: 0xac, Size: 0x4]
	float MaxErrorPerTrackRatio;//[Offset: 0xb0, Size: 0x4]
	float PerturbationProbeSize;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.Object
	int MinKeys;//[Offset: 0x30, Size: 0x4]
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.Object
	float MaxPosDiff;//[Offset: 0x30, Size: 0x4]
	float MaxAngleDiff;//[Offset: 0x34, Size: 0x4]
	float MaxScaleDiff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x24, Size: 0x4]
	Vector LocationOffset;//[Offset: 0x28, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x34, Size: 0xc]
	Vector Scale;//[Offset: 0x40, Size: 0xc]
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	FName SocketName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x20, Size: 0x4]
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x30, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x3c, Size: 0xc]
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x20, Size: 0x4]
	FName FirstSocketName;//[Offset: 0x28, Size: 0x8]
	FName SecondSocketName;//[Offset: 0x30, Size: 0x8]
	byte WidthScaleMode;//[Offset: 0x38, Size: 0x1]
	FName WidthScaleCurve;//[Offset: 0x40, Size: 0x8]
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation);// 0x1c01fa0

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	FName[] TrackBoneNames;//[Offset: 0x20, Size: 0xc]
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x2c, Size: 0xc]
	byte[] BoneUseAnimTranslation;//[Offset: 0x38, Size: 0xc]
	byte[] ForceUseMeshTranslation;//[Offset: 0x44, Size: 0xc]
	FName[] UseTranslationBoneNames;//[Offset: 0x50, Size: 0xc]
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x5c, Size: 0xc]
	FName PreviewSkelMeshName;//[Offset: 0x68, Size: 0x8]
	FName BestRatioSkelMeshName;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x2ec, Size: 0x4]
	delegate PostEvaluateAnimEvent;//[Offset: 0x2f0, Size: 0x10]
	void StopAnim();// 0x2cbcf88
	void SetReverse(bool bInReverse);// 0x2cbcf08
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0x2cbcde8
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0x2cbcce0
	void SetPosition(float InPosition, bool bFireNotifies);// 0x2cbcc1c
	void SetPlayRate(float InPlayRate);// 0x2cbcba4
	void SetPlaying(bool bIsPlaying);// 0x2cbcb24
	void SetLooping(bool bIsLooping);// 0x2cbcaa4
	void SetBlendSpaceInput(out const Vector InBlendInput);// 0x2cbca20
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0x2cbc90c
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0x2cbc800
	float GetLength();// 0x2cbc7d8
	AnimationAsset* GetAnimationAsset();// 0x14ee0f4

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xbc, Size: 0xc]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc8, Size: 0xc]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd4, Size: 0xc]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe0, Size: 0xc]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xec, Size: 0xc]

--------------------------------
Class: PhysicsSettings.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x30, Size: 0x4]
	float DefaultTerminalVelocity;//[Offset: 0x34, Size: 0x4]
	float DefaultFluidFriction;//[Offset: 0x38, Size: 0x4]
	int SimulateScratchMemorySize;//[Offset: 0x3c, Size: 0x4]
	int RagdollAggregateThreshold;//[Offset: 0x40, Size: 0x4]
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x44, Size: 0x4]
	bool bEnableAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	byte LockedAxis;//[Offset: 0x4e, Size: 0x1]
	byte DefaultDegreesOfFreedom;//[Offset: 0x4f, Size: 0x1]
	float BounceThresholdVelocity;//[Offset: 0x50, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x54, Size: 0x1]
	byte RestitutionCombineMode;//[Offset: 0x55, Size: 0x1]
	float MaxAngularVelocity;//[Offset: 0x58, Size: 0x4]
	float MaxDepenetrationVelocity;//[Offset: 0x5c, Size: 0x4]
	float ContactOffsetMultiplier;//[Offset: 0x60, Size: 0x4]
	float MinContactOffset;//[Offset: 0x64, Size: 0x4]
	float MaxContactOffset;//[Offset: 0x68, Size: 0x4]
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	byte DefaultShapeComplexity;//[Offset: 0x6d, Size: 0x1]
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1]
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f, Size: 0x1]
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	float MaxPhysicsDeltaTime;//[Offset: 0x74, Size: 0x4]
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	float MaxSubstepDeltaTime;//[Offset: 0x7c, Size: 0x4]
	int MaxSubsteps;//[Offset: 0x80, Size: 0x4]
	float ServerMaxSubstepDeltaTime;//[Offset: 0x84, Size: 0x4]
	int ServerMaxSubsteps;//[Offset: 0x88, Size: 0x4]
	float SyncSceneSmoothingFactor;//[Offset: 0x8c, Size: 0x4]
	float AsyncSceneSmoothingFactor;//[Offset: 0x90, Size: 0x4]
	float InitialAverageFrameRate;//[Offset: 0x94, Size: 0x4]
	int PhysXTreeRebuildRate;//[Offset: 0x98, Size: 0x4]
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0x9c, Size: 0xc]

--------------------------------
Class: PhysicalSurfaceName
	byte Type;//[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x30, Size: 0xc]
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x3c, Size: 0xc]
	CustomProfile[] EditProfiles;//[Offset: 0x48, Size: 0xc]
	Redirector[] ProfileRedirects;//[Offset: 0x54, Size: 0xc]
	Redirector[] CollisionChannelRedirects;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	FName ObjectTypeName;//[Offset: 0x10, Size: 0x8]
	ResponseChannel[] CustomResponses;//[Offset: 0x18, Size: 0xc]
	FString HelpMessage;//[Offset: 0x24, Size: 0xc]
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x8, Size: 0x8]
	byte DefaultResponse;//[Offset: 0x10, Size: 0x1]
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8]
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8]
	FName NewName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x500, Size: 0x4]
	float ArrowSize;//[Offset: 0x504, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	float ScreenSize;//[Offset: 0x50c, Size: 0x4]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x510, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x2cc06dc

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x1bc, Size: 0xc]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x1d4, Size: 0x4]

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x30, Size: 0xc]
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x3c, Size: 0xc]
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x48, Size: 0xc]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x58, Size: 0xc]
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x64, Size: 0xc]
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0x70, Size: 0xc]

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28]
	class Object* AssetBaseClassLoaded;//[Offset: 0x30, Size: 0x4]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	DirectoryPath[] Directories;//[Offset: 0x38, Size: 0xc]
	SoftObjectPath[] SpecificAssets;//[Offset: 0x44, Size: 0xc]
	PrimaryAssetRules Rules;//[Offset: 0x50, Size: 0x10]
	FString[] AssetScanPaths;//[Offset: 0x60, Size: 0xc]
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	int NumberOfAssets;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 0x4]
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int ChunkId;//[Offset: 0x8, Size: 0x4]
	enum CookRule;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: PrimaryAssetRulesOverride
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10]
	PrimaryAssetRules Rules;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AssetManagerRedirect
	FString Old;//[Offset: 0x0, Size: 0xc]
	FString New;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* TargetAsset;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x131b67c

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c, Size: 0xc]
	static AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x2cc197c

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c, Size: 0xc]
	static AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x2cc1d68

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c, Size: 0xc]
	static AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x2cc2154

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c, Size: 0xc]
	static AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x2cc2588

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c, Size: 0xc]
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0x2cc2b20
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(out const FName[] NewBundles, out const FName[] OldBundles);// 0x2cc29bc

--------------------------------
Class: AutomationTestSettings.Object
	FString[] EngineTestModules;//[Offset: 0x1c, Size: 0xc]
	FString[] EditorTestModules;//[Offset: 0x28, Size: 0xc]
	SoftObjectPath AutomationTestmap;//[Offset: 0x38, Size: 0x18]
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x50, Size: 0xc]
	SoftObjectPath[] AssetsToOpen;//[Offset: 0x5c, Size: 0xc]
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x68, Size: 0x174]
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x1dc, Size: 0x24]
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x200, Size: 0xc]
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x20c, Size: 0x24]
	FString[] TestLevelFolders;//[Offset: 0x230, Size: 0xc]
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x23c, Size: 0xc]
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x248, Size: 0xc]
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x254, Size: 0xc]
	IntPoint DefaultScreenshotResolution;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: EditorMapPerformanceTestDefinition
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18]
	int TestTimer;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0xc]
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0xc, Size: 0xfc]
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x108, Size: 0x48]
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x150, Size: 0x18]
	FilePath SourceControlMaterial;//[Offset: 0x168, Size: 0xc]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x18]
	EditorImportWorkflowDefinition Normal;//[Offset: 0x18, Size: 0x18]
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x30, Size: 0x18]
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x48, Size: 0x18]
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x60, Size: 0x18]
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0x78, Size: 0x18]
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0x90, Size: 0x18]
	EditorImportWorkflowDefinition Animation;//[Offset: 0xa8, Size: 0x18]
	EditorImportWorkflowDefinition Sound;//[Offset: 0xc0, Size: 0x18]
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0xd8, Size: 0x18]
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0xf0, Size: 0xc]

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0xc]
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ImportFactorySettingValues
	FString SettingName;//[Offset: 0x0, Size: 0xc]
	FString Value;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0xc]
	FilePath MaterialAsset;//[Offset: 0xc, Size: 0xc]
	FilePath ParticleSystemAsset;//[Offset: 0x18, Size: 0xc]
	FilePath SkeletalMeshAsset;//[Offset: 0x24, Size: 0xc]
	FilePath StaticMeshAsset;//[Offset: 0x30, Size: 0xc]
	FilePath TextureAsset;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0xc]
	FString NewProjectNameOverride;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0xc]
	FilePath DefaultDiffuseTexture;//[Offset: 0xc, Size: 0xc]
	FilePath DefaultNormalTexture;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0xc]
	FilePath SecondMeshPath;//[Offset: 0xc, Size: 0xc]
	FilePath DefaultParticleAsset;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ExternalToolDefinition
	FString ToolName;//[Offset: 0x0, Size: 0xc]
	FilePath ExecutablePath;//[Offset: 0xc, Size: 0xc]
	FString CommandLineOptions;//[Offset: 0x18, Size: 0xc]
	DirectoryPath WorkingDirectory;//[Offset: 0x24, Size: 0xc]
	FString ScriptExtension;//[Offset: 0x30, Size: 0xc]
	DirectoryPath ScriptDirectory;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: EditorImportExportTestDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0xc]
	FString ExportFileExtension;//[Offset: 0xc, Size: 0xc]
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: LaunchOnTestSettings
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0xc]
	FString DeviceID;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	static void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0x2cc8bc4
	static void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0x2cc8a8c
	static bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0x2cc88d0
	static int Map_Length(out const <int,int> TargetMap);// 0x2cc8814
	static void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0x2cc86dc
	static bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0x2cc8424
	static bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0x2cc8264
	static void Map_Clear(out const <int,int> TargetMap);// 0x2cc81b0
	static void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0x2cc7f28

--------------------------------
Class: GameMapsSettings.Object
	SoftObjectPath EditorStartupMap;//[Offset: 0x20, Size: 0x18]
	FString LocalMapOptions;//[Offset: 0x38, Size: 0xc]
	SoftObjectPath TransitionMap;//[Offset: 0x48, Size: 0x18]
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x61, Size: 0x1]
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x62, Size: 0x1]
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	SoftClassPath GameInstanceClass;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath GameDefaultMap;//[Offset: 0x80, Size: 0x18]
	SoftObjectPath ServerDefaultMap;//[Offset: 0x98, Size: 0x18]
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xb0, Size: 0x18]
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xc8, Size: 0x18]
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xe0, Size: 0xc]
	GameModeName[] GameModeClassAliases;//[Offset: 0xec, Size: 0xc]

--------------------------------
Class: GameModeName
	FString Name;//[Offset: 0x0, Size: 0xc]
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x188, Size: 0xc]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x194, Size: 0xc]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1a0, Size: 0xc]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1ac, Size: 0xc]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1b8, Size: 0xc]
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x1c4, Size: 0xc]
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x1d0, Size: 0xc]
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x1dc, Size: 0xc]
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x1e8, Size: 0xc]
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x1f4, Size: 0xc]
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x200, Size: 0xc]

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	static void ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x2cca070
	static void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0x2cc9f78
	static void ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0x2cc9e20
	static void ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x2cc9880
	static void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0x2cc970c
	static void ClearAllLocalNotifications();// 0x2cc96f8
	static void CancelLocalNotification(FString ActivationEvent);// 0x2cc9644

--------------------------------
Class: DateTime

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	static void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0x2ccb980
	static void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0x2ccb7b8
	static void Set_ToArray(out const <int> A, out int[] Result);// 0x2ccb680
	static void Set_RemoveItems(out const <int> TargetSet, out const int[] items);// 0x2ccb548
	static bool Set_Remove(out const <int> TargetSet, out const int Item);// 0x2ccb38c
	static int Set_Length(out const <int> TargetSet);// 0x2ccb2d0
	static void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0x2ccb108
	static void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0x2ccaf40
	static bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0x2ccad84
	static void Set_Clear(out const <int> TargetSet);// 0x2ccacd0
	static void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0x2ccab98
	static void Set_Add(out const <int> TargetSet, out const int NewItem);// 0x2cca9e4

--------------------------------
Class: BoneMaskFilter.Object
	InputBlendPose[] BlendPoses;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	int BlendDepth;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BookMark2D.Object
	float Zoom2D;//[Offset: 0x1c, Size: 0x4]
	IntPoint Location;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x510, Size: 0xc]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x2ccf6fc
	Vector GetUnscaledBoxExtent();// 0x2ccf6d4
	Vector GetScaledBoxExtent();// 0x2ccf67c

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x238, Size: 0x4]
	enum ReflectionSourceType;//[Offset: 0x23c, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x240, Size: 0x4]
	float SourceCubemapAngle;//[Offset: 0x244, Size: 0x4]
	float Brightness;//[Offset: 0x248, Size: 0x4]
	Vector CaptureOffset;//[Offset: 0x24c, Size: 0xc]
	Guid stateID;//[Offset: 0x26c, Size: 0x10]

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x294, Size: 0x4]
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x298, Size: 0x4]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x29c, Size: 0x4]

--------------------------------
Class: Breakpoint.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	EdGraphNode* Node;//[Offset: 0x20, Size: 0x4]
	bool bStepOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bStepOnce_WasPreviouslyDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bStepOnce_RemoveAfterHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x28, Size: 0xc]
	int NodePosX;//[Offset: 0x34, Size: 0x4]
	int NodePosY;//[Offset: 0x38, Size: 0x4]
	int NodeWidth;//[Offset: 0x3c, Size: 0x4]
	int NodeHeight;//[Offset: 0x40, Size: 0x4]
	byte AdvancedPinDisplay;//[Offset: 0x44, Size: 0x1]
	enum EnabledState;//[Offset: 0x45, Size: 0x1]
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47, Size: 0x1]
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47, Size: 0x1]
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x47, Size: 0x1]
	bool bCommentBubblePinned;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x47, Size: 0x1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47, Size: 0x1]
	bool bCommentBubbleMakeVisible;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x47, Size: 0x1]
	FString NodeComment;//[Offset: 0x48, Size: 0xc]
	int ErrorType;//[Offset: 0x54, Size: 0x4]
	FString errorMsg;//[Offset: 0x58, Size: 0xc]
	Guid NodeGuid;//[Offset: 0x64, Size: 0x10]

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x1c, Size: 0xc]
	FString PinToolTip;//[Offset: 0x28, Size: 0xc]
	byte Direction;//[Offset: 0x34, Size: 0x1]
	EdGraphPinType PinType;//[Offset: 0x38, Size: 0x68]
	FString DefaultValue;//[Offset: 0xa0, Size: 0xc]
	FString AutogeneratedDefaultValue;//[Offset: 0xac, Size: 0xc]
	Object* DefaultObject;//[Offset: 0xb8, Size: 0x4]
	FText DefaultTextValue;//[Offset: 0xbc, Size: 0xc]
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xc8, Size: 0xc]
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xd4, Size: 0xc]
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0xe0, Size: 0x4]
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0xe4, Size: 0x4]

--------------------------------
Class: EdGraphPinType
	FString PinCategory;//[Offset: 0x0, Size: 0xc]
	FString PinSubCategory;//[Offset: 0xc, Size: 0xc]
	Object* PinSubCategoryObject;//[Offset: 0x18, Size: 0x8]
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x20, Size: 0x20]
	EdGraphTerminalType PinValueType;//[Offset: 0x40, Size: 0x24]
	enum ContainerType;//[Offset: 0x64, Size: 0x1]
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65, Size: 0x1]
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65, Size: 0x1]
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x65, Size: 0x1]
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x65, Size: 0x1]

--------------------------------
Class: EdGraphTerminalType
	FString TerminalCategory;//[Offset: 0x0, Size: 0xc]
	FString TerminalSubCategory;//[Offset: 0xc, Size: 0xc]
	Object* TerminalSubCategoryObject;//[Offset: 0x18, Size: 0x8]
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x1c, Size: 0xc]
	FString ToolTip;//[Offset: 0x28, Size: 0xc]
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	Vector[] Vertices;//[Offset: 0x38, Size: 0xc]
	BuilderPoly[] Polys;//[Offset: 0x44, Size: 0xc]
	FName Layer;//[Offset: 0x50, Size: 0x8]
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: BuilderPoly
	int[] VertexIndices;//[Offset: 0x0, Size: 0xc]
	int Direction;//[Offset: 0xc, Size: 0x4]
	FName ItemName;//[Offset: 0x10, Size: 0x8]
	int PolyFlags;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x20, Size: 0x298]

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x90]
	SlateBrush Hovered;//[Offset: 0x98, Size: 0x90]
	SlateBrush Pressed;//[Offset: 0x128, Size: 0x90]
	SlateBrush Disabled;//[Offset: 0x1b8, Size: 0x90]
	Margin NormalPadding;//[Offset: 0x248, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x258, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x268, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x280, Size: 0x18]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraObserverActor.Actor.Object

--------------------------------
Class: DeviceProfileManager.Object
	Object*[] Profiles;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x28, Size: 0xc]
	FString BaseProfileName;//[Offset: 0x34, Size: 0xc]
	Object* Parent;//[Offset: 0x40, Size: 0x4]
	FString[] CVars;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1]
	int LODBias;//[Offset: 0xc, Size: 0x4]
	int NumStreamedMips;//[Offset: 0x14, Size: 0x4]
	byte MipGenSettings;//[Offset: 0x18, Size: 0x1]
	int MinLODSize;//[Offset: 0x1c, Size: 0x4]
	int MaxLODSize;//[Offset: 0x20, Size: 0x4]
	FName MinMagFilter;//[Offset: 0x28, Size: 0x8]
	FName MipFilter;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0x9c, Size: 0x4]
	int SizeY;//[Offset: 0xa0, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xa4, Size: 0x10]
	byte AddressX;//[Offset: 0xb4, Size: 0x1]
	byte AddressY;//[Offset: 0xb5, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb6, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb6, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xb7, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xb9, Size: 0x1]

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0xc0, Size: 0xc]
	World* World;//[Offset: 0xcc, Size: 0x8]
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	void UpdateResource();// 0x133d2f0
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0x1c01fa0
	void GetSize(out int Width, out int Height);// 0x2cd6a00
	static CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0x2cd68bc

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20, Size: 0x4]
	SoftObjectPath TinyFontName;//[Offset: 0x28, Size: 0x18]
	Font* SmallFont;//[Offset: 0x5c, Size: 0x4]
	SoftObjectPath SmallFontName;//[Offset: 0x60, Size: 0x18]
	Font* MediumFont;//[Offset: 0x78, Size: 0x4]
	SoftObjectPath MediumFontName;//[Offset: 0x80, Size: 0x18]
	Font* LargeFont;//[Offset: 0x98, Size: 0x4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb8, Size: 0x4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd8, Size: 0xc]
	FString[] AdditionalFontNames;//[Offset: 0xe4, Size: 0xc]
	class Console* ConsoleClass;//[Offset: 0xf0, Size: 0x4]
	SoftClassPath ConsoleClassName;//[Offset: 0xf8, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x110, Size: 0x4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x118, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x130, Size: 0x4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x138, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x150, Size: 0x4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x158, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x170, Size: 0x18]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x188, Size: 0x4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x190, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1a8, Size: 0x4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1ac, Size: 0x4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1c8, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e0, Size: 0x4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1e8, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x200, Size: 0x4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x204, Size: 0x4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x208, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x220, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x238, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x250, Size: 0x4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x258, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x270, Size: 0x4]
	Texture2D* DefaultTexture;//[Offset: 0x274, Size: 0x4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x278, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x290, Size: 0x4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x298, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b0, Size: 0x4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2b8, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d0, Size: 0x4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2d8, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f0, Size: 0x4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x2f8, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x310, Size: 0x4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x318, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x330, Size: 0x4]
	FString WireframeMaterialName;//[Offset: 0x334, Size: 0xc]
	Material* DebugMeshMaterial;//[Offset: 0x340, Size: 0x4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x348, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x360, Size: 0x4]
	FString LevelColorationLitMaterialName;//[Offset: 0x364, Size: 0xc]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x370, Size: 0x4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x374, Size: 0xc]
	Material* LightingTexelDensityMaterial;//[Offset: 0x380, Size: 0x4]
	FString LightingTexelDensityName;//[Offset: 0x384, Size: 0xc]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x390, Size: 0x4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x394, Size: 0xc]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a0, Size: 0x4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3a4, Size: 0xc]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b0, Size: 0x4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3b8, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x3d0, Size: 0x4]
	FString VertexColorMaterialName;//[Offset: 0x3d4, Size: 0xc]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e0, Size: 0x4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3e4, Size: 0xc]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f0, Size: 0x4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3f4, Size: 0xc]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x400, Size: 0x4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x404, Size: 0xc]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x410, Size: 0x4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x414, Size: 0xc]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x420, Size: 0x4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x424, Size: 0xc]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x430, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x448, Size: 0x4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x44c, Size: 0x4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x450, Size: 0x4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x454, Size: 0x4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x458, Size: 0x4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x45c, Size: 0x4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x460, Size: 0x4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x464, Size: 0x4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x468, Size: 0x4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x470, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x488, Size: 0x4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x490, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x4a8, Size: 0x4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b0, Size: 0x18]
	Material* OutlineMaterial;//[Offset: 0x4c8, Size: 0x4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d0, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x4e8, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x4f8, Size: 0xc]
	LinearColor[] QuadComplexityColors;//[Offset: 0x504, Size: 0xc]
	LinearColor[] LightComplexityColors;//[Offset: 0x510, Size: 0xc]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x51c, Size: 0xc]
	LinearColor[] LODColorationColors;//[Offset: 0x528, Size: 0xc]
	LinearColor[] VertexCountColors;//[Offset: 0x534, Size: 0xc]
	LinearColor[] CPUInstancingColors;//[Offset: 0x540, Size: 0xc]
	LinearColor[] HLODColorationColors;//[Offset: 0x54c, Size: 0xc]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x558, Size: 0xc]
	CullingSizeLimitInMaps[] CullingSizeLimitInMaps;//[Offset: 0x564, Size: 0xc]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x570, Size: 0x4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x574, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x578, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x57c, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x580, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x584, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x588, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x58c, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x590, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x5a0, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x5b0, Size: 0xc]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x5bc, Size: 0x4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x5c0, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x5d8, Size: 0xc]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x5e4, Size: 0xc]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x5f0, Size: 0xc]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x5fc, Size: 0xc]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x608, Size: 0x4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x610, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x628, Size: 0x4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x630, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x648, Size: 0x4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x650, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x668, Size: 0x4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x670, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x68c, Size: 0x4]
	FString[] DeferredCommands;//[Offset: 0x690, Size: 0xc]
	int TickCycles;//[Offset: 0x69c, Size: 0x4]
	int GameCycles;//[Offset: 0x6a0, Size: 0x4]
	int ClientCycles;//[Offset: 0x6a4, Size: 0x4]
	float NearClipPlane;//[Offset: 0x6a8, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ac, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ac, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ac, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x6b0, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b4, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b4, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b4, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b4, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6b4, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6b4, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x6b8, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x6bc, Size: 0x10]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6cc, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x6d0, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d4, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x6d8, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x6dc, Size: 0x4]
	Color C_AddWire;//[Offset: 0x6e0, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x6e4, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x6e8, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x6ec, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x6f0, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x6f4, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x6f8, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x6fc, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x700, Size: 0x4]
	Color C_Volume;//[Offset: 0x704, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x708, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x70c, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x710, Size: 0xc]
	byte TransitionType;//[Offset: 0x71c, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x720, Size: 0xc]
	FString TransitionGameMode;//[Offset: 0x72c, Size: 0xc]
	float MeshLODRange;//[Offset: 0x738, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73c, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x740, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x744, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x748, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x74c, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x750, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x754, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x758, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x75c, Size: 0xc]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x768, Size: 0x1c]
	float NetClientTicksPerSecond;//[Offset: 0x784, Size: 0x4]
	float DisplayGamma;//[Offset: 0x788, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x78c, Size: 0x4]
	int ShaderPrecompileProgress;//[Offset: 0x790, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x794, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x7a4, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x7b4, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x7c4, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x7d4, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e5, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e5, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e5, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e5, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x7e8, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x7f0, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f4, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x7f8, Size: 0xc]
	float SelectionHighlightIntensity;//[Offset: 0x810, Size: 0x4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x814, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x818, Size: 0x4]
	float HoverHighlightIntensity;//[Offset: 0x81c, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x820, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0x9a4, Size: 0xc]
	FString[] ServerActors;//[Offset: 0x9b0, Size: 0xc]
	FString[] RuntimeServerActors;//[Offset: 0x9bc, Size: 0xc]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c8, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0x9d8, Size: 0x4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x60, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x64, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c, Size: 0x4]
	int WindowPosX;//[Offset: 0x70, Size: 0x4]
	int WindowPosY;//[Offset: 0x74, Size: 0x4]
	int FullscreenMode;//[Offset: 0x78, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0x80, Size: 0x4]
	uint32 Version;//[Offset: 0x84, Size: 0x4]
	float FrameRateLimit;//[Offset: 0x88, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0x90, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0x98, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0x9c, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xa0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xa4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xa8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xac, Size: 0xc]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xb8, Size: 0xc]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc4, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0xcc, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd0, Size: 0xc]
	void ValidateSettings();// 0x13e61a0
	bool SupportsHDRDisplayOutput();// 0x2d0e5bc
	void SetVSyncEnabled(bool bEnable);// 0x2d0e53c
	void SetVisualEffectQuality(int Value);// 0x174b600
	void SetViewDistanceQuality(int Value);// 0x2d0e4c4
	void SetToDefaults();// 0x12fe8d4
	void SetTextureQuality(int Value);// 0x2d0e44c
	void SetShadowQuality(int Value);// 0x2d0e3d4
	void SetScreenResolution(IntPoint Resolution);// 0x2d0e364
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x2d0e2ec
	void SetResolutionScaleValue(int NewScaleValue);// 0x2d0e274
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x2d0e1fc
	void SetPostProcessingQuality(int Value);// 0x2d0e184
	void SetOverallScalabilityLevel(int Value);// 0x12ebee0
	void SetFullscreenMode(byte InFullscreenMode);// 0x2d0e10c
	void SetFrameRateLimit(float NewLimit);// 0x2d0e094
	void SetFoliageQuality(int Value);// 0x2d0e01c
	void SetBenchmarkFallbackValues();// 0x2d0e008
	void SetAntiAliasingQuality(int Value);// 0x2d0df90
	void SaveSettings();// 0x15c567c
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x2d0de88
	void RevertVideoMode();// 0x2d0de74
	void ResetToCurrentSettings();// 0x138ffc4
	void LoadSettings(bool bForceReload);// 0x2cd2904
	bool IsVSyncEnabled();// 0x2d0de4c
	bool IsVSyncDirty();// 0x2d0de24
	bool IsScreenResolutionDirty();// 0x2d0ddfc
	bool IsHDREnabled();// 0x2d0ddd4
	bool IsFullscreenModeDirty();// 0x2d0ddac
	bool IsDirty();// 0x1391ee8
	int GetVisualEffectQuality();// 0x2d0dd84
	int GetViewDistanceQuality();// 0x12fe228
	int GetTextureQuality();// 0x2d0dd5c
	int GetShadowQuality();// 0x2d0dd34
	IntPoint GetScreenResolution();// 0x2d0dcec
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x2d0db58
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x2d0d9c4
	float GetRecommendedResolutionScale();// 0x131f110
	byte GetPreferredFullscreenMode();// 0x2d0d99c
	int GetPostProcessingQuality();// 0x2d0d974
	int GetOverallScalabilityLevel();// 0x2d0d94c
	IntPoint GetLastConfirmedScreenResolution();// 0x2d0d904
	byte GetLastConfirmedFullscreenMode();// 0x2d0d8dc
	static GameUserSettings* GetGameUserSettings();// 0x2d0d8b4
	byte GetFullscreenMode();// 0x2d0d88c
	float GetFrameRateLimit();// 0x2d0d864
	int GetFoliageQuality();// 0x2d0d83c
	IntPoint GetDesktopResolution();// 0x2d0d7f4
	static IntPoint GetDefaultWindowPosition();// 0x2d0d7b4
	static byte GetDefaultWindowMode();// 0x1485ea8
	float GetDefaultResolutionScale();// 0x131f0e0
	static IntPoint GetDefaultResolution();// 0x2d0d774
	int GetCurrentHDRDisplayNits();// 0x2d0d74c
	int GetAntiAliasingQuality();// 0x2d0d724
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x2d0d65c
	void ConfirmVideoMode();// 0x2d0d648
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x2d0d5c0
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x2d0d540
	void ApplyNonResolutionSettings();// 0x133d2f0
	void ApplyHardwareBenchmarkResults();// 0x1521b8c

--------------------------------
Class: CullingSizeLimitInMaps
	FString MapName;//[Offset: 0x0, Size: 0xc]
	CullingSizeLimitItem[] Limits;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: CullingSizeLimitItem
	FString LODGroup;//[Offset: 0x0, Size: 0xc]
	float MinCullingSize;//[Offset: 0xc, Size: 0x4]
	float MaxCullingSize;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0xc]
	StatColorMapEntry[] ColorMap;//[Offset: 0xc, Size: 0xc]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0xc]
	FString NewPluginName;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0, Size: 0x4]
	float LinearInterpAlpha;//[Offset: 0x4, Size: 0x4]
	float LinearRecipFixTime;//[Offset: 0x8, Size: 0x4]
	float AngularDeltaThreshold;//[Offset: 0xc, Size: 0x4]
	float AngularInterpAlpha;//[Offset: 0x10, Size: 0x4]
	float AngularRecipFixTime;//[Offset: 0x14, Size: 0x4]
	float BodySpeedThresholdSq;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x20, Size: 0x5a8]

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x4, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x8, Size: 0x90]
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 0x90]
	SlateBrush UncheckedPressedImage;//[Offset: 0x128, Size: 0x90]
	SlateBrush CheckedImage;//[Offset: 0x1b8, Size: 0x90]
	SlateBrush CheckedHoveredImage;//[Offset: 0x248, Size: 0x90]
	SlateBrush CheckedPressedImage;//[Offset: 0x2d8, Size: 0x90]
	SlateBrush UndeterminedImage;//[Offset: 0x368, Size: 0x90]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3f8, Size: 0x90]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x488, Size: 0x90]
	Margin Padding;//[Offset: 0x518, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x528, Size: 0x1c]
	SlateColor BorderBackgroundColor;//[Offset: 0x544, Size: 0x1c]
	SlateSound CheckedSlateSound;//[Offset: 0x560, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x578, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x590, Size: 0x18]

--------------------------------
Class: PlatformInterfaceBase.Object
	DelegateArray[] AllDelegates;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: DelegateArray
	delegate[] Delegates;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	FString[] LocalCloudFiles;//[Offset: 0x28, Size: 0xc]
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x1c, Size: 0xc]
	FString HelpUsage;//[Offset: 0x28, Size: 0xc]
	FString HelpWebLink;//[Offset: 0x34, Size: 0xc]
	FString[] HelpParamNames;//[Offset: 0x40, Size: 0xc]
	FString[] HelpParamDescriptions;//[Offset: 0x4c, Size: 0xc]
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BlueprintComponentDelegateBinding
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8]
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x1c, Size: 0x4]
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x20, Size: 0xc]
	FString[] AutoCompleteMapPaths;//[Offset: 0x2c, Size: 0xc]
	float BackgroundOpacityPercentage;//[Offset: 0x38, Size: 0x4]
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	Color InputColor;//[Offset: 0x40, Size: 0x4]
	Color HistoryColor;//[Offset: 0x44, Size: 0x4]
	Color AutoCompleteCommandColor;//[Offset: 0x48, Size: 0x4]
	Color AutoCompleteCVarColor;//[Offset: 0x4c, Size: 0x4]
	Color AutoCompleteFadedColor;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: AutoCompleteCommand
	FString Command;//[Offset: 0x0, Size: 0xc]
	FString Desc;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: ControlRigInterface.Interface.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	float TimeLimitExceededMultiplier;//[Offset: 0x34, Size: 0x4]
	float TimeLimitExceededMinTime;//[Offset: 0x38, Size: 0x4]
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x3c, Size: 0x4]
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	float AsyncLoadingTimeLimit;//[Offset: 0x44, Size: 0x4]
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x48, Size: 0x4]
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x4c, Size: 0x4]
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x50, Size: 0x4]
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x54, Size: 0x4]
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x58, Size: 0x4]
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x30, Size: 0x4]
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 0x1]
	bool MergeGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 0x1]
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 0x1]
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 0x1]
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 0x1]
	int NumRetriesBeforeForcingGC;//[Offset: 0x38, Size: 0x4]
	int MinActorNumForCluster;//[Offset: 0x3c, Size: 0x4]
	int MaxObjectsNotConsideredByGC;//[Offset: 0x40, Size: 0x4]
	int SizeOfPermanentObjectPool;//[Offset: 0x44, Size: 0x4]
	int MaxObjectsInGame;//[Offset: 0x48, Size: 0x4]
	int MaxObjectsInEditor;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x2f0, Size: 0xc]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 0x1]
	bool bEnabledDeviceScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc, Size: 0x1]
	float VeryLowScale;//[Offset: 0x300, Size: 0x4]
	float LowScale;//[Offset: 0x304, Size: 0x4]
	float MidScale;//[Offset: 0x308, Size: 0x4]
	float HighScale;//[Offset: 0x30c, Size: 0x4]
	bool bEnableStaticMeshMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bEnableCullDistanceOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4]
	float CullDistance;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: CurveSourceInterface.Interface.Object
	float GetCurveValue(FName CurveName);// 0x2ce5774
	void GetCurves(out NamedCurveValue[] OutValues);// 0x2ce56a0
	FName GetBindingName();// 0x2ce5658

--------------------------------
Class: NamedCurveValue
	FName Name;//[Offset: 0x0, Size: 0x8]
	float Value;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: DamageableInterfaceBase.Interface.Object

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	static void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0x2ce7930
	static bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0x2ce70c4
	static void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0x2ce6e8c

--------------------------------
Class: TableRowBase

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x2c8, Size: 0x4]
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x2ce8848
	MaterialInterface* GetDecalMaterial();// 0x2ce8820
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x1556314

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x238, Size: 0x4]
	int SortOrder;//[Offset: 0x23c, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x240, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x244, Size: 0x4]
	float FadeDuration;//[Offset: 0x248, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	Vector DecalSize;//[Offset: 0x250, Size: 0xc]
	void SetSortOrder(int Value);// 0x2cea000
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x2ce9f88
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x2ce9e80
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x2ce9e08
	float GetFadeStartDelay();// 0x2ce9de0
	float GetFadeDuration();// 0x2ce9db8
	MaterialInterface* GetDecalMaterial();// 0x2ce9d90
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x2ce9d60

--------------------------------
Class: DecalBakingActor.Actor.Object
	uint32 MaxDecalProcessPerFame;//[Offset: 0x2c8, Size: 0x4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x2cc, Size: 0xc]
	void SetMaxDecalProcessPerFame(int InValue);// 0x1433d58
	int GetMaxDecalProcessPerFame();// 0x13a86cc
	int FindDecalBakingRequestID(TextureRenderTarget2D* RenderTarget);// 0x2ce937c
	void EndDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x2ce9304
	void CancelDecalBakingRequest(int RequestID);// 0x2ce928c
	void BeginDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x2ce9214
	int BakeDecalForStaticMesh(TextureRenderTarget2D* RenderTarget, StaticMesh* StaticMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x2ce8fd8
	int BakeDecalForSkeletalMesh(TextureRenderTarget2D* RenderTarget, SkeletalMesh* SkeletalMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x2ce8d9c

--------------------------------
Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x4, Size: 0x4]
	DecalParameter[] DecalParams;//[Offset: 0xc, Size: 0xc]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: DecalParameter
	Texture2D* DecalTexture;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: DecalBakingParameterActor.Actor.Object
	DecalBakingParameterComponent* DecalBakingParam;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: DecalBakingParameterComponent.SceneComponent.ActorComponent.Object
	Texture2D* DecalTexture;//[Offset: 0x238, Size: 0x4]
	Vector DecalSize;//[Offset: 0x23c, Size: 0xc]
	Vector4 UVScaleBias;//[Offset: 0x250, Size: 0x10]
	LinearColor TintColor;//[Offset: 0x260, Size: 0x10]
	Vector4 CropUVScaleBias;//[Offset: 0x270, Size: 0x10]
	float CropRotation;//[Offset: 0x280, Size: 0x4]
	bool bEnableDepthCompare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	LinearColor GetUVScaleBias();// 0x2ce9b18
	BoxSphereBounds GetDecalBounds();// 0x2ce9ac4
	LinearColor GetCropUVScaleBias();// 0x2ce9aa4

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x124, Size: 0x4]
	float Acceleration;//[Offset: 0x128, Size: 0x4]
	float Deceleration;//[Offset: 0x12c, Size: 0x4]
	float TurningBoost;//[Offset: 0x130, Size: 0x4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 0x1]

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x20, Size: 0x4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2c8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	void ToggleEnabled();// 0x2d75590
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2d75520
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2d754a8
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2d75430
	void SetLightColor(LinearColor NewLightColor);// 0x2d753b4
	void SetEnabled(bool bSetEnabled);// 0x2d75334
	void SetCastShadows(bool bNewValue);// 0x2d752b4
	void SetBrightness(float NewBrightness);// 0x2d7523c
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2d751bc
	void OnRep_bEnabled();// 0x133c1bc
	bool IsEnabled();// 0x2d75194
	LinearColor GetLightColor();// 0x2d75150
	float GetBrightness();// 0x2d75128

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x260, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x264, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x268, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x270, Size: 0x4]
	float MinRoughness;//[Offset: 0x278, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x27c, Size: 0x4]
	float ShadowBias;//[Offset: 0x280, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x284, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x288, Size: 0x4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28c, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28c, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x28d, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x290, Size: 0x4]
	Vector LightFunctionScale;//[Offset: 0x294, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x2a0, Size: 0x4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a4, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x2a8, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x2ac, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x2b0, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	float BloomScale;//[Offset: 0x2b8, Size: 0x4]
	float BloomThreshold;//[Offset: 0x2bc, Size: 0x4]
	Color BloomTint;//[Offset: 0x2c0, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x2c8, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x2d7644c
	void SetTemperature(float NewTemperature);// 0x2d763d4
	void SetShadowBias(float NewValue);// 0x2d7635c
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2d762ec
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2d76274
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2d761fc
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x2d76184
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x2d760bc
	void SetIntensity(float NewIntensity);// 0x2d76044
	void SetIndirectLightingIntensity(float NewIntensity);// 0x2d75fcc
	void SetIESTexture(TextureLightProfile* NewValue);// 0x2d75f54
	void SetEnableLightShaftBloom(bool bNewValue);// 0x2d75ed4
	void SetBloomTint(Color NewValue);// 0x2d75e64
	void SetBloomThreshold(float NewValue);// 0x2d75dec
	void SetBloomScale(float NewValue);// 0x2d75d74
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2d75cf4
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x2d75c74

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x238, Size: 0x10]
	float Brightness;//[Offset: 0x248, Size: 0x4]
	float Intensity;//[Offset: 0x24c, Size: 0x4]
	Color LightColor;//[Offset: 0x250, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x254, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x254, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x258, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x25c, Size: 0x4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x2d7757c
	void SetCastShadows(bool bNewValue);// 0x2d774fc
	LinearColor GetLightColor();// 0x2d774b8

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xc8, Size: 0x4]
	float TextureMultiplier;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x325, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x328, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x32c, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x330, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x33c, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x340, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x344, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x348, Size: 0x4]
	float CascadeDistributionExponent;//[Offset: 0x34c, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x350, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x354, Size: 0x4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x35c, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x360, Size: 0x4]
	float DistanceFieldShadowDistance;//[Offset: 0x364, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x368, Size: 0x4]
	float TraceDistance;//[Offset: 0x36c, Size: 0x4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x370, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x384, Size: 0x4]
	ACESParameter[] ACESParameters;//[Offset: 0x388, Size: 0xc]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 0x1]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x2cec884
	void SetOcclusionMaskDarkness(float NewValue);// 0x2cec80c
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x2cec79c
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x2cec71c
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x2cec6a4
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x2cec62c
	void SetDynamicShadowCascades(int NewValue);// 0x2cec5b4
	void SetCascadeTransitionFraction(float NewValue);// 0x2cec53c
	void SetCascadeDistributionExponent(float NewValue);// 0x2cec4c4

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 0x10]
	float Bright;//[Offset: 0x10, Size: 0x4]
	float Gray;//[Offset: 0x14, Size: 0x4]
	float ShoulderStrength;//[Offset: 0x18, Size: 0x4]
	float ToeStrength;//[Offset: 0x1c, Size: 0x4]
	float LinearStrength;//[Offset: 0x20, Size: 0x4]
	float LinearAngle;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x24, Size: 0x14]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x28, Size: 0x8]
	float MinInput;//[Offset: 0x30, Size: 0x4]
	float MaxInput;//[Offset: 0x34, Size: 0x4]
	float MinOutput;//[Offset: 0x38, Size: 0x4]
	float MaxOutput;//[Offset: 0x3c, Size: 0x4]
	byte ParamMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x24, Size: 0x4]
	float Max;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x24, Size: 0x14]

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector2D OutVal;//[Offset: 0x4, Size: 0x8]
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 0x8]
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 0x8]
	byte InterpMode;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x24, Size: 0xc]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	byte LockedAxes;//[Offset: 0x31, Size: 0x1]

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x24, Size: 0x14]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	byte LockedAxes;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x38, Size: 0x8]
	Vector MinInput;//[Offset: 0x40, Size: 0xc]
	Vector MaxInput;//[Offset: 0x4c, Size: 0xc]
	Vector MinOutput;//[Offset: 0x58, Size: 0xc]
	Vector MaxOutput;//[Offset: 0x64, Size: 0xc]
	byte ParamModes;//[Offset: 0x70, Size: 0x1]

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x24, Size: 0xc]
	Vector Min;//[Offset: 0x30, Size: 0xc]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	byte LockedAxes;//[Offset: 0x3d, Size: 0x1]
	byte MirrorFlags;//[Offset: 0x3e, Size: 0x1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x24, Size: 0x14]
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	byte LockedAxes;//[Offset: 0x39, Size: 0x1]
	byte MirrorFlags;//[Offset: 0x3b, Size: 0x1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e, Size: 0x1]

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4]
	TwoVectors OutVal;//[Offset: 0x4, Size: 0x18]
	TwoVectors ArriveTangent;//[Offset: 0x1c, Size: 0x18]
	TwoVectors LeaveTangent;//[Offset: 0x34, Size: 0x18]
	byte InterpMode;//[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0xc]
	Vector v2;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: MaterialUniformExpressionParameters.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x1c, Size: 0x4]
	EdGraphNode*[] Nodes;//[Offset: 0x20, Size: 0xc]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString link;//[Offset: 0x74, Size: 0xc]
	FString Excerpt;//[Offset: 0x80, Size: 0xc]

--------------------------------
Class: EndUserSettings.Object
	bool bSendAnonymousUsageDataToEpic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bSendMeanTimeBetweenFailureDataToEpic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bAllowUserIdInUsageData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x1c, Size: 0xc]
	FString MaxedOutMessage;//[Offset: 0x28, Size: 0xc]
	FString EnteredMessage;//[Offset: 0x34, Size: 0xc]
	FString LeftMessage;//[Offset: 0x40, Size: 0xc]
	FString GlobalNameChange;//[Offset: 0x4c, Size: 0xc]
	FString SpecEnteredMessage;//[Offset: 0x58, Size: 0xc]
	FString NewPlayerMessage;//[Offset: 0x64, Size: 0xc]
	FString NewSpecMessage;//[Offset: 0x70, Size: 0xc]

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x2c8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	void OnRep_bEnabled();// 0x133c1bc

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x238, Size: 0x4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x23c, Size: 0xc]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float CustomFogLow_Height;//[Offset: 0x24c, Size: 0x4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x250, Size: 0x4]
	LinearColor CustomFogLow_Color;//[Offset: 0x254, Size: 0x10]
	float CustomFogHigh_Height;//[Offset: 0x264, Size: 0x4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x268, Size: 0x4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x26c, Size: 0x10]
	LinearColor FogInscatteringColor;//[Offset: 0x27c, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x28c, Size: 0x4]
	float InscatteringColorCubemapAngle;//[Offset: 0x290, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x294, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2a4, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2a8, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x2ac, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2b0, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2b4, Size: 0x10]
	float FogHeightFalloff;//[Offset: 0x2c4, Size: 0x4]
	float FogMaxOpacity;//[Offset: 0x2c8, Size: 0x4]
	float StartDistance;//[Offset: 0x2cc, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x2d0, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x2d8, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x2dc, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x2e0, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x2f0, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x2f4, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x2f8, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x2cfded8
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x2cfde60
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x2cfdde4
	void SetVolumetricFogDistance(float NewValue);// 0x2cfdd6c
	void SetVolumetricFogAlbedo(Color NewValue);// 0x2cfdcfc
	void SetVolumetricFog(bool bNewValue);// 0x2cfdc7c
	void SetStartDistance(float Value);// 0x2cfdc04
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x2cfdb8c
	void SetInscatteringTextureTint(LinearColor Value);// 0x2cfdb10
	void SetInscatteringColorCubemapAngle(float Value);// 0x2cfda98
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x2cfda20
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x2cfd9a8
	void SetFogMaxOpacity(float Value);// 0x2cfd930
	void SetFogInscatteringColor(LinearColor Value);// 0x2cfd8b4
	void SetFogHeightFalloff(float Value);// 0x2cfd83c
	void SetFogDensity(float Value);// 0x2cfd7c4
	void SetFogCutoffDistance(float Value);// 0x2cfd74c
	void SetDirectionalInscatteringStartDistance(float Value);// 0x2cfd6d4
	void SetDirectionalInscatteringExponent(float Value);// 0x2cfd65c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x2cfd5e0
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x2cfd520
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x2cfd464

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 0x4]
	float DensityCoefficient;//[Offset: 0x4, Size: 0x4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x1c, Size: 0x4]
	Object* ExportRootScope;//[Offset: 0x20, Size: 0x4]
	FString[] FormatExtension;//[Offset: 0x24, Size: 0xc]
	FString[] FormatDescription;//[Offset: 0x30, Size: 0xc]
	int PreferredFormatIndex;//[Offset: 0x3c, Size: 0x4]
	int TextIndent;//[Offset: 0x40, Size: 0x4]
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: FastMergeableActor.Actor.Object

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x20, Size: 0xc]
	enum Hinting;//[Offset: 0x2c, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x2d, Size: 0x1]
	enum LayoutMethod;//[Offset: 0x2e, Size: 0x1]

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x1c, Size: 0x90]

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 0x7c]

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 0x1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8, Size: 0x58]
	byte AttenuationShape;//[Offset: 0x60, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0x64, Size: 0x4]
	Vector AttenuationShapeExtents;//[Offset: 0x68, Size: 0xc]
	float ConeOffset;//[Offset: 0x74, Size: 0x4]
	float FalloffDistance;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x238, Size: 0x4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 0x1]
	float IntensityMultiplier;//[Offset: 0x240, Size: 0x4]
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x244, Size: 0x4]
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x248, Size: 0x7c]
	delegate OnForceFeedbackFinished;//[Offset: 0x2c4, Size: 0xc]
	void Stop();// 0x132cd00
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x2cff9b8
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x2cff940
	void Play(float StartTime);// 0x1340e70
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x2cff740
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x2cff550

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xa58, Size: 0x4]
	float ServerFlushLogInterval;//[Offset: 0xa5c, Size: 0x4]
	GameInstance* GameInstance;//[Offset: 0xa60, Size: 0x4]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x318, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	int NumSpectators;//[Offset: 0x324, Size: 0x4]
	int NumPlayers;//[Offset: 0x328, Size: 0x4]
	int NumBots;//[Offset: 0x32c, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x330, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x334, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x338, Size: 0x4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x33c, Size: 0xc]
	float InactivePlayerStateLifeSpan;//[Offset: 0x348, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	void StartMatch();// 0x2d00abc
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x2d00a3c
	void Say(FString Msg);// 0x2d00978
	void RestartGame();// 0x2d0095c
	bool ReadyToStartMatch();// 0x1489dd4
	bool ReadyToEndMatch();// 0x2d0092c
	void K2_OnSetMatchState(FName NewState);// 0x1c01fa0
	bool IsMatchInProgress();// 0x2d008fc
	bool HasMatchEnded();// 0x2d008cc
	FName GetMatchState();// 0x2d008a8
	void EndMatch();// 0x2d0088c
	void AbortMatch();// 0x2d00870

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	static void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo);// 0x2d0abd0
	static void UnloadAllStreamLevel(const Object* WorldContextObject);// 0x2d0ab60
	static bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0x2d0a970
	static Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0x2d0a8b4
	static ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2d0a4f8
	static ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2d0a234
	static ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy);// 0x2d09f84
	static ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy);// 0x2d09da8
	static DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0x2d09b18
	static DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0x2d0993c
	static void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0x2d09890
	static void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0x2d097dc
	static void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0x2d09728
	static bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0x2d09664
	static bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x2d09520
	static void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0x2d09464
	static Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0x2d09394
	static Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0x2d092c4
	static bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x2d09158
	static void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShake Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0x2d08f38
	static FString ParseOption(FString Options, FString Key);// 0x2d08cdc
	static void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0x2d08aa0
	static HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, int HitItem, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0x2d08500
	static void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x2d08320
	static SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0x2d08214
	static bool IsGamePaused(const Object* WorldContextObject);// 0x2d0819c
	static bool HasOption(FString Options, FString InKey);// 0x2d07fc0
	static bool HasLaunchOption(FString OptionToCheck);// 0x2d07f04
	static int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x2d07dbc
	static IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0x2d07d2c
	static float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0x2d07cb4
	static float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0x2d07c3c
	static float GetTimeSeconds(const Object* WorldContextObject);// 0x2d07bc4
	static byte GetSurfaceType(out const HitResult Hit);// 0x2d07b28
	static LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0x2d07a6c
	static float GetRealTimeSeconds(const Object* WorldContextObject);// 0x2d079f4
	static Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0x2d07938
	static int GetPlayerControllerID(PlayerController* Player);// 0x2d078c0
	static PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0x2d07804
	static Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0x2d07748
	static PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0x2d0768c
	static FString GetPlatformName();// 0x2d075d4
	static int GetPlatformInt();// 0x2d075ac
	static class Object GetObjectClass(const Object* Object);// 0x2d07534
	static void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0x2d07354
	static int GetIntOption(FString Options, FString Key, int DefaultValue);// 0x2d071d0
	static float GetGlobalTimeDilation(const Object* WorldContextObject);// 0x2d07158
	static GameStateBase* GetGameState(const Object* WorldContextObject);// 0x2d070e0
	static GameModeBase* GetGameMode(const Object* WorldContextObject);// 0x2d07068
	static GameInstance* GetGameInstance(const Object* WorldContextObject);// 0x2d06ff0
	static FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0x2d06ea4
	static float GetAudioTimeSeconds(const Object* WorldContextObject);// 0x2d06e2c
	static void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0x2d06cd8
	static void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0x2d06b8c
	static void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0x2d06a40
	static void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0x2d06884
	static Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0x2d067a8
	static void GetAccurateRealTime(const Object* WorldContextObject, out int Seconds, out float PartialSeconds);// 0x2d0668c
	static void FlushLevelStreaming(const Object* WorldContextObject);// 0x2d0661c
	static Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0x2d064d0
	static bool FindCollisionUV(out const HitResult Hit, int UVChannel, out Vector2D UV);// 0x2d06398
	static void EnableLiveStreaming(bool Enable);// 0x2d06320
	static bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0x2d06220
	static bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0x2d060b0
	static bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0x2d05fb0
	static SaveGame* CreateSaveGameObjectFromBlueprint(Blueprint* SaveGameBlueprint);// 0x2d05f38
	static SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0x2d05ec0
	static PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPawn);// 0x2d05db8
	static void CancelAsyncLoading();// 0x2d05da4
	static void BreakHitResult(out const HitResult Hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out int HitItem, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0x2d05768
	static bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0x2d0544c
	static bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, float GravityScale, float IgnoreGravityDis);// 0x2d04e18
	static bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x2d0481c
	static bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0x2d045bc
	static Actor* BeginSpawningActorFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, bool bNoCollisionFail, Actor* Owner);// 0x2d04390
	static Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0x2d041b0
	static Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0x2d03f90
	static bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0x2d03ba0
	static bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0x2d03844
	static float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x2d035fc
	static float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x2d03470

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0xc]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float ProjectileRadius;//[Offset: 0x1c, Size: 0x4]
	float MaxSimTime;//[Offset: 0x20, Size: 0x4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	byte TraceChannel;//[Offset: 0x25, Size: 0x1]
	byte[] ObjectTypes;//[Offset: 0x28, Size: 0xc]
	Actor*[] ActorsToIgnore;//[Offset: 0x34, Size: 0xc]
	float SimFrequency;//[Offset: 0x40, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x44, Size: 0x4]
	float GravityScale;//[Offset: 0x48, Size: 0x4]
	float IgnoreGravityDis;//[Offset: 0x4c, Size: 0x4]
	byte DrawDebugType;//[Offset: 0x50, Size: 0x1]
	float DrawDebugTime;//[Offset: 0x54, Size: 0x4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0xc]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0xc, Size: 0x1c]
	HitResult HitResult;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2f8, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x300, Size: 0x8]
	int ElapsedTime;//[Offset: 0x308, Size: 0x4]
	void OnRep_MatchState();// 0x2d01c00
	void OnRep_ElapsedTime();// 0x2d01d7c

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x2d0, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x2df07c0
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x2df0748

--------------------------------
Class: SpotLightComponent.PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x350, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x354, Size: 0x4]
	float LightShaftConeAngle;//[Offset: 0x358, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x2df0c68
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x2df0bf0

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x328, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x32c, Size: 0x4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	float LightFalloffExponent;//[Offset: 0x334, Size: 0x4]
	float SourceRadius;//[Offset: 0x338, Size: 0x4]
	float SoftSourceRadius;//[Offset: 0x33c, Size: 0x4]
	float SourceLength;//[Offset: 0x340, Size: 0x4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x344, Size: 0xc]
	void SetSourceRadius(float bNewValue);// 0x2dc0f70
	void SetSourceLength(float NewValue);// 0x2dc0ef8
	void SetSoftSourceRadius(float bNewValue);// 0x2dc0e80
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x2dc0e08
	void SetAttenuationRadius(float NewRadius);// 0x2dc0d90

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x1c, Size: 0xc]
	int SampleRate;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x1c, Size: 0xb0]

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x58]
	RuntimeFloatCurve Amplitude;//[Offset: 0x58, Size: 0x58]

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x5a8, Size: 0xc]
	int InstancingRandomSeed;//[Offset: 0x5b4, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x5b8, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x5bc, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x5c0, Size: 0xc]
	int[] RemovedInstances;//[Offset: 0x5cc, Size: 0xc]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 0x1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x638, Size: 0x4]
	int NumPendingLightmaps;//[Offset: 0x63c, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x640, Size: 0xc]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x2d1a240
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x2d1a184
	bool RemoveInstance(int InstanceIndex);// 0x2d1a0fc
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x2d19f60
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x2d19da0
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x2d19c08
	int GetInstanceCount();// 0x23b434c
	void ClearInstances();// 0x2d19bec
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x2d19ae0
	int AddInstance(out const Transform InstanceTransform);// 0x2d199c0

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x654, Size: 0xc]
	int NumBuiltInstances;//[Offset: 0x660, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x668, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x684, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x6a0, Size: 0xc]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x6ac, Size: 0xc]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b8, Size: 0x1]
	int OcclusionLayerNumNodes;//[Offset: 0x6d8, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x6dc, Size: 0x1c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd, Size: 0x1]
	int MinInstancesToSplitNode;//[Offset: 0x700, Size: 0x4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x2d102d8

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	static float RandomSobolFloat(int Index, int Dimension, float Seed);// 0x2d14fd4
	static Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed);// 0x2d14e78
	static Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed);// 0x2d14d28
	static float NextSobolFloat(int Index, int Dimension, float PreviousValue);// 0x2d14c28
	static Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue);// 0x2d14b14
	static Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue);// 0x2d14a08
	static ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0x2d147c4
	static void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0x2d14470
	static void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0x2d142a0

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8]
	int NumMips;//[Offset: 0x8, Size: 0x4]
	float[] MarginalCDF;//[Offset: 0xc, Size: 0xc]
	float[] ConditionalCDF;//[Offset: 0x18, Size: 0xc]
	Color[] TextureData;//[Offset: 0x24, Size: 0xc]
	Texture2D* Texture;//[Offset: 0x30, Size: 0x8]
	byte Weighting;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	delegate[] ClickedBannerDelegates;//[Offset: 0x2c, Size: 0xc]
	delegate[] ClosedAdDelegates;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding
	FName InputActionName;//[Offset: 0x8, Size: 0x8]
	byte InputKeyEvent;//[Offset: 0x10, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x8, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x10]
	FName FunctionNameToBind;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x18]
	byte InputKeyEvent;//[Offset: 0x20, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x10]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: InputSettings.Object
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x1c, Size: 0xc]
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	float FOVScale;//[Offset: 0x2c, Size: 0x4]
	float DoubleClickTime;//[Offset: 0x30, Size: 0x4]
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x35, Size: 0x1]
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	enum DefaultViewportMouseLockMode;//[Offset: 0x37, Size: 0x1]
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x38, Size: 0xc]
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x44, Size: 0xc]
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	SoftObjectPath DefaultTouchInterface;//[Offset: 0x58, Size: 0x18]
	Key ConsoleKey;//[Offset: 0x70, Size: 0x10]
	Key[] ConsoleKeys;//[Offset: 0x80, Size: 0xc]
	void SaveKeyMappings();// 0x2d18fc0
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2d18ccc
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2d189d0
	static InputSettings* GetInputSettings();// 0x2d189a8
	void GetAxisNames(out FName[] AxisNames);// 0x2d188dc
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0x2d18684
	void GetActionNames(out FName[] ActionNames);// 0x2d185b8
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0x2d18360
	void ForceRebuildKeymaps();// 0x2d1834c
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2d18058
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2d17d5c

--------------------------------
Class: InputAxisConfigEntry
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8]
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: InputAxisProperties
	float DeadZone;//[Offset: 0x0, Size: 0x4]
	float Sensitivity;//[Offset: 0x4, Size: 0x4]
	float Exponent;//[Offset: 0x8, Size: 0x4]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	Key Key;//[Offset: 0x8, Size: 0x10]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8]
	Key Key;//[Offset: 0x8, Size: 0x10]
	float Scale;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding
	byte InputKeyEvent;//[Offset: 0x1, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x40, Size: 0x4]
	float CompressTolerance;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0xf4, Size: 0x4]
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]
	enum BehaviourType;//[Offset: 0xf9, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1]
	delegate OnInterpToReverse;//[Offset: 0xfc, Size: 0xc]
	delegate OnInterpToStop;//[Offset: 0x108, Size: 0xc]
	delegate OnWaitBeginDelegate;//[Offset: 0x114, Size: 0xc]
	delegate OnWaitEndDelegate;//[Offset: 0x120, Size: 0xc]
	delegate OnResetDelegate;//[Offset: 0x12c, Size: 0xc]
	float MaxSimulationTimeStep;//[Offset: 0x138, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x13c, Size: 0x4]
	InterpControlPoint[] ControlPoints;//[Offset: 0x140, Size: 0xc]
	void StopSimulating(out const HitResult HitResult);// 0x2d1d118
	void RestartMovement(float InitialDirection);// 0x2d1d0a0
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x1c01fa0
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x1c01fa0
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x1c01fa0
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x1c01fa0
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x1c01fa0
	void FinaliseControlPoints();// 0x2d1d08c

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0xc]
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x48, Size: 0x14]
	float CurveTension;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x60, Size: 0x8]
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x68, Size: 0xc]
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]

--------------------------------
Class: AnimControlTrackKey
	float StartTime;//[Offset: 0x0, Size: 0x4]
	AnimSequence* AnimSeq;//[Offset: 0x4, Size: 0x4]
	float AnimStartOffset;//[Offset: 0x8, Size: 0x4]
	float AnimEndOffset;//[Offset: 0xc, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x10, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x48, Size: 0x14]
	float CurveTension;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrackKey[] BoolTrack;//[Offset: 0x48, Size: 0xc]
	FName PropertyName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: BoolTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	DirectorTrackCut[] CutTrack;//[Offset: 0x48, Size: 0xc]
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: DirectorTrackCut
	float Time;//[Offset: 0x0, Size: 0x4]
	float TransitionTime;//[Offset: 0x4, Size: 0x4]
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8]
	int ShotNumber;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrackKey[] EventTrack;//[Offset: 0x48, Size: 0xc]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: EventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FName EventName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	LinearColor FadeColor;//[Offset: 0x64, Size: 0x10]

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	class Object* AnimBlueprintClass;//[Offset: 0x60, Size: 0x4]
	class AnimInstance* AnimClass;//[Offset: 0x64, Size: 0x4]
	FName ParamName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x60, Size: 0xc]
	FName ParamName;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	Property* InterpProperty;//[Offset: 0x1c, Size: 0x4]
	Object* PropertyOuterObjectInst;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	BoolProperty* BoolProperty;//[Offset: 0x28, Size: 0x4]
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x1c, Size: 0x4]
	float ResetFloat;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x1c, Size: 0xc]
	float[] ResetFloats;//[Offset: 0x28, Size: 0xc]
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x34, Size: 0xc]
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: PrimitiveMaterialRef
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x4]
	DecalComponent* Decal;//[Offset: 0x4, Size: 0x4]
	int ElementIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x1c, Size: 0x1]
	float LastUpdatePosition;//[Offset: 0x20, Size: 0x4]
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x1c, Size: 0xc]
	Vector[] ResetVectors;//[Offset: 0x28, Size: 0xc]
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x34, Size: 0xc]
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x60, Size: 0xc]
	FName ParamName;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x1c, Size: 0x1]
	float LastUpdatePosition;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x48, Size: 0x14]
	float CurveTension;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: InterpCurveLinearColor
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointLinearColor
	float InVal;//[Offset: 0x0, Size: 0x4]
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10]
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10]
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10]
	byte InterpMode;//[Offset: 0x34, Size: 0x1]

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x60, Size: 0x1]
	InterpLookupTrack LookupTrack;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: ParticleReplayTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x48, Size: 0xc]
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: ToggleTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	byte ToggleAction;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x48, Size: 0xc]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: VisibilityTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	byte Action;//[Offset: 0x4, Size: 0x1]
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x1c, Size: 0x2]
	uint32 UnsignedInt32Variable;//[Offset: 0x20, Size: 0x4]
	uint64 UnsignedInt64Variable;//[Offset: 0x28, Size: 0x8]
	int8 SignedInt8Variable;//[Offset: 0x30, Size: 0x1]
	int16 SignedInt16Variable;//[Offset: 0x32, Size: 0x2]
	int64 SignedInt64Variable;//[Offset: 0x38, Size: 0x8]
	byte UnsignedInt8Variable;//[Offset: 0x40, Size: 0x1]
	int SignedInt32Variable;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: ObjectCollectorInterface.Interface.Object

--------------------------------
Class: ReusableActorComponent.Interface.Object

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	static void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0x2d23f98
	static void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0x2d23df8
	static void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0x2d23cb0
	static void Array_Shuffle(out const int[] TargetArray);// 0x2d23bfc
	static void Array_Set(out const int[] TargetArray, int Index, out const int Item, bool bSizeToFit);// 0x2d23984
	static void Array_Resize(out const int[] TargetArray, int Size);// 0x2d23880
	static bool Array_RemoveItem(out const int[] TargetArray, out const int Item);// 0x2d236b8
	static void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0x2d235b4
	static int Array_Length(out const int[] TargetArray);// 0x2d234f8
	static int Array_LastIndex(out const int[] TargetArray);// 0x2d2343c
	static bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0x2d23330
	static void Array_Insert(out const int[] TargetArray, out const int NewItem, int Index);// 0x2d23110
	static void Array_Get(out const int[] TargetArray, int Index, out int Item);// 0x2d22ef4
	static int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0x2d22d2c
	static bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0x2d22b5c
	static void Array_Clear(out const int[] TargetArray);// 0x2d22aa8
	static void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0x2d22970
	static int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0x2d22790
	static int Array_Add(out const int[] TargetArray, out const int NewItem);// 0x2d225b0

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	static void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool Success);// 0x2d24c70
	static bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0x2d24b80
	static Guid NewGuid();// 0x2d24b44
	static bool IsValid_Guid(out const Guid InGuid);// 0x2d24ab4
	static void Invalidate_Guid(out Guid InGuid);// 0x2d24a2c
	static bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0x2d2493c
	static FString Conv_GuidToString(out const Guid InGuid);// 0x2d24824

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	static float PointerEvent_TouchForce(out const PointerEvent Input);// 0x2d299e0
	static bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0x2d297b4
	static bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0x2d292d0
	static float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0x2d290a0
	static int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0x2d28e74
	static int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0x2d28c48
	static Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0x2d28a14
	static int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0x2d287e8
	static Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0x2d285b4
	static enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0x2d28388
	static Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0x2d28154
	static Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0x2d27d5c
	static Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0x2d27b28
	static bool Key_IsVectorAxis(out const Key Key);// 0x2d27984
	static bool Key_IsMouseButton(out const Key Key);// 0x2d277e0
	static bool Key_IsModifierKey(out const Key Key);// 0x2d2763c
	static bool Key_IsKeyboardKey(out const Key Key);// 0x2d27498
	static bool Key_IsGamepadKey(out const Key Key);// 0x2d272f4
	static bool Key_IsFloatAxis(out const Key Key);// 0x2d27150
	static FText Key_GetDisplayName(out const Key Key);// 0x2d26e90
	static bool InputEvent_IsShiftDown(out const InputEvent Input);// 0x2d26de8
	static bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0x2d26d40
	static bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0x2d26c98
	static bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0x2d26bf0
	static bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0x2d26b48
	static bool InputEvent_IsRepeat(out const InputEvent Input);// 0x2d26aa0
	static bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0x2d269f8
	static bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0x2d26950
	static bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0x2d268a8
	static bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0x2d26800
	static bool InputEvent_IsControlDown(out const InputEvent Input);// 0x2d26758
	static bool InputEvent_IsCommandDown(out const InputEvent Input);// 0x2d266b0
	static bool InputEvent_IsAltDown(out const InputEvent Input);// 0x2d26608
	static int GetUserIndex(out const KeyEvent Input);// 0x2d2640c
	static Key GetKey(out const KeyEvent Input);// 0x2d26044
	static float GetAnalogValue(out const AnalogInputEvent Input);// 0x2d25e40
	static bool EqualEqual_KeyKey(Key A, Key B);// 0x2d258a8
	static bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0x2d252b8
	static void CalibrateTilt();// 0x2d252a4

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	static bool SetCurrentLocale(FString Culture, const bool SaveToConfig);// 0x2d2b0e0
	static bool SetCurrentLanguageAndLocale(FString Culture, const bool SaveToConfig);// 0x2d2afd8
	static bool SetCurrentLanguage(FString Culture, const bool SaveToConfig);// 0x2d2aed0
	static bool SetCurrentCulture(FString Culture, const bool SaveToConfig);// 0x2d2adc8
	static bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString Culture, const bool SaveToConfig);// 0x2d2ac78
	static FString GetCurrentLocale();// 0x2d2abc0
	static FString GetCurrentLanguage();// 0x2d2ab08
	static FString GetCurrentCulture();// 0x2d2ab08
	static FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0x2d2aa04
	static void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0x2d2a944

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	static void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0x2d2bb28
	static void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0x2d2b9e4
	static LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x2d2b8d0
	static float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x2d2b7d0
	static MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent);// 0x2d2b714

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	static int Xor_IntInt(int A, int B);// 0x2d41430
	static float VSizeSquared(Vector A);// 0x2d413a8
	static float VSize2DSquared(Vector2D A);// 0x2d4132c
	static float VSize2D(Vector2D A);// 0x2d41294
	static float VSize(Vector A);// 0x2d411f0
	static Vector VLerp(Vector A, Vector B, float alpha);// 0x2d410c8
	static Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x2d40f5c
	static Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x2d40df4
	static Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x2d40b84
	static Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x2d40a30
	static Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x2d408dc
	static Vector VEase(Vector A, Vector B, float alpha, byte EasingFunc, float BlendExp, int Steps);// 0x2d406e4
	static DateTime UtcNow();// 0x2d406ac
	static Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0x2d40550
	static Vector TransformLocation(out const Transform T, Vector Location);// 0x2d40340
	static Vector TransformDirection(out const Transform T, Vector Direction);// 0x2d40160
	static DateTime Today();// 0x2d40100
	static Transform TLerp(out const Transform A, out const Transform B, float alpha, byte InterpMode);// 0x2d3fec0
	static Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0x2d3fc80
	static Timespan TimespanZeroValue();// 0x2d2fe60
	static float TimespanRatio(Timespan A, Timespan B);// 0x2d3fb9c
	static Timespan TimespanMinValue();// 0x2d3fb7c
	static Timespan TimespanMaxValue();// 0x2d3fb5c
	static bool TimespanFromString(FString TimespanString, out Timespan Result);// 0x2d3f9b0
	static Transform TEase(out const Transform A, out const Transform B, float alpha, byte EasingFunc, float BlendExp, int Steps);// 0x2d3f6e0
	static float Tan(float A);// 0x2d3f65c
	static Vector Subtract_VectorVector(Vector A, Vector B);// 0x2d3f590
	static Vector Subtract_VectorInt(Vector A, int B);// 0x2d3f4c0
	static Vector Subtract_VectorFloat(Vector A, float B);// 0x2d3f3f4
	static Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0x2d3f338
	static Vector2D Subtract_Vector2DFloat(Vector2D A, float B);// 0x2d3f278
	static Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0x2d3f058
	static int Subtract_IntInt(int A, int B);// 0x2d3f1c0
	static float Subtract_FloatFloat(float A, float B);// 0x2d3f104
	static DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0x2d3f058
	static Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0x2d3f058
	static byte Subtract_ByteByte(byte A, byte B);// 0x2d3ef9c
	static float Square(float A);// 0x2d3ef24
	static float Sqrt(float A);// 0x2d3ee78
	static float Sin(float A);// 0x2d3ee00
	static int SignOfInteger(int A);// 0x2d3ed80
	static float SignOfFloat(float A);// 0x2d3ecec
	static void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0x2d3ec20
	static Vector SelectVector(Vector A, Vector B, bool bPickA);// 0x2d3e668
	static Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0x2d3ea00
	static FString SelectString(FString A, FString B, bool bPickA);// 0x2d3e79c
	static Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0x2d3e668
	static Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0x2d3e440
	static int SelectInt(int A, int B, bool bPickA);// 0x2d3e440
	static float SelectFloat(float A, float B, bool bPickA);// 0x2d3e440
	static LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0x2d3e548
	static class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0x2d3e440
	static void SeedRandomStream(out RandomStream Stream);// 0x2d3e3bc
	static int Round(float A);// 0x2d3e330
	static Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0x2d3e264
	static Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0x2d3e14c
	static Rotator RLerp(Rotator A, Rotator B, float alpha, bool bShortestPath);// 0x2d3dfec
	static Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x2d3de84
	static Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x2d3dd1c
	static void RGBToHSV_Vector(const LinearColor RGB, out LinearColor HSV);// 0x2d3dc44
	static void RGBToHSV(const LinearColor InColor, out float H, out float S, out float V, out float A);// 0x2d3da58
	static void ResetVectorSpringState(out VectorSpringState SpringState);// 0x2d3d9b0
	static void ResetRandomStream(out const RandomStream Stream);// 0x2d3d92c
	static void ResetFloatSpringState(out FloatSpringState SpringState);// 0x2d3d8a8
	static Rotator REase(Rotator A, Rotator B, float alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0x2d3d660
	static Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0x2d3d4e4
	static Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0x2d3d3d0
	static Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0x2d3d23c
	static Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0x2d3d118
	static Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0x2d3cfe4
	static Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0x2d3cf10
	static Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0x2d3cdcc
	static Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0x2d3cce8
	static Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0x2d3cc4c
	static Vector RandomUnitVector();// 0x2d3cc0c
	static Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0x2d3cb20
	static Rotator RandomRotator(bool bRoll);// 0x2d3ca90
	static Vector RandomPointInBoundingBox(out const Vector Origin, out const Vector BoxExtent);// 0x2d3c958
	static int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0x2d3c844
	static int RandomIntegerInRange(int Min, int Max);// 0x2d3c740
	static int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0x2d3c670
	static int RandomInteger(int Max);// 0x2d3c5b8
	static float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0x2d3c4a4
	static float RandomFloatInRange(float Min, float Max);// 0x2d3c3c0
	static float RandomFloatFromStream(out const RandomStream Stream);// 0x2d3c334
	static float RandomFloat();// 0x2d3c2f8
	static bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0x2d3c228
	static bool RandomBoolWithWeight(float Weight);// 0x2d3c1b0
	static bool RandomBoolFromStream(out const RandomStream Stream);// 0x2d3c124
	static bool RandomBool();// 0x2d3c0d0
	static float RadiansToDegrees(float A);// 0x2d3c050
	static Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0x2d3bf24
	static Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0x2d3be38
	static Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0x2d3bcfc
	static bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0x2d3bbe8
	static int Percent_IntInt(int A, int B);// 0x2d3bb18
	static float Percent_FloatFloat(float A, float B);// 0x2d3b958
	static byte Percent_ByteByte(byte A, byte B);// 0x2d3b888
	static int Or_IntInt(int A, int B);// 0x2d3b7cc
	static DateTime Now();// 0x2d3b794
	static bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x2d3b654
	static bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x2d3b530
	static bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0x2d3b0bc
	static bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x2d3b300
	static bool NotEqual_ObjectObject(Object* A, Object* B);// 0x2d3affc
	static bool NotEqual_NameName(FName A, FName B);// 0x2d3b238
	static bool NotEqual_IntInt(int A, int B);// 0x2d3affc
	static bool NotEqual_FloatFloat(float A, float B);// 0x2d3b170
	static bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x2d3b0bc
	static bool NotEqual_ClassClass(class Object A, class Object B);// 0x2d3affc
	static bool NotEqual_ByteByte(byte A, byte B);// 0x2d3af38
	static bool NotEqual_BoolBool(bool A, bool B);// 0x2d2d1ec
	static bool Not_PreBool(bool A);// 0x2d3aeb8
	static int Not_Int(int A);// 0x2d3ae40
	static float NormalizeToRange(float Value, float RangeMin, float RangeMax);// 0x2d3ad40
	static Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0x2d3ac70
	static float NormalizeAxis(float Angle);// 0x2d3abf8
	static Vector2D Normal2D(Vector2D A);// 0x2d3ab24
	static Vector Normal(Vector A);// 0x2d3aa08
	static Vector NegateVector(Vector A);// 0x2d3a980
	static Rotator NegateRotator(Rotator A);// 0x2d3a8f0
	static bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0x2d3a690
	static bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);// 0x2d3a570
	static float MultiplyMultiply_FloatFloat(float Base, float Exp);// 0x2d3a4b4
	static float MultiplyByPi(float Value);// 0x2d3a434
	static Vector Multiply_VectorVector(Vector A, Vector B);// 0x2d3a368
	static Vector Multiply_VectorInt(Vector A, int B);// 0x2d3a048
	static Vector Multiply_VectorFloat(Vector A, float B);// 0x2d39f7c
	static Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0x2d3a2ac
	static Vector2D Multiply_Vector2DFloat(Vector2D A, float B);// 0x2d3a1ec
	static Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0x2d3a118
	static Rotator Multiply_RotatorInt(Rotator A, int B);// 0x2d3a048
	static Rotator Multiply_RotatorFloat(Rotator A, float B);// 0x2d39f7c
	static LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x2d39ec4
	static LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0x2d39e08
	static int Multiply_IntInt(int A, int B);// 0x2d39d4c
	static float Multiply_IntFloat(int A, float B);// 0x2d39c8c
	static float Multiply_FloatFloat(float A, float B);// 0x2d39bd0
	static byte Multiply_ByteByte(byte A, byte B);// 0x2d39b14
	static Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0x2d39a38
	static void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0x2d398c4
	static void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0x2d39750
	static void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0x2d395dc
	static void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0x2d392dc
	static int Min(int A, int B);// 0x2d39220
	static void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0x2d390ac
	static void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0x2d38f38
	static void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0x2d38dc4
	static int Max(int A, int B);// 0x2d38d08
	static float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x2d38b7c
	static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x2d389f0
	static Vector2D MakeVector2D(float X, float Y);// 0x2d38938
	static Vector MakeVector(float X, float Y, float Z);// 0x2d3883c
	static Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0x2d38708
	static Timespan MakeTimespan2(int Days, int hours, int Minutes, int Seconds, int FractionNano);// 0x2d38570
	static Timespan MakeTimespan(int Days, int hours, int Minutes, int Seconds, int Milliseconds);// 0x2d383d8
	static Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0x2d382dc
	static Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0x2d381e0
	static Rotator MakeRotFromZ(out const Vector Z);// 0x2d38138
	static Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0x2d3803c
	static Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0x2d37f40
	static Rotator MakeRotFromY(out const Vector Y);// 0x2d37e98
	static Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0x2d37d9c
	static Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0x2d37ca0
	static Rotator MakeRotFromX(out const Vector X);// 0x2d37bf8
	static Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0x2d37af8
	static Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0x2d379e4
	static RandomStream MakeRandomStream(int InitialSeed);// 0x2d37964
	static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0x2d37864
	static Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0x2d37794
	static DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);// 0x2d3756c
	static LinearColor MakeColor(float R, float G, float B, float A);// 0x2d3742c
	static Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0x2d37378
	static Box MakeBox(Vector Min, Vector Max);// 0x2d372b4
	static float Loge(float A);// 0x2d3723c
	static float Log(float A, float Base);// 0x2d37180
	static bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0x2d36f64
	static bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0x2d36d84
	static LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float alpha);// 0x2d36c6c
	static LinearColor LinearColorLerp(LinearColor A, LinearColor B, float alpha);// 0x2d36b68
	static Vector LessLess_VectorRotator(Vector A, Rotator B);// 0x2d36a8c
	static bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0x2d36844
	static bool LessEqual_IntInt(int A, int B);// 0x2d369cc
	static bool LessEqual_FloatFloat(float A, float B);// 0x2d36904
	static bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x2d36844
	static bool LessEqual_ByteByte(byte A, byte B);// 0x2d36780
	static bool Less_TimespanTimespan(Timespan A, Timespan B);// 0x2d36538
	static bool Less_IntInt(int A, int B);// 0x2d366c0
	static bool Less_FloatFloat(float A, float B);// 0x2d365f8
	static bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0x2d36538
	static bool Less_ByteByte(byte A, byte B);// 0x2d36474
	static float Lerp(float A, float B, float alpha);// 0x2d3636c
	static bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0x2d361d0
	static bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0x2d360c4
	static bool IsMorning(DateTime A);// 0x2d36030
	static bool IsLeapYear(int Year);// 0x2d35fb8
	static bool IsAfternoon(DateTime A);// 0x2d35f24
	static Transform InvertTransform(out const Transform T);// 0x2d35ce0
	static Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0x2d35b80
	static Vector InverseTransformLocation(out const Transform T, Vector Location);// 0x2d35910
	static Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0x2d35730
	static float InverseLerp(float A, float B, float Value);// 0x2d35624
	static bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0x2d35484
	static bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);// 0x2d352e4
	static float Hypotenuse(float Width, float Height);// 0x2d35228
	static void HSVToRGB_Vector(const LinearColor HSV, out LinearColor RGB);// 0x2d35150
	static LinearColor HSVToRGB(float H, float S, float V, float A);// 0x2d34ff4
	static float GridSnap_Float(float Location, float GridSize);// 0x2d34efc
	static Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0x2d34e20
	static bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0x2d34bd8
	static bool GreaterEqual_IntInt(int A, int B);// 0x2d34d60
	static bool GreaterEqual_FloatFloat(float A, float B);// 0x2d34c98
	static bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x2d34bd8
	static bool GreaterEqual_ByteByte(byte A, byte B);// 0x2d34b14
	static bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0x2d348cc
	static bool Greater_IntInt(int A, int B);// 0x2d34a54
	static bool Greater_FloatFloat(float A, float B);// 0x2d3498c
	static bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0x2d348cc
	static bool Greater_ByteByte(byte A, byte B);// 0x2d34808
	static int GetYear(DateTime A);// 0x2d3478c
	static void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0x2d34670
	static Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0x2d34594
	static Vector GetUpVector(Rotator InRot);// 0x2d34510
	static float GetTotalSeconds(Timespan A);// 0x2d34488
	static float GetTotalMinutes(Timespan A);// 0x2d34400
	static float GetTotalMilliseconds(Timespan A);// 0x2d34378
	static float GetTotalHours(Timespan A);// 0x2d342f0
	static float GetTotalDays(Timespan A);// 0x2d34268
	static Timespan GetTimeOfDay(DateTime A);// 0x2d341e0
	static float GetTAU();// 0x2d341c0
	static int GetSeconds(Timespan A);// 0x2d34138
	static int GetSecond(DateTime A);// 0x2d34138
	static Vector GetRightVector(Rotator InRot);// 0x2d340b4
	static Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0x2d33fe4
	static float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x2d33ecc
	static float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x2d33db4
	static float GetPI();// 0x2d33d94
	static int GetMonth(DateTime A);// 0x2d33d18
	static int GetMinutes(Timespan A);// 0x2d33c90
	static int GetMinute(DateTime A);// 0x2d33c90
	static float GetMinElement(Vector A);// 0x2d33c04
	static int GetMilliseconds(Timespan A);// 0x2d33b74
	static int GetMillisecond(DateTime A);// 0x2d33af0
	static float GetMaxElement(Vector A);// 0x2d33a64
	static int GetHours(Timespan A);// 0x2d33960
	static int GetHour12(DateTime A);// 0x2d339e8
	static int GetHour(DateTime A);// 0x2d33960
	static Vector GetForwardVector(Rotator InRot);// 0x2d338dc
	static Timespan GetDuration(Timespan A);// 0x2d33860
	static Vector GetDirectionUnitVector(Vector from, Vector to);// 0x2d3370c
	static int GetDays(Timespan A);// 0x2d33690
	static int GetDayOfYear(DateTime A);// 0x2d33614
	static int GetDay(DateTime A);// 0x2d33598
	static DateTime GetDate(DateTime A);// 0x2d3350c
	static void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0x2d33320
	static void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0x2d331ac
	static IntVector FTruncVector(out const Vector InVector);// 0x2d3310c
	static int FTrunc(float A);// 0x2d33094
	static Timespan FromSeconds(float Seconds);// 0x2d33014
	static Timespan FromMinutes(float Minutes);// 0x2d32f94
	static Timespan FromMilliseconds(float Milliseconds);// 0x2d32f14
	static Timespan FromHours(float hours);// 0x2d32e94
	static Timespan FromDays(float Days);// 0x2d32e14
	static float Fraction(float A);// 0x2d32d94
	static int FMod(float Dividend, float Divisor, out float Remainder);// 0x2d32c84
	static float FMin(float A, float B);// 0x2d32bc0
	static float FMax(float A, float B);// 0x2d32afc
	static float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x2d328c8
	static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0x2d327c8
	static float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x2d32684
	static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x2d32540
	static float FInterpEaseInOut(float A, float B, float alpha, float Exponent);// 0x2d323fc
	static void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0x2d32200
	static Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0x2d320d4
	static Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x2d31fa4
	static Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x2d31e90
	static int FFloor(float A);// 0x2d31e10
	static float FClamp(float Value, float Min, float Max);// 0x2d31cfc
	static int FCeil(float A);// 0x2d31c7c
	static float Exp(float A);// 0x2d31c04
	static bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x2d31ac4
	static bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x2d319a0
	static bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0x2d31800
	static bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0x2d3137c
	static bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x2d315c8
	static bool EqualEqual_ObjectObject(Object* A, Object* B);// 0x2d312bc
	static bool EqualEqual_NameName(FName A, FName B);// 0x2d314fc
	static bool EqualEqual_IntInt(int A, int B);// 0x2d312bc
	static bool EqualEqual_FloatFloat(float A, float B);// 0x2d31434
	static bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x2d3137c
	static bool EqualEqual_ClassClass(class Object A, class Object B);// 0x2d312bc
	static bool EqualEqual_ByteByte(byte A, byte B);// 0x2d311f8
	static bool EqualEqual_BoolBool(bool A, bool B);// 0x2d31124
	static float Ease(float A, float B, float alpha, byte EasingFunc, float BlendExp, int Steps);// 0x2d30f48
	static float DotProduct2D(Vector2D A, Vector2D B);// 0x2d30e8c
	static float Dot_VectorVector(Vector A, Vector B);// 0x2d30dc0
	static Vector Divide_VectorVector(Vector A, Vector B);// 0x2d30cb4
	static Vector Divide_VectorInt(Vector A, int B);// 0x2d30bb0
	static Vector Divide_VectorFloat(Vector A, float B);// 0x2d30ab0
	static Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0x2d309b8
	static Vector2D Divide_Vector2DFloat(Vector2D A, float B);// 0x2d308c0
	static Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0x2d307ec
	static int Divide_IntInt(int A, int B);// 0x2d3071c
	static float Divide_FloatFloat(float A, float B);// 0x2d30560
	static byte Divide_ByteByte(byte A, byte B);// 0x2d30490
	static float DegTan(float A);// 0x2d30408
	static float DegSin(float A);// 0x2d30380
	static float DegreesToRadians(float A);// 0x2d30300
	static float DegCos(float A);// 0x2d30278
	static float DegAtan2(float A, float B);// 0x2d301ac
	static float DegAtan(float A);// 0x2d30124
	static float DegAsin(float A);// 0x2d30078
	static float DegAcos(float A);// 0x2d2ffcc
	static int DaysInYear(int Year);// 0x2d2ff54
	static int DaysInMonth(int Year, int Month);// 0x2d2fe80
	static DateTime DateTimeMinValue();// 0x2d2fe60
	static DateTime DateTimeMaxValue();// 0x2d2fe38
	static bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0x2d2fc8c
	static bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0x2d2fab8
	static float CrossProduct2D(Vector2D A, Vector2D B);// 0x2d2f9fc
	static Vector Cross_VectorVector(Vector A, Vector B);// 0x2d2f918
	static Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0x2d2f808
	static float Cos(float A);// 0x2d2f790
	static Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0x2d2f5e0
	static Vector2D Conv_VectorToVector2D(Vector InVector);// 0x2d2f568
	static Transform Conv_VectorToTransform(Vector InLocation);// 0x2d2f4ac
	static Rotator Conv_VectorToRotator(Vector InVec);// 0x2d2f41c
	static LinearColor Conv_VectorToLinearColor(Vector InVec);// 0x2d2f394
	static Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0x2d2f2e0
	static Vector Conv_RotatorToVector(Rotator InRot);// 0x2d2f250
	static Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0x2d2f1e4
	static Color Conv_LinearColorToColor(LinearColor InLinearColor);// 0x2d2f160
	static Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0x2d2f0c0
	static IntVector Conv_IntToIntVector(int inInt);// 0x2d2ef50
	static float Conv_IntToFloat(int inInt);// 0x2d2f048
	static byte Conv_IntToByte(int inInt);// 0x13406bc
	static bool Conv_IntToBool(int inInt);// 0x2d2efcc
	static Vector Conv_FloatToVector(float InFloat);// 0x2d2ef50
	static LinearColor Conv_FloatToLinearColor(float InFloat);// 0x2d2eecc
	static LinearColor Conv_ColorToLinearColor(Color InColor);// 0x2d2ee4c
	static int Conv_ByteToInt(byte InByte);// 0x13420a0
	static float Conv_ByteToFloat(byte InByte);// 0x2d2edd0
	static int Conv_BoolToInt(bool InBool);// 0x2d2ed54
	static float Conv_BoolToFloat(bool InBool);// 0x2d2eccc
	static byte Conv_BoolToByte(bool InBool);// 0x2d2ec50
	static Transform ComposeTransforms(out const Transform A, out const Transform B);// 0x2d2eaa0
	static Rotator ComposeRotators(Rotator A, Rotator B);// 0x2d2e9c4
	static bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0x2d2e908
	static Vector ClampVectorSize(Vector A, float Min, float Max);// 0x2d2e7f4
	static float ClampAxis(float Angle);// 0x2d2e77c
	static float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);// 0x2d2e67c
	static int Clamp(int Value, int Min, int Max);// 0x2d2e574
	static LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0x2d2e414
	static void BreakVector2D(Vector2D InVec, out float X, out float Y);// 0x2d2e2fc
	static void BreakVector(Vector InVec, out float X, out float Y, out float Z);// 0x2d2e18c
	static void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0x2d2df60
	static void BreakTimespan2(Timespan InTimespan, out int Days, out int hours, out int Minutes, out int Seconds, out int FractionNano);// 0x2d2dd34
	static void BreakTimespan(Timespan InTimespan, out int Days, out int hours, out int Minutes, out int Seconds, out int Milliseconds);// 0x2d2db10
	static void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0x2d2d998
	static void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0x2d2d828
	static void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0x2d2d74c
	static void BreakDateTime(DateTime InDateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int Second, out int Millisecond);// 0x2d2d480
	static void BreakColor(const LinearColor InColor, out float R, out float G, out float B, out float A);// 0x2d2d2b8
	static bool BooleanXOR(bool A, bool B);// 0x2d2d1ec
	static bool BooleanOR(bool A, bool B);// 0x2d2d12c
	static bool BooleanNOR(bool A, bool B);// 0x2d2d068
	static bool BooleanNAND(bool A, bool B);// 0x2d2cf94
	static bool BooleanAND(bool A, bool B);// 0x2d2cec8
	static byte BMin(byte A, byte B);// 0x2d2ce08
	static byte BMax(byte A, byte B);// 0x2d2cd48
	static float Atan2(float A, float B);// 0x2d2cc8c
	static float Atan(float A);// 0x2d2cc14
	static float Asin(float A);// 0x2d2cb78
	static int And_IntInt(int A, int B);// 0x2d2cabc
	static Vector Add_VectorVector(Vector A, Vector B);// 0x2d2c9f0
	static Vector Add_VectorInt(Vector A, int B);// 0x2d2c920
	static Vector Add_VectorFloat(Vector A, float B);// 0x2d2c854
	static Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0x2d2c798
	static Vector2D Add_Vector2DFloat(Vector2D A, float B);// 0x2d2c6d8
	static Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0x2d2c568
	static int Add_IntInt(int A, int B);// 0x13bb77c
	static float Add_FloatFloat(float A, float B);// 0x2d2c61c
	static DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0x2d2c568
	static byte Add_ByteByte(byte A, byte B);// 0x2d2c4ac
	static float Acos(float A);// 0x2d2c410
	static int Abs_Int(int A);// 0x2d2c394
	static float Abs(float A);// 0x2d2c31c

--------------------------------
Class: VectorSpringState

--------------------------------
Class: Timespan

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FloatSpringState

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	static void MarkBit(out int Data, int Index);// 0x2d495d8
	static bool HasUnmarkedBit(int Data, int NumBits);// 0x2d4951c
	static bool HasMarkedBit(int Data, int NumBits);// 0x2d49460
	static byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0x2d493a4
	static int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0x2d49258
	static int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x2d49158
	static int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x2d49058
	static byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0x2d48f9c
	static FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0x2d48e58
	static FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0x2d48d94
	static void ClearBit(out int Data, int Index);// 0x2d48ccc
	static void ClearAllBits(out int Data);// 0x2d48c4c
	static bool BitIsMarked(int Data, int Index);// 0x2d48b90

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	static Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0x2d4ae64
	static void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0x2d4adf4
	static SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0x2d4ab48
	static void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0x2d4a988
	static void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0x2d4a7c8
	static void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0x2d4a700
	static void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0x2d4a608
	static TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format);// 0x2d4a4c4
	static void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0x2d4a3cc
	static void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0x2d4a2d4
	static void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0x2d49f24
	static void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0x2d49d68

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	static FString TrimTrailing(FString sourceString);// 0x2d5158c
	static FString Trim(FString sourceString);// 0x2d51450
	static FString ToUpper(FString sourceString);// 0x2d51314
	static FString ToLower(FString sourceString);// 0x2d511d8
	static FString TimeSecondsToString(float InSeconds);// 0x2d510d8
	static bool StartsWith(FString sourceString, FString InPrefix, byte SearchCase);// 0x2d50f54
	static bool Split(FString sourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0x2d50c58
	static FString RightPad(FString sourceString, int ChCount);// 0x2d50ad8
	static FString RightChop(FString sourceString, int count);// 0x2d50958
	static FString Right(FString sourceString, int count);// 0x2d507d8
	static FString Reverse(FString sourceString);// 0x2d5069c
	static int ReplaceInline(out FString sourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0x2d50480
	static FString Replace(FString sourceString, FString from, FString to, byte SearchCase);// 0x2d501f4
	static FString[] ParseIntoArray(FString sourceString, FString Delimiter, const bool CullEmptyStrings);// 0x2d4ff48
	static bool NotEqual_StrStr(FString A, FString B);// 0x2d4fe08
	static bool NotEqual_StriStri(FString A, FString B);// 0x2d4fcc8
	static FString Mid(FString sourceString, int Start, int count);// 0x2d4f144
	static bool MatchesWildcard(FString sourceString, FString Wildcard, byte SearchCase);// 0x2d4fb44
	static int Len(FString S);// 0x2d4fa88
	static FString LeftPad(FString sourceString, int ChCount);// 0x2d4f908
	static FString LeftChop(FString sourceString, int count);// 0x2d4f788
	static FString Left(FString sourceString, int count);// 0x2d4f608
	static FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0x2d4f3c4
	static bool IsNumeric(FString sourceString);// 0x2d4f308
	static FString GetSubstring(FString sourceString, int StartIndex, int Length);// 0x2d4f144
	static int GetCharacterAsNumber(FString sourceString, int Index);// 0x2d4f044
	static FString[] GetCharacterArrayFromString(FString sourceString);// 0x2d4ee68
	static int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0x2d4ec40
	static bool EqualEqual_StrStr(FString A, FString B);// 0x2d4eb00
	static bool EqualEqual_StriStri(FString A, FString B);// 0x2d4e9c0
	static bool EndsWith(FString sourceString, FString InSuffix, byte SearchCase);// 0x2d4e83c
	static int CullArray(FString sourceString, out FString[] inArray);// 0x2d4e684
	static FString Conv_VectorToString(Vector InVec);// 0x2d4e588
	static FString Conv_Vector2dToString(Vector2D InVec);// 0x2d4e48c
	static FString Conv_TransformToString(out const Transform InTrans);// 0x2d4e300
	static void Conv_StringToVector2D(FString inString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0x2d4e1a0
	static void Conv_StringToVector(FString inString, out Vector OutConvertedVector, out bool OutIsValid);// 0x2d4e044
	static void Conv_StringToRotator(FString inString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0x2d4dee8
	static FName Conv_StringToName(FString inString);// 0x2d4de24
	static int Conv_StringToInt(FString inString);// 0x2d4dd68
	static float Conv_StringToFloat(FString inString);// 0x2d4dca8
	static void Conv_StringToColor(FString inString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0x2d4db4c
	static FString Conv_RotatorToString(Rotator InRot);// 0x2d4da50
	static FString Conv_ObjectToString(Object* InObj);// 0x2d4d950
	static FString Conv_NameToString(FName InName);// 0x245324c
	static FString Conv_IntVectorToString(IntVector InIntVec);// 0x2d4d854
	static FString Conv_IntToString(int inInt);// 0x2d4d754
	static FString Conv_FloatToString(float InFloat);// 0x2d4d654
	static FString Conv_ColorToString(LinearColor InColor);// 0x2d4d550
	static FString Conv_ByteToString(byte InByte);// 0x2d4d450
	static FString Conv_BoolToString(bool InBool);// 0x2d4d348
	static bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0x2d4d16c
	static FString Concat_StrStr(FString A, FString B);// 0x2d4cfac
	static FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString Suffix);// 0x2d4cd24
	static FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString Suffix);// 0x2d4ca98
	static FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString Suffix);// 0x2d4c80c
	static FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString Suffix);// 0x2d4c580
	static FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);// 0x2d4c2f0
	static FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString Suffix);// 0x2d4c064
	static FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix);// 0x2d4bdd8
	static FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);// 0x2d4bb4c
	static FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString Suffix);// 0x2d4b8c0
	static FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);// 0x2d4b628

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	static bool IsRegisteredTableId(const FName TableId);// 0x2d53408
	static bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0x2d53304
	static FString GetTableNamespace(const FName TableId);// 0x2d53200
	static FString GetTableEntrySourceString(const FName TableId, FString Key);// 0x2d53078
	static FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0x2d52e9c
	static FName[] GetRegisteredStringTables();// 0x2d52de4
	static FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0x2d52c5c
	static FString[] GetKeysFromStringTable(const FName TableId);// 0x2d52abc

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	static void UnregisterForRemoteNotifications();// 0x2d67e74
	static void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0x2d67db0
	static void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0x2d67d3c
	static void StackTrace();// 0x2d67d24
	static bool SphereTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d6780c
	static bool SphereTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d67348
	static bool SphereTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d66e8c
	static bool SphereTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d66944
	static bool SphereTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d66444
	static bool SphereTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d65f50
	static bool SphereOverlapComponents(Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x2d65c3c
	static bool SphereOverlapActors(Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x2d65928
	static void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0x2d65874
	static void ShowPlatformSpecificAchievementsScreen(PlayerController* SpecificPlayer);// 0x2d65804
	static void ShowInterstitialAd();// 0x2d657f0
	static void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0x2d65734
	static void SetWindowTitle(out const FText Title);// 0x2d65598
	static void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0x2d65520
	static void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0x2d65414
	static void SetUserActivity(out const UserActivity UserActivity);// 0x2d6534c
	static void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0x2d651c0
	static void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0x2d64f98
	static void SetSuppressViewportTransitionMessage(Object* WorldContextObject, bool bState);// 0x2d64edc
	static void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0x2d64278
	static void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0x2d64d98
	static void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0x2d64c24
	static void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0x2d64ab0
	static void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0x2d649a4
	static void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0x2d648a4
	static void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0x2d64790
	static void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0x2d64684
	static void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0x2d64584
	static void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface class Value);// 0x2d64470
	static void SetFloatPropertyByName(Object* Object, FName PropertyName, float Value);// 0x2d64370
	static void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0x2d64278
	static void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0x2d64178
	static void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0x2d64078
	static void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0x2d63f70
	static void RetriggerableDelay(Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x2d63e40
	static void ResetGamepadAssignmentToController(int ControllerId);// 0x2d63dcc
	static void ResetGamepadAssignments();// 0x2d63db8
	static void RegisterForRemoteNotifications();// 0x2d63da4
	static void QuitGame(Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference);// 0x2d63ca4
	static void PrintWarning(FString inString);// 0x1751d04
	static void PrintText(Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x2d63890
	static void PrintString(Object* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x2d6366c
	static void PrintShippingString(Object* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x2d63448
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0x1c01fa0
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0x1c01fa0
	static bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x2d6329c
	static bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x2d6329c
	static bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x24546d0
	static bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x2d631c0
	static void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0x2d62e90
	static SoftObjectPath MakeSoftObjectPath(FString PathString);// 0x2d62d84
	static FText MakeLiteralText(FText Value);// 0x2d629c0
	static FString MakeLiteralString(FString Value);// 0x2d6282c
	static FName MakeLiteralName(FName Value);// 0x2d627b8
	static int MakeLiteralInt(int Value);// 0x2d62744
	static float MakeLiteralFloat(float Value);// 0x2d62744
	static byte MakeLiteralByte(byte Value);// 0x2d626d0
	static bool MakeLiteralBool(bool Value);// 0x2d2ec50
	static void LoadInterstitialAd(int AdIdIndex);// 0x2d62660
	static void LoadAssetClass(Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x2d623c0
	static void LoadAsset(Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x2d62120
	static bool LineTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d61c40
	static bool LineTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d617bc
	static bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d6133c
	static bool LineTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d60e3c
	static bool LineTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d60980
	static bool LineTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d604d0
	static void LaunchUrl(FString URL);// 0x2d6041c
	static void K2_UnPauseTimerHandle(Object* WorldContextObject, TimerHandle Handle);// 0x2d60364
	static void K2_UnPauseTimerDelegate(delegate Delegate);// 0x2d602c8
	static void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0x2d60130
	static bool K2_TimerExistsHandle(Object* WorldContextObject, TimerHandle Handle);// 0x2d60070
	static bool K2_TimerExistsDelegate(delegate Delegate);// 0x2d5ffcc
	static bool K2_TimerExists(Object* Object, FString FunctionName);// 0x2d5fe2c
	static TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping);// 0x2d5fcec
	static TimerHandle K2_SetTimer(Object* Object, FString FunctionName, float Time, bool bLooping);// 0x2d5faac
	static void K2_PauseTimerHandle(Object* WorldContextObject, TimerHandle Handle);// 0x2d5f9f4
	static void K2_PauseTimerDelegate(delegate Delegate);// 0x2d5f958
	static void K2_PauseTimer(Object* Object, FString FunctionName);// 0x2d5f7c0
	static bool K2_IsValidTimerHandle(TimerHandle Handle);// 0x2d5f744
	static bool K2_IsTimerPausedHandle(Object* WorldContextObject, TimerHandle Handle);// 0x2d5f684
	static bool K2_IsTimerPausedDelegate(delegate Delegate);// 0x2d5f5e0
	static bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0x2d5f440
	static bool K2_IsTimerActiveHandle(Object* WorldContextObject, TimerHandle Handle);// 0x2d5f380
	static bool K2_IsTimerActiveDelegate(delegate Delegate);// 0x2d5f2dc
	static bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0x2d5f13c
	static TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0x2d5f0a8
	static float K2_GetTimerRemainingTimeHandle(Object* WorldContextObject, TimerHandle Handle);// 0x2d5efe8
	static float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0x2d5ef44
	static float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0x2d5eda0
	static float K2_GetTimerElapsedTimeHandle(Object* WorldContextObject, TimerHandle Handle);// 0x2d5ece0
	static float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0x2d5ec3c
	static float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0x2d5ea98
	static void K2_ClearTimerHandle(Object* WorldContextObject, TimerHandle Handle);// 0x2d5e9e0
	static void K2_ClearTimerDelegate(delegate Delegate);// 0x2d5e944
	static void K2_ClearTimer(Object* Object, FString FunctionName);// 0x2d5e7ac
	static void K2_ClearAndInvalidateTimerHandle(Object* WorldContextObject, out TimerHandle Handle);// 0x2d5e6e4
	static bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0x2d5e5f4
	static bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0x2d5e5f4
	static bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0x2453ddc
	static bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x2d5e578
	static bool IsValidClass(class Object Class);// 0x2d5e4d4
	static bool IsValid(const Object* Object);// 0x2d5e4d4
	static bool IsStandalone(Object* WorldContextObject);// 0x2d5e45c
	static bool IsServer(Object* WorldContextObject);// 0x2d5e3e4
	static bool IsPackagedForDistribution();// 0x1485ea8
	static bool IsLoggedIn(PlayerController* SpecificPlayer);// 0x2d5e36c
	static bool IsInterstitialAdRequested();// 0x2d5e344
	static bool IsInterstitialAdAvailable();// 0x2d5e31c
	static bool IsDedicatedServer(Object* WorldContextObject);// 0x2d5e2a4
	static bool IsControllerAssignedToGamepad(int ControllerId);// 0x2d5e22c
	static void HideAdBanner();// 0x2d5e218
	static bool GetVolumeButtonsHandledBySystem();// 0x2d5e1f0
	static FString GetUniqueDeviceId();// 0x2d5e138
	static bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0x2d5e06c
	static Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x2d5df7c
	static class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x2d5de8c
	static int GetRenderingMaterialQualityLevel();// 0x2d5de64
	static int GetRenderingDetailMode();// 0x2d5de3c
	static void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x2d5db5c
	static void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x2d5da50
	static PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0x2d5d8c4
	static PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0x2d5d8c4
	static PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0x2d5d840
	static PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0x2d5d7bc
	static FString[] GetPreferredLanguages();// 0x2d5d668
	static FString GetPlatformUserName();// 0x2d5d5b0
	static FString GetPathName(const Object* Object);// 0x2d5d4b0
	static FString GetObjectName(const Object* Object);// 0x2d4d950
	static Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x2d5d434
	static int GetMinYResolutionForUI();// 0x2d5d40c
	static int GetMinYResolutionFor3DView();// 0x2d5d3e4
	static FString GetLocalCurrencySymbol();// 0x2d5d32c
	static FString GetLocalCurrencyCode();// 0x2d5d32c
	static float GetGameTimeInSeconds(Object* WorldContextObject);// 0x2d07bc4
	static FString GetGameName();// 0x2d5d274
	static FString GetGameBundleId();// 0x2d5d1bc
	static FString GetEngineVersion();// 0x2d5d104
	static FString GetDisplayName(const Object* Object);// 0x2d5d004
	static FString GetDeviceId();// 0x1758224
	static FString GetDefaultLocale();// 0x2d5cf4c
	static FString GetDefaultLanguage();// 0x2d5ce94
	static bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0x2d5cd28
	static bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0x2d5cc5c
	static void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0x2d5caf0
	static FString GetCommandLine();// 0x2d5ca38
	static class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x2d5c9bc
	static FString GetClassDisplayName(class Object Class);// 0x2d5c8bc
	static int GetAdIDCount();// 0x2d5c894
	static void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0x2d5c6f4
	static void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0x2d5c5e0
	static void ForceCloseAdBanner();// 0x2d5c5cc
	static void FlushPersistentDebugLines(Object* WorldContextObject);// 0x14864e8
	static void FlushDebugStrings(Object* WorldContextObject);// 0x14864e8
	static void ExecuteConsoleCommand(Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0x2d5c490
	static bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x2d5c2e4
	static bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x2d5c2e4
	static bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x2452dec
	static bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x2d5c208
	static void DrawDebugString(Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0x2d5bfe8
	static void DrawDebugSphere(Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x2d5bdc8
	static void DrawDebugPoint(Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0x2d5bc30
	static void DrawDebugPlane(Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0x2d5ba4c
	static void DrawDebugLine(Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0x2d5b86c
	static void DrawDebugFrustum(Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0x2d5b650
	static void DrawDebugFloatHistoryTransform(Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x2d5b380
	static void DrawDebugFloatHistoryLocation(Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x2d5b134
	static void DrawDebugCylinder(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x2d5aec4
	static void DrawDebugCoordinateSystem(Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0x2d5acf0
	static void DrawDebugConeInDegrees(Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x2d5a9f0
	static void DrawDebugCone(Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x2d5a9f0
	static void DrawDebugCircle(Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0x2d5a6c8
	static void DrawDebugCapsule(Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0x2d5a454
	static void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0x2d5a358
	static void DrawDebugBox(Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0x2d5a11c
	static void DrawDebugArrow(Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0x2d59eec
	static bool DoesImplementInterface(Object* TestObject, class Interface Interface);// 0x2d59e30
	static void Delay(Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x2d59d00
	static void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0x2d59c8c
	static FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0x2d59a2c
	static Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0x2d59b9c
	static FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0x2d59a2c
	static class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0x2d5993c
	static FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0x245324c
	static FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0x2d59828
	static Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0x2d5974c
	static Object* Conv_InterfaceToObject(out const interface class Interface);// 0x2d596c0
	static class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0x2d595d4
	static void ControlScreensaver(bool bAllowScreenSaver);// 0x2d5955c
	static bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x2d59200
	static bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x2d58ea0
	static void CollectGarbage();// 0x2d58e88
	static bool CapsuleTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d58928
	static bool CapsuleTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d5841c
	static bool CapsuleTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d57f20
	static bool CapsuleTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d579a0
	static bool CapsuleTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d57458
	static bool CapsuleTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d56f20
	static bool CapsuleOverlapComponents(Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x2d56bc4
	static bool CapsuleOverlapActors(Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x2d56868
	static bool CanLaunchURL(FString URL);// 0x2d567ac
	static void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0x2d565b0
	static bool BoxTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d5600c
	static bool BoxTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d55ab0
	static bool BoxTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d55564
	static bool BoxTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d54f90
	static bool BoxTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d54a04
	static bool BoxTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x2d54488
	static bool BoxOverlapComponents(Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x2d54178
	static bool BoxOverlapActors(Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x2d53e68
	static DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0x2d53c8c

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0xc]
	float MaxSamples;//[Offset: 0xc, Size: 0x4]
	float MinValue;//[Offset: 0x10, Size: 0x4]
	float MaxValue;//[Offset: 0x14, Size: 0x4]
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	static FText TextTrimTrailing(out const FText InText);// 0x2d71dc4
	static FText TextTrimPrecedingAndTrailing(out const FText InText);// 0x2d71b04
	static FText TextTrimPreceding(out const FText InText);// 0x2d71844
	static FText TextToUpper(out const FText InText);// 0x2d71584
	static FText TextToLower(out const FText InText);// 0x2d712c4
	static bool TextIsTransient(out const FText InText);// 0x2d71120
	static bool TextIsFromStringTable(out const FText Text);// 0x2d70f7c
	static bool TextIsEmpty(out const FText InText);// 0x2d70dd8
	static bool TextIsCultureInvariant(out const FText InText);// 0x2d70c34
	static FText TextFromStringTable(const FName TableId, FString Key);// 0x2d70a10
	static bool StringTableIdAndKeyFromText(FText Text, out FName OutTableId, out FString OutKey);// 0x2d70678
	static bool NotEqual_TextText(out const FText A, out const FText B);// 0x2d70368
	static bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x2d70058
	static FText GetEmptyText();// 0x2d6ff04
	static FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0x2d6fa58
	static bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0x2d6f7ac
	static bool EqualEqual_TextText(out const FText A, out const FText B);// 0x2d6f49c
	static bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x2d6f18c
	static FText Conv_VectorToText(Vector InVec);// 0x2d6eff4
	static FText Conv_Vector2dToText(Vector2D InVec);// 0x2d6ee5c
	static FText Conv_TransformToText(out const Transform InTrans);// 0x2d6ec30
	static FString Conv_TextToString(out const FText InText);// 0x2d6ea0c
	static FText Conv_StringToText(FString inString);// 0x2d6e834
	static FText Conv_RotatorToText(Rotator InRot);// 0x2d6e69c
	static FText Conv_ObjectToText(Object* InObj);// 0x2d6e500
	static FText Conv_NameToText(FName InName);// 0x2d6e360
	static FText Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x2d6e0e8
	static FText Conv_FloatToText(float Value, byte RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x2d6dd9c
	static FText Conv_ColorToText(LinearColor InColor);// 0x2d6dbfc
	static FText Conv_ByteToText(byte Value);// 0x2d6da60
	static FText Conv_BoolToText(bool InBool);// 0x2d6d8bc
	static FText AsTimeZoneTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x2d6d690
	static FText AsTimeZoneDateTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x2d6d464
	static FText AsTimeZoneDate_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x2d6d238
	static FText AsTimespan_Timespan(out const Timespan InTimespan);// 0x2d6d090
	static FText AsTime_DateTime(out const DateTime In);// 0x2d6cee8
	static FText AsPercent_Float(float Value, byte RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x2d6cb9c
	static FText AsDateTime_DateTime(out const DateTime In);// 0x2d6c9f4
	static FText AsDate_DateTime(out const DateTime InDateTime);// 0x2d6c84c
	static FText AsCurrencyBase(int BaseValue, FString CurrencyCode);// 0x2d6c630
	static FText AsCurrency_Integer(int Value, byte RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x2d6c260
	static FText AsCurrency_Float(float Value, byte RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x2d6be90

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0xc]
	byte ArgumentValueType;//[Offset: 0xc, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x10, Size: 0xc]
	int ArgumentValueInt;//[Offset: 0x1c, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x20, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x20, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	LayerActorStats[] ActorStats;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: LayerActorStats
	class Object* Type;//[Offset: 0x0, Size: 0x4]
	int Total;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LevelBounds.Actor.Object
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingKismet.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 0x1]
	static LevelStreamingKismet* LoadLevelInstance(Object* WorldContextObject, FString LevelName, out const Vector Location, out const Rotator Rotation, out bool bOutSuccess);// 0x2d74b40

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x1c, Size: 0x4]
	int[] Surfaces;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.Object

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x238, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x1c, Size: 0x18]

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2c8, Size: 0x4]
	Actor*[] SubActors;//[Offset: 0x2cc, Size: 0xc]
	float LODDrawDistance;//[Offset: 0x2d8, Size: 0x4]
	int LODLevel;//[Offset: 0x2dc, Size: 0x4]
	Object*[] SubObjects;//[Offset: 0x2e0, Size: 0xc]

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x1c, Size: 0x3c]

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x1c, Size: 0x7]

--------------------------------
Class: MaterialQualityOverrides
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum MobileCSMQuality;//[Offset: 0x5, Size: 0x1]
	bool bForceUnlit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunction* MaterialFunction;//[Offset: 0x44, Size: 0x4]
	FunctionExpressionInput[] FunctionInputs;//[Offset: 0x48, Size: 0xc]
	FunctionExpressionOutput[] FunctionOutputs;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: FunctionExpressionInput
	MaterialExpressionFunctionInput* ExpressionInput;//[Offset: 0x0, Size: 0x4]
	Guid ExpressionInputId;//[Offset: 0x4, Size: 0x10]
	ExpressionInput Input;//[Offset: 0x18, Size: 0x30]

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x48, Size: 0x30]
	FString InputName;//[Offset: 0x78, Size: 0xc]
	FString Description;//[Offset: 0x84, Size: 0xc]
	Guid ID;//[Offset: 0x90, Size: 0x10]
	byte InputType;//[Offset: 0xa0, Size: 0x1]
	Vector4 PreviewValue;//[Offset: 0xb0, Size: 0x10]
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	int SortPriority;//[Offset: 0xc4, Size: 0x4]
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: FunctionExpressionOutput
	MaterialExpressionFunctionOutput* ExpressionOutput;//[Offset: 0x0, Size: 0x4]
	Guid ExpressionOutputId;//[Offset: 0x4, Size: 0x10]
	ExpressionOutput Output;//[Offset: 0x14, Size: 0x20]

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FString OutputName;//[Offset: 0x44, Size: 0xc]
	FString Description;//[Offset: 0x50, Size: 0xc]
	int SortPriority;//[Offset: 0x5c, Size: 0x4]
	ExpressionInput A;//[Offset: 0x60, Size: 0x30]
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	Guid ID;//[Offset: 0x94, Size: 0x10]

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x44, Size: 0x4]
	byte SamplerType;//[Offset: 0x48, Size: 0x1]
	bool IsDefaultMeshpaintTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0x30]
	ExpressionInput TextureObject;//[Offset: 0x80, Size: 0x30]
	ExpressionInput MipValue;//[Offset: 0xb0, Size: 0x30]
	ExpressionInput CoordinatesDX;//[Offset: 0xe0, Size: 0x30]
	ExpressionInput CoordinatesDY;//[Offset: 0x110, Size: 0x30]
	byte MipValueMode;//[Offset: 0x140, Size: 0x1]
	byte SamplerSource;//[Offset: 0x141, Size: 0x1]
	uint32 ConstCoordinate;//[Offset: 0x144, Size: 0x4]
	int ConstMipValue;//[Offset: 0x148, Size: 0x4]

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Inputs;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x500, Size: 0xc]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x2d799fc
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x2d79818

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x4]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x4, Size: 0x4]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float BaseSizeX;//[Offset: 0xc, Size: 0x4]
	float BaseSizeY;//[Offset: 0x10, Size: 0x4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	float ConstA;//[Offset: 0xa8, Size: 0x4]
	float ConstB;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x150, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x158, Size: 0x10]
	FName Group;//[Offset: 0x168, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float Threshold;//[Offset: 0x170, Size: 0x4]
	byte Channel;//[Offset: 0x174, Size: 0x1]

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x48, Size: 0x30]
	ExpressionInput X;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x48, Size: 0x30]
	ExpressionInput X;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput temp;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x48, Size: 0x38]
	MaterialAttributesInput B;//[Offset: 0x80, Size: 0x38]
	ExpressionInput alpha;//[Offset: 0xb8, Size: 0x30]
	byte PixelAttributeBlendType;//[Offset: 0xe8, Size: 0x1]
	byte VertexAttributeBlendType;//[Offset: 0xe9, Size: 0x1]

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x48, Size: 0x38]

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Height;//[Offset: 0x78, Size: 0x30]
	ExpressionInput HeightRatioInput;//[Offset: 0xa8, Size: 0x30]
	float HeightRatio;//[Offset: 0xd8, Size: 0x4]
	float ReferencePlane;//[Offset: 0xdc, Size: 0x4]
	uint32 ConstCoordinate;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Min;//[Offset: 0x78, Size: 0x30]
	ExpressionInput Max;//[Offset: 0xa8, Size: 0x30]
	byte ClampMode;//[Offset: 0xd8, Size: 0x1]
	float MinDefault;//[Offset: 0xdc, Size: 0x4]
	float MaxDefault;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x44, Size: 0x4]
	FName ParameterName;//[Offset: 0x48, Size: 0x8]
	Guid ParameterId;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x44, Size: 0x4]
	int SizeY;//[Offset: 0x48, Size: 0x4]
	FString Text;//[Offset: 0x4c, Size: 0xc]
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10]
	int FontSize;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x44, Size: 0x4]
	float G;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x44, Size: 0x10]

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x44, Size: 0x10]

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	float Bias;//[Offset: 0x78, Size: 0x4]
	float Scale;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	float Period;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString Code;//[Offset: 0x44, Size: 0xc]
	byte OutputType;//[Offset: 0x50, Size: 0x1]
	FString Description;//[Offset: 0x54, Size: 0xc]
	CustomInput[] Inputs;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: CustomInput
	FString InputName;//[Offset: 0x0, Size: 0xc]
	ExpressionInput Input;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x48, Size: 0x30]
	float ConstWidth;//[Offset: 0x78, Size: 0x4]
	float ConstHeight;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x48, Size: 0x30]
	ExpressionInput FadeDistance;//[Offset: 0x78, Size: 0x30]
	float OpacityDefault;//[Offset: 0xa8, Size: 0x4]
	float FadeDistanceDefault;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x44, Size: 0x1]
	ExpressionInput Depth;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Fraction;//[Offset: 0x78, Size: 0x30]
	LinearColor LuminanceFactors;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	float ConstA;//[Offset: 0xa8, Size: 0x4]
	float ConstB;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	FString[] ParamNames;//[Offset: 0x44, Size: 0xc]
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x44, Size: 0x4]
	int FontTexturePage;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x50, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x58, Size: 0x10]
	FName Group;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x48, Size: 0x30]
	float Exponent;//[Offset: 0x78, Size: 0x4]
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x80, Size: 0x30]
	float BaseReflectFraction;//[Offset: 0xb0, Size: 0x4]
	ExpressionInput Normal;//[Offset: 0xb8, Size: 0x30]

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x48, Size: 0x38]
	Guid[] AttributeGetTypes;//[Offset: 0x80, Size: 0xc]

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x48, Size: 0x30]
	ExpressionInput StaticIndirect;//[Offset: 0x78, Size: 0x30]
	ExpressionInput DynamicIndirect;//[Offset: 0xa8, Size: 0x30]

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	ExpressionInput AGreaterThanB;//[Offset: 0xa8, Size: 0x30]
	ExpressionInput AEqualsB;//[Offset: 0xd8, Size: 0x30]
	ExpressionInput ALessThanB;//[Offset: 0x108, Size: 0x30]
	float EqualsThreshold;//[Offset: 0x138, Size: 0x4]
	float ConstB;//[Offset: 0x13c, Size: 0x4]
	float ConstAEqualsB;//[Offset: 0x140, Size: 0x4]

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Lightmass;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	ExpressionInput alpha;//[Offset: 0xa8, Size: 0x30]
	float ConstA;//[Offset: 0xd8, Size: 0x4]
	float ConstB;//[Offset: 0xdc, Size: 0x4]
	float ConstAlpha;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Metallic;//[Offset: 0x78, Size: 0x30]
	ExpressionInput Specular;//[Offset: 0xa8, Size: 0x30]
	ExpressionInput Roughness;//[Offset: 0xd8, Size: 0x30]
	ExpressionInput EmissiveColor;//[Offset: 0x108, Size: 0x30]
	ExpressionInput Opacity;//[Offset: 0x138, Size: 0x30]
	ExpressionInput OpacityMask;//[Offset: 0x168, Size: 0x30]
	ExpressionInput Normal;//[Offset: 0x198, Size: 0x30]
	ExpressionInput WorldPositionOffset;//[Offset: 0x1c8, Size: 0x30]
	ExpressionInput WorldDisplacement;//[Offset: 0x1f8, Size: 0x30]
	ExpressionInput TessellationMultiplier;//[Offset: 0x228, Size: 0x30]
	ExpressionInput SubsurfaceColor;//[Offset: 0x258, Size: 0x30]
	ExpressionInput ClearCoat;//[Offset: 0x288, Size: 0x30]
	ExpressionInput ClearCoatRoughness;//[Offset: 0x2b8, Size: 0x30]
	ExpressionInput AmbientOcclusion;//[Offset: 0x2e8, Size: 0x30]
	ExpressionInput Refraction;//[Offset: 0x318, Size: 0x30]
	ExpressionInput CustomizedUVs;//[Offset: 0x348, Size: 0x30]
	ExpressionInput PixelDepthOffset;//[Offset: 0x4c8, Size: 0x30]

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x48, Size: 0x30]
	ExpressionInput MaterialProxy;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	float ConstA;//[Offset: 0xa8, Size: 0x4]
	float ConstB;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	float ConstA;//[Offset: 0xa8, Size: 0x4]
	float ConstB;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	float ConstA;//[Offset: 0xa8, Size: 0x4]
	float ConstB;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x48, Size: 0x30]
	ExpressionInput FilterWidth;//[Offset: 0x78, Size: 0x30]
	float Scale;//[Offset: 0xa8, Size: 0x4]
	int quality;//[Offset: 0xac, Size: 0x4]
	byte NoiseFunction;//[Offset: 0xb0, Size: 0x1]
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	int Levels;//[Offset: 0xb4, Size: 0x4]
	float OutputMin;//[Offset: 0xb8, Size: 0x4]
	float OutputMax;//[Offset: 0xbc, Size: 0x4]
	float LevelScale;//[Offset: 0xc0, Size: 0x4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	uint32 RepeatSize;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Time;//[Offset: 0x78, Size: 0x30]
	ExpressionInput Speed;//[Offset: 0xa8, Size: 0x30]
	float SpeedX;//[Offset: 0xd8, Size: 0x4]
	float SpeedY;//[Offset: 0xdc, Size: 0x4]
	uint32 ConstCoordinate;//[Offset: 0xe0, Size: 0x4]
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x48, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x50, Size: 0x10]
	FName Group;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1]

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Exponent;//[Offset: 0x78, Size: 0x30]
	float ConstExponent;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x48, Size: 0x30]
	ExpressionInput PreviousFrame;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Inputs;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x48, Size: 0x30]
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: MaterialExpressionReroute.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x48, Size: 0x30]
	ExpressionInput RotationAngle;//[Offset: 0x78, Size: 0x30]
	ExpressionInput PivotPoint;//[Offset: 0xa8, Size: 0x30]
	ExpressionInput Position;//[Offset: 0xd8, Size: 0x30]
	float Period;//[Offset: 0x108, Size: 0x4]

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Time;//[Offset: 0x78, Size: 0x30]
	float CenterX;//[Offset: 0xa8, Size: 0x4]
	float CenterY;//[Offset: 0xac, Size: 0x4]
	float Speed;//[Offset: 0xb0, Size: 0x4]
	uint32 ConstCoordinate;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	float SliderMin;//[Offset: 0x6c, Size: 0x4]
	float SliderMax;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x44, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	ExpressionInput OffsetFraction;//[Offset: 0x78, Size: 0x30]
	Vector2D ConstInput;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x44, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Coordinates;//[Offset: 0x78, Size: 0x30]
	Vector2D ConstInput;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48, Size: 0x30]
	byte SceneTextureId;//[Offset: 0x78, Size: 0x1]
	bool bClampUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object
	byte Mapping;//[Offset: 0x44, Size: 0x1]

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x44, Size: 0xc]
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	float Period;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Index;//[Offset: 0x78, Size: 0x30]
	ExpressionInput Seed;//[Offset: 0xa8, Size: 0x30]
	uint32 ConstIndex;//[Offset: 0xd8, Size: 0x4]
	Vector2D ConstSeed;//[Offset: 0xdc, Size: 0x8]

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	byte GeometryType;//[Offset: 0x44, Size: 0x1]
	byte WindType;//[Offset: 0x45, Size: 0x1]
	byte LODType;//[Offset: 0x46, Size: 0x1]
	float BillboardThreshold;//[Offset: 0x48, Size: 0x4]
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	ExpressionInput Radius;//[Offset: 0xa8, Size: 0x30]
	ExpressionInput Hardness;//[Offset: 0xd8, Size: 0x30]
	float AttenuationRadius;//[Offset: 0x108, Size: 0x4]
	float HardnessPercent;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x48, Size: 0x30]
	float ConstantDensity;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x68, Size: 0x30]
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98, Size: 0x1]
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x98, Size: 0x1]
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	ExpressionInput Value;//[Offset: 0xa8, Size: 0x30]

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x70, Size: 0x30]
	ExpressionInput B;//[Offset: 0xa0, Size: 0x30]

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48, Size: 0x30]
	ExpressionInput B;//[Offset: 0x78, Size: 0x30]
	float ConstA;//[Offset: 0xa8, Size: 0x4]
	float ConstB;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	float Period;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput Index;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Seed;//[Offset: 0x78, Size: 0x30]
	uint32 ConstIndex;//[Offset: 0xa8, Size: 0x4]
	Vector2D ConstSeed;//[Offset: 0xac, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x44, Size: 0x4]
	float UTiling;//[Offset: 0x48, Size: 0x4]
	float VTiling;//[Offset: 0x4c, Size: 0x4]
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x48, Size: 0x30]
	byte Property;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	float Period;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	byte TransformSourceType;//[Offset: 0x78, Size: 0x1]
	byte TransformType;//[Offset: 0x79, Size: 0x1]

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]
	byte TransformSourceType;//[Offset: 0x78, Size: 0x1]
	byte TransformType;//[Offset: 0x79, Size: 0x1]

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x48, Size: 0x30]
	byte NoiseFunction;//[Offset: 0x78, Size: 0x1]
	int quality;//[Offset: 0x7c, Size: 0x4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	uint32 TileSize;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x44, Size: 0x1]

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x44, Size: 0x1]

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	Actor*[] TargetActors;//[Offset: 0x2c8, Size: 0xc]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x358, Size: 0x4]

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	static void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0x2d8de88
	static void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0x2d8dd78
	static void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0x2d8dbcc

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	PurchaseInfo[] AvailableProducts;//[Offset: 0x28, Size: 0xc]
	FString LastError;//[Offset: 0x34, Size: 0xc]
	FString LastErrorSolution;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: PurchaseInfo
	FString Identifier;//[Offset: 0x0, Size: 0xc]
	FString DisplayName;//[Offset: 0xc, Size: 0xc]
	FString DisplayDescription;//[Offset: 0x18, Size: 0xc]
	FString DisplayPrice;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavArea_Default.NavArea.Object

--------------------------------
Class: NavArea_LowHeight.NavArea.Object

--------------------------------
Class: NavArea_Null.NavArea.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.Object

--------------------------------
Class: NavAreaMeta.NavArea.Object

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.Object
	class NavArea* Agent0Area;//[Offset: 0x34, Size: 0x4]
	class NavArea* Agent1Area;//[Offset: 0x38, Size: 0x4]
	class NavArea* Agent2Area;//[Offset: 0x3c, Size: 0x4]
	class NavArea* Agent3Area;//[Offset: 0x40, Size: 0x4]
	class NavArea* Agent4Area;//[Offset: 0x44, Size: 0x4]
	class NavArea* Agent5Area;//[Offset: 0x48, Size: 0x4]
	class NavArea* Agent6Area;//[Offset: 0x4c, Size: 0x4]
	class NavArea* Agent7Area;//[Offset: 0x50, Size: 0x4]
	class NavArea* Agent8Area;//[Offset: 0x54, Size: 0x4]
	class NavArea* Agent9Area;//[Offset: 0x58, Size: 0x4]
	class NavArea* Agent10Area;//[Offset: 0x5c, Size: 0x4]
	class NavArea* Agent11Area;//[Offset: 0x60, Size: 0x4]
	class NavArea* Agent12Area;//[Offset: 0x64, Size: 0x4]
	class NavArea* Agent13Area;//[Offset: 0x68, Size: 0x4]
	class NavArea* Agent14Area;//[Offset: 0x6c, Size: 0x4]
	class NavArea* Agent15Area;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: NavigationGraphNode.Actor.Object

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object
	NavGraphNode Node;//[Offset: 0x238, Size: 0x10]
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x248, Size: 0x4]
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x24c, Size: 0x4]

--------------------------------
Class: NavGraphNode
	Object* Owner;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xbc, Size: 0x4]
	float TileRemovalRadius;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: NavigationPathGenerator.Interface.Object

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2d0, Size: 0x4]
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x2d4, Size: 0x4]
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1]
	NavAgentProperties NavAgentProps;//[Offset: 0x2dc, Size: 0x18]
	Vector QueryingExtent;//[Offset: 0x2f4, Size: 0xc]
	NavigationData* MyNavData;//[Offset: 0x300, Size: 0x4]
	Vector ProjectedLocation;//[Offset: 0x304, Size: 0xc]
	IntVector ProjectedTile;//[Offset: 0x310, Size: 0xc]
	int ProjectedPloyId;//[Offset: 0x31c, Size: 0x4]
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 0x1]
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 0x1]
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 0x1]
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320, Size: 0x1]
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x320, Size: 0x1]
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x320, Size: 0x1]
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x320, Size: 0x1]
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x321, Size: 0x1]
	byte CostDisplayMode;//[Offset: 0x322, Size: 0x1]
	Vector2D TextCanvasOffset;//[Offset: 0x324, Size: 0x8]
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 0x1]
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 0x1]
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 0x1]
	float PathfindingTime;//[Offset: 0x330, Size: 0x4]
	float PathCost;//[Offset: 0x334, Size: 0x4]
	int PathfindingSteps;//[Offset: 0x338, Size: 0x4]
	NavigationTestingActor* OtherActor;//[Offset: 0x33c, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x340, Size: 0x4]
	int ShowStepIndex;//[Offset: 0x344, Size: 0x4]
	float OffsetFromCornersDistance;//[Offset: 0x348, Size: 0x4]

--------------------------------
Class: NavigationTypes.Object

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NavigationLink[] Links;//[Offset: 0x504, Size: 0xc]

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0xc]
	Vector Right;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4]
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4]
	byte Direction;//[Offset: 0x8, Size: 0x1]
	float SnapRadius;//[Offset: 0x10, Size: 0x4]
	float SnapHeight;//[Offset: 0x14, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x18, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1]
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20, Size: 0x1]
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	class NavArea* AreaClass;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0xe0, Size: 0x4]
	void SetNavigationRelevancy(bool bRelevant);// 0x2d97c10

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0xe8, Size: 0x4]
	class NavArea* EnabledAreaClass;//[Offset: 0xec, Size: 0x4]
	class NavArea* DisabledAreaClass;//[Offset: 0xf0, Size: 0x4]
	Vector LinkRelativeStart;//[Offset: 0xf4, Size: 0xc]
	Vector LinkRelativeEnd;//[Offset: 0x100, Size: 0xc]
	byte LinkDirection;//[Offset: 0x10c, Size: 0x1]
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1]
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10d, Size: 0x1]
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10d, Size: 0x1]
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10d, Size: 0x1]
	Vector ObstacleOffset;//[Offset: 0x110, Size: 0xc]
	Vector ObstacleExtent;//[Offset: 0x11c, Size: 0xc]
	class NavArea* ObstacleAreaClass;//[Offset: 0x128, Size: 0x4]
	float BroadcastRadius;//[Offset: 0x12c, Size: 0x4]
	float BroadcastInterval;//[Offset: 0x130, Size: 0x4]
	byte BroadcastChannel;//[Offset: 0x134, Size: 0x1]

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x1c, Size: 0xc]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0xc]
	Vector LeftEnd;//[Offset: 0x3c, Size: 0xc]
	Vector RightStart;//[Offset: 0x48, Size: 0xc]
	Vector RightEnd;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: NavLinkHostInterface.Interface.Object

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x2d0, Size: 0xc]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x2dc, Size: 0xc]
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x2e8, Size: 0x4]
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	delegate OnSmartLinkReached;//[Offset: 0x2f0, Size: 0xc]
	void SetSmartLinkEnabled(bool bEnabled);// 0x2d96530
	void ResumePathFollowing(Actor* Agent);// 0x2d964b8
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x1c01fa0
	bool IsSmartLinkEnabled();// 0x2d96490
	bool HasMovingAgents();// 0x2d96468

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe4, Size: 0x4]
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 0xc]
	void SetAreaClass(class NavArea NewAreaClass);// 0x2d97030

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x2f4, Size: 0x4]
	void SetAreaClass(class NavArea NewAreaClass);// 0x2d9732c

--------------------------------
Class: NavNodeInterface.Interface.Object

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: NavTestRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	int MaxRepArraySize;//[Offset: 0x34, Size: 0x4]
	int MaxRepArrayMemory;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectCollectorManager.Object
	<class Object,Object*> Collectors;//[Offset: 0x1c, Size: 0x3c]
	void UnRegisterCollector(class Object Class);// 0x2d992bc
	bool UnRegister(Object* Object);// 0x2d9923c
	void Tick(float DeltaSeconds);// 0x2d991c4
	void RegisterCollector(class Object Class, Object* Object);// 0x2d99108
	bool Register(Object* Object);// 0x2d99088
	static void Initialize();// 0x2d99074
	static ObjectCollectorManager* GetInstance();// 0x2d9904c
	void BeginPlay();// 0x12e82e4

--------------------------------
Class: CommonActorCollector.Object
	bool Prev_TickFunctionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	ActorComponent*[] Comps;//[Offset: 0x24, Size: 0xc]
	void UnRegister(Object* Object);// 0x12ebfe0
	void Tick(float DeltaTime);// 0x12ebf60
	void Register(Object* Object);// 0x12ebee0

--------------------------------
Class: ObjectLibrary.Object
	class Object* ObjectBaseClass;//[Offset: 0x1c, Size: 0x4]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	Object*[] Objects;//[Offset: 0x24, Size: 0xc]
	Object*[] WeakObjects;//[Offset: 0x30, Size: 0xc]
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: ObjectPoolInterface.Interface.Object
	void SetRecycleTime(float InRecycleTime);// 0x2d99e48
	void OnRespawned();// 0x13aaadc
	void OnRecycled();// 0x13aaac0
	float GetRecycleTime();// 0x154f310
	bool GetPoolEnabled();// 0x1358bb4
	int GetLifePeriodTime();// 0x2d99e18
	int GetDefaultPoolSize();// 0x2d99de8

--------------------------------
Class: ObjectReferencer.Object
	Object*[] ReferencedObjects;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: OnlineBlueprintCallProxyBase.Object
	void Activate();// 0x131b67c

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fd, Size: 0x1]
	float DamagePerSec;//[Offset: 0x300, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x304, Size: 0x4]
	float PainInterval;//[Offset: 0x308, Size: 0x4]
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 0x1]
	Controller* DamageInstigator;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x20, Size: 0x40]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x20, Size: 0x4]
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x24, Size: 0x28]

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x20, Size: 0x8]
	RawDistributionFloat Range;//[Offset: 0x28, Size: 0x28]
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	RawDistributionFloat Strength;//[Offset: 0x54, Size: 0x28]
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	byte SelectionMethod;//[Offset: 0x7d, Size: 0x1]
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e, Size: 0x1]
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e, Size: 0x1]
	int LastSelIndex;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]
	int Frequency;//[Offset: 0x20, Size: 0x4]
	int Frequency_LowRange;//[Offset: 0x24, Size: 0x4]
	RawDistributionVector NoiseRange;//[Offset: 0x28, Size: 0x40]
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x68, Size: 0x28]
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	RawDistributionVector NoiseSpeed;//[Offset: 0x94, Size: 0x40]
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	float NoiseLockRadius;//[Offset: 0xd8, Size: 0x4]
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc, Size: 0x1]
	float NoiseLockTime;//[Offset: 0xe0, Size: 0x4]
	float NoiseTension;//[Offset: 0xe4, Size: 0x4]
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0xec, Size: 0x28]
	int NoiseTessellation;//[Offset: 0x114, Size: 0x4]
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]
	float FrequencyDistance;//[Offset: 0x11c, Size: 0x4]
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	RawDistributionFloat NoiseScale;//[Offset: 0x124, Size: 0x28]

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x1f, Size: 0x1]
	FName SourceName;//[Offset: 0x20, Size: 0x8]
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	RawDistributionVector Source;//[Offset: 0x2c, Size: 0x40]
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	byte SourceTangentMethod;//[Offset: 0x6d, Size: 0x1]
	RawDistributionVector SourceTangent;//[Offset: 0x70, Size: 0x40]
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	RawDistributionFloat SourceStrength;//[Offset: 0xb4, Size: 0x28]
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x1f, Size: 0x1]
	FName TargetName;//[Offset: 0x20, Size: 0x8]
	RawDistributionVector Target;//[Offset: 0x28, Size: 0x40]
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	byte TargetTangentMethod;//[Offset: 0x69, Size: 0x1]
	RawDistributionVector TargetTangent;//[Offset: 0x6c, Size: 0x40]
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	RawDistributionFloat TargetStrength;//[Offset: 0xb0, Size: 0x28]
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	float LockRadius;//[Offset: 0xdc, Size: 0x4]

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x20, Size: 0x40]
	RawDistributionVector DampingFactorRotation;//[Offset: 0x60, Size: 0x40]
	RawDistributionFloat MaxCollisions;//[Offset: 0xa0, Size: 0x28]
	byte CollisionCompletionOption;//[Offset: 0xc8, Size: 0x1]
	byte[] CollisionTypes;//[Offset: 0xcc, Size: 0xc]
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe0, Size: 0x1]
	RawDistributionFloat ParticleMass;//[Offset: 0xe4, Size: 0x28]
	float DirScalar;//[Offset: 0x10c, Size: 0x4]
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	float VerticalFudgeFactor;//[Offset: 0x114, Size: 0x4]
	RawDistributionFloat DelayAmount;//[Offset: 0x118, Size: 0x28]
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1]
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 0x1]
	float MaxCollisionDistance;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x20, Size: 0x28]
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x48, Size: 0x28]
	float Friction;//[Offset: 0x70, Size: 0x4]
	float RandomSpread;//[Offset: 0x74, Size: 0x4]
	float RandomDistribution;//[Offset: 0x78, Size: 0x4]
	float RadiusScale;//[Offset: 0x7c, Size: 0x4]
	float RadiusBias;//[Offset: 0x80, Size: 0x4]
	byte Response;//[Offset: 0x84, Size: 0x1]
	byte CollisionMode;//[Offset: 0x85, Size: 0x1]

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x20, Size: 0x40]
	RawDistributionFloat StartAlpha;//[Offset: 0x60, Size: 0x28]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x20, Size: 0x40]
	RawDistributionFloat AlphaOverLife;//[Offset: 0x60, Size: 0x28]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x20, Size: 0x40]
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x60, Size: 0x28]
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x28, Size: 0x28]
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
	RawDistributionVector InheritVelocityScale;//[Offset: 0x54, Size: 0x40]
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0x94, Size: 0xc]
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat LifeTime;//[Offset: 0x20, Size: 0x28]

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x20, Size: 0x40]
	float DistributeOverNPoints;//[Offset: 0x60, Size: 0x4]
	float DistributeThreshold;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x1f, Size: 0x1]
	Vector UniversalOffset;//[Offset: 0x20, Size: 0xc]
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x2c, Size: 0xc]
	byte SelectionMethod;//[Offset: 0x38, Size: 0x1]
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1]
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39, Size: 0x1]
	float InheritVelocityScale;//[Offset: 0x3c, Size: 0x4]
	FName SkelMeshActorParamName;//[Offset: 0x40, Size: 0x8]
	int NumPreSelectedIndices;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: LocationBoneSocketInfo
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8]
	Vector Offset;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x20, Size: 0x40]
	RawDistributionVector LocationOffset;//[Offset: 0x60, Size: 0x40]
	RawDistributionVector ScaleFactor;//[Offset: 0xa0, Size: 0x40]
	RawDistributionVector Direction;//[Offset: 0xe0, Size: 0x40]

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f, Size: 0x1]
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f, Size: 0x1]
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f, Size: 0x1]
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f, Size: 0x1]
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f, Size: 0x1]
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f, Size: 0x1]
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f, Size: 0x1]
	RawDistributionFloat VelocityScale;//[Offset: 0x20, Size: 0x28]
	RawDistributionVector StartLocation;//[Offset: 0x48, Size: 0x40]

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	RawDistributionFloat StartRadius;//[Offset: 0x8c, Size: 0x28]
	RawDistributionFloat StartHeight;//[Offset: 0xb4, Size: 0x28]
	byte HeightAxis;//[Offset: 0xdc, Size: 0x1]

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MaterialInterface*[] MeshMaterials;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x20, Size: 0x40]
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x20, Size: 0x40]

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x20, Size: 0xc]
	int UpdateFlags;//[Offset: 0x2c, Size: 0x4]
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	byte ValueMethod;//[Offset: 0x9, Size: 0x1]
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	RawDistributionFloat ParamValue;//[Offset: 0xc, Size: 0x28]

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x20, Size: 0x28]

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x20, Size: 0x28]

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x20, Size: 0x40]

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x20, Size: 0x40]
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x20, Size: 0x40]
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x20, Size: 0x4]
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x24, Size: 0x28]
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	float MovementTolerance;//[Offset: 0x50, Size: 0x4]
	float MaxFrameDistance;//[Offset: 0x54, Size: 0x4]
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x20, Size: 0x4]
	RawDistributionFloat SubImageIndex;//[Offset: 0x24, Size: 0x28]
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x1c, Size: 0x4]
	int SubImages_Horizontal;//[Offset: 0x20, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0x24, Size: 0x4]
	byte BoundingMode;//[Offset: 0x28, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x29, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1]
	RawDistributionFloat FrameRate;//[Offset: 0x50, Size: 0x28]
	int StartingFrame;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x1f, Size: 0x1]
	int TextureTile;//[Offset: 0x20, Size: 0x4]
	float TextureTileDistance;//[Offset: 0x24, Size: 0x4]
	int Sheets;//[Offset: 0x28, Size: 0x4]
	int MaxBeamCount;//[Offset: 0x2c, Size: 0x4]
	float Speed;//[Offset: 0x30, Size: 0x4]
	int InterpolationPoints;//[Offset: 0x34, Size: 0x4]
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	int UpVectorStepSize;//[Offset: 0x3c, Size: 0x4]
	FName BranchParentName;//[Offset: 0x40, Size: 0x8]
	RawDistributionFloat Distance;//[Offset: 0x48, Size: 0x28]
	byte TaperMethod;//[Offset: 0x70, Size: 0x1]
	RawDistributionFloat TaperFactor;//[Offset: 0x74, Size: 0x28]
	RawDistributionFloat TaperScale;//[Offset: 0x9c, Size: 0x28]
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1]
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x20, Size: 0x230]
	GPUSpriteResourceData ResourceData;//[Offset: 0x250, Size: 0x160]
	float CameraMotionBlurAmount;//[Offset: 0x3b0, Size: 0x4]
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 0x1]

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x4, Size: 0x4]
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x8, Size: 0x4]
	ParticleModule*[] SpawnModules;//[Offset: 0xc, Size: 0xc]
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x20, Size: 0x70]
	FloatDistribution VectorFieldScale;//[Offset: 0x90, Size: 0x1c]
	FloatDistribution DragCoefficient;//[Offset: 0xac, Size: 0x1c]
	FloatDistribution PointAttractorStrength;//[Offset: 0xc8, Size: 0x1c]
	FloatDistribution Resilience;//[Offset: 0xe4, Size: 0x1c]
	Vector ConstantAcceleration;//[Offset: 0x100, Size: 0xc]
	Vector PointAttractorPosition;//[Offset: 0x10c, Size: 0xc]
	float PointAttractorRadiusSq;//[Offset: 0x118, Size: 0x4]
	Vector OrbitOffsetBase;//[Offset: 0x11c, Size: 0xc]
	Vector OrbitOffsetRange;//[Offset: 0x128, Size: 0xc]
	Vector2D InvMaxSize;//[Offset: 0x134, Size: 0x8]
	float InvRotationRateScale;//[Offset: 0x13c, Size: 0x4]
	float MaxLifetime;//[Offset: 0x140, Size: 0x4]
	int MaxParticleCount;//[Offset: 0x144, Size: 0x4]
	byte ScreenAlignment;//[Offset: 0x148, Size: 0x1]
	byte LockAxisFlag;//[Offset: 0x149, Size: 0x1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14a, Size: 0x1]
	byte CollisionMode;//[Offset: 0x14b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x150, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x154, Size: 0x4]
	RawDistributionVector DynamicColor;//[Offset: 0x158, Size: 0x40]
	RawDistributionFloat DynamicAlpha;//[Offset: 0x198, Size: 0x28]
	RawDistributionVector DynamicColorScale;//[Offset: 0x1c0, Size: 0x40]
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x200, Size: 0x28]

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0, Size: 0x4]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	Rotator MinInitialRotation;//[Offset: 0x40, Size: 0xc]
	Rotator MaxInitialRotation;//[Offset: 0x4c, Size: 0xc]
	Rotator RotationRate;//[Offset: 0x58, Size: 0xc]
	float Intensity;//[Offset: 0x64, Size: 0x4]
	float Tightness;//[Offset: 0x68, Size: 0x4]
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1]
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x1c, Size: 0x1c]
	float Intensity;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x1c]

--------------------------------
Class: GPUSpriteResourceData
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0xc]
	Color[] QuantizedMiscSamples;//[Offset: 0xc, Size: 0xc]
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x18, Size: 0xc]
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorBias;//[Offset: 0x40, Size: 0x10]
	Vector4 MiscScale;//[Offset: 0x50, Size: 0x10]
	Vector4 MiscBias;//[Offset: 0x60, Size: 0x10]
	Vector4 SimulationAttrCurveScale;//[Offset: 0x70, Size: 0x10]
	Vector4 SimulationAttrCurveBias;//[Offset: 0x80, Size: 0x10]
	Vector4 SubImageSize;//[Offset: 0x90, Size: 0x10]
	Vector4 SizeBySpeed;//[Offset: 0xa0, Size: 0x10]
	Vector ConstantAcceleration;//[Offset: 0xb0, Size: 0xc]
	Vector OrbitOffsetBase;//[Offset: 0xbc, Size: 0xc]
	Vector OrbitOffsetRange;//[Offset: 0xc8, Size: 0xc]
	Vector OrbitFrequencyBase;//[Offset: 0xd4, Size: 0xc]
	Vector OrbitFrequencyRange;//[Offset: 0xe0, Size: 0xc]
	Vector OrbitPhaseBase;//[Offset: 0xec, Size: 0xc]
	Vector OrbitPhaseRange;//[Offset: 0xf8, Size: 0xc]
	float GlobalVectorFieldScale;//[Offset: 0x104, Size: 0x4]
	float GlobalVectorFieldTightness;//[Offset: 0x108, Size: 0x4]
	float PerParticleVectorFieldScale;//[Offset: 0x10c, Size: 0x4]
	float PerParticleVectorFieldBias;//[Offset: 0x110, Size: 0x4]
	float DragCoefficientScale;//[Offset: 0x114, Size: 0x4]
	float DragCoefficientBias;//[Offset: 0x118, Size: 0x4]
	float ResilienceScale;//[Offset: 0x11c, Size: 0x4]
	float ResilienceBias;//[Offset: 0x120, Size: 0x4]
	float CollisionRadiusScale;//[Offset: 0x124, Size: 0x4]
	float CollisionRadiusBias;//[Offset: 0x128, Size: 0x4]
	float CollisionTimeBias;//[Offset: 0x12c, Size: 0x4]
	float CollisionRandomSpread;//[Offset: 0x130, Size: 0x4]
	float CollisionRandomDistribution;//[Offset: 0x134, Size: 0x4]
	float OneMinusFriction;//[Offset: 0x138, Size: 0x4]
	float RotationRateScale;//[Offset: 0x13c, Size: 0x4]
	float CameraMotionBlurAmount;//[Offset: 0x140, Size: 0x4]
	byte ScreenAlignment;//[Offset: 0x144, Size: 0x1]
	byte LockAxisFlag;//[Offset: 0x145, Size: 0x1]
	Vector2D PivotOffset;//[Offset: 0x148, Size: 0x8]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x154, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x158, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* Mesh;//[Offset: 0x20, Size: 0x4]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	byte MeshAlignment;//[Offset: 0x25, Size: 0x1]
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26, Size: 0x1]
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26, Size: 0x1]
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26, Size: 0x1]
	float Pitch;//[Offset: 0x28, Size: 0x4]
	float Roll;//[Offset: 0x2c, Size: 0x4]
	float Yaw;//[Offset: 0x30, Size: 0x4]
	RawDistributionVector RollPitchYawRange;//[Offset: 0x34, Size: 0x40]
	byte AxisLockOption;//[Offset: 0x7c, Size: 0x1]
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 0x1]
	byte CameraFacingUpAxisOption;//[Offset: 0x7e, Size: 0x1]
	byte CameraFacingOption;//[Offset: 0x7f, Size: 0x1]
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 0x1]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x20, Size: 0x40]
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x60, Size: 0x28]

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x20, Size: 0x40]

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	Vector LastRemoteNoisePosition;//[Offset: 0xc0, Size: 0xc]
	float NoiseLifetime;//[Offset: 0xcc, Size: 0x4]
	float LastRemoteNoiseVolume;//[Offset: 0xd0, Size: 0x4]
	float LastRemoteNoiseTime;//[Offset: 0xd4, Size: 0x4]
	float LastLocalNoiseVolume;//[Offset: 0xd8, Size: 0x4]
	float LastLocalNoiseTime;//[Offset: 0xdc, Size: 0x4]
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0x2da9988

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xbc, Size: 0x4]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xc0, Size: 0x4]
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0x2daa43c
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0x2daa3c4
	Transform GetBodyTargetTransform(FName BodyName);// 0x2daa2f0
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0x2daa1a0
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0x2daa0a0
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0x2da9f38

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x2c8, Size: 0x4]
	Actor* ConstraintActor1;//[Offset: 0x2cc, Size: 0x4]
	Actor* ConstraintActor2;//[Offset: 0x2d0, Size: 0x4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x238, Size: 0x4]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x240, Size: 0x8]
	Actor* ConstraintActor2;//[Offset: 0x248, Size: 0x4]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x250, Size: 0x8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x268, Size: 0x4]
	delegate OnConstraintBroken;//[Offset: 0x26c, Size: 0xc]
	ConstraintInstance ConstraintInstance;//[Offset: 0x278, Size: 0x1a0]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x2dac8c4
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x2dac844
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x2dac788
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x2dac6cc
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x2dac610
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x2dac58c
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x2dac46c
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x2dac3e8
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x2dac2c8
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x2dac1c8
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x2dac100
	void SetDisableCollision(bool bDisableCollision);// 0x2dac080
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x2dabfb8
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x2dabe9c
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x2dabd50
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x2dabbe8
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x2dabb64
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x2daba94
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x2daba14
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x2dab944
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x2dab888
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x2dab7cc
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x2dab710
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x2dab68c
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x2dab5bc
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x2dab4bc
	void SetAngularDriveMode(byte DriveMode);// 0x2dab444
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x2dab37c
	bool IsBroken();// 0x2dab354
	float GetCurrentTwist();// 0x2dab32c
	float GetCurrentSwing2();// 0x2dab304
	float GetCurrentSwing1();// 0x2dab2dc
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x2dab204
	void BreakConstraint();// 0x2dab1f0

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xbc, Size: 0x4]
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 0x1]
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcc, Size: 0x1]
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcc, Size: 0x1]
	float LinearDamping;//[Offset: 0xd0, Size: 0x4]
	float LinearStiffness;//[Offset: 0xd4, Size: 0x4]
	float AngularDamping;//[Offset: 0xd8, Size: 0x4]
	float AngularStiffness;//[Offset: 0xdc, Size: 0x4]
	float InterpolationSpeed;//[Offset: 0x140, Size: 0x4]
	void SetTargetRotation(Rotator NewRotation);// 0x2dae308
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0x2dae248
	void SetTargetLocation(Vector NewLocation);// 0x2dae1d8
	void SetLinearStiffness(float NewLinearStiffness);// 0x2dae160
	void SetLinearDamping(float NewLinearDamping);// 0x2dae0e8
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0x2dae070
	void SetAngularStiffness(float NewAngularStiffness);// 0x2dadff8
	void SetAngularDamping(float NewAngularDamping);// 0x2dadf80
	void ReleaseComponent();// 0x12e0f50
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0x2dade30
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0x2dadd24
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0x2dadbc8
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0x2dadaf0
	PrimitiveComponent* GetGrabbedComponent();// 0x2dadac8

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x238, Size: 0x4]
	float SpringDamping;//[Offset: 0x23c, Size: 0x4]
	float SpringLengthAtRest;//[Offset: 0x240, Size: 0x4]
	float SpringRadius;//[Offset: 0x244, Size: 0x4]
	byte SpringChannel;//[Offset: 0x248, Size: 0x1]
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]
	float SpringCompression;//[Offset: 0x24c, Size: 0x4]
	Vector GetSpringRestingPoint();// 0x2daeff4
	Vector GetSpringDirection();// 0x2daefac
	Vector GetSpringCurrentEndPoint();// 0x2daef64
	float GetNormalizedCompressionScalar();// 0x2daef3c

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x238, Size: 0x4]

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* meshComp;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x2cc, Size: 0x4]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	void OnInterpToggle(bool bEnable);// 0x2daf758

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x29c, Size: 0x4]
	float NormalDistortionStrength;//[Offset: 0x2a0, Size: 0x4]
	float PrefilterRoughness;//[Offset: 0x2a4, Size: 0x4]
	float PrefilterRoughnessDistance;//[Offset: 0x2a8, Size: 0x4]
	int ScreenPercentage;//[Offset: 0x2ac, Size: 0x4]
	float ExtraFOV;//[Offset: 0x2b0, Size: 0x4]
	float DistanceFromPlaneFadeStart;//[Offset: 0x2b4, Size: 0x4]
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2b8, Size: 0x4]
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2bc, Size: 0x4]
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2c0, Size: 0x4]
	float AngleFromPlaneFadeStart;//[Offset: 0x2c4, Size: 0x4]
	float AngleFromPlaneFadeEnd;//[Offset: 0x2c8, Size: 0x4]
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x235, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x238, Size: 0xc]
	Actor*[] HiddenActors;//[Offset: 0x244, Size: 0xc]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x250, Size: 0xc]
	Actor*[] ShowOnlyActors;//[Offset: 0x25c, Size: 0xc]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	float LODDistanceFactor;//[Offset: 0x26c, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x270, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x274, Size: 0x4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x278, Size: 0xc]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x2dd5ac8
	void ShowOnlyActorComponents(Actor* InActor);// 0x2dd5a50
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x2dd59d8
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x2dd5960
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x2dd58e8
	void HideComponent(PrimitiveComponent* InComponent);// 0x2dd5870
	void HideActorComponents(Actor* InActor);// 0x2dd57f8
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x2dd5780
	void ClearHiddenComponents();// 0x2dd576c

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0xc]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x294, Size: 0x4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x298, Size: 0x4]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x29c, Size: 0x4]

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xbc, Size: 0xc]
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc8, Size: 0xc]
	bool SupportsConvertibleLaptops();// 0x2daff04
	void PlatformEventDelegate__DelegateSignature();// 0x1c01fa0
	bool IsInTabletMode();// 0x2dafedc
	bool IsInLaptopMode();// 0x2dafeb4

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x1c, Size: 0xc]
	int ResponseCode;//[Offset: 0x28, Size: 0x4]
	int Tag;//[Offset: 0x2c, Size: 0x4]
	FString StringResponse;//[Offset: 0x30, Size: 0xc]
	byte[] BinaryResponse;//[Offset: 0x3c, Size: 0xc]
	int GetNumHeaders();// 0x1550134
	FString GetHeaderValue(FString HeaderName);// 0x2db0858
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0x2db06a8

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x2d0, Size: 0x4]
	void SetRadius(float NewRadius);// 0x2dc0a4c
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x2dc09d4

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0x2dc1cc0
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0x2dc1bb4
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0x2dc1aac
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0x2dc19a4
	void ResetBoneTransformByName(FName BoneName);// 0x2dc192c
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0x2dc180c
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0x2dc1730
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0x2dc1654
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0x2dc1578
	void CopyPoseFromSkeletalComponent(const SkeletalMeshComponent* InComponentToCopy);// 0x2dc1500

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x5c, Size: 0x6c]
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	int BasePoseIndex;//[Offset: 0xcc, Size: 0x4]
	FName RetargetSource;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0xc]
	PoseData[] Poses;//[Offset: 0xc, Size: 0xc]
	FName[] Tracks;//[Offset: 0x18, Size: 0xc]
	<FName,int> TrackMap;//[Offset: 0x24, Size: 0x3c]
	AnimCurveBase[] Curves;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0xc]
	bool[] LocalSpacePoseMask;//[Offset: 0xc, Size: 0xc]
	float[] CurveData;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: PoseWatch.Object
	EdGraphNode* Node;//[Offset: 0x1c, Size: 0x4]
	Color PoseWatchColour;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x240, Size: 0x4d0]
	float Priority;//[Offset: 0x710, Size: 0x4]
	float BlendRadius;//[Offset: 0x714, Size: 0x4]
	float BlendWeight;//[Offset: 0x718, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c, Size: 0x1]
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x2dc288c

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x300, Size: 0x4d0]
	float Priority;//[Offset: 0x7d0, Size: 0x4]
	float BlendRadius;//[Offset: 0x7d4, Size: 0x4]
	float BlendWeight;//[Offset: 0x7d8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dc, Size: 0x1]
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x2dc2c60

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	Actor*[] OverrideVisibleActors;//[Offset: 0x2f0, Size: 0xc]
	Actor*[] OverrideInvisibleActors;//[Offset: 0x2fc, Size: 0xc]
	FName[] OverrideInvisibleLevels;//[Offset: 0x308, Size: 0xc]

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x24, Size: 0x4]
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x20, Size: 0x10]
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	Object*[] ExplicitAssets;//[Offset: 0x34, Size: 0xc]
	class Object[] ExplicitBlueprints;//[Offset: 0x40, Size: 0xc]
	CollectionReference AssetCollection;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf8, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x100, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x104, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x110, Size: 0x4]
	float Buoyancy;//[Offset: 0x114, Size: 0x4]
	float Bounciness;//[Offset: 0x118, Size: 0x4]
	float Friction;//[Offset: 0x11c, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x124, Size: 0xc]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0xc]
	float HomingAccelerationMagnitude;//[Offset: 0x13c, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x140, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x148, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x14c, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x2dcb93c
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x2dcb8c4
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x1c01fa0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x1c01fa0
	Vector LimitVelocity(Vector NewVelocity);// 0x2dcb830

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x2c8, Size: 0x4]
	void ToggleForce();// 0x133cf7c
	void FireImpulse();// 0x133c1bc
	void EnableForce();// 0x133c1a0
	void DisableForce();// 0x12ee368

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x238, Size: 0x4]
	byte Falloff;//[Offset: 0x23c, Size: 0x1]
	float ImpulseStrength;//[Offset: 0x240, Size: 0x4]
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	float ForceStrength;//[Offset: 0x248, Size: 0x4]
	float DestructibleDamage;//[Offset: 0x24c, Size: 0x4]
	byte[] ObjectTypesToAffect;//[Offset: 0x250, Size: 0xc]
	void RemoveObjectTypeToAffect(byte ObjectType);// 0x2dcc224
	void FireImpulse();// 0x12fd530
	void AddObjectTypeToAffect(byte ObjectType);// 0x2dcc19c

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x400, Size: 0x1]
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x400, Size: 0x1]
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x400, Size: 0x1]
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x400, Size: 0x1]
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x400, Size: 0x1]
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x400, Size: 0x1]
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x400, Size: 0x1]
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x401, Size: 0x1]
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x401, Size: 0x1]
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x401, Size: 0x1]
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x401, Size: 0x1]
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x401, Size: 0x1]
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x401, Size: 0x1]
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x401, Size: 0x1]
	bool bDrawNavMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x401, Size: 0x1]
	float DrawOffset;//[Offset: 0x404, Size: 0x4]
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x408, Size: 0x1]
	int TilePoolSize;//[Offset: 0x40c, Size: 0x4]
	float TileSizeUU;//[Offset: 0x410, Size: 0x4]
	float CellSize;//[Offset: 0x414, Size: 0x4]
	float CellHeight;//[Offset: 0x418, Size: 0x4]
	float AgentRadius;//[Offset: 0x41c, Size: 0x4]
	float AgentHeight;//[Offset: 0x420, Size: 0x4]
	float AgentMaxHeight;//[Offset: 0x424, Size: 0x4]
	float AgentMaxSlope;//[Offset: 0x428, Size: 0x4]
	float AgentMaxStepHeight;//[Offset: 0x42c, Size: 0x4]
	float MinRegionArea;//[Offset: 0x430, Size: 0x4]
	float MergeRegionSize;//[Offset: 0x434, Size: 0x4]
	float MaxSimplificationError;//[Offset: 0x438, Size: 0x4]
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x43c, Size: 0x4]
	int TileNumberHardLimit;//[Offset: 0x440, Size: 0x4]
	int PolyRefTileBits;//[Offset: 0x444, Size: 0x4]
	int PolyRefNavPolyBits;//[Offset: 0x448, Size: 0x4]
	int PolyRefSaltBits;//[Offset: 0x44c, Size: 0x4]
	float DefaultDrawDistance;//[Offset: 0x450, Size: 0x4]
	float DefaultMaxSearchNodes;//[Offset: 0x454, Size: 0x4]
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x458, Size: 0x4]
	bool bWithoutLayerCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1]
	byte WithoutLayerCachePartitioning;//[Offset: 0x45d, Size: 0x1]
	byte RegionPartitioning;//[Offset: 0x45e, Size: 0x1]
	byte LayerPartitioning;//[Offset: 0x45f, Size: 0x1]
	int RegionChunkSplits;//[Offset: 0x460, Size: 0x4]
	int LayerChunkSplits;//[Offset: 0x464, Size: 0x4]
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1]
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x468, Size: 0x1]
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x468, Size: 0x1]
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x468, Size: 0x1]
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x468, Size: 0x1]
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x468, Size: 0x1]
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x468, Size: 0x1]
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x468, Size: 0x1]
	bool bOnlySavedOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1]
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46a, Size: 0x1]
	float TileSetUpdateInterval;//[Offset: 0x46c, Size: 0x4]
	float HeuristicScale;//[Offset: 0x470, Size: 0x4]
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x474, Size: 0x4]

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object

--------------------------------
Class: RegionObjectInterface.Interface.Object

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bMobileVTFLandscape;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	int MaxMobileCascades;//[Offset: 0x34, Size: 0x4]
	byte MobileMSAASampleCount;//[Offset: 0x38, Size: 0x1]
	float CharacterDiffuseScale;//[Offset: 0x3c, Size: 0x4]
	float CharacterDiffuseOffset;//[Offset: 0x40, Size: 0x4]
	float CharacterDiffusePower;//[Offset: 0x44, Size: 0x4]
	float CharacterMinShadowFactor;//[Offset: 0x48, Size: 0x4]
	float StaticMeshDiffuseScale;//[Offset: 0x4c, Size: 0x4]
	float StaticMeshDiffuseOffset;//[Offset: 0x50, Size: 0x4]
	float StaticMeshDiffusePower;//[Offset: 0x54, Size: 0x4]
	float StaticMeshMinShadowFactor;//[Offset: 0x58, Size: 0x4]
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	float GlobalStaticMeshCullingScreenSize;//[Offset: 0x60, Size: 0x4]
	float GlobalSkeletalMeshCullingScreenSize;//[Offset: 0x64, Size: 0x4]
	float GlobalParticleSystemCullingScreenSize;//[Offset: 0x68, Size: 0x4]
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	float MinScreenRadiusForLights;//[Offset: 0x70, Size: 0x4]
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x74, Size: 0x4]
	float MinScreenRadiusForCSMdepth;//[Offset: 0x78, Size: 0x4]
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 0x1]
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 0x1]
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 0x1]
	int ReflectionCaptureResolution;//[Offset: 0x80, Size: 0x4]
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1]
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 0x1]
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 0x1]
	bool bEightBitMeshDistanceFields;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x84, Size: 0x1]
	bool bGenerateLandscapeGIData;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x84, Size: 0x1]
	bool bCompressMeshDistanceFields;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1]
	float TessellationAdaptivePixelsPerTriangle;//[Offset: 0x88, Size: 0x4]
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	byte TranslucentSortPolicy;//[Offset: 0x8d, Size: 0x1]
	Vector TranslucentSortAxis;//[Offset: 0x90, Size: 0xc]
	byte CustomDepthStencil;//[Offset: 0x9c, Size: 0x1]
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d, Size: 0x1]
	bool bEnableAlphaChannelInPostProcessing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d, Size: 0x1]
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d, Size: 0x1]
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9d, Size: 0x1]
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9d, Size: 0x1]
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9d, Size: 0x1]
	byte DefaultFeatureAutoExposure;//[Offset: 0x9e, Size: 0x1]
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9f, Size: 0x1]
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9f, Size: 0x1]
	byte DefaultFeatureAntiAliasing;//[Offset: 0xa0, Size: 0x1]
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 0x1]
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 0x1]
	byte EarlyZPass;//[Offset: 0xa2, Size: 0x1]
	bool bEarlyZPassMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa3, Size: 0x1]
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa3, Size: 0x1]
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa3, Size: 0x1]
	byte ClearSceneMethod;//[Offset: 0xa4, Size: 0x1]
	bool bBasePassOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 0x1]
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 0x1]
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa5, Size: 0x1]
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa5, Size: 0x1]
	byte GBufferFormat;//[Offset: 0xa6, Size: 0x1]
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa7, Size: 0x1]
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa7, Size: 0x1]
	bool bInstancedStereo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa7, Size: 0x1]
	bool bMultiView;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa7, Size: 0x1]
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa7, Size: 0x1]
	bool bMobileMultiViewDirect;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa7, Size: 0x1]
	bool bMonoscopicFarField;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa7, Size: 0x1]
	bool bDebugCanvasInLayer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa7, Size: 0x1]
	float WireframeCullThreshold;//[Offset: 0xa8, Size: 0x4]
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	bool bSupportAtmosphericFog;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1]
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1]
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1]
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xac, Size: 0x1]
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1]
	uint32 MobileNumDynamicPointLights;//[Offset: 0xb0, Size: 0x4]
	bool bMobileDynamicPointLightsUseStaticBranch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0xb8, Size: 0x4]
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1]

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bPermutateHDRShaders;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bForceRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: ReusableActorComponentBase.ActorComponent.Object
	void OnReturnToPool();// 0x1c01fa0
	void OnGetFromPool();// 0x1c01fa0

--------------------------------
Class: Rig.Object
	TransformBase[] TransformBases;//[Offset: 0x1c, Size: 0xc]
	Node[] Nodes;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: TransformBase
	FName Node;//[Offset: 0x0, Size: 0x8]
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: TransformBaseConstraint
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: RigTransformConstraint
	byte TranformType;//[Offset: 0x0, Size: 0x1]
	FName ParentSpace;//[Offset: 0x8, Size: 0x8]
	float Weight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: Node
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName ParentName;//[Offset: 0x8, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	FString DisplayName;//[Offset: 0x40, Size: 0xc]
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0xf4, Size: 0xc]
	Vector PivotTranslation;//[Offset: 0x100, Size: 0xc]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10c, Size: 0x1]

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x2cc, Size: 0x4]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x2d0, Size: 0x4]
	void OnInterpToggle(bool bEnable);// 0x2daf758

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x29c, Size: 0x1]
	float FOVAngle;//[Offset: 0x2a0, Size: 0x4]
	float OrthoWidth;//[Offset: 0x2a4, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2a8, Size: 0x4]
	byte CaptureSource;//[Offset: 0x2ac, Size: 0x1]
	byte CompositeMode;//[Offset: 0x2ad, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2b0, Size: 0x4d0]
	float PostProcessBlendWeight;//[Offset: 0x780, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x790, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x7d4, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x7e0, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ec, Size: 0x1]
	void CaptureScene();// 0x2dd61a0
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x2dd6070

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x29c, Size: 0x4]
	void CaptureScene();// 0x2dd64a8

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0x9c, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xa0, Size: 0x10]
	byte OverrideFormat;//[Offset: 0xb0, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x2cc, Size: 0x4]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x2d0, Size: 0x4]
	void OnInterpToggle(bool bEnable);// 0x2daf758

--------------------------------
Class: Selection.Object

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.Object
	byte ShadowmapFlags;//[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x2cc, Size: 0x4]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x2d0, Size: 0x4]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x2d4, Size: 0x4]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x2d8, Size: 0x4]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x2dc, Size: 0x4]
	void OnRep_ReplicatedPhysAsset();// 0x133c1a0
	void OnRep_ReplicatedMesh();// 0x133c1bc
	void OnRep_ReplicatedMaterial1();// 0x133cf7c
	void OnRep_ReplicatedMaterial0();// 0x12ee368

--------------------------------
Class: SkeletalMeshReductionSettings.Object
	SkeletalMeshLODGroupSettings[] Settings;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	float ScreenSize;//[Offset: 0x0, Size: 0x4]
	SkeletalMeshOptimizationSettings OptimizationSettings;//[Offset: 0x4, Size: 0x148]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x2c8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	void OnRep_bEnabled();// 0x133c1bc

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x260, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x264, Size: 0x4]
	float SourceCubemapAngle;//[Offset: 0x268, Size: 0x4]
	int CubemapResolution;//[Offset: 0x26c, Size: 0x4]
	float SkyDistanceThreshold;//[Offset: 0x270, Size: 0x4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]
	LinearColor LowerHemisphereColor;//[Offset: 0x278, Size: 0x10]
	float OcclusionMaxDistance;//[Offset: 0x288, Size: 0x4]
	float Contrast;//[Offset: 0x28c, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x290, Size: 0x4]
	float MinOcclusion;//[Offset: 0x294, Size: 0x4]
	Color OcclusionTint;//[Offset: 0x298, Size: 0x4]
	byte OcclusionCombineMode;//[Offset: 0x29c, Size: 0x1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x348, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x2de622c
	void SetOcclusionTint(out const Color InTint);// 0x2de61a8
	void SetOcclusionExponent(float InOcclusionExponent);// 0x2de6130
	void SetOcclusionContrast(float InOcclusionContrast);// 0x2de60b8
	void SetMinOcclusion(float InMinOcclusion);// 0x2de6040
	void SetLightColor(LinearColor NewLightColor);// 0x2de5fc4
	void SetIntensity(float NewIntensity);// 0x2de5f4c
	void SetIndirectLightingIntensity(float NewIntensity);// 0x2de5ed4
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x2de5dd4
	void SetCubemap(TextureCube* NewCubemap);// 0x2de5d5c
	void RecaptureSky();// 0x2de5d48

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20, Size: 0x90]

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x135, Size: 0x1]

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x2cc, Size: 0x4]

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x294, Size: 0x4]
	float CaptureDistanceScale;//[Offset: 0x298, Size: 0x4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x29c, Size: 0x4]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x500, Size: 0x50]
	InterpCurveVector SplineInfo;//[Offset: 0x550, Size: 0x14]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x564, Size: 0x14]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x578, Size: 0x14]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x58c, Size: 0x14]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x5a4, Size: 0x4]
	float Duration;//[Offset: 0x5a8, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ae, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5af, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 0x1]
	float LoopPosition;//[Offset: 0x5b4, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x5b8, Size: 0xc]
	void UpdateSpline();// 0x2decf4c
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x2dece78
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x2decd18
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x2dec570
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x2decb64
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x2deca04
	void SetSplineWorldPoints(out const Vector[] Points);// 0x2dec930
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x2dec828
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x2dec6c8
	void SetSplineLocalPoints(out const Vector[] Points);// 0x2dec5f4
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x2dec570
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x2dec410
	void SetDrawDebug(bool bShow);// 0x2dec390
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x2dec2c4
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x2dec1b0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x2dec0e0
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x2dec01c
	bool IsClosedLoop();// 0x2debff4
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x2debf60
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x2debe7c
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x2debde8
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x2debd04
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x2debc70
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x2debbdc
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x2debaf8
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x2deba64
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2deb940
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2deb86c
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2deb798
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x2deb5e4
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x2deb480
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x2deb31c
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2deb1f8
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2de9ffc
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2deb124
	byte GetSplinePointType(int PointIndex);// 0x2deb0a4
	float GetSplineLength();// 0x2deb07c
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x2deafa0
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x2deaf10
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x2deae80
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2dead5c
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2deac88
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2deabb4
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2deaaa4
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2dea9e0
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2dea91c
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2dea7f8
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2dea724
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2dea650
	int GetNumberOfSplinePoints();// 0x2dea628
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2dea504
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2dea430
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2dea35c
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x2dea1f4
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x2dea0d0
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2de9ffc
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x2de9f7c
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x2de9efc
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2de9dd8
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2de9d04
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2de9c30
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x2de9ba0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2de9acc
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2de99e8
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x2de9874
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2de9790
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x2de96f4
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2de9610
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2de953c
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2de9458
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2de9374
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x2de92e8
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2de9204
	void ClearSplinePoints(bool bUpdateSpline);// 0x2de9184
	void AddSplineWorldPoint(out const Vector Position);// 0x2de90f8
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x2de8f98
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x2de8e80
	void AddSplineLocalPoint(out const Vector Position);// 0x2de8df4
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x2de8cd8
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x2de8bd0

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x14]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 0x14]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 0x14]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0xc]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x5ac, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x604, Size: 0xc]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x610, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x610, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x611, Size: 0x1]
	float SplineBoundaryMin;//[Offset: 0x614, Size: 0x4]
	float SplineBoundaryMax;//[Offset: 0x618, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x61c, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x620, Size: 0x10]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x630, Size: 0x1]
	void UpdateMesh();// 0x2defcfc
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x2defc38
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x2defb78
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x2defab4
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x2def9f0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x2def930
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x2def790
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x2def6bc
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x2def5f8
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x2def534
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x2def474
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x2def3b0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x2def2ec
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x2def22c
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x2def168
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x2def0a4
	Vector GetStartTangent();// 0x2def05c
	Vector2D GetStartScale();// 0x2def01c
	float GetStartRoll();// 0x2deeff4
	Vector GetStartPosition();// 0x2deefac
	Vector2D GetStartOffset();// 0x2deef6c
	Vector GetSplineUpDir();// 0x2deef24
	byte GetForwardAxis();// 0x2deeefc
	Vector GetEndTangent();// 0x2deeeb4
	Vector2D GetEndScale();// 0x2deee74
	float GetEndRoll();// 0x2deee4c
	Vector GetEndPosition();// 0x2deee04
	Vector2D GetEndOffset();// 0x2deedc4
	float GetBoundaryMin();// 0x2deed9c
	float GetBoundaryMax();// 0x2ddeab8

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector EndTangent;//[Offset: 0x38, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x44, Size: 0x8]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x238, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x23c, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x248, Size: 0xc]
	float ProbeSize;//[Offset: 0x254, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x258, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x259, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x259, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x259, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x259, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x259, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x259, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x25c, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x260, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x264, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x268, Size: 0x4]
	void SetActive(bool bNewActive, bool bReset);// 0x2cac1a8
	Rotator GetTargetRotation();// 0x2df0ec0

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2c8, Size: 0x4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x2cd, Size: 0x1]

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1]
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x235, Size: 0x1]
	Texture* Texture;//[Offset: 0x238, Size: 0x4]
	Texture* LeftTexture;//[Offset: 0x23c, Size: 0x4]
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1]
	Vector2D QuadSize;//[Offset: 0x244, Size: 0x8]
	Box2D UVRect;//[Offset: 0x24c, Size: 0x14]
	float CylinderRadius;//[Offset: 0x260, Size: 0x4]
	float CylinderOverlayArc;//[Offset: 0x264, Size: 0x4]
	int CylinderHeight;//[Offset: 0x268, Size: 0x4]
	byte StereoLayerType;//[Offset: 0x26c, Size: 0x1]
	byte StereoLayerShape;//[Offset: 0x26d, Size: 0x1]
	int Priority;//[Offset: 0x270, Size: 0x4]
	void SetUVRect(Box2D InUVRect);// 0x2df3270
	void SetTexture(Texture* InTexture);// 0x2df31f8
	void SetQuadSize(Vector2D InQuadSize);// 0x2df3188
	void SetPriority(int InPriority);// 0x2df3110
	void MarkTextureForUpdate();// 0x2df30fc
	Box2D GetUVRect();// 0x2df30d4
	Texture* GetTexture();// 0x2df30b8
	Vector2D GetQuadSize();// 0x2df3094
	int GetPriority();// 0x2df3078

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	static void ShowSplashScreen();// 0x2df4144
	static void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector2D Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x2df3fb4
	static void HideSplashScreen();// 0x2df3fa0
	static void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0x2df3f28

--------------------------------
Class: StringTable.Object

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x1c, Size: 0xc]
	FText UndefaultedText;//[Offset: 0x28, Size: 0xc]
	FText TransientText;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x500, Size: 0xc]
	MaterialInterface* TextMaterial;//[Offset: 0x50c, Size: 0x4]
	Font* Font;//[Offset: 0x510, Size: 0x4]
	byte HorizontalAlignment;//[Offset: 0x514, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x515, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x518, Size: 0x4]
	float XScale;//[Offset: 0x51c, Size: 0x4]
	float YScale;//[Offset: 0x520, Size: 0x4]
	float WorldSize;//[Offset: 0x524, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x528, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x52c, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x530, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 0x1]
	void SetYScale(float Value);// 0x2df5a08
	void SetXScale(float Value);// 0x2df5990
	void SetWorldSize(float Value);// 0x2df5918
	void SetVertSpacingAdjust(float Value);// 0x2df58a0
	void SetVerticalAlignment(byte Value);// 0x2df5828
	void SetTextRenderColor(Color Value);// 0x2df57b8
	void SetTextMaterial(MaterialInterface* Material);// 0x2df5740
	void SetText(FString Value);// 0x2df5684
	void SetHorizSpacingAdjust(float Value);// 0x2df560c
	void SetHorizontalAlignment(byte Value);// 0x2df5594
	void SetFont(Font* Value);// 0x2df551c
	void K2_SetText(out const FText Value);// 0x2df5378
	Vector GetTextWorldSize();// 0x2df5330
	Vector GetTextLocalSize();// 0x2df52e8

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0x9c, Size: 0x1]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xc0, Size: 0x88]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	void Stop();// 0x2df88a4
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x2df87e8
	void SetTimelineLengthMode(byte NewLengthMode);// 0x2df8770
	void SetTimelineLength(float NewLength);// 0x2df86f8
	void SetPlayRate(float NewRate);// 0x2df8680
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x2df856c
	void SetNewTime(float NewTime);// 0x2df84f4
	void SetLooping(bool bNewLooping);// 0x2df8474
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x2df83b8
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x2df8338
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x2df827c
	void ReverseFromEnd();// 0x2df8268
	void Reverse();// 0x2df8254
	void PlayFromStart();// 0x2df8240
	void Play();// 0x2df822c
	void OnRep_Timeline();// 0x2df8218
	bool IsReversing();// 0x2df81f0
	bool IsPlaying();// 0x2df81c8
	bool IsLooping();// 0x2df81a0
	float GetTimelineLength();// 0x2df8178
	float GetPlayRate();// 0x2df8150
	float GetPlaybackPosition();// 0x15536d8
	bool GetIgnoreTimeDilation();// 0x2df8128

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	float PlayRate;//[Offset: 0xc, Size: 0x4]
	float Position;//[Offset: 0x10, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x14, Size: 0xc]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0xc]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x2c, Size: 0xc]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x38, Size: 0xc]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x58, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]
	Property* DirectionProperty;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x4]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x4]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x4]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0x2dfb2b0
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0x2dfb0dc
	void Init();// 0x13e6168
	int GetNumAccounts();// 0x15b5a58
	FString GetAccountName(int AccountIndex);// 0x2dfafcc
	bool CanShowTweetUI();// 0x1391ee8
	bool AuthorizeAccounts();// 0x2cabfa4

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	Guid Guid;//[Offset: 0x64, Size: 0x10]

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x30, Size: 0x1]
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x34, Size: 0x3c]
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x70, Size: 0x3c]
	SoftClassPath DefaultCursor;//[Offset: 0xb0, Size: 0x18]
	SoftClassPath TextEditBeamCursor;//[Offset: 0xc8, Size: 0x18]
	SoftClassPath CrosshairsCursor;//[Offset: 0xe0, Size: 0x18]
	SoftClassPath HandCursor;//[Offset: 0xf8, Size: 0x18]
	SoftClassPath GrabHandCursor;//[Offset: 0x110, Size: 0x18]
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x128, Size: 0x18]
	SoftClassPath SlashedCircleCursor;//[Offset: 0x140, Size: 0x18]
	float ApplicationScale;//[Offset: 0x158, Size: 0x4]
	enum UIScaleRule;//[Offset: 0x15c, Size: 0x1]
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x160, Size: 0x18]
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x178, Size: 0x58]
	bool bScreenAdaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	Object*[] CursorClasses;//[Offset: 0x1d4, Size: 0xc]
	class Object* CustomScalingRuleClassInstance;//[Offset: 0x1e0, Size: 0x4]
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x1e4, Size: 0x4]

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8]
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x3c, Size: 0x4]
	byte ConstructionOp;//[Offset: 0x40, Size: 0x1]
	int VolumeSizeX;//[Offset: 0x44, Size: 0x4]
	int VolumeSizeY;//[Offset: 0x48, Size: 0x4]
	int VolumeSizeZ;//[Offset: 0x4c, Size: 0x4]
	int SubImagesX;//[Offset: 0x50, Size: 0x4]
	int SubImagesY;//[Offset: 0x54, Size: 0x4]
	int FrameCount;//[Offset: 0x58, Size: 0x4]
	float FramesPerSecond;//[Offset: 0x5c, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	VectorFieldStatic* NoiseField;//[Offset: 0x64, Size: 0x4]
	float NoiseScale;//[Offset: 0x68, Size: 0x4]
	float NoiseMax;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x3c, Size: 0x4]
	int SizeY;//[Offset: 0x40, Size: 0x4]
	int SizeZ;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x500, Size: 0x4]
	float Intensity;//[Offset: 0x504, Size: 0x4]
	float Tightness;//[Offset: 0x508, Size: 0x4]
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50c, Size: 0x1]
	void SetIntensity(float NewIntensity);// 0x2cc539c

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	static void LogText(Object* WorldContextObject, FString Text, FName LogCategory);// 0x2dfd000
	static void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory);// 0x2dfcd38
	static void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory);// 0x2dfca58

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x238, Size: 0x4]
	float Speed;//[Offset: 0x23c, Size: 0x4]
	float MinGustAmount;//[Offset: 0x240, Size: 0x4]
	float MaxGustAmount;//[Offset: 0x244, Size: 0x4]
	float Radius;//[Offset: 0x248, Size: 0x4]
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	void SetWindType(enum InNewType);// 0x2dfdb98
	void SetStrength(float InNewStrength);// 0x2dfdb20
	void SetSpeed(float InNewSpeed);// 0x2dfdaa8
	void SetRadius(float InNewRadius);// 0x2dfda30
	void SetMinimumGustAmount(float InNewMinGust);// 0x2dfd9b8
	void SetMaximumGustAmount(float InNewMaxGust);// 0x2dfd940

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: ActivityActorBase.Actor.Object
	FString actorName;//[Offset: 0x2c8, Size: 0xc]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	Character* ClientMainCharacter;//[Offset: 0x2d8, Size: 0x8]
	Character* CurActiveCharacter;//[Offset: 0x2e0, Size: 0x8]
	MeshComponent* Mesh;//[Offset: 0x2e8, Size: 0x4]
	ShapeComponent* ShapeCollision;//[Offset: 0x2ec, Size: 0x4]
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	FString ActivityName;//[Offset: 0x2f4, Size: 0xc]
	int SkillIndex;//[Offset: 0x300, Size: 0x4]
	enum SkillEntry;//[Offset: 0x304, Size: 0x1]
	AnimMontage* SoftAnimMontage;//[Offset: 0x308, Size: 0x28]
	int ButtonShowTextID;//[Offset: 0x330, Size: 0x4]
	Object* ButtonShowPic;//[Offset: 0x338, Size: 0x28]
	bool bButtonShowWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	bool bIsIgnoreShootHistoryLocusVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1]
	void UpdateButtonInfo(Character* Character, bool bShow, bool bForce);// 0x12debf0
	void TriggerSkillEvent(Character* Character);// 0x12deb70
	void RPC_Client_ShowInteractiveButton(Character* Character, bool bAdd);// 0x12deaa4
	void RPC_Client_RefreshButtonInfo(Character* Character, bool bShow);// 0x12de9d8
	void RefreshButtonInfo(Character* Character);// 0x12de960
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x12de818
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x12de61c
	bool LocalStartActive(Character* Character);// 0x12de594
	void LocalReset(Character* Character);// 0x12de514
	bool LocalInterruptActive(Character* Character);// 0x12de48c
	bool LocalActiveFinished(Character* Character);// 0x12de404
	MeshComponent* GetMesh();// 0x12de3e8
	Character* GetMainCharacter();// 0x12de3b8
	Character* GetActivedCharacter();// 0x12de38c
	bool ClientClickButton(Character* Character, out int OutReason);// 0x12de2b8
	bool BPStartActive(Character* Character, bool bSuccess, bool bClient);// 0x12de194
	void BPReset(Character* Character);// 0x12de114
	void BPOnCharacterAttached(Character* InCharacter);// 0x12de094
	bool BPInterruptActive(Character* Character, bool bSuccess, bool bClient);// 0x12ddf70
	AnimMontage* BPGetSoftAnimMontage(Character* InCharacter);// 0x12dde84
	bool BPClientClickButtonFailed(Character* Character, int Reason);// 0x1c01fa0
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient);// 0x12ddd60
	bool AllowShowButton(Character* Character, out int Reason);// 0x12ddc84
	bool AllowInteractive(Character* Character, out int Reason);// 0x12ddba8
	bool AllowClickButton(Character* Character, out int Reason);// 0x12ddacc

--------------------------------
Class: ActivityActorInterface.Interface.Object
	bool IsAllowInteractive();// 0x12df88c
	bool HasActivityActor(ActivityActorBase* InActor);// 0x12df804
	ActivityActorBase* GetCurActivityActor();// 0x12df7d4
	void DeleteActivityActor(ActivityActorBase* InActor);// 0x12df754
	void AddActivityActor(ActivityActorBase* InActor);// 0x12df6d4

--------------------------------
Class: ActivityInteractiveActor.ActivityActorBase.Actor.Object
	void UpdateButtonInfo(Character* Character, bool bShow, bool bForce);// 0x12debf0
	void TriggerSkillEvent(Character* Character);// 0x12deb70
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x12e0290
	bool LocalStartActive(Character* Character);// 0x12de594
	bool LocalInterruptActive(Character* Character);// 0x12de48c
	bool LocalActiveFinished(Character* Character);// 0x12de404
	Character* GetMainCharacter();// 0x12de3b8
	bool BPUpdateButtonInfo(Character* Character, bool bShow);// 0x1c01fa0
	bool BPAllowShowButton(Character* Character, out int Reason);// 0x12e01b4
	bool BPAllowInteractive(Character* Character);// 0x12e012c
	bool AllowShowButton(Character* Character, out int Reason);// 0x12ddc84
	bool AllowInteractive(Character* Character, out int Reason);// 0x12ddba8
	bool AllowClickButton(Character* Character, out int Reason);// 0x12ddacc

--------------------------------
Class: ActorAttachUIComp.ActorComponent.Object
	class ActorPositionWidget* UIClass;//[Offset: 0xc0, Size: 0x28]
	bool BShowMiniMapUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	int MiniMapUIIcon;//[Offset: 0xec, Size: 0x4]
	enum RangeType;//[Offset: 0xf0, Size: 0x1]
	float SquredDistanceOfSwitchingVisibility;//[Offset: 0xf4, Size: 0x4]
	ActorPositionWidget* PositionWidget;//[Offset: 0xf8, Size: 0x4]
	int AlertID;//[Offset: 0xfc, Size: 0x4]
	void SetActorPositionWidgetClass(class ActorPositionWidget InActorPositionWidgetClass);// 0x12e098c
	ActorPositionWidget* GetPositionWidget();// 0x12e0970

--------------------------------
Class: ActorPositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x2ec, Size: 0x4]
	TextBlock* TextBlockDist;//[Offset: 0x2f0, Size: 0x4]
	Actor* AttachedActor;//[Offset: 0x2f4, Size: 0x4]
	Vector4 Limit;//[Offset: 0x300, Size: 0x10]
	Vector2D UIOffset;//[Offset: 0x310, Size: 0x8]
	Vector LocOffset;//[Offset: 0x318, Size: 0xc]
	float AlphaBegin;//[Offset: 0x324, Size: 0x4]
	float AlphaEnd;//[Offset: 0x328, Size: 0x4]
	float AlphaStep;//[Offset: 0x32c, Size: 0x4]
	float AlphaBeginDistance;//[Offset: 0x330, Size: 0x4]
	float AlphaEndDistance;//[Offset: 0x334, Size: 0x4]
	float ScaleBegin;//[Offset: 0x338, Size: 0x4]
	float ScaleEnd;//[Offset: 0x33c, Size: 0x4]
	float ScaleStep;//[Offset: 0x340, Size: 0x4]
	float ScaleBeginDistance;//[Offset: 0x344, Size: 0x4]
	float ScaleEndDistance;//[Offset: 0x348, Size: 0x4]
	float MaxShowDistance;//[Offset: 0x34c, Size: 0x4]
	int TargetDistance;//[Offset: 0x350, Size: 0x4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x360, Size: 0x4]
	void SetCurrentWidgetVisible(bool visible);// 0x1c01fa0
	void DetachFromActor(Actor* InActor);// 0x12e26c4
	void AttachToActor(Actor* InActor);// 0x12e264c

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1ac, Size: 0x4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x1b0, Size: 0x4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x1b4, Size: 0x4]
	UAEUserWidget* ParentWidget;//[Offset: 0x1b8, Size: 0x4]
	Property*[] Params;//[Offset: 0x234, Size: 0xc]
	delegate widgetSizeNofity;//[Offset: 0x248, Size: 0xc]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x258, Size: 0x20]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x278, Size: 0x20]
	float TickRate;//[Offset: 0x298, Size: 0x4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e, Size: 0x1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f, Size: 0x1]
	Vector2D ScreenPos;//[Offset: 0x2a0, Size: 0x8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x2a8, Size: 0x8]
	enum FadingStatus;//[Offset: 0x2b8, Size: 0x1]
	float CurrentOpacity;//[Offset: 0x2bc, Size: 0x4]
	float FadingInTime;//[Offset: 0x2c0, Size: 0x4]
	float FadingOutTime;//[Offset: 0x2c4, Size: 0x4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 0x1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cb, Size: 0x1]
	FString UIMsgPrefix;//[Offset: 0x2cc, Size: 0xc]
	FString[] UIMsgFunctionList;//[Offset: 0x2d8, Size: 0xc]
	void UnRegistFromGameFrontendHUD();// 0x2ec1c40
	void SynchronizeBlueprintProperties();// 0x1c01fa0
	void Show();// 0x2ec1c2c
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x2ec1bb4
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x2ec1b3c
	static void SetOnWidgetShow(delegate onShow);// 0x2ec1aa0
	static void SetOnWidgetHide(delegate OnHide);// 0x2ec1a04
	static void SetOnClearUIStack(delegate onClear);// 0x2ec1968
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x2ec1820
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x2ec17a8
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x2ec16e4
	void ReceiveShow();// 0x1c01fa0
	void ReceiveHide();// 0x1c01fa0
	void ReceivedInitWidget();// 0x1c01fa0
	void ReCachedUIMsgFunction();// 0x2ec16d0
	static void PushOpenedUIStack(FString Name);// 0x2ec161c
	static void PopOpenedUIStack(FString curOpen);// 0x2ec1568
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x1c01fa0
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x1c01fa0
	void OnRightClicked(Vector2D TempScreenPos);// 0x1c01fa0
	void OnFadeOutFinished();// 0x13aa454
	void OnFadeInFinished();// 0x13aa438
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x1c01fa0
	void OnClicked(Vector2D TempScreenPos);// 0x1c01fa0
	void OnClearUIStack__DelegateSignature();// 0x1c01fa0
	bool IntCompare(int A, int B, enum CompareType);// 0x2ec1460
	void InitWidget(bool Recursive);// 0x2ec13e0
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x14151e4
	void Hide();// 0x2ec13cc
	void HandleUIMessageBattle(FString UIMessage);// 0x2ec1310
	void HandleUIMessage(FString UIMessage);// 0x2ec1254
	void HandleAEUIFunction(FString FuncName, enum UAEUIMsgCallType);// 0x2ec1154
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x2ec0fc0
	UAEUserWidget* GetParentWidget();// 0x2ec0f98
	PlayerController* GetOwningPlayer();// 0x154f800
	LogicManagerBase* GetOwningLogicManager();// 0x2ec0f70
	FrontendHUD* GetOwningFrontendHUD();// 0x2ec0f48
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x2ec0ec8
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x2ec0d7c
	UserWidget* GetChildWidget(FString WName);// 0x2ec0cb8
	bool FloatCompare(float A, float B, enum CompareType);// 0x2ec0bb0
	void DynamicAddUIMsgToCache(UAEUserWidget* Widget, FString FuncName);// 0x2ec0ab0
	void DestroyWidget();// 0x2ec0a9c
	static void ClearOpenedUIStack();// 0x2ec0a88
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x2ec09cc
	void ClearFunctionCache();// 0x2ec09b8
	void ClearClassWidgetTree();// 0x2ec09a4
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x1414d34

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c, Size: 0x4]
	FString FrontendUtilsClassName;//[Offset: 0x34, Size: 0xc]
	FrontendUtils* Utils;//[Offset: 0x40, Size: 0x4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44, Size: 0xc]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50, Size: 0x3c]
	int UnusedWidgetMinCount;//[Offset: 0x98, Size: 0x4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c, Size: 0x4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0, Size: 0x4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4, Size: 0x4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8, Size: 0x4]
	float MaxGCArrayObjectSize;//[Offset: 0xac, Size: 0x4]
	FName CurrentGameStatus;//[Offset: 0xb0, Size: 0x8]
	FName LastGameStatus;//[Offset: 0xb8, Size: 0x8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	FName PendingGameStatus;//[Offset: 0xc8, Size: 0x8]
	FString LatestGameStatusURL;//[Offset: 0xd0, Size: 0xc]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xdc, Size: 0xc]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xe8, Size: 0xc]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xf4, Size: 0xc]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x100, Size: 0xc]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x10c, Size: 0xc]
	delegate OnSetGameStatusEvent;//[Offset: 0x118, Size: 0xc]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x124, Size: 0xc]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x130, Size: 0xc]
	World* CurrentGameStatusWorld;//[Offset: 0x13c, Size: 0x4]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x2ebc3ec
	void OnPreLoadMap(FString MapName);// 0x2ebc328
	void OnPostLoadMapWithWorld(World* World);// 0x2ebc2a8
	void OnGameViewportClientCreated();// 0x12e82e4
	World* GetWorld();// 0x2ebc278
	FrontendUtils* GetUtils();// 0x2ebc250
	PlayerController* GetPlayerController();// 0x2ebc228
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x2ebc0c8
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x2ebc048
	GameViewportClient* GetGameViewportClient();// 0x2ebc020
	GameMode* GetGameMode();// 0x2ebbff8
	void EnableGuiTest(bool bEnable);// 0x2ebbf78
	void DynamicAddUIMsgToCache(FString FuncName, UAEUserWidget* Widget, FString module);// 0x2ebbdf4
	void ClearLogicManagerByName(FString ManagerName);// 0x2ebbc9c

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 0x4]
	FName CurrentSceneCameraName;//[Offset: 0x40, Size: 0x8]
	CameraActor*[] SceneCameraList;//[Offset: 0x48, Size: 0xc]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x54, Size: 0x3c]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x90, Size: 0xc]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x9c, Size: 0x3c]
	PointLight*[] ScenePointLightList;//[Offset: 0xd8, Size: 0xc]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xe4, Size: 0x3c]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x120, Size: 0x3c]
	<FName,Actor*> SceneMatChangeableMeshMap;//[Offset: 0x15c, Size: 0x3c]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x200, Size: 0xc]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x20c, Size: 0x4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x210, Size: 0x4]
	FString GlobalUIContainerClassName;//[Offset: 0x214, Size: 0xc]
	FName[] GlobalUIContainerNames;//[Offset: 0x220, Size: 0xc]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x22c, Size: 0x3c]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x268, Size: 0xc]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce);// 0x2ebdea0
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x2ebdd8c
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x2ebdb70
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x2ebd8c0
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x2ebd660
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x2ebd59c
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x2ebd4e0
	void RegisterSceneMatChangeableMesh(FName meshName, Actor* Mesh);// 0x2ebd424
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x2ebd368
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x2ebd2ac
	void PopAllPushedUI();// 0x2ebd298
	void OnAllSceneCamerasRegistered();// 0x12fe19c
	bool IsPushedPanel(out const FName ManagerName);// 0x2ebd204
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x2ebd0a4
	FString GetUIStackTopSrcTag();// 0x2ebcfe4
	FString GetUIStackTopDstTag();// 0x2ebcf24
	FString GetUIStackTop();// 0x2ebce64
	Actor* GetSceneMatChangeableMeshByIdx(FName meshName);// 0x2ebcde4
	FrontendHUD* GetOwningFrontendHUD();// 0x2ebcdbc
	Object* GetGlobalUIEventDispatcher();// 0x2ebcd94
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x2ebcd14
	void EnableLobbyMainLight(bool NewEnable);// 0x2ebcc94

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x2ec, Size: 0xc]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x13a9b00
	void RemoveWidget(UserWidget* Widget);// 0x2ec2dec
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x13d9bc8
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x2ec2d30
	void AddWidgetInternal(UserWidget* Widget);// 0x13e1064
	void AddWidget(UserWidget* Widget);// 0x2ec2cb8

--------------------------------
Class: LogicManagerBase.Object
	FString ManagerName;//[Offset: 0x1c, Size: 0xc]
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 0x4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	int iUIControlState;//[Offset: 0x3c, Size: 0x4]
	int DefaultSceneCameraIndex;//[Offset: 0x40, Size: 0x4]
	FName[] GameStatusList;//[Offset: 0x50, Size: 0xc]
	UAEUserWidget*[] WidgetList;//[Offset: 0x8c, Size: 0xc]
	Object*[] DelayMessage_Obj;//[Offset: 0xa8, Size: 0xc]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x2ebed3c
	bool IsEnableRemoveDynamicWidgets();// 0x2ebed14
	UAEUserWidget*[] GetWidgetList();// 0x2ebec54
	UAEUserWidget* GetWidgetByName(FString InName);// 0x2ebeb90
	FrontendHUD* GetOwningFrontendHUD();// 0x2d0d724
	int GetDefaultSceneCamera();// 0x2ebc250
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x2ebe9b0

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	int ZOrder;//[Offset: 0x50, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x23852b0
	void SetSupportNotch(bool InSupportNotch);// 0x2385230
	void SetSize(Vector2D InSize);// 0x23851c0
	void SetPosition(Vector2D InPosition);// 0x2385150
	void SetOffsets(Margin InOffset);// 0x23850c8
	void SetMinimum(Vector2D InMinimumAnchors);// 0x2385058
	void SetMaximum(Vector2D InMaximumAnchors);// 0x2384fe8
	void SetLayout(out const AnchorData InLayoutData);// 0x2384f50
	void SetAutoSize(bool InbAutoSize);// 0x2384ed0
	void SetAnchors(Anchors InAnchors);// 0x2384e48
	void SetAlignment(Vector2D InAlignment);// 0x2384dd8
	int GetZOrder();// 0x2384db0
	Vector2D GetSize();// 0x2384d70
	Vector2D GetPosition();// 0x2384d30
	Margin GetOffsets();// 0x2384cec
	AnchorData GetLayout();// 0x2384c98
	bool GetAutoSize();// 0x2384c70
	Anchors GetAnchors();// 0x2384c2c
	Vector2D GetAlignment();// 0x2384bec
	bool GeSupportNotch();// 0x2384bc4

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf0, Size: 0xc]
	delegate TextDelegate;//[Offset: 0x100, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x110, Size: 0x1c]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x140, Size: 0x40]
	Vector2D ShadowOffset;//[Offset: 0x180, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x188, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x198, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x1a8, Size: 0x4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 0x1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 0x1]
	void SetVerticalJustification(byte InJustification);// 0x239c46c
	void SetText(FText InText);// 0x239c1bc
	void SetShadowOffset(Vector2D InShadowOffset);// 0x239c14c
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x239c0d0
	void SetOpacity(float InOpacity);// 0x239c058
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x239bfe0
	void SetJustification(byte InJustification);// 0x239bf68
	void SetFont(SlateFontInfo InFontInfo);// 0x239bc50
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x239b930
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x239b8a4
	FText GetText();// 0x239b748

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xcc, Size: 0x4]
	byte Justification;//[Offset: 0xd0, Size: 0x1]
	byte VerticalJustification;//[Offset: 0xd1, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	float WrapTextAt;//[Offset: 0xd4, Size: 0x4]
	enum WrappingPolicy;//[Offset: 0xd8, Size: 0x1]
	Margin Margin;//[Offset: 0xdc, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0xec, Size: 0x4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x4]
	Object* FontMaterial;//[Offset: 0x4, Size: 0x4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8, Size: 0x1c]
	FName TypefaceFontName;//[Offset: 0x30, Size: 0x8]
	int Size;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	Object* OutlineMaterial;//[Offset: 0x4, Size: 0x4]
	LinearColor OutlineColor;//[Offset: 0x8, Size: 0x10]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 0xc]
	FName ContainerName;//[Offset: 0x10, Size: 0x8]
	int ZOrder;//[Offset: 0x18, Size: 0x4]
	UAEUserWidget* Widget;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0x95c, Size: 0x4]
	float FreeCameraStartMinPitchMax;//[Offset: 0x960, Size: 0x4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 0x1]
	<int> TouchIndexSet;//[Offset: 0x968, Size: 0x3c]
	byte OnFireTouchFingerIndex;//[Offset: 0x9a4, Size: 0x1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0x9a5, Size: 0x1]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0x9b8, Size: 0x3c]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0x9f4, Size: 0xc]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 0x1]
	byte OnFreeCameraFingerIndex;//[Offset: 0xa01, Size: 0x1]
	float FreeCameraSPL_Hor;//[Offset: 0xa04, Size: 0x4]
	float FreeCameraSPL_Ver;//[Offset: 0xa08, Size: 0x4]
	float FreeCamera_FPP_MIN;//[Offset: 0xa0c, Size: 0x4]
	float FreeCamera_FPP_MAX;//[Offset: 0xa10, Size: 0x4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xa14, Size: 0x4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xa18, Size: 0x4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xa1c, Size: 0x4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xa20, Size: 0x4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xa24, Size: 0x4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xa28, Size: 0x4]
	float RecoverLagDelayTime;//[Offset: 0xa2c, Size: 0x4]
	Vector2D StartPosition;//[Offset: 0xa30, Size: 0x8]
	Vector2D CurFreeCamPosition;//[Offset: 0xa38, Size: 0x8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xa40, Size: 0xc]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xa4c, Size: 0xc]
	FString FollowCandidateName;//[Offset: 0xa5c, Size: 0xc]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xa68, Size: 0x3c]
	Rotator FreeCameraStartRotation;//[Offset: 0xaa4, Size: 0xc]
	Transform FPPModeSpringArmTrans;//[Offset: 0xab0, Size: 0x30]
	byte FreeCameraFigerIndex;//[Offset: 0xae0, Size: 0x1]
	int8 CurrentBuildingIndex;//[Offset: 0xae1, Size: 0x1]
	int WeaponReconnectOpIndex;//[Offset: 0xae4, Size: 0x4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8, Size: 0x1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaea, Size: 0x1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0xaec, Size: 0xc]
	LinearColor CrossHairColor;//[Offset: 0xaf8, Size: 0x10]
	byte AutoAimType;//[Offset: 0xb08, Size: 0x1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 0x1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb11, Size: 0x1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 0x1]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0xb24, Size: 0xc]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0xb30, Size: 0x90]
	SensibilityConfig SensibilityConfig;//[Offset: 0xbc0, Size: 0xac]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 0x1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6d, Size: 0x1]
	int UseMotionControlType;//[Offset: 0xc70, Size: 0x4]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0xc74, Size: 0xc]
	delegate OnPlayerEnterFlying;//[Offset: 0xc80, Size: 0xc]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0xc8c, Size: 0xc]
	delegate OnPlayerExitFlying;//[Offset: 0xc98, Size: 0xc]
	delegate OnPlayerEnterJumping;//[Offset: 0xca4, Size: 0xc]
	delegate OnPlayerExitJumping;//[Offset: 0xcb0, Size: 0xc]
	delegate OnPlayerEnterParachute;//[Offset: 0xcbc, Size: 0xc]
	delegate OnPlayerExitParachute;//[Offset: 0xcc8, Size: 0xc]
	delegate OnPlayerEnterWater;//[Offset: 0xcd4, Size: 0xc]
	delegate OnPlayerExitWater;//[Offset: 0xce0, Size: 0xc]
	delegate OnPlayerEnterFighting;//[Offset: 0xcec, Size: 0xc]
	delegate OnPlayerExitFighting;//[Offset: 0xcf8, Size: 0xc]
	delegate OnPlayerEnterFinished;//[Offset: 0xd04, Size: 0xc]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0xd10, Size: 0xc]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0xd1c, Size: 0xc]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0xd28, Size: 0xc]
	delegate OnCharacterBreathChange;//[Offset: 0xd34, Size: 0xc]
	delegate OnCharacterAntidoteChange;//[Offset: 0xd40, Size: 0xc]
	delegate OnNightBeggan;//[Offset: 0xd4c, Size: 0xc]
	delegate OnNightEnded;//[Offset: 0xd58, Size: 0xc]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0xd64, Size: 0xc]
	int SelectedNightRenderConfig;//[Offset: 0xd70, Size: 0x4]
	delegate OnInitTaskData;//[Offset: 0xd74, Size: 0xc]
	delegate OnInitCollectionData;//[Offset: 0xd80, Size: 0xc]
	delegate OnPlayerDoEmote;//[Offset: 0xd8c, Size: 0xc]
	delegate OnPlayerKilling;//[Offset: 0xd98, Size: 0xc]
	delegate OnPickupItem;//[Offset: 0xda4, Size: 0xc]
	delegate OnDropItem;//[Offset: 0xdb0, Size: 0xc]
	delegate OnDeathBoxSpawned;//[Offset: 0xdbc, Size: 0xc]
	delegate OnTaskConditionActived;//[Offset: 0xdc8, Size: 0xc]
	delegate OnTaskConditionDeactived;//[Offset: 0xdd4, Size: 0xc]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0xdf8, Size: 0x44]
	delegate OnStartFireEvent;//[Offset: 0xe3c, Size: 0xc]
	delegate OnStopFireEvent;//[Offset: 0xe48, Size: 0xc]
	delegate OnReleaseFireBtn;//[Offset: 0xe54, Size: 0xc]
	delegate OnReleaseScreen;//[Offset: 0xe60, Size: 0xc]
	delegate OnFingerMove;//[Offset: 0xe6c, Size: 0xc]
	delegate OnSwitchCameraModeStart;//[Offset: 0xe78, Size: 0xc]
	delegate OnSwitchCameraModeEnd;//[Offset: 0xe84, Size: 0xc]
	delegate OnPlayerPickUpActor;//[Offset: 0xe90, Size: 0xc]
	delegate OnPlayerPutDownActor;//[Offset: 0xe9c, Size: 0xc]
	delegate OnPlayerPutDownAllProp;//[Offset: 0xea8, Size: 0xc]
	delegate OnSwitchWeapon;//[Offset: 0xeb4, Size: 0xc]
	delegate OnEquipWeaponDel;//[Offset: 0xec0, Size: 0xc]
	delegate OnUnequipWeaponDel;//[Offset: 0xecc, Size: 0xc]
	delegate OnUseInventoryItem;//[Offset: 0xed8, Size: 0xc]
	delegate OnChangeBattleOwnerDel;//[Offset: 0xee4, Size: 0xc]
	delegate OnDamageToOther;//[Offset: 0xef0, Size: 0xc]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xefc, Size: 0xc]
	delegate DelegatePlayerGoldChange;//[Offset: 0xf08, Size: 0xc]
	delegate DelegatePlayerLevelChange;//[Offset: 0xf14, Size: 0xc]
	delegate OnGameStartCountDownDelegate;//[Offset: 0xf20, Size: 0xc]
	delegate OnRank;//[Offset: 0xf2c, Size: 0xc]
	delegate OnGameStartDelegate;//[Offset: 0xf38, Size: 0xc]
	delegate OnPlayerNameChange;//[Offset: 0xf44, Size: 0xc]
	delegate OnUseMainSlot;//[Offset: 0xf50, Size: 0xc]
	delegate OnBackpackMainSlot;//[Offset: 0xf5c, Size: 0xc]
	delegate OnRemoveMainSlot;//[Offset: 0xf68, Size: 0xc]
	delegate OnRepPlayerState;//[Offset: 0xf74, Size: 0xc]
	delegate OnRepTeammateChange;//[Offset: 0xf80, Size: 0xc]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0xf8c, Size: 0xc]
	delegate OnMapMarkChangeDelegate;//[Offset: 0xf9c, Size: 0xc]
	delegate OnShowSkillPrompt;//[Offset: 0xfa8, Size: 0xc]
	delegate OnStartAutoSprintCountDown;//[Offset: 0xfb4, Size: 0xc]
	delegate OnShowAutoSprintButton;//[Offset: 0xfc0, Size: 0xc]
	delegate OnPlayerChangeWearingDone;//[Offset: 0xfcc, Size: 0xc]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0xfd8, Size: 0xc]
	delegate OnPlayerFinalAssistKill;//[Offset: 0xfe4, Size: 0xc]
	delegate OnEquipmentAvatarChange;//[Offset: 0xff0, Size: 0xc]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0xffc, Size: 0xc]
	delegate OnGameStateChange;//[Offset: 0x1008, Size: 0xc]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x1014, Size: 0xc]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x1030, Size: 0x4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1034, Size: 0xc]
	delegate OnAutoSprintActive;//[Offset: 0x1040, Size: 0xc]
	delegate OnTakeDamagedDelegate;//[Offset: 0x104c, Size: 0xc]
	delegate OnLostConnection;//[Offset: 0x1074, Size: 0xc]
	delegate OnReconnected;//[Offset: 0x1080, Size: 0xc]
	delegate OnExitGame;//[Offset: 0x108c, Size: 0xc]
	delegate OnSpectatorChange;//[Offset: 0x1098, Size: 0xc]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x10a4, Size: 0xc]
	delegate RunOnNextFrameDelegate;//[Offset: 0x10b0, Size: 0xc]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x10bc, Size: 0x4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x10c0, Size: 0x4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x10c4, Size: 0x4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x10c8, Size: 0x4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cc, Size: 0x1]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x128c, Size: 0xc]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129c, Size: 0x1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129d, Size: 0x1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129e, Size: 0x1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129f, Size: 0x1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a0, Size: 0x1]
	bool DisableItemAttachListFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a1, Size: 0x1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a2, Size: 0x1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a3, Size: 0x1]
	float PC_CameraMoveRateX;//[Offset: 0x12a4, Size: 0x4]
	float PC_CameraMoveRateY;//[Offset: 0x12a8, Size: 0x4]
	float Mobile_CameraMoveRateX;//[Offset: 0x12ac, Size: 0x4]
	float Mobile_CameraMoveRateY;//[Offset: 0x12b0, Size: 0x4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x12b4, Size: 0x4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x12b8, Size: 0x4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12bc, Size: 0x1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x12c0, Size: 0x24]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x12e4, Size: 0x24]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1308, Size: 0x8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1310, Size: 0x8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1318, Size: 0x24]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x133c, Size: 0x8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x1344, Size: 0x8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x134c, Size: 0x24]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x1370, Size: 0x3c]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x13ac, Size: 0x4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x13b0, Size: 0x4]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b4, Size: 0x1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b5, Size: 0x1]
	byte CurCameraMode;//[Offset: 0x13bc, Size: 0x1]
	FName AutoScopeAimCompName;//[Offset: 0x13c0, Size: 0x8]
	float AutoScopeAimTraceDistance;//[Offset: 0x13c8, Size: 0x4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13cc, Size: 0x1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13cd, Size: 0x1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ce, Size: 0x1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13cf, Size: 0x1]
	float MoveableLandHardTime;//[Offset: 0x13d0, Size: 0x4]
	float CanMoveCDTime;//[Offset: 0x13d4, Size: 0x4]
	float CanSprintCDTime;//[Offset: 0x13d8, Size: 0x4]
	float SwitchPoseCDTime;//[Offset: 0x13dc, Size: 0x4]
	float MovealbeSwitchPoseTime;//[Offset: 0x13e0, Size: 0x4]
	float AutoSprintRequestCD;//[Offset: 0x13e4, Size: 0x4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e8, Size: 0x1]
	Vector CurScreenMoveSpeed;//[Offset: 0x13ec, Size: 0xc]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x13f8, Size: 0x4]
	float SpecialDeviceRate;//[Offset: 0x13fc, Size: 0x4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1400, Size: 0x3c]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143c, Size: 0x1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143d, Size: 0x1]
	int AutoAimLevel;//[Offset: 0x1440, Size: 0x4]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1444, Size: 0x1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x1448, Size: 0x4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144c, Size: 0x1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144d, Size: 0x1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x1450, Size: 0x8]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1458, Size: 0x1]
	float AccumulateYawInput;//[Offset: 0x145c, Size: 0x4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x1460, Size: 0x4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1464, Size: 0x1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1465, Size: 0x1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1466, Size: 0x1]
	float NoRespondArea;//[Offset: 0x1468, Size: 0x4]
	float ComfortableSwipeAddition;//[Offset: 0x146c, Size: 0x4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1470, Size: 0x1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1471, Size: 0x1]
	byte sprintOptType;//[Offset: 0x1472, Size: 0x1]
	float JoystickSprintDisThreshold;//[Offset: 0x1474, Size: 0x4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x1478, Size: 0x4]
	float JoystickSprintBtnHeight;//[Offset: 0x147c, Size: 0x4]
	float JoystickSprintAngleThreshold;//[Offset: 0x1480, Size: 0x4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1484, Size: 0x1]
	byte JoystickOperatingMode;//[Offset: 0x1485, Size: 0x1]
	float EasyGoStraightAngle;//[Offset: 0x1488, Size: 0x4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148c, Size: 0x1]
	<byte,float> TouchForceMap;//[Offset: 0x1490, Size: 0x3c]
	float TouchForceFireThreshold;//[Offset: 0x14cc, Size: 0x4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x14d0, Size: 0x4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x14d4, Size: 0x4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x14d8, Size: 0x4]
	int TouchForceWatchFrame;//[Offset: 0x14dc, Size: 0x4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e0, Size: 0x1]
	float InputTouchRepeatLastTime;//[Offset: 0x14e4, Size: 0x4]
	byte TouchFireType;//[Offset: 0x14e8, Size: 0x1]
	float TestForce;//[Offset: 0x14ec, Size: 0x4]
	delegate On3DTouchForceChange;//[Offset: 0x14f0, Size: 0xc]
	delegate OnDoubleClickCheck;//[Offset: 0x14fc, Size: 0xc]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1508, Size: 0x1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1509, Size: 0x1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150a, Size: 0x1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150b, Size: 0x1]
	float AutoSprintBtnTime;//[Offset: 0x150c, Size: 0x4]
	float AutoSprintWaitingTime;//[Offset: 0x1510, Size: 0x4]
	float AutoSprintThreshold;//[Offset: 0x1514, Size: 0x4]
	float JoystickTriggerSprintDuration;//[Offset: 0x1518, Size: 0x4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x151c, Size: 0x4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1520, Size: 0x4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1524, Size: 0x1]
	float CurrentCameraFOV;//[Offset: 0x1528, Size: 0x4]
	float MinFovChangeView;//[Offset: 0x152c, Size: 0x4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1530, Size: 0x30]
	int GameTipMsgID;//[Offset: 0x1560, Size: 0x4]
	FString GameTipParam1;//[Offset: 0x1564, Size: 0xc]
	FString GameTipParam2;//[Offset: 0x1570, Size: 0xc]
	float AutoSprintCD;//[Offset: 0x15b8, Size: 0x4]
	TeamMateStateInfo[] TeamMateStates;//[Offset: 0x15bc, Size: 0xc]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x15c8, Size: 0x3c]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x1604, Size: 0x3c]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1660, Size: 0x30]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1728, Size: 0x4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x172c, Size: 0x4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1730, Size: 0x4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1734, Size: 0x4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x1744, Size: 0x4]
	FString[] ForbitPickList;//[Offset: 0x1750, Size: 0xc]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1768, Size: 0x1]
	int pickupPlayerChoice;//[Offset: 0x176c, Size: 0x4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1770, Size: 0x1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1771, Size: 0x1]
	float RescueRemainingSeconds;//[Offset: 0x1774, Size: 0x4]
	float RescueTotalSeconds;//[Offset: 0x1778, Size: 0x4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177c, Size: 0x1]
	float FreeViewUpRate;//[Offset: 0x1780, Size: 0x4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x1784, Size: 0x1]
	int MaxCacheInputSpeedNum;//[Offset: 0x1788, Size: 0x4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178c, Size: 0x1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178e, Size: 0x1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x1790, Size: 0xc]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179c, Size: 0x1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x179d, Size: 0x1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179e, Size: 0x1]
	byte CurAimFireFingerIndex;//[Offset: 0x17dc, Size: 0x1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x1844, Size: 0x4]
	BackpackComponent* BackpackComponent;//[Offset: 0x1900, Size: 0x4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x1904, Size: 0x4]
	ChatComponent* ChatComponent;//[Offset: 0x1908, Size: 0x4]
	GuideComponent* GuideComponent;//[Offset: 0x190c, Size: 0x4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x1910, Size: 0x4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x1914, Size: 0x4]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192d, Size: 0x1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x192e, Size: 0x1]
	BattleItemData[] ObservedItemList;//[Offset: 0x194c, Size: 0xc]
	uint32[] FiringPlayerList;//[Offset: 0x19b8, Size: 0xc]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x19c4, Size: 0xc]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x19d0, Size: 0xc]
	delegate OnCharacterStatesChange;//[Offset: 0x19dc, Size: 0xc]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x19e8, Size: 0xc]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f4, Size: 0x1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x19f8, Size: 0xc]
	float GotoSpectatingDelayTime;//[Offset: 0x1a08, Size: 0x4]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x1a0c, Size: 0xc]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x1a18, Size: 0xc]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x1a24, Size: 0xc]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x1a30, Size: 0xc]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x1a3c, Size: 0xc]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x1a48, Size: 0x3c]
	ObservedData ObservedData;//[Offset: 0x1a88, Size: 0x48]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae1, Size: 0x1]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x1ae4, Size: 0xc]
	delegate OnToggleOBMapShowHide;//[Offset: 0x1af4, Size: 0xc]
	delegate OnInterruptGameButtonShow;//[Offset: 0x1b00, Size: 0xc]
	delegate OnToggleOBPlayerList;//[Offset: 0x1b14, Size: 0xc]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x1b20, Size: 0xc]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x1b2c, Size: 0xc]
	delegate OnToggleOBTeamList;//[Offset: 0x1b38, Size: 0xc]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x1b44, Size: 0xc]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x1b60, Size: 0x4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x1b64, Size: 0x4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x1b68, Size: 0x4]
	byte iPlayerAliasInfoCount;//[Offset: 0x1b6c, Size: 0x1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b6d, Size: 0x1]
	int FireMode;//[Offset: 0x1b70, Size: 0x4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b74, Size: 0x1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b75, Size: 0x1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b76, Size: 0x1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b77, Size: 0x1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x1b78, Size: 0xc]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x1b84, Size: 0xc]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x1b9c, Size: 0xc]
	Actor*[] nowGrenadeList;//[Offset: 0x1bb4, Size: 0xc]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc0, Size: 0x1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x1bc4, Size: 0xc]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x1bd0, Size: 0xc]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x1bdc, Size: 0xc]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x1be8, Size: 0xc]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x1bf4, Size: 0xc]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c01, Size: 0x1]
	delegate OnPlayerCanJump;//[Offset: 0x1c04, Size: 0xc]
	delegate OnPlayerCannotJump;//[Offset: 0x1c10, Size: 0xc]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1c, Size: 0x1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x1c20, Size: 0xc]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x1c2c, Size: 0xc]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c38, Size: 0x1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x1c3c, Size: 0x4]
	float CanOpenParachuteHeight;//[Offset: 0x1c40, Size: 0x4]
	float ForceOpenParachuteHeight;//[Offset: 0x1c44, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0x1c48, Size: 0x4]
	float RealTimePawnHeight;//[Offset: 0x1c4c, Size: 0x4]
	Rotator OB_DestControlRotation;//[Offset: 0x1c50, Size: 0xc]
	float OB_RotationLagSpeed;//[Offset: 0x1c68, Size: 0x4]
	ItemDefineWeaponSyncData[] SpawnAndBackpackWeaponReplicatedDataArray;//[Offset: 0x1c84, Size: 0xc]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x1c94, Size: 0xc]
	Actor* ThePlane;//[Offset: 0x1ca0, Size: 0x4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x1cac, Size: 0x4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x1cb4, Size: 0xc]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x1cc8, Size: 0x4]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cce, Size: 0x1]
	FString LastBreathMurder;//[Offset: 0x1cd0, Size: 0xc]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cdc, Size: 0x1]
	uint64 LastBreathMurderUID;//[Offset: 0x1ce0, Size: 0x8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x1ce8, Size: 0x4]
	FString murderName;//[Offset: 0x1cec, Size: 0xc]
	FString FinalMurderName;//[Offset: 0x1cf8, Size: 0xc]
	uint64 MurderUID;//[Offset: 0x1d08, Size: 0x8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d10, Size: 0x1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d11, Size: 0x1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x1d44, Size: 0x3c]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x1d80, Size: 0x3c]
	float OceanSideDetectDistance;//[Offset: 0x1dc4, Size: 0x4]
	float OceanSideDetectInterval;//[Offset: 0x1dc8, Size: 0x4]
	int CurrOBAirDropID;//[Offset: 0x1dcc, Size: 0x4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x1dd0, Size: 0x3c]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x1e9c, Size: 0x4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea0, Size: 0x1]
	FString ClientActivePlatformProfileName;//[Offset: 0x1ea4, Size: 0xc]
	float ZMoveDisCalcThreshold;//[Offset: 0x1eec, Size: 0x4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef0, Size: 0x1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x1ef4, Size: 0x4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef8, Size: 0x1]
	enum ServerStateType;//[Offset: 0x1ef9, Size: 0x1]
	enum ClientStateType;//[Offset: 0x1efa, Size: 0x1]
	bool bDebugDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1efb, Size: 0x1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f10, Size: 0x1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f11, Size: 0x1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f12, Size: 0x1]
	float ObservingTime;//[Offset: 0x1f14, Size: 0x4]
	KillerTracker* tracker;//[Offset: 0x1f18, Size: 0x4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2c, Size: 0x1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2d, Size: 0x1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x1f78, Size: 0x4]
	bool IsQuickGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f7c, Size: 0x1]
	FString DefaultHUDClassPath;//[Offset: 0x1f80, Size: 0xc]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x1fa8, Size: 0xc]
	STExtraPlayerController* DieInstigator;//[Offset: 0x1fb4, Size: 0x4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb8, Size: 0x1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb9, Size: 0x1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x1fbc, Size: 0x4]
	int BOptimizeBulletHit;//[Offset: 0x1fc0, Size: 0x4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x1fc4, Size: 0x38]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x1ffc, Size: 0xc]
	int MaxTeamFootprintCount;//[Offset: 0x2008, Size: 0x4]
	int MaxOtherFootprintCount;//[Offset: 0x200c, Size: 0x4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x2010, Size: 0x3c]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x204c, Size: 0x3c]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x208c, Size: 0x4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x2090, Size: 0xc]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x209c, Size: 0x3c]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x20f0, Size: 0x4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x20f4, Size: 0x4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x20f8, Size: 0x4]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2168, Size: 0x1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2169, Size: 0x1]
	float ControllerRelativeYawMin;//[Offset: 0x216c, Size: 0x4]
	float ControllerRelativeYawMax;//[Offset: 0x2170, Size: 0x4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x217c, Size: 0x8]
	int IdCardMarkType;//[Offset: 0x2188, Size: 0x4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218f, Size: 0x1]
	int VehicleControlMode;//[Offset: 0x2190, Size: 0x4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2194, Size: 0x1]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x2198, Size: 0x4]
	uint32 LastKillerKey;//[Offset: 0x219c, Size: 0x4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a0, Size: 0x1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a1, Size: 0x1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c4, Size: 0x1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c5, Size: 0x1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c6, Size: 0x1]
	float LastReportAntiDataTime;//[Offset: 0x21c8, Size: 0x4]
	delegate OnTeammateConveyStatusChangedDelegate;//[Offset: 0x21cc, Size: 0xc]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x21d8, Size: 0xc]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x21e4, Size: 0xc]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x21f0, Size: 0xc]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x21fc, Size: 0xc]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x2208, Size: 0xc]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x2214, Size: 0xc]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x2220, Size: 0x4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x2224, Size: 0x4]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2230, Size: 0x1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2240, Size: 0x1]
	double LastFlyLeapPlatfromTime;//[Offset: 0x23a8, Size: 0x8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23ec, Size: 0x1]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x23f0, Size: 0x10]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x2400, Size: 0x10]
	void VisualizeItem();// 0x12e82e4
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x14c0d38
	void ViewPlane();// 0x14c0d24
	void UseZombieModeSkill();// 0x14c0d10
	void UserDropItemOperation(ItemDefineID DefineID);// 0x14c0c88
	void UseItem(int ID);// 0x14c0c10
	void UpdatePoseViewPitchLimit();// 0x14c0bfc
	void UpdatePoseState(byte PoseType);// 0x14c0b84
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x14c0abc
	void UnLoadAllCollision(bool Unload);// 0x14c0a3c
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x14c089c
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x14c063c
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x14c0744
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x14c063c
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x14c0580
	void TouchMove(Vector Loc, byte FingerIndex);// 0x14c04c4
	bool TouchEnd(byte PressType);// 0x14c0444
	void TouchBegin(byte PressType);// 0x14c03cc
	void ToggleVehicleSync(bool Val);// 0x1343e64
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x1343e64
	void ToggleUserCmdDeltaFlag(bool Val);// 0x1343e64
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x1343e64
	void ToggleUserCmdDelta(bool Val);// 0x1343e64
	void ToggleServerAcknowledgePossession(bool Val);// 0x1343e64
	void ToggleOBTPPFollowFreeView();// 0x14c03b8
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x14c0338
	void ToggleCheatLocation(bool Val);// 0x1343e64
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x14c0238
	void TeamNoAlwaysRelevant();// 0x14c0224
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, int VoiceID);// 0x14c0044
	void SwitchViewTarget();// 0x12e82e4
	void SwitchToTeamByNumPressed();// 0x14c0030
	void SwitchToPlayerByNumPressed();// 0x14c001c
	void SwitchToDeadBox();// 0x14c0008
	void SwitchShowUI();// 0x14bfff4
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x14bfef8
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState);// 0x14bfdf0
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x14bfd2c
	void SwitchMouseCursorShowState();// 0x14bfd18
	void SwitchGenerateItem();// 0x14bfcbc
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x14bfc00
	void SwitchCameraModeByOrder();// 0x14bfbec
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x14bfa90
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x14bf988
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x14bf8b0
	void StartReadyCountDown();// 0x14bf89c
	void StartLandOnGroundAfterJumpPlane();// 0x14bf888
	void StartInputCameraMoveTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);// 0x14bf770
	void StartGame();// 0x14bf75c
	void StartFreeCamera(byte FigerIndex);// 0x14bf6e4
	void StartAirDropSpecified(float X, float Y);// 0x14bf628
	void StartAirDropBackupEnter(float X, float Y, int MaxPlaneNum);// 0x14bf528
	void StartAirDrop(int Index);// 0x14bf4b0
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x14bf3b0
	void StartAirAttack(int Index);// 0x14bf338
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x14bf270
	void SpawnVehicleWithPath(FString Path);// 0x14bf1b4
	void SpawnVehicleInAir();// 0x14bf1a0
	void SpawnVehicle();// 0x14bf18c
	void SpawnHeavyweaponBox(int Num);// 0x14bf114
	void SpawnAllVehicle(FString Path);// 0x14bf058
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x14bef58
	void SpawnAI(int Num);// 0x14beee0
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x14bee68
	void ShutDownItemGenerate(bool IsOpen);// 0x14bede8
	void ShowWeaponRecordInfo();// 0x12e82e4
	void ShowVaultEnable();// 0x143c964
	void ShowStringMsg(const FString Message, FString FromPlayerName, int msgID);// 0x14beb34
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x14be9f0
	void ShowMovePath(const Vector[] Path);// 0x14be92c
	void ShowFireBtn(bool bShow);// 0x1c01fa0
	void ShowBulletShoot(Vector StartLoc, Rotator rot);// 0x14be864
	void ShowAllRoles();// 0x12e82e4
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x14be7e4
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x14be764
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x14be6e4
	void SetUAETriggerEnable(bool IsEnbale);// 0x14be664
	void SetTimeSpeedFactor(float Val);// 0x1396184
	void SetTimeSpeedCheck(bool Val);// 0x1343e64
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x14be554
	void SetStateLeftTime(int LeftTime);// 0x14be4dc
	void SetSpeed(float Modifier);// 0x14be464
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x14be3e4
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x1343e64
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x14be31c
	void SetReconnectZombieWaveDataToClient(const ZombieWaveUIState[] ZombieWaveUIState, float PastTime);// 0x14be178
	void SetRageLevel(int Level);// 0x14be100
	void SetPoisonFogEnable(bool IsEnbale);// 0x14be080
	void SetPlayerMark(Vector Loc);// 0x14bdfd4
	void SetPlaneEnabled(bool InEnable);// 0x14bdf54
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x14bde40
	void SetObservingTime(float Time);// 0x14bddc8
	void SetNightStatus(int nightStatus);// 0x14bdd50
	void SetMaxHealth(float HP);// 0x14bdcd8
	void SetJoyStickScale(float JSScale);// 0x14bdc60
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x14bdba4
	void SetJoyStickOpacity(float JSOpacity);// 0x14bdb2c
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x14bdabc
	void SetJoyStickCenter(Vector2D JSCenter);// 0x14bda4c
	void SetIsSnowy(bool bSnowy);// 0x14bd9cc
	void SetIsShowBlood(bool InIsShowBlood);// 0x14bd94c
	void SetIsRainy(bool bRainy);// 0x14bd8cc
	void SetIsBlizzard(bool bBlizzard);// 0x14bd84c
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x14bd66c
	void SetGameStateModeUI(const FString[] ModeUIMgr);// 0x14bd510
	void SetForbidNightVehicle(int isForbid);// 0x14bd498
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x14bd3d4
	void SetCustomJumpPoint(float JmpX, float JmpY, float JmpRadius);// 0x14bd2d4
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x14bd18c
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x14bd090
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x14bcf78
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x14bce6c
	void SetBeKickedPlayerName(FString InPlayerName);// 0x14bcd14
	void SetAllInfectedAreaLevel(int LevelId);// 0x14bcc9c
	void SetAirDropEnable(bool Enable);// 0x14bcc1c
	void SetAirAttackEnable(bool Enable);// 0x14bcb9c
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x14bc9ec
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x14bc884
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x14bc7d0
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x14bc71c
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x14bc668
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x14bc5b4
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x14bc3f8
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, int CurrentBullet);// 0x14bc264
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, int CurrentBullet);// 0x14bc0d0
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x14bbfd4
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x14bbd2c
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x14bbb48
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x14bba04
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x14bb908
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x14bb854
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte shootType);// 0x14bb758
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x14bb614
	void ServerSetObsverLocation(const Vector locat);// 0x14bb568
	void ServerSetIsQuickGrenade(bool IsOpenQuickGrenade);// 0x14bb4a0
	void ServerSetIsFreeView(bool isFreeView);// 0x14bb3d8
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x14bb2c4
	void ServerSetFreeCamera(Rotator InRotation);// 0x14bb218
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x14bb104
	void ServerSetControlRotation(const Rotator NewRotation);// 0x14bb058
	void ServerSendLogToLobby(FString ErrorLog);// 0x14baf9c
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x14bae30
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x14bab70
	void ServerRemoteDestroyActor(int SingleId);// 0x14baaec
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x14ba990
	void ServerReceiveThePlane(int64 TimeStamp);// 0x14ba8d8
	void ServerReceiveServerStateType(enum ReceivedType, enum ClientType, int64 TimeStamp);// 0x14ba780
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x14ba398
	void ServerOpenParachute();// 0x14ba33c
	void ServerObserveKiller();// 0x14ba2e0
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x14ba22c
	void ServerObserveAirDropBox(int BoxId);// 0x14ba178
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x14ba068
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x14b9fb4
	void ServerJumpFromPlane();// 0x14b9f58
	void ServerInterruptGame();// 0x14b9efc
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x14b9e08
	void ServerHandleMsg(enum Msg);// 0x14b9d54
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x14b9c24
	void ServerGetTotalPlayers();// 0x14b9bc8
	void ServerGetPlayerAliasInfoList();// 0x14b9b6c
	void ServerFight();// 0x14b9b10
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x14b9a5c
	void ServerExitFreeCamera();// 0x14b9a00
	void ServerDropItem(ItemDefineID DefineID, int count, enum Reason);// 0x14b989c
	void ServerDoPickupRevivalFlag();// 0x14b9840
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x14b9724
	void ServerCMD_RPC(FString Cmd);// 0x14b9630
	void ServerCMD(FString Cmd);// 0x13951c0
	void ServerClearTeammatesCache();// 0x14b95d4
	void SendStringMsg(FString Message, int msgID);// 0x14b94d4
	void SendLogToLobbyOnece(byte LogType);// 0x14b945c
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x14b9390
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x14b9214
	void ScopeOut();// 0x14b9200
	void ScopeIn();// 0x14b91ec
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x14b9004
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x14b8eac
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x14b8d54
	void RunOnNextFrameEvent();// 0x14b8d40
	void RunOnNextFrame__DelegateSignature();// 0x1c01fa0
	void RPC_ServerCoronaLab(const byte[] CoronaLab, uint32 CoronaState, const byte[] ProParam);// 0x14b8b7c
	void RPC_ServerCoronaCook(int8 InShotType, const byte[] CoronaShot);// 0x14b8a40
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x14b8860
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x14b8480
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x14b80f0
	void RPC_Server_SendLog(FString ErrorLog);// 0x14b7ff0
	void RPC_Server_ReqHealth();// 0x14b7f94
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x14b7ea0
	void RPC_Server_PrintHP();// 0x14b7e44
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x14b7d48
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x14b7c94
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x14b7be0
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x14b7aec
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x14b7998
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x14b77e4
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x14b76f0
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x14b7330
	void RPC_Server_NorifyServerWhichTeamOpenedAirdropBox(int AirdropboxID, int ByTeamID);// 0x14b722c
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x14b71d0
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x14b7038
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray);// 0x14b6ee8
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x14b6df4
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x14b6d00
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x14b6bb8
	void RPC_Server_ClientHasReactivated();// 0x14b6b5c
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x14b69c4
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x14b682c
	void RPC_Server_CharacterSpawnFinish();// 0x14b67d0
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x14b66d4
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x14b6620
	void RPC_ReviveState_GiveUpRevive();// 0x14b65c4
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x14b6510
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x14b62fc
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x14b6138
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x14b5fbc
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x14b5ebc
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x14b5e08
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x14b5cb0
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x14b5b54
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 Uid, const bool IsMurderSameTeam);// 0x14b594c
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 Uid, const bool IsMurderSameTeam);// 0x14b5744
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x14b567c
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x14b54a8
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int count);// 0x14b53ac
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x14b52b0
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x14b51b4
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x14b505c
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector BulletStart, Vector BulletEnd);// 0x14b4f44
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x14b4e00
	void RPC_GiveUpGame();// 0x14b4da4
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x14b4c64
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x14b4b2c
	void RPC_ClientCoronaLab(byte bAllSwitch, const byte[] CoronaLab, uint32 CoronaState);// 0x14b49a8
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x14b48a0
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x14b468c
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x14b44c0
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x14b42f4
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x14b4128
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeID);// 0x14b4020
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x14b3fa0
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x14b3e0c
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator rot);// 0x14b3cf4
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x14b3a4c
	void RPC_Client_NotifyHealth(float Health);// 0x14b3998
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x14b3834
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x14b3740
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x14b3644
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc);// 0x14b350c
	void RevivalTemateSuccess();// 0x14b34f0
	void RevivalTemateFail(FString Reason);// 0x14b342c
	float RetriveMobileContentScaleFactor();// 0x14b3404
	void RestoreDefaultInteractionSize(int JSIndex);// 0x14b338c
	void RespawnRecoverData(UAEPlayerController* PC);// 0x14b3314
	void ResetMissingUIUpdate();// 0x1c01fa0
	void RequireNetCullingDistanceByDevice();// 0x14b32b8
	void RequireDeviceInfo();// 0x14b329c
	void RequestPlayerNewbieInfo();// 0x14b3288
	bool RequestChangeWearInBattle(int newIndex);// 0x14b3208
	bool RequestChangeWear(int newIndex);// 0x14b3188
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x14b30c0
	void ReqLeaveVehicle();// 0x14b30ac
	void ReqEnterSnowBoard();// 0x14b3098
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x14b3020
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x14b2ec4
	void ReportAntiCheatInfo();// 0x14b2eb0
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x14b2e38
	void RemoveAllDoors();// 0x14b2e24
	void ReleaseFire();// 0x1c01fa0
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x14b2dac
	void RefreshTopMostUIPanel(byte Type);// 0x1c01fa0
	void RefreshShootDetailInfo();// 0x14b2d98
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x1c01fa0
	void RecoverStatusAfterReconnecting();// 0x14b2d7c
	void RecordPathPoint();// 0x14b2d68
	void ReceiveClientRestart();// 0x1c01fa0
	void ReceiveBackpackComponent();// 0x14b2d4c
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x14b2bfc
	void PrintMovementLog(int PrintLog);// 0x14b2b84
	void PrintDownCollision();// 0x14b2b70
	void PrintAllPickupWarpper();// 0x14b2b5c
	void PressGrenade(bool isThrow);// 0x1c01fa0
	void PressFire(int FingerIndex);// 0x1c01fa0
	void PlayVehicleCameraShake();// 0x14b2b48
	void PlayMatinee(int Index);// 0x14b2ad0
	void PlayInteractionEmote(int EmoteId);// 0x14b2a58
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x14b299c
	void PlayerKillingDelegate__DelegateSignature();// 0x1c01fa0
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x1c01fa0
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x1c01fa0
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x1c01fa0
	void PlayBattleSound(FString BankName, FString SoundName);// 0x14b285c
	void OpenParachute();// 0x14b2848
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x1c01fa0
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x1c01fa0
	void OnWallFeedBack(bool _WallFeedBack);// 0x14b27c8
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x14b270c
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x14b2694
	void OnViewTargetChangeVehicleSeat();// 0x14b2680
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x14b2608
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0x1c01fa0
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x1c01fa0
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x1c01fa0
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x1c01fa0
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x14b2428
	void OnTeammatesAllDie();// 0x14b2414
	void OnTeammateLogin(int InTeamID);// 0x14b239c
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x1c01fa0
	void OnTeammateConveyStatusChangedDelegate__DelegateSignature(STExtraPlayerState* STPlayerState, enum TeammateConveyStatus);// 0x1c01fa0
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x1c01fa0
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x1c01fa0
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x1c01fa0
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x1c01fa0
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x1c01fa0
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x1c01fa0
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x1c01fa0
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x1c01fa0
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x1c01fa0
	void OnStopFireDelegate__DelegateSignature();// 0x1c01fa0
	void OnStartFireDelegate__DelegateSignature();// 0x1c01fa0
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x1c01fa0
	void OnSpectatorChange__DelegateSignature();// 0x1c01fa0
	void OnSpectatorCameraChange(bool bDie);// 0x1c01fa0
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, float TotalTime);// 0x1c01fa0
	void OnShowAutoSprintButton__DelegateSignature(bool visible, Vector2D showPos, bool IsInside);// 0x1c01fa0
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x1c01fa0
	void OnServerFinishPickupRevivalFlag();// 0x14b2380
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x1c01fa0
	void OnRepTeammateChange__DelegateSignature();// 0x1c01fa0
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x1c01fa0
	void OnRepPlayerState__DelegateSignature();// 0x1c01fa0
	void OnRepNotify_SetBattleOwner();// 0x14b236c
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x12e82e4
	void OnRep_WeatherFog();// 0x14b2358
	void OnRep_WeaponSystemReconnectReplicateData();// 0x14b2344
	void OnRep_WeaponAvatarDataList();// 0x14b2328
	void OnRep_UsedSimulation();// 0x14b230c
	void OnRep_SwitchWeather();// 0x14b22f8
	void OnRep_STExtraBaseCharacter();// 0x14b22e4
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x14b22d0
	void OnRep_SpawnAndBackpackWeaponReplicatedDataArray();// 0x14b22bc
	void OnRep_ShowWeaponHitDetailInfo();// 0x14b22a8
	void OnRep_ServerStateType();// 0x14b2294
	void OnRep_RefreshTotalPlayers();// 0x14b2280
	void OnRep_RefreshAirDropBox();// 0x14b226c
	void OnRep_Plane();// 0x14b2258
	void OnRep_ObservedItemList();// 0x14b2244
	void OnRep_InitialEquipmentAvatar();// 0x14b2228
	void OnRep_ImprisonmentTeammateSucess();// 0x14b2214
	void OnRep_ForbitPickEffect();// 0x12e82e4
	void OnRep_ForbitPick();// 0x12e82e4
	void OnRep_FiringPlayerList();// 0x14b2200
	void OnRep_EnableDeathPlaybackDelay();// 0x14b21ec
	void OnRep_DestControlRotation();// 0x12e82e4
	void OnRep_DeadTombBox();// 0x14b21d8
	void OnRep_CanOpenParachute();// 0x14b21c4
	void OnRep_CanJump();// 0x14b21b0
	void OnRep_CanImprisonmentTeammate();// 0x12e82e4
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x14b219c
	void OnRep_BackpackComponent();// 0x14b2188
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0x1c01fa0
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x1c01fa0
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x1c01fa0
	void OnReleaseFire();// 0x14b2174
	void OnReconnected__DelegateSignature();// 0x1c01fa0
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x1c01fa0
	void OnPressVampireClothSlotBtn();// 0x14b2160
	void OnPressTurnplateQuickMsgBtn();// 0x14b214c
	void OnPressTriggerEntireMapBtn();// 0x14b2138
	void OnPressShowTagVehileSeatListBtn();// 0x14b2124
	void OnPressRolewearChangeBtn(int Index);// 0x14b20ac
	void OnPressItemSKillBtn();// 0x14b2098
	void OnPressFire();// 0x14b2084
	void OnPressBackpackBtn();// 0x14b2070
	void OnPlayerUseRecoverItem();// 0x14b205c
	void OnPlayerStateChanged();// 0x14b2048
	void OnPlayerReConnected(int LostPlayerKey);// 0x14b1f94
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x1c01fa0
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x1c01fa0
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x1c01fa0
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x1c01fa0
	void OnPlayerLostConnection(int LostPlayerKey);// 0x14b1ee0
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x14b1e60
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x1c01fa0
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x1c01fa0
	void OnPlayerContollerTouchBegin__DelegateSignature(out const Vector2D TouchBeginPos);// 0x1c01fa0
	void OnPlayerClickDriveBtn();// 0x14b1e4c
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x1c01fa0
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x1c01fa0
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x14b1cf4
	void OnPickupItemDelegate__DelegateSignature(int ItemID, int count, STExtraPlayerController* PC);// 0x1c01fa0
	void OnPickUpExpand();// 0x14b1c8c
	void OnPickUpCollapsed(bool isCollapsed);// 0x14b1c0c
	void OnObserverLevelLoaded();// 0x14b1bf8
	void OnObservedUsingWeaponChanged();// 0x14b1be4
	void OnObservedPoisonFogStageChanged();// 0x14b1bd0
	void OnObservedItemsChanged();// 0x14b1bbc
	void OnObservedBulletNumChanged();// 0x14b1ba8
	void OnNightStateChangedDelegate__DelegateSignature();// 0x1c01fa0
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x1c01fa0
	void OnLostConnection__DelegateSignature();// 0x1c01fa0
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x1c01fa0
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x1c01fa0
	void OnKillerNotify(Actor* Killer);// 0x14b1b30
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int count);// 0x14b1a20
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x14b1910
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x1c01fa0
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x1c01fa0
	void OnGameStartDelegate__DelegateSignature();// 0x1c01fa0
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x1c01fa0
	void OnGameModeStateChanged();// 0x1c01fa0
	void OnFingerMove__DelegateSignature(Vector Loc);// 0x1c01fa0
	void OnExitGame__DelegateSignature();// 0x1c01fa0
	void OnEquipWeaponDelegate__DelegateSignature();// 0x1c01fa0
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x1c01fa0
	void OnEquipmentAvatarChange__DelegateSignature();// 0x1c01fa0
	void OnEnterBattleResultStep();// 0x14b18fc
	void OnDropItemDelegate__DelegateSignature(int ItemID, int count, STExtraPlayerController* PC);// 0x1c01fa0
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x1c01fa0
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x1c01fa0
	void OnDeadBoxExpand();// 0x14b18e8
	void OnDeadBoxCollapsed(bool isCollpased);// 0x14b1868
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x1c01fa0
	void OnCoronaCookCallBack(int InShotType, out const byte[] DataArray);// 0x14b1758
	void OnClientWillGotoSpectating();// 0x14b1744
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CampID, Actor*[] PeerVisualFieldActorList);// 0x1c01fa0
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x1c01fa0
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x1c01fa0
	void OnCharacterRecoveryHealthEvent();// 0x14b1730
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x1c01fa0
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x1c01fa0
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x1c01fa0
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x1c01fa0
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x1c01fa0
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x1c01fa0
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x1c01fa0
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x1c01fa0
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0x1c01fa0
	void OnAutoSprintActive__DelegateSignature();// 0x1c01fa0
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x1c01fa0
	void ObserveWhoKilledMe();// 0x14b171c
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x14b1668
	void ObserveCharacter(FString InPlayerName);// 0x14b1510
	void ObserveAirDropBox(int BoxId);// 0x14b1498
	void OBCameraTurnSlower();// 0x14b1484
	void OBCameraTurnFaster();// 0x14b1470
	void OBCameraMoveSlower();// 0x14b145c
	void OBCameraMoveNear();// 0x14b1448
	void OBCameraMoveFaster();// 0x14b1434
	void OBCameraMoveFar();// 0x14b1420
	void NotifyObserverFinalDamage(float FinalDamage, int AttackerTeamID, STExtraBaseCharacter* VictimCharacter);// 0x14b1318
	void NotifyIsInResultView(bool isInResultView);// 0x14b1298
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x1c01fa0
	void MoveUp(float Rate);// 0x14b1220
	void MoveToVehicle(int ItemID);// 0x14b11a8
	void MoveToItem(int ItemID);// 0x14b1130
	void MoveToAIByDropItem(int ItemID);// 0x14b10b8
	void MoveToAI();// 0x14b10a4
	void MoveTo(float X, float Y, float Z);// 0x14b0fa4
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x14b0ee8
	void ModifyStreamingDistance(int Distance);// 0x14b0e70
	void MemberVoice(int member, int Status);// 0x1c01fa0
	void MarkStartFireFrame();// 0x14b0e5c
	void LocalProfileFootprint();// 0x14b0e48
	void LocalGetGameStateReconnectInfo();// 0x14b0e34
	void LoadAllLand(bool bLoadAll);// 0x14b0db4
	void LerpFPPCamera();// 0x14b0da0
	void KillSomeOne(FString InPlayerName);// 0x14b0ce4
	void KillAll();// 0x14b0cd0
	void Kill(int GivenNumber);// 0x14b0c58
	void KickPlayerFromGame();// 0x14b0c44
	void JumpFromPlane();// 0x14b0c30
	void JoystickTriggerSprint(bool bIsSprint);// 0x1c01fa0
	bool IsViewTarget(const Actor* pActor);// 0x14b0ba8
	bool IsUse3DTouch();// 0x14b0b80
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x14b0b00
	bool IsShowBlood();// 0x14b0ae0
	bool IsSameTeam(Pawn* Other);// 0x14b0a60
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x14b09e0
	bool IsMurderSelfDefense(FString InformMurderName);// 0x14b091c
	bool IsMoveable_DontConsiderFollowingState();// 0x14b08f4
	bool IsMoveable();// 0x14b08cc
	bool IsLastBreathOrRescueingOther();// 0x14b08a4
	bool IsInRevival();// 0x14b087c
	bool IsInPlane();// 0x14b0854
	bool IsInParachuteOpen();// 0x14b082c
	bool IsInParachuteJump();// 0x14b0804
	bool IsInParachute();// 0x14b07dc
	bool IsInObservingPlayback();// 0x14b07b4
	bool IsInInitial();// 0x14b078c
	bool IsInFreeCameraView();// 0x14b0770
	bool IsInFinish();// 0x14b0748
	bool IsInFight();// 0x14b0720
	bool IsInDeathReplay();// 0x14b06f8
	bool IsInDead();// 0x14b06d0
	bool IsForbitPickMakeEffect();// 0x14b06a8
	bool IsForbitPick(out const FName tombName);// 0x14b0614
	bool IsCanViewEnemy();// 0x14b05ec
	bool IsCanSpectateTeammate();// 0x14b05c4
	bool IsCanImprisonmentTeammate();// 0x14b059c
	bool IsAllowActorTouchMove();// 0x14b0574
	bool IsAGMPlayer();// 0x14b054c
	void InsertGrenadeIDToName(int GrenadeID, FName Name);// 0x14b0490
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x14b0418
	void InputCameraMoveTest(float DeltaSeconds);// 0x14b03a0
	void InitWeatherConfigComponent();// 0x14b038c
	void InitTaskDatas(uint32 InPlayerKey);// 0x14b0314
	void InitTaskDataDelegate__DelegateSignature(int TaskID, int process, FString ext_info);// 0x1c01fa0
	void InitTaskData(int TaskID, int process, FString ext_info);// 0x14b012c
	void InitTaskComponent();// 0x14b0118
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x1c01fa0
	void InitJoyStickAfterActivation();// 0x1c01fa0
	void InitCollectionDataDelegate__DelegateSignature(int ItemID, int CurrentCount, int TotalCount);// 0x1c01fa0
	void InitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x14b0018
	void IniClientCoronaLab();// 0x14b0004
	void ImprisonmentTeammate(FString TeammateName, bool IsSelfDef);// 0x14afeb4
	void HandleUpdateShovelingRelease();// 0x14afea0
	void HandleUpdateShovelingPressed();// 0x14afe8c
	void HandleUpdateShoveling();// 0x14afe78
	void HandleTogglePlayerListInOB();// 0x14afe64
	void HandleToggleOBTeamList(bool InShow);// 0x14afde4
	void HandleToggleMapInOB();// 0x14afdd0
	void HandleToggleHitDamageDisplay();// 0x14afdbc
	void HandleSwitchToTeammatePrev();// 0x14afda8
	void HandleSwitchToTeammateNext();// 0x14afd94
	void HandleSwitchToTeam(int InTeamID);// 0x14afd1c
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x14afca4
	void HandleLeaveFreeViewInOB();// 0x14afc7c
	void HandleLandOnGroundEnd();// 0x14afc90
	void HandleEnterFreeViewInOB();// 0x14afc7c
	void HandleClientHasReactivated();// 0x14afc68
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x14afbac
	int GotoSpectating(int TeammatePlayerid);// 0x14afb24
	void GotoFlying();// 0x14afb10
	void GMUseSynVerify(int UseSynVerifyFlag);// 0x14afa98
	void GMTeleport(FName Teleporter);// 0x14afa20
	void GMSetBoolPoisonCircle();// 0x14afa0c
	void GMSetBoolAirDrop();// 0x14af9f8
	void GMSetBoolAirAttack();// 0x14af9e4
	void GMSetBoolAI();// 0x14af9d0
	void GMResVerifySize(int VerifySize);// 0x14af958
	void GMOpenWeather(int OpenWeatherID);// 0x14af8e0
	void GMEnableRandom();// 0x14af8cc
	void GMEnableAllComponent();// 0x14af8b8
	void GMDisableRandom();// 0x14af8a4
	void GMDisableAllComponent();// 0x14af890
	void GMCloseWeather(int CloseWeatherID);// 0x14af818
	int GetWriteCircleDistance();// 0x14af7f0
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x14af7c8
	static WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x14af6cc
	float GetViewPortDPIScale();// 0x14af69c
	VehicleUserComponent* GetVehicleUserComp();// 0x14af674
	bool GetUseMotionControlLog();// 0x14af64c
	bool GetUseMotionControlEnable();// 0x14af624
	int GetUnlockWearCount();// 0x14af5fc
	float GetTouchForce(byte FingerIndex);// 0x14af57c
	Actor* GetThePlane();// 0x14af55c
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x14af4dc
	SpringArmComponent* GetTargetedSpringArm();// 0x14af4b4
	int GetStatTriangles();// 0x130bc40
	FString GetStatMemory();// 0x148d328
	int GetStatDrawCalls();// 0x130bc40
	int[] GetSpecialAreaList();// 0x14af3f4
	int GetSpecialAreaID();// 0x14af3cc
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x14af334
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x14af1d8
	int GetRevivalCountDownTime();// 0x14af1b0
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x1c01fa0
	QuickSignComponent* GetQuickSignComponent();// 0x14af188
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x14af160
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x14aef4c
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x14aef24
	Transform GetPaintDecalTargetTransform();// 0x14aee9c
	ObservingReplay* GetObservingPlayback();// 0x14aee74
	Vector GetNewestAirDropBoxPos();// 0x14aee2c
	PlayerInfoInOB[] GetNearPlayerList();// 0x14aed1c
	FString GetMurderUIDStr();// 0x14aec20
	FString GetMurderName();// 0x14aeb60
	bool GetMurderIsAI();// 0x14aeb28
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x14ae8ec
	byte GetMaxTouchForceFinger();// 0x14ae8ac
	Vector2D GetJoyStickVisualSize();// 0x14ae86c
	Vector2D GetJoyStickCenter();// 0x14ae82c
	bool GetIsRespawn();// 0x14ae80c
	bool GetIsMurderSameTeam();// 0x14ae7d4
	bool GetIsFreeCamera();// 0x14ae7b4
	enum GetInfectionPawnSubType();// 0x1457648
	enum GetInfectionPawnMainType();// 0x13e7410
	void GetGameStateReconnectInfoOnServer();// 0x14ae758
	void GetGameScreenSize();// 0x12e82e4
	int GetFriendDistance();// 0x130bc40
	Vector GetFocalLocation();// 0x14ae708
	WeaponHitDetailInfo GetDetailHitInfo();// 0x14ae5d4
	STExtraPlayerState* GetCurPlayerState();// 0x14ae5ac
	int GetCurPlayerId();// 0x14ae584
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x14ae55c
	Vector GetCurPawnLocation();// 0x14ae514
	Pawn* GetCurPawn();// 0x14ae4ec
	float GetCurFPS();// 0x130bc40
	Rotator GetControlLookRotation();// 0x14ae49c
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x14ae3b0
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x14ae258
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x14ae1d8
	ChatComponent* GetChatComponent();// 0x14ae1b0
	BackpackComponent* GetBackpackComponent();// 0x14ae188
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int BoxId);// 0x14ae024
	void GameModeGotoNextState();// 0x14ae010
	void GameModeGotoFightingState();// 0x14adffc
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x14adf40
	void ForceServerSetControlRotationOnVehicle();// 0x14adf2c
	void ForceReleaseCurTouchMoveFinger();// 0x14adf18
	void FlushItem(int onlyStatic);// 0x14adea0
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x14ade30
	void FireOrGrenade();// 0x14ade1c
	void FindAIDropItem(int ItemID);// 0x14adda4
	void Fight();// 0x14add90
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x14adbec
	void ExitNightState();// 0x14adbd8
	void ExitFreeCamera(bool IsForceReset);// 0x14adb58
	void ExecDSCommand(const FString DSCommand);// 0x14ada94
	void EnterNightState();// 0x14ada80
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x14ad978
	void EndForceTouchFire(Vector Loc);// 0x14ad908
	void EnablePlayerInHouse(bool bIsIn);// 0x14ad888
	void EnableMyLandscapeDraw();// 0x12e82e4
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x1c01fa0
	void DynamicCreateComponents();// 0x14ad874
	void DropItem(int ID);// 0x14ad7fc
	void DropAllItem();// 0x14ad7e8
	void DoUITouchMove(Vector Loc);// 0x1c01fa0
	void DoubleClickCancel(const byte FingerIndex);// 0x14ad770
	void DoTouchMove(float Yaw, float Pitch);// 0x1c01fa0
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x14ad6bc
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x14ad608
	void DoAutoManageActiveCameraTarget();// 0x14ad5f4
	void DisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x14ad3e8
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x14ad130
	void DisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x14ace78
	void DisplayGameTipWithMsgID(int ID);// 0x14ace00
	void DisplayGameTipForLowFPSWarning(int ID, FString Param1, FString Param2);// 0x14acb48
	void DisplayBattleGeneralTip(int ID, FString Param1, FString Param2);// 0x14ac890
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x1396184
	void DispatchPlayerReconnectedEvent();// 0x14ac87c
	void DispatchPlayerLostEvent();// 0x14ac868
	void DispatchPlayerExitEvent();// 0x14ac854
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x14ac7dc
	void DisableMyLandscapeDraw();// 0x12e82e4
	void DisableAirDrop();// 0x14ac7c8
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x1c01fa0
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x1c01fa0
	void DelayGotoSpectating();// 0x14ac7b4
	void DelayForceExitFreeCamera();// 0x14ac7a0
	void DelayedFocusPlayerPawn();// 0x14ac78c
	void DebugWorldPlayerAvatarInfo();// 0x14ac778
	void DebugSetUIVisibility(bool bUIVisibility);// 0x1c01fa0
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x14ac6f8
	void DebugEnableDrawSearchLine(int bEnabled);// 0x1396184
	void DebugEnableBulletImpact(int bEnabled);// 0x1396184
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x14ac568
	void DealGetAllNearShotWeapon(float disRate);// 0x14ac4f0
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x14ac434
	void DealGetAllNearMoveCharacter(float checkDis);// 0x14ac3bc
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x14ac2f8
	void CreateVehicleOverlapDamage();// 0x14ac2e4
	void CreateGodzilla(float X, float Y, float Z);// 0x14ac1e4
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x14ac028
	void CollectAllPlayerWeaponPosInfo();// 0x12e82e4
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x14abf10
	void ClientStopShoveling();// 0x14abeb4
	void ClientStartOnlineGame();// 0x14ab6a8
	void ClientShowInfectAreaWarning();// 0x14ab64c
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x14ab524
	void ClientSetPoisonSmogStage(int SmogStage);// 0x14ab470
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x14ab368
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x14ab26c
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x14ab19c
	void ClientQuitViewEnemy();// 0x14ab180
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x14ab080
	void ClientOnHurt();// 0x14ab064
	void ClientOnDamageToOther(float _DamageToOther);// 0x14aafe4
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x14aaed0
	void ClientInterruptGame();// 0x14aae74
	void ClientInitIngameUIAfterRespawn();// 0x14aae18
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x14aad5c
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x14aac94
	void ClientGotoSpectating();// 0x14aac78
	void ClientGiveUpRevivalTemmates();// 0x14aac64
	void ClientGameStarted();// 0x14aac48
	void ClientFriendBattleEnd();// 0x149e29c
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x14aabc0
	void ClientEnterViewBox(int BoxId);// 0x14aab40
	void ClientEndOnlineGame();// 0x14aab24
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x14aa910
	void ClientDisplayGameTipWithMsgID(int ID);// 0x14aa85c
	void ClientCheckStartShovelingFail();// 0x14aa800
	void ClientChangeStatePC(enum TargetStateType);// 0x14aa780
	void ClearBossBornPoint();// 0x14aa76c
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x14aa6cc
	bool CientRevivalTemmates();// 0x14aa6a4
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x14aa5d8
	void CheckConsumeGlideItem();// 0x14aa5c4
	void ChangeSpectatorStateToFreeView();// 0x14aa5b0
	bool ChangeRolewearIndex(int newIndex);// 0x14aa530
	void ChangeFinishTime(int RestTime);// 0x14aa4b8
	void CanSeeAllUI(bool bUIVisibility);// 0x1343e64
	bool CaluIsReleasePosInAimBtnRange(Vector Loc, Vector2D AimBtnPos, Vector2D AimBtnSize);// 0x14aa3b0
	void CallZombieFlowAirDrop(int ZombieID);// 0x14aa338
	void CallZombieAirDrop(int ZombieID);// 0x14aa2c0
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, int VoiceID);// 0x14aa124
	void CallShowTouchInterface(bool InShow);// 0x14aa09c
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x14a9acc
	Vector2D CalcAttactBtnPos(float locX, float locY, float SizeX, float SizeY);// 0x14a996c
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x14a98f4
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x14a987c
	void C2S_RequestSkillPrompt();// 0x14a9820
	void C2S_RequestBeingRescuedRemainingTime();// 0x14a97c4
	void BroadcastFatalDamageToClient(FString CauserName, FString VictimName, byte DamageType, int AdditionalParam, bool IsHeadShot, byte ResultHealthStatus, byte Relationship, byte PreviousHealthStatus, FString RealKillerName, byte realKillerNewKillNum, FString CauserNation, FString VictimNation, uint32 causerKey, uint32 victimKey, int causerAnchorPlatformResID, int causerAnchorPlatformColorID, int victimAnchorPlatformResID, int victimAnchorPlatformColorID, int realKillerAnchorPlatformResID, int realKillerAnchorPlatformColorID, int CauserWeaponAvatarID, byte CauserType, byte VictimType);// 0x14a8fa0
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x14a8ce0
	bool BPGetIsAndroidSimulator();// 0x14a8cb8
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x1c01fa0
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x14a8c40
	void BindVoiceCheckFunction();// 0x14a8c2c
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x14a8b70
	void BackToGameDataRefresh();// 0x14a8b5c
	bool AutoSelectViewTarget();// 0x14a8b34
	void AutoSelectTeammateToView();// 0x14a8b20
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x14a8a14
	void AddItemAttachList(int BaseItemID);// 0x14a899c
	void AddItem(int ID, int count);// 0x14a88e0
	void AddBossBornPoint(float BornX, float BornY);// 0x14a8824
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x14a86dc
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x14a8618
	void ActiveCurCamera(bool bActive);// 0x14a8598
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x14a8518

--------------------------------
Class: UAEPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x580, Size: 0x8]
	FString PlayerName;//[Offset: 0x588, Size: 0xc]
	uint32 PlayerKey;//[Offset: 0x594, Size: 0x4]
	int TeamID;//[Offset: 0x5ac, Size: 0x4]
	Vector CharacterLocation;//[Offset: 0x5b0, Size: 0xc]
	int RoomMode;//[Offset: 0x5bc, Size: 0x4]
	WeatherInfo WeatherInfo;//[Offset: 0x5c0, Size: 0x14]
	int planeAvatarId;//[Offset: 0x5d4, Size: 0x4]
	int PlayerStartID;//[Offset: 0x5d8, Size: 0x4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 0x1]
	PlayerNetStats NetStats;//[Offset: 0x5e0, Size: 0x30]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 0x1]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x62c, Size: 0x24]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x650, Size: 0xc]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x65c, Size: 0xc]
	int LobbyShowWeaponID;//[Offset: 0x668, Size: 0x4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	FString Nation;//[Offset: 0x670, Size: 0xc]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 0x1]
	enum DefaultCharacterGender;//[Offset: 0x67d, Size: 0x1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x680, Size: 0xc]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x68c, Size: 0xc]
	int RolewearIndex;//[Offset: 0x698, Size: 0x4]
	int[] equip_plating_list;//[Offset: 0x69c, Size: 0xc]
	int VehicleSkinInReady;//[Offset: 0x6a8, Size: 0x4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 0x1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x6b0, Size: 0xc]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x6bc, Size: 0x18]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x6d4, Size: 0xc]
	int[] InitialCharSkillList;//[Offset: 0x6e0, Size: 0xc]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x6ec, Size: 0xc]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x6f8, Size: 0xc]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x704, Size: 0x4]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x708, Size: 0xc]
	<int,int> WeaponAvatarItemList;//[Offset: 0x714, Size: 0x3c]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x750, Size: 0xc]
	<int,int> VehicleAvatarList;//[Offset: 0x75c, Size: 0x3c]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x798, Size: 0x3c]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0x7d4, Size: 0xc]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x7e0, Size: 0xc]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0x7ec, Size: 0xc]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x7f8, Size: 0xc]
	uint32 TaskSyncToDsTs;//[Offset: 0x804, Size: 0x4]
	int AnchorPlatResID;//[Offset: 0x808, Size: 0x4]
	int AnchorPlatColorID;//[Offset: 0x80c, Size: 0x4]
	int64 LastGameResultTime;//[Offset: 0x820, Size: 0x8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 0x1]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829, Size: 0x1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82a, Size: 0x1]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82b, Size: 0x1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82c, Size: 0x1]
	uint32 WatchPlayerKey;//[Offset: 0x830, Size: 0x4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x834, Size: 0x1]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x835, Size: 0x1]
	FString[] FriendObservers;//[Offset: 0x838, Size: 0xc]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 0x1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0x854, Size: 0x8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1]
	delegate PlayerControllerLostDelegate;//[Offset: 0x870, Size: 0xc]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0x87c, Size: 0xc]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0x888, Size: 0xc]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0x894, Size: 0xc]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0x8a0, Size: 0xc]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0x8ac, Size: 0xc]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0x8b8, Size: 0xc]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0x8c4, Size: 0xc]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0x8d0, Size: 0xc]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x8f8, Size: 0xc]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 0x1]
	float NotifyTimeOut;//[Offset: 0x908, Size: 0x4]
	FString NeedLoadLevelName;//[Offset: 0x90c, Size: 0xc]
	int AntiDataCD;//[Offset: 0x928, Size: 0x4]
	bool UseingWeaponScheme();// 0x1457648
	void TestRespawn();// 0x12e82e4
	void TestLogout();// 0x12e82e4
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x185ad34
	void SetUsedSimulationCVar(bool Value);// 0x185acb4
	void SetPanels(out const UAEUserWidget*[] panels);// 0x185abe0
	void ServerTestLogout();// 0x185ab84
	void ServerSetVoiceId(int VoiceID);// 0x185aad0
	void ServerKickSelf();// 0x185aa74
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x185a9c0
	void ServerExitGame();// 0x185a964
	void ServerAcknowledgeReconnection(uint32 Token);// 0x185a8b0
	void Respawn();// 0x185a894
	void ResetUsedSimulationCVar();// 0x185a880
	void ReleaseInGameUI();// 0x185a864
	void PrintStatistics();// 0x12e82e4
	void PlayerStartIDReceived();// 0x185a850
	void OnRep_WeaponAvatarDataList();// 0x14b2328
	void OnRep_WatchPlayerKey();// 0x185a834
	void OnRep_UsedSimulation();// 0x14b230c
	void OnRep_PlayerOBInfoList();// 0x185a820
	void OnRep_LastGameResultTime();// 0x185a804
	void OnRep_IsSpectatingEnemy();// 0x185a7e8
	void OnRep_IsSpectating();// 0x185a7cc
	void OnRep_IsObserver();// 0x185a7b0
	void OnRep_InitialEquipmentAvatar();// 0x14b2228
	void OnRep_FriendObservers();// 0x185a794
	void OnRep_bRoomOwner();// 0x185a778
	void NotifyEnterBattle();// 0x185a764
	void LuaDoString(FString LuaString);// 0x185a6a0
	void KickSelf();// 0x12e82e4
	bool IsSpectator();// 0x185a678
	bool IsRoomMode();// 0x185a654
	bool IsPureSpectator();// 0x185a62c
	bool IsObserver();// 0x185a604
	bool IsInSpectatingEnemy();// 0x185a5dc
	bool IsInSpectating();// 0x185a5b4
	bool IsFriendOrEnemySpectator();// 0x185a58c
	bool IsFriendObserver();// 0x185a564
	bool IsDemoRecSpectator();// 0x185a53c
	bool IsDemoPlaySpectator();// 0x185a514
	bool IsDemoPlayGlobalObserver();// 0x185a4ec
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x185a440
	void InitWeaponAvatarItems();// 0x185a424
	void InitVehicleAvatarList();// 0x185a408
	void InitVehicleAdvanceAvatarList();// 0x185a3ec
	void InitIngameUI();// 0x185a3d0
	int GotoSpectating(int PlayerID);// 0x14afb24
	int GetWeaponAvatarItemId(int ID);// 0x185a350
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskID);// 0x185a2c0
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x185a298
	uint32 GetCurrentOBPlayerKey();// 0x185a268
	int GetCurrentOBPlayerInfoIndex();// 0x185a240
	void ForceNetReady();// 0x185a22c
	void ExitGame();// 0x185a218
	void ExhaustCPU();// 0x185a204
	void ExecDSCommand(const FString DSCommand);// 0x14ada94
	void ExcuteIntRecord(FString Key, int count);// 0x185a068
	void ExcuteIntCounterRecord(FString Key, int count);// 0x1859ecc
	void EnableInGameUI();// 0x1859eb8
	void DumpUAENetActors();// 0x1859ea4
	void DumpRegions();// 0x1859e90
	void DumpNetActors();// 0x12e82e4
	void DumpCharacters();// 0x1859e7c
	void DumpAllUI();// 0x12e82e4
	void DumpAllObjects();// 0x12e82e4
	void DumpAllActors();// 0x12e82e4
	void DoCrash();// 0x12e82e4
	void DisableInGameUI();// 0x1859e68
	void ClientShowTeammateEscapeNotice();// 0x1859e4c
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x1859d04
	void ClientInitPlayerOBInfoButton();// 0x1859ce8
	void ClientBroadcastRespawnComplete();// 0x1859ccc
	void ClientBroadcastReconnectionSuccessful();// 0x1859cb0
	void ClientAcknowledgeReconnection(uint32 Token);// 0x1859c30
	void CheckPlayerOBInfoButtonInit();// 0x1859c14
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x1859b8c
	void CastUIMsg(FString strMsg, FString module);// 0x1859a44
	void CallLuaTableFunction(FString tableName, FString FunctionName);// 0x18598fc
	void CallLuaGlobalFunction(FString FunctionName);// 0x1859838

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 0xc]
	int WeatherID;//[Offset: 0xc, Size: 0x4]
	float WeatherTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 0xc]
	FString LocalAddr;//[Offset: 0xc, Size: 0xc]
	float AvgPing;//[Offset: 0x18, Size: 0x4]
	float MaxPing;//[Offset: 0x1c, Size: 0x4]
	float HighPingPercent;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0, Size: 0x4]
	int upassLevel;//[Offset: 0x4, Size: 0x4]
	int upassScore;//[Offset: 0x8, Size: 0x4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	FString iconUrl;//[Offset: 0x10, Size: 0xc]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int upassKeepBuy;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	uint64 Uid;//[Offset: 0x8, Size: 0x8]
	int ZoneID;//[Offset: 0x10, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 0x4]
	int BattleMode;//[Offset: 0x18, Size: 0x4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int GameCount;//[Offset: 0x20, Size: 0x4]
	float KDNum;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 0xc]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0, Size: 0x4]
	int PetLevel;//[Offset: 0x4, Size: 0x4]
	int PetCfgId;//[Offset: 0x8, Size: 0x4]
	int[] PetAvatarList;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 0x28]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int WearIndex;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0, Size: 0x4]
	int BagSkin;//[Offset: 0x4, Size: 0x4]
	int HelmetSkin;//[Offset: 0x8, Size: 0x4]
	int FlySkin;//[Offset: 0xc, Size: 0x4]
	GameModePlayerItem[] WeaponList;//[Offset: 0x10, Size: 0xc]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0, Size: 0x4]
	int[] VehicleStyleIDList;//[Offset: 0x4, Size: 0xc]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0, Size: 0x4]
	int ColorID;//[Offset: 0x4, Size: 0x4]
	int PatternID;//[Offset: 0x8, Size: 0x4]
	int ParticleID;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatar;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0, Size: 0x4]
	int HelmetAvatar;//[Offset: 0x4, Size: 0x4]
	int ArmorAvatar;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0, Size: 0x4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 0x4]
	int process;//[Offset: 0x4, Size: 0x4]
	FString ext_info;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0, Size: 0x4]
	int cur_count;//[Offset: 0x4, Size: 0x4]
	int total_count;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: DailyTaskStoreInfo
	int TaskID;//[Offset: 0x0, Size: 0x4]
	int State;//[Offset: 0x4, Size: 0x4]
	int Progress;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0x8e4, Size: 0xc]
	delegate OnPlayerPawnHPChange;//[Offset: 0x8f0, Size: 0xc]
	delegate OnDeath;//[Offset: 0x8fc, Size: 0xc]
	delegate OnBulletChange;//[Offset: 0x908, Size: 0xc]
	delegate OnPlayerPoseChange;//[Offset: 0x914, Size: 0xc]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x920, Size: 0xc]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0x92c, Size: 0xc]
	delegate OnPlayerPickUp;//[Offset: 0x938, Size: 0xc]
	delegate OnPlayerWeaponChangeState;//[Offset: 0x944, Size: 0xc]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0x950, Size: 0xc]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0x95c, Size: 0xc]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0x968, Size: 0xc]
	delegate IsEnterNearDeathDelegate;//[Offset: 0x974, Size: 0xc]
	delegate OnCharacterAimModeChanged;//[Offset: 0x9a8, Size: 0xc]
	delegate OnPerspectiveChanged;//[Offset: 0x9b4, Size: 0xc]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x9c0, Size: 0xc]
	delegate OnDeathDelegate;//[Offset: 0x9cc, Size: 0xc]
	delegate OnReconnectNotifyDelegate;//[Offset: 0x9d8, Size: 0xc]
	delegate OnStartInitDelegate;//[Offset: 0x9e4, Size: 0xc]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0xa0c, Size: 0xc]
	delegate OnUpdateForSleepComponent;//[Offset: 0xa18, Size: 0xc]
	delegate AnimMontagePlayDelegate;//[Offset: 0xa64, Size: 0xc]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xa70, Size: 0xc]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xa7c, Size: 0xc]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xa88, Size: 0xc]
	delegate OnCharacterShootDelegate;//[Offset: 0xa94, Size: 0xc]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xaa0, Size: 0xc]
	delegate OnCharacterEndViewTarget;//[Offset: 0xaac, Size: 0xc]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xab8, Size: 0xc]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xac4, Size: 0xc]
	delegate OnPawnRespawnDelegate;//[Offset: 0xad0, Size: 0xc]
	AkAudioEvent* DeathSound;//[Offset: 0xadc, Size: 0x4]
	AkAudioEvent* PickupSound;//[Offset: 0xae0, Size: 0x4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xae4, Size: 0x4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xae8, Size: 0x4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xaec, Size: 0x4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xaf0, Size: 0x4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf4, Size: 0x1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaf4, Size: 0x1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaf4, Size: 0x1]
	float NetDelayMinAniCompensate;//[Offset: 0xaf8, Size: 0x4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafc, Size: 0x1]
	float Money;//[Offset: 0xb00, Size: 0x4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb04, Size: 0x1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb05, Size: 0x1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb05, Size: 0x1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb06, Size: 0x1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb07, Size: 0x1]
	float MaxSwimSprintSpeed;//[Offset: 0xb08, Size: 0x4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0c, Size: 0x1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0d, Size: 0x1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0e, Size: 0x1]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0f, Size: 0x1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 0x1]
	float FallingTime;//[Offset: 0xb14, Size: 0x4]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 0x1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb19, Size: 0x1]
	Actor* MyConstActor;//[Offset: 0xb1c, Size: 0x4]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 0x1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xb28, Size: 0x4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xb30, Size: 0x4]
	float ValueLimitForHealthPredict;//[Offset: 0xb34, Size: 0x4]
	FName HeadSocketName;//[Offset: 0xb38, Size: 0x8]
	FName LFootSocketName;//[Offset: 0xb40, Size: 0x8]
	FName RFootSocketName;//[Offset: 0xb48, Size: 0x8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0xb50, Size: 0x4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0xb54, Size: 0x4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0xb58, Size: 0x4]
	EffectComponent* NewEffectComponent;//[Offset: 0xb5c, Size: 0x4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0xb60, Size: 0x4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0xb64, Size: 0x4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0xb68, Size: 0x4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 0x1]
	Rotator ServerControlRotation;//[Offset: 0xb70, Size: 0xc]
	byte PoseState;//[Offset: 0xb7c, Size: 0x1]
	float LastChangeCapsuleSizeTime;//[Offset: 0xb80, Size: 0x4]
	Actor* ThePlane;//[Offset: 0xb84, Size: 0x4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0xb88, Size: 0x4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0xb8c, Size: 0xc]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98, Size: 0x1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb99, Size: 0x1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 0x1]
	float RadialDamageScale;//[Offset: 0xbb0, Size: 0x4]
	byte LastPoseState;//[Offset: 0xbb4, Size: 0x1]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb5, Size: 0x1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0xbb8, Size: 0x4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 0x1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc1, Size: 0x1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc2, Size: 0x1]
	float AnimDeathLifeSpan;//[Offset: 0xbc4, Size: 0x4]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0xbc8, Size: 0x4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0xbcc, Size: 0xc]
	Actor*[] PlayerSlotData;//[Offset: 0xbd8, Size: 0xc]
	Actor*[] InventoryData;//[Offset: 0xbe4, Size: 0xc]
	AkComponent* SoundComp;//[Offset: 0xc3c, Size: 0x4]
	AkComponent* AmbientSoundComp;//[Offset: 0xc40, Size: 0x4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc44, Size: 0x1]
	AkAudioEvent* FootstepSound;//[Offset: 0xc48, Size: 0x4]
	AkAudioEvent* AmbientSound;//[Offset: 0xc4c, Size: 0x4]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0xc50, Size: 0x3c]
	SceneComponent* MeshContainer;//[Offset: 0xc8c, Size: 0x4]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc90, Size: 0x1]
	Actor* WaterObj;//[Offset: 0xc94, Size: 0x4]
	float HearRadius;//[Offset: 0xc98, Size: 0x4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c, Size: 0x1]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9d, Size: 0x1]
	byte ClientHitPartJudgment;//[Offset: 0xc9e, Size: 0x1]
	byte DSHitPartJudgment;//[Offset: 0xc9f, Size: 0x1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0xca0, Size: 0x4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0xca4, Size: 0x4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0xca8, Size: 0x4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcac, Size: 0x1]
	float ReplciateRestoringDuraion;//[Offset: 0xcb0, Size: 0x4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 0x1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0xcb8, Size: 0x4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc0, Size: 0x1]
	float DistSquaredInterruptRevival;//[Offset: 0xcc4, Size: 0x4]
	BodyTypeDef ProneBodyDef;//[Offset: 0xcc8, Size: 0x8]
	BodyTypeDef StandBodyDef;//[Offset: 0xcd0, Size: 0x8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0xcd8, Size: 0x8]
	BodyTypeDef DyingBodyDef;//[Offset: 0xce0, Size: 0x8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0xce8, Size: 0x8]
	Vector NewStandHitBodyBoxScale;//[Offset: 0xcf0, Size: 0xc]
	Vector NewProneHitBodyBoxScale;//[Offset: 0xcfc, Size: 0xc]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xd08, Size: 0x3c]
	Vector ScopeNewIdleLoc;//[Offset: 0xd44, Size: 0xc]
	Vector ScopeNewAimLoc;//[Offset: 0xd50, Size: 0xc]
	float ScopeMoveInOutSpeed;//[Offset: 0xd5c, Size: 0x4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0xd60, Size: 0xc]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0xd6c, Size: 0x4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0xd70, Size: 0x4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0xd74, Size: 0x4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0xd7c, Size: 0xc]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0xd88, Size: 0x4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0xd8c, Size: 0x4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0xd90, Size: 0x4]
	float ScopeLagScale;//[Offset: 0xd98, Size: 0x4]
	float ScopeAimCrosshairUIScale;//[Offset: 0xd9c, Size: 0x4]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0xda0, Size: 0x4]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0xda4, Size: 0x4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0xda8, Size: 0x4]
	int FirstDamageTypeSpesificID;//[Offset: 0xdac, Size: 0x4]
	float RefreshUITimeAfterSpawn;//[Offset: 0xdb0, Size: 0x4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0xdb4, Size: 0x4]
	Vector ScopeNewTargetLoc;//[Offset: 0xdc0, Size: 0xc]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcc, Size: 0x1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0xdd0, Size: 0x4]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0xdd4, Size: 0x4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0xdd8, Size: 0x4]
	CameraComponent* FPPCameraComp;//[Offset: 0xddc, Size: 0x4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0xde0, Size: 0x4]
	CameraComponent* ScopeCameraComp;//[Offset: 0xde4, Size: 0x4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0xde8, Size: 0x4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdec, Size: 0x1]
	SyncAKEvent SyncAKEvent;//[Offset: 0xdf0, Size: 0x10]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0xe00, Size: 0xc]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0xe0c, Size: 0xc]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0xe18, Size: 0xc]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24, Size: 0x1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe25, Size: 0x1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe26, Size: 0x1]
	BoxComponent* ProneBoxComponent;//[Offset: 0xe28, Size: 0x4]
	Vector ProneBoxRelativeLocation;//[Offset: 0xe2c, Size: 0xc]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0xe38, Size: 0xc]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0xe44, Size: 0xc]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0xe50, Size: 0x4]
	float PickUpRadius;//[Offset: 0xe54, Size: 0x4]
	SimViewData SimulateViewData;//[Offset: 0xe58, Size: 0x4]
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxResult;//[Offset: 0xe5c, Size: 0xc]
	AnchorPlatData AnchorPlat;//[Offset: 0xe68, Size: 0x8]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0xe78, Size: 0x28]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0xea0, Size: 0x8]
	float MaxDispalyFootprintDistance;//[Offset: 0xeb4, Size: 0x4]
	Rotator DefaultMeshRot;//[Offset: 0xeb8, Size: 0xc]
	KilledTipsBlock BlockData;//[Offset: 0xec4, Size: 0x28]
	class AnimInstance* MainCharAnimClass;//[Offset: 0xeec, Size: 0x4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0xef0, Size: 0x4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 0x1]
	int CurrentEmoteIndex;//[Offset: 0xefc, Size: 0x4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0xf04, Size: 0xc]
	AnimationAsset* TempEmoteResource;//[Offset: 0xf10, Size: 0x28]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0xf38, Size: 0x4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0xf3c, Size: 0x4]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0xf44, Size: 0x3c]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf80, Size: 0x1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf81, Size: 0x1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0xf84, Size: 0x4]
	Vector CurInputVector;//[Offset: 0xf88, Size: 0xc]
	StaticMeshComponent* ScopComp;//[Offset: 0xf94, Size: 0x4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0xfa4, Size: 0x4]
	float voiceCheckCD;//[Offset: 0xfa8, Size: 0x4]
	float voiceCheckShowCD;//[Offset: 0xfac, Size: 0x4]
	float VoiceCheckDis;//[Offset: 0xfb0, Size: 0x4]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0xfb4, Size: 0x4]
	<byte> DanyinCompletedIDSet;//[Offset: 0xfd0, Size: 0x3c]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x100c, Size: 0x4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x101c, Size: 0x4]
	byte MovementModeBeforeNearDeath;//[Offset: 0x1020, Size: 0x1]
	float MoveableSwitchPoseTime;//[Offset: 0x1024, Size: 0x4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x1028, Size: 0x4]
	int HandFolderRatio;//[Offset: 0x102c, Size: 0x4]
	float SwimUpRate;//[Offset: 0x1030, Size: 0x4]
	bool IsSwimUpWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1034, Size: 0x1]
	float UpWaterHeight;//[Offset: 0x1038, Size: 0x4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x103c, Size: 0x4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1040, Size: 0x1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1041, Size: 0x1]
	Vector_NetQuantize MoveInputState;//[Offset: 0x107c, Size: 0xc]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0, Size: 0x1]
	float CollideByTeammateCDConfig;//[Offset: 0x10e0, Size: 0x4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x10e8, Size: 0x10]
	Transform HitBoxLeanTransL;//[Offset: 0x1100, Size: 0x30]
	Transform HitBoxLeanTransR;//[Offset: 0x1130, Size: 0x30]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1178, Size: 0x4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x117c, Size: 0x4]
	float DelayHideDuration;//[Offset: 0x1180, Size: 0x4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1184, Size: 0x4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1188, Size: 0x1]
	float MaxRagdollActiveDuration;//[Offset: 0x118c, Size: 0x4]
	CircleMgrComponent* CircleMgr;//[Offset: 0x1190, Size: 0x4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119c, Size: 0x1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x11a0, Size: 0x84]
	AnimParamList CurAnimParamList;//[Offset: 0x1224, Size: 0x114]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1338, Size: 0x70]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x13a8, Size: 0x30]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x13d8, Size: 0x20]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x13f8, Size: 0x20]
	byte ThrowGrenadeMode;//[Offset: 0x1418, Size: 0x1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428, Size: 0x1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1429, Size: 0x1]
	float PeekCheckCollisionTimer;//[Offset: 0x142c, Size: 0x4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434, Size: 0x1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1438, Size: 0x4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x143c, Size: 0x4]
	float HighWalkSpeed;//[Offset: 0x1454, Size: 0x4]
	float WalkSpeedChangeRate;//[Offset: 0x1458, Size: 0x4]
	float WalkSpeedThreshold;//[Offset: 0x145c, Size: 0x4]
	float MaxCrouchSpeed;//[Offset: 0x1460, Size: 0x4]
	float MaxProneSpeed;//[Offset: 0x1464, Size: 0x4]
	float MaxSprintSpeed;//[Offset: 0x1468, Size: 0x4]
	float MaxSprintCrouchSpeed;//[Offset: 0x146c, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x1470, Size: 0x4]
	float HealthPredict;//[Offset: 0x1474, Size: 0x4]
	float BreathAmount;//[Offset: 0x1478, Size: 0x4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147c, Size: 0x1]
	int PoisonSmogStage;//[Offset: 0x1480, Size: 0x4]
	float PoisonSmogProgress;//[Offset: 0x1484, Size: 0x4]
	float AntidoteExeTime;//[Offset: 0x1488, Size: 0x4]
	float AntidoteMaxTime;//[Offset: 0x148c, Size: 0x4]
	float SpeedDynamicScale;//[Offset: 0x1490, Size: 0x4]
	float TurnInPlaceAngel;//[Offset: 0x1494, Size: 0x4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1498, Size: 0xc]
	byte HealthStatus;//[Offset: 0x14a4, Size: 0x1]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x14a8, Size: 0x3c]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e4, Size: 0x1]
	float SpeedScale;//[Offset: 0x14e8, Size: 0x4]
	float SkillSpeedScale;//[Offset: 0x14ec, Size: 0x4]
	float EnergySpeedScale;//[Offset: 0x14f0, Size: 0x4]
	float DefaultSpeedValue;//[Offset: 0x14f4, Size: 0x4]
	float SpeedValue;//[Offset: 0x14f8, Size: 0x4]
	float PawnBackpackCapacity;//[Offset: 0x14fc, Size: 0x4]
	CharacterEnergyData Energy;//[Offset: 0x1500, Size: 0x2c]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152c, Size: 0x1]
	float FarDistanceAimFOV;//[Offset: 0x1530, Size: 0x4]
	float FarRelevantDistanceSqured;//[Offset: 0x1534, Size: 0x4]
	float MiddleDistanceAimFOV;//[Offset: 0x1538, Size: 0x4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x153c, Size: 0x4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1544, Size: 0x4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1548, Size: 0x4]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x154c, Size: 0x4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1550, Size: 0x4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1554, Size: 0x4]
	float StandHalfHeight;//[Offset: 0x1558, Size: 0x4]
	float CrouchHalfHeight;//[Offset: 0x155c, Size: 0x4]
	float ProneHalfHeight;//[Offset: 0x1560, Size: 0x4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1564, Size: 0x4]
	float StandRadius;//[Offset: 0x1568, Size: 0x4]
	float DyingRadius;//[Offset: 0x156c, Size: 0x4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x1570, Size: 0xc]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x157c, Size: 0x4]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158c, Size: 0x1]
	float LastVehicleDamageCD;//[Offset: 0x1594, Size: 0x4]
	int VehicleSeatIdx;//[Offset: 0x159c, Size: 0x4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a6, Size: 0x1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x15a8, Size: 0x4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c4, Size: 0x1]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x15c8, Size: 0x4]
	<enum,int> AvatarRectifyData;//[Offset: 0x15cc, Size: 0x3c]
	HalloweenVampireCloth HalloweenVampireCloth;//[Offset: 0x1608, Size: 0x8]
	delegate OnAttachedToVehicle;//[Offset: 0x1610, Size: 0xc]
	delegate OnDetachedFromVehicle;//[Offset: 0x161c, Size: 0xc]
	delegate OnChangedVehicleSeat;//[Offset: 0x1628, Size: 0xc]
	delegate OnPlayerStateUpdated;//[Offset: 0x1634, Size: 0xc]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0x1674, Size: 0xc]
	uint64 CurrentStates;//[Offset: 0x1680, Size: 0x8]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x1714, Size: 0x4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171c, Size: 0x1]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171d, Size: 0x1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x1720, Size: 0x4]
	STParachuteState STReplicateParchuteState;//[Offset: 0x1728, Size: 0x18]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x1740, Size: 0x20]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1760, Size: 0x1]
	float MoveForwardInputValue;//[Offset: 0x1764, Size: 0x4]
	float MoveRightInputValue;//[Offset: 0x1768, Size: 0x4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176c, Size: 0x1]
	float ParachuteLandingHeightAdded;//[Offset: 0x1770, Size: 0x4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1774, Size: 0x1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x1778, Size: 0x4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x177c, Size: 0x4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x1784, Size: 0x4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x1788, Size: 0xc]
	STExtraBaseCharacter* Leader;//[Offset: 0x1794, Size: 0x4]
	enum FollowState;//[Offset: 0x1798, Size: 0x1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x179c, Size: 0xc]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x17a8, Size: 0xc]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x17b4, Size: 0xc]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x17c4, Size: 0x4]
	float maxShowAlpha;//[Offset: 0x17cc, Size: 0x4]
	float MoveMaxShowDis;//[Offset: 0x17d0, Size: 0x4]
	float WeaponMaxShowDis;//[Offset: 0x17d4, Size: 0x4]
	float VehicleMaxShowDis;//[Offset: 0x17d8, Size: 0x4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x1814, Size: 0x4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x1818, Size: 0x4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x181c, Size: 0x4]
	int IsEnableReportRoute;//[Offset: 0x18e8, Size: 0x4]
	Vector EmoteColBox;//[Offset: 0x1928, Size: 0xc]
	float CompVisionOpDis;//[Offset: 0x1934, Size: 0x4]
	float CompVisionOpDelay;//[Offset: 0x1938, Size: 0x4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193c, Size: 0x1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x194c, Size: 0x3c]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1988, Size: 0x1]
	bool bNightVisionUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1989, Size: 0x1]
	float MaxRelavantDistance;//[Offset: 0x1990, Size: 0x4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x1994, Size: 0x4]
	int IsEnableReportGameSetting;//[Offset: 0x1998, Size: 0x4]
	int EnableReportGameSettingLevel;//[Offset: 0x199c, Size: 0x4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x19a0, Size: 0x4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x19a4, Size: 0x4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x19a8, Size: 0x4]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19ac, Size: 0x1]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x19b8, Size: 0x4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c0, Size: 0x1]
	float EquipingScopeDelay;//[Offset: 0x19c4, Size: 0x4]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c9, Size: 0x1]
	delegate OnEquipZoomScope;//[Offset: 0x19cc, Size: 0xc]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x19dc, Size: 0x18]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x19f4, Size: 0x10]
	float CharacterFallingVelocityZFactor;//[Offset: 0x1a04, Size: 0x4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a40, Size: 0x1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a41, Size: 0x1]
	delegate CharacterDisplayFinalDamageDelegate;//[Offset: 0x1a44, Size: 0xc]
	<byte,float> DamagePosOffsetZ;//[Offset: 0x1a50, Size: 0x3c]
	int AloneDistance;//[Offset: 0x1a8c, Size: 0x4]
	int NearTeamPlayerDistance;//[Offset: 0x1a90, Size: 0x4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x1a98, Size: 0x28]
	float ChangeWearingLastTime;//[Offset: 0x1ac0, Size: 0x4]
	int ChangeWearingPromptTextID;//[Offset: 0x1ac4, Size: 0x4]
	FString ChangeWearingPromptText;//[Offset: 0x1ac8, Size: 0xc]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x1ad4, Size: 0x4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x1ad8, Size: 0xc]
	Vector ChangeWearingColBox;//[Offset: 0x1b1c, Size: 0xc]
	float PaintDecalMaxDistance;//[Offset: 0x1b28, Size: 0x4]
	float PuzzlePaintDecalMaxDistance;//[Offset: 0x1b2c, Size: 0x4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b30, Size: 0x1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b31, Size: 0x1]
	float RequestPaintDecalCD;//[Offset: 0x1b34, Size: 0x4]
	float MaxRequestPaintDecalCD;//[Offset: 0x1b38, Size: 0x4]
	ChildActorComponent* DecalComponent;//[Offset: 0x1b3c, Size: 0x4]
	Actor* DecalActor;//[Offset: 0x1b40, Size: 0x4]
	ChildActorComponent* PuzzleLineTraceComponent;//[Offset: 0x1b44, Size: 0x4]
	Actor* PuzzleTraceLineActor;//[Offset: 0x1b48, Size: 0x4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4c, Size: 0x1]
	float OutBattleStateTime;//[Offset: 0x1b50, Size: 0x4]
	delegate OnBattleStateChange;//[Offset: 0x1b58, Size: 0xc]
	delegate OnCharacterPlayEmote;//[Offset: 0x1b64, Size: 0xc]
	delegate OnCharacterWin;//[Offset: 0x1b70, Size: 0xc]
	delegate OnCharacterFallingModeChange;//[Offset: 0x1b7c, Size: 0xc]
	Vector LastServerHitImpactPoint;//[Offset: 0x1b88, Size: 0xc]
	byte RemainUseSupplySpotTimes;//[Offset: 0x1b94, Size: 0x1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x1b95, Size: 0x1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b96, Size: 0x1]
	int[] UseEnhanceSpotTip;//[Offset: 0x1b98, Size: 0xc]
	int MonsterDamageReduceSkillID;//[Offset: 0x1ba4, Size: 0x4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x1ba8, Size: 0x3c]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x1be4, Size: 0x4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bf5, Size: 0x1]
	FString CharacterSkillTableName;//[Offset: 0x1bf8, Size: 0xc]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x1c04, Size: 0x4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x1c08, Size: 0x4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x1c0c, Size: 0xf4]
	byte MeleeAutoAimType;//[Offset: 0x1d00, Size: 0x1]
	float LastSprintTriggerTime;//[Offset: 0x1d08, Size: 0x4]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d10, Size: 0x1]
	delegate ZombieModePropSkillUIShowDelegate;//[Offset: 0x1d14, Size: 0xc]
	int ZombieModeCurrentSkillPropLevel;//[Offset: 0x1d20, Size: 0x4]
	int ZombieModeCurrentSkillPropID;//[Offset: 0x1d24, Size: 0x4]
	delegate MarkPlayerPosDelegate;//[Offset: 0x1d28, Size: 0xc]
	PlayerVaultComponent* VaultControllerComp;//[Offset: 0x1d34, Size: 0x4]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x1d38, Size: 0x1c]
	enum CharacterMainType;//[Offset: 0x1d54, Size: 0x1]
	enum CharacterSubType;//[Offset: 0x1d55, Size: 0x1]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d56, Size: 0x1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x1d58, Size: 0xc]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x1d64, Size: 0x4]
	Actor* LastShootActor;//[Offset: 0x1d6c, Size: 0x4]
	float RTNoDamageTime;//[Offset: 0x1d70, Size: 0x4]
	float RealtimeVerifyInterval;//[Offset: 0x1d74, Size: 0x4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x1d78, Size: 0x4]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d80, Size: 0x1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d81, Size: 0x1]
	float FixMovementOnVehicleInterval;//[Offset: 0x1d84, Size: 0x4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x1d8c, Size: 0x4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x1da0, Size: 0x30]
	byte DefaultParticleAttachLocationType;//[Offset: 0x1dd0, Size: 0x1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x1dd4, Size: 0xc]
	float ParticleShowingInterval;//[Offset: 0x1de0, Size: 0x4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1de8, Size: 0x1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1de9, Size: 0x1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x1df0, Size: 0x28]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x1e18, Size: 0x4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x1e1c, Size: 0x4]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x14624a4
	void VaultFailPawnCPP(const FString Content);// 0x14623e0
	void VaultFailPawnBluePrint(out const FString Content);// 0x146230c
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x1462250
	void UserCancelRescue();// 0x146223c
	bool UpdateShovelingState();// 0x1462214
	void UpdateShovelingHoldStateRelease();// 0x1462200
	void UpdateShovelingHoldStatePressed();// 0x14621ec
	void UpdatePoseCollisionCpp(byte CurState, byte PreState);// 0x1462130
	void UpdateFallingTime(float Delta);// 0x14620b8
	void UpdateDeathReplayInitTrans(float DeltaTime);// 0x1462040
	void UpdateCurrentShootWeaponTick();// 0x146202c
	void UpdateAllInstanceBodyTransform(int Type);// 0x1461fb4
	void UnequipWeaponFinish();// 0x12e82e4
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x1461ef0
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x1461d30
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x1461c60
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x1461bd8
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x1c01fa0
	void SyncWaterObjectServer(Actor* WaterObject);// 0x1461b24
	void SyncWaterObject(Actor* WaterObject);// 0x1461aa4
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x1461940
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x14618c0
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x14617f4
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x146168c
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x14615bc
	void SwitchToLastNoneMeleeWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x14614ec
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x146141c
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x146125c
	void SwapMainWeapon();// 0x1461248
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x14610c0
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x1460fb0
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x1460f30
	bool StopFireFilter();// 0x1460f00
	void StopFire();// 0x1460eec
	bool StopChangeWearingAnim();// 0x1460ec4
	void StartWaitRefreshShootDetailInfo();// 0x1460eb0
	bool StartPlayEmoteAnim(int EmoteIndex);// 0x1460e30
	void StartFireSimple();// 0x1460e14
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x1460d8c
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x1460ba0
	bool StartChangeWearingAnim();// 0x1460b78
	void SpawnFootprint(enum FootprintType);// 0x1460b00
	void SpawnAndSwithToGrenadeServerCall(byte grenadeType, float SentTime);// 0x1460a04
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot);// 0x1460984
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot);// 0x1460904
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x1460748
	void ShowNightVisionFrame();// 0x146072c
	void ShowDebugRole();// 0x12e82e4
	void ShowDebugRecordData();// 0x1460718
	void ShowDebugPickUpFlow();// 0x1460718
	void ShowDebugEquipOrUnequipFlow();// 0x1460718
	void ShowDebugBornLandFlow();// 0x1460704
	void ShowConfirmDialogOfMisKill();// 0x14606e8
	bool ShouldUpdateHPOnUI();// 0x14606b8
	bool ShouldShowCorp();// 0x1460690
	bool ShouldShowAnchor();// 0x1460668
	bool ShouldAutoScopeWhenPeek();// 0x1460638
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x146044c
	void SetWeaponShootType(byte shootType);// 0x14603d4
	void SetViewTargetAgainForOB();// 0x14603c0
	void SetThrowGrenadeMode(byte ThrowMode);// 0x1460348
	void SetRTNoDamageTimer(float Timer);// 0x14602d0
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x146020c
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x1460148
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x14600c0
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x145fff8
	void SetHighWalkSpeed(float WalkSpeed);// 0x145ff80
	void SetHealthSafety(float NewHealth, byte Reason);// 0x145fec4
	void SetHandFoldRatio(int Ratio);// 0x145fe4c
	void SetExitingParachute(bool ExitParachute);// 0x145fdcc
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x145fd4c
	void SetDelayStateSwitchTime(float DelayTime);// 0x145fcd4
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x145fbfc
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x145fb30
	void SetCheatSpeedModifier(float NewModifier);// 0x145fab0
	void SetChangeWearingPromptEnable(bool bShow);// 0x145fa30
	void SetAntidoteMaxTime(float MaxTime);// 0x145f9b8
	void SetAntidoteExeTime(float ExeTime);// 0x145f940
	void SetAnimParamIsRescueing(bool Val);// 0x145f8c0
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x145f840
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x145f7c0
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x145f704
	void SetAmbientRTPC(FString RTPC, float Value);// 0x145f568
	void ServerUpdateShovelingHoldState(bool ishold);// 0x145f4a0
	void ServerTriggerJump();// 0x145f444
	void ServerSetPoisonSmogStage(int SmogStage);// 0x145f3cc
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x145f2a8
	void ServerSetPeekCollision(bool HasCollision);// 0x145f1e0
	void ServerSetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x145f0d0
	void ServerSetMovementState(Vector Input);// 0x145f024
	void ServerSendToLobbyServerUseItem(int ItemID, int count);// 0x145ef68
	void ServerResponseInvite(STExtraPlayerState* SomeOne, enum res, bool NotAllowInvitedLater);// 0x145ee10
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x145ec54
	void ServerNightVisionUse(bool bUse);// 0x145eb8c
	void ServerInviteTeammate(const FString[] Names);// 0x145ea30
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x145e91c
	void ServerFollowTeammate(FString Name);// 0x145e828
	void ServerEndZombieModePropSkill();// 0x12e82e4
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x145e774
	void ServerCancelFollow();// 0x145e718
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x145e5e0
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x145e468
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x145e2f0
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x145e200
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x145e0fc
	void Scoping(byte NewType);// 0x145e084
	void ScopeOut(byte NewType);// 0x145e00c
	void ScopeInterrupt(byte NewType);// 0x145df94
	void ScopeIn(byte NewType);// 0x145df1c
	void SaveMeshUpdateFlag();// 0x145defc
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x145de38
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x145dd84
	void RspPlayInteractionEmote(int EmoteId);// 0x145dcd0
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x145dc48
	void RPC_Server_UseZombieModeSkill();// 0x145dbec
	void RPC_Server_TriggerEntryEvent(enum EntryEvent);// 0x145db38
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x145d96c
	void RPC_Server_SwitchSkillProp(int SkillPropID);// 0x145d8b8
	void RPC_Server_SwapMainWeapon();// 0x145d85c
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x145d7a8
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x145d6f4
	void RPC_Server_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x145d62c
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x145d5d0
	void RPC_ReliableOwnerClientDie(float Damage, const DamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float CurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x145d31c
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x145d268
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x145d1b4
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x145cfe8
	void RPC_Client_SwapMainWeapon();// 0x145cf8c
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x145ced8
	void RPC_Client_ShowZombieModeSkillCD(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x145cd94
	void RPC_Client_ShootVertifyRes(const byte VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x145cba0
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x145caec
	void RPC_Client_ResetWeaponSlot();// 0x145cad0
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x145ca1c
	void RPC_Client_OnSkillPropCountChanged(int SkillPropID);// 0x145c968
	void RPC_Client_OnDeathStopRecordingNotify(FName SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x145c7f0
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x145c548
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x145c454
	void RPC_Client_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x145c38c
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x145c330
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x145c1d8
	void RestoreMeshUpdateFlag();// 0x145c1b8
	void ResponceInvite(STExtraPlayerState* SomeOne, enum res, bool NotAllowInvitedLater);// 0x145c0b0
	void ResetValueLimitForHealthPredict();// 0x145c09c
	void ResetCharacterEnergy();// 0x145c088
	void ResetCamera();// 0x145c074
	void RequestUserCancleRescue();// 0x145c018
	void RequestPutOnHalloweenVampireCloth(int ClothItemID, bool bWear);// 0x145bf08
	bool RequestPaintDecal(int DecalId);// 0x145be88
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x145bd8c
	void ReqStartPlayEmote(int EmoteIndex);// 0x145bcd8
	void ReqStartChangeWearing();// 0x145bc7c
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x145bbc8
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x145ba84
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x145b9d0
	void ReqInteruptChangeWearing();// 0x145b974
	void ReqEmotePlayFinished(int EmoteIndex);// 0x145b8c0
	void ReqChangeWearingFinished(int Index);// 0x145b80c
	void ReqAcceptInteractionEmote();// 0x145b7b0
	void ReportAntiCheatInfo();// 0x12e82e4
	bool ReloadWeaponFilter();// 0x145b780
	bool ReloadCurrentWeapon();// 0x145b758
	void RegisterPlayerPickUpList();// 0x145b744
	void RefreshWeaponOwnerCollision(float CountDown);// 0x145b6c4
	void RefreshPersonPerspective();// 0x145b6b0
	void RefreshPawnVaultTypeServer();// 0x145b654
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x145b5cc
	void RefreshMoveAttrModifier();// 0x145b5b8
	void RefreshAvatar(enum slotType, bool isEquipped, int ItemID);// 0x145b4ac
	void PrintAIPolicyDecisionData();// 0x12e82e4
	void PostGetPlayerAnimation();// 0x1c01fa0
	void PlaySwitchSightSound();// 0x145b498
	void PlaySwitchFireModeSound();// 0x145b484
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x145b40c
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime);// 0x145b2b4
	void PlaySelfThrowAwayWeaponSound();// 0x145b2a0
	void PlayPumpkinAvatarEffect(ParticleSystem* ParticleSystem);// 0x145b220
	void PlayPullBoltSound();// 0x145b20c
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x145af9c
	void PlayMountAccessoriesSound();// 0x145af88
	void PlayMagOUTSound();// 0x145af74
	void PlayMagINSound();// 0x145af60
	void PlayLocalShellDropFX();// 0x145af4c
	void PlayLoadBulletSound();// 0x145af38
	void PlayFootstepSound(byte FootStepState);// 0x145aec0
	bool PlayerConfirmToRescue();// 0x145ae98
	void PlayChangeMagazineSound();// 0x145ae84
	void PlayAmbientSound();// 0x145ae70
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount);// 0x145ac94
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount);// 0x145ab94
	void PawnVaultStopCPP();// 0x145ab78
	void PawnVaultStopBluePrint();// 0x145ab5c
	void PawnVaultServerStopCheckCPP();// 0x145ab00
	void PawnVaultServerStopCheckBluePrint();// 0x145aae4
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x145a65c
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x145a280
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x1459f0c
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x1459b7c
	void PawnLeaveState(enum State);// 0x1459afc
	bool PawnHasState(enum PawnState);// 0x1459a74
	bool PawnEnterState(enum State);// 0x14599ec
	bool PawnAllowState(enum State, bool withLog);// 0x1459918
	void OnWeaponEquipmentUpdate();// 0x14598fc
	void OnUnEquipWeapon();// 0x1c01fa0
	void OnUIZombieModeSkillCDShowDelegate(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x14597fc
	void OnStopFire();// 0x1c01fa0
	void OnStateLeave(enum EnteredState);// 0x1459784
	void OnStateEnter(enum EnteredState);// 0x145970c
	void OnStartFire(byte isAuto);// 0x1c01fa0
	void OnShowName(bool _IsShow, FString _Name);// 0x1c01fa0
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x145968c
	void OnScopeNotHandFold();// 0x1459678
	void OnScopeHandFold();// 0x1459664
	void OnRep_ZombieModeSkillPropLevel();// 0x1459650
	void OnRep_ZombieModeSkillPropChanged();// 0x145963c
	void OnRep_WaterObj();// 0x1459628
	void OnRep_VehicleSeatIdx();// 0x1459614
	void OnRep_UnmannedVehicleSyncData();// 0x14595f8
	void OnRep_ThrowGrenadeMode();// 0x14595e4
	void OnRep_StatusChanged(byte prevStatus);// 0x1459564
	void OnRep_ShowRevivalPointIcon();// 0x1459550
	void OnRep_ResetDataOnRespawn();// 0x145953c
	void OnRep_ReplicatedParachuteState();// 0x12e82e4
	void OnRep_ReplicatedMoveState();// 0x1459528
	void OnRep_ReplicatedIsStartParachute();// 0x1459514
	void OnRep_RemainUseSupplySpotTimes();// 0x1459500
	void OnRep_RemainUseEnhancerSpotTimes();// 0x14594ec
	void OnRep_PoseStateNotify(byte LastState);// 0x1459474
	void OnRep_PoisonFogStageChange();// 0x1459460
	void OnRep_PlayerKey();// 0x1459444
	void OnRep_PeekHasCollision();// 0x1459430
	void OnRep_MoneyNotify();// 0x145941c
	void OnRep_KillTipsNotify();// 0x12e82e4
	void OnRep_IsRescueingOtherStatusChange();// 0x1459408
	void OnRep_IsInvincible();// 0x14593f4
	void OnRep_IsFPPChanged();// 0x14593e0
	void OnRep_IsBeingRescuedStatusChange();// 0x14593cc
	void OnRep_HealthPredict();// 0x14593b8
	void OnRep_Health();// 0x145939c
	void OnRep_HandFolderRatio();// 0x1459388
	void OnRep_FollowState();// 0x1459374
	void OnRep_EnergyChange();// 0x1459360
	void OnRep_DisabledPawnStates();// 0x145934c
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x14592d4
	void OnRep_CurrentStates(uint64 prevStates);// 0x1459258
	void OnRep_CharacterFallingVelocityZFactor();// 0x1459244
	void OnRep_ChangeHalloweenVampireCloth();// 0x1459230
	void OnRep_BreathAmmountChange();// 0x145921c
	void OnRep_bNightVisionUseTest();// 0x1459208
	void OnRep_bNightVisionUse();// 0x14591f4
	void OnRep_bIsCallingForRevival();// 0x14591e0
	void OnRep_AntidoteMaxTimeSync();// 0x12e82e4
	void OnRep_AntidoteExeTimeSync();// 0x12e82e4
	void OnRep_AnchorPlat();// 0x14591cc
	void OnRep_AKEventNotify();// 0x14591b8
	void OnPoseStateChange(byte LastState, byte CurState);// 0x1c01fa0
	bool OnPlayEmote(int EmoteId);// 0x1459138
	void OnOpenDoor(PUBGDoor* door, int doorState);// 0x1459074
	void OnNotifyHurt();// 0x1c01fa0
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x1458ffc
	void OnLeaveStateForBp(enum State);// 0x1c01fa0
	void OnInterruptCurrentEmote();// 0x1458fe8
	void OnInterruptChangeWearing();// 0x1458fd4
	void OnHealthChangeFromRPC(float InHealth);// 0x1458f5c
	void OnFollowStateChange();// 0x1458f48
	void OnEquipWeapon(byte Slot);// 0x1c01fa0
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x1458ed0
	void OnEnterStateForBp(enum State);// 0x1c01fa0
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x1458e14
	void OnEndChangeWearing(int StopReason);// 0x1458d9c
	void OnDetectPaintDecalTarget(bool bStart);// 0x1c01fa0
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x1458ce0
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x1458c68
	bool OnChangeWearing(int Index);// 0x1458be8
	void OnBPMoneyChange();// 0x1c01fa0
	void OnBPIsInvincibleChange();// 0x1c01fa0
	void OnBPHealthChange();// 0x1c01fa0
	void OnBeforeGetUp();// 0x1c01fa0
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim);// 0x1458a68
	void OnAsyncLoadChangeWearingAnim();// 0x1458a54
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x14588ec
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x1458814
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x1458718
	void MulticastStartPlayEmote(int EmoteIndex);// 0x1458664
	void MulticastStartChangeWearing();// 0x1458608
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x1458554
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x14584a0
	void MulticastInteruptChangeWearingOnServer();// 0x1458444
	void MulticastInteruptChangeWearing();// 0x14583e8
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x1458368
	void MeleeServer();// 0x145830c
	void MeleeReleased();// 0x14582f8
	void MeleeLocal();// 0x1c01fa0
	void MeleeBroadcastOtherClients();// 0x145829c
	void Melee(bool IsForCE);// 0x145821c
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x1458208
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x1458190
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x1458068
	bool LocalStartPlayEmote(int EmoteIndex);// 0x1457fe8
	bool LocalStartChangeWearing();// 0x1457fc0
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x1457f40
	bool LocalInteruptChangeWearing();// 0x1457f18
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x1457e5c
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x1457ddc
	void LeaveState(enum State);// 0x1457d64
	void LeaveServerState(enum State);// 0x1457cb0
	void LeaveBattleState();// 0x1457c9c
	bool IsWeaponOwnerLocallyControlled();// 0x1457c6c
	bool IsValidPuzzleElementTarget(out HitResult OutHitResult, out Vector OutStart, out Vector OutEnd);// 0x1457b24
	bool IsValidPaintDecalTarget_Simple();// 0x1457b04
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x14579cc
	bool IsUsingGrenade();// 0x14579a4
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x1457924
	bool IsSameTeamWithLocal();// 0x14578fc
	bool IsSameTeam(Pawn* Other);// 0x1457874
	bool IsReplayViewTarget();// 0x145784c
	bool IsProneMove();// 0x1457824
	bool IsPawnStateDisabled(enum State);// 0x14577a4
	bool IsOnVehicleNotUAV();// 0x1457764
	bool IsOnVehicle();// 0x1457740
	bool IsNowUpWater();// 0x1457718
	bool IsNearDeath();// 0x14576f0
	bool IsLocalViewed();// 0x14576c0
	bool IsLocalControlorView();// 0x1457698
	bool IsInFlyingTeam();// 0x1457670
	bool IsInEditor();// 0x1457648
	bool IsHealthyAlive();// 0x1457620
	bool IsHandleInFold();// 0x14575f8
	bool IsGunADS();// 0x14575c8
	bool IsForbidDriveSnowBoard();// 0x14575a0
	bool IsFirstPerson();// 0x1457578
	bool IsExitingParachute();// 0x1457550
	bool IsEnableBulletFlySound();// 0x1457520
	bool IsDetectingPaintDecalTarget();// 0x1457500
	bool IsDeathPlayViewTarget();// 0x14574d8
	bool IsClient_WeaponOwner();// 0x14574a8
	bool IsCharacterSprinting();// 0x1457480
	bool IsChangeWearingState();// 0x1457458
	bool IsCanDriveSnowBoard();// 0x1457430
	bool IsBattleState();// 0x1457408
	bool IsAngledSight();// 0x14573e0
	bool IsAllowScopeIn();// 0x14573b8
	bool IsAlive();// 0x1457388
	void InviteTeammate(FString[] Names);// 0x1457174
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x14570b8
	void InitCharacterSkillList();// 0x14570a4
	void InitBodyBoneMap();// 0x1457088
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x1456fcc
	void HidePlayerMagOnGunReload();// 0x1456fb8
	void HideNightVisionFrame();// 0x1456f9c
	bool HasState(enum State);// 0x1456f1c
	void HandleWeaponShootLost();// 0x1456f00
	void HandleWeaponOnShoot();// 0x1456eec
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x1456dec
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x1456d6c
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x1456cec
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x1456c30
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x1456bb0
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x1456af4
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x1456a38
	void HandleOpenPickUpBoxAction();// 0x1456a24
	void HandleOnCharAnimLoadingFinished();// 0x1456a10
	void HandleMoveAntiShootVerifyMiss();// 0x14569f4
	void HandleConsumeItemSkillBreak();// 0x14569e0
	void HandleBulletHitEvent(Actor* ImpactActor, Vector ImpactPoint);// 0x145691c
	void HandleAutoSwitchWeaponDelay();// 0x1456908
	void GrenadeBackToWeaponServerCall();// 0x14568ac
	void GMTestZengzuo();// 0x1456898
	void GMShowName();// 0x12e82e4
	Actor* GetWeaponUserConst();// 0x1456868
	float GetWeaponOwnerPawnHealth();// 0x1456838
	WeaponManagerComponent* GetWeaponManager();// 0x1456808
	Rotator GetViewRotation();// 0x14567b8
	PlayerVaultComponent* GetVaultComponent();// 0x1456790
	float GetValueLimitForHealthPredict();// 0x1456768
	Vector GetUIHelmetPosition();// 0x1456718
	enum GetUAVState();// 0x14566fc
	byte GetThrowGrenadeMode();// 0x14566dc
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x145665c
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x145647c
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x1c01fa0
	byte GetRole();// 0x145644c
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x145642c
	int GetRedClothIDByEmote(int EmoteIndex);// 0x14563a4
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x1456314
	void GetPumpkinAvatar(int ID, ParticleSystem* ParticleSystem);// 0x1456218
	BoxComponent* GetProneShapeComponent();// 0x14561fc
	byte GetPlayerWeaponFireMode();// 0x13e7410
	byte GetPlayerWeaponEquipSlot();// 0x14561d4
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x1456110
	PlayerVehAnimList GetPlayerVehAnimation();// 0x14560dc
	int GetPlayerTeamIndex();// 0x14560b4
	STExtraPlayerState* GetPlayerStateSafety();// 0x145608c
	STExtraPlayerState* GetPlayerState();// 0x145605c
	FString GetPlayerPawnCollisionInfo();// 0x1455f9c
	FString GetPlayerNameSafety();// 0x1455ed4
	byte GetPlayerJumpType();// 0x1455eac
	STExtraPlayerController* GetPlayerControllerSafety();// 0x1455e7c
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x1455e54
	STExtraPlayerController* GetPlayerControllerInDeathReplay();// 0x1455e2c
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x1455cfc
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x1455c74
	PlayerAnimList GetPlayerAnimation();// 0x1455bac
	int GetNearTeamPlayerNum();// 0x1455b84
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x1455b54
	STExtraBaseCharacter* GetLatestInviter();// 0x1455b2c
	STExtraPlayerState* GetLastInviterPlayerState();// 0x1455b04
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x1455ad4
	bool GetIsPlayingEmote();// 0x1455ab4
	bool GetIsFPP();// 0x1455a8c
	bool GetIsChangeWearing();// 0x1455a6c
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x14559ec
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x1455958
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x145588c
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x1455718
	Vector GetHeadLocation(bool bUseHeadBone);// 0x1455680
	int GetHandFolderRatio();// 0x1455650
	Vector GetGunOwnerHeadLocation();// 0x1455600
	FString GetGrenadeNameByGrenadeType(byte grenadeType);// 0x1c01fa0
	BaseFPPComponent* GetFPPComp();// 0x14555d8
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x1455548
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x14554b8
	float GetFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1455344
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x1c01fa0
	FString GetEmote(int ItemDefineID);// 0x1c01fa0
	STExtraWeapon* GetCurrentWeapon();// 0x145531c
	STExtraVehicleBase* GetCurrentVehicle();// 0x14552ec
	uint64 GetCurrentStatesInterface();// 0x14552bc
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x1455294
	STExtraWeapon* GetCurrentShieldWeapon();// 0x145526c
	byte GetCurHitPartJugementType();// 0x1455244
	FString GetCorpName();// 0x1455184
	Controller* GetControllerSafety();// 0x1455154
	float GetCharacterXYPlaneVelocity();// 0x145512c
	enum GetCharacterSubType();// 0x1455104
	enum GetCharacterMainType();// 0x14550dc
	CharacterEnergyData GetCharacterEnergy();// 0x1454ef0
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x1454ec0
	CapsuleComponent* GetCapsuleComponentInterface();// 0x1454e90
	Rotator GetCachedControlRotation();// 0x1454e48
	float GetBodyhurtDamage(float Damage, out const DamageEvent DamageEvent, out bool IsHeadShot, out enum OutHitPos);// 0x1454cac
	CharacterAvatarComponent2* getAvatarComponent2();// 0x1454c84
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x1454c04
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos);// 0x1454b40
	SpringArmComponent* GetActiveSpringArm();// 0x1454b10
	void GeneratePlayerBackpackWrappersToGround();// 0x1454af4
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x1454828
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x14545e4
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x1454564
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x1454498
	void ForcePlayerUpdateAnimation();// 0x1454484
	void ForceDestroyWeaponInventoryAndClearData(bool bKeepOnPlaneItems);// 0x1454404
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x1454314
	void FollowTeammate(FString Name);// 0x14541bc
	enum FindBuffRelatedPawnState(FName _buffName);// 0x145413c
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x1453fc4
	void ExecFollowTeammate(FString Name);// 0x1453e6c
	void EquipZoomScope(int WeaponID, int ScopeID);// 0x1453db0
	void EquipWeaponFinish();// 0x12e82e4
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x1453cec
	bool EnterState(enum State);// 0x1453c6c
	void EnterServerState(enum State);// 0x1453bb8
	void EnterFire();// 0x1453b9c
	void EnterBattleState();// 0x1453b88
	void EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x1453b08
	bool EmoteAnimFinishedSuccessfully();// 0x1453ae0
	void DoPuzzleActorTickable(bool bStart);// 0x1453a60
	void DoDetectPaintDecalTarget(bool bStart);// 0x14539e0
	void DisappearOnDeath();// 0x14539cc
	void DettachWeapon();// 0x12e82e4
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x1453900
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x145382c
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x1453818
	void DelayMoveEnd();// 0x1453804
	void DelayMove(float Time);// 0x145378c
	void DelayHidden();// 0x1453770
	void DelayCustomDepth(float Time);// 0x14536f8
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x14535a8
	bool CurrentStateHas(enum State);// 0x14534ec
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x1453464
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x14533e4
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x1453364
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x14532e4
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x1453168
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res);// 0x1453060
	void ClientSomeOneInviteMe(STExtraPlayerState* SomeOne);// 0x1452fe0
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x1452f68
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x1452ea4
	void ClientResponseFeedback(enum res);// 0x1452e24
	void ClientPlayVehicleOverlapCameraShake();// 0x1452dc8
	void ClientOnPossessBy(Controller* NewController);// 0x1452d14
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage, enum HitPosition);// 0x1452af8
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage, enum HitPosition);// 0x14528c8
	void ClientBulletLineTrace(Vector_NetQuantize10 BornPos, Vector_NetQuantize10 EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x1452764
	void ClearOnDeath(Controller* EventInstigater, Actor* DamageCauser);// 0x14526a8
	void ClearHPUI();// 0x145268c
	void ClearClientJump();// 0x1452678
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x14525f0
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x1452560
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x145249c
	bool CheckIsWearingThisCloth(int RedClothID);// 0x145241c
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x1452394
	bool CheckBaseIsMoving();// 0x145236c
	bool CheckBaseIsMoveable();// 0x1452344
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x14522cc
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x14521c0
	bool ChangeWearingAnimFinishedSuccessfully();// 0x1452198
	void ChangeVehWeaponCameraData(bool Enable);// 0x1452118
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x1452010
	bool CanPaintDecal(int DecalId);// 0x1451f90
	bool CanGetPumpkinAvatar(int ID);// 0x1451f10
	bool CanEnterWaterArea(enum[] disallowedState);// 0x1451db0
	bool CanEnterState(enum NewState);// 0x1451d30
	bool CanChangeThrowMode();// 0x13e7410
	void CancelFollow();// 0x1451d1c
	void CalculateBornLandThrowGrenade(int ID);// 0x1451ca4
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x1451be0
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* meshComp, Actor* BulletActor);// 0x1451a94
	void BulletChange();// 0x1451a38
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x14517d4
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x1451520
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* VictimName, ClientFatalDamageRecordData Data);// 0x1451370
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x14510a4
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x1450dd8
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1450aa0
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x1450768
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x145049c
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x14501d0
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x144ff04
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x144fc38
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x144f958
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x144f678
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x144f3ac
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x144f0e0
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x144ee14
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x144eb48
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x144e874
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x144e5a0
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x144e268
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x144df30
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x144ddb4
	void BPResetCharacter();// 0x1c01fa0
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x1c01fa0
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1c01fa0
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1c01fa0
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1c01fa0
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1c01fa0
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1c01fa0
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x144dc40
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x1c01fa0
	void BleStopCurSkill();// 0x144dc2c
	bool BleIsCastingSkill();// 0x144dc04
	void AutoScopeWhenPeek();// 0x144dbf0
	void AttachWeapon();// 0x12e82e4
	void AsyncAnimOpenDoorCallback(AnimationAsset* retAsset);// 0x144db78
	bool AllowState(enum State, bool withLog);// 0x144daac
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x144d958
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x144d798
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x144d698
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x144d4e4

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate CharacterAnimEventDelegate;//[Offset: 0x708, Size: 0xc]
	float Health;//[Offset: 0x7a0, Size: 0x4]
	float HealthMax;//[Offset: 0x7a4, Size: 0x4]
	int[] TypeIds;//[Offset: 0x7a8, Size: 0xc]
	float SwimSpeedDynamicScale;//[Offset: 0x7b4, Size: 0x4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b8, Size: 0x1]
	float threatenValue;//[Offset: 0x7bc, Size: 0x4]
	float HurtParticleOffset;//[Offset: 0x7c0, Size: 0x4]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0x7c4, Size: 0x4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0x7c8, Size: 0x8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0x7d0, Size: 0x8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0x7d8, Size: 0x4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x7dc, Size: 0x4]
	delegate OnHandleSkillStartDelegate;//[Offset: 0x7e0, Size: 0xc]
	delegate OnHandleSkillEndDelegate;//[Offset: 0x7ec, Size: 0xc]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0x810, Size: 0x4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0x814, Size: 0x4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0x818, Size: 0x4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x81c, Size: 0x4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0x820, Size: 0x4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x824, Size: 0xc]
	delegate StateEnterHandler;//[Offset: 0x830, Size: 0xc]
	delegate StateLeaveHandler;//[Offset: 0x83c, Size: 0xc]
	delegate StateInterruptedHandlerBP;//[Offset: 0x864, Size: 0xc]
	PartHitComponent* PartHitComponent;//[Offset: 0x870, Size: 0x4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 0x1]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 0x1]
	byte TeamNum;//[Offset: 0x88c, Size: 0x1]
	float VehicleDetailedTraceDist;//[Offset: 0x890, Size: 0x4]
	float SpringArmTraceDist;//[Offset: 0x894, Size: 0x4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0x898, Size: 0x3c]
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x1461bd8
	void TriggerCustomEvent_Implementation(byte EventType);// 0x147b750
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x147b67c
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x147b56c
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x147b414
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x147b2f0
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x147b190
	void OnRep_UnmannedVehicleSyncData();// 0x14595f8
	void OnRep_HealthMax();// 0x147b174
	void OnRep_Health();// 0x145939c
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x1c01fa0
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x1c01fa0
	bool IsPawnStateDisabledByWeapon(enum State);// 0x147b0ec
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x147b048
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x147afa4
	bool IsAlive();// 0x1457388
	bool HasBuffID(int BuffID);// 0x147af1c
	bool HasBuff(FName BuffName);// 0x147ae94
	STExtraVehicleBase* GetUnmannedVehicle();// 0x147ae78
	FString GetPlayerNameSafety();// 0x1455ed4
	STExtraPlayerController* GetPlayerControllerSafety();// 0x1455e7c
	enum GetObserverType();// 0x147ae48
	enum[] GetDamageableGameObjectType();// 0x147ad80
	UTSkill* GetCurSkill();// 0x147ad50
	STExtraVehicleBase* GetCurrentVehicle();// 0x14552ec
	STBuff*[] GetBuffsByID(int BuffID);// 0x147ac48
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamageType);// 0x147ab08
	void DelayHidden();// 0x1453770
	void ClearBuff();// 0x147aaec
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1c01fa0
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x147a9dc
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x147a884
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x147a6e0

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x5e4, Size: 0x4]
	FName PlayerType;//[Offset: 0x5f0, Size: 0x8]
	FString PlayerName;//[Offset: 0x5f8, Size: 0xc]
	FString Nation;//[Offset: 0x604, Size: 0xc]
	uint32 PlayerKey;//[Offset: 0x610, Size: 0x4]
	FString PlayerUID;//[Offset: 0x614, Size: 0xc]
	int TeamID;//[Offset: 0x620, Size: 0x4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1]
	int CampID;//[Offset: 0x628, Size: 0x4]
	enum DefaultCharacterGender;//[Offset: 0x62c, Size: 0x1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x630, Size: 0xc]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x63c, Size: 0x24]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x660, Size: 0x18]
	int planeAvatarId;//[Offset: 0x678, Size: 0x4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x67c, Size: 0xc]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 0x1]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 0x1]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 0x1]
	void OnRep_UseWholeModel();// 0x12e82e4
	void OnRep_TeamID();// 0x184b2cc
	void OnRep_PlayerUID();// 0x12e82e4
	void OnRep_PlayerKey();// 0x1459444
	void OnRep_CampID();// 0x12e82e4
	FString GetPlayerKey();// 0x184b20c
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x184b144
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x184b07c
	ActorComponent*[] GetNonSimulatedComponents();// 0x184afb4
	ActorComponent*[] GetNonDedicatedComponents();// 0x184aeec
	void ClientAcknowledgeReconnection(uint32 Token);// 0x184ae6c

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 0x4]
	float MaxAttenuationRadius;//[Offset: 0x20, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float MinimumDuration;//[Offset: 0x28, Size: 0x4]
	float MaximumDuration;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x3a8, Size: 0x4]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	enum VehicleType;//[Offset: 0x3ad, Size: 0x1]
	enum VehicleShapeType;//[Offset: 0x3ae, Size: 0x1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x3b0, Size: 0x18]
	MaterialInterface* BrokenMat;//[Offset: 0x3c8, Size: 0x4]
	ParticleSystem* PS_Explosion;//[Offset: 0x3cc, Size: 0x4]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x3d0, Size: 0x4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x3d4, Size: 0x3c]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x410, Size: 0x3c]
	Texture2D* VehicleIcon;//[Offset: 0x44c, Size: 0x4]
	byte CameraDataType;//[Offset: 0x450, Size: 0x1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x452, Size: 0x1]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x453, Size: 0x1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x454, Size: 0x4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x458, Size: 0x4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 0x1]
	float ShowGrainyScreenMinDist;//[Offset: 0x460, Size: 0x4]
	float FuelConsumptionModifierBoost;//[Offset: 0x464, Size: 0x4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a, Size: 0x1]
	float LanscapeCheckDistance;//[Offset: 0x46c, Size: 0x4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	float LockZeroAngularDampingValue;//[Offset: 0x474, Size: 0x4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	int MainMaterialIndex;//[Offset: 0x47c, Size: 0x4]
	FText VehicleDisplayName;//[Offset: 0x480, Size: 0xc]
	Vector AirDropVelocity;//[Offset: 0x48c, Size: 0xc]
	StaticMesh* AirdropParachuteMesh;//[Offset: 0x498, Size: 0x4]
	FName AirDropParachuteSocketName;//[Offset: 0x4a0, Size: 0x8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 0x1]
	float BackpackCapacity;//[Offset: 0x4ac, Size: 0x4]
	FName BackpackName;//[Offset: 0x4b0, Size: 0x8]
	FString[] BackpackSupportModeIDList;//[Offset: 0x4b8, Size: 0xc]
	int[] marr_MidIndexes;//[Offset: 0x4c4, Size: 0xc]
	float EnterVehicleCameraBlendTime;//[Offset: 0x4d0, Size: 0x4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x4d4, Size: 0x4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x4d8, Size: 0x4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1]
	float StaticForceFixInterval;//[Offset: 0x4e0, Size: 0x4]
	float voiceCheckCD;//[Offset: 0x4e4, Size: 0x4]
	float voiceCheckShowCD;//[Offset: 0x4e8, Size: 0x4]
	float VoiceCheckDis;//[Offset: 0x4ec, Size: 0x4]
	float voiceUsingHornCheckDis;//[Offset: 0x4f0, Size: 0x4]
	float voiceCheckSpeed;//[Offset: 0x4f4, Size: 0x4]
	delegate OnSeatAttached;//[Offset: 0x520, Size: 0xc]
	delegate OnSeatDetached;//[Offset: 0x52c, Size: 0xc]
	delegate OnSeatChange;//[Offset: 0x538, Size: 0xc]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 0x1]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 0x1]
	float PassengerInjuryAvoidance;//[Offset: 0x548, Size: 0x4]
	enum VehicleHealthState;//[Offset: 0x568, Size: 0x1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a, Size: 0x1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56b, Size: 0x1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 0x1]
	Vector BloodEffectScale;//[Offset: 0x570, Size: 0xc]
	SkeletalMeshComponent* Mesh;//[Offset: 0x57c, Size: 0x4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x580, Size: 0x4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x584, Size: 0x4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x588, Size: 0x4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x58c, Size: 0x4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x590, Size: 0x4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x594, Size: 0x4]
	VehicleComponent*[] VehicleComps;//[Offset: 0x598, Size: 0xc]
	float VehicleHitThreshold;//[Offset: 0x5bc, Size: 0x4]
	float VehicleHitCharacterThreshold;//[Offset: 0x5c0, Size: 0x4]
	float AndroidGLES2TailLightScale;//[Offset: 0x5d0, Size: 0x4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x5dc, Size: 0xc]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x5ec, Size: 0xc]
	delegate OnClientExitVehicleEvent;//[Offset: 0x5f8, Size: 0xc]
	float VehicleEnterDistance;//[Offset: 0x608, Size: 0x4]
	float TickEnterSphereInterval;//[Offset: 0x60c, Size: 0x4]
	float EnterSphereExtraHeight;//[Offset: 0x610, Size: 0x4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 0x1]
	float AsyncLoadResDistance;//[Offset: 0x620, Size: 0x4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x624, Size: 0x4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 0x1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x630, Size: 0x4]
	float EnterCullWaterDistanceSq;//[Offset: 0x634, Size: 0x4]
	Vector CullWaterCapsuleA;//[Offset: 0x638, Size: 0xc]
	Vector CullWaterCapsuleB;//[Offset: 0x644, Size: 0xc]
	float CullWaterCapsuleRadius;//[Offset: 0x650, Size: 0x4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x654, Size: 0x4]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	float PeneTerrainProtectionInterval;//[Offset: 0x664, Size: 0x4]
	float SaveValidTransformInterval;//[Offset: 0x668, Size: 0x4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x66c, Size: 0xc]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x6a4, Size: 0x4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x6a8, Size: 0x4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x6ac, Size: 0x4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x6b0, Size: 0x4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x6b4, Size: 0x4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x6b8, Size: 0x4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x6bc, Size: 0x4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x6c0, Size: 0x4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x6c4, Size: 0x4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x6c8, Size: 0x4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x6cc, Size: 0x4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x6d0, Size: 0x4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x6d4, Size: 0x4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x6d8, Size: 0x4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x6dc, Size: 0x4]
	AkAudioEvent*[] SfxArr_MusicLoops;//[Offset: 0x6e0, Size: 0xc]
	float EngineSfxEndDelayTime;//[Offset: 0x6ec, Size: 0x4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	float OverrideCullingSizeWithPlayer;//[Offset: 0x6f4, Size: 0x4]
	float OverrideCullingSizeWithoutPlayer;//[Offset: 0x6f8, Size: 0x4]
	float RPMSfxScale;//[Offset: 0x86c, Size: 0x4]
	float ThrottleSfxMinSpeed;//[Offset: 0x870, Size: 0x4]
	float PlayMusicChance;//[Offset: 0x87c, Size: 0x4]
	int CurMusicIndex;//[Offset: 0x880, Size: 0x4]
	enum VehicleSyncTag;//[Offset: 0x891, Size: 0x1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x894, Size: 0x4]
	VehicleSimViewData SimulateViewData;//[Offset: 0x8a0, Size: 0x4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0x8a4, Size: 0x4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0x8a8, Size: 0x4]
	delegate OnVehicleHealthStateChanged;//[Offset: 0x8ac, Size: 0xc]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 0x1]
	float MinRideAngleDgree;//[Offset: 0x8bc, Size: 0x4]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 0x1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 0x1]
	float VehicleRadiusImulseScale;//[Offset: 0x8cc, Size: 0x4]
	float VehicleAdditionalBlowUp;//[Offset: 0x8d0, Size: 0x4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 0x1]
	float StuckMinImpulse;//[Offset: 0x8f4, Size: 0x4]
	float ContinuousStuckInterval;//[Offset: 0x8f8, Size: 0x4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0x8fc, Size: 0x4]
	float StuckResovingTime;//[Offset: 0x900, Size: 0x4]
	float ContinuousStuckTimer;//[Offset: 0x908, Size: 0x4]
	float StuckResovingTimer;//[Offset: 0x90c, Size: 0x4]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 0x1]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 0x1]
	float RespawnWaitingTime;//[Offset: 0x964, Size: 0x4]
	float RespawnTickInterval;//[Offset: 0x968, Size: 0x4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c, Size: 0x1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f4, Size: 0x1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 0x1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xa04, Size: 0xc]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xa10, Size: 0xc]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xa1c, Size: 0xc]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 0x1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 0x1]
	Vector SeekLockOffset;//[Offset: 0xa7c, Size: 0xc]
	FName SeekLockSocket;//[Offset: 0xa88, Size: 0x8]
	float ProduceSoundInterval;//[Offset: 0xa90, Size: 0x4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xa98, Size: 0xc]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xaa4, Size: 0x4]
	delegate OnEnterVehicle;//[Offset: 0xaa8, Size: 0xc]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xabc, Size: 0x4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xac0, Size: 0x4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xac8, Size: 0x28]
	SkeletalMesh* TPPMesh;//[Offset: 0xaf0, Size: 0x4]
	float OverlapCameraShakeInterval;//[Offset: 0xb8c, Size: 0x4]
	float OverlapDamageRate;//[Offset: 0xb94, Size: 0x4]
	float OverlapImpulseRate;//[Offset: 0xb98, Size: 0x4]
	float OverlapImpulseRateZ;//[Offset: 0xb9c, Size: 0x4]
	float MaxOverlapImpulse;//[Offset: 0xba0, Size: 0x4]
	float MinOverlapSpeed;//[Offset: 0xba4, Size: 0x4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xba8, Size: 0x4]
	float OverlapVehicleDamageRate;//[Offset: 0xbb0, Size: 0x4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xbb4, Size: 0x4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xbbc, Size: 0x10]
	float EngineSoundCheckInterval;//[Offset: 0xbcc, Size: 0x4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xbd4, Size: 0x4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xbd8, Size: 0x10]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe9, Size: 0x1]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xbec, Size: 0x4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xbf0, Size: 0x4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xbf4, Size: 0xc]
	bool bEnterSocketChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 0x1]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xc04, Size: 0xc]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xc10, Size: 0x4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xc14, Size: 0x4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 0x1]
	int nAvatarID;//[Offset: 0xc1c, Size: 0x4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 0x1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28, Size: 0x1]
	float WeakTickDoSomethingDuration;//[Offset: 0xc2c, Size: 0x4]
	float VehicleGoStraight;//[Offset: 0xc40, Size: 0x4]
	float MaxLinearVelocity;//[Offset: 0xc44, Size: 0x4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 0x1]
	int TeamID;//[Offset: 0xc4c, Size: 0x4]
	int CampID;//[Offset: 0xc50, Size: 0x4]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xc54, Size: 0x4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xc60, Size: 0x18]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xc78, Size: 0x18]
	int CurrentVehicleStatesData;//[Offset: 0xc90, Size: 0x4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xca0, Size: 0xc]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xcac, Size: 0xc]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8, Size: 0x1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xcc0, Size: 0x8]
	float TombBoxTraceLength;//[Offset: 0xcc8, Size: 0x4]
	float PlayerOutAngleCosin;//[Offset: 0xccc, Size: 0x4]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd0, Size: 0x1]
	float SleepVehicleTolerance;//[Offset: 0xcd4, Size: 0x4]
	float SleepVehicleTickTime;//[Offset: 0xcd8, Size: 0x4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 0x1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce1, Size: 0x1]
	Vector AttachedRelLoc;//[Offset: 0xce4, Size: 0xc]
	Actor* AttachedActor;//[Offset: 0xcf0, Size: 0x4]
	void WeakTick(float DeltaTime);// 0x14e6e48
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x14e6dd0
	void StartFireSimple(byte ShootMode);// 0x14e6d58
	void StartAirDrop();// 0x14e6d44
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x14e6c98
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x14e6b8c
	void ServerSetUsingHorn(bool bUse);// 0x14e6ac4
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x14e69fc
	void ServerSetBoosting(bool bEnalbed);// 0x14e6934
	void ServerSetAirControlF(float Rate);// 0x14e6880
	void ServerSetAirControlB(float Rate);// 0x14e67cc
	void SendVehicleInAirChangedTimeToServer();// 0x14e6770
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x14e66bc
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x14e6608
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x14e65ec
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x14e64dc
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x14e6384
	void RemoveAntiStuckBox();// 0x14e6370
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x14e62f8
	void ProcessAvatarOutline();// 0x14e62dc
	void PrintStats();// 0x14e62c0
	bool PreChangeVehicleFPPAvatar();// 0x14e6298
	bool PreChangeVehicleBrokenMat();// 0x14e6270
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x14e61ac
	void PostLoadFPPMesh();// 0x14e6190
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x14e6118
	void OnUpdateEffects();// 0x1c01fa0
	void OnSkeletalMeshSleep(PrimitiveComponent* WakingComponent, FName BoneName);// 0x14e605c
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x14e5fa0
	void OnSetTailLightValue(float LightValue);// 0x1c01fa0
	void OnRep_VehicleSyncFlag();// 0x12e82e4
	void OnRep_VehicleHealthState();// 0x14e55b4
	void OnRep_TeamID();// 0x132b318
	void OnRep_SimulateViewData();// 0x14e5f8c
	void OnRep_SimulateFreeCameraViewData();// 0x14e5f78
	void OnRep_ServerLastReplicatedServer();// 0x14e5f64
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x14e5f50
	void OnRep_IsForbidNightVehicle();// 0x14e5f3c
	void OnRep_IsEngineStarted();// 0x14e5f28
	void OnRep_IsBoosting();// 0x14e5f14
	void OnRep_IsAirdroppingVehicle();// 0x14e5f00
	void OnRep_FrozenStatic();// 0x14e5eec
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x14e5e74
	void OnRep_CampID();// 0x12e82e4
	void OnRep_AttachedRelLoc();// 0x14e5e60
	void OnRep_AttachedActor();// 0x14e5e4c
	void OnPlayerExitVehicle(bool IsDriver);// 0x1c01fa0
	void OnPlayerEnterVehicle(bool isSuccess, enum SeatType);// 0x1c01fa0
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x14e5ce0
	void OnEngineStop();// 0x1c01fa0
	void OnEngineStart();// 0x1c01fa0
	void OnBoostingChanged();// 0x1c01fa0
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x14e5be0
	void LoadFPPVehicleModel();// 0x14e5bcc
	bool IsUsingFPPModel();// 0x14e5ba4
	bool IsUCAV();// 0x14e5b7c
	bool IsUAV();// 0x14e5b48
	bool IsSpawnedInReady();// 0x14e5b2c
	bool IsNotInWater();// 0x14e5afc
	bool IsMotorbike();// 0x14e5ad4
	bool IsInMidAir();// 0x14e5aa4
	bool IsInBuffSpeedState();// 0x14e5a88
	bool IsHelicopter();// 0x14e5a60
	bool IsEntirelyUnderWater();// 0x14e5a38
	bool IsElectronic_Failure();// 0x14e5a10
	bool IsArmedVehicle();// 0x14e59e8
	bool IsAmphibiousVehicle();// 0x14e59c0
	bool IsAlive();// 0x14e5990
	bool IsAirVehicle();// 0x14e5960
	void InitVehicle(int FuelPercent, bool bEngineOn);// 0x14e5894
	SkeletalMeshComponent* InitSkeletalMesh(FName SubobjectName);// 0x14e5814
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x14e5750
	bool HasSkillID(int SkillID);// 0x14e56d0
	bool HasBuffID(int BuffID);// 0x14e5648
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x14e55c8
	void HandleOnVehicleAvatarDataCopied();// 0x14e55b4
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x14e54ac
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x14e5314
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x14e520c
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x14e5050
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x14e4fd0
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x14e4f50
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x14e4ed8
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x14e4ea8
	VehicleShootWeapon* GetVehicleWeapon(int SeatID, int WeaponListID);// 0x14e4de4
	int GetVehicleSkinItemID();// 0x14e4dbc
	VehicleAvatarComponent* GetVehicleAvatar();// 0x14e4d94
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x14e4d6c
	int GetTeamId();// 0x14e4d44
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x13abfc8
	Vector GetRotationInputDir();// 0x14422cc
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x14e4d14
	BattleItemHandleBase* GetItemHandle();// 0x14e4cf8
	Vector GetGunOwnerHeadLocation();// 0x14e4ca8
	float GetForwardSpeed();// 0x14e4c78
	STExtraPlayerCharacter* GetFirstPassenger();// 0x14e4c50
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x14e4c34
	STExtraPlayerCharacter* GetDriver();// 0x14e4c0c
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x14e4b40
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x14e49b4
	int GetCampId();// 0x14e498c
	int GetAvatarID();// 0x14e4970
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x14e48a4
	void ExitFPPVehicle();// 0x14e4890
	void EnterFPPVehicle();// 0x14e487c
	void EnableWeakTick(bool Enabled);// 0x14e47f4
	void EnableAvatarOutline(enum OutlineType);// 0x14e477c
	void DestroyAndRespawnSelf();// 0x14e4768
	void DeactiveEffect(FName EffectName);// 0x14e46f0
	void CreateAntiStuckBox();// 0x14e46dc
	void ClientPlayVehicleCameraShake();// 0x14e4680
	void ClearInputs();// 0x14e466c
	void ClearBuff();// 0x14e4650
	bool CheckHaveSpecialAttachActor();// 0x14df3f0
	void CheckEnableAvatarOutline();// 0x1c01fa0
	void CheckAvatarModifyEnterSocket(STExtraBaseCharacter* InCharacter);// 0x14e45d8
	bool ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x14e4550
	bool CanVehicleJump();// 0x14e4528
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x14e44a0
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x14e43d8
	void BroadcastClientVehicleExplosionEffect();// 0x14e43bc
	void BPPostLoadFPPMesh();// 0x1c01fa0
	void BPPlayOverlapDamageCameraShake();// 0x1c01fa0
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x14e433c
	void AutoLoadEffect();// 0x14e4328
	bool ApplyAnimation();// 0x14e4300
	void AfterBeginPlay();// 0x1c01fa0
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x14e41f0
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x14e4098
	void ActiveEffectAsync(FName EffectName);// 0x14e4020
	void ActiveEffect(FName EffectName);// 0x14e3fa8

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 0x4]
	int TypeSpecificID;//[Offset: 0x4, Size: 0x4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	uint64 InstanceID;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 0x28]
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	Vector Scale;//[Offset: 0x40, Size: 0xc]
	FName AttachSocketName;//[Offset: 0x50, Size: 0x8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.ActorComponent.Object
	STExtraVehicleSeat[] Seats;//[Offset: 0xbc, Size: 0xc]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0xc8, Size: 0xc]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0xd4, Size: 0xc]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0xe0, Size: 0xc]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0xec, Size: 0xc]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0xf8, Size: 0xc]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x104, Size: 0xc]
	float LeaveVehicleVelocityScale;//[Offset: 0x110, Size: 0x4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]
	byte[] SeatGUITypes;//[Offset: 0x120, Size: 0xc]
	delegate OnSeatAttached;//[Offset: 0x12c, Size: 0xc]
	delegate OnSeatDetached;//[Offset: 0x138, Size: 0xc]
	delegate OnSeatChanged;//[Offset: 0x144, Size: 0xc]
	delegate OnUpdateSeatGUI;//[Offset: 0x150, Size: 0xc]
	FString LatestDriverPlayerName;//[Offset: 0x15c, Size: 0xc]
	delegate OnDriverChange;//[Offset: 0x168, Size: 0xc]
	FString LatestDriverPlayerUID;//[Offset: 0x174, Size: 0xc]
	int MaxInUseSeatGUIIndex;//[Offset: 0x180, Size: 0x4]
	STExtraPlayerController* RemoteController;//[Offset: 0x188, Size: 0x4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x190, Size: 0x4]
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x15363ac
	void OnRep_VehicleWeapons();// 0x1536398
	void OnRep_Occupiers();// 0x1536384
	void OnRep_Attachments();// 0x1536370
	bool IsSeatIndexAvailable(int SeatIndex);// 0x15362f0
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x1536270
	bool IsSeatAvailable(enum SeatType);// 0x15361f0
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x1535fe0
	STExtraPlayerCharacter* GetFirstPassenger();// 0x1535fac
	STExtraPlayerCharacter* GetDriver();// 0x1535f84
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x1535e88
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x1535dc4
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int newIndex);// 0x1535c80

--------------------------------
Class: VehicleComponent.ActorComponent.Object

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 0x1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 0x8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 0x8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 0x8]
	byte OccupyMovementMode;//[Offset: 0x20, Size: 0x1]
	byte HoldWeaponType;//[Offset: 0x21, Size: 0x1]
	byte SeatSpecialType;//[Offset: 0x22, Size: 0x1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	int GUIDisplayIndex;//[Offset: 0x24, Size: 0x4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x28, Size: 0x4]
	Rotator CharRotVsVehiRot;//[Offset: 0x2c, Size: 0xc]
	byte SeatSideType;//[Offset: 0x38, Size: 0x1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x3c, Size: 0xc]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x50, Size: 0x8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	float Radius;//[Offset: 0x5c, Size: 0x4]
	float HalfHeight;//[Offset: 0x60, Size: 0x4]
	Transform CollisionOffset;//[Offset: 0x70, Size: 0x30]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 0x8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 0x4]
	Vector2D ViewYawLimit;//[Offset: 0xc, Size: 0x8]
	Vector2D ViewPitchLimit;//[Offset: 0x14, Size: 0x8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float MuzzleDirTor;//[Offset: 0x20, Size: 0x4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float MuzzleVehicleTore;//[Offset: 0x28, Size: 0x4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Box MuzzleRangeBox;//[Offset: 0x30, Size: 0x1c]
	float DistTorSquared;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0xae4, Size: 0x4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8, Size: 0x1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae9, Size: 0x1]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaea, Size: 0x1]
	FName VehWeaponBindSocket;//[Offset: 0xaf0, Size: 0x8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0xaf8, Size: 0x1c]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb14, Size: 0x1]
	FName OnBlockMuzzleSocket;//[Offset: 0xb18, Size: 0x8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0xb20, Size: 0x4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0xb24, Size: 0x4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0xb28, Size: 0x4]
	float VehicleWeaponReloadRate;//[Offset: 0xb2c, Size: 0x4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0xb30, Size: 0x4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 0x1]
	FName VehicleWeaponGripSocketR;//[Offset: 0xb38, Size: 0x8]
	FName VehicleWeaponGripSocketL;//[Offset: 0xb40, Size: 0x8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 0x1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49, Size: 0x1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4a, Size: 0x1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4b, Size: 0x1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4c, Size: 0x1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 0x1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5d, Size: 0x1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5e, Size: 0x1]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb61, Size: 0x1]
	FName CharacterSocket;//[Offset: 0xb68, Size: 0x8]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 0x1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb71, Size: 0x1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb72, Size: 0x1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb73, Size: 0x1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb74, Size: 0x1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb75, Size: 0x1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0xb78, Size: 0x4]
	FName GrenadePredictLineSocket;//[Offset: 0xb80, Size: 0x8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0xb88, Size: 0x4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 0x1]
	float FuelConsumptionRate;//[Offset: 0xb90, Size: 0x4]
	float StartReloadDelayTime;//[Offset: 0xba8, Size: 0x4]
	float EndReloadDelayTime;//[Offset: 0xbb8, Size: 0x4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0xbbc, Size: 0x4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 0x1]
	Actor* OwnerActor;//[Offset: 0xbc4, Size: 0x4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0xbc8, Size: 0x4]
	int BulletTypeTipMsgID;//[Offset: 0xbd0, Size: 0x4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0xbd4, Size: 0x4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0xbd8, Size: 0x4]
	void StartReloadAnim();// 0x15372e4
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x15371d0
	void OnVehicleExplode();// 0x15371b4
	void OnRep_OwnerActor();// 0x15371a0
	void NetMulticastReturnBullets();// 0x1537144
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x1536fe8
	void K2_SetSpecialMeshHide(bool isHide);// 0x1c01fa0
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x1c01fa0
	void K2_OnReturnBullets();// 0x1c01fa0
	MeshComponent* K2_GetWeaponMeshComp();// 0x1c01fa0
	void HnadleScopeInAfterReload();// 0x1536fd4
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x1536f18
	void HandleWeaponStartReload();// 0x1536f04
	void HandleWeaponEndReload();// 0x1536ef0
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x1536e70
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x1536dec
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x1536dc4
	STExtraVehicleBase* GetOwnerVehicle();// 0x1536d9c
	Rotator GetOwnerCameraRotator();// 0x1536d54
	Transform GetCharacterSocketTransform();// 0x1536ccc
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x1536c54
	bool CheckIsAutonomousOrObTarget();// 0x1536c2c
	void AfterReloadEnd();// 0x1536c18

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	float voiceCheckCD;//[Offset: 0x68c, Size: 0x4]
	float voiceCheckShowCD;//[Offset: 0x690, Size: 0x4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 0x1]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x6b0, Size: 0x3c]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 0x1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ed, Size: 0x1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x6f0, Size: 0xc]
	delegate OnCurBulletChange;//[Offset: 0x6fc, Size: 0xc]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x708, Size: 0xc]
	delegate OnStartFireDelegate;//[Offset: 0x714, Size: 0xc]
	delegate OnStopFireDelegate;//[Offset: 0x720, Size: 0xc]
	delegate OnWeaponShootDelegate;//[Offset: 0x72c, Size: 0xc]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x738, Size: 0xc]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0x744, Size: 0xc]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0x750, Size: 0xc]
	delegate OnWeaponEquipDelegate;//[Offset: 0x75c, Size: 0xc]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0x768, Size: 0xc]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0x774, Size: 0xc]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0x780, Size: 0xc]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0x78c, Size: 0xc]
	delegate OnBulletNumChangeDelegate;//[Offset: 0x798, Size: 0xc]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x7b0, Size: 0xc]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0x7bc, Size: 0xc]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0x7c8, Size: 0x4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0x7cc, Size: 0x4]
	delegate OnScopeIn;//[Offset: 0x7d0, Size: 0xc]
	delegate OnScopeOut;//[Offset: 0x7dc, Size: 0xc]
	delegate OnScopeInContinue;//[Offset: 0x7e8, Size: 0xc]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0x7f4, Size: 0x4]
	int CurBulletNumInClip;//[Offset: 0x7f8, Size: 0x4]
	int CurMaxBulletNumInOneClip;//[Offset: 0x7fc, Size: 0x4]
	int CurBulletNumInBarrel;//[Offset: 0x800, Size: 0x4]
	byte ShootMode;//[Offset: 0x804, Size: 0x1]
	byte CurShootType;//[Offset: 0x805, Size: 0x1]
	int CurShootTotalType;//[Offset: 0x808, Size: 0x4]
	float VoiceCheckDis;//[Offset: 0x80c, Size: 0x4]
	float SilenceVoiceCheckDis;//[Offset: 0x810, Size: 0x4]
	float nowVoiceCheckDis;//[Offset: 0x814, Size: 0x4]
	Vector ShootTargetLoc;//[Offset: 0x818, Size: 0xc]
	byte TraceChannel;//[Offset: 0x828, Size: 0x1]
	Vector LastImpactEffectLocation;//[Offset: 0x82c, Size: 0xc]
	float LastImpactEffectTime;//[Offset: 0x838, Size: 0x4]
	int CurBurstShootIndex;//[Offset: 0x840, Size: 0x4]
	Transform BoltActionTransform;//[Offset: 0x850, Size: 0x30]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	int ClientShootTimes;//[Offset: 0x884, Size: 0x4]
	AkAudioEvent* BulletFlySound;//[Offset: 0x888, Size: 0x4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0x88c, Size: 0x4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0x890, Size: 0x4]
	AkAudioEvent* MagazineINSound;//[Offset: 0x894, Size: 0x4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0x898, Size: 0x4]
	AkAudioEvent* PullBoltSound;//[Offset: 0x89c, Size: 0x4]
	Vector BulletDecalScale;//[Offset: 0x8a0, Size: 0xc]
	int CurBulletNumInClipOnSimulatedClients;//[Offset: 0x8ac, Size: 0x4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0x8b4, Size: 0x4]
	float AIShootLoudness;//[Offset: 0x8b8, Size: 0x4]
	float AIShootStartAttenuationDis;//[Offset: 0x8bc, Size: 0x4]
	float AIShootMaxDis;//[Offset: 0x8c0, Size: 0x4]
	float AISilenceShootLoudness;//[Offset: 0x8c4, Size: 0x4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0x8c8, Size: 0x4]
	float AISilenceShootMaxDis;//[Offset: 0x8cc, Size: 0x4]
	byte CurShootWeaponState;//[Offset: 0x8d0, Size: 0x1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0x8e0, Size: 0x4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0x8e4, Size: 0x4]
	int md_MaxBulletArraySize;//[Offset: 0x8e8, Size: 0x4]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec, Size: 0x1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ed, Size: 0x1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ee, Size: 0x1]
	Vector OffsetFPPLocation;//[Offset: 0x8f0, Size: 0xc]
	Rotator OffsetFPPRotation;//[Offset: 0x8fc, Size: 0xc]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x908, Size: 0xc]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x914, Size: 0xc]
	Vector OffsetFPPProneLocation;//[Offset: 0x920, Size: 0xc]
	Rotator OffsetFPPProneRotation;//[Offset: 0x92c, Size: 0xc]
	Rotator OffsetFPPScopeRotation;//[Offset: 0x938, Size: 0xc]
	Vector OffsetAngledFPPLocation;//[Offset: 0x944, Size: 0xc]
	Rotator OffsetAngledFPPRotation;//[Offset: 0x950, Size: 0xc]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0x95c, Size: 0xc]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0x968, Size: 0xc]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0x974, Size: 0xc]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0x980, Size: 0xc]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0x98c, Size: 0xc]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998, Size: 0x1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0x9a0, Size: 0xc]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0x9ac, Size: 0x4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0x9b0, Size: 0xc]
	int[] AttachedAttachmentID;//[Offset: 0x9bc, Size: 0xc]
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x9d0, Size: 0xc]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0x9dc, Size: 0xc]
	bool UseNewSimulateHitInfoData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 0x1]
	bool bNeedForceSyncSimulatedClientsBulletsNumAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 0x1]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 0x1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2, Size: 0x1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0, Size: 0x1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 0x1]
	void UpdateComponentTick();// 0x14d4e14
	bool StopFireFilter();// 0x14d4de4
	void StopFire(byte ToState);// 0x14d4d64
	int StartReload();// 0x14d4d34
	bool StartFireFilter();// 0x14d4d04
	void StartFire();// 0x14d4ce8
	void StartDoPreBarrel(float HandledTime);// 0x14d4c68
	void StartDoBarrel();// 0x14d4c4c
	void ShowDefaultScope(bool bShow);// 0x14d4bcc
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x14d4b08
	void ShootIDIsNotValid();// 0x14d4aec
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable);// 0x14d49e4
	void SetCurShootType(byte shootType);// 0x14d496c
	void SetCurrentBulletNumInClipOnServer(int count);// 0x14d48f4
	void SetCurrentBulletNumInClipOnClient(int count);// 0x14d487c
	void SetCurReloadMethod(byte method);// 0x14d4804
	void SetBaseImpactDamageEntity(float Damage);// 0x1396184
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x14d46f8
	bool ScopeOut();// 0x14d46c8
	void ScopeInContinue();// 0x14d46b4
	bool ScopeIn();// 0x14d4684
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x14d4604
	void RPC_ServerSetMaxBulletNum();// 0x14d45a8
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x14d44f4
	void RPC_ClientSetCurShootType(byte shootType);// 0x14d4440
	void RPC_ClientSetCurReloadMethod(byte method);// 0x14d438c
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x14d430c
	void RPC_Client_SetBulletNumInClip(int count);// 0x14d4258
	void RotateCrossHair(Rotator rot);// 0x14d41e8
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x14d4168
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x1c01fa0
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x1c01fa0
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x1c01fa0
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x1c01fa0
	void OnWeaponShootDelegate__DelegateSignature();// 0x1c01fa0
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x1c01fa0
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x1c01fa0
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x1c01fa0
	void OnWeaponEquipDelegate__DelegateSignature();// 0x1c01fa0
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x1c01fa0
	void OnStopFireDelegate__DelegateSignature();// 0x1c01fa0
	void OnStartFireDelegate__DelegateSignature();// 0x1c01fa0
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x1c01fa0
	void OnScopeInContinue__DelegateSignature();// 0x1c01fa0
	void OnRep_SimulateHitDataArray();// 0x14d4154
	void OnRep_HitDataArray();// 0x14d4140
	void OnRep_CurMaxBulletNumChange();// 0x14d412c
	void OnRep_CurBulletNumInClipOnSimulatedClients();// 0x14d4118
	void OnMaxBulletChange__DelegateSignature();// 0x1c01fa0
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x1c01fa0
	void OnCurBulletChange__DelegateSignature();// 0x1c01fa0
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x1c01fa0
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x1c01fa0
	void NotifyServerNoneShootAction();// 0x14d40bc
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x14d4044
	void NotifyClientNoneShootAction();// 0x14d3fe8
	void LocalSetBulletNumInClip(int count);// 0x14d3f70
	bool IsWeaponAttachmentFullEquiped();// 0x14d3f48
	bool IsVehicleWeapon();// 0x14d3f20
	bool IsSupportAutoAim();// 0x14d3ef8
	bool IsInPreFire();// 0x14d3ed0
	bool IsEnableReloadADS();// 0x14d3eb4
	bool IsDriverVehicleWeapon();// 0x14d3e8c
	void HandleWeaponScopeEquiped();// 0x14d3e78
	byte GetWeaponReloadType();// 0x14d3e50
	int GetWeaponIDFromEntity();// 0x14d3e28
	int GetWeaponID();// 0x14d3e00
	float GetWeaponBodyLength();// 0x14d3dd8
	ParticleSystem* GetVisualBulletTrackFX();// 0x14d3db0
	bool GetVisualBulletTrackEnabled();// 0x14d3d88
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x14d3d48
	FName GetVerifyScopeSocketNameFromEntity();// 0x14d3d08
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x14d3ce0
	float GetTraceDistanceFromEntity();// 0x14d3cb8
	FName GetSilencerSocketNameFromEntity();// 0x14d3c78
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x14d3c50
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x14d3c28
	byte GetShootTypeFromEntity();// 0x14d3c00
	float GetShootIntervalFromEntity();// 0x14d3bd8
	FName GetShellDropSocketNameFromEntity();// 0x14d3b98
	int GetScopeID(bool bIsAngledOpticalSight);// 0x14d3b10
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex);// 0x14d3a4c
	bool GetReloadWithNoCostFromEntity();// 0x14d3a24
	float GetReloadTimeMagOutFromEntity();// 0x14d39fc
	float GetReloadTimeFromEntity();// 0x14d39d4
	FName GetReloadTIDName(byte method);// 0x14d3944
	float GetReloadTacticalTimeFromEntity();// 0x14d391c
	int GetReloadSpecificBulletNumFromEntity();// 0x14d38f4
	float GetReloadDurationStartFromEntity();// 0x14d38cc
	float GetReloadDurationLoopFromEntity();// 0x14d38a4
	Transform GetRelativeMuzzleTransform();// 0x14d3814
	float GetReferenceDistance();// 0x14d37ec
	float GetRangeModifier();// 0x14d37c4
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x14d3704
	float GetPreFireTimeFromEntity();// 0x14d36dc
	float GetPostReloadTimeFromEntity();// 0x14d36b4
	float GetPostFireTimeFromEntity();// 0x14d368c
	Transform GetMuzzleTransform();// 0x14d35fc
	FName GetMuzzleSocketNameFromEntity();// 0x14d35b4
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x14d358c
	float GetMaxValidHitTimeFromEntity();// 0x14d3564
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x14d353c
	int GetMaxBulletNumInOneClipFromEntity();// 0x14d3514
	int GetMaxBulletNumInBarrelFromEntity();// 0x14d34ec
	bool GetIsNeedOffsetVelocityFromEntity();// 0x14d34c4
	bool GetIsEnableScopeInFromEntity();// 0x14d349c
	float GetImpactEffectSkipDistanceFromEntity();// 0x14d3474
	float GetIgnoreRangeAttenuatDis();// 0x14d344c
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim);// 0x14d33b8
	float GetGameDeviationFactor();// 0x14d3390
	FName GetFiringSuppressorSocketNameFromEntity();// 0x14d3350
	float GetFireSensitiveYawRate();// 0x14d3328
	float GetFireSensitivePitchRate();// 0x14d3300
	<int,bool> GetEquipAttachSlotMap();// 0x14d3130
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x14d30a4
	byte GetCurSightType();// 0x14d307c
	float GetCurReloadTime();// 0x14d3054
	byte GetCurReloadMethod();// 0x14d302c
	float GetCrossHairInitSize();// 0x14d3004
	float GetCrossHairBurstSpeed();// 0x14d2fdc
	float GetCrossHairBurstIncreaseSpeed();// 0x14d2fb4
	byte GetControllerRole();// 0x137f174
	bool GetClipHasInfiniteBulletsFromEntity();// 0x14d2f8c
	MeshComponent* GetChildMeshComp(FName compTag);// 0x14d2f0c
	bool GetCanRecordHitDetailFromEntity();// 0x14d2ee4
	float GetBurstShootIntervalFromEntity();// 0x14d2ebc
	float GetBurstShootCDFromEntity();// 0x14d2e94
	int GetBurstShootBulletsNumFromEntity();// 0x14d2e6c
	ItemDefineID GetBulletTypeFromEntity();// 0x14d2e20
	float GetBulletRangeEntity();// 0x14d2df8
	float GetBulletNumSingleShotFromEntity();// 0x14d2dd0
	float GetBulletFireSpeedFromEntity();// 0x14d2da8
	float GetBaseImpactDamageEntity();// 0x14d2d80
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x14d2c68
	bool GetAutoReloadFromEntity();// 0x14d2c40
	bool GetADSManualStop();// 0x14d2c18
	float GetAccessoriesVRecoilFactor();// 0x14d2bf0
	float GetAccessoriesRecoveryFactor();// 0x14d2bc8
	float GetAccessoriesHRecoilFactor();// 0x14d2ba0
	float GetAccessoriesDeviationFactor();// 0x14d2b78
	void ForceSyncSimulatedClientsBulletsNumAfterReload(int InCurBulletNum);// 0x14d2ac4
	void ForceSyncAllClientsBulletsNumOnServer();// 0x14d2ab0
	void FixBulletNumWithValideData();// 0x14d2a9c
	void EnableInfiniteBullets(bool bEnable);// 0x14d2a1c
	void ClearWeaponAttrModifier();// 0x14d2a08
	void CheckReloadAttr();// 0x14d29f4
	bool CheckNeedClientSetMaxBulletNum();// 0x14d29cc
	void BP_OnActiveLocalShellDropFX();// 0x1c01fa0
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x14d2948

--------------------------------
Class: STExtraWeapon.Actor.Object
	int iRegionWeapon;//[Offset: 0x2d0, Size: 0x4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x2d4, Size: 0x4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x2dc, Size: 0x10]
	Transform FPPWeaponOffset;//[Offset: 0x2f0, Size: 0x30]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x320, Size: 0x30]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x350, Size: 0x30]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x380, Size: 0x30]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x3b0, Size: 0x30]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x3e0, Size: 0x30]
	int CrossHairType;//[Offset: 0x410, Size: 0x4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x414, Size: 0x4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x418, Size: 0x4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x420, Size: 0x8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x428, Size: 0x4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x42c, Size: 0xc]
	delegate FireOneShotEffectDelegate;//[Offset: 0x438, Size: 0xc]
	delegate OnShootWeaponChangeState;//[Offset: 0x444, Size: 0xc]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x450, Size: 0xc]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x45c, Size: 0xc]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x468, Size: 0x4]
	byte CurFreshWeaponState;//[Offset: 0x46c, Size: 0x1]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x470, Size: 0xc]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x47c, Size: 0xc]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x488, Size: 0xc]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x494, Size: 0xc]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x4a0, Size: 0x1]
	FName WeaponAttachSocketName;//[Offset: 0x4a8, Size: 0x8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 0x1]
	float MaxReconnectTime;//[Offset: 0x4b4, Size: 0x4]
	float StartReconnectTime;//[Offset: 0x4b8, Size: 0x4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x4c0, Size: 0x60]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x528, Size: 0xc]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x538, Size: 0x50]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x58c, Size: 0x4]
	byte CurWeaponState;//[Offset: 0x590, Size: 0x1]
	Actor* SimulatedOwnerActor;//[Offset: 0x594, Size: 0x4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x598, Size: 0x4]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x5a0, Size: 0x3c]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x5e8, Size: 0x4]
	MeshSynData[] synData;//[Offset: 0x5ec, Size: 0xc]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	float MaxWaitMeshInitTime;//[Offset: 0x5fc, Size: 0x4]
	float WaitMeshInitTime;//[Offset: 0x600, Size: 0x4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 0x1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x608, Size: 0xc]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x620, Size: 0x4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1]
	delegate ForceHideWeaponWidget;//[Offset: 0x628, Size: 0xc]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 0x1]
	byte WeaponUIType;//[Offset: 0x635, Size: 0x1]
	Transform DefaultRelativeTransform;//[Offset: 0x640, Size: 0x30]
	Rotator RotForSimulate;//[Offset: 0x670, Size: 0xc]
	int FuncFlag;//[Offset: 0x67c, Size: 0x4]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x1c01fa0
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x1c01fa0
	void UpdateWeaponAvatar(float DeltaTime);// 0x1c01fa0
	void SpecialResetForWeaponCrosshair();// 0x1c01fa0
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x14ec41c
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x14ec368
	void PlayLocalShellDropFX();// 0x1c01fa0
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x1c01fa0
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x1c01fa0
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x1c01fa0
	void OnRep_WeaponReconnectReplicateData();// 0x14ec354
	void OnRep_WeaponAttachSocketName();// 0x14ec340
	void OnRep_SimulatedOwnerPawn();// 0x14ec32c
	void OnRep_OwnerClientCreateWeaponData();// 0x14ec318
	void OnRep_AvatarMeshChanged();// 0x14ec304
	void OnRep_AttachmentReplication();// 0x131b1dc
	void OnReleaseTrigger();// 0x13414a4
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x1c01fa0
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x1c01fa0
	void OnPushTrigger();// 0x14ec2e8
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x1c01fa0
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x1c01fa0
	void NewInitWeapon();// 0x14ec2d4
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x14ec254
	bool IsLocalOrSpectorPlayer();// 0x14ec22c
	void InitWeapon();// 0x14ec218
	bool HasComponentSlot(byte Slot);// 0x14ec198
	void HandleReconnectNew(Actor* WeaponOwner);// 0x14ec120
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x14ec0f8
	byte GetWeaponStateType();// 0x14ec0d0
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x14ec0a8
	enum GetWeaponOwnerObserverType();// 0x14ec080
	FString GetWeaponName();// 0x14ebfc0
	MeshComponent* GetWeaponMeshComponent();// 0x14ebf90
	WeaponEntity* GetWeaponEntityComponent();// 0x14ebf68
	FName GetWeaponAttachSocket();// 0x14ebf20
	WeaponSpecificHandler* GetSpecificHandler();// 0x14ebef8
	FString GetOwnerPlayerName();// 0x14ebe38
	PlayerController* GetOwnerPlayerController();// 0x14ebe08
	Pawn* GetOwnerPawn();// 0x14ebde0
	FString GetOwnerName();// 0x14ebd20
	Controller* GetOwnerController();// 0x12de3b8
	Actor* GetOwnerActor();// 0x14ebcf0
	ItemDefineID GetItemDefineID();// 0x14ebca4
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x14ebc7c
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x14ebba8
	LinearColor GetColorByTeamID(int TeamID);// 0x1c01fa0
	ItemHandleBase* GetBackpackItemHandle();// 0x14ebb80
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x1c01fa0
	void DelayHandleAvatarMeshChanged();// 0x14ebb6c
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x14ebaf4
	void ChangeSequenceState(byte StateType);// 0x14eba74
	void CallForceHideWeaponWidgetDel();// 0x14eba60

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0, Size: 0x4]
	int[] SkillIDList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 0x4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 0x4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 0x4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 0x4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 0x4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 0x4]
	float MaxGunRoot;//[Offset: 0x20, Size: 0x4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 0x4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 0x4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 0x4]
	float AimFlyCD;//[Offset: 0x30, Size: 0x4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: WeaponAvatarComponent.AvatarComponent.AvatarComponentBase.ActorComponent.Object
	bool bAsyncLoadMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	delegate OnScopeEquipDelegate;//[Offset: 0x3d0, Size: 0xc]
	delegate OnScopeUnequipDelegate;//[Offset: 0x3dc, Size: 0xc]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x3e8, Size: 0xc]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x3f4, Size: 0xc]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x400, Size: 0xc]
	BackpackWeaponHandle* AsyncCacheWeaponHandle;//[Offset: 0x40c, Size: 0x4]
	delegate OnWeaponPartsEquipped;//[Offset: 0x410, Size: 0xc]
	BattleItemHandleBase* handleRecord;//[Offset: 0x41c, Size: 0x4]
	BattleItemHandleBase* MasterWeaponHandle;//[Offset: 0x420, Size: 0x4]
	SoftObjectPath[] AsyncLoadMeshAssetRef;//[Offset: 0x424, Size: 0xc]
	int AsyncLoadMeshAsyncLoadID;//[Offset: 0x430, Size: 0x4]
	TimerHandle AsyncLoadMeshTimerHandle;//[Offset: 0x438, Size: 0x8]
	<MiniItem,WeaponAttachmentConfig> attachmentRef;//[Offset: 0x440, Size: 0x3c]
	MeshSynData[] defaultSynData;//[Offset: 0x488, Size: 0xc]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x494, Size: 0x3c]
	<int,ParticleEffectGroup> ParticleComponents;//[Offset: 0x4d0, Size: 0x3c]
	bool ShouldDisplayByQuality(int SlotID);// 0x154952c
	void ResetAttachmentParent();// 0x1549518
	void RemoveParticleEffect(int SlotID);// 0x15494a0
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* Handle);// 0x1549420
	bool PutOnMasterComponentByItemHandle(BackpackWeaponHandle* weaponHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, bool bAutonomous);// 0x15492c0
	bool PutOnEquipmentByResID(int resID);// 0x12fbcec
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, bool bAutonomous);// 0x12fbb8c
	bool PutOffEquimentByResID(int resID);// 0x12fbb04
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData SyncData);// 0x15491e4
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool isEquipped);// 0x1c01fa0
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x1c01fa0
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x1c01fa0
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x1c01fa0
	void OnScopeUnequipDelegate__DelegateSignature();// 0x1c01fa0
	void OnScopeEquipDelegate__DelegateSignature();// 0x1c01fa0
	void OnMeshLoadedFunc();// 0x15491d0
	void OnMeshLoaded(SoftObjectPath AssetList, BattleItemHandleBase* itemHandles, bool isReplaced, bool bAutonomous);// 0x1548f7c
	void OnItemHandleLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x1548eb0
	void OnItemHandleListLoaded(BattleItemHandleBase*[] ItemHandleList);// 0x1548d58
	void OnDefaultItemLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x1548c8c
	void OnAttachItemLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x1548bc0
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x12fb82c
	void OnAsyncInitDefaultAvatar_Default();// 0x1548bac
	void OnAsyncInitDefaultAvatar(bool bAutonomous);// 0x1548b2c
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x1548a2c
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad, bool bAutonomous);// 0x12fb4fc
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x12fb3d0
	void LoadDefaultAttachmentsAsync();// 0x1548a18
	bool IsTeammate();// 0x12fb3a0
	bool IsAutonomousAvatar();// 0x15489e8
	void InitMasterComponent(int AGender);// 0x13a9b00
	void InitialAvatarParam(int AGender);// 0x1548968
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x12fb14c
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x12fb0cc
	void InitDefaultAttachment(BackpackWeaponHandle* weaponHandle, bool bAutonomous);// 0x15488a4
	int GetWeaponParentID(int Slot, out const ItemDefineID InItemDefineID);// 0x15487c8
	Controller* GetWeaponController();// 0x15487a0
	StaticMesh* GetStaticMesh(out const WeaponMeshCfg meshPack, bool bAutonomous);// 0x1548594
	FName GetSocketName(int SlotID, int subSlotID);// 0x15484c0
	SkeletalMesh* GetSkeletalMesh(out const WeaponMeshCfg meshPack, bool bAutonomous);// 0x15482b4
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef, out WeaponMeshCfg OutMeshCfg, bool bAutonomous);// 0x1547fc0
	bool GetMeshPack(BattleItemHandleBase* Handle, out WeaponMeshCfg meshCfg);// 0x1547dbc
	MeshComponent* GetMeshComponentBySlotID(int SlotID);// 0x1547d3c
	MaterialInstance* GetMaterial(out WeaponMeshCfg meshPack);// 0x1547b7c
	BackpackWeaponAttachHandle* GetEquippedHandle(int SlotID);// 0x1547afc
	MeshComponent* GetAttachmentSocketTransform(int SlotID);// 0x1547a7c
	AnimationAsset* GetAttachmentAnim(enum SlotID, int AnimIdx);// 0x15479b8
	void ClearMeshBySlot(int Slot, bool putDefault, bool bAutonomous);// 0x12fa910
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x12fa890
	bool CheckSlotIsEquipped(int SlotID);// 0x1547938
	bool CheckIsAlreadyEquipped(ItemDefineID DefineID);// 0x15478a8
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, MaterialInstance* Mat, BattleItemHandleBase* Handle, bool bAutonomous);// 0x12fa6e8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, MaterialInstance* Mat, BattleItemHandleBase* Handle, bool bAutonomous);// 0x12fa540
	void ApplyParticleEffect(int Slot, BackpackWeaponAttachHandle* Handle, bool bAutonomous);// 0x15477a0
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp, bool bAutonomous);// 0x12fa2d8
	void ApplyAttachment(BackpackWeaponAttachHandle* attachHandle, bool bAutonomous);// 0x15476dc
	void ApplyAnimation(int Slot, BackpackWeaponHandle* Handle);// 0x1547620

--------------------------------
Class: AvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,MeshData> avatarMeshList;//[Offset: 0xfc, Size: 0x3c]
	<int,MeshComponent*> meshComponentList;//[Offset: 0x138, Size: 0x3c]
	<int,FName> slotToSocket;//[Offset: 0x174, Size: 0x3c]
	<enum,MeshData> DefaultAvataConfig;//[Offset: 0x1b0, Size: 0x3c]
	<int,BattleItemHandleBase*> loadedItemList;//[Offset: 0x1ec, Size: 0x3c]
	int gender;//[Offset: 0x228, Size: 0x4]
	bool isNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	bool forceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 0x1]
	<SoftObjectPath,BattleItemHandleBase*> PendingLoadRes;//[Offset: 0x230, Size: 0x3c]
	delegate OnAvatarEquipped;//[Offset: 0x26c, Size: 0xc]
	BattleItemHandleBase*[] handleTickDispatcher;//[Offset: 0x278, Size: 0xc]
	<int,bool> OutlineEnableList;//[Offset: 0x2a8, Size: 0x3c]
	int MinLod;//[Offset: 0x2e4, Size: 0x4]
	bool bResSyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	<int,AsyncLoadMeshResReq> PendingLoadMeshRequestList;//[Offset: 0x38c, Size: 0x3c]
	int AsyncLoadReqID;//[Offset: 0x3c8, Size: 0x4]
	void ShowAttachmentByIndex(int Index, bool bIsVisible);// 0x12fbf38
	bool SetMeshVisibleByID(int Slot, bool visible, bool ignoreDefault);// 0x12fbe1c
	void ResetComponentMaster();// 0x12fbe08
	void ResetAllAvataSlot();// 0x12fbdf4
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x12fbd74
	bool PutOnEquipmentByResID(int resID);// 0x12fbcec
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, bool bAutonomous);// 0x12fbb8c
	bool PutOffEquimentByResID(int resID);// 0x12fbb04
	bool PutOffEquiment(int Slot);// 0x12fba84
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x12fb82c
	void OnAsyncLoadMesh(SoftObjectPath AssetRef, bool isReplaced, bool bAutonomous);// 0x12fb620
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad, bool bAutonomous);// 0x12fb4fc
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x12fb3d0
	bool IsTeammate();// 0x12fb3a0
	bool IsSlotHasEquipped(int Slot);// 0x12fb320
	bool IsNeedReplaced(BackpackAvatarHandle* doReplaceHandle);// 0x12fb298
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x12fb1cc
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x12fb14c
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x12fb0cc
	StaticMesh* GetStaticMesh(out const MeshPackage meshPack, bool bAutonomous);// 0x12fafcc
	ItemDefineID GetSlotDefinedID(int SlotID);// 0x12faf38
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage meshPack, bool bAutonomous);// 0x12fae38
	MaterialInstance* GetMaterial(out const MeshPackage meshPack);// 0x12fad84
	bool GetEquimentMeshBySlot(int Slot, out MeshData meshPack);// 0x12fac8c
	static enum GetAvatarSlotTypeFromInt(int SlotTypeValue);// 0x12fac14
	enum GetApplyMeshType(int Slot, int subSlotID, bool bForceSkeletalWithSocketType);// 0x12faafc
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x12faa2c
	void ClearMeshBySlot(int Slot, bool putDefault, bool bAutonomous);// 0x12fa910
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x12fa890
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, MaterialInstance* Mat, BattleItemHandleBase* Handle, bool bAutonomous);// 0x12fa6e8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, MaterialInstance* Mat, BattleItemHandleBase* Handle, bool bAutonomous);// 0x12fa540
	void ApplyMesh(MeshComponent* Component, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh, bool bAutonomous);// 0x12fa3e8
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp, bool bAutonomous);// 0x12fa2d8
	void ApplyConfig();// 0x12fa2c4

--------------------------------
Class: AvatarComponentBase.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0xe4, Size: 0x4]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	FName LightVectorName;//[Offset: 0xf0, Size: 0x8]
	DirectionalLight* DirectionalLight;//[Offset: 0xf8, Size: 0x4]
	bool IsLobbyAvatar();// 0x12fccd4
	bool IsLobbyActor();// 0x12fccb8
	bool IsForceClientMode();// 0x12fcc9c
	GameInstance* GetGameInstance();// 0x12fcc6c

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 0x4]
	SkeletalMesh* skMesh;//[Offset: 0x4, Size: 0x4]
	MaterialInstance* matIns;//[Offset: 0x8, Size: 0x4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc, Size: 0xc]
	enum meshType;//[Offset: 0x18, Size: 0x1]
	int[] hiddenSlots;//[Offset: 0x1c, Size: 0xc]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28, Size: 0xc]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34, Size: 0xc]
	ItemDefineID definedID;//[Offset: 0x40, Size: 0x18]
	enum subSlot;//[Offset: 0x58, Size: 0x1]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: BackpackWeaponHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0xa8, Size: 0x4]
	WeaponMeshCfg MeshPackage;//[Offset: 0xb0, Size: 0x140]
	class AnimInstance* animBP;//[Offset: 0x1f0, Size: 0x4]
	class AnimInstance* animBPClass;//[Offset: 0x1f8, Size: 0x28]
	<ItemDefineID,ItemDefineID> AttachmentAvatarList;//[Offset: 0x220, Size: 0x3c]
	ItemDefineID[] DefaultAvatarList;//[Offset: 0x25c, Size: 0xc]
	ItemDefineID ParentID;//[Offset: 0x268, Size: 0x18]
	ItemDefineID[] ParentIDList;//[Offset: 0x280, Size: 0xc]
	class STExtraWeapon* lobbyWeapon;//[Offset: 0x28c, Size: 0x4]
	enum OverrideSocket;//[Offset: 0x290, Size: 0x1]
	BattleItemAdditionalData[] WeaponAttachmentAdditionalDataList;//[Offset: 0x294, Size: 0xc]
	STExtraWeapon* CachedTargetWeapon;//[Offset: 0x2a0, Size: 0x4]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x2a8, Size: 0x38]
	WeaponAttachItemUnit[] CachedWeaponAttachmentListBeforeDrop;//[Offset: 0x2e0, Size: 0xc]
	WeaponKillEffectCfg KillEffect;//[Offset: 0x2ec, Size: 0x4]
	ParticleSystem* LightEffect;//[Offset: 0x2f0, Size: 0x28]
	ParticleSystem* ShootLightEffect;//[Offset: 0x318, Size: 0x28]
	<byte,AkAudioEvent*> HitSoundMap;//[Offset: 0x340, Size: 0x3c]
	AkAudioEvent* SlashSound;//[Offset: 0x380, Size: 0x28]
	bool IsInitUIWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	void SaveWeaponAttachmentListBeforeDrop();// 0x1320980
	void PreLocalHandleDisuse();// 0x132096c
	PickUpWrapperActor* LocalSpawnWrapperOnGround(class Object InWrapperClass, STExtraBaseCharacter* InOwningCharacter, ItemDefineID InDefineID);// 0x132084c
	bool LocalHandleUse(out const BattleItemUseTarget InTarget, enum InReason, WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, BattleItemHandleBase* InCharacterItemHandle, BackpackComponent* InOwningBackpackComponnent, STExtraBaseCharacter* InOwningCharacter, class STExtraWeapon InWeaponClass, bool bInResetInitBulletInBullet, out STExtraWeapon* OutTargetWeaponActor, out FName bOutSocket);// 0x1320298
	FName LocalGetAvailableInstantLogicSocketName(WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, out bool bOutNeedPutDownOldWeapon, out bool bOutAutoUse);// 0x131ff28
	void LocalAutoEquipAttachments();// 0x1c01fa0
	bool IsVirtualAvatarHandle();// 0x131fef8
	bool IsAvatarWeapon();// 0x131fed0
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x131f140
	int GetSubSlotID();// 0x131fea0
	int GetSlotID();// 0x131fe70
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x131fe04
	void GetMeshPackCfg(out WeaponMeshCfg meshCfg);// 0x131fc44
	void GetDefaultAvatarList(out ItemDefineID[] DefaultAvatarList);// 0x131fb70
	class Object GetAnimationBP();// 0x131fb40

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x88, Size: 0xc]
	float UnitWeight;//[Offset: 0x94, Size: 0x4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x13086dc
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x13082c8
	bool HandleEnable(bool bEnable);// 0x1307ea0
	bool HandleDrop(int InCount, enum Reason);// 0x1307dd4
	bool HandleDisuse(enum Reason);// 0x1307d4c
	World* GetWorldInternal();// 0x15b5a58
	BattleItemData ExtractItemData();// 0x130d1d4

--------------------------------
Class: ItemHandleBase.Object
	int count;//[Offset: 0x1c, Size: 0x4]
	int MaxCount;//[Offset: 0x20, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 0x3c]
	ItemDefineID DefineID;//[Offset: 0x68, Size: 0x18]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x15bb81c
	void RemoveAssociation(FName Name);// 0x15bb7a4
	void Init(ItemDefineID InDefineID);// 0x15bb714
	ItemDefineID GetDefineID();// 0x15bb6d0
	<FName,ItemAssociation> GetAssociationMap();// 0x15bb550
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x15bb440
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x15bb394
	ItemAssociation GetAssociation(FName Name);// 0x15bb2f4
	void AddAssociation(FName Name, ItemAssociation Association);// 0x15bb1ec

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0, Size: 0x8]
	float FloatData;//[Offset: 0x8, Size: 0x4]
	FString StringData;//[Offset: 0xc, Size: 0xc]
	int IntData;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 0x8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 0x18]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 0x18]
	FName TargetAssociationName;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 0xc]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 0x20]

--------------------------------
Class: BattleItemData.ItemData
	int count;//[Offset: 0x48, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50, Size: 0xc]
	BattleItemFeatureData FeatureData;//[Offset: 0x5c, Size: 0x18]
	ItemAssociation[] Associations;//[Offset: 0x74, Size: 0xc]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 0x18]
	FString Name;//[Offset: 0x20, Size: 0xc]
	FString Desc;//[Offset: 0x2c, Size: 0xc]
	FString Icon;//[Offset: 0x38, Size: 0xc]
	ItemHandleBase* ItemHandle;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 0x4]
	int MaxCount;//[Offset: 0x4, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int SortingPriority;//[Offset: 0x10, Size: 0x4]
	int ItemType;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0xc4, Size: 0xc]
	delegate SingleItemUpdatedDelegate;//[Offset: 0xd0, Size: 0xc]
	delegate SingleItemDeleteDelegate;//[Offset: 0xdc, Size: 0xc]
	delegate CapacityUpdatedDelegate;//[Offset: 0xe8, Size: 0xc]
	delegate ItemOperationDelegate;//[Offset: 0xf4, Size: 0xc]
	delegate ItemOperCountDelegate;//[Offset: 0x100, Size: 0xc]
	delegate ItemOperationFailedDelegate;//[Offset: 0x10c, Size: 0xc]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x118, Size: 0xc]
	delegate ItemUpdatedDelegate;//[Offset: 0x124, Size: 0xc]
	delegate ItemRemovedDelegate;//[Offset: 0x130, Size: 0xc]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x13c, Size: 0xc]
	IncNetArray ItemListNet;//[Offset: 0x154, Size: 0x18]
	BattleItemData[] CachItemList;//[Offset: 0x16c, Size: 0xc]
	IncNetArray ItemListNetCache;//[Offset: 0x178, Size: 0x18]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x194, Size: 0xc]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x1a0, Size: 0x3c]
	int CapacityThreshold;//[Offset: 0x1dc, Size: 0x4]
	float Capacity;//[Offset: 0x1e0, Size: 0x4]
	float OccupiedCapacity;//[Offset: 0x1e4, Size: 0x4]
	int virtualitemid;//[Offset: 0x1f8, Size: 0x4]
	delegate ZombieModeSkillPropLevelChangedDelegate;//[Offset: 0x200, Size: 0xc]
	delegate ZombieModeSkillPropCDDelegate;//[Offset: 0x20c, Size: 0xc]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x18274d0
	float UpdateCapacity();// 0x18274a0
	void UnequipItem(ItemDefineID DefineID);// 0x1827418
	void TryMergeItemHandles(ItemDefineID DefineID);// 0x1827390
	int TakeItem(ItemDefineID DefineID, int count, bool bCallHandleDrop);// 0x182726c
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x1827180
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x1827050
	int ReturnItem(ItemDefineID DefineID, int count, bool bCallHandlePickup);// 0x1826f2c
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x1826e94
	void ReceiveItemList();// 0x13ca444
	void ReceiveCapacity();// 0x134e440
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1826ba0
	void OnRep_specialCountLimit();// 0x12e82e4
	void OnRep_ItemListNet();// 0x1826b8c
	void OnRep_ItemList();// 0x1826b78
	void OnRep_Capacity();// 0x1826b64
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x1826ad4
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x1826a44
	void NotifyItemListUpdated();// 0x134cb44
	void NotifyCapacityUpdated();// 0x134cbe0
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x18269ac
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x18268e8
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int count);// 0x182682c
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x1826778
	BattleItemData ItemNet2Data(out const NetArrayUnit netItem);// 0x18265b4
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x18264f0
	bool HasItemBySubType(int subType);// 0x1826470
	bool HasItemByDefineID(ItemDefineID DefineID);// 0x18263e0
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x182631c
	World* GetWorld_BP();// 0x18262f4
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x1826254
	SpecialPickInfo GetSpecialItemBefore(int ItemResID);// 0x18261c4
	BattleItemData[] GetItemListByDefineID(out const ItemDefineID DefineID);// 0x1826054
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x182601c
	ItemHandleBase*[] GetItemHandleList();// 0x1825fac
	int GetItemCountByType(int InItemType);// 0x1825f2c
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x1825e70
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x1825dc4
	BattleItemData[] GetAllItemList();// 0x1825d24
	void ForceNetUpdate();// 0x13ea624
	void EquipItem(ItemDefineID DefineID);// 0x1825c9c
	bool DropItem(ItemDefineID DefineID, int count, enum Reason);// 0x1825b7c
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x1825aa0
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x1825a08
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x1825970
	int ConsumeItem(ItemDefineID DefineID, int count);// 0x182589c
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x182581c
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x1825780
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x18256e4
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x18255cc
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x18254b4
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x18253d4
	int CheckCapacityForItem(ItemDefineID DefineID, int count);// 0x1825300
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x1825270
	void BroadcastItemOperCountDelegate(ItemDefineID DefineID, enum OperationType, int count);// 0x1825160
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x1825050
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x1824f40
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x1824e64

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 0x4]
	int cur_count;//[Offset: 0x4, Size: 0x4]
	int total_count;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 0x38]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	int count;//[Offset: 0x18, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 0xc]
	ItemAssociation[] Associations;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 0x28]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 0x28]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 0x28]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 0x28]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 0x28]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xc8, Size: 0x28]
	MaterialInterface* baseMat;//[Offset: 0xf0, Size: 0x4]
	MaterialInterface* baseMatClass;//[Offset: 0xf8, Size: 0x28]
	ParticleRes[] ParticleEffects;//[Offset: 0x120, Size: 0xc]
	UIWidgetRes[] WidgetList;//[Offset: 0x12c, Size: 0xc]
	enum meshType;//[Offset: 0x138, Size: 0x1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 0x4]
	FName AttachSocket;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 0x4]
	FName AttachSocket;//[Offset: 0x8, Size: 0x8]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
	Vector2D DrawSize;//[Offset: 0x40, Size: 0x8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: WeaponAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	enum socket;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WeaponKillEffectCfg
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PlayerTombBox.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x2cc, Size: 0xc]
	FName tombName;//[Offset: 0x2d8, Size: 0x8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2e0, Size: 0x4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x2e4, Size: 0x4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x2e8, Size: 0x18]
	int DeadTime;//[Offset: 0x300, Size: 0x4]
	int BoxLifeSpan;//[Offset: 0x304, Size: 0x4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	Vector AttachedRelLoc;//[Offset: 0x30c, Size: 0xc]
	Actor* AttachedActor;//[Offset: 0x318, Size: 0x4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	enum BoxType;//[Offset: 0x31d, Size: 0x1]
	uint32 OwnerUniqueID;//[Offset: 0x320, Size: 0x4]
	int TargetPlayerKey;//[Offset: 0x324, Size: 0x4]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x328, Size: 0x4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x330, Size: 0x8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x338, Size: 0x4]
	void SwitchToDeadTombBox();// 0x133c1a0
	void SetVisible(bool IsVisible);// 0x13f3ab0
	void RegisterToPlayerPickUpList();// 0x13f3a9c
	void OnRep_VisibilityChange();// 0x13f3a88
	void OnRep_BoxLifeSpan();// 0x12e82e4
	void OnRep_AttachmentReplication();// 0x131b1dc
	void OnRep_AttachedActor();// 0x13f3a74
	void HideDeadTombApparence();// 0x133c1bc
	int GetUniqueInstanceID();// 0x13f3a4c
	int GetTombboxLifespan();// 0x13f3a24
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x13f39f8
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x13f38dc
	void GeneratePlayerBackpackWrappers();// 0x1366804
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x13f3744
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x13f3648
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirdropboxID);// 0x13f34e8

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x450, Size: 0xc]
	enum BoxType;//[Offset: 0x45c, Size: 0x1]
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x13e8248
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x13e8174
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x1c01fa0
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0x1c01fa0
	void OnRep_PickUpDataList();// 0x13e8160
	void OnBoxEmptyDelegate__DelegateSignature(int BoxId);// 0x1c01fa0
	PickUpItemData[] GetDataList();// 0x13e80f4
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x13e7fec

--------------------------------
Class: PickUpWrapperActor.UAENetActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x2e4, Size: 0x4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	ItemDefineID DefineID;//[Offset: 0x2f0, Size: 0x18]
	int count;//[Offset: 0x308, Size: 0x4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 0x1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 0x1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x310, Size: 0xc]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1]
	FName OwnerName;//[Offset: 0x320, Size: 0x8]
	uint32 OwnerUniqueID;//[Offset: 0x328, Size: 0x4]
	Vector AttachedRelLoc;//[Offset: 0x32c, Size: 0xc]
	Actor* AttachedActor;//[Offset: 0x338, Size: 0x4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x33c, Size: 0xc]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	float TrainingModePickUpColdCD;//[Offset: 0x34c, Size: 0x4]
	float PickUpColdCountDown;//[Offset: 0x350, Size: 0x4]
	float TrainingModeDropLifeTime;//[Offset: 0x390, Size: 0x4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x398, Size: 0x4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x39c, Size: 0x4]
	FString ItemValue;//[Offset: 0x3a0, Size: 0xc]
	FString ItemCategory;//[Offset: 0x3ac, Size: 0xc]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 0x1]
	delegate OnWrapperPickedUp;//[Offset: 0x3c0, Size: 0xc]
	StaticMeshComponent* PickupMesh;//[Offset: 0x3d0, Size: 0x4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x3d4, Size: 0x4]
	int ObjectPoolSize;//[Offset: 0x3d8, Size: 0x4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 0x1]
	FString EffectPath;//[Offset: 0x3e0, Size: 0xc]
	FString DurationTime;//[Offset: 0x3ec, Size: 0xc]
	int ItemID;//[Offset: 0x3f8, Size: 0x4]
	Color DefaultColor;//[Offset: 0x3fc, Size: 0x4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x428, Size: 0x4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x430, Size: 0x18]
	FString ToDetailString();// 0x13eb320
	void ShowMesh(bool bShow);// 0x13eb2a0
	void ShowActor();// 0x13eb28c
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x13eb1fc
	void SetDefineID(out const ItemDefineID DID);// 0x13eb16c
	void SetCountOnServerAfterSpawn(int _Count);// 0x13eb0f4
	void ServerResetShowActor();// 0x13eb0e0
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x13eaf84
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x13eaed0
	void OnRep_PickUpColdCountDown();// 0x13eaebc
	void OnRep_DefindID();// 0x13eaea8
	void OnRep_AttachmentReplication();// 0x131b1dc
	void OnRep_AttachedActor();// 0x13eae94
	void ModifyData(int _Count);// 0x13eae1c
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x13ead54
	bool LoadDynamicMeshInst(StaticMesh* InStaticMesh);// 0x13eacd4
	bool LoadDynamicMesh(FString MeshPath);// 0x13eac10
	bool LoadDynamicMaterialInst(MaterialInstance* InMaterialInst);// 0x13eab90
	bool LoadDynamicMaterial(FString MaterialPath);// 0x13eaacc
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x13ea9e8
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x13ea690
	StaticMeshComponent* GetPickupMesh();// 0x13ea668
	int GetNetGUIDOffsetValue();// 0x13ea640
	PickUpItemData[] GetDataList();// 0x13e80f4
	void ForceNetUpdate();// 0x13ea624
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x13e7fec
	void ColdTimeCountDown();// 0x13ea610
	void ClientResetShowActor();// 0x13ea5fc
	bool CheckPickUpDataIsWeapon();// 0x13ea5d4
	void BroadcastDataToAllClients(int Count_New);// 0x13ea520
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x13ea4a0
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x13ea28c

--------------------------------
Class: UAENetActor.Actor.Object
	int iRegionActor;//[Offset: 0x2cc, Size: 0x4]

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 0x18]
	int count;//[Offset: 0x18, Size: 0x4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c, Size: 0xc]
	int InstanceID;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x24c, Size: 0x4]
	bool DisableLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	byte SpotGroupType;//[Offset: 0x252, Size: 0x1]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x254, Size: 0x4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x258, Size: 0xc]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x264, Size: 0x4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x268, Size: 0x3c]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x183de6c
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x183ddb4
	bool GenerateSpot();// 0x183dd84
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x183dc80
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x183da10
	int CountCacheItemValeCategory();// 0x183d9e8

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x235, Size: 0x1]
	int WorldCompositionID;//[Offset: 0x238, Size: 0x4]
	float HalfHeight;//[Offset: 0x23c, Size: 0x4]
	int SpotProbability;//[Offset: 0x240, Size: 0x4]
	float LineOffsetZ;//[Offset: 0x244, Size: 0x4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]
	void SetSpotValid(bool Valid);// 0x1849d04
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x1849a48
	bool IsSpotValid();// 0x1849a18
	FString GetRandomCategory(out const SpotWeight[] SpotWeights, out bool IsRandom);// 0x18497f4
	bool GenerateSpot();// 0x183dd84
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x184967c

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x168, Size: 0xc]
	byte BornIslandGroupType;//[Offset: 0x174, Size: 0x1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x178, Size: 0xc4]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x23c, Size: 0x3c]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x278, Size: 0xc]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	FString[] AreaIDList;//[Offset: 0x288, Size: 0xc]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x294, Size: 0xc]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x2a0, Size: 0x3c]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x2dc, Size: 0x20]
	CurveFloat* SpotRateCurve;//[Offset: 0x2fc, Size: 0x4]
	CurveFloat* ItemRateCurve;//[Offset: 0x300, Size: 0x4]
	<FString,float> CategoryRates;//[Offset: 0x304, Size: 0x3c]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x340, Size: 0x3c]
	Actor*[] BornIslandItems;//[Offset: 0x37c, Size: 0xc]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x388, Size: 0xc]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 0x1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 0x1]
	DateTime GenerateBornIslandTime;//[Offset: 0x398, Size: 0x8]
	DateTime GenerateMainlandTime;//[Offset: 0x3a0, Size: 0x8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x3e8, Size: 0xc]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x400, Size: 0xc]
	FString CookedBandFilePath;//[Offset: 0x448, Size: 0xc]
	void WriteItemClassStatisticsDatas_V15();// 0x12e82e4
	void WriteItemClassStatisticsDatas();// 0x183c490
	void WriteGroupStatisticsDatas();// 0x183c47c
	void WriteBuildingStatisticsDatas();// 0x183c468
	void WriteAllStatisticsDatasToLog();// 0x183c44c
	void WriteAllStatisticsDatas();// 0x139fe4c
	void SetCatetoryRate(<FString,float> Rates);// 0x183c2a0
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x183c1bc
	void RegisterBornIslandItem(Actor* Item);// 0x183c13c
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x183bf84
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] items);// 0x183bd58
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x183bc40
	void RandomGroups();// 0x12e0f50
	void RandomBornIslandGroups();// 0x183bc24
	void LoadItemGenerateTable();// 0x13aa438
	bool IsCatetoryEnabled();// 0x183bbfc
	void InitCatetorys();// 0x183bbe8
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x183bac0
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, bool IsRandom);// 0x183b7d8
	float GetCatetoryRate(FString Catetory);// 0x183b710
	void GenerateSpotOnTick(float DeltaTime);// 0x13b484c
	void DeleteValidGroups();// 0x183b6fc
	void DeleteBornIslandItems();// 0x183b6e8
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x183b5b4

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	int GenerateSpotCountPerTick;//[Offset: 0xc0, Size: 0x4]
	FString ItemTableName;//[Offset: 0xc4, Size: 0xc]
	UAEDataTable* ItemTable;//[Offset: 0xd0, Size: 0x4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0xd8, Size: 0x3c]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x114, Size: 0xc]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x120, Size: 0x3c]
	FString CookedFilePath;//[Offset: 0x15c, Size: 0xc]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x13bd228
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x1509060
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x1359bf4
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x1828da8
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x1828cdc
	void GenerateSpots();// 0x1828cc0
	void GenerateSpotOnTick(float DeltaTime);// 0x13b484c
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x1828a7c
	void CheckTileLevelsVisible();// 0x1828a68

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0x6c, Size: 0x3c]
	bool TryGetTableDataRowStruct(FString KeyValue, out UAETableRow Result);// 0x2ebfd10
	UAETableRow GetTableDataRowStruct(FString KeyValue);// 0x2ebfc44
	int GetTableDataByDefault_Int32(FString KeyValue, FString TagName, int DefaultValue);// 0x2ebfab8
	FString GetTableData_String(FString KeyValue, FString TagName);// 0x2ebf8f0
	int GetTableData_Int32(FString KeyValue, FString TagName);// 0x2ebf7a8
	float GetTableData_Float(FString KeyValue, FString TagName);// 0x2ebf65c
	bool GetTableData_Bool(FString KeyValue, FString TagName);// 0x2ebf514

--------------------------------
Class: UAETableRow
	UAEDataTable* Table;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 0x1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x235, Size: 0x1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1]
	int WorldCompositionID;//[Offset: 0x238, Size: 0x4]
	float LastGenerateItemTime;//[Offset: 0x23c, Size: 0x4]
	float GenerateItemTimeCD;//[Offset: 0x240, Size: 0x4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 0x1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246, Size: 0x1]
	void SetGroupValid(bool Valid);// 0x183914c
	bool IsValidGroup();// 0x183911c
	int FindWorldCompositionID();// 0x18390f4
	void DoPickUp();// 0x18390e0

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 0x4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 0xc]
	int Weight;//[Offset: 0xc, Size: 0x4]
	bool NonRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 0x4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 0x4]
	int AllSpotCount;//[Offset: 0x8, Size: 0x4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 0x4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 0x3c]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c, Size: 0x3c]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88, Size: 0x3c]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4, Size: 0x1]
	int AllGroupSpotCount;//[Offset: 0x8, Size: 0x4]
	int AllValidGroupSpotCount;//[Offset: 0xc, Size: 0x4]
	int AllSpotCount;//[Offset: 0x10, Size: 0x4]
	int AllValidSpotCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4, Size: 0xc]
	float BuildingLocationX;//[Offset: 0x10, Size: 0x4]
	float BuildingLocationY;//[Offset: 0x14, Size: 0x4]
	int AllGroupSpotCount;//[Offset: 0x18, Size: 0x4]
	int AllValidGroupSpotCount;//[Offset: 0x1c, Size: 0x4]
	int AllSpotCount;//[Offset: 0x20, Size: 0x4]
	int AllValidSpotCount;//[Offset: 0x24, Size: 0x4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28, Size: 0x3c]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 0x1]
	int AllSpotCount;//[Offset: 0x8, Size: 0x4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString fItemPath;//[Offset: 0x4, Size: 0xc]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int ItemCount;//[Offset: 0x14, Size: 0x4]
	FString ItemTogetherPath;//[Offset: 0x18, Size: 0xc]
	int ItemTogetherCount;//[Offset: 0x24, Size: 0x4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 0x1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 0x4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 0xc]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18, Size: 0x4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 0x1]
	int SpotPercentMin;//[Offset: 0x4, Size: 0x4]
	int SpotPercentMax;//[Offset: 0x8, Size: 0x4]
	int SpotPercentDot;//[Offset: 0xc, Size: 0x4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 0x4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 0x4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 0xc]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 0xc]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 0x4]
	FString ItemValue;//[Offset: 0x4, Size: 0xc]
	FString ItemCategory;//[Offset: 0x10, Size: 0xc]
	int ItemWeight;//[Offset: 0x1c, Size: 0x4]
	FString fItemPath;//[Offset: 0x20, Size: 0xc]
	int ItemStackCount;//[Offset: 0x2c, Size: 0x4]
	FString ItemTogetherPath;//[Offset: 0x30, Size: 0xc]
	int ItemTogetherStackCount;//[Offset: 0x3c, Size: 0x4]
	int ItemTogetherCountMin;//[Offset: 0x40, Size: 0x4]
	int ItemTogetherCountMax;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x248, Size: 0x4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x24c, Size: 0xc]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x258, Size: 0xc]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x183d580
	void RepeatSpots();// 0x183d56c
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x183d4f4
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x183d358
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x183d208
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x183d0e4

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xa0, Size: 0x4]
	int64 LastGenerateItemTime;//[Offset: 0xa8, Size: 0x8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xb0, Size: 0x3c]

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 0x4]
	class Object* ItemClass;//[Offset: 0x4, Size: 0x4]
	int ItemCount;//[Offset: 0x8, Size: 0x4]
	FString MetaData;//[Offset: 0xc, Size: 0xc]
	FString ItemValue;//[Offset: 0x18, Size: 0xc]
	FString ItemCategory;//[Offset: 0x24, Size: 0xc]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	Actor* HostActor;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xc0, Size: 0x3c]
	FName LeftLogicSocketName;//[Offset: 0x100, Size: 0x8]
	FName RightLogicSocketName;//[Offset: 0x108, Size: 0x8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x110, Size: 0x3c]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x14c, Size: 0x3c]
	<FName,class STExtraWeapon> UGrenadeLogicSocketToWeaponClassMap;//[Offset: 0x188, Size: 0x3c]
	<FName,class STExtraWeapon> GrenadeLogicSocketToWeaponClassMap;//[Offset: 0x1c4, Size: 0x3c]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x200, Size: 0x4]
	FName CurUseWeaponLogicSocket;//[Offset: 0x208, Size: 0x8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x210, Size: 0x8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x220, Size: 0x8]
	FName LastUseNoneMeleeLogicSlot;//[Offset: 0x228, Size: 0x8]
	FName LastUseLogicSlot;//[Offset: 0x230, Size: 0x8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x23c, Size: 0xc]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x248, Size: 0xc]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x254, Size: 0xc]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x260, Size: 0xc]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x26c, Size: 0xc]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x290, Size: 0x3c]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x2cc, Size: 0x3c]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x308, Size: 0xc]
	ItemDefineID[] TargetCreateArray;//[Offset: 0x318, Size: 0xc]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x328, Size: 0xc]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x338, Size: 0x38]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x370, Size: 0x38]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x3a8, Size: 0x38]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x3e0, Size: 0x38]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x418, Size: 0x38]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x454, Size: 0x4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x458, Size: 0x4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x45c, Size: 0x4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x460, Size: 0x4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x464, Size: 0x4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x494, Size: 0x4]
	FString MainWeaponTableName;//[Offset: 0x4a4, Size: 0xc]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x1c01fa0
	void UpdateOwnerClientCreateWeapon();// 0x154d928
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x154d864
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x154d850
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x1c01fa0
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x1c01fa0
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x154d78c
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x154d714
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x154d700
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x154d6ec
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x154d6d8
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x154d6c4
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x154d6b0
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x154d638
	void OnRep_CurrentWeaponReplicated();// 0x153ca60
	void OnRep_CurrentWeaponLogicSocket();// 0x154d624
	void OnRep_CurrentShieldWeaponReplicated();// 0x154d610
	void OnReconnectOnServer();// 0x134689c
	void OnReconnectOnClient();// 0x1346880
	void LogInventoryDataInfo();// 0x154d5fc
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x154d4ec
	void LocalForceFinishSwitchWeapon();// 0x154d4d8
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x1c01fa0
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x154d4c4
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x154d4b0
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x1c01fa0
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x154d488
	bool IsCreatingWeaponOnServer();// 0x154d454
	static void InitializeTable(FString MainWeaponTableName);// 0x154d304
	FName GetShieldWeaponSlot();// 0x154d2c4
	STExtraWeapon* GetShieldWeapon();// 0x154d29c
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x154d21c
	static MainWeaponTableStruct GetMainWeaponTableRow(int ID);// 0x154d114
	FName GetLogicSocketBySlot(byte Slot);// 0x154d08c
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x154d00c
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x154cf8c
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x154cf0c
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x154ce7c
	FName GetGrenadeSpecificSlotNameByWeapon(STExtraWeapon* Weapon);// 0x154cdf4
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x154cd5c
	STExtraWeapon* GetCurrentUsingWeapon();// 0x154cd34
	byte GetCurrentUsingPropSlot();// 0x154cd0c
	FName GetCurrentUsingLogicSocketOnServer();// 0x154cccc
	FName GetCurrentUsingLogicSocket();// 0x154cccc
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x154cca4
	int GetBagLevel();// 0x134683c
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x154cb94
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x154cb80
	void EnableAllBroadcast(bool bEnable);// 0x154cb04
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x154ca40
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x154c9c8
	void DebugReconnectToClientOnServer();// 0x154c9b4
	void DebugDisconnetToServerOnClient();// 0x154c9a0
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x1c01fa0
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x1c01fa0
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x154c8cc

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 0x4]
	FName LogicSocket;//[Offset: 0x8, Size: 0x8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	ItemDefineID ID;//[Offset: 0x18, Size: 0x18]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int OperationIndex;//[Offset: 0x34, Size: 0x4]
	Actor* WeaponOwnerActor;//[Offset: 0x38, Size: 0x4]
	FString OwnerCharacterName;//[Offset: 0x3c, Size: 0xc]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 0x4]
	FName LogicSocket;//[Offset: 0x8, Size: 0x8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	ItemDefineID ID;//[Offset: 0x18, Size: 0x18]
	int OperationIndex;//[Offset: 0x30, Size: 0x4]
	int BagLevel;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MiniItem
	int Type;//[Offset: 0x0, Size: 0x4]
	int TypeSpecificID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 0xc]
	enum AttachmentSocketType;//[Offset: 0xc, Size: 0x1]
	enum subSlot;//[Offset: 0xd, Size: 0x1]
	enum SightType;//[Offset: 0xe, Size: 0x1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x14, Size: 0xc]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x20, Size: 0xc]
	<int,FName> socketTypeToName;//[Offset: 0x2c, Size: 0x3c]
	WeaponMeshCfg MeshPackage;//[Offset: 0x68, Size: 0x140]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1a8, Size: 0xc]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x1b4, Size: 0xc]
	ItemDefineID ParentID;//[Offset: 0x1c0, Size: 0x18]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0xc]
	enum Op;//[Offset: 0xc, Size: 0x1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	float ModifyValue;//[Offset: 0x10, Size: 0x4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 0x28]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 0xc]
	FText DescValue;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 0xc]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 0x140]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	int gender;//[Offset: 0x18, Size: 0x4]
	enum OperationType;//[Offset: 0x1c, Size: 0x1]
	int AdditionalItemID;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: HandleMeshPack
	BackpackWeaponAttachHandle* Handle;//[Offset: 0x0, Size: 0x4]
	WeaponMeshCfg meshCfg;//[Offset: 0x8, Size: 0x140]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xa8, Size: 0x1d8]
	class AnimInstance* animBP;//[Offset: 0x280, Size: 0x4]
	class AnimInstance* animBPClass;//[Offset: 0x288, Size: 0x28]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x2b0, Size: 0xc]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x2bc, Size: 0xc]
	BackpackComponent* BackpackComp;//[Offset: 0x2c8, Size: 0x4]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x131f2d8
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x131f2bc
	bool IsVirtualAvatarHandle();// 0x131f28c
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x131f214
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x131f140
	int GetSubSlotID();// 0x131f110
	int GetSlotID();// 0x131f0e0
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x131f074
	void GetMeshPackCfg(out WeaponMeshCfg meshCfg);// 0x131eeb4
	WeaponAttachmentConfig GetAttachmentConfig();// 0x131ee48
	class Object GetAnimationBP();// 0x131ee18
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x131ed04

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 0x1]
	int PendantIndex;//[Offset: 0x4, Size: 0x4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 0x60]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 0xc]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 0x30]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 0xc]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 0xc]

--------------------------------
Class: WeaponPendantMap
	int WeaponID;//[Offset: 0x0, Size: 0x4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ParticleEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 0xc]
	ParticleRes[] ParticleRes;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: AsyncLoadMeshResReq
	SoftObjectPath[] MeshResList;//[Offset: 0x0, Size: 0xc]
	BattleItemHandleBase*[] AvatarHandleList;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0x9b, Size: 0x1]
	enum subSlot;//[Offset: 0x9c, Size: 0x1]
	enum specialType;//[Offset: 0x9d, Size: 0x1]
	<enum,int> SuitConfig;//[Offset: 0xa0, Size: 0x3c]
	MeshPackage meshPack;//[Offset: 0xe0, Size: 0x1b0]
	MeshPackage replacedMeshPack;//[Offset: 0x290, Size: 0x1b0]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x440, Size: 0xc]
	enum[] hiddenFlags;//[Offset: 0x44c, Size: 0xc]
	enum[] subHiddenFlags;//[Offset: 0x458, Size: 0xc]
	enum[] ReplaceFlags;//[Offset: 0x464, Size: 0xc]
	enum[] ignoreFlags;//[Offset: 0x470, Size: 0xc]
	AvatarPostOperation[] postOperation;//[Offset: 0x47c, Size: 0xc]
	BackpackComponent* pBackpackComp;//[Offset: 0x488, Size: 0x4]
	int itemCapacity;//[Offset: 0x48c, Size: 0x4]
	int Durability;//[Offset: 0x490, Size: 0x4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x49c, Size: 0x24]
	enum hideBoneSlot;//[Offset: 0x4c0, Size: 0x1]
	FName hideBoneName;//[Offset: 0x4c8, Size: 0x8]
	FName[] hideBoneNameArray;//[Offset: 0x4d0, Size: 0xc]
	enum HideBoneType;//[Offset: 0x4dc, Size: 0x1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x4e0, Size: 0x3c]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x51c, Size: 0xc]
	int PendantConfigIndex;//[Offset: 0x528, Size: 0x4]
	float PendantScale;//[Offset: 0x52c, Size: 0x4]
	int DefaultExtendPendantID;//[Offset: 0x530, Size: 0x4]
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x13087f8
	bool HasCustomInfo();// 0x13087d0
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x13086dc
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x13085c8
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x13082c8
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x1308184
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x1308084
	bool HandleMeshpackPostProcess(Object* Outer);// 0x1307ffc
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x1307f30
	bool HandleEnable(bool bEnable);// 0x1307ea0
	bool HandleDrop(int InCount, enum Reason);// 0x1307dd4
	bool HandleDisuse(enum Reason);// 0x1307d4c
	BackpackComponent* GetBackpackComponent();// 0x1307d24
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x1307c60

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 0x28]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 0x28]
	SkeletalMesh* maleSkMesh;//[Offset: 0x58, Size: 0x28]
	SkeletalMesh* femaleSkMesh;//[Offset: 0x80, Size: 0x28]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xa8, Size: 0x28]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0xd0, Size: 0x28]
	MaterialInterface* maleMat;//[Offset: 0xf8, Size: 0x28]
	MaterialInterface* femaleMat;//[Offset: 0x120, Size: 0x28]
	MaterialSet[] additionalMaleMats;//[Offset: 0x148, Size: 0xc]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x154, Size: 0xc]
	MaterialInterface* baseMat;//[Offset: 0x160, Size: 0x4]
	class AnimInstance* animBP;//[Offset: 0x164, Size: 0x4]
	AvatarEffectData[] EffectDataList;//[Offset: 0x168, Size: 0xc]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x174, Size: 0xc]
	class AnimInstance* animBPClass;//[Offset: 0x180, Size: 0x28]

--------------------------------
Class: AssetPackage

--------------------------------
Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0, Size: 0x28]
	enum targetSlot;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 0x28]
	FName AttachSocket;//[Offset: 0x58, Size: 0x8]
	enum ValidMethod;//[Offset: 0x60, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	FName AttachSocket;//[Offset: 0x40, Size: 0x8]
	FName SlotName;//[Offset: 0x48, Size: 0x8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 0x28]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 0x28]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 0x28]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 0x28]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 0x4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]

--------------------------------
Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0, Size: 0x1]
	enum operationWhenReplaced;//[Offset: 0x1, Size: 0x1]
	enum operationWhenHidden;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 0xc]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc, Size: 0xc]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0xc]
	enum Op;//[Offset: 0xc, Size: 0x1]
	float ModifyValue;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 0x8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 0x4]
	int subSlotID;//[Offset: 0x4, Size: 0x4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 0x18]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 0x18]
	int gender;//[Offset: 0x38, Size: 0x4]
	int HideState;//[Offset: 0x3c, Size: 0x4]
	int ReplaceState;//[Offset: 0x40, Size: 0x4]
	AvatarCustom CustomInfo;//[Offset: 0x44, Size: 0x14]
	enum SlotDescDiff;//[Offset: 0x58, Size: 0x1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 0x18]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0, Size: 0x1]
	int ColorID;//[Offset: 0x4, Size: 0x4]
	int PatternID;//[Offset: 0x8, Size: 0x4]
	int NumID;//[Offset: 0xc, Size: 0x4]
	int ParticleID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	int gender;//[Offset: 0x520, Size: 0x4]
	delegate OnAvatarHeadVisible;//[Offset: 0x524, Size: 0xc]
	delegate OnAvatarEquipped;//[Offset: 0x530, Size: 0xc]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 0x1]
	int HeadAvatarID;//[Offset: 0x550, Size: 0x4]
	int PreHeadAvatarID;//[Offset: 0x554, Size: 0x4]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1]
	<FName> HadHideBoneNames;//[Offset: 0x56c, Size: 0x3c]
	enum[] OpenResetHideBone;//[Offset: 0x5a8, Size: 0xc]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x5b4, Size: 0x3c]
	int[] ignoreSlots;//[Offset: 0x5f0, Size: 0xc]
	int WholeBodyModelID;//[Offset: 0x5fc, Size: 0x4]
	int CurrentClothID;//[Offset: 0x600, Size: 0x4]
	int[] NeedRemoveSlot;//[Offset: 0x604, Size: 0xc]
	int[] LastSuitItems;//[Offset: 0x610, Size: 0xc]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x620, Size: 0x3c]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x65c, Size: 0x3c]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0x698, Size: 0x3c]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0x6d4, Size: 0x3c]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0x710, Size: 0x3c]
	delegate OnAvatarAttachEquipped;//[Offset: 0x74c, Size: 0xc]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0x758, Size: 0x3c]
	int ConfigMinDistFromMainChar;//[Offset: 0x794, Size: 0x4]
	int ConfigMaxDistFromMainChar;//[Offset: 0x798, Size: 0x4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0x79c, Size: 0x4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0x7a0, Size: 0xc]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0x7ac, Size: 0xc]
	SoftObjectPath FakeHeadPath;//[Offset: 0x7b8, Size: 0x18]
	int EnableEquipAvatarPendant;//[Offset: 0x7d0, Size: 0x4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 0x1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d5, Size: 0x1]
	int TypeToInt(enum InSlotType);// 0x13420a0
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x1341fcc
	bool SetSkinMaterial(int SlotID, ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x1341eb0
	void SetNormalMaterial(out const MeshPackage meshPack, MeshComponent* meshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x1341d38
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1341c14
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x1341b9c
	bool SetBodySuitsMaterial(out const MeshPackage meshPack, MeshComponent* meshComp, BackpackAvatarHandle* InAvatarHandle);// 0x1341a60
	void SetAvatarVisibility(enum slotType, bool visible, bool IsForCE);// 0x134194c
	void SetAvatarGender(int AGender);// 0x13418d4
	void SetAvatarForceLOD(enum slotType, int LODLevel);// 0x1341818
	void SetAllMeshCharMode(bool bMainChar);// 0x1341798
	void ResetAnimDynamicsByMeshComp(MeshComponent* meshComp);// 0x1341718
	void ResetAllAnimDynamics();// 0x13416fc
	void RequestSyncLoadHandles(out ItemDefineID[] InHandleList);// 0x1341630
	void RemoveClothParticleEffect(int SlotID);// 0x13415b8
	void RemoveAttachMesh(int SlotID);// 0x1341540
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x13414c0
	void ProcessClothSuits();// 0x13414a4
	void ProcessAvatarRectify();// 0x1341488
	void PreProcessBeforeLoadMesh();// 0x132cd00
	void PostProcessAfterLoadMesh();// 0x132cd38
	void OnSyncLoadBattleHandlesDone(BattleItemHandleBase*[] AvatarHandles);// 0x1341330
	void OnRep_BodySlotStateChanged();// 0x1341314
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1341244
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1341128
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x1340ffc
	void OnAvatarHeadVisible__DelegateSignature(int ItemID);// 0x1c01fa0
	void OnAvatarEquippedCall(enum slotType, bool bEquipped, int ItemID);// 0x1340ef0
	void OnAvatarEquipped__DelegateSignature(enum slotType, bool isEquipped, int ItemID);// 0x1c01fa0
	void OnAvatarAttachEquipped__DelegateSignature(enum slotType, bool isEquipped, int ItemID);// 0x1c01fa0
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1340e70
	void OnAsyncLoadBattleHandlesDone(BattleItemHandleBase*[] AvatarHandles);// 0x1340d10
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc);// 0x1340c38
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x1340b10
	bool IsTeammate();// 0x1340ae0
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x13409e4
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x13408e8
	bool IsMasterMeshSlotID(int InSlotID);// 0x1340860
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1340730
	enum IntToType(int InSlotID);// 0x13406bc
	void InitMasterComponent();// 0x13406a8
	void Initialize();// 0x134068c
	void InitialAvatarParam(int AGender);// 0x1340614
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x134059c
	void InitDefaultAvatarByResID(int AGender, int Head, int hair);// 0x134049c
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x13403b8
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x1340320
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x13402a8
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x1340230
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x1340154
	StaticMesh* GetStaticMesh(out const MeshPackage meshPack);// 0x13400a0
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x133ff90
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage meshPack);// 0x133fedc
	MeshComponent* GetMeshCompBySlot(enum slotType);// 0x133fe54
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x133fd90
	MaterialInstance* GetMaterial(out const MeshPackage meshPack);// 0x133fcdc
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x133fc5c
	int GetEquipmentSkinItemID(int InItemID);// 0x133fbd4
	bool GetEquimentMeshBySlot(int Slot, out MeshData meshPack);// 0x133fadc
	int[] GetDefaultBodyItemIDList();// 0x133fa1c
	FName GetClothMaterialSkinName(enum slotType, bool bSuit);// 0x133f948
	FName GetClothMaterialColorName(enum slotType, bool bSuit);// 0x133f874
	MaterialInterface* GetCharSkinMaterial(enum slotType, ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x1c01fa0
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x133f76c
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x133f6a8
	bool GetAttachMeshResRef(out const AvatarAttachMeshData meshPack, out SoftObjectPath OutAssetRef);// 0x133f524
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x1c01fa0
	bool EnableEquipAvatarPendantFeature();// 0x133f4fc
	bool DeleteAvatarMeshData(int InSlotID);// 0x133f474
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x1c01fa0
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x1c01fa0
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x133f390
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x133f2f8
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x12de594
	bool CheckIsHiddenByOther(int InItemResID);// 0x133f278
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x133f1bc
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x133f100
	void ApplyMeshCompCollision(int SlotID);// 0x133f088
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x133efbc
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x133ef00
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x133edb8
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x133ecfc
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x133ec7c

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,FName> slotToSocket;//[Offset: 0x288, Size: 0x3c]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x2c4, Size: 0x3c]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x300, Size: 0x3c]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x33c, Size: 0x3c]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x378, Size: 0xc]
	delegate OnAvatarMeshEquipped;//[Offset: 0x384, Size: 0xc]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x394, Size: 0xc]
	int AsyncLoadReqID;//[Offset: 0x438, Size: 0x4]
	int LastAsyncLoadReqID;//[Offset: 0x43c, Size: 0x4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x454, Size: 0xc]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x460, Size: 0x3c]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x49c, Size: 0x4]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1425674
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x1341fcc
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1341c14
	void SetDefaultEquip(out AvatarSyncData Data);// 0x14255d0
	void ResetSlotSyncData();// 0x14255b4
	void RequestSyncLoadMeshes();// 0x14255a0
	void RequestAsyncLoadMeshes();// 0x142558c
	void RequestAsyncLoadHandles();// 0x1425578
	void RemoveEquippedAvatar(int InSlotID);// 0x14254f8
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x1425470
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x1425360
	void ReloadAllLogicAvatar(enum ReloadType);// 0x14252e0
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x13414c0
	bool PutOnEquipmentByResID(int resID);// 0x1425258
	bool PutOffEquimentByResID(int resID);// 0x12fb298
	void PreProcessBeforeLoadMesh();// 0x132cd00
	void PostProcessAfterLoadMesh();// 0x132cd38
	void OnSyncLoadMeshesDone();// 0x1425244
	void OnRep_BodySlotStateChanged();// 0x1341314
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x1340ffc
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemID);// 0x1c01fa0
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x1c01fa0
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1340e70
	void OnAsyncLoadHandlesDone(AvatarHandleBase*[] AvatarHandles);// 0x14250e4
	void OnAllAvatarHandleLoadedDoneSync();// 0x14250d0
	void OnAllAvatarHandleLoadedDone();// 0x14250bc
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc);// 0x1340c38
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x1424ff0
	bool IsMasterMeshSlotID(int InSlotID);// 0x1340860
	bool IsItemHasEquipped(int InItemID);// 0x1424f70
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x1422568
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x1424eac
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x133ff90
	enum GetMeshType(int SlotID);// 0x1424e24
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x1424da4
	MeshComponent* GetMeshCompBySlot(enum slotType);// 0x133fe54
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x1424d34
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x1424c24
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x1424b14
	AvatarEntityFactory* GetEntityFactory();// 0x1413dd0
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x1424a30
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int subSlotID);// 0x1424928
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x1c01fa0
	bool DeleteAvatarMeshData(int InSlotID);// 0x133f474
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x133f390
	AvatarEntity* CreateAvatarEntity(int SlotID, int subSlotID);// 0x1424864
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x142467c
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x14245b0
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x14244a0
	void BPCreateAvatarCustomHandle(int SlotID, int ItemID, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x1c01fa0

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0xfc, Size: 0x3c]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x138, Size: 0x3c]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x174, Size: 0x18]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x18c, Size: 0xc]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x198, Size: 0xc]
	delegate OnAvatarEquippedEvent;//[Offset: 0x1a4, Size: 0xc]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x1b0, Size: 0xc]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x1bc, Size: 0xc]
	int ItemType;//[Offset: 0x1c8, Size: 0x4]
	enum CustomType;//[Offset: 0x1cc, Size: 0x1]
	bool forceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 0x1]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 0x1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d6, Size: 0x1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d7, Size: 0x1]
	int SubSlotStartNum;//[Offset: 0x1d8, Size: 0x4]
	int SubSlotIntervalNum;//[Offset: 0x1dc, Size: 0x4]
	int[] AlawysHideResetOperation;//[Offset: 0x264, Size: 0xc]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	delegate OnAvatarConflictProcess;//[Offset: 0x274, Size: 0xc]
	void RemoveAllEquippedItem();// 0x1423090
	void OnRep_BodySlotStateChanged();// 0x1341314
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1341244
	void OnHandleUnequipSlot(int InSlotID);// 0x1423018
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x1422f74
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x1422ed0
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1341128
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x1c01fa0
	void OnAvatarLogicUnequippedEvent(int InSlotID, ItemDefineID OldItemID);// 0x1422df8
	void OnAvatarLogicEquippedEvent(int InSlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x1422ccc
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x1c01fa0
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x1c01fa0
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x1c01fa0
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x1422bbc
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x1422aac
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x142299c
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x142288c
	int MakeStateInfo(out const int[] InSlotDesc);// 0x14227b8
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x14226ec
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x13409e4
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x1422608
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1340730
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x1422568
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x14224d0
	bool HandleUnequipSlot(int InSlotID);// 0x1422450
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x14223b8
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x14221d8
	void HandleItemResetOrderDesc();// 0x14221c4
	void HandleItemResetOperation();// 0x14221b0
	void HandleItemReplaceRelation();// 0x142219c
	void HandleItemHideRelation();// 0x1422188
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x142208c
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x1421ee4
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x1421d3c
	bool GetViewDataItemID(int InSlotID, out ItemDefineID OutItemDefineID);// 0x1421c60
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x1421b4c
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x14219a4
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x14217fc
	bool GetSyncDataItemID(int InSlotID, out ItemDefineID OutItemDefineID);// 0x1421720
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x1421630
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x1421598
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x14214f8
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x1421464
	int GetAvatarSlotID(int InSubSlotID);// 0x14213e4
	void ClientPostProcessViewDataMiddle();// 0x140c600
	void ClientPostProcessViewDataBefore();// 0x140c744
	void ClientPostProcessViewDataAfter();// 0x140c61c
	void ClientBodySlotStateChanged();// 0x14213d0
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x1421288
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x14210a8
	bool BPClientPostProcessViewDataMiddle();// 0x1421078
	bool BPClientPostProcessViewDataBefore();// 0x1421048
	bool BPClientPostProcessViewDataAfter();// 0x1421018

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 0xc]
	int gender;//[Offset: 0xc, Size: 0x4]
	int BaseID;//[Offset: 0x10, Size: 0x4]
	int UpdateFlag;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AvatarSyncData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int AdditionalItemID;//[Offset: 0x4, Size: 0x4]
	int SlotID;//[Offset: 0x8, Size: 0x4]
	int subSlotID;//[Offset: 0xc, Size: 0x4]
	int HideState;//[Offset: 0x10, Size: 0x4]
	int ReplaceState;//[Offset: 0x14, Size: 0x4]
	int FakeItemID;//[Offset: 0x18, Size: 0x4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 0x1]
	enum OperationType;//[Offset: 0x1d, Size: 0x1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 0x14]

--------------------------------
Class: AvatarTableData
	int SlotID;//[Offset: 0x0, Size: 0x4]
	int subSlotID;//[Offset: 0x4, Size: 0x4]
	int[] HideFlags;//[Offset: 0x8, Size: 0xc]
	int[] ReplaceFlags;//[Offset: 0x14, Size: 0xc]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x20, Size: 0xc]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x2c, Size: 0xc]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x38, Size: 0xc]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x44, Size: 0xc]
	int[] ConflictConfig;//[Offset: 0x50, Size: 0xc]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x5c, Size: 0xc]
	int HideBoneSlotID;//[Offset: 0x68, Size: 0x4]
	int HideBoneType;//[Offset: 0x6c, Size: 0x4]
	FName[] HideBoneNames;//[Offset: 0x70, Size: 0xc]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0, Size: 0x4]
	MeshComponent* meshComp;//[Offset: 0x4, Size: 0x8]
	ParticleGroup ParticleGroup;//[Offset: 0xc, Size: 0x24]

--------------------------------
Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 0xc]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0xc, Size: 0xc]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 0x28]
	FName AttachSocket;//[Offset: 0x58, Size: 0x8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x60, Size: 0xc]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0, Size: 0x4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 0x8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0xc, Size: 0xc]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x30, Size: 0xc]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x1351228
	void AsyncLoadCustomAssetDone();// 0x1351214
	bool ApplyCustomInfo();// 0x134fd24

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c, Size: 0x4]
	ActorComponent* OwnerComp;//[Offset: 0x20, Size: 0x8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28, Size: 0x8]
	void SetCustomID(int InCustomID);// 0x1350e9c
	MeshComponent* GetOwnerMeshComp();// 0x1350e74
	ActorComponent* GetOwnerComp();// 0x1350e4c
	bool ClearCustomInfo();// 0x134fd68
	bool ApplyCustomInfo();// 0x134fd24

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 0xc]
	CustomMatColor[] ColorConfig;//[Offset: 0x14, Size: 0xc]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	FName Tips;//[Offset: 0x8, Size: 0x8]
	float Scalar;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	FName Tips;//[Offset: 0x8, Size: 0x8]
	LinearColor Color;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	FName Tips;//[Offset: 0x8, Size: 0x8]
	Texture* Textrue;//[Offset: 0x10, Size: 0x28]
	FString TextruePath;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24, Size: 0xc]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x130acb0
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x130abf4

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c, Size: 0x8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x130a5e0
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x130a4d8
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x130a3c4
	CharacterAvatarComponent2* GetOwnerComponent();// 0x130a39c

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0, Size: 0x1]
	LinearColor[] MaskColor;//[Offset: 0x4, Size: 0xc]
	float GrayScale;//[Offset: 0x10, Size: 0x4]
	Texture* MaskGrayTexture;//[Offset: 0x18, Size: 0x28]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24, Size: 0xc]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48, Size: 0x18]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x130b514
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x130b458
	bool IsPatternNumMode();// 0x130b430
	void InitPatternNumID(int InNumID);// 0x130b3bc
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x1c01fa0

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0, Size: 0x1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 0x28]
	float IconScale;//[Offset: 0x30, Size: 0x4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 0x28]
	float IconScale;//[Offset: 0x60, Size: 0x4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 0x10]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 0xc]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 0xc]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int SkipFrame;//[Offset: 0x0, Size: 0x4]
	int SkipAnimCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c, Size: 0x4]
	int subSlotID;//[Offset: 0x20, Size: 0x4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24, Size: 0x4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28, Size: 0x4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c, Size: 0x4]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 0x4]
	MeshData EntityMeshData;//[Offset: 0x38, Size: 0x60]
	MeshData CachedEntityMeshData;//[Offset: 0x98, Size: 0x60]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 0x1]
	FName SocketName;//[Offset: 0x100, Size: 0x8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x108, Size: 0xc]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118, Size: 0x18]
	ItemDefineID ParentDefineID;//[Offset: 0x130, Size: 0x18]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x148, Size: 0x3c]
	void UpdateVisibility();// 0x12fe928
	void UnRegisterTick();// 0x12fe90c
	void TickEntity();// 0x12fe8f0
	void SetSocketName();// 0x12fe8d4
	void SetParentDefineID(ItemDefineID ParentID);// 0x12fe848
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x12fe770
	void RevertEntityMeshData();// 0x12fe75c
	void RenderEntity(out SoftObjectPath SoftPath);// 0x12fe680
	void RegisterTick();// 0x12fe664
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x12fe5dc
	void PutOnDefaultEquipment(enum slotType);// 0x12fe55c
	void OnPostRender();// 0x12fe540
	bool IsEntityAvailable(enum VisibilityType);// 0x12fe4b8
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x12fe3ec
	void Init(int SlotID, int subSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x12fe2e4
	enum GetMeshType();// 0x12fe2b4
	MeshData GetMeshData();// 0x12fe250
	BattleItemHandleBase* GetLoadedHandle();// 0x12fe228
	ItemDefineID GetDefineID();// 0x12fe1d4
	void EnterRenderPipeline();// 0x12fe1b8
	void EnterLogicPipeline();// 0x12fe19c
	void DrawOutline(bool bEnable);// 0x12fe114
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x12fe030
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x12fdf64
	void ClearEquipmentLogic(bool putDefault);// 0x12fdedc
	void ClearEntity(bool ForceClear);// 0x12fde54
	void ApplyAnimation();// 0x12fde38
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x12fddb8

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x5e4, Size: 0x4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x5e8, Size: 0x4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x5ec, Size: 0x4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x5f0, Size: 0x4]
	void SetupAttachMeshComponent(MeshComponent* meshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x13568e0
	Actor* GetBindOwner();// 0x13568b8
	MeshComponent* GetAttachedMeshComponent();// 0x135689c
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* meshComp, FName SocketName, out const Transform RelativeTrans);// 0x13566c0
	void BindOwner(Actor* Owner);// 0x1356640
	void BindEvent(bool bShowWidget);// 0x13565b8

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x519, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x51a, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x51c, Size: 0x4]
	IntPoint DrawSize;//[Offset: 0x520, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1]
	float RedrawTime;//[Offset: 0x52c, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x538, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x544, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x550, Size: 0x4]
	LinearColor BackgroundColor;//[Offset: 0x554, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x564, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x574, Size: 0x4]
	enum BlendMode;//[Offset: 0x578, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x57c, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x590, Size: 0x4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x594, Size: 0x4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x598, Size: 0x4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x59c, Size: 0x4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x5a0, Size: 0x4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x5a4, Size: 0x4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x5a8, Size: 0x4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x5ac, Size: 0x4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x5b0, Size: 0x4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x5b8, Size: 0x8]
	int LayerZOrder;//[Offset: 0x5c0, Size: 0x4]
	enum GeometryMode;//[Offset: 0x5c4, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x5c8, Size: 0x4]
	void SetWidget(UserWidget* Widget);// 0x23b4598
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x23b451c
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x23b44a4
	void SetDrawSize(Vector2D Size);// 0x23b4434
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x23b43b8
	void RequestRedraw();// 0x23b439c
	UserWidget* GetUserWidgetObject();// 0x23b4374
	TextureRenderTarget2D* GetRenderTarget();// 0x23b434c
	LocalPlayer* GetOwnerPlayer();// 0x23b4324
	MaterialInstanceDynamic* GetMaterialInstance();// 0x23b42fc
	Vector2D GetDrawSize();// 0x23b42bc

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int subSlotID);// 0x1300138

--------------------------------
Class: AvatarHandleBase.ItemHandleBase.Object
	bool bEnableBPModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	int SlotID;//[Offset: 0x88, Size: 0x4]
	bool HandlePreApplyResource(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x1300b40
	bool HandlePostApplyResource(MeshComponent* InMeshComp, Object* Outer);// 0x1300a74

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28, Size: 0x4]
	Pawn* OwnerPawn;//[Offset: 0x2c, Size: 0x4]
	Controller* OwnerController;//[Offset: 0x30, Size: 0x4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34, Size: 0x4]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x1c01fa0
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x1552400
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x1552344
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x155231c
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x15522f4
	PlayerController* GetOwnerPlayerController();// 0x15522cc
	Pawn* GetOwnerPawn();// 0x15522a4
	Controller* GetOwnerController();// 0x155227c
	Actor* GetOwnerActor();// 0x1552260

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponID;//[Offset: 0xd0, Size: 0x4]
	byte WeaponType;//[Offset: 0xd4, Size: 0x1]
	byte WeaponTypeNew;//[Offset: 0xd5, Size: 0x1]
	byte WeaponHoldType;//[Offset: 0xd6, Size: 0x1]
	FName WeaponAttachSocket;//[Offset: 0xd8, Size: 0x8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0xe8, Size: 0x8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	int MaxNoGravityRange;//[Offset: 0xf4, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0xf8, Size: 0x4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	int UnableProneHoldingTipID;//[Offset: 0x100, Size: 0x4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1]
	int UnableShovelHoldingTipID;//[Offset: 0x108, Size: 0x4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	int UnablePeekTipID;//[Offset: 0x110, Size: 0x4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x118, Size: 0x3c]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x154, Size: 0x3c]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x190, Size: 0x4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x194, Size: 0x4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x198, Size: 0xc]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x1b0, Size: 0x30]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x1e0, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x210, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x240, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x270, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2a0, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x2d0, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x300, Size: 0x30]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x330, Size: 0x4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xc4, Size: 0x4]
	STExtraPlayerController* GlobalController;//[Offset: 0xcc, Size: 0x4]
	void UpdateComponentTick();// 0x134e440
	STExtraWeapon* TryGetOwnerWeapon();// 0x154ab54
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x154ab2c
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x154aa68
	bool IsWeaponOwnerOBTarget();// 0x154aa40
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x154a9c0
	bool IsWeaponLogicComponentTickEnabled();// 0x154a998
	bool IsLocalOrSpectorPlayer();// 0x154a970
	byte GetOwnerPawnRole();// 0x154a948

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 0x150]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x150, Size: 0x18]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc, Size: 0x1]
	SlateBrush SmallProfileImage;//[Offset: 0x10, Size: 0x90]
	SlateBrush LargerProfileImage;//[Offset: 0xa0, Size: 0x90]
	FString Name;//[Offset: 0x130, Size: 0xc]
	FString Description;//[Offset: 0x13c, Size: 0xc]
	int DisplayPriority;//[Offset: 0x148, Size: 0x4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4, Size: 0x4]
	int PickUpSoundID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc, Size: 0x4]
	byte Type;//[Offset: 0x10, Size: 0x1]
	StaticMesh* ShowMesh;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 0x4]
	Actor* WeaponOwner;//[Offset: 0x4, Size: 0x4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	FString OwnerPlayerName;//[Offset: 0xc, Size: 0xc]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18, Size: 0x8]
	int WeaponBulletNumInClip;//[Offset: 0x20, Size: 0x4]
	uint32 WeaponShootID;//[Offset: 0x24, Size: 0x4]
	uint32 WeaponClipID;//[Offset: 0x28, Size: 0x4]
	byte CurWeaponState;//[Offset: 0x2c, Size: 0x1]
	byte CurShootType;//[Offset: 0x2d, Size: 0x1]
	int CurShootTotalType;//[Offset: 0x30, Size: 0x4]
	ItemDefineID DefineID;//[Offset: 0x38, Size: 0x18]
	int BackpackPistolListIndex;//[Offset: 0x50, Size: 0x4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	int OperationIndex;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0xd0, Size: 0x3c]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x10c, Size: 0xc]
	float PistolCenterDownDis;//[Offset: 0x118, Size: 0x4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x120, Size: 0x4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x128, Size: 0x4]
	float RotateAngle;//[Offset: 0x12c, Size: 0x4]
	STExtraPlayerController* PlayerController;//[Offset: 0x130, Size: 0x4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x134, Size: 0x4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x138, Size: 0x4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x13c, Size: 0x4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x140, Size: 0x4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x144, Size: 0x4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x148, Size: 0x4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x14c, Size: 0x4]
	Texture2D* CrossHairShotGun;//[Offset: 0x150, Size: 0x4]
	void UpdateComponentTick();// 0x134e440
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x134e37c
	void DrawSpreadEnd();// 0x134e368
	void DrawDebugPointEnd();// 0x134e354

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 0xc]
	enum SpreadType;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 0x14]
	float Offset;//[Offset: 0x14, Size: 0x4]
	Vector2D IconOffset;//[Offset: 0x18, Size: 0x8]
	float alpha;//[Offset: 0x20, Size: 0x4]
	float Rotate;//[Offset: 0x24, Size: 0x4]
	float Scale;//[Offset: 0x28, Size: 0x4]
	float IconRotate;//[Offset: 0x2c, Size: 0x4]
	float LogicRotate;//[Offset: 0x30, Size: 0x4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 0x4]
	float U;//[Offset: 0x4, Size: 0x4]
	float V;//[Offset: 0x8, Size: 0x4]
	float UL;//[Offset: 0xc, Size: 0x4]
	float VL;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x33c, Size: 0x4]
	float BulletFireSpeed;//[Offset: 0x340, Size: 0x4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x348, Size: 0x4]
	int MaxBulletNumInOneClip;//[Offset: 0x34c, Size: 0x4]
	int MaxBulletNumInBarrel;//[Offset: 0x350, Size: 0x4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x354, Size: 0x4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x358, Size: 0xc]
	float ShootInterval;//[Offset: 0x364, Size: 0x4]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 0x1]
	int BurstShootBulletsNum;//[Offset: 0x36c, Size: 0x4]
	float BurstShootInterval;//[Offset: 0x370, Size: 0x4]
	float BurstShootCD;//[Offset: 0x374, Size: 0x4]
	int BulletNumSingleShot;//[Offset: 0x378, Size: 0x4]
	FName MuzzleSocketName;//[Offset: 0x380, Size: 0x8]
	FName DefaultMuzzleSocketName;//[Offset: 0x388, Size: 0x8]
	FName SilencerSocketName;//[Offset: 0x390, Size: 0x8]
	FName FiringSuppressorSocketName;//[Offset: 0x398, Size: 0x8]
	FName ShellDropSocketName;//[Offset: 0x3a0, Size: 0x8]
	FName ScopeAimCameraSocketName;//[Offset: 0x3a8, Size: 0x8]
	float ImpactEffectSkipDistance;//[Offset: 0x3b0, Size: 0x4]
	float MaxImpactEffectSkipTime;//[Offset: 0x3b4, Size: 0x4]
	byte shootType;//[Offset: 0x3b8, Size: 0x1]
	int ShootTotalType;//[Offset: 0x3bc, Size: 0x4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	float WeaponWarnUpTime;//[Offset: 0x3c4, Size: 0x4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x3c8, Size: 0x14]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x3dc, Size: 0x14]
	float BaseImpactDamage;//[Offset: 0x3f0, Size: 0x4]
	float BulletRange;//[Offset: 0x3f4, Size: 0x4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x3f8, Size: 0x4]
	byte ImpactDirType;//[Offset: 0x3fc, Size: 0x1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x400, Size: 0xc]
	float RangeModifier;//[Offset: 0x40c, Size: 0x4]
	float ReferenceDistance;//[Offset: 0x410, Size: 0x4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x414, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x418, Size: 0x4]
	ItemDefineID BulletType;//[Offset: 0x420, Size: 0x18]
	ItemDefineID ReplaceBulletType;//[Offset: 0x438, Size: 0x18]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1]
	int InitBulletInClip;//[Offset: 0x454, Size: 0x4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	float TraceDistance;//[Offset: 0x45c, Size: 0x4]
	float MaxValidHitTime;//[Offset: 0x460, Size: 0x4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x464, Size: 0x3c]
	float MaxDamageRate;//[Offset: 0x4a0, Size: 0x4]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x4a8, Size: 0x4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x4ac, Size: 0x38]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x4e4, Size: 0x8]
	float DamageImpulse;//[Offset: 0x4ec, Size: 0x4]
	byte ReloadType;//[Offset: 0x4f0, Size: 0x1]
	float PreFireTime;//[Offset: 0x4f4, Size: 0x4]
	float PostFireTime;//[Offset: 0x4f8, Size: 0x4]
	float PostReloadTime;//[Offset: 0x4fc, Size: 0x4]
	float ReloadDurationStart;//[Offset: 0x500, Size: 0x4]
	float ReloadDurationLoop;//[Offset: 0x504, Size: 0x4]
	float ReloadTime;//[Offset: 0x508, Size: 0x4]
	float ReloadTimeTactical;//[Offset: 0x50c, Size: 0x4]
	float ReloadTimeMagOut;//[Offset: 0x510, Size: 0x4]
	float ReloadTimeMagIn;//[Offset: 0x514, Size: 0x4]
	FName ReloadAllTIDName;//[Offset: 0x518, Size: 0x8]
	FName ReloadTacticalTIDName;//[Offset: 0x520, Size: 0x8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	int ReloadSpecificBulletNum;//[Offset: 0x52c, Size: 0x4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x534, Size: 0xf4]
	AutoAimingConfig[] AutoAimingConfigList;//[Offset: 0x628, Size: 0xc]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	SRecoilInfo RecoilInfo;//[Offset: 0x63c, Size: 0x64]
	float AccessoriesVRecoilFactor;//[Offset: 0x6a0, Size: 0x4]
	float AccessoriesHRecoilFactor;//[Offset: 0x6a4, Size: 0x4]
	float AccessoriesRecoveryFactor;//[Offset: 0x6a8, Size: 0x4]
	SDeviation DeviationInfo;//[Offset: 0x6ac, Size: 0x40]
	float ShotGunVerticalSpread;//[Offset: 0x6ec, Size: 0x4]
	float ShotGunHorizontalSpread;//[Offset: 0x6f0, Size: 0x4]
	float GameDeviationFactor;//[Offset: 0x6f4, Size: 0x4]
	float GameDeviationAccuracy;//[Offset: 0x6f8, Size: 0x4]
	float AccessoriesDeviationFactor;//[Offset: 0x6fc, Size: 0x4]
	byte CrossHairType;//[Offset: 0x700, Size: 0x1]
	float CrossHairInitialSize;//[Offset: 0x704, Size: 0x4]
	float CrossHairBurstSpeed;//[Offset: 0x708, Size: 0x4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x70c, Size: 0x4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x710, Size: 0x4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 0x1]
	FName DefaultScopeSocket;//[Offset: 0x718, Size: 0x8]
	FName DefaultGripSocket;//[Offset: 0x720, Size: 0x8]
	FName DefaultGunStockSocket;//[Offset: 0x728, Size: 0x8]
	FName DefaultMagSocket;//[Offset: 0x730, Size: 0x8]
	float WeaponBodyLength;//[Offset: 0x738, Size: 0x4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x73c, Size: 0xc]
	float WeaponAimFOV;//[Offset: 0x74c, Size: 0x4]
	float WeaponAimInTime;//[Offset: 0x750, Size: 0x4]
	float WeaponAimPitchRate;//[Offset: 0x754, Size: 0x4]
	float WeaponAimYawRate;//[Offset: 0x758, Size: 0x4]
	float GameMotionYawRate;//[Offset: 0x75c, Size: 0x4]
	float GameMotionPitchRate;//[Offset: 0x760, Size: 0x4]
	float ForegripParam;//[Offset: 0x764, Size: 0x4]
	float MagParam;//[Offset: 0x768, Size: 0x4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 0x1]
	float SensitiveFireYawRate;//[Offset: 0x770, Size: 0x4]
	float SensitiveFirePitchRate;//[Offset: 0x774, Size: 0x4]
	byte SightType;//[Offset: 0x778, Size: 0x1]
	ItemDefineID DefaultScopeID;//[Offset: 0x780, Size: 0x18]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x798, Size: 0x4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x79c, Size: 0x4]
	float RecoilKickADS;//[Offset: 0x7a0, Size: 0x4]
	float ExtraHitPerformScale;//[Offset: 0x7a4, Size: 0x4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x7a8, Size: 0x4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 0x1]
	enum ReleaseFireType;//[Offset: 0x7ad, Size: 0x1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ae, Size: 0x1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7af, Size: 0x1]
	float LockAnimPitchDegree;//[Offset: 0x7b0, Size: 0x4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x7b4, Size: 0x4]
	float AnimationKick;//[Offset: 0x7b8, Size: 0x4]
	int ReloadAnimSlot;//[Offset: 0x7bc, Size: 0x4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 0x1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c2, Size: 0x1]
	byte[] CoronaEffectCfg;//[Offset: 0x7c4, Size: 0xc]
	void ReloadNoEncodeAttr();// 0x141ae70
	void ReloadEncodeAttr();// 0x141ae5c
	void ReloadCanModifyInGameAttr(FString AttrName, float NewValue);// 0x141acc0
	void ReloadAttr();// 0x141acac
	ItemDefineID GetBulletType();// 0x141ac60
	FString GetAttrReloadTableName();// 0x141aba0
	void EncodeAttr();// 0x141ab8c

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x2c8, Size: 0x4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	int MaxNoGravityRange;//[Offset: 0x2d0, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0x2d4, Size: 0x4]
	int PunctureTimes;//[Offset: 0x2d8, Size: 0x4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x2dc, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x2e0, Size: 0x4]
	ParticleSystem* NormalTailFX;//[Offset: 0x2e4, Size: 0x4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	ParticleSystem* BeamTailFX;//[Offset: 0x2ec, Size: 0x4]
	Vector RootScale;//[Offset: 0x2f0, Size: 0xc]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	Vector ShootDir;//[Offset: 0x300, Size: 0xc]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	delegate OnResetBullet;//[Offset: 0x400, Size: 0xc]
	delegate OnBulletImpact;//[Offset: 0x40c, Size: 0xc]
	delegate OnLaunchBullet;//[Offset: 0x418, Size: 0xc]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x424, Size: 0x4]
	Actor* WeaponOwnerPawn;//[Offset: 0x428, Size: 0x4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x42c, Size: 0x4]
	float WeaponFloorHeight;//[Offset: 0x49c, Size: 0x4]
	Vector WeaponOwnerPos;//[Offset: 0x4a0, Size: 0xc]
	byte CachedOwnerRole;//[Offset: 0x4ac, Size: 0x1]
	uint32 OwnerPlayerKey;//[Offset: 0x4b0, Size: 0x4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 0x1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 0x1]
	int MaxTraceTimes;//[Offset: 0x4b8, Size: 0x4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1]
	void ResetBulletDelegate__DelegateSignature();// 0x1c01fa0
	void ReloadNoEncodeAttr();// 0x12ee368
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x132e090
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x1c01fa0
	void OnImpact(out const HitResult _ImpactResult);// 0x132dfec
	bool NeedCheckBulletFlySound();// 0x1492474
	void LaunchBulletDelegate__DelegateSignature();// 0x1c01fa0
	float GetMaxBulletFlySpeed();// 0x1413dd0
	bool ClientVerifyBlock(out Vector MuzzlePos, out Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x14d78e4

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 0x1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 0x1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x158, Size: 0x4]
	void ResumeMoveAfterImpactWithNoLost();// 0x133bd90
	void ResetTickDelay();// 0x133bd74
	void IgnoreBounceReflectOnce();// 0x133bd58
	void ForceStop();// 0x133bd44

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	ParticleSystem* DefaultFX;//[Offset: 0x2cc, Size: 0x4]
	ParticleSystem* ConcreteFX;//[Offset: 0x2d0, Size: 0x4]
	ParticleSystem* DirtFX;//[Offset: 0x2d4, Size: 0x4]
	ParticleSystem* WaterFX;//[Offset: 0x2d8, Size: 0x4]
	ParticleSystem* MetalFX;//[Offset: 0x2dc, Size: 0x4]
	ParticleSystem* WoodFX;//[Offset: 0x2e0, Size: 0x4]
	ParticleSystem* GlassFX;//[Offset: 0x2e4, Size: 0x4]
	ParticleSystem* GrassFX;//[Offset: 0x2e8, Size: 0x4]
	ParticleSystem* FleshFX;//[Offset: 0x2ec, Size: 0x4]
	ParticleSystem* SteelFX;//[Offset: 0x2f0, Size: 0x4]
	ParticleSystem* SandbagFX;//[Offset: 0x2f4, Size: 0x4]
	ParticleSystem* SandFX;//[Offset: 0x2f8, Size: 0x4]
	ParticleSystem* ClothFX;//[Offset: 0x2fc, Size: 0x4]
	ParticleSystem* PlasticFX;//[Offset: 0x300, Size: 0x4]
	ParticleSystem* LeatherFX;//[Offset: 0x304, Size: 0x4]
	ParticleSystem* CeramicsFX;//[Offset: 0x308, Size: 0x4]
	ParticleSystem* PaperFX;//[Offset: 0x30c, Size: 0x4]
	ParticleSystem* StoneFX;//[Offset: 0x310, Size: 0x4]
	ParticleSystem* SnowFX;//[Offset: 0x314, Size: 0x4]
	ParticleSystem* PopCanFX;//[Offset: 0x318, Size: 0x4]
	ParticleSystem* PyreflyFX;//[Offset: 0x31c, Size: 0x4]
	ParticleSystem* LeafFX;//[Offset: 0x320, Size: 0x4]
	ParticleSystem* CarFX;//[Offset: 0x324, Size: 0x4]
	ParticleSystem* AsphaltFX;//[Offset: 0x328, Size: 0x4]
	ParticleSystem* IceFX;//[Offset: 0x32c, Size: 0x4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	AkAudioEvent* DefaultSound;//[Offset: 0x338, Size: 0x4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x33c, Size: 0x4]
	AkAudioEvent* DirtSound;//[Offset: 0x340, Size: 0x4]
	AkAudioEvent* WaterSound;//[Offset: 0x344, Size: 0x4]
	AkAudioEvent* MetalSound;//[Offset: 0x348, Size: 0x4]
	AkAudioEvent* WoodSound;//[Offset: 0x34c, Size: 0x4]
	AkAudioEvent* GlassSound;//[Offset: 0x350, Size: 0x4]
	AkAudioEvent* GrassSound;//[Offset: 0x354, Size: 0x4]
	AkAudioEvent* FleshSound;//[Offset: 0x358, Size: 0x4]
	AkAudioEvent* SteelSound;//[Offset: 0x35c, Size: 0x4]
	AkAudioEvent* SandbagSound;//[Offset: 0x360, Size: 0x4]
	AkAudioEvent* SandSound;//[Offset: 0x364, Size: 0x4]
	AkAudioEvent* ClothSound;//[Offset: 0x368, Size: 0x4]
	AkAudioEvent* PlasticSound;//[Offset: 0x36c, Size: 0x4]
	AkAudioEvent* LeatherSound;//[Offset: 0x370, Size: 0x4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x374, Size: 0x4]
	AkAudioEvent* PaperSound;//[Offset: 0x378, Size: 0x4]
	AkAudioEvent* StoneSound;//[Offset: 0x37c, Size: 0x4]
	AkAudioEvent* SnowSound;//[Offset: 0x380, Size: 0x4]
	AkAudioEvent* PopCanSound;//[Offset: 0x384, Size: 0x4]
	AkAudioEvent* PyreflySound;//[Offset: 0x388, Size: 0x4]
	AkAudioEvent* LeafSound;//[Offset: 0x38c, Size: 0x4]
	AkAudioEvent* CarSound;//[Offset: 0x390, Size: 0x4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x394, Size: 0x4]
	AkAudioEvent* IceSound;//[Offset: 0x398, Size: 0x4]
	DecalData DefaultDecal;//[Offset: 0x39c, Size: 0x1c]
	DecalData ConcreteDecal;//[Offset: 0x3b8, Size: 0x1c]
	DecalData DirtDecal;//[Offset: 0x3d4, Size: 0x1c]
	DecalData WaterDecal;//[Offset: 0x3f0, Size: 0x1c]
	DecalData MetalDecal;//[Offset: 0x40c, Size: 0x1c]
	DecalData WoodDecal;//[Offset: 0x428, Size: 0x1c]
	DecalData GrassDecal;//[Offset: 0x444, Size: 0x1c]
	DecalData GlassDecal;//[Offset: 0x460, Size: 0x1c]
	DecalData FleshDecal;//[Offset: 0x47c, Size: 0x1c]
	DecalData SteelDecal;//[Offset: 0x498, Size: 0x1c]
	DecalData SandbagDecal;//[Offset: 0x4b4, Size: 0x1c]
	DecalData SandDecal;//[Offset: 0x4d0, Size: 0x1c]
	DecalData ClothDecal;//[Offset: 0x4ec, Size: 0x1c]
	DecalData PlasticDecal;//[Offset: 0x508, Size: 0x1c]
	DecalData LeatherDecal;//[Offset: 0x524, Size: 0x1c]
	DecalData CeramicsDecal;//[Offset: 0x540, Size: 0x1c]
	DecalData PaperDecal;//[Offset: 0x55c, Size: 0x1c]
	DecalData StoneDecal;//[Offset: 0x578, Size: 0x1c]
	DecalData SnowDecal;//[Offset: 0x594, Size: 0x1c]
	DecalData PopCanDecal;//[Offset: 0x5b0, Size: 0x1c]
	DecalData PyreflyDecal;//[Offset: 0x5cc, Size: 0x1c]
	DecalData LeafDecal;//[Offset: 0x5e8, Size: 0x1c]
	DecalData CarDecal;//[Offset: 0x604, Size: 0x1c]
	DecalData AsphaltDecal;//[Offset: 0x620, Size: 0x1c]
	DecalData IceDecal;//[Offset: 0x63c, Size: 0x1c]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x660, Size: 0xf0]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 0x1]
	<float,float> DamageScaleMap;//[Offset: 0x754, Size: 0x3c]
	DecalComponent* ImpactDecalComp;//[Offset: 0x790, Size: 0x4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x794, Size: 0x4]
	SceneComponent* TargetImpactComp;//[Offset: 0x7bc, Size: 0x4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x7fc, Size: 0x4]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0x800, Size: 0x3c]
	void TimerHideDecal();// 0x143fdf4

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 0x4]
	float LifeSpan;//[Offset: 0x4, Size: 0x4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 0x4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 0x4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 0x4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 0x4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 0xc]
	Vector VictimLocation;//[Offset: 0x18, Size: 0xc]
	Vector BulletPos;//[Offset: 0x24, Size: 0xc]
	Vector ShootMomentMuzzlePos;//[Offset: 0x30, Size: 0xc]
	Vector2D ShootDir2D;//[Offset: 0x3c, Size: 0x8]
	byte SurfaceType;//[Offset: 0x44, Size: 0x1]
	uint32 ShootID;//[Offset: 0x48, Size: 0x4]
	uint16 CompensationTime;//[Offset: 0x4c, Size: 0x2]
	Actor* Actor;//[Offset: 0x50, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x58, Size: 0x8]
	int TimeStamp;//[Offset: 0x60, Size: 0x4]
	int ClientShootTime;//[Offset: 0x64, Size: 0x4]
	byte HitBodyType;//[Offset: 0x68, Size: 0x1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x6c, Size: 0x4]
	float MuzzleFloorHeight;//[Offset: 0x70, Size: 0x4]
	Vector WeaponOwnerPos;//[Offset: 0x74, Size: 0xc]
	Vector WeaponOwnerHeadPos;//[Offset: 0x80, Size: 0xc]
	float DamageRate;//[Offset: 0x8c, Size: 0x4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	double SystemTimeStamp;//[Offset: 0x98, Size: 0x8]
	Vector GunTailPos;//[Offset: 0xa0, Size: 0xc]
	FName BoneName;//[Offset: 0xb0, Size: 0x8]
	Transform BoneTrans;//[Offset: 0xc0, Size: 0x30]

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0, Size: 0x4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 0x4]
	float Body;//[Offset: 0x4, Size: 0x4]
	float Limbs;//[Offset: 0x8, Size: 0x4]
	float Hand;//[Offset: 0xc, Size: 0x4]
	float Foot;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 0x4]
	int rangeEnd;//[Offset: 0x4, Size: 0x4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 0x18]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18, Size: 0x18]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 0x8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8, Size: 0x8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 0x4c]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c, Size: 0x4c]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98, Size: 0x4c]
	float followTimeMax;//[Offset: 0xe4, Size: 0x4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	CurveFloat* SpeedCurve;//[Offset: 0xec, Size: 0x4]
	float MaxAngle;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 0x4]
	float RangeRate;//[Offset: 0x4, Size: 0x4]
	float SpeedRate;//[Offset: 0x8, Size: 0x4]
	float RangeRateSight;//[Offset: 0xc, Size: 0x4]
	float SpeedRateSight;//[Offset: 0x10, Size: 0x4]
	float CrouchRate;//[Offset: 0x14, Size: 0x4]
	float ProneRate;//[Offset: 0x18, Size: 0x4]
	float DyingRate;//[Offset: 0x1c, Size: 0x4]
	float DriveVehicleRate;//[Offset: 0x20, Size: 0x4]
	float InVehicleRate;//[Offset: 0x24, Size: 0x4]
	float FreeFallRate;//[Offset: 0x28, Size: 0x4]
	float OpeningRate;//[Offset: 0x2c, Size: 0x4]
	float LandingRate;//[Offset: 0x30, Size: 0x4]
	float adsorbMaxRange;//[Offset: 0x34, Size: 0x4]
	float adsorbMinRange;//[Offset: 0x38, Size: 0x4]
	float adsorbMinAttenuationDis;//[Offset: 0x3c, Size: 0x4]
	float adsorbMaxAttenuationDis;//[Offset: 0x40, Size: 0x4]
	float adsorbActiveMinRange;//[Offset: 0x44, Size: 0x4]
	CurveFloat* SpeedCurve;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 0x4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 0x4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 0x4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 0x4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 0x4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 0x4]
	float LeftMax;//[Offset: 0x18, Size: 0x4]
	float RightMax;//[Offset: 0x1c, Size: 0x4]
	float HorizontalTendency;//[Offset: 0x20, Size: 0x4]
	CurveVector* RecoilCurve;//[Offset: 0x24, Size: 0x4]
	int BulletPerSwitch;//[Offset: 0x28, Size: 0x4]
	float TimePerSwitch;//[Offset: 0x2c, Size: 0x4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float RecoilSpeedVertical;//[Offset: 0x34, Size: 0x4]
	float RecoilSpeedHorizontal;//[Offset: 0x38, Size: 0x4]
	float RecovertySpeedVertical;//[Offset: 0x3c, Size: 0x4]
	float RecoilValueClimb;//[Offset: 0x40, Size: 0x4]
	float RecoilValueFail;//[Offset: 0x44, Size: 0x4]
	float RecoilModifierStand;//[Offset: 0x48, Size: 0x4]
	float RecoilModifierCrouch;//[Offset: 0x4c, Size: 0x4]
	float RecoilModifierProne;//[Offset: 0x50, Size: 0x4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54, Size: 0x4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 0x4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	float ShootSightReturnSpeed;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 0x4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 0x4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 0x4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 0x4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 0x4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 0x4]
	float DeviationMax;//[Offset: 0x18, Size: 0x4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 0x4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 0x4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 0x4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 0x4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 0x4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 0x4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 0x4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 0x4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xd0, Size: 0x4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0xd4, Size: 0x4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xd8, Size: 0x4]
	int UseTss;//[Offset: 0x138, Size: 0x4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	void OnWeaponStopFire();// 0x133c570
	void OnWeaponStartFire();// 0x133c55c
	void OnWeaponShoot();// 0x133c548
	void GetDataFromWeaponEntity();// 0x133c534
	Vector GetCurRecoilInfo();// 0x133c4ec
	float GetCurDeviation();// 0x133c4c4
	void CheckComponentTick();// 0x133c4b0

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c, Size: 0x4]
	Vector2D Position;//[Offset: 0x20, Size: 0x8]
	Vector2D Size;//[Offset: 0x28, Size: 0x8]
	Vector2D Origin;//[Offset: 0x30, Size: 0x8]
	Vector2D ScreenPosition;//[Offset: 0x38, Size: 0x8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	float Opacity;//[Offset: 0x44, Size: 0x4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c, Size: 0x4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50, Size: 0x4]
	Pawn* CharacterOwner;//[Offset: 0x54, Size: 0x4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	float LastRenderTime;//[Offset: 0x5c, Size: 0x4]
	Vector2D RenderPosition;//[Offset: 0x60, Size: 0x8]
	Vector2D RenderSize;//[Offset: 0x68, Size: 0x8]
	float RenderScale;//[Offset: 0x70, Size: 0x4]
	Vector2D CanvasCenter;//[Offset: 0x74, Size: 0x8]
	Canvas* Canvas;//[Offset: 0x7c, Size: 0x4]
	float AspectScale;//[Offset: 0x80, Size: 0x4]
	Vector2D CanvasClip;//[Offset: 0x84, Size: 0x8]
	StructProperty*[] RenderObjectList;//[Offset: 0x8c, Size: 0xc]
	bool ShouldDraw(bool bShowScores);// 0x1307ea0
	void SetHidden(bool bIsHidden);// 0x13a573c
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x13a54cc
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x13a5338
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x13a51e4
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x13a50d8
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x13a4c4c
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x13a44e0
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x13a40b4
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x13a3ff8
	void Draw(float DeltaTime);// 0x133d4b4
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x13a3f5c

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 0x1]
	Vector MarkerPosition;//[Offset: 0x370, Size: 0xc]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	HitPerformData HitPerform;//[Offset: 0x380, Size: 0x74]
	Texture2D* HUDMainTexture;//[Offset: 0x3f4, Size: 0x4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x3f8, Size: 0x4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x3fc, Size: 0x4]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x404, Size: 0xc]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x410, Size: 0xc]
	Texture2D* HUDPlayerTexture;//[Offset: 0x428, Size: 0x4]
	CanvasIcon Crosshair;//[Offset: 0x42c, Size: 0x14]
	CanvasIcon ProgreesBar;//[Offset: 0x490, Size: 0x14]
	CanvasIcon BKProgreesBar;//[Offset: 0x4a4, Size: 0x14]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x4b8, Size: 0x14]
	CanvasIcon Marker;//[Offset: 0x4e0, Size: 0x14]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x4f4, Size: 0x4]
	CanvasIcon WORLDMAP;//[Offset: 0x4f8, Size: 0x14]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x50c, Size: 0x4]
	void OnAsyncLoadingFinished();// 0x14f3fe4
	void EnableCrosshair(bool bEnable);// 0x14f3f68

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 0xc]
	float DefaultSpread;//[Offset: 0xc, Size: 0x4]
	float SpreadMax;//[Offset: 0x10, Size: 0x4]
	float AddSpreadScale;//[Offset: 0x14, Size: 0x4]
	float SpreadDecreaseSpeed;//[Offset: 0x18, Size: 0x4]
	float DefaultOffset;//[Offset: 0x1c, Size: 0x4]
	float DefaultAlpha;//[Offset: 0x20, Size: 0x4]
	float AlphaDecreaseSpeed;//[Offset: 0x24, Size: 0x4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	enum HitPosition;//[Offset: 0x29, Size: 0x1]
	LinearColor HitBodyDrawColor;//[Offset: 0x2c, Size: 0x10]
	LinearColor HitHeadDrawColor;//[Offset: 0x3c, Size: 0x10]
	LinearColor HitLimbsDrawColor;//[Offset: 0x4c, Size: 0x10]
	AkAudioEvent* HeadShotSound;//[Offset: 0x5c, Size: 0x4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x60, Size: 0x4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x64, Size: 0x4]
	float CurCrosshairSpread;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 0x4]
	float U;//[Offset: 0x4, Size: 0x4]
	float V;//[Offset: 0x8, Size: 0x4]
	float UL;//[Offset: 0xc, Size: 0x4]
	float VL;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30, Size: 0x4]
	TextureUVs UVs;//[Offset: 0x34, Size: 0x10]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48, Size: 0xc]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	Vector2D RenderOffset;//[Offset: 0x58, Size: 0x8]
	float Rotation;//[Offset: 0x60, Size: 0x4]
	Vector2D RotPivot;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float RenderPriority;//[Offset: 0x8, Size: 0x4]
	Vector2D Position;//[Offset: 0xc, Size: 0x8]
	Vector2D Size;//[Offset: 0x14, Size: 0x8]
	LinearColor RenderColor;//[Offset: 0x1c, Size: 0x10]
	float RenderOpacity;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 0x4]
	float V;//[Offset: 0x4, Size: 0x4]
	float UL;//[Offset: 0x8, Size: 0x4]
	float VL;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38, Size: 0xc]
	Font* Font;//[Offset: 0x44, Size: 0x4]
	float TextScale;//[Offset: 0x48, Size: 0x4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	Vector2D ShadowDirection;//[Offset: 0x50, Size: 0x8]
	LinearColor ShadowColor;//[Offset: 0x58, Size: 0x10]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	LinearColor OutlineColor;//[Offset: 0x6c, Size: 0x10]
	byte HorzPosition;//[Offset: 0x7c, Size: 0x1]
	byte VertPosition;//[Offset: 0x7d, Size: 0x1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 0x24]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 0x10]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 0x8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0xd0, Size: 0x4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 0x1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xdc, Size: 0x4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x138, Size: 0x4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	void HandleOnWeaponStopFire();// 0x133b980
	void HandleOnWeaponStartFire();// 0x133b96c
	bool CheckCloseDSTick();// 0x133b944
	void AddHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x133b7ac

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 0xc]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 0xc]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 0x4]
	int BulletDown;//[Offset: 0x20, Size: 0x4]
	int8 CurBullet;//[Offset: 0x24, Size: 0x1]
	int ShootInterval;//[Offset: 0x28, Size: 0x4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 0x4]
	int BulletShootTime;//[Offset: 0x30, Size: 0x4]
	int BulletHitTime;//[Offset: 0x34, Size: 0x4]
	int AimFov;//[Offset: 0x38, Size: 0x4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 0x1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 0xc]
	int64 ClientStartTime;//[Offset: 0x50, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 0xc]
	int AutoAimSpeed;//[Offset: 0x64, Size: 0x4]
	int AutoAimSpeedRateMax;//[Offset: 0x68, Size: 0x4]
	int AutoAimRangeMax;//[Offset: 0x6c, Size: 0x4]
	int AutoAimRangeRateMax;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0xd0, Size: 0x8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0xd8, Size: 0x8]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float DrawShootLineTime;//[Offset: 0xe4, Size: 0x4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	float DrawShootPointOnScreenTime;//[Offset: 0xec, Size: 0x4]
	float DrawShootPointOnScreenSize;//[Offset: 0xf0, Size: 0x4]
	float DrawShootPoint3DSize;//[Offset: 0xf4, Size: 0x4]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0xf8, Size: 0x4]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0xfc, Size: 0x4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x100, Size: 0x4]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int ContinuousShootingBulletsNum;//[Offset: 0x108, Size: 0x4]
	delegate OnShoot;//[Offset: 0x10c, Size: 0xc]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x118, Size: 0x4]
	void VehicleShoot();// 0x14d8194
	void ShootDelegate__DelegateSignature();// 0x1c01fa0
	void ReInitWeaponOwnerData();// 0x14d8180
	void OnWeaponClipMaxBulletChanged();// 0x14d816c
	void OnWeaponBulletChanged();// 0x14d8158
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x1c01fa0
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x1c01fa0
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity);// 0x14d8080
	bool CheckShootState();// 0x13de7a4
	Vector CalcShootTargetLocByStartAndRot(Vector Start, Rotator ShootRot, out HitResult OutHitResult);// 0x14d7f38

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x2ec, Size: 0x4]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x2f0, Size: 0x2c]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x31c, Size: 0xc]
	int LastShootTime;//[Offset: 0x32c, Size: 0x4]
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x1c01fa0
	bool CheckShootState();// 0x13de7a4

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x2e0, Size: 0xc]

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 0x4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 0x4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 0x4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 0x4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 0x4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 0x4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 0x4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x114, Size: 0x4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x118, Size: 0x4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x11c, Size: 0x4]
	float CameraShakeInnerRadius;//[Offset: 0x120, Size: 0x4]
	float CameraShakeOuterRadius;//[Offset: 0x124, Size: 0x4]
	float CameraShakFalloff;//[Offset: 0x128, Size: 0x4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bNeedDisableMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	ParticleSystem* MuzzleFX;//[Offset: 0x130, Size: 0x4]
	Vector LocalMuzzelFXScale;//[Offset: 0x134, Size: 0xc]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x140, Size: 0x4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x144, Size: 0xc]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x150, Size: 0x4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x154, Size: 0xc]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x160, Size: 0x10]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x170, Size: 0x4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x174, Size: 0xc]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x180, Size: 0x4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x184, Size: 0xc]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x190, Size: 0x4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x194, Size: 0xc]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x1a0, Size: 0x10]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x1b0, Size: 0x4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x1b4, Size: 0xc]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x1c0, Size: 0x4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x1c4, Size: 0xc]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x1d0, Size: 0x4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x1d4, Size: 0xc]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x1e0, Size: 0x10]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x1f0, Size: 0x4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x1f4, Size: 0xc]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x200, Size: 0x4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x204, Size: 0xc]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x210, Size: 0x4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x214, Size: 0xc]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	ParticleSystem* ShellDropFX;//[Offset: 0x224, Size: 0x4]
	Vector ShellDropFXScale;//[Offset: 0x228, Size: 0xc]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x234, Size: 0x4]
	Vector FPPShellDropFXScale;//[Offset: 0x238, Size: 0xc]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x244, Size: 0x4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x248, Size: 0x4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x24c, Size: 0x4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x250, Size: 0x4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x254, Size: 0xc]
	Vector MuzzleFXOriginalScale;//[Offset: 0x260, Size: 0xc]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x26c, Size: 0x4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x270, Size: 0x4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x274, Size: 0x4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x288, Size: 0xc]
	void ReloadAttr(int WeaponID);// 0x1419ec4
	void OnWeaponUnEquiped();// 0x1419eb0
	void OnWeaponEuiped();// 0x1419e9c
	void HandleWeaponAction(byte Action);// 0x1419e1c
	OBEffectBullet* GetOBEffectBullet();// 0x1419df4
	int GetAvailableOBEffectBulletNum();// 0x1419dcc
	void ActiveLocalShellDropFX();// 0x1419db8

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0xd0, Size: 0x3c]
	AkAudioEvent* ShellDropSound;//[Offset: 0x10c, Size: 0x4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x110, Size: 0x4]
	void HandleWeaponAction(byte Action);// 0x1419e1c

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 0x4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 0x4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 0x4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x2c8, Size: 0x4]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x2cc, Size: 0xc]
	ParticleSystem* CurFXTemplate;//[Offset: 0x2dc, Size: 0x4]
	float CurMovingTime;//[Offset: 0x308, Size: 0x4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	bool UseAttributeModifyRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	delegate OnAttrModified;//[Offset: 0xc0, Size: 0xc]
	int AttrGroup;//[Offset: 0xcc, Size: 0x4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0xd0, Size: 0xc]
	AttrModifyGroupItem[] ConfigAttrModifyGroupList;//[Offset: 0xdc, Size: 0xc]
	uint32 AttrModifyStateList;//[Offset: 0x1a0, Size: 0x4]
	bool[] AttrModifyGroupStateList;//[Offset: 0x1a4, Size: 0xc]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x1b0, Size: 0xc]
	int AttrModifyStateListNum;//[Offset: 0x1dc, Size: 0x4]
	AttributeExpand[] AttributeExpands;//[Offset: 0x1e0, Size: 0xc]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x1ec, Size: 0x7c]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x268, Size: 0x3c]
	void SetAttrModifyStateValue(int Index, bool Value);// 0x15b3660
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x15b34d4
	void OnRep_DynamicModifierList();// 0x15b34c0
	void OnRep_AttrModifyStateList();// 0x15b34ac
	void OnRep_AttrModifyGroupStateList();// 0x15b3498
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x1c01fa0
	bool IsAttrModifyStateValidIndex(int Index);// 0x15b3418
	bool GetAttrModifyStateValue(int Index);// 0x15b3398
	int GetAttrModifyStateNum();// 0x15b337c
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x15b30b0
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x15b2f50
	bool EnableAllAttrModifier();// 0x15b2f28
	bool DisableModifierToActor(Actor* TargetActor);// 0x15b2ea8
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x15b2d48
	bool DisableAllAttrModifier();// 0x15b2d20
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x15b2bcc

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 0xc]
	FString AttrModifyItemName;//[Offset: 0xc, Size: 0xc]
	FString AttrName;//[Offset: 0x18, Size: 0xc]
	byte AttrId;//[Offset: 0x24, Size: 0x1]
	enum ModifierOp;//[Offset: 0x25, Size: 0x1]
	float ModifierValue;//[Offset: 0x28, Size: 0x4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 0x8]
	float FinalAddValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AttrModifyGroupItem
	AttrModifyItem[] AttrModifyItem;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0, Size: 0xc]
	FString AttrDesc;//[Offset: 0xc, Size: 0xc]
	int RelateTypeId;//[Offset: 0x18, Size: 0x4]
	FString RelateGroup;//[Offset: 0x1c, Size: 0xc]
	float Value;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 0x3c]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c, Size: 0x3c]
	AttrModifyComponent* Component;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: AttrDynamicModifyTarget

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	FString AttrName;//[Offset: 0x4, Size: 0xc]
	FString LimitAttrName;//[Offset: 0x10, Size: 0xc]
	FString MaxAttrName;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 0xc]
	enum AttrVariableType;//[Offset: 0xc, Size: 0x1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 0xc]
	Actor* AffectedActor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WeaponAttrModifyConfig
	FString ModifyConfigID;//[Offset: 0x0, Size: 0xc]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 0xc]
	enum Op;//[Offset: 0xc, Size: 0x1]
	float ModifyValue;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 0xc]
	Vector ShootMomentMuzzlePos;//[Offset: 0x18, Size: 0xc]
	byte SurfaceType;//[Offset: 0x24, Size: 0x1]
	Actor* Actor;//[Offset: 0x28, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	float DamageImpulse;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0xc, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x18, Size: 0x88]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0, Size: 0xc]
	Vector TargetOffset;//[Offset: 0xc, Size: 0xc]
	float SpringArmLength;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x2c8, Size: 0xc]
	Vector LowThrowOffset;//[Offset: 0x2d4, Size: 0xc]
	byte ThrowMode;//[Offset: 0x2e0, Size: 0x1]
	float PredictLineVelocityScale;//[Offset: 0x2e4, Size: 0x4]
	float MaxSimTime;//[Offset: 0x2e8, Size: 0x4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x2ec, Size: 0x28]
	float GrenadeRadius;//[Offset: 0x314, Size: 0x4]
	Vector PredictLineStartLocation;//[Offset: 0x318, Size: 0xc]
	Vector PredictLineStartVelocity;//[Offset: 0x324, Size: 0xc]
	Vector LauncheVelocity;//[Offset: 0x330, Size: 0xc]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 0xc]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Vector HitActorLocation;//[Offset: 0x10, Size: 0xc]
	Rotator HitActorRotation;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	class UserWidget* SettleAccountUI;//[Offset: 0x1e28, Size: 0x28]
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x1e50, Size: 0xc]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x1e5c, Size: 0xc]
	delegate OnSkillFinishedDelegate;//[Offset: 0x1e68, Size: 0xc]
	delegate OnScopeOutDelegate;//[Offset: 0x1e74, Size: 0xc]
	delegate OnScopeInDelegate;//[Offset: 0x1e80, Size: 0xc]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x1e8c, Size: 0x4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x1e90, Size: 0x4]
	BoxComponent* BoxEar;//[Offset: 0x1e94, Size: 0x4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x1e98, Size: 0x4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x1e9c, Size: 0x4]
	float IndoorCheckDistance;//[Offset: 0x1ea0, Size: 0x4]
	float IndoorCheckTime;//[Offset: 0x1ea4, Size: 0x4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x1ea8, Size: 0x4]
	float IndoorLowerCameraHeight;//[Offset: 0x1eac, Size: 0x4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb0, Size: 0x1]
	float IndoorBodyAreaDistance;//[Offset: 0x1eb4, Size: 0x4]
	float mfTickDuration;//[Offset: 0x1eb8, Size: 0x4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x1ec0, Size: 0x18]
	Color DyeingColor;//[Offset: 0x1ed8, Size: 0x4]
	int DyeingSlot;//[Offset: 0x1edc, Size: 0x4]
	byte ParachuteState;//[Offset: 0x1ee4, Size: 0x1]
	byte LastParachuteState;//[Offset: 0x1ee6, Size: 0x1]
	float HaveToOpenHeightToGround;//[Offset: 0x1ee8, Size: 0x4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eec, Size: 0x1]
	float SwimZDir;//[Offset: 0x1ef0, Size: 0x4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef4, Size: 0x1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef5, Size: 0x1]
	float SwimRotateX_Ex;//[Offset: 0x1ef8, Size: 0x4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x1efc, Size: 0x4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x1f00, Size: 0x4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x1f04, Size: 0x4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x1f08, Size: 0x4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x1f0c, Size: 0x4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x1f10, Size: 0x4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x1f14, Size: 0x4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x1f18, Size: 0x4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x1f1c, Size: 0x4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x1f20, Size: 0x50]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x1f70, Size: 0x50]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x1fc0, Size: 0x50]
	class CameraShake* FreeFallCamShake;//[Offset: 0x2028, Size: 0x4]
	float VehicleForwardInputRate;//[Offset: 0x202c, Size: 0x4]
	float VehicleRightInputRate;//[Offset: 0x2030, Size: 0x4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2034, Size: 0x1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x2038, Size: 0x4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x2040, Size: 0x4]
	FName FeatureActorName;//[Offset: 0x2098, Size: 0x8]
	ActivityActorBase*[] ActivityActorList;//[Offset: 0x20a0, Size: 0xc]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20ac, Size: 0x1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20ad, Size: 0x1]
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x149e568
	void UpdateParachuteFallingCameraDistance(float alpha);// 0x149e4f0
	void UpdateIndoorState(bool IsInDoor);// 0x149e428
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x149e360
	void TriggerAutoAimCheck(float DeltaTime);// 0x149e2e8
	void TouchCancelSkillLock();// 0x149e2d4
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x14618c0
	void SwitchCameraToParachuteOpening();// 0x149e2b8
	void SwitchCameraToParachuteFalling();// 0x149e29c
	void SwitchCameraToNormal();// 0x149e280
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float alpha);// 0x149e208
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x1c01fa0
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x149e1f4
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x1c01fa0
	void StopCamShake();// 0x149e1d8
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x149ccd8
	void StartCamShake();// 0x149e1bc
	void ShowNightVisionFrame();// 0x146072c
	void ShowConfirmDialogOfMisKill();// 0x14606e8
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x149e13c
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x149e0a4
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x149e02c
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x149df70
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x149de64
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x149dda0
	void SetParachuteState(byte State);// 0x149dd20
	void SetFPPDeafultFov(float InFov);// 0x149dca8
	void SetBodyIndoor(bool IsInDoor);// 0x149dc28
	void ServerUpdateParachuteState(const Rotator Rotation, float FallingSpeed);// 0x149db34
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x149d9d8
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x149d910
	void ReleaseTrigger(enum Hand);// 0x149d890
	void PushTrigger(enum Hand);// 0x149d810
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x149d6bc
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x1c01fa0
	void OnStateEnter(enum EnteredState);// 0x149d63c
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x1c01fa0
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x1c01fa0
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x1c01fa0
	void OnRep_STPlayerController();// 0x149d628
	void OnRep_ParachuteState(byte State);// 0x149d5a8
	void OnRank(int Kills, int Rank);// 0x149d4ec
	void OnMiniTreeTriggerServerLogicCPP();// 0x149d4d0
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x1c01fa0
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x1c01fa0
	void OnAvatarEquippedSucc(enum slotType, bool isEquipped, int InItemID);// 0x149d3c4
	void OnAllAvatarEquippedSucc();// 0x149d3b0
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x149d328
	void MiniTreeTriggerServerLogic();// 0x149d2cc
	bool IsInLaunchSeat();// 0x149d29c
	bool IsGrenadeEmpty();// 0x149d274
	bool IsBodyIndoorFuc();// 0x149d254
	bool IsBodyIndoorCheck();// 0x149d22c
	void InitAirAttackLocatorComponent();// 0x149d218
	void HideNightVisionFrame();// 0x1456f9c
	void HandleParachuteStateChanged(byte NewState);// 0x149d198
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x149d020
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x149cea8
	SpringArmComponent* GetThirdPersonSpringArm();// 0x1c01fa0
	CameraComponent* GetThirdPersonCamera();// 0x1c01fa0
	float GetSwimRotateX_Ex();// 0x149ce80
	SpringArmComponent* GetScopeSpringArm();// 0x1c01fa0
	CameraComponent* GetScopeCamera();// 0x1c01fa0
	STExtraPlayerController* GetPlayerControllerSafety();// 0x1455e7c
	bool GetIsInDoor();// 0x149ce50
	bool GetIsGunADS();// 0x149ce20
	SpringArmComponent* GetFPPSpringArm();// 0x1c01fa0
	float GetFPPDeafultFov();// 0x149cdf8
	CameraComponent* GetFPPCamera();// 0x1c01fa0
	SpringArmComponent* GetFirstPersonSpringArm();// 0x1c01fa0
	CameraComponent* GetFirstPersonCamera();// 0x1c01fa0
	Vector GetBonePos(FName BoneName);// 0x149cd64
	void FreeFallShakeCam();// 0x149cd50
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x149ccd8
	void EnablePet(bool Enable);// 0x149cc50
	void DynamicCreateComponents();// 0x149cc3c
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x149cb38
	void ClearHPUI();// 0x145268c

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xd4, Size: 0x14]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xe8, Size: 0x14]
	Vector2D AimTargetScreenPos;//[Offset: 0xfc, Size: 0x8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	PlayerController* PlayerController;//[Offset: 0x108, Size: 0x4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x10c, Size: 0x4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x11c, Size: 0x4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x120, Size: 0x4]
	float DEFAULT_CD_TIME;//[Offset: 0x124, Size: 0x4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x128, Size: 0x4]
	float MIN_FOLLOW_TIME;//[Offset: 0x12c, Size: 0x4]
	FName[] Bones;//[Offset: 0x144, Size: 0xc]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 0x1]
	STExtraPlayerController* extraPlayerController;//[Offset: 0x154, Size: 0x4]
	bool bIsStartScopeAutoAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	float ScopeAutoAimTime;//[Offset: 0x260, Size: 0x4]
	void TryDoAiming(float DeltaTime);// 0x1546200
	void SetIsStartScopeAutoAimCheck(bool IsOpenScopeCheck);// 0x1546180
	void OnUnEquipWeapon();// 0x154616c
	void OnShoot(STExtraWeapon* Weapon);// 0x15460f4
	void OnRefreshAutoAimCfg();// 0x15460e0
	void OnEquipWeapon();// 0x15460cc
	bool IsTriggerBeforeFire();// 0x15460a4
	void Init(Controller* Controller);// 0x154602c
	Actor* GetTryRaycastActor(Vector startPoint, STExtraPlayerCharacter* Pawn, byte TraceType);// 0x1545f28
	bool GetIsStartScopeAutoAimCheck();// 0x1545f00
	bool CheckSmoke(Vector startPoint, STExtraPlayerCharacter* Pawn);// 0x1545e34
	bool CheckInAngle(STExtraBaseCharacter* MyPawn, STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x1545d24
	bool CheckBuffStun();// 0x1545cfc
	bool CanEnemeyRaycastReach(Vector startPoint, STExtraPlayerCharacter* Pawn);// 0x1545c30

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xc0, Size: 0x4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0xc4, Size: 0xc]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0xd0, Size: 0x30]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x100, Size: 0x4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x104, Size: 0xc]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x110, Size: 0xc]
	FName ScreenPlane;//[Offset: 0x120, Size: 0x8]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x128, Size: 0xc]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x134, Size: 0xc]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x140, Size: 0x4]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x14f1498
	void StopScreenParticleEffect(byte EffectType);// 0x14f1420
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x14f1318
	void StopAllScreenParticleEffect();// 0x14f1304
	void StopAllScreenAppearance();// 0x14f12f0
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x14f1234
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x14f1108
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x14f1038
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x14f0f7c
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x14f0e1c
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x14f0c3c
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x14f0a14
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI);// 0x14f0878
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x14f0800
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x14f073c
	void HandleEffectLoadFinish(byte EffectType);// 0x14f06c4

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 0xc]
	float LifeSpan;//[Offset: 0xc, Size: 0x4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 0x28]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 0x4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 0x1]
	ParticleSystem* ParticleEffect;//[Offset: 0x8, Size: 0x28]
	FName ParticleParamName;//[Offset: 0x30, Size: 0x8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x38, Size: 0xc]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x44, Size: 0x4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	float CurrentParamValue;//[Offset: 0x4c, Size: 0x4]
	byte DisableDeviceLevel;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 0xc]
	FName AppearanceTag;//[Offset: 0x10, Size: 0x8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 0x30]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 0x4]
	float MatialAlpha;//[Offset: 0x54, Size: 0x4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58, Size: 0x4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c, Size: 0x4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	float GradualFrag;//[Offset: 0x64, Size: 0x4]
	float DelayTime;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x5b0, Size: 0x30]
	Transform FPPRelativeTransform;//[Offset: 0x5e0, Size: 0x30]
	void SetActivate(bool _IsActivate);// 0x13de1d8

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x6f8, Size: 0xc]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 0x1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x13535c8

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 0x8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 0x4]
	FName ParentSocketName;//[Offset: 0x10, Size: 0x8]
	float TargetArmALength;//[Offset: 0x18, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x28, Size: 0xc]
	Vector RelativeLocation;//[Offset: 0x34, Size: 0xc]
	float ProbeSize;//[Offset: 0x40, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x44, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 0x4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0, Size: 0x4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xbc, Size: 0x4]
	float AALOpenSensibility;//[Offset: 0xc0, Size: 0x4]
	float OpenAALFOV;//[Offset: 0xc4, Size: 0x4]
	int MaxDist;//[Offset: 0xc8, Size: 0x4]
	int minDist;//[Offset: 0xcc, Size: 0x4]
	int DangerDist;//[Offset: 0xd0, Size: 0x4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xd8, Size: 0x28]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x100, Size: 0x28]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x128, Size: 0x4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x12c, Size: 0x4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x130, Size: 0x4]
	float FixArrowScaleDistance;//[Offset: 0x138, Size: 0x4]
	float ArrowScaleFactor1;//[Offset: 0x13c, Size: 0x4]
	float ArrowScalePlus1;//[Offset: 0x140, Size: 0x4]
	float ArrowScaleFactor2;//[Offset: 0x144, Size: 0x4]
	float ArrowScalePlus2;//[Offset: 0x148, Size: 0x4]
	float ShortDis;//[Offset: 0x14c, Size: 0x4]
	byte ChannelType;//[Offset: 0x150, Size: 0x1]
	Vector TargetLocation;//[Offset: 0x154, Size: 0xc]
	void SetItemExsist(bool bExsist);// 0x12e72d8
	void SetFinalLocation();// 0x12e72c4
	void SetAALFov(bool bOpen);// 0x12e7244
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x12e712c
	void OnFreeArrowLoadFinsh();// 0x12e7118
	void OnCalledActorLoadFinsh(Vector Location);// 0x12e70a8
	float GetTargetDistance();// 0x12e7080
	bool GetAALAvaliable();// 0x12e7058

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x30c, Size: 0x4]
	float AirAttackDelayTime;//[Offset: 0x310, Size: 0x4]
	int IconID;//[Offset: 0x314, Size: 0x4]
	float AttackAreaRadius;//[Offset: 0x318, Size: 0x4]

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]
	uint32 ClipID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0xd0, Size: 0x4]
	WeaponStateBase* DefaultState;//[Offset: 0xd4, Size: 0x4]
	WeaponStateBase* GetCurrentState();// 0x15536d8
	byte GetCurrentFreshWeaponStateType();// 0x15536b0

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0xd0, Size: 0xc]
	delegate OnEndState;//[Offset: 0xdc, Size: 0xc]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	byte FreshWeaponStateType;//[Offset: 0xe9, Size: 0x1]

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x274, Size: 0xc]
	void PreChangeGrenadeAvatar(int InItemID);// 0x139fe68
	void PostChangeItemAvatar();// 0x139fe4c
	FString GetItemAvatarHandlePath(int ItemID);// 0x1c01fa0
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x1c01fa0
	int GetDefaultAvatarID(int InAvatarID);// 0x1c01fa0
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x139fd10

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	ItemDefineID DefaultCfg;//[Offset: 0x100, Size: 0x18]
	MeshComponent* ItemBodyMesh;//[Offset: 0x118, Size: 0x4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x120, Size: 0x20]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x1d8, Size: 0x4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x1dc, Size: 0x4]
	int ItemType;//[Offset: 0x1e0, Size: 0x4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x1e8, Size: 0x28]
	StaticMesh* MasterStaticMesh;//[Offset: 0x210, Size: 0x28]
	<FString,Object*> AssetObjectMap;//[Offset: 0x238, Size: 0x3c]
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x13ac2a8
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x13ac1a0
	void ResetItemAvatar();// 0x13ac18c
	void PreChangeItemAvatar(int InItemID);// 0x13ac10c
	void OnRep_ItemAvatarChanged();// 0x13ac0f8
	bool IsValidAvatar();// 0x13ac0d4
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x13ac0a4
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x13abfc8
	MeshComponent* GetItemBodyMesh();// 0x13abfac
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance);// 0x13abf2c
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x13abe68
	void AsyncChangeItemAvatar(int InItemID);// 0x13abde8
	bool ApplyMesh(MeshComponent* meshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x13abcd8
	bool ApplyMaterial(MeshComponent* meshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x13abb50
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x139fd10

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0x9c, Size: 0xc]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0xa8, Size: 0x28]
	StaticMesh* ItemStaticMesh;//[Offset: 0xd0, Size: 0x28]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x13086dc
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x13082c8
	bool HandleDrop(int InCount, enum Reason);// 0x1307dd4
	bool HandleDisuse(enum Reason);// 0x1307d4c
	BackpackComponent* GetBackpackComponent();// 0x130bc40
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x130bb7c

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 0x18]
	byte UpdateFlag;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0, Size: 0x8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0xd0, Size: 0x18]
	FName LogicSocket;//[Offset: 0xe8, Size: 0x8]
	FName AttachSocket;//[Offset: 0xf0, Size: 0x8]
	byte SurviveWeaponPropSlot;//[Offset: 0xf8, Size: 0x1]
	float AIMinAttackDist;//[Offset: 0xfc, Size: 0x4]
	float AIMaxAttackDist;//[Offset: 0x100, Size: 0x4]
	float AIAttackDist;//[Offset: 0x104, Size: 0x4]
	ItemHandleBase* GetBackpackItemHandle();// 0x15530e4
	int GetAvailableBulletsNumInBackpack();// 0x15530bc

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 0x8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	float HitSelfModifier;//[Offset: 0x2d4, Size: 0x4]
	float HitSelfImpactReduce;//[Offset: 0x2d8, Size: 0x4]
	float HitOthersModifier;//[Offset: 0x2dc, Size: 0x4]
	float HitOthersImpactRaise;//[Offset: 0x2e0, Size: 0x4]
	float HitCharacterModifier;//[Offset: 0x2e4, Size: 0x4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0xbc, Size: 0x4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0xc0, Size: 0x4]
	float ImpactModifier;//[Offset: 0xc4, Size: 0x4]
	float ImpactAbsorption;//[Offset: 0xc8, Size: 0x4]
	float ImpactAbsorptionPassenger;//[Offset: 0xcc, Size: 0x4]
	float ImpactModifierUpsideDown;//[Offset: 0xd0, Size: 0x4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0xd4, Size: 0x4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0xd8, Size: 0x4]
	float HitIgnoreImpulseThreshold;//[Offset: 0xdc, Size: 0x4]
	float DamageCharacterCD;//[Offset: 0xe0, Size: 0x4]
	float DamageSelfCD;//[Offset: 0xe8, Size: 0x4]
	float HitDamageSelfMaxFactor;//[Offset: 0xf0, Size: 0x4]
	float HitDamagePassengerMaxHP;//[Offset: 0xf4, Size: 0x4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0xfc, Size: 0x4]
	float DamageReduce;//[Offset: 0x100, Size: 0x4]
	float ExplosionBaseDamage;//[Offset: 0x104, Size: 0x4]
	float ExplosionMinimumDamage;//[Offset: 0x108, Size: 0x4]
	float ExplosionRadiusInner;//[Offset: 0x10c, Size: 0x4]
	float ExplosionRadiusOuter;//[Offset: 0x110, Size: 0x4]
	float ExplosionDamageFalloff;//[Offset: 0x114, Size: 0x4]
	float ExplosionBaseMomentumMag;//[Offset: 0x118, Size: 0x4]
	class DamageType* ExplosionDamageType;//[Offset: 0x11c, Size: 0x4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	float HitStoneVelocityDamp;//[Offset: 0x124, Size: 0x4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x130, Size: 0x40]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x174, Size: 0x4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x178, Size: 0x8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x180, Size: 0x8]
	float ImpactAbsorptionVehicle;//[Offset: 0x188, Size: 0x4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x18c, Size: 0x4]
	float DotProductFrontThreshold;//[Offset: 0x190, Size: 0x4]
	float DotProductRearThreshold;//[Offset: 0x194, Size: 0x4]
	float ImpactModifierFront;//[Offset: 0x198, Size: 0x4]
	float ImpactModifierRear;//[Offset: 0x19c, Size: 0x4]
	float ImpactModifierFrontSide;//[Offset: 0x1a0, Size: 0x4]
	float ImpactModifierRearSide;//[Offset: 0x1a4, Size: 0x4]
	Vector2D DamageCorrection;//[Offset: 0x1a8, Size: 0x8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x1b0, Size: 0x4]
	float SameCampDamangeLimit;//[Offset: 0x1b4, Size: 0x4]
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x1533870
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x1533704

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 0xc]
	Quat Quaternion;//[Offset: 0x10, Size: 0x10]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 0xc]
	byte Flags;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0xbc, Size: 0xc]
	delegate VehicleFuelChangedDelegate;//[Offset: 0xc8, Size: 0xc]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0xd4, Size: 0xc]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float HPMax;//[Offset: 0xe4, Size: 0x4]
	float HP;//[Offset: 0xe8, Size: 0x4]
	float[] WheelsCurrentHP;//[Offset: 0xec, Size: 0xc]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float FuelMax;//[Offset: 0xfc, Size: 0x4]
	float Fuel;//[Offset: 0x100, Size: 0x4]
	float FuelConsumeFactor;//[Offset: 0x104, Size: 0x4]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x108, Size: 0xc]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x15325c4
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x15323c0
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x15321a4
	void RefreshWheelState();// 0x1532190
	void OnRep_WheelsCurrentHP();// 0x153217c
	void OnRep_HP();// 0x1532168
	void OnRep_Fuel();// 0x1532154
	bool NoFuel();// 0x153212c
	void Maintenance(float addpercenthp, bool FixTire);// 0x1532068
	bool IsDontDamage();// 0x153204c
	bool IsDontConsumeFuel();// 0x1532030
	bool IsDestroyed();// 0x1532008
	int GetWheelsHPNum();// 0x1531fe0
	float GetWheelHPMax(int WheelIdx);// 0x1531f60
	float GetWheelHP(int WheelIdx);// 0x1531ee0
	float GetVehicleHPMax();// 0x1531eb8
	float GetVehicleHP();// 0x1531e90
	float GetFuelMax();// 0x1531e68
	float GetFuelConsumeFactor();// 0x1531e40
	float GetFuel();// 0x1531e18

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 0x4]
	FName BoneName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0x238, Size: 0x4]
	float MeshDensity;//[Offset: 0x23c, Size: 0x4]
	float FluidDensity;//[Offset: 0x240, Size: 0x4]
	float FluidLinearDamping;//[Offset: 0x244, Size: 0x4]
	float FluidAngularDamping;//[Offset: 0x248, Size: 0x4]
	Vector VelocityDamper;//[Offset: 0x24c, Size: 0xc]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float MaxUnderwaterVelocity;//[Offset: 0x25c, Size: 0x4]
	float TestPointRadius;//[Offset: 0x260, Size: 0x4]
	Vector[] TestPoints;//[Offset: 0x264, Size: 0xc]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 0x1]
	float[] PointDensityOverride;//[Offset: 0x274, Size: 0xc]
	StructBoneOverride[] BoneOverride;//[Offset: 0x280, Size: 0xc]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 0x1]
	float StayUprightStiffness;//[Offset: 0x290, Size: 0x4]
	float StayUprightDamping;//[Offset: 0x294, Size: 0x4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x298, Size: 0xc]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float WaveForceMultiplier;//[Offset: 0x2a8, Size: 0x4]
	SceneComponent* UpdatedComponent;//[Offset: 0x2ac, Size: 0x4]
	byte TickGroup;//[Offset: 0x2b0, Size: 0x1]
	bool IsEntirelyUnderWater();// 0x37b86dc
	bool IsContactedWater();// 0x14822e8

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	Vector2D GlobalWaveDirection;//[Offset: 0x2cc, Size: 0x8]
	float GlobalWaveSpeed;//[Offset: 0x2d4, Size: 0x4]
	float GlobalWaveAmplitude;//[Offset: 0x2d8, Size: 0x4]
	float DistanceCheck;//[Offset: 0x2dc, Size: 0x4]
	WaveParameter[] WaveClusters;//[Offset: 0x2e0, Size: 0xc]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x2ec, Size: 0xc]
	float NetWorkTimeOffset;//[Offset: 0x2f8, Size: 0x4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	float ModulationStartHeight;//[Offset: 0x300, Size: 0x4]
	float ModulationMaxHeight;//[Offset: 0x304, Size: 0x4]
	float ModulationPower;//[Offset: 0x308, Size: 0x4]
	Landscape* Landscape;//[Offset: 0x30c, Size: 0x4]
	Texture2D* HeightmapTexture;//[Offset: 0x310, Size: 0x4]
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x37b999c
	Vector GetWaveHeightValue(out const Vector Location, const World* World, bool HeightOnly, bool TwoIterations);// 0x37b9818
	LinearColor GetHeightmapPixel(float U, float V);// 0x37b9748

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 0x4]
	float Length;//[Offset: 0x4, Size: 0x4]
	float Amplitude;//[Offset: 0x8, Size: 0x4]
	float Steepness;//[Offset: 0xc, Size: 0x4]
	float TimeScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 0x14]
	WaveParameter Wave02;//[Offset: 0x14, Size: 0x14]
	WaveParameter Wave03;//[Offset: 0x28, Size: 0x14]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 0x14]
	WaveParameter Wave05;//[Offset: 0x50, Size: 0x14]
	WaveParameter Wave06;//[Offset: 0x64, Size: 0x14]
	WaveParameter Wave07;//[Offset: 0x78, Size: 0x14]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 0x14]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x2c8, Size: 0x4]
	Guid LandscapeGuid;//[Offset: 0x2cc, Size: 0x10]
	IntPoint LandscapeSectionOffset;//[Offset: 0x2dc, Size: 0x8]
	int MaxLODLevel;//[Offset: 0x2e4, Size: 0x4]
	float LODDistanceFactor;//[Offset: 0x2e8, Size: 0x4]
	int ForceLOD;//[Offset: 0x2ec, Size: 0x4]
	byte LODFalloff;//[Offset: 0x2f0, Size: 0x1]
	int OccluderGeometryLOD;//[Offset: 0x2f4, Size: 0x4]
	int StaticLightingLOD;//[Offset: 0x2f8, Size: 0x4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x2fc, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x300, Size: 0x4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 0x1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x308, Size: 0x4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x30c, Size: 0x4]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x314, Size: 0xc]
	float NegativeZBoundsExtension;//[Offset: 0x320, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x324, Size: 0x4]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x328, Size: 0xc]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x334, Size: 0xc]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x340, Size: 0xc]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	float StaticLightingResolution;//[Offset: 0x398, Size: 0x4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39c, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39c, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x39d, Size: 0x1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39e, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39e, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x3a0, Size: 0x4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3a4, Size: 0x18]
	int CollisionMipLevel;//[Offset: 0x3bc, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x3c0, Size: 0x4]
	float CollisionThickness;//[Offset: 0x3c4, Size: 0x4]
	BodyInstance BodyInstance;//[Offset: 0x3c8, Size: 0x148]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x510, Size: 0x1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x510, Size: 0x1]
	int ComponentSizeQuads;//[Offset: 0x514, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x518, Size: 0x4]
	int NumSubsections;//[Offset: 0x51c, Size: 0x4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x521, Size: 0x1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x522, Size: 0x1]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x21792c4
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x12de094

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x500, Size: 0xc]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x50c, Size: 0xc]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x518, Size: 0xc]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	float Width;//[Offset: 0x34, Size: 0x4]
	float SideFalloff;//[Offset: 0x38, Size: 0x4]
	float EndFalloff;//[Offset: 0x3c, Size: 0x4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40, Size: 0xc]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c, Size: 0xc]
	Box Bounds;//[Offset: 0x58, Size: 0x1c]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20, Size: 0x10]
	InterpCurveVector SplineInfo;//[Offset: 0x40, Size: 0x14]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54, Size: 0xc]
	Box Bounds;//[Offset: 0x60, Size: 0x1c]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c, Size: 0xc]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x4]
	float TangentLen;//[Offset: 0x4, Size: 0x4]
	FName SocketName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Left;//[Offset: 0xc, Size: 0xc]
	Vector Right;//[Offset: 0x18, Size: 0xc]
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc]
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc]
	float StartEndFalloff;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x1c, Size: 0xc]
	StaticMesh* GrassMesh;//[Offset: 0x28, Size: 0x4]
	float GrassDensity;//[Offset: 0x2c, Size: 0x4]
	float PlacementJitter;//[Offset: 0x30, Size: 0x4]
	int StartCullDistance;//[Offset: 0x34, Size: 0x4]
	int EndCullDistance;//[Offset: 0x38, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x4]
	float GrassDensity;//[Offset: 0x4, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float PlacementJitter;//[Offset: 0xc, Size: 0x4]
	int StartCullDistance;//[Offset: 0x10, Size: 0x4]
	int EndCullDistance;//[Offset: 0x14, Size: 0x4]
	int MinLod;//[Offset: 0x18, Size: 0x4]
	enum Scaling;//[Offset: 0x1c, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x20, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x28, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x30, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3b, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x500, Size: 0x4]
	int SectionBaseY;//[Offset: 0x504, Size: 0x4]
	int ComponentSizeQuads;//[Offset: 0x508, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x50c, Size: 0x4]
	int NumSubsections;//[Offset: 0x510, Size: 0x4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x514, Size: 0x4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x518, Size: 0x4]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x51c, Size: 0x18]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 0x1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x538, Size: 0xc]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x544, Size: 0xc]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x550, Size: 0xc]
	Texture2D*[] WeightmapTextures;//[Offset: 0x55c, Size: 0xc]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x568, Size: 0x4]
	Vector4 WeightmapScaleBias;//[Offset: 0x570, Size: 0x10]
	float WeightmapSubsectionOffset;//[Offset: 0x580, Size: 0x4]
	Vector4 HeightmapScaleBias;//[Offset: 0x590, Size: 0x10]
	Texture2D* HeightmapTexture;//[Offset: 0x5a0, Size: 0x4]
	Box CachedLocalBox;//[Offset: 0x5a4, Size: 0x1c]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x5c0, Size: 0x1c]
	Guid MapBuildDataId;//[Offset: 0x5dc, Size: 0x10]
	Guid[] IrrelevantLights;//[Offset: 0x5ec, Size: 0xc]
	int CollisionMipLevel;//[Offset: 0x5f8, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x5fc, Size: 0x4]
	float NegativeZBoundsExtension;//[Offset: 0x600, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x604, Size: 0x4]
	float StaticLightingResolution;//[Offset: 0x608, Size: 0x4]
	int ForcedLOD;//[Offset: 0x60c, Size: 0x4]
	int LODBias;//[Offset: 0x610, Size: 0x4]
	Guid stateID;//[Offset: 0x614, Size: 0x10]
	Guid BakedTextureMaterialGuid;//[Offset: 0x624, Size: 0x10]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x634, Size: 0x4]
	byte MobileBlendableLayerMask;//[Offset: 0x638, Size: 0x1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x63c, Size: 0x4]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x640, Size: 0xc]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x64c, Size: 0x4]
	uint16[] CachedHeightData;//[Offset: 0x650, Size: 0xc]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 0xc]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x4]
	byte WeightmapTextureIndex;//[Offset: 0x4, Size: 0x1]
	byte WeightmapTextureChannel;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28, Size: 0x4]
	float Hardness;//[Offset: 0x2c, Size: 0x4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x500, Size: 0xc]
	int SectionBaseX;//[Offset: 0x50c, Size: 0x4]
	int SectionBaseY;//[Offset: 0x510, Size: 0x4]
	int CollisionSizeQuads;//[Offset: 0x514, Size: 0x4]
	float CollisionScale;//[Offset: 0x518, Size: 0x4]
	int SimpleCollisionSizeQuads;//[Offset: 0x51c, Size: 0x4]
	byte[] CollisionQuadFlags;//[Offset: 0x520, Size: 0xc]
	Guid HeightfieldGuid;//[Offset: 0x52c, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x53c, Size: 0x1c]
	LandscapeComponent* RenderComponent;//[Offset: 0x558, Size: 0x1c]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x574, Size: 0x18]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x598, Size: 0xc]

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float Density;//[Offset: 0x8, Size: 0x4]
	float TestRadius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0xbc, Size: 0xc]
	float MinCorrectionInterval;//[Offset: 0xc8, Size: 0x4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0xcc, Size: 0x4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd0, Size: 0x4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd4, Size: 0x4]
	float SendingToServerIntervalAtClient;//[Offset: 0xd8, Size: 0x4]
	float SendingReliableHitToServerInterval;//[Offset: 0xdc, Size: 0x4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0xe0, Size: 0x4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0xe4, Size: 0x4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0xe8, Size: 0x4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0xec, Size: 0x4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0xf0, Size: 0x4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0xf4, Size: 0x4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0xf8, Size: 0x4]
	float IdleForceUpdateThreshold;//[Offset: 0xfc, Size: 0x4]
	float IdleForceSyncInterval;//[Offset: 0x100, Size: 0x4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	float StaticFixLocation;//[Offset: 0x108, Size: 0x4]
	float StaticFixAngel;//[Offset: 0x10c, Size: 0x4]
	float StaticStopFixTorelence;//[Offset: 0x110, Size: 0x4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x114, Size: 0x4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x11c, Size: 0x4]
	float SimulatedFloorUpDistance;//[Offset: 0x120, Size: 0x4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x21c, Size: 0x3c]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x153ae44
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x153ac88
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x153aa90
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x153a898
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x153a63c
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x153a430
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x153a220
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x1539f4c
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x1539c78
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x1539b10
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x15399a8
	void OnDriverRide();// 0x1539994
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x153988c
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x15396f4
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x15395ec
	STExtraBaseCharacter*[] GetRiders();// 0x153952c
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x15394a0
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x15393c0
	void DragUnderGround();// 0x15393ac
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x1539294
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x1539160
	bool CheckAndLoadLandscape(float DeltaTime);// 0x14da0dc
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x1539090
	bool AdjustFloorPosition(out const Vector ClientLocation, out const STExtraBaseCharacter*[] Riders, out Vector OutLocation);// 0x1538f0c

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0xd4, Size: 0xc]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0xe0, Size: 0xc]
	float fRewindMaxSeconds;//[Offset: 0xec, Size: 0x4]
	bool GM_UseNewProjectileBulletVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 0x1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 0x1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 0x1]
	float TolerateShootPointDistanceSqured;//[Offset: 0xf8, Size: 0x4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xfc, Size: 0x4]
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x104, Size: 0x4]
	float TolerateSimulatedDelayTime;//[Offset: 0x108, Size: 0x4]
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 0x1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113, Size: 0x1]
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	float TolerateFlyTime;//[Offset: 0x118, Size: 0x4]
	float TolerateFlyDis;//[Offset: 0x11c, Size: 0x4]
	bool bOpenStillLagCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x124, Size: 0x4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x128, Size: 0x4]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x130, Size: 0x4]
	float TolerateBulletFlyTimePercentage;//[Offset: 0x134, Size: 0x4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x138, Size: 0x4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x13c, Size: 0x4]
	float TolerateShootHitAngle;//[Offset: 0x140, Size: 0x4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x144, Size: 0x4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x148, Size: 0x4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x14c, Size: 0x4]
	float TolerateShootRange;//[Offset: 0x150, Size: 0x4]
	byte[] traceObjectTypes;//[Offset: 0x154, Size: 0xc]
	float ShooterWeaponRange;//[Offset: 0x160, Size: 0x4]
	float ShooterWeaponHeight;//[Offset: 0x164, Size: 0x4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	float ShortDirReverseDistance;//[Offset: 0x16c, Size: 0x4]
	float TolerateShootMuzzleHeight;//[Offset: 0x170, Size: 0x4]
	bool bUseSimpleVerifyHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 0x1]
	float TolerateLocusSingle;//[Offset: 0x178, Size: 0x4]
	float TolerateLocusDist;//[Offset: 0x17c, Size: 0x4]
	float TolerateLocusSegment;//[Offset: 0x180, Size: 0x4]
	float TolerateBoxExpand;//[Offset: 0x184, Size: 0x4]
	float TolerateLocusZOffsetUp;//[Offset: 0x188, Size: 0x4]
	float TolerateLocusZOffsetDown;//[Offset: 0x18c, Size: 0x4]
	float LocusSearchBackTime;//[Offset: 0x190, Size: 0x4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x194, Size: 0x4]
	float MaxGunPosZHeight;//[Offset: 0x198, Size: 0x4]
	float MaxGunPosLength;//[Offset: 0x19c, Size: 0x4]
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x1a0, Size: 0xc]
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x1ac, Size: 0xc]
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool bVerifyBoneHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 0x1]
	float BonePointTorelate;//[Offset: 0x1bc, Size: 0x4]
	Vector VerifiedBoneScale;//[Offset: 0x1c0, Size: 0xc]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x1cc, Size: 0x4]
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	Character* CharacterOwner;//[Offset: 0x1d4, Size: 0x4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	uint32 TolerateMuzzleAndCharacterDisSquare;//[Offset: 0x1dc, Size: 0x4]
	uint32 TolerateMuzzleAndVehicleDisSquare;//[Offset: 0x1e0, Size: 0x4]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 0x1]
	int MaxBlockLineTraceTimes;//[Offset: 0x1e8, Size: 0x4]
	float VehiclePosCheckInterval;//[Offset: 0x1ec, Size: 0x4]
	float MaxVehicleSpeed;//[Offset: 0x1f0, Size: 0x4]
	float TolerateVehicleDis;//[Offset: 0x1f4, Size: 0x4]
	float MaxTolerateVehicleDis;//[Offset: 0x1f8, Size: 0x4]
	float CharacterPosCheckInterval;//[Offset: 0x1fc, Size: 0x4]
	float MaxCharacterSpeed;//[Offset: 0x200, Size: 0x4]
	float TolerateCharacterDis;//[Offset: 0x204, Size: 0x4]
	float MaxTolerateCharacterDis;//[Offset: 0x208, Size: 0x4]
	float SimVehiclePosCheckInterval;//[Offset: 0x20c, Size: 0x4]
	float SimTolerateVehicleDis;//[Offset: 0x210, Size: 0x4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x214, Size: 0x4]
	float SimCharacterPosCheckInterval;//[Offset: 0x218, Size: 0x4]
	float SimTolerateCharacterDis;//[Offset: 0x21c, Size: 0x4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x220, Size: 0x4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x224, Size: 0x4]
	float TolerateNetDelay;//[Offset: 0x228, Size: 0x4]
	float TolerateMaxVictmPosDis;//[Offset: 0x22c, Size: 0x4]
	bool GM_VerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	float TolerateDownShootMuzzleAndCharacterBottomHeight;//[Offset: 0x234, Size: 0x4]
	float TolerateDownShootMaxMuzzleAndCharacterHeight;//[Offset: 0x238, Size: 0x4]
	float TolerateMaxWeaponAimAndOwnerHeadHeight;//[Offset: 0x23c, Size: 0x4]
	float TolerateMinWeaponAimAndOwnerHeadHeight;//[Offset: 0x240, Size: 0x4]
	float TolerateMinMuzzleFloorHeight;//[Offset: 0x244, Size: 0x4]
	float TolerateWeaponAimAndOwnerHeadDis;//[Offset: 0x248, Size: 0x4]
	float TolerateWeaponAndOwnerHeadDis;//[Offset: 0x24c, Size: 0x4]
	float VerifyDownShootCD;//[Offset: 0x250, Size: 0x4]
	bool GM_VerifyActorPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	float GrayWeaponAndShootAngle;//[Offset: 0x260, Size: 0x4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x264, Size: 0x4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x268, Size: 0x4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x26c, Size: 0x4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x270, Size: 0x18]
	Vector LastImpactPoint;//[Offset: 0x288, Size: 0xc]
	byte VertifyMuzzleHeight(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x13b29e8
	byte VertifyImpactActorPosWithNoLagCompensation(STExtraShootWeapon* ShootWeapon, Pawn* VictmPawn, out const Vector InImpactActorPos);// 0x13b28d4
	byte VertifyClientAntiCheatResult(uint16 ClientAntiCheatResult, STExtraShootWeapon* ShootWeapon);// 0x13b2810
	byte VerityOwnerAndGunBlock(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x13b26fc
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13b1758
	byte VerifyWeaponOwnerPos(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13b25e0
	byte VerifyWeaponOwnerAndMuzzleDis(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13b24c4
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x13b15f8
	float SimulatedCharacterServerTimeHighPrecision();// 0x13b2494
	float SimulatedCharacterServerTime();// 0x13b15c8
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x13b23b8
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x13b22ac
	float GetTolerateSimuPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x13b21e8
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x13b2124
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x13b2060
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x13b1fe0
	float GetTolerateAutonomousPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x13b1f1c
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x13b1e58
	float GetNearAvgNetDelay(Pawn* TargetPawn, float NearNum);// 0x13b1d94

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0xc0, Size: 0x10]
	float TolerateOwnerAndBulletDist;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 0x4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 0x4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 0x4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 0x1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 0xc]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 0xc]
	Vector Offset;//[Offset: 0x1c, Size: 0xc]
	Vector PitchOffset;//[Offset: 0x28, Size: 0xc]
	float ReferenceHSlope;//[Offset: 0x34, Size: 0x4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 0x4]
	float HMinScale;//[Offset: 0x3c, Size: 0x4]
	float VMinScale;//[Offset: 0x40, Size: 0x4]
	float HMaxScale;//[Offset: 0x44, Size: 0x4]
	float VMaxScale;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 0x2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 0x2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 0x2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 0x2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 0x2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 0x2]
	uint16 NetDelay;//[Offset: 0xc, Size: 0x2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 0x4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Box BoundBox;//[Offset: 0x18, Size: 0x1c]
	Box HeadBoundBox;//[Offset: 0x34, Size: 0x1c]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 0xc]
	enum MoveBaseState;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: VehBackpackItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 0x1]
	byte ViewYaw;//[Offset: 0x1, Size: 0x1]
	byte ViewRoll;//[Offset: 0x2, Size: 0x1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x2e8, Size: 0x4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x2ec, Size: 0x4]
	float StayTimeBeforeReturning;//[Offset: 0x2f0, Size: 0x4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	Rotator RelativeToOwnerRotator;//[Offset: 0x2f8, Size: 0xc]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	float MinPitch;//[Offset: 0x31c, Size: 0x4]
	float MaxPitch;//[Offset: 0x320, Size: 0x4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	float RevoerTimefromFreeTime;//[Offset: 0x328, Size: 0x4]
	float ResultMinPitch;//[Offset: 0x36c, Size: 0x4]
	float ResultMaxPitch;//[Offset: 0x370, Size: 0x4]
	float FreeCamRotationReturnRate;//[Offset: 0x374, Size: 0x4]
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1355c40
	void DelayRotationLagEnabledEnd();// 0x12e82e4
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x1537c50

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum noiseType;//[Offset: 0x0, Size: 0x1]
	float Loudness;//[Offset: 0x4, Size: 0x4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 0x4]
	float MaxRange;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	FString BuffTableName;//[Offset: 0xc0, Size: 0xc]
	FString OneceBuffTableName;//[Offset: 0xcc, Size: 0xc]
	FString ConditionBuffTableName;//[Offset: 0xd8, Size: 0xc]
	STBuff*[] Buffs;//[Offset: 0xec, Size: 0xc]
	int SyncBriefNum;//[Offset: 0xf8, Size: 0x4]
	ClientSyncBrief SyncBriefs;//[Offset: 0xfc, Size: 0x18]
	ClientSyncBrief SyncRefBriefs;//[Offset: 0x18c, Size: 0x18]
	<int,STBuff*> MaxPowerBuffs;//[Offset: 0x21c, Size: 0x3c]
	bool UpdateServerSyncBuff(STBuff* Buff);// 0x15c7ab8
	void UpdateClientBuff(int InstID, int BuffID, int LayerCount, int CauseSkillID);// 0x15c7970
	void RemoveClientBuff(int InstID);// 0x15c78f8
	STBuff* RemoveBuffInner(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x15c77a8
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x15c7660
	void RemoveAndFindMaxPowerBuff(STBuff* RemoveBuff);// 0x15c75e8
	void OnRep_SyncBriefs();// 0x15c75d4
	bool HasSkillID(int SkillID);// 0x15c7554
	bool HasBuff(int BuffID);// 0x15c74d4
	void HandleCauserSkill(STBuff* Buff, int SkillID);// 0x15c7418
	bool HandleBuffTypeMutex(int BuffID);// 0x15c7398
	void HandleBuffLayer(STBuff* Buff, int AddLayerCount, bool IsNewBuff);// 0x15c7290
	STBuff*[] GetBuffsByID(int BuffID);// 0x15c7188
	STBuff* CreateBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x15c7038
	void CompareBuffPower(STBuff* Buff);// 0x15c6fc0
	void ClearBuffs(bool IsClearAll);// 0x15c6f40
	bool AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x15c6df0

--------------------------------
Class: STBuff.Object
	FString BuffName;//[Offset: 0x1c, Size: 0xc]
	FString Desc;//[Offset: 0x28, Size: 0xc]
	Texture2D* Icon;//[Offset: 0x34, Size: 0x4]
	int LayerMax;//[Offset: 0x38, Size: 0x4]
	int InitialLayerCount;//[Offset: 0x3c, Size: 0x4]
	float Duration;//[Offset: 0x40, Size: 0x4]
	float ClientSyncInterval;//[Offset: 0x44, Size: 0x4]
	bool IsClientSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum TargetType;//[Offset: 0x49, Size: 0x1]
	enum TargetSubype;//[Offset: 0x4a, Size: 0x1]
	enum RefreshType;//[Offset: 0x4b, Size: 0x1]
	enum ReActionType;//[Offset: 0x4c, Size: 0x1]
	enum MultiCauserHandleType;//[Offset: 0x4d, Size: 0x1]
	enum MultiSkillHandleType;//[Offset: 0x4e, Size: 0x1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	STBuffAction*[] Actions;//[Offset: 0x50, Size: 0xc]
	int InstID;//[Offset: 0x5c, Size: 0x4]
	int BuffID;//[Offset: 0x60, Size: 0x4]
	int LayerCount;//[Offset: 0x64, Size: 0x4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float endTime;//[Offset: 0x6c, Size: 0x4]
	Actor* Causer;//[Offset: 0x70, Size: 0x8]
	Actor* Owner;//[Offset: 0x78, Size: 0x8]
	int CauseSkillID;//[Offset: 0x80, Size: 0x4]
	STBuffSystemComponent* OwnerSystem;//[Offset: 0x84, Size: 0x8]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	float PowerValue;//[Offset: 0x90, Size: 0x4]
	float LastSyncClientTime;//[Offset: 0x94, Size: 0x4]
	bool IsNeedSyncClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	void Tick(float DetalTime, float TimeSeconds);// 0x15c4ca4
	void ResetActionExecute();// 0x15c4c90
	void RefreshEndTime();// 0x15c4c7c
	void Initialize();// 0x15c4c68
	void End();// 0x15c4c54
	void EnabledRemove();// 0x15c4c40
	void Destroy();// 0x15c4c2c
	bool CopyActions();// 0x15c4c04
	void CheckOnceBuffForClient();// 0x15c4bf0
	void ChangeNotify();// 0x15c4bdc
	void ChangeDuration(float NewDuration);// 0x15c4b64

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x1c, Size: 0x4]
	STBuff* OwnerBuff;//[Offset: 0x20, Size: 0x8]
	int ArrayIndex;//[Offset: 0x28, Size: 0x4]
	void Tick(float DetalTime);// 0x15c5798
	void SetEnabled(bool Enabled);// 0x15c5718
	void ResetExecute(bool IgnoreEnd);// 0x15c5698
	void OnTick(float DetalTime);// 0x12ebfe0
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0
	void OnDestroy();// 0x12fe19c
	void OnChangeNotify();// 0x15c567c
	void Initialize();// 0x15c5668
	STBuff* GetOwnerBuff();// 0x15c5640
	Actor* GetOwner();// 0x142b804
	bool GetIsExecute();// 0x15c5624
	Actor* GetCauser();// 0x15c55fc
	void End();// 0x15c55e8
	void Destroy();// 0x15c55d4
	STBuffAction* CopyAction(Object* Outer);// 0x15c554c
	void ChangeNotify();// 0x15c5538

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0, Size: 0x4]
	int BuffID;//[Offset: 0x4, Size: 0x4]
	int LayerCount;//[Offset: 0x8, Size: 0x4]
	int CauseSkillID;//[Offset: 0xc, Size: 0x4]
	float SyncTime;//[Offset: 0x10, Size: 0x4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x2b8, Size: 0xc]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x2c4, Size: 0xc]
	bool bFPPMeshLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x2d4, Size: 0xc]
	void PreChangeVehicleFPPMode();// 0x1530c54
	void PreChangeVehicleBrokenMataterial();// 0x1530c40
	void PreChangeVehicleAvatar(int InItemID);// 0x139fe68
	void PreChangeItemAvatar(int InItemID);// 0x13ac10c
	void PostChangeItemAvatar();// 0x139fe4c
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x1530bbc
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x1530b38
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x15309e0
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x1530888
	FString GetItemAvatarHandlePath(int ItemID);// 0x1c01fa0
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x1c01fa0
	void ExitFPPVehicle();// 0x1530874
	void EnterFPPVehicle();// 0x1530860
	bool CheckIsNeedEnterFPPVehicle();// 0x1530838

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 0x1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e2, Size: 0x1]
	int MasterCompLODLevel;//[Offset: 0x4e4, Size: 0x4]
	int VehicleSkinID;//[Offset: 0x4e8, Size: 0x4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 0x1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x4f0, Size: 0x28]
	class AnimInstance* BaseAnimBP;//[Offset: 0x518, Size: 0x28]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x540, Size: 0xc]
	delegate OnStyleEquippedEvent;//[Offset: 0x54c, Size: 0xc]
	delegate OnStyleUnequippedEvent;//[Offset: 0x558, Size: 0xc]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x564, Size: 0xc]
	FName FrontMatSlotName;//[Offset: 0x570, Size: 0x8]
	FName TailMatSlotName;//[Offset: 0x578, Size: 0x8]
	FName FPPMatSlotName;//[Offset: 0x580, Size: 0x8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x588, Size: 0x4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x58c, Size: 0x4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x590, Size: 0x4]
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x152e860
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1425674
	void SetVehicleAvatarNormalMode();// 0x152e84c
	void SetVehicleAvatarFPPMode();// 0x152e838
	void SetVehicleAvatarBroken();// 0x152e824
	void SetMasterBaseMeshPath(FString InPath);// 0x152e768
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x152e6ac
	void ResetAdvanceVehicleSkinID();// 0x133cf7c
	void RemoveAllEquippedStyle();// 0x152e698
	bool ProcessHandleUnequip(enum InSlotType);// 0x152e618
	bool ProcessHandleEquip(enum InSlotType);// 0x152e598
	void PreProcessBeforeLoadMesh();// 0x132cd00
	void PostProcessAfterLoadMesh();// 0x132cd38
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x152e520
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x152e4a8
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x1c01fa0
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x1c01fa0
	void OnRep_BodySlotStateChanged();// 0x1341314
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x1c01fa0
	bool IsValidAvatar();// 0x152e480
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x152e3a4
	bool IsAvatarFPPMode();// 0x152e37c
	bool IsAvatarBroken();// 0x152e354
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x152e2d4
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x152e254
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x152e1cc
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x14924d4
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x152e0c0
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x152df68
	void InitMasterComponent();// 0x152df54
	void Initialize();// 0x134068c
	void InitialAvatarParam();// 0x12e82e4
	int HasStyleEquipped(int InStyleID);// 0x152ded4
	int HasEquippedSameStyle(int InStyleID);// 0x152de54
	bool HandleUnequipStyle(int InStyleID);// 0x152ddd4
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x1424eac
	bool HandleEquipStyle(int InStyleID);// 0x152dd54
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x152dd2c
	MeshComponent* GetVehicleBodyMeshComp();// 0x152dd04
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x133ff90
	bool CanBeMeshMerge(int SlotID);// 0x152dc84

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0, Size: 0x4]
	enum slotType;//[Offset: 0x4, Size: 0x1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0, Size: 0x1]
	int StyleValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4b0, Size: 0xc]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4bc, Size: 0xc]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x4c8, Size: 0xc]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x154be74
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x154bdfc
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x154bd74
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x154bcb8
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x154ba78
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x154b864
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x154b7dc
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x154b75c
	void OnRep_CurrentWeaponReplicated();// 0x153ca60
	void OnReconnectOnServer();// 0x134689c
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x154b6e4
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x154b598
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x154b520
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x154b470
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x154b3b4
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x154b33c
	void DelayFire(float DelayTime, byte ShootMode);// 0x154b278

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 0x60]
	STExtraWeapon* Weapon;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 0x4]
	FName WeaponSocket;//[Offset: 0x8, Size: 0x8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 0x4]
	int WeaponTypeID;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x238, Size: 0x4]
	float TriggerInterval;//[Offset: 0x23c, Size: 0x4]
	float MaxAllowedValidationDiff;//[Offset: 0x240, Size: 0x4]
	void OnTriggered();// 0x1c01fa0

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0x95c, Size: 0x4]
	int ForceLifePeriodTime;//[Offset: 0x960, Size: 0x4]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 0x1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x965, Size: 0x1]
	delegate OnDeath;//[Offset: 0x968, Size: 0xc]
	float DelayHideDuration;//[Offset: 0x974, Size: 0x4]
	float AnimDeathLifeSpan;//[Offset: 0x978, Size: 0x4]
	float DelayHideDurationByHeadShoot;//[Offset: 0x97c, Size: 0x4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0x980, Size: 0x4]
	float DelayHideDurationByVehicleHit;//[Offset: 0x984, Size: 0x4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0x988, Size: 0x4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0x98c, Size: 0x4]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0x990, Size: 0x4]
	class PlayerTombBox* DropTomb;//[Offset: 0x994, Size: 0x4]
	MonsterSingleDropIds[] DropIds;//[Offset: 0x998, Size: 0xc]
	MonsterSingleBulletDropIds[] BulletDropIds;//[Offset: 0x9a4, Size: 0xc]
	bool bPumkinAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 0x1]
	bool IsEnabledDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b1, Size: 0x1]
	bool IsExiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b2, Size: 0x1]
	int MonsterSpawnTime;//[Offset: 0x9b4, Size: 0x4]
	int MonsterDeathTime;//[Offset: 0x9b8, Size: 0x4]
	float AnimBornLifeSpan;//[Offset: 0x9bc, Size: 0x4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0x9c4, Size: 0x4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0x9c8, Size: 0x4]
	float AnimLand_Light_LifeSpan;//[Offset: 0x9cc, Size: 0x4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0x9e0, Size: 0x4c]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xa2c, Size: 0x4]
	float MinTimeLockTarget;//[Offset: 0xa30, Size: 0x4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xa34, Size: 0x4]
	float SensedRadius;//[Offset: 0xa38, Size: 0x4]
	float MinTimeLockHeardEnemy;//[Offset: 0xa3c, Size: 0x4]
	float HeardRadius;//[Offset: 0xa40, Size: 0x4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xa44, Size: 0x4]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0xa48, Size: 0x4]
	MobPerceptionController* MobPerceptionController;//[Offset: 0xa4c, Size: 0x4]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0xa50, Size: 0x4]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0xa54, Size: 0x4]
	int SyncAIState;//[Offset: 0xa68, Size: 0x4]
	int AIState;//[Offset: 0xa74, Size: 0x4]
	float HurtAnimTime;//[Offset: 0xa78, Size: 0x4]
	float BackAnimPerc;//[Offset: 0xa7c, Size: 0x4]
	delegate OnEnterAIState;//[Offset: 0xa80, Size: 0xc]
	delegate OnLeaveAIState;//[Offset: 0xa8c, Size: 0xc]
	delegate OnBPEnterAIState;//[Offset: 0xa98, Size: 0xc]
	delegate OnBPLeaveAIState;//[Offset: 0xaa4, Size: 0xc]
	delegate OnChangeAnimParam;//[Offset: 0xab0, Size: 0xc]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0xabc, Size: 0xc]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0xac8, Size: 0xc]
	float SpeedScale;//[Offset: 0xaf0, Size: 0x4]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf4, Size: 0x1]
	float SpeedValue;//[Offset: 0xaf8, Size: 0x4]
	int MonsterChapterID;//[Offset: 0xafc, Size: 0x4]
	int MonsterLevelID;//[Offset: 0xb00, Size: 0x4]
	int MonsterWaveId;//[Offset: 0xb04, Size: 0x4]
	int MonsterID;//[Offset: 0xb08, Size: 0x4]
	int BornWeatherPhase;//[Offset: 0xb0c, Size: 0x4]
	int FlowId;//[Offset: 0xb10, Size: 0x4]
	FString MonsterName;//[Offset: 0xb14, Size: 0xc]
	FString MonsterNameID;//[Offset: 0xb20, Size: 0xc]
	int MonsterSyncID;//[Offset: 0xb2c, Size: 0x4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30, Size: 0x1]
	Vector BornPos;//[Offset: 0xb34, Size: 0xc]
	RoadPointInfo[] RoadPoints;//[Offset: 0xb40, Size: 0xc]
	int BornRandomRadius;//[Offset: 0xb4c, Size: 0x4]
	int ReBornTimes;//[Offset: 0xb50, Size: 0x4]
	int ReBornDelay;//[Offset: 0xb54, Size: 0x4]
	int MonsterType;//[Offset: 0xb58, Size: 0x4]
	int MonsterFuncType;//[Offset: 0xb5c, Size: 0x4]
	int Gold;//[Offset: 0xb60, Size: 0x4]
	int SuperGold;//[Offset: 0xb64, Size: 0x4]
	int[] BornSkill;//[Offset: 0xb68, Size: 0xc]
	int[] AloneSkillIdList;//[Offset: 0xb74, Size: 0xc]
	int HealthBarCount;//[Offset: 0xb80, Size: 0x4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84, Size: 0x1]
	int NeedSendAttackFlow;//[Offset: 0xb88, Size: 0x4]
	Actor* AttackTarget;//[Offset: 0xb8c, Size: 0x8]
	Pawn* CallPawn;//[Offset: 0xb94, Size: 0x8]
	uint32 CallPawnKey;//[Offset: 0xb9c, Size: 0x4]
	int CallType;//[Offset: 0xba0, Size: 0x4]
	byte SourceType;//[Offset: 0xba4, Size: 0x1]
	uint32[] DecalIndexArray;//[Offset: 0xba8, Size: 0xc]
	byte HitPartJudgment;//[Offset: 0xbb4, Size: 0x1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xbb8, Size: 0x3c]
	BodyTypeDef StandBodyDef;//[Offset: 0xbf4, Size: 0x8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0xbfc, Size: 0x4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0xc00, Size: 0x4]
	float IdleWalkSpeedRatio;//[Offset: 0xc04, Size: 0x4]
	float AttackWalkSpeedRatio;//[Offset: 0xc08, Size: 0x4]
	float[] CircleDamageRate;//[Offset: 0xc0c, Size: 0xc]
	int ObjectPoolSize;//[Offset: 0xc18, Size: 0x4]
	int LifePeriodTime;//[Offset: 0xc1c, Size: 0x4]
	float KilledDisCircleEdge;//[Offset: 0xc20, Size: 0x4]
	int MaxHPStageForBroadcast;//[Offset: 0xc24, Size: 0x4]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28, Size: 0x1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0xc2c, Size: 0x4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 0x1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc38, Size: 0x1]
	int RageLevel;//[Offset: 0xc54, Size: 0x4]
	float AloneRageTimerRate;//[Offset: 0xc60, Size: 0x4]
	float ImpluseScale;//[Offset: 0xc64, Size: 0x4]
	float ImpluseZScale;//[Offset: 0xc68, Size: 0x4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 0x1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6d, Size: 0x1]
	float OverlapVehicleDamageRate;//[Offset: 0xc70, Size: 0x4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0xc74, Size: 0x4]
	float MinDamageInterval;//[Offset: 0xc78, Size: 0x4]
	float MovementTickInterval;//[Offset: 0xc7c, Size: 0x4]
	float DsActorTickInterval;//[Offset: 0xc80, Size: 0x4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc84, Size: 0x1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0xc8c, Size: 0x4]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0xc90, Size: 0x4]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0xc94, Size: 0x4]
	AkAudioEvent* MonsterRunSound;//[Offset: 0xc98, Size: 0x4]
	float NoPathToTargetTimer;//[Offset: 0xc9c, Size: 0x4]
	enum AnimGroupMask;//[Offset: 0xca0, Size: 0x1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 0x1]
	int ExplodeSkillID;//[Offset: 0xcac, Size: 0x4]
	float ExplodeSkillDuration;//[Offset: 0xcb0, Size: 0x4]
	float LagCompensationRecordInterval;//[Offset: 0xd7c, Size: 0x4]
	bool TestPathSyncToLocation(Vector Location);// 0x14dd30c
	bool TestPathSyncToActor(Actor* Actor);// 0x14dd28c
	void StopMovementMode();// 0x149a934
	void StartMovementMode();// 0x132b318
	void ShowHeadShootDeadEffect();// 0x14dd278
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x14dd200
	void ResetCharAnimParam();// 0x14dd1ec
	void OnRep_SyncAIState();// 0x14dd1d8
	void OnRep_ReplicatedMovement();// 0x12e0f50
	void OnRep_RageLevel();// 0x12e82e4
	void OnRep_MonsterSyncID();// 0x14dd1c4
	void OnRep_MonsterNameID();// 0x14dd1b0
	void NotifyInitial();// 0x14dd19c
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x14dd0d8
	bool IsSameTeam(Pawn* Other);// 0x1457874
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x14dcfec
	bool IsCanCopyBone();// 0x14dcfc4
	bool IsBoss();// 0x14dcf9c
	bool IsBigBoss();// 0x14dcf74
	void InitHitBox();// 0x14dcf60
	void InitCharAnimParam();// 0x14dcf4c
	bool HasAIState(enum NewState);// 0x14dcecc
	void HandleHitByBullet(Actor* Causer);// 0x14dce54
	void GotoEarthAndDie();// 0x14dce38
	Vector GetServerHeadLocation();// 0x14dcdf0
	STExtraPlayerController* GetPlayerControllerSafety();// 0x1455e7c
	int GetMonsterType();// 0x14dcdd4
	float GetHitBoxRadius();// 0x14dcdb8
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x14dcd24
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x14dcc58
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x14dcae4
	byte GetCurHitPartJugementType();// 0x14dcabc
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x14dca94
	SimpleCharAnimParamList GetAnimParam();// 0x14dca18
	int GetAliveTimeSeconds();// 0x14dc9fc
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x14dc740
	void EnterAIState(enum NewState, bool bIsNotify);// 0x14dc67c
	void DisappearOnDeath();// 0x14539cc
	void DieAfterExplode();// 0x14dc668
	void DelayHidden();// 0x1453770
	void ClearOnDeath(Controller* EventInstigater, out const DamageEvent DamageEvent);// 0x14dc588
	bool CheckPlayerNeedUpdateAnimation();// 0x14dc560
	bool CheckHasFunc(enum Func);// 0x14dc4d8
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x14dc3cc
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x14dc238
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x14dc128
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x14dc018
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14dbd9c
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14dbab4
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14db838
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14db5bc
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14db32c
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14db0b0
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14dae34
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14dabb8
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14da934
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14da64c
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x14da4b8
	void BroadcastClientsDebugSpeed(float Speed);// 0x14da404
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x14da350
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x1c01fa0
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1c01fa0
	void BPNotifyInitial();// 0x1c01fa0
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1c01fa0
	void BPMonsterInitTableDone();// 0x1c01fa0
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x14da1dc
	bool BP_HasAIState(enum NewState);// 0x14da15c
	bool AllowAIState(enum NewState);// 0x14da0dc
	void AddWeaponDamageAddition(byte WeaponType);// 0x14da064
	bool AddHealthSafety(float AddVal, Controller* DamageInstigator, out const DamageEvent DamageEvente, Actor* DamageCauser, bool bHeadShot);// 0x14d9ea0

--------------------------------
Class: MonsterSingleDropIds

--------------------------------
Class: MonsterSingleBulletDropIds
	int[] BulletDropIds;//[Offset: 0x0, Size: 0xc]
	int[] BulletDropParams;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0, Size: 0xc]
	Vector movedir;//[Offset: 0xc, Size: 0xc]
	byte MovementMode;//[Offset: 0x18, Size: 0x1]
	Rotator ViewRotation;//[Offset: 0x1c, Size: 0xc]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	Vector HurtDir;//[Offset: 0x2c, Size: 0xc]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	int RandomAnimID;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xbc, Size: 0x38]
	RepSnapshot Snapshot;//[Offset: 0xf4, Size: 0x38]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x12c, Size: 0x4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x130, Size: 0x4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x134, Size: 0x4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x138, Size: 0x4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x13c, Size: 0x4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x140, Size: 0x4]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x144, Size: 0xd4]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 0x1]
	delegate OnActorTeleportFinish;//[Offset: 0x21c, Size: 0xc]
	void TeleportNextSync();// 0x141d638
	void StopPredict();// 0x141d624
	void SetVelocity(out const Vector Velocity);// 0x141d5a0
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x141d4a0
	void OnRep_Snapshot();// 0x141d48c
	Vector GetVelocity();// 0x141d444

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28, Size: 0xc]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x4, Size: 0x4]
	float SmoothNetUpdateTime;//[Offset: 0x8, Size: 0x4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0xbc, Size: 0x4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0xc0, Size: 0x4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0xc4, Size: 0x4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0xc8, Size: 0x4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0xcc, Size: 0x4]
	float WallClimb_MoveUpSpeed;//[Offset: 0xd0, Size: 0x4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0xd4, Size: 0x4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0xd8, Size: 0x4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0xdc, Size: 0x4]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0xe0, Size: 0x4]
	float WallJump_JumpSpeed;//[Offset: 0xe4, Size: 0x4]
	float WallJump_JumpAngle;//[Offset: 0xe8, Size: 0x4]
	float WallJump_ZVelocity;//[Offset: 0xec, Size: 0x4]
	float Stride_AcceptableFaceAngle;//[Offset: 0xf0, Size: 0x4]
	float Stride_Duration;//[Offset: 0xf4, Size: 0x4]
	float Stride_KeepDistanceToWall;//[Offset: 0xf8, Size: 0x4]
	float Stride_HeightOffset;//[Offset: 0xfc, Size: 0x4]
	float Stride_ForwardOffset;//[Offset: 0x100, Size: 0x4]
	float Stride_LineTraceOffset;//[Offset: 0x104, Size: 0x4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x108, Size: 0x4]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x10c, Size: 0x4]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	int iWallClimbState;//[Offset: 0x114, Size: 0x4]
	int iWallJumpState;//[Offset: 0x118, Size: 0x4]
	int iStrideState;//[Offset: 0x11c, Size: 0x4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x13c5d38
	void WallJump(Vector DstLocation);// 0x13c5cc8
	void WallClimbExit();// 0x13c5cb4
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x13c5bac
	void TickWallJump_Turn(float DeltaTime);// 0x13c5b34
	void TickWallJump(float DeltaTime);// 0x13c5abc
	void TickWallClimb_Turn(float DeltaTime);// 0x13c5a44
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x13c59cc
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x13c5954
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x13c58dc
	void TickWallClimb(float DeltaTime);// 0x13c5864
	void TickStride_Turn(float DeltaTime);// 0x13c57ec
	void TickStride_Stride(float DeltaTime);// 0x13c5774
	void TickStride_MoveToWall(float DeltaTime);// 0x13c56fc
	void TickStride(float DeltaTime);// 0x13c5684
	void StrideJump();// 0x13c5670
	void StrideExit();// 0x13c565c
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x13c5584
	void OnMobDie();// 0x13c5570
	void NotifyClientsWallClimbSyncState(Vector Pos, Rotator Rotator, int nowWallClimbState);// 0x13c5464
	void NotifyClientsWallClimbStartClimbToStand(Vector Pos, Rotator Rotator, int nowWallClimbState);// 0x13c5358
	void NotifyClientsStrideState(Vector Pos, Rotator Rotator, int nowStrideState);// 0x13c524c
	void NotifyClientsStartStride(Vector Pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x13c4ff8
	bool IsInAdvancedMovement();// 0x13c4fd0
	int GetWallJumpState();// 0x13c4fa8
	int GetWallClimbState();// 0x13c4f80
	int GetStrideState();// 0x13c4f58
	void BPWallJump(Vector DstLocation);// 0x13c4ee0
	void BPWallClimb(Vector DstLocation);// 0x13c4e68

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0xbc, Size: 0x4]
	enum[] AcceptableNoiseType;//[Offset: 0xc0, Size: 0xc]
	enum NoiseAttenuationModel;//[Offset: 0xcc, Size: 0x1]
	int NoisePoolSize;//[Offset: 0xd0, Size: 0x4]
	float NoiseRememberTime;//[Offset: 0xd4, Size: 0x4]
	float NoiseUpdateFrequency;//[Offset: 0xd8, Size: 0x4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x13c7ac0
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x13c79b0
	void OnMobDie();// 0x13c799c
	void ClearNoisePool();// 0x13c799c
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x13c77fc
	float Attenuation(out AIStimulus Stimulus);// 0x13c7664
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x13c7448

--------------------------------
Class: NoiseInfo
	enum noiseType;//[Offset: 0x0, Size: 0x1]
	Actor* Instigator;//[Offset: 0x4, Size: 0x8]
	Vector NoiseLocation;//[Offset: 0xc, Size: 0xc]
	float LoudnessAtStart;//[Offset: 0x18, Size: 0x4]
	float LoudnessHeard;//[Offset: 0x1c, Size: 0x4]
	float HeardTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x110, Size: 0xc]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x2515b70
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x2515af0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x25159dc

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0, Size: 0x4]
	AIController* AIOwner;//[Offset: 0xc4, Size: 0x4]
	void StopLogic(FString Reason);// 0x25191d0
	void RestartLogic();// 0x12e0f50
	bool IsRunning();// 0x1421078
	bool IsPaused();// 0x1421048

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xbc, Size: 0x4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xdc, Size: 0xc]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x25177bc
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x2517608
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x2517534
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x2517460
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x251738c
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x25172b8
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x25171e4
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x2517110
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x251703c
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x2516f60
	bool IsVectorValueSet(out const FName KeyName);// 0x2516ecc
	Vector GetValueAsVector(out const FName KeyName);// 0x2516e28
	FString GetValueAsString(out const FName KeyName);// 0x2516d0c
	Rotator GetValueAsRotator(out const FName KeyName);// 0x2516c68
	Object* GetValueAsObject(out const FName KeyName);// 0x2516bd4
	FName GetValueAsName(out const FName KeyName);// 0x2516b38
	int GetValueAsInt(out const FName KeyName);// 0x2516aa4
	float GetValueAsFloat(out const FName KeyName);// 0x2516a10
	byte GetValueAsEnum(out const FName KeyName);// 0x251697c
	class Object GetValueAsClass(out const FName KeyName);// 0x25168e8
	bool GetValueAsBool(out const FName KeyName);// 0x2516854
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x251676c
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x2516684
	void ClearValue(out const FName KeyName);// 0x25165f8

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 0x4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 0xc]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 0xc]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 0x4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 0x4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 0x4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 0xc]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 0xc]
	BTService*[] Services;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 0x4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 0xc]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c, Size: 0xc]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x3c, Size: 0x4]
	float RandomDeviation;//[Offset: 0x40, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x33c, Size: 0x4]
	BrainComponent* BrainComponent;//[Offset: 0x340, Size: 0x4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x344, Size: 0x4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x348, Size: 0x4]
	BlackboardComponent* Blackboard;//[Offset: 0x34c, Size: 0x4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x350, Size: 0x4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x354, Size: 0x4]
	delegate ReceiveMoveCompleted;//[Offset: 0x358, Size: 0xc]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x250cfdc
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x250cf64
	void SetMoveBlockDetection(bool bEnable);// 0x250cee4
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x250ce5c
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x1c01fa0
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x1c01fa0
	void OnPossess(Pawn* PossessedPawn);// 0x1c01fa0
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x250cd98
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x250caf0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x250c8a8
	void K2_SetFocus(Actor* NewFocus);// 0x250c830
	void K2_SetFocalPoint(Vector FP);// 0x250c7c0
	void K2_ClearFocus();// 0x250c7ac
	bool HasPartialPath();// 0x250c784
	PathFollowingComponent* GetPathFollowingComponent();// 0x21c0cf4
	byte GetMoveStatus();// 0x250c75c
	Vector GetImmediateMoveDestination();// 0x250c714
	Actor* GetFocusActor();// 0x250c6ec
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x250c654
	Vector GetFocalPoint();// 0x250c60c
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x250c5f0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x250c578

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x100, Size: 0x4]
	NavigationData* MyNavData;//[Offset: 0x10c, Size: 0x4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x2529d6c
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x2529bfc
	Vector GetPathDestination();// 0x2529bb4
	byte GetPathActionType();// 0x2529b8c

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xbc, Size: 0xc]
	class AISense* DominantSense;//[Offset: 0xc8, Size: 0x4]
	AIController* AIOwner;//[Offset: 0xe0, Size: 0x4]
	delegate OnPerceptionUpdated;//[Offset: 0x140, Size: 0xc]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x14c, Size: 0xc]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x250ee38
	void RequestStimuliListenerUpdate();// 0x250ee24
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x250ed68
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x250ec9c
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x250eb8c
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x250ea7c
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x250e96c
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x250e844

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c, Size: 0x4]
	float MaxAge;//[Offset: 0x20, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 0x4]
	enum NotifyType;//[Offset: 0x20, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c, Size: 0xc]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x250fdf0
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x250fd78
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x250fc78
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x250fbbc
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x250f9e8

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x28, Size: 0x8]
	int iExtraData;//[Offset: 0x40, Size: 0x4]
	int iExtraData;//[Offset: 0x44, Size: 0x4]
	int iExtraData;//[Offset: 0x48, Size: 0x4]
	float fExtraData;//[Offset: 0x4c, Size: 0x4]
	float fExtraData;//[Offset: 0x50, Size: 0x4]
	float fExtraData;//[Offset: 0x54, Size: 0x4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 0xc]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xbc, Size: 0x4]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0, Size: 0xc]
	PawnActionEvent[] ActionEvents;//[Offset: 0xcc, Size: 0xc]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x252b59c
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x252b494
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x252b414
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x252b394

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 0x4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 0x4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 0x4]
	Object* Instigator;//[Offset: 0x28, Size: 0x4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 0x4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1]
	byte GetActionPriority();// 0x252a448
	void Finish(byte WithResult);// 0x252a3c0
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x252a304

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0xc]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xcc, Size: 0xc]
	GameplayTask*[] TickingTasks;//[Offset: 0xe4, Size: 0xc]
	GameplayTask*[] KnownTasks;//[Offset: 0xf0, Size: 0xc]
	delegate OnClaimedResourcesChange;//[Offset: 0x100, Size: 0xc]
	void OnRep_SimulatedTasks();// 0x2460280
	static enum K2_RunGameplayTask(interface class TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x245ff0c

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 0x4]
	void ReadyForActivation();// 0x245e58c
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x1c01fa0
	void EndTask();// 0x245e578

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum noiseType;//[Offset: 0x1, Size: 0x1]
	float LoudnessHeard;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0xbc, Size: 0x4]
	float VelocityDampingInMidAir;//[Offset: 0xc0, Size: 0x4]
	float StepHeight;//[Offset: 0xc4, Size: 0x4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xc8, Size: 0x4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	void AddVelocity(Vector InVelocity);// 0x14dec84

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0xbc, Size: 0x1]
	byte Type;//[Offset: 0xbd, Size: 0x1]
	int TypeID;//[Offset: 0xc0, Size: 0x4]
	void SetActorVisible(bool bEnable);// 0x1529f24

--------------------------------
Class: RoadPointInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	int Radius;//[Offset: 0x4, Size: 0x4]
	Vector Pos;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 0x4]
	int DownThreshold;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	byte VerifyShootPoint(STExtraCharacter* Victim, out const Vector MuzzlePos, Pawn* AttackPawn);// 0x14050fc
	float SimulatedCharacterServerTime();// 0x13b15c8
	byte ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* shooter, out const BulletHitInfoUploadData ShootData);// 0x1404fa4
	byte GetHitType(STExtraCharacter* Victim, out const Vector ShootMuzzlePos, out const Vector ImpactPoint);// 0x1404e78

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x2fc, Size: 0x2c]
	int KeepStillMinTime;//[Offset: 0x328, Size: 0x4]
	float StillMaxSpeed;//[Offset: 0x32c, Size: 0x4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x330, Size: 0xc]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x33c, Size: 0xc]
	Vector StandStillHeadBoxOffset;//[Offset: 0x348, Size: 0xc]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x354, Size: 0xc]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x360, Size: 0xc]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x36c, Size: 0xc]
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13b1758
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x13b15f8
	float SimulatedCharacterServerTime();// 0x13b15c8

--------------------------------
Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0, Size: 0x4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 0x4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 0x4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x8, Size: 0x14]
	Vector Origin;//[Offset: 0x1c, Size: 0xc]
	HitResult[] ComponentHits;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 0x4]
	float MinimumDamage;//[Offset: 0x4, Size: 0x4]
	float InnerRadius;//[Offset: 0x8, Size: 0x4]
	float OuterRadius;//[Offset: 0xc, Size: 0x4]
	float DamageFalloff;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0xd0, Size: 0xc]
	float SeekAreaPixelSize;//[Offset: 0xdc, Size: 0x4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0xe0, Size: 0x8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0xe8, Size: 0x8]
	float ScopeInDelayTime;//[Offset: 0xf0, Size: 0x4]
	float InitialLockFrameLength;//[Offset: 0xf4, Size: 0x4]
	float FinalLockFrameLength;//[Offset: 0xf8, Size: 0x4]
	float MaxSeekDeistance;//[Offset: 0xfc, Size: 0x4]
	float LineTraceTargetMaxDistance;//[Offset: 0x100, Size: 0x4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x104, Size: 0x4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x108, Size: 0x4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x10c, Size: 0x4]
	float TraceTargetInterval;//[Offset: 0x110, Size: 0x4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x114, Size: 0x3c]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x150, Size: 0x3c]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x18c, Size: 0x3c]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x1c8, Size: 0x4]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x1cc, Size: 0x4]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x1d0, Size: 0x4]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x1d4, Size: 0x4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1d8, Size: 0x4]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x1e0, Size: 0xc]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x1ec, Size: 0xc]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x1f8, Size: 0xc]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x214, Size: 0x4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x218, Size: 0x4]
	float CurTraceTargetCountTime;//[Offset: 0x21c, Size: 0x4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	void ShowEnemyLaunchRocketTips();// 0x1417b20
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x1417a24
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x1417970
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x1417874
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x14177c0
	void RemoveTargetList(Actor*[] TargetList);// 0x1417668
	void RemoveTarget(Actor* Target);// 0x14175f0
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x1c01fa0
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x1c01fa0
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x1c01fa0
	void InitComplete();// 0x12e82e4
	void HandleTargetOutOfSeekArea();// 0x14175dc
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x1417564
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x1417564
	enum GetCurrentSeekAndLockStage();// 0x141753c
	Actor* GetCurrentLockTarget();// 0x1417514
	bool CheckTargetIsVisible(Actor* Target);// 0x1417494
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x1417414
	void AddTarget(Actor* Target);// 0x141739c

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 0x4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 0x1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0xc8, Size: 0xc]
	delegate OnBuffDetached;//[Offset: 0xd4, Size: 0xc]
	UTBuffSynData[] BuffSyncList;//[Offset: 0x120, Size: 0xc]
	FString ServerBuffString;//[Offset: 0x12c, Size: 0xc]
	float BuffSyncRemainingPeriod;//[Offset: 0x138, Size: 0x4]
	BuffInstancedItem[] AllBuffs;//[Offset: 0x13c, Size: 0xc]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x15c2460
	void ResetForDeath();// 0x15c244c
	void RepBuffSyncList();// 0x15c2438
	bool RemoveBuffWithCauser(FName BuffName, bool RemoveLayerOnly, Controller* pCauser);// 0x15c231c
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* BuffApplierActor);// 0x15c21c0
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x15c20a4
	void RefreshAllBuffs();// 0x134e440
	bool IsBufferMutexed(FName NewBuffName);// 0x15c2024
	bool HasBuffID(int BuffID);// 0x15c1fa4
	bool HasBuff(FName BuffName);// 0x15c1f24
	Pawn* GetPawnOwner();// 0x15c1efc
	FName GetBuffName(int BuffID);// 0x15c1e74
	int GetBuffID(FName BuffName);// 0x15c1df4
	float GetBuffExpiry(out const FName BuffName);// 0x15c1d60
	STBaseBuff* GetBuffByName(FName BuffName);// 0x15c1ce0
	Actor* GetActorOwner();// 0x15c1cb8
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x15c1a58
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x15c1b6c
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x15c1a58
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x15c190c
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x15c1848
	void ClearBuff(bool bDebuff, bool bGainBuff);// 0x15c1778
	bool CheckBuffStatus(class STBaseBuffStatusType Status, out bool Value);// 0x15c16a4
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0x1c01fa0
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0x1c01fa0
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x15c15e0
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x15c1514
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x15c13bc
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x15c1220

--------------------------------
Class: UTBuffSynData
	FName BuffName;//[Offset: 0x0, Size: 0x8]
	Controller* BuffCauser;//[Offset: 0x8, Size: 0x4]
	int LayerCount;//[Offset: 0xc, Size: 0x4]
	Actor* BuffApplierActor;//[Offset: 0x10, Size: 0x4]
	float RemainingTime;//[Offset: 0x14, Size: 0x4]
	float ExpireTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0, Size: 0x8]
	int BuffID;//[Offset: 0x8, Size: 0x4]
	STBaseBuff* Buff;//[Offset: 0xc, Size: 0x8]
	int LayerCount;//[Offset: 0x14, Size: 0x4]
	Controller* CauserPawnController;//[Offset: 0x18, Size: 0x4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float Expiry;//[Offset: 0x20, Size: 0x4]
	Actor* Target;//[Offset: 0x24, Size: 0x4]
	Actor* BuffApplier;//[Offset: 0x28, Size: 0x4]
	int BuffIndex;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x20, Size: 0xc]
	FString DisplayName;//[Offset: 0x2c, Size: 0xc]
	FString Message;//[Offset: 0x38, Size: 0xc]
	Texture2D* Icon;//[Offset: 0x44, Size: 0x4]
	SoundBase* SoundData;//[Offset: 0x48, Size: 0x4]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool StaysOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	int LayerMax;//[Offset: 0x54, Size: 0x4]
	int InitialLayerCount;//[Offset: 0x58, Size: 0x4]
	int LayerCount;//[Offset: 0x5c, Size: 0x4]
	float ValidityTime;//[Offset: 0x60, Size: 0x4]
	float Internal;//[Offset: 0x64, Size: 0x4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x68, Size: 0xc]
	float Expiry;//[Offset: 0x74, Size: 0x4]
	StatusChange[] StatusChanges;//[Offset: 0x78, Size: 0xc]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	byte SimulateAddBuffRole;//[Offset: 0x86, Size: 0x1]
	FName[] MutexBuffers;//[Offset: 0x88, Size: 0xc]
	BuffActionItem[] BuffActions;//[Offset: 0x94, Size: 0xc]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xa0, Size: 0xc]
	float fADScale;//[Offset: 0xac, Size: 0x4]
	float fAPScale;//[Offset: 0xb0, Size: 0x4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	Controller* CauserPawnController;//[Offset: 0xb8, Size: 0x4]
	Actor* CauserPawnActor;//[Offset: 0xbc, Size: 0x4]
	Actor* BuffApplier;//[Offset: 0xcc, Size: 0x4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0xd0, Size: 0x3c]
	int InstancedNodesTotalSize;//[Offset: 0x10c, Size: 0x4]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x3795068
	bool IsOK_Internal();// 0x3794ff4
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x3794f04

--------------------------------
Class: UTSkillBaseWidget.ActorComponent.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	FString WidgetDescription;//[Offset: 0xc4, Size: 0xc]
	Actor* BuffTargetActor;//[Offset: 0xd0, Size: 0x4]
	UTSkill* OwnerSkill;//[Offset: 0xd4, Size: 0x8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0xdc, Size: 0x4]
	UAEBlackboard* GetUAEBlackboard();// 0x379574c
	Actor* GetOwnerPawn();// 0x37956dc

--------------------------------
Class: UTSkill.Actor.Object
	Pawn* OwnerPawn;//[Offset: 0x2d0, Size: 0x8]
	FString SkillName;//[Offset: 0x2e0, Size: 0xc]
	int SkillID;//[Offset: 0x2ec, Size: 0x4]
	enum SkillTargetType;//[Offset: 0x2f0, Size: 0x1]
	FString SkillDescription;//[Offset: 0x2f4, Size: 0xc]
	FString SkillDetailDes;//[Offset: 0x300, Size: 0xc]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 0x1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 0x1]
	UTSkillCreateData BaseData;//[Offset: 0x310, Size: 0x30]
	Texture2D* SkillIcon;//[Offset: 0x340, Size: 0x4]
	Texture2D* SkillVehicleIcon;//[Offset: 0x344, Size: 0x4]
	FString SkillVehicleName;//[Offset: 0x348, Size: 0xc]
	bool NegativeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	bool ShouldShowTargetPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 0x1]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x356, Size: 0x1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x358, Size: 0xc]
	bool IsCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	bool bAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	Actor* LastSpawnedActor;//[Offset: 0x368, Size: 0x8]
	Pawn* LastSpawnedPawn;//[Offset: 0x370, Size: 0x8]
	float PhasePercentage;//[Offset: 0x39c, Size: 0x4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x3a0, Size: 0x3c]
	int InstancedNodesTotalSize;//[Offset: 0x3dc, Size: 0x4]
	FString[] ParentFolderPath;//[Offset: 0x3e0, Size: 0xc]
	int64 LastEditBluePrintTime;//[Offset: 0x3f0, Size: 0x8]
	int CurComponentNameIndex;//[Offset: 0x3f8, Size: 0x4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float Percentage);// 0x37932e4
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x3793118
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x379303c
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x3792f50
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x3792e00
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x3792d1c
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x3792b98

--------------------------------
Class: UTSkillCreateData
	int SkillGroupIndex;//[Offset: 0x0, Size: 0x4]
	float Interval;//[Offset: 0x4, Size: 0x4]
	float IntervalSincePrevFinish;//[Offset: 0x8, Size: 0x4]
	FString CoolDownMessage;//[Offset: 0xc, Size: 0xc]
	int CoolDownMessageID;//[Offset: 0x18, Size: 0x4]
	float Range;//[Offset: 0x1c, Size: 0x4]
	UTSkillPhase*[] Phases;//[Offset: 0x20, Size: 0xc]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	FString PhaseName;//[Offset: 0xc0, Size: 0xc]
	FString PhaseDescription;//[Offset: 0xcc, Size: 0xc]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	UTSkill* OwnerSkill;//[Offset: 0xdc, Size: 0x8]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x104, Size: 0x60]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x178, Size: 0x4]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x379ce54
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x379a654
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x379cd70
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x379cc8c
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x379cb30
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x379c9d4
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x379c8f0
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x379c790
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x379c630
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x379c554
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x379c464
	bool ClearAttachments();// 0x379c3f8

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 0x4]
	FString TimeAdjustAttr;//[Offset: 0x4, Size: 0xc]
	float AltPhaseDuration;//[Offset: 0x10, Size: 0x4]
	float CacheMouseInputTime;//[Offset: 0x14, Size: 0x4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x1c, Size: 0xc]
	UTSkillPicker* Picker;//[Offset: 0x28, Size: 0x4]
	UTSkillEffect*[] Actions;//[Offset: 0x2c, Size: 0xc]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x38, Size: 0xc]
	enum PhaseType;//[Offset: 0x44, Size: 0x1]
	FString EnterPhaseTipString;//[Offset: 0x48, Size: 0xc]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0xe0, Size: 0x20]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x10c, Size: 0xc]
	Actor*[] IgnoreTargets;//[Offset: 0x118, Size: 0xc]

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 0x1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 0x8]
	enum PickerTargetType;//[Offset: 0x10, Size: 0x1]
	int PickerMaxCount;//[Offset: 0x14, Size: 0x4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 0x8]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	byte HitPos;//[Offset: 0x11, Size: 0x1]
	FName BoneName;//[Offset: 0x18, Size: 0x8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 0xc]
	byte hitPhysMatType;//[Offset: 0x2c, Size: 0x1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float fADScale;//[Offset: 0xe0, Size: 0x4]
	float fAPScale;//[Offset: 0xe4, Size: 0x4]
	Object*[] CacheSoftObject;//[Offset: 0xe8, Size: 0xc]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x3795d54
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3795c70
	void OnAsyncLoadSoftPathDone();// 0x3795c10
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x3795ac0
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3793d98

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0xc4, Size: 0x4]
	int[] SkillInitIndices;//[Offset: 0xc8, Size: 0xc]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	class UTSkill[] SkillArchetypes;//[Offset: 0xd8, Size: 0xc]
	bool UseSkillsCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 0x1]
	bool LoadSkillsAllClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 0x1]
	UTSkill*[] Skills;//[Offset: 0xe8, Size: 0xc]
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0xf4, Size: 0x3c]
	Actor* Target;//[Offset: 0x16c, Size: 0x4]
	Actor*[] RepTargets;//[Offset: 0x170, Size: 0xc]
	UTSkillSynData SkillSynData;//[Offset: 0x17c, Size: 0x18]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x194, Size: 0xc]
	delegate OnSkillHit;//[Offset: 0x1a0, Size: 0xc]
	delegate OnSkillCast;//[Offset: 0x1ac, Size: 0xc]
	float PhasePercentage;//[Offset: 0x1d0, Size: 0x4]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x1d8, Size: 0x28]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x200, Size: 0x28]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x228, Size: 0xc]
	FString LastESkillTargetDesc;//[Offset: 0x24c, Size: 0xc]
	int SkillSynRandomSeed;//[Offset: 0x258, Size: 0x4]
	RandomStream SkillSynRandStream;//[Offset: 0x25c, Size: 0x8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x264, Size: 0x4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x268, Size: 0x3c]
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	<int,int> SkillHandleToIndexMap;//[Offset: 0x2c0, Size: 0x3c]
	UTAddedSkillSturct[] AddedSkillStructList;//[Offset: 0x2fc, Size: 0xc]
	UTAddedSkillSturct[] LoadingSkillStructList;//[Offset: 0x308, Size: 0xc]
	float ZombieModeUseSkillCD;//[Offset: 0x314, Size: 0x4]
	int ZombieModeMaxSkillPropLevel;//[Offset: 0x31c, Size: 0x4]
	bool TriggerEvent(int SkillID, byte EventType);// 0x379ae48
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x379ab3c
	void SwitchSkill(int SkillID, byte EventType);// 0x379a9e8
	void StopSkill(int SkillID, enum StopReason);// 0x379a898
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x379a738
	void SetSkillOwner(Actor* tempActor);// 0x379a654
	void SetCurSkill(int SkillIndex);// 0x379a584
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x379a3ec
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x379a268
	void ServerNotifyRandomSeed(int Seed);// 0x379a148
	void RepSkillSynData();// 0x379411c
	void RepSkillHitInfo();// 0x379a0e8
	void RepLastCastTime();// 0x379a088
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x3799f48
	bool PreCheckNewSkill(int SkillID);// 0x3799e58
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x3799d10
	static bool OnSameTeam(Actor* A, Actor* B);// 0x3799bd8
	void OnRep_SkillHitInfo();// 0x3799b70
	void OnRep_AddedSkillList(UTAddedSkillSturct[] originList);// 0x3799974
	void OnAsyncLoadFinishedByItem(int SkillIndex);// 0x37998a4
	bool LoadSyncIfLoadingWithSkillIndex(int SkillIndex);// 0x37997c8
	bool LoadSyncIfLoading(class UTSkill SkillClass);// 0x37995f8
	bool IsReadyToCastSkill(int SkillID);// 0x3793d98
	bool IsCastingSkill();// 0x3799584
	void InitSkillSystem(bool isDedicateServer);// 0x3799474
	int GetSkillIndexByClass(class Object SkillClass);// 0x3799388
	UTSkill* GetSkillByName(FString SkillName);// 0x3799210
	UTSkill* GetSkill(int SkillID);// 0x3799124
	UTSkillPhase* GetCurSkillPhase();// 0x37990bc
	int GetCurSkillIndex();// 0x3799054
	UTSkill* GetCurSkill();// 0x3798fec
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x3798e74
	void ClearSkill();// 0x3798e0c
	bool CheckNewSkill(int SkillID);// 0x3798d1c
	void CheckAutoSkill();// 0x3794324
	void BeginAddSkillByItemAsync(out UTAddedSkillSturct temp);// 0x3798be8

--------------------------------
Class: UAEBlackboard.Object
	<FName,Object*> ObjectParamMap;//[Offset: 0x1c, Size: 0x3c]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x58, Size: 0x3c]
	<FName,class Object> ClassParamMap;//[Offset: 0x94, Size: 0x3c]
	<FName,byte> EnumParamMap;//[Offset: 0xd0, Size: 0x3c]
	<FName,int> IntParamMap;//[Offset: 0x10c, Size: 0x3c]
	<FName,uint32> UIntParamMap;//[Offset: 0x148, Size: 0x3c]
	<FName,float> FloatParamMap;//[Offset: 0x184, Size: 0x3c]
	<FName,bool> BoolParamMap;//[Offset: 0x1c0, Size: 0x3c]
	<FName,FString> StringParamMap;//[Offset: 0x1fc, Size: 0x3c]
	<FName,FName> NameParamMap;//[Offset: 0x238, Size: 0x3c]
	<FName,Vector> VectorParamMap;//[Offset: 0x274, Size: 0x3c]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x2b0, Size: 0x3c]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x37a4ff8
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x37a4f24
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x37a4d70
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x37a4c9c
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x37a4bc8
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x37a4af4
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x37a4a20
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x37a494c
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x37a4878
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x37a47a4
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x37a46c8
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x37a4634
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x37a45a0
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x37a450c
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x37a4478
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x37a43e4
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x37a4350
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x37a42bc
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x37a4228
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x37a4194
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x37a4100
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x37a406c
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x37a3fd8
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x37a3f34
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x37a3e18
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x37a3d74
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x37a3ce0
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x37a3c44
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x37a3bb0
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x37a3b1c
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x37a3a88
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x37a39f4
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x37a3960

--------------------------------
Class: UTSkillSynData
	int CurSkillIndex;//[Offset: 0x0, Size: 0x4]
	int CurSkillPhase;//[Offset: 0x4, Size: 0x4]
	bool ReplicateImpulseFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int CurLoadDynSkillID;//[Offset: 0xc, Size: 0x4]
	bool ReplicatePhaseIndexImpulseFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int Reason;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0, Size: 0x4]
	float LastCastTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0xc]
	Actor* FromPawn;//[Offset: 0xc, Size: 0x4]
	int SkillID;//[Offset: 0x10, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x14, Size: 0x4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	byte HitSurfaceType;//[Offset: 0x1a, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0xc]
	Actor* FromPawn;//[Offset: 0xc, Size: 0x4]
	int SkillID;//[Offset: 0x10, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x14, Size: 0x4]
	byte HitSurfaceType;//[Offset: 0x18, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: UTAddedSkillSturct
	class UTSkill* SkillTemplate;//[Offset: 0x0, Size: 0x28]
	FString SkillTemplatePath;//[Offset: 0x28, Size: 0xc]
	int SkillIndex;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte SkillEventType;//[Offset: 0xe0, Size: 0x1]
	UTSkillEffect* SkillEffect;//[Offset: 0xe4, Size: 0x4]
	SkillConditionWarpper[] Conditions;//[Offset: 0xe8, Size: 0xc]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0xf4, Size: 0xc]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Type;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0, Size: 0x4]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillActionCreateData BaseData;//[Offset: 0xf4, Size: 0x4]
	UTSkillAction* OwnerPeriodAction;//[Offset: 0xf8, Size: 0x4]
	Object* EventObj;//[Offset: 0x108, Size: 0x4]
	void UpdateAction_Internal(float DeltaSeconds);// 0x37944d0
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x379438c
	void UndoAction_Internal();// 0x3794324
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3794254
	void TimerRealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3794184
	void Reset_Internal();// 0x379411c
	void Reset(ActorComponent* SkillManagerComponent);// 0x379404c
	bool RealDoAction_Internal();// 0x3793fd8
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3793efc
	bool JudgeNeedPhaseWait();// 0x3793e88
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3793d98

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0, Size: 0x4]
	UTSkillAction* BuffEventAction;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: STBaseBuffEventType.Object

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 0xc]
	void UpdateAttribute(int TemplateID);// 0x12e0f6c
	void InitializeFollow();// 0x12e0f50
	void Initialize(Actor* Actor);// 0x12e0ed0

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xbc, Size: 0x4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc0, Size: 0x4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bOptimizeBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool bBoxCollionOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0xc8, Size: 0xc]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0xd4, Size: 0xc]
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0xe0, Size: 0xc]
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0xec, Size: 0xc]
	byte ClientHitPartJudgment;//[Offset: 0xf8, Size: 0x1]
	byte DSHitPartJudgment;//[Offset: 0xf9, Size: 0x1]
	FString HitBox_Stand_Tag;//[Offset: 0xfc, Size: 0xc]
	FString HitBox_Prone_Tag;//[Offset: 0x108, Size: 0xc]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x114, Size: 0x4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x118, Size: 0x4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x11c, Size: 0x4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x120, Size: 0x4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x124, Size: 0x8]
	BodyTypeDef StandBodyDef;//[Offset: 0x12c, Size: 0x8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x134, Size: 0x8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x13c, Size: 0x8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x144, Size: 0x8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x14c, Size: 0x3c]
	float PawnCollisionCountdown;//[Offset: 0x188, Size: 0x4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	float BoxCollisionCountdown;//[Offset: 0x190, Size: 0x4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x12f2758
	void UpdateAllInstanceBodyTransform(int Type);// 0x13e1064
	void InitBodyBoneMap(byte PoseState);// 0x1351dbc
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x13e0fe4
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x13e0f50
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x13e0e84
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x13e0d10
	byte GetCurHitPartJugementType();// 0x13e0ce8
	void CloseBodyBulletCollision();// 0x12e0f50
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x13e0b4c

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 0xc]
	Vector PitchOffset;//[Offset: 0xc, Size: 0xc]
	Vector FootOffset;//[Offset: 0x18, Size: 0xc]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0xc0, Size: 0x4]
	int MaxCheatTimes;//[Offset: 0xc4, Size: 0x4]
	float TolerateDistanceFractor;//[Offset: 0xc8, Size: 0x4]
	float MaxPacketLossRate;//[Offset: 0xcc, Size: 0x4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xd0, Size: 0x4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xd4, Size: 0x4]
	int MaxTotalPassWallTimes;//[Offset: 0xd8, Size: 0x4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xdc, Size: 0x4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	int MaxShootPointPassWall;//[Offset: 0xe4, Size: 0x4]
	int MaxGunPosErrorTimes;//[Offset: 0xe8, Size: 0x4]
	float MaxSkeletonLength;//[Offset: 0xec, Size: 0x4]
	int MaxMuzzleHeightTime;//[Offset: 0xf0, Size: 0x4]
	int MaxLocusFailTime;//[Offset: 0xf4, Size: 0x4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xf8, Size: 0x4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0xfc, Size: 0x4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x100, Size: 0x4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x104, Size: 0x4]
	VerifySwitch VsBoneInfo;//[Offset: 0x108, Size: 0xc]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x114, Size: 0xc]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x120, Size: 0xc]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x12c, Size: 0xc]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x138, Size: 0xc]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x144, Size: 0xc]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x150, Size: 0xc]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x15c, Size: 0xc]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x168, Size: 0xc]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x174, Size: 0xc]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x180, Size: 0xc]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x18c, Size: 0xc]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x198, Size: 0xc]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1a4, Size: 0xc]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x220, Size: 0x88]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x2a8, Size: 0x50]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x2f8, Size: 0x34]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x330, Size: 0x78]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x400, Size: 0x3c]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x460, Size: 0x20]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x480, Size: 0x574]
	float MaxJumpHeight;//[Offset: 0x9f8, Size: 0x4]
	Character* CharacterOwner;//[Offset: 0x9fc, Size: 0x4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 0x1]
	int ServerControlMaxThreshold;//[Offset: 0xa74, Size: 0x4]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x13d4b3c
	void RefreshRealMaxJumpHeight();// 0x13d4b28
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x13d49ac
	void Ping2Client(float ServerTime);// 0x13d4934
	void OnPreReconnectOnServer();// 0x13d4920
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x13d46b4
	void DebugDrawLine(const Vector Start, const Vector End);// 0x13d4608
	void ClearJumpLimit();// 0x13d45f4

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0, Size: 0x4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4, Size: 0x4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8, Size: 0x4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc, Size: 0x4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10, Size: 0x4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14, Size: 0x4]
	float ServerSendPingIntervel;//[Offset: 0x18, Size: 0x4]
	float MaxMoveSpeedValue;//[Offset: 0x1c, Size: 0x4]
	int MaxSpeedSplitNum;//[Offset: 0x20, Size: 0x4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x24, Size: 0x4]
	int MaxClientSpeed;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4, Size: 0x4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8, Size: 0x4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc, Size: 0x4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10, Size: 0x4]
	float MaxMoveSpeedValue;//[Offset: 0x14, Size: 0x4]
	int MaxSpeedSplitNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 0x4]
	float MaxAllowMoveZHeight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 0x4]
	float DataSampleInterval;//[Offset: 0x4, Size: 0x4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 0x4]
	float CheatLockTime;//[Offset: 0xc, Size: 0x4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 0x4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 0x4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 0x4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 0x4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 0x4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 0x4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: RealtimeMoveSpeedCheck

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 0x4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8, Size: 0x4]
	float MaxVectorAccAngel;//[Offset: 0xc, Size: 0x4]
	float MaxSumVectorLength;//[Offset: 0x10, Size: 0x4]
	float MaxVectorAccTime;//[Offset: 0x14, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ShovelInfo

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xbc, Size: 0x4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc0, Size: 0x4]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1322768

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x1365bc0
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x136599c
	void S2A_EndEffectGraph(int Uid);// 0x12e0ed0
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x1365730

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0xc4, Size: 0x4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0xd8, Size: 0x4]
	float FreeFall_AcceFall;//[Offset: 0xdc, Size: 0x4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0xe0, Size: 0x4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0xe4, Size: 0x4]
	float FreeFall_AcceForward;//[Offset: 0xe8, Size: 0x4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0xec, Size: 0x4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0xf0, Size: 0x4]
	float FreeFall_AcceRight;//[Offset: 0xf4, Size: 0x4]
	float FreeFall_MaxRightSpeed;//[Offset: 0xf8, Size: 0x4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0xfc, Size: 0x4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x100, Size: 0x4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x104, Size: 0x4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x108, Size: 0x4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x10c, Size: 0x4]
	float FreeFall_MinDiveAngle;//[Offset: 0x110, Size: 0x4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x114, Size: 0x4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x118, Size: 0x4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	float Opened_AcceFall;//[Offset: 0x120, Size: 0x4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x124, Size: 0x4]
	float Opened_AcceForward;//[Offset: 0x128, Size: 0x4]
	float Opened_MaxForwardSpeed;//[Offset: 0x12c, Size: 0x4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x130, Size: 0x4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x134, Size: 0x4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x138, Size: 0x4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x13c, Size: 0x4]
	float Opened_AcceRight;//[Offset: 0x140, Size: 0x4]
	float Opened_MaxRightSpeed;//[Offset: 0x144, Size: 0x4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x148, Size: 0x4]
	float Opened_MaxRollAngle;//[Offset: 0x14c, Size: 0x4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x150, Size: 0x4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x154, Size: 0x4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x158, Size: 0x4]
	float Opened_RotationInterpSpeed;//[Offset: 0x15c, Size: 0x4]
	float CurrentFallSpeed;//[Offset: 0x160, Size: 0x4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x164, Size: 0x4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	float FollowerDist;//[Offset: 0x190, Size: 0x4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x194, Size: 0x4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x1345954
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator CameraRotation);// 0x13457b8
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator CameraRotation);// 0x134561c
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x134551c
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x13453d0
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x134527c
	void StopParachute();// 0x1345268
	void StartParachute();// 0x1345254
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x13451d4
	void ResetVelocity();// 0x13451c0
	void PostNetReceiveNewState();// 0x13451ac
	void OnPreReconnectOnServer();// 0x1345198
	void InvalidateAdjustFollowerLocation();// 0x1345184
	float GetReplicatedRightInput();// 0x134515c
	float GetReplicatedForwardInput();// 0x1345134
	Vector GetParachuteVelocity();// 0x13450ec
	void ClearParachuteStatusCache();// 0x13450d8
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1344fbc
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1344ea0
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x1344d50
	void AdjustFollowerLocation();// 0x1344d3c

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 0x1]
	float TotalTime;//[Offset: 0x4, Size: 0x4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x238, Size: 0x4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x23c, Size: 0xc]
	int EarlyReflectionOrder;//[Offset: 0x248, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x24c, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x250, Size: 0x4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a, Size: 0x1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25a, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x25c, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x260, Size: 0x4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x264, Size: 0x4]
	FString EventName;//[Offset: 0x268, Size: 0xc]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x3734778
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool Floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x3734444
	void Stop();// 0x3734430
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x37341c0
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x3734140
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x3733fa4
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x3733dc4
	void SetOutputBusVolume(float BusVolume);// 0x3733d4c
	void SetListeners(out const AkComponent*[] Listeners);// 0x3733c80
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x3733c08
	void SetAutoDestroy(bool in_AutoDestroy);// 0x3733b8c
	void SetAttenuationScalingFactor(float Value);// 0x3733b14
	void PostTrigger(FString Trigger);// 0x37339bc
	int PostAssociatedAkEvent();// 0x3733994
	int PostAkEventByName(FString in_EventName);// 0x37338d0
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x37337c8
	float GetAttenuationRadius();// 0x37337a0

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 0x4]
	FString SwitchGroupName;//[Offset: 0x4, Size: 0xc]
	FString SwitchValue;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	float BreathMax;//[Offset: 0xc8, Size: 0x4]
	float AssistAccountableDuration;//[Offset: 0xcc, Size: 0x4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0xd0, Size: 0x4]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0xd8, Size: 0x4]
	int MaxDeathTimes;//[Offset: 0xdc, Size: 0x4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe8, Size: 0x4]
	float EnterNearDeathSeconds;//[Offset: 0xec, Size: 0x4]
	float Breath;//[Offset: 0xf0, Size: 0x4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0xf4, Size: 0x4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0xf8, Size: 0x4]
	Controller* EventInstigatorRecorded;//[Offset: 0x104, Size: 0x4]
	Actor* DamageCauserRecorded;//[Offset: 0x108, Size: 0x4]
	float SetHealthSafety(float AddVal);// 0x1389ff0
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x143cde0
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x143cccc
	void ResetDataOnRespawn();// 0x143ccb8
	void RescueFinishSuccessfully();// 0x143cca4
	void OnRep_BreathChanged();// 0x143c964
	bool IsNearDeathInvincible();// 0x143cc7c
	bool IsHealthAlive();// 0x143cc54
	bool IsHaveLastBreathStatus();// 0x143cc2c
	bool IsFinishedLastBreathStatus();// 0x143cc04
	void InitializeOwner(Pawn* TempPawn);// 0x143cb8c
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadShot);// 0x143c9c4
	float GetBreathMax();// 0x143c9a8
	float GetBreath();// 0x143c98c
	void EnterSwimWhileDying();// 0x143c978
	void DoFinishLastBreath();// 0x143c964
	void ClearNearDeathTeammate();// 0x143c950
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x143c884
	void AddDeadBuff();// 0x143c870

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xbc, Size: 0x4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0xc0, Size: 0x4]
	anPickerData FanData;//[Offset: 0xc4, Size: 0x14]
	STExtraBaseCharacter* RescueWho;//[Offset: 0xf0, Size: 0x4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0xf4, Size: 0x4]
	float RestoringDuration;//[Offset: 0x110, Size: 0x4]
	FString DurationAttrModifyRef;//[Offset: 0x114, Size: 0xc]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x120, Size: 0x8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x128, Size: 0x4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x143dcc0
	void WaitingConfirmState_ActOnUnsatisfied();// 0x143dcac
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x1396184
	void TickAsHelper(float DeltaTime);// 0x143dc34
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x143db80
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x143db08
	bool RescueingState_IsConditionSatisfied();// 0x143dae0
	void RescueingState_ActOnUnsatisfied();// 0x143dacc
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x1396184
	void RescueingProcessFinished();// 0x143dab8
	bool PlayerConfirmToRescueClientSide();// 0x143da90
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x143d9bc
	void OnRep_IsRescueingOtherStatusChange();// 0x143d9a8
	bool IsInRescueingStatus();// 0x143d980
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x143d8c4
	float GetRestoringDuration();// 0x143d89c
	void DrawDebugFan();// 0x12e82e4

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 0x4]
	float Angle;//[Offset: 0x4, Size: 0x4]
	float Offset;//[Offset: 0x8, Size: 0x4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xbc, Size: 0x4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc0, Size: 0x4]
	STExtraBaseCharacter* Target;//[Offset: 0xc8, Size: 0x4]
	float CanFollowDist;//[Offset: 0xcc, Size: 0x4]
	float QuitFollowAngleInput;//[Offset: 0xd0, Size: 0x4]
	float QuitFollowDist;//[Offset: 0xd4, Size: 0x4]
	float PointDensityTimeInterval;//[Offset: 0xd8, Size: 0x4]
	float DistThrehold;//[Offset: 0xdc, Size: 0x4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe4, Size: 0x8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xec, Size: 0x4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x124, Size: 0xc]
	TargetKeyOperation* CurOp;//[Offset: 0x130, Size: 0x4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x14399c4
	void WaitingConfirmState_ActOnUnsatisfied();// 0x14399b0
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x1396184
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x1439938
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x14398c0
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x1439848
	bool PlayerStopFollow();// 0x1439820
	bool PlayerConfirmToFollow();// 0x14397f8
	void InitializeOwner(Pawn* _TempPawn);// 0x1439780
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x1439708
	bool FollowingState_IsConditionSatisfied();// 0x14396e0
	void FollowingState_ActOnUnsatisfied();// 0x14396cc
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x1439654

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x13e61a0
	byte Start();// 0x134fd24
	bool IsValidate();// 0x14f4900
	void DebugDraw(Color DebugColor, bool isPersist);// 0x14f483c
	void Awake();// 0x13e6184

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x74, Size: 0x4]
	STExtraBaseCharacter* Target;//[Offset: 0x78, Size: 0x4]
	byte Update(float DeltaTime);// 0x131b4b0
	FString ToString();// 0x14f4930
	void TaskRemoved();// 0x13e61a0
	byte Start();// 0x134fd24
	bool IsValidate();// 0x14f4900
	bool IsReachable();// 0x1391820
	byte Finish();// 0x1391958
	void DebugDraw(Color DebugColor, bool isPersist);// 0x14f483c
	void Awake();// 0x13e6184

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x358, Size: 0x4]
	float SpringArmLengthModifier2;//[Offset: 0x35c, Size: 0x4]
	float SpringArmLengthModifier3;//[Offset: 0x360, Size: 0x4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x364, Size: 0x4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 0x1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 0x1]
	float ResultMinPitch;//[Offset: 0x38c, Size: 0x4]
	float ResultMaxPitch;//[Offset: 0x390, Size: 0x4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	float FreeCamRotationReturnRate;//[Offset: 0x398, Size: 0x4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x39c, Size: 0x1c]
	CameraOffsetData ProneCameraData;//[Offset: 0x3b8, Size: 0x1c]
	CameraOffsetData IndoorCameraData;//[Offset: 0x3d4, Size: 0x1c]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x3f0, Size: 0x1c]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x40c, Size: 0x1c]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x428, Size: 0x1c]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x444, Size: 0x1c]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x460, Size: 0x1c]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x47c, Size: 0x1c]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x498, Size: 0x1c]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x4b4, Size: 0x1c]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x4d0, Size: 0x1c]
	CameraOffsetData VaultCameraData;//[Offset: 0x4ec, Size: 0x1c]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x508, Size: 0x1c]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x524, Size: 0x1c]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x540, Size: 0x1c]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x560, Size: 0x1c]
	float AdditionalSocketOffetZMax;//[Offset: 0x580, Size: 0x4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x584, Size: 0x8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x594, Size: 0x4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x598, Size: 0x4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x59c, Size: 0x4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 0x1]
	float OffsetCountTime;//[Offset: 0x5a4, Size: 0x4]
	float OffSetDurTime;//[Offset: 0x5a8, Size: 0x4]
	float RevertMoveSpeed;//[Offset: 0x5ac, Size: 0x4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x5b0, Size: 0x4]
	Transform PrevRelativeTrans;//[Offset: 0x5c0, Size: 0x30]
	Vector PrevRelativeSocketLocation;//[Offset: 0x5f0, Size: 0xc]
	Quat PrevRelativeSocketRotation;//[Offset: 0x600, Size: 0x10]
	void SetSelfieCameraDefRotation();// 0x1355f7c
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x1355e70
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x1355dac
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1355c40
	void DelayRotationLagEnabledEnd();// 0x1355c2c
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x1355b64

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x2e8, Size: 0x4]
	float TargetOffsetInterpSpeed;//[Offset: 0x2ec, Size: 0x4]
	float ArmLengthInterpSpeed;//[Offset: 0x2f0, Size: 0x4]
	void ClearCameraData();// 0x14e0af4

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 0x4]
	Vector AkLocation;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Damage;//[Offset: 0x8, Size: 0x4]
	int StatusChangeMargin;//[Offset: 0xc, Size: 0x4]
	int DamageType;//[Offset: 0x10, Size: 0x4]
	int AdditionalParam;//[Offset: 0x14, Size: 0x4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649, Size: 0x1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x64c, Size: 0x4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x650, Size: 0x4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x654, Size: 0x4]
	float MaxPrisonmentMove;//[Offset: 0x658, Size: 0x4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65d, Size: 0x1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 0x1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x678, Size: 0x4]
	float EnterShovelCD;//[Offset: 0x67c, Size: 0x4]
	float DSEnterShovelCD;//[Offset: 0x680, Size: 0x4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x684, Size: 0x4]
	float MaxShovelFloorAngle;//[Offset: 0x688, Size: 0x4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x68c, Size: 0x4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x690, Size: 0x4]
	float DefaultShovelingSpeed;//[Offset: 0x694, Size: 0x4]
	float DefaultShovelingDCC;//[Offset: 0x698, Size: 0x4]
	float ExtraShovelingDCC1;//[Offset: 0x69c, Size: 0x4]
	float ExtraShovelingDCC2;//[Offset: 0x6a0, Size: 0x4]
	float ExtraShovelingDCC3;//[Offset: 0x6a4, Size: 0x4]
	float MinusGradeShovelingACC;//[Offset: 0x6a8, Size: 0x4]
	float MinusGradeShovelingDCC;//[Offset: 0x6ac, Size: 0x4]
	float MaxShovelingSpeed;//[Offset: 0x6b0, Size: 0x4]
	float StopShovelingSpeed;//[Offset: 0x6b8, Size: 0x4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x6bc, Size: 0x4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x6c0, Size: 0x4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x6c4, Size: 0x4]
	float ShovelingFPPFovVaule;//[Offset: 0x6c8, Size: 0x4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x6cc, Size: 0x4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x6d0, Size: 0x4]
	float ShovelingTPPFovVaule;//[Offset: 0x6d4, Size: 0x4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x6d8, Size: 0x4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x6dc, Size: 0x4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x6e0, Size: 0x4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x6e4, Size: 0x4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x6e8, Size: 0x4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x6ec, Size: 0x4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x6f0, Size: 0x4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x6f8, Size: 0x18]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x710, Size: 0x4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x714, Size: 0x4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x718, Size: 0x4]
	float nowShovelingSpeed;//[Offset: 0x71c, Size: 0x4]
	Rotator ShovelingRotation;//[Offset: 0x720, Size: 0xc]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 0x1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 0x1]
	byte ShovelingPrePoseState;//[Offset: 0x72f, Size: 0x1]
	float PreShovelFov;//[Offset: 0x730, Size: 0x4]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x788, Size: 0x4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 0x1]
	float TimeSpeedFactor;//[Offset: 0x790, Size: 0x4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x794, Size: 0x1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x795, Size: 0x1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x796, Size: 0x1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x798, Size: 0x4]
	float JumpOffVelocityFactor;//[Offset: 0x79c, Size: 0x4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 0x1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 0x1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x7a4, Size: 0x4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a8, Size: 0x1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a8, Size: 0x1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x7ac, Size: 0x4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x7b0, Size: 0x4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x7b4, Size: 0x4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x7b8, Size: 0x4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x7bc, Size: 0x4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x7c0, Size: 0x4]
	float WalkSpeedCurveScale;//[Offset: 0x7c4, Size: 0x4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x7c8, Size: 0x4]
	float ProneFloorAngle;//[Offset: 0x7cc, Size: 0x4]
	float ProneFloorZ;//[Offset: 0x7d0, Size: 0x4]
	float JumpFloorAngle;//[Offset: 0x7d4, Size: 0x4]
	float JumpFloorZ;//[Offset: 0x7d8, Size: 0x4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x7dc, Size: 0x4]
	float ResolvePenetrationAdjustment;//[Offset: 0x7e0, Size: 0x4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 0x1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x7e8, Size: 0x4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x7ec, Size: 0x4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x808, Size: 0x1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x809, Size: 0x1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80a, Size: 0x1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x80c, Size: 0x4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 0x1]
	float CheckDistanceAhead;//[Offset: 0x8f4, Size: 0x4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 0x1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0x8fc, Size: 0x4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0x910, Size: 0x4]
	bool bOpenServerControlPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92d, Size: 0x1]
	void ToggleUserCmdDelta(bool Val);// 0x143bb50
	void TimeSpeedCheck(bool Val);// 0x143ba98
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x143b9ec
	void SetProneFloorZ(float InProneFloorZ);// 0x143b974
	void SetProneFloorAngle(float InProneFloorAngle);// 0x143b8fc
	void SetJumpFloorZ(float InJumpFloorZ);// 0x143b884
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x143b80c
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x143b6e0
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x143b494
	void ServerUserMoveCmd(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd);// 0x143b2d4
	void Ping2Server(float ServerTime, float ClientTime);// 0x143b1e8
	void Ping2Client(float ServerTime);// 0x143b170
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x143b0a8
	void OnRecoverOnServer();// 0x143b08c
	void OnPreReconnectOnServer();// 0x143b078
	void OnClientCloseUserCmdDelta();// 0x143b064
	float K2_GetProneFloorZ();// 0x143b03c
	float K2_GetProneFloorAngle();// 0x143b014
	float K2_GetJumpFloorZ();// 0x143afec
	float K2_GetJumpFloorAngle();// 0x143afc4
	bool IsWalkable(out const HitResult Hit);// 0x143af18
	bool IsProning();// 0x143aef0
	STExtraBaseCharacter* GetSTCharacter();// 0x143aec8
	float GetLastServerMoveTime();// 0x143aea0
	bool GetIsOpenShovelingAbility();// 0x143ae78
	bool DragOnGround(float DeltaTime);// 0x143adf8
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x143ab50
	void ClientUserMoveCmdAck(int Sequence);// 0x143aad8
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x143a7d0
	void ChangePhysxShapeFlag();// 0x12e82e4

--------------------------------
Class: SimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 0x1]
	byte ViewYaw;//[Offset: 0x1, Size: 0x1]
	byte ViewRoll;//[Offset: 0x2, Size: 0x1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 0x4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 0x4]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 0x30]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 0x4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x2c8, Size: 0x4]
	float MaxQuadLength;//[Offset: 0x2cc, Size: 0x4]
	float QuadDirectionAcceptAngle;//[Offset: 0x2d0, Size: 0x4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x2d4, Size: 0x4]
	float DefaultTrailWidth;//[Offset: 0x2d8, Size: 0x4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	float DefaultTrailLength;//[Offset: 0x2e0, Size: 0x4]
	float TextureLength;//[Offset: 0x2e4, Size: 0x4]
	int USegmentNum;//[Offset: 0x2e8, Size: 0x4]
	int CoordU;//[Offset: 0x2ec, Size: 0x4]
	int SlippingCoordU;//[Offset: 0x2f0, Size: 0x4]
	int BrokenCoordU;//[Offset: 0x2f4, Size: 0x4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	float AdditionalTrailWidth;//[Offset: 0x2fc, Size: 0x4]
	float AdditionalTextureLength;//[Offset: 0x300, Size: 0x4]
	int AdditionalCoordU;//[Offset: 0x304, Size: 0x4]
	int AdditionalSlippingCoordU;//[Offset: 0x308, Size: 0x4]
	int AdditionalBrokenCoordU;//[Offset: 0x30c, Size: 0x4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x314, Size: 0x4]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x14fb124
	void StopUpdate();// 0x14fb110
	bool IsUpdating();// 0x143e4b0

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x520, Size: 0xc]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 0x1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e, Size: 0x1]
	enum CollisionMode;//[Offset: 0x52f, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x530, Size: 0x4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x554, Size: 0xc]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x560, Size: 0xc]
	BoxSphereBounds LocalBounds;//[Offset: 0x56c, Size: 0x1c]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x588, Size: 0x3c]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x5c4, Size: 0xc]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x3872c90
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x3872b30
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x3872a6c
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x38729a8
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x38728e4
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x387273c
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x1c01fa0
	bool IsMeshSectionVisible(int SectionIndex);// 0x38726bc
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x387263c
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x38725bc
	int GetNumSections();// 0x3872594
	int GetLastSectionIndex();// 0x387256c
	int FirstAvailableMeshSectionIndex();// 0x3872544
	void EndBatchUpdates();// 0x3872530
	bool DoesSectionExist(int SectionIndex);// 0x38724b0
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x3871ec0
	void CookCollisionNow();// 0x3871eac
	void ClearMeshSection(int SectionIndex);// 0x3871e34
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x3871dbc
	void ClearCollisionConvexMeshes();// 0x3871da8
	void ClearAllMeshSections();// 0x3871d94
	void ClearAllMeshCollisionSections();// 0x3871d80
	void BeginBatchUpdates();// 0x3871d64
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x3871c08

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 0xc]
	int[] IndexBuffer;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 0xc]
	Box BoundingBox;//[Offset: 0xc, Size: 0x1c]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
	Vector Normal;//[Offset: 0x40, Size: 0xc]
	enum Type;//[Offset: 0x4c, Size: 0x1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]

--------------------------------
Class: KilledTipsBlock
	byte DamageType;//[Offset: 0x0, Size: 0x1]
	FString attackerName;//[Offset: 0x4, Size: 0xc]
	FString WeaponName;//[Offset: 0x10, Size: 0xc]
	FString DeadName;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xbc, Size: 0x4]
	int DetectThreshold;//[Offset: 0xc0, Size: 0x4]
	float FoldFactor;//[Offset: 0xc4, Size: 0x4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xc8, Size: 0x4]
	Vector BoxHalfSize;//[Offset: 0xd4, Size: 0xc]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe0, Size: 0xc]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xec, Size: 0xc]
	Vector QEoffsetPeekLeft;//[Offset: 0xf8, Size: 0xc]
	Vector QEoffsetPeekRight;//[Offset: 0x104, Size: 0xc]
	float StaticTraceLengthOffset;//[Offset: 0x110, Size: 0x4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x114, Size: 0xc]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x120, Size: 0xc]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x12c, Size: 0xc]
	int FoldFactorDelt;//[Offset: 0x138, Size: 0x4]
	int FoldFactorDeltChange;//[Offset: 0x13c, Size: 0x4]
	int TraceDis;//[Offset: 0x140, Size: 0x4]
	float TickDeltTime;//[Offset: 0x144, Size: 0x4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x150, Size: 0xc]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x13eee08
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x13eecd0

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0x998, Size: 0x4]
	enum LiveState;//[Offset: 0x99c, Size: 0x1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0x9a0, Size: 0x8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x9a8, Size: 0x4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0x9ac, Size: 0x4]
	float PlayerHealth;//[Offset: 0x9b0, Size: 0x4]
	float PlayerHealthMax;//[Offset: 0x9b4, Size: 0x4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0x9b8, Size: 0x18]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0x9d0, Size: 0x18]
	enum EUAVUseType;//[Offset: 0x9e8, Size: 0x1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e9, Size: 0x1]
	enum eCurVehicleType;//[Offset: 0x9ea, Size: 0x1]
	enum EUAVCharacterMsgType;//[Offset: 0x9eb, Size: 0x1]
	Vector PlayerDeadLocation;//[Offset: 0x9ec, Size: 0xc]
	Vector PlayerBoxLocation;//[Offset: 0x9f8, Size: 0xc]
	Vector MapMark;//[Offset: 0xa04, Size: 0xc]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	Vector RestartLocation;//[Offset: 0xa14, Size: 0xc]
	Rotator RestartRotate;//[Offset: 0xa20, Size: 0xc]
	<int,int> UseQuickMsgMap;//[Offset: 0xa2c, Size: 0x3c]
	<int,int> UseWheelMsgMap;//[Offset: 0xa68, Size: 0x3c]
	byte PlayerUseQuickSight;//[Offset: 0xaa4, Size: 0x1]
	int AirDropBoxFirstPickUpNum;//[Offset: 0xac0, Size: 0x4]
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0xac4, Size: 0xc]
	int TeamMatePlayerStateIndex;//[Offset: 0xad0, Size: 0x4]
	int PlayerLayerID;//[Offset: 0xad4, Size: 0x4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0xad8, Size: 0x10]
	int Breath;//[Offset: 0xae8, Size: 0x4]
	DriveCarNotify DriveCarNotify;//[Offset: 0xaec, Size: 0xc]
	float EnegyBuffStage1;//[Offset: 0xaf8, Size: 0x4]
	float EnegyBuffStage2;//[Offset: 0xafc, Size: 0x4]
	float EnegyBuffStage3;//[Offset: 0xb00, Size: 0x4]
	float EnegyBuffStage4;//[Offset: 0xb04, Size: 0x4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0xb08, Size: 0x4]
	float CurEnegyBuff;//[Offset: 0xb0c, Size: 0x4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0xb10, Size: 0x4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0xb14, Size: 0x4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0xb18, Size: 0x4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0xb1c, Size: 0x4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0xb20, Size: 0x4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0xb24, Size: 0x4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0xb28, Size: 0x4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0xb2c, Size: 0x4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xb30, Size: 0xc]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0xb3c, Size: 0xc]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49, Size: 0x1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb54, Size: 0x1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb55, Size: 0x1]
	int[] TeamMatesExitState;//[Offset: 0xb58, Size: 0xc]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb64, Size: 0x1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb65, Size: 0x1]
	int PlayersCountOnPlane;//[Offset: 0xb70, Size: 0x4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0xb74, Size: 0xc]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0xb80, Size: 0xc]
	int MonsterTreasureBoxGetNum;//[Offset: 0xb8c, Size: 0x4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0xb90, Size: 0x4]
	int OpnedMosnterBoxNum;//[Offset: 0xb94, Size: 0x4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98, Size: 0x1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0xb9c, Size: 0xc]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0xba8, Size: 0xc]
	int MaxDecalCount;//[Offset: 0xbcc, Size: 0x4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0xbd0, Size: 0xc]
	PlayerStaticInfoInOB[] KickListTotalPlayers;//[Offset: 0xc30, Size: 0xc]
	float SignalHP;//[Offset: 0xc3c, Size: 0x4]
	delegate OnSignalHPChange;//[Offset: 0xc40, Size: 0xc]
	float LeanOutL_AimAngle;//[Offset: 0xc4c, Size: 0x4]
	float LeanOutR_AimAngle;//[Offset: 0xc50, Size: 0x4]
	HitEnemyData HitedEnemyData;//[Offset: 0xc54, Size: 0x14]
	TeammateConveyStatus TeammateConveyStatus;//[Offset: 0xc6c, Size: 0x28]
	float TeammateConveyStatusReceiveRange;//[Offset: 0xc94, Size: 0x4]
	bool bIsInSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98, Size: 0x1]
	int RemainingRevivalTime;//[Offset: 0xc9c, Size: 0x4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 0x1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca1, Size: 0x1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca2, Size: 0x1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca3, Size: 0x1]
	int64 RevivalCardCreateTime;//[Offset: 0xca8, Size: 0x8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0xcb0, Size: 0xc]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0xcbc, Size: 0xc]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xcc8, Size: 0xc]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xcd4, Size: 0xc]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xce0, Size: 0xc]
	Vector LastVehicleLocation;//[Offset: 0xcfc, Size: 0xc]
	void SetPlayerGiveUp(bool InGiveUp);// 0x14cfd08
	void SetForceSyncTeammateData(bool IsForCE);// 0x14cfc8c
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x14cfae8
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x14cf9e0
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* Param2);// 0x14cf8e0
	void RefreshRevivalState();// 0x14cf8cc
	void RefreshFollowMark();// 0x14cf8b8
	int PlayersCountOnMyPlane();// 0x14cf890
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x1c01fa0
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x1c01fa0
	void OnRep_VisualFieldInfo();// 0x14cf87c
	void OnRep_UpdateKillMonsterNum();// 0x14cf860
	void OnRep_TeamMatePlayerStateList();// 0x14cf84c
	void OnRep_TeamMatePlayerStateIndex();// 0x14cf838
	void OnRep_SignalHP();// 0x14cf824
	void OnRep_RemainingRevivalTime();// 0x14cf810
	void OnRep_RankNotify();// 0x14cf7fc
	void OnRep_PlayersCountOnPlane();// 0x14cf7e8
	void OnRep_PlayerReconnectEvent();// 0x14cf7d4
	void OnRep_PlayerName();// 0x133c1a0
	void OnRep_PlayerLostConnectionEvent();// 0x14cf7c0
	void OnRep_PlayerLiveState();// 0x14cf7ac
	void OnRep_PlayerKillsChange();// 0x14cf790
	void OnRep_PlayerIsFollowing();// 0x14cf77c
	void OnRep_PlayerGiveUp();// 0x14cf768
	void OnRep_PlayerGameOver();// 0x14cf754
	void OnRep_PlayerExitGameEvent();// 0x14cf740
	void OnRep_PlayerAliasShowInfoList();// 0x14cf72c
	void OnRep_MarkSyncData();// 0x14ce73c
	void OnRep_MapMarkNotify();// 0x14cf718
	void OnRep_LastVehicleLocation();// 0x14cf704
	void OnRep_IsIDCardCaptured();// 0x14cf6f0
	void OnRep_HPChanged();// 0x12e82e4
	void OnRep_ChangeRevivalState();// 0x14cf6dc
	void OnRep_ChangeInRevivingState();// 0x14cf6c8
	void OnRep_BreathChanged();// 0x14cf6b4
	void OnRep_BPS();// 0x12e82e4
	void OnRep_bHitted();// 0x14cf6a0
	void OnPlayerQuickChat();// 0x14cf68c
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x1c01fa0
	void OnMemberVoice(int VoiceState);// 0x14cf614
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x1c01fa0
	void OnClientTakeDamage(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Attacker);// 0x14cf4a8
	void OnCharacterStartFire(STExtraWeapon* Weapon);// 0x14cf430
	bool IsSinglePlayer();// 0x14cf408
	bool IsAlive();// 0x14cf3e0
	uint32 GetUserIDByMemberID(int memberID);// 0x14cf358
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x14cf23c
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x14cf1bc
	STExtraPlayerState* GetTeamMatePlayerStateByPlayerKey(int Teammatekey);// 0x14cf13c
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x14cf0bc
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x14ceff8
	int GetPlayerTeamIndex();// 0x14cefd0
	float GetPlayerMaxHealth();// 0x14cefa8
	float GetPlayerHealth();// 0x14cef80
	STExtraBaseCharacter* GetPlayerCharacter();// 0x14cef58
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x14ceeac
	float GetMaxEnegyBuff();// 0x14cee5c
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x14ced04
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x14cebe8
	float GetBreathPercentage();// 0x14cebc0
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x14ceaf4
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x14ce9d0
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x14ce924
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x14ce750
	void ForceNotifyAlertUpdate();// 0x14ce73c
	void ClientDisplayGameTipWithMsgID(int ID, FString Param1, FString Param2);// 0x14ce578
	void ChangeFadeMapMarkDist(float NewDist);// 0x14ce4fc
	bool CanRevivalTeammate();// 0x14ce4d4
	bool CanBeRevival();// 0x14ce4ac
	byte CalculateEnegyStage();// 0x14ce484
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x14ce3c0
	void AddEnegySafety(float AddVal);// 0x14ce348
	void AddDamageAmount(Character* VictimPawn, out const DamageEvent DamageEvent, float FinalDamage, bool bHitHead);// 0x14ce1c8

--------------------------------
Class: UAEPlayerState.PlayerState.Info.Actor.Object
	float surviveTime;//[Offset: 0x330, Size: 0x4]
	float Pronetime;//[Offset: 0x334, Size: 0x4]
	float marchDistance;//[Offset: 0x340, Size: 0x4]
	float travelDistance;//[Offset: 0x344, Size: 0x4]
	float DriveDistance;//[Offset: 0x348, Size: 0x4]
	float MonsterCatchupDistance;//[Offset: 0x34c, Size: 0x4]
	int destroyVehicleNum;//[Offset: 0x350, Size: 0x4]
	int rescueTimes;//[Offset: 0x354, Size: 0x4]
	int NormalItemsNum;//[Offset: 0x358, Size: 0x4]
	int SeniorItemsNum;//[Offset: 0x35c, Size: 0x4]
	int GVMemberID;//[Offset: 0x360, Size: 0x4]
	FName PlayerType;//[Offset: 0x368, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x370, Size: 0x4]
	FString PlayerUID;//[Offset: 0x374, Size: 0xc]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	FString iconUrl;//[Offset: 0x384, Size: 0xc]
	bool gender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	int PlayerLevel;//[Offset: 0x394, Size: 0x4]
	int SegmentLevel;//[Offset: 0x398, Size: 0x4]
	int AvatarBoxId;//[Offset: 0x39c, Size: 0x4]
	int CampID;//[Offset: 0x3a0, Size: 0x4]
	uint64 Uid;//[Offset: 0x3a8, Size: 0x8]
	FString Nation;//[Offset: 0x3b0, Size: 0xc]
	int TeamID;//[Offset: 0x3bc, Size: 0x4]
	int PlayerBornPointID;//[Offset: 0x3c0, Size: 0x4]
	int Kills;//[Offset: 0x3c4, Size: 0x4]
	int KillsBeforeDie;//[Offset: 0x3c8, Size: 0x4]
	int Knockouts;//[Offset: 0x3cc, Size: 0x4]
	int Assists;//[Offset: 0x3d8, Size: 0x4]
	byte PlatformGender;//[Offset: 0x3dc, Size: 0x1]
	int MatchLabel;//[Offset: 0x3e0, Size: 0x4]
	uint32 Killer;//[Offset: 0x3e4, Size: 0x4]
	FString KillerName;//[Offset: 0x3e8, Size: 0xc]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x3f8, Size: 0x8]
	int ShootWeaponShotNum;//[Offset: 0x400, Size: 0x4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x404, Size: 0x4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x408, Size: 0x4]
	int ShootWeaponShotHeadNum;//[Offset: 0x40c, Size: 0x4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x410, Size: 0x4]
	int HeadShotNum;//[Offset: 0x414, Size: 0x4]
	int HeadShotNumNoAI;//[Offset: 0x418, Size: 0x4]
	int KillNumByGrende;//[Offset: 0x41c, Size: 0x4]
	int UseFragGrenadeNum;//[Offset: 0x420, Size: 0x4]
	int UseSmokeGrenadeNum;//[Offset: 0x424, Size: 0x4]
	int MaxKillDistance;//[Offset: 0x428, Size: 0x4]
	int HealTimes;//[Offset: 0x42c, Size: 0x4]
	float DamageAmount;//[Offset: 0x430, Size: 0x4]
	float HealAmount;//[Offset: 0x434, Size: 0x4]
	FString[] KillFlow;//[Offset: 0x438, Size: 0xc]
	FString[] KnockOutFlow;//[Offset: 0x444, Size: 0xc]
	KnockOutData[] KnockOutList;//[Offset: 0x450, Size: 0xc]
	float InDamageAmount;//[Offset: 0x45c, Size: 0x4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x46c, Size: 0xc]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x478, Size: 0x3c]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x4b8, Size: 0x48]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x500, Size: 0x3c]
	UseItemFlow[] UseItemFlow;//[Offset: 0x53c, Size: 0xc]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x548, Size: 0xc]
	<int,int> TLog_BulletCount;//[Offset: 0x554, Size: 0x3c]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x590, Size: 0x8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	float OutsideBlueCircleTime;//[Offset: 0x59c, Size: 0x4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x5a0, Size: 0xc]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x5ac, Size: 0x4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x5b0, Size: 0x4]
	float HitEnemyHeadAmount;//[Offset: 0x5b4, Size: 0x4]
	Vector LandLocation;//[Offset: 0x5b8, Size: 0xc]
	Vector ParachuteLocation;//[Offset: 0x5c4, Size: 0xc]
	int LandTime;//[Offset: 0x5d0, Size: 0x4]
	Vector DeadLocation;//[Offset: 0x5d4, Size: 0xc]
	FString DeadDamangeType;//[Offset: 0x5e0, Size: 0xc]
	int PveDeadAttacker;//[Offset: 0x5ec, Size: 0x4]
	int PveStageId;//[Offset: 0x5f0, Size: 0x4]
	FString DeadTimeStr;//[Offset: 0x5f4, Size: 0xc]
	int NearDeathDamageType;//[Offset: 0x600, Size: 0x4]
	uint32 NearDeathCauserId;//[Offset: 0x604, Size: 0x4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	EquipmentData EquipmentData;//[Offset: 0x614, Size: 0x50]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	int GamePlayingTime;//[Offset: 0x670, Size: 0x4]
	int ObserverTime;//[Offset: 0x674, Size: 0x4]
	int TouchDownAreaID;//[Offset: 0x678, Size: 0x4]
	int TouchDownLocTypeID;//[Offset: 0x67c, Size: 0x4]
	int[] TouchDownAreaList;//[Offset: 0x680, Size: 0xc]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x68c, Size: 0xc]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x698, Size: 0xc]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x6a4, Size: 0xc]
	int[] SecretAreaIDList;//[Offset: 0x6b0, Size: 0xc]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x6bc, Size: 0xc]
	float DrivingHelicopterTime;//[Offset: 0x6c8, Size: 0x4]
	float InHelicopterTime;//[Offset: 0x6cc, Size: 0x4]
	int RevivalNum;//[Offset: 0x6d0, Size: 0x4]
	int BeRevivedNum;//[Offset: 0x6d4, Size: 0x4]
	int KillNumInVehicle;//[Offset: 0x6d8, Size: 0x4]
	float TotalSprintDistance;//[Offset: 0x6dc, Size: 0x4]
	float TotalBeenDamageAmount;//[Offset: 0x6e0, Size: 0x4]
	float DestroyVehicleWheelNum;//[Offset: 0x6e4, Size: 0x4]
	int ProneTimes;//[Offset: 0x6e8, Size: 0x4]
	int CrouchTimes;//[Offset: 0x6ec, Size: 0x4]
	int JumpTimes;//[Offset: 0x6f0, Size: 0x4]
	int KillMonsterNum;//[Offset: 0x6f4, Size: 0x4]
	<int,int> MonsterID2KillNum;//[Offset: 0x6f8, Size: 0x3c]
	float TotalDamageAmountToMonsters;//[Offset: 0x734, Size: 0x4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x738, Size: 0x4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x73c, Size: 0x3c]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x778, Size: 0x3c]
	int MonsterHeadShotKilledTimes;//[Offset: 0x7b4, Size: 0x4]
	int BeMonsterDownTimes;//[Offset: 0x7b8, Size: 0x4]
	int LightCandleNum;//[Offset: 0x7bc, Size: 0x4]
	<int,int> ActivityButtonCount;//[Offset: 0x7c0, Size: 0x3c]
	float BattleStateTime;//[Offset: 0x7fc, Size: 0x4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	float DriveWithTeammateDistance;//[Offset: 0x804, Size: 0x4]
	int FistKillingCount;//[Offset: 0x808, Size: 0x4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0x80c, Size: 0x3c]
	FString[] DestroyVehicleFlow;//[Offset: 0x848, Size: 0xc]
	int UseHelicoperNum;//[Offset: 0x854, Size: 0x4]
	float UseHelicoperDistance;//[Offset: 0x858, Size: 0x4]
	byte CharmRankIndex;//[Offset: 0x85c, Size: 0x1]
	<uint32> UseHelicoperRecord;//[Offset: 0x860, Size: 0x3c]
	int SnowBoardJumpActionCount;//[Offset: 0x8a0, Size: 0x4]
	int EmoteOnTelpherCount;//[Offset: 0x8a4, Size: 0x4]
	int KillMagicWalkAI;//[Offset: 0x8a8, Size: 0x4]
	int SendMagicWalkAI;//[Offset: 0x8ac, Size: 0x4]
	int KillSnowManCount;//[Offset: 0x8b0, Size: 0x4]
	<enum,int> EventCounterMap;//[Offset: 0x8b4, Size: 0x3c]
	int OpenedAirDropBoxNum;//[Offset: 0x8f0, Size: 0x4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0x8f4, Size: 0xc]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x900, Size: 0x20]
	int MemberIdInVoiceRoom;//[Offset: 0x920, Size: 0x4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 0x1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x928, Size: 0x24]
	int UpassShow;//[Offset: 0x94c, Size: 0x4]
	int upassKeepBuy;//[Offset: 0x950, Size: 0x4]
	float ClientToDSFlowLimit;//[Offset: 0x988, Size: 0x4]
	float ClientToDSFlowLimitTime;//[Offset: 0x98c, Size: 0x4]
	static void SetOnMessageReceive(delegate OnMessageReceive);// 0x185dc00
	static void SetOnDSMessageReceive(delegate OnDSMessageReceive);// 0x185db64
	static void SetOnDSGameMessageReceive(delegate OnDSMessageReceive);// 0x185dac8
	void SetGVMemberIDServerCall(int memberID);// 0x185da14
	void SetGVMemberID(int memberID);// 0x185d99c
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess);// 0x185d8d8
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x185d7c8
	void RPC_Server_LuaDSToClient(int ID, const byte[] Content);// 0x185d68c
	void RPC_Server_LuaClientToDS(int ID, const byte[] Content);// 0x185d550
	void ReportTaskExtInfo(int TaskID, FString ExtInfo);// 0x185d3b0
	void ReportTaskData(int TaskID, int process);// 0x185d2f4
	void ReportSpecialCollection(int ItemID, int count);// 0x185d238
	void ReportSecretAreaID(int SecretAreaID);// 0x185d1c0
	void ReportLandLocType(int TouchDownLocType);// 0x185d148
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x185d07c
	void ReportLandArea(int TouchDownArea);// 0x185d004
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x185cf8c
	void OnRep_UpdateKillMonsterNum();// 0x14cf860
	void OnRep_UID();// 0x185cf78
	void OnRep_PlayerKillsChange();// 0x14cf790
	void OnRep_MatchLabel();// 0x12e82e4
	void OnRep_CollectItemRecord();// 0x185cf64
	void OnRep_CampID();// 0x185cf50
	bool IsSpecialPickItemCollectionCompleted(int ItemID);// 0x185ced0
	bool IsSpecialPickItem(int ItemID);// 0x185ce50
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x185cd6c
	uint32 GetUserIDByMemberID(int memberID);// 0x14cf358
	FString GetUIDString();// 0x185ccac
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x185cc40
	uint32 GetPlayerKey();// 0x185cc18
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x185cbac
	void ForceUpdateCampCharacterList();// 0x185cb90
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x185cacc

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0, Size: 0x8]
	int Times;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	int SourceType;//[Offset: 0x14, Size: 0x4]
	int AdditionalParam;//[Offset: 0x18, Size: 0x4]
	FString TimeStr;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0, Size: 0x4]
	int ThrowCount;//[Offset: 0x4, Size: 0x4]
	int HitOthersCount;//[Offset: 0x8, Size: 0x4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AIDeliveryTlogData
	uint64 Uid;//[Offset: 0x0, Size: 0x8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 0x3c]

--------------------------------
Class: AIDeliveryInfo
	int DeliveryTime;//[Offset: 0x0, Size: 0x4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 0x4]
	int UseCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 0x4]
	enum slotType;//[Offset: 0x4, Size: 0x1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	FString TimeStr;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 0x4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0, Size: 0x8]
	int VehicleType;//[Offset: 0x8, Size: 0x4]
	int AvatarID;//[Offset: 0xc, Size: 0x4]
	float DriveDistance;//[Offset: 0x10, Size: 0x4]
	float DriveTime;//[Offset: 0x14, Size: 0x4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 0x4]
	uint64[] PeopleInCar;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	STExtraBaseCharacter* Target;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 0x4]
	int ArmorID;//[Offset: 0x4, Size: 0x4]
	int BackPackID;//[Offset: 0x8, Size: 0x4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 0x4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 0xc]
	int MainWeapon2ID;//[Offset: 0x1c, Size: 0x4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20, Size: 0xc]
	int ViceWeaponID;//[Offset: 0x2c, Size: 0x4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30, Size: 0xc]
	int CloseWeaponID;//[Offset: 0x3c, Size: 0x4]
	int[] ThrowWeaponsID;//[Offset: 0x40, Size: 0xc]
	int8 IsLuckyClothing;//[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponID;//[Offset: 0x0, Size: 0x4]
	float Damage;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 0x4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0, Size: 0x4]
	int AreaID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameModePlayerAliasInfo
	int aliasID;//[Offset: 0x0, Size: 0x4]
	FString aliasTitle;//[Offset: 0x4, Size: 0xc]
	FString aliasNation;//[Offset: 0x10, Size: 0xc]
	int aliasRank;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0, Size: 0xc]
	WeaponReport[] Weapons;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: WeaponReport
	int WeaponID;//[Offset: 0x0, Size: 0x4]
	int FireCount;//[Offset: 0x4, Size: 0x4]
	int HitCount;//[Offset: 0x8, Size: 0x4]
	int KillCount;//[Offset: 0xc, Size: 0x4]
	float TotalDamage;//[Offset: 0x10, Size: 0x4]
	float TotalMonsterDamage;//[Offset: 0x14, Size: 0x4]
	int TotalOwnTime;//[Offset: 0x18, Size: 0x4]
	int TotalUseTime;//[Offset: 0x1c, Size: 0x4]
	int HeadShootCount;//[Offset: 0x20, Size: 0x4]
	HitFlow[] HitFlow;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 0x4]
	int Distance;//[Offset: 0x4, Size: 0x4]
	int IsKill;//[Offset: 0x8, Size: 0x4]
	float Damage;//[Offset: 0xc, Size: 0x4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	byte[] PlayerStates;//[Offset: 0x14, Size: 0xc]
	byte HitPos;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 0xc]
	uint64 Uid;//[Offset: 0x10, Size: 0x8]
	int Kill;//[Offset: 0x18, Size: 0x4]
	int AIKills;//[Offset: 0x1c, Size: 0x4]
	FString State;//[Offset: 0x20, Size: 0xc]
	float travelDistance;//[Offset: 0x2c, Size: 0x4]
	float marchDistance;//[Offset: 0x30, Size: 0x4]
	float DriveDistance;//[Offset: 0x34, Size: 0x4]
	float MonsterCatchupDistance;//[Offset: 0x38, Size: 0x4]
	float DamageAmount;//[Offset: 0x3c, Size: 0x4]
	float HealAmount;//[Offset: 0x40, Size: 0x4]
	int AssistNum;//[Offset: 0x44, Size: 0x4]
	int HeadShotNum;//[Offset: 0x48, Size: 0x4]
	int HeadShotNumNoAI;//[Offset: 0x4c, Size: 0x4]
	float surviveTime;//[Offset: 0x50, Size: 0x4]
	int rescueTimes;//[Offset: 0x54, Size: 0x4]
	int DestroyVehicles;//[Offset: 0x58, Size: 0x4]
	FString[] KillFlow;//[Offset: 0x5c, Size: 0xc]
	FString[] KnockOutFlow;//[Offset: 0x68, Size: 0xc]
	float OutsideBlueCircleTime;//[Offset: 0x74, Size: 0x4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x78, Size: 0xc]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x84, Size: 0x4]
	float HitEnemyHeadAmount;//[Offset: 0x88, Size: 0x4]
	float TotalBeenDamageAmount;//[Offset: 0x8c, Size: 0x4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0x90, Size: 0xc]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x9c, Size: 0x4]
	float InDamageAmount;//[Offset: 0xa0, Size: 0x4]
	int ProneTimes;//[Offset: 0xa4, Size: 0x4]
	int CrouchTimes;//[Offset: 0xa8, Size: 0x4]
	int JumpTimes;//[Offset: 0xac, Size: 0x4]
	int KillMonsterNum;//[Offset: 0xb0, Size: 0x4]
	<int,int> MonsterID2KillNum;//[Offset: 0xb4, Size: 0x3c]
	int LightCandleNum;//[Offset: 0xf0, Size: 0x4]
	<int,int> ActivityButtonCount;//[Offset: 0xf4, Size: 0x3c]
	float TotalDamageAmountToMonsters;//[Offset: 0x130, Size: 0x4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x134, Size: 0x4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x138, Size: 0x4]
	int BeMonsterDownTimes;//[Offset: 0x13c, Size: 0x4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 0xc]
	int RemainingPlayerCount;//[Offset: 0xc, Size: 0x4]
	int TotalPlayerCount;//[Offset: 0x10, Size: 0x4]
	int RemainingTeamCount;//[Offset: 0x14, Size: 0x4]
	int TotalTeamCount;//[Offset: 0x18, Size: 0x4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	uint64 Killer;//[Offset: 0x20, Size: 0x8]
	FString KillerName;//[Offset: 0x28, Size: 0xc]
	int ShootWeaponShotNum;//[Offset: 0x34, Size: 0x4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x38, Size: 0x4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x3c, Size: 0x4]
	int ShootWeaponShotHeadNum;//[Offset: 0x40, Size: 0x4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x44, Size: 0x4]
	int HealTimes;//[Offset: 0x48, Size: 0x4]
	FString[] KillFlow;//[Offset: 0x4c, Size: 0xc]
	FString[] KnockOutFlow;//[Offset: 0x58, Size: 0xc]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x64, Size: 0xc]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x70, Size: 0x3c]
	<int,int> TLog_BulletCount;//[Offset: 0xac, Size: 0x3c]
	UseItemFlow[] UseItemFlow;//[Offset: 0xe8, Size: 0xc]
	int destroyVehicleNum;//[Offset: 0xf4, Size: 0x4]
	int is_escape;//[Offset: 0xf8, Size: 0x4]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0xfc, Size: 0xc]
	Vector LandLocation;//[Offset: 0x108, Size: 0xc]
	int LandTime;//[Offset: 0x114, Size: 0x4]
	Vector ParachuteLocation;//[Offset: 0x118, Size: 0xc]
	Vector DeadLocation;//[Offset: 0x124, Size: 0xc]
	FString DeadDamangeType;//[Offset: 0x130, Size: 0xc]
	int PveDeadAttacker;//[Offset: 0x13c, Size: 0x4]
	int PveStageId;//[Offset: 0x140, Size: 0x4]
	FString DeadTimeStr;//[Offset: 0x144, Size: 0xc]
	FString logoutime;//[Offset: 0x150, Size: 0xc]
	float Pronetime;//[Offset: 0x15c, Size: 0x4]
	float BeInWaterTime;//[Offset: 0x160, Size: 0x4]
	float SwimmingDistance;//[Offset: 0x164, Size: 0x4]
	int BeDownTimes;//[Offset: 0x168, Size: 0x4]
	int BeSavedTimes;//[Offset: 0x16c, Size: 0x4]
	int PickUpAirDrops;//[Offset: 0x170, Size: 0x4]
	EquipmentData EquipmentData;//[Offset: 0x174, Size: 0x50]
	int Rank;//[Offset: 0x1c4, Size: 0x4]
	int TotalScore;//[Offset: 0x1c8, Size: 0x4]
	int ProneTimes;//[Offset: 0x1cc, Size: 0x4]
	int CrouchTimes;//[Offset: 0x1d0, Size: 0x4]
	int JumpTimes;//[Offset: 0x1d4, Size: 0x4]
	int TouchDownAreaID;//[Offset: 0x1d8, Size: 0x4]
	int TouchDownLocTypeID;//[Offset: 0x1dc, Size: 0x4]
	int[] TouchDownAreaList;//[Offset: 0x1e0, Size: 0xc]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x1ec, Size: 0xc]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x1f8, Size: 0xc]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x204, Size: 0xc]
	int[] SecretAreaIDList;//[Offset: 0x210, Size: 0xc]
	int KillNumInVehicle;//[Offset: 0x21c, Size: 0x4]
	float TotalSprintDistance;//[Offset: 0x220, Size: 0x4]
	float TotalBeenDamageAmount;//[Offset: 0x224, Size: 0x4]
	float DestroyVehicleWheelNum;//[Offset: 0x228, Size: 0x4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x22c, Size: 0xc]
	KnockOutData[] KnockOutList;//[Offset: 0x238, Size: 0xc]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]
	int KillMonsterNum;//[Offset: 0x248, Size: 0x4]
	int LightCandleNum;//[Offset: 0x24c, Size: 0x4]
	float BattleStateTime;//[Offset: 0x250, Size: 0x4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]
	<int,int> ActivityButtonCount;//[Offset: 0x258, Size: 0x3c]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x294, Size: 0x8]
	float TotalDamage;//[Offset: 0x29c, Size: 0x4]
	int OpenAirDropBoxesNum;//[Offset: 0x2a0, Size: 0x4]
	int FollowState;//[Offset: 0x2a4, Size: 0x4]
	FString[] DestroyVehicleFlow;//[Offset: 0x2a8, Size: 0xc]
	int UseHelicoperNum;//[Offset: 0x2b4, Size: 0x4]
	float UseHelicoperDistance;//[Offset: 0x2b8, Size: 0x4]
	int DrivingHelicopterTime;//[Offset: 0x2bc, Size: 0x4]
	int InHelicopterTime;//[Offset: 0x2c0, Size: 0x4]
	int NormalItemNum;//[Offset: 0x2c4, Size: 0x4]
	int SeniorItemNum;//[Offset: 0x2c8, Size: 0x4]
	int KillMagicWalkAI;//[Offset: 0x2cc, Size: 0x4]
	int SendMagicWalkAI;//[Offset: 0x2d0, Size: 0x4]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 0xc]
	Rotator rot;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 0x4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	int LayerID;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 0x1]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 0x4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0xcf4, Size: 0x4]
	ParticleSystemComponent* DustPSC;//[Offset: 0xcf8, Size: 0x4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0xd08, Size: 0xc]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0xd18, Size: 0x28]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0xd40, Size: 0x8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0xd48, Size: 0x4]
	float TorqueMultiplierforBoosting;//[Offset: 0xd50, Size: 0x4]
	float WheelEffectUpdateInterval;//[Offset: 0xd54, Size: 0x4]
	bool PreLoadStreamingLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd58, Size: 0x1]
	int ValidTransformMinWheelNum;//[Offset: 0xd5c, Size: 0x4]
	delegate OnVehicleWheelLanded;//[Offset: 0xd60, Size: 0xc]
	float MinLandingWheelSuspensionOffset;//[Offset: 0xd6c, Size: 0x4]
	delegate OnVehicleGearChanged;//[Offset: 0xd70, Size: 0xc]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0xd88, Size: 0x4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0xd8c, Size: 0x4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0xd90, Size: 0x4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0xd94, Size: 0x4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0xd98, Size: 0x4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0xd9c, Size: 0x4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0xda0, Size: 0x4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0xda4, Size: 0x4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0xda8, Size: 0x4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0xdac, Size: 0x50]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0xdfc, Size: 0x4c]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0xe5c, Size: 0x4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0xe60, Size: 0x4]
	float WheelSfxUpdateInterval;//[Offset: 0xe88, Size: 0x4]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0xe90, Size: 0x5]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe95, Size: 0x1]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x14ed7c8
	void PostLoadFPPMesh();// 0x14e6190
	void OnWheelsLanded();// 0x14ed7b4
	void OnRep_ReplicatedState();// 0x12e82e4
	void OnGearChanged(bool bIsUp);// 0x14ed734
	float GetVehicleSpeed();// 0x14ed70c
	float GetVehicleSlip();// 0x14ed6dc
	Vector GetRotationInputDir();// 0x14422cc
	void BroadcastClientVehicleWheelDestroyEffect();// 0x14ed6c0

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 0x1]
	ParticleSystem* MoveFx;//[Offset: 0x4, Size: 0x4]
	ParticleSystem* SlipFx;//[Offset: 0x8, Size: 0x4]
	ParticleSystem* HubFx;//[Offset: 0xc, Size: 0x4]
	float minSpeed;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x36c, Size: 0xc]
	FName[] ExtraOptBoneNames;//[Offset: 0x378, Size: 0xc]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	VehicleWheel*[] WheelHubs;//[Offset: 0x394, Size: 0xc]
	void OnExpoldeStopWheel();// 0x14ea10c
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x14ea00c
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x14e9e80
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x14e9d80
	void ForceWheelsRotate(float DriveTorque);// 0x14e9d08
	void ClearDestroyedWheel();// 0x14e9cf4

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x260, Size: 0x6c]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2cc, Size: 0x1c]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x2e8, Size: 0x28]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x310, Size: 0x58]
	float AckermannAccuracy;//[Offset: 0x368, Size: 0x4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1]
	WheelSetup[] WheelSetups;//[Offset: 0x12c, Size: 0xc]
	float Mass;//[Offset: 0x138, Size: 0x4]
	float DragCoefficient;//[Offset: 0x13c, Size: 0x4]
	float ChassisWidth;//[Offset: 0x140, Size: 0x4]
	float ChassisHeight;//[Offset: 0x144, Size: 0x4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	float DragArea;//[Offset: 0x14c, Size: 0x4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x150, Size: 0x4]
	float MaxEngineRPM;//[Offset: 0x154, Size: 0x4]
	float DebugDragMagnitude;//[Offset: 0x158, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x15c, Size: 0xc]
	float MinNormalizedTireLoad;//[Offset: 0x168, Size: 0x4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x16c, Size: 0x4]
	float MaxNormalizedTireLoad;//[Offset: 0x170, Size: 0x4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x174, Size: 0x4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x178, Size: 0x4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x17c, Size: 0x4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x180, Size: 0x4]
	VehicleWheel*[] Wheels;//[Offset: 0x184, Size: 0xc]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 0x1]
	float RVOAvoidanceRadius;//[Offset: 0x1a0, Size: 0x4]
	float RVOAvoidanceHeight;//[Offset: 0x1a4, Size: 0x4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a8, Size: 0x4]
	float RVOSteeringStep;//[Offset: 0x1ac, Size: 0x4]
	float RVOThrottleStep;//[Offset: 0x1b0, Size: 0x4]
	int AvoidanceUID;//[Offset: 0x1b4, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1b8, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1bc, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c0, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x1c4, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x1c8, Size: 0xc]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1d4, Size: 0x14]
	float RawSteeringInput;//[Offset: 0x1ec, Size: 0x4]
	float RawThrottleInput;//[Offset: 0x1f0, Size: 0x4]
	float RawBrakeInput;//[Offset: 0x1f4, Size: 0x4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	float SteeringInput;//[Offset: 0x1fc, Size: 0x4]
	float ThrottleInput;//[Offset: 0x200, Size: 0x4]
	float BrakeInput;//[Offset: 0x204, Size: 0x4]
	float HandbrakeInput;//[Offset: 0x208, Size: 0x4]
	float IdleBrakeInput;//[Offset: 0x20c, Size: 0x4]
	float StopThreshold;//[Offset: 0x210, Size: 0x4]
	float WrongDirectionThreshold;//[Offset: 0x214, Size: 0x4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x218, Size: 0x8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x220, Size: 0x8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x228, Size: 0x8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x230, Size: 0x8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	void SetUseAutoGears(bool bUseAuto);// 0x39d9b6c
	void SetThrottleInput(float Throttle);// 0x39d9aec
	void SetTargetGear(int GearNum, bool bImmediate);// 0x39d9a28
	void SetSteeringInput(float Steering);// 0x39d99a8
	void SetPhysActive(bool bActive);// 0x39d9928
	void SetHandbrakeInput(bool bNewHandbrake);// 0x39d98a0
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x39d981c
	void SetGroupsToIgnore(int GroupFlags);// 0x39d97a4
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x39d9720
	void SetGroupsToAvoid(int GroupFlags);// 0x39d96a8
	void SetGearUp(bool bNewGearUp);// 0x39d9628
	void SetGearDown(bool bNewGearDown);// 0x39d95a8
	void SetBrakeInput(float Brake);// 0x39d9528
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x39d94a4
	void SetAvoidanceGroup(int GroupFlags);// 0x2ec1b3c
	void SetAvoidanceEnabled(bool bEnable);// 0x39d9424
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x39d9240
	bool GetUseAutoGears();// 0x39d9218
	int GetTargetGear();// 0x39d91f0
	float GetForwardSpeed();// 0x39d91c8
	float GetEngineRotationSpeed();// 0x39d91a0
	float GetEngineMaxRotationSpeed();// 0x39d9178
	int GetCurrentGear();// 0x39d9150

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 0x58]
	float MaxRPM;//[Offset: 0x58, Size: 0x4]
	float MOI;//[Offset: 0x5c, Size: 0x4]
	float DampingRateFullThrottle;//[Offset: 0x60, Size: 0x4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64, Size: 0x4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 0x1]
	float FrontRearSplit;//[Offset: 0x4, Size: 0x4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 0x4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 0x4]
	float CentreBias;//[Offset: 0x10, Size: 0x4]
	float FrontBias;//[Offset: 0x14, Size: 0x4]
	float RearBias;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float GearSwitchTime;//[Offset: 0x4, Size: 0x4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 0x4]
	float FinalRatio;//[Offset: 0xc, Size: 0x4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 0xc]
	float ReverseGearRatio;//[Offset: 0x1c, Size: 0x4]
	float NeutralGearUpRatio;//[Offset: 0x20, Size: 0x4]
	float ClutchStrength;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 0x4]
	float DownRatio;//[Offset: 0x4, Size: 0x4]
	float UpRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x4]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c, Size: 0x4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	Vector Offset;//[Offset: 0x24, Size: 0xc]
	float ShapeRadius;//[Offset: 0x30, Size: 0x4]
	float ShapeWidth;//[Offset: 0x34, Size: 0x4]
	float Mass;//[Offset: 0x38, Size: 0x4]
	float DampingRate;//[Offset: 0x3c, Size: 0x4]
	float SteerAngle;//[Offset: 0x40, Size: 0x4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	TireType* TireType;//[Offset: 0x48, Size: 0x4]
	TireConfig* TireConfig;//[Offset: 0x4c, Size: 0x4]
	float LatStiffMaxLoad;//[Offset: 0x50, Size: 0x4]
	float LatStiffValue;//[Offset: 0x54, Size: 0x4]
	float LongStiffValue;//[Offset: 0x58, Size: 0x4]
	float SuspensionForceOffset;//[Offset: 0x5c, Size: 0x4]
	float SuspensionMaxRaise;//[Offset: 0x60, Size: 0x4]
	float SuspensionMaxDrop;//[Offset: 0x64, Size: 0x4]
	float SuspensionNaturalFrequency;//[Offset: 0x68, Size: 0x4]
	float SuspensionDampingRatio;//[Offset: 0x6c, Size: 0x4]
	byte SweepType;//[Offset: 0x70, Size: 0x1]
	float MaxBrakeTorque;//[Offset: 0x74, Size: 0x4]
	float MaxHandBrakeTorque;//[Offset: 0x78, Size: 0x4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c, Size: 0x4]
	int WheelIndex;//[Offset: 0x80, Size: 0x4]
	float DebugLongSlip;//[Offset: 0x84, Size: 0x4]
	float DebugLatSlip;//[Offset: 0x88, Size: 0x4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c, Size: 0x4]
	float DebugWheelTorque;//[Offset: 0x94, Size: 0x4]
	float DebugLongForce;//[Offset: 0x98, Size: 0x4]
	float DebugLatForce;//[Offset: 0x9c, Size: 0x4]
	Vector Location;//[Offset: 0xa0, Size: 0xc]
	Vector OldLocation;//[Offset: 0xac, Size: 0xc]
	Vector Velocity;//[Offset: 0xb8, Size: 0xc]
	bool IsInAir();// 0x39d89c8
	float GetSuspensionOffset();// 0x39d89a0
	float GetSteerAngle();// 0x39d8978
	float GetRotationAngle();// 0x39d8950

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 0x4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x4]
	float FrictionScale;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 0x4]
	float ThrottleInput;//[Offset: 0x4, Size: 0x4]
	float BrakeInput;//[Offset: 0x8, Size: 0x4]
	float HandbrakeInput;//[Offset: 0xc, Size: 0x4]
	int CurrentGear;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 0x4]
	float FallRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x4]
	FName TireBoneName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* EventStart;//[Offset: 0x4, Size: 0x4]
	AkAudioEvent* EventStop;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x40, Size: 0x4]
	int PostEventID;//[Offset: 0x44, Size: 0x4]
	float MinLoopUpdateTime;//[Offset: 0x48, Size: 0x4]
	float LoopUpdateTimer;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0, Size: 0x4]
	<uint32,float> MapRTPC;//[Offset: 0x4, Size: 0x3c]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40, Size: 0x4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 0x1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 0x1]
	int8 BrakeInput;//[Offset: 0x2, Size: 0x1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 0x1]
	int8 CurrentGear;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 0x20]
	FString PlayerName;//[Offset: 0x20, Size: 0xc]
	STExtraBaseCharacter* Character;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 0x4]
	Vector BoxLocation;//[Offset: 0x4, Size: 0xc]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 0x4]
	int MatCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x2c8, Size: 0x4]
	int DecalId;//[Offset: 0x2cc, Size: 0x4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x2d0, Size: 0x70]
	STExtraPlayerState* OwnerPS;//[Offset: 0x340, Size: 0x4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x344, Size: 0x8]
	void OnRep_DecalInfo();// 0x12e82e4

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	enum ParentType;//[Offset: 0x50, Size: 0x1]
	PrimitiveComponent* Parent;//[Offset: 0x54, Size: 0x8]

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 0xc]
	FString PlayerOpenID;//[Offset: 0xc, Size: 0xc]
	FString PicUrl;//[Offset: 0x18, Size: 0xc]
	int TeamID;//[Offset: 0x24, Size: 0x4]
	uint64 Uid;//[Offset: 0x28, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: HitEnemyData
	Vector HitLocation;//[Offset: 0x0, Size: 0xc]
	bool bNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	uint32 HittedPlayerID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TeammateConveyStatus
	bool bIsInFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float PreFireTime;//[Offset: 0x4, Size: 0x4]
	float FireSignContinueTime;//[Offset: 0x8, Size: 0x4]
	bool bIsInDamaing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PreDamageTime;//[Offset: 0x10, Size: 0x4]
	float DamageSignContinueTime;//[Offset: 0x14, Size: 0x4]
	bool bIsInQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float PreQuickChatTime;//[Offset: 0x1c, Size: 0x4]
	float QuickChatSignContinueTime;//[Offset: 0x20, Size: 0x4]
	int VoiceState;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 0x1]
	int TypeID;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]
	int InstanceID;//[Offset: 0x20, Size: 0x4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x24, Size: 0x18]
	enum MapAdded;//[Offset: 0x3c, Size: 0x1]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	Property*[] DeltaProperties;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0, Size: 0x4]
	int CustomState;//[Offset: 0x4, Size: 0x4]
	FString CustomString;//[Offset: 0x8, Size: 0xc]
	enum InWhichMap;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0xc0, Size: 0xc]
	float MaxBreathAmount;//[Offset: 0xcc, Size: 0x4]
	float DrowningHurtHight;//[Offset: 0xd0, Size: 0x4]
	float SwimWaterSufaceOffset;//[Offset: 0xd4, Size: 0x4]
	float BreathVauleChangeoffset;//[Offset: 0xd8, Size: 0x4]
	float OpBreathVauleChangeoffset;//[Offset: 0xdc, Size: 0x4]
	float BreathDeltaTime;//[Offset: 0xe0, Size: 0x4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0xe4, Size: 0x4]
	float MinSpeedScale;//[Offset: 0xe8, Size: 0x4]
	float MaxCrouchWaterHeight;//[Offset: 0xec, Size: 0x4]
	float MaxProneWaterHeight;//[Offset: 0xf0, Size: 0x4]
	float DeadInWaterLocZOffset;//[Offset: 0xf4, Size: 0x4]
	float RollMaxAngle;//[Offset: 0xf8, Size: 0x4]
	float DistoVolume;//[Offset: 0xfc, Size: 0x4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x114, Size: 0x4]
	float downWaterHeight;//[Offset: 0x11c, Size: 0x4]
	float nowTickTime;//[Offset: 0x128, Size: 0x4]
	Actor* WaterObjectCpp;//[Offset: 0x12c, Size: 0x4]
	void UpdateSwimCollisionHeightCpp();// 0x13f166c
	void LeaveWater();// 0x13f1658
	Actor* GetWaterObject();// 0x13f1630
	void EnterWater_BluePrint();// 0x1c01fa0
	void EnterWater(Actor* WaterObject);// 0x13f15b8
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x1c01fa0

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 0x4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 0x4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 0x4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x4b0, Size: 0x4]
	float AttachCheckDistance;//[Offset: 0x4b4, Size: 0x4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x4b8, Size: 0x4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x4bc, Size: 0x4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4c0, Size: 0x4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4dc, Size: 0xc]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4e8, Size: 0xc]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x13468e8
	void UpdateDataWhenBagChangedOnAutonomous();// 0x13468d4
	void OnRecoverOnServer();// 0x13468b8
	void OnReconnectOnServer();// 0x134689c
	void OnReconnectOnClient();// 0x1346880
	void OnDisconnectToClientOnServer();// 0x134686c
	int GetBagLevel();// 0x134683c

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x104, Size: 0xc]
	float DestinyThreshold;//[Offset: 0x110, Size: 0x4]
	int RoundNum;//[Offset: 0x114, Size: 0x4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	Actor* ContainActor;//[Offset: 0x138, Size: 0x4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x1ac, Size: 0x4]
	void SetGMCicleTime(float CDTime, float LastTime);// 0x134a2a4
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x134a1ac

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	RegisterTimer[] TimerRegister;//[Offset: 0xc0, Size: 0xc]
	FString TimerName;//[Offset: 0xcc, Size: 0xc]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0, Size: 0x4]
	float DelayTime;//[Offset: 0x4, Size: 0x4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 0x4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 0x4]
	float[] BlueCirclePreWarning;//[Offset: 0x10, Size: 0xc]
	float LastTime;//[Offset: 0x1c, Size: 0x4]
	float Pain;//[Offset: 0x20, Size: 0x4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	Vector2D bluepoint;//[Offset: 0x28, Size: 0x8]
	float blueradius;//[Offset: 0x30, Size: 0x4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	Vector2D whitepoint;//[Offset: 0x38, Size: 0x8]
	float whiteradius;//[Offset: 0x40, Size: 0x4]
	float alpha;//[Offset: 0x44, Size: 0x4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float DestinyChance;//[Offset: 0x4c, Size: 0x4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float ScreenSizeFactor;//[Offset: 0x54, Size: 0x4]
	float ExtraRadius;//[Offset: 0x58, Size: 0x4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	float DamageMagnifierRange;//[Offset: 0x60, Size: 0x4]
	float DamageMagnifier;//[Offset: 0x64, Size: 0x4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x68, Size: 0x4]
	Vector[] AvoidPoints;//[Offset: 0x6c, Size: 0xc]
	float EdgeDistance;//[Offset: 0x78, Size: 0x4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: RegisterTimer
	int waveindex;//[Offset: 0x0, Size: 0x4]
	float[] Times;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 0x4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 0x4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 0x4]
	byte CircleStatus;//[Offset: 0x10, Size: 0x1]
	Vector BlueCircle;//[Offset: 0x14, Size: 0xc]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 0xc]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 0xc]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 0x4]
	float ExtraRadius;//[Offset: 0x40, Size: 0x4]
	byte AirAttackStatus;//[Offset: 0x44, Size: 0x1]
	Vector AirAttackArea;//[Offset: 0x48, Size: 0xc]
	int AirAttackWave;//[Offset: 0x54, Size: 0x4]
	Vector AirplaneStartLocation;//[Offset: 0x58, Size: 0xc]
	Vector AirplaneStopLocation;//[Offset: 0x64, Size: 0xc]
	Vector AirplaneCanJumpLocation;//[Offset: 0x70, Size: 0xc]
	Vector AirplaneForceJumpLocation;//[Offset: 0x7c, Size: 0xc]
	int PlayerNumOnPlane;//[Offset: 0x88, Size: 0x4]
	int BossCountDown;//[Offset: 0x8c, Size: 0x4]
	Vector BossBornPos;//[Offset: 0x90, Size: 0xc]

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0, Size: 0x4]
	PlayerAnimData MovementAnim;//[Offset: 0x4, Size: 0x8]
	PlayerAnimData AimAnim;//[Offset: 0xc, Size: 0x8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14, Size: 0x8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x1c, Size: 0x8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x24, Size: 0x8]
	PlayerAnimData PickUpAnim;//[Offset: 0x2c, Size: 0x8]
	PlayerAnimData FireAnim;//[Offset: 0x34, Size: 0x8]
	PlayerAnimData HurtAnim;//[Offset: 0x3c, Size: 0x8]
	PlayerAnimData TurnAnim;//[Offset: 0x44, Size: 0x8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x4c, Size: 0x8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x54, Size: 0x8]
	PlayerAnimData WeaponIdle;//[Offset: 0x5c, Size: 0x8]
	PlayerAnimData ForegripAnim;//[Offset: 0x64, Size: 0x8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x6c, Size: 0xc]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 0x4]
	float Rate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0, Size: 0x4]
	Vector Velocity;//[Offset: 0x4, Size: 0xc]
	Vector movedir;//[Offset: 0x10, Size: 0xc]
	byte MovementMode;//[Offset: 0x1c, Size: 0x1]
	byte PoseType;//[Offset: 0x1d, Size: 0x1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 0xc]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 0xc]
	byte WeaponType;//[Offset: 0x38, Size: 0x1]
	byte WeaponHoldType;//[Offset: 0x39, Size: 0x1]
	byte WeaponState;//[Offset: 0x3a, Size: 0x1]
	byte WeaponReloadMethod;//[Offset: 0x3b, Size: 0x1]
	byte SightType;//[Offset: 0x3c, Size: 0x1]
	float RecoilKickADS;//[Offset: 0x40, Size: 0x4]
	float ForegripParam;//[Offset: 0x44, Size: 0x4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 0xc]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 0xc]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 0xc]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 0xc]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 0xc]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 0xc]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 0xc]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 0xc]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 0xc]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 0xc]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 0xc]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 0xc]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 0x1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	Vector HurtDir;//[Offset: 0xe4, Size: 0xc]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	byte JumpType;//[Offset: 0xf2, Size: 0x1]
	byte ParachuteState;//[Offset: 0xf3, Size: 0x1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 0x1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 0x1]
	float HandleFolderFactor;//[Offset: 0xf8, Size: 0x4]
	float CharacterYawRotateRate;//[Offset: 0xfc, Size: 0x4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4, Size: 0x4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 0x4]
	AnimationAsset* SpecialIdleAnim;//[Offset: 0xc, Size: 0x4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x10, Size: 0x4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x14, Size: 0x4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x18, Size: 0x4]
	AnimationAsset* LeanInAnim;//[Offset: 0x1c, Size: 0x4]
	AnimationAsset* AimAnim;//[Offset: 0x20, Size: 0x4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x24, Size: 0x4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x28, Size: 0x4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x2c, Size: 0x4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x30, Size: 0x4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x34, Size: 0x4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x38, Size: 0x4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x3c, Size: 0x4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x40, Size: 0x4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x44, Size: 0x4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x48, Size: 0x4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x4c, Size: 0x4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x50, Size: 0x4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x54, Size: 0x4]
	AnimationAsset* Ski_Falling;//[Offset: 0x58, Size: 0x4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x5c, Size: 0x4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x60, Size: 0x4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x64, Size: 0x4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0x68, Size: 0x4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0, Size: 0x4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	float VacateHight;//[Offset: 0x8, Size: 0x4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 0xc]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 0xc]
	byte SeatWeaponHoldType;//[Offset: 0x28, Size: 0x1]
	byte SeatSpecialType;//[Offset: 0x29, Size: 0x1]
	enum VehicleType;//[Offset: 0x2a, Size: 0x1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 0x4]
	float Durability;//[Offset: 0x4, Size: 0x4]
	float DamageReduceScale;//[Offset: 0x8, Size: 0x4]
	float DurabilityReduceScale;//[Offset: 0xc, Size: 0x4]
	FString BodyDurabilityIndexName;//[Offset: 0x10, Size: 0xc]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 0xc]
	float EnergyMax;//[Offset: 0xc, Size: 0x4]
	float EnergyCurrent;//[Offset: 0x10, Size: 0x4]
	float AttenuationPeriod;//[Offset: 0x14, Size: 0x4]
	float AttenuationAmount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 0x4]
	FString BuffName;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140, Size: 0x4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 0xc]
	byte ShowType;//[Offset: 0xc, Size: 0x1]
	float Value;//[Offset: 0x10, Size: 0x4]
	float LimitValue;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	void ReportVerifyInfoFlow();// 0x1412f40
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x1412e70
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x1412d48
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x1412c58
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x1412b88
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x1412ab8
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x1412988
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x1412858
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x1412754
	void ReportGameSetting(const GameSetting GameSetting);// 0x1412664
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x1412594
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x1412494
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x14123c4
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x14122f4
	void ReportAimFlow(const AimFlow AimFlow);// 0x1412224
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponID, out int BulletID, out int BulletNum);// 0x1412060

--------------------------------
Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0xc]
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]
	FString GameAppID;//[Offset: 0x18, Size: 0xc]
	FString OpenID;//[Offset: 0x24, Size: 0xc]
	int8 PlatID;//[Offset: 0x30, Size: 0x1]
	uint16 AreaID;//[Offset: 0x32, Size: 0x2]
	FString ZoneID;//[Offset: 0x34, Size: 0xc]
	uint64 BattleID;//[Offset: 0x40, Size: 0x8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 0x8]
	uint64 RoleID;//[Offset: 0x50, Size: 0x8]
	FString TargetUserName;//[Offset: 0x58, Size: 0xc]
	FString TargetOpenID;//[Offset: 0x64, Size: 0xc]
	uint64 TargetRoleID;//[Offset: 0x70, Size: 0x8]
	FString HitPart;//[Offset: 0x78, Size: 0xc]
	int GunID;//[Offset: 0x84, Size: 0x4]
	byte PlayerKill;//[Offset: 0x88, Size: 0x1]
	uint64 AttackFlowID;//[Offset: 0x90, Size: 0x8]
	int KillAICnt;//[Offset: 0x98, Size: 0x4]
	int KillRealPlayerCnt;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 0x1]
	int GunID;//[Offset: 0xc, Size: 0x4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 0x4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 0x36]
	int LocationX;//[Offset: 0x4c, Size: 0x4]
	int LocationY;//[Offset: 0x50, Size: 0x4]
	int LocationZ;//[Offset: 0x54, Size: 0x4]
	int KilledLocationX;//[Offset: 0x58, Size: 0x4]
	int KilledLocationY;//[Offset: 0x5c, Size: 0x4]
	int KilledLocationZ;//[Offset: 0x60, Size: 0x4]
	int TeamID;//[Offset: 0x64, Size: 0x4]
	FString GameModeID;//[Offset: 0x68, Size: 0xc]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 0x2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 0x2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 0x2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 0x2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 0x2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 0x2]
	int16 LeftMax;//[Offset: 0xc, Size: 0x2]
	int16 RightMax;//[Offset: 0xe, Size: 0x2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 0x2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 0x2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 0x2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 0x2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 0x2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 0x2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 0x2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 0x2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 0x2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 0x2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 0x2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 0x2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 0x2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 0x2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 0x2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 0x2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 0x2]

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 0x1]
	byte[] MrpcsFlowData;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0xc]
	FString MapName;//[Offset: 0x14, Size: 0xc]
	int8 WeatherID;//[Offset: 0x20, Size: 0x1]
	int64 GameStartTime;//[Offset: 0x28, Size: 0x8]
	uint32 StartJumpTime;//[Offset: 0x30, Size: 0x4]
	uint32 EndJumpTime;//[Offset: 0x34, Size: 0x4]
	uint32 PlayerJumpTime;//[Offset: 0x38, Size: 0x4]
	uint32 PlayerOpenTime;//[Offset: 0x3c, Size: 0x4]
	uint32 PlayerLandTime;//[Offset: 0x40, Size: 0x4]
	int PlayerJumpPositionX;//[Offset: 0x44, Size: 0x4]
	int PlayerJumpPositionY;//[Offset: 0x48, Size: 0x4]
	int PlayerJumpPositionZ;//[Offset: 0x4c, Size: 0x4]
	int PlaneJumpPositionX;//[Offset: 0x50, Size: 0x4]
	int PlaneJumpPositionY;//[Offset: 0x54, Size: 0x4]
	int PlaneJumpPositionZ;//[Offset: 0x58, Size: 0x4]
	int PlayerLandPositionX;//[Offset: 0x5c, Size: 0x4]
	int PlayerLandPositionY;//[Offset: 0x60, Size: 0x4]
	int PlayerLandPositionZ;//[Offset: 0x64, Size: 0x4]
	uint32 PlayerLandDistance;//[Offset: 0x68, Size: 0x4]
	uint32 PlayerSpeedMax1;//[Offset: 0x6c, Size: 0x4]
	uint32 PlayerSpeedMax2;//[Offset: 0x70, Size: 0x4]
	FString GVoiceTeamID;//[Offset: 0x74, Size: 0xc]
	FString GVoiceRoomID;//[Offset: 0x80, Size: 0xc]
	int GVoiceTeamMemberID;//[Offset: 0x8c, Size: 0x4]
	int GVoiceRoomMemberID;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0xc]
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]
	FString GameAppID;//[Offset: 0x18, Size: 0xc]
	FString OpenID;//[Offset: 0x24, Size: 0xc]
	int8 PlatID;//[Offset: 0x30, Size: 0x1]
	uint16 AreaID;//[Offset: 0x32, Size: 0x2]
	FString ZoneID;//[Offset: 0x34, Size: 0xc]
	uint64 BattleID;//[Offset: 0x40, Size: 0x8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 0x8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 0x4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 0xc]
	FString UserName;//[Offset: 0x60, Size: 0xc]
	uint64 RoleID;//[Offset: 0x70, Size: 0x8]
	int8 RoleType;//[Offset: 0x78, Size: 0x1]
	FString EnemyOpenID;//[Offset: 0x7c, Size: 0xc]
	FString EnemyUserName;//[Offset: 0x88, Size: 0xc]
	uint64 EnemyRoleID;//[Offset: 0x98, Size: 0x8]
	int EnemyRoleType;//[Offset: 0xa0, Size: 0x4]
	uint32 HurtTime;//[Offset: 0xa4, Size: 0x4]
	int HurtType;//[Offset: 0xa8, Size: 0x4]
	int HitType;//[Offset: 0xac, Size: 0x4]
	int DamageStart;//[Offset: 0xb0, Size: 0x4]
	int DamageReduce;//[Offset: 0xb4, Size: 0x4]
	int ArmorDef;//[Offset: 0xb8, Size: 0x4]
	int HPstart;//[Offset: 0xbc, Size: 0x4]
	int HPEnd;//[Offset: 0xc0, Size: 0x4]
	int ArmorHPStart1;//[Offset: 0xc4, Size: 0x4]
	int ArmorHPEnd1;//[Offset: 0xc8, Size: 0x4]
	int ArmorHPStart2;//[Offset: 0xcc, Size: 0x4]
	int ArmorHPEnd2;//[Offset: 0xd0, Size: 0x4]
	int CarHPStart;//[Offset: 0xd4, Size: 0x4]
	int CarHPEnd;//[Offset: 0xd8, Size: 0x4]
	int FallHeight;//[Offset: 0xdc, Size: 0x4]
	int HypoxiaTime;//[Offset: 0xe0, Size: 0x4]
	int HypoxiaHurtTotal;//[Offset: 0xe4, Size: 0x4]
	int PlayerKilled;//[Offset: 0xe8, Size: 0x4]
	int ArmorKill;//[Offset: 0xec, Size: 0x4]
	int CarKill;//[Offset: 0xf0, Size: 0x4]
	int IfIsAI;//[Offset: 0xf4, Size: 0x4]
	int CircleIndex;//[Offset: 0xf8, Size: 0x4]
	uint32 HurtFlowID;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0, Size: 0xc]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 0xc]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 0x4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 0x4]
	uint64 Uid;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0, Size: 0xc]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 0xc]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 0x4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 0x4]
	uint64 Uid;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0xc]
	FString MapName;//[Offset: 0x14, Size: 0xc]
	int8 WeatherID;//[Offset: 0x20, Size: 0x1]
	FString ItemList;//[Offset: 0x24, Size: 0xc]
	int8 TeamType;//[Offset: 0x30, Size: 0x1]
	int TeamID;//[Offset: 0x34, Size: 0x4]
	FString TeamPlayer1;//[Offset: 0x38, Size: 0xc]
	FString TeamPlayer2;//[Offset: 0x44, Size: 0xc]
	FString TeamPlayer3;//[Offset: 0x50, Size: 0xc]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x5c, Size: 0x4]
	FString GVoiceTeamID;//[Offset: 0x60, Size: 0xc]
	FString GVoiceRoomID;//[Offset: 0x6c, Size: 0xc]
	int GVoiceTeamMemberID;//[Offset: 0x78, Size: 0x4]
	int GVoiceRoomMemberID;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 0x8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 0x28]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x30, Size: 0x8]
	GameSetting_Operate Operate;//[Offset: 0x38, Size: 0x8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x40, Size: 0x8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x48, Size: 0x70]
	GameSetting_PickUp PickUp;//[Offset: 0xb8, Size: 0x38]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 0x4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 0x4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 0x4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int LRShootMode;//[Offset: 0x14, Size: 0x4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int LeftHandFire;//[Offset: 0x1c, Size: 0x4]
	int Gyroscope;//[Offset: 0x20, Size: 0x4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 0x4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0, Size: 0x4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 0x4]
	int DrivingViewMode;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 0x4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 0xc]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 0x20]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x30, Size: 0x20]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x50, Size: 0x20]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 0x4]
	float ParachuteEye;//[Offset: 0x4, Size: 0x4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 0x4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 0x4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 0x4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 0x4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 0x4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 0x4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 0x4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 0x4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 0x4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 0x4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 0x4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 0x4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 0x4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 0x4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 0x4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 0x4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 0x4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 0x4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 0x4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 0x4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 0x4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4, Size: 0x18]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c, Size: 0x10]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 0x4]
	int Bandage;//[Offset: 0x4, Size: 0x4]
	int PainKiller;//[Offset: 0x8, Size: 0x4]
	int Adrenaline;//[Offset: 0xc, Size: 0x4]
	int EnergyDrink;//[Offset: 0x10, Size: 0x4]
	int FirstAidKit;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 0x4]
	int ShockBomb;//[Offset: 0x4, Size: 0x4]
	int SmokeBomb;//[Offset: 0x8, Size: 0x4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponID;//[Offset: 0x0, Size: 0x4]
	int BulletCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0xc]
	FString ClientVersion;//[Offset: 0x14, Size: 0xc]
	uint32 OverTime;//[Offset: 0x20, Size: 0x4]
	int8 EndType;//[Offset: 0x24, Size: 0x1]
	byte KillCount;//[Offset: 0x25, Size: 0x1]
	byte AssistsCount;//[Offset: 0x26, Size: 0x1]
	byte DropCount;//[Offset: 0x27, Size: 0x1]
	byte SaveCount;//[Offset: 0x28, Size: 0x1]
	byte RebornCount;//[Offset: 0x29, Size: 0x1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 0x1]
	int GoldGet;//[Offset: 0x2c, Size: 0x4]
	int DiamondGet;//[Offset: 0x30, Size: 0x4]
	int ExpGet;//[Offset: 0x34, Size: 0x4]
	byte WinRank;//[Offset: 0x38, Size: 0x1]
	byte TotalPlayers;//[Offset: 0x39, Size: 0x1]
	int PlayerRank;//[Offset: 0x3c, Size: 0x4]
	int RankEnd;//[Offset: 0x40, Size: 0x4]
	int TeamID;//[Offset: 0x44, Size: 0x4]
	FString TeamPlayer1;//[Offset: 0x48, Size: 0xc]
	FString TeamPlayer2;//[Offset: 0x54, Size: 0xc]
	FString TeamPlayer3;//[Offset: 0x60, Size: 0xc]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1]
	byte TeamPlayer1Kill;//[Offset: 0x6d, Size: 0x1]
	byte TeamPlayer2Kill;//[Offset: 0x6e, Size: 0x1]
	byte TeamPlayer3Kill;//[Offset: 0x6f, Size: 0x1]
	uint32 GameEndFlowID;//[Offset: 0x70, Size: 0x4]
	byte RoundCircleCount;//[Offset: 0x74, Size: 0x1]
	int[] UseQuickMsgIDArray;//[Offset: 0x78, Size: 0xc]
	int[] UseQuickMsgCountArray;//[Offset: 0x84, Size: 0xc]
	int[] UseWheelMsgIDArray;//[Offset: 0x90, Size: 0xc]
	int[] UseWheelMsgCountArray;//[Offset: 0x9c, Size: 0xc]
	int[] InexistentAvatarStat;//[Offset: 0xa8, Size: 0xc]
	int[] InexistentAvatarInBornStat;//[Offset: 0xb4, Size: 0xc]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xc0, Size: 0xc]
	int[] InexistentVehicleAvatarStat;//[Offset: 0xcc, Size: 0xc]
	int InexistentPlaneAvatarStat;//[Offset: 0xd8, Size: 0x4]
	int InexistentEmoteAvatarStat;//[Offset: 0xdc, Size: 0x4]
	byte ShowMsgCnt;//[Offset: 0xe0, Size: 0x1]
	byte UserConfirmCnt;//[Offset: 0xe1, Size: 0x1]
	byte UserCancelCnt;//[Offset: 0xe2, Size: 0x1]
	byte UserDoNothingCnt;//[Offset: 0xe3, Size: 0x1]
	float FPSBeforeAdapt;//[Offset: 0xe4, Size: 0x4]
	float FPSAfterAdapt;//[Offset: 0xe8, Size: 0x4]
	float TeammateMicrophoneTime;//[Offset: 0xec, Size: 0x4]
	float TeammateSpeakerTime;//[Offset: 0xf0, Size: 0x4]
	float EnemyMicrophoneTime;//[Offset: 0xf4, Size: 0x4]
	float EnemySpeakerTime;//[Offset: 0xf8, Size: 0x4]
	float TeammateInterphoneTime;//[Offset: 0xfc, Size: 0x4]
	float EnemyInterphoneTime;//[Offset: 0x100, Size: 0x4]
	byte PlayerUseQuickSight;//[Offset: 0x104, Size: 0x1]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 0xc]
	FString GameAppID;//[Offset: 0xc, Size: 0xc]
	FString OpenID;//[Offset: 0x18, Size: 0xc]
	uint16 AreaID;//[Offset: 0x24, Size: 0x2]
	int8 PlatID;//[Offset: 0x26, Size: 0x1]
	FString ZoneID;//[Offset: 0x28, Size: 0xc]
	uint64 BattleID;//[Offset: 0x38, Size: 0x8]
	FString UserName;//[Offset: 0x40, Size: 0xc]
	uint64 RoleID;//[Offset: 0x50, Size: 0x8]
	int8 RoleType;//[Offset: 0x58, Size: 0x1]
	FString PicUrl;//[Offset: 0x5c, Size: 0xc]

--------------------------------
Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0xc]
	FString PicUrl;//[Offset: 0x14, Size: 0xc]
	uint32 GameStartTime;//[Offset: 0x20, Size: 0x4]
	uint32 NewCircleBornTime;//[Offset: 0x24, Size: 0x4]
	int NewCirclePositionX;//[Offset: 0x28, Size: 0x4]
	int NewCirclePositionY;//[Offset: 0x2c, Size: 0x4]
	int NewCirclePositionRadius;//[Offset: 0x30, Size: 0x4]
	int NewCircleCount;//[Offset: 0x34, Size: 0x4]
	int PlayerPositionX;//[Offset: 0x38, Size: 0x4]
	int PlayerPositionY;//[Offset: 0x3c, Size: 0x4]
	int PlayerPositionZ;//[Offset: 0x40, Size: 0x4]
	int PlayerHP;//[Offset: 0x44, Size: 0x4]
	uint32 OldCircleMoveTime;//[Offset: 0x48, Size: 0x4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x4c, Size: 0x4]
	uint32 PlayerOutTime;//[Offset: 0x50, Size: 0x4]
	int CirclePoisonCount;//[Offset: 0x54, Size: 0x4]
	int CirclePoisonMin;//[Offset: 0x58, Size: 0x4]
	int CirclePoisonMax;//[Offset: 0x5c, Size: 0x4]
	int CirclePoisonAvg;//[Offset: 0x60, Size: 0x4]
	int CirclePoisonTotal;//[Offset: 0x64, Size: 0x4]
	int CirclePoisonDrop;//[Offset: 0x68, Size: 0x4]
	int CirclePoisonDead;//[Offset: 0x6c, Size: 0x4]
	int RecoveryCount;//[Offset: 0x70, Size: 0x4]
	int RecoveryMin;//[Offset: 0x74, Size: 0x4]
	int RecoveryMax;//[Offset: 0x78, Size: 0x4]
	int RecoveryTotal;//[Offset: 0x7c, Size: 0x4]
	int EnergyRecoveryCount;//[Offset: 0x80, Size: 0x4]
	int EnergyRecoveryMin;//[Offset: 0x84, Size: 0x4]
	int EnergyRecoveryMax;//[Offset: 0x88, Size: 0x4]
	int EnergyRecoveryTotal;//[Offset: 0x8c, Size: 0x4]
	int EnergyStartLv;//[Offset: 0x90, Size: 0x4]
	int EnergyStartTime;//[Offset: 0x94, Size: 0x4]
	FString EnergyItemUse;//[Offset: 0x98, Size: 0xc]
	int EnergyLvTimeInfo;//[Offset: 0xa4, Size: 0x4]
	FString EnergyRunFastTime;//[Offset: 0xa8, Size: 0xc]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xb4, Size: 0xc]
	int EnergyEndLv;//[Offset: 0xc0, Size: 0x4]
	int EnergyEndTime;//[Offset: 0xc4, Size: 0x4]
	int PlayerMoveDis;//[Offset: 0xc8, Size: 0x4]
	int PlayerSpeedMax;//[Offset: 0xcc, Size: 0x4]
	int PlayerSpeedAvg;//[Offset: 0xd0, Size: 0x4]
	int PlayerCarSpeedMax;//[Offset: 0xd4, Size: 0x4]
	int PlayerCarSpeedAvg;//[Offset: 0xd8, Size: 0x4]
	int PlayerSquatMoveDis;//[Offset: 0xdc, Size: 0x4]
	int PlayerSquatMoveTime;//[Offset: 0xe0, Size: 0x4]
	int PlayerCreepMoveDis;//[Offset: 0xe4, Size: 0x4]
	int PlayerCreepMoveTime;//[Offset: 0xe8, Size: 0x4]
	int PlayerRunMoveDis;//[Offset: 0xec, Size: 0x4]
	int PlayerRunMoveTime;//[Offset: 0xf0, Size: 0x4]
	int PlayerDriveMoveDis;//[Offset: 0xf4, Size: 0x4]
	int PlayerDriveMoveTime;//[Offset: 0xf8, Size: 0x4]
	int PlayerCar;//[Offset: 0xfc, Size: 0x4]
	int PlayerCameraDistanceMax;//[Offset: 0x100, Size: 0x4]
	uint32 SecCircleFlowID;//[Offset: 0x104, Size: 0x4]
	byte AutoAimType;//[Offset: 0x108, Size: 0x1]
	int AutoAimTime;//[Offset: 0x10c, Size: 0x4]
	byte[] MrpcsFlowData;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0xc]
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]
	FString GameAppID;//[Offset: 0x18, Size: 0xc]
	FString OpenID;//[Offset: 0x24, Size: 0xc]
	uint16 AreaID;//[Offset: 0x30, Size: 0x2]
	int8 PlatID;//[Offset: 0x32, Size: 0x1]
	FString ZoneID;//[Offset: 0x34, Size: 0xc]
	uint64 BattleID;//[Offset: 0x40, Size: 0x8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 0x8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 0x4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 0xc]
	FString UserName;//[Offset: 0x60, Size: 0xc]
	uint64 RoleID;//[Offset: 0x70, Size: 0x8]
	int8 RoleType;//[Offset: 0x78, Size: 0x1]
	FString TargetOpenID;//[Offset: 0x7c, Size: 0xc]
	FString TargetUserName;//[Offset: 0x88, Size: 0xc]
	uint64 TargetRoleID;//[Offset: 0x98, Size: 0x8]
	int8 TargetRoleType;//[Offset: 0xa0, Size: 0x1]
	FString GunName;//[Offset: 0xa4, Size: 0xc]
	FString GunPartsType;//[Offset: 0xb0, Size: 0xc]
	int8 SightType;//[Offset: 0xbc, Size: 0x1]
	int BulletSpeed;//[Offset: 0xc0, Size: 0x4]
	int8 MagazineMax;//[Offset: 0xc4, Size: 0x1]
	int8 MagazineLeft;//[Offset: 0xc5, Size: 0x1]
	int ShotFrequency;//[Offset: 0xc8, Size: 0x4]
	int BulletDamage;//[Offset: 0xcc, Size: 0x4]
	int16 BulletDown;//[Offset: 0xd0, Size: 0x2]
	byte BulletDamageReduce;//[Offset: 0xd2, Size: 0x1]
	int Recoil;//[Offset: 0xd4, Size: 0x4]
	int ReloadTime;//[Offset: 0xd8, Size: 0x4]
	FString PlayerState;//[Offset: 0xdc, Size: 0xc]
	byte ShotPose;//[Offset: 0xe8, Size: 0x1]
	byte FireType;//[Offset: 0xe9, Size: 0x1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 0x1]
	byte Sideways;//[Offset: 0xeb, Size: 0x1]
	int ShootingDeviationX;//[Offset: 0xec, Size: 0x4]
	int ShootingDeviationY;//[Offset: 0xf0, Size: 0x4]
	uint32 ZeroDistance;//[Offset: 0xf4, Size: 0x4]
	uint32 ShotTime;//[Offset: 0xf8, Size: 0x4]
	int HitTime;//[Offset: 0xfc, Size: 0x4]
	int PlayerPositionX;//[Offset: 0x100, Size: 0x4]
	int PlayerPositionY;//[Offset: 0x104, Size: 0x4]
	int PlayerPositionZ;//[Offset: 0x108, Size: 0x4]
	int GunPositionX;//[Offset: 0x10c, Size: 0x4]
	int GunPositionY;//[Offset: 0x110, Size: 0x4]
	int GunPositionZ;//[Offset: 0x114, Size: 0x4]
	int BulletsBornPositionX;//[Offset: 0x118, Size: 0x4]
	int BulletsBornPositionY;//[Offset: 0x11c, Size: 0x4]
	int BulletsBornPositionZ;//[Offset: 0x120, Size: 0x4]
	uint32 LastHitTime;//[Offset: 0x124, Size: 0x4]
	uint32 BulletFlyDistance;//[Offset: 0x128, Size: 0x4]
	uint32 BulletFlyTime;//[Offset: 0x12c, Size: 0x4]
	int HitPositionX;//[Offset: 0x130, Size: 0x4]
	int HitPositionY;//[Offset: 0x134, Size: 0x4]
	int HitPositionZ;//[Offset: 0x138, Size: 0x4]
	byte HitPart;//[Offset: 0x13c, Size: 0x1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 0x1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 0x1]
	byte BulletCost;//[Offset: 0x13e, Size: 0x1]
	int HPstart;//[Offset: 0x140, Size: 0x4]
	int HPEnd;//[Offset: 0x144, Size: 0x4]
	int ArmorHPStart;//[Offset: 0x148, Size: 0x4]
	int ArmorHPEnd;//[Offset: 0x14c, Size: 0x4]
	int CarHPStart;//[Offset: 0x150, Size: 0x4]
	int CarHPEnd;//[Offset: 0x154, Size: 0x4]
	byte PlayerKill;//[Offset: 0x158, Size: 0x1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 0x1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 0x1]
	int RecoilMoveX;//[Offset: 0x15c, Size: 0x4]
	int RecoilMoveY;//[Offset: 0x160, Size: 0x4]
	int WeaponAimFOV;//[Offset: 0x164, Size: 0x4]
	int BulletDamageDebuff;//[Offset: 0x168, Size: 0x4]
	int BulletDamageBuff;//[Offset: 0x16c, Size: 0x4]
	uint32 AtackFlowID;//[Offset: 0x170, Size: 0x4]
	int AutoAimSpeed;//[Offset: 0x174, Size: 0x4]
	int AutoAimSpeedRateMax;//[Offset: 0x178, Size: 0x4]
	int AutoAimRangeMax;//[Offset: 0x17c, Size: 0x4]
	int AutoAimRangeRateMax;//[Offset: 0x180, Size: 0x4]
	int GunID;//[Offset: 0x184, Size: 0x4]
	int IfIsOnCar;//[Offset: 0x188, Size: 0x4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	int KillAICnt;//[Offset: 0x190, Size: 0x4]
	int KillRealPlayerCnt;//[Offset: 0x194, Size: 0x4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0xc]
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]
	FString GameAppID;//[Offset: 0x18, Size: 0xc]
	FString OpenID;//[Offset: 0x24, Size: 0xc]
	uint16 AreaID;//[Offset: 0x30, Size: 0x2]
	int8 PlatID;//[Offset: 0x32, Size: 0x1]
	FString ZoneID;//[Offset: 0x34, Size: 0xc]
	uint64 BattleID;//[Offset: 0x40, Size: 0x8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 0x8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 0x4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 0xc]
	FString UserName;//[Offset: 0x60, Size: 0xc]
	uint64 RoleID;//[Offset: 0x70, Size: 0x8]
	int8 RoleType;//[Offset: 0x78, Size: 0x1]
	int AimTime;//[Offset: 0x7c, Size: 0x4]
	FString ShotCDTime;//[Offset: 0x80, Size: 0xc]
	int ShotCount;//[Offset: 0x8c, Size: 0x4]
	int ShotHitCount;//[Offset: 0x90, Size: 0x4]
	int ShotHeadHitCount;//[Offset: 0x94, Size: 0x4]
	int ShotPersonHitCount;//[Offset: 0x98, Size: 0x4]
	int ShotPersonKillCount;//[Offset: 0x9c, Size: 0x4]
	FString HitDistance;//[Offset: 0xa0, Size: 0xc]
	FString HitEachDistance;//[Offset: 0xac, Size: 0xc]
	FString HitAngle;//[Offset: 0xb8, Size: 0xc]
	FString HitEachCdTime;//[Offset: 0xc4, Size: 0xc]
	FString HitPartInfo;//[Offset: 0xd0, Size: 0xc]
	FString PlayerState;//[Offset: 0xdc, Size: 0xc]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	int8 SightType;//[Offset: 0xe9, Size: 0x1]
	uint32 AimFlowID;//[Offset: 0xec, Size: 0x4]

--------------------------------
Class: HalloweenVampireCloth
	bool bWearingHalloweenVampireCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int HalloweenVampireClothItemID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 0x1]
	int8 Disabled;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 0x4]
	float SteerInput;//[Offset: 0x4, Size: 0x4]
	int8 State;//[Offset: 0x8, Size: 0x1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 0xc]
	byte Roll;//[Offset: 0xc, Size: 0x1]
	uint32 View;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize Velocity;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 0x1]
	int LeaderIdx;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x154, Size: 0xc]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x160, Size: 0xc]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x16c, Size: 0xc]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x178, Size: 0xc]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x184, Size: 0xc]
	CurveFloat* FallingIKCurve;//[Offset: 0x190, Size: 0x4]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x194, Size: 0xc]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x1a0, Size: 0xc]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 0x1]
	bool EnableNewAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 0x1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae, Size: 0x1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1af, Size: 0x1]
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x184c8bc
	void OnLoadSingleCharacterAnimFinish();// 0x12e82e4
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x184c620
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x184c384
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x184c27c
	AnimationAsset* GetAnimationAsset(AnimationAsset* AnimPtr);// 0x184c0f4

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0xf8, Size: 0x3c]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x134, Size: 0xc]
	SoftObjectPath[] AnimationLoadingPendingList;//[Offset: 0x140, Size: 0xc]

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FName AnimTypeName;//[Offset: 0x8, Size: 0x8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 0x38]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x48, Size: 0x38]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 0x1]
	FName PoseName;//[Offset: 0x8, Size: 0x8]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: CharacterShieldAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FName AnimTypeName;//[Offset: 0x8, Size: 0x8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 0x38]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x48, Size: 0x38]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 0x1]
	FName JumpTypeName;//[Offset: 0x8, Size: 0x8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0, Size: 0x30]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 0x4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 0x1]
	byte AnimType;//[Offset: 0x5, Size: 0x1]
	byte PoseType;//[Offset: 0x6, Size: 0x1]
	byte JumpType;//[Offset: 0x7, Size: 0x1]
	byte JumpPhase;//[Offset: 0x8, Size: 0x1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 0x1]
	int SeatIdx;//[Offset: 0x4, Size: 0x4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 0x1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* Animation;//[Offset: 0x8, Size: 0x28]
	AnimationAsset* RealAnimationPtr;//[Offset: 0x30, Size: 0x4]
	bool AsyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0, Size: 0x4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4, Size: 0x4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8, Size: 0x4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc, Size: 0x4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10, Size: 0x4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0, Size: 0x4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4, Size: 0x4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8, Size: 0x4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0, Size: 0x4]
	int OtherEmoteId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	<byte,VaultAnimData> VaultAnimSoftPtrMap;//[Offset: 0xc4, Size: 0x3c]
	AnimMontage* VaultMontage;//[Offset: 0x100, Size: 0x4]
	AnimMontage* TeamVaultMontage;//[Offset: 0x104, Size: 0x4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x10c, Size: 0x4]
	bool VaultFromCPP();// 0x13fb8bc
	void UpdateVault_BluePrint();// 0x13ca444
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x13fb83c
	void StartAsyncLoadTeamVaultAnimRes();// 0x13fb828
	FString GetVaultKeyByBlockHeight(float Height);// 0x13fb718
	Rotator GetRelicateRotator();// 0x13fb6d0
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x13fb48c
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x13fb248
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x13fb1d0

--------------------------------
Class: VaultAnimData
	AnimationAsset* VaultAnimSoftPtr;//[Offset: 0x0, Size: 0x28]
	AnimationAsset* TeamVaultAnimSoftPtr;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 0x1]
	Transform AttachTransform;//[Offset: 0x10, Size: 0x30]
	byte AttachLocationType;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 0x4]
	Transform DecalTransform;//[Offset: 0x10, Size: 0x30]
	int DecalInstanceId;//[Offset: 0x40, Size: 0x4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: PlayerPosMarkerParam
	Character* Player;//[Offset: 0x0, Size: 0x4]
	float MarkTimeLen;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PUBGDoor.UAENetActor.Actor.Object
	int iRegionDoor;//[Offset: 0x314, Size: 0x4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]
	float MaxNetCullDistanceSquared;//[Offset: 0x31c, Size: 0x4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	float autoOpenDistanceSquared;//[Offset: 0x324, Size: 0x4]
	float autoOpenAngel;//[Offset: 0x328, Size: 0x4]
	float forwardSpeedRatio;//[Offset: 0x32c, Size: 0x4]
	int doorState;//[Offset: 0x330, Size: 0x4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	float DoorOperateTime;//[Offset: 0x338, Size: 0x4]
	StaticMeshComponent* doorMesh;//[Offset: 0x33c, Size: 0x4]
	BoxComponent* interactionBox;//[Offset: 0x340, Size: 0x4]
	BoxComponent* interForceBox;//[Offset: 0x344, Size: 0x4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	int DoorStateEx;//[Offset: 0x34c, Size: 0x4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x354, Size: 0x4]
	BoxComponent* interactionBoxEx;//[Offset: 0x358, Size: 0x4]
	BoxComponent* interForceBoxEx;//[Offset: 0x35c, Size: 0x4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x364, Size: 0xc]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x370, Size: 0x4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 0x1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 0x1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x377, Size: 0x1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	Character* PlayerCharacter;//[Offset: 0x37c, Size: 0x4]
	float autoOpenAngelCosinValue;//[Offset: 0x380, Size: 0x4]
	void SetDoorBroken(bool bExtraDoor);// 0x1401888
	void RefreshUIOnClient();// 0x1401874
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x14017b0
	void OnRep_RepDoorStateEx();// 0x140179c
	void OnRep_RepDoorState();// 0x1401788
	void OnRep_RepDoorBrokenEx();// 0x1401774
	void OnRep_RepDoorBroken();// 0x1401760
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1401618
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x14014d0
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x140140c
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1401210
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1401014
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x1400f50
	bool IsSameDoorState(int ClientState);// 0x1400ed0
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x1400cac
	enum[] GetDamageableGameObjectType();// 0x13cb5e8
	void ForceNetUpdate();// 0x13ea624
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x1400be8
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x1400a84
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x1c01fa0
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x1c01fa0
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x1c01fa0

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0xcc, Size: 0x4]
	FName ScopeAimCameraSocketName;//[Offset: 0xd0, Size: 0x8]
	FName FPPSocketName;//[Offset: 0xd8, Size: 0x8]
	FName BoltActionCurveName;//[Offset: 0xe0, Size: 0x8]
	float ScopeZoomSpringArmLength;//[Offset: 0xe8, Size: 0x4]
	float BoltActionHoldTimeDefault;//[Offset: 0xf0, Size: 0x4]
	float BoltActionFov;//[Offset: 0xf4, Size: 0x4]
	float ScopeZoomAlpha;//[Offset: 0xf8, Size: 0x4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0xfc, Size: 0x3c]
	float ScopeZoomSpeed;//[Offset: 0x138, Size: 0x4]
	<int,CurveFloat*> ScopeZoomFovCurveMap;//[Offset: 0x13c, Size: 0x3c]
	int CurrentPlayAnimIndex;//[Offset: 0x178, Size: 0x4]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x18c, Size: 0x3c]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	<FName,float> ScopeZoomMap;//[Offset: 0x1cc, Size: 0x3c]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 0x1]
	bool UpdateScopeCameraOffsets(out float FOV, out float Offset);// 0x1324034
	float SwitchSightConfigMaterial();// 0x1c01fa0
	void SwitchScopeMeshAnim(byte Type);// 0x1323fbc
	void SwitchCameraMode(byte Mode);// 0x1323f44
	float SwitchAngledSightConfigMaterial();// 0x1c01fa0
	void StopScopeIn();// 0x1c01fa0
	float ShowReflectorSightTPPMaterial();// 0x1c01fa0
	float ShowAngledSightTPPMaterial();// 0x1c01fa0
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x1323e78
	void SetTagCulling(bool IsUse);// 0x1c01fa0
	void SetScopeCVar();// 0x1323e64
	void ScopingChange(bool InValue);// 0x1323de4
	void Scoping(byte NewType);// 0x1323d6c
	void ScopeZoomUpdate(float alpha);// 0x1323cf4
	void ScopeZoomTick(float DeltaTime);// 0x1323c7c
	void ScopeZoomCalculate(out float FOV, out float SpringArmScaleX);// 0x1323b9c
	void ScopeTimelineUpdate(float alpha);// 0x1323b24
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1323a68
	void ScopeOutLogic();// 0x1323a54
	void ScopeOutEnd();// 0x1c01fa0
	void ScopeOut(byte NewType);// 0x13239dc
	void ScopeNotHandFold();// 0x13239c8
	void ScopeInterrupt(byte NewType);// 0x1323950
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1323894
	void ScopeInLogic();// 0x1323880
	void ScopeInEnd();// 0x1c01fa0
	void ScopeInContinue();// 0x132386c
	void ScopeInAfterTimeline();// 0x1323858
	void ScopeIn(byte NewType);// 0x13237e0
	void ScopeHandFold();// 0x13237cc
	void RevertScopeCVarOnDie(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x13235d0
	void RevertScopeCVar();// 0x13235bc
	void PlayScopeInTimeline();// 0x1c01fa0
	bool IsUseZoomScope();// 0x1323594
	bool IsRPGScopeIn();// 0x132356c
	bool IsCurWeaponAttachedAngledSight();// 0x13233d8
	bool IsAngledSightBySlot(byte Slot);// 0x13234ec
	bool IsAngledSight();// 0x13234bc
	void InitScopeZoom(int WeaponID, int ScopeID);// 0x1323400
	bool HaveAngledSight();// 0x13233d8
	byte GetSightType();// 0x13233b0
	float GetScopeZoomValue(int WeaponID, int ScopeID);// 0x13232ec
	FName GetScopeZoomKey(int WeaponID, int ScopeID);// 0x1323220
	float GetScopeFov(STExtraShootWeapon* ShootWeapon);// 0x1c01fa0
	float DetachSightLens();// 0x1c01fa0
	void BoltAction(float DeltaSeconds);// 0x13231a8
	void AttachToSight();// 0x1c01fa0
	float AttachSightLens();// 0x1c01fa0
	void ActiveComponentTickable();// 0x1323194

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xa0, Size: 0x28]
	float blendTime;//[Offset: 0xc8, Size: 0x4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	AnimationAsset*[] LobbyEnterEmoteAnimAssetList;//[Offset: 0xd0, Size: 0xc]
	AnimationAsset*[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0xdc, Size: 0xc]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0xe8, Size: 0x4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0xec, Size: 0x4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0xf4, Size: 0xc]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x100, Size: 0xc]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x13086dc
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x13082c8
	bool HandleDrop(int InCount, enum Reason);// 0x1307dd4
	bool HandleDisuse(enum Reason);// 0x1307d4c
	BackpackComponent* GetBackpackComponent();// 0x130bc40
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x130bb7c

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0, Size: 0xc]
	FString CauserNation;//[Offset: 0xc, Size: 0xc]
	FString VictimName;//[Offset: 0x18, Size: 0xc]
	FString VictimNation;//[Offset: 0x24, Size: 0xc]
	int DamageType;//[Offset: 0x30, Size: 0x4]
	int AdditionalParam;//[Offset: 0x34, Size: 0x4]
	int CauserWeaponAvatarID;//[Offset: 0x38, Size: 0x4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int ResultHealthStatus;//[Offset: 0x40, Size: 0x4]
	byte RecordRelationShip;//[Offset: 0x44, Size: 0x1]
	int PreviousHealthStatus;//[Offset: 0x48, Size: 0x4]
	int causerAnchorPlatformResID;//[Offset: 0x4c, Size: 0x4]
	int causerAnchorPlatformColorID;//[Offset: 0x50, Size: 0x4]
	int realKillerAnchorPlatformResID;//[Offset: 0x54, Size: 0x4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x58, Size: 0x4]
	int victimAnchorPlatformResID;//[Offset: 0x5c, Size: 0x4]
	int victimAnchorPlatformColorID;//[Offset: 0x60, Size: 0x4]
	FString CauserPicURL;//[Offset: 0x64, Size: 0xc]
	FString VictimPicURL;//[Offset: 0x70, Size: 0xc]
	FString RealKillerName;//[Offset: 0x7c, Size: 0xc]
	int RealKillNum;//[Offset: 0x88, Size: 0x4]
	byte CauserType;//[Offset: 0x8c, Size: 0x1]
	byte VictimType;//[Offset: 0x8d, Size: 0x1]

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 0xc]
	FString PlayerUIDStr;//[Offset: 0xc, Size: 0xc]
	int PlayerGender;//[Offset: 0x18, Size: 0x4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int[] EquipedAvatarList;//[Offset: 0x20, Size: 0xc]
	int[] EquipedWeaponList;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 0x20]
	SensibilityMode FireMode;//[Offset: 0x20, Size: 0x20]
	SensibilityMode MotionMode;//[Offset: 0x40, Size: 0x20]
	float VehicleEye;//[Offset: 0x60, Size: 0x4]
	float ParachuteEye;//[Offset: 0x64, Size: 0x4]
	float FPPEye;//[Offset: 0x68, Size: 0x4]
	int SideMirrorModeC;//[Offset: 0x6c, Size: 0x4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0x70, Size: 0x3c]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 0x4]
	float Sight1X;//[Offset: 0x4, Size: 0x4]
	float Sight2X;//[Offset: 0x8, Size: 0x4]
	float Sight3X;//[Offset: 0xc, Size: 0x4]
	float Sight4X;//[Offset: 0x10, Size: 0x4]
	float Sight6X;//[Offset: 0x14, Size: 0x4]
	float Sight8X;//[Offset: 0x18, Size: 0x4]
	float FPPNoAim;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 0x4]
	int Type;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 0x1]
	FString AttackActionName;//[Offset: 0x4, Size: 0xc]
	FString AttackName;//[Offset: 0x10, Size: 0xc]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int KillNum;//[Offset: 0x20, Size: 0x4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	FString FullMsg;//[Offset: 0x28, Size: 0xc]
	int victimAnchorPlatformResID;//[Offset: 0x34, Size: 0x4]
	FString VictimPlayerName;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xbc, Size: 0x4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	float GuideInterval;//[Offset: 0xc4, Size: 0x4]
	int MaxGuideLevel;//[Offset: 0xc8, Size: 0x4]
	NewbieGuideItem[] items;//[Offset: 0xcc, Size: 0xc]
	STExtraPlayerController* OwnerController;//[Offset: 0xd8, Size: 0x4]
	int[] FinishedTips;//[Offset: 0xdc, Size: 0xc]
	int[] FinishedCounts;//[Offset: 0xe8, Size: 0xc]
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x13d97e8
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte curPlayerCategory, int PlayerLevel);// 0x13d94a4

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 0x4]
	FString Name;//[Offset: 0x4, Size: 0xc]
	byte Type;//[Offset: 0x10, Size: 0x1]
	int MaxGuideCounts;//[Offset: 0x14, Size: 0x4]
	int MaxGuideLevel;//[Offset: 0x18, Size: 0x4]
	byte[] SubjectPlayerTypes;//[Offset: 0x1c, Size: 0xc]
	int Priority;//[Offset: 0x28, Size: 0x4]
	int MuteFlag;//[Offset: 0x2c, Size: 0x4]
	int PreconditionID;//[Offset: 0x30, Size: 0x4]
	float PreconditionTipTimeGap;//[Offset: 0x34, Size: 0x4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x38, Size: 0xc]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44, Size: 0x4]
	float Duration;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x1c, Size: 0x8]
	bool ReconnectRecover();// 0x134fd24
	bool IsOK();// 0x134fd68

--------------------------------
Class: STNewbieGuideSuccessListenerBase.Object
	Controller* OwnerController;//[Offset: 0x1c, Size: 0x8]
	float DelayTime;//[Offset: 0x24, Size: 0x4]
	bool ReconnectRecover();// 0x134fd24
	bool GuideFinishedByPlayer();// 0x134fd68
	bool EnableListener();// 0x1391ee8
	bool DisableListener();// 0x1391958

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x14f972c
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);// 0x14f9618
	void RPC_GetClientTimeRespond(int Index, float serverLevelTime, int64 serverSystemTime, double serverBootTime);// 0x14f946c
	void RPC_GetClientTimeRequest(int Index);// 0x14f93b8
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x14f92bc
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x14f91fc
	void ReportDebugInfo(int RporetedId);// 0x14f9148
	void OnServerAboutToReconnect();// 0x14f9134
	void GetClientTimeInterval();// 0x14f9120
	void CheckTimeLine();// 0x14f910c

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float TimeStartDelay;//[Offset: 0xc0, Size: 0x4]
	float SyncInterval;//[Offset: 0xc4, Size: 0x4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x14fa720
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x12e0f6c
	void OnTimeInspectorColdMove_Vehicle();// 0x14fa70c
	void OnTimeInspectorColdMove_Own();// 0x14fa6f8
	void OnServerAboutToReconnect();// 0x14fa6e4
	void CheckTimeLine();// 0x14fa6d0

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsHitDetail;//[Offset: 0x134, Size: 0xc]
	VerifySwitch VsFlyDist2D;//[Offset: 0x140, Size: 0xc]
	VerifySwitch VsFlyDist3D;//[Offset: 0x14c, Size: 0xc]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x158, Size: 0xc]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x164, Size: 0xc]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x170, Size: 0xc]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x17c, Size: 0xc]
	VerifySwitch VsNoHitDetail;//[Offset: 0x188, Size: 0xc]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x194, Size: 0xc]
	VerifySwitch VsSilentProtect01;//[Offset: 0x1a0, Size: 0xc]
	VerifySwitch VsSilentProtect02;//[Offset: 0x1ac, Size: 0xc]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x1b8, Size: 0xc]
	VerifySwitch VsLocusCheckZ;//[Offset: 0x1c4, Size: 0xc]
	VerifySwitch VsLocusCheckHorizonSingle;//[Offset: 0x1d0, Size: 0xc]
	VerifySwitch VsLocusCheckHorizonBigBox;//[Offset: 0x1dc, Size: 0xc]
	VerifySwitch VsMuzzleDataWrong;//[Offset: 0x1e8, Size: 0xc]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x1f4, Size: 0xc]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x200, Size: 0xc]
	VerifySwitch VsMuzzleRangeForward;//[Offset: 0x20c, Size: 0xc]
	VerifySwitch VsMuzzleRangeRight;//[Offset: 0x218, Size: 0xc]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x224, Size: 0xc]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x230, Size: 0xc]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x23c, Size: 0xc]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x248, Size: 0xc]
	VerifySwitch VsBoneScale;//[Offset: 0x254, Size: 0xc]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x260, Size: 0xc]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x26c, Size: 0xc]
	VerifySwitch VsBulletID;//[Offset: 0x278, Size: 0xc]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x284, Size: 0xc]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x290, Size: 0xc]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x29c, Size: 0xc]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x2a8, Size: 0xc]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x2b4, Size: 0xc]
	int MaxShootPointPassWall;//[Offset: 0x2c0, Size: 0x4]
	int MaxMuzzleHeightTime;//[Offset: 0x2c4, Size: 0x4]
	int MaxLocusFailTime;//[Offset: 0x2c8, Size: 0x4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2cc, Size: 0x4]
	int MaxGunPosErrorTimes;//[Offset: 0x2d0, Size: 0x4]
	float MaxSkeletonLength;//[Offset: 0x2d4, Size: 0x4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2d8, Size: 0x4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2dc, Size: 0x4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2e0, Size: 0x4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2e4, Size: 0x4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2e8, Size: 0xc]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x2f4, Size: 0xc]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x300, Size: 0xc]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x30c, Size: 0xc]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x318, Size: 0xc]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x324, Size: 0xc]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x330, Size: 0xc]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x33c, Size: 0xc]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x348, Size: 0xc]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x354, Size: 0xc]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x360, Size: 0xc]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x36c, Size: 0xc]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x378, Size: 0xc]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x384, Size: 0xc]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x390, Size: 0xc]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x39c, Size: 0xc]
	int MaxMergedStrategy1;//[Offset: 0x3a8, Size: 0x4]
	int MaxMergedStrategy2;//[Offset: 0x3ac, Size: 0x4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x3b0, Size: 0xc]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x3bc, Size: 0xc]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3c8, Size: 0xc]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x3d4, Size: 0xc]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x3e0, Size: 0xc]
	float MaxFuelConsume;//[Offset: 0x3ec, Size: 0x4]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x470, Size: 0xc]
	VerifySwitch VsWeaponScopeHeightError;//[Offset: 0x47c, Size: 0xc]
	VerifySwitch VsWeaponScopeDisError;//[Offset: 0x488, Size: 0xc]
	VerifySwitch VsOwnerHeadAndMuzzlePassWall;//[Offset: 0x494, Size: 0xc]
	VerifySwitch VsImpactPointAndActorDisBig;//[Offset: 0x4a0, Size: 0xc]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x4ac, Size: 0xc]
	VerifySwitch VsShooterPosByNetdelayInvalid;//[Offset: 0x4b8, Size: 0xc]
	VerifySwitch VsVictmPosByNetdelayInvalid;//[Offset: 0x4c4, Size: 0xc]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x4d0, Size: 0xc]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 0x1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x4e0, Size: 0xc]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x4ec, Size: 0xc]
	VerifySwitch VsClientBulletDir;//[Offset: 0x4f8, Size: 0xc]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x504, Size: 0xc]
	VerifySwitch VsClientDownShoot;//[Offset: 0x510, Size: 0xc]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x51c, Size: 0xc]
	VerifySwitch FarJump;//[Offset: 0x528, Size: 0xc]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x534, Size: 0xc]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x540, Size: 0xc]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x54c, Size: 0xc]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x558, Size: 0xc]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x564, Size: 0xc]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x570, Size: 0xc]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x57c, Size: 0xc]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x588, Size: 0xc]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x594, Size: 0x1c]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x5b0, Size: 0x4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x5b4, Size: 0xc]
	VerifySwitch SpeedCheatOver10;//[Offset: 0x5dc, Size: 0xc]
	VerifySwitch SpeedCheatOver15;//[Offset: 0x5e8, Size: 0xc]
	VerifySwitch SpeedCheatOver20;//[Offset: 0x5f4, Size: 0xc]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x600, Size: 0xc]
	void ReportAntiCheatDetailData();// 0x13ed558
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x13ed4bc
	void OnRecoverOnServer();// 0x13ed4a8
	void OnPreReconnectOnServer();// 0x13ed4a8

--------------------------------
Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0, Size: 0x2]
	int8 PlatID;//[Offset: 0x2, Size: 0x1]
	FString ZoneID;//[Offset: 0x4, Size: 0xc]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 0x24]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 0x4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 0x4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 0x4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 0x4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 0xc]
	float SpringArmLength;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 0x24]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 0x4]
	uint32 EventID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 0x8]
	FName LastUseNoneMeleeLogicSlot;//[Offset: 0x8, Size: 0x8]
	FName LastUseLogicSlot;//[Offset: 0x10, Size: 0x8]
	FName[] GrenadeLogicSlotList;//[Offset: 0x18, Size: 0xc]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: TeamMateStateInfo
	STExtraPlayerState* PlayerState;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	PUBGDoor* TriggeredDoor;//[Offset: 0xbc, Size: 0x4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xc0, Size: 0x4]
	void SetAutoOpenDoorMode(int Mode);// 0x134c474
	void SetAutoOpenDoorEnable(bool bEnable);// 0x134c3f4
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x134c2f8
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int doorState);// 0x134c1fc
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x134c17c
	PUBGDoor* GetPriorityDoor();// 0x134c154
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x134bffc
	void BP_SimulateUIClick(bool bExtraDoor);// 0x1c01fa0
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x1c01fa0

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0xc0, Size: 0x4]
	FString Reason;//[Offset: 0xc4, Size: 0xc]
	int[] audioChat;//[Offset: 0xd0, Size: 0xc]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0xdc, Size: 0xc]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0xe8, Size: 0xc]
	QuickChatOption[] allChatOption;//[Offset: 0xf4, Size: 0xc]
	FString TeammateColor;//[Offset: 0x100, Size: 0xc]
	FString MyColor;//[Offset: 0x10c, Size: 0xc]
	<int,FString> ActorNameList;//[Offset: 0x118, Size: 0x3c]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x154, Size: 0x3c]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x190, Size: 0xc]
	float SendMsgCD;//[Offset: 0x19c, Size: 0x4]
	float lastShowChatTime;//[Offset: 0x1a0, Size: 0x4]
	float ShowChatDuration;//[Offset: 0x1a4, Size: 0x4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x1a8, Size: 0xc]
	FString EndChar;//[Offset: 0x1b4, Size: 0xc]
	FString ColonChar;//[Offset: 0x1c0, Size: 0xc]
	<int,int> TextID2AudioID;//[Offset: 0x1cc, Size: 0x3c]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x208, Size: 0xc]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x214, Size: 0x4]
	FString CongregationPlayerName;//[Offset: 0x248, Size: 0xc]
	FString CongregationPlayerKey;//[Offset: 0x254, Size: 0xc]
	void UpdateQuickItemText(int msgID, int resID, int alternateMsgID);// 0x1c01fa0
	void ShowQuickPanel(bool bShow);// 0x1349880
	void ServerSendMsg(const InGameChatMsg msgItem);// 0x1349744
	void SendDirtyFilterContent(FString Content);// 0x1c01fa0
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x1c01fa0
	void OnInviteNextBattle(FString gid, FString Name);// 0x1349604
	void OnFilterFinish(FString filterText);// 0x1c01fa0
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x1c01fa0
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x1c01fa0
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x1c01fa0
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x13494c4
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x1349338
	void FindTextIDByAudioID();// 0x1c01fa0
	void CloseChatHistoryList();// 0x1c01fa0
	void ClientReceiveMsg(const InGameChatMsg msgItem, bool isMe);// 0x13491e0
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x1349124
	void AddOneMsgToUI1(FString Name, FString Content, int msgID, int audioID, bool isMe, bool playSound);// 0x1c01fa0
	void AddFriendChat(FString gid, FString Name, FString Content, bool isSelf);// 0x1348d4c

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 0xc]
	FString Content;//[Offset: 0xc, Size: 0xc]
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int MsgType;//[Offset: 0x1c, Size: 0x4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 0x1]
	int[] chatIDList;//[Offset: 0x4, Size: 0xc]
	int AlternateChatID;//[Offset: 0x10, Size: 0x4]
	int FlagIndex;//[Offset: 0x14, Size: 0x4]
	int traceDist;//[Offset: 0x18, Size: 0x4]
	float minDist;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0, Size: 0x4]
	int flagID;//[Offset: 0x4, Size: 0x4]
	Vector HitPosition;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 0xc]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xc0, Size: 0x4]
	float PickUpZLimit;//[Offset: 0xc4, Size: 0x4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0xcc, Size: 0xc]
	int FindPutDownPointCircleSplitNum;//[Offset: 0xd8, Size: 0x4]
	float FindPutDownPointZThreshold;//[Offset: 0xdc, Size: 0x4]
	float FindPutDownPointZTraceOffset;//[Offset: 0xe0, Size: 0x4]
	Vector2D RegionXRange;//[Offset: 0xe4, Size: 0x8]
	Vector2D RegionYRange;//[Offset: 0xec, Size: 0x8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0xf8, Size: 0xc]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x104, Size: 0x4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x108, Size: 0x4]
	float DrawTime;//[Offset: 0x10c, Size: 0x4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x114, Size: 0x4]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x118, Size: 0xc]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x124, Size: 0xc]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x13e9554
	void ServerPutDownTarget(Actor* Target);// 0x13e94a0
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x13e935c
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x13e929c
	void PutDownTarget(Actor* Target);// 0x13e9224
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x13e9124
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x13e90ac
	void NotifyMeetPickupAvailableActor(Actor* Target);// 0x13e9034
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold, out bool IsHittedAttachableActor);// 0x13e8f50
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x13e8e44
	Actor* GetAttachableActor(Vector Loc);// 0x13e8dcc
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x13e8cc8
	void ControlClientPutDownTarget(Actor* Target);// 0x13e8c14
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x13e8b18
	void ClampWorldLocation(out Vector OutVector);// 0x13e8a94

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 0xc]
	uint32 playerIdentifier;//[Offset: 0xc, Size: 0x4]
	FString msgContent;//[Offset: 0x10, Size: 0xc]
	int msgID;//[Offset: 0x1c, Size: 0x4]
	int audioID;//[Offset: 0x20, Size: 0x4]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	Vector HitPosition;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0xbc, Size: 0xc]
	Widget* MaskWidget;//[Offset: 0xc8, Size: 0x8]
	void SetMaskWidgetOnTop(bool bTop);// 0x13a30b4
	void CreateGuideUI();// 0x1c01fa0

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0, Size: 0x4]
	int guildUI;//[Offset: 0x4, Size: 0x4]
	Vector2D Offset;//[Offset: 0x8, Size: 0x8]
	Vector2D Size;//[Offset: 0x10, Size: 0x8]
	int childData;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0xbc, Size: 0xc]
	delegate OnDelSignMarkDelegate;//[Offset: 0xc8, Size: 0xc]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	int TextID_OutRange;//[Offset: 0xd8, Size: 0x4]
	FString PreFix_Command;//[Offset: 0xdc, Size: 0xc]
	FString PreFix_Command_Res;//[Offset: 0xe8, Size: 0xc]
	FString PreFix_Mark;//[Offset: 0xf4, Size: 0xc]
	int MinTraceDist;//[Offset: 0x100, Size: 0x4]
	int MaxTraceDist;//[Offset: 0x104, Size: 0x4]
	int ItemTraceDist;//[Offset: 0x108, Size: 0x4]
	int MarkMutualExclusionDist;//[Offset: 0x10c, Size: 0x4]
	int MiniMapAttentionIconID;//[Offset: 0x110, Size: 0x4]
	int MiniMapThingIconID;//[Offset: 0x114, Size: 0x4]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x118, Size: 0x4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x11c, Size: 0x3c]
	<FString,class Object> MarkNameClassMap;//[Offset: 0x158, Size: 0x3c]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x194, Size: 0x3c]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x1d0, Size: 0x3c]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x20c, Size: 0x3c]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x248, Size: 0x3c]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x284, Size: 0xc]
	FString[] TempIDArray;//[Offset: 0x290, Size: 0xc]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x2e0, Size: 0x3c]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x31c, Size: 0x3c]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x358, Size: 0x3c]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x394, Size: 0x3c]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x140905c
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool isSelf);// 0x1c01fa0
	void ServerSendMsg(const QuickSignMsg msgItem, byte SignType);// 0x1408f18
	void ServerDelMsg(FString msgID);// 0x1408e24
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x1c01fa0
	void RemoveActorMask(int ActorNetGUID);// 0x1408d70
	void OperMark(FString msgID);// 0x1408cb4
	void MakeQuickNeed(enum SignSubType);// 0x1408c3c
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x1408bc4
	void MakeQuickMark();// 0x1408bb0
	void MakeQuickCommand(byte SignType);// 0x1408b38
	bool IsSelfMark(FString msgID);// 0x1408a74
	int GetVoiceAudioID(enum MsgType);// 0x1c01fa0
	bool GenerateMarkInfo(out const QuickSignMsg msgItem, out QuickSignMark MarkInfo);// 0x1c01fa0
	void DelMarkFromPool(FString MsgMark);// 0x14089b8
	void DealWithNewMsg(out const QuickSignMsg msgItem, bool isSelf, bool ShowChat);// 0x1408848
	void ClientReceiveMsg(const QuickSignMsg msgItem, bool isSelf);// 0x1408730
	void ClientDelMsg(FString msgID);// 0x140866c
	void AnalysisConfigKeyClass(FString ConfigID, FString ConfigScriptParam);// 0x140852c
	void AddMarkToPool(out const QuickSignMark MsgMark);// 0x140845c
	void AddActorMask(int ActorNetGUID);// 0x14083a8

--------------------------------
Class: QuickSignMark
	FString msgID;//[Offset: 0x0, Size: 0xc]
	FString MarkType;//[Offset: 0xc, Size: 0xc]
	FString IconPath;//[Offset: 0x18, Size: 0xc]
	FString IconBGPath;//[Offset: 0x24, Size: 0xc]
	FString IconOuterPath;//[Offset: 0x30, Size: 0xc]
	FString IconOuterBGPath;//[Offset: 0x3c, Size: 0xc]
	FString ReplyID;//[Offset: 0x48, Size: 0xc]
	Vector Loc;//[Offset: 0x54, Size: 0xc]
	int MaxNum;//[Offset: 0x60, Size: 0x4]
	int LifeSpan;//[Offset: 0x64, Size: 0x4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: QuickSignMsg
	FString msgID;//[Offset: 0x0, Size: 0xc]
	FString PlayerName;//[Offset: 0xc, Size: 0xc]
	Vector HitPos;//[Offset: 0x18, Size: 0xc]
	FString ConfigKey;//[Offset: 0x24, Size: 0xc]
	int audioID;//[Offset: 0x30, Size: 0x4]
	FString ParamString;//[Offset: 0x34, Size: 0xc]
	int BindActorGUID;//[Offset: 0x40, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x44, Size: 0x4]
	int MiniMapIconTypeId;//[Offset: 0x48, Size: 0x4]
	enum MsgType;//[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xbc, Size: 0x4]
	FString OwningPlayerName;//[Offset: 0xc0, Size: 0xc]
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0xcc, Size: 0xc]
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0xd8, Size: 0x3c]
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x13272cc
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x13271c0
	int RetrieveLandLocType(FString TargetName);// 0x1327060
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskID, int process);// 0x1326f58
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x1326e48
	bool IsTriggerActive(int InTaskID);// 0x1326dc8
	bool IsSpecialPickItem(int InItemID);// 0x1326d48
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x1326960
	void HandlePlayerPickupItem(int ItemID, int count, STExtraPlayerController* PC);// 0x1326860
	void HandlePlayerKilling();// 0x132684c
	void HandlePlayerDropItem(int ItemID, int count, STExtraPlayerController* PC);// 0x132674c
	void HandlePlayerDoEmote(int EmoteIndex);// 0x13266d4
	void HandleInitTaskData(int TaskID, int process, FString ext_info);// 0x13264ec
	void HandleInitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x13263ec
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x13262c0
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x1326234
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x1c01fa0
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x1c01fa0
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x13260c4
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x1325f70
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x1c01fa0
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x1c01fa0
	FString GetOwningPlayerName();// 0x1325eb0
	FString GetMapName();// 0x1325df0
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x1c01fa0
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x1325c04
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1325b40
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskID);// 0x1325a74
	bool AddTrigger(byte TaskType, int TaskID, int process, FString ext_info);// 0x1325834
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x132572c
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1325668

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x1c, Size: 0x1]
	enum TriggerObjectType;//[Offset: 0x1d, Size: 0x1]
	int EventDelayTime;//[Offset: 0x20, Size: 0x4]
	int ActionDelayTime;//[Offset: 0x24, Size: 0x4]
	FString TriggerName;//[Offset: 0x28, Size: 0xc]
	Actor* OuterActor;//[Offset: 0x34, Size: 0x4]
	class Object[] TriggerEventsClass;//[Offset: 0x38, Size: 0xc]
	TriggerAction*[] TriggerActions;//[Offset: 0x44, Size: 0xc]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x50, Size: 0xc]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x5c, Size: 0x4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	TimerHandle TimerHandle_EventDelay;//[Offset: 0x70, Size: 0x8]
	TimerHandle TimerHandle_ActionDelay;//[Offset: 0x78, Size: 0x8]
	TriggerEvent* CurEvent;//[Offset: 0x80, Size: 0x4]
	FString DelayEventName;//[Offset: 0x84, Size: 0xc]
	FString FiredEventName;//[Offset: 0x90, Size: 0xc]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0x9c, Size: 0x3c]
	<TriggerAction*> CompleteActions;//[Offset: 0xd8, Size: 0x3c]
	bool IsEnableCheckDo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x118, Size: 0x4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	float TickInterval;//[Offset: 0x12c, Size: 0x4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	Property*[] EventParams;//[Offset: 0x134, Size: 0xc]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 0x4]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum ExecPolicy;//[Offset: 0x29, Size: 0x1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x2c, Size: 0x4]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x30, Size: 0x4]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: VariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x58, Size: 0x40]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: UAELevelDirector.Actor.Object
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool ClientEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	bool ServerEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 0x1]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x2cc, Size: 0xc]
	FString[] ClassPaths;//[Offset: 0x2d8, Size: 0xc]
	FString ConfigFilePath;//[Offset: 0x2e4, Size: 0xc]
	FString ClientConfigFilePath;//[Offset: 0x2f0, Size: 0xc]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x2fc, Size: 0x10]
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x30c, Size: 0xc]
	TriggersFlowBase* TriggersFlowTree;//[Offset: 0x318, Size: 0x4]
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x31c, Size: 0x3c]
	VariableSet* AllVariableSet;//[Offset: 0x358, Size: 0x4]
	UAETriggerParamFuncLib* TriggerParamFuncLib;//[Offset: 0x35c, Size: 0x4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x360, Size: 0x4]
	FString DescData;//[Offset: 0x364, Size: 0xc]
	TaskRepData TaskData;//[Offset: 0x378, Size: 0x10]
	bool StartLevelDirector();// 0x37f3fa4
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x37f3e08
	void SetEnable(bool Enab);// 0x37f3d8c
	void S2Sim_CallExcuteAction();// 0x133c1bc
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x37f3cd8
	void OnRep_LevelDirectorData();// 0x37f3cc4
	bool InitialLevelDirector();// 0x37f3c94
	UAETriggerObject* GetTrigger(FString NodeName, FString TriggerName);// 0x37f3a1c
	bool GetHasBeenInit();// 0x37f39f4
	VariableSet* GetDataSet();// 0x37f39cc
	int GetCurTaskID();// 0x37f39a4
	void ForceExecuteTrigger(FString TriggerName);// 0x13b9b8c
	bool FlowControllSubControll(out FString[] TriggerNames, FString NodeName);// 0x37f373c
	bool FlowControllOr(out FString[] TriggerNames, FString NodeName);// 0x37f34d4
	bool FlowControllOneSequence(FString TriggerName, FString NodeName);// 0x37f325c
	bool FlowControllMultiSequence(out FString[] TriggerNames, FString NodeName);// 0x37f2ff4
	bool FlowControllAnd(out FString[] TriggerNames, FString NodeName, bool DefaultActive);// 0x37f2d3c
	void DeactiveTrigger(FString NodeName, FString TriggerName);// 0x37f2acc
	void DeactiveNode(FString NodeName);// 0x37f2974
	void ClientExecuteAction(FString ActionClassName, int64 Uid, const TriggerParamRepData[] RepParams);// 0x37f27fc
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x37f2660
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x37f24bc
	TriggerAction* AddActionToTrigger(FString TriggerName, class Object Action);// 0x37f2318
	void ActiveTrigger(FString NodeName, FString TriggerName);// 0x37f20a8
	void ActiveNode(FString NodeName);// 0x37f1f50

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0, Size: 0x8]
	TriggerAction* Action;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 0xc]
	int NodeID;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x1c, Size: 0xc]
	VariableSet* DataSet;//[Offset: 0x28, Size: 0x4]
	Actor* GetLastIteratorActor();// 0x37f50a0

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 0xc]
	FString ClassFullPath;//[Offset: 0xc, Size: 0xc]
	float RandomRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TriggersFlowBase.Object
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x24, Size: 0x4]
	<FString,FlowNodeBase*> Nodes;//[Offset: 0x28, Size: 0x3c]
	bool IsRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x1c, Size: 0x4]
	UFlowNodeRepData RepData;//[Offset: 0x20, Size: 0x10]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool DefaltActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	TriggersFlowBase* CarriedFlow;//[Offset: 0x44, Size: 0x4]
	enum NodeType;//[Offset: 0x48, Size: 0x1]
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x4c, Size: 0xc]

--------------------------------
Class: UAETriggerParamFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x28, Size: 0x3c]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x68, Size: 0x3c]

--------------------------------
Class: TriggerEvent.Object
	FString EventName;//[Offset: 0x1c, Size: 0xc]
	Object* EventInstigator;//[Offset: 0x28, Size: 0x4]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x38, Size: 0x3c]

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener*> Listeners;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x1c, Size: 0xc]
	<FString,FName> RelevantListenerCallbacks;//[Offset: 0x28, Size: 0x3c]
	<FString> ObjectRelevantEvents;//[Offset: 0x64, Size: 0x3c]
	Actor* ListenerEntity;//[Offset: 0xa0, Size: 0x4]
	Property*[] Params;//[Offset: 0xa4, Size: 0xc]

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0, Size: 0xc]
	int TaskID;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 0x1]
	FString ParamName;//[Offset: 0x4, Size: 0xc]
	byte[] ParamData;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 0x4]
	TriggerCondition*[] ChildConditions;//[Offset: 0x20, Size: 0xc]
	UAETriggerObject* ParentTrigger;//[Offset: 0x38, Size: 0x4]
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x37f0a18

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x144, Size: 0x4]
	byte[] TaskEventTypes;//[Offset: 0x148, Size: 0xc]
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x154, Size: 0xc]
	int TaskID;//[Offset: 0x160, Size: 0x4]
	byte TaskType;//[Offset: 0x164, Size: 0x1]
	void SetTaskProcess(int process, FString ext_info);// 0x1521ba8
	void RedoAction();// 0x1521b8c
	void NofityTriggerComplete();// 0x1521b70
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x12fe5dc
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x152198c
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x15218c0
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x1521838
	TriggerCondition* CreateSpecifiedItemCondition(int ItemID);// 0x15217b8
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x1521730
	TriggerAction* CreateRedoAction(byte ActionType);// 0x15216a8
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x1521548
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x15213a0
	TriggerCondition* CreateKillPlayerCondition();// 0x1521378
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x15212f8
	TriggerAction* CreateDoAction(byte ActionType);// 0x1521270
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x15211f0
	TriggerCondition* CreateCollectItemCondition(int ItemID, int CollectCount);// 0x152112c
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x1520fcc
	TriggerAction* CreateAction(byte ActionType);// 0x1520f44
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x1520d0c
	byte[] ConstructRedoActions();// 0x1c01fa0
	byte[] ConstructEvents();// 0x1c01fa0
	TriggerCondition* ConstructConditions();// 0x1c01fa0
	byte[] ConstructActions();// 0x1c01fa0
	void AddEventTypes(byte[] EventTypes);// 0x1520bb4
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1520ae0

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x3c, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	void SetTargetParam(int Value);// 0x12ebfe0
	void SetConditionParam(int Value);// 0x12ebee0
	bool IsSatisfy(const TriggerEvent* Event);// 0x13e60e0
	bool IsSameCondition(byte InTaskConditionType);// 0x1505d14
	bool FillDataSource(VariableSet* InDataSource);// 0x131b4b0
	bool DeactiveCondition(VariableSet* InDataSource);// 0x1505c8c
	bool CompareParam(VariableSet* InDataSource);// 0x1505c04
	bool ActiveCondition(VariableSet* InDataSource);// 0x12fe5dc

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 0xc]
	byte gender;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: PlayerBaseInfoInOB
	int PosX;//[Offset: 0x0, Size: 0x4]
	int PosY;//[Offset: 0x4, Size: 0x4]
	int PosZ;//[Offset: 0x8, Size: 0x4]
	int Health;//[Offset: 0xc, Size: 0x4]
	int HealthMax;//[Offset: 0x10, Size: 0x4]
	int LiveState;//[Offset: 0x14, Size: 0x4]
	int KillNum;//[Offset: 0x18, Size: 0x4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 0x4]
	float SignalHP;//[Offset: 0x20, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x24, Size: 0x4]
	int GotAirDropNum;//[Offset: 0x28, Size: 0x4]
	int MaxKillDistance;//[Offset: 0x2c, Size: 0x4]
	int Damage;//[Offset: 0x30, Size: 0x4]
	int InDamage;//[Offset: 0x34, Size: 0x4]
	int Heal;//[Offset: 0x38, Size: 0x4]
	int HeadShotNum;//[Offset: 0x3c, Size: 0x4]
	int KillNumInVehicle;//[Offset: 0x40, Size: 0x4]
	int SurvivalTime;//[Offset: 0x44, Size: 0x4]
	int DriveDistance;//[Offset: 0x48, Size: 0x4]
	int marchDistance;//[Offset: 0x4c, Size: 0x4]
	int MonsterCatchupDistance;//[Offset: 0x50, Size: 0x4]
	int Assists;//[Offset: 0x54, Size: 0x4]
	int KillNumByGrenade;//[Offset: 0x58, Size: 0x4]
	int Rank;//[Offset: 0x5c, Size: 0x4]
	bool IsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float OutsideBlueCircleTime;//[Offset: 0x64, Size: 0x4]
	int Knockouts;//[Offset: 0x68, Size: 0x4]
	int rescueTimes;//[Offset: 0x6c, Size: 0x4]
	int UseSmokeGrenadeNum;//[Offset: 0x70, Size: 0x4]
	int UseFragGrenadeNum;//[Offset: 0x74, Size: 0x4]
	int CurWeaponID;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	FString PlayerName;//[Offset: 0x7c, Size: 0xc]
	FString PlayerOpenID;//[Offset: 0x88, Size: 0xc]
	FString PicUrl;//[Offset: 0x94, Size: 0xc]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	int TeamID;//[Offset: 0xa4, Size: 0x4]
	Pawn* Character;//[Offset: 0xa8, Size: 0x8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 0x4]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FString LogoPicUrl;//[Offset: 0x8, Size: 0xc]
	int KillNum;//[Offset: 0x14, Size: 0x4]
	int LiveMemberNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 0xc]
	FString PicUrl;//[Offset: 0xc, Size: 0xc]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int TeamID;//[Offset: 0x1c, Size: 0x4]
	uint64 Uid;//[Offset: 0x20, Size: 0x8]
	Vector[] PosList;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: AirDropBoxInOb
	int BoxId;//[Offset: 0x0, Size: 0x4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector Pos;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: GameModePlayerParams
	uint64 Uid;//[Offset: 0x0, Size: 0x8]
	FName PlayerType;//[Offset: 0x8, Size: 0x8]
	FString PlayerName;//[Offset: 0x10, Size: 0xc]
	uint32 PlayerKey;//[Offset: 0x1c, Size: 0x4]
	int TeamID;//[Offset: 0x20, Size: 0x4]
	int PlayerBornPointID;//[Offset: 0x24, Size: 0x4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	byte gender;//[Offset: 0x2a, Size: 0x1]
	FString PIC_URL;//[Offset: 0x2c, Size: 0xc]
	int Level;//[Offset: 0x38, Size: 0x4]
	int Segment_Level;//[Offset: 0x3c, Size: 0x4]
	int AvatarBoxId;//[Offset: 0x40, Size: 0x4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	GameModePlayerItem[] ItemList;//[Offset: 0x48, Size: 0xc]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0x54, Size: 0xc]
	int[] equip_plating_list;//[Offset: 0x60, Size: 0xc]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x6c, Size: 0xc]
	int RolewearIndex;//[Offset: 0x78, Size: 0x4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x7c, Size: 0xc]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0x88, Size: 0xc]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0x94, Size: 0xc]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xa0, Size: 0xc]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0xac, Size: 0xc]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0xb8, Size: 0xc]
	GameModePlayerConsumableAvatar ConsumableAvatar;//[Offset: 0xc4, Size: 0x4]
	int VehicleSkinInReady;//[Offset: 0xc8, Size: 0x4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xcc, Size: 0x20]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xec, Size: 0x24]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x110, Size: 0x18]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x128, Size: 0xc]
	int[] CharSkillList;//[Offset: 0x134, Size: 0xc]
	GameModePlayerBanChat banChat;//[Offset: 0x140, Size: 0x10]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x150, Size: 0xc]
	int[] audioChat;//[Offset: 0x15c, Size: 0xc]
	FName CurrentPlayerState;//[Offset: 0x168, Size: 0x8]
	FName CurrentCharacterState;//[Offset: 0x170, Size: 0x8]
	float SyncedTimestamp;//[Offset: 0x178, Size: 0x4]
	float DestinyValue;//[Offset: 0x17c, Size: 0x4]
	float WarmScore;//[Offset: 0x180, Size: 0x4]
	float RatingScore;//[Offset: 0x184, Size: 0x4]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	uint64 WatchPlayerKey;//[Offset: 0x190, Size: 0x8]
	byte PlatformGender;//[Offset: 0x198, Size: 0x1]
	int planeAvatarId;//[Offset: 0x19c, Size: 0x4]
	FString Nation;//[Offset: 0x1a0, Size: 0xc]
	int MatchLabel;//[Offset: 0x1ac, Size: 0x4]
	int AnchorPlatColorID;//[Offset: 0x1b0, Size: 0x4]
	int AnchorPlatResID;//[Offset: 0x1b4, Size: 0x4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	int64 LastGameResultTime;//[Offset: 0x1c0, Size: 0x8]
	int64 CorpsID;//[Offset: 0x1c8, Size: 0x8]
	int64 CampID;//[Offset: 0x1d0, Size: 0x8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 0x1]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 0x4]
	FString Reason;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ItemDefineWeaponSyncData
	ItemDefineID ItemDfineID;//[Offset: 0x0, Size: 0x18]
	byte ForceUpdateFlag;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 0xc]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc, Size: 0x4]
	byte ForceUpdateFlag;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x2c8, Size: 0x4]
	Actor* ReturnActor;//[Offset: 0x2cc, Size: 0x4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x2ec, Size: 0x4]
	CameraComponent* ObservingCamera;//[Offset: 0x2f0, Size: 0x4]
	delegate OnTrackingEnd;//[Offset: 0x2f4, Size: 0xc]
	float MinMovingSpeed;//[Offset: 0x300, Size: 0x4]
	float MaxMovingTime;//[Offset: 0x304, Size: 0x4]
	float ObservingTime;//[Offset: 0x308, Size: 0x4]
	float TrackingDelay;//[Offset: 0x30c, Size: 0x4]
	float ExpectedMinObservingDistance;//[Offset: 0x310, Size: 0x4]
	float CameraAdjustSpeed;//[Offset: 0x314, Size: 0x4]
	void ForceEnd();// 0x13b124c

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0xc0, Size: 0x18]
	float LastFinishCD;//[Offset: 0xd8, Size: 0x4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1]
	STExtraVehicleBase* Vehicle;//[Offset: 0xe0, Size: 0x4]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0xe4, Size: 0x4]
	STExtraPlayerCharacter* Character;//[Offset: 0xe8, Size: 0x4]
	enum VehicleUserState;//[Offset: 0xec, Size: 0x1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0xf0, Size: 0x4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0xf4, Size: 0x4]
	float UpdateClosestVehicleInterval;//[Offset: 0xfc, Size: 0x4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x108, Size: 0xc]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x114, Size: 0xc]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x120, Size: 0x4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x134, Size: 0x4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x148, Size: 0x4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	float ExitVehicleCheckInterval;//[Offset: 0x158, Size: 0x4]
	float CurrentMoveForwardRate;//[Offset: 0x168, Size: 0x4]
	float CurrentMoveRightRate;//[Offset: 0x16c, Size: 0x4]
	float CurrentMoveUpRate;//[Offset: 0x170, Size: 0x4]
	float MaxCanAimAngle;//[Offset: 0x174, Size: 0x4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	float BaseVehicleLockTime;//[Offset: 0x17c, Size: 0x4]
	float BaseVehicleServerAuTime;//[Offset: 0x180, Size: 0x4]
	float MaxVehicleLockTime;//[Offset: 0x184, Size: 0x4]
	float MaxVehicleServerAuTime;//[Offset: 0x188, Size: 0x4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	float UAVSpeedPercent;//[Offset: 0x190, Size: 0x4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x1a0, Size: 0x4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x1a4, Size: 0x4]
	Rotator InputExtraRot;//[Offset: 0x1a8, Size: 0xc]
	Rotator CharRotVsVehiRot;//[Offset: 0x1b4, Size: 0xc]
	float ResetInputExtraRotTime;//[Offset: 0x1c4, Size: 0x4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 0x1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x1f4, Size: 0x4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x1fc, Size: 0x4]
	float ControllerYawClampMin;//[Offset: 0x204, Size: 0x4]
	float ControllerYawClampMax;//[Offset: 0x208, Size: 0x4]
	enum CurrentSeatType;//[Offset: 0x20c, Size: 0x1]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x210, Size: 0x4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x24c, Size: 0x4]
	float FastestAllowDistance;//[Offset: 0x250, Size: 0x4]
	float NearVehicleTickRate;//[Offset: 0x254, Size: 0x4]
	int VehicleIconID;//[Offset: 0x258, Size: 0x4]
	void UseVehicleWeaponOrNot();// 0x153e000
	void UpdateVehWeaponPassengerViewLimit();// 0x153dfec
	void UpdatePassengerViewPitchLimit();// 0x153dfd8
	void TurnVehicle(float Rate);// 0x153df60
	void TryUseHorn(bool bUse);// 0x153dee0
	bool TryLeanOutOrIn(bool bAutoLeanOut);// 0x153de58
	void TryExitVehicle();// 0x153de44
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x153dd88
	void TryChangeVehicleSeat();// 0x153dd74
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x153dcf4
	bool TryChangeFreeFireSeatAndScopeIn();// 0x153dccc
	bool TryChangeFreeFireSeatAndLeanOut();// 0x153dca4
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x1c01fa0
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x153dbe0
	void StopFireVehicleWeapon();// 0x153dbcc
	bool ShowVehicleWeaponUI();// 0x153dba4
	void SetBrake(float Rate);// 0x153db2c
	void SetBoosting(bool bEnabled);// 0x153daac
	void SetAirControlF(float Rate);// 0x153da34
	void SetAirControlB(float Rate);// 0x153d9bc
	void ServerUseVehicleWeaponOrNot(int SeatID, bool bUse);// 0x153d8ac
	void ServerStopFireVehicleWeapon();// 0x153d850
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x153d78c
	void Server_JoystickCenterClickHandler();// 0x153d730
	void SendToServerUnmannedVehicleUse();// 0x153d6d4
	void SendToServerUnmannedVehicleRecall();// 0x153d678
	void SendToServerUnmannedVehiclePause();// 0x153d61c
	void RspLeanOut(bool bOut);// 0x153d594
	void RspExitVehicle(bool bSuccess);// 0x153d50c
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x153d3b0
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn);// 0x153d1fc
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x153d100
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x153d004
	void ReqLeanOut(bool IsLeanOut);// 0x153cf3c
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x153ce90
	void ReqEraseLastDriveVehicle();// 0x153ce34
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x153cd38
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x153cc84
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x153cbbc
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x153caf4
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x14da064
	void OnServerReconnected();// 0x153cae0
	void OnScopeInAfterChangeSeat();// 0x153cacc
	void OnRep_DefineID();// 0x153cab8
	void OnRep_BornInVehicle();// 0x153caa4
	void OnPauseUnmannedVehicleCompleted();// 0x1c01fa0
	void OnLeanOutAfterChangeSeat();// 0x153ca90
	void OnInputAxisMoveRight(float Rate);// 0x1c01fa0
	void OnInputAxisMoveForward(float Rate);// 0x1c01fa0
	void OnExitVehicleCompleted();// 0x1c01fa0
	void OnEnterVehicleCompleted(enum SeatType);// 0x1c01fa0
	void OnCurrrentClosestVehicleChanged();// 0x1c01fa0
	void OnClientReconnected();// 0x153ca7c
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x1c01fa0
	void NotifyLeaveVehicleFailed();// 0x153ca60
	void MoveVehicleUp(float Rate);// 0x153c9e8
	void MoveVehicleRight(float Rate);// 0x153c970
	void MoveVehicleForward(float Rate);// 0x153c8f8
	void MaintenanceVehicle(float addpercenthp, bool FixTire);// 0x153c834
	bool HasChangeMoveRightRate(float Before, float After);// 0x153c770
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x153c6f8
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x153c6e4
	void HandleLocalBackpackCurrentWeaponFinished();// 0x153c6d0
	bool HandleClientReconnecting();// 0x153c6a8
	enum GetVehicleUserState();// 0x153c68c
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x153c670
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x153c648
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x153c4ec
	void FireVehicleWeapon();// 0x153c4d8
	void Client_UnbindTouchEvents();// 0x153c47c
	void Client_ShouldBindTouchEvents();// 0x153c420
	bool CheckCanLeanOutVehicle();// 0x153c3f8
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x153c378
	bool CanUseVehicleHorn();// 0x153c350
	void AddVehicleFuel(float Amount);// 0x153c2d8

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xbc, Size: 0xc]
	enum StartStateType;//[Offset: 0xc8, Size: 0x1]
	enum FinishStateType;//[Offset: 0xc9, Size: 0x1]
	State* CurrentState;//[Offset: 0xcc, Size: 0x4]
	enum CurrentStateType;//[Offset: 0xd0, Size: 0x1]
	enum LastStateType;//[Offset: 0xd1, Size: 0x1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x3d8, Size: 0xc]
	FString TreasureBoxName;//[Offset: 0x3e4, Size: 0xc]
	float TotalHP;//[Offset: 0x3f0, Size: 0x4]
	float BrokenHPPropotion;//[Offset: 0x3f4, Size: 0x4]
	float TotalTime;//[Offset: 0x3f8, Size: 0x4]
	int BoxId;//[Offset: 0x3fc, Size: 0x4]
	Vector GroupLoc;//[Offset: 0x400, Size: 0xc]
	float DestroyTime;//[Offset: 0x40c, Size: 0x4]
	float OperationalDistance;//[Offset: 0x410, Size: 0x4]
	float VisibleHUDlDistance;//[Offset: 0x414, Size: 0x4]
	ParticleSystem* StandbyEffect;//[Offset: 0x418, Size: 0x4]
	Transform StandbyEffectTrans;//[Offset: 0x420, Size: 0x30]
	ParticleSystem* OpenningEffect;//[Offset: 0x450, Size: 0x4]
	Transform OpenningEffectTrans;//[Offset: 0x460, Size: 0x30]
	ParticleSystem* OpennedEffect;//[Offset: 0x490, Size: 0x4]
	Transform OpennedEffectTrans;//[Offset: 0x4a0, Size: 0x30]
	ParticleSystem* BrokenEffect1;//[Offset: 0x4d0, Size: 0x4]
	Transform BrokenEffect1Trans;//[Offset: 0x4e0, Size: 0x30]
	ParticleSystem* BrokenEffect2;//[Offset: 0x510, Size: 0x4]
	Transform BrokenEffect2Trans;//[Offset: 0x520, Size: 0x30]
	MaterialInterface* BlackMat;//[Offset: 0x550, Size: 0x4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x554, Size: 0x4]
	SceneComponent* DefaultRoot;//[Offset: 0x558, Size: 0x4]
	class Controller[] InstigatorList;//[Offset: 0x55c, Size: 0xc]
	class Actor[] DamageCauserList;//[Offset: 0x568, Size: 0xc]
	enum PickUpBoxType;//[Offset: 0x574, Size: 0x1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 0x1]
	int IconID;//[Offset: 0x578, Size: 0x4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 0x1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ce, Size: 0x1]
	int ClientAutoActiveBoxCD;//[Offset: 0x5d0, Size: 0x4]
	int AutoActiveBoxCD;//[Offset: 0x5d4, Size: 0x4]
	int HideLightColumn;//[Offset: 0x5d8, Size: 0x4]
	float GoUpAnimationWait;//[Offset: 0x5dc, Size: 0x4]
	float GoUpAnimationSpeed;//[Offset: 0x5e0, Size: 0x4]
	float GoUpAnimationHight;//[Offset: 0x5e4, Size: 0x4]
	float GoUpAnimationYawSpeed;//[Offset: 0x5ec, Size: 0x4]
	float GoUpAnimationYawTotal;//[Offset: 0x5f0, Size: 0x4]
	Vector BoxCoverLoc;//[Offset: 0x5f4, Size: 0xc]
	Rotator BoxCoverRot;//[Offset: 0x600, Size: 0xc]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x610, Size: 0x4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x614, Size: 0x4]
	float StartedTime;//[Offset: 0x630, Size: 0x4]
	enum CurState;//[Offset: 0x634, Size: 0x1]
	int StartedTeamId;//[Offset: 0x63c, Size: 0x4]
	float CountdownTime;//[Offset: 0x640, Size: 0x4]
	float StartDestroytime;//[Offset: 0x644, Size: 0x4]
	int MonsterBoxId;//[Offset: 0x648, Size: 0x4]
	int MonsterBoxTempleteId;//[Offset: 0x64c, Size: 0x4]
	<FString,FString> DataStrs;//[Offset: 0x650, Size: 0x3c]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x690, Size: 0x4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x694, Size: 0x4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x698, Size: 0x4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x69c, Size: 0x4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x6a0, Size: 0x4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x6a4, Size: 0x4]
	Object* TriggerActionHost;//[Offset: 0x6d8, Size: 0x4]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x1c01fa0
	void ShowMonsterTreasureBox();// 0x13cb82c
	void SetClientClientAutoActiveBoxCD(int CD);// 0x13cb7b4
	void OnTreasureBoxPicked__DelegateSignature();// 0x1c01fa0
	void OnSomeonePickItem(uint32 InPC);// 0x13cb73c
	void OnRep_HideLightColumn();// 0x13cb728
	void OnRep_CurState();// 0x13cb714
	void OnBoxEmpty();// 0x13cb700
	bool IsShowIcon();// 0x13cb6d8
	int GetMonsterBoxId();// 0x13cb6b0
	enum[] GetDamageableGameObjectType();// 0x13cb5e8
	enum GetCurState();// 0x13cb5c0
	int GetClientClientAutoActiveBoxCD();// 0x13cb598
	void DeActiveMonsterTreasureBox();// 0x13cb584
	bool CanBeDamaged();// 0x13cb55c
	void BPOnStopMonsterTreasureBox();// 0x1c01fa0
	void BPOnStartMonsterTreasureBox();// 0x1c01fa0
	void BPOnHideLightColumn();// 0x1c01fa0
	void BPOnCountdownEnd();// 0x1c01fa0
	void BPOnBreakMonsterTreasureBox();// 0x1c01fa0
	void BPOnAnimationStop();// 0x1c01fa0
	void BPOnAnimationAkAudioStop();// 0x1c01fa0
	void BPOnAnimationAkAudioStart();// 0x1c01fa0
	FString BPGetTreasureBoxName();// 0x1c01fa0

--------------------------------
Class: UAEHouseActor.UAENetActor.Actor.Object
	int iRegionHouse;//[Offset: 0x2d4, Size: 0x4]
	float WindowHideDistanceSquared;//[Offset: 0x2d8, Size: 0x4]
	float WindowLoadDistanceSquared;//[Offset: 0x2dc, Size: 0x4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x2e0, Size: 0x4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x2e4, Size: 0x4]
	UAEWindowRepData[] WindowList;//[Offset: 0x2e8, Size: 0xc]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x2f4, Size: 0x3c]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 0x1]
	byte[] SerializeData;//[Offset: 0x388, Size: 0xc]
	void OnRep_WindowList();// 0x185711c
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x1856ee0

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	FString PathToLoad;//[Offset: 0x30, Size: 0xc]
	int ID;//[Offset: 0x3c, Size: 0x4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x5a8, Size: 0x4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	Pawn* LastInstigatorPawn;//[Offset: 0x5b0, Size: 0x4]
	StaticMesh* BrokenMesh;//[Offset: 0x5b4, Size: 0x4]
	ParticleSystem* BrokenEffect;//[Offset: 0x5b8, Size: 0x4]
	void NotifyServerBroken();// 0x1c01fa0
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x1861898
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x1c01fa0
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x18617c8
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x1861704
	UAEWindowRepData GetRepData();// 0x18615d8

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	FString DropItemCfgTableName;//[Offset: 0xc0, Size: 0xc]
	int ProduceID;//[Offset: 0xcc, Size: 0x4]
	float DropGroundItemLifeSpan;//[Offset: 0xd0, Size: 0x4]
	int GridStep;//[Offset: 0xd4, Size: 0x4]
	STExtraCharacter* OwnerPawn;//[Offset: 0xd8, Size: 0x4]
	FString DropItemRuleTableName;//[Offset: 0xdc, Size: 0xc]
	int[] DropPlanIDList;//[Offset: 0xe8, Size: 0xc]
	int[] NightDropPlanIDList;//[Offset: 0xf4, Size: 0xc]
	int[] DayDropPlanIDList;//[Offset: 0x100, Size: 0xc]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x10c, Size: 0x4]
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x13fe954
	void SetDropPlanIDList(out int[] IDList);// 0x13fe888
	void SetDropItemLifeSpan(int ItemTime);// 0x13fe810
	int PickItemByUnionRandom(int WeightCount, out RandomPropData[] WeightMap);// 0x13fe718
	int PickItemByIndependentRandom(int Weight);// 0x13fe698
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x13fe49c
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, float ZOffset);// 0x13fe2b0
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x13ae694
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x13ae5fc
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x13fe154
	void GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x13fe0a8
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x13fdf74
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset);// 0x13fdcc0
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn);// 0x13fdbc4
	void DropToTarget(ItemDefineID DefineID, int count, BackpackComponent* Backpack);// 0x13fdaac
	void DropToGround(out const PickUpItemData PropData, Transform WrapperTrans);// 0x13fd860
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Character* DeadPawn);// 0x13fd720
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x13fd5f0
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x13fd4ec

--------------------------------
Class: RandomPropData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int RuleID;//[Offset: 0x4, Size: 0x4]
	int ItemCount;//[Offset: 0x8, Size: 0x4]
	int Weight;//[Offset: 0xc, Size: 0x4]
	int DropMode;//[Offset: 0x10, Size: 0x4]
	int[] ConcernItemID;//[Offset: 0x14, Size: 0xc]
	int[] ConcernItemCount;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 0x4]
	int ItemDropRuleStartID;//[Offset: 0x4, Size: 0x4]
	int ItemDropRuleEndID;//[Offset: 0x8, Size: 0x4]
	int ItemDropMode;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DropPropData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]
	int DropMode;//[Offset: 0x8, Size: 0x4]
	int[] ConcernItemID;//[Offset: 0xc, Size: 0xc]
	int[] ConcernItemCount;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x2c8, Size: 0x4]
	MeshComponent* WeaponMesh;//[Offset: 0x2cc, Size: 0x4]
	STExtraPlayerController* ASTPC;//[Offset: 0x2d0, Size: 0x4]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x2d4, Size: 0x3c]
	class AnimInstance* animBP;//[Offset: 0x310, Size: 0x4]
	delegate OnWeaponBlendAnim;//[Offset: 0x314, Size: 0xc]
	int CurUseWeaponSkinID;//[Offset: 0x320, Size: 0x4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	<int,FName> slotToSocket;//[Offset: 0x328, Size: 0x3c]
	FName OBPlayerName;//[Offset: 0x368, Size: 0x8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x370, Size: 0x4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x374, Size: 0x4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x378, Size: 0x4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x37c, Size: 0xc]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x388, Size: 0xc]
	FName[] HideBoneNames;//[Offset: 0x394, Size: 0xc]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x3a0, Size: 0xc]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x3ac, Size: 0xc]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x3b8, Size: 0x4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x3bc, Size: 0x4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x12f8b50
	void SetEnable(bool IsEnable);// 0x12f8ad0
	void RenderCaptureScene();// 0x12f8abc
	void RefreshAvatar();// 0x12f8aa8
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x12f8a00
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x12f8930
	void OnSimulatedWeaponChanged();// 0x12f891c
	void OnAvatarEquipped(enum slotType, bool isEquipped, int ItemID);// 0x12f8810
	void OnAvatarAllMeshLoaded();// 0x12f87fc
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x12f86e0
	int[] GetWeaponSkinIDs();// 0x12f8620
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x12f85f8
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x12f8484
	void EquipWeapon();// 0x12f8470
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x12f83f8
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x12f8330
	void CreateWeapon(bool IsSkeletalMesh);// 0x12f82b0
	void BluePrintSetEnable(bool IsEnable);// 0x1c01fa0
	void ApplyAnimation();// 0x12f829c

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 0x8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 0x28]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 0x28]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 0x28]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4, Size: 0xc]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14, Size: 0xc]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 0xc]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 0x1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4, Size: 0xc]
	class Object[] CachedClassList;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 0x1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 0x3c]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 0xc]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x2c8, Size: 0x3c]
	class Actor[] IgnoreActorClass;//[Offset: 0x304, Size: 0xc]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x348, Size: 0xc]
	RuntimeMeshComponent* Decal;//[Offset: 0x5f0, Size: 0x4]
	void RemoveDecalOnTimer(uint32[] DecalIdArray);// 0x13a8254

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 0x4]
	Texture* DecalTexure;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x9c, Size: 0x4]
	Texture* DecalTexure;//[Offset: 0xa0, Size: 0x4]
	Texture* DecalAlpha;//[Offset: 0xa4, Size: 0x4]
	int CoordX;//[Offset: 0xa8, Size: 0x4]
	int CoordY;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x2c8, Size: 0x4]
	int RemainSupplyTimes;//[Offset: 0x2cc, Size: 0x4]
	int SupplyBulletNum;//[Offset: 0x2d0, Size: 0x4]
	float ValidDistance;//[Offset: 0x2d4, Size: 0x4]
	delegate SupplySpotTimesChange;//[Offset: 0x2d8, Size: 0xc]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x12de094

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x2c8, Size: 0xc]
	int AddMonsterExpNum;//[Offset: 0x2d4, Size: 0x4]
	int RemainEnhancerTimesConfig;//[Offset: 0x2d8, Size: 0x4]
	int RemainEnhancerTimes;//[Offset: 0x2dc, Size: 0x4]
	int UseSuccessTipsId;//[Offset: 0x2e0, Size: 0x4]
	float ValidDistance;//[Offset: 0x2e4, Size: 0x4]
	float SelfResetTime;//[Offset: 0x2e8, Size: 0x4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	enum EnhancerState;//[Offset: 0x2ed, Size: 0x1]
	float ReadyTime;//[Offset: 0x2f0, Size: 0x4]
	float FixReadyTime;//[Offset: 0x2f4, Size: 0x4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x2f8, Size: 0xc]
	void StateChangeDelegate();// 0x133cf7c
	void SetReadyTime(float SReadyTime);// 0x1366a3c
	void SetEState(enum EState);// 0x13669c4
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x13668c8
	void ResetTimes();// 0x13668b4
	void ResetSelf();// 0x13668a0
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x1366820
	void ReadyTimeChangeDelegate();// 0x12ee368
	void OpenEffect();// 0x1366804
	void OnRep_StateChange();// 0x13667f0
	void OnRep_ReadyTimeChange();// 0x13667dc
	void OnRep_FixReadyTimeChange();// 0x13667dc
	enum GetSpotState();// 0x13667c0
	void DelayResetSelf();// 0x13667ac
	void CloseEffect();// 0x13416fc

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0, Size: 0x1]
	int SkillID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerRevivalComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0xbc, Size: 0x4]
	int GotoSpectatingTime;//[Offset: 0xc0, Size: 0x4]
	int64 FinishRevivalTime;//[Offset: 0xc8, Size: 0x8]
	int64 StartObserverTime;//[Offset: 0xd0, Size: 0x8]
	STExtraPlayerController* OwningPC;//[Offset: 0xd8, Size: 0x4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0xdc, Size: 0x8]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe8, Size: 0x68]
	DateTime BePickupTime;//[Offset: 0x150, Size: 0x8]
	void TryToLeaveRevival();// 0x13f023c
	void TickRevival(float DeltaSeconds);// 0x13f01c4
	void SetRemainingRevivalTime(int InValue);// 0x13f014c
	void SetCaptureIDCardStatus(bool InValue);// 0x13f00cc
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x13f0054
	void OnPlayerQuitSpectating();// 0x13f0040
	void OnPlayerGotoSpectating();// 0x13f002c
	void OnPlayerExitGame();// 0x13f0018
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x13eff98
	void LeaveRevivalState(uint32 SaviorKey);// 0x13eff20
	bool IsInWaittingRevivalState();// 0x13efef8
	int GetRevivalCountDownTime();// 0x13efedc
	int GetRemainingRevivalTime();// 0x13efeb4
	bool GetCaptureIDCardStatus();// 0x13efe8c
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x13efe0c
	void EnterRevivalState();// 0x13efdf8
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x13efcfc
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x13efc00

--------------------------------
Class: RevivalPointActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x2c8, Size: 0x4]
	float SmokeStartScaleDistance;//[Offset: 0x2cc, Size: 0x4]
	float SmokeEndScaleDistance;//[Offset: 0x2d0, Size: 0x4]
	float SmokeStartScaleValue;//[Offset: 0x2d4, Size: 0x4]
	float SmokeEndScaleValue;//[Offset: 0x2d8, Size: 0x4]
	enum CurState;//[Offset: 0x2dc, Size: 0x1]
	enum PreState;//[Offset: 0x2dd, Size: 0x1]
	int RevivalTime;//[Offset: 0x2e0, Size: 0x4]
	int CurRevivalTime;//[Offset: 0x2e4, Size: 0x4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	int OperationalDistance;//[Offset: 0x2ec, Size: 0x4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x2f0, Size: 0x3c]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x32c, Size: 0x3c]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x368, Size: 0x4]
	int SmokingdisappearTime;//[Offset: 0x36c, Size: 0x4]
	int IconID;//[Offset: 0x370, Size: 0x4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x374, Size: 0xc]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x380, Size: 0x8]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x398, Size: 0x8]
	void StartRevival();// 0x140df70
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x140def0
	bool RecheckCurrentRevivingPlayers();// 0x140dec8
	void OnRep_ShowSmoking();// 0x140deb4
	void OnRep_RevivalPointState(enum LastPreState);// 0x140de3c
	void OnRep_CurrentRevivingPlayers();// 0x12e82e4
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x140ddbc
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x140dd3c
	void DistanceChangedEvent(float Scale);// 0x1c01fa0

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 0x4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 0x4]
	int64 PickupTime;//[Offset: 0x8, Size: 0x8]
	int64 DroperTime;//[Offset: 0x10, Size: 0x8]
	FString PickUpName;//[Offset: 0x18, Size: 0xc]
	FString DroperPlayerName;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	WeatherInfo WeatherLevelInfo;//[Offset: 0xc0, Size: 0x14]
	FString LastLoadedWeatherLevelName;//[Offset: 0xd4, Size: 0xc]
	FString DefaultWeatherLevelName;//[Offset: 0xe0, Size: 0xc]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	void UnloadStreamLevel(FString LevelName);// 0x18662b0
	void SyncWeatherLevelInfo();// 0x186629c
	void OnUnLoadStreamLevelCompleted();// 0x1866288
	void OnRep_WeatherSyncCount();// 0x1866274
	void OnLoadStreamLevelCompleted();// 0x12e82e4
	void LoadWeatherLevel();// 0x1866260
	void LoadStreamLevel(FString LevelName, int WeatherID);// 0x18660c4
	void LoadDefaultWeatherLevel();// 0x18660b0
	void Init();// 0x1367444

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 0x1]
	int CircleIndex;//[Offset: 0x3f0, Size: 0x4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x3f4, Size: 0x1c]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x410, Size: 0x1c]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x430, Size: 0x20]
	float TickOBPlayerCD;//[Offset: 0x450, Size: 0x4]
	float TickWeatherFogCD;//[Offset: 0x454, Size: 0x4]
	DynamicWeatherController* SrcController;//[Offset: 0x458, Size: 0x4]
	DynamicWeatherController* DstController;//[Offset: 0x45c, Size: 0x4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x460, Size: 0x4]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 0x1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x468, Size: 0x44]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x4b8, Size: 0xc]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x4c4, Size: 0xc]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x13625cc
	void BlendToWeather(bool bDstWeather);// 0x136254c

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x2c8, Size: 0x44]
	int CurUseFixWeatherIndex;//[Offset: 0x30c, Size: 0x4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x310, Size: 0x1c]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x32c, Size: 0x3c]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x368, Size: 0x1c]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x384, Size: 0x1c]
	float ServerElapsedTime;//[Offset: 0x3a0, Size: 0x4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	enum NextWeatherStatus;//[Offset: 0x3a9, Size: 0x1]
	float NextWeatherCountDownTime;//[Offset: 0x3ac, Size: 0x4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x3b8, Size: 0xc]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	STExtraGameStateBase* GameState;//[Offset: 0x3d4, Size: 0x4]
	enum UICountDownType;//[Offset: 0x3ea, Size: 0x1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb, Size: 0x1]
	void StartTransition();// 0x13632ec
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x1363274
	void RPCRequireControl();// 0x1363260
	void RPCRequire();// 0x136324c
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x13631cc
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x133c1bc
	void ReinitInDemoReplay();// 0x1362f60
	void RefreshWeatherPredictionUI();// 0x13631b8
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x136312c
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x13630a0
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x1363014
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x1362f88
	void OnRep_NextWeatherCountDownTime();// 0x1362f4c
	void OnRep_ControllerDataForReplay();// 0x1362f74
	void OnRep_ControllerData();// 0x1362f60
	void OnRep_bEnableWeatherPredictionUI();// 0x1362f4c
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x1c01fa0
	void HandleClientHasReactivated();// 0x1362f38
	void GotoSpecificWeather(int WeatherIndex);// 0x1362ec0
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x1362de4
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x1362d50
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x1362cd0
	float GetInProgressElapsedTimeSecWithWeather();// 0x1362ca8
	float GetGlobalWeatherSystemTimeOnServer();// 0x1362c80
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x1362c38
	void ForceStopDynamicWeatherChangeOnServer();// 0x1362c24
	void ForceStartNextWeatherChangeOnServer();// 0x1362c10
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x1362b60

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 0x1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float ElapsedTime;//[Offset: 0x4, Size: 0x4]
	float BlendInTime;//[Offset: 0x8, Size: 0x4]
	float BlendOutTime;//[Offset: 0xc, Size: 0x4]
	float SaturateTime;//[Offset: 0x10, Size: 0x4]
	float TimeMultiplier;//[Offset: 0x14, Size: 0x4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 0x4]
	float StartTimeMax;//[Offset: 0x4, Size: 0x4]
	float BlendInTime;//[Offset: 0x8, Size: 0x4]
	float BlendOutTime;//[Offset: 0xc, Size: 0x4]
	float DurationTimeMin;//[Offset: 0x10, Size: 0x4]
	float DurationTimeMax;//[Offset: 0x14, Size: 0x4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 0x1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 0x4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24, Size: 0xc]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30, Size: 0xc]
	float TimeMultiplier;//[Offset: 0x3c, Size: 0x4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 0x1]
	float Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 0x1]
	float StartTime;//[Offset: 0x4, Size: 0x4]
	float TotalDurationTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 0x4]
	float ElapsedTime;//[Offset: 0x8, Size: 0x4]
	enum NextWeather;//[Offset: 0xc, Size: 0x1]
	float NextDuration;//[Offset: 0x10, Size: 0x4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 0x4]
	float TimelineOffset;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString ScreenAppearanceName;//[Offset: 0x4, Size: 0xc]
	byte ParticleType;//[Offset: 0x10, Size: 0x1]
	float ScreenAppearanceConcentration;//[Offset: 0x14, Size: 0x4]
	FName ShaderName;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xbc, Size: 0xc]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xc8, Size: 0xc]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xd4, Size: 0xc]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xe0, Size: 0xc]
	delegate WeatherRecover;//[Offset: 0xec, Size: 0xc]
	enum DynamicWeatherType;//[Offset: 0xf8, Size: 0x1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0xfc, Size: 0x4]
	CurveFloat* LightCurve;//[Offset: 0x100, Size: 0x4]
	float TargetLightValue;//[Offset: 0x104, Size: 0x4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x10c, Size: 0x4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x110, Size: 0x4]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x114, Size: 0x4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x118, Size: 0x4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x11c, Size: 0x4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x120, Size: 0x4]
	float UINotifyTimeBeforeStart;//[Offset: 0x124, Size: 0x4]
	FString UINotifyModuleName;//[Offset: 0x128, Size: 0xc]
	int ChangeStartUINotifyID;//[Offset: 0x134, Size: 0x4]
	int ChangeQuitUINotifyID;//[Offset: 0x138, Size: 0x4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x13c, Size: 0x4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x140, Size: 0x4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x144, Size: 0x4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x148, Size: 0x4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x150, Size: 0x1c]
	float RuningDirection;//[Offset: 0x16c, Size: 0x4]
	float RuningTime;//[Offset: 0x170, Size: 0x4]
	float LerpTotalTime;//[Offset: 0x174, Size: 0x4]
	FString WeatherName;//[Offset: 0x178, Size: 0xc]
	DirectionalLight* MainLight;//[Offset: 0x184, Size: 0x4]
	SkyLight* SkyLight;//[Offset: 0x188, Size: 0x4]
	ExponentialHeightFog* Fog;//[Offset: 0x18c, Size: 0x4]
	WeatherObject ObjectValues;//[Offset: 0x190, Size: 0x68]
	WeatherObject WeatherObjectSrc;//[Offset: 0x1f8, Size: 0x68]
	WeatherObject WeatherObjectLerp;//[Offset: 0x264, Size: 0x68]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x2cc, Size: 0xc]
	void UINotifyCallbackOnServer();// 0x1361d8c
	void OnUserQualitySettingChanged(int renderlevel);// 0x12e0ed0

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 0x4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 0x10]
	float MainLight_Temperature;//[Offset: 0x14, Size: 0x4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 0xc]
	float SkyLight_Density;//[Offset: 0x24, Size: 0x4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 0x10]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 0x4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 0x10]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 0x4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 0x10]
	float HeightFallOff;//[Offset: 0x60, Size: 0x4]
	float StartDistance;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 0x1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 0x4]
	float TotalTime;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 0xc]
	ExponentialHeightFog* Fog;//[Offset: 0xc, Size: 0x4]
	WeatherDstFog DstWeatherFog;//[Offset: 0x10, Size: 0x14]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x24, Size: 0xc]
	float blendTime;//[Offset: 0x30, Size: 0x4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float StartDistance;//[Offset: 0x4, Size: 0x4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 0x4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0, Size: 0x4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 0x4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	Vector AirplaneStartLoc;//[Offset: 0x344, Size: 0xc]
	Vector AirplaneStopLoc;//[Offset: 0x350, Size: 0xc]
	Vector AirplaneCanJumpLoc;//[Offset: 0x35c, Size: 0xc]
	Vector AirplaneForceJumpLoc;//[Offset: 0x368, Size: 0xc]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	Vector BlueCircle;//[Offset: 0x378, Size: 0xc]
	Vector WhiteCircle;//[Offset: 0x384, Size: 0xc]
	float CirclePain;//[Offset: 0x390, Size: 0x4]
	AirAttackOrder AirAttackOrder;//[Offset: 0x394, Size: 0x30]
	Vector AirAttackArea;//[Offset: 0x3c4, Size: 0xc]
	delegate OnSafeZoneTips;//[Offset: 0x3d0, Size: 0xc]
	delegate OnBlueCirclePreWarning;//[Offset: 0x3dc, Size: 0xc]
	delegate OnBlueCircleRun;//[Offset: 0x3e8, Size: 0xc]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x3f4, Size: 0xc]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x400, Size: 0xc]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x40c, Size: 0xc]
	delegate VehicleDestroyedDelegate;//[Offset: 0x418, Size: 0xc]
	int PlayerNum;//[Offset: 0x430, Size: 0x4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 0x1]
	delegate OnPlayerNumChange;//[Offset: 0x438, Size: 0xc]
	delegate OnBeKilledNumChange;//[Offset: 0x444, Size: 0xc]
	delegate OnGameEnd;//[Offset: 0x450, Size: 0xc]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 0x1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45e, Size: 0x1]
	bool IsInitBPItemTableEveryTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45f, Size: 0x1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 0x1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 0x1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 0x1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 0x1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 0x1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x466, Size: 0x1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x467, Size: 0x1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	int[] forbitPickItemTypeList;//[Offset: 0x46c, Size: 0xc]
	int BornItemId;//[Offset: 0x478, Size: 0x4]
	int BornItemCount;//[Offset: 0x47c, Size: 0x4]
	int TrainingCountdownTimer;//[Offset: 0x480, Size: 0x4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	FString GrenadeEffectPath;//[Offset: 0x488, Size: 0xc]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 0x1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x496, Size: 0x1]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x497, Size: 0x1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 0x1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 0x1]
	float TrainingModePickUpColdCD;//[Offset: 0x49c, Size: 0x4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x4a0, Size: 0x4]
	float PickUpColdCountDownMinTime;//[Offset: 0x4a4, Size: 0x4]
	float TrainingModeDropLifeTime;//[Offset: 0x4a8, Size: 0x4]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 0x1]
	delegate OnAirAttack;//[Offset: 0x4b0, Size: 0xc]
	delegate OnInfectedAreaWarn;//[Offset: 0x4bc, Size: 0xc]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x4c8, Size: 0xc]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1]
	FName[] EnableMapPackages;//[Offset: 0x4d8, Size: 0xc]
	FName[] EnableMapLayers;//[Offset: 0x4e4, Size: 0xc]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x4f0, Size: 0x4]
	int PveZombieGrenadeCount;//[Offset: 0x4f4, Size: 0x4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x4fc, Size: 0x24]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x520, Size: 0x4]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]
	int ReadyStateTime;//[Offset: 0x530, Size: 0x4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x534, Size: 0xc]
	FString GameModeDisplayName;//[Offset: 0x540, Size: 0xc]
	int CurCircleWave;//[Offset: 0x54c, Size: 0x4]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x550, Size: 0x4]
	FName GameModeState;//[Offset: 0x558, Size: 0x8]
	int AlivePlayerNum;//[Offset: 0x5b4, Size: 0x4]
	int AliveTeamNum;//[Offset: 0x5b8, Size: 0x4]
	int PlayerNumOnPlane;//[Offset: 0x5bc, Size: 0x4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x5c0, Size: 0xc]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x5cc, Size: 0xc]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x5d8, Size: 0x2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x5dc, Size: 0xc]
	enum GameModeType;//[Offset: 0x5e8, Size: 0x1]
	enum GameModeConfigType;//[Offset: 0x5e9, Size: 0x1]
	int PlayerNumPerTeam;//[Offset: 0x5ec, Size: 0x4]
	FString[] OpenTagCullingMaps;//[Offset: 0x5f0, Size: 0xc]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 0x1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fd, Size: 0x1]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fe, Size: 0x1]
	float FPVEWeatherPlaySpeed;//[Offset: 0x60c, Size: 0x4]
	float WeatherPhaseIndex;//[Offset: 0x610, Size: 0x4]
	enum[] WeatherProcessArray;//[Offset: 0x614, Size: 0xc]
	delegate OnWeatherStateChange;//[Offset: 0x620, Size: 0xc]
	delegate OnWeatherSpeedChange;//[Offset: 0x62c, Size: 0xc]
	enum CurDynamicWeatherState;//[Offset: 0x638, Size: 0x1]
	<FString,float> BeInvitedPlayers;//[Offset: 0x63c, Size: 0x3c]
	float InviteCountDownTime;//[Offset: 0x678, Size: 0x4]
	CircleDataMining[] CircleDataMining;//[Offset: 0x67c, Size: 0xc]
	GameDataMining GameDataMining;//[Offset: 0x688, Size: 0x30]
	uint64 GameID;//[Offset: 0x6b8, Size: 0x8]
	FString GameModeID;//[Offset: 0x6c0, Size: 0xc]
	FString[] ModeUIManagerArray;//[Offset: 0x6cc, Size: 0xc]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x6e4, Size: 0x4]
	Actor* StartedPlane;//[Offset: 0x6e8, Size: 0x4]
	float StartFlyTime;//[Offset: 0x6ec, Size: 0x4]
	int64 StartReadyUnixTimestamp;//[Offset: 0x6f0, Size: 0x8]
	int64 StartFightingUnixTimestamp;//[Offset: 0x6f8, Size: 0x8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0x700, Size: 0x8]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x719, Size: 0x1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71a, Size: 0x1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71b, Size: 0x1]
	int EnableNewStateMachine;//[Offset: 0x71c, Size: 0x4]
	float PlayerInBlueCircleClipTime;//[Offset: 0x724, Size: 0x4]
	float BroadcastClientDistance;//[Offset: 0x728, Size: 0x4]
	int[] FinalWinTeams;//[Offset: 0x744, Size: 0xc]
	uint32[] FinalWinPlayers;//[Offset: 0x750, Size: 0xc]
	uint32 GameTerminatorPlayerKey;//[Offset: 0x75c, Size: 0x4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 0x1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x761, Size: 0x1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x762, Size: 0x1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0x764, Size: 0xc]
	int[] ImprisonmentTeammateGameType;//[Offset: 0x770, Size: 0xc]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 0x1]
	FString GuideImageName;//[Offset: 0x780, Size: 0xc]
	FString GuideLuaTableName;//[Offset: 0x78c, Size: 0xc]
	FString GuideLuaFunctionName;//[Offset: 0x798, Size: 0xc]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 0x1]
	UAELevelDirector* UAELevelDirector;//[Offset: 0x7a8, Size: 0x4]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0x7ac, Size: 0x4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x7b0, Size: 0xc]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x7bc, Size: 0xc]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0x7c8, Size: 0x4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 0x1]
	bool bEnableVehicleWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd, Size: 0x1]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0x7d0, Size: 0x4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0x7d4, Size: 0x4]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x1c01fa0
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x1c01fa0
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x148b204
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x148aff8
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x148ac70
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x148aaac
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x148a95c
	void SimulateAirAttackOver();// 0x148a900
	void SetTagCulling(bool IsUse);// 0x148a880
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x148a734
	void SetCurAirAttackWave(int AirAttackWave);// 0x148a6bc
	void SetCurAirAttackType(byte airattacktype);// 0x148a644
	void SetAirplaneStopLoc(Vector StopLoc);// 0x148a5d4
	void SetAirplaneStartLoc(Vector StarLoc);// 0x148a564
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x148a4f4
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x148a484
	void ServerRemoteDestroyActor(int SingleId);// 0x148a40c
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x148a2b0
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x148a230
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x148a09c
	void OnRep_WeatherStateChanged();// 0x1489f84
	void OnRep_VisualFieldFeatureParam();// 0x148a088
	void OnRep_UpassInfoList();// 0x12e82e4
	void OnRep_StartedPlane();// 0x148a074
	void OnRep_ResetWeatherPlaySpeed();// 0x148a060
	void OnRep_ReadyStateTime();// 0x148a04c
	void OnRep_ReadyStateCountingDown();// 0x12e82e4
	void OnRep_PlayerNumOnPlane();// 0x148a038
	void OnRep_PlayerNumChange();// 0x12e82e4
	void OnRep_ModeUIManagerArray();// 0x148a024
	void OnRep_MarkSyncData();// 0x148a010
	void OnRep_IsTrainingMode();// 0x1489ffc
	void OnRep_IsShowDeadBox();// 0x12e82e4
	void OnRep_IsFPPMode();// 0x1489fe8
	void OnRep_IsDark();// 0x1489fd4
	void OnRep_GameTerminatorPlayerKey();// 0x1489fc0
	void OnRep_GameModeType();// 0x1489fac
	void OnRep_GameModeState();// 0x1489f98
	void OnRep_GameModeFeatureSet();// 0x12e82e4
	void OnRep_FinalWinTeams();// 0x12e82e4
	void OnRep_FinalWinPlayers();// 0x12e82e4
	void OnRep_DynamicWeatherState();// 0x1489f84
	void OnRep_AliveTeamNum();// 0x1489f70
	void OnRep_AlivePlayerNum();// 0x1489f5c
	void OnRep_AirplaneStopLoc();// 0x12e82e4
	void OnRep_AirplaneStartLoc();// 0x12e82e4
	void OnRep_AirplaneForceJumpLoc();// 0x1489f48
	void OnRep_AirplaneCanJumpLoc();// 0x1489f48
	void OnGameModeDisplayNameChange();// 0x1489f34
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x1489e78
	bool IsRevivalGame();// 0x1489e50
	bool IsPVEMode();// 0x1489e28
	bool IsPlaneValid();// 0x1489e04
	bool IsMapUseTeamPattern();// 0x1489dd4
	bool IsInNight();// 0x1489da4
	bool IsFeatureSupported(enum SubSystemType);// 0x1489d24
	float GetRepServerWorldTimeSeconds();// 0x1489cfc
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x1489c60
	int GetPVEWeatherPhaseIndex();// 0x1489c38
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x1489c10
	FName GetGameModeState();// 0x1489bd0
	Vector GetForceJumpLoc();// 0x1489bac
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x143afc4
	enum GetCurWeatherState();// 0x1489b84
	enum GetCurDynamicWeatherState();// 0x1489b5c
	int GetCurCircleWave();// 0x1489b40
	byte GetCurCircleState();// 0x1489b00
	Vector GetCanJumpLoc();// 0x1489adc
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x1489a30
	int GetAlivePlayerNum();// 0x1489a08
	Vector GetAirplaneStopLoc();// 0x14899e4
	Vector GetAirplaneStartLoc();// 0x14899c0
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x14898fc
	void CheckInitLuaRemoteEvent();// 0x14898e8
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x1489870
	void ChangeDynamicWeatherState(enum DayState);// 0x14897f8
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x14896f0
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x14894dc
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x1489310
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x1489144
	void BroadcastTemporaryMessage(FString Message);// 0x1489080
	void BroadcastRoute(Vector StartLoc, Vector StopLoc);// 0x1488fb8
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x1488da4
	void BroadcastCircleWaveOver(int Index);// 0x1488cf0
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain);// 0x1488a38
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex);// 0x1488868
	void BroadcastAirDrop();// 0x148884c
	void BroadcastAirAttackWarning(const Vector airAttackAreaSrc, int waveindex);// 0x1488790
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, int waveindex);// 0x1488614
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x1488550
	void AddPveZombieGrenadeCount(int Value);// 0x14884d8
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x1488460

--------------------------------
Class: UAEGameState.GameState.GameStateBase.Info.Actor.Object
	FString WeaponAttrReloadTableName;//[Offset: 0x320, Size: 0xc]
	FString VehicleAttrReloadTableName;//[Offset: 0x32c, Size: 0xc]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	static void GetWeaponAttrReloadTableRowByRef(int ID, out WeaponAttrReloadTableStruct Result);// 0x1856930
	static WeaponAttrReloadTableStruct GetWeaponAttrReloadTableRow(int ID);// 0x185688c
	static VehicleAttrReloadTableStruct GetVehicleAttrReloadTableRow(int ID);// 0x1856804

--------------------------------
Class: WeaponAttrReloadTableStruct
	int KeyID;//[Offset: 0x0, Size: 0x4]
	float AutoAimingConfig_Speed;//[Offset: 0x4, Size: 0x4]
	float AutoAimingConfig_RangeRate;//[Offset: 0x8, Size: 0x4]
	float AutoAimingConfig_SpeedRate;//[Offset: 0xc, Size: 0x4]
	float AutoAimingConfig_RangeRateSight;//[Offset: 0x10, Size: 0x4]
	float AutoAimingConfig_SpeedRateSight;//[Offset: 0x14, Size: 0x4]
	float AutoAimingConfig_AdsorbMaxRange;//[Offset: 0x18, Size: 0x4]
	float AutoAimingConfig_AdsorbMinRange;//[Offset: 0x1c, Size: 0x4]
	float AutoAimingConfig_AdsorbMinAttenuationDis;//[Offset: 0x20, Size: 0x4]
	float AutoAimingConfig_AdsorbMaxAttenuationDis;//[Offset: 0x24, Size: 0x4]
	float AutoAimingConfig_AdsorbActiveMinRange;//[Offset: 0x28, Size: 0x4]
	float AccessoriesVRecoilFactor;//[Offset: 0x2c, Size: 0x4]
	float AccessoriesHRecoilFactor;//[Offset: 0x30, Size: 0x4]
	float AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 0x4]
	float DeviationBase;//[Offset: 0x38, Size: 0x4]
	float DeviationBaseAim;//[Offset: 0x3c, Size: 0x4]
	float DeviationRecoilGain;//[Offset: 0x40, Size: 0x4]
	float DeviationRecoilGainAim;//[Offset: 0x44, Size: 0x4]
	float DeviationMaxMove;//[Offset: 0x48, Size: 0x4]
	float DeviationMoveMultiplier;//[Offset: 0x4c, Size: 0x4]
	float DeviationStanceJump;//[Offset: 0x50, Size: 0x4]
	float GameDeviationFactor;//[Offset: 0x54, Size: 0x4]
	float HitPartCoffHead;//[Offset: 0x58, Size: 0x4]
	float HitPartCoffBody;//[Offset: 0x5c, Size: 0x4]
	float HitPartCoffLimbs;//[Offset: 0x60, Size: 0x4]
	float HitPartCoffHand;//[Offset: 0x64, Size: 0x4]
	float HitPartCoffFoot;//[Offset: 0x68, Size: 0x4]
	float BaseImpactDamage;//[Offset: 0x6c, Size: 0x4]
	float RangeModifier;//[Offset: 0x70, Size: 0x4]
	float ReferenceDistance;//[Offset: 0x74, Size: 0x4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x78, Size: 0x4]
	float ReloadTime;//[Offset: 0x7c, Size: 0x4]
	float ReloadTimeTactical;//[Offset: 0x80, Size: 0x4]
	float ReloadTimeMagOut;//[Offset: 0x84, Size: 0x4]
	float ReloadTimeMagIn;//[Offset: 0x88, Size: 0x4]
	float ReloadDurationStart;//[Offset: 0x8c, Size: 0x4]
	float ReloadDurationLoop;//[Offset: 0x90, Size: 0x4]
	float MaxBulletNumInOneClip;//[Offset: 0x94, Size: 0x4]
	float InitBulletInClip;//[Offset: 0x98, Size: 0x4]
	float BulletFireSpeed;//[Offset: 0x9c, Size: 0x4]
	int bEnableVehicleShoot;//[Offset: 0xa0, Size: 0x4]
	int bEnableLeanOutHolding;//[Offset: 0xa4, Size: 0x4]
	float Bullet_RadialDamageParams_BaseDamage;//[Offset: 0xa8, Size: 0x4]
	float Bullet_RadialDamageParams_MinimumDamage;//[Offset: 0xac, Size: 0x4]
	float Bullet_RadialDamageParams_DamageInnerRadius;//[Offset: 0xb0, Size: 0x4]
	float Bullet_RadialDamageParams_DamageOuterRadius;//[Offset: 0xb4, Size: 0x4]
	float Bullet_RadialDamageParams_DamageFalloff;//[Offset: 0xb8, Size: 0x4]
	float Bullet_MaxNoGravityRange;//[Offset: 0xbc, Size: 0x4]
	float Bullet_LaunchGravityScale;//[Offset: 0xc0, Size: 0x4]
	FString Bullet_RadialDamageParams_DamageTypeClass;//[Offset: 0xc4, Size: 0xc]
	FString ImpactActorTemplatePath;//[Offset: 0xd0, Size: 0xc]
	FString BulletTemplatePath;//[Offset: 0xdc, Size: 0xc]
	int ReloadWithNoCost;//[Offset: 0xe8, Size: 0x4]
	FString MuzzleFX;//[Offset: 0xec, Size: 0xc]
	FString ScopeMuzzleFX;//[Offset: 0xf8, Size: 0xc]
	FString RemoteMuzzleFX;//[Offset: 0x104, Size: 0xc]
	FString LocalSilencerMuzzleFX;//[Offset: 0x110, Size: 0xc]
	FString ScopeSilencerMuzzleFX;//[Offset: 0x11c, Size: 0xc]
	FString RemoteSilencerMuzzleFX;//[Offset: 0x128, Size: 0xc]
	FString LocalFiringSuppressorMuzzleFX;//[Offset: 0x134, Size: 0xc]
	FString ScopeFiringSuppressorMuzzleFX;//[Offset: 0x140, Size: 0xc]
	FString RemoteFiringSuppressorMuzzleFX;//[Offset: 0x14c, Size: 0xc]
	FString LocalCompensatorMuzzleFX;//[Offset: 0x158, Size: 0xc]
	FString ScopeCompensatorMuzzleFX;//[Offset: 0x164, Size: 0xc]
	FString RemoteCompensatorMuzzleFX;//[Offset: 0x170, Size: 0xc]

--------------------------------
Class: VehicleAttrReloadTableStruct
	int KeyID;//[Offset: 0x0, Size: 0x4]
	float HealthMax;//[Offset: 0x4, Size: 0x4]
	float Health;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 0x4]
	float FlightHeight;//[Offset: 0x4, Size: 0x4]
	float SeaLevelHeight;//[Offset: 0x8, Size: 0x4]
	int16[] bombsInterval;//[Offset: 0xc, Size: 0xc]
	Vector2D[] bombsPosition2D;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 0x4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 0x4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 0xc]
	float DefaultFOVAngle;//[Offset: 0x14, Size: 0x4]
	byte[] VisualCheckChanelList;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x40, Size: 0x8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x48, Size: 0x3c]
	<int,float> VisualAngleLimitMap;//[Offset: 0x84, Size: 0x3c]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 0x10]
	Actor* VisibleActor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 0x1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0, Size: 0xc]
	int updateTime;//[Offset: 0xc, Size: 0x4]
	int upassLevel;//[Offset: 0x10, Size: 0x4]
	int upassScore;//[Offset: 0x14, Size: 0x4]
	int planeAvatarId;//[Offset: 0x18, Size: 0x4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	FString iconUrl;//[Offset: 0x20, Size: 0xc]
	FString Nation;//[Offset: 0x2c, Size: 0xc]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38, Size: 0x20]
	int upassKeepBuy;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 0xc]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 0xc]
	Vector PlaneStartPoint;//[Offset: 0xc, Size: 0xc]
	Vector PlaneEndPoint;//[Offset: 0x18, Size: 0xc]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0xbc, Size: 0x4]
	int CurrentLocalInstanceCount;//[Offset: 0xc0, Size: 0x4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0xc4, Size: 0xc]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0xd0, Size: 0xc]
	int MarkCountProcessed;//[Offset: 0xdc, Size: 0x4]
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x13beebc
	int GenerateNewLocalInstanceID();// 0x13bee98
	int GenerateNewInstanceID();// 0x13bee74
	void DispatchMarkData(MarkDispatchAction Data);// 0x13becbc

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 0x1]
	enum RangeType;//[Offset: 0x1, Size: 0x1]
	MarkSyncData SyncData;//[Offset: 0x4, Size: 0x4c]
	float DispatchDelayTime;//[Offset: 0x50, Size: 0x4]
	float RangeRad;//[Offset: 0x54, Size: 0x4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x58, Size: 0x8]
	float DispatchTime;//[Offset: 0x60, Size: 0x4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	delegate OnMapAlertSet;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0xbc, Size: 0x3c]
	float EventCDTime;//[Offset: 0xf8, Size: 0x4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x1556680

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c, Size: 0xc]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28, Size: 0xc]
	void UnRegister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x12ebf60
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x133d4b4
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x1382388
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x1382310
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x1c01fa0
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x1c01fa0

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0xbc, Size: 0xc]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0xc8, Size: 0x4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0xcc, Size: 0x4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	enum FieldOfViewNotificationStatus;//[Offset: 0xd8, Size: 0x1]
	bool IsNotificationWorking();// 0x1381f48
	static int IsGlobalDebugLineTraceDrawn();// 0x1381f1c
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x1c01fa0
	enum GetFieldOfViewNotificationStatus();// 0x1381ef4

--------------------------------
Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0, Size: 0x4]
	int[] HitNumEveryBodys;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ZombieWaveUIState
	int TypeID;//[Offset: 0x0, Size: 0x4]
	int CountdownTime;//[Offset: 0x4, Size: 0x4]
	FString ShowString;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 0x4]
	uint32 CurClipID;//[Offset: 0x4, Size: 0x4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 0x4]
	byte ShootMode;//[Offset: 0xc, Size: 0x1]
	float StartFireTime;//[Offset: 0x10, Size: 0x4]
	double StartFireSysTime;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x2c8, Size: 0x4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x2cc, Size: 0x4]
	float NearToFarDistance;//[Offset: 0x2d0, Size: 0x4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x2d4, Size: 0x4]

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 0xc]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0xc, Size: 0xc]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x18, Size: 0xc]
	int ShootTimes;//[Offset: 0x24, Size: 0x4]
	byte[] TssSdkAntiData;//[Offset: 0x28, Size: 0xc]
	int TssSdkAntiDataLen;//[Offset: 0x34, Size: 0x4]
	int NetworkStatus;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ShootTimeData
	Vector ShootPos;//[Offset: 0x0, Size: 0xc]
	Vector GunPos;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 0xc]
	uint32 ShootID;//[Offset: 0x24, Size: 0x4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 0x8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 0x1]
	float SkeletonLength;//[Offset: 0x34, Size: 0x4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 0x40]
	double ShootSystemTime;//[Offset: 0x80, Size: 0x8]
	byte ShootTimeConDelta;//[Offset: 0x88, Size: 0x1]
	float ShootLevelTime;//[Offset: 0x8c, Size: 0x4]
	Vector GunTailPos;//[Offset: 0x90, Size: 0xc]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 0xc]
	FString GLVersion;//[Offset: 0xc, Size: 0xc]
	FString OSVersion;//[Offset: 0x18, Size: 0xc]
	FString DeviceMake;//[Offset: 0x24, Size: 0xc]
	FString DeviceModel;//[Offset: 0x30, Size: 0xc]
	FString VulkanVersion;//[Offset: 0x3c, Size: 0xc]
	FString MemorySizeInGB;//[Offset: 0x48, Size: 0xc]
	FString OpenID;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 0x1]
	Actor* SeekAndLockTarget;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]
	Vector ImpactNormal;//[Offset: 0xc, Size: 0xc]
	float BulletHitTime;//[Offset: 0x18, Size: 0x4]
	float BulletLaunchTime;//[Offset: 0x1c, Size: 0x4]
	float BulletMovedDistance;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 0x1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4be, Size: 0x1]
	Vector ServerShootPos;//[Offset: 0x4c0, Size: 0xc]
	float ServerShootTime;//[Offset: 0x4cc, Size: 0x4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x4d0, Size: 0x50]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 0x1]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x132e140
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x13ff64c
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x13ff530
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x132e090
	void OnImpact(out const HitResult _ImpactResult);// 0x132dfec
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x13ff330

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 0x4]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 0x4]
	Actor* Instigator;//[Offset: 0x44, Size: 0x4]
	uint32 ShootID;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0, Size: 0x4]
	int Score;//[Offset: 0x4, Size: 0x4]
	enum ScoreChangeReason;//[Offset: 0x8, Size: 0x1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc, Size: 0x4]
	int HighestScore;//[Offset: 0x10, Size: 0x4]
	int FollowScore;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0, Size: 0x8]
	FString OpenID;//[Offset: 0x8, Size: 0xc]
	int8 PlatID;//[Offset: 0x14, Size: 0x1]
	uint16 AreaID;//[Offset: 0x16, Size: 0x2]
	FString ZoneID;//[Offset: 0x18, Size: 0xc]
	VehicleMovePoint[] PointList;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	int8 Type;//[Offset: 0x4, Size: 0x1]
	int X;//[Offset: 0x8, Size: 0x4]
	int Y;//[Offset: 0xc, Size: 0x4]
	int Z;//[Offset: 0x10, Size: 0x4]
	int Speed;//[Offset: 0x14, Size: 0x4]
	int8 VehicleN2oUse;//[Offset: 0x18, Size: 0x1]
	int8 VehicleCarPetUse;//[Offset: 0x19, Size: 0x1]
	int VehicleMoveDistance;//[Offset: 0x1c, Size: 0x4]
	int TimeStamp;//[Offset: 0x20, Size: 0x4]
	int8 RoleType;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0, Size: 0xc]
	int CaculateType;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0xe0, Size: 0xc]
	FString ReplayServerURL;//[Offset: 0x118, Size: 0xc]
	void RequestReplaysFromServer(FString URLString);// 0x13dfc64
	void ClearStreams();// 0x13dfc50

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x24, Size: 0x4]
	class UserWidget* GMUIClass;//[Offset: 0x28, Size: 0x28]
	enum ReplayType;//[Offset: 0x50, Size: 0x1]
	ReplayUIManager* pReplayUIMgr;//[Offset: 0x5c, Size: 0x4]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	STExtraPlayerController* PlayerController;//[Offset: 0xcc, Size: 0x4]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0xd4, Size: 0xc]
	bool StopRecordingReplay();// 0x134fd68
	bool StopPlay();// 0x1391ee8
	bool StartRecordingReplay();// 0x134fd24
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x1391d40
	void SetReplayStreamer(FString InReplayStreamer);// 0x1391ba8
	void SetIsGMSpectator(bool bGM);// 0x1391b2c
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x1391ab4
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x1391a3c
	void ReplayOnWeaponChanged();// 0x1391a28
	void ReplayOnSimulatedWeaponChanged();// 0x1391a14
	void ReplayOnBulletNumChanged();// 0x1391a00
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x1391988
	bool PlayReplay();// 0x1391958
	bool PauseReplay(bool bPaused);// 0x13918c8
	bool IsInRecordState();// 0x13918a0
	bool IsInPlayState();// 0x1391878
	bool IsFastForwarding();// 0x1391850
	bool HaveRecordingData();// 0x1391820
	void HandleChangeStatePC();// 0x139180c
	FString GetSpectatorName();// 0x135e874
	float GetCurrentReplayTotalTimeInSeconds();// 0x13917e4
	float GetCurrentReplayCurTimeInSeconds();// 0x13917bc

--------------------------------
Class: ReplayUIManager.Object
	STExtraPlayerController* pSTExtraPC;//[Offset: 0x20, Size: 0x4]
	STExtraGameInstance* pExtraInst;//[Offset: 0x24, Size: 0x4]
	STExtraPlayerState* pExtraPS;//[Offset: 0x28, Size: 0x4]
	STExtraBaseCharacter* pViewCharacter;//[Offset: 0x2c, Size: 0x4]
	class UserWidget* ReplayUIPath;//[Offset: 0x30, Size: 0x28]
	ReplayUserWidget* pReplayUserWidget;//[Offset: 0x58, Size: 0x4]
	ReplayTeammateInfo[] SavedTeammateInfoArray;//[Offset: 0x5c, Size: 0xc]
	<uint32,FString> AssumedMap_Key2name;//[Offset: 0x68, Size: 0x3c]
	<FString,FString> AssumedMap_Name2name;//[Offset: 0xa4, Size: 0x3c]
	int ReplayTargetTeamID;//[Offset: 0xf0, Size: 0x4]
	FString ReplayTargetName;//[Offset: 0xf4, Size: 0xc]
	void UpdateReplayUI();// 0x140bd8c
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* InCharacter);// 0x1391a3c
	void ReplayOnWeaponChanged();// 0x140bd78
	void ReplayOnSimulatedWeaponChanged();// 0x140bd64
	void ReplayOnBulletNumChanged();// 0x140bd50
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* InCharacter);// 0x1391988
	void ReleaseManager();// 0x140bd3c
	void InitManager();// 0x140bd28
	void ChangeProgress();// 0x140bd14

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x298, Size: 0xc]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x2a4, Size: 0x3]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x2a7, Size: 0x3]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x2aa, Size: 0x3]
	UserDetailSetting UserDetailSetting;//[Offset: 0x2b0, Size: 0x54]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 0x1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 0x1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	int iEnableRegionID;//[Offset: 0x328, Size: 0x4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x32c, Size: 0xc]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x338, Size: 0xc]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x344, Size: 0xc]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x350, Size: 0xc]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x35c, Size: 0xc]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x368, Size: 0xc]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x374, Size: 0xc]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x380, Size: 0xc]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x38c, Size: 0xc]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x398, Size: 0xc]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x3a4, Size: 0xc]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x3b0, Size: 0xc]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x3bc, Size: 0xc]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x3c8, Size: 0xc]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x3d4, Size: 0xc]
	FString[] RePairDeleteDir;//[Offset: 0x3e0, Size: 0xc]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x3ec, Size: 0xc]
	SoftObjectPath[] ResidentAssets;//[Offset: 0x3f8, Size: 0xc]
	bool AutoTestTriggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]
	FString AutoTestMissionType;//[Offset: 0x408, Size: 0xc]
	FString CustomLineStr;//[Offset: 0x414, Size: 0xc]
	enum GamePlayMode;//[Offset: 0x420, Size: 0x4]
	Vector2D FOVRange;//[Offset: 0x424, Size: 0x8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x42c, Size: 0x8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 0x1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435, Size: 0x1]
	float SwimRotateX;//[Offset: 0x438, Size: 0x4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 0x1]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x460, Size: 0x4]
	DeathPlayback* DeathPlayback;//[Offset: 0x464, Size: 0x4]
	CompletePlayback* CompletePlayback;//[Offset: 0x468, Size: 0x4]
	ObservingReplay* ObservingReplay;//[Offset: 0x46c, Size: 0x4]
	ReplayUIManager* ReplayUIManager;//[Offset: 0x470, Size: 0x4]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x478, Size: 0x4]
	AntiCheatConfig* ACConfig;//[Offset: 0x47c, Size: 0x4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x48c, Size: 0x4]
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x1c01fa0
	void UpdateWorldCullDistanceVolumes();// 0x1482d8c
	void TestAyncLoad();// 0x1482d78
	void SuperBattle();// 0x1482d64
	void SetWorldDoorCullDistance(int Distance);// 0x1482cec
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x1482b50
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x1482a94
	void SetUserSetingShadowQuality(bool bShadow);// 0x1482a14
	void SetSoundEffectQuality(int Type);// 0x148299c
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x1482908
	void SetHZBMobileState();// 0x12e82e4
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x1482890
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x14826e8
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x1482540
	static void SetCustomRouteLine();// 0x148252c
	static void SetAutoMissionType();// 0x1482518
	void ReSetFOVScreenSizeCullingFactor();// 0x1482504
	void RenderForLowFPS();// 0x14824f0
	void RefuseRenderForLowFPS();// 0x14824dc
	void QuitGame();// 0x14824c8
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x14823e0
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x1396184
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x14823cc
	bool isUsingAssumedNameInReplay();// 0x14823a4
	bool IsSupportTagCulling();// 0x1482388
	bool IsSupportSwitchSoundEffectQuality();// 0x1482360
	bool IsSupportSwitchRenderLevelRuntime();// 0x1482338
	bool IsSupportMSAA();// 0x1482310
	bool IsSupportLDR();// 0x14822e8
	static bool IsSecAutoRunTest();// 0x14028e0
	bool IsPVENightChangeCullDistance();// 0x14822c0
	bool IsOpenHDR();// 0x1482298
	bool IsIOSOneGigabyteDevice();// 0x1457648
	static bool IsGAutomatorTest();// 0x1482270
	static bool IsAutoRunTestGamePVEProfile();// 0x1482248
	static bool IsAutoRunTestGamePVE();// 0x1482220
	static bool IsAutoRunTestGame();// 0x14821f8
	void GMStandalone(FString Map);// 0x14820a0
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x1482078
	bool GetUserSetingShadowQuality();// 0x1482050
	int GetUserQualitySettingLevel();// 0x1482034
	int GetSoundEffectQuality();// 0x148200c
	ReplayUIManager* GetReplayUIManager();// 0x1481fe4
	RenderQualitySettings GetRenderQualityLastSet();// 0x1481f94
	RenderQualitySettings GetRenderQualityApplying();// 0x1481f44
	ObservingReplay* GetObservingReplay();// 0x1481f1c
	static STExtraGameInstance* GetInstance();// 0x1481ef4
	int GetFPSLevel();// 0x1481ecc
	int GetExactDeviceLevel();// 0x1481ea4
	int GetDeviceUpdateVersionFlag();// 0x1481e74
	FString GetDeviceProfilerLevel();// 0x1481db4
	byte GetDeviceMaxSupportSoundEffect();// 0x1481d8c
	byte GetDeviceMaxSupportLevel();// 0x1481d64
	int GetDeviceLimit();// 0x1481d3c
	int GetDeviceLevel();// 0x1481d0c
	bool GetDefaultSoundEffectQuality();// 0x1481ce4
	DeathPlayback* GetDeathPlayback();// 0x1481cbc
	CompletePlayback* GetCompletePlayback();// 0x1481c94
	static int GetAutoRunTestServerIdx();// 0x1481c6c
	static FString GetAutoRunPassWD();// 0x1481bb4
	static FString GetAutoRunLuaTest();// 0x1481afc
	static FString GetAutoRunAccount();// 0x1481a44
	bool GetApplyingShadowQuality();// 0x1481a1c
	FString GetActiveDeviceProfile();// 0x148195c
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x14816ec
	void EnableStreamingLevelLOD(bool bEnable);// 0x148166c
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x148156c
	bool DeleteSavedFiles(bool allfilesSaved);// 0x14814e4
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x1481420
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x148135c
	void AutoActiveLDR();// 0x1481348
	void ActiveStyle_PPForDynamicRender(byte Type);// 0x14812c8
	void ActiveStyle_PP(byte Level);// 0x1481248
	void ActiveStyle_ACESForDynamicRender(byte Type);// 0x14811c8
	void ActiveStyle(byte Level);// 0x1481148
	void ActiveNightVision(bool bSet);// 0x14810c8
	void ActiveMSAA(bool bOpenMSAA);// 0x1481048
	void ActiveDynamicStyle(bool bSet, byte Type);// 0x1480f78

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x188, Size: 0xd8]
	delegate EnginePreTick;//[Offset: 0x260, Size: 0xc]
	ActionQueueManager* ActionQueueManager;//[Offset: 0x284, Size: 0x4]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x28c, Size: 0x4]
	UIMsgBus* AssociatedUIMsgBus;//[Offset: 0x294, Size: 0x4]
	void TestExec();// 0x12e82e4
	void LuaLeakDetect();// 0x15c98e8
	void LuaDoString(FString LuaString);// 0x15c982c
	float GetWeatherTime();// 0x15c9810
	int GetWeatherID();// 0x15c97f0
	UIMsgBus* GetUIMsgBus();// 0x15c97c8
	int GetDeviceLevel();// 0x1481d0c
	static UAEDataTable* GetDataTableFromCurentGI(FString tableName);// 0x15c970c
	UAEDataTable* GetDataTable(FString tableName);// 0x15c9648
	FrontendHUD* GetAssociatedFrontendHUD();// 0x15c9620

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 0xc]
	uint64 RoleID;//[Offset: 0x10, Size: 0x8]
	FString GameSvrId;//[Offset: 0x18, Size: 0xc]
	FString GameAppID;//[Offset: 0x24, Size: 0xc]
	uint16 AreaID;//[Offset: 0x30, Size: 0x2]
	int8 PlatID;//[Offset: 0x32, Size: 0x1]
	FString ZoneID;//[Offset: 0x34, Size: 0xc]
	uint64 BattleID;//[Offset: 0x40, Size: 0x8]
	FString BattleServerIP;//[Offset: 0x48, Size: 0xc]
	uint32 BattleServerPort;//[Offset: 0x54, Size: 0x4]
	FString UserName;//[Offset: 0x58, Size: 0xc]
	FString PicUrl;//[Offset: 0x64, Size: 0xc]
	uint32 PlayerKey;//[Offset: 0x70, Size: 0x4]
	int8 WeatherID;//[Offset: 0x78, Size: 0x1]
	FString WeatherLevelName;//[Offset: 0x7c, Size: 0xc]
	float WeatherTime;//[Offset: 0x88, Size: 0x4]
	int[] MrpcsData;//[Offset: 0x8c, Size: 0xc]
	<int,FString> AdvConfig;//[Offset: 0x9c, Size: 0x3c]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 0x1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 0x1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 0x4]
	int TCQualityGrade;//[Offset: 0x4, Size: 0x4]
	int DeviceMaxQualityLevel;//[Offset: 0x8, Size: 0x4]
	int UserQualitySetting;//[Offset: 0xc, Size: 0x4]
	int DeviceSupportHDR;//[Offset: 0x10, Size: 0x4]
	int IsOpenHDR;//[Offset: 0x14, Size: 0x4]
	int UserHDRSetting;//[Offset: 0x18, Size: 0x4]
	int IsSupportMSAA;//[Offset: 0x1c, Size: 0x4]
	bool UserMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int UserShadowSetting;//[Offset: 0x24, Size: 0x4]
	int UserShadowSwitch;//[Offset: 0x28, Size: 0x4]
	int PUBGLimitSetting;//[Offset: 0x2c, Size: 0x4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x30, Size: 0x4]
	int PUBGDeviceFPSLow;//[Offset: 0x34, Size: 0x4]
	int PUBGDeviceFPSMid;//[Offset: 0x38, Size: 0x4]
	int PUBGDeviceFPSHigh;//[Offset: 0x3c, Size: 0x4]
	int PUBGDeviceFPSHDR;//[Offset: 0x40, Size: 0x4]
	float PUBGCRLRuntmieMinMem;//[Offset: 0x44, Size: 0x4]
	int PUBGRenderSwitch;//[Offset: 0x48, Size: 0x4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int UserMaterialQualityLevel;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 0xc]
	SwitchesItem[] Switches;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 0xc]
	float Value;//[Offset: 0xc, Size: 0x4]
	FString DependKey;//[Offset: 0x10, Size: 0xc]
	float DependValue;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 0xc]
	float RenderValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 0x1]
	FString[] PostProcessParams;//[Offset: 0x4, Size: 0xc]
	ACESParameter ACESParams;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: ActionQueueManager.Object
	<FString,ActionQueueObject*> ActionQueueObjectPool;//[Offset: 0x1c, Size: 0x3c]
	ActionQueueObject* GetQueueObject(FString Name);// 0x15b1154

--------------------------------
Class: ActionQueueObject.Object
	static ActionQueueObject* Create(Object* Outer);// 0x15b16d0
	void Clear();// 0x15b16bc
	void ArrayIndexAddQueue(delegate Delegate, int first, int End);// 0x15b1590

--------------------------------
Class: UIMsgBus.CustomMsgBus.BlueprintFunctionLibrary.Object
	static UIMsgBus* GetUIMsgBus(Object* WorldContextObj);// 0x15b82c4

--------------------------------
Class: CustomMsgBus.BlueprintFunctionLibrary.Object
	<FString,CustomGameMsgGroup*> MsgListenerGroupMap;//[Offset: 0x1c, Size: 0x3c]
	<FString,CustomTaggedGameMsgGroup*> TaggedMsgListenerGroupMap;//[Offset: 0x58, Size: 0x3c]
	void UnRegistTaggedMsgListener(FString InMsgName, FString InMsgTagName, const Object* InMsgLisenter);// 0x15b7ba8
	void UnRegistMsgListener(FString InMsgName, const Object* InMsgLisenter);// 0x15b7a04
	void RegistTaggedMsgListener(FString InMsgName, FString InMsgTagName, Object* InMsgLisenter);// 0x15b7748
	void RegistMsgListener(FString InMsgName, Object* InMsgLisenter);// 0x15b75a4
	void PushTaggedMsg(FString InMsgName, FString InMsgTagName, CustomGameMsg* InTargetMsg, int TaggedMsgMaxProcessCount);// 0x15b72a0
	void PushMsg(FString InMsgName, CustomGameMsg* InTargetMsg);// 0x15b70fc

--------------------------------
Class: CustomGameMsgGroup.Object
	FString MsgName;//[Offset: 0x1c, Size: 0xc]
	Object*[] MsgListenerGroup;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: CustomTaggedGameMsgGroup.CustomGameMsgGroup.Object
	FString MsgTagName;//[Offset: 0x34, Size: 0xc]
	GameMsgCache[] CachedMsgList;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: GameMsgCache
	CustomGameMsg* CachedGameMsg;//[Offset: 0x0, Size: 0x4]
	int ProcessedCount;//[Offset: 0x4, Size: 0x4]
	int MaxProcessCount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CustomGameMsg.Object
	static CustomGameMsg* MakeGameMsg(Object* UIMsgMaker, class CustomGameMsg CustomMsgClass);// 0x15b6aa8

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x1c, Size: 0xc]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28, Size: 0xc]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60, Size: 0x4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68, Size: 0x4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x6c, Size: 0xc]
	void StopRecord(bool bRankFirst);// 0x1554eb8
	void StartRecord();// 0x1554ea4
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x1554c68
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x1554b34
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x1554858
	void BuildOutputData();// 0x1554844
	void BuildContinuousKillOutputData();// 0x1554830

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 0x4]
	float EndTimeSecs;//[Offset: 0x4, Size: 0x4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 0x1]
	float ShootDistance;//[Offset: 0xc, Size: 0x4]
	FString CauserName;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 0x4]
	float EndTimeSecs;//[Offset: 0x4, Size: 0x4]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 0x4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte CaptureType;//[Offset: 0x1, Size: 0x1]
	byte ShootDamageType;//[Offset: 0x2, Size: 0x1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 0x4]
	float ShootDistance;//[Offset: 0x8, Size: 0x4]
	FString CauserName;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 0x4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 0x4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	byte CaptureType;//[Offset: 0x9, Size: 0x1]
	byte ShootDamageType;//[Offset: 0xa, Size: 0x1]
	float ShootDistance;//[Offset: 0xc, Size: 0x4]
	FString CauserName;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	<FString,DeathPlayCharacterTrans> CharacterTransMap;//[Offset: 0x13c, Size: 0x3c]
	bool IsSwitchedOffByDevice();// 0x135e934
	FString GetReplayTargetName();// 0x135e874
	void EnableDeathPlayback(bool bEnable);// 0x135e7f4

--------------------------------
Class: DeathPlayCharacterTrans
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0xe0, Size: 0x28]
	UAEUserWidget* ReplayUI;//[Offset: 0x108, Size: 0x4]
	int MaxHoursForKeepingFiles;//[Offset: 0x10c, Size: 0x4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	FString[] ExcludedGameModes;//[Offset: 0x114, Size: 0xc]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	uint32[] TeammateKeyArray;//[Offset: 0x128, Size: 0xc]
	bool PlayDemoWithFilename(FString DemoName);// 0x134d69c
	FString GetDemoPlayTime();// 0x134d5dc

--------------------------------
Class: AntiCheatConfig.Object

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x1c, Size: 0xc]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 0xc]
	int bUseFeatureSet;//[Offset: 0xc, Size: 0x4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x10, Size: 0xc]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x1c, Size: 0xc]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x28, Size: 0xc]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: ReplayUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	byte DemoType;//[Offset: 0x2ec, Size: 0x1]
	FString ReplayNameStr;//[Offset: 0x2f0, Size: 0xc]
	int ReplayTeamID;//[Offset: 0x2fc, Size: 0x4]
	ReplayUIManager* pReplayUIManager;//[Offset: 0x300, Size: 0x4]
	Vector UIOffsetVec;//[Offset: 0x304, Size: 0xc]
	<int,ReplayEnemyUIInfo> CurEnemyUIMapTable;//[Offset: 0x310, Size: 0x3c]
	void UpdateWeaponUI();// 0x140c744
	void UpdateReplayUI();// 0x13468b8
	void UpdateOneEnemyUI(int _Index, ReplayEnemyUIInfo inUIInfo);// 0x140c654
	void UpdateBulletUI();// 0x140c638
	void OnReplayProgressChange();// 0x140c61c
	void InitIngameUI();// 0x134cbe0
	void HideUnnecessaryUI();// 0x134cb44
	void HideOneEnemyUI(int _Index);// 0x13a9b00
	void ForceUpdateUI();// 0x134cb28
	void ClearLastReplayUI();// 0x140c600
	int AddOneEnemyUI(STExtraPlayerState* InPlayerState);// 0x140c578

--------------------------------
Class: ReplayEnemyUIInfo
	int UIIndex;//[Offset: 0x0, Size: 0x4]
	Vector WordLocation;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ReplayTeammateInfo

--------------------------------
Class: KillInfoRecordData
	FString SafeLabel;//[Offset: 0x28, Size: 0xc]
	int SafeParam1;//[Offset: 0x34, Size: 0x4]
	int SafeParam2;//[Offset: 0x38, Size: 0x4]
	float RecordTimestamp;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0xd0, Size: 0x90]
	delegate BrushDelegate;//[Offset: 0x160, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x170, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x180, Size: 0x10]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	float HitTestAreaRadius;//[Offset: 0x194, Size: 0x4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x198, Size: 0x10]
	delegate OnSetBrushFromPathAsyncFinished;//[Offset: 0x1a8, Size: 0xc]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	void SetOpacity(float InOpacity);// 0x238d6d0
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x238d650
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x238d5d4
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x238d510
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize, bool bAuto2Mat);// 0x238d3fc
	void SetBrushFromPath(FString ResourcePath, bool bMatchSize, bool bAsync);// 0x238d2a4
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x238d22c
	void SetBrushFromAsset(SlateBrushAsset* Asset, bool bAuto2Mat);// 0x238d168
	void SetBrush(out const SlateBrush InBrush, bool bAuto2Mat);// 0x238ce6c
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x238ce44
	bool GetDontPaintWhenAlphaZero();// 0x238ce1c

--------------------------------
Class: ActorCacheMgr.Actor.Object
	<class Actor,ActorCachePool*> DataMap;//[Offset: 0x2c8, Size: 0x3c]
	Actor* GetActor(class Actor Type);// 0x12e13fc
	bool AddToPool(class Actor Type, Actor* Target);// 0x12e1338

--------------------------------
Class: ActorCachePool.Object

--------------------------------
Class: ClassActorComponentPoolCollect.Object
	<FString,ActorComponentPool*> PoolMaps;//[Offset: 0x1c, Size: 0x3c]

--------------------------------
Class: ClassAnimInstancePoolCollect.Object
	<FString,AnimInstancePool*> PoolMaps;//[Offset: 0x1c, Size: 0x3c]

--------------------------------
Class: ActorComponentPoolManager.Actor.Object
	<class Object,ClassActorComponentPoolCollect*> ActorComponentPoolCollectMaps;//[Offset: 0x2c8, Size: 0x3c]
	<class Object,ClassAnimInstancePoolCollect*> AnimInstancePoolCollectMaps;//[Offset: 0x304, Size: 0x3c]
	<class Object,PreloadComponentGroup> PreloadComponentGroups;//[Offset: 0x3d8, Size: 0x3c]
	static ActorComponentPoolManager* GetInstance();// 0x12e1f9c
	ActorComponentPool* GetAutoComponentPool(class Object Class, FString ComponentName);// 0x12e1e94
	AnimInstancePool* GetAutoAnimInstancePool(class Object Class, FString ComponentName, class AnimInstance AnimClass);// 0x12e1d48

--------------------------------
Class: PreloadComponentGroup
	PreloadComponentItem[] PreloadComponentItems;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: PreloadComponentItem
	FString ComponentName;//[Offset: 0x0, Size: 0xc]
	int PreloadComponentCount;//[Offset: 0xc, Size: 0x4]
	bool AutoPreConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ActorHiddenInterface.Interface.Object
	void SetActorHiddenInGameMask(bool bNewHidden, enum HiddenMask);// 0x12e2378

--------------------------------
Class: ActorBoundingBoxGetterInterface.Interface.Object
	Box GetActorBoundingBox(Actor* Actor);// 0x12e2a5c

--------------------------------
Class: ActorLocationGetterInterface.Interface.Object
	Vector GetActorLocation(Actor* Actor);// 0x12e2db4

--------------------------------
Class: AdjustSmokeCirclePostMatComponent.ActorComponent.Object
	float CircleInRadius;//[Offset: 0xbc, Size: 0x4]
	float CircleOutRadius;//[Offset: 0xc0, Size: 0x4]
	float DistanceForHideSmoke;//[Offset: 0xc4, Size: 0x4]
	float TickInternal;//[Offset: 0xc8, Size: 0x4]
	MaterialInterface* ParentMaterial;//[Offset: 0xcc, Size: 0x4]
	FName ShaderUniformName;//[Offset: 0xd0, Size: 0x8]
	FString TagName;//[Offset: 0xd8, Size: 0xc]
	CurveFloat* AlphaCurve;//[Offset: 0xe4, Size: 0x4]
	float DefaultSmokeTime;//[Offset: 0xe8, Size: 0x4]
	float FadeOutStartTime;//[Offset: 0xec, Size: 0x4]
	float RealFadeOutStartTime;//[Offset: 0xf0, Size: 0x4]
	void FadeOutParticle();// 0x12e30f0

--------------------------------
Class: AgentBoundComponent.ActorComponent.Object
	Vector LocalCenter;//[Offset: 0xbc, Size: 0xc]
	Vector LocalSize;//[Offset: 0xc8, Size: 0xc]

--------------------------------
Class: AIActingComponent.ActorComponent.Object
	AIActingCandidateData[] CandidateAIList;//[Offset: 0xd0, Size: 0xc]
	int MaxActiveAI;//[Offset: 0x154, Size: 0x4]
	int ActiveAI_n;//[Offset: 0x158, Size: 0x4]
	int ActiveAI_m;//[Offset: 0x15c, Size: 0x4]
	float AISpawnCircleOriginOffset;//[Offset: 0x160, Size: 0x4]
	float NoWhiteCirclesRadius;//[Offset: 0x164, Size: 0x4]
	float SelectActionPeriod;//[Offset: 0x168, Size: 0x4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x16c, Size: 0x4]
	int TryFindSpawnAILocNum;//[Offset: 0x170, Size: 0x4]
	AIActingItem[] AIActingItemList;//[Offset: 0x174, Size: 0xc]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x180, Size: 0xc]
	int FullFeedLimit;//[Offset: 0x18c, Size: 0x4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x190, Size: 0xc]
	float DeliveryBeginTime;//[Offset: 0x19c, Size: 0x4]
	float DeliveryFreq;//[Offset: 0x1a0, Size: 0x4]
	int DeliveryAINumEachPeriod;//[Offset: 0x1a4, Size: 0x4]
	float MinimumWarmScore;//[Offset: 0x1a8, Size: 0x4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x1ac, Size: 0xc]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x1b8, Size: 0xc]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x1c4, Size: 0xc]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x1d0, Size: 0xc]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x1dc, Size: 0x4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x1e0, Size: 0x4]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x270, Size: 0x4]
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponID, FString KillerNation, FString KilledNation);// 0x12e3ccc

--------------------------------
Class: AIActingCandidateData
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: FakePlayerAIController.BaseAIController.AIController.Controller.Actor.Object
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0x600, Size: 0x4]
	delegate OnEnterJumping;//[Offset: 0x604, Size: 0xc]
	NewPathFollowingComponent* newFollowingComponent;//[Offset: 0x61c, Size: 0x4]
	int PlayerTeamId;//[Offset: 0x620, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x624, Size: 0x4]
	FString PlayerName;//[Offset: 0x628, Size: 0xc]
	byte AIType;//[Offset: 0x634, Size: 0x1]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 0x1]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0x638, Size: 0x4]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d, Size: 0x1]

--------------------------------
Class: BaseAIController.AIController.Controller.Actor.Object
	BehaviorTree*[] BehaviorTree;//[Offset: 0x368, Size: 0xc]
	float CheckPeriod;//[Offset: 0x374, Size: 0x4]
	float RandomDeviation;//[Offset: 0x378, Size: 0x4]
	float ProtectCountdownTime;//[Offset: 0x37c, Size: 0x4]
	float SpawnEquipDelayTime;//[Offset: 0x380, Size: 0x4]
	float SpawnEquipFreezeRadius;//[Offset: 0x384, Size: 0x4]
	Vector2D ProtectShootRadius;//[Offset: 0x388, Size: 0x8]
	float TurnVelocity;//[Offset: 0x390, Size: 0x4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x394, Size: 0x8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x39c, Size: 0x3c]
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x5c0, Size: 0x4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x5c4, Size: 0x4]
	BackpackComponent* BackpackComponent;//[Offset: 0x5c8, Size: 0x4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x5cc, Size: 0x28]
	void Respawn();// 0x13224c4

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	float maxCheckDis;//[Offset: 0x258, Size: 0x4]
	float maxCheckDisTime;//[Offset: 0x25c, Size: 0x4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	float PlayerHalfHeight;//[Offset: 0x268, Size: 0x4]
	float PlayerNewHalfHeight;//[Offset: 0x26c, Size: 0x4]
	float MaxTransferDis;//[Offset: 0x270, Size: 0x4]

--------------------------------
Class: AIActingItem
	float StartSeconds;//[Offset: 0x0, Size: 0x4]
	float EndSeconds;//[Offset: 0x4, Size: 0x4]
	float DeadPercent;//[Offset: 0x8, Size: 0x4]
	int PlayerNumScale;//[Offset: 0xc, Size: 0x4]
	int[] WeaponIdList;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 0x4]
	float RightRatingSection;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0, Size: 0x4]
	float RightRatingSection;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0, Size: 0xc]
	Vector BottomRightVec;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 0x4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 0x4]
	int AIFeedLimit;//[Offset: 0x8, Size: 0x4]
	float SectionRightValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 0x4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 0x4]
	float SectionRightValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 0xc]
	float RightRatingSection;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DeliveryItem
	int Percent;//[Offset: 0x0, Size: 0x4]
	int DeliveryNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AimOffsetViewComponent.ActorComponent.Object

--------------------------------
Class: AIParachutePoint.Actor.Object

--------------------------------
Class: AIPathNode.Actor.Object
	AIPathNode* NextPathNode;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: AIPickupResouce.Actor.Object
	int GroupID;//[Offset: 0x2c8, Size: 0x4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2cc, Size: 0x4]
	BillboardComponent* SignSprite;//[Offset: 0x2d0, Size: 0x4]
	BillboardComponent* GoodSprite;//[Offset: 0x2d4, Size: 0x4]
	BillboardComponent* BadSprite;//[Offset: 0x2d8, Size: 0x4]

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: AirAttackBombActor.Pawn.Actor.Object
	float LifeSpan;//[Offset: 0x30c, Size: 0x4]

--------------------------------
Class: AirAttackComponent.TimerRegistComponent.ActorComponent.Object
	Vector MapOriginal;//[Offset: 0x104, Size: 0xc]
	float MapRadius;//[Offset: 0x110, Size: 0x4]
	float FlightHeight;//[Offset: 0x114, Size: 0x4]
	float SeaLevelHeight;//[Offset: 0x118, Size: 0x4]
	float DelayTime;//[Offset: 0x11c, Size: 0x4]
	int WaveCount;//[Offset: 0x120, Size: 0x4]
	enum DefaultAirAttackGenerateType;//[Offset: 0x124, Size: 0x1]
	enum[] AirAttackGenerateTypeList;//[Offset: 0x128, Size: 0xc]
	bool bAirAttackUseModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	CurveFloat* AttackAreaSizeModifierCurve;//[Offset: 0x138, Size: 0x4]
	CurveFloat* BombCountModifierCurve;//[Offset: 0x13c, Size: 0x4]
	int WaveInternal;//[Offset: 0x140, Size: 0x4]
	AirAttackCfg AirAttackConfig;//[Offset: 0x144, Size: 0x18]
	float BroadcastClientDistance;//[Offset: 0x15c, Size: 0x4]

--------------------------------
Class: AirAttackCfg
	float EscapeTime;//[Offset: 0x0, Size: 0x4]
	float AttackLastingTime;//[Offset: 0x4, Size: 0x4]
	float AttackAreaRadius;//[Offset: 0x8, Size: 0x4]
	float OuterRadius;//[Offset: 0xc, Size: 0x4]
	int TotalBombs;//[Offset: 0x10, Size: 0x4]
	int BombsRadius;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: AirAttackCS.TimerRegistComponent.ActorComponent.Object
	class STExtraExplosionEffect* ExplosionEffectTemplate;//[Offset: 0x104, Size: 0x4]
	void OnAirAttack(byte airattacktype, int waveindex);// 0x12e6a04
	void DoBombHarmAtLocation(out Vector bombLocation);// 0x12e6980
	void AirAttackThrowBomb(int Index);// 0x12e6908

--------------------------------
Class: AirAttackLocatorWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock_Distance1;//[Offset: 0x2ec, Size: 0x4]
	Image* Image_DisableTips1;//[Offset: 0x2f0, Size: 0x4]
	void SetAALOpen(bool bOpen);// 0x12e77d0

--------------------------------
Class: AirDropBoxActor.Actor.Object
	float DroppingSpeed;//[Offset: 0x2c8, Size: 0x4]
	bool bIsHitTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float HitGroundHeight;//[Offset: 0x2d0, Size: 0x4]
	float SmokeStartScaleDistance;//[Offset: 0x2d4, Size: 0x4]
	float SmokeEndScaleDistance;//[Offset: 0x2d8, Size: 0x4]
	float SmokeStartScaleValue;//[Offset: 0x2dc, Size: 0x4]
	float SmokeEndScaleValue;//[Offset: 0x2e0, Size: 0x4]
	float PrevSmokeCurrentDistanceScaler;//[Offset: 0x2e4, Size: 0x4]
	bool bIsShowingSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	float ForceUpdateLocInterval;//[Offset: 0x2ec, Size: 0x4]
	float ForceUpdateLocDissqThreshold;//[Offset: 0x2f0, Size: 0x4]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x2f4, Size: 0x4]
	FName WrapperBoxName;//[Offset: 0x2f8, Size: 0x8]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x300, Size: 0x4]
	int AirdropboxID;//[Offset: 0x304, Size: 0x4]
	float OBUIShowDistance;//[Offset: 0x308, Size: 0x4]
	bool bIsSuperAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	FString FestivalAirDropBoxMesh;//[Offset: 0x310, Size: 0xc]
	AirDropResource NormalAirdropBoxResource;//[Offset: 0x31c, Size: 0x10]
	AirDropResource SuperAirdropBoxResource;//[Offset: 0x32c, Size: 0x10]
	enum DropType;//[Offset: 0x33d, Size: 0x1]
	uint32 SummonerKey;//[Offset: 0x340, Size: 0x4]
	bool bIsAirOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	float BoxSmokingBeginTime;//[Offset: 0x348, Size: 0x4]
	int[] TeamIDOpenedTheBox;//[Offset: 0x34c, Size: 0xc]
	bool bIsEmptyAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	bool bIsBoxHitTheGroundCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1]
	float ServerDroppingSpeedCpp;//[Offset: 0x35c, Size: 0x4]
	bool bRecoverSpeedCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	float CheckWaterOverlapInterval;//[Offset: 0x370, Size: 0x4]
	float CheckWaterOverlapElapsedCpp;//[Offset: 0x374, Size: 0x4]
	bool IsNeedCheckFallGroundCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	ProjectileMovementComponent* MoveComp;//[Offset: 0x418, Size: 0x4]
	StaticMeshComponent* RootBoxComp;//[Offset: 0x41c, Size: 0x4]
	bool bNeedForceUpdateLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	void SetBuoyancyUpdatedComponent(SceneComponent* UpdatedComponent);// 0x12e8348
	void OnRep_TeamIDOpenedTheBox();// 0x12e8334
	void OnRep_ServerDroppingSpeedCpp();// 0x12e8320
	void OnRep_IsBoxHitTheGroundCpp();// 0x12e830c
	void OnRep_FestivalAirDropBoxMesh();// 0x12e82f8
	void OnRep_bUseFestivalAirDropBox();// 0x12e82f8
	void OnRep_BoxSmokingBeginTime();// 0x12e82e4
	void OnRep_BoxId();// 0x12e82d0
	void OnRep_AirdropTypeChange();// 0x12e82bc
	void OnBoxTriggerSmoking(float SmokingEndTime);// 0x12e8244
	void OnBoxRemoveSmoking();// 0x12e8230
	void OnBoxOpened();// 0x12e821c
	void OnBoxHitGroundOrInWater();// 0x12e8208
	void OnBoxDropIntoWater();// 0x1c01fa0
	void OnAddAirdropBox();// 0x12e81f4
	bool IsDropIntoWater(float SphereRadius);// 0x12e8174
	void GenerateWrappersBox(out const AirDropBoxGenerateWrapperItemData[] DataList, Vector BoxLoc);// 0x12e805c
	bool ForceUpdateAirdropLoc();// 0x12e8034
	void DistanceScalerChangedEvent(float Scale);// 0x1c01fa0
	void ChangeFestivalAirDropBoxMesh();// 0x1c01fa0
	void ChangeAirdropAppearance();// 0x1c01fa0
	void BP_OnRep_IsBoxHitTheGroundCpp();// 0x1c01fa0
	void BP_DropIntoWarter();// 0x1c01fa0
	void BoxReachGround();// 0x1c01fa0
	void AddToAIList();// 0x12e8020

--------------------------------
Class: AirDropResource
	StaticMesh* AirdropBoxMesh;//[Offset: 0x0, Size: 0x4]
	StaticMesh* AirdropParachuteMesh;//[Offset: 0x4, Size: 0x4]
	ParticleSystem* AirdropSmoke;//[Offset: 0x8, Size: 0x4]
	ParticleSystem* AirdropFlash;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DropStuffStrategy.Object

--------------------------------
Class: DropVehicleStrategy.DropStuffStrategy.Object
	bool Apply(AirDropPlane* Plane);// 0x12e8fd8

--------------------------------
Class: AirDropPlane.FlightVehicle.Actor.Object
	FlyingParam FlyingParam;//[Offset: 0x2c8, Size: 0x14]
	Vector DroppingStuffLocation;//[Offset: 0x2dc, Size: 0xc]
	float DroppingSpeed;//[Offset: 0x2e8, Size: 0x4]
	float LifeSpanAfterDrop;//[Offset: 0x2ec, Size: 0x4]
	DropStuffStrategy*[] DropStrategyArray;//[Offset: 0x348, Size: 0xc]
	DropStuffStrategy* DropStrategy;//[Offset: 0x354, Size: 0x4]
	ProjectileMovementComponent* PMComp;//[Offset: 0x358, Size: 0x4]
	void SetDropStrategy(DropStuffStrategy* Strategy);// 0x12eaad4
	void OnRep_FlyingParams();// 0x12eaac0
	DropStuffStrategy*[] GetDropStrategyArray();// 0x12ea9a8
	DropStuffStrategy* GetDropStrategy();// 0x12ea980
	int GetDroppingIndex(float DeltaTime);// 0x12ea900

--------------------------------
Class: FlightVehicle.Actor.Object

--------------------------------
Class: FlyingParam
	float FlyingSpeed;//[Offset: 0x0, Size: 0x4]
	Vector FlyingDirection;//[Offset: 0x4, Size: 0xc]
	float AirPlaneSpawnServerTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DropZombieStrategy.DropStuffStrategy.Object
	bool Apply(AirDropPlane* Plane);// 0x12e93e8

--------------------------------
Class: DropBoxStrategy.DropStuffStrategy.Object
	bool Apply(AirDropPlane* Plane);// 0x12e970c

--------------------------------
Class: AirDropComponent.TimerRegistComponent.ActorComponent.Object
	AirDropPlaneParams AirDropPlaneParams;//[Offset: 0x104, Size: 0x1c]
	AirDropPlaneParams SuperAirDropPlaneParams;//[Offset: 0x120, Size: 0x1c]
	AirDropPlaneParams VehicleAirDropPlaneParams;//[Offset: 0x13c, Size: 0x1c]
	AirDropPlaneParams ZombieAirDropPlaneParams;//[Offset: 0x158, Size: 0x1c]
	BackupEnterAirDropPlaneParams BackupEnterAirDropPlaneParams;//[Offset: 0x174, Size: 0x34]
	AirDropConfig[] AirDropConfigs;//[Offset: 0x1a8, Size: 0xc]
	bool bCanUseDelayDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	class AirDropPlane* AirDropPlaneBluePrint;//[Offset: 0x1b8, Size: 0x4]
	class AirDropBoxActor* AirDropBoxBlueprint;//[Offset: 0x1bc, Size: 0x4]
	FlareGunAirDropRandomParams SuperAirDropRandomParams;//[Offset: 0x1c0, Size: 0xc]
	FlareGunAirDropRandomParams VehicleAirDropRandomParams;//[Offset: 0x1cc, Size: 0xc]
	FlareGunAirDropRandomParams ZombieAirDropRandomParams;//[Offset: 0x1d8, Size: 0xc]
	byte[] SpotType;//[Offset: 0x1e4, Size: 0xc]
	float StuffBoxToWorldBoundaryMinDis;//[Offset: 0x1f0, Size: 0x4]
	DataTable* AirDropBoxDataTable;//[Offset: 0x200, Size: 0x4]
	SuperAirDropBoxDataItem[] FSuperAirDropBoxDataSet;//[Offset: 0x204, Size: 0xc]
	AirDropOrder AirDropOrder;//[Offset: 0x210, Size: 0x50]
	AirDropOrder SuperAirDropOrder;//[Offset: 0x260, Size: 0x50]
	AirDropOrder ZombieAirDropOrder;//[Offset: 0x2b0, Size: 0x50]
	AirDropOrder[] DelayOrder;//[Offset: 0x300, Size: 0xc]
	void OnAirDropStart(AirDropOrder Order, enum DropType);// 0x12e9d30
	void CallZombieAirDrop(float X, float Y, int ZombieID, int FlowId);// 0x12e9be8
	void CallSuperAirDrop(Vector DropLoc, uint32 SummonerKey);// 0x12e9b30
	void CallFlareGunAirDrop(Vector InDropLoc, enum DropType, uint32 SummonerKey);// 0x12e9a30

--------------------------------
Class: AirDropPlaneParams
	float FlyingHeight;//[Offset: 0x0, Size: 0x4]
	float FlyingSpeed;//[Offset: 0x4, Size: 0x4]
	float AirDropFallingSpeed;//[Offset: 0x8, Size: 0x4]
	bool bIsUseDebugLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Vector DebugDroppingLocation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: BackupEnterAirDropPlaneParams
	float FlyingHeight;//[Offset: 0x0, Size: 0x4]
	float FlyingSpeed;//[Offset: 0x4, Size: 0x4]
	float AirDropFallingSpeed;//[Offset: 0x8, Size: 0x4]
	Vector DroppingLocationOffset;//[Offset: 0xc, Size: 0xc]
	Vector[] PlaneSpawnOffset;//[Offset: 0x18, Size: 0xc]
	float[] DropTimeOffset;//[Offset: 0x24, Size: 0xc]
	int MaxPlaneNum;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: AirDropConfig
	float AirDropTime;//[Offset: 0x0, Size: 0x4]
	float RandomDroppingRange;//[Offset: 0x4, Size: 0x4]
	float DropStuffChance;//[Offset: 0x8, Size: 0x4]
	float NoLandscapeDelayTime;//[Offset: 0xc, Size: 0x4]
	bool bCanMakeExtraAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	ExtraAirDropRandomParams[] ExtraAirDropRandParamsArray;//[Offset: 0x14, Size: 0xc]
	float ExtraAirDropRandLowerLimit;//[Offset: 0x20, Size: 0x4]
	float ExtraAirDropRandUpperLimit;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ExtraAirDropRandomParams
	int TotalDropCount;//[Offset: 0x0, Size: 0x4]
	int TermWeight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FlareGunAirDropRandomParams
	float SuperAirDropRandomRadius;//[Offset: 0x0, Size: 0x4]
	float SuperAirDropRouteRandomRadiusMin;//[Offset: 0x4, Size: 0x4]
	float SuperAirDropRouteRandomRadiusMax;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SuperAirDropBoxDataItem
	float GenerateRate;//[Offset: 0x0, Size: 0x4]
	DataTable* Table;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AirDropOrder
	Vector AirDropPlaneSpawnPosition;//[Offset: 0x0, Size: 0xc]
	Vector AirDropPlaneFlyingDirection;//[Offset: 0xc, Size: 0xc]
	float AirDropPlaneFlyingSpeed;//[Offset: 0x18, Size: 0x4]
	Vector AirDropStuffFallingPosition;//[Offset: 0x1c, Size: 0xc]
	Vector[] BoxFallingPositionArray;//[Offset: 0x28, Size: 0xc]
	float AirDropStuffFallingSpeed;//[Offset: 0x34, Size: 0x4]
	bool bIsSpecialAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int DropType;//[Offset: 0x3c, Size: 0x4]
	uint32 AirDropSummoner;//[Offset: 0x40, Size: 0x4]
	int ZombieID;//[Offset: 0x44, Size: 0x4]
	int FlowId;//[Offset: 0x48, Size: 0x4]
	bool bIsEmptyAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: AirDropListWrapperActor.PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.Actor.Object

--------------------------------
Class: AirplaneCharacter.Character.Pawn.Actor.Object
	bool bStopAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 0x1]
	bool bForceControllerRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 0x1]
	void SetStopAllowed(bool InStop);// 0x12eb074
	bool IsStopAllowed();// 0x12eb04c
	void CheckAirplanePos(float DeltaTime);// 0x12eafd4

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x2c8, Size: 0x4]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x2cc, Size: 0xc]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2d8, Size: 0x4]
	BillboardComponent* ShowSprite;//[Offset: 0x2dc, Size: 0x4]

--------------------------------
Class: TeamWayPointLink
	int TeamID;//[Offset: 0x0, Size: 0x4]
	WayPointLink[] Links;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0xbc, Size: 0x3c]
	enum[] HearSoundCharacterTypes;//[Offset: 0xf8, Size: 0xc]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x104, Size: 0x8]
	void OnProjectileExplode(Actor* Projectile);// 0x12eb944

--------------------------------
Class: SoundConfig
	float TransDist;//[Offset: 0x0, Size: 0x4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x2f8, Size: 0xc]
	FString HousePathFilePath;//[Offset: 0x304, Size: 0xc]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x34c, Size: 0x3c]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x388, Size: 0x4]

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: AkComponentCollector.Object
	AkComponent*[] Comps;//[Offset: 0x20, Size: 0xc]
	void UnRegister(Object* Object);// 0x12ebfe0
	void Tick(float DeltaTime);// 0x12ebf60
	void Register(Object* Object);// 0x12ebee0

--------------------------------
Class: AkSoundPlayerSceneComponent.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkSoundEvent;//[Offset: 0x238, Size: 0x4]
	Actor* BindActor;//[Offset: 0x240, Size: 0x4]

--------------------------------
Class: AnchorFlagWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	Vector4 Limit;//[Offset: 0x300, Size: 0x10]
	Vector LocOffset;//[Offset: 0x310, Size: 0xc]
	Vector2D UIOffset;//[Offset: 0x31c, Size: 0x8]
	Vector2D UITeamOffset;//[Offset: 0x324, Size: 0x8]
	int AnchorShowDistLimit;//[Offset: 0x32c, Size: 0x4]
	int CorpShowDistLimit;//[Offset: 0x330, Size: 0x4]
	int rightPlus;//[Offset: 0x334, Size: 0x4]
	float opacityFactor;//[Offset: 0x338, Size: 0x4]
	CanvasPanelSlot* CanvasPanel;//[Offset: 0x33c, Size: 0x4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x340, Size: 0x4]
	STExtraBaseCharacter* BaseCharacter;//[Offset: 0x344, Size: 0x4]
	int heightPlus;//[Offset: 0x34c, Size: 0x4]
	GridPanel* NameGridPanel;//[Offset: 0x354, Size: 0x4]
	CanvasPanel* AnchorCanvas;//[Offset: 0x358, Size: 0x4]
	CanvasPanel* CorpCanvas;//[Offset: 0x35c, Size: 0x4]
	Image* HideOrCollapsed;//[Offset: 0x360, Size: 0x4]
	TextBlock* CorpName;//[Offset: 0x364, Size: 0x4]
	void SetBaseCharacter(STExtraBaseCharacter* BC);// 0x12eceac

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0xdc, Size: 0xc]
	float[] RowFill;//[Offset: 0xe8, Size: 0xc]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x238b7c4
	bool GetDontPaintWhenChildEmpty();// 0x238b79c
	GridSlot* AddChildToGrid(Widget* Content);// 0x238b71c

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	int Row;//[Offset: 0x38, Size: 0x4]
	int RowSpan;//[Offset: 0x3c, Size: 0x4]
	int Column;//[Offset: 0x40, Size: 0x4]
	int ColumnSpan;//[Offset: 0x44, Size: 0x4]
	int Layer;//[Offset: 0x48, Size: 0x4]
	Vector2D Nudge;//[Offset: 0x4c, Size: 0x8]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x238bef8
	void SetRowSpan(int InRowSpan);// 0x238be80
	void SetRow(int InRow);// 0x238be08
	void SetPadding(Margin InPadding);// 0x238bd80
	void SetLayer(int InLayer);// 0x238bd08
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x238bc90
	void SetColumnSpan(int InColumnSpan);// 0x238bc18
	void SetColumn(int InColumn);// 0x238bba0

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x2384660
	bool GetDontPaintWhenChildEmpty();// 0x2384638
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x23845b8

--------------------------------
Class: AnimationMotionCurveComponent.ActorComponent.Object
	AnimationMotionCurveDataAsset* MotionCurveDataAsset;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: AnimationMotionCurveDataAsset.DataAsset.Object
	<FString,AnimationFloatCurveData> AnimationFloatCurves;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: AnimationFloatCurveData.AnimationCurveData
	CurveFloat* FloatCurve;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimationCurveData
	FString CurveName;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AntiCheatUtils.BlueprintFunctionLibrary.Object
	static FString GetSafeName(const Object* InObj);// 0x12ed93c

--------------------------------
Class: AObjectPoolManager.Actor.Object
	<class Object,PoolPreloadObjectItem> PreloadsMap;//[Offset: 0x2c8, Size: 0x3c]
	void PreSpawnToPool(class Object ActorClass, out const PoolPreloadObjectItem Item);// 0x12edfa4
	void PreLoadObjectsFinish();// 0x12edf90

--------------------------------
Class: PoolPreloadObjectItem
	int PreloadNum;//[Offset: 0x0, Size: 0x4]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: AreaTrigger.Actor.Object
	BoxComponent* Area;//[Offset: 0x2c8, Size: 0x4]
	int AreaID;//[Offset: 0x2cc, Size: 0x4]
	FString TriggerTag;//[Offset: 0x2d0, Size: 0xc]
	int TriggerTimes;//[Offset: 0x2dc, Size: 0x4]
	int ExitTimes;//[Offset: 0x2e0, Size: 0x4]
	bool IsExcuteOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	bool IsTimesDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]
	bool IsIgnoreAi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e6, Size: 0x1]
	float AfterFightingTime;//[Offset: 0x2e8, Size: 0x4]
	void ResetTriggerTimes();// 0x12ee748
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x12ee600
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x12ee404
	void FireExitEvent(Actor* OtherActor);// 0x12ee384
	void FireEnterEvent(Actor* OtherActor);// 0x12de094
	void CheckRecord();// 0x12ee368
	bool CheckGameModeState();// 0x12ee340

--------------------------------
Class: AreaTriggerGroup.Actor.Object
	int AreaID;//[Offset: 0x2c8, Size: 0x4]
	FString TriggerTag;//[Offset: 0x2cc, Size: 0xc]
	int TriggerTimes;//[Offset: 0x2d8, Size: 0x4]
	int ExitTimes;//[Offset: 0x2dc, Size: 0x4]
	bool IsExcuteOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	float AfterFightingTime;//[Offset: 0x2e4, Size: 0x4]
	void ResetTriggerTimes();// 0x12eed2c
	void EndOverlapDelegate(int TriggerValues, int PlayerNum);// 0x12eec70
	void BeginOverlapDelegate(int TriggerValues, int PlayerNum);// 0x12eebb4

--------------------------------
Class: AreaTriggerSphere.AreaTrigger.Actor.Object
	SphereComponent* SphereArea;//[Offset: 0x330, Size: 0x4]
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x12ef258
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x12ef05c

--------------------------------
Class: AreaTriggerWithPoints.AreaTrigger.Actor.Object
	Vector[] GetAttachPoints();// 0x12ef66c
	void FireExitEvent(Actor* OtherActor);// 0x12ee384
	void FireEnterEvent(Actor* OtherActor);// 0x12de094

--------------------------------
Class: ASTExtraRangeActor.Actor.Object
	float RangeRadius;//[Offset: 0x2c8, Size: 0x4]
	bool UseRangeActorAsCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	bool DrawDebugTraceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	void MakeRange(out const Vector OriginPos);// 0x12f0350
	void MakeEffectToOverlappedActor(Actor* OverlappedActor, out const RangeCheckRetParam RangeRetParam);// 0x12f0264
	void MakeEffectToAllOverlappedActors(<Actor*,RangeCheckRetParam> OverlapComponentMap);// 0x12efc80

--------------------------------
Class: RangeCheckRetParam
	HitResult HitResult;//[Offset: 0x0, Size: 0x88]
	bool IsBlockedBySomething;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: ASTExtraNoiseRangeActor.ASTExtraRangeActor.Actor.Object
	PropSkillNoiseRangeParam NoiseRangeParamCfg;//[Offset: 0x2d8, Size: 0x20]
	void MakeEffectToAllOverlappedActors(<Actor*,RangeCheckRetParam> OverlapComponentMap);// 0x12efc80
	void InitRangeParam(Actor* Creator, out const PropSkillNoiseRangeParam NoiseRangeParam);// 0x12efbb0

--------------------------------
Class: PropSkillNoiseRangeParam
	float GenProbility;//[Offset: 0x0, Size: 0x4]
	int PropSkillLevel;//[Offset: 0x4, Size: 0x4]
	float RangeLifeSpan;//[Offset: 0x8, Size: 0x4]
	float MarkerLifeSpan;//[Offset: 0xc, Size: 0x4]
	float RangeRadius;//[Offset: 0x10, Size: 0x4]
	int HumanBuffID;//[Offset: 0x14, Size: 0x4]
	int ZombieBuffID;//[Offset: 0x18, Size: 0x4]
	int ZombieWeakSpeakBuffID;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ASTExtraSmokeRangeActor.ASTExtraRangeActor.Actor.Object
	PropSkillSmokeDamageParam SmokeDamageParamCfg;//[Offset: 0x2d8, Size: 0x34]
	void MakeEffectToOverlappedActor(Actor* OverlappedActor, out const RangeCheckRetParam RangeRetParam);// 0x12f0264
	void InitRangeParam(Actor* Creator, out const PropSkillSmokeDamageParam SmokeDamageParam);// 0x12f0794

--------------------------------
Class: PropSkillSmokeDamageParam
	float GenProbility;//[Offset: 0x0, Size: 0x4]
	int PropSkillLevel;//[Offset: 0x4, Size: 0x4]
	float PlayerInnerDamageHealth;//[Offset: 0x8, Size: 0x4]
	float PlayerOuterDamageHealth;//[Offset: 0xc, Size: 0x4]
	float ZombieInnerDamageHealth;//[Offset: 0x10, Size: 0x4]
	float ZombieOuterDamageHealth;//[Offset: 0x14, Size: 0x4]
	float WallWeakenDamageRatio;//[Offset: 0x18, Size: 0x4]
	float InnerDamageRadius;//[Offset: 0x1c, Size: 0x4]
	float OuterDamageRadius;//[Offset: 0x20, Size: 0x4]
	float SomkeLifeSpan;//[Offset: 0x24, Size: 0x4]
	float CheckPeriod;//[Offset: 0x28, Size: 0x4]
	int HumanBuffID;//[Offset: 0x2c, Size: 0x4]
	int ZombieBuffID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: AsyncCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	class UserWidget* WidgetClass;//[Offset: 0xe8, Size: 0x28]
	delegate OnWidgetUpdate;//[Offset: 0x110, Size: 0x10]
	delegate OnWidgetCreated;//[Offset: 0x120, Size: 0x10]
	class UserWidget* WidgetClass_Loaded;//[Offset: 0x130, Size: 0x4]
	UserWidget* ChildWidget;//[Offset: 0x134, Size: 0x4]
	void RequestSyncLoad();// 0x12f0d90
	void RequestAsyncLoad();// 0x12f0d7c
	void OnWidgetUpdate__DelegateSignature(UserWidget* Widget);// 0x1c01fa0
	void OnLoadAsynFinished(SoftObjectPath softObjPath);// 0x12f0c10
	void NotifyUpdate();// 0x12f0bfc

--------------------------------
Class: AttrModifyProbeComponent.GameModeProbeComponent.ActorComponent.Object
	AttrModifyItem[] CharacterOverrideAttrConfigs;//[Offset: 0xbc, Size: 0xc]
	AttrModifyItem[] WeaponOverrideAttrConfigs;//[Offset: 0xc8, Size: 0xc]
	void SetCharacterOverrideAttrValue(FString AttrName, float AttrValue);// 0x12f1680
	void RemoveDynamicModifier(STExtraBaseCharacter* STCharacter, FString AttrModifyItemName);// 0x12f14e0
	void EnableGameModeOverrideAttrs(STExtraBaseCharacter* STCharacter);// 0x12f1468
	void AddDynamicModifier(STExtraBaseCharacter* STCharacter, FString AttrModifyItemName, float AttrValue);// 0x12f1284

--------------------------------
Class: AutoRunComponent.ActorComponent.Object
	bool IsSimulateZombieBoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]

--------------------------------
Class: AutoRunPlayerTestActor.Actor.Object
	float Interval;//[Offset: 0x2c8, Size: 0x4]
	Vector[] PortalLoctions;//[Offset: 0x2cc, Size: 0xc]

--------------------------------
Class: AutoRunTest.ActorComponent.Object
	bool IsSimulateZombieBoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0xe0, Size: 0x248]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x328, Size: 0x518]
	SlateWidgetStyleAsset* Style;//[Offset: 0x840, Size: 0x4]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x844, Size: 0x4]
	byte Orientation;//[Offset: 0x848, Size: 0x1]
	enum ScrollBarVisibility;//[Offset: 0x849, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x84a, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x84c, Size: 0x8]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 0x1]
	enum NavigationDestination;//[Offset: 0x856, Size: 0x1]
	float NavigationScrollPadding;//[Offset: 0x858, Size: 0x4]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85c, Size: 0x1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85d, Size: 0x1]
	delegate OnUserScrolled;//[Offset: 0x860, Size: 0xc]
	delegate OnUserScrolledUnused;//[Offset: 0x86c, Size: 0xc]
	void StopScroll();// 0x2396158
	void SetScrollOffset(float NewScrollOffset);// 0x23960e0
	void SetScrollBarVisibility(enum NewScrollBarVisibility);// 0x2396068
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x2395fe4
	void SetOrientation(byte NewOrientation);// 0x2395f6c
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x2395eec
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x2395e6c
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x2395dec
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination);// 0x2395ce0
	void ScrollToStart();// 0x2395ccc
	void ScrollToEnd();// 0x2395cb8
	float GetScrollOffset();// 0x2395c90
	bool GetDontPaintWhenChildEmpty();// 0x2395c68

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x90]
	SlateBrush BottomShadowBrush;//[Offset: 0x98, Size: 0x90]
	SlateBrush LeftShadowBrush;//[Offset: 0x128, Size: 0x90]
	SlateBrush RightShadowBrush;//[Offset: 0x1b8, Size: 0x90]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x90]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x98, Size: 0x90]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x128, Size: 0x90]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1b8, Size: 0x90]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x248, Size: 0x90]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2d8, Size: 0x90]
	SlateBrush NormalThumbImage;//[Offset: 0x368, Size: 0x90]
	SlateBrush HoveredThumbImage;//[Offset: 0x3f8, Size: 0x90]
	SlateBrush DraggedThumbImage;//[Offset: 0x488, Size: 0x90]

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: AutoScrollBox.ScrollBox.PanelWidget.Widget.Visual.Object
	enum AutoScrollType;//[Offset: 0x884, Size: 0x1]
	float RollSpeed;//[Offset: 0x888, Size: 0x4]
	float StayTimeWhenStart;//[Offset: 0x88c, Size: 0x4]
	float StayTimeWhenEnd;//[Offset: 0x890, Size: 0x4]

--------------------------------
Class: AutoTestInterface.ActorComponent.Object
	void StarJumpPlane();// 0x12f2160

--------------------------------
Class: AutoWeaponAutoAimingComponent.ActorComponent.Object
	Vector2D TargetScreenPos;//[Offset: 0xbc, Size: 0x8]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bUseAimPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	float TraceUpOffset;//[Offset: 0xc8, Size: 0x4]
	float DebugRectSize;//[Offset: 0xcc, Size: 0x4]
	AutoAimInfo AutoAimInfo;//[Offset: 0xd0, Size: 0x38]
	byte CurLockState;//[Offset: 0x108, Size: 0x1]
	byte PreLockState;//[Offset: 0x109, Size: 0x1]
	Vector WorldLocToAim;//[Offset: 0x10c, Size: 0xc]
	delegate OnAutoAimInfoDelegate;//[Offset: 0x118, Size: 0xc]
	delegate OnAutoAimLockStateDelegate;//[Offset: 0x124, Size: 0xc]
	bool bHasInitCacheTargetList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	bool bLostAutoAimTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1]
	float RotateBackSpeed;//[Offset: 0x158, Size: 0x4]
	float SimulateRotateSpeed;//[Offset: 0x15c, Size: 0x4]
	float RpcRotationTime;//[Offset: 0x160, Size: 0x4]
	float LastRpcRotationTime;//[Offset: 0x164, Size: 0x4]
	void TryDoAutoAim(float DeltaTime);// 0x12f2958
	void SetLockDelayTime(float NewDelayTime);// 0x12f28e0
	void ResetLockDelayTime();// 0x12f28cc
	void RemoveTarget(Actor* Target);// 0x12f2854
	void OnLockTimerOver();// 0x12e0f50
	void InitCacheTargetList();// 0x12f2840
	Actor*[] GetCacheTargetList();// 0x12f27d8
	void DrawDebugInfo();// 0x12e82e4
	void ChangeLockState(byte InState);// 0x12f2758
	void CalcLockActor(float Delta);// 0x12e0ed0
	void AddTarget(Actor* Target);// 0x12f26e0

--------------------------------
Class: AutoAimInfo
	class Actor* AimClass;//[Offset: 0x0, Size: 0x4]
	Vector AimOffset;//[Offset: 0x4, Size: 0xc]
	float MaxAimDistance;//[Offset: 0x10, Size: 0x4]
	float MaxAimScreenDis;//[Offset: 0x14, Size: 0x4]
	Vector2D ScreenAimRect;//[Offset: 0x18, Size: 0x8]
	float DefaultLockDelay;//[Offset: 0x24, Size: 0x4]
	FName LockSocketName;//[Offset: 0x28, Size: 0x8]
	float DotValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: BaseInterface.Interface.Object

--------------------------------
Class: AvatarAssetInterface.BaseInterface.Interface.Object

--------------------------------
Class: AvatarAssetUtils.BlueprintFunctionLibrary.Object
	static bool SetParticleComponentParam(ParticleSystemComponent* InParticleSystemComp, out const ParticleSysParam[] InstanceParameters);// 0x12f4a90
	static bool SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x12f48cc
	static bool RequestLoadParticleAssetWithCallback(MeshComponent* InMeshComp, out const ParticleAsset[] InParticleAsset, out ParticleGroup InParticleGroup, delegate DelegateToCall);// 0x12f4688
	static bool RequestLoadParticleAsset(MeshComponent* InMeshComp, out const ParticleAsset[] InParticleAsset, out ParticleGroup InParticleGroup);// 0x12f44b8
	static bool RequestLoadMeshAssetWithCallback(MeshComponent* InMeshComp, out const MeshAsset[] InMeshAsset, out MeshGroup InMeshGroup, delegate DelegateToCall);// 0x12f4274
	static bool RequestLoadMeshAsset(MeshComponent* InMeshComp, out const MeshAsset[] InMeshAsset, out MeshGroup InMeshGroup);// 0x12f40a0
	static bool RemoveParticleComponent(MeshComponent* InMeshComp, out ParticleGroup InParticleGroup);// 0x12f3f48
	static bool RemoveMeshComponent(MeshComponent* InMeshComp, out MeshGroup InMeshGroup);// 0x12f3dec
	static bool RefreshMeshComponentTransform(MeshComponent* InMeshComp, out const MeshGroup InMeshGroup);// 0x12f3c90
	static MaterialInstanceDynamic* GetOrCreateDynamicMaterial(MeshComponent* InMeshComp, out const FName SlotName);// 0x12f3bc0
	static AvatarAssetBPUtils* GetBPUtils();// 0x12f3b98
	static bool CreateParticleComponent(MeshComponent* InMeshComp, out ParticleGroup InParticleGroup);// 0x12f3a40
	static bool CreateMeshComponent(MeshComponent* InMeshComp, out MeshGroup InMeshGroup);// 0x12f38e4

--------------------------------
Class: MeshAsset
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 0x28]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 0x28]
	FName AttachSocket;//[Offset: 0x80, Size: 0x8]
	enum meshType;//[Offset: 0x88, Size: 0x1]
	class AnimInstance* animBP;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: MeshGroup
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 0xc]
	Object*[] MeshObjectList;//[Offset: 0xc, Size: 0xc]
	MeshComponent*[] MeshCompList;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: AvatarAssetBPUtils.Object
	<int,LoadMeshAssetRequest> PendingMeshRequestList;//[Offset: 0xb4, Size: 0x3c]
	<int,LoadParticleAssetRequest> PendingParticleRequestList;//[Offset: 0xf0, Size: 0x3c]
	bool SetParticleComponentParam(ParticleSystemComponent* InParticleSystemComp, out const ParticleSysParam[] InstanceParameters);// 0x12f60dc
	bool SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x12f5f10
	bool RequestLoadParticleAsset(MeshComponent* InMeshComp, out const ParticleAsset[] InParticleAsset, out ParticleGroup InParticleGroup, delegate DelegateToCall);// 0x12f5cc0
	bool RequestLoadMeshAsset(MeshComponent* InMeshComp, out const MeshAsset[] InMeshAsset, out MeshGroup InMeshGroup, delegate DelegateToCall);// 0x12f5a70
	bool RemoveParticleComponent(MeshComponent* InMeshComp, out ParticleGroup InParticleGroup);// 0x12f5910
	bool RemoveMeshComponent(MeshComponent* InMeshComp, out MeshGroup InMeshGroup);// 0x12f57ac
	bool RefreshMeshComponentTransform(MeshComponent* InMeshComp, out const MeshGroup InMeshGroup);// 0x12f5648
	void OnAsynParticleAssetLoaded(int RequestID);// 0x12f55d0
	void OnAsynMeshAssetLoaded(int RequestID);// 0x12f5558
	MaterialInstanceDynamic* GetOrCreateDynamicMaterial(MeshComponent* InMeshComp, out const FName SlotName);// 0x12f5480
	bool CreateParticleComponent(MeshComponent* InMeshComp, out ParticleGroup InParticleGroup);// 0x12f5320
	bool CreateMeshComponent(MeshComponent* InMeshComp, out MeshGroup InMeshGroup);// 0x12f51bc

--------------------------------
Class: LoadMeshAssetRequest
	MeshAsset[] MeshAsset;//[Offset: 0x0, Size: 0xc]
	MeshGroup MeshGroup;//[Offset: 0xc, Size: 0x24]
	MeshComponent* Outer;//[Offset: 0x30, Size: 0x4]
	delegate Callback;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: LoadParticleAssetRequest
	ParticleAsset[] ParticleAsset;//[Offset: 0x0, Size: 0xc]
	ParticleGroup ParticleGroup;//[Offset: 0xc, Size: 0x24]
	MeshComponent* Outer;//[Offset: 0x30, Size: 0x4]
	delegate Callback;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: AvatarCharacterEffect.BaseInterface.Interface.Object
	void OnIsInvincibleChange(bool bInvincible);// 0x12f95d0
	void OnAdapteGameMode();// 0x12f95b4
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x12f94e4
	void DrawFresnelEffect(bool Enable, int SlotID);// 0x12f9414

--------------------------------
Class: AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	AnimMontage* AnimMontage;//[Offset: 0x238, Size: 0x4]
	FString PlayerName;//[Offset: 0x23c, Size: 0xc]
	int gender;//[Offset: 0x248, Size: 0x4]
	int[] InitialAvatarItem;//[Offset: 0x24c, Size: 0xc]
	int[] InitialWeaponItem;//[Offset: 0x258, Size: 0xc]
	STExtraLobbyCharacter* LobbyPawn;//[Offset: 0x264, Size: 0x4]
	CharacterAvatarComponent2* PlayerAvatar;//[Offset: 0x268, Size: 0x4]
	void SpawnAvatar();// 0x12fd530

--------------------------------
Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 0x1]
	FString LobbyPlayerKey;//[Offset: 0x5e8, Size: 0xc]
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x5f4, Size: 0xc]
	byte charSceneType;//[Offset: 0x600, Size: 0x1]
	byte lobbyPosIdx;//[Offset: 0x601, Size: 0x1]
	int localLobbyPos;//[Offset: 0x604, Size: 0x4]
	class AnimInstance* LobbyMaleAnimClass;//[Offset: 0x608, Size: 0x28]
	class AnimInstance* LobbyFemaleAnimClass;//[Offset: 0x630, Size: 0x28]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x658, Size: 0x4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x65c, Size: 0x4]
	int resultAvatarPoseIndex;//[Offset: 0x660, Size: 0x4]
	delegate lobbyAnimMontagePlayDelegate;//[Offset: 0x664, Size: 0xc]
	delegate lobbyAnimWeaponChangeDelegate;//[Offset: 0x670, Size: 0xc]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x67c, Size: 0xc]
	SoftObjectPath[] CurEmotePathList;//[Offset: 0x6a0, Size: 0xc]
	AnimationAsset*[] CurEmoteAnimList;//[Offset: 0x6ac, Size: 0xc]
	<FString,AnimMontage*> loadedEmoteMontageMap;//[Offset: 0x6b8, Size: 0x3c]
	int CurrentEmoteIndex;//[Offset: 0x6f4, Size: 0x4]
	AnimMontage* CurrentLoadedEmoteMontage;//[Offset: 0x6f8, Size: 0x4]
	BackpackEmoteHandle* curHandle;//[Offset: 0x6fc, Size: 0x4]
	BackpackEmoteHandle* lastHandle;//[Offset: 0x700, Size: 0x4]
	delegate EmoteMontageStartEvent;//[Offset: 0x704, Size: 0xc]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x710, Size: 0xc]
	AkComponent* emoteSound_Comp;//[Offset: 0x71c, Size: 0x4]
	delegate SimulateHurtEvent;//[Offset: 0x720, Size: 0xc]
	class LobbyGodEffectComponent* GodEffectComponentPath;//[Offset: 0x730, Size: 0x28]
	bool IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 0x1]
	delegate LobbyPoseWithFriend;//[Offset: 0x75c, Size: 0xc]
	delegate LobbyCancelPoseWithFriend;//[Offset: 0x768, Size: 0xc]
	void UnequipWeapon(STExtraWeapon* Weapon);// 0x149149c
	void SimulateHurt(bool bHurt);// 0x149141c
	void SetStatueInfo(out const CharacterStatueInfo Info);// 0x1491338
	void SetResultAvatarPosIndex(int posIndex);// 0x14912c0
	void SetMaleAnimClass();// 0x14912a4
	void SetLobbyPosIndexInAvatarScene(int Pos);// 0x149122c
	void SetLobbyPosIndex(byte Pos);// 0x14911ac
	void SetFemaleAnimClass();// 0x1491190
	void SetCharSceneType(byte sceneType);// 0x1491110
	void PlayGodEffect(int Level);// 0x1491098
	void PlayEmoteSound();// 0x1491084
	void PlayEmoteInterruptSound();// 0x1491070
	bool OnStopEmote();// 0x1491048
	bool OnPlayEmote(int EmoteId);// 0x1490fc8
	void OnAsyncLoadEmoteAnimList();// 0x1490fb4
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim);// 0x1490e34
	void LoadAnimSoftPtrListFromIndex();// 0x1490e20
	AnimationAsset* LoadAnimSoftPtrFromIndex(int Index);// 0x1490d3c
	void HandleOnCharAnimLoadingFinished();// 0x1490d28
	AELobbyCharAnimListComp* GetWeaponAnimComponent();// 0x1490d00
	AnimationAsset* GetWeaponAnimByAnimTypeAndPosType(byte AnimType, byte PoseType);// 0x1490c3c
	byte GetLobbyPosIndex();// 0x1490c14
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x1c01fa0
	STExtraWeapon* GetCurrentWeapon();// 0x1490bec
	int GetCurrentEmoteId();// 0x1490bc4
	byte GetCharSceneType();// 0x1490b9c
	AnimationAsset* GetCharacterAnimByAnimTypeAndPosType(byte AnimType, byte PoseType);// 0x1490ad8
	void EquipWeapon(STExtraWeapon* Weapon);// 0x1490a60
	bool EmoteAnimFinishedSuccessfully();// 0x1490a38
	void CallGlobalLuaFunction(FString FunctionName);// 0x149097c

--------------------------------
Class: LobbyGodEffectComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* ParticleEffect1;//[Offset: 0x238, Size: 0x28]
	ParticleSystem* ParticleEffect2;//[Offset: 0x260, Size: 0x28]
	ParticleSystem* ParticleEffect3;//[Offset: 0x288, Size: 0x28]
	class UserWidget* GodEffectWidget;//[Offset: 0x2b0, Size: 0x4]
	WidgetComponent* WidgetComponent;//[Offset: 0x2b4, Size: 0x4]
	void StopEffect();// 0x13b82a8
	void SetNameText(int TextId);// 0x1340e70
	void PlayGodEffect(int Level, Vector Location);// 0x13b81e8
	void OnAsyncLoadEffectFinish(int Level, Vector Location);// 0x13b8128

--------------------------------
Class: CharacterStatueInfo
	int AGender;//[Offset: 0x0, Size: 0x4]
	int Head;//[Offset: 0x4, Size: 0x4]
	int hair;//[Offset: 0x8, Size: 0x4]
	int WeaponID;//[Offset: 0xc, Size: 0x4]
	FString Name;//[Offset: 0x10, Size: 0xc]
	FString Nation;//[Offset: 0x1c, Size: 0xc]
	int[] AvatarList;//[Offset: 0x28, Size: 0xc]
	GameModePlayerItem[] AvatarInfoList;//[Offset: 0x34, Size: 0xc]
	int Index;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x154, Size: 0xc]
	int resultAvatarPoseIndex;//[Offset: 0x160, Size: 0x4]
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x185781c
	AnimationAsset* GetCharacterAnim(byte AnimType, byte PoseType);// 0x1857758

--------------------------------
Class: AvatarDynamicAnimInstance.AnimInstance.Object
	enum InGameSimulationSpace;//[Offset: 0x2ec, Size: 0x1]
	enum LobbySimulationSpace;//[Offset: 0x2ed, Size: 0x1]
	float AnimDynAlpha;//[Offset: 0x2f0, Size: 0x4]
	enum CurrentSimulateSpace;//[Offset: 0x2f4, Size: 0x1]
	SkeletalMeshComponent* OwnerCharacterMesh;//[Offset: 0x2f8, Size: 0x4]

--------------------------------
Class: CharacterEntityFactory.AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int subSlotID);// 0x1300138

--------------------------------
Class: AvatarLightMatInterface.BaseInterface.Interface.Object

--------------------------------
Class: AvatarPendantAnimInstance.AnimInstance.Object
	TimerHandle UpdateLocalJointOffsetTimerHandle;//[Offset: 0x2f0, Size: 0x8]
	float LocalJointOffsetUpdateInterval;//[Offset: 0x2f8, Size: 0x4]
	STExtraVehicleBase* CharacterVechicle;//[Offset: 0x2fc, Size: 0x8]
	STExtraBaseCharacter* AvatarCharacter;//[Offset: 0x304, Size: 0x8]
	bool bUseDynamicAngularLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	Vector Dynamic_AngularLimitsMin;//[Offset: 0x310, Size: 0xc]
	Vector Dynamic_AngularLimitsMax;//[Offset: 0x31c, Size: 0xc]
	Vector LocalJointOffset;//[Offset: 0x328, Size: 0xc]
	Vector HighSpeedLocalJointOffset;//[Offset: 0x334, Size: 0xc]
	Vector LowSpeedLocalJointOffset;//[Offset: 0x340, Size: 0xc]
	float HighSpeed;//[Offset: 0x34c, Size: 0x4]
	void UpdateLocalJointOffset();// 0x1301318
	void StopUpdateLocalJointOffset();// 0x13012fc
	void StartUpdateLocalJointOffset();// 0x12fe8f0
	void SetDynamicAngularLimits(out const Vector InAngularLimitsMin, out const Vector InAngularLimitsMax, STExtraBaseCharacter* InTargetCharacter);// 0x13011dc
	void OnCharacterDetachedFromVehicle(STExtraVehicleBase* InTargetVehicle);// 0x1301164
	void OnCharacterAttachedToVehcicle(STExtraVehicleBase* InTargetVehicle);// 0x13010ec

--------------------------------
Class: AvatarPoolInterface.BaseInterface.Interface.Object
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1301a0c
	ItemHandleBase* GetAvatarHandleFromPool(out const ItemDefineID InItemID, Object* Outer, bool bDirectCreate);// 0x13018dc
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x13017f8
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x1301760
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x12df754

--------------------------------
Class: AvatarUtils.BlueprintFunctionLibrary.Object
	static bool IsAvatarHandlePathExist(FString HandlePath);// 0x1303884
	static void InitWeaponAttrBPTable();// 0x1303870
	static void GetWeaponAvatarParentIDList(int InWeaponAvatarID, out int[] OutParentIDList);// 0x1303768
	static int GetWeaponAvatarParentID(int InWeaponAvatarID);// 0x13036f0
	static void GetWeaponAvatarDefaultAttachmentSkin(int InWeaponAvatarID, out <int,int> OutAttachmentSkinIDList);// 0x13035a8
	static void GetWeaponAvatarDefaultAttachment(int InWeaponAvatarID, out int[] OutAttachmentIDList);// 0x13034a0
	static class Object GetWeaponAvatarDeadInventoryBoxClass(int InWeaponAvatarID, Object* InOuter);// 0x13033e4
	static bool GetWeaponAvatarAttrRowByWeaponBPID(int InBPID, out WeaponAvatarAttrRow OutWeaponAvatarAttrRow);// 0x13032c0
	static int GetWeaponAttachmentSkinParentID(int WeaponAttacementBPID);// 0x1303248
	static int GetVehicleShapeBySkinID(int InVehicleSkinID);// 0x13031d0
	static bool GetVehicleDefaultStyleID(int InVehicleSkinID, out int[] OutStyleIDList);// 0x13030c0
	static FString GetVehicleBPPathBySkinID(int InVehicleSkinID);// 0x1302fc0
	static int GetVehicleAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x1302f30
	static void GetVehicleAvatarModifyEnterSocket(int InVehicleSkinID, out FName[] OutSocketList);// 0x1302e28
	static int GetClothAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x1302d98
	static void GetClothAvatarSuits(int gender, out const ItemDefineID ItemDefineID, out int[] OutClothSuits);// 0x1302c34
	static AvatarBPUtils* GetBPUtils();// 0x1302c0c
	static int GetBPIDByResID(int resID);// 0x1302b94
	static void GetAvatarReplaceState(int SlotID, int ReplaceState, int MaxSlotNum, out int[] OutReplaceSlotID);// 0x1302a04
	static void GetAvatarHideState(int SlotID, int HideState, int MaxSlotNum, out int[] OutHideSlotID);// 0x1302a04
	static FString GetAvatarHandlePath(ItemDefineID DefineID);// 0x13028f4
	static void GetAvatarDataFromTable(int ItemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x1302790
	static void CreateAvatarHandleListAsync(out const ItemDefineID[] DefineIDList, Object* Outer, delegate Delegate);// 0x1302614
	static bool CreateAvatarHandleAsync(ItemDefineID DefineID, Object* Outer, delegate Delegate);// 0x13024e0
	static AvatarHandleBase* CreateAvatarHandle(ItemDefineID DefineID, Object* Outer);// 0x130241c

--------------------------------
Class: WeaponAvatarAttrRow

--------------------------------
Class: AvatarBPUtils.Object
	CreateAvatarHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xf0, Size: 0xc]
	<int,CreateAvatarHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0xfc, Size: 0x3c]
	void StringToArrayString(FString str, out FString[] OutArray, FString Sign);// 0x1305a04
	void StringToArrayName(FString str, out FName[] OutArray);// 0x1305814
	void StringToArray(FString str, out int[] OutArray);// 0x1305624
	void InitWeaponAttrBPTable();// 0x1305610
	int GetVehicleShapeBySkinID(int InVehicleSkinID);// 0x1305588
	bool GetVehicleDefaultStyleID(int InVehicleSkinID, out int[] OutStyleIDList);// 0x1305468
	FString GetVehicleBPPathBySkinID(int InVehicleSkinID);// 0x1305358
	int GetVehicleAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x13052b8
	void GetVehicleAvatarModifyEnterSocket(int InVehicleSkinID, out FName[] OutSocketList);// 0x13051a0
	int GetClothAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x1305100
	void GetClothAvatarSuits(int gender, out const ItemDefineID ItemDefineID, out int[] OutClothSuits);// 0x1304f8c
	int GetBPIDByResID(int resID);// 0x1304f04
	FString GetAvatarHandlePath(ItemDefineID DefineID);// 0x1304de4
	void GetAvatarDataFromTable(int ItemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x1304c78
	AvatarHandleBase* CreateAvatarHandle(ItemDefineID DefineID, Object* Outer);// 0x1304b9c
	void ConstructAvatarDataFromTable(int ItemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x1304a28

--------------------------------
Class: CreateAvatarHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	Object* Outer;//[Offset: 0x18, Size: 0x4]
	FString Path;//[Offset: 0x1c, Size: 0xc]
	delegate Callback;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: CreateAvatarHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 0xc]
	FString[] PathList;//[Offset: 0xc, Size: 0xc]
	Object* Outer;//[Offset: 0x18, Size: 0x4]
	delegate Callback;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: AvatarVehicleEffect.BaseInterface.Interface.Object
	void OnIsInvincibleChange(bool bInvincible);// 0x1306500
	void DrawOutlineEffect(enum OutlineType, int SlotID);// 0x130643c

--------------------------------
Class: BackpackAvatarInterface.Interface.Object
	bool IsVirtualAvatarHandle();// 0x12df88c
	bool IsForceIgnoreSlotSocket();// 0x130688c
	int GetSubSlotID();// 0x130685c
	int GetSlotID();// 0x12df7d4

--------------------------------
Class: BackpackGrenadeAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemDefineID ParentID;//[Offset: 0xf8, Size: 0x18]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x110, Size: 0x18]
	enum[] SupportChangeTypes;//[Offset: 0x128, Size: 0xc]
	GrenadeParticleSystemAsset[] GrenadeParticleSystemArray;//[Offset: 0x134, Size: 0xc]
	GrenadeSoundAsset[] GrenadeSoundArray;//[Offset: 0x140, Size: 0xc]

--------------------------------
Class: GrenadeParticleSystemAsset
	ParticleSystem* GrenadeParticleSystem;//[Offset: 0x0, Size: 0x28]
	FName Name;//[Offset: 0x28, Size: 0x8]
	FString Key;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: GrenadeSoundAsset
	AkAudioEvent* GrenadeSound;//[Offset: 0x0, Size: 0x28]
	FName Name;//[Offset: 0x28, Size: 0x8]
	FString Key;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: BackpackPlaneAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	PlaneAvatarData[] PlaneAvatarMats;//[Offset: 0x9c, Size: 0xc]
	SkeletalMesh* PlaneSkletalMesh;//[Offset: 0xa8, Size: 0x28]
	StaticMesh* PlaneStaticMesh;//[Offset: 0xd0, Size: 0x28]
	FName[] NeedDestroyEffectNames;//[Offset: 0xf8, Size: 0xc]
	PlaneEffectData[] PlaneEffectDataList;//[Offset: 0x104, Size: 0xc]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x13086dc
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x13082c8
	bool HandleDrop(int InCount, enum Reason);// 0x1307dd4
	bool HandleDisuse(enum Reason);// 0x1307d4c
	BackpackComponent* GetBackpackComponent();// 0x130bc40
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x130bb7c

--------------------------------
Class: PlaneAvatarData
	FName SlotID;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: PlaneEffectData
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 0x28]
	FName AttachSocket;//[Offset: 0x58, Size: 0x8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: BackpackSnowboardItemHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0x9c, Size: 0x4]
	class STExtraVehicleBase* SpawnVehicle;//[Offset: 0xa0, Size: 0x28]
	STExtraVehicleBase* CreatedVehicle;//[Offset: 0xc8, Size: 0x4]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0xd0, Size: 0x4]
	Transform WrapperPutdownTrans;//[Offset: 0xe0, Size: 0x30]
	PickUpWrapperActor* SpawnWrapperOnGround(class Object InWrapperClass, bool bUseRandomLoc);// 0x130d360
	void SetDelayDestroy(float Time);// 0x130d2e8
	void OnEnterVehicle(bool IsSucc);// 0x130d268
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x13086dc
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x13082c8
	bool HandleEnable(bool bEnable);// 0x1307ea0
	bool HandleDrop(int InCount, enum Reason);// 0x1307dd4
	bool HandleDisuse(enum Reason);// 0x1307d4c
	BackpackComponent* GetBackpackComponent();// 0x130d240
	BattleItemData ExtractItemData();// 0x130d1d4
	void DelayDestroy();// 0x130d1c0
	bool CheckDropPreHandle();// 0x130d198
	bool CheckCanEnable();// 0x130d168

--------------------------------
Class: ReuseListForUI.Object
	int[] List;//[Offset: 0x1c, Size: 0xc]
	void ShiftRound(bool REVERT);// 0x130e5b0
	void Reset(int Length);// 0x130e538
	int Get(int Index);// 0x130e4b8

--------------------------------
Class: BackpackUtils.BlueprintFunctionLibrary.Object
	static void UpdateAddtionData(BattleItemAdditionalData InData, out BattleItemAdditionalData[] OutAddtionData);// 0x1315de8
	static PickupItemDataSortingInfo[] SortPickupItemDataList(out const PickupItemDataSortingInfo[] PickupList);// 0x1315d18
	static ItemDefineSortingInfo[] SortDefineIDByWeight(out const ItemDefineSortingInfo[] DefineIDList);// 0x1315bcc
	static void SortBattleSearchItemList_CPP(out const BattleSearchItemSortingInfo[] ItemList, out BattleSearchItemSortingInfo[] OutData);// 0x1315ab0
	static BattleSearchItemSortingInfo[] SortBattleSearchItemList(out const BattleSearchItemSortingInfo[] ItemList);// 0x13159e0
	static void SortBattleSearchBoxList_CPP(out const BattleSearchBoxSortingInfo[] BoxList, out BattleSearchBoxSortingInfo[] OutData);// 0x13158c4
	static BattleSearchBoxSortingInfo[] SortBattleSearchBoxList(out const BattleSearchBoxSortingInfo[] BoxList);// 0x13157f4
	static BattleItemSortingInfo[] SortBattleItemList(out const BattleItemSortingInfo[] ItemList);// 0x13156a8
	static bool ShouldReusePickupWrapperClass(out const ItemDefineID DefineID);// 0x1315618
	static bool ShouldAutoPickItem(UAEUserWidget* UserWidget, const BackpackComponent* BackpackComp, bool bAutoPickupSwitcher, bool bAutoPickupSwitcherPve, bool bHideforAim, bool bIsTrainingMode, bool bForbitAutoPickbyMode);// 0x13153d0
	static void SetWeaponPendantShow(bool bShow);// 0x1315358
	static void SetIsNeedInitTable(bool IsNeedInit);// 0x13152d4
	static int ReturnIteratively(BackpackComponent* BackpackComp, ItemDefineID DefineID, int count, bool bCallHandlePickup);// 0x1315170
	static bool PickUpListSearchTombCache(UAEUserWidget* UserWidget, out const SearchedTombBoxAndWrapperListResult[] TombBoxResultArray, int UsefulCount, int UsefulLimit);// 0x1314f8c
	static bool PickUpListSearchPickupGroundCache(UAEUserWidget* UserWidget, out const SearchedPickUpItemResult[] ItemResultArray, int UsefulCount, int UsefulLimit);// 0x1314e10
	static void PickUpListItemMakeSureListEnough(int count, WrapBox* WrapBoxList, bool DivisionTick, out bool OutDivisionTick);// 0x1314cb8
	static void PickUpListBoxCheckSum(out const SearchedPickUpItemResult[] ItemResultArray, int CheckSum, out int OutCheckSum);// 0x1314b78
	static void PickupFromGround(BackpackComponent* BackpackComp, PickUpWrapperActor* Source, BattleItemUseTarget AutoEquipTarget, bool bForceAutoEquip, int pickCount);// 0x13149b8
	static BattleItemData ItemNet2Data(out const NetArrayUnit netItem);// 0x1314804
	static bool IsValidRevivalCard(STExtraPlayerState* PlayerState);// 0x131478c
	static bool IsTaskItemType(int ItemType);// 0x1314714
	static bool IsScoreItemType(int ItemID);// 0x131469c
	static bool IsSameItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x13145b0
	static bool IsSameInstance(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x13144c4
	static bool IsRevivalCardID(int InID);// 0x131444c
	static bool IsRevivalCard(out const BattleSearchBoxSortingInfo BoxSortingInfo);// 0x13142e8
	static bool IsPatchItem(int ItemID);// 0x1314270
	static bool IsPatchDefineItem(out const ItemDefineID InDefineItemID);// 0x13141e0
	static bool IsGunItemType(int ItemType);// 0x1314168
	static bool IsGlideItemType(int ItemID);// 0x13140f0
	static bool IsGhillieSuitItemType(int ItemID);// 0x1314078
	static bool IsCharacterVirtualItem(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x1313fa8
	static bool IsBattleItemHandlePathExist(FString HandlePath);// 0x1313eec
	static bool IsBattleItemHandleExist(out const ItemDefineID DefineID, bool bUseCache);// 0x1313e10
	static bool IsBatteryChipItem(int TypeDefineID);// 0x1313d98
	static void InitialItemTable();// 0x1313d84
	static bool HasTagSub(int ItemID, out const FName TagName);// 0x1313cb4
	static bool HasTag(int ItemID, out const FName TagName);// 0x1313be4
	static bool HasSkillPropsBySubTypeInBackpack(BackpackComponent* BackpackComp, int subType);// 0x1313b28
	static bool HasItemBySubType(int subType, BackpackComponent* BackpackComp);// 0x1313a6c
	static FString GetWrapperActorPath(ItemDefineID DefineID);// 0x131395c
	static class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x13138dc
	static int GetWeaponSkinWeaponID(int InWeaponSkinID);// 0x1313864
	static int GetWeaponSkinMappingID(int InWeaponSkinID);// 0x13137ec
	static BattleItemData[] GetWeaponsInBackpack(BackpackComponent* BackpackComp);// 0x131369c
	static class Object GetWeaponClass(out const ItemDefineID DefineID);// 0x131360c
	static void GetWeaponAttachmentsInBackpack(BackpackComponent* BackpackComp, out BattleItemData[] Out);// 0x13134cc
	static BattleItemHandleBase*[] GetWeaponAttachmentHandles(BackpackComponent* BackpackComp);// 0x13133cc
	static BattleSearchItemSortingInfo[] GetUsefulPickupItemToItemSortingInfos(UAEUserWidget* Widget, out const SearchedPickUpItemResult[] PickUpItemResults);// 0x13132b8
	static BattleSearchBoxSortingInfo[] GetUsefulPickupItemToBoxSortingInfos(UAEUserWidget* Widget, out const SearchedPickUpItemResult[] PickUpItemResults);// 0x13132b8
	static enum getSocketByAttachResID(int resID);// 0x1313240
	static int GetSkillPropsCountBySubType(BackpackComponent* BackpackComp, int InSubType);// 0x1313184
	static BattleItemData[] GetSkillPropsBySubTypeInBackpack(BackpackComponent* BackpackComp, int InSubType);// 0x1312ff0
	static float GetRevivalCardValidTime();// 0x1312fc8
	static int GetRevivalCardID();// 0x1312fa0
	static FString GetRawBattleTextByType(enum Type);// 0x1312ea0
	static FString GetRawBattleTextByRawTextID(int ID);// 0x1312da0
	static int GetPickupItemResultIndentify(out const SearchedPickUpItemResult SearchItemResult);// 0x1312c48
	static int GetPendantIDByWeaponID(int WeaponID);// 0x1312bd0
	static int GetOneSkillPropIDBySubTypeInBackpack(BackpackComponent* BackpackComp, int subType);// 0x1312b14
	static int GetItemUsefulByJudge(BackpackComponent* BackpackComp, WeaponManagerComponent* weaponComp, out const ItemDefineID DefineID, out const JudgePickupUsefulItem JudgePickUseful);// 0x13128d4
	static int GetItemUseful2(UAEUserWidget* Widget, out const ItemDefineID ID, out const SearchedPickUpItemResult pickUpItemResult);// 0x13126dc
	static int GetItemUseful(BackpackComponent* BackpackComp, WeaponManagerComponent* weaponComp, out const ItemDefineID DefineID, out const SearchedPickUpItemResult SearchItemResult);// 0x13124a0
	static int GetItemSubType(int ItemDefineID);// 0x1312428
	static ItemRecordData GetItemRecord(int ItemID);// 0x1312384
	static bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x1312198
	static int GetItemCountByType(BackpackComponent* BackpackComp, int ItemType);// 0x13120dc
	static int GetItemCountByDefineIDUnEquip(BackpackComponent* BackpackComp, ItemDefineID DefineID, bool bOnlyInstance);// 0x1311fbc
	static int GetItemCountByDefineID(BackpackComponent* BackpackComp, out const ItemDefineID DefineID, bool bOnlyInstance);// 0x1311e9c
	static void GetHelmetInBackpack(BackpackComponent* BackpackComp, out BattleItemData[] Out);// 0x1311d5c
	static int GetGrenadePriorityByType(byte Type);// 0x1311ce4
	static int GetEquipmentLevel(int ItemID);// 0x1311c6c
	static bool GetEquipmentBriefMapItem(int TypeDefineID, out int ItemID, out int ItemSubType, out int BPID);// 0x1311af0
	static int GetEquipmentBagLevel(int ItemID);// 0x1311a78
	static BattleItemData[] GetEmoteItemInBackpack(BackpackComponent* BackpackComp);// 0x1311928
	static FString GetDynamicMeshPath(out const ItemDefineID DefineID);// 0x1311810
	static FString GetDynamicMaterialPath(out const ItemDefineID DefineID);// 0x13116f8
	static BattleItemData[] GetDecalItemInBackpack(BackpackComponent* BackpackComp);// 0x13115a8
	static BattleItemData[] GetConsumablesInBackpack(BackpackComponent* BackpackComp);// 0x1311458
	static void GetClothingAndArmorInBackpack(BackpackComponent* BackpackComp, out BattleItemData[] Out);// 0x1311318
	static BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x1311274
	static BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x13111fc
	static BackpackBlueprintUtils* GetBPUtils();// 0x13111d4
	static FString GetBPTableNameByItemID(ItemDefineID DefineID);// 0x13110c4
	static int GetBPIDByResID(int resID);// 0x131104c
	static BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(ItemDefineID DefineID);// 0x1310edc
	static FString GetBattleItemHandlePath(ItemDefineID DefineID);// 0x1310dcc
	static void GetBattleItemFeatureDataByDefineID_CPP(out const ItemDefineID DefineID, out BattleItemFeatureData OutData);// 0x1310cd8
	static BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x1310c3c
	static int GetBatteryChipID();// 0x1310c14
	static void GetBagInBackpack(BackpackComponent* BackpackComp, out BattleItemData[] Out);// 0x1310ad4
	static byte GetBackpackItemType(const ItemDefineID ItemDefineID);// 0x1310a44
	static void GetAttackTipDataByDamageEventType(int DamageType, int subType, out FString OutAttackName, out FString OutAttackActionName);// 0x1310860
	static int GetAssociationsUseful(BackpackComponent* BackpackComp, WeaponManagerComponent* weaponComp, out const ItemDefineID DefineID);// 0x1310748
	static void GetArmorInBackpack(BackpackComponent* BackpackComp, out BattleItemData[] Out);// 0x1310608
	static BattleItemData[] GetAllSkillPropsInBackpack(BackpackComponent* BackpackComp);// 0x13104b8
	static BattleItemData[] GetAllItemsInBackpackWithSubType(BackpackComponent* BackpackComp, out const int[] SubTypes);// 0x13102d4
	static BattleItemData[] GetAllItemsInBackpack(BackpackComponent* BackpackComp, bool bIncludeVirtualItems);// 0x1310138
	static BattleItemAdditionalData GetAddtionalData(out const FName InName, out const BattleItemAdditionalData[] InAdditionData);// 0x130ff10
	static uint64 GenerateRandomInstanceID();// 0x130fee8
	static ItemDefineID GenerateItemDefineIDWithRandomInstanceID(int Type, int TypeSpecificID);// 0x130fe18
	static ItemDefineID GenerateItemDefineIDByItemTableIDWithRandomInstanceID(int ItemTableID);// 0x130fd8c
	static void ForceDropItems(BackpackComponent* BackpackComp, out const int[] ItemTableList);// 0x130fc84
	static void ForceDropItemCannotCarryOnPlane(BackpackComponent* BackpackComp);// 0x130fc14
	static void ForceDropAll(BackpackComponent* BackpackComp);// 0x130fba4
	static PickUpWrapperItem[] ExtractPickupWrapperItems(BackpackComponent* BackpackComp);// 0x130fb00
	static void EnableItemBySubType(int subType, bool bEnable, BackpackComponent* BackpackComp);// 0x130f9fc
	static void CreateBattleItemHandleListAsync(out const ItemDefineID[] DefineIDLists, Object* Outer, delegate Delegate);// 0x130f880
	static bool CreateBattleItemHandleAsync(ItemDefineID DefineID, Object* Outer, delegate Delegate);// 0x130f74c
	static BattleItemHandleBase* CreateBattleItemHandle(ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x130f638
	static BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x130f594
	static BattleItemData ConstructBattleItemDataByDefineID(ItemDefineID DefineID);// 0x130f4e0
	static void ClearItemUsefulCacheByDefineID(out const ItemDefineID DefineID);// 0x130f458
	static void ClearItemUsefulCache();// 0x130f444
	static void ClearEquipmentBriefMap();// 0x130f430
	static bool CheckItemUsefulByJudge(BackpackComponent* BackpackComp, WeaponManagerComponent* weaponComp, out const ItemDefineID DefineID, out const JudgePickupUsefulItem JudgePickUseful);// 0x130f1f0
	static bool CheckItemUseful(BackpackComponent* BackpackComp, WeaponManagerComponent* weaponComp, out const ItemDefineID DefineID, out const SearchedPickUpItemResult SearchItemResult);// 0x130efb4
	static bool CheckItemSubType(int InItemID, int InSubType);// 0x130eef8
	static bool CheckCapacityForSwapOrDrop(BackpackComponent* BackpackComp, int OldCapacity, int NewCapacity);// 0x130edf8
	static bool CheckAssociationsEquipQualityHigher(BackpackComponent* BackpackComponent, bool CanSwap, const int WeaponID, out const ItemDefineID CurrentDefineID, out const ItemDefineID NewDefineID);// 0x130ec34
	static bool CanSkillPropsItemBePickedUp(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x130eb64
	static void AddEquipmentBriefMapItem(int TypeDefineID, int ItemID, int ItemSubType, int BPID);// 0x130ea28
	static void AddCharacterVirtualItemHandleToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x130e974

--------------------------------
Class: PickupItemDataSortingInfo
	PickUpItemData Data;//[Offset: 0x0, Size: 0x30]
	bool bHighPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ItemDefineSortingInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bMainHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: BattleSearchItemSortingInfo
	SearchedPickUpItemResult SearchItemResult;//[Offset: 0x0, Size: 0x38]
	bool bHighPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int pickCount;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BattleSearchBoxSortingInfo
	SearchedPickUpItemResult pickUpItemResult;//[Offset: 0x0, Size: 0x38]
	bool bHighPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int pickCount;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BattleItemSortingInfo
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 0x18]
	bool bHighPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0xdc, Size: 0x8]
	float WrapWidth;//[Offset: 0xe4, Size: 0x4]
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	void SetInnerSlotPadding(Vector2D InPadding);// 0x23b8f8c
	WrapBoxSlot* AddChildWrapBox(Widget* Content);// 0x23b8f0c

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float FillSpanWhenLessThan;//[Offset: 0x38, Size: 0x4]
	byte HorizontalAlignment;//[Offset: 0x3c, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x3d, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x23b94c0
	void SetPadding(Margin InPadding);// 0x23b9438
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x23b93c0
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0x23b9348
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0x23b92c8

--------------------------------
Class: JudgePickupUsefulItem
	PickUpItemData MainItemData;//[Offset: 0x0, Size: 0x30]
	int NetGUIDOffsetValue;//[Offset: 0x30, Size: 0x4]
	bool DropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ItemRecordData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemType;//[Offset: 0x4, Size: 0x4]
	int ItemSubType;//[Offset: 0x8, Size: 0x4]
	int BPID;//[Offset: 0xc, Size: 0x4]
	int WeightforOrder;//[Offset: 0x10, Size: 0x4]
	int[] Attach;//[Offset: 0x14, Size: 0xc]
	int BulletID;//[Offset: 0x20, Size: 0x4]
	int ProposeBulletNum;//[Offset: 0x24, Size: 0x4]
	int Durability;//[Offset: 0x28, Size: 0x4]
	int ItemPickupRule;//[Offset: 0x2c, Size: 0x4]
	int AIFullVaule;//[Offset: 0x30, Size: 0x4]
	float Weight;//[Offset: 0x34, Size: 0x4]
	int MaxCount;//[Offset: 0x38, Size: 0x4]
	bool AutoEquipandDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool Consumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool Equipable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	FString ItemName;//[Offset: 0x40, Size: 0xc]
	FString ItemBigIcon;//[Offset: 0x4c, Size: 0xc]
	FString ItemDesc;//[Offset: 0x58, Size: 0xc]
	FString ItemSmallIcon;//[Offset: 0x64, Size: 0xc]
	FString KillWhiteIcon;//[Offset: 0x70, Size: 0xc]

--------------------------------
Class: BackpackBlueprintUtils.Object
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xb4, Size: 0xc]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0xc0, Size: 0x3c]
	<int,enum> TClipTypeMap;//[Offset: 0xfc, Size: 0x3c]
	<int,ItemRecordData> mapItemRecord;//[Offset: 0x138, Size: 0x3c]
	<int,int> mapPickupBullet;//[Offset: 0x174, Size: 0x3c]
	<int,enum> mapAttachPos;//[Offset: 0x1b0, Size: 0x3c]
	PickupSetting PickupSetting;//[Offset: 0x1ec, Size: 0xc4]
	PickupProposeData proposeData;//[Offset: 0x2b0, Size: 0xdc]
	<int,FName> ItemSubTypeNameMap;//[Offset: 0x38c, Size: 0x3c]
	<FName,TagItemList> ItemTag;//[Offset: 0x3c8, Size: 0x3c]
	<int,ItemTagList> ItemTagMap;//[Offset: 0x404, Size: 0x3c]
	enum CurrentGameModeType;//[Offset: 0x44c, Size: 0x1]
	FString ItemTableName;//[Offset: 0x450, Size: 0xc]
	FString ItemTagTableName;//[Offset: 0x45c, Size: 0xc]
	FString AttachTableName;//[Offset: 0x468, Size: 0xc]
	FString SuitEmoteTableName;//[Offset: 0x474, Size: 0xc]
	FString OccupationTableName;//[Offset: 0x480, Size: 0xc]
	bool bShowWeaponPendant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	<int,int> itemGuid2Useful;//[Offset: 0x490, Size: 0x3c]
	<int,int> gunMainTypeUseful;//[Offset: 0x4cc, Size: 0x3c]
	<int,int> attachMainTypeUseful;//[Offset: 0x508, Size: 0x3c]
	<int,int> bulletMainTypeUseful;//[Offset: 0x544, Size: 0x3c]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0x580, Size: 0x3c]
	<int,int> constructTypeUseful;//[Offset: 0x5bc, Size: 0x3c]
	<int,float> ItemWeight;//[Offset: 0x5f8, Size: 0x3c]
	<int,int> skillpropsTypeUseful;//[Offset: 0x634, Size: 0x3c]
	<int,bool> itemPathExist;//[Offset: 0x670, Size: 0x3c]
	int[] ItemToDownload;//[Offset: 0x6ac, Size: 0xc]
	<int,EquipmentBrief> EquipmentBriefMap;//[Offset: 0x6b8, Size: 0x3c]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f4, Size: 0x1]
	int CharacterVirtualItem_Type;//[Offset: 0x6f8, Size: 0x4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0x6fc, Size: 0x4]
	<int,FString> BPTableNameMap;//[Offset: 0x700, Size: 0x3c]
	<int,class BattleItemHandleBase> VirtualItemClassMap;//[Offset: 0x73c, Size: 0x3c]
	<int> NoUseVirtualItemIDs;//[Offset: 0x778, Size: 0x3c]
	void ResetItemToDownload();// 0x131b698
	void OnGameModeTypeChanged();// 0x131b67c
	bool IsVirtualItemData(out const BattleItemData ItemData);// 0x131b5c0
	bool IsPatchItem(int ItemID);// 0x131b538
	bool IsParachuteItemType(int ItemID);// 0x131b4b0
	bool IsOpenQuickSwitchSubWeapon();// 0x1c01fa0
	bool IsInPveMode();// 0x1c01fa0
	bool IsGlideItemType(int ItemID);// 0x131b428
	bool IsGhillieSuitItemType(int ItemID);// 0x131b3a0
	bool IsBattleItemHandlePathExist(FString HandlePath);// 0x131b2dc
	bool IsBattleItemHandleExist(out const ItemDefineID DefineID, bool bUseCache);// 0x131b1f8
	bool Is3BackpackID(int ID);// 0x1c01fa0
	void InitialItemTable();// 0x131b1dc
	bool HasTagSub(int ItemID, out const FName TagName);// 0x131b104
	bool HasTag(int ItemID, out const FName TagName);// 0x131b02c
	int GetWeaponSkinWeaponID(int InWeaponSkinID);// 0x1c01fa0
	int GetWeaponSkinMappingID(int InWeaponSkinID);// 0x1c01fa0
	FString GetRawBattleTextByType(enum Type);// 0x131af1c
	FString GetRawBattleTextByRawTextID(int ID);// 0x131ae0c
	int GetPendantIDByWeaponID(int WeaponID);// 0x131ad84
	int GetItemSubTypeID(int SpecificID);// 0x1c01fa0
	ItemRecordData GetItemRecord(int ItemID);// 0x131acd8
	bool GetItemOperationSoundAndBankCpp(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x131aae0
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x1c01fa0
	int GetEquipmentLevel(int ItemID);// 0x131aa58
	int GetEquipmentBagLevel(int ItemID);// 0x131a9d0
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x131a91c
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x131a894
	FString GetBPTableNameInner(int Type, int TypeSpecificID);// 0x131a748
	FString GetBPTableNameByItemID(ItemDefineID DefineID);// 0x131a628
	int GetBPIDByResID(int resID);// 0x131a5a0
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(ItemDefineID DefineID);// 0x131a420
	FString GetBattleItemHandlePathInner(out const ItemDefineID DefineID);// 0x131a300
	FString GetBattleItemHandlePath(ItemDefineID DefineID);// 0x131a1e0
	void GetBattleItemFeatureDataByItemIDRef(int ItemID, out BattleItemFeatureData OutData);// 0x131a0fc
	void GetBattleItemFeatureDataByItemID(int ItemID, out BattleItemFeatureData OutData);// 0x131a018
	void GetBattleItemFeatureDataByDefineIDRef(out const ItemDefineID DefineID, out BattleItemFeatureData OutData);// 0x1319f1c
	void GetBattleItemFeatureDataByDefineID_CPP(out const ItemDefineID DefineID, out BattleItemFeatureData OutData);// 0x1319e20
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x1319d74
	int[] GetAttachOfWeapon(int WeaponID);// 0x1319c6c
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID);// 0x1319b40
	TagItemList FindItemTag(out const FName TagName);// 0x1319a68
	BattleItemHandleBase* CreateVirtualItemHandle(ItemDefineID DefineID, Object* Outer);// 0x131998c
	BattleItemHandleBase* CreateBattleItemHandleInner(out const ItemDefineID DefineID, Object* Outer);// 0x13198b0
	BattleItemHandleBase* CreateBattleItemHandle(ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x1319784
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x13196d0
	BattleItemData ConstructBattleItemDataByDefineID(ItemDefineID DefineID);// 0x131960c
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x1319548

--------------------------------
Class: CreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	Object* Outer;//[Offset: 0x18, Size: 0x4]
	FString Path;//[Offset: 0x1c, Size: 0xc]
	delegate Callback;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: CreateBattleItemHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 0xc]
	FString[] PathList;//[Offset: 0xc, Size: 0xc]
	Object* Outer;//[Offset: 0x18, Size: 0x4]
	delegate Callback;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PickupSetting
	int LimitBandage;//[Offset: 0x0, Size: 0x4]
	int LimitBandage_pve;//[Offset: 0x4, Size: 0x4]
	int LimitMedical;//[Offset: 0x8, Size: 0x4]
	int LimitMedical_pve;//[Offset: 0xc, Size: 0x4]
	int LimitFirstAidKit;//[Offset: 0x10, Size: 0x4]
	int LimitFirstAidKit_pve;//[Offset: 0x14, Size: 0x4]
	int LimitAnodyne;//[Offset: 0x18, Size: 0x4]
	int LimitAnodyne_pve;//[Offset: 0x1c, Size: 0x4]
	int LimitEnergyDrinks;//[Offset: 0x20, Size: 0x4]
	int LimitEnergyDrinks_pve;//[Offset: 0x24, Size: 0x4]
	int LimitAdrenaline;//[Offset: 0x28, Size: 0x4]
	int LimitAdrenaline_pve;//[Offset: 0x2c, Size: 0x4]
	int LimitShouliudan;//[Offset: 0x30, Size: 0x4]
	int LimitShouliudan_pve;//[Offset: 0x34, Size: 0x4]
	int LimitYanwudan;//[Offset: 0x38, Size: 0x4]
	int LimitYanwudan_pve;//[Offset: 0x3c, Size: 0x4]
	int LimitZhenbaodan;//[Offset: 0x40, Size: 0x4]
	int LimitZhenbaodan_pve;//[Offset: 0x44, Size: 0x4]
	int LimitRanshaodan;//[Offset: 0x48, Size: 0x4]
	int LimitRanshaodan_pve;//[Offset: 0x4c, Size: 0x4]
	int LimitGrenadeZombie;//[Offset: 0x50, Size: 0x4]
	int LimitGrenadeYedan;//[Offset: 0x54, Size: 0x4]
	int LimitAntidote;//[Offset: 0x58, Size: 0x4]
	int LimitBatteryChip;//[Offset: 0x5c, Size: 0x4]
	int LimitBullet9mm;//[Offset: 0x60, Size: 0x4]
	int LimitBullet7_62mm;//[Offset: 0x64, Size: 0x4]
	int Limit12koujing;//[Offset: 0x68, Size: 0x4]
	int Limit45koujing;//[Offset: 0x6c, Size: 0x4]
	int Limit300magenandanyao;//[Offset: 0x70, Size: 0x4]
	int Limitbolt;//[Offset: 0x74, Size: 0x4]
	int LimitBullet5;//[Offset: 0x78, Size: 0x4]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	bool AutoPickupPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 0x1]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 0x1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int LimitSniper2X;//[Offset: 0x84, Size: 0x4]
	int LimitSniper2X_pve;//[Offset: 0x88, Size: 0x4]
	int LimitSniper3X;//[Offset: 0x8c, Size: 0x4]
	int LimitSniper3X_pve;//[Offset: 0x90, Size: 0x4]
	int LimitSniper4X;//[Offset: 0x94, Size: 0x4]
	int LimitSniper4X_pve;//[Offset: 0x98, Size: 0x4]
	int LimitSniper6X;//[Offset: 0x9c, Size: 0x4]
	int LimitSniper6X_pve;//[Offset: 0xa0, Size: 0x4]
	int LimitSniper8X;//[Offset: 0xa4, Size: 0x4]
	int LimitSniper8X_pve;//[Offset: 0xa8, Size: 0x4]
	bool AutoPickupSkillProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	int LimitSkillProps;//[Offset: 0xb0, Size: 0x4]
	bool AutoPickupSkillProps_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	int LimitSkillProps_pve;//[Offset: 0xb8, Size: 0x4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int AutoPickClipType;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: PickupProposeData
	int[] pickFirst;//[Offset: 0x0, Size: 0xc]
	int closeSubType;//[Offset: 0xc, Size: 0x4]
	int crossbowSubType;//[Offset: 0x10, Size: 0x4]
	int panID;//[Offset: 0x14, Size: 0x4]
	int pistolSubType;//[Offset: 0x18, Size: 0x4]
	int gunType;//[Offset: 0x1c, Size: 0x4]
	int specialType;//[Offset: 0x20, Size: 0x4]
	int specialType2;//[Offset: 0x24, Size: 0x4]
	int lens2ID;//[Offset: 0x28, Size: 0x4]
	int lens3ID;//[Offset: 0x2c, Size: 0x4]
	int lens4ID;//[Offset: 0x30, Size: 0x4]
	int lens6ID;//[Offset: 0x34, Size: 0x4]
	int lens8ID;//[Offset: 0x38, Size: 0x4]
	int ID2Type;//[Offset: 0x3c, Size: 0x4]
	int pistolClipSubType;//[Offset: 0x40, Size: 0x4]
	int SubMachineGunClipSubType;//[Offset: 0x44, Size: 0x4]
	int SniperClipSubType;//[Offset: 0x48, Size: 0x4]
	int RifleClipSubType;//[Offset: 0x4c, Size: 0x4]
	int gasSubID;//[Offset: 0x50, Size: 0x4]
	int backSubType;//[Offset: 0x54, Size: 0x4]
	int back3ID;//[Offset: 0x58, Size: 0x4]
	int BandageID;//[Offset: 0x5c, Size: 0x4]
	int EnergyDrinksID;//[Offset: 0x60, Size: 0x4]
	int AdrenalineID;//[Offset: 0x64, Size: 0x4]
	int AnodyneID;//[Offset: 0x68, Size: 0x4]
	int Medical1ID;//[Offset: 0x6c, Size: 0x4]
	int Medical2ID;//[Offset: 0x70, Size: 0x4]
	int AntidoteID;//[Offset: 0x74, Size: 0x4]
	int BatteryChipID;//[Offset: 0x78, Size: 0x4]
	int ZhenBaoDan;//[Offset: 0x7c, Size: 0x4]
	int YanWuDan;//[Offset: 0x80, Size: 0x4]
	int RanShaoPing;//[Offset: 0x84, Size: 0x4]
	int ShouLei;//[Offset: 0x88, Size: 0x4]
	int[] SideMirrorList;//[Offset: 0x8c, Size: 0xc]
	int[] MirrorList;//[Offset: 0x98, Size: 0xc]
	int GrenadeZombie;//[Offset: 0xa4, Size: 0x4]
	int GrenadeYedan;//[Offset: 0xa8, Size: 0x4]
	int DefaultMedicineNum;//[Offset: 0xac, Size: 0x4]
	int helmetSubType;//[Offset: 0xb0, Size: 0x4]
	int armorSubType;//[Offset: 0xb4, Size: 0x4]
	int ScoreItemSubType;//[Offset: 0xb8, Size: 0x4]
	int[] carryOnPlane;//[Offset: 0xbc, Size: 0xc]
	int CapacityThreshold;//[Offset: 0xc8, Size: 0x4]
	int GlideSubType;//[Offset: 0xcc, Size: 0x4]
	int ParachuteItemSubType;//[Offset: 0xd0, Size: 0x4]
	int revivalCardID;//[Offset: 0xd4, Size: 0x4]
	float revivalCardValidTime;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: TagItemList
	int[] tagList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ItemTagList
	<FName,int> TagValueMap;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: EquipmentBrief
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemSubType;//[Offset: 0x4, Size: 0x4]
	int BPID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BattleWeaponItemDisplayData
	FString ItemName;//[Offset: 0x0, Size: 0xc]
	FString WhiteIconPath;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: PickUpWrapperItem
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	int count;//[Offset: 0x18, Size: 0x4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x1c, Size: 0xc]
	int ParentIndex;//[Offset: 0x28, Size: 0x4]
	FName ParentSideAssociationName;//[Offset: 0x30, Size: 0x8]
	int ItemInstanceID;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: TableTraver.Object

--------------------------------
Class: ItemTraver.TableTraver.Object

--------------------------------
Class: AttachTraver.TableTraver.Object

--------------------------------
Class: ItemTagTraver.TableTraver.Object

--------------------------------
Class: BackpackUtilsEditorAgent.Object
	static void SetBackpackNeedInitTable(bool IsNeedInitTable);// 0x13152d4
	static void ReleaseBackpackUtils();// 0x131e5f4
	static ItemDefineID CreateItemIDByTableID(int ItemTableID);// 0x131e554

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0xf8, Size: 0xc]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x104, Size: 0xc]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x110, Size: 0x28]
	StaticMesh* FPPStaticMesh;//[Offset: 0x138, Size: 0x28]
	ItemAvatarData[] FPPMatData;//[Offset: 0x160, Size: 0xc]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x170, Size: 0x28]
	ParticleSystem* LightEffect;//[Offset: 0x198, Size: 0x28]

--------------------------------
Class: BackpackWeaponInterface.Interface.Object
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x1321540
	int GetSubSlotID();// 0x130685c
	int GetSlotID();// 0x12df7d4
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x13214d4
	void GetMeshPackCfg(out WeaponMeshCfg meshCfg);// 0x1321314
	void GetDefaultAvatarList(out ItemDefineID[] DefaultAvatarList);// 0x1321240
	WeaponAttachmentConfig GetAttachmentConfig();// 0x13211d4
	void GetAttachmentAvatarList(out <ItemDefineID,ItemDefineID> AttachmentList);// 0x13210c0
	class Object GetAnimationBP();// 0x1321090
	void ApplyAttrModify(STExtraShootWeapon* InWeapon, bool IsEquip);// 0x1320fc4

--------------------------------
Class: UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	GameModePatchTableData PatchTableData;//[Offset: 0x350, Size: 0xf0]
	float GridCheckSize;//[Offset: 0x440, Size: 0x4]
	float DeepCheckSize;//[Offset: 0x444, Size: 0x4]
	int MaxPlayerLimit;//[Offset: 0x448, Size: 0x4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 0x1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44e, Size: 0x1]
	int AntiDataCD;//[Offset: 0x450, Size: 0x4]
	int WeatherID;//[Offset: 0x454, Size: 0x4]
	FString WeatherName;//[Offset: 0x458, Size: 0xc]
	int RoomMode;//[Offset: 0x464, Size: 0x4]
	int SeasonIdx;//[Offset: 0x468, Size: 0x4]
	float MeteorShowerRatio;//[Offset: 0x46c, Size: 0x4]
	FString ItemTableName;//[Offset: 0x470, Size: 0xc]
	FString ItemClassPath;//[Offset: 0x47c, Size: 0xc]
	FString ReplayPushURL;//[Offset: 0x488, Size: 0xc]
	int ReplayType;//[Offset: 0x494, Size: 0x4]
	FString ReplayTitle;//[Offset: 0x498, Size: 0xc]
	enum EnableObserverEnemyTrace;//[Offset: 0x4a4, Size: 0x1]
	FString[] IgnoreItemClassPathList;//[Offset: 0x4a8, Size: 0xc]
	int[] DsSwitch;//[Offset: 0x4b4, Size: 0xc]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	FString PickupBoxConfigClassPath;//[Offset: 0x4c4, Size: 0xc]
	FString PickupBoxConfigDataTableName;//[Offset: 0x4d0, Size: 0xc]
	FString VehicleTableName;//[Offset: 0x4dc, Size: 0xc]
	FString VehicleClassPath;//[Offset: 0x4e8, Size: 0xc]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 0x1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 0x1]
	Vector RegionCenter;//[Offset: 0x4f8, Size: 0xc]
	float RegionRadius;//[Offset: 0x504, Size: 0x4]
	<FString,float> BattleCustomConfig;//[Offset: 0x508, Size: 0x3c]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x544, Size: 0x4]
	int AINoRepTimeInReady;//[Offset: 0x548, Size: 0x4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x54c, Size: 0x4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x554, Size: 0x4]
	float NearDeathDecreateBreathRate;//[Offset: 0x558, Size: 0x4]
	float RescueOtherRestoreDuration;//[Offset: 0x55c, Size: 0x4]
	float DeadTombBoxLifeSpan;//[Offset: 0x560, Size: 0x4]
	int DefaultPlayerBornPointID;//[Offset: 0x564, Size: 0x4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1]
	bool bEnableDSGameTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a, Size: 0x1]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x56c, Size: 0xc]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x578, Size: 0x4]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x57c, Size: 0xc]
	Actor*[] DynamicTriggers;//[Offset: 0x588, Size: 0xc]
	int IsGameModeFpp;//[Offset: 0x594, Size: 0x4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x59c, Size: 0xc]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x5a8, Size: 0x3c]
	int BornItemId;//[Offset: 0x5e4, Size: 0x4]
	int BornItemCount;//[Offset: 0x5e8, Size: 0x4]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 0x1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 0x1]
	int[] BuffEffectIDArray;//[Offset: 0x5f0, Size: 0xc]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x5fc, Size: 0xc]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x609, Size: 0x1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60a, Size: 0x1]
	int nClientType;//[Offset: 0x60c, Size: 0x4]
	int nBattleType;//[Offset: 0x610, Size: 0x4]
	int ItemSpawnInfoReportProb;//[Offset: 0x614, Size: 0x4]
	<int,ItemSpawnStatData> ItemSpawnStatData;//[Offset: 0x618, Size: 0x3c]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]
	float OBInfoTimeStep;//[Offset: 0x8e0, Size: 0x4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0x900, Size: 0xc]
	uint32[] FiringPlayerList;//[Offset: 0x90c, Size: 0xc]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0x918, Size: 0xc]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0x9b8, Size: 0xc]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0x9c4, Size: 0xc]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 0x1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x9d4, Size: 0xc]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x9e0, Size: 0xc]
	FString GrenadeEffectPath;//[Offset: 0x9ec, Size: 0xc]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 0x1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fa, Size: 0x1]
	FString FestivalAirDropBoxMesh;//[Offset: 0x9fc, Size: 0xc]
	float FestivalAirDropProb;//[Offset: 0xa08, Size: 0x4]
	float MonsterDropPar;//[Offset: 0xa0c, Size: 0x4]
	float SceneDropParam;//[Offset: 0xa10, Size: 0x4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xa14, Size: 0x4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xa18, Size: 0x4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1c, Size: 0x1]
	uint32[] NeedReplayPlayers;//[Offset: 0xa20, Size: 0xc]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0xa2c, Size: 0xc]
	FString SeasonStatueClassPath;//[Offset: 0xa38, Size: 0xc]
	FString StatueBaseClassPath;//[Offset: 0xa44, Size: 0xc]
	StatueBaseData StatueBaseInfo;//[Offset: 0xa50, Size: 0x54]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0xaa4, Size: 0xc]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 0x1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0xae4, Size: 0xc]
	void SyncPlayerNames();// 0x18550a8
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x1854f6c
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x1854df0
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x1854ce4
	void SetGameEndReportData();// 0x132b318
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x1854c30
	void RetrieveBattleData(out BattleData OutBattleData);// 0x1854b9c
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x1854ad8
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x1854a14
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x1854950
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x18548d0
	void RefreshWorldActiveRange();// 0x18548b4
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x18547f0
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 Uid);// 0x1854560
	int RecoardAlivePlayerNum();// 0x1854530
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x18544a8
	void OnPlayerFiring(uint32 InPlayerKey);// 0x1854430
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x132b140
	void OnObserverLogout(UAEPlayerController* InController);// 0x18543b8
	void OnObserverLogin(UAEPlayerController* InController);// 0x1854340
	void OnMsg(FString Msg);// 0x185427c
	void OnAirDropBoxLanded(int BoxId, out const Vector Pos);// 0x18541ac
	void OnAirDropBoxEmpty(int BoxId);// 0x185412c
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x1853e30
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x1853d6c
	void NotifyGameModeInit();// 0x15578c4
	void NotifyAIPlayerEnter(uint32 PlayerKey);// 0x1853cec
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x1853b28
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x18539d8
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x185394c
	void InitWorldActiveRange();// 0x1853930
	void InitSeasonStatue();// 0x1853914
	bool InitPatchTableData();// 0x18538e4
	void InitGenerator();// 0x14595f8
	void InitGameParamsFromGameMode();// 0x18538c8
	void InitDynamicTriggers();// 0x18538ac
	void InitDynamicBuildingGroups();// 0x145939c
	void InitBornWithApple();// 0x1853890
	void InitAdvertisement();// 0x149a934
	void Heartbeat();// 0x185387c
	bool HasDynamicBuildingGroup();// 0x1853854
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int count);// 0x18536b8
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x18535f4
	int GetSurvivingTeamCount();// 0x18535c4
	int GetSurvivingCharacterCount();// 0x1853594
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x1853440
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x18532ec
	void GetPlayerAndRealAiNum(out int OutPlayerNum, out int OutRealAiNum, out int OutPlayerNumExcludeExit, out int OutPlayerNumExcludeExitAndLost);// 0x1853150
	UAEPlayerController*[] GetObserverControllerList();// 0x1853090
	void GetMonsterNum(out int MonsterNum);// 0x1853000
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x1852f3c
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x1852e78
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x1852d94
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x1852d14
	void DestroyAllPickUpObjs();// 0x12e82e4
	void DeleteSeasonStatue();// 0x1453770
	void DeleteDynamicLoadItem();// 0x147b174
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x1852c94
	void CollectAllPlayerInfo(float DeltaSeconds, bool bForce);// 0x1852bc8
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x1852a74
	void AddAirDropBox(int BoxId, out const Vector Pos);// 0x18529a4

--------------------------------
Class: GameModePatchTableData
	<int,ItemTableStruct> Item;//[Offset: 0x0, Size: 0x3c]
	<int,PickUpCountSettingTableStruct> PickUpCountSetting;//[Offset: 0x3c, Size: 0x3c]
	<int,BackpackMappingTableStruct> BackpackMapping;//[Offset: 0x78, Size: 0x3c]
	<int,WeaponAttachmentsTableStruct> WeaponAttachments;//[Offset: 0xb4, Size: 0x3c]

--------------------------------
Class: ItemTableStruct
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemType;//[Offset: 0x4, Size: 0x4]
	int ItemSubType;//[Offset: 0x8, Size: 0x4]
	int BPID;//[Offset: 0xc, Size: 0x4]
	int DefaultBPID;//[Offset: 0x10, Size: 0x4]
	int Durability;//[Offset: 0x14, Size: 0x4]
	int AIFullVaule;//[Offset: 0x18, Size: 0x4]
	bool Equippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool Consumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool AutoEquipandDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	int MaxCount;//[Offset: 0x20, Size: 0x4]
	int WeightforOrder;//[Offset: 0x24, Size: 0x4]
	int UnitWeight_f;//[Offset: 0x28, Size: 0x4]
	int RedEmotionFightId;//[Offset: 0x2c, Size: 0x4]
	FString PickupSound;//[Offset: 0x30, Size: 0xc]
	FString DropSound;//[Offset: 0x3c, Size: 0xc]
	FString EquipSound;//[Offset: 0x48, Size: 0xc]
	FString UnEquipSound;//[Offset: 0x54, Size: 0xc]
	FString PickUpBank;//[Offset: 0x60, Size: 0xc]
	FString DropBank;//[Offset: 0x6c, Size: 0xc]
	FString EquipBank;//[Offset: 0x78, Size: 0xc]
	FString UnEquipBank;//[Offset: 0x84, Size: 0xc]
	bool IsPatchItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: PickUpCountSettingTableStruct
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int PickUpMaxCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BackpackMappingTableStruct
	int SkinID;//[Offset: 0x0, Size: 0x4]
	int ItemIDLv1;//[Offset: 0x4, Size: 0x4]
	int ItemIDLv2;//[Offset: 0x8, Size: 0x4]
	int ItemIDLv3;//[Offset: 0xc, Size: 0x4]
	int SkinItemIDLv1;//[Offset: 0x10, Size: 0x4]
	int SkinItemIDLv2;//[Offset: 0x14, Size: 0x4]
	int SkinItemIDLv3;//[Offset: 0x18, Size: 0x4]
	int LobbyShowItemID;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: WeaponAttachmentsTableStruct
	int KeyID;//[Offset: 0x0, Size: 0x4]
	int Muzzle1ID;//[Offset: 0x4, Size: 0x4]
	int Muzzle2ID;//[Offset: 0x8, Size: 0x4]
	int Muzzle3ID;//[Offset: 0xc, Size: 0x4]
	int Muzzle4ID;//[Offset: 0x10, Size: 0x4]
	int Muzzle5ID;//[Offset: 0x14, Size: 0x4]
	int Muzzle6ID;//[Offset: 0x18, Size: 0x4]
	int Upper1ID;//[Offset: 0x1c, Size: 0x4]
	int Upper2ID;//[Offset: 0x20, Size: 0x4]
	int Upper3ID;//[Offset: 0x24, Size: 0x4]
	int Upper4ID;//[Offset: 0x28, Size: 0x4]
	int Upper5ID;//[Offset: 0x2c, Size: 0x4]
	int Upper6ID;//[Offset: 0x30, Size: 0x4]
	int Upper7ID;//[Offset: 0x34, Size: 0x4]
	int Stock1ID;//[Offset: 0x38, Size: 0x4]
	int Stock2ID;//[Offset: 0x3c, Size: 0x4]
	int Magazine1ID;//[Offset: 0x40, Size: 0x4]
	int Magazine2ID;//[Offset: 0x44, Size: 0x4]
	int Magazine3ID;//[Offset: 0x48, Size: 0x4]
	int Magazine4ID;//[Offset: 0x4c, Size: 0x4]
	int Magazine5ID;//[Offset: 0x50, Size: 0x4]
	int Magazine6ID;//[Offset: 0x54, Size: 0x4]
	int Lower1ID;//[Offset: 0x58, Size: 0x4]
	int Lower2ID;//[Offset: 0x5c, Size: 0x4]
	int Lower3ID;//[Offset: 0x60, Size: 0x4]
	int Lower4ID;//[Offset: 0x64, Size: 0x4]
	int Lower5ID;//[Offset: 0x68, Size: 0x4]
	int BulletID;//[Offset: 0x6c, Size: 0x4]
	int ProposeBulletNum;//[Offset: 0x70, Size: 0x4]
	int AIMinAttackDist;//[Offset: 0x74, Size: 0x4]
	int AIMaxAttackDist;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 0xc]
	FString TriggerClassPath;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0, Size: 0xc]
	Rotator rot;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 0xc]
	int ActID;//[Offset: 0xc, Size: 0x4]
	FString Path;//[Offset: 0x10, Size: 0xc]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	int[] PosIdxList;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: DynamicBuildingGroupTransform
	float locX;//[Offset: 0x0, Size: 0x4]
	float locY;//[Offset: 0x4, Size: 0x4]
	float LocZ;//[Offset: 0x8, Size: 0x4]
	float RotX;//[Offset: 0xc, Size: 0x4]
	float RotY;//[Offset: 0x10, Size: 0x4]
	float RotZ;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ItemSpawnStatData

--------------------------------
Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0, Size: 0xc]
	FString HttpImgPath;//[Offset: 0xc, Size: 0xc]
	Vector Loc;//[Offset: 0x18, Size: 0xc]
	Rotator rot;//[Offset: 0x24, Size: 0xc]
	Vector Scale;//[Offset: 0x30, Size: 0xc]
	int ID;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x2d0, Size: 0x4]
	FString StaticMeshPath;//[Offset: 0x2d4, Size: 0xc]
	FString PicUrl;//[Offset: 0x2e0, Size: 0xc]
	int ID;//[Offset: 0x2ec, Size: 0x4]
	FrontendHUD* FrontendHUD;//[Offset: 0x2f0, Size: 0x4]
	float NetCullDistance;//[Offset: 0x2f8, Size: 0x4]
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x184a7bc
	void OnRep_PicURL();// 0x184a794
	void OnRep_MeshPath();// 0x184a7a8
	void OnRep_Id();// 0x184a794

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x16c, Size: 0xc]
	byte RegionType;//[Offset: 0x178, Size: 0x1]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x17c, Size: 0xc]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x188, Size: 0xc]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195, Size: 0x1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x198, Size: 0x3c]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x1d4, Size: 0x3c]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x210, Size: 0x3c]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x24c, Size: 0x48]
	UAEDataTable* VehicleDataTable;//[Offset: 0x294, Size: 0x4]
	void WriteVehicleSpotStatisticsDatas_V15();// 0x12e82e4
	void WriteVehicleSpotStatisticsDatas();// 0x12e82e4
	void WriteVehicleClassStatisticsDatas_V15();// 0x12e82e4
	void WriteVehicleClassStatisticsDatas();// 0x12e82e4
	void WriteAllVehicleStatisticsDatasToLog();// 0x12e82e4
	void WriteAllVehicleStatisticsDatas_V15();// 0x12e82e4
	void WriteAllVehicleStatisticsDatas();// 0x12e82e4
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x1863728
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x1359bf4
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x1863554
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x1863380
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x18631ac
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x1862fd8
	void RandomGroups();// 0x12e0f50
	void LoadVehicleGenerateTable();// 0x1c01fa0
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x1862e48
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x1862c00
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x18629b8
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x186274c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x1828da8
	void GenerateSpotOnTick(float DeltaTime);// 0x13b484c
	void DeleteGroups();// 0x1862738
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x18624c0
	void AddVehicleClassCount(FString Path, bool IsValid, int count);// 0x18622d4

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x250, Size: 0x1]
	byte RegionType;//[Offset: 0x251, Size: 0x1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 0x1]
	float RandomRotationMin;//[Offset: 0x254, Size: 0x4]
	float RandomRotationMax;//[Offset: 0x258, Size: 0x4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x25c, Size: 0x20]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x280, Size: 0x4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x186573c
	bool GenerateSpot();// 0x183dd84

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 0xc]
	FString VehiclePath;//[Offset: 0xc, Size: 0xc]
	float FuelPercent;//[Offset: 0x18, Size: 0x4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 0x1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 0xc]
	int FuelPercentMin;//[Offset: 0x10, Size: 0x4]
	int FuelPercentMax;//[Offset: 0x14, Size: 0x4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	byte RandomType;//[Offset: 0x19, Size: 0x1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c, Size: 0x4]
	int TotalCountRangeMin;//[Offset: 0x20, Size: 0x4]
	int TotalCountRangeMax;//[Offset: 0x24, Size: 0x4]
	float ProbabilityPersent;//[Offset: 0x28, Size: 0x4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 0x1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 0xc]
	int TotalCountRangeMin;//[Offset: 0x10, Size: 0x4]
	int TotalCountRangeMax;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 0x1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 0xc]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 0x4]
	FString VehicleType;//[Offset: 0x4, Size: 0xc]
	FString VehiclePath;//[Offset: 0x10, Size: 0xc]
	int VehicleWeight;//[Offset: 0x1c, Size: 0x4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 0xc]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc, Size: 0x3c]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 0x1]
	FString VehiclePath;//[Offset: 0x8, Size: 0xc]
	float VehicleLocationX;//[Offset: 0x14, Size: 0x4]
	float VehicleLocationY;//[Offset: 0x18, Size: 0x4]
	float VehicleLocationZ;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x4, Size: 0xc]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int AllVehicleCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SeasonStatueData
	FString Name;//[Offset: 0x0, Size: 0xc]
	Vector Loc;//[Offset: 0xc, Size: 0xc]
	Rotator rot;//[Offset: 0x18, Size: 0xc]
	Vector Scale;//[Offset: 0x24, Size: 0xc]
	FString Nation;//[Offset: 0x30, Size: 0xc]
	int AGender;//[Offset: 0x3c, Size: 0x4]
	int Head;//[Offset: 0x40, Size: 0x4]
	int hair;//[Offset: 0x44, Size: 0x4]
	int WeaponID;//[Offset: 0x48, Size: 0x4]
	int[] AvatarList;//[Offset: 0x4c, Size: 0xc]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x58, Size: 0xc]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0, Size: 0xc]
	FString MatPath;//[Offset: 0xc, Size: 0xc]
	FString TeamFlag;//[Offset: 0x18, Size: 0xc]
	FString TeamName;//[Offset: 0x24, Size: 0xc]
	Vector Loc;//[Offset: 0x30, Size: 0xc]
	Rotator rot;//[Offset: 0x3c, Size: 0xc]
	Vector Scale;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0, Size: 0xc]
	float AttrValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 0x8]
	FString CorpsName;//[Offset: 0x8, Size: 0xc]
	int Icon;//[Offset: 0x14, Size: 0x4]
	int SegmentLevel;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 0xc]
	int RemainTeamCount;//[Offset: 0xc, Size: 0x4]
	int RemainAlivePlayerCount;//[Offset: 0x10, Size: 0x4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x14, Size: 0x3c]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x50, Size: 0xc]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 0xc]
	int CorpsHeadIcon;//[Offset: 0xc, Size: 0x4]
	int KilledNum;//[Offset: 0x10, Size: 0x4]
	int SegmentLevel;//[Offset: 0x14, Size: 0x4]
	int RealtimeRank;//[Offset: 0x18, Size: 0x4]
	int DefeatPlayerNum;//[Offset: 0x1c, Size: 0x4]
	float TotalDamage;//[Offset: 0x20, Size: 0x4]
	float SurvivalTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: BattleData
	int WatcherNum;//[Offset: 0x0, Size: 0x4]
	int CircleNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BasicGameMode.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	class AIController* AIControllerClass;//[Offset: 0xb20, Size: 0x4]
	class AIController* NewAIControllerClass;//[Offset: 0xb24, Size: 0x4]
	float Radius0;//[Offset: 0xb28, Size: 0x4]
	float Radius1;//[Offset: 0xb2c, Size: 0x4]
	float Radius2;//[Offset: 0xb30, Size: 0x4]
	float Radius3;//[Offset: 0xb34, Size: 0x4]
	Vector MapCenter;//[Offset: 0xb38, Size: 0xc]
	float PlaneSpeed;//[Offset: 0xb44, Size: 0x4]
	float PlaneHeight;//[Offset: 0xb48, Size: 0x4]
	float CanOpenParachuteHeight;//[Offset: 0xb4c, Size: 0x4]
	float ForceOpenParachuteHeight;//[Offset: 0xb50, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0xb54, Size: 0x4]
	float BlueCircleRadius;//[Offset: 0xb58, Size: 0x4]
	int StartReadyCountDownPlayerNum;//[Offset: 0xb5c, Size: 0x4]
	int PlayerNumPerTeam;//[Offset: 0xb60, Size: 0x4]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb64, Size: 0x1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb65, Size: 0x1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb66, Size: 0x1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb67, Size: 0x1]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 0x1]
	Vector BornLocation;//[Offset: 0xb6c, Size: 0xc]
	float BornRadius;//[Offset: 0xb78, Size: 0x4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0xb7c, Size: 0x1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0xb80, Size: 0x4]
	FString GameModeDisplayName;//[Offset: 0xb84, Size: 0xc]
	int bIsAutoReloadWeaponGameMode;//[Offset: 0xb90, Size: 0x4]
	int bIsPickUpFillBulletGameMode;//[Offset: 0xb94, Size: 0x4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0xb98, Size: 0x4]
	float DragOnGroundDownTraceDistance;//[Offset: 0xb9c, Size: 0x4]
	float DragOnGroundUpTraceDistance;//[Offset: 0xba0, Size: 0x4]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0xba4, Size: 0x4]
	float OutBoundDamage;//[Offset: 0xba8, Size: 0x4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbac, Size: 0x1]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbad, Size: 0x1]
	byte WorldLoadedType;//[Offset: 0xbae, Size: 0x1]
	int MaxNoConsiderActorNum;//[Offset: 0xbb0, Size: 0x4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0xbb4, Size: 0x4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb8, Size: 0x1]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb9, Size: 0x1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0xbba, Size: 0x1]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0xbbc, Size: 0x4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0xbc4, Size: 0x4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0xbc8, Size: 0x4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0xbcc, Size: 0x4]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0xbd0, Size: 0x4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0xbd4, Size: 0x4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd8, Size: 0x1]
	enum GameModeType;//[Offset: 0xbd9, Size: 0x1]
	GameModeServiceBase* GameModeService;//[Offset: 0xbdc, Size: 0x4]
	UAEStateMachineComponent* SMComp;//[Offset: 0xbe0, Size: 0x4]
	AIActingComponent* AIActingComp;//[Offset: 0xbe4, Size: 0x4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0xbe8, Size: 0x4]

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x20, Size: 0xc]
	float RandomStartJumpTime;//[Offset: 0x2c, Size: 0x4]
	float RandomEndJumpTime;//[Offset: 0x30, Size: 0x4]
	float JumpRadius;//[Offset: 0x34, Size: 0x4]
	float JumpHeight;//[Offset: 0x38, Size: 0x4]
	float RandomAccelerateStart;//[Offset: 0x3c, Size: 0x4]
	float RandomAccelerateEnd;//[Offset: 0x40, Size: 0x4]
	float OpenParachuteHeight;//[Offset: 0x44, Size: 0x4]
	float CheckOpenParachuteFreq;//[Offset: 0x48, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0x4c, Size: 0x4]
	float CheckCloseParachuteFreq;//[Offset: 0x50, Size: 0x4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x54, Size: 0x4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x58, Size: 0x4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x5c, Size: 0x4]
	float StopdeliverTime;//[Offset: 0x60, Size: 0x4]
	float NoCirlceRadius;//[Offset: 0x64, Size: 0x4]
	float TraceHeight;//[Offset: 0x68, Size: 0x4]
	float RangeMin;//[Offset: 0x6c, Size: 0x4]
	float RangeMax;//[Offset: 0x70, Size: 0x4]
	float OriginCheckSquare;//[Offset: 0x74, Size: 0x4]
	float DestCheckSquare;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0, Size: 0x4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AIEquipSpawnItem
	enum ItemType;//[Offset: 0x0, Size: 0x1]
	int ItemSpecificID;//[Offset: 0x4, Size: 0x4]
	int count;//[Offset: 0x8, Size: 0x4]
	Vector2D ExtraConfigValue;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x20, Size: 0xc]
	GameModeParam[] GameModeParams;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0, Size: 0x4]
	float Radius1;//[Offset: 0x4, Size: 0x4]
	float Radius3;//[Offset: 0x8, Size: 0x4]
	bool UsingNewPlaneRoute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float InnerRadius;//[Offset: 0x10, Size: 0x4]
	float InnerProbablity;//[Offset: 0x14, Size: 0x4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float Radius2;//[Offset: 0x1c, Size: 0x4]
	Vector2D[] PolygonPoints;//[Offset: 0x20, Size: 0xc]
	float BlueCircleRadius;//[Offset: 0x2c, Size: 0x4]
	Vector MapCenter;//[Offset: 0x30, Size: 0xc]
	float PlaneSpeed;//[Offset: 0x3c, Size: 0x4]
	float PlaneHeight;//[Offset: 0x40, Size: 0x4]
	float CanOpenParachuteHeight;//[Offset: 0x44, Size: 0x4]
	float ForceOpenParachuteHeight;//[Offset: 0x48, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: GameModeServiceBase.Object

--------------------------------
Class: UAEStateMachineComponent.ActorComponent.Object
	delegate OnBeforeTransientEvent;//[Offset: 0xbc, Size: 0xc]
	delegate OnAfterTransientEvent;//[Offset: 0xc8, Size: 0xc]
	FString Tag;//[Offset: 0xd4, Size: 0xc]
	UAEState*[] States;//[Offset: 0xe0, Size: 0xc]
	<FString,UAEStateMachineTransition> Transitions;//[Offset: 0xec, Size: 0x3c]
	UAETransitionState StartState;//[Offset: 0x128, Size: 0xc]
	UAETransitionState EndState;//[Offset: 0x134, Size: 0xc]
	UAEState* CurrentState;//[Offset: 0x140, Size: 0x4]
	void Start();// 0x3903334
	void SetTag(FString InTag);// 0x39031dc
	void OnTransientEvent__DelegateSignature(FString TransientEvent, FString CurrentState, FString TransientToState);// 0x1c01fa0
	bool IsInState(FString StateName);// 0x390307c
	UAEState* GetCurrentState();// 0x2ca7ae4
	void ForceDoEvent(FString EventName);// 0x3902f24
	void Finish();// 0x3902f10
	void DoEvent(FString EventName);// 0x3902db8
	bool CanDoEvent(FString EventName);// 0x3902c58

--------------------------------
Class: UAEState.Object
	void Update(float DeltaTime);// 0x133d4b4
	void OnLeave(const UAEState* TranitToState);// 0x12ebf60
	void OnEnter(const UAEState* PrevState);// 0x12ebee0

--------------------------------
Class: UAEStateMachineTransition
	UAETransitionState[] TransiteFromStates;//[Offset: 0x0, Size: 0xc]
	UAETransitionState TransitToState;//[Offset: 0xc, Size: 0xc]
	float AutoFiredDelayTime;//[Offset: 0x18, Size: 0x4]
	bool AutoFiredForcedTransit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: UAETransitionState
	FString StateName;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb24, Size: 0x1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb25, Size: 0x1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb26, Size: 0x1]
	bool bConfigEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb27, Size: 0x1]
	enum GameModeType;//[Offset: 0xb28, Size: 0x1]
	AIActingComponent* AIActingComp;//[Offset: 0xb2c, Size: 0x4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0xb30, Size: 0x4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0xb34, Size: 0x4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb38, Size: 0x1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0xb3c, Size: 0x4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0xb40, Size: 0x4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0xb44, Size: 0x4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 0x1]
	bool IsMapRotateMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49, Size: 0x1]
	float MapRotation;//[Offset: 0xb4c, Size: 0x4]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0xb50, Size: 0x4]
	class AIController* AIControllerClass;//[Offset: 0xb54, Size: 0x4]
	class AIController* NewAIControllerClass;//[Offset: 0xb58, Size: 0x4]
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0xb5c, Size: 0x4]
	UAELevelDirector* LevelDirector;//[Offset: 0xb60, Size: 0x4]
	byte WorldLoadedType;//[Offset: 0xb64, Size: 0x1]
	int MaxNoConsiderActorNum;//[Offset: 0xb68, Size: 0x4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0xb6c, Size: 0x4]
	int PlayerNumPerTeam;//[Offset: 0xb70, Size: 0x4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb74, Size: 0x1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb75, Size: 0x1]
	FString GameModeDisplayName;//[Offset: 0xb78, Size: 0xc]
	float CircleSpeedMultiplicator;//[Offset: 0xb84, Size: 0x4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 0x1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb89, Size: 0x1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8a, Size: 0x1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8b, Size: 0x1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 0x1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8d, Size: 0x1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8e, Size: 0x1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8f, Size: 0x1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 0x1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb91, Size: 0x1]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb92, Size: 0x1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0xb94, Size: 0xc]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0xba0, Size: 0x4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba4, Size: 0x1]
	FString GameModeConfigPath;//[Offset: 0xba8, Size: 0xc]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4, Size: 0x1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb5, Size: 0x1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb6, Size: 0x1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb7, Size: 0x1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb8, Size: 0x1]
	GameModeParam CurPlaneRouteData;//[Offset: 0xbbc, Size: 0x50]
	Vector BornLocation;//[Offset: 0xc0c, Size: 0xc]
	Vector AIBornLocation;//[Offset: 0xc18, Size: 0xc]
	float BornRadius;//[Offset: 0xc24, Size: 0x4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0xc28, Size: 0x1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0xc29, Size: 0x1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0xc2c, Size: 0x4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0xc30, Size: 0x4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0xc34, Size: 0x4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc38, Size: 0x1]
	float MaxAIAllowJumpRadius;//[Offset: 0xc50, Size: 0x4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0xc54, Size: 0x4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 0x1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0xc5c, Size: 0x4]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 0x1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61, Size: 0x1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0xc64, Size: 0x4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0xc68, Size: 0x4]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0xc6c, Size: 0x4]
	float OverrideBackpackCapacity;//[Offset: 0xc70, Size: 0x4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 0x1]
	bool IsEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c, Size: 0x1]
	FString GameScriptPath;//[Offset: 0xca0, Size: 0xc]
	FString LuaFileEntryFile;//[Offset: 0xcac, Size: 0xc]
	FString PreloadLuaFile;//[Offset: 0xcb8, Size: 0xc]
	FString LuaTriggersPath;//[Offset: 0xcc4, Size: 0xc]
	FString LuaModName;//[Offset: 0xcd0, Size: 0xc]
	FString LuaTriggersFile;//[Offset: 0xcdc, Size: 0xc]
	double StepGCTimeLimit;//[Offset: 0xce8, Size: 0x8]
	GameModeLuaEnv* LuaEnv;//[Offset: 0xcf0, Size: 0x4]
	FString[] CustomWidgets;//[Offset: 0xcf4, Size: 0xc]
	FString CustomUIName;//[Offset: 0xd00, Size: 0xc]
	GameModeState* CurrentState;//[Offset: 0xd0c, Size: 0x4]
	GameModeState*[] AllGameModeStates;//[Offset: 0xd10, Size: 0xc]
	GameModeState* GameModeStateActive;//[Offset: 0xd1c, Size: 0x4]
	GameModeState* GameModeStateReady;//[Offset: 0xd20, Size: 0x4]
	GameModeState* GameModeStateFighting;//[Offset: 0xd24, Size: 0x4]
	GameModeState* GameModeStateFinished;//[Offset: 0xd28, Size: 0x4]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 0x1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0xd48, Size: 0x4]
	Actor* PlanePawn;//[Offset: 0xd4c, Size: 0x4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 0x1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0xd54, Size: 0xc]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0xd60, Size: 0x4]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0xd64, Size: 0x4]
	float OutBoundDamage;//[Offset: 0xd68, Size: 0x4]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0xdec, Size: 0x3c]
	PlaneComponent* PlaneComp;//[Offset: 0xe28, Size: 0x4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0xe2c, Size: 0x4]
	PlaneTypes[] SeasonPlanes;//[Offset: 0xec8, Size: 0xc]
	int MatchGoal;//[Offset: 0xf18, Size: 0x4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1c, Size: 0x1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0xf3c, Size: 0x38]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0xf74, Size: 0xc]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf80, Size: 0x1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0xf84, Size: 0xc]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0xf90, Size: 0x4]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0xf94, Size: 0x4]
	float DelaySpawnVehicleTime;//[Offset: 0xf98, Size: 0x4]
	float DelayDestroyVehicleTime;//[Offset: 0xf9c, Size: 0x4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0xfa0, Size: 0x4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa4, Size: 0x1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0xfa8, Size: 0x3c]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0xfe4, Size: 0x3c]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1020, Size: 0x1]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x132b60c
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x132b4b0
	void StopAllFakePlayerAIBehaviorTree();// 0x132b49c
	void SpawnAI(int Num);// 0x132b424
	void SetStateLeftTime(int LeftTime);// 0x132b3ac
	void SetGameModeType(enum NewGameModeType);// 0x132b334
	void SetGameEndReportData();// 0x132b318
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x132b25c
	void RestartPlayer(Controller* NewPlayer);// 0x132b1dc
	void ResetGameMode();// 0x132b1c0
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x132b140
	void OnGameModeStateChange();// 0x132b124
	void OnGameEnterFinish();// 0x132b110
	void OnGameEnterFight();// 0x132b0fc
	bool IsRevivalGameMode();// 0x132b0cc
	bool IsCanJump(PlayerController* PC);// 0x132b044
	void InitlializeRespawnItemConfig();// 0x132b030
	void InitialGameModeState();// 0x132b01c
	void HandleGameEnd();// 0x132b000
	void GotoReadyState();// 0x132afec
	void GotoFinishedState();// 0x132afd0
	void GotoFightingState();// 0x132afb4
	void GotoActiveState();// 0x132afa0
	byte GetDefaultAIType(uint32 PlayerKey);// 0x132af20
	int GetCurWeatherPhaseIndex();// 0x132aef0
	FName GetCurGameModeState();// 0x132aecc
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x132aea4
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x132add8
	void GenerateRespawnItemsForAllPlayers();// 0x132adc4
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x132ad44
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x132acbc
	bool CheckNoHumanExist();// 0x132ac8c
	bool CheckMatchGoalAchieved();// 0x132ac5c
	bool CheckGameEnd();// 0x132ac2c
	void ChangeStateGM(FName TargetGameModeState);// 0x132abb4
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x132aaf0

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x20, Size: 0x4]
	FString TablePath;//[Offset: 0x24, Size: 0xc]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x30, Size: 0xc]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x3c, Size: 0xc]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x48, Size: 0xc]
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x13afd20
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x13afb40
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x13afa80
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x13af9c0

--------------------------------
Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0, Size: 0xc]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0, Size: 0x4]
	FString CategoryFilter;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0xbc, Size: 0x4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0xc0, Size: 0xc]
	<int,SpawnTableData> PawnTableData;//[Offset: 0xcc, Size: 0x3c]
	void InitialItemTable();// 0x13ca444

--------------------------------
Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0, Size: 0x4]
	int PawnID;//[Offset: 0x4, Size: 0x4]
	int PawnPercent;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SpawnTableData
	int PawnID;//[Offset: 0x0, Size: 0x4]
	FString PathName;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x140f130

--------------------------------
Class: StatueBaseParam
	FString MatPath;//[Offset: 0x0, Size: 0xc]
	FString TeamFlag;//[Offset: 0xc, Size: 0xc]
	FString TeamName;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: GameModeLuaEnv.Object
	FString GameScriptPath;//[Offset: 0x1c, Size: 0xc]
	FString LuaFileEntryFile;//[Offset: 0x28, Size: 0xc]
	FString PreloadLuaFile;//[Offset: 0x34, Size: 0xc]
	FString LuaTriggersPath;//[Offset: 0x40, Size: 0xc]
	FString LuaModName;//[Offset: 0x4c, Size: 0xc]
	FString LuaTriggersFile;//[Offset: 0x58, Size: 0xc]
	bool bEnableDSGameTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x6c, Size: 0x4]
	LuaTimerManager* LuaTimerMgr;//[Offset: 0x74, Size: 0x4]
	LuaTriggerManager* LuaTriggerMgr;//[Offset: 0x78, Size: 0x4]
	GameLuaAPI* GameLuaAPI;//[Offset: 0x7c, Size: 0x4]
	void TickEnv(float tickTime);// 0x138f640
	void SetStepGCLimitTime(double GCLimitTime);// 0x138f5c0
	void PullLevelActors(FString LevelName);// 0x138f468
	void InitLuaGlobalVariable();// 0x138f454
	void InitLuaGlobalTools();// 0x138f440
	void InitLuaFile();// 0x138f42c
	void InitLuaEnv();// 0x138f418
	FString GetLuaModPath();// 0x138f358
	void CreateSluaState();// 0x138f344
	void CallLuaWaitGlobalScriptFunction(FString InFunctionName);// 0x138f288
	void CallLuaGlobalScriptFunction(FString InFunctionName);// 0x138f1cc

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: LuaTimerManager.Object
	STExtraGameInstance* GameInstance;//[Offset: 0x1c, Size: 0x4]
	<int,TimerHandle> _timers;//[Offset: 0x24, Size: 0x3c]

--------------------------------
Class: LuaTriggerManager.Object
	<FString,int> EventListenMap;//[Offset: 0x1c, Size: 0x3c]
	bool SetEventListen(FString EventString, int EventNum);// 0x13be1a8
	bool RemoveEventListen(FString EventString, int EventNum);// 0x13be004
	void Init();// 0x12e82e4
	bool AddEventListen(FString EventString, int EventNum);// 0x13bde60

--------------------------------
Class: GameLuaAPI.Object
	void UIShowTips(FString FunctionName, uint32 PlayerKey, int TipType, FString Params1, FString Params2, bool IsToAll);// 0x138ce8c
	void UISetWidgetVisibility(uint32 PlayerKey, FString WidgetTag, int Visibility, bool IsToAll);// 0x138cc58
	void UISetWidgetText(uint32 PlayerKey, FString WidgetTag, FString SText, int TextId, FString Params, bool IsToAll);// 0x138c7f0
	void UIOperateWidget(uint32 PlayerKey, FString WidgetTag, FString SOperation, FString Params, bool IsToAll);// 0x138c3d0
	void UICustomBehavior(uint32 PlayerKey, FString UIBehavior, int TipType, FString Params, bool IsToAll);// 0x138c080
	bool TeleportPlayerToVehicle(STExtraBaseCharacter* Player, STExtraVehicleBase* Vehicle, int SeatIdx);// 0x138bf78
	void TeleportPawn(STExtraBaseCharacter* Player, Vector Position, Rotator Rotation);// 0x138be6c
	void TaskModifyTask(uint32 PlayerKey, int TaskID, int Progress, int State);// 0x138bd24
	void TaskDeleteTask(uint32 PlayerKey, int TaskID);// 0x138bc68
	void TaskAddTask(uint32 PlayerKey, int TaskID, int Aim);// 0x138bb68
	void StopPlayerJoin();// 0x138bb54
	STExtraVehicleBase* SpawnVehicle(int resID, Vector Position, Rotator Rotation);// 0x138ba40
	void ShowMessage(FString Message);// 0x138b8e8
	void SetTeamID(Actor* TActor, int TeamID);// 0x138b82c
	void RevivePlayerAtPosition(uint32 PlayerKey, Vector Position, Rotator Rotation);// 0x138b720
	void RevivePlayer(uint32 PlayerKey);// 0x138b6a8
	bool RemoveBuff(int ID, Pawn* TargetPawn, Actor* Causer);// 0x138b5a0
	bool RemoveActor(Actor* TActor);// 0x138b520
	void RemoteDestroyActor(uint32 PlayerKey, int SingleId, bool IsToAll);// 0x138b418
	int RemoteCreateActor(uint32 PlayerKey, int TeamID, int resID, Vector Position, Rotator Rotation, bool IsToAll);// 0x138b234
	bool IsVehicle(Actor* TActor);// 0x138b1b4
	bool IsValid(Object* TObject);// 0x138b134
	bool IsPlayerAlive(uint32 PlayerKey);// 0x138b0b4
	bool IsPlayer(Actor* TActor);// 0x138b034
	bool IsInArea(Vector Position, int AreaID);// 0x138af74
	static bool IsClassOf(const Object* Object, const class Object Class);// 0x138aeb8
	bool HasBuff(int ID, Pawn* TargetPawn);// 0x138adf4
	int GetWeaponBulletResId(STExtraWeapon* TWeapon);// 0x138ad74
	STExtraPlayerCharacter*[] GetPlayersOnVehicle(STExtraVehicleBase* Vehicle);// 0x138ac6c
	STExtraPlayerController* GetPlayerControllerByPlayerKey(uint32 PlayerKey);// 0x138abec
	STExtraBaseCharacter* GetPlayerByPlayerKey(uint32 PlayerKey);// 0x138ab6c
	STExtraBaseCharacter* GetOneRealPlayer();// 0x138ab44
	STExtraBaseCharacter* GetOnePlayerBase();// 0x138ab1c
	STExtraPlayerCharacter* GetOnePlayer();// 0x138aaf4
	UAENetConnection* GetNetConnection(STExtraPlayerController* PlayerController);// 0x138aa74
	FString GetLevelPath(Level* Level);// 0x138a96c
	int GetItemNumByResID(STExtraBaseCharacter* Player, int resID);// 0x138a8a8
	int[] GetEquipWeaponList(STExtraBaseCharacter* Pawn);// 0x138a7a0
	STExtraWeapon* GetCurrentUseWeapon(STExtraBaseCharacter* Pawn);// 0x138a720
	STExtraVehicleBase*[] GetAllVehicles();// 0x138a660
	STExtraPlayerState*[] GetAllPlayerStates();// 0x138a5a0
	STExtraPlayerCharacter*[] GetAllPlayerPawns();// 0x138a4e0
	STExtraPlayerController*[] GetAllPlayerControllers();// 0x138a420
	Actor*[] GetActorsInSphere(const Vector SpherePos, float SphereRadius, class Object ActorClass);// 0x138a284
	Actor*[] GetActorsByTag(FName Tag);// 0x138a178
	Actor*[] GetActorsByClass(class Object TargetClass);// 0x138a070
	int GetActorResId(Actor* TActor);// 0x1389ff0
	STExtraBaseCharacter* FindFakePlayer();// 0x1389fc8
	void EndMatch(int TeamID, int Reason);// 0x1389f0c
	void DamageTarget(Actor* SourceActor, Actor* TargetActor, float Damage, int TypeID);// 0x1389dc4
	PickUpWrapperActor* CreatePickup(int TeamID, int resID, Vector Position, Rotator Rotation, int Num);// 0x1389c1c
	STExtraCharacter* CreatePawn(int TeamID, int resID, Vector Position, Rotator Rotation);// 0x1389ac0
	STExtraBaseCharacter* CreateFakePlayer(int TeamID, int resID, Vector Posi, Rotator Rota);// 0x1389964
	AreaVolume* CreateAreaVolume(Vector Posi, Rotator Rota, Vector Volume);// 0x138984c
	AreaSphere* CreateAreaSphere(Vector Posi, float Radius);// 0x1389788
	Actor* CreateActor(int TeamID, int resID, Vector Position, Rotator Rotation);// 0x138962c
	bool CheckDSSwitchOpen(int SwitchId);// 0x13895ac
	STExtraVehicleBase* CastToVehicle(Actor* TActor);// 0x138952c
	STExtraPlayerState* CastToPlayerState(Actor* TActor);// 0x13894ac
	STExtraPlayerCharacter* CastToPlayer(Actor* TActor);// 0x138942c
	bool AddItemByResID(STExtraBaseCharacter* Player, int resID, int Num);// 0x1389324
	int AddHealth(STExtraBaseCharacter* Player, float AddHealth);// 0x1389260
	bool AddBuff(int ID, Pawn* TargetPawn, Actor* Causer);// 0x1389158

--------------------------------
Class: UAENetConnection.IpConnection.NetConnection.Player.Object
	int InitialHandshakeTimeoutNumThreshold;//[Offset: 0x29668, Size: 0x4]
	int ActorChannelProcessBunchErrorNumThreshold_Server_Global;//[Offset: 0x29670, Size: 0x4]
	int ActorChannelProcessBunchErrorNumThreshold_Client_Global;//[Offset: 0x29674, Size: 0x4]
	int ActorChannelProcessBunchErrorNumThreshold_Client_PerActor;//[Offset: 0x29678, Size: 0x4]
	bool bEnableHTTPDNS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296b8, Size: 0x1]
	FString HTTPDNSServerAddr;//[Offset: 0x296bc, Size: 0xc]
	float HTTPDNSResponseTimeout;//[Offset: 0x296c8, Size: 0x4]
	NetRelevancyGroup* RelevancyGroup;//[Offset: 0x296d8, Size: 0x4]
	PendingRegionNetworkObject[] PendingRegionNetworkObjects;//[Offset: 0x29774, Size: 0xc]
	float MinRegionActorTickDelta;//[Offset: 0x29780, Size: 0x4]
	float MaxRegionActorTickDelta;//[Offset: 0x29784, Size: 0x4]
	bool EnableWeakNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29794, Size: 0x1]
	float MinWeakNetUpdateDelay;//[Offset: 0x29798, Size: 0x4]
	float MaxWeakNetUpdateDelay;//[Offset: 0x2979c, Size: 0x4]
	float SquareSegmentSize;//[Offset: 0x297a0, Size: 0x4]
	float MaxSegmentDistance;//[Offset: 0x297a4, Size: 0x4]
	int MaxObjectNumInSegments;//[Offset: 0x297a8, Size: 0x4]
	bool bRecreateSocketOnLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297b9, Size: 0x1]

--------------------------------
Class: IpConnection.NetConnection.Player.Object

--------------------------------
Class: NetRelevancyGroup.Object
	NetRelevancyGroupID GroupID;//[Offset: 0x1c, Size: 0x4]
	UAENetConnection*[] Connections;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: NetRelevancyGroupID

--------------------------------
Class: PendingRegionNetworkObject
	Object* RegionObject;//[Offset: 0x0, Size: 0x4]
	RegionID OldRegionID;//[Offset: 0x4, Size: 0xc]
	RegionID NewRegionID;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: RegionID

--------------------------------
Class: AreaVolume.AreaBase.Object
	Vector Position;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Volume;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: AreaBase.Object

--------------------------------
Class: AreaSphere.AreaBase.Object
	Vector Position;//[Offset: 0x1c, Size: 0xc]
	float Radius;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: GameModeState.Object
	float StateTime;//[Offset: 0x30, Size: 0x4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x34, Size: 0x4]
	void GotoNextState();// 0x138ffc4

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x1024, Size: 0xc]
	delegate OnGameModeExitFlying;//[Offset: 0x1030, Size: 0xc]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1048, Size: 0x1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1049, Size: 0x1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104a, Size: 0x1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104b, Size: 0x1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x104c, Size: 0x4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1050, Size: 0x1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x1054, Size: 0x4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x1058, Size: 0x4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x105c, Size: 0x4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x1060, Size: 0x4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1064, Size: 0x1]
	class ChallengeLevelRules* ChallengeLevelRulesClass;//[Offset: 0x1068, Size: 0x4]
	ChallengeLevelRules* ChallengeLevelRules;//[Offset: 0x106c, Size: 0x4]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x1070, Size: 0x4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1074, Size: 0x1]
	delegate OnGameModeEnterPlane;//[Offset: 0x1078, Size: 0xc]
	ChallengeLevelRules* GetChallengeLevelRules();// 0x132a60c

--------------------------------
Class: ChallengeLevelRules.Object
	UAELevelDirector* LevelDirector;//[Offset: 0x1c, Size: 0x4]
	void SpawnLevelDirector(class UAELevelDirector LevelDirectorClass);// 0x133d4b4
	void OnReceiveTriggerMsg(TriggerAction* TriggerAction, FString Msg);// 0x133d30c
	void InitLevel();// 0x133d2f0

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0xbc, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0xc0, Size: 0x4]
	float CohesionWeight;//[Offset: 0xc4, Size: 0x4]
	float AlignmentWeight;//[Offset: 0xc8, Size: 0x4]
	float ArriveWeight;//[Offset: 0xcc, Size: 0x4]
	float PushedWeight;//[Offset: 0xd0, Size: 0x4]
	float SeparationWeight;//[Offset: 0xd4, Size: 0x4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]
	float DragDistanceWhenStuck;//[Offset: 0xdc, Size: 0x4]
	float DetermineAgentStuckTime;//[Offset: 0xe0, Size: 0x4]
	float DetermineAgentStuckDistSq;//[Offset: 0xe4, Size: 0x4]
	void SetQueryInterfaceBlueprint(AIWorldVolume* query);// 0x134f138
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x134f0c0
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x134efb0
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float segmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x134ed48

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]

--------------------------------
Class: PlaneComponent.ActorComponent.Object
	PlaneData CurPlaneData;//[Offset: 0xbc, Size: 0x74]
	class Pawn* PlaneClass;//[Offset: 0x130, Size: 0x4]
	BehaviorTree* PlaneBT;//[Offset: 0x134, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x13c, Size: 0xc]
	AIController*[] CachedTotalAI;//[Offset: 0x148, Size: 0xc]

--------------------------------
Class: PlaneData
	int FlightNo;//[Offset: 0x0, Size: 0x4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Actor* ThePlane;//[Offset: 0x8, Size: 0x4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Vector PlaneVelocity;//[Offset: 0x10, Size: 0xc]
	Vector PlaneStartLoc;//[Offset: 0x1c, Size: 0xc]
	Vector PlaneEndLoc;//[Offset: 0x28, Size: 0xc]
	Vector2D CanJumpLoc;//[Offset: 0x34, Size: 0x8]
	Vector2D ForceJumpLoc;//[Offset: 0x3c, Size: 0x8]
	int TotalPlayerNum;//[Offset: 0x44, Size: 0x4]
	PlayerController*[] TotalPlayers;//[Offset: 0x48, Size: 0xc]
	PlayerController*[] CurPlayers;//[Offset: 0x54, Size: 0xc]
	int TotalAINum;//[Offset: 0x60, Size: 0x4]
	AIController*[] TotalAIs;//[Offset: 0x64, Size: 0xc]
	int CurAINum;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	float DefaultPlayerRespawnTime;//[Offset: 0xbc, Size: 0x4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xc0, Size: 0x4]
	enum RespawnPointType;//[Offset: 0xc4, Size: 0x1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0xc8, Size: 0xc]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0xd4, Size: 0xc]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0xe0, Size: 0xc]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0xec, Size: 0x3c]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x128, Size: 0x18]
	int[] DefaultWeaponList;//[Offset: 0x140, Size: 0xc]
	float bRestoreDataDelay;//[Offset: 0x14c, Size: 0x4]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x13ef784
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x13ef6c8

--------------------------------
Class: ReplaceWeaponDataMap
	<byte,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: ReplaceWeaponData
	int WeaponID;//[Offset: 0x0, Size: 0x4]
	BattleItemData WeaponItemData;//[Offset: 0x8, Size: 0x80]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0x88, Size: 0xc]

--------------------------------
Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 0xc]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x14, Size: 0x1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0, Size: 0x4]
	FString PlaneClassFullPath;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ItemAttach
	int BaseItemID;//[Offset: 0x0, Size: 0x4]
	AddItemInfo[] AttachItemList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: AddItemInfo
	int AddItemID;//[Offset: 0x0, Size: 0x4]
	int AddItemNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0, Size: 0x4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0, Size: 0x4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0, Size: 0x4]
	RespawnItem[] ItemList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: RespawnItem
	int ItemTableID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 0xc]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0xc8, Size: 0x3c]
	void InitRowDataMap();// 0x1380730
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x1380640
	FString GetControllerPath(int resID);// 0x1380538

--------------------------------
Class: FakePlayerCustomRow
	int ID;//[Offset: 0x0, Size: 0x4]
	FString ControllerPath;//[Offset: 0x4, Size: 0xc]
	FString Name;//[Offset: 0x10, Size: 0xc]
	int gender;//[Offset: 0x1c, Size: 0x4]
	FString ItemStr;//[Offset: 0x20, Size: 0xc]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x1db, Size: 0x1]

--------------------------------
Class: RoomCustomParams
	int CircleSpeedMultiplicator;//[Offset: 0x0, Size: 0x4]
	bool bAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bShowSkull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bGunRemoveBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	int BlueCircleDamageMultiplicator;//[Offset: 0xc, Size: 0x4]
	bool bUseFirstWhiteCircleDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bUseFirstSafeZoneAppearTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bUseFirstWhiteCircleRadiusMultiplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	int FirstWhiteCircleDelayTime;//[Offset: 0x14, Size: 0x4]
	int FirstSafeZoneAppearTime;//[Offset: 0x18, Size: 0x4]
	int FirstWhiteCircleRadiusMultiplicator;//[Offset: 0x1c, Size: 0x4]
	bool EnableRedZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	CustomCircleParams[] CustomCircleParamsList;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: CustomCircleParams
	int Stage;//[Offset: 0x0, Size: 0x4]
	int DelayTime;//[Offset: 0x4, Size: 0x4]
	int SafeZoneAppeartime;//[Offset: 0x8, Size: 0x4]
	int LastTime;//[Offset: 0xc, Size: 0x4]
	int CircleDamage;//[Offset: 0x10, Size: 0x4]
	int BlueCircleRadius;//[Offset: 0x14, Size: 0x4]
	int WhiteCircleRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: GameModeStateActive.GameModeState.Object
	int PlayerNumToNextState;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeStateReady.GameModeState.Object
	float StopJoinTime;//[Offset: 0x38, Size: 0x4]
	float ForceStartCountDownTime;//[Offset: 0x3c, Size: 0x4]
	bool bCanSendStopJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	int[] GetItemArray;//[Offset: 0x44, Size: 0xc]
	void StopJoin();// 0x1391270

--------------------------------
Class: GameModeStateFighting.GameModeState.Object

--------------------------------
Class: GameModeStateFinished.GameModeState.Object

--------------------------------
Class: BattleRoyalChallengeGameMode.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	MultipleBattleLogicManager* MultipleBattleLogicManager;//[Offset: 0x1094, Size: 0x4]

--------------------------------
Class: MultipleBattleLogicManager.ActorComponent.Object
	<int,Actor*> BattleDataMap;//[Offset: 0xbc, Size: 0x3c]

--------------------------------
Class: BattleRoyalCorpsWarGameState.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	CorpsBaseInfo[] CorpsInfoArray;//[Offset: 0x7d8, Size: 0xc]
	CorpsDetailInfo[] CachedSortedCorpsDetailList;//[Offset: 0x7e4, Size: 0xc]
	CorpsDetailInfo[] OutGameCorpsDetailList;//[Offset: 0x7f0, Size: 0xc]
	CorpsToPlayerKeyInfo[] PlayerKeyToCorpsList;//[Offset: 0x7fc, Size: 0xc]
	void ReCalculateCorpsDetailList(bool bForceOutGame);// 0x1329bb4
	void OnRepOutGameCorpsDetailList();// 0x1329ba0
	void OnRepCorpsInfoArray();// 0x1329ba0
	void OnRepCachedSortedCorpsDetailList();// 0x1329ba0
	void OnCorpsOutGame(int KillerCorpsID, int CorpsID);// 0x1329adc
	void OnCorpsJoinGame(int CorpsID);// 0x1329a5c
	int GetTotalCorpsNums();// 0x1329a34
	CorpsDetailInfo[] GetSortedCorpsDetailList();// 0x13298dc
	float GetPlayerLiveTime(BattleRoyalCorpsWarPlayerState* State);// 0x132985c
	CorpsBaseInfo GetCorpsInfoByID(int ID);// 0x132972c
	int GetActiveCorpsNum();// 0x1329704
	void ForceFlushList();// 0x13296f0

--------------------------------
Class: CorpsBaseInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	FString CorpsName;//[Offset: 0x4, Size: 0xc]
	int CorpsHeadIconID;//[Offset: 0x10, Size: 0x4]
	int CorpsGrad;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CorpsDetailInfo
	CorpsBaseInfo CorpBaseInfo;//[Offset: 0x0, Size: 0x18]
	int CorpsLiveNumber;//[Offset: 0x18, Size: 0x4]
	int CorpsTotalNumber;//[Offset: 0x1c, Size: 0x4]
	int TotalKillNumber;//[Offset: 0x20, Size: 0x4]
	int OnOutGameRealTimeRank;//[Offset: 0x24, Size: 0x4]
	float MaxSurvivalTime;//[Offset: 0x28, Size: 0x4]
	float TotalDamage;//[Offset: 0x2c, Size: 0x4]
	bool bIsOutGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: CorpsToPlayerKeyInfo
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	int CorpsID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BattleRoyalCorpsWarPlayerState.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int CorpsID;//[Offset: 0xd10, Size: 0x4]

--------------------------------
Class: BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	TeamModeComponent* TeamModeComponent;//[Offset: 0x1094, Size: 0x4]
	PlayerStartObjets[] PlayerStartObjs;//[Offset: 0x1118, Size: 0xc]
	PlayerStartObjets[] PlayerStartNeedDestroyObjs;//[Offset: 0x1124, Size: 0xc]
	Actor*[] StartNeedDestroyActorArray;//[Offset: 0x1130, Size: 0xc]
	bool bConsiderCamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113c, Size: 0x1]
	bool bIsGameEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113d, Size: 0x1]
	bool ShouldSendTeamBattleResult(int TeamID);// 0x132c6a4
	bool CheckTeamGameEnd();// 0x132c674

--------------------------------
Class: TeamModeComponent.ActorComponent.Object
	BattleRoyaleGameModeTeam* OwnerGameMode;//[Offset: 0x17c, Size: 0x4]
	int RealTeamNum;//[Offset: 0x180, Size: 0x4]
	void RemoveToTeamMap(STExtraPlayerState* PlayerState);// 0x14f845c
	void RemoveTeam(int TeamID);// 0x14f83e4
	void RemoveAllTeam();// 0x14f83d0
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x14f8314
	bool IsTeamIDValid(int TeamID);// 0x14f8294
	int[] GetTeamIDsByCampID(int CampID);// 0x14f818c
	int[] GetTeamIDs();// 0x14f80cc
	STExtraPlayerState*[] GetTeamates(int TeamID);// 0x14f7fc4
	int GetRealTeamNum();// 0x14f7fa8
	STExtraPlayerState*[] GetCampmates(int CampID);// 0x14f7ea0
	int[] GetCampIDs();// 0x14f7de0
	STExtraPlayerState*[] GetAllTeamates();// 0x14f7d20
	void AddToTeamMap(STExtraPlayerState* PlayerState);// 0x14f7ca8
	void AddToCampMap(STExtraPlayerState* PlayerState);// 0x14f7c30
	void AddTeamCount(int TeamCount, bool bReset);// 0x14f7b6c

--------------------------------
Class: PlayerStartObjets
	class Object* Objects;//[Offset: 0x0, Size: 0x4]
	Vector SpawnLoc;//[Offset: 0x4, Size: 0xc]
	Rotator SpawnRot;//[Offset: 0x10, Size: 0xc]
	Vector Scale;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: GameModeStateFightingTeam.GameModeStateFighting.GameModeState.Object

--------------------------------
Class: GameModeStateFinishedTeam.GameModeStateFinished.GameModeState.Object

--------------------------------
Class: BattleRoyalCorpsWarMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: BattleRoyaleGameModeGroup.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	int[] GenerateGodSon;//[Offset: 0x1140, Size: 0xc]
	<int,int> TeamSpecialPlayerNum;//[Offset: 0x114c, Size: 0x3c]
	<int,int> TeamLeftSpecialPlayerNum;//[Offset: 0x1188, Size: 0x3c]
	int[] LoseTeamId;//[Offset: 0x11c4, Size: 0xc]

--------------------------------
Class: GameModeStateFightingGroup.GameModeStateFightingTeam.GameModeStateFighting.GameModeState.Object

--------------------------------
Class: GameModeStateFinishedGroup.GameModeStateFinishedTeam.GameModeStateFinished.GameModeState.Object

--------------------------------
Class: BattleRoyalTrainingGameMode.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	<PlayerStart*,UAEPlayerController*> PlayerStartToPCMap;//[Offset: 0x1094, Size: 0x3c]

--------------------------------
Class: BattleSceneAvatarDisplayPoseComponent.AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	enum[] DisplayAvatarItemFilterList;//[Offset: 0x270, Size: 0xc]
	STExtraPlayerState* TargetPlayerState;//[Offset: 0x27c, Size: 0x8]
	BattleSceneAvatarDisplayInfo AvatarDisplayInfo;//[Offset: 0x284, Size: 0x38]
	void UnPossessPosePosition();// 0x132d180
	void PossessPosePosition();// 0x132d16c
	void OnCharacterPlayEmote(int InPlayEmoteID);// 0x132d0f4
	bool MatchCharacter(FString InPlayerName);// 0x132cf94
	bool IsValidDisplayInfo(out const BattleSceneAvatarDisplayInfo InDisplayInfo);// 0x132cec4
	bool IsPosePositiontPossessed();// 0x132ce9c
	void InitDisplayAvatar(out const BattleSceneAvatarDisplayInfo BattleAvatarDisplayInfo);// 0x132cdd4
	CharacterAvatarComponent2* GetDisplayAvatar();// 0x132cdac
	BattleSceneAvatarDisplayInfo GetAvatarPoseDisplayInfo();// 0x132cd7c
	int GetAvatarGender();// 0x132cd54
	void EquipWeaponForDisplayAvatar();// 0x132cd38
	void EquipClothingForDisplayAvatar();// 0x132cd1c
	void ClearDisplayAvatar();// 0x132cd00

--------------------------------
Class: BossContainer.Actor.Object
	StaticMeshComponent* InStaticMesh;//[Offset: 0x2cc, Size: 0x4]
	FName SocketHead;//[Offset: 0x2d0, Size: 0x8]
	FName SocketTail;//[Offset: 0x2d8, Size: 0x8]
	float VerticalHalfHeight;//[Offset: 0x2e0, Size: 0x4]
	void ChangeNetCullDistance(float Distance);// 0x132dc08

--------------------------------
Class: ExplosionProjectileBullet.ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	ParticleSystem* ExplosionParticle;//[Offset: 0x53c, Size: 0x4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x540, Size: 0x4]
	ApplyRadialDamageParams RadialDamageParams;//[Offset: 0x544, Size: 0x68]
	float DamageRadiusInner;//[Offset: 0x5ac, Size: 0x4]
	float DamageRadiusOuter;//[Offset: 0x5b0, Size: 0x4]
	float HealthDamageInner;//[Offset: 0x5b4, Size: 0x4]
	float HealthDamageOuter;//[Offset: 0x5b8, Size: 0x4]
	float ExplosionMomentum;//[Offset: 0x5bc, Size: 0x4]
	float DamageFallOffParam;//[Offset: 0x5c0, Size: 0x4]
	float TimeBeforeExplosion;//[Offset: 0x5c4, Size: 0x4]
	float HealthDamageInnerForZombie;//[Offset: 0x5c8, Size: 0x4]
	float HealthDamageOuterForZombie;//[Offset: 0x5cc, Size: 0x4]
	float SelfDamageReduce;//[Offset: 0x5d0, Size: 0x4]
	float TeammateDamageReduce;//[Offset: 0x5d4, Size: 0x4]
	float DoorDamageRate;//[Offset: 0x5d8, Size: 0x4]
	float VehicleDamageRate;//[Offset: 0x5dc, Size: 0x4]
	int MaxDamageCount;//[Offset: 0x5e0, Size: 0x4]
	float VoiceCheckShowTime;//[Offset: 0x5e4, Size: 0x4]
	float VoiceCheckDis;//[Offset: 0x5e8, Size: 0x4]
	float ExplosionCenterOffset;//[Offset: 0x5ec, Size: 0x4]
	bool bHasExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1]
	delegate OnBulletExplosionDelegate;//[Offset: 0x5f4, Size: 0xc]
	bool bNeedDisableTailFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	bool bNeedOptimizeTailFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 0x1]
	void RPC_Multicast_OnImpact(const HitResult _ImpactResult);// 0x137f240
	void ReloadNoEncodeAttr();// 0x12ee368
	void OnImpact(out const HitResult _ImpactResult);// 0x132dfec
	void OnBulletExplosionDelegate__DelegateSignature();// 0x1c01fa0
	void HandleOnImpactIml(out const HitResult _ImpactResult);// 0x137f19c
	byte GetBulletRole();// 0x137f174
	void CheckOptimizeTailFX();// 0x137f158

--------------------------------
Class: ApplyRadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 0x4]
	float MinimumDamage;//[Offset: 0x4, Size: 0x4]
	float BaseMomentumMag;//[Offset: 0x8, Size: 0x4]
	Vector Origin;//[Offset: 0xc, Size: 0xc]
	float DamageInnerRadius;//[Offset: 0x18, Size: 0x4]
	float DamageOuterRadius;//[Offset: 0x1c, Size: 0x4]
	float DamageFalloff;//[Offset: 0x20, Size: 0x4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	class DamageType* DamageTypeClass;//[Offset: 0x28, Size: 0x4]
	Actor*[] IgnoreActors;//[Offset: 0x2c, Size: 0xc]
	class Actor[] IgnoreClasses;//[Offset: 0x38, Size: 0xc]
	Actor* DamageCauser;//[Offset: 0x44, Size: 0x4]
	Controller* InstigatedBy;//[Offset: 0x48, Size: 0x4]
	float CollisionFreeRadius;//[Offset: 0x4c, Size: 0x4]
	byte DamageChannel;//[Offset: 0x50, Size: 0x1]
	float AddtionalDamage;//[Offset: 0x54, Size: 0x4]
	byte DamageEventType;//[Offset: 0x58, Size: 0x1]
	float HorizontalCoverRatio;//[Offset: 0x5c, Size: 0x4]
	float VerticalCoverRatio;//[Offset: 0x60, Size: 0x4]
	bool bDrawVisibilityTraceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bExplosionTestOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]

--------------------------------
Class: BounceExplosionProjectileBullet.ExplosionProjectileBullet.ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	float ExplosionTimeAfterFirstBounce;//[Offset: 0x608, Size: 0x4]
	float ExplosionTimeAfterEnetrWater;//[Offset: 0x60c, Size: 0x4]
	AkAudioEvent* BounceSound;//[Offset: 0x610, Size: 0x4]
	bool bHasEnterWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x132e140
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x132e090
	void OnImpact(out const HitResult _ImpactResult);// 0x132dfec
	void OnBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x132df00

--------------------------------
Class: BRGameModeStateActive_DeathMatch.GameModeStateActive.GameModeState.Object

--------------------------------
Class: BRGameModeStateFighting_DeathMatch.GameModeStateFightingTeam.GameModeStateFighting.GameModeState.Object
	class Actor[] ClearResidueClassList;//[Offset: 0x40, Size: 0xc]
	float StopJoin_RemainTime;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BRGameModeStateFinished_DeathMatch.GameModeStateFinishedTeam.GameModeStateFinished.GameModeState.Object

--------------------------------
Class: BRGameModeStateReady_DeathMatch.GameModeStateReady.GameModeState.Object

--------------------------------
Class: BRGameModeTeam_DeathMatch.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	enum DeathMatchSubModeType;//[Offset: 0x113f, Size: 0x1]
	<int,HomeMapBaseRegion> HomeMapBaseRegions;//[Offset: 0x1140, Size: 0x3c]
	int MapId;//[Offset: 0x117c, Size: 0x4]
	HomeMapBaseRegion CurMapBaseRegion;//[Offset: 0x1180, Size: 0x48]
	int StopJoin_BestScore;//[Offset: 0x11c8, Size: 0x4]
	int StopJoin_ScoreGap;//[Offset: 0x11cc, Size: 0x4]
	int DeathMatchWinScore;//[Offset: 0x11d0, Size: 0x4]
	int Score_Kill;//[Offset: 0x11d4, Size: 0x4]
	int ContinuouKillNum;//[Offset: 0x11d8, Size: 0x4]
	int SuperGodKillNum;//[Offset: 0x11dc, Size: 0x4]
	int GameComingEndNotify_RemainKillNum;//[Offset: 0x11e0, Size: 0x4]
	int GameComingEndNotify_RemainTime;//[Offset: 0x11e4, Size: 0x4]
	int GameComingEndNotify_HalfTime;//[Offset: 0x11e8, Size: 0x4]

--------------------------------
Class: HomeMapBaseRegion
	HomeBaseRegion BaseRegionLeft;//[Offset: 0x0, Size: 0x24]
	HomeBaseRegion BaseRegionRight;//[Offset: 0x24, Size: 0x24]

--------------------------------
Class: HomeBaseRegion
	int RegionID;//[Offset: 0x0, Size: 0x4]
	Vector2D P1;//[Offset: 0x4, Size: 0x8]
	Vector2D P2;//[Offset: 0xc, Size: 0x8]
	Vector2D P3;//[Offset: 0x14, Size: 0x8]
	Vector2D P4;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: BRGameStateTeam_DeathMatch.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	int RemainMatchTime;//[Offset: 0x7d8, Size: 0x4]
	enum DeathMatchSubModeType;//[Offset: 0x7dc, Size: 0x1]
	int DeathMatchWinScore;//[Offset: 0x7e0, Size: 0x4]
	int RespawnInvincibleTime;//[Offset: 0x7e4, Size: 0x4]
	DeathMatchTeamScoreData[] DeathMatchTeamScoreDatas;//[Offset: 0x7e8, Size: 0xc]
	delegate OnDeathMatchGlobalNotifyDelegate;//[Offset: 0x7f8, Size: 0xc]
	delegate OnDeathMatchGlobalAudioDelegate;//[Offset: 0x804, Size: 0xc]
	delegate OnDeathMatchGameEndDelegate;//[Offset: 0x810, Size: 0xc]
	DeathMatchMedalManagerComponent* MedalManagerComponent;//[Offset: 0x81c, Size: 0x4]
	DeathMatchWWISEManagerComponent* WWISEManagerComponent;//[Offset: 0x820, Size: 0x4]
	uint64 FirstKillPlayer;//[Offset: 0x828, Size: 0x8]
	uint64 LastKillPlayer;//[Offset: 0x830, Size: 0x8]
	void ServerResetShowWrapperActor();// 0x132f928
	void OnRep_DeathMatchTeamScoreDatas();// 0x132f914
	void MulticastRPC_BroadcastDeathMatchGlobalNotify(const DeathMatchPlayerStateData KillerStateData, const DeathMatchPlayerStateData VictimerStateData, enum GlobalNotifyReason);// 0x132f668
	void MulticastRPC_BroadcastDeathMatchGlobalAudio(const int KillerTeamID, const int VictimerTeamID, enum GlobalNotifyReason);// 0x132f560
	void MulticastRPC_BroadcastDeathMatchGameEndNotify(int WinTeamID);// 0x132f4e0
	FString GetFormatRemainTimeText();// 0x132f420
	DeathMatchPlayerStateData GetCurrentClientDeathMatchPlayerStateData();// 0x132f254
	void BroadcastResetWrapperShowActor();// 0x132f1f8

--------------------------------
Class: DeathMatchTeamScoreData
	int TeamID;//[Offset: 0x0, Size: 0x4]
	FString Result;//[Offset: 0x4, Size: 0xc]
	byte ResultEnum;//[Offset: 0x10, Size: 0x1]
	int TeamRank;//[Offset: 0x14, Size: 0x4]
	int TeamScore;//[Offset: 0x18, Size: 0x4]
	DeathMatchPlayerStateData[] PlayerStateDatas;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: DeathMatchPlayerStateData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	DeathMatchPlayerInfo DeathMatchPlayerInfo;//[Offset: 0x8, Size: 0x40]
	int TeamID;//[Offset: 0x48, Size: 0x4]
	int Score;//[Offset: 0x4c, Size: 0x4]
	int Rank;//[Offset: 0x50, Size: 0x4]
	int Kills;//[Offset: 0x54, Size: 0x4]
	int Assists;//[Offset: 0x58, Size: 0x4]
	int Deaths;//[Offset: 0x5c, Size: 0x4]
	int ContinuouKills;//[Offset: 0x60, Size: 0x4]
	bool IsAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: DeathMatchPlayerInfo
	uint64 Uid;//[Offset: 0x0, Size: 0x8]
	FString UIDString;//[Offset: 0x8, Size: 0xc]
	FString PlayerName;//[Offset: 0x14, Size: 0xc]
	FString iconUrl;//[Offset: 0x20, Size: 0xc]
	byte gender;//[Offset: 0x2c, Size: 0x1]
	byte PlatformGender;//[Offset: 0x2d, Size: 0x1]
	int PlayerLevel;//[Offset: 0x30, Size: 0x4]
	int SegmentLevel;//[Offset: 0x34, Size: 0x4]
	int AvatarBoxId;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: DeathMatchMedalManagerComponent.ActorComponent.Object
	FString MedalDataTableName;//[Offset: 0xbc, Size: 0xc]
	int HunterKillCount;//[Offset: 0xc8, Size: 0x4]
	int RallyContinuousDeadCount;//[Offset: 0xcc, Size: 0x4]
	float SharpshooterDistance;//[Offset: 0xd0, Size: 0x4]
	float SlaughterTime;//[Offset: 0xd4, Size: 0x4]
	int SlaughterKillCount;//[Offset: 0xd8, Size: 0x4]
	float AntiKillRemainHealthRatio;//[Offset: 0xdc, Size: 0x4]
	DeathMatchMedalBase*[] MedalList;//[Offset: 0xe0, Size: 0xc]

--------------------------------
Class: DeathMatchMedalBase.Object
	DeathMatchMedalManagerComponent* DeathMatchMedalManager;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: DeathMatchWWISEManagerComponent.ActorComponent.Object
	<enum,WWIEBankContainer> RandEventPool;//[Offset: 0xbc, Size: 0x3c]
	<enum,AkAudioEvent*> GlobalEventPool;//[Offset: 0xf8, Size: 0x3c]
	void OnReload();// 0x135e3a4
	void OnPlayerStateRep();// 0x135e390
	void OnGlobalNotify(const int KillerTeamID, const int VictimerTeamID, enum GlobalNotifyReason);// 0x135e290
	void DeathMatchMedalNotify(out const int[] MedalIDList);// 0x135e1c4

--------------------------------
Class: WWIEBankContainer
	AkAudioEvent* MaleBank;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* FemaleBank;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BRPlayerStateTeam_DeathMatch.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int PlayerGameID;//[Offset: 0xd10, Size: 0x4]
	int DeathMatchScore;//[Offset: 0xd14, Size: 0x4]
	int Rank;//[Offset: 0xd18, Size: 0x4]
	int Deaths;//[Offset: 0xd20, Size: 0x4]
	int ContinuousKills;//[Offset: 0xd24, Size: 0x4]
	delegate DeathMatchPersonalNotifyDelegate;//[Offset: 0xd84, Size: 0xc]
	delegate DeathMatchTeammateContinueKillNotifyDelegate;//[Offset: 0xd90, Size: 0xc]
	delegate DeathMatchPersonalDieNotifyDelegate;//[Offset: 0xd9c, Size: 0xc]
	delegate DeathMatchMedalNotifyDelegate;//[Offset: 0xda8, Size: 0xc]
	int SelectedWeaponConfigIndex;//[Offset: 0xdb4, Size: 0x4]
	PlayerWeaponsConfig[] PlayerWeaponsConfigList;//[Offset: 0xdb8, Size: 0xc]
	void OnRep_SelectedWeaponConfigIndex();// 0x1330700
	void OnRep_PlayerWeaponsConfigList();// 0x12e82e4
	int GetPlayerContinuousKills();// 0x13306e4
	void ClientRPC_BroadcastTeammateContinueKillData(const uint64 KillerPlayerKey, int ContinuouKills);// 0x133061c
	void ClientRPC_BroadcastDeathMatchPersonalNotify(const DeathMatchPlayerStateData KillerStateData, const DeathMatchPlayerStateData VictimerStateData, enum PersonalNotifyReason);// 0x1330370
	void ClientRPC_BroadcastDeathMatchPersonalDieNotify(const DeathMatchPlayerDieData PlayerDieData);// 0x1330280
	void ClientRPC_BroadcastDeathMatchMedalNotify(const int[] MedalIDList);// 0x13301bc

--------------------------------
Class: PlayerWeaponsConfig
	FString ConfigName;//[Offset: 0x0, Size: 0xc]
	SingleWeaponConfig[] WeaponDataList;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SingleWeaponConfig
	int WeaponID;//[Offset: 0x0, Size: 0x4]
	int[] AttachMentIDList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: DeathMatchPlayerDieData
	DeathMatchDamageCauserRecordData[] KillerCauserRecords;//[Offset: 0x0, Size: 0xc]
	DeathMatchPlayerStateData KillerStateData;//[Offset: 0x10, Size: 0x68]
	DeathMatchPlayerStateData[] AssisterStateDatas;//[Offset: 0x78, Size: 0xc]
	DeathMatchDamageRecordData[] VictimDamageRecords;//[Offset: 0x84, Size: 0xc]

--------------------------------
Class: DeathMatchDamageCauserRecordData
	int DamageType;//[Offset: 0x0, Size: 0x4]
	int MurderWeaponID;//[Offset: 0x4, Size: 0x4]
	float Damage;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: DeathMatchDamageRecordData
	FString VictimName;//[Offset: 0x0, Size: 0xc]
	float Damage;//[Offset: 0xc, Size: 0x4]
	enum DamageResult;//[Offset: 0x10, Size: 0x1]
	float LastTime;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BTDecorator_AttrObserver.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIAttrObserver[] AttrObserverList;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: AIAttrObserver
	enum AttrType;//[Offset: 0x0, Size: 0x1]
	enum CompareType;//[Offset: 0x1, Size: 0x1]
	int ComparePercentValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0xc]
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x4]
	byte SelectedKeyID;//[Offset: 0x1c, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: BTDecorator_IsMovementMode.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte MovementMode;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: BTDecorator_Mob_CheckJump.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int RandomReachablePointRadius;//[Offset: 0x60, Size: 0x4]
	Vector2D JumpHighRange;//[Offset: 0x64, Size: 0x8]
	Vector2D JumpLowRange;//[Offset: 0x6c, Size: 0x8]
	int JumpStartOffsetZ;//[Offset: 0x74, Size: 0x4]
	int JumpHighThreshold;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: BTDecorator_Mob_CheckJumpToLowDirect.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float JumpToLowThreshold;//[Offset: 0x60, Size: 0x4]
	float CheckDistance;//[Offset: 0x64, Size: 0x4]
	float JumpToLowSpeed;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: BTDecorator_Mob_CheckObstacle.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int CheckDistance;//[Offset: 0x60, Size: 0x4]
	int BackDistance;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: BTDecorator_Mob_CloseEnough.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableDistance;//[Offset: 0x60, Size: 0x4]
	bool bCheckDistanceIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]

--------------------------------
Class: BTDecorator_Mob_HasAIState.BTDecorator.BTAuxiliaryNode.BTNode.Object
	enum AIState;//[Offset: 0x3e, Size: 0x1]

--------------------------------
Class: BTDecorator_Mob_IsTargetAbove.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableDistance;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: BTDecorator_Mob_LineTrace.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte[] traceObjectTypes;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: BTDecorator_Mob_LinkCheckJumpWall.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int KeepDistance;//[Offset: 0x60, Size: 0x4]
	float LineTraceHeightOffset;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: BTDecorator_Mob_Once.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int AllowTimes;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: BTDecorator_NearTargetLoc.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float Range;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: BTDecorator_NewSatisfyAttkDist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float DefaultAttackDist;//[Offset: 0x40, Size: 0x4]
	bool bIsInversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float ExtraDistance;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BTDecorator_Probability.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ExecuteProbability;//[Offset: 0x40, Size: 0x4]
	bool bUseDifficultyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	<int,float> DifficultyProbabilityCfg;//[Offset: 0x48, Size: 0x3c]

--------------------------------
Class: BTDecorator_SatisfyAttkDist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AttackDist;//[Offset: 0x40, Size: 0x4]
	bool bIsInversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: BTReuseList.UAEUserWidget.UserWidget.Widget.Visual.Object
	float itemSizeX;//[Offset: 0x2fc, Size: 0x4]
	float itemSizeY;//[Offset: 0x300, Size: 0x4]
	float[] itemSizeYList;//[Offset: 0x304, Size: 0xc]
	int TotalNum;//[Offset: 0x310, Size: 0x4]
	bool misaligned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	int visibleNum;//[Offset: 0x318, Size: 0x4]
	int topEmptyNum;//[Offset: 0x31c, Size: 0x4]
	int oldTopEmptyNum;//[Offset: 0x320, Size: 0x4]
	Spacer*[] spacerList;//[Offset: 0x324, Size: 0xc]
	UAEUserWidget*[] ItemList;//[Offset: 0x330, Size: 0xc]
	float totalHeight;//[Offset: 0x33c, Size: 0x4]
	float deltaTotalHeight;//[Offset: 0x340, Size: 0x4]
	class UAEUserWidget* ItemClass;//[Offset: 0x344, Size: 0x4]
	delegate itemUpdateDelegate;//[Offset: 0x360, Size: 0xc]
	void UpdateSingleHeight(int Index, float Height);// 0x1332194
	void SetRowNumAsUnif(float itemX, float itemY, int Num, bool misalign, bool MultFrame);// 0x1331ff4
	void RefreshListByOffset(float Offset);// 0x1331f7c
	void DoInit();// 0x1331f68

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0xcc, Size: 0x8]
	void SetSize(Vector2D InSize);// 0x2399fa8

--------------------------------
Class: BTService_AdvancedShooting.BTService.BTAuxiliaryNode.BTNode.Object
	enum WeaponShotType;//[Offset: 0x45, Size: 0x1]
	float DeviationScale;//[Offset: 0x48, Size: 0x4]
	Vector2D RandomShootFreqRange;//[Offset: 0x4c, Size: 0x8]
	BlackboardKeySelector ReloadBlackBoardKey;//[Offset: 0x58, Size: 0x20]
	bool bSetCanSeeTargetFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bUseDifficultyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	<int,DifficultyShootingConfig> DifficultyShootingCfg;//[Offset: 0x7c, Size: 0x3c]

--------------------------------
Class: DifficultyShootingConfig
	enum WeaponShotType;//[Offset: 0x0, Size: 0x1]
	float DeviationScale;//[Offset: 0x4, Size: 0x4]
	Vector2D RandomShootFreqRange;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: BTService_ChooseEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x48, Size: 0x4]
	float MaxRememberLastAttackedMeTimeInSeconds;//[Offset: 0x4c, Size: 0x4]
	float MaxTraceLastAttackedMeDistance;//[Offset: 0x50, Size: 0x4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x54, Size: 0x4]
	float MinTimeLockTarget;//[Offset: 0x58, Size: 0x4]
	float SensedRadius;//[Offset: 0x5c, Size: 0x4]
	float EquipWeaponSensedRadius;//[Offset: 0x60, Size: 0x4]
	float EquipWeaponNightSensedRadius;//[Offset: 0x64, Size: 0x4]
	float EmergencyRadius;//[Offset: 0x68, Size: 0x4]
	WeaponType2Range[] WeaponType2Ranges;//[Offset: 0x6c, Size: 0xc]
	WeaponTypeToRange[] DefaultWeaponTypeToRanges;//[Offset: 0x78, Size: 0xc]
	<enum,WeatherToRange> WeatherToRange;//[Offset: 0x84, Size: 0x3c]
	<enum,enum> WeatherTypeToWeatherRange;//[Offset: 0xc0, Size: 0x3c]
	float PVESensedRadius;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: WeaponType2Range
	byte WeaponType;//[Offset: 0x0, Size: 0x1]
	float Range;//[Offset: 0x4, Size: 0x4]
	float NightRange;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WeaponTypeToRange
	byte WeaponType;//[Offset: 0x0, Size: 0x1]
	float Range;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeatherToRange
	WeaponTypeToRange[] Ranges;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: BTService_ChooseFightbackEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float SensedRadius;//[Offset: 0x48, Size: 0x4]
	float EquipWeaponSensedRadius;//[Offset: 0x4c, Size: 0x4]
	float EmergencyRadius;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: BTService_Cruising.BTService.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTService_DeliverControl.BTService.BTAuxiliaryNode.BTNode.Object
	DeliverControlRatingConfig[] RatingConfig;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: DeliverControlRatingConfig
	int Rating;//[Offset: 0x0, Size: 0x4]
	float InnerRadius1;//[Offset: 0x4, Size: 0x4]
	float InnerRadius2;//[Offset: 0x8, Size: 0x4]
	float OuterRadius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BTService_DistantJudge.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector WatchTargetBlackBoardKey;//[Offset: 0x48, Size: 0x20]
	AIDistantJudgeNoftify[] DistantJudges;//[Offset: 0x68, Size: 0xc]
	bool ResetModifyBBData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]

--------------------------------
Class: AIDistantJudgeNoftify
	float RightValue;//[Offset: 0x0, Size: 0x4]
	int SetBBValue;//[Offset: 0x4, Size: 0x4]
	BlackboardKeySelector NotifyBlackBoardKey;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BTService_FightDecisionSystem.BTService.BTAuxiliaryNode.BTNode.Object
	float EnemyTraceRadius;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x48, Size: 0x20]

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	byte FocusPriority;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BTService_Focus.BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	enum AIFocusPriority;//[Offset: 0x69, Size: 0x1]
	bool ResetFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]

--------------------------------
Class: BTService_LookAround.BTService.BTAuxiliaryNode.BTNode.Object
	Vector2D RotationSpeed;//[Offset: 0x48, Size: 0x8]
	Vector2D RotationAngle;//[Offset: 0x50, Size: 0x8]
	Vector2D WaitTimeWhenStop;//[Offset: 0x58, Size: 0x8]
	float AcceptToleranceInDegree;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: BTService_Mob_AddHp.BTService.BTAuxiliaryNode.BTNode.Object
	int BuffID_AddHP;//[Offset: 0x48, Size: 0x4]
	enum addHPType;//[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: BTService_Mob_AdvancedMovementDetector.BTService.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTService_Mob_AutoDestroy.BTService.BTAuxiliaryNode.BTNode.Object
	float CheckRadius;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BTService_Mob_CheckLocation.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxAllowedDistanceFromSpawnPointSq;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BTService_Mob_CheckLoseTarget.BTService.BTAuxiliaryNode.BTNode.Object
	float LoseTargetThreshold;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BTService_Mob_CheckPathExist.BTService.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTService_Mob_ChooseEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x48, Size: 0x4]
	float MinTimeLockTarget;//[Offset: 0x4c, Size: 0x4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x50, Size: 0x4]
	float SensedRadius;//[Offset: 0x54, Size: 0x4]
	enum searchType;//[Offset: 0x58, Size: 0x1]
	float PreciseHatredDecreaseSpeed;//[Offset: 0x5c, Size: 0x4]
	bool SensedRadiusAdvanceInNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float LoseSightRadius;//[Offset: 0x64, Size: 0x4]
	bool DontAttackWhenTargetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float AttackVehicleInRadius;//[Offset: 0x6c, Size: 0x4]
	bool AttackVehicleInRadiusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	enum searchVehicleType;//[Offset: 0x71, Size: 0x1]

--------------------------------
Class: BTService_Mob_Hearing.BTService.BTAuxiliaryNode.BTNode.Object
	float MinTimeLockTarget;//[Offset: 0x48, Size: 0x4]
	float MaxTimeLockWhenNoNextSound;//[Offset: 0x4c, Size: 0x4]
	enum searchType;//[Offset: 0x50, Size: 0x1]
	float AcceptableDistance;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: BTService_Mob_MoveBlockTimer.BTService.BTAuxiliaryNode.BTNode.Object
	float ClearBlockStatusTime;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BTService_Mob_OpenDoor.BTService.BTAuxiliaryNode.BTNode.Object
	float OpenDoorRangeSq;//[Offset: 0x48, Size: 0x4]
	float AutoOpenDoorInterval;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BTService_SensedEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float IsNotSeeTargetTime;//[Offset: 0x48, Size: 0x4]
	float SensedRadius;//[Offset: 0x4c, Size: 0x4]
	float EquipWeaponSensedRadius;//[Offset: 0x50, Size: 0x4]
	float EquipWeaponNightSensedRadius;//[Offset: 0x54, Size: 0x4]
	float EmergencyRadius;//[Offset: 0x58, Size: 0x4]
	<int,float> AISensedEnemyPoseRatio;//[Offset: 0x5c, Size: 0x3c]

--------------------------------
Class: BTService_Shooting.BTService.BTAuxiliaryNode.BTNode.Object
	float DeviationScale;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BTService_WalkingDeadChooseEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x48, Size: 0x4]
	float MaxRememberLastAttackedMeTimeInSeconds;//[Offset: 0x4c, Size: 0x4]
	float MaxTraceLastAttackedMeDistance;//[Offset: 0x50, Size: 0x4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x54, Size: 0x4]
	float MinTimeLockTarget;//[Offset: 0x58, Size: 0x4]
	float SensedRadius;//[Offset: 0x5c, Size: 0x4]
	float EquipWeaponSensedRadius;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: BTService_WeatherTimeCount.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector StartCurrentWeatherCountDownBlackboardKey;//[Offset: 0x48, Size: 0x20]
	BlackboardKeySelector IsCurrentWeatherBlackboardKey;//[Offset: 0x68, Size: 0x20]
	enum NewWeatherStatusType;//[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x4c, Size: 0x4]
	float RandomDeviation;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: BTTask_AdvancedWait.BTTask_Wait.BTTaskNode.BTNode.Object
	bool bUseDifficultyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	<int,DifficultyTimeConfig> DifficultyTimeCfg;//[Offset: 0x58, Size: 0x3c]

--------------------------------
Class: DifficultyTimeConfig
	float WaitTime;//[Offset: 0x0, Size: 0x4]
	float RandomDeviation;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x50, Size: 0x20]

--------------------------------
Class: BTTask_ChangeWalkSpeed.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum iWalkType;//[Offset: 0x70, Size: 0x1]

--------------------------------
Class: BTTask_ClearDelivery.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_DealNextBuildingPathNode.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float findSpotXYOffset;//[Offset: 0x70, Size: 0x4]
	float findSpotZOffset;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: BTTask_ShortDistanceMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum MoveType;//[Offset: 0x70, Size: 0x1]
	enum MovePathType;//[Offset: 0x71, Size: 0x1]
	int SampleNumber;//[Offset: 0x74, Size: 0x4]
	Vector2D ControllPoint1;//[Offset: 0x78, Size: 0x8]
	Vector2D ControllPoint2;//[Offset: 0x80, Size: 0x8]
	Vector2D DirectionAngleRange;//[Offset: 0x88, Size: 0x8]
	Vector2D MoveTargetDistRange;//[Offset: 0x90, Size: 0x8]
	Vector2D ExecutionDuration;//[Offset: 0x98, Size: 0x8]
	float RePlanTime;//[Offset: 0xa0, Size: 0x4]
	bool AlwaysSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	float AcceptRadius;//[Offset: 0xa8, Size: 0x4]
	bool StopOnOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool UsePathfinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	bool AllowPartialPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1]
	bool ProjectDestinationToNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1]
	float ExceptionRandomRadius;//[Offset: 0xb0, Size: 0x4]
	bool DebugDrawPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: BTTask_Escape.BTTask_ShortDistanceMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float TryLineTestZOffset;//[Offset: 0xb8, Size: 0x4]
	float TryLineTestDistance;//[Offset: 0xbc, Size: 0x4]
	int MaxTrySampleTimes;//[Offset: 0xc0, Size: 0x4]
	float MinTrySampleDistance;//[Offset: 0xc4, Size: 0x4]
	float MinTryEscapeDistance;//[Offset: 0xc8, Size: 0x4]
	float EscapeStopDistance;//[Offset: 0xcc, Size: 0x4]
	BlackboardKeySelector EnemyBlackboardKey;//[Offset: 0xd0, Size: 0x20]

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x70, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x74, Size: 0x4]
	float ObservedBlackboardValueTolerance;//[Offset: 0x78, Size: 0x4]
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 0x1]
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 0x1]
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 0x1]
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 0x1]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 0x1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 0x1]
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c, Size: 0x1]
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 0x1]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x48, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x60, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x78, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x7c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x80, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x8a, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0x8c, Size: 0x4]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0x90, Size: 0x4]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0x94, Size: 0x4]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0x98, Size: 0xc]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xa4, Size: 0x4]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xa8, Size: 0x4]
	void AILoggingVerbose();// 0x12fe19c
	void AIIgnorePlayers();// 0x13e61a0

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x1c, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x20, Size: 0xc]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x4]
	BTCompositeNode* Template;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EnvQueryManager.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0x70, Size: 0xc]
	EnvQueryContext*[] LocalContexts;//[Offset: 0x7c, Size: 0xc]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0x88, Size: 0xc]
	float MaxAllowedTestingTime;//[Offset: 0xd4, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0xdc, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0xe0, Size: 0x8]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x25254bc

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x20, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x1c, Size: 0x4]
	EnvQueryTest*[] Tests;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x20, Size: 0xc]
	class EnvQueryItemType* ItemType;//[Offset: 0x2c, Size: 0x4]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x20, Size: 0x4]
	byte TestPurpose;//[Offset: 0x24, Size: 0x1]
	FString TestComment;//[Offset: 0x28, Size: 0xc]
	byte MultipleContextFilterOp;//[Offset: 0x34, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x35, Size: 0x1]
	byte FilterType;//[Offset: 0x36, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x38, Size: 0x20]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x58, Size: 0x20]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0x78, Size: 0x20]
	byte ScoringEquation;//[Offset: 0x99, Size: 0x1]
	byte ClampMinType;//[Offset: 0x9a, Size: 0x1]
	byte ClampMaxType;//[Offset: 0x9b, Size: 0x1]
	enum NormalizationType;//[Offset: 0x9c, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0xa0, Size: 0x20]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0xc0, Size: 0x20]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0xe0, Size: 0x20]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x100, Size: 0x20]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Property* PropertyType;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AIDataProviderValue
	Property* CachedProperty;//[Offset: 0x4, Size: 0x4]
	AIDataProvider* DataBinding;//[Offset: 0x8, Size: 0x4]
	FName DataField;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x20, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x38, Size: 0x4]
	int OptionIndex;//[Offset: 0x3c, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x40, Size: 0xc]
	void SetNamedParam(FName ParamName, float Value);// 0x2524770
	Vector[] GetResultsAsLocations();// 0x25246b0
	Actor*[] GetResultsAsActors();// 0x25245f0
	float GetItemScore(int ItemIndex);// 0x2524570
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x1c01fa0

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFail;//[Offset: 0x28, Size: 0xc]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x250b1e8

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x2529518
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x2529418
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x2529260
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x2529074
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x2528ed0
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x2528c9c
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x2528a60

--------------------------------
Class: BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum MoveType;//[Offset: 0x7e, Size: 0x1]
	float AcceptRadius;//[Offset: 0x80, Size: 0x4]
	float GenerateNavRadius;//[Offset: 0x84, Size: 0x4]
	float TimeLimit;//[Offset: 0x88, Size: 0x4]
	bool ForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	bool MoveWithOutPathFinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1]
	bool GotoExceptionWhenFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1]

--------------------------------
Class: BTTask_FindAndPickItem.BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_FindAndPickupEquip.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_FindNearestTombBoxTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float PlayerBackpackSearchRadius;//[Offset: 0x70, Size: 0x4]
	float AirDropSearchRadius;//[Offset: 0x74, Size: 0x4]
	float AirDropBoxRadius;//[Offset: 0x78, Size: 0x4]
	float MaxPainFindInBlueCircle;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: BTTask_FindOcclusionPoint.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: BTTask_FindWayPoint.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float InPointRadius;//[Offset: 0x70, Size: 0x4]
	byte MaxRandIterTimes;//[Offset: 0x74, Size: 0x1]
	bool bRandUseNav;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]
	float DebugDrawPointTime;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: BTTask_ForceIdle.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float IdleTime;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: BTTask_GetRandomAttackablePosition.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AttackableRadius;//[Offset: 0x70, Size: 0x4]
	float KeepDistanceFromTarget;//[Offset: 0x74, Size: 0x4]
	float RandomMoveRadius;//[Offset: 0x78, Size: 0x4]
	int RetryTimes;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: BTTask_Mob_CastSkill.BTTaskNode.BTNode.Object
	int SkillIndex;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BTTask_Mob_Explode.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	int ExplodeSkillIndex;//[Offset: 0x70, Size: 0x4]
	byte ExplodeSkillType;//[Offset: 0x74, Size: 0x1]

--------------------------------
Class: BTTask_Mob_FaceEnemy.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableAngle;//[Offset: 0x70, Size: 0x4]
	float TurnSpeed;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: BTTask_Mob_FindNextPathPosition.BTTaskNode.BTNode.Object
	float SearchDistanceFromSpawnPointSq;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BTTask_Mob_FindNextPatrolPosition.BTTaskNode.BTNode.Object
	float SearchDistanceFromSpawnPoint;//[Offset: 0x4c, Size: 0x4]
	bool bEnableRaycastTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float MinSquaredDistanceFromSpawnPoint;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: BTTask_Mob_FindPosByTarget.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0x70, Size: 0x4]
	bool bUseNav;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool NotInBossContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	MobRandLocationRetryRule[] retryRules;//[Offset: 0x78, Size: 0xc]
	bool StopWhenFindPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool KeepCloseToEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	float MinMoveDistance;//[Offset: 0x88, Size: 0x4]
	float HeightTestOffset;//[Offset: 0x8c, Size: 0x4]
	bool SimulateMoveWithLineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	float SimulateMoveDistance;//[Offset: 0x94, Size: 0x4]
	float SimulateCapsuleRadius;//[Offset: 0x98, Size: 0x4]
	float SimulateCapsuleHalfHeight;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: MobRandLocationRetryRule
	float AngleRangeMin;//[Offset: 0x0, Size: 0x4]
	float AngleRangeMax;//[Offset: 0x4, Size: 0x4]
	int RetryTimes;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BTTask_Mob_FindRandomAttackablePosition.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AttackableRadius;//[Offset: 0x70, Size: 0x4]
	float KeepDistanceFromTarget;//[Offset: 0x74, Size: 0x4]
	float MinMoveDistance;//[Offset: 0x78, Size: 0x4]
	bool WithLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	enum lineTraceType;//[Offset: 0x7d, Size: 0x1]
	float CustomLineTraceHeightOffset;//[Offset: 0x80, Size: 0x4]
	float HeightTestOffset;//[Offset: 0x84, Size: 0x4]
	MobRandLocationRetryRule[] retryRules;//[Offset: 0x88, Size: 0xc]
	bool ReachableTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float ReachableTestRadius;//[Offset: 0x98, Size: 0x4]
	bool EnableTriggerCastSkillBlockAfterFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	int TriggerCastSkillBlockAfterFailedTimes;//[Offset: 0xa0, Size: 0x4]
	bool NotInBossContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]

--------------------------------
Class: BTTask_Mob_GetNearDeathCharNearby.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetChar;//[Offset: 0x70, Size: 0x20]
	float SearchRadius;//[Offset: 0x90, Size: 0x4]
	float CheckInterval;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: BTTask_Mob_GetRandomAttackTargetInRadius.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	int TriggerMinTimes;//[Offset: 0x70, Size: 0x4]
	int TriggerMaxTimes;//[Offset: 0x74, Size: 0x4]
	int ChooseCurEnemyProbability;//[Offset: 0x78, Size: 0x4]
	enum searchType;//[Offset: 0x7c, Size: 0x1]
	float SearchRadius;//[Offset: 0x80, Size: 0x4]
	Vector SpecificLocation;//[Offset: 0x84, Size: 0xc]

--------------------------------
Class: BTTask_Mob_GetRandomSkill.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool DontChangeSkillWhenTargetNearBossContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: BTTask_Mob_GetTargetVehicle.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetVehicle;//[Offset: 0x70, Size: 0x20]

--------------------------------
Class: BTTask_Mob_GetVehicleNearby.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetVehicle;//[Offset: 0x70, Size: 0x20]
	float SearchRadius;//[Offset: 0x90, Size: 0x4]
	float CheckInterval;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: BTTask_Mob_LeaveState.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum iState;//[Offset: 0x70, Size: 0x1]

--------------------------------
Class: BTTask_Mob_LinkGetJumpVelocity.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float JumpForwardOffset;//[Offset: 0x70, Size: 0x4]
	Vector2D JumpSpeedRange;//[Offset: 0x74, Size: 0x8]
	byte Stride_JumpProjTraceType;//[Offset: 0x7c, Size: 0x1]
	bool SetJumpFaceAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]

--------------------------------
Class: BTTask_Mob_MoveTo.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float BlockTimeLimit;//[Offset: 0x80, Size: 0x4]
	float BlockVelocitySizeThreshold;//[Offset: 0x84, Size: 0x4]
	bool BlockDistCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float BlockThresholdValidMoveDist;//[Offset: 0x8c, Size: 0x4]
	float BlockThresholdValidMoveTime;//[Offset: 0x90, Size: 0x4]
	float BlockThresholdValidVelocitySize;//[Offset: 0x94, Size: 0x4]
	bool ForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool GotoExceptionWhenFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]

--------------------------------
Class: BTTask_Mob_SnakeMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float NormalDis;//[Offset: 0x70, Size: 0x4]
	Vector2D DisOffset;//[Offset: 0x74, Size: 0x8]
	Vector2D AngleOffset;//[Offset: 0x7c, Size: 0x8]
	float TaskMaxTime;//[Offset: 0x84, Size: 0x4]
	float AcceptRadius;//[Offset: 0x88, Size: 0x4]
	bool StopOnOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	bool UsePathfinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1]
	bool AllowPartialPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1]
	bool ProjectDestinationToNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f, Size: 0x1]

--------------------------------
Class: BTTask_Mob_Suicide.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_Mob_SwimDirect.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SwimVelocitySize;//[Offset: 0x70, Size: 0x4]
	float AcceptableRadius;//[Offset: 0x74, Size: 0x4]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]

--------------------------------
Class: BTTask_ModifyBlackboardData.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum ValueType;//[Offset: 0x70, Size: 0x1]
	FString SetValue;//[Offset: 0x74, Size: 0xc]

--------------------------------
Class: BTTask_MoveAround.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MoveRadius;//[Offset: 0x70, Size: 0x4]
	float RotationSpeed;//[Offset: 0x74, Size: 0x4]
	enum MoveType;//[Offset: 0x78, Size: 0x1]
	Vector2D WaitTimeRange;//[Offset: 0x7c, Size: 0x8]
	Vector2D ExecutionDuration;//[Offset: 0x84, Size: 0x8]
	float AcceptRadius;//[Offset: 0x8c, Size: 0x4]
	bool bIncludeNeighborVerts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bSetFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bCanMoveWhenNoTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	Vector2D DirectionAngleRange;//[Offset: 0x94, Size: 0x8]
	Vector2D MoveTargetDistRange;//[Offset: 0x9c, Size: 0x8]
	BlackboardKeySelector EnemyBlackboardKey;//[Offset: 0xa8, Size: 0x20]

--------------------------------
Class: BTTask_MoveToOcclusion.BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0x90, Size: 0x4]
	float UseLastPointRadius;//[Offset: 0x94, Size: 0x4]
	float NearDistanceValue;//[Offset: 0x98, Size: 0x4]
	float PointInNearDistanceValue;//[Offset: 0x9c, Size: 0x4]
	bool bChoosePointByEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bForceStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float CirclePainThreshold;//[Offset: 0xa4, Size: 0x4]
	BlackboardKeySelector EnemyBlackboardKey;//[Offset: 0xa8, Size: 0x20]

--------------------------------
Class: BTTask_MoveToSafeArea.BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float RadiusScale;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e, Size: 0x1]
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e, Size: 0x1]
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e, Size: 0x1]

--------------------------------
Class: BTTask_Pet_SwimDirect.BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PickUpItemAtTombBox.BTTaskNode.BTNode.Object
	float DeltaTime;//[Offset: 0x4c, Size: 0x4]
	int MaxPickCount;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: BTTask_SpawnItem.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float CheckNoPlayerRadiusSquare;//[Offset: 0x70, Size: 0x4]
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x74, Size: 0xc]

--------------------------------
Class: BTTask_StrategyMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum MoveType;//[Offset: 0x70, Size: 0x1]
	enum MovePathType;//[Offset: 0x71, Size: 0x1]
	int SampleNumber;//[Offset: 0x74, Size: 0x4]
	Vector2D ControllPoint1;//[Offset: 0x78, Size: 0x8]
	Vector2D ControllPoint2;//[Offset: 0x80, Size: 0x8]
	Vector2D DirectionAngleRange;//[Offset: 0x88, Size: 0x8]
	Vector2D MoveTargetDistRange;//[Offset: 0x90, Size: 0x8]
	Vector2D ExecutionDuration;//[Offset: 0x98, Size: 0x8]
	float RePlanTime;//[Offset: 0xa0, Size: 0x4]
	bool AlwaysSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	float AcceptRadius;//[Offset: 0xa8, Size: 0x4]
	bool StopOnOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool UsePathfinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	bool AllowPartialPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1]
	bool ProjectDestinationToNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1]
	float ExceptionRandomRadius;//[Offset: 0xb0, Size: 0x4]
	bool bCanMoveWhenNoTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bCheckWallPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool DebugDrawPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]

--------------------------------
Class: BTTask_TeleportToSpecLoc.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float RangeMin;//[Offset: 0x70, Size: 0x4]
	float RangeMax;//[Offset: 0x74, Size: 0x4]
	bool OnlyTeleportToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	float OriginCheckSquare;//[Offset: 0x7c, Size: 0x4]
	float DestCheckSquare;//[Offset: 0x80, Size: 0x4]
	float TraceHeight;//[Offset: 0x84, Size: 0x4]
	bool bForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTTask_TryFightback.BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MaxTraceRadius;//[Offset: 0x90, Size: 0x4]
	float MaxTraceTime;//[Offset: 0x94, Size: 0x4]
	float CheckTargetVisableTimeIntervel;//[Offset: 0x98, Size: 0x4]
	bool bIsCheckHasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float MinEnemyInSightTime;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: BTTask_WayPointListMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float AcceptableRadius;//[Offset: 0x74, Size: 0x4]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: BTTaskNode_CastSkill.BTTaskNode.BTNode.Object
	int SkillIndex;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BTTaskNode_CheckOcclusionSafe.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float CheckRadius;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: BTTaskNode_ClearFocus.BTTaskNode.BTNode.Object
	enum ClearedFocus;//[Offset: 0x49, Size: 0x1]

--------------------------------
Class: BTTaskNode_EmptyShot.BTTaskNode.BTNode.Object
	float FireTime;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BTTaskNode_EquipItemDirectly.BTTaskNode.BTNode.Object
	float CheckNoPlayerRadiusSquare;//[Offset: 0x4c, Size: 0x4]
	AIEquipSpawnGroup[] RandomSpawnEquipGroupSet;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: BTTaskNode_EquipOrUnWeapon.BTTaskNode.BTNode.Object
	bool Equip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool FailedWhenEquipSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]

--------------------------------
Class: BTTaskNode_FindBuilding.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	FindBuildingRatingConfig[] RatingConfig;//[Offset: 0x70, Size: 0xc]
	bool OnlySafeBuildings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	float MaxMoveSpeed;//[Offset: 0x80, Size: 0x4]
	float findSpotXYOffset;//[Offset: 0x84, Size: 0x4]
	float findSpotZOffset;//[Offset: 0x88, Size: 0x4]
	float GoBackThreshold;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: FindBuildingRatingConfig
	int Rating;//[Offset: 0x0, Size: 0x4]
	float SearchRadius;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BTTaskNode_FindItemSpot.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_FindPosByTarget.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0x70, Size: 0x4]
	bool bUseNav;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]

--------------------------------
Class: BTTaskNode_ForceSuccess.BTTaskNode.BTNode.Object
	bool IsForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: BTTaskNode_HumanAction.BTTaskNode.BTNode.Object
	enum SetAction;//[Offset: 0x49, Size: 0x1]

--------------------------------
Class: BTTaskNode_MeleeAttack.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_MonsterCastSkill.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	int SkillIndex;//[Offset: 0x70, Size: 0x4]
	byte SkillType;//[Offset: 0x74, Size: 0x1]
	bool bCanCastWithoutTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	bool bIgnoreSkillCastDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]

--------------------------------
Class: BTTaskNode_MonsterJumpToPos.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_NewParachuteJump.BTTaskNode.BTNode.Object
	float RandomStartJumpTime;//[Offset: 0x4c, Size: 0x4]
	float RandomEndJumpTime;//[Offset: 0x50, Size: 0x4]
	float JumpRadius;//[Offset: 0x54, Size: 0x4]
	float JumpHeight;//[Offset: 0x58, Size: 0x4]
	float RandomAccelerateStart;//[Offset: 0x5c, Size: 0x4]
	float RandomAccelerateEnd;//[Offset: 0x60, Size: 0x4]
	float OpenParachuteHeight;//[Offset: 0x64, Size: 0x4]
	float CheckOpenParachuteFreq;//[Offset: 0x68, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0x6c, Size: 0x4]
	float CheckCloseParachuteFreq;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: BTTaskNode_ParachuteJump.BTTaskNode.BTNode.Object
	float TimeLimit;//[Offset: 0x4c, Size: 0x4]
	float RandomRadius;//[Offset: 0x50, Size: 0x4]
	float JumpStartTime;//[Offset: 0x54, Size: 0x4]
	float JumpEndTime;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: BTTaskNode_ParachuteJumpV3.BTTaskNode.BTNode.Object
	float RandomStartJumpTime;//[Offset: 0x4c, Size: 0x4]
	float RandomEndJumpTime;//[Offset: 0x50, Size: 0x4]
	float JumpRadius;//[Offset: 0x54, Size: 0x4]
	float JumpHeight;//[Offset: 0x58, Size: 0x4]
	float RandomAccelerateStart;//[Offset: 0x5c, Size: 0x4]
	float RandomAccelerateEnd;//[Offset: 0x60, Size: 0x4]
	float OpenParachuteHeight;//[Offset: 0x64, Size: 0x4]
	float CheckOpenParachuteFreq;//[Offset: 0x68, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0x6c, Size: 0x4]
	float CheckCloseParachuteFreq;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: BTTaskNode_PickItemsAtSpot.BTTaskNode.BTNode.Object
	float DeltaTime;//[Offset: 0x4c, Size: 0x4]
	int MaxPickCount;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: BTTaskNode_RefreshWeaponBBD.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_StopShooting.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_TakeMedicine.BTTaskNode.BTNode.Object
	int MedicineIndex;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BulletPredictLine.Actor.Object
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	STExtraPlayerCharacter* PlayerCharacter;//[Offset: 0x2cc, Size: 0x4]
	STExtraShootWeapon* CurShootWeapon;//[Offset: 0x2d0, Size: 0x4]
	STExtraShootWeapon* OwnerWeapon;//[Offset: 0x2d4, Size: 0x4]
	void ShowLine();// 0x133c1bc
	void HideLine();// 0x133c1a0

--------------------------------
Class: CameraSettingComponentFromBP.ActorComponent.Object
	void SaveCurCameraSetting(SpringArmComponent* SpringArm);// 0x133cbb4
	void LerpCameraSettings(float LerpAlpha, out CameraSettings CameraSetting, SpringArmComponent* SpringArm);// 0x133caa4

--------------------------------
Class: CameraSettings
	float TargetArmLength;//[Offset: 0x0, Size: 0x4]
	float LagSpeed;//[Offset: 0x4, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: CaveStoneActor.UAENetActor.Actor.Object
	float BrokenVelocity;//[Offset: 0x2d4, Size: 0x4]
	SceneComponent* DefaultRoot;//[Offset: 0x2d8, Size: 0x4]
	float TotalHP;//[Offset: 0x2dc, Size: 0x4]
	float CurHP;//[Offset: 0x2e0, Size: 0x4]
	float bBroken;//[Offset: 0x2e4, Size: 0x4]
	void PlayStoneExplsion();// 0x1c01fa0
	void OnRep_CurHP();// 0x12e82e4
	void OnRep_bBroken();// 0x133cf98
	void BroadcastClientCaveStoneExplsion();// 0x133cf7c

--------------------------------
Class: ChangeWearingComponent.ActorComponent.Object
	int WillChangeWearIndex;//[Offset: 0xbc, Size: 0x4]
	float CoolDownTime;//[Offset: 0xc0, Size: 0x4]
	float LastChangeWearTime;//[Offset: 0xc4, Size: 0x4]
	void ServerRequestChangeWear(int Index);// 0x133de50
	bool RequestChangeWearInBattle(int Index);// 0x133ddd0
	bool RequestChangeWear(int Index);// 0x133dd50
	void RealChangeWearInBattle(int Index);// 0x133dcd8
	bool IsInCoolDownTime(bool bWithLog);// 0x133dc50
	bool IsInBattleState(bool bWithLog);// 0x133dbc8
	bool IsChangeWearingOpend();// 0x133dba0
	bool IsAllowChangeWearingState(bool bWithLog);// 0x133db18
	float GetCoolDownTime();// 0x133dafc
	void ClientChangeWearDone(int Index, float ChangeWearTime, const GameModePlayerRolewearInfo[] AllWearData);// 0x133d9d0
	bool CheckCanChangeWearing(bool bWithLog);// 0x133d948

--------------------------------
Class: CharacterAvatarEntity.AvatarEntity.Object
	bool PendingRenderFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	int EquipedPendantSlotID;//[Offset: 0x188, Size: 0x4]
	int EquipedDefaultPendantSlotID;//[Offset: 0x18c, Size: 0x4]
	FName[] NeedUnHideBone;//[Offset: 0x190, Size: 0xc]
	bool ForceHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1]
	void SetSlotMeshByReplacedMark(bool ReplacedMark);// 0x1343e64
	bool SetSlotHidden(int Slot, int DoHiddenSlot, bool ShouldHide);// 0x1343fb0
	void ScaledMeshBone(bool ScaledMark);// 0x1343e64
	bool ReplaceTargetSlotMesh(int SourceSlot, int DestSlot, bool ReplaceMark);// 0x1343fb0
	void RenderEntity(out SoftObjectPath SoftPath);// 0x12fe680
	void RefreshVisable();// 0x12e82e4
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x12fe5dc
	void PutOnDefaultEquipment(enum slotType);// 0x12fe55c
	void GetReplacingSlots(out int[] DoReplaceSlots);// 0x1343ee4
	enum GetMeshType();// 0x12fe2b4
	ItemDefineID GetDefineID();// 0x12fe1d4
	void EnterRenderPipeline();// 0x12fe1b8
	void EnterLogicPipeline();// 0x12fe19c
	void DoPostLogic();// 0x12e82e4
	void DealSlotHidden(bool ShouldHide);// 0x1343e64
	void DealSelfReplaced();// 0x12e82e4
	void DealSelfHide();// 0x12e82e4
	void DealHideBone();// 0x12e82e4
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x12fe030
	void ClearLogicExecutedFlag();// 0x1343e50
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x12fdf64
	void ClearEquipmentLogic(bool putDefault);// 0x12fdedc
	void ClearEntity(bool ForceClear);// 0x12fde54
	void CheckPendantForEquipmentPutOn(BackpackAvatarHandle* InItemHandle);// 0x1343dd0
	void CheckPendantForEquipmentPutOff();// 0x1343db4
	void CheckDefaultPendantForEquipmentPutOn(BackpackAvatarHandle* InItemHandle);// 0x1343d34
	void ApplyMeshCompCollision();// 0x12e82e4
	void ApplyAnimation();// 0x12fde38
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x12fddb8

--------------------------------
Class: CharacterPendantEntity.CharacterAvatarEntity.AvatarEntity.Object
	void TickEntity();// 0x12fe8f0
	void SetAttachedEntityVisibility(bool InAttachedEntityVisibility);// 0x1346270
	void OnPostRender();// 0x12fe540
	enum GetPendantSlotType();// 0x1346240
	enum GetMeshType();// 0x12fe2b4
	enum GetAttachPartSlotType();// 0x1346210
	void EnterRenderPipeline();// 0x12fe1b8
	void EnterLogicPipeline();// 0x12fe19c
	void ClearEntity(bool ForceClear);// 0x12fde54
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x12fddb8

--------------------------------
Class: ChasingBar.UAEUserWidget.UserWidget.Widget.Visual.Object
	float ProgressBarCanvasXValue;//[Offset: 0x2ec, Size: 0x4]
	bool IsNeedClearProgressBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	float BlueCircleAppearanceTime;//[Offset: 0x2f4, Size: 0x4]
	float BlueCircleMovingCountDownDuration;//[Offset: 0x2f8, Size: 0x4]
	float BlueCircleRunStartTime;//[Offset: 0x2fc, Size: 0x4]
	float BlueCircleRunDuration;//[Offset: 0x300, Size: 0x4]
	float BlueCircleChasingPercent;//[Offset: 0x304, Size: 0x4]
	float ProgressBarLength;//[Offset: 0x308, Size: 0x4]
	Vector OriginBlueCircle;//[Offset: 0x30c, Size: 0xc]
	float CleaningTime;//[Offset: 0x318, Size: 0x4]
	STExtraGameStateBase* STEGameStateBase;//[Offset: 0x31c, Size: 0x4]
	STExtraPlayerController* STEPlayerController;//[Offset: 0x320, Size: 0x4]
	FText BlueCircleMovingCountDownText;//[Offset: 0x324, Size: 0xc]
	float PlayerEscapeProgress;//[Offset: 0x330, Size: 0x4]
	bool IsPlayerOutBlueCircleCurrently;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	Image* PlayerIcon;//[Offset: 0x338, Size: 0x4]
	TextBlock* TextBlock_Dist;//[Offset: 0x33c, Size: 0x4]
	float PlayerPositionC;//[Offset: 0x340, Size: 0x4]
	bool IsRefreshCircleDistanceC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	FText CircleDistanceTextFormat;//[Offset: 0x348, Size: 0xc]
	bool IsTickWorldTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	void UpdateCountDownText();// 0x1c01fa0
	void ShowCircleDistanceC();// 0x1347138
	void RefreshWorldTimeBP();// 0x1c01fa0
	void PlayerEscapePercentC();// 0x1347124
	void OnPlayerEnterExitBlueCircle();// 0x1c01fa0
	void OnCountDownTextInvisible();// 0x1c01fa0
	bool IsPlayerOutBlueCircle(Pawn* CurPawn);// 0x13470a4
	bool IsPlayerInWhiteCircle(Pawn* CurPawn);// 0x1347024
	bool IsBlueCircleMoving();// 0x1346ffc
	bool IsBlueCircleAppearAndCountDown();// 0x1346fd4
	void ClearProgressBar();// 0x1c01fa0
	void CleanTheProgressBar();// 0x1c01fa0
	void CheckToCleanProgress();// 0x1346fc0
	float CalPlayerEscapePercent();// 0x1346f98
	void BlueCirclePreMoveCountDown();// 0x1346f84

--------------------------------
Class: CircleFloatInterface.Interface.Object

--------------------------------
Class: ClimbingProxyGenerator.SceneComponent.ActorComponent.Object

--------------------------------
Class: ClothAvatarUtils.BlueprintFunctionLibrary.Object

--------------------------------
Class: ClothAvatarBPUtils.Object
	<int,MeshPackage> DefaultCutHairConfig;//[Offset: 0x1c, Size: 0x3c]
	bool GetDefaultReplaceMeshPack(BackpackAvatarHandle* InAvatarHandle, out MeshPackage OutMeshPack);// 0x134b540

--------------------------------
Class: CollisionUtils.Object
	static bool IsSphereInToWater(Vector CenterPos, float SphereRadius);// 0x134bb24
	static Actor*[] GetCharactersInSphere(World* World, Vector CenterPos, float SphereRadius);// 0x134b994

--------------------------------
Class: MapWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* m_pMarkRoot;//[Offset: 0x2ec, Size: 0x4]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x2f0, Size: 0x3c]
	Vector LandscapeCenterCpp;//[Offset: 0x32c, Size: 0xc]
	float LevelToMapScaleCpp;//[Offset: 0x338, Size: 0x4]
	float RotateAngleCpp;//[Offset: 0x33c, Size: 0x4]
	float MapScaleCpp;//[Offset: 0x340, Size: 0x4]
	Vector2D MapImageSizeCpp;//[Offset: 0x344, Size: 0x8]
	byte MapWidgetType;//[Offset: 0x34c, Size: 0x1]
	bool isMarkScaleAsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1]
	void SetupUIMarkRoot();// 0x1346880
	void OnUpdateUIMarks();// 0x13bf878

--------------------------------
Class: MapUIMarkBaseWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	Vector2D LimitedSize;//[Offset: 0x308, Size: 0x8]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x13bfad4
	void UpdateMarkSize(float inScale);// 0x13a9b00
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x13bf984
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x13bf894
	void OnUIBPDestroy();// 0x13bf878
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x13bf740
	void OnEnterEntireMap();// 0x1c01fa0
	Vector GetWidgetCurWorldPos();// 0x13bf6f8

--------------------------------
Class: CommonMapWidget.MapWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	float RotateAngleC;//[Offset: 0x350, Size: 0x4]
	float MapImageExtentC;//[Offset: 0x354, Size: 0x4]
	float MapWindowExtentC;//[Offset: 0x358, Size: 0x4]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x35c, Size: 0xc]
	Vector2D MapAdjustOffsetC;//[Offset: 0x368, Size: 0x8]
	Image* Image_CarTips;//[Offset: 0x370, Size: 0x4]
	Border* Border_RingFX;//[Offset: 0x374, Size: 0x4]
	Border* Border_FullRing;//[Offset: 0x378, Size: 0x4]
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x37c, Size: 0xc]
	float ImageBlueCircleScale;//[Offset: 0x388, Size: 0x4]
	float LevelToMapScaleC;//[Offset: 0x38c, Size: 0x4]
	Vector LevelLandScapeCenterC;//[Offset: 0x390, Size: 0xc]
	UserWidget*[] AirdropBoxIconItems;//[Offset: 0x39c, Size: 0xc]
	UserWidget*[] EnemiesIconItems;//[Offset: 0x3a8, Size: 0xc]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x3b4, Size: 0x98]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x44c, Size: 0x98]
	Image* Image_AirIcon;//[Offset: 0x4e4, Size: 0x4]
	Image* Image_PassedRoute;//[Offset: 0x4e8, Size: 0x4]
	Image* Image_LineUV;//[Offset: 0x4ec, Size: 0x4]
	int[] OutOfRangeTeammateIndexArray;//[Offset: 0x4f0, Size: 0xc]
	float UpdateEnemyIconInterval;//[Offset: 0x508, Size: 0x4]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	void UpdatePlayersLocAndRotC();// 0x134cbe0
	void UpdateMarkerDistanceC();// 0x1c01fa0
	void UpdateLeftRouteLengthC();// 0x134cbc4
	void UpdateLastDriveVehicleC();// 0x134cbb0
	void UpdateAirIconC();// 0x134cb9c
	void TickEnemiesIconItems();// 0x134cb88
	void TickCircleC();// 0x134cb74
	void TickAirdropBoxIconItems();// 0x134cb60
	void RepositionItemOnMapC();// 0x1c01fa0
	void ReCalMapInfoC();// 0x134cb44
	void OnCreateEnemyIcon();// 0x13468b8
	void OnCreateAirdropBoxIcon();// 0x134cb28
	void MapResizeC();// 0x1c01fa0
	void ClearEnemiesLocations();// 0x134cb14
	void ClearAirdropBoxLocations();// 0x134cb00

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0xd9, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0xda, Size: 0x1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdb, Size: 0x1]
	LinearColor ContentColorAndOpacity;//[Offset: 0xdc, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0xf0, Size: 0x10]
	Margin Padding;//[Offset: 0x100, Size: 0x10]
	SlateBrush Background;//[Offset: 0x110, Size: 0x90]
	delegate BackgroundDelegate;//[Offset: 0x1a0, Size: 0x10]
	LinearColor BrushColor;//[Offset: 0x1b0, Size: 0x10]
	delegate BrushColorDelegate;//[Offset: 0x1c0, Size: 0x10]
	Vector2D DesiredSizeScale;//[Offset: 0x1d0, Size: 0x8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1d8, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x1e8, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x1f8, Size: 0x10]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x208, Size: 0x10]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2382934
	void SetPadding(Margin InPadding);// 0x23828ac
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2382834
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x23827b4
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x2382734
	void SetDesiredSizeScale(Vector2D inScale);// 0x23826c4
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x2382648
	void SetBrushFromTexture(Texture2D* Texture, bool bAuto2Mat);// 0x2382584
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x238250c
	void SetBrushFromAsset(SlateBrushAsset* Asset, bool bAuto2Mat);// 0x2382448
	void SetBrushColor(LinearColor InBrushColor);// 0x23823cc
	void SetBrush(out const SlateBrush InBrush, bool bAuto2Mat);// 0x23820d0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x23820a8
	bool GetDontPaintWhenChildEmpty();// 0x2382080
	bool GetDontPaintWhenAlphaZero();// 0x2382058

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x23878b8
	PanelSlot* GetContentSlot();// 0x2387890
	Widget* GetContent();// 0x2387868

--------------------------------
Class: MapRealTimeInfo
	Vector MapCenterToPlayer;//[Offset: 0x0, Size: 0xc]
	Vector MapCenterToBlueCircle;//[Offset: 0xc, Size: 0xc]
	Vector MapCenterToWhiteCircle;//[Offset: 0x18, Size: 0xc]
	Vector2D PlayerCoord;//[Offset: 0x24, Size: 0x8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x2c, Size: 0x8]
	Vector2D WhiteCircleCoord;//[Offset: 0x34, Size: 0x8]
	Vector2D BlueCircleCoord;//[Offset: 0x3c, Size: 0x8]
	float WhiteCircleRadius;//[Offset: 0x44, Size: 0x4]
	float BlueCircleRadius;//[Offset: 0x48, Size: 0x4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x4c, Size: 0x8]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	AirdropBoxLocation[] AirdropBoxesLocations;//[Offset: 0x58, Size: 0xc]
	EnemyLocation[] EnemiesLocations;//[Offset: 0x64, Size: 0xc]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: AirdropBoxLocation
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Altitude;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	bool bLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float ExistsTime;//[Offset: 0x18, Size: 0x4]
	int[] TeamIDOpenedTheBox;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: EnemyLocation
	float X;//[Offset: 0x4, Size: 0x4]
	float Y;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AirplaneRouteData
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 0x4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 0x8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 0x8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 0x4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 0x4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 0x8]
	float PlaneRotation;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: CompatibleEventCenter.LevelEventCenter.Object

--------------------------------
Class: CoronaObject.Object
	byte[] WPOrignalEffect;//[Offset: 0x1c, Size: 0xc]
	byte[] WPOverrideEffect;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: CoronaShotHelper.Object
	static void MakeSmallPicture(int InShotType, delegate OnSceenShotCallBackDelegate, bool isShowUI);// 0x134dbf0

--------------------------------
Class: CrowdAgentComponent.ActorComponent.Object
	void StopMove();// 0x134e8c0
	void MoveToLoc(out const Vector Loc);// 0x134e83c
	void MoveToActor(const Actor* Actor);// 0x134e7c4

--------------------------------
Class: CrowdAgentQueryInterface.Interface.Object

--------------------------------
Class: AvatarCustomColor.AvatarCustomBase.CustomBase.Object
	void InitColorInfo(float Gray, FString Color1, FString Color2, FString Color3);// 0x134f520

--------------------------------
Class: AvatarCustomParticle.AvatarCustomBase.CustomBase.Object
	ParticleAsset[] ParticleDataList;//[Offset: 0x3c, Size: 0xc]
	ParticleGroup ParticleGroup;//[Offset: 0x48, Size: 0x24]
	bool ClearCustomInfo();// 0x134fd68
	void AsyncLoadCustomParticleDone();// 0x134fd54
	bool ApplyCustomInfo();// 0x134fd24

--------------------------------
Class: AvatarCustomPattern.AvatarCustomBase.CustomBase.Object
	void InitPatternInfo(float Scale1, float Scale2, FString Path1, FString Path2, FString Offset);// 0x1350138

--------------------------------
Class: AvatarCustomPatternNum.AvatarCustomBase.CustomBase.Object
	SoftObjectPath SoftRefPath1;//[Offset: 0x40, Size: 0x18]
	SoftObjectPath SoftRefPath2;//[Offset: 0x58, Size: 0x18]
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x1c01fa0
	Texture* CreatePattenNumTexture(out const SoftObjectPath InTexture1, out const SoftObjectPath InTexture2, Object* Outer);// 0x1c01fa0
	void AsyncLoadCustomAssetDone();// 0x1350a68
	bool ApplyCustomInfo();// 0x134fd24

--------------------------------
Class: CustomCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	void InterpToTargetFov(float FOV, float InterpSpeed, bool DeltaValue);// 0x1351728

--------------------------------
Class: CustomCndComponent.ActorComponent.Object
	CustomCndWrappperIns[] CndWrappers;//[Offset: 0xc0, Size: 0xc]
	void RemoveCndWrapper(int ID);// 0x1351e3c
	void RegisterCndWrappers();// 0x12e0f50
	void OnReceiveEvent(byte Type);// 0x1351dbc
	void AddCndWrapper(FString Path, int ID);// 0x1351cbc

--------------------------------
Class: CustomCndWrappperIns
	CustomCndWrapper* Wrapper;//[Offset: 0x0, Size: 0x4]
	int CndWrapperId;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CustomCndWrapper.Object
	CustomCndIns[] Conditions;//[Offset: 0x1c, Size: 0xc]
	int[] TriggerSkills;//[Offset: 0x28, Size: 0xc]
	int[] CancelSkills;//[Offset: 0x34, Size: 0xc]
	int[] TriggerBuffs;//[Offset: 0x40, Size: 0xc]
	bool TriggerFromClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	byte EventType;//[Offset: 0x4d, Size: 0x1]
	Object* WrapperOwner;//[Offset: 0x50, Size: 0x8]
	void SetWrapperOwner(Object* Owner);// 0x13524c0
	void OnTriggerEvent(byte Event);// 0x1352440
	bool IsValidEvent(byte Event);// 0x13523c0

--------------------------------
Class: CustomCndIns
	CustomCondition* Cnd;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CustomCondition.Object
	Object* CndOwner;//[Offset: 0x1c, Size: 0x8]
	void SetCndOwner(Object* Owner);// 0x1352d00
	static STExtraCharacter* SafeGetPawn(Object* Owner);// 0x1352c88
	bool IsOK();// 0x134fd24

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0xcc, Size: 0xc]
	FString SelectedOption;//[Offset: 0xd8, Size: 0xc]
	ComboBoxStyle WidgetStyle;//[Offset: 0xe8, Size: 0x408]
	TableRowStyle ItemStyle;//[Offset: 0x4f0, Size: 0x700]
	Margin ContentPadding;//[Offset: 0xbf0, Size: 0x10]
	float MaxListHeight;//[Offset: 0xc00, Size: 0x4]
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04, Size: 0x1]
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc05, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0xc08, Size: 0x40]
	SlateColor ForegroundColor;//[Offset: 0xc48, Size: 0x1c]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 0x1]
	delegate OnGenerateWidgetEvent;//[Offset: 0xc68, Size: 0x10]
	delegate OnSelectionChanged;//[Offset: 0xc88, Size: 0xc]
	delegate OnOpening;//[Offset: 0xc94, Size: 0xc]
	void SetSelectedOption(FString Option);// 0x2387228
	bool RemoveOption(FString Option);// 0x2387164
	void RefreshOptions();// 0x2387150
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x1c01fa0
	void OnOpeningEvent__DelegateSignature();// 0x1c01fa0
	FString GetSelectedOption();// 0x2387090
	int GetOptionCount();// 0x14dca94
	FString GetOptionAtIndex(int Index);// 0x2386f88
	int FindOptionIndex(FString Option);// 0x2386ec4
	void ClearSelection();// 0x2386eb0
	void ClearOptions();// 0x2386e9c
	void AddOption(FString Option);// 0x2386de0

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3d0]
	SlateSound PressedSlateSound;//[Offset: 0x3d8, Size: 0x18]
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3f0, Size: 0x18]

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x298]
	SlateBrush DownArrowImage;//[Offset: 0x2a0, Size: 0x90]
	SlateBrush MenuBorderBrush;//[Offset: 0x330, Size: 0x90]
	Margin MenuBorderPadding;//[Offset: 0x3c0, Size: 0x10]

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x90]
	SlateBrush ActiveHoveredBrush;//[Offset: 0x98, Size: 0x90]
	SlateBrush ActiveBrush;//[Offset: 0x128, Size: 0x90]
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1b8, Size: 0x90]
	SlateBrush InactiveBrush;//[Offset: 0x248, Size: 0x90]
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2d8, Size: 0x90]
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x368, Size: 0x90]
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3f8, Size: 0x90]
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x488, Size: 0x90]
	SlateColor TextColor;//[Offset: 0x518, Size: 0x1c]
	SlateColor SelectedTextColor;//[Offset: 0x534, Size: 0x1c]
	SlateBrush DropIndicator_Above;//[Offset: 0x550, Size: 0x90]
	SlateBrush DropIndicator_Onto;//[Offset: 0x5e0, Size: 0x90]
	SlateBrush DropIndicator_Below;//[Offset: 0x670, Size: 0x90]

--------------------------------
Class: CustomComboBox.ComboBoxString.Widget.Visual.Object
	class Widget* ItemType;//[Offset: 0xccc, Size: 0x4]
	class Widget* ContentType;//[Offset: 0xcd0, Size: 0x4]
	delegate OnRefreshItem;//[Offset: 0xcd4, Size: 0xc]
	delegate OnSelectItem;//[Offset: 0xce0, Size: 0xc]
	Widget* ContentWidget;//[Offset: 0xcec, Size: 0x4]
	Widget*[] UnusedItems;//[Offset: 0xda4, Size: 0xc]
	Widget* RequireOneWidget(FString Item);// 0x1352944
	void RefreshOptions();// 0x1352930
	void OnRefreshItem__DelegateSignature(Widget* Item, FString Option);// 0x1c01fa0

--------------------------------
Class: CustomCondition_AND.CustomCondition.Object
	CustomCondition*[] CndList;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: CustomCondition_CharacterHP.CustomCondition.Object
	enum CheckType;//[Offset: 0x24, Size: 0x1]
	float Health;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CustomCondition_OR.CustomCondition.Object
	CustomCondition*[] CndList;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: CustomScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0xe0, Size: 0x248]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x328, Size: 0x518]
	SlateWidgetStyleAsset* Style;//[Offset: 0x840, Size: 0x4]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x844, Size: 0x4]
	byte Orientation;//[Offset: 0x848, Size: 0x1]
	enum ScrollBarVisibility;//[Offset: 0x849, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x84a, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x84c, Size: 0x8]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 0x1]
	enum NavigationDestination;//[Offset: 0x856, Size: 0x1]
	float NavigationScrollPadding;//[Offset: 0x858, Size: 0x4]
	delegate OnUserScrolled;//[Offset: 0x85c, Size: 0xc]
	delegate OnMoveOut;//[Offset: 0x868, Size: 0xc]
	void SwitchChildToIndex(Widget* Content, int Index);// 0x1353d54
	void SetScrollOffset(float NewScrollOffset);// 0x1353cdc
	void SetScrollBarVisibility(enum NewScrollBarVisibility);// 0x1353c64
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x1353be0
	void SetOrientation(byte NewOrientation);// 0x1353b68
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x1353ae8
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x1353a68
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDesintion);// 0x135395c
	void ScrollToStart();// 0x1353948
	void ScrollToEnd();// 0x1353934
	void ScrollStop();// 0x1353920
	float GetScrollOffset();// 0x13538f8
	float GetMaxScrollOffset();// 0x13538d0

--------------------------------
Class: CustomScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	void SetPadding(Margin InPadding);// 0x1354b54
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x1354adc

--------------------------------
Class: CustomSocketObject.Object
	void OnLoadFinished(UAEPlayerController* PC);// 0x13550d0
	UAEUserWidget* GetActivedSocket();// 0x13550a8
	void ActivateSocket(UAEPlayerController* PC, delegate DelegateToCall);// 0x1354fc0

--------------------------------
Class: CustomSocketPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	ChildPendingActiveWidget ChildPendingWidget;//[Offset: 0xe8, Size: 0x78]
	bool SeeIt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	void OnLoadFinished();// 0x13557e8
	UAEUserWidget* GetActivedSocket(bool forceCreate);// 0x1355760
	void ActivateSocketASync(delegate DelegateToCall);// 0x13556bc
	void ActivateSocket(out const FString[] ModeUIList);// 0x1355588

--------------------------------
Class: ChildPendingActiveWidget
	class UAEUserWidget* ChildWidgetClass;//[Offset: 0x0, Size: 0x28]
	FString WidgetTreeNameToAssign;//[Offset: 0x28, Size: 0xc]
	AnchorData Anchor;//[Offset: 0x34, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int ZOrder;//[Offset: 0x60, Size: 0x4]
	FString[] ModeUIList;//[Offset: 0x64, Size: 0xc]
	bool bDefaultCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: CustomUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bEnableGlobalTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]

--------------------------------
Class: UAERegionActor.Actor.Object
	int Radium;//[Offset: 0x2cc, Size: 0x4]
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	enum RegionSize;//[Offset: 0x2d1, Size: 0x1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]

--------------------------------
Class: DamageableActor.UAERegionActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x1357dc0
	int GetVehicleDamagedSpeed();// 0x1c01fa0
	int GetVehicleDamagedCoefficient();// 0x1c01fa0
	<enum,float> GetTargetDamageRateMap();// 0x1357c40
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1357abc
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x1357a34
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x135789c
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x13577f0
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x1357768
	enum[] CPP_GetDamageableGameObjectType();// 0x13576a0
	bool CPP_GetCanBePicked();// 0x1357670
	FName CPP_GetBulletBlockComponentTag();// 0x1357628
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x135757c
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x13574b0
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x13573bc
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1c01fa0
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x1c01fa0
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x1c01fa0
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x1c01fa0
	float BP_GetDamageRateByTarget(Actor* Target);// 0x1c01fa0
	enum[] BP_GetDamageableGameObjectType();// 0x1c01fa0
	bool BP_GetCanBePicked();// 0x1c01fa0
	FName BP_GetBulletBlockComponentTag();// 0x1c01fa0
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x1c01fa0
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x1c01fa0
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x1c01fa0

--------------------------------
Class: DamageableInterface.DamageableInterfaceBase.Interface.Object
	bool JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x1358f78
	bool GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x1358de0
	float GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x1358d34
	float GetDamageRateByTarget(Actor* Target);// 0x1358cac
	enum[] GetDamageableGameObjectType();// 0x1358be4
	bool GetCanBePicked();// 0x1358bb4
	FName GetBulletBlockComponentTag();// 0x1358b6c
	float GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x1358ac0
	float CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x13589f4
	float CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x1358900

--------------------------------
Class: DamageDrivenMeshChanger.ActorComponent.Object
	float HPPercentage;//[Offset: 0xbc, Size: 0x4]
	DDMCData[] Stuffs;//[Offset: 0xc0, Size: 0xc]
	bool AutoBindTakedamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	float MaxHealth;//[Offset: 0xd0, Size: 0x4]
	bool bBreadcastDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool bStopsAtZeroHP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	float BreadcastDamageInterval;//[Offset: 0xd8, Size: 0x4]
	FName OwnerComponentTags;//[Offset: 0xe0, Size: 0x8]
	delegate OnHPChangeCustomEvent;//[Offset: 0xe8, Size: 0xc]
	delegate OnCliendHPChanged;//[Offset: 0xf4, Size: 0xc]
	delegate OnIndex;//[Offset: 0x100, Size: 0xc]
	delegate OnClientDamage;//[Offset: 0x10c, Size: 0xc]
	ActorComponent*[] CacheTaggedComponents;//[Offset: 0x124, Size: 0xc]
	void SetHPPercentage(float InHPPercentage);// 0x1359ef8
	void ResetDoneList();// 0x1359ec8
	void OnTakeDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1359d3c
	void OnRPCDamage(float Damage);// 0x1359c88
	void OnRep_HPPercentage();// 0x1359c74
	void OnHPCustomEvent(Object* LoadedObject);// 0x1359bf4
	void OnAssetLoaded(Object* softMtg, int Index);// 0x1359a30
	void ExecToClient(const int[] Indicies);// 0x135996c
	bool CanBroadcastDamage();// 0x1359944

--------------------------------
Class: DDMCData
	SoftObjectPath[] Stuffs;//[Offset: 0x0, Size: 0xc]
	int HPPercentageRangeMin;//[Offset: 0xc, Size: 0x4]
	int HPPercentageRangeMax;//[Offset: 0x10, Size: 0x4]
	bool bUseRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: DataSourceBPLibrary.BlueprintFunctionLibrary.Object
	static GMDataSource* GetDataSource(enum InDataType);// 0x135a430

--------------------------------
Class: GMDataSource.Object

--------------------------------
Class: DataTableManager.BlueprintFunctionLibrary.Object
	DataTable* PickUpGlobalDataTable;//[Offset: 0x1c, Size: 0x4]
	DataTable* PickUpGlobalIDAndWrapperDataTable;//[Offset: 0x20, Size: 0x4]
	DataTable* WeaponDataTable;//[Offset: 0x24, Size: 0x4]
	DataTable* PlayerEquipmentDataTable;//[Offset: 0x28, Size: 0x4]
	DataTable* WeaponComponentDataTable;//[Offset: 0x2c, Size: 0x4]
	DataTable* ConsumeItemDataTable;//[Offset: 0x30, Size: 0x4]
	DataTable* AkEventDataTable;//[Offset: 0x34, Size: 0x4]
	DataTable* GetTableByType(byte TableType);// 0x135a754
	static DataTableManager* GetInstance();// 0x135a72c

--------------------------------
Class: DayToNightActor.Actor.Object
	float ClientSyncTime;//[Offset: 0x2c8, Size: 0x4]
	FireEventConfig[] EventConfigs;//[Offset: 0x2cc, Size: 0xc]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2e0, Size: 0x4]
	void TrytoFireEvent(int EventID);// 0x135ad5c
	void SetNightVisionOpen(bool bOpen);// 0x135acdc
	void FireEvent(int EventID, int EventParam);// 0x135ac18
	void BP_ClientOnFireEvent(int EventID, int EventParam);// 0x1c01fa0

--------------------------------
Class: FireEventConfig
	int EventID;//[Offset: 0x0, Size: 0x4]
	float RandomOccur;//[Offset: 0x4, Size: 0x4]
	float RandomTimeRange;//[Offset: 0x8, Size: 0x4]
	int EventParam;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2d0, Size: 0x20]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x2f0, Size: 0x4]
	SoftObjectPath LevelSequence;//[Offset: 0x2f8, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x310, Size: 0xc]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x31c, Size: 0x4]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x320, Size: 0x4]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x324, Size: 0x4]
	void SetSequence(LevelSequence* InSequence);// 0x256a65c
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x256a504
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x256a36c
	void ResetBindings();// 0x256a32c
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x256a234
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x256a0f4
	LevelSequence* GetSequence(bool bLoad, bool bInitializePlayer);// 0x256a01c
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x2569e94

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0, Size: 0x4]
	float PlayRate;//[Offset: 0x4, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	interface class * BindingOverrides;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x600, Size: 0xc]
	delegate OnTrackEvent;//[Offset: 0x60c, Size: 0xc]
	Object*[] AdditionalEventReceivers;//[Offset: 0x644, Size: 0xc]
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x256b6e8

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x2e0, Size: 0xc]
	delegate OnPlayReverse;//[Offset: 0x2ec, Size: 0xc]
	delegate OnStop;//[Offset: 0x2f8, Size: 0xc]
	delegate OnPreStop;//[Offset: 0x304, Size: 0xc]
	bool FreezeEndFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	delegate OnPause;//[Offset: 0x314, Size: 0xc]
	delegate OnFinished;//[Offset: 0x320, Size: 0xc]
	byte Status;//[Offset: 0x32c, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32d, Size: 0x1]
	bool bPendingFirstUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32d, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x330, Size: 0x4]
	float TimeCursorPosition;//[Offset: 0x334, Size: 0x4]
	float StartTime;//[Offset: 0x338, Size: 0x4]
	float endTime;//[Offset: 0x33c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x340, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x350, Size: 0x20]
	void Stop();// 0x21c1040
	void StartPlayingNextTick();// 0x21c102c
	void SetPlayRate(float PlayRate);// 0x12eaad4
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x21c0f70
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x21c0ef8
	void Scrub();// 0x21c0ee4
	void PlayReverse();// 0x21c0ed0
	void PlayLooping(int NumLoops);// 0x21c0e58
	void Play();// 0x21c0e44
	void Pause();// 0x21c0e30
	void JumpToPosition(float NewPlaybackPosition);// 0x21c0db8
	bool IsPlaying();// 0x21c0d90
	bool IsPaused();// 0x21c0d68
	void GoToEndAndStop();// 0x21c0d54
	float GetPlayRate();// 0x12ea980
	float GetPlaybackStart();// 0x21c0d38
	float GetPlaybackPosition();// 0x21c0d10
	float GetPlaybackEnd();// 0x21c0cf4
	float GetLength();// 0x21c0ccc
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x21c0b88
	void ChangePlaybackDirection();// 0x21c0b74

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 0x4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 0x3c]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x260, Size: 0x3c]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x29c, Size: 0x3c]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0xc]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x1c, Size: 0xc]
	Object* CachedComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x20, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x1ac, Size: 0x30]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x1dc, Size: 0x4]
	void SetSettings(Object* InSettings);// 0x1c01fa0
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x13bae8c

--------------------------------
Class: LevelSequencePlayerSnapshot
	FText MasterName;//[Offset: 0x0, Size: 0xc]
	float MasterTime;//[Offset: 0xc, Size: 0x4]
	FText CurrentShotName;//[Offset: 0x10, Size: 0xc]
	float CurrentShotLocalTime;//[Offset: 0x1c, Size: 0x4]
	CameraComponent* CameraComponent;//[Offset: 0x20, Size: 0x4]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x24, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	float FrameRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DayToNightActorPVE.Actor.Object
	float[] WeatherTimeConfigs;//[Offset: 0x2c8, Size: 0xc]
	float DelayCountDownWeatherTime;//[Offset: 0x2d4, Size: 0x4]
	float ClientSyncTime;//[Offset: 0x2d8, Size: 0x4]
	PVEFireEventConfig[] EventConfigs;//[Offset: 0x2dc, Size: 0xc]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2f0, Size: 0x4]
	void SetPVENightVisionOpen(bool bOpen);// 0x135acdc
	void PVETrytoFireEvent(int EventID);// 0x135b2d0
	void PVEFireEvent(int EventID, int EventParam);// 0x135ac18
	float GetWeatherPlayTime();// 0x135b2a8
	void BP_PVEOnExitNightEvent();// 0x1c01fa0
	void BP_PVEOnEnterNightEvent();// 0x1c01fa0
	void BP_PVEClientOnFireEvent(int EventID, int EventParam);// 0x1c01fa0

--------------------------------
Class: PVEFireEventConfig
	int EventID;//[Offset: 0x0, Size: 0x4]
	float RandomOccur;//[Offset: 0x4, Size: 0x4]
	float RandomTimeRange;//[Offset: 0x8, Size: 0x4]
	int EventParam;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DeathMatchMedal_SuperGod.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_ContinuouKill.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_SuperGodEnd.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_TopSpotEnd.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_ContinuouKillEnd.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_FirstKill.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_Revenge.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_HeadShot.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_Hunter.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_Rally.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_Cheer.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_Sharpshooter.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_GorgeousExplosion.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_Slaughter.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_AntiKill.DeathMatchMedalBase.Object

--------------------------------
Class: DeathMatchMedal_SunderArmorExperts.DeathMatchMedalBase.Object

--------------------------------
Class: DecalBakingActorMgr.DecalBakingActor.Actor.Object
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x308, Size: 0xc]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x314, Size: 0xc]
	float RTCacheLifeTime;//[Offset: 0x320, Size: 0x4]
	int MaxRTCacheCount;//[Offset: 0x324, Size: 0x4]
	float RTCacheLifeTimeII;//[Offset: 0x328, Size: 0x4]
	int MaxRTCacheCountII;//[Offset: 0x32c, Size: 0x4]
	float TickUpdateCacheInterval;//[Offset: 0x330, Size: 0x4]
	void ResetDecalBakingRTCacheParam();// 0x135f8b8
	static DecalBakingActorMgr* GetWorldInstance(Object* WorldContextObject);// 0x135f840
	Vector GetSpawanDBPActorLocationByDiyData(out const DIYData InDIYData, SceneComponent* InSceneComponent);// 0x135f700
	DecalParameter[] GetRelativeDecalParameterFromWorld(SceneComponent* InSceneComponent);// 0x135f5f0
	static DecalBakingActorMgr* GetInstance();// 0x135f5c8
	DecalParameter[] GetDecalParameterFromWorld(Actor* InActor);// 0x135f4c0
	DecalParameter GetDecalParameter(SceneComponent* InSceneComponent, DecalBakingParameterComponent* InComponent);// 0x135f3e4
	TextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);// 0x135f320
	DecalParameter ConvertDIYDataToDecalParam(out const DIYData InDIYData);// 0x135f220
	DIYData ConvertDecalParamToDIYData(SceneComponent* InSceneComponent, DecalBakingParameterActor* InDBPActor, bool ZProjection);// 0x135f0f0
	void ClearDecalBackingRTCacheII(enum InType, FString PlayerUID);// 0x135ef50
	void ClearDecalBackingRTCache(enum InType, FString PlayerUID, bool bCacheII);// 0x135ed60

--------------------------------
Class: DecalBakingRTCache
	enum DecalBakingType;//[Offset: 0x0, Size: 0x1]
	FString PlayerUID;//[Offset: 0x4, Size: 0xc]
	int WeaponAvatarID;//[Offset: 0x10, Size: 0x4]
	TextureRenderTarget2D* TextureRenderTarget;//[Offset: 0x14, Size: 0x4]
	float LastActiveTime;//[Offset: 0x18, Size: 0x4]
	bool bMainRoleRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DIYData
	Texture2D* Texture;//[Offset: 0x0, Size: 0x4]
	LinearColor Color;//[Offset: 0x4, Size: 0x10]
	Vector2D Scale;//[Offset: 0x14, Size: 0x8]
	Vector2D Offset;//[Offset: 0x1c, Size: 0x8]
	float Rotation;//[Offset: 0x24, Size: 0x4]
	enum Direction;//[Offset: 0x28, Size: 0x1]
	LinearColor UVClip;//[Offset: 0x2c, Size: 0x10]
	LinearColor UVInfo;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: DecoratorDamage.ActorComponent.Object
	FString DamageComponentTag;//[Offset: 0xbc, Size: 0xc]
	float DamageValue;//[Offset: 0xc8, Size: 0x4]
	void OnOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1360068
	void OnOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x135fe6c

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xd0, Size: 0x8]
	float ShootRateCheckInterval;//[Offset: 0xfc, Size: 0x4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	float ShootRateCheckMulCoff;//[Offset: 0x104, Size: 0x4]
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x10c, Size: 0x4]
	bool bCheckParachuteHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float MaxParachuteHeightDist;//[Offset: 0x114, Size: 0x4]
	float MaxParachutePlaneDist;//[Offset: 0x118, Size: 0x4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x15c, Size: 0x4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x160, Size: 0x4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x164, Size: 0x4]
	float ShootTimeGunPosMaxZDif;//[Offset: 0x168, Size: 0x4]
	float ShootTimeGunPosMaxForwadDif;//[Offset: 0x16c, Size: 0x4]
	float ShootTimeGunPosMaxForwadDifInVehicle;//[Offset: 0x170, Size: 0x4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x174, Size: 0x4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x178, Size: 0x4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x17c, Size: 0x4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x180, Size: 0x4]
	float ShootTimeMuzzleZThres;//[Offset: 0x184, Size: 0x4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	float TimeLineCheckDnBorder;//[Offset: 0x18c, Size: 0x4]
	float TimeLineCheckUpBorder;//[Offset: 0x190, Size: 0x4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x194, Size: 0x4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x19c, Size: 0x4]
	float TolerateFlyTime;//[Offset: 0x1a0, Size: 0x4]
	float TolerateFlyDis;//[Offset: 0x1a4, Size: 0x4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x15453a4

--------------------------------
Class: DefaultAntiCheatComponent.WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object

--------------------------------
Class: DelayFlyProjMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float ThrowLowGravityScale;//[Offset: 0x150, Size: 0x4]
	float ThrowHighGravityScale;//[Offset: 0x154, Size: 0x4]
	bool bResumeMoveAfterImpactWithNoLostFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	Vector LastVelocityBeforeStop;//[Offset: 0x15c, Size: 0xc]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x168, Size: 0x4]
	void StartFly(Vector flyVelocity, bool isThrowHigh);// 0x1360600
	void ResumeMoveAfterImpactWithNoLost();// 0x13605ec

--------------------------------
Class: DrivingChallengeLevelRules.ChallengeLevelRules.Object
	TriggerItem_DrivingCheckPoint*[] DrivingCheckPointsArray;//[Offset: 0x20, Size: 0xc]
	int CurrentUnpassIndex;//[Offset: 0x2c, Size: 0x4]
	int TotalPassNum;//[Offset: 0x30, Size: 0x4]
	bool ValidNewCheckPoint();// 0x1360c3c
	void SignCheckPointPassed(FString Msg);// 0x1360ae4
	void SignAndSetDrivingCheckPoint(FString Msg);// 0x136098c
	void OnReceiveTriggerMsg(TriggerAction* TriggerAction, FString Msg);// 0x133d30c
	void InitLevel();// 0x133d2f0

--------------------------------
Class: TriggerItem_DrivingCheckPoint.TriggerBox.TriggerBase.Actor.Object
	FString ExtraMsgInfo;//[Offset: 0x2cc, Size: 0xc]
	byte CheckPointState;//[Offset: 0x2d8, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	void OnTriggerExit(Actor* OverlappedActor, Actor* Other);// 0x1398190
	void OnTriggerEnter(Actor* OverlappedActor, Actor* Other);// 0x14fac04
	void OnRep_ChangeShow();// 0x1507330
	bool IsActive();// 0x1507314
	void Deactivate();// 0x1507300
	void Activate();// 0x15072ec

--------------------------------
Class: DSCommand.Object
	FString DeviceType;//[Offset: 0x1c, Size: 0xc]
	FString BaseName;//[Offset: 0x28, Size: 0xc]
	Object* Parent;//[Offset: 0x34, Size: 0x4]
	FString[] CVars;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: DSCommandManager.Object
	Object*[] DSCommands;//[Offset: 0x1c, Size: 0xc]
	GrayPushCommand* GrayPushCommands;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: GrayPushCommand.Object
	FString ModeOpenID;//[Offset: 0x1c, Size: 0xc]
	GPProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0xc]
	bool InitConfigFile();// 0x139f7b0
	bool GetPushCommands(FString MapShortName, FString GameModeName, FString ProfileName, out const DeviceInfo DeviceInfo, out FString[] PushComands);// 0x139f440

--------------------------------
Class: GPProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0xc]
	GPProfileMatchItem[] Match;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: GPProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1]
	byte CompareType;//[Offset: 0x1, Size: 0x1]
	FString MatchString;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: DynamicFogController.DynamicWeatherController.ActorComponent.Object

--------------------------------
Class: DynamicMovementBaseInterface.Interface.Object

--------------------------------
Class: DynamicRainController.DynamicWeatherController.ActorComponent.Object
	delegate OnThunder;//[Offset: 0x2e8, Size: 0xc]
	bool bWetEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	CurveFloat* WetCurve;//[Offset: 0x2f8, Size: 0x4]
	float MaxRainParticle;//[Offset: 0x2fc, Size: 0x4]
	float MaxRainParticleLow;//[Offset: 0x300, Size: 0x4]
	float MaxRainParticleDummy;//[Offset: 0x304, Size: 0x4]
	CurveFloat* RainBlendInCurve;//[Offset: 0x308, Size: 0x4]
	CurveFloat* RainBlendOutCurve;//[Offset: 0x30c, Size: 0x4]
	bool bThunderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	float ThunderIntervalMin;//[Offset: 0x314, Size: 0x4]
	float ThunderIntervalMax;//[Offset: 0x318, Size: 0x4]
	float ThunderDistanceMin;//[Offset: 0x31c, Size: 0x4]
	float ThunderDistanceMax;//[Offset: 0x320, Size: 0x4]
	float ThunderAngleMax;//[Offset: 0x324, Size: 0x4]
	STExtraPlayerCharacter* MainPawn;//[Offset: 0x330, Size: 0x4]
	void OnUserQualitySettingChanged(int renderlevel);// 0x12e0ed0
	STExtraPlayerCharacter* GetMainPawn();// 0x136183c
	void CreateThunderOnServer();// 0x1361828
	void CreateThunderOnClient(float Angle, float Distance);// 0x1361764

--------------------------------
Class: DynamicSunnyController.DynamicWeatherController.ActorComponent.Object

--------------------------------
Class: EditableHUDWidget.HUDWidgetBase.Object

--------------------------------
Class: TeammatePositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* CanvasPanel;//[Offset: 0x2ec, Size: 0x4]
	Image* ArrowImage;//[Offset: 0x2f0, Size: 0x4]
	CanvasPanel* TeammateDistPanel;//[Offset: 0x2f4, Size: 0x4]
	TextBlock* TeammateDistText;//[Offset: 0x2f8, Size: 0x4]
	CanvasPanel* TeammateNamePanel;//[Offset: 0x2fc, Size: 0x4]
	TextBlock* TeammateNameText;//[Offset: 0x300, Size: 0x4]
	GridPanel* TeammateGridPanel;//[Offset: 0x304, Size: 0x4]
	bool InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	STExtraPlayerState* SavedPlayerState;//[Offset: 0x30c, Size: 0x4]
	STExtraBaseCharacter* SavePlayerCharacter;//[Offset: 0x310, Size: 0x4]
	Vector4 Limit;//[Offset: 0x320, Size: 0x10]
	int heightPlus;//[Offset: 0x330, Size: 0x4]
	int rightPlus;//[Offset: 0x334, Size: 0x4]
	Vector2D UIOffset;//[Offset: 0x338, Size: 0x8]
	Vector LocOffset;//[Offset: 0x340, Size: 0xc]
	Vector DeadLocOffset;//[Offset: 0x34c, Size: 0xc]
	Vector2D OnPlaneUIOffset;//[Offset: 0x358, Size: 0x8]
	float DeadAlpha;//[Offset: 0x360, Size: 0x4]
	float DeadMournSec;//[Offset: 0x364, Size: 0x4]
	float AlphaBegin;//[Offset: 0x368, Size: 0x4]
	float AlphaEnd;//[Offset: 0x36c, Size: 0x4]
	float AlphaStep;//[Offset: 0x370, Size: 0x4]
	float AlphaBeginDistance;//[Offset: 0x374, Size: 0x4]
	float AlphaEndDistance;//[Offset: 0x378, Size: 0x4]
	float ScaleBegin;//[Offset: 0x37c, Size: 0x4]
	float ScaleEnd;//[Offset: 0x380, Size: 0x4]
	float ScaleStep;//[Offset: 0x384, Size: 0x4]
	float ScaleBeginDistance;//[Offset: 0x388, Size: 0x4]
	float ScaleEndDistance;//[Offset: 0x38c, Size: 0x4]
	float MaxShowDistance;//[Offset: 0x390, Size: 0x4]
	int TargetDistance;//[Offset: 0x394, Size: 0x4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x3b4, Size: 0x4]
	void UpdatePlayerRevivalTime(int RemainingRevivalTime, int MaxRevivalTime);// 0x1c01fa0
	void UpdatePlayerRevivalState(bool InRevivalState, bool IsIDCapPick);// 0x1c01fa0
	void SetSavedPlayerState(STExtraPlayerState* SPS);// 0x14f758c
	void SetCurrentWidgetVisible(bool visible);// 0x1c01fa0
	void OnPlayerRevivalTimeChanged(int RemainingRevivalTime, int MaxRevivalTime);// 0x14f74d0
	void OnPlayerRevivalStateChanged(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x14f73b0
	bool IsPlayerInRevival();// 0x14f7388

--------------------------------
Class: EnemyPositionWidget.TeammatePositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* NearImages;//[Offset: 0x3cc, Size: 0x4]
	CanvasPanel* FarImages;//[Offset: 0x3d0, Size: 0x4]
	void SetEnemyLocation(Vector Location);// 0x1366140

--------------------------------
Class: EnhanceSpotComponent.ActorComponent.Object
	EnhancerSpot*[] SpotList;//[Offset: 0xbc, Size: 0xc]
	EnhancerSpot*[] DeactiveSpotList;//[Offset: 0xc8, Size: 0xc]
	NeedActiveEnhanceSpotSruct[] TempNeedActiveEnhances;//[Offset: 0xd4, Size: 0xc]
	int EnhancePreActiveTipsId;//[Offset: 0xe0, Size: 0x4]
	int EnhanceActiveTipsId;//[Offset: 0xe4, Size: 0x4]
	void ShowWarnTips(int TipsID);// 0x1367460
	void ResetAllEnhanceSpot();// 0x1367444
	void RandomSpawnEnhanceSpot(int Number, int TimeSeconds, int Percent);// 0x136733c
	void InitTotalSpotList();// 0x1367328
	void AddDeactiveSpotList(EnhancerSpot* DSpot);// 0x13672b0
	void ActiveLineReadyEnhanceSpots();// 0x136729c

--------------------------------
Class: NeedActiveEnhanceSpotSruct
	EnhancerSpot*[] TempNeedActiveSpotList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: EntireMapWidget.CommonMapWidget.MapWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	float MapScaleC;//[Offset: 0x51c, Size: 0x4]
	bool bIsSpecialAirlineScaleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	float CorrectLevelToMapScaleC;//[Offset: 0x524, Size: 0x4]
	CanvasPanel* CanvasPanel_AirLineGroup;//[Offset: 0x52c, Size: 0x4]
	CanvasPanel* CanvasPanel_Airline;//[Offset: 0x530, Size: 0x4]
	void UpdatePlayersLocAndRotC();// 0x134cbe0
	void UpdateLeftRouteLengthC();// 0x134cbc4
	void TellMarkUIsEnterEntireMap();// 0x13678c0
	void ReCalMapInfoC();// 0x134cb44

--------------------------------
Class: EventDataCollectionKeys.Object
	static FString GetTimestamp();// 0x1368284
	static FString GetTeammatePositions();// 0x136821c
	static FString GetSelfPosition();// 0x13681b4

--------------------------------
Class: EventDataCollectionValues.Object
	static FString GetTeammatePositionsFromContext(Actor* ActorContext);// 0x1368708
	static FString GetTeammatePositions(STExtraPlayerState* STExtraPlayerState);// 0x1368608

--------------------------------
Class: EventDataCollectionKeys_RankingScore.EventDataCollectionKeys.Object
	static FString GetSurvivalTime();// 0x1369244
	static FString GetRescueTimes();// 0x13691dc
	static FString GetRank();// 0x1369174
	static FString GetPlayerName();// 0x136910c
	static FString GetMaxKillDistance();// 0x13690a4
	static FString GetMarchDistance();// 0x136903c
	static FString GetKnockouts();// 0x1368fd4
	static FString GetKillNumInVehicle();// 0x1368f6c
	static FString GetKillNumByGrenade();// 0x1368f04
	static FString GetKillNum();// 0x1368e9c
	static FString GetInDamage();// 0x1368e34
	static FString GetHeal();// 0x1368dcc
	static FString GetHeadShotNum();// 0x1368d64
	static FString GetGotAirDropNum();// 0x1368cfc
	static FString GetDriveDistance();// 0x1368c94
	static FString GetDamage();// 0x1368c2c
	static FString GetAssists();// 0x1368bc4
	static FString GetAliveTeamNum();// 0x1368b5c
	static FString GetAlivePlayerNum();// 0x1368af4

--------------------------------
Class: EventDataCollectionKeys_GameStatus.EventDataCollectionKeys.Object
	static FString GetWorldLocation();// 0x1369e08
	static FString GetWeather();// 0x1369da0
	static FString GetTotalPlayerCount();// 0x1369d38
	static FString GetToPlaneCarryLeftTime();// 0x1369cd0
	static FString GetTeamId();// 0x1369c68
	static FString GetPlaneRouteStop();// 0x1369c00
	static FString GetPlaneRouteStart();// 0x1369b98
	static FString GetOpenId();// 0x1369b30
	static FString GetGameStatus();// 0x1369ac8
	static FString GetAlivePlayerCount();// 0x1369a60

--------------------------------
Class: EventDataCollectionValues_GameStatus_GameStatus.EventDataCollectionValues.Object
	static FString GetWin();// 0x136a7ac
	static FString GetWaitingOnLobby();// 0x136a744
	static FString GetQualityPlaza();// 0x136a6dc
	static FString GetPlaneCarrying();// 0x136a674
	static FString GetParachuteOpen();// 0x136a60c
	static FString GetParachuteJumping();// 0x136a5a4
	static FString GetMatching();// 0x136a53c
	static FString GetLanding();// 0x136a4d4
	static FString GetFireWorking();// 0x136a46c
	static FString GetFighting();// 0x136a404
	static FString GetCake();// 0x136a39c

--------------------------------
Class: EventDataCollectionKeys_StartMatching.EventDataCollectionKeys.Object
	static FString GetViewType();// 0x136af28
	static FString GetTeamCount();// 0x136aec0
	static FString GetMapId();// 0x136ae58
	static FString GetGameMode();// 0x136adf0
	static FString GetFullTeamCount();// 0x136ad88

--------------------------------
Class: EventDataCollectionKeys_PlaneCarrying.EventDataCollectionKeys.Object
	static FString GetStartPosition();// 0x136b3bc
	static FString GetEndPosition();// 0x136b354

--------------------------------
Class: EventDataCollectionKeys_PuttingDownCakeFireWorks.EventDataCollectionKeys.Object
	static FString GetFireWorksOpenId();// 0x136b778
	static FString GetCakeOpenId();// 0x136b710

--------------------------------
Class: EventDataCollectionKeys_TakeDropItem.EventDataCollectionKeys.Object
	static FString GetType();// 0x136be74
	static FString GetReason();// 0x136be0c
	static FString GetPlayerName();// 0x136bda4
	static FString GetOpenId();// 0x136bd3c
	static FString GetItemInstanceId();// 0x136bcd4
	static FString GetItemId();// 0x136bc6c
	static FString GetItemCount();// 0x136bc04
	static FString GetHoldingCount();// 0x136bb9c
	static FString GetBulletCount();// 0x136bb34
	static FString GetBackpackAvatarItemDurability();// 0x136bacc

--------------------------------
Class: EventDataCollectionValues_TakeDropItem_Type.EventDataCollectionValues.Object
	static FString GetTaking();// 0x136c470
	static FString GetDropping();// 0x136c408

--------------------------------
Class: EventDataCollectionKeys_UsingItem.EventDataCollectionKeys.Object
	static FString GetStatus();// 0x136c964
	static FString GetPlayerName();// 0x136c8fc
	static FString GetOpenId();// 0x136c894
	static FString GetItemLeftCount();// 0x136c82c
	static FString GetItemId();// 0x136c7c4

--------------------------------
Class: EventDataCollectionValues_UsingItem_Status.EventDataCollectionValues.Object
	static FString GetLeading();// 0x136ce60
	static FString GetInteruption();// 0x136cdf8
	static FString GetCompletion();// 0x136cd90

--------------------------------
Class: EventDataCollectionKeys_Climbing.EventDataCollectionKeys.Object

--------------------------------
Class: EventDataCollectionKeys_Falling.EventDataCollectionKeys.Object
	static FString GetType();// 0x136d3c4
	static FString GetStatus();// 0x136d35c

--------------------------------
Class: EventDataCollectionValues_Falling_Type.EventDataCollectionValues.Object
	static FString GetStart();// 0x136d780
	static FString GetEnd();// 0x136d718

--------------------------------
Class: EventDataCollectionValues_Falling_Status.EventDataCollectionValues.Object
	static FString GetNonDriving();// 0x136db3c
	static FString GetDriving();// 0x136dad4

--------------------------------
Class: EventDataCollectionKeys_InFieldOfView.EventDataCollectionKeys.Object
	static FString GetUniqueIdentifier();// 0x136e168
	static FString GetTargetWorldLocation();// 0x136e100
	static FString GetOldFieldOfViewNotificationStatus();// 0x136e098
	static FString GetMyWorldLocation();// 0x136e030
	static FString GetMinimalScreenLocation();// 0x136dfc8
	static FString GetMaximumScreenLocation();// 0x136df60
	static FString GetFieldOfViewTargetCategory();// 0x136def8
	static FString GetCurrentFieldOfViewNotificationStatus();// 0x136de90

--------------------------------
Class: EventDataCollectionValues_InFieldOfView_FieldOfView.EventDataCollectionValues.Object
	static FString GetTombBox();// 0x136ea14
	static FString GetTeammateVehicle();// 0x136e9ac
	static FString GetTeammate();// 0x136e944
	static FString GetSmog();// 0x136e8dc
	static FString GetFireWorks();// 0x136e874
	static FString GetEnemyVehicle();// 0x136e80c
	static FString GetEnemy();// 0x136e7a4
	static FString GetCake();// 0x136e73c
	static FString GetBombing();// 0x136e6d4
	static FString GetAirDroping();// 0x136e66c

--------------------------------
Class: EventDataCollectionKeys_UnderEnermyAttack.EventDataCollectionKeys.Object
	static FString GetValue();// 0x136fc40
	static FString GetTargetPart();// 0x136fbd8
	static FString GetResult();// 0x136fb70
	static FString GetHurtUniqueIdentifier();// 0x136fb08
	static FString GetHurtPosture();// 0x136faa0
	static FString GetHurtPosition();// 0x136fa38
	static FString GetHurtPlayerName();// 0x136f9d0
	static FString GetHurtOpenId();// 0x136f968
	static FString GetHurtHealth();// 0x136f900
	static FString GetHurtEquipId();// 0x136f898
	static FString GetHurtDirection();// 0x136f830
	static FString GetHurtBulletCountInClip();// 0x136f7c8
	static FString GetHurtAim();// 0x136f760
	static FString GetDph();// 0x136f6f8
	static FString GetDistance();// 0x136f690
	static FString GetCarValue();// 0x136f628
	static FString GetCarHealth();// 0x136f5c0
	static FString GetBeHurtUniqueIdentifier();// 0x136f558
	static FString GetBeHurtPosture();// 0x136f4f0
	static FString GetBeHurtPosition();// 0x136f488
	static FString GetBeHurtPlayerName();// 0x136f420
	static FString GetBeHurtOpenId();// 0x136f3b8
	static FString GetBeHurtJacketDurabilityReduction();// 0x136f350
	static FString GetBeHurtJacketDurability();// 0x136f2e8
	static FString GetBeHurtJacket();// 0x136f280
	static FString GetBeHurtHelmetDurabilityReduction();// 0x136f218
	static FString GetBeHurtHelmetDurability();// 0x136f1b0
	static FString GetBeHurtHelmet();// 0x136f148
	static FString GetBeHurtHealth();// 0x136f0e0
	static FString GetBeHurtEquipId();// 0x136f078
	static FString GetBeHurtDirection();// 0x136f010
	static FString GetAce();// 0x136efa8

--------------------------------
Class: EventDataCollectionValues_UnderEnermyAttack_Result.EventDataCollectionValues.Object
	static FString GetWeedingOut();// 0x137093c
	static FString GetReducingHealth();// 0x13708d4
	static FString GetKnockingOutReducingHealth();// 0x137086c
	static FString GetKnockingOut();// 0x1370804

--------------------------------
Class: EventDataCollectionValues_UnderEnermyAttack_BeHurtPosture.EventDataCollectionValues.Object
	static FString GetWalking();// 0x1371244
	static FString GetTurningHead();// 0x13711dc
	static FString GetStanding();// 0x1371174
	static FString GetRunning();// 0x137110c
	static FString GetProning();// 0x13710a4
	static FString GetJumping();// 0x137103c
	static FString GetDying();// 0x1370fd4
	static FString GetDriving();// 0x1370f6c
	static FString GetCrouching();// 0x1370f04
	static FString GetCarriging();// 0x1370e9c
	static FString FromPawnStates(int64 PawnStates);// 0x1370ddc
	static FString FromPawnState(enum PawnState);// 0x1370d20

--------------------------------
Class: EventDataCollectionValues_UnderEnermyAttack_HurtPosture.EventDataCollectionValues_UnderEnermyAttack_BeHurtPosture.EventDataCollectionValues.Object

--------------------------------
Class: EventDataCollectionValues_UnderEnermyAttack_HurtAim.EventDataCollectionValues.Object
	static FString Get(STExtraBaseCharacter* AttackerSTExtraBaseCharacter, Actor* DamageCauser);// 0x13719c8

--------------------------------
Class: EventDataCollectionKeys_TakingDamage.EventDataCollectionKeys.Object
	static FString GetResult();// 0x1371f50
	static FString GetReason();// 0x1371ee8
	static FString GetPlayerName();// 0x1371e80
	static FString GetOpenId();// 0x1371e18
	static FString GetLeftHealth();// 0x1371db0

--------------------------------
Class: EventDataCollectionValues_TakingDamage_Reason.EventDataCollectionValues.Object
	static FString GetVehiclecolliding();// 0x1372734
	static FString GetVehicleBombing();// 0x13726cc
	static FString GetPoison();// 0x1372664
	static FString GetLastBreathWithoutRescue();// 0x13725fc
	static FString GetFalling();// 0x1372594
	static FString GetDrowning();// 0x137252c
	static FString GetBombing();// 0x13724c4
	static FString GetAirAttacking();// 0x137245c
	static FString FromDamageEvent(out const DamageEvent DamageEvent);// 0x137237c

--------------------------------
Class: EventDataCollectionValues_TakingDamage_Result.EventDataCollectionValues_UnderEnermyAttack_Result.EventDataCollectionValues.Object

--------------------------------
Class: EventDataCollectionKeys_ReducingSignalValue.EventDataCollectionKeys.Object
	static FString GetPlayerName();// 0x1372f18
	static FString GetOpenId();// 0x1372eb0
	static FString GetLeftValue();// 0x1372e48
	static FString GetDistance();// 0x1372de0

--------------------------------
Class: EventDataCollectionKeys_CircleReducing.EventDataCollectionKeys.Object
	static FString GetOpenId();// 0x13732fc

--------------------------------
Class: EventDataCollectionKeys_CircleChange.EventDataCollectionKeys.Object
	static FString GetWorldLocation();// 0x13737a8
	static FString GetOldCircleRadius();// 0x1373740
	static FString GetOldCircleCenter();// 0x13736d8
	static FString GetNewCircleRadius();// 0x1373670
	static FString GetNewCircleCenter();// 0x1373608

--------------------------------
Class: EventDataCollectionKeys_Rescue.EventDataCollectionKeys.Object
	static FString GetStatus();// 0x1373d74
	static FString GetRescuePlayerName();// 0x1373d0c
	static FString GetRescueOpenId();// 0x1373ca4
	static FString GetBeRescuePlayerName();// 0x1373c3c
	static FString GetBeRescueOpenId();// 0x1373bd4

--------------------------------
Class: EventDataCollectionValues_Rescue_Status.EventDataCollectionValues_UsingItem_Status.EventDataCollectionValues.Object

--------------------------------
Class: EventDataCollectionKeys_DrivingVehicle.EventDataCollectionKeys.Object
	static FString GetVehicleId();// 0x13745d8
	static FString GetTire();// 0x1374570
	static FString GetStatus();// 0x1374508
	static FString GetSpeed();// 0x13744a0
	static FString GetOil();// 0x1374438
	static FString GetDrivingType();// 0x13743d0
	static FString GetDriverPlayerName();// 0x1374368
	static FString GetDriverOpenId();// 0x1374300

--------------------------------
Class: EventDataCollectionValues_DrivingVehicle_DrivingType.EventDataCollectionValues.Object
	static FString GetPassanger();// 0x1374b44
	static FString GetDriver();// 0x1374adc

--------------------------------
Class: EventDataCollectionValues_DrivingVehicle_Status.EventDataCollectionValues.Object
	static FString GetOn();// 0x1374f00
	static FString GetOff();// 0x1374e98

--------------------------------
Class: EventDataCollectionKeys_ReloadingBullet.EventDataCollectionKeys.Object
	static FString GetMaxBulletCountInClip();// 0x1375324
	static FString GetBulletCountInClip();// 0x13752bc
	static FString GetBulletCountInBarrel();// 0x1375254

--------------------------------
Class: EventDataCollectionKeys_AirDrop.EventDataCollectionKeys.Object
	static FString GetType();// 0x1375728
	static FString GetPosition();// 0x13756c0

--------------------------------
Class: EventDataCollectionValues_AirDrop_Type.EventDataCollectionValues.Object
	static FString GetSuper();// 0x1375ae4
	static FString GetNormal();// 0x1375a7c

--------------------------------
Class: EventDataCollectionKeys_ItemAttach.EventDataCollectionKeys.Object
	static FString GetState();// 0x1375f70
	static FString GetOpenId();// 0x1375f08
	static FString GetItemId();// 0x1375ea0
	static FString GetAttachmentId();// 0x1375e38

--------------------------------
Class: EventDataCollectionValues_ItemAttach_State.EventDataCollectionValues.Object
	static FString GetDetaching();// 0x13763bc
	static FString GetAttaching();// 0x1376354

--------------------------------
Class: EventDataCollectionKeys_PlayerInfo.EventDataCollectionKeys.Object
	static FString GetSex();// 0x13767e0
	static FString GetPlayerName();// 0x1376778
	static FString GetAvatars();// 0x1376710

--------------------------------
Class: EventDataCollectionValues_PlayerInfo_Sex.EventDataCollectionValues.Object
	static FString GetMale();// 0x1376be4
	static FString GetFemale();// 0x1376b7c

--------------------------------
Class: EventDataCollectionKeys_MiniMapShowInfo.EventDataCollectionKeys.Object
	static FString GetVoiceCheck();// 0x1376fa0
	static FString GetPosition();// 0x1376f38

--------------------------------
Class: EventDataCollectionValues_MiniMapShowInfo_VoiceCheck.EventDataCollectionValues.Object
	static FString GetWeapon();// 0x1377494
	static FString GetTyre();// 0x137742c
	static FString GetSilentWeapon();// 0x13773c4
	static FString GetGlass();// 0x137735c
	static FString GetFootPrint();// 0x13772f4

--------------------------------
Class: EventDataCollectionKeys_Following.EventDataCollectionKeys.Object
	static FString GetFollowType();// 0x1377990
	static FString GetFollowerOpenId();// 0x1377928
	static FString GetFolloweeOpenId();// 0x13778c0

--------------------------------
Class: EventDataCollectionValues_Following_FollowType.EventDataCollectionValues.Object
	static FString GetRefuse();// 0x1377ecc
	static FString GetInvitation();// 0x1377e64
	static FString GetFollowing();// 0x1377dfc
	static FString GetCancellation();// 0x1377d94
	static FString GetAcception();// 0x1377d2c

--------------------------------
Class: EventDataCollectionKeys_MiniMapPinning.EventDataCollectionKeys.Object
	static FString GetType();// 0x13783c8
	static FString GetPinPosition();// 0x1378360
	static FString GetOpenId();// 0x13782f8

--------------------------------
Class: EventDataCollectionValues_MiniMapPinning_Type.EventDataCollectionValues.Object
	static FString GetPinning();// 0x13787cc
	static FString GetNonPinning();// 0x1378764

--------------------------------
Class: EventDataCollectionKeys_Blocking.EventDataCollectionKeys.Object
	static FString GetType();// 0x1378cc0
	static FString GetBlockerOpenId();// 0x1378c58
	static FString GetBlockerIndex();// 0x1378bf0
	static FString GetBlockeeOpenId();// 0x1378b88
	static FString GetBlockeeIndex();// 0x1378b20

--------------------------------
Class: EventDataCollectionValues_Blocking_Type.EventDataCollectionValues.Object
	static FString GetNonBlocking();// 0x1379154
	static FString GetBlocking();// 0x13790ec

--------------------------------
Class: EventDataCollectionKeys_Dancing.EventDataCollectionKeys.Object
	static FString GetDancerOpenId();// 0x1379510
	static FString GetDanceId();// 0x13794a8

--------------------------------
Class: EventDataCollectionKeys_PickingupTombBox.EventDataCollectionKeys.Object
	static FString GetOpenId();// 0x1379a6c
	static FString GetItemIds();// 0x1379a04
	static FString GetItemId();// 0x137999c
	static FString GetItemCounts();// 0x1379934
	static FString GetItemCount();// 0x13798cc
	static FString GetBoxName();// 0x1379864

--------------------------------
Class: EventDataCollectionKeys_AirAttacking.EventDataCollectionKeys.Object
	static FString GetWorldLocation();// 0x1379f48
	static FString GetCenter();// 0x1379ee0

--------------------------------
Class: EventDataCollectionKeys_CurrentWeapon.EventDataCollectionKeys.Object
	static FString GetMaxBulletCountInClip();// 0x137a3d4
	static FString GetItemId();// 0x137a36c
	static FString GetBulletCountInClip();// 0x137a304
	static FString GetBulletCountInBarrel();// 0x137a29c

--------------------------------
Class: EventDataCollectionKeys_SceneInfo.EventDataCollectionKeys.Object
	static FString GetIsInHouse();// 0x137a7b8

--------------------------------
Class: EventDataCollectionValues_SceneInfo_IsInHouse.EventDataCollectionValues.Object
	static FString GetYes();// 0x137ab2c
	static FString GetNo();// 0x137aac4

--------------------------------
Class: EventDataCollectionKeys_TeamInfo.EventDataCollectionKeys.Object
	static FString GetTeammateOpenIds();// 0x137aee8
	static FString GetTeamId();// 0x137ae80

--------------------------------
Class: EventDataCollectionKeys_EnteringLeavingTeam.EventDataCollectionKeys.Object
	static FString GetTeamId();// 0x137b30c
	static FString GetOpenId();// 0x137b2a4
	static FString GetAction();// 0x137b23c

--------------------------------
Class: EventDataCollectionValues_EnteringLeavingTeam_Action.EventDataCollectionValues.Object
	static FString GetLeaving();// 0x137b710
	static FString GetEntering();// 0x137b6a8

--------------------------------
Class: EventDataCollectionKeys_OnOffline.EventDataCollectionKeys.Object
	static FString GetType();// 0x137bacc
	static FString GetOpenId();// 0x137ba64

--------------------------------
Class: EventDataCollectionValues_OnOffline_Type.EventDataCollectionValues.Object
	static FString GetOnline();// 0x137be88
	static FString GetOffline();// 0x137be20

--------------------------------
Class: EventDataCollectionKeys_RankList.EventDataCollectionKeys.Object
	static FString GetType();// 0x137c2ac
	static FString GetState();// 0x137c244
	static FString GetOpenId();// 0x137c1dc

--------------------------------
Class: EventDataCollectionValues_RankList_State.EventDataCollectionValues.Object
	static FString GetOn();// 0x137c6b0
	static FString GetOff();// 0x137c648

--------------------------------
Class: EventDataCollectionKeys_TextMessage.EventDataCollectionKeys.Object
	static FString GetText();// 0x137cb3c
	static FString GetOpenId();// 0x137cad4
	static FString GetItemPosition();// 0x137ca6c
	static FString GetItemId();// 0x137ca04

--------------------------------
Class: EventDataCollectionKeys_PawnState.EventDataCollectionKeys.Object
	static FString GetType();// 0x137d058
	static FString GetStates();// 0x137cff0
	static FString GetOpenId();// 0x137cf88
	static FString GetChangedState();// 0x137cf20

--------------------------------
Class: EventDataCollectionValues_PawnState_State.EventDataCollectionValues.Object
	static FString GetLeaving();// 0x137d4a4
	static FString GetEntering();// 0x137d43c

--------------------------------
Class: EventDataCollectionKeys_OpenCloseDoor.EventDataCollectionKeys.Object
	static FString GetRightState();// 0x137d8c8
	static FString GetOpenId();// 0x137d860
	static FString GetLeftState();// 0x137d7f8

--------------------------------
Class: EventDataCollectionValues_OpenCloseDoor_RightState.EventDataCollectionValues.Object
	static FString GetOpen();// 0x137dd34
	static FString GetClose();// 0x137dccc
	static FString GetBroken();// 0x137dc64

--------------------------------
Class: EventDataCollectionValues_OpenCloseDoor_LeftState.EventDataCollectionValues_OpenCloseDoor_RightState.EventDataCollectionValues.Object

--------------------------------
Class: EventDataCollectionKeys_MicSpeakerState.EventDataCollectionKeys.Object
	static FString GetSpeaker();// 0x137e300
	static FString GetOpenId();// 0x137e298
	static FString GetMic();// 0x137e230

--------------------------------
Class: EventDataCollectionKeys_VehicleState.EventDataCollectionKeys.Object
	float LowerboundTickReportIntervalSeconds;//[Offset: 0x1c, Size: 0x4]
	float UpperboundTickReportIntervalSeconds;//[Offset: 0x20, Size: 0x4]
	static FString GetWheelStates();// 0x137e76c
	static FString GetFuel();// 0x137e704
	static FString GetForwardSpeed();// 0x137e69c

--------------------------------
Class: ExtendedLoopScrollBox.ScrollBox.PanelWidget.Widget.Visual.Object
	delegate OnRefreshItem;//[Offset: 0x884, Size: 0xc]
	delegate OnItemCreated;//[Offset: 0x890, Size: 0xc]
	delegate OnRefreshSubItem;//[Offset: 0x89c, Size: 0xc]
	delegate OnSubItemCreated;//[Offset: 0x8a8, Size: 0xc]
	delegate OnViewScrolled;//[Offset: 0x8b4, Size: 0xc]
	class Widget* ItemType;//[Offset: 0x8c0, Size: 0x4]
	float ItemSize;//[Offset: 0x8c4, Size: 0x4]
	float Padding;//[Offset: 0x8c8, Size: 0x4]
	class Widget* SubItemType;//[Offset: 0x8cc, Size: 0x4]
	Vector2D SubItemSize;//[Offset: 0x8d0, Size: 0x8]
	Vector2D SubPadding;//[Offset: 0x8d8, Size: 0x8]
	CanvasPanel* CanvasPanel;//[Offset: 0x8e4, Size: 0x4]
	<int,Widget*> CurrentItemsMap;//[Offset: 0x938, Size: 0x3c]
	Widget*[] UnusedItemsArray;//[Offset: 0x974, Size: 0xc]
	<int,Widget*> CurrentSubItemsMap;//[Offset: 0x980, Size: 0x3c]
	Widget*[] UnusedSubItemsArray;//[Offset: 0x9bc, Size: 0xc]
	void UserScrolled(float Offset);// 0x137fce8
	bool SetSubItemCount(int Index, int subCount);// 0x137fc24
	bool SetItemCount(int count);// 0x137fba4
	void ScrollToSubItemByIndex(int Index);// 0x137fb2c
	void ScrollToItemByIndex(int Index);// 0x137fab4
	void RefreshSubItem(int Index);// 0x137fa3c
	void RefreshItem(int Index);// 0x137f9c4
	void RefreshAllSubItems();// 0x137f9b0
	void RefreshAllItems();// 0x137f99c
	bool ClearAllSubItems(bool includeUnused);// 0x137f914
	bool ClearAllItems(bool includeUnused);// 0x137f88c

--------------------------------
Class: FerrisBoxRecord.ActorComponent.Object

--------------------------------
Class: SimulateSyncSmoothActor.Actor.Object
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0x2c8, Size: 0x4]
	void SetVelocity(out const Vector Velocity);// 0x141cedc
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x141cddc

--------------------------------
Class: FerrisWheel.SimulateSyncSmoothActor.Actor.Object
	Vector BoxExtentMin;//[Offset: 0x2cc, Size: 0xc]
	Vector BoxExtentMax;//[Offset: 0x2d8, Size: 0xc]
	Box OutBoundBox;//[Offset: 0x2e4, Size: 0x1c]
	Box InBoundBox;//[Offset: 0x300, Size: 0x1c]
	Vector DefaultInPosition;//[Offset: 0x31c, Size: 0xc]
	float mf_PassDoorAngel;//[Offset: 0x328, Size: 0x4]
	float RotateSpeedCpp;//[Offset: 0x32c, Size: 0x4]
	void UnRegSingleBox(StaticMeshComponent* InStatic);// 0x1381804
	void StandBox();// 0x13817f0
	void RegNewBox(SkeletalMeshComponent* InSkel);// 0x1381778
	void PullBoxStand(SceneComponent* InComp);// 0x12de114
	bool PassThroughDoor(StaticMeshComponent* InComp, out const Vector InStart, out const Vector InEnd);// 0x1381654
	void OnBoxHitted(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x13814a8
	bool IsInFerrisDoor(StaticMeshComponent* InComp, out const Vector InPos, bool InShouldLog);// 0x1381388
	bool IsInFerrisBox(StaticMeshComponent* InComp, out const Vector InPos, bool InShouldLog);// 0x1381268
	void Init_Refs();// 0x1c01fa0
	Vector GetGoodOutPos(StaticMeshComponent* InComp, out const Vector InPos, bool ForceForward);// 0x1381134
	void CheckPosition(out const Vector InPos, StaticMeshComponent* InHitedBox);// 0x1381068
	void BroadcastEnableTick(bool bEnabled);// 0x1380fa0

--------------------------------
Class: FieldOfViewTargetCategoryGetterInterface.Interface.Object
	FString GetFieldOfViewTargetCategory(Object* Context);// 0x1382808

--------------------------------
Class: FireWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128, Size: 0x4]
	STExtraBaseCharacter* WeaponOwner;//[Offset: 0x12c, Size: 0x4]
	bool OpenPressBtnStay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]

--------------------------------
Class: FlareGunCrossHairComponent.CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Texture2D* DisableTexture;//[Offset: 0x188, Size: 0x4]
	float fadeInSpeed;//[Offset: 0x194, Size: 0x4]
	float fadeOutSpeed;//[Offset: 0x198, Size: 0x4]
	float fadeScaleMin;//[Offset: 0x19c, Size: 0x4]
	float fadeScaleMax;//[Offset: 0x1a0, Size: 0x4]
	float fadeColorAlphaMin;//[Offset: 0x1a4, Size: 0x4]
	float fadeColorAlphaMax;//[Offset: 0x1a8, Size: 0x4]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	void OnFloatingDamageText(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x1383298
	void CreateFloatingText(out const FloatingTextData FloatingTextData);// 0x1c01fa0
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x13831a4

--------------------------------
Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 0x4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: FloatLogic.Object
	STExtraAdavancedFloatingMovementComp* FloatingVehicleMovement;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: STExtraAdavancedFloatingMovementComp.STExtraFloatingVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float RotationYawAngleRate;//[Offset: 0x178, Size: 0x4]
	float RotationMinRateForceAcc;//[Offset: 0x17c, Size: 0x4]
	float RotationMinSpeed;//[Offset: 0x180, Size: 0x4]
	bool DrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	float[] PointDensityOverrideLeft;//[Offset: 0x188, Size: 0xc]
	float[] PointDensityOverrideRight;//[Offset: 0x194, Size: 0xc]

--------------------------------
Class: STExtraFloatingVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxAcceleration;//[Offset: 0x124, Size: 0x4]
	float StartAccelerationRate;//[Offset: 0x128, Size: 0x4]
	float StopAccelerationRate;//[Offset: 0x12c, Size: 0x4]
	float MaxRotationYawAngle;//[Offset: 0x130, Size: 0x4]
	float RotationYawRate;//[Offset: 0x134, Size: 0x4]
	float BackwardForceScale;//[Offset: 0x138, Size: 0x4]
	float Acceleration;//[Offset: 0x13c, Size: 0x4]
	float RotationYawAngle;//[Offset: 0x140, Size: 0x4]
	FName ApplyForceSocketName;//[Offset: 0x148, Size: 0x8]
	CurveFloat* SlideCompensationCurve;//[Offset: 0x150, Size: 0x4]
	float STThrottleInput;//[Offset: 0x15c, Size: 0x4]
	float STSteeringInput;//[Offset: 0x160, Size: 0x4]
	BuoyancyForceComponent* buoyancyForce;//[Offset: 0x168, Size: 0x4]
	bool DisableWhenTurnOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	float MinTurnOverDegree;//[Offset: 0x174, Size: 0x4]
	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);// 0x14806f4
	float GetThrottleInput();// 0x14806d8
	float GetSteeringInput();// 0x14806bc

--------------------------------
Class: FootprintActor.Actor.Object
	SceneComponent* RootSceneComp;//[Offset: 0x2c8, Size: 0x4]
	StaticMesh* FootprintMesh;//[Offset: 0x2cc, Size: 0x4]
	StaticMeshComponent*[] FootprintList;//[Offset: 0x2d4, Size: 0xc]

--------------------------------
Class: FPPSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	CameraOffsetData InVehicleCameraData;//[Offset: 0x358, Size: 0x1c]
	Transform InVehicleCameraTrans;//[Offset: 0x380, Size: 0x30]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x3b0, Size: 0x1c]
	void SetFPPCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x1383c0c

--------------------------------
Class: GameEventListener.ActorComponent.Object
	delegate OnGameEventListener;//[Offset: 0xbc, Size: 0xc]
	float HeightCheck_High;//[Offset: 0xc8, Size: 0x4]
	float HeightCheck_Mid;//[Offset: 0xcc, Size: 0x4]
	float HeightCheck_Low;//[Offset: 0xd0, Size: 0x4]
	float FlyingScreenSizeCullingFactor;//[Offset: 0xd8, Size: 0x4]
	float FlyingDistanceCullingFactor;//[Offset: 0xdc, Size: 0x4]
	float HighMidFightingScreenSizeCullingFactor;//[Offset: 0xe0, Size: 0x4]
	float HighMidFightingDistanceCullingFactor;//[Offset: 0xe4, Size: 0x4]
	float LowFightingScreenSizeCullingFactor;//[Offset: 0xe8, Size: 0x4]
	float LowFightingDistanceCullingFactor;//[Offset: 0xec, Size: 0x4]
	bool bUsetoControlNearClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bNearClipInPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	void StarCalcJump();// 0x1384434
	void ScaleScreenSizeCulling(byte pawnevent);// 0x13843bc
	void OnChangeViewTarget();// 0x13843a8
	bool IsPlayerLandFromTheAir();// 0x1384380
	bool IsPlayerLanded();// 0x1384358
	bool IsPlayerFlying();// 0x1384330
	void HeightCheck();// 0x138431c
	void GameEventReBirth();// 0x1384308
	void GameEventPlane();// 0x13842f4
	void GameEventParachute();// 0x13842e0
	void GameEventLanded();// 0x13842cc
	void GameEventJump();// 0x13842b8
	void GameEventFinished();// 0x13842a4
	void GameEventFighting();// 0x1384290
	void GameEventDie(float currentHP, float ratioHP);// 0x13841d4
	void GameEventBirth();// 0x13841c0
	void ChangeViewtargetToPlane();// 0x13841ac

--------------------------------
Class: GameLevelData.Actor.Object
	GameLevelDesc LevelDesc;//[Offset: 0x2c8, Size: 0x14]
	FString[] TargetClassPaths;//[Offset: 0x2dc, Size: 0xc]
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0x2e8, Size: 0x4]
	FString LeveDirectorFilePath;//[Offset: 0x2ec, Size: 0xc]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x2f8, Size: 0xc]
	PVECircleDeploymentConfig[] PVECircleConfigs;//[Offset: 0x304, Size: 0xc]
	byte EndCondType;//[Offset: 0x310, Size: 0x1]
	int EndCondPar;//[Offset: 0x314, Size: 0x4]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	Actor* RelifePointGroupActor;//[Offset: 0x31c, Size: 0x4]
	Vector[] TaskPointLocations;//[Offset: 0x320, Size: 0xc]

--------------------------------
Class: GameLevelDesc
	int ChapterID;//[Offset: 0x0, Size: 0x4]
	int LevelId;//[Offset: 0x4, Size: 0x4]
	FString Desc;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: MonsterWave
	float WaveDelayTime;//[Offset: 0x0, Size: 0x4]
	MonsterGroup[] MonsterGroupList;//[Offset: 0x4, Size: 0xc]
	FString Desc;//[Offset: 0x10, Size: 0xc]
	byte EndCondType;//[Offset: 0x1c, Size: 0x1]
	int EndCondPar;//[Offset: 0x20, Size: 0x4]
	int ID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: MonsterGroup
	FString Desc;//[Offset: 0x0, Size: 0xc]
	byte ChooseGroupSpotType;//[Offset: 0xc, Size: 0x1]
	int NearPlayTeamIdx;//[Offset: 0x10, Size: 0x4]
	ZMonsterSpotGroup*[] SpotGroupChooseList;//[Offset: 0x14, Size: 0xc]
	MonsterSpotGroup[] MonsterSpotGroupChooseList;//[Offset: 0x20, Size: 0xc]
	MonsterGeneratePlan[] PlanList;//[Offset: 0x2c, Size: 0xc]
	int ID;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ZMonsterSpotGroup.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x238, Size: 0xc]
	ZMonsterSpot*[] SpotList;//[Offset: 0x244, Size: 0xc]

--------------------------------
Class: ZMonsterSpot.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x238, Size: 0xc]
	byte MonsterSpotType;//[Offset: 0x244, Size: 0x1]
	ZMonsterRoadPoint*[] RoadPointList;//[Offset: 0x248, Size: 0xc]
	byte SpotRadius;//[Offset: 0x254, Size: 0x1]

--------------------------------
Class: ZSpotSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ZMonsterRoadPoint.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x238, Size: 0x4]
	int Radius;//[Offset: 0x23c, Size: 0x4]

--------------------------------
Class: MonsterSpotGroup
	FString Desc;//[Offset: 0x0, Size: 0xc]
	Vector Pos;//[Offset: 0xc, Size: 0xc]
	MonsterSpot[] SpotList;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MonsterSpot
	FString Desc;//[Offset: 0x0, Size: 0xc]
	byte MonsterSpotType;//[Offset: 0xc, Size: 0x1]
	Vector Pos;//[Offset: 0x10, Size: 0xc]
	RoadPointInfo[] RoadPointList;//[Offset: 0x1c, Size: 0xc]
	byte SpotRadius;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: MonsterGeneratePlan
	FString Desc;//[Offset: 0x0, Size: 0xc]
	int PlanWeight;//[Offset: 0xc, Size: 0x4]
	MonsterGenerateCfg[] PlanDetail;//[Offset: 0x10, Size: 0xc]
	int ID;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MonsterGenerateCfg
	int MonsterID;//[Offset: 0x0, Size: 0x4]
	FString Desc;//[Offset: 0x4, Size: 0xc]
	byte SpotType;//[Offset: 0x10, Size: 0x1]
	int MonsterNum;//[Offset: 0x14, Size: 0x4]
	float RandomGenerateDelayTime;//[Offset: 0x18, Size: 0x4]
	int ReBornTimes;//[Offset: 0x1c, Size: 0x4]
	int ReBornDelay;//[Offset: 0x20, Size: 0x4]
	float GenerateDelayTime;//[Offset: 0x24, Size: 0x4]
	int ID;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: PVECircleDeploymentConfig
	int CircleID;//[Offset: 0x0, Size: 0x4]
	Actor* Location;//[Offset: 0x4, Size: 0x4]
	float Radius;//[Offset: 0x8, Size: 0x4]
	float MoveTime;//[Offset: 0xc, Size: 0x4]
	float Pain;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: GameLevelManagerComponent.ActorComponent.Object
	delegate OnAppendEliteGroup;//[Offset: 0xbc, Size: 0xc]
	delegate OnRemoveEliteGroup;//[Offset: 0xc8, Size: 0xc]
	int EliteWarningItemIconID;//[Offset: 0xd4, Size: 0x4]
	<int,int> EliteWarningItemInstanceIDMap;//[Offset: 0xd8, Size: 0x3c]
	GameLevelDesc[] CurActiveGameLevelList;//[Offset: 0x114, Size: 0xc]
	LevelData[] CurActiveGameLevelDataList;//[Offset: 0x120, Size: 0xc]
	int TotalAliveMonsterNum;//[Offset: 0x12c, Size: 0x4]
	int BornLevelMonsterNum;//[Offset: 0x130, Size: 0x4]
	int BornShitMonsterNum;//[Offset: 0x134, Size: 0x4]
	<FString,SingleLevelObjArray> LevelObjs;//[Offset: 0x138, Size: 0x3c]
	AliveMonsterNum[] AliveMonsterNumList;//[Offset: 0x174, Size: 0xc]
	GameLevelDesc CurCompletedGameLevel;//[Offset: 0x180, Size: 0x14]
	float LevelBeginTime;//[Offset: 0x194, Size: 0x4]
	float LevelEndTime;//[Offset: 0x198, Size: 0x4]
	int GM_Diffcult;//[Offset: 0x19c, Size: 0x4]
	bool GM_UnLoadLevelData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	bool GM_UnLoadDynamicLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]
	float NavTickInterval;//[Offset: 0x1a4, Size: 0x4]
	LevelData[] LevelDataList;//[Offset: 0x1a8, Size: 0xc]
	LevelRelifePointInfo[] LevelRelifePointList;//[Offset: 0x1b4, Size: 0xc]
	FString MonsterTableName;//[Offset: 0x1c0, Size: 0xc]
	FString MonsterBPTableName;//[Offset: 0x1cc, Size: 0xc]
	FString MonsterSpecialStateTableName;//[Offset: 0x1d8, Size: 0xc]
	FString DecoratorTableName;//[Offset: 0x1e4, Size: 0xc]
	FString MonsterDropTableName;//[Offset: 0x1f0, Size: 0xc]
	int RelifePosOffsetZ;//[Offset: 0x1fc, Size: 0x4]
	Actor* SpawnPickup(int ID, out const Transform Transform, const int ContentNum);// 0x1387560
	Actor* SpawnMonster(int ID, out const Transform Transform, out const MonsterParams Params);// 0x1387320
	void RemoveRelifePoint(out GameLevelDesc LevelDesc);// 0x138723c
	void RegisterGameEvent();// 0x1387228
	void OnRep_CurGameLevelChanged();// 0x12e82e4
	void OnMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x1387108
	void OnGameStart();// 0x13870f4
	void OnGameEnd();// 0x13870e0
	void OnBotDied(Actor* Actor, Actor* Killer);// 0x1387024
	void OnBotBorn(Actor* Actor);// 0x1386fac
	void OnActorUniqueIdRemove(uint32 SId);// 0x1386f34
	void OnActorUniqueIdAdd(Actor* Actor, uint32 SId);// 0x1386e78
	void OnActorSpawn(Actor* Actor);// 0x1386e00
	void OnActorDespawn(Actor* Actor);// 0x1386d88
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);// 0x1386cbc
	bool KillUnitBySelf(Actor* TActor);// 0x1386c3c
	bool KillUnit(byte BotCat, int BotType, bool ForbidenReborn);// 0x1386b2c
	bool KillCategoryUnit(byte BotCat, bool ForbidenReborn);// 0x1386a60
	void InitUnit(Actor* TActor, byte Category);// 0x13869a4
	void InitRelifePoint(out GameLevelDesc LevelDesc, RelifePoint[] PVERelifePoints);// 0x1386754
	void InitLuaLevelActors();// 0x1386740
	void InitLevelAddObjs(out LevelData LevelData);// 0x1386638
	void HandleGameLevelEnd(out GameLevelDesc LevelDesc);// 0x1386560
	void HandleEnterLevel(out GameLevelDesc InLevelDesc, Actor* OffsetActor);// 0x1386440
	Actor* GetUnit(byte Category, int TypeID);// 0x138637c
	bool GetRelifeTrans(out const Vector NearVector, out Transform RelifeTrans);// 0x1386210
	LevelData[] GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, Vector NearPos);// 0x1385fd8
	bool GetNearPosLevel(Vector NearPos, int ChapterType, LevelData[] AvoidLevelList, out LevelData OutLevelData);// 0x1385c70
	LevelData GetLoadedLevelData(out GameLevelDesc LevelDesc);// 0x1385b6c
	int GetAliveMonsterNum(byte SourceType);// 0x1385aec
	LevelData GetActiveLevelDataByLevelDesc(out GameLevelDesc LevelDesc);// 0x13859e8
	void EndLevelAddObjs(out LevelData LevelData);// 0x13858e0
	void ChangeAliveMonsterNumList(byte SourceType, int Addition);// 0x1385824
	void BroadRemoveEliteGroup(int LevelId, Vector Pos);// 0x1385760
	void BroadAppendEliteGroup(int LevelId, Vector Pos);// 0x138569c
	void AdjustPosByOffsetActor(out LevelData LevelData, Transform OffsetTrans);// 0x13854a0
	void ActiveRelifePoint(out GameLevelDesc LevelDesc, int ID, bool ActivePoint);// 0x1385330

--------------------------------
Class: LevelData
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 0x14]
	FString[] TargetClassPaths;//[Offset: 0x14, Size: 0xc]
	FString LeveDirectorFilePath;//[Offset: 0x20, Size: 0xc]
	byte EndCondType;//[Offset: 0x2c, Size: 0x1]
	FString EndCondPar;//[Offset: 0x30, Size: 0xc]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int DiffcultPerc;//[Offset: 0x40, Size: 0x4]
	Vector[] TaskPointLocations;//[Offset: 0x44, Size: 0xc]
	RelifePoint[] PVERelifePointsInfo;//[Offset: 0x50, Size: 0xc]
	PVECircle[] PVECircleInfo;//[Offset: 0x5c, Size: 0xc]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x68, Size: 0xc]
	Vector Pos;//[Offset: 0x74, Size: 0xc]
	LevelObjets[] LevelAddObjs;//[Offset: 0x80, Size: 0xc]

--------------------------------
Class: RelifePoint
	int ID;//[Offset: 0x0, Size: 0x4]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Transform Trans;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: PVECircle
	int CircleID;//[Offset: 0x0, Size: 0x4]
	Vector2D TargetPos;//[Offset: 0x4, Size: 0x8]
	float Radius;//[Offset: 0xc, Size: 0x4]
	float MoveTime;//[Offset: 0x10, Size: 0x4]
	float Pain;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: LevelObjets
	class Object* Objects;//[Offset: 0x0, Size: 0x4]
	Transform Trans;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: SingleLevelObjArray
	Actor*[] LevelObjs;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: AliveMonsterNum
	int Num;//[Offset: 0x0, Size: 0x4]
	byte SourceType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: LevelRelifePointInfo
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 0x14]
	RelifePointInfo[] RelifePointList;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: RelifePointInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	Transform RelifeTrans;//[Offset: 0x10, Size: 0x30]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: MonsterParams

--------------------------------
Class: GameModeBaseComponent.ActorComponent.Object
	BattleRoyaleGameModeTeam* OwnerGameMode;//[Offset: 0xbc, Size: 0x4]
	bool bHasInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	void Update(float DeltaTime);// 0x12e0f6c
	void UnInit();// 0x12e0f50
	void Init();// 0x1367444

--------------------------------
Class: GameModeService_Original.GameModeServiceBase.Object

--------------------------------
Class: GameModeState_Challenge.GameModeState.Object

--------------------------------
Class: GameModeState_Training.GameModeState.Object
	float AboutToOverTime;//[Offset: 0x38, Size: 0x4]
	int AboutToOverMsgID;//[Offset: 0x40, Size: 0x4]
	float PostLoginMsgDelay;//[Offset: 0x48, Size: 0x4]
	int PostLoginMsgID;//[Offset: 0x4c, Size: 0x4]
	void BroadcastAboutToOver();// 0x13903a4

--------------------------------
Class: GameModeStateEmpty.GameModeState.Object

--------------------------------
Class: GameModeStateFightingWar.GameModeStateFightingTeam.GameModeStateFighting.GameModeState.Object
	float RespawnTime;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: GameModeStateFinishedWar.GameModeStateFinishedTeam.GameModeStateFinished.GameModeState.Object

--------------------------------
Class: GameModeStateReadyCorpsWar.GameModeStateReady.GameModeState.Object

--------------------------------
Class: GlobalLevelLogicActor.Actor.Object
	bool bEnableGroundWaterFogSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	FName GroundFogTag;//[Offset: 0x2d0, Size: 0x8]
	FName WaterFogTag;//[Offset: 0x2d8, Size: 0x8]
	float SeaLvel;//[Offset: 0x2e0, Size: 0x4]
	ExponentialHeightFog* GroundFog;//[Offset: 0x2e4, Size: 0x4]
	ExponentialHeightFog* WaterFog;//[Offset: 0x2e8, Size: 0x4]

--------------------------------
Class: GMCheatManager.CheatManager.Object
	Actor* PVETestMonster;//[Offset: 0x5c, Size: 0x4]
	void VehicleSpotLog();// 0x12e82e4
	void UseLocalVehicleAvatar();// 0x1399980
	void UnequitPlayerPawnWeapon(int idx);// 0x1399908
	void ToggleSpringMode();// 0x13998f4
	void ToggleSpringDebug();// 0x13998e0
	void ToggleShootVertify();// 0x13998cc
	void TogglePawnInfo();// 0x13998b8
	void TestWeaponAttachment(bool bEquip);// 0x1343e64
	void TestResetNetDriver();// 0x13998a4
	void TestLineTrace(float X, float Y, float Z);// 0x13997a4
	void TestGameplayDataRecord(int Uid, int RecordType);// 0x13996e8
	void TestConnectToNewNetDriver();// 0x13996d4
	void TeleportToPVEMonster(int ChapterID, int LevelId, int WaveID);// 0x13995d4
	void TeleportToMark();// 0x13995c0
	void TeleportTo(float X, float Y, float Z);// 0x13994c0
	void SwitchShowUI();// 0x13994ac
	void StatVehicle();// 0x1399498
	void StartMonsterAction(int ActionType, int ActionID);// 0x13993dc
	void StartMainTriggerClock();// 0x13993c8
	void SpawnMonsterArroundAllPlayer(int MonsterID, int Num, int MaxNum, float Radius, float Radius2, float Radius3, float Radius4);// 0x13991a8
	void SpawnLevelDirector();// 0x1399194
	void SpawnFakePlayer(int Num, bool bWithPet, bool bStopAI);// 0x1399080
	void SpawnDecal();// 0x139906c
	void SpawnBotForTest(int Num);// 0x1398ff4
	void ShowPet(bool Enable);// 0x1343e64
	void SetWeatherPlaySpeed(float FSpeed);// 0x1398f7c
	void SetViewFPP(bool IsFPP);// 0x1398efc
	void SetVehicleAvatar(int VehicleShapeType, int VehicleSkin);// 0x1398e40
	void SetTouchMoveLog(bool Enable);// 0x1343e64
	void SetTouchMoveDelay(int DelayFrame);// 0x1398dc8
	void SetStrongHoldTimes(float SpawnVehicleCD, float ActiveTimeToSet, float UnfreezeTimeToSet, float DoorOpenTime, float TarmacOpenTime);// 0x1398c38
	void SetSpringArm(byte armFlag);// 0x1398bc0
	void SetSkillDup(int count);// 0x1398b48
	void SetShootPveVertify(bool IsVertify);// 0x1398ac8
	void SetShootPveDebug(bool DebugShootPve);// 0x1398a48
	void SetShootDebugInfo(bool debugShootInfo);// 0x13989c8
	void SetRateScore(float RankScore);// 0x1396184
	void SetNeckUp(float UpAngle);// 0x1398950
	void SetNeckSpeed(float Speed);// 0x13988d8
	void SetNeckRight(float RightAngle);// 0x1398860
	void SetNeckMax(float MaxAngle);// 0x13987e8
	void SetNeckLeft(float LeftAngle);// 0x1398770
	void SetMonsterNumMultiple(int ChapterID, int LevelId, int DiffcultPerc);// 0x1398670
	void SetMonsterNB(bool MonsterNB);// 0x13985f0
	void SetMonsterHatred(float Hatred);// 0x1398578
	void SetMaxActiveAi(int Num);// 0x1398500
	void SetItemCallMonsterLimit(int WeatherID, int LimitItemCallNum, int LimitTotalNum);// 0x1398400
	void SetIsRender(bool IsRender);// 0x1398380
	void SetGVMemberID(int memberID);// 0x1398308
	void SetEquipmentAvatar(int EquipmentAvatarType, int EquipmentSkin);// 0x139824c
	void SetDynamicWeather(int WeatherType, int EventType);// 0x1398190
	void SetDeliver();// 0x139817c
	void SetDebugRegionType(int debugRegionType);// 0x1398104
	void SetControlRotation(float Yaw);// 0x139808c
	void SetCameraLagEnable(bool Enable);// 0x139800c
	void SetCacheInputNum(int CacheNum);// 0x1397f94
	void SetAnimEnable(bool Enable);// 0x1397f14
	void SetAnimDebugInfo(bool debugAnimInfo);// 0x1397e94
	void SetAnimDebugGroup(bool debugAnimGroup);// 0x1397e14
	void SetAllMonsterHp(int HP);// 0x1396184
	void RemoveBuffBySkill(int SkillID, int IsPlayer);// 0x1397d58
	void RemoveBuff(int BuffID, int IsPlayer);// 0x1397c9c
	void ReloadPVETable();// 0x1397c88
	void RefreshReconnectUI();// 0x12e82e4
	void PVESpawnMonsterByPos(int MonsterID, int Num, float Radius, float PosX, float PosY, float PosZ);// 0x1397ab0
	void PVESpawnMonsterByDistance(int MonsterID, int Num, float Radius, float FrontDist);// 0x1397968
	void PVESpawnMonster(int MonsterID, bool StopAI);// 0x13978a4
	void PVESpawnItemCallMonster(int MonsterID, int Num, int Radius);// 0x13977a4
	void PVESetTestMonster(Actor* InMonster);// 0x139772c
	void PVEResetMonsterTable();// 0x1397718
	void PVEPrintAllAnim();// 0x1397704
	void PVEPlayerTriggerSkill(int SkillID, int EventType);// 0x1397648
	void PVEPlayerStopSkill(int SkillID, int StopReason);// 0x139758c
	void PVEMonsterTriggerSkill(int SkillID, int EventType);// 0x13974d0
	void PVEMonsterStopSkill(int SkillID, int StopReason);// 0x1397414
	void PVEMonsterRemoveBuffByID(int BuffID, int LayerCount, int CauserSkillID, bool CauseByPlayer);// 0x13972c4
	void PVEMonsterAddBuffByID(int BuffID, int LayerCount, int CauserSkillID, bool CauseByPlayer);// 0x1397174
	void PVECloseMonsterLimit(bool bCloseMonsterLimit);// 0x13970f4
	void PrintWeaponAllState();// 0x13970e0
	void PrintPool();// 0x13970cc
	void PrintMainCharAllAvatar();// 0x13970b8
	void PrintAllPlayerPawnCollisions();// 0x13970a4
	void PrintAllControlledPlayerAimmingConfig();// 0x1397090
	void PrintAllAnim();// 0x139707c
	void PauseAnim(bool bPause);// 0x1396ffc
	void OpenHitTest();// 0x1396fe8
	void KillMonsterCalledByMe(int KillNum);// 0x1396f70
	void KillAllPVEBot();// 0x1396f5c
	void ItemSpotLog();// 0x12e82e4
	void GotoSpectatingDirectly();// 0x1396f48
	void GotoSpectating();// 0x1396f34
	void GotoSpecificWeather(int WeatherIdx);// 0x1396ebc
	void GMUseGunCollision(bool bIsUse);// 0x1396e3c
	void GMSuicide();// 0x1396e28
	void GMStopAI(bool bStop, uint32 InPlayerKey);// 0x1396d60
	void GMSpeedUp();// 0x1396d4c
	void GMSpawnSocialLandPlayerAIAroundMe(uint32 AINum, float fRadius, bool bActiveAI, bool IsAIInvincible, bool bWithPet, bool bWithEqui);// 0x1396b50
	void GMSpawnPlayerAIAroundPoint(uint32 iNum, float X, float Y, float Z, float fRadius, bool bActiveAI, bool IsAIInvincible, bool bWithPet);// 0x13968d0
	void GMSpawnPlayerAIAroundMe(uint32 iNum, float fRadius, bool bActiveAI, bool IsAIInvincible, bool bWithPet);// 0x1396724
	void GMSetViewYawLimit(float MinLimit, float MaxLimit);// 0x1396668
	void GMSetSpeed(float WalkSpeed);// 0x13965f0
	void GMSetServerLevelLoadingMode(bool bNewLoadAll);// 0x1343e64
	void GMSetPawnNull(bool bIsNull);// 0x1396570
	void GMSetJoystickEightDirection(bool IsNeedEightDirection);// 0x13964f0
	void GMSetJoystickActivatedRange(bool IsNeedActivatedRange, float ActivatedRange);// 0x1396428
	void GMSetHealth(float Val);// 0x13963b0
	void GMSetCullDistance(bool bCullDistance);// 0x1396330
	void GMSetCircleTime(float CDTime, float LastTime);// 0x1396274
	void GMRevivePlayer();// 0x12e82e4
	void GMRainCount(float count);// 0x13961fc
	void GMIOSFrameRateLock(int FrameRateLock);// 0x1396184
	void GMInvincible(bool IsInvincible);// 0x1396104
	void GMGatherAllPlayerAIAroundMe(float fRadius, bool bActiveAI, bool IsAIInvincible, bool bWithPet);// 0x1395f9c
	void GMFollow(FString TargetName);// 0x1395e44
	void GMDrawDebugSphere2(float X, float Y, float Z, float Radius, int Segments, float LifeTime);// 0x1395c6c
	void GMDrawDebugSphere(float Radius, int Segments, float LifeTime);// 0x1395b6c
	void GMDecreaseHealth();// 0x1395b58
	void GMAddYawTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);// 0x1395a40
	void GMAddYaw(float Val, int AddType);// 0x1395984
	void GMActiveRenderDynamicStyle(bool bSet, int Type);// 0x13958bc
	void GetGVMemberID(int memberID);// 0x1395844
	void GetGold();// 0x1395830
	void GeneratePVPBoss(int BossID, int BossIndex);// 0x1395774
	void GenerateMonsterWave(int ChapterID, int LevelId, int WaveID);// 0x1395674
	void ForceStopDynamicWeatherChange();// 0x1395660
	void ForceStartNextDynamicWeatherChange();// 0x139564c
	void ForceGC();// 0x1395638
	void ForceEndInputForAppWillDeactivate();// 0x1395624
	void FireSpawnAirplane();// 0x1395610
	void FireReviveTeammate(int RespawnStartID, bool bJump);// 0x139554c
	void FallKill(int Type);// 0x13954d4
	void EquipAllPlayers();// 0x13954c0
	void EnterPVELevel(int ChapterID, int LevelId);// 0x1395404
	void EnterPawnState(enum InState, bool IsEnter);// 0x1395340
	void EnablePlayerPawnCollision(int idx, bool IsEnable);// 0x139527c
	void DumpVehicleAnimInstance();// 0x12e82e4
	void DumpVehicle();// 0x12e82e4
	void DumpPlayerController();// 0x12e82e4
	void DumpObservingCharacter();// 0x12e82e4
	void DumpObjectProperties(FString ObjectName);// 0x13951c0
	void DumpDSNetConsiderList();// 0x13951ac
	void DumpCharacterAnimInstance();// 0x12e82e4
	void DumpCharacter();// 0x12e82e4
	void DoMonsterExit(int FuncType, int RemainNum);// 0x13950f0
	void DeleteVehicleAdvanceAvatar_Style(int VehicleSkin, int VehicleStyle);// 0x1395034
	void DeleteVehicleAdvanceAvatar(int VehicleSkin, int ModelID);// 0x1394f78
	void DebugStopEMote(int Index);// 0x1394f00
	void DebugStopCapture();// 0x1394eec
	void DebugStartEMote(int Index);// 0x1394e74
	void DebugSpringArm(bool bDebug);// 0x1394df4
	void DebugSpeed();// 0x1394de0
	void DebugSetChangeWearCoolDownTime(float Time);// 0x1394d68
	void DebugRoomCustomParams(int FirstCircleDelayTime, int FirstCircleAppearTime, int FirstWhiteCircleRadiusMultiplicator, int BlueCircleDamageMultiplicator);// 0x1394c20
	void DebugOBNearPlayerList();// 0x1394c0c
	void DebugLocation();// 0x1394bf8
	void DebugFPPAnim();// 0x1394be4
	void DebugFixedParams();// 0x1394bd0
	void DebugChangeWearIndex(int Index);// 0x1394b58
	void DebugCamera();// 0x1394b44
	void CloseItemDrop(bool IsCloseItemDrop);// 0x1394ac4
	void ClientSetSpeed(float Times);// 0x1394a4c
	void ChangeViewTarget();// 0x1394a38
	void ChangeMonsterWalkMode(int Mode);// 0x13949c0
	void ChangeBattleAvatar(int HeadAvatarID, int HairAvatarID, int InGender, int PutOffAvatar);// 0x1394878
	void ChangeAllPlayersAvatar(int InSlotType, int InItemID);// 0x13947bc
	void CastUIMsg(FString Msg, FString module);// 0x139467c
	void CallOnReconnect();// 0x1394668
	void CallLuaTableFunction(FString tableName, FString FunctionName);// 0x1394528
	void CallGameModeLuaFunction(out FString FunctionName);// 0x139445c
	void BuildingCollide(bool InCollide);// 0x1343e64
	void AutoSetPlayerLocation(bool bEnable);// 0x13943dc
	void AnimDebugUseSkipMapForDistanceFactor(bool bUseLodMap);// 0x139435c
	void AnimDebugUseLodMap(bool bUseLodMap);// 0x13942dc
	void AnimDebugUpdateFlag(int Type);// 0x1394264
	void AnimDebugNonRenderedRate(int UpdateRate);// 0x13941ec
	void AnimDebugNonRenderedMinDist(float minDist);// 0x1394174
	void AnimDebugNonRenderedMaxDist(float MaxDist);// 0x13940fc
	void AnimDebugLodSkipMap(LODToSkipFrame[] SkipMap);// 0x1393fa4
	void AnimDebugEnable(bool bEnable);// 0x1393f24
	void AnimDebugBaseDistFactor(float[] BaseDistFactor);// 0x1393dcc
	void AILog();// 0x1393db8
	void AddWeaponAvatar(int WeaponSkin);// 0x1393d40
	void AddVehicleAvatar(int VehicleSkin);// 0x1393cc8
	void AddVehicleAdvanceAvatar_Style(int VehicleSkin, int VehicleStyle);// 0x1393c0c
	void AddVehicleAdvanceAvatar(int VehicleSkin, int ModelID, int ColorID, int PatternID, int ParticleID);// 0x1393a80
	void AddScore(int Score);// 0x1393a08
	void AddItemToDownloadlist(int ItemID);// 0x1393990
	void AddBuffBySkill(int SkillID, int IsPlayer);// 0x13938d4
	void AddBuff(int BuffID, int IsPlayer);// 0x1393818
	void ActiveLevelNearBornPos(int ActiveChapterType, int RandomNum, int ActiveNum, int ActiveWaveID, int NumLimit);// 0x139368c

--------------------------------
Class: GMDataSource_AIProbe.GMDataSource.Object
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	class AIController* AIControllerClass;//[Offset: 0x20, Size: 0x4]
	bool IsRespawnAIPosWithTeam();// 0x139d8ac
	bool IsImmediatelySpawnAI();// 0x139d890
	class AIController GetAIControllerClass();// 0x139d874

--------------------------------
Class: GMDataSource_AirDrop.GMDataSource.Object
	int AirdropId;//[Offset: 0x20, Size: 0x4]
	AirDropPlaneParams AirDropPlaneParams;//[Offset: 0x24, Size: 0x1c]
	AirDropPlaneParams SuperAirDropPlaneParams;//[Offset: 0x40, Size: 0x1c]
	AirDropPlaneParams VehicleAirDropPlaneParams;//[Offset: 0x5c, Size: 0x1c]
	AirDropPlaneParams ZombieAirDropPlaneParams;//[Offset: 0x78, Size: 0x1c]
	int ZombieAirDropTargetSourceID;//[Offset: 0x94, Size: 0x4]
	class Actor* BossWarningActorClass;//[Offset: 0x98, Size: 0x28]
	AirDropConfig[] AirDropConfigs;//[Offset: 0xc0, Size: 0xc]
	bool bCanUseDelayDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	class AirDropPlane* AirDropPlaneBluePrint;//[Offset: 0xd0, Size: 0x28]
	class AirDropBoxActor* AirDropBoxBlueprint;//[Offset: 0xf8, Size: 0x28]
	FlareGunAirDropRandomParams SuperAirDropRandomParams;//[Offset: 0x120, Size: 0xc]
	FlareGunAirDropRandomParams VehicleAirDropRandomParams;//[Offset: 0x12c, Size: 0xc]
	byte[] SpotType;//[Offset: 0x138, Size: 0xc]
	float StuffBoxToWorldBoundaryMinDis;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: GMDataSource_AirRoute.GMDataSource.Object
	GameModeParam CurPlaneRouteData;//[Offset: 0x20, Size: 0x50]
	FString PlaneClassPath;//[Offset: 0x70, Size: 0xc]
	FString PlaneBTPath;//[Offset: 0x7c, Size: 0xc]
	float MaxAIAllowJumpRadius;//[Offset: 0x88, Size: 0x4]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x8c, Size: 0xc]
	float GetMaxAIAllowJumpRadius();// 0x139dfa0
	GameModeParam GetCurPlaneRouteData();// 0x139deec

--------------------------------
Class: GMDataSource_DynamicObject.GMDataSource.Object
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0x20, Size: 0x4]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x24, Size: 0x4]
	Actor*[] DynamicTriggers;//[Offset: 0x28, Size: 0xc]
	UAELevelDirector* LevelDirector;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: GMDataSource_GlobalSettings.GMDataSource.Object
	bool EnableOverrideGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	float OverrideGravity;//[Offset: 0x20, Size: 0x4]
	float FallingDamageModifier;//[Offset: 0x24, Size: 0x4]
	bool bSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: GMDataSource_Navigation.GMDataSource.Object
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bIsOpenNavlinkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	FString NavDataPath;//[Offset: 0x20, Size: 0xc]
	FString NavLinkDataPath;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: GMDataSource_PlayerStart.GMDataSource.Object
	STExtraPlayerStart*[] CachedPlayerStarts;//[Offset: 0x20, Size: 0xc]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0x2c, Size: 0x3c]
	<int,BornPlayerStartData> BornIDToActivityPlayerStartsMap;//[Offset: 0x68, Size: 0x3c]
	STExtraPlayerStart*[] GetPlayerStarts();// 0x139e8a8
	<int,BornPlayerStartData> GetBornIDToPlayerStartsMap();// 0x139e770
	<int,BornPlayerStartData> GetBornIDToActivityPlayerStartsMap();// 0x139e638

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	float ResetOccupiedMarkTime;//[Offset: 0x2ec, Size: 0x4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	int PlayerBornPointID;//[Offset: 0x2f4, Size: 0x4]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	int TeamID;//[Offset: 0x2fc, Size: 0x4]
	void SetMarkOccupied();// 0x14cd6a0
	bool IsMarkOccupied();// 0x14cd678

--------------------------------
Class: BornPlayerStartData
	int BornPointID;//[Offset: 0x0, Size: 0x4]
	STExtraPlayerStart*[] PlayerStarts;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: GMDataSource_Respawn.GMDataSource.Object
	delegate OnRespawnRemainTimeChangeDelegate;//[Offset: 0x20, Size: 0xc]
	float DefaultPlayerRespawnTime;//[Offset: 0x2c, Size: 0x4]
	float DefaultRespawnInvincibleTime;//[Offset: 0x30, Size: 0x4]
	<uint32,TimerHandle> PlayerRespawnTimerMap;//[Offset: 0x34, Size: 0x3c]

--------------------------------
Class: GMDataSource_Team.GMDataSource.Object
	<int,TeamInfo> TeamMap;//[Offset: 0x20, Size: 0x3c]
	int MaxTeamSize;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: TeamInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]
	STExtraPlayerState*[] TeamMembers;//[Offset: 0x4, Size: 0xc]
	int TotalKills;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: GroundFlagWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	Vector4 Limit;//[Offset: 0x300, Size: 0x10]
	Vector2D UIOffset;//[Offset: 0x310, Size: 0x8]
	float[] flagDuration;//[Offset: 0x318, Size: 0xc]
	int rightPlus;//[Offset: 0x324, Size: 0x4]
	float opacityFactor;//[Offset: 0x328, Size: 0x4]
	CanvasPanelSlot* CanvasPanel;//[Offset: 0x32c, Size: 0x4]
	TextBlock* TeammateDistText;//[Offset: 0x330, Size: 0x4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x334, Size: 0x4]
	void SetWorldPos(out const Vector Loc);// 0x13a04f0

--------------------------------
Class: PickupGroupSource.Object
	bool bDropByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: GroupBackpackComp.ActorComponent.Object
	SingleBackpackComp*[] SingleList;//[Offset: 0xdc, Size: 0xc]
	static void SpawnItemForBackpack(Pawn* Owner, float Capacity, out const PickUpItemData[] ItemList, FName BoxName);// 0x13a0948

--------------------------------
Class: SingleBackpackComp.ActorComponent.Object
	PickUpItemData[] ItemList;//[Offset: 0xbc, Size: 0xc]
	float Capacity;//[Offset: 0xc8, Size: 0x4]
	byte scheme;//[Offset: 0xcc, Size: 0x1]
	GroupBackpackComp* GroupBack;//[Offset: 0xd0, Size: 0x4]
	void RemoveGroupItem(const ItemDefineID ItemID);// 0x141dc58
	void OnRep_Scheme();// 0x12e82e4
	void OnRep_ItemList();// 0x141dc44
	void OnRep_Capacity();// 0x141dc44
	void AddGroupItem(const ItemDefineID ItemID, int count, const BattleItemAdditionalData[] AdditionalDataList);// 0x141da58

--------------------------------
Class: GSListener_ClickBackpackBtn.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_ClickEntireMapTriggerBtn.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_ClickRolewearBtn.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_ClickShowTagVehileSeatList.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_ClickTurnplateQuickMsgBtn.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_FireBtnHitted.STNewbieGuideSuccessListenerBase.Object
	bool bIsListenRightFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: GSListener_GunReload.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_IsInControllerState.STNewbieGuideSuccessListenerBase.Object
	enum CheckControllerState;//[Offset: 0x29, Size: 0x1]

--------------------------------
Class: GSListener_JoystickActive.STNewbieGuideSuccessListenerBase.Object
	bool CheckX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float XValueThreshold;//[Offset: 0x2c, Size: 0x4]
	bool CheckY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float YValueThreshold;//[Offset: 0x34, Size: 0x4]
	void ReceiveJoystickInput(Vector2D JSInput, Vector2D Size);// 0x13a1b20

--------------------------------
Class: GSListener_PickUpExpand.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_PlayerClickDriveBtn.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_PlayerEnterSafeZone.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_PlayerExpandDeadBox.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_PlayerLeaveKillZone.STNewbieGuideSuccessListenerBase.Object

--------------------------------
Class: GSListener_PlayerUseRecoverItem.STNewbieGuideSuccessListenerBase.Object
	void OnPlayerUseRecoverItem();// 0x13a268c

--------------------------------
Class: GSListener_ShakeCamera.STNewbieGuideSuccessListenerBase.Object
	void ReceiveCameraShake();// 0x13a268c

--------------------------------
Class: GSListener_SwitchToMainWeapon.STNewbieGuideSuccessListenerBase.Object
	byte CheckWeaponSlot;//[Offset: 0x29, Size: 0x1]
	void OnCurUsingWeaponChange(byte targetSlot);// 0x13a2c70

--------------------------------
Class: HealthControlComponent.ActorComponent.Object
	float RecoverDelayWhenLeaveFightState;//[Offset: 0xbc, Size: 0x4]
	float SeriousWoundThreshold;//[Offset: 0xc0, Size: 0x4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xc4, Size: 0x4]
	FName HealthRecoverBuffName;//[Offset: 0xc8, Size: 0x8]
	FName SeriousWoundApperanceBuffName;//[Offset: 0xd0, Size: 0x8]
	FName PlayerTakeDamageBuffName;//[Offset: 0xd8, Size: 0x8]
	AkAudioEvent* LowHealthWarningSound;//[Offset: 0xe0, Size: 0x4]
	enum[] FightState;//[Offset: 0xe4, Size: 0xc]
	void HandlePlayerTakeDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x13a35d4
	void HandlePlayerStateChanged(enum NewState);// 0x13a355c
	STExtraBaseCharacter* GetOwnerPlayerPawn();// 0x13a3484
	STExtraPlayerController* GetOwnerPlayerController();// 0x13a33fc

--------------------------------
Class: HeavyWeaponBox.MonsterTreasureBox.UAEHouseActor.UAENetActor.Actor.Object

--------------------------------
Class: IceWorldSceneActor.ActivityInteractiveActor.ActivityActorBase.Actor.Object
	int Progress;//[Offset: 0x368, Size: 0x4]
	TimelineComponent* TimelineComp;//[Offset: 0x36c, Size: 0x4]
	bool IsMoveStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	void OnRep_Progress();// 0x13a7984

--------------------------------
Class: IdeaFence.FastMergeableActor.Actor.Object
	SplineComponent* SplineComponent;//[Offset: 0x2c8, Size: 0x4]
	enum BeginSelector;//[Offset: 0x2cc, Size: 0x1]
	StaticMesh* BeginMesh1;//[Offset: 0x2d0, Size: 0x4]
	StaticMesh* BeginMesh2;//[Offset: 0x2d4, Size: 0x4]
	StaticMesh* BeginMesh3;//[Offset: 0x2d8, Size: 0x4]
	StaticMesh* BeginMesh4;//[Offset: 0x2dc, Size: 0x4]
	enum EndSelector;//[Offset: 0x2e0, Size: 0x1]
	StaticMesh* EndMesh1;//[Offset: 0x2e4, Size: 0x4]
	StaticMesh* EndMesh2;//[Offset: 0x2e8, Size: 0x4]
	StaticMesh* EndMesh3;//[Offset: 0x2ec, Size: 0x4]
	StaticMesh* EndMesh4;//[Offset: 0x2f0, Size: 0x4]
	bool bUseRandomForMiddle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool bUseMiddleSegmentsInOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	float UnitLengthForMiddle;//[Offset: 0x2f8, Size: 0x4]
	float UnitSpacingForMiddle;//[Offset: 0x2fc, Size: 0x4]
	float PivotOffsetForMiddle;//[Offset: 0x300, Size: 0x4]
	RandomStream RandomStreamForMiddle;//[Offset: 0x304, Size: 0x8]
	StaticMesh* MiddleMesh1;//[Offset: 0x30c, Size: 0x4]
	StaticMesh* MiddleMesh2;//[Offset: 0x310, Size: 0x4]
	StaticMesh* MiddleMesh3;//[Offset: 0x314, Size: 0x4]
	StaticMesh* MiddleMesh4;//[Offset: 0x318, Size: 0x4]
	CollisionProfileName FenceCollisionProfile;//[Offset: 0x320, Size: 0x8]
	SplineComponent* GetSplineComponent();// 0x13a86cc

--------------------------------
Class: IdeaStaticFence.IdeaFence.FastMergeableActor.Actor.Object

--------------------------------
Class: IdleWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: InactiveWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object

--------------------------------
Class: InfectedAreaActor.Actor.Object
	InfectedArea AreaData;//[Offset: 0x2c8, Size: 0x1c]

--------------------------------
Class: InfectedArea
	int AreaID;//[Offset: 0x0, Size: 0x4]
	Vector AreaPosition;//[Offset: 0x4, Size: 0xc]
	float Radius;//[Offset: 0x10, Size: 0x4]
	int Level;//[Offset: 0x14, Size: 0x4]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: InfectedAreaComponent.ActorComponent.Object
	delegate InfectedAreaChanged;//[Offset: 0xbc, Size: 0xc]
	HardLevelRange EasyLevelRange;//[Offset: 0xc8, Size: 0x8]
	HardLevelRange NormalLevelRange;//[Offset: 0xd0, Size: 0x8]
	HardLevelRange HardLevelRange;//[Offset: 0xd8, Size: 0x8]
	InfectedArea[] InfectedAreaArray;//[Offset: 0xe0, Size: 0xc]
	void ShowWarning(int ID);// 0x13a9390
	void SetAreaLevels(int LevelId);// 0x13a9318
	void RPC_Client_ShowWarning();// 0x13a92bc
	void OnRep_InfectedAreaDatas();// 0x13a92a8
	bool IsInArea(out InfectedArea Area, out const Vector Location);// 0x13a91b0
	void GenerateAreaLevels();// 0x13a919c
	void AddInfectedAreaData(InfectedArea AreaData);// 0x13a90f0
	void ActiveInfectedArea(int AreaID);// 0x13a9078

--------------------------------
Class: HardLevelRange
	int Min;//[Offset: 0x0, Size: 0x4]
	int Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: InfectedAreaDatas.Actor.Object
	InfectedArea[] InfectedAreaArray;//[Offset: 0x2c8, Size: 0xc]

--------------------------------
Class: IngameArmedVehicleUI.UAEUserWidget.UserWidget.Widget.Visual.Object
	VehicleShootWeapon* Weapon;//[Offset: 0x2ec, Size: 0x4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	bool bShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]
	MaterialInstanceDynamic* AngleMatInstance;//[Offset: 0x2f4, Size: 0x4]
	int AngleMatParamIndex;//[Offset: 0x2f8, Size: 0x4]
	FName AngleMatParameterName;//[Offset: 0x300, Size: 0x8]
	TextBlock* AngleText;//[Offset: 0x308, Size: 0x4]
	bool bGotAngleMatParamIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	float ScalePercent;//[Offset: 0x310, Size: 0x4]
	float Angle;//[Offset: 0x314, Size: 0x4]
	float CompassMinAngle;//[Offset: 0x318, Size: 0x4]
	float CompassMaxAngle;//[Offset: 0x31c, Size: 0x4]
	float CompassMatMinPercent;//[Offset: 0x320, Size: 0x4]
	float CompassMatMaxPercent;//[Offset: 0x324, Size: 0x4]
	bool bEnableShowInterferenceLineByScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bShowInterference;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	FString InterferenceLineAppearanceName;//[Offset: 0x32c, Size: 0xc]
	FString CompassStrFormat;//[Offset: 0x338, Size: 0xc]
	void UpdateCompassAngleAndMatScalePercent(float InDeltaTime);// 0x13a9b00
	void ShowInterferenceLineByScreenAppearance(bool bShow);// 0x13a9a80
	void InitCompassAngleMat(MaterialInstanceDynamic* InCompassMat);// 0x13a9a08

--------------------------------
Class: IngameEnemyPanelWidget.UserWidget.Widget.Visual.Object
	void UpdateEnemyLocations();// 0x13aa664
	void setEnemyHitConfig(HitEnemyConfig Config);// 0x13aa5d4
	static void ResetEnemyHitData();// 0x13aa5c0
	static HitEnemyDataLocal[] GetEnemyHitData();// 0x13aa470
	void AlertEnemyNearDeath();// 0x13aa454
	void AlertEnemyHitted();// 0x13aa438
	static void AddEnemyHitData(HitEnemyData HitData, float HitTime, FString FromPlayerName);// 0x13aa230

--------------------------------
Class: HitEnemyConfig
	float HitLifeTime;//[Offset: 0x0, Size: 0x4]
	float NearDeathLifeTime;//[Offset: 0x4, Size: 0x4]
	int ValidDistanceRadius;//[Offset: 0x8, Size: 0x4]
	int VisionRadius;//[Offset: 0xc, Size: 0x4]
	int MarkRadius;//[Offset: 0x10, Size: 0x4]
	int MarkNearDeathRadius;//[Offset: 0x14, Size: 0x4]
	bool bShowSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bHitSameEnemyOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: HitEnemyDataLocal
	HitEnemyData RemoteData;//[Offset: 0x0, Size: 0x14]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float HitTime;//[Offset: 0x18, Size: 0x4]
	FString FromPlayerName;//[Offset: 0x1c, Size: 0xc]
	bool bIsNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InGameReconnectingInterface.Interface.Object
	void RetriveDataAfterReconnecting();// 0x13aaadc
	void RecoverStatusAfterReconnecting();// 0x13aaac0

--------------------------------
Class: InterpToMovementComponent2.InterpToMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnInterp2ToStopDelegate;//[Offset: 0x170, Size: 0xc]
	delegate OnMoveDeltaComputedDelegate;//[Offset: 0x17c, Size: 0xc]
	bool bReverseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]
	InterpToMovementComponent2ReplicatedData ReplicatedData;//[Offset: 0x18c, Size: 0x10]
	void Restart(float InitialDirection, float InTime, bool bInWaiting, bool bInStopped);// 0x13ab10c
	void OnRep_ReplicatedData();// 0x13ab0f8
	void OnMoveDeltaComputedDelegate__DelegateSignature(const InterpToMovementComponent2* Sender, float Time, out const Vector Delta);// 0x1c01fa0
	void OnInterpToMovementComponentInterpToStop(out const HitResult ImpactResult, float Time);// 0x13ab018
	void OnInterp2ToStopDelegate__DelegateSignature(InterpToMovementComponent2* Sender, out const HitResult ImpactResult, float Time);// 0x1c01fa0
	bool IsWaiting();// 0x13aaff0
	bool IsStopped();// 0x13aafc8
	float GetCurrentTime();// 0x13aafa0

--------------------------------
Class: InterpToMovementComponent2ReplicatedData
	enum ReplicatedBehaviourType;//[Offset: 0x0, Size: 0x1]
	float ReplicatedCurrentTime;//[Offset: 0x4, Size: 0x4]
	float ReplicatedTimeMultiplier;//[Offset: 0x8, Size: 0x4]
	float ReplicatedCurrentDirection;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: InterpToMovementComponent3.InterpToMovementComponent2.InterpToMovementComponent.MovementComponent.ActorComponent.Object
	Interp3ControlPoint[] Interp3ControlPoints;//[Offset: 0x19c, Size: 0xc]
	void FinaliseInterp3ControlPoints();// 0x13ab79c

--------------------------------
Class: Interp3ControlPoint.InterpControlPoint
	Rotator RotationControlPoint;//[Offset: 0x1c, Size: 0xc]
	float RotationRadius;//[Offset: 0x28, Size: 0x4]
	enum Interp3Method;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: ItemDropMgrComponent.ActorComponent.Object
	bool GM_CloseItemDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int GM_SpawnItemFrame;//[Offset: 0xc0, Size: 0x4]
	class PlayerTombBox* DefaultTomb;//[Offset: 0xc4, Size: 0x4]
	FString DropItemRuleTableName;//[Offset: 0xc8, Size: 0xc]
	int GridStep;//[Offset: 0xd4, Size: 0x4]
	WaitDropData[] WaitDropList;//[Offset: 0xd8, Size: 0xc]
	int MaxRandomWeight;//[Offset: 0xe4, Size: 0x4]
	float RadiusStep;//[Offset: 0xe8, Size: 0x4]
	float ZBias;//[Offset: 0xec, Size: 0x4]
	float LookUpDistance;//[Offset: 0xf0, Size: 0x4]
	UAEDataTable* DropRuleTable;//[Offset: 0xf4, Size: 0x4]
	Property*[] DropRuleTablePropertys;//[Offset: 0xf8, Size: 0xc]
	int CurSpawnItemFrame;//[Offset: 0x104, Size: 0x4]
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x13aebd4
	int PickItemByUnionRandom(int WeightCount, out RandomDropData[] WeightMap);// 0x13aeadc
	int PickItemByIndependentRandom(int Weight);// 0x13aea5c
	void NavMeshDrop(out const DropToGroundData[] PropDatas, Transform PawnTrans, bool bDropedByPlayer);// 0x13ae870
	void HandleActorDie(Actor* Actor, Actor* Killer);// 0x13ae7b4
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x13ae694
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x13ae5fc
	void GetWeaponBulletNum(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int BulletID, out int BulletClipNum, out int BulletPackageNum, out int BulletClipMaxNum);// 0x13ae3e0
	void GetDropIdList(out int[] DropIdList, MonsterSingleDropIds[] DropIds);// 0x13ae13c
	void GetBulletDropIdList(out int[] DropIdList, out int[] DropParams, MonsterSingleBulletDropIds[] BulletDropIds);// 0x13adee4
	void DropToTombBox(out const PickUpItemData[] PropData, out WaitDropData DropData);// 0x13add5c
	void DropToTarget(ItemDefineID DefineID, int count, BackpackComponent* Backpack);// 0x13adc4c
	void DropToGround(out const DropToGroundData PropData, Transform WrapperTrans, bool bDropedByPlayer);// 0x13ad9b0
	void DropOutItems(out WaitDropData DropData, out DropPropData[] DropItems);// 0x13ad824
	void CheckNeedDropItem();// 0x13ad810
	void CheckAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x13ad6bc
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x13ad5c8
	void BulletDropStrategy(out int[] BulletIdList, out int[] BulletIdNum, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList, out int[] BulletClipMaxNum);// 0x13ad204
	void BulletDropById(int BulletID, out int[] BulletDropPlanIDList, out int[] DropIdList);// 0x13ad05c
	void AddToWaitDropList(out const WaitDropData AddWaitDropData);// 0x13acf4c

--------------------------------
Class: WaitDropData
	STExtraBaseCharacter* KillerPawn;//[Offset: 0x0, Size: 0x4]
	FString DeadPawnDesc;//[Offset: 0x4, Size: 0xc]
	Vector DropGroundPoint;//[Offset: 0x10, Size: 0xc]
	class PlayerTombBox* DropTomb;//[Offset: 0x1c, Size: 0x4]
	int[] DropPlanIDList;//[Offset: 0x20, Size: 0xc]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: RandomDropData
	int[] ItemIdList;//[Offset: 0x0, Size: 0xc]
	int RuleID;//[Offset: 0xc, Size: 0x4]
	int[] ItemCountList;//[Offset: 0x10, Size: 0xc]
	int Weight;//[Offset: 0x1c, Size: 0x4]
	int DropMode;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: DropToGroundData
	PickUpItemData PickUpItemData;//[Offset: 0x0, Size: 0x30]
	int ItemID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ItemGeneratorBase.Actor.Object
	CurveFloat* UpdateOverlapCurve;//[Offset: 0x2c8, Size: 0x4]
	float ShowWrapperMeshDistance;//[Offset: 0x2cc, Size: 0x4]
	float IsGenerateOverlapEventsForceUpdateTime;//[Offset: 0x2d0, Size: 0x4]
	Vector BoxOverlapCheckExtent;//[Offset: 0x2d4, Size: 0xc]
	bool bShowCheckPropsMeshVisibleBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	float ShowCheckPropsMeshVisibleBoxTime;//[Offset: 0x2e4, Size: 0x4]
	STExtraPlayerController* PlayerController;//[Offset: 0x2f8, Size: 0x4]
	void ForceUpdate();// 0x13af480

--------------------------------
Class: LandScapeLODByHeight.ActorComponent.Object
	HeightLOD[] heightLODMapping;//[Offset: 0xbc, Size: 0xc]
	int CheckInternal;//[Offset: 0xc8, Size: 0x4]
	float CurrentGroundHeight;//[Offset: 0xcc, Size: 0x4]
	PlayerController* Player;//[Offset: 0xd8, Size: 0x4]
	void Stop();// 0x13b3494
	void Start();// 0x13b3480
	void MappingLODByHeight();// 0x13b346c

--------------------------------
Class: HeightLOD
	float Height;//[Offset: 0x0, Size: 0x4]
	int LOD;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LensFlareActor.CameraObserverActor.Actor.Object
	bool EnableSun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	float SunSize;//[Offset: 0x2cc, Size: 0x4]
	LinearColor SunColor;//[Offset: 0x2d0, Size: 0x10]
	float WorldRadius;//[Offset: 0x2e0, Size: 0x4]
	Vector WorldOrigin;//[Offset: 0x2e4, Size: 0xc]
	Vector2D SunUV0;//[Offset: 0x2f0, Size: 0x8]
	Vector2D SunUVSize;//[Offset: 0x2f8, Size: 0x8]
	MaterialInterface* SunMaterial;//[Offset: 0x300, Size: 0x4]
	uint32 SunTranslucentSortPriority;//[Offset: 0x304, Size: 0x4]
	byte SunDetailMode;//[Offset: 0x308, Size: 0x1]
	bool EnableHalo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	float HaloSize;//[Offset: 0x30c, Size: 0x4]
	LinearColor HaloColor;//[Offset: 0x310, Size: 0x10]
	Vector2D HaloUV0;//[Offset: 0x320, Size: 0x8]
	Vector2D HaloUVSize;//[Offset: 0x328, Size: 0x8]
	MaterialInterface* HaloMaterial;//[Offset: 0x330, Size: 0x4]
	uint32 HaloTranslucentSortPriority;//[Offset: 0x334, Size: 0x4]
	float HaloFadeSpeed;//[Offset: 0x338, Size: 0x4]
	byte HaloDetailMode;//[Offset: 0x33c, Size: 0x1]
	bool EnableLensFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1]
	LensFlareElement[] LensFlareElements;//[Offset: 0x340, Size: 0xc]
	MaterialInterface* LensFlareMaterial;//[Offset: 0x34c, Size: 0x4]
	uint32 LensFlareTranslucentSortPriority;//[Offset: 0x350, Size: 0x4]
	float LensFlareFadeSpeed;//[Offset: 0x354, Size: 0x4]
	byte LensFlareDetailMode;//[Offset: 0x358, Size: 0x1]
	RuntimeMeshComponent* Sun;//[Offset: 0x35c, Size: 0x4]
	RuntimeMeshComponent* Halo;//[Offset: 0x360, Size: 0x4]
	RuntimeMeshComponent* LensFlare;//[Offset: 0x364, Size: 0x4]

--------------------------------
Class: LensFlareElement
	float Position;//[Offset: 0x0, Size: 0x4]
	float Size;//[Offset: 0x4, Size: 0x4]
	Vector2D UV0;//[Offset: 0x8, Size: 0x8]
	Vector2D UVSize;//[Offset: 0x10, Size: 0x8]
	LinearColor Color;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LevelDirectorComponent.ActorComponent.Object
	bool DefaultIsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	ZombieWaveUIState[] ZombieWaveUIStateArray;//[Offset: 0xc0, Size: 0xc]
	float ZombieWaveUIPastTime;//[Offset: 0xcc, Size: 0x4]
	float ReallyClientWaveUIBeginTime;//[Offset: 0xd0, Size: 0x4]
	delegate WaveUIStateBeginDelegate;//[Offset: 0xd4, Size: 0xc]
	bool IsStartShowWaveUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float ReconnectWaveUITolerateTime;//[Offset: 0xe4, Size: 0x4]
	float CountDownReconnectInterTime;//[Offset: 0xe8, Size: 0x4]
	float CountDownEndServerTime;//[Offset: 0xec, Size: 0x4]
	float TotalCountDownTime;//[Offset: 0xf0, Size: 0x4]
	float RestCountDownTime;//[Offset: 0xf4, Size: 0x4]
	int CountDownStringId;//[Offset: 0xf8, Size: 0x4]
	int CountDownTypeId;//[Offset: 0xfc, Size: 0x4]
	delegate CommonnCountDownMessage;//[Offset: 0x100, Size: 0xc]
	void UpdateZombieWaveUIState(float DeltaTime);// 0x13b4f68
	void StartShowZombieWaveStateUI(ZombieWaveUIState[] ZombieWaveUIState);// 0x13b4d54
	void ShowZombieWaveUIState(const ZombieWaveUIState[] ZombieWaveUIState, float PastTime);// 0x13b4be4
	void ShowGameWarningTipsWithIdAndString(int ID, FString Param1, FString Param2);// 0x13b4a58
	void ShowGameTipsWithIdAndString(int ID, FString Param1, FString Param2);// 0x13b48cc
	void ShowGameTips(int ID);// 0x13b484c
	bool ShouldReconnectRepZombieWaveUIState();// 0x13b4824
	void ServerBeginCountDownTime(float TotalTime, float RestTime, int StringId, int TypeID);// 0x13b46dc
	void OnRep_ZombieWaveUIStateArrayChange();// 0x12e82e4
	void NetPostVoiceAtLocation(FString EventName, Vector Location);// 0x13b45d4
	void ClientShowZombieWaveUIState(out const ZombieWaveUIState[] ZombieWaveUIState, float PastTime);// 0x13b4458
	void ClientBroadcastVoice(FString EventName, Vector Location);// 0x13b4350
	void BroadCountDownTime(float EndServerTime, float TotalTime, float RestTime, int StringId, int TypeID);// 0x13b41b8

--------------------------------
Class: LobbyAvatarComponent.SceneComponent.ActorComponent.Object
	int gender;//[Offset: 0x240, Size: 0x4]
	MeshComponent* RootMesh;//[Offset: 0x2f8, Size: 0x4]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0x2fc, Size: 0x3c]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0x338, Size: 0x3c]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x478, Size: 0x3c]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x4b4, Size: 0x3c]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x4f0, Size: 0xc]
	bool SetSkinMaterial(int SlotID, ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x13b6f14
	void SetNormalMaterial(out const MeshPackage meshPack, MeshComponent* meshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x13b6d9c
	bool SetBodySuitsMaterial(out const MeshPackage meshPack, MeshComponent* meshComp, BackpackAvatarHandle* InAvatarHandle);// 0x13b6c60
	void RemoveClothParticleEffect(int SlotID);// 0x1396184
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x13b6b3c
	void OnAvatarHeadVisible__DelegateSignature(int ItemID);// 0x1c01fa0
	void OnAvatarEquipped__DelegateSignature(enum slotType, bool isEquipped, int ItemID);// 0x1c01fa0
	void OnAvatarAttachEquipped__DelegateSignature(enum slotType, bool isEquipped, int ItemID);// 0x1c01fa0
	void OnAsyncLoadMeshes();// 0x13b6b28
	void OnAsyncLoadItemHandles(BattleItemHandleBase*[] AvatarHandles);// 0x13b69d0
	void OnAsyncLoadAvatarHandles(AvatarHandleBase*[] AvatarHandles);// 0x13b6878
	void InitRootMesh();// 0x13b6864
	void Initialize();// 0x13b6864
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x1396184
	void InitDefaultAvatarByResID(int InGender, int headId, int hairId);// 0x13b6764
	void InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x13b6690
	void InitBodyMesh(ItemHandleBase* Handle);// 0x1c01fa0
	bool HandleUnequipSlot(int InSlotID);// 0x13b6610
	void HandleRealShowMeshpack(BackpackAvatarHandle* AvatarHandle, out const AvatarSlotDesc InSlotDesc);// 0x13b6504
	void HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x13b6410
	MaterialInstance* GetMaterial(out const MeshPackage meshPack);// 0x13b635c
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x13b62ec
	FName GetClothMaterialSkinName(enum slotType, bool bSuit);// 0x13b6218
	FName GetClothMaterialColorName(enum slotType, bool bSuit);// 0x13b6144
	MaterialInterface* GetCharSkinMaterial(enum slotType, ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x1c01fa0
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x13b603c
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x13b5f78
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x13b5e94
	bool GetAttachMeshResRef(out const AvatarAttachMeshData meshPack, out SoftObjectPath OutAssetRef);// 0x13b5d10
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x1c01fa0
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x1c01fa0
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x13b5c2c
	bool CanEquipDefaultItem(int InSlotID);// 0x1c01fa0
	void AyncLoadHandles(out ItemDefineID[] InHandleList);// 0x13b5b60
	void AsyncLoadMeshes(out SoftObjectPath[] InHandleList);// 0x13b5a2c
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x1398190
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x13b5960
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x1398190
	void AddDefaultSlotItem(int ItemID);// 0x13b58e8
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x13b5868

--------------------------------
Class: LobbyLevelScriptActor.LevelScriptActor.Actor.Object
	class Actor[] FXClassList;//[Offset: 0x2cc, Size: 0xc]
	Actor*[] _fxActorList;//[Offset: 0x2d8, Size: 0xc]
	StaticMeshActor*[] AutoLodSMAList;//[Offset: 0x2e4, Size: 0xc]
	void UnregistAutoLodSMAByTag();// 0x13b86c8
	void RemoveFXActor();// 0x13b86b4
	void RegistAutoLodSMAByTag();// 0x13b86a0
	void CreateFXActor();// 0x13b868c
	void _AutoUpdateSMALod(int UserQualitySettingLevel);// 0x13b8614

--------------------------------
Class: LobbyMatChgActor.Actor.Object
	StaticMeshComponent* stMesh;//[Offset: 0x2c8, Size: 0x4]
	LobbyBgMatData[] matWaitToChangeList;//[Offset: 0x2cc, Size: 0xc]
	void ChangeMaterialToIdx(int idx);// 0x13b8c04

--------------------------------
Class: LobbyBgMatData
	byte matType;//[Offset: 0x0, Size: 0x1]
	MaterialInstance* matPtr;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LobbyModelCommonActor.Actor.Object
	MeshComponent* MeshComponent;//[Offset: 0x2c8, Size: 0x4]
	void ShowByResId(out const ItemDefineID ItemDefineID, bool bSync);// 0x13b95dc
	void ShowByHandle(BattleItemHandleBase* InHandle, bool bSync);// 0x13b9518
	MeshComponent* SetupMeshComponent(MeshComponent* meshComp);// 0x13b9498
	void SetMeshAndMaterial(BattleItemHandleBase* BattleItemHandleBase, MeshComponent* meshComp, MaterialInterface*[] matList);// 0x13b92b0
	SkeletalMeshComponent* InitSkeletalMesh();// 0x13b9288
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage meshPack);// 0x13b91d4
	MaterialInterface*[] GetMeshAppliedMaterials(BackpackAvatarHandle* AvatarHandle, MeshComponent* meshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x13b8ffc
	void ApplyMaterialByIdx(MeshComponent* meshComp, MaterialInstance* Material, int idx);// 0x13b8efc

--------------------------------
Class: LobbySceneCaptureActor.Actor.Object
	delegate OnCaptureError;//[Offset: 0x2c8, Size: 0xc]
	FString PicturePath;//[Offset: 0x2d4, Size: 0xc]
	Vector2D RTSize;//[Offset: 0x2e0, Size: 0x8]
	bool AlphaFullCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool AlphaReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	float AlphaRate;//[Offset: 0x2ec, Size: 0x4]
	bool AlphaChannelEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool GammaCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	bool HSSave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]
	bool ClearDrawRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 0x1]
	MaterialInstance* WriteMat;//[Offset: 0x2f4, Size: 0x4]
	TextureRenderTarget2D* DrawRT;//[Offset: 0x2f8, Size: 0x4]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x2fc, Size: 0x4]
	SceneCaptureComponent2D* AlphaCapture2D;//[Offset: 0x300, Size: 0x4]
	float ScreenWidth;//[Offset: 0x304, Size: 0x4]
	float ScreenHeight;//[Offset: 0x308, Size: 0x4]
	Vector2D AABBBoxLeftPoint;//[Offset: 0x30c, Size: 0x8]
	Vector2D AABBBoxRightPoint;//[Offset: 0x314, Size: 0x8]
	void ResizeRT();// 0x13b9ce4
	void LogError(const FString FilePath);// 0x13b9b8c
	void Capture();// 0x13b9b78

--------------------------------
Class: LoopScrollBase.ScrollBox.PanelWidget.Widget.Visual.Object
	bool bDelayLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 0x1]
	delegate OnRefreshItem;//[Offset: 0x888, Size: 0xc]
	delegate OnItemCreated;//[Offset: 0x894, Size: 0xc]
	class Widget* ItemType;//[Offset: 0x944, Size: 0x4]
	CanvasPanel* CanvasPanel;//[Offset: 0x958, Size: 0x4]
	void UserScrolled(float Offset);// 0x13ba41c
	void SetItemType(class Widget _ItemType);// 0x13ba3a4
	bool SetItemCount(int count);// 0x13ba324
	void RemoveItem(int Index);// 0x13ba2ac
	bool RefreshItem(int Index);// 0x13ba22c
	void RefreshAllItems();// 0x13ba218
	void OnRefreshItem__DelegateSignature(Widget* Item, int Index);// 0x1c01fa0
	void OnItemCreated__DelegateSignature(Widget* Item, int Index);// 0x1c01fa0
	void InsertItem(int Index);// 0x13ba1a0
	int GetItemCount();// 0x13ba178
	void AutoSize(bool bAutoSize);// 0x13ba0f8

--------------------------------
Class: LoopScrollBox.LoopScrollBase.ScrollBox.PanelWidget.Widget.Visual.Object
	float ItemSize;//[Offset: 0x95c, Size: 0x4]
	float Padding;//[Offset: 0x960, Size: 0x4]
	void ScrollToItem(int Index);// 0x13ba91c

--------------------------------
Class: LoopScrollGrid.LoopScrollBase.ScrollBox.PanelWidget.Widget.Visual.Object
	Vector2D ItemSize;//[Offset: 0x95c, Size: 0x8]
	Vector2D Padding;//[Offset: 0x964, Size: 0x8]
	void ScrollToItem(int Index);// 0x13ba91c

--------------------------------
Class: LuaDataTable.Object
	static int IsTableDataExist_LuaState();// 0x13bae8c
	static int GetTableData_LuaState();// 0x13bae8c
	static int GetTableCount(FString tableName);// 0x13baea8
	static int GetTable_LuaState();// 0x13bae8c

--------------------------------
Class: LuaGameMode.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x1094, Size: 0xc]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x10a0, Size: 0x4]
	FString PreloadLuaFileRelativePath;//[Offset: 0x10a8, Size: 0xc]
	FString[] LuaDirList;//[Offset: 0x10b4, Size: 0xc]
	FString[] NoGCPackage;//[Offset: 0x10c0, Size: 0xc]
	float LuaTickTime;//[Offset: 0x10cc, Size: 0x4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 0x1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 0x1]
	CompatibleEventCenter* EventCenter;//[Offset: 0x10d8, Size: 0x4]
	void TestFunction();// 0x12e82e4
	void LuaDoString(FString LuaString);// 0x13bb39c
	void CallGlobalScriptFunction(FString InFunctionName);// 0x13bb2e0

--------------------------------
Class: MyLuaAPI.Object
	static int Add(int A, int B);// 0x13bb77c

--------------------------------
Class: MyLuaObject.Object
	void SetID(int I);// 0x1350e9c
	static MyLuaObject* New();// 0x13bbae0
	int GetID();// 0x13bbac4

--------------------------------
Class: LuaScrollBox.ScrollBox.PanelWidget.Widget.Visual.Object
	class Widget* ItemType;//[Offset: 0x884, Size: 0x4]
	float ItemSize;//[Offset: 0x888, Size: 0x4]
	float Padding;//[Offset: 0x88c, Size: 0x4]
	delegate OnRefreshItem;//[Offset: 0x890, Size: 0xc]
	delegate OnItemCreated;//[Offset: 0x89c, Size: 0xc]
	<int,Widget*> CurrentItems;//[Offset: 0x8b0, Size: 0x3c]
	int ItemStartIndex;//[Offset: 0x8ec, Size: 0x4]
	int ItemEndIndex;//[Offset: 0x8f0, Size: 0x4]
	Widget*[] UnusedItems;//[Offset: 0x8f4, Size: 0xc]
	bool bViewSizeInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900, Size: 0x1]
	int ItemCount;//[Offset: 0x904, Size: 0x4]
	int ScrollToIndex;//[Offset: 0x90c, Size: 0x4]
	CanvasPanel* CanvasPanel;//[Offset: 0x920, Size: 0x4]
	bool UpdateContentSize(int count);// 0x13bc490
	void SetItemOffset(int Index);// 0x13bc418
	Widget* RequireOneWidget(int Index);// 0x13bc398
	void ReleaseItem(int Index);// 0x13bc320
	void RefreshItem(int Index);// 0x13bc2a8
	void RefreshAllItems();// 0x13bc294
	void OnRefreshItem__DelegateSignature(Widget* Item, int Index);// 0x1c01fa0
	void OnItemCreated__DelegateSignature(Widget* Item, int Index);// 0x1c01fa0
	Vector2D GetViewSize();// 0x13bc254
	float GetItemOffset(int Index);// 0x13bc1d4
	float GetContentSize(int count);// 0x13bc154
	void GetBeginEndIndex(float Offset, out int Begin, out int End);// 0x13bc030

--------------------------------
Class: LuaTaskComponent.ActorComponent.Object
	XTaskSyncData[] TaskSyncList;//[Offset: 0xbc, Size: 0xc]
	DailyTaskAwardInfo[] RewardList;//[Offset: 0xc8, Size: 0xc]
	delegate TaskSyncListRefreshDelegate;//[Offset: 0xd4, Size: 0xc]
	delegate OnEndPlay;//[Offset: 0xe0, Size: 0xc]
	void SyncTaskList(out XTaskSyncData[] SyncList);// 0x13bd5c4
	void SetTestTaskReportData();// 0x13bd5b0
	void RPC_Server_GetReward(int TaskID);// 0x13bd4fc
	void RPC_Client_SyncTaskList(const XTaskSyncData[] SyncList);// 0x13bd438
	void RPC_Client_ModefyTask(int TaskID, int TaskProgress, int TaskState);// 0x13bd330
	void RPC_Client_GetRewardRes(bool isSuccess);// 0x13bd2a8
	void RPC_Client_DeleteTask(int TaskID);// 0x13bd228
	void RPC_Client_AddTask(int TaskID, int Aim);// 0x134e37c
	void RefreshPlayerDailyTaskStoreInfo();// 0x13bd214
	void RecordRewardInfo(int TaskID, TaskAwardItemInfo[] AwardList);// 0x13bd074
	void OnRep_TaskSyncList();// 0x13bd060
	void ModifyTask(int TaskID, int Progress, int State);// 0x13bcf60
	DailyTaskReportInfo GetDailyTaskReportData();// 0x13bcd84
	void DeleteTask(int TaskID);// 0x13bcd0c
	void CollapseTaskInfo();// 0x13bccf8
	void AddTask(int TaskID, int Aim);// 0x13bcc3c

--------------------------------
Class: XTaskSyncData
	int TaskID;//[Offset: 0x0, Size: 0x4]
	int CurProgress;//[Offset: 0x4, Size: 0x4]
	int AimProgress;//[Offset: 0x8, Size: 0x4]
	enum State;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: DailyTaskAwardInfo
	int TaskID;//[Offset: 0x0, Size: 0x4]
	TaskAwardItemInfo[] AwardList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: TaskAwardItemInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DailyTaskReportInfo
	uint64 Uid;//[Offset: 0x0, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]
	uint32 TaskSyncToDsTs;//[Offset: 0xc, Size: 0x4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0x10, Size: 0xc]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: MainCharAnimInstance.AnimInstance.Object
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x2ec, Size: 0x4]
	bool bIsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]

--------------------------------
Class: ManagedActorInterface.Interface.Object

--------------------------------
Class: MapUIMarkManager.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0xc0, Size: 0xc]
	MapWidgetBase* m_pMiniMapWidget;//[Offset: 0xcc, Size: 0x4]
	MapWidgetBase* m_pEntireMapWidget;//[Offset: 0xd0, Size: 0x4]
	int[] CurMarkInstList;//[Offset: 0xd4, Size: 0xc]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0xe0, Size: 0xc]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0xec, Size: 0x4]
	STExtraPlayerController* pExtraPC;//[Offset: 0xf0, Size: 0x4]
	float TickRate_Internal;//[Offset: 0x114, Size: 0x4]
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x13c048c
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x1c01fa0

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 0x4]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: UIBPAsyncParams

--------------------------------
Class: MatineePlayerActor.Actor.Object
	MatineeActor*[] MatineeList;//[Offset: 0x2c8, Size: 0xc]
	void PlayMatinee(int Index);// 0x12de094

--------------------------------
Class: MeleeWeaponToSkillInterface.Interface.Object
	int GetSkillIndexForMeleeWeapon();// 0x13c17d8
	enum GetSkillEntryForMeleeWeapon(bool IsPressed);// 0x13c1748

--------------------------------
Class: WeaponDisuseCancelInterface.Interface.Object

--------------------------------
Class: MemoryTeamIDActor.Actor.Object
	int OwnerTeamID;//[Offset: 0x2c8, Size: 0x4]
	bool IsLocalControllerSameTeam();// 0x13c1dcc

--------------------------------
Class: MiniMapAirdropBoxIconItemWidget.UserWidget.Widget.Visual.Object
	void OnUpdateAirdropBoxIcon(Vector2D Location, bool IsShow, bool Landed, float ExistsTime, float Altitude, float Distance, bool Opened);// 0x13c20ec

--------------------------------
Class: MiniMapEnemyItemWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	void OnUpdateEnemyIcon(float X, float Y, bool IsShow, float PlayerRotation);// 0x13c2634

--------------------------------
Class: MiniMapStandardPoint.Actor.Object
	float LevelBoundExtent;//[Offset: 0x2c8, Size: 0x4]
	float EachTileExtent;//[Offset: 0x2cc, Size: 0x4]
	FString LevelName;//[Offset: 0x2d0, Size: 0xc]
	float FakeEdgeExtent;//[Offset: 0x2dc, Size: 0x4]
	VisualFieldLayerConfig VisualLayerConfig;//[Offset: 0x2e0, Size: 0xc]

--------------------------------
Class: VisualFieldLayerConfig
	VisualFieldLayer[] VisualLayerList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: VisualFieldLayer
	float LayerFloorHeight;//[Offset: 0x0, Size: 0x4]
	float LayerRoofHeight;//[Offset: 0x4, Size: 0x4]
	int LayerID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MinimapWidget.CommonMapWidget.MapWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* MapAndCircleCanvas;//[Offset: 0x51c, Size: 0x4]
	float[] SpeedLowerLimitListC;//[Offset: 0x55c, Size: 0xc]
	float[] DynamicScaleFactorListC;//[Offset: 0x568, Size: 0xc]
	float ScaleElapsedLerpTimeC;//[Offset: 0x574, Size: 0x4]
	float ScaleTotalLerpTimeC;//[Offset: 0x578, Size: 0x4]
	float LastTargetMapDynamicScaleC;//[Offset: 0x57c, Size: 0x4]
	float TargetMapDynamicScaleC;//[Offset: 0x580, Size: 0x4]
	float CurMapDynamicScaleC;//[Offset: 0x584, Size: 0x4]
	float CachePawnVelocityC;//[Offset: 0x588, Size: 0x4]
	float CurrentVelocityC;//[Offset: 0x58c, Size: 0x4]
	Widget*[] BossAreaListC;//[Offset: 0x590, Size: 0xc]
	Widget*[] BossWarningListC;//[Offset: 0x59c, Size: 0xc]
	<int,Vector> BossWarningMapC;//[Offset: 0x5a8, Size: 0x3c]
	Widget*[] EliteMonsterListC;//[Offset: 0x5e4, Size: 0xc]
	Image*[] EliteBgImageListC;//[Offset: 0x5f0, Size: 0xc]
	<int,Vector> EliteActiveGroupMapC;//[Offset: 0x5fc, Size: 0x3c]
	PVPBossComponent* BossComponent;//[Offset: 0x638, Size: 0x4]
	void UpdatePlayersLocAndRotC();// 0x134cbe0
	void UpdateLeftRouteLengthC();// 0x134cbc4
	void UpdateEliteMonsterGroupItems(const Widget*[] EliteMonsterList, const Image*[] EliteBgImageList, <int,Vector> EliteActiveGroupMap);// 0x13c3228
	void UpdateBossWarningItems(const Widget*[] BossWarningList, <int,Vector> BossWarningMap);// 0x13c2f60
	void UpdateBossSpawnItems(const Widget*[] BossAreaList);// 0x13c2e08
	void TickDynamicScaleC(float DeltaSec);// 0x13c2d90
	void SyncTick();// 0x1c01fa0
	void ReCalMapInfoC();// 0x134cb44
	void LerpDynamicScaleC(float DeltaSec);// 0x13c2d18
	void HandleTeammateOutOfRangeC(Widget* Widget, bool bIsInRange);// 0x1c01fa0
	float FindScaleFactorByVelocityC(float Velocity);// 0x13c2c98
	void ChangeDynamicScaleC(float NewScale);// 0x13c2c20
	void AdjustMapPositionC();// 0x13c2c0c

--------------------------------
Class: PVPBossComponent.ActorComponent.Object
	BossBornPoint[] BossBornPointArray;//[Offset: 0xbc, Size: 0xc]
	int Radius;//[Offset: 0xc8, Size: 0x4]
	PVPBossFlow*[] BossFlowGroup;//[Offset: 0xcc, Size: 0xc]
	PVPBossFlow* CurBossFlow;//[Offset: 0xd8, Size: 0x4]
	Vector StartBornPosition;//[Offset: 0xdc, Size: 0xc]
	int CountDownValue;//[Offset: 0xe8, Size: 0x4]
	int CurBossCount;//[Offset: 0xec, Size: 0x4]
	RepBossBornPoint[] AliveBossArray;//[Offset: 0xf0, Size: 0xc]
	delegate BossBeginFlow;//[Offset: 0xfc, Size: 0xc]
	delegate BossBeginCountDown;//[Offset: 0x108, Size: 0xc]
	delegate BossCurCountChanged;//[Offset: 0x114, Size: 0xc]
	int BaseFlowId;//[Offset: 0x120, Size: 0x4]
	void StartBornBoss(int BossID, int WaitTime, int CountTime, int BossIndex);// 0x14066a4
	void SetStartBornPosition(out const Vector InPos);// 0x1406618
	void SetCountDownValue(int Value);// 0x14065a4
	void OnRep_CurBossChange();// 0x1406590
	void OnReconnected(int InCountDown, out const Vector InStartBornPosition);// 0x14064c8
	void OnBossSpawn(int ID);// 0x1406450
	void OnBossDead(int ID);// 0x14063d8
	Vector GetStartBornPosition();// 0x14063b4
	int GetCountDownValue();// 0x1406398
	void ClearBossPoint();// 0x1406384
	bool CheckIsInBossArea(Vector CheckPos, float CheckPosRadius);// 0x14062c0
	void BroadStartBossFlow(Vector StartPosition, int FlowId);// 0x14061fc
	void BroadBeginCountDown(int CountTime);// 0x12e0ed0
	void AddBossBornPoint(Vector BornPoint);// 0x140618c

--------------------------------
Class: BossBornPoint
	Vector BornPosition;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: PVPBossFlow.Object
	int FlowId;//[Offset: 0x1c, Size: 0x4]
	Vector BornPosition;//[Offset: 0x20, Size: 0xc]
	int BossID;//[Offset: 0x2c, Size: 0x4]
	int CurCountDownTime;//[Offset: 0x30, Size: 0x4]
	PVPBossComponent* BossComponent;//[Offset: 0x34, Size: 0x4]
	void StartFlow(int InBossId, int WaitTime, int CountTime, PVPBossComponent* BossComp);// 0x1406e38
	void ProduceBossCarrier();// 0x1406e24
	void CountDown();// 0x1406e10
	void BeginCountDown();// 0x1406dfc

--------------------------------
Class: RepBossBornPoint
	int FlowId;//[Offset: 0x0, Size: 0x4]
	Vector BornPosition;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: MinimapWidget2.UAEUserWidget.UserWidget.Widget.Visual.Object
	int BossSpawnUpdateInterFrame;//[Offset: 0x2ec, Size: 0x4]
	PVPBossComponent* BossComponent;//[Offset: 0x2f0, Size: 0x4]
	int BossSpawnUpdateInterAddFrame;//[Offset: 0x2f4, Size: 0x4]
	static void UpdateEliteMonsterGroupItems(const Widget*[] EliteMonsterList, const Image*[] EliteBgImageList, Vector LevelLandScapeCenter, float LevelToMapScale, float RotateAngle, <int,Vector> EliteActiveGroupMap);// 0x13c4400
	static void UpdateBossWarningItems(const Widget*[] BossWarningList, Vector LevelLandScapeCenter, float LevelToMapScale, float RotateAngle, <int,Vector> BossWarningMap);// 0x13c4058
	void UpdateBossSpawnItems(const Widget*[] BossAreaList, Vector LevelLandScapeCenter, float LevelToMapScale, float RotateAngle);// 0x13c3e28

--------------------------------
Class: MobAIController.AIController.Controller.Actor.Object
	STExtraSimpleCharacter* ControlledMobPawn;//[Offset: 0x418, Size: 0x4]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	BehaviorTree*[] BehaviorTree;//[Offset: 0x420, Size: 0xc]
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x42c, Size: 0x4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x430, Size: 0x4]
	CrowdFollowingComponent* newFollowingComponent;//[Offset: 0x434, Size: 0x4]
	STAISenseConfig_Hearing* hearingConfig;//[Offset: 0x444, Size: 0x4]
	BackpackComponent* BackpackComponent;//[Offset: 0x448, Size: 0x4]
	int[] SkillsArray;//[Offset: 0x450, Size: 0xc]
	int ChangeSkillMinTimes;//[Offset: 0x45c, Size: 0x4]
	int ChangeSkillMaxTimes;//[Offset: 0x460, Size: 0x4]
	int ChooseCurSkillProbability;//[Offset: 0x464, Size: 0x4]
	void Suicide();// 0x13c6bec
	void RefreshAdvancedMovementMode();// 0x13c6bd8
	void OnPerceptionSenseUpdated(Actor*[] UpdatedActors);// 0x13c6a80
	void GotoEarthAndDie();// 0x13c6a6c

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x250, Size: 0xc]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x25c, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x260, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x264, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x268, Size: 0x4]
	void SuspendCrowdSteering(bool bSuspend);// 0x2521af4

--------------------------------
Class: STAISenseConfig_Hearing.AISenseConfig.Object
	class STAISense_Hearing* Implementation;//[Offset: 0x34, Size: 0x4]
	float HearingRange;//[Offset: 0x38, Size: 0x4]
	float LoSHearingRange;//[Offset: 0x3c, Size: 0x4]
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: STAISense_Hearing.AISense.Object
	STAINoiseEvent[] NoiseEvents;//[Offset: 0x58, Size: 0xc]
	float SpeedOfSoundSq;//[Offset: 0x64, Size: 0x4]
	static void ReportNoiseEventByParams(Object* WorldContextObject, Vector NoiseLocation, Actor* Instigator, ESTAINoiseEventParams Params);// 0x1427724
	static void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, enum noiseType, float Loudness, Actor* Instigator, float MaxRange, float StartAttenuationDist, float EndAttenuationDist, FName Tag);// 0x1427474

--------------------------------
Class: STAINoiseEvent
	Vector NoiseLocation;//[Offset: 0x4, Size: 0xc]
	float Loudness;//[Offset: 0x10, Size: 0x4]
	float MaxRange;//[Offset: 0x14, Size: 0x4]
	Actor* Instigator;//[Offset: 0x18, Size: 0x4]
	FName Tag;//[Offset: 0x20, Size: 0x8]
	enum noiseType;//[Offset: 0x28, Size: 0x1]
	float StartAttenuationDist;//[Offset: 0x2c, Size: 0x4]
	float EndAttenuationDist;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MobClimbingProxy.NavLinkProxy.Actor.Object
	enum climbingType;//[Offset: 0x2fc, Size: 0x1]
	float WindowHeight;//[Offset: 0x300, Size: 0x4]

--------------------------------
Class: MonsterAnimGroupComponent.ActorComponent.Object
	bool bConfigEnableAnimGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float ConfigSeparationDistanceSquare;//[Offset: 0xc0, Size: 0x4]
	float ConfigMinDistanceFromMainCharSquare;//[Offset: 0xc4, Size: 0x4]
	float ConfigMaxDistanceFromMainCharSquare;//[Offset: 0xc8, Size: 0x4]
	int EffectiveDeviceLevel;//[Offset: 0xcc, Size: 0x4]
	bool bEnableAnimGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bDebugAnimGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	float DebugPrintDeltaTime;//[Offset: 0xd4, Size: 0x4]
	float DebugPrintTime;//[Offset: 0xd8, Size: 0x4]
	float SeparationDistanceSquare;//[Offset: 0xdc, Size: 0x4]
	float MinDistanceFromMainCharSquare;//[Offset: 0xe0, Size: 0x4]
	float MaxDistanceFromMainCharSquare;//[Offset: 0xe4, Size: 0x4]
	MonsterAnimGroup[] AllMonsterGroup;//[Offset: 0xe8, Size: 0xc]
	bool IsMonsterCanGroup(STExtraSimpleCharacter* Actor);// 0x13c8320
	bool IsMonsterCanBelongToBaseMonster(STExtraSimpleCharacter* BaseActor, STExtraSimpleCharacter* Actor);// 0x13c8254

--------------------------------
Class: MonsterAnimGroup
	int MonsterID;//[Offset: 0x0, Size: 0x4]
	int RandomAnimID;//[Offset: 0x4, Size: 0x4]
	STExtraSimpleCharacter*[] MonsterGroup;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: MonsterAttributeComponent.ActorAttributeComponent.ActorComponent.Object
	FString BPTableName;//[Offset: 0xd0, Size: 0xc]
	FString SpecialStateTableName;//[Offset: 0xdc, Size: 0xc]
	FString MonsterDropTableName;//[Offset: 0xe8, Size: 0xc]
	void UpdateAttribute(int TemplateID);// 0x12e0f6c
	void RPC_Broadcast_Initailize(int MonsterID);// 0x13c93e8
	static void ResetTableData();// 0x13c93d4
	static void InitializeTable(FString Table, FString BPTable, FString SpecialStateTable, FString MonsterDropTableName);// 0x13c8f3c
	void InitializeFollow();// 0x12e0f50
	void Initialize(Actor* Actor);// 0x12e0ed0
	static MonsterTableRow GetTableRow(int ID);// 0x13c8e98
	static MonsterSpecialStateTableRow GetSpecialStateTableRow(int ID);// 0x13c8cc8
	static MonsterAttributeComponent* CreateComponent(Actor* Actor);// 0x13c8b40

--------------------------------
Class: MonsterTableRow
	int MonsterID;//[Offset: 0x0, Size: 0x4]
	int MonsterTeamID;//[Offset: 0x4, Size: 0x4]
	FString MonsterName;//[Offset: 0x8, Size: 0xc]
	FString MonsterNameID;//[Offset: 0x14, Size: 0xc]
	int MonsterLevel;//[Offset: 0x20, Size: 0x4]
	int BPID;//[Offset: 0x24, Size: 0x4]
	int Gold;//[Offset: 0x28, Size: 0x4]
	int SuperGold;//[Offset: 0x2c, Size: 0x4]
	int Score;//[Offset: 0x30, Size: 0x4]
	int SpecialStateID;//[Offset: 0x34, Size: 0x4]
	int DropID;//[Offset: 0x38, Size: 0x4]
	MonsterDropTableRow DropData;//[Offset: 0x3c, Size: 0x1c]
	int Rarity;//[Offset: 0x58, Size: 0x4]
	int MonsterType;//[Offset: 0x5c, Size: 0x4]
	int MonsterFuncType;//[Offset: 0x60, Size: 0x4]
	int Attack;//[Offset: 0x64, Size: 0x4]
	int Armor;//[Offset: 0x68, Size: 0x4]
	int Pierce;//[Offset: 0x6c, Size: 0x4]
	int Health;//[Offset: 0x70, Size: 0x4]
	int AI;//[Offset: 0x74, Size: 0x4]
	int SkillStrength;//[Offset: 0x78, Size: 0x4]
	int HealthBarCount;//[Offset: 0x7c, Size: 0x4]
	float SpeedScale;//[Offset: 0x80, Size: 0x4]
	float[] Resistances;//[Offset: 0x84, Size: 0xc]
	int[] PaSkillIds;//[Offset: 0x90, Size: 0xc]
	FString BPPath;//[Offset: 0x9c, Size: 0xc]
	int RageTimer;//[Offset: 0xa8, Size: 0x4]
	int NeedSendAttackFlow;//[Offset: 0xac, Size: 0x4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: MonsterDropTableRow
	int ID;//[Offset: 0x0, Size: 0x4]
	MonsterSingleDropIds[] DropIds;//[Offset: 0x4, Size: 0xc]
	MonsterSingleBulletDropIds[] BulletDropIds;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: MonsterSpecialStateTableRow
	int ID;//[Offset: 0x0, Size: 0x4]
	int[] BornSkillList;//[Offset: 0x4, Size: 0xc]
	int[] RageSkillIdList;//[Offset: 0x10, Size: 0xc]
	int[] AloneSkillIdList;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: MonsterFloatingTextComponent.ActorComponent.Object
	void SetClientPreCal(bool bPreCal);// 0x13c9e5c
	void OnPlayerAttackMonster(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x13c9c78
	void CreateFloatingText(out const MonsterFloatingTextData MonsterFloatingTextData);// 0x1c01fa0
	void ClientHandleFloatingTextArray(const MonsterFloatingTextData[] FloatingTextArray);// 0x13c9b84

--------------------------------
Class: MonsterFloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 0x4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: MonsterWarningWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	int MaxWidgetNum;//[Offset: 0x2ec, Size: 0x4]
	float MaxWarningDistance;//[Offset: 0x2f0, Size: 0x4]
	float InvisibleAngle;//[Offset: 0x2f4, Size: 0x4]
	float VisibleAngle;//[Offset: 0x2f8, Size: 0x4]
	float ZUpDistance;//[Offset: 0x2fc, Size: 0x4]
	float ZDownDistance;//[Offset: 0x300, Size: 0x4]
	int GridRange;//[Offset: 0x304, Size: 0x4]
	CanvasPanel*[] WarningCanvasPanelArr;//[Offset: 0x308, Size: 0xc]
	Object*[] CachedNearMonsterArr;//[Offset: 0x314, Size: 0xc]
	float CurQueryTime;//[Offset: 0x320, Size: 0x4]
	float QueryZombieInterval;//[Offset: 0x324, Size: 0x4]
	bool bWarningEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	void UpdateCanvasOpacity(CanvasPanel* WarningCanvasPanel, float AngleToForward);// 0x13cc320
	void EnableWarning();// 0x13cc30c
	void DisableWarning();// 0x13cc2f8

--------------------------------
Class: TimerComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	RegisterTimerInfo[] TimerRegister;//[Offset: 0xc0, Size: 0xc]
	float CurTime;//[Offset: 0xcc, Size: 0x4]
	void ResetTimerRegister();// 0x14fa050
	void AddTimeDelay(int Index, float DelayTime, int[] CallBackPar);// 0x14f9e60

--------------------------------
Class: RegisterTimerInfo
	RegisterDelayTime[] DelayTimes;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: RegisterDelayTime
	float DelayTime;//[Offset: 0x0, Size: 0x4]
	int[] CallBackPar;//[Offset: 0x4, Size: 0xc]
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MonsterWaveMgrComponent.TimerComponent.ActorComponent.Object
	LevelMonsterWaveRun[] LevelWaveRunInfoArray;//[Offset: 0xd0, Size: 0xc]
	MonsterWaveRunInfo[] RunInfoArray;//[Offset: 0xdc, Size: 0xc]
	LevelMonsterWaveCfg[] AllConfigDatas;//[Offset: 0xe8, Size: 0xc]
	bool GM_CloseMonsterLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool GM_CloseAliveMonsterLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	int GM_SpawnMonsterFrame;//[Offset: 0xf8, Size: 0x4]
	int GM_ExitWaitFrame;//[Offset: 0xfc, Size: 0x4]
	int GM_AutoExitTime;//[Offset: 0x100, Size: 0x4]
	int GM_MaxRemainMonsterNum;//[Offset: 0x104, Size: 0x4]
	int GM_AreaMaxMonsterNum;//[Offset: 0x108, Size: 0x4]
	int GM_AreaRadius;//[Offset: 0x10c, Size: 0x4]
	bool GM_CloseAreaMonsterNumCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	int GM_AreaMonsterNumCheckFrame;//[Offset: 0x114, Size: 0x4]
	int GM_MonsterLimitPerc;//[Offset: 0x118, Size: 0x4]
	int GM_MaxAliveMonsterNum;//[Offset: 0x11c, Size: 0x4]
	int GM_DisableSpawnDis;//[Offset: 0x120, Size: 0x4]
	int GM_HighPosZ;//[Offset: 0x124, Size: 0x4]
	int GM_LowPosZ;//[Offset: 0x128, Size: 0x4]
	int GM_MinHeight;//[Offset: 0x12c, Size: 0x4]
	int GM_MinSpaceHeight;//[Offset: 0x130, Size: 0x4]
	int GM_MaxWaterDeep;//[Offset: 0x134, Size: 0x4]
	GM_MonsterSpawnAction[] GM_SpawnActionList;//[Offset: 0x138, Size: 0xc]
	ItemCallMonsterLimit[] ItemCallMonsterLimitList;//[Offset: 0x144, Size: 0xc]
	int[] MonsterDropConfig;//[Offset: 0x150, Size: 0xc]
	int[] MonsterBulletDropConfig;//[Offset: 0x15c, Size: 0xc]
	int PveGenerateZombieByNoTeamMate;//[Offset: 0x168, Size: 0x4]
	FString MonsterSpawnPlanTableName;//[Offset: 0x16c, Size: 0xc]
	FString MonsterSpawnActionTableName;//[Offset: 0x178, Size: 0xc]
	FString MonsterSpawnPlanIDAdjustTableName;//[Offset: 0x184, Size: 0xc]
	LevelMonsterGenerateInfo[] LevelDelayMonsterGenerateList;//[Offset: 0x244, Size: 0xc]
	int DeleyGeneratyMonsterRegistID;//[Offset: 0x250, Size: 0x4]
	int DeleyEndMonsterWaveRegistID;//[Offset: 0x254, Size: 0x4]
	int DelayGenerateMonsterWaveRegistID;//[Offset: 0x258, Size: 0x4]
	DelaySpawnActionTimerRegister[] DelaySpawnMonsterActionRegistList;//[Offset: 0x25c, Size: 0xc]
	int DelayExitMonsterActionRegistID;//[Offset: 0x268, Size: 0x4]
	MonsterSpawnInfo[] WaitSpawnMonsterList;//[Offset: 0x26c, Size: 0xc]
	int SpawnMonsterNumPerFrame;//[Offset: 0x278, Size: 0x4]
	int DefaultSpawnRadius;//[Offset: 0x27c, Size: 0x4]
	int SpawnRandomMaxTimes;//[Offset: 0x280, Size: 0x4]
	int DefaulMonsterTeamID;//[Offset: 0x284, Size: 0x4]
	int MonsterHeight;//[Offset: 0x288, Size: 0x4]
	int StepSpawnPos;//[Offset: 0x28c, Size: 0x4]
	int MaxSpawnCircle;//[Offset: 0x290, Size: 0x4]
	MonsterLimit[] MonsterLimit;//[Offset: 0x294, Size: 0xc]
	MonsterLimit[] MonsterAliveLimit;//[Offset: 0x2a0, Size: 0xc]
	int MaxTraceTimes;//[Offset: 0x2ac, Size: 0x4]
	int MaxFindTimes;//[Offset: 0x2b0, Size: 0x4]
	int NumPerCirque;//[Offset: 0x2b4, Size: 0x4]
	int CurSpawnWaitFrame;//[Offset: 0x2b8, Size: 0x4]
	int CurExitWaitFrame;//[Offset: 0x2bc, Size: 0x4]
	int CurAreaMonsterNumCheckWaitFrame;//[Offset: 0x2c0, Size: 0x4]
	Actor*[] WaitExitMonsterList;//[Offset: 0x2c4, Size: 0xc]
	bool IsDoMonsterExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	PlayerMonsterSpot[] PlayerMonsterSpotList;//[Offset: 0x2d4, Size: 0xc]
	GenerateMonsterFlow GenerateMonsterFlow;//[Offset: 0x2e0, Size: 0x1c]
	void StartMonsterAction(int ActionType, int ActionID);// 0x13d1e14
	void SpawnOneMonster(out MonsterSpawnInfo SpawnInfo);// 0x13d1d1c
	void SpawnMonsterByAction(int[] ParList);// 0x13d1bc4
	void SpawnMonster(out MonsterSpawnInfo SpawnInfo);// 0x13d1acc
	void SetLevelDiffcultPerc(out GameLevelDesc LevelDesc, int DiffcultPerc);// 0x13d19ac
	void ReportGenerateMonsterFlow();// 0x13d1998
	void RemoveWaveRunInfo(out GameLevelDesc LevelDesc);// 0x13d18c0
	void RemoveWaveCfg(out GameLevelDesc LevelDesc);// 0x13d17e8
	void RemoveWaitSpawnMonsterList(out GameLevelDesc LevelDesc);// 0x13d1710
	void RemoveMonsterSpotList(uint32 PlayerKey);// 0x13d1698
	void RemoveDelayMonsterGenerateList(out GameLevelDesc LevelDesc);// 0x13d15c0
	void OnMonsterAutoExit(int[] ParList);// 0x13d1468
	void InitMonsterWave(out GameLevelDesc LevelDesc, out LevelData LevelData);// 0x13d12bc
	void InitMonsterSpawnPlanIDAdjust();// 0x13d12a8
	void InitMonsterSpawnPlan();// 0x13d1294
	void InitMonsterSpawnAction();// 0x13d1280
	void HanldeMonsterAutoExit();// 0x13d126c
	void HandleMonsterDie(Actor* Actor, Actor* Killer);// 0x13d11b0
	void HandleMonsterBorn(Actor* Actor);// 0x13d1138
	void HandleLeaveGameLevel(out GameLevelDesc LevelDesc, out LevelData LevelData);// 0x13d0f8c
	MonsterWaveRunInfo[] GetWaveRunInfo(out GameLevelDesc LevelDesc);// 0x13d0e68
	MonsterWave[] GetWaveCfg(out GameLevelDesc LevelDesc);// 0x13d0d64
	void GetPosByPlayerMonsterSpot(out PlayerMonsterSpot PlayerMonsterSpot, out Vector OutPos);// 0x13d0c48
	Vector GetPosByOffset(Vector TargetPos, int OffestX, int OffSetY);// 0x13d0b2c
	bool GetMonsterSpawnPlanList(int Plan, out MonsterSpawnPlan[] Out);// 0x13d0a14
	bool GetMonsterSpawnPlanIDAdjustList(int AdjustID, out MonsterSpawnPlanIDAdjust[] Out);// 0x13d08fc
	bool GetMonsterSpawnAction(int ID, out MonsterSpawnAction Out);// 0x13d07d4
	MonsterGeneratePlan GetMonsterPlan(out MonsterGroup MonsterGroupInfo);// 0x13d0560
	int GetMonsterNumInDis(Actor* TargetActor, float MaxDis);// 0x13d049c
	bool GetMonsterGroupActorByNearest(out MonsterGroup MonsterGroupInfo, out MonsterSpotGroup OutMonsterSpotGroup);// 0x13d0310
	bool GetMonsterGroupActor(out MonsterGroup MonsterGroupInfo, out MonsterSpotGroup OutMonsterSpotGroup);// 0x13d0184
	MonsterGenerateInfo[] GetDelayMonsterGenerateList(out GameLevelDesc LevelDesc);// 0x13cff88
	int GetCurMonsterDropConfigIndex(int WeatherIndex);// 0x13cff08
	int GetCurMonsterBulletDropConfigIndex(int WeatherIndex);// 0x13cfe88
	int GetCallMonsterNum(Pawn* TargetPawn, int CallType);// 0x13cfdc4
	Vector GetAdjustSpawnPos(Vector CenterPos);// 0x13cfd30
	void GetAdjustSpawnAction(out MonsterSpawnAction Out);// 0x13cfc54
	bool GetAdjustPos(out Vector TargetPos);// 0x13cfbc8
	int GetAdjustMonsterPlanID(int ID, STExtraBaseCharacter* Player);// 0x13cfb04
	int GetAdjustMonsterNum(int BaseNum, out GameLevelDesc LevelDesc);// 0x13cf9e0
	void GenerateMonsterWaveImmediately(out GameLevelDesc LevelDesc, int WaveID);// 0x13cf8c0
	void GenerateMonsterWaveDelay(int[] ParList);// 0x13cf768
	void GenerateMonsterWaveById(out GameLevelDesc LevelDesc, int WaveID);// 0x13cf648
	void GenerateMonsterGroup(out MonsterGroup MonsterGroupInfo, out GameLevelDesc LevelDesc, int WaveID);// 0x13cf490
	void GenerateMonsterDelay(int[] Index);// 0x13cf338
	void GenerateMonsterArroundTargetPosByCirque(out Vector CenterPos, int MonsterID, int MonsterNum, int[] PosRadiusList, Pawn* CallPawn, uint32 CallPawnKey, int CallType, byte SourceType);// 0x13cefe4
	void GenerateMonsterArroundTargetPos(Vector CenterPos, int MonsterID, int MonsterNum, int PosRadius, byte SourceType);// 0x13cee54
	void GenerateMonsterArroundPlayerByActionID(STExtraBaseCharacter* Player, int ActionID);// 0x13ced98
	void GenerateMonsterArroundPlayer(STExtraBaseCharacter* Player, int MonsterID, int RandomMonsterNum, int MaxNumLimit, int LimitType, int[] RadiusList, byte SourceType);// 0x13cea88
	void GenerateMonsterArroundAllPlayerByActionID(int ActionID);// 0x13cea10
	void GenerateMonster(out GameLevelDesc LevelDesc, out MonsterGenerateInfo MonsterGenerateInfo);// 0x13ce88c
	void ExitOtherMonsterForItemCallMonster();// 0x13ce878
	void EndMonsterWaveDelay(int[] WaveID);// 0x13ce720
	void DoMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x13ce600
	void DoMonsterExitByFuncType(int FuncType, int RemainMonsterNum);// 0x13ce544
	void DoMonsterExit(int RemainMonsterNum);// 0x13ce4cc
	void ClearEnv(out GameLevelDesc LevelDesc);// 0x13ce3f4
	void CheckNeedSpawnMonster();// 0x13ce3e0
	void CheckNeedExitOtherMonster(out MonsterSpawnInfo SpawnInfo);// 0x13ce2e8
	void CheckNeedExitMonster();// 0x13ce2d4
	bool CheckIsVaildTargetPos(Vector TargetPos);// 0x13ce25c
	bool CheckIsMaxAliveMonsterNum();// 0x13ce234
	void CheckAreaMonsterIsMax(Actor* TargetActor);// 0x13ce1bc
	void CheckAllPlayerAreaMonsterIsMax();// 0x13ce1a8
	void BPCall_AddToWaitSpawnList(MonsterSpawnInfo SpawnInfo);// 0x13cdfc8
	void AddWaveRunInfo(out GameLevelDesc LevelDesc, MonsterWaveRunInfo[] WaveRunInfoList);// 0x13cddc8
	void AddWaveCfg(out GameLevelDesc LevelDesc, out LevelData LevelData);// 0x13cdc1c
	void AddToWaitSpawnList(out MonsterSpawnInfo SpawnInfo);// 0x13cdb24
	void AddToWaitMonsterSpawnList(int MonsterID, int MonsterRebornTimes, int ReBornDelay, int MonsterWaveId, int MonsterChapterID, int MonsterLevelID, byte SourceType, Vector Pos, int Radius, out RoadPointInfo[] RoadPoints, float GenerateTime);// 0x13cd78c
	void AddMonsterSpotList(uint32 PlayerKey, out Vector[] SpotList);// 0x13cd67c
	void AddGenerateMonsterFlow(int WeatherPhase, out GenerateOneMonsterFlow AddFlow);// 0x13cd5a8
	void AddDelayMonsterGenerateInfo(out GameLevelDesc LevelDesc, MonsterGenerateInfo GenerateInfo);// 0x13cd374

--------------------------------
Class: LevelMonsterWaveRun
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 0x14]
	MonsterWaveRunInfo[] WaveRunInfoList;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: MonsterWaveRunInfo
	int CallNum;//[Offset: 0x0, Size: 0x4]
	int TotalMonsterNum;//[Offset: 0x4, Size: 0x4]
	int GenerateMonsterNum;//[Offset: 0x8, Size: 0x4]
	int DeadMonsterNum;//[Offset: 0xc, Size: 0x4]
	int EndNum;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: LevelMonsterWaveCfg
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 0x14]
	int DiffcultPerc;//[Offset: 0x14, Size: 0x4]
	MonsterWave[] WaveCfgList;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: GM_MonsterSpawnAction
	int ID;//[Offset: 0x0, Size: 0x4]
	int Times;//[Offset: 0x4, Size: 0x4]
	int Interval;//[Offset: 0x8, Size: 0x4]
	int MinRandTime;//[Offset: 0xc, Size: 0x4]
	int MaxRandTime;//[Offset: 0x10, Size: 0x4]
	int MaxLimit;//[Offset: 0x14, Size: 0x4]
	int LimitType;//[Offset: 0x18, Size: 0x4]
	int AdjustPlanID;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ItemCallMonsterLimit
	int WeatherPhase;//[Offset: 0x0, Size: 0x4]
	int LimitItemCallNum;//[Offset: 0x4, Size: 0x4]
	int LimitTotalNum;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LevelMonsterGenerateInfo
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 0x14]
	MonsterGenerateInfo[] DelayGenerateInfoList;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: MonsterGenerateInfo
	int MonsterID;//[Offset: 0x0, Size: 0x4]
	int MonsterNum;//[Offset: 0x4, Size: 0x4]
	int MonsterWaveId;//[Offset: 0x8, Size: 0x4]
	Vector Pos;//[Offset: 0xc, Size: 0xc]
	int PosRadius;//[Offset: 0x18, Size: 0x4]
	int ReBornTimes;//[Offset: 0x1c, Size: 0x4]
	int ReBornDelay;//[Offset: 0x20, Size: 0x4]
	RoadPointInfo[] RoadPointList;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: DelaySpawnActionTimerRegister
	int RegisterID;//[Offset: 0x0, Size: 0x4]
	int ActionType;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MonsterSpawnInfo
	int FlowId;//[Offset: 0x0, Size: 0x4]
	int MonsterID;//[Offset: 0x4, Size: 0x4]
	int MonsterRebornTimes;//[Offset: 0x8, Size: 0x4]
	int MonsterReBornDelay;//[Offset: 0xc, Size: 0x4]
	int MonsterWaveId;//[Offset: 0x10, Size: 0x4]
	int MonsterChapterID;//[Offset: 0x14, Size: 0x4]
	int MonsterLevelID;//[Offset: 0x18, Size: 0x4]
	float GenerateTime;//[Offset: 0x1c, Size: 0x4]
	Vector Pos;//[Offset: 0x20, Size: 0xc]
	Rotator rot;//[Offset: 0x2c, Size: 0xc]
	int PosRadius;//[Offset: 0x38, Size: 0x4]
	RoadPointInfo[] RoadPoints;//[Offset: 0x3c, Size: 0xc]
	byte SourceType;//[Offset: 0x48, Size: 0x1]
	Pawn* CallPawn;//[Offset: 0x4c, Size: 0x4]
	uint32 CallPawnKey;//[Offset: 0x50, Size: 0x4]
	int CallType;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MonsterLimit
	int WeatherPhase;//[Offset: 0x0, Size: 0x4]
	int NumLimit;//[Offset: 0x4, Size: 0x4]
	int CurRefreshNum;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PlayerMonsterSpot
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	Vector[] SpotList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: GenerateMonsterFlow
	FString BattleID;//[Offset: 0x0, Size: 0xc]
	int BattleMode;//[Offset: 0xc, Size: 0x4]
	GenerateMonsterPhaseFlow[] GenerateMonsterPhaseList;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: GenerateMonsterPhaseFlow
	int WeatherID;//[Offset: 0x0, Size: 0x4]
	GenerateOneMonsterFlow[] GenerateOneMonsterFlowList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: GenerateOneMonsterFlow
	int MonsterID;//[Offset: 0x0, Size: 0x4]
	int GenerateNum;//[Offset: 0x4, Size: 0x4]
	int DeadNum;//[Offset: 0x8, Size: 0x4]
	int KilledByPlayerNum;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MonsterSpawnPlan

--------------------------------
Class: MonsterSpawnPlanIDAdjust

--------------------------------
Class: MonsterSpawnAction

--------------------------------
Class: MoveablePlatformInterface.Interface.Object

--------------------------------
Class: MultiPickUpWrapperActor.Actor.Object
	class PickUpWrapperActor[] MultiPickUpWrapperConfigs;//[Offset: 0x2c8, Size: 0xc]
	int CoolDownTime;//[Offset: 0x2d4, Size: 0x4]
	PickUpWrapperActor* SpawnedWrapper;//[Offset: 0x2e0, Size: 0x4]
	void ResetWrapper();// 0x13d516c
	void OnWrapperPickedUp();// 0x13d5158

--------------------------------
Class: MyLandscape.Actor.Object
	RuntimeMeshComponent* Mesh;//[Offset: 0x2c8, Size: 0x4]
	MyLandscapeGeometry* LandscapeGeometry;//[Offset: 0x2cc, Size: 0x4]
	Material* LandscapeMat;//[Offset: 0x2d0, Size: 0x4]
	void GameEventReconnect();// 0x13d55c0
	void GameEventFlying();// 0x13d55ac
	void GameEventFighting();// 0x13d5598
	void AboutToSwitchViewTargetPlayer();// 0x13d5584

--------------------------------
Class: MyLandscapeGeometry.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x20, Size: 0xc]
	Vector[] Normals;//[Offset: 0x2c, Size: 0xc]
	Vector2D[] UV;//[Offset: 0x38, Size: 0xc]
	int[] Indices;//[Offset: 0x44, Size: 0xc]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x50, Size: 0x3c]
	int ComponentIndexCount;//[Offset: 0x8c, Size: 0x4]
	int ComponentVertexCount;//[Offset: 0x90, Size: 0x4]
	<FString,SubLevelComponentMapValue> SubLevelComponentMap;//[Offset: 0x94, Size: 0x3c]

--------------------------------
Class: SubLevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 0xc]
	int[] IndexOffsetArray;//[Offset: 0xc, Size: 0xc]
	int[] VertexOffsetIndex;//[Offset: 0x18, Size: 0xc]
	int[] BorderIndex1;//[Offset: 0x24, Size: 0xc]
	int[] BorderIndex2;//[Offset: 0x30, Size: 0xc]
	int[] BorderIndex3;//[Offset: 0x3c, Size: 0xc]
	int[] BorderIndex4;//[Offset: 0x48, Size: 0xc]
	int[] UnderBorderIndex1;//[Offset: 0x54, Size: 0xc]
	int[] UnderBorderIndex2;//[Offset: 0x60, Size: 0xc]
	int[] UnderBorderIndex3;//[Offset: 0x6c, Size: 0xc]
	int[] UnderBorderIndex4;//[Offset: 0x78, Size: 0xc]
	int[] BorderIndicesBuffer1;//[Offset: 0x84, Size: 0xc]
	int[] BorderIndicesBuffer2;//[Offset: 0x90, Size: 0xc]
	int[] BorderIndicesBuffer3;//[Offset: 0x9c, Size: 0xc]
	int[] BorderIndicesBuffer4;//[Offset: 0xa8, Size: 0xc]
	FString Sibling1Name;//[Offset: 0xb4, Size: 0xc]
	FString Sibling2Name;//[Offset: 0xc0, Size: 0xc]
	FString Sibling3Name;//[Offset: 0xcc, Size: 0xc]
	FString Sibling4Name;//[Offset: 0xd8, Size: 0xc]
	int Sibling1Idx;//[Offset: 0xe4, Size: 0x4]
	int Sibling2Idx;//[Offset: 0xe8, Size: 0x4]
	int Sibling3Idx;//[Offset: 0xec, Size: 0x4]
	int Sibling4Idx;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: NavigatorPannelUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	float LandscapeRotation;//[Offset: 0x2ec, Size: 0x4]
	float Offset;//[Offset: 0x2f0, Size: 0x4]
	float Width;//[Offset: 0x2f4, Size: 0x4]
	MaterialInstanceDynamic* CompassMat;//[Offset: 0x2f8, Size: 0x4]
	float HalfPix;//[Offset: 0x2fc, Size: 0x4]
	float MapMarkPositionYInCompass;//[Offset: 0x300, Size: 0x4]
	float SafeZoneGuidePositionYInCompass;//[Offset: 0x304, Size: 0x4]
	FName materialXParameterName;//[Offset: 0x308, Size: 0x8]
	float CPPNavigatorTickRate;//[Offset: 0x310, Size: 0x4]
	float MapRotateAngle;//[Offset: 0x314, Size: 0x4]
	int DisplayCharRotation;//[Offset: 0x320, Size: 0x4]
	int CacheDisplayCharRotation;//[Offset: 0x324, Size: 0x4]
	Vector[] MapMarkArray;//[Offset: 0x32c, Size: 0xc]
	Widget*[] TeamPlayerMarkerArray_Cpp;//[Offset: 0x338, Size: 0xc]
	TextBlock*[] TeamPlayerMarkDistArray_Cpp;//[Offset: 0x344, Size: 0xc]
	InvalidationBox* PlayerMarker_Group;//[Offset: 0x350, Size: 0x4]
	TextBlock* DirectionMarker_Dist;//[Offset: 0x354, Size: 0x4]
	CanvasPanel* CanvasPanel_SafeArea;//[Offset: 0x358, Size: 0x4]
	TextBlock* TextBlock_BigTips;//[Offset: 0x35c, Size: 0x4]
	SlateColor NormalDirectionTextColor;//[Offset: 0x360, Size: 0x1c]
	SlateColor SpecifiedDirectionTextColor;//[Offset: 0x37c, Size: 0x1c]
	int NormalDirectionTextFontSize;//[Offset: 0x398, Size: 0x4]
	int SpecifiedDirectionTextFontSize;//[Offset: 0x39c, Size: 0x4]
	FText[] DisplayRotToTextArray;//[Offset: 0x3a0, Size: 0xc]
	void UpdateSafeZoneGuideVisibilityAndPosition();// 0x13d6b44
	void UpdateMapMarkVisibility();// 0x13d6b30
	void UpdateMapMarkPosition();// 0x13d6b1c
	void UpdateForwardDirectionText();// 0x1346880
	void SetCompassMat(MaterialInstanceDynamic* InCompassMat);// 0x13d6aa4
	void OnMapMarkChange_NoParam();// 0x13d6a90
	void OnMapMarkChange(int MarkIndex);// 0x13d6a18
	bool IsTextNotEqualTo(FText SelfValue, FText OtherText, bool ReverseResult);// 0x13d64a8
	bool IsStrNotEqualToText(FString InValue, FText InText, bool ReverseResult);// 0x13d6088
	bool IsModToZero(int InValue, int ModValue);// 0x13d5fc4
	bool IsIntNotEqualToText(int InValue, FText InText, bool ReverseResult);// 0x13d5c7c
	Rotator GetPlayerLookRotation();// 0x13d5c34
	void BindMapMarkChangeDelegate();// 0x13d5c20

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	float MinKeepCacheTime;//[Offset: 0xdc, Size: 0x4]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	void SetMinKeepCacheTime(float MinKeepCacheTime);// 0x238ee48
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x238edc8
	void SetCanCache(bool CanCache);// 0x238ed48
	void InvalidateCache();// 0x238ed34
	float GetMinKeepCacheTime();// 0x238ed0c
	bool GetDontPaintWhenChildEmpty();// 0x238ece4
	bool GetCanCache();// 0x238ecbc

--------------------------------
Class: NetMonitorComponent.ActorComponent.Object
	NetProfileTimeBase[] NetProfileTimeBase;//[Offset: 0xbc, Size: 0xc]
	NetProfileConditionBase[] NetProfileConditionBase;//[Offset: 0xc8, Size: 0xc]
	NetProfileMonitorBase[] NetProfileMonitorBase;//[Offset: 0xd4, Size: 0xc]
	void StartFlight();// 0x13d766c

--------------------------------
Class: NetProfileTimeBase
	float StartTime;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NetProfileConditionBase
	enum Condition;//[Offset: 0x0, Size: 0x1]
	float Duration;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NetProfileMonitorBase
	enum NetProfileMonitorArg;//[Offset: 0x0, Size: 0x1]
	double Threshold;//[Offset: 0x8, Size: 0x8]
	float Duration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NetworkOnlineDriver.Actor.Object
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x13d84f0
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x13d842c
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, int CurrentBullet);// 0x13d8330
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x13d81ec
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x13d8138
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte shootType);// 0x13d803c
	void ServerSetReloadMethod(STExtraBaseCharacter* TargetCharacter, byte reloadMethod);// 0x13d7f40
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x13d7c80
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x13d79c0

--------------------------------
Class: NewbieGuideWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	void OnRemove();// 0x1346880
	void OnCreateAndShow(int guideID, int UIConfigIndex);// 0x13d9bc8

--------------------------------
Class: NewFakePlayerAIController.FakePlayerAIController.BaseAIController.AIController.Controller.Actor.Object
	int CanEquipGrenadeNum;//[Offset: 0x6b4, Size: 0x4]
	int nowEquipGrenadeNum;//[Offset: 0x6b8, Size: 0x4]
	float CanhaveMedicalCapacity;//[Offset: 0x6bc, Size: 0x4]
	float nowMedicalCapacity;//[Offset: 0x6c0, Size: 0x4]
	int MaxWeaponAIFullVaule;//[Offset: 0x6c4, Size: 0x4]
	int NowWeaponFullVaue;//[Offset: 0x6c8, Size: 0x4]
	int MaxEquipWeaponFullVaue;//[Offset: 0x6cc, Size: 0x4]
	int[] nowWeaponList;//[Offset: 0x6d0, Size: 0xc]
	int CanHaveWeaponPartsVaules;//[Offset: 0x6dc, Size: 0x4]
	int NowWeaponPartsVaules;//[Offset: 0x6e0, Size: 0x4]
	bool isHasMeleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e4, Size: 0x1]
	int MaxEquipAIFullVaule;//[Offset: 0x6e8, Size: 0x4]
	int BackPackFullVaule;//[Offset: 0x6ec, Size: 0x4]
	int HeadFullVaule;//[Offset: 0x6f0, Size: 0x4]
	int BodyFullVaule;//[Offset: 0x6f4, Size: 0x4]
	int Bullet9Num;//[Offset: 0x6f8, Size: 0x4]
	int Bullet7PointNum;//[Offset: 0x6fc, Size: 0x4]
	int Bullet5PointNum;//[Offset: 0x700, Size: 0x4]
	int BulletPoint12Num;//[Offset: 0x704, Size: 0x4]
	int BulletPoint45Num;//[Offset: 0x708, Size: 0x4]
	int BulletPoint300Num;//[Offset: 0x70c, Size: 0x4]
	int ArrowNum;//[Offset: 0x710, Size: 0x4]
	float AutoOpenDoorRange;//[Offset: 0x714, Size: 0x4]

--------------------------------
Class: NGCondition_IsElapseXsAfterJump.STNewbieGuideConditionBase.Object
	float ActiveTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: NGCondition_IsHoldingGrenade.STNewbieGuideConditionBase.Object
	byte CheckSlotType;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: NGCondition_IsHoldingGun.STNewbieGuideConditionBase.Object

--------------------------------
Class: NGCondition_IsInZombieMode.STNewbieGuideConditionBase.Object

--------------------------------
Class: NoBulletWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object

--------------------------------
Class: OBHttpComponent.ActorComponent.Object
	int Port;//[Offset: 0xc8, Size: 0x4]
	int MaxFailedTimes;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: OBModeAirDropWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* OBCanvasPanelSlot;//[Offset: 0x2ec, Size: 0x4]
	CanvasPanel* OBPanel;//[Offset: 0x2f0, Size: 0x4]
	AirDropBoxActor* CachedAirDrop;//[Offset: 0x2f4, Size: 0x4]
	Vector4 Limit;//[Offset: 0x300, Size: 0x10]
	int heightPlus;//[Offset: 0x310, Size: 0x4]
	int rightPlus;//[Offset: 0x314, Size: 0x4]
	Vector2D UIOffset;//[Offset: 0x318, Size: 0x8]
	Vector LocOffset;//[Offset: 0x320, Size: 0xc]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x344, Size: 0x4]
	void SetAirDrop(AirDropBoxActor* DropBox);// 0x13decd0
	void OnItemClicked();// 0x12e82e4

--------------------------------
Class: OBModePositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* OBCanvasPanelSlot;//[Offset: 0x2ec, Size: 0x4]
	CanvasPanel* OBPanel;//[Offset: 0x2f0, Size: 0x4]
	STExtraBaseCharacter* CachedCharacter;//[Offset: 0x2f4, Size: 0x4]
	STExtraPlayerState* CachedPlayerState;//[Offset: 0x2f8, Size: 0x4]
	PlayerInfoInOB CachedPlayerInfo;//[Offset: 0x2fc, Size: 0xc8]
	Vector4 Limit;//[Offset: 0x3d0, Size: 0x10]
	int heightPlus;//[Offset: 0x3e0, Size: 0x4]
	int rightPlus;//[Offset: 0x3e4, Size: 0x4]
	Vector2D UIOffset;//[Offset: 0x3e8, Size: 0x8]
	Vector LocOffset;//[Offset: 0x3f0, Size: 0xc]
	float CachedHealth;//[Offset: 0x3fc, Size: 0x4]
	float CachedBreathPercent;//[Offset: 0x400, Size: 0x4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x41c, Size: 0x4]
	void SetPlayerCharacter(STExtraPlayerController* Controller, int idx);// 0x13df188
	void RefreshPlayerHealth(float hpRatio, float breathRatio, bool IsNearDeath);// 0x13df078
	void OnItemClicked();// 0x13df064
	void DisplayFinalDamage(float FinalDamage, int AttackerTeamID);// 0x1c01fa0

--------------------------------
Class: ObserverCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x780, Size: 0x4]
	float FreeCameraOffsetRadius;//[Offset: 0x7a0, Size: 0x4]
	<byte,float> FreeCameraOffsetRadiusMap;//[Offset: 0x7a4, Size: 0x3c]
	bool DrawDebugGraphics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	Vector DrawDebugGraphicsOffset;//[Offset: 0x7e4, Size: 0xc]
	float ProbeRadius;//[Offset: 0x7f0, Size: 0x4]
	float SpecialStatePitchLimitMin;//[Offset: 0x7f4, Size: 0x4]
	float SpecialStatePitchLimitMax;//[Offset: 0x7f8, Size: 0x4]
	float DefaultFieldOfView;//[Offset: 0x7fc, Size: 0x4]
	float WeaponOffsetDistance;//[Offset: 0x800, Size: 0x4]
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x13df5a0

--------------------------------
Class: OnTimeSpawnChallengeLevelRules.ChallengeLevelRules.Object
	TriggerItem_TriggerClock*[] TriggerClockArray;//[Offset: 0x20, Size: 0xc]
	void SpawnLevelDirector(class UAELevelDirector LevelDirectorClass);// 0x133d4b4
	void OnReceiveTriggerMsg(TriggerAction* TriggerAction, FString Msg);// 0x133d30c
	void InitLevel();// 0x133d2f0

--------------------------------
Class: TriggerItem_TriggerClock.TriggerBase.Actor.Object
	FString ClockTag;//[Offset: 0x2cc, Size: 0xc]
	bool IsStartOnBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	float[] TriggerSecondsArray;//[Offset: 0x2dc, Size: 0xc]
	TimerHandle TimerHandle_Trigger;//[Offset: 0x2e8, Size: 0x8]
	int CurSecondsArrayIndex;//[Offset: 0x2f0, Size: 0x4]
	void Stop();// 0x1507c90
	void Start();// 0x1507c7c
	void OnTime();// 0x1507c68

--------------------------------
Class: ParachuteAnimInstanceBase.AnimInstance.Object
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool C_IsLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	byte C_ParachuteState;//[Offset: 0x2ee, Size: 0x1]
	Vector C_MoveDir;//[Offset: 0x2f0, Size: 0xc]
	float MaxSimulatePhysicDist;//[Offset: 0x2fc, Size: 0x4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x300, Size: 0x4]
	FName DynamicParamName;//[Offset: 0x308, Size: 0x8]
	float DynamicMatPassTotalTime;//[Offset: 0x310, Size: 0x4]
	float DelayClearTime;//[Offset: 0x314, Size: 0x4]
	STExtraPlayerCharacter* OwnerPlayer;//[Offset: 0x324, Size: 0x4]
	bool IsNearTheLocalMainChar();// 0x13e0414
	void HandleParachuteStateChanged();// 0x1c01fa0

--------------------------------
Class: ParachutingWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	float AirborneAltitude;//[Offset: 0x2ec, Size: 0x4]
	float AltitudeBarLength;//[Offset: 0x2f0, Size: 0x4]
	float ParachuteBarLength;//[Offset: 0x2f4, Size: 0x4]
	float AltitudeBarYPosition;//[Offset: 0x2f8, Size: 0x4]
	float HeightAndSpeedBoxXPosition;//[Offset: 0x2fc, Size: 0x4]
	FString SpeedText;//[Offset: 0x300, Size: 0xc]
	HorizontalBox* HeightAndSpeedBox;//[Offset: 0x30c, Size: 0x4]
	CanvasPanelSlot* HeightAndSpeedBoxPanelSlot;//[Offset: 0x310, Size: 0x4]
	Image* ParachuteBarImage;//[Offset: 0x314, Size: 0x4]
	Image* HeightBarImage;//[Offset: 0x318, Size: 0x4]
	Character* AirbornePawn;//[Offset: 0x31c, Size: 0x4]
	STExtraPlayerController* AirborneController;//[Offset: 0x320, Size: 0x4]
	Vector2D HeightAndSpeedBoxPosition;//[Offset: 0x324, Size: 0x8]
	CanvasPanelSlot* ParachuteBarCanvasSlot;//[Offset: 0x32c, Size: 0x4]
	CanvasPanelSlot* HeightBarCanvasSlot;//[Offset: 0x330, Size: 0x4]
	delegate OnSpeedValueChangeDelegate;//[Offset: 0x334, Size: 0xc]
	bool bUseAccelerationUpdating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	float UpdateAccleratingThreshold;//[Offset: 0x344, Size: 0x4]
	float CalAcceleratingPeriod;//[Offset: 0x348, Size: 0x4]
	bool bUseMultiFramePastUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	int UpdateSpeedTextFrameThreshold;//[Offset: 0x350, Size: 0x4]

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x238c4dc
	bool GetDontPaintWhenChildEmpty();// 0x238c4b4
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x238c434

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x34, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x3c, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x3d, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x238ca00
	void SetSize(SlateChildSize InSize);// 0x238c970
	void SetPadding(Margin InPadding);// 0x238c8e8
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x238c870

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PartHitPlayerComponent.PartHitComponent.ActorComponent.Object
	STExtraBaseCharacter* ownerBaseCharacter;//[Offset: 0x198, Size: 0x4]

--------------------------------
Class: PartHitZombieComponent.PartHitComponent.ActorComponent.Object
	STExtraSimpleCharacter* ownerSimpleCharacter;//[Offset: 0x198, Size: 0x4]
	SceneComponent* HitBoxComponent;//[Offset: 0x19c, Size: 0x4]
	FName HitBoxComponentTag;//[Offset: 0x1a0, Size: 0x8]
	bool bDebugDrawHitPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	float DebugDrawHitPosTime;//[Offset: 0x1ac, Size: 0x4]
	SceneComponent* GetHitBoxComponent();// 0x13e177c
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x13e0f50
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x13e0d10
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x13e0b4c

--------------------------------
Class: ParticleCacheMgr.Actor.Object
	ParticleCacheConfig[] ParticleConfig;//[Offset: 0x2c8, Size: 0xc]
	<FName,ParticlePool> ObjectPools;//[Offset: 0x2d4, Size: 0x3c]
	float GetParticleCullingDistance(out const ParticleCacheConfig InConfig);// 0x13e26fc
	int GetParticleCountLimit(out const ParticleCacheConfig InConfig);// 0x13e2620
	byte GetParticleConfig(out const FName InName, out ParticleCacheConfig OutConfig);// 0x13e24e8
	int GetDeviceLevel();// 0x13e24c0
	byte GetCreateType(out const FName ParticleName, out float CullingDistance);// 0x13e23d4
	ParticleSystemComponent* CreateNewParticleAttach(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy);// 0x13e211c
	ParticleSystemComponent* CreateNewParticleAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy);// 0x13e1f30
	bool AddToPool(out const FName InName, ParticleSystemComponent* Target);// 0x13e1e54

--------------------------------
Class: ParticleCacheConfig
	FName ParticleName;//[Offset: 0x0, Size: 0x8]
	float MaxCullingDistance;//[Offset: 0x8, Size: 0x4]
	ParticleCountLimit[] CountLimit;//[Offset: 0xc, Size: 0xc]
	int DeviceLevelLimit;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ParticleCountLimit
	int Level;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ParticlePool
	int VisiableParticleNum;//[Offset: 0x0, Size: 0x4]
	ParticleSystemComponent*[] Pool;//[Offset: 0x4, Size: 0xc]
	int Size;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ParticleSystemLoaderComponent.SceneComponent.ActorComponent.Object
	int DelayTime;//[Offset: 0x238, Size: 0x4]
	Vector LocationOffset;//[Offset: 0x23c, Size: 0xc]
	Vector RotationOffset;//[Offset: 0x248, Size: 0xc]
	Vector ScaleOffset;//[Offset: 0x254, Size: 0xc]
	bool EnableInLowLevelDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	ParticleSystem* ParticleSystemPtr;//[Offset: 0x268, Size: 0x28]
	ParticleSystemComponent* LoadedComponent;//[Offset: 0x290, Size: 0x4]
	ParticleSystemComponent* GetLoadedComponent();// 0x13e2c60

--------------------------------
Class: PawnPositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	STExtraBaseCharacter* SavePlayerCharacter;//[Offset: 0x2ec, Size: 0x4]
	CanvasPanelSlot* CanvasPanel;//[Offset: 0x2f0, Size: 0x4]
	Vector4 Limit;//[Offset: 0x300, Size: 0x10]
	int heightPlus;//[Offset: 0x310, Size: 0x4]
	Vector2D UIOffset;//[Offset: 0x314, Size: 0x8]
	Vector LocOffset;//[Offset: 0x31c, Size: 0xc]
	void SetSavedCharacter(STExtraBaseCharacter* MyCharacter);// 0x13e2f14

--------------------------------
Class: PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	void InitMasterComponent();// 0x13e3210
	void Initialize();// 0x134068c
	void InitialAvatarParam();// 0x12e82e4

--------------------------------
Class: PetAvatarHandle.AvatarHandleBase.ItemHandleBase.Object
	enum slotType;//[Offset: 0x8c, Size: 0x1]
	PetMeshPackage MeshPackage;//[Offset: 0x90, Size: 0xc8]
	PetMeshPackage ReplaceMeshPackage;//[Offset: 0x158, Size: 0xc8]

--------------------------------
Class: PetMeshPackage.AssetPackage
	StaticMesh* stMesh;//[Offset: 0x8, Size: 0x28]
	SkeletalMesh* skMesh;//[Offset: 0x30, Size: 0x28]
	class AnimInstance* animBP;//[Offset: 0x58, Size: 0x4]
	ParticleAsset[] ParticleData;//[Offset: 0x5c, Size: 0xc]
	MaterialInterface* Mat;//[Offset: 0x68, Size: 0x28]
	MaterialInterface* MatBase;//[Offset: 0x90, Size: 0x28]
	MaterialAsset[] additionalMats;//[Offset: 0xb8, Size: 0xc]

--------------------------------
Class: MaterialAsset
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* MatInst;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: PetBTDecorator_PetHasState.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte[] PetStates;//[Offset: 0x40, Size: 0xc]
	bool bMatchAllStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: PetBTDecorator_PetOwnerFallingTime.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte Cnd;//[Offset: 0x3e, Size: 0x1]
	float FallingTime;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: PetBTDecorator_PetOwnerHasState.BTDecorator.BTAuxiliaryNode.BTNode.Object
	enum[] PetOwnerStates;//[Offset: 0x40, Size: 0xc]
	bool bMatchAllStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: PetBTService_PetLocation.BTService.BTAuxiliaryNode.BTNode.Object
	float Distance;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: PetBTService_PetPerceiveAirAttack.BTService.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: PetBTTask_PetFalling.BTTaskNode.BTNode.Object
	STExtraBaseCharacter* PetOwner;//[Offset: 0x4c, Size: 0x4]
	float FallingTime;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PetBTTask_PetMoveTo.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: PetBTTask_TriggerEvent.BTTaskNode.BTNode.Object
	byte PetEventType;//[Offset: 0x49, Size: 0x1]

--------------------------------
Class: PetWaitEventInfo.Object
	byte EventType;//[Offset: 0x1c, Size: 0x1]
	float EventMaxWaitTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PetPawnStateEventInfo.PetWaitEventInfo.Object
	enum PawnState;//[Offset: 0x24, Size: 0x1]
	byte StateChangeType;//[Offset: 0x25, Size: 0x1]

--------------------------------
Class: PetEmotionEventInfo.PetWaitEventInfo.Object
	int EmotionId;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: PetPlayerEmotionEventInfo.PetWaitEventInfo.Object
	int PlayerEmotionId;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: PetEntityComponent.ActorComponent.Object
	STExtraPetCharacter* PetCharacter;//[Offset: 0xbc, Size: 0x4]
	PetAttachInfo AttachInfo;//[Offset: 0xc0, Size: 0x20]
	PetAttachInfo FollowAttachInfo;//[Offset: 0xe0, Size: 0x20]
	PetAttachInfo FlyAroundAttachInfo;//[Offset: 0x100, Size: 0x20]
	PetAttachInfo CurAttachInfo;//[Offset: 0x120, Size: 0x20]
	FixPetAttachInfo[] FixAttachInfoList;//[Offset: 0x140, Size: 0xc]
	byte FollowType;//[Offset: 0x14c, Size: 0x1]
	int[] ParachuteEquipItems;//[Offset: 0x150, Size: 0xc]
	enum[] PredictOwnerStates;//[Offset: 0x15c, Size: 0xc]
	void UpdateAttachInfoList(bool bAdd, FixPetAttachInfo Info);// 0x13e5b18
	void OnPetStateChanged(byte State, bool IsEnter);// 0x13e5a4c
	STExtraPetCharacter* GetPetCharacter();// 0x13e5a24
	PetAttachInfo GetCurrentAttachInfo();// 0x13e59d8
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info);// 0x1c01fa0

--------------------------------
Class: STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool[] PetStateList;//[Offset: 0x8d4, Size: 0xc]
	bool[] ClientDiffPetStateList;//[Offset: 0x8e0, Size: 0xc]
	float MovementTickInterval;//[Offset: 0x8ec, Size: 0x4]
	int PetStateNum;//[Offset: 0x8f0, Size: 0x4]
	int RelevantCloseTime;//[Offset: 0x8f4, Size: 0x4]
	PetVisibilityInfo PetVisibilityInfo;//[Offset: 0x8f8, Size: 0x8]
	PetLevelInfo PetLevelInfo;//[Offset: 0x900, Size: 0x8]
	bool PetDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 0x1]
	STExtraBaseCharacter* PetOwnerPlayerCharacter;//[Offset: 0x90c, Size: 0x4]
	byte PetRelevantType;//[Offset: 0x910, Size: 0x1]
	byte CurPetState;//[Offset: 0x911, Size: 0x1]
	delegate OnPetStateChangeDelegate;//[Offset: 0x914, Size: 0xc]
	delegate OnPetCurExecuteEventDelegate;//[Offset: 0x920, Size: 0xc]
	delegate OnPetMontageDelegate;//[Offset: 0x92c, Size: 0xc]
	PetEventItem* CurExecuteEvent;//[Offset: 0x938, Size: 0x4]
	PetMontageData PetCurMontage;//[Offset: 0x93c, Size: 0x8]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x1c01fa0
	void SetPetVisibility(bool visible);// 0x1c01fa0
	void SetPetMontage(out const PetMontageData Data);// 0x149ade8
	void SetCurExecuteEvent(PetEventItem* Event);// 0x149ad70
	bool PetOwnerIsAutonomous();// 0x149ad48
	void PetOwnerCharacterBecomeValid();// 0x1c01fa0
	void PetLeaveState(byte State);// 0x149acd0
	bool PetHasState(byte State);// 0x149ac50
	bool PetEnterState(byte ToState);// 0x149abd0
	void OnRep_PetVisibilityInfo();// 0x149abbc
	void OnRep_PetStateList();// 0x149aba8
	void OnRep_PetStateChange();// 0x12e82e4
	void OnRep_PetOwnerCharacter();// 0x149ab94
	void OnRep_PetCurMontageChange();// 0x149ab80
	void OnRep_CurExecuteEvent();// 0x149ab6c
	void OnRep_AttachmentReplication();// 0x131b1dc
	void OnOwnerAvatarEquipped(enum slotType, bool isEquipped, int InItemID);// 0x149aa58
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x1c01fa0
	bool IsAnimLimited(int AnimId);// 0x149a9d0
	int[] GetPetUnlockAnimIds();// 0x1c01fa0
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x1c01fa0
	FString GetPetAnimLimitePlayerState(int AnimId);// 0x1c01fa0
	bool ClientPredictEnterState(byte ToState);// 0x149a950
	void BroadcastPetLeaveDisappear();// 0x149a934
	void BindDelegateInCpp();// 0x149a918

--------------------------------
Class: PetVisibilityInfo
	bool visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PetLevelInfo
	int PetId;//[Offset: 0x0, Size: 0x4]
	int PetLevel;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PetEventItem.Object
	byte EventType;//[Offset: 0x1c, Size: 0x1]
	int EventPriority;//[Offset: 0x20, Size: 0x4]
	float EventExecTime;//[Offset: 0x24, Size: 0x4]
	float EventMaxWaitTime;//[Offset: 0x28, Size: 0x4]
	bool NotEnterWaitList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	byte EnterPetState;//[Offset: 0x2d, Size: 0x1]
	byte LeavePetState;//[Offset: 0x2e, Size: 0x1]
	BehaviorTree* BehaviorTree;//[Offset: 0x30, Size: 0x4]
	int AnimationAssetId;//[Offset: 0x34, Size: 0x4]
	PetMontageConfig[] MontageList;//[Offset: 0x38, Size: 0xc]
	PetMontageConfig[] UnlockMontageList;//[Offset: 0x44, Size: 0xc]
	PetMontageConfig[] RealPlayMontageList;//[Offset: 0x50, Size: 0xc]
	bool bIgnoreUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	delegate OnPetEventStartDelegate;//[Offset: 0x60, Size: 0xc]
	delegate OnPetEventEndDelegate;//[Offset: 0x6c, Size: 0xc]
	STExtraPetCharacter* PetCharacter;//[Offset: 0x78, Size: 0x4]
	void UpdateCanPlayMontageList();// 0x13e61a0
	void SelectRandomMontage();// 0x13e6184
	void OnEventStart(STExtraPetCharacter* Pet);// 0x12ebf60
	void OnEventEnd();// 0x13e6168
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x13e60e0

--------------------------------
Class: PetMontageConfig
	int AnimationAssetId;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PetMontageData
	int AnimationAssetId;//[Offset: 0x0, Size: 0x4]
	float MontageStartTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PetAttachInfo
	FName AttachSocketName;//[Offset: 0x0, Size: 0x8]
	Vector AttachOffset;//[Offset: 0x8, Size: 0xc]
	Rotator AttachRotation;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: FixPetAttachInfo
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int PetId;//[Offset: 0x4, Size: 0x4]
	int Priority;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PetEmotionEventItem.PetEventItem.Object
	int EmotionId;//[Offset: 0x7c, Size: 0x4]
	void OnEventStart(STExtraPetCharacter* Pet);// 0x12ebf60
	void OnEventEnd();// 0x13e6168
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x13e60e0

--------------------------------
Class: PlayerStateEventItem.PetEventItem.Object
	PetEventPlayerStateTypeSt[] StateChangeTypes;//[Offset: 0x7c, Size: 0xc]
	void OnEventStart(STExtraPetCharacter* Pet);// 0x12ebf60
	void OnEventEnd();// 0x13e6168
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x13e60e0

--------------------------------
Class: PetEventPlayerStateTypeSt
	enum PawnState;//[Offset: 0x0, Size: 0x1]
	byte StateChangeType;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: RandomMontageEventItem.PetEventItem.Object
	void OnEventStart(STExtraPetCharacter* Pet);// 0x12ebf60

--------------------------------
Class: PetPlayerEmotionEventItem.PetEventItem.Object
	int[] PlayerEmotionIds;//[Offset: 0x7c, Size: 0xc]
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x13e60e0

--------------------------------
Class: PetEventManagerComponent.ActorComponent.Object
	PetWaitEventInfo*[] WaitEventList;//[Offset: 0xbc, Size: 0xc]
	PetEventItemIns[] EventConfigs;//[Offset: 0xc8, Size: 0xc]
	BehaviorTree* DefaultBT;//[Offset: 0xd4, Size: 0x4]
	BehaviorTree* CurrentBT;//[Offset: 0xd8, Size: 0x4]
	STExtraPetController* PetController;//[Offset: 0xdc, Size: 0x4]
	STExtraPetCharacter* PetCharacter;//[Offset: 0xe0, Size: 0x4]
	PetEventItem* CurExecuteEvent;//[Offset: 0xe4, Size: 0x4]
	int MaxWaitEventNum;//[Offset: 0xe8, Size: 0x4]
	delegate OnPetEventDelegate;//[Offset: 0xec, Size: 0xc]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x13e7854
	void StartEventExecTimer(float ExecTime);// 0x13e77dc
	void ProcessWaitEvent(float Delta);// 0x13e7764
	bool GetPredictPetOwnerState(PetEventPlayerStateTypeSt StateSt, out byte Enter, out byte Leave);// 0x13e7630
	PetEventItem* GetEventItem(PetWaitEventInfo* EventInfo);// 0x13e75b0
	void EnqueueWaitEvent(PetWaitEventInfo* Info);// 0x13e7538
	void DequeueWaitEvent(bool bNeedExec);// 0x13e74b8
	bool CheckCanInterruptCurEvent(PetEventItem* NextEventItem);// 0x13e7438
	bool CanResponseEvent();// 0x13e7410

--------------------------------
Class: PetEventItemIns
	FString Tips;//[Offset: 0x0, Size: 0xc]
	PetEventItem* EventItem;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: STExtraPetController.AIController.Controller.Actor.Object
	void ChangeBehaviorTree(BehaviorTree* BTAsset);// 0x149b860

--------------------------------
Class: PickupInterface.Interface.Object

--------------------------------
Class: PickUpPropContainerComponent.ActorComponent.Object
	Actor*[] InventoryData;//[Offset: 0xbc, Size: 0xc]

--------------------------------
Class: PickupProxyFactory.Interface.Object

--------------------------------
Class: PickupWrapperManagerComponent.ActorComponent.Object
	PickupCountLimit[] CountLimitConfig;//[Offset: 0xbc, Size: 0xc]
	PickupCountLimit[] CountLimitConfigInIOS;//[Offset: 0xc8, Size: 0xc]
	PickUpWrapperActor*[] PickupWrapperList;//[Offset: 0xd4, Size: 0xc]
	int MaxEffectCount;//[Offset: 0xe0, Size: 0x4]
	float TimeOutSecond;//[Offset: 0xe4, Size: 0x4]
	int GetEffectCount();// 0x13ec110

--------------------------------
Class: PickupCountLimit
	int DeviceLevel;//[Offset: 0x0, Size: 0x4]
	int CountLimit;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlaneAvatarComponent.AvatarComponentBase.ActorComponent.Object
	ItemDefineID DefaultPlaneCfg;//[Offset: 0x100, Size: 0x18]
	delegate PlaneAvatarEqiuped;//[Offset: 0x118, Size: 0xc]
	MeshComponent* PlaneBodyMesh;//[Offset: 0x124, Size: 0x4]
	ItemDefineID synData;//[Offset: 0x128, Size: 0x18]
	BackpackPlaneAvatarHandle* PlaneAvatarHandle;//[Offset: 0x1d8, Size: 0x4]
	void PreChangePlaneAvatar(int InItemID);// 0x13ec47c
	void PostChangePlaneAvatar();// 0x13ec468
	void OnRep_PlaneAvatarChanged();// 0x13ec454
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x13abfc8
	BackpackPlaneAvatarHandle* GetPlaneAvatarHandle(int ItemID);// 0x1c01fa0
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance);// 0x13abf2c

--------------------------------
Class: PlaneCharacter.Character.Pawn.Actor.Object
	Texture2D* BannerTexture;//[Offset: 0x67c, Size: 0x4]
	FrontendHUD* FrontendHUD;//[Offset: 0x680, Size: 0x4]
	SkeletalMesh* BannerSkeletalMesh;//[Offset: 0x688, Size: 0x28]
	AnimationAsset* BannerAnim;//[Offset: 0x6b0, Size: 0x28]
	StaticMesh* BannerStaticMesh;//[Offset: 0x6d8, Size: 0x28]
	SkeletalMeshComponent* BannerComp;//[Offset: 0x700, Size: 0x4]
	StaticMeshComponent* BannerStaticComp;//[Offset: 0x704, Size: 0x4]
	MaterialInstanceDynamic* DynamicMaterial;//[Offset: 0x708, Size: 0x4]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 0x1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x710, Size: 0xc]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x71c, Size: 0xc]
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x13eccd0
	void OnRep_GetHttpPlaneBannerRightImg();// 0x12e82e4
	void OnRep_GetHttpPlaneBannerLeftImg();// 0x13eccbc
	void OnRep_EnableBanner();// 0x12e82e4

--------------------------------
Class: PlaneViewerPawn.Pawn.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x30c, Size: 0x4]
	SpringArmComponent* CameraBoom;//[Offset: 0x310, Size: 0x4]
	CameraComponent* FollowCamera;//[Offset: 0x314, Size: 0x4]

--------------------------------
Class: STExtraProp.Actor.Object
	bool bKeepRelevantWhenHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	STExtraBaseCharacter* OwnerPlayer;//[Offset: 0x2cc, Size: 0x4]
	STExtraBaseCharacter* LastOwnerPlayer;//[Offset: 0x2d0, Size: 0x4]
	Transform OriginTrans;//[Offset: 0x2e0, Size: 0x30]
	FName PropAttachSocket;//[Offset: 0x310, Size: 0x8]
	AkAudioEvent* EquipSound;//[Offset: 0x318, Size: 0x4]
	AkAudioEvent* UnEquipSound;//[Offset: 0x31c, Size: 0x4]

--------------------------------
Class: PlayerEquipmentProp.STExtraProp.Actor.Object
	byte EquipmentLevel;//[Offset: 0x320, Size: 0x1]
	float DamageMultiplyAdditionalRate;//[Offset: 0x324, Size: 0x4]

--------------------------------
Class: PlayerSecurityInfoCollector.ActorComponent.Object
	int[] EnergyItemIDList;//[Offset: 0xbc, Size: 0xc]
	int[] EnergySpeedUpPhaseIndexList;//[Offset: 0xc8, Size: 0xc]
	bool bEnableDetailFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool bEnableDetailHurtFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	ClientCircleFlow CurCircleFlow;//[Offset: 0xd8, Size: 0x120]
	ClientCircleFlow CollectCircleFlow;//[Offset: 0x1f8, Size: 0x120]
	HurtFlow CurHurtFlow;//[Offset: 0x318, Size: 0x100]
	ClientJumpFlow JumpFlow;//[Offset: 0x418, Size: 0x98]
	ClientSecPlayerKillFlow SecPlayerKillFlow;//[Offset: 0x4b0, Size: 0x78]
	InexistentAvatarFlow InexistentAvatarFlow;//[Offset: 0x6ec, Size: 0x168]
	void StartOnPlane();// 0x13f0ea4
	void PlayerCanJump();// 0x13f0e90
	void HandleSyncCircleInfo(int Index);// 0x13f0e18
	void HandleCharacterSafeZoneTips(float SafeZoneTime);// 0x13f0da0
	void HandleCharacterCircleWaveOver(int Index);// 0x13f0d28
	void HandleCharacterCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x13f0c20
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);// 0x13f0ba8
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);// 0x1396184
	void HandleCharacterAttrChangedWithDetail(Actor* nowActor, FString AttrName, float ValueDelta, float ResultValue);// 0x13f0a1c
	void ExitParachute();// 0x13f0a08
	void EnterParachute();// 0x13f09f4
	void EnterJumping();// 0x13f09e0

--------------------------------
Class: InexistentAvatarFlow

--------------------------------
Class: PoisonFogArea.Actor.Object

--------------------------------
Class: PoseWithFriendComponent.ActorComponent.Object
	bool bPoseWithFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	AnimSequence* PoseWithFriendAnimSeq;//[Offset: 0xd4, Size: 0x4]
	UAEDataTable* FriendPoseTable;//[Offset: 0xd8, Size: 0x4]
	void PoseWithFriend(bool IsSelfMale, bool IsRight, bool IsFriendMale);// 0x13fbf74
	void OnPoseWithFriendLoaded(Object* LoadedObject);// 0x13fbefc
	void CancelPoseWithFriend();// 0x13fbee8

--------------------------------
Class: PostProcessManager.Actor.Object
	LinearColor OutlineColor;//[Offset: 0x2c8, Size: 0x10]
	float OutlineThickness;//[Offset: 0x2d8, Size: 0x4]
	bool IsPPEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	LinearColor FresnelColor;//[Offset: 0x2e0, Size: 0x10]
	float FresnelIntensity;//[Offset: 0x2f0, Size: 0x4]
	bool IsOutlineEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool IsFresnelEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	<enum,OutlineConfig> DifferentOutline;//[Offset: 0x2f8, Size: 0x3c]
	void SetMobileCustomDepth(bool IsEnable, int Depth);// 0x13fc6d8
	PostProcessVolume* GetPPVByTag(FName TagName);// 0x13fc658
	static PostProcessManager* GetInstance();// 0x13fc630
	PostProcessVolume* GetActivePPV();// 0x13fc608
	void EnableDrawOutlineEffect(bool IsEnable);// 0x13fc588

--------------------------------
Class: OutlineConfig
	LinearColor Color;//[Offset: 0x0, Size: 0x10]
	float Thickness;//[Offset: 0x10, Size: 0x4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: PostureRecognitionComponent.SceneComponent.ActorComponent.Object
	delegate OnAccelerateMoveUpdate;//[Offset: 0x238, Size: 0xc]
	delegate OnDecelerateMoveUpdate;//[Offset: 0x244, Size: 0xc]
	delegate OnUniformMoveUpdate;//[Offset: 0x250, Size: 0xc]
	delegate OnChangeMovingState;//[Offset: 0x25c, Size: 0xc]
	float MinAccelerationThreshold;//[Offset: 0x268, Size: 0x4]
	float MinDccelerationThreshold;//[Offset: 0x26c, Size: 0x4]
	Vector CurMoveSpeed;//[Offset: 0x270, Size: 0xc]
	Vector CurMoveAcc;//[Offset: 0x27c, Size: 0xc]
	byte CurMovingType;//[Offset: 0x288, Size: 0x1]

--------------------------------
Class: PropDropOutMethodInterface.Interface.Object
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, float ZOffset);// 0x1400340
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset);// 0x1400080
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn);// 0x13fff84
	void DropToTarget(ItemDefineID DefineID, int count, BackpackComponent* Backpack);// 0x13ffe6c
	void DropToGround(out const PickUpItemData PropData, Transform WrapperTrans);// 0x13ffc20
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Character* DeadPawn);// 0x13ffad8

--------------------------------
Class: PubgmAutoRun.ActorComponent.Object
	delegate PubgmAutoRunSimulateAction;//[Offset: 0xbc, Size: 0xc]
	bool bRoutePointInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	XTPoint*[] RoutePoints;//[Offset: 0xcc, Size: 0xc]
	void VehicleTowardTo(float X, float Y, float Z);// 0x1402be0
	void VehicleMoveTo(float X, float Y, float Z);// 0x1402ae0
	void VehicleMoveAndTowardTo(float X, float Y, float Z, float X1, float Y1, float Z1);// 0x1402908
	void OnPubgmAutoRunSimulateAction__DelegateSignature(int SimActionType);// 0x1c01fa0
	static bool NeedCmdAutoRun();// 0x14028e0
	void NativeSimulateAction(int SimActionType);// 0x1402868
	void InitRoutePoint();// 0x1402854
	void GMGotoPosition(int X, int Y, int Z);// 0x1402754
	Vector[] GetRangeActorsPostions(int ActorType, Vector OriginPos, float RangeRadius);// 0x14025bc
	Vector GetPoisonCircleLocation();// 0x1402574
	static float GetPlayerSpeed(int SpeedIdx);// 0x14024f0
	bool GetNearestXTPointToVehicle(out Transform FirstPoint, out Transform SecendPoint, bool bNext);// 0x1402300
	float ForceVehiclePosPull(bool bNext);// 0x140226c

--------------------------------
Class: XTPoint.Actor.Object
	int CustomIValue;//[Offset: 0x2c8, Size: 0x4]
	int GetIntValueTwo();// 0x1413dd0
	int GetIntValueThree();// 0x1556314
	int GetIntValueOne();// 0x15562e4

--------------------------------
Class: PVEAutoRunTest.ActorComponent.Object
	Vector[] DstPointArray;//[Offset: 0xbc, Size: 0xc]
	int MaxMoveTime;//[Offset: 0xc8, Size: 0x4]
	int MaxDstStayTime;//[Offset: 0xcc, Size: 0x4]
	int KillAllTime;//[Offset: 0xd0, Size: 0x4]
	int StatRecordTime;//[Offset: 0xd4, Size: 0x4]

--------------------------------
Class: PVECircleMgrComponent.CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	int CircleIndex;//[Offset: 0x1b0, Size: 0x4]
	<int,int> CircleIDToCircleIndexMap;//[Offset: 0x1b4, Size: 0x3c]
	CirCleCfg PrevCircleCfg;//[Offset: 0x1f0, Size: 0x80]
	bool IsFirstCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	void OnCircleMoveEnd(int Index);// 0x1403694
	void NextCircleWithCircleID(int CircleID);// 0x140361c
	void NextCircle();// 0x1403608
	void InitPVECircleDeployConfig(out GameLevelDesc LevelDesc, out LevelData LevelData);// 0x140345c

--------------------------------
Class: PVEDecorator.Actor.Object
	int Health;//[Offset: 0x2d0, Size: 0x4]
	void OnDie();// 0x13416fc
	bool IsDead();// 0x1403f4c

--------------------------------
Class: PVEProjectileBase.Actor.Object
	PVEProjectileMovementComponent* PMComp;//[Offset: 0x2c8, Size: 0x4]
	bool bDestroyAfterHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	bool bIgnoreOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	UTSkill* OwnerSkill;//[Offset: 0x2d0, Size: 0x4]
	<Actor*,int> ActorImpactTimes;//[Offset: 0x2d4, Size: 0x3c]
	Vector TargetActorLocation;//[Offset: 0x310, Size: 0xc]
	Vector TargetActorOffset;//[Offset: 0x31c, Size: 0xc]
	Vector InitLocation;//[Offset: 0x328, Size: 0xc]
	Vector LastLocation;//[Offset: 0x334, Size: 0xc]
	float TraceGroundDepth;//[Offset: 0x340, Size: 0x4]
	bool bUseHighArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	bool bIsRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1]
	bool bIsHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 0x1]
	bool bNeedCheckMaxDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 0x1]
	float DelayFlyTime;//[Offset: 0x348, Size: 0x4]
	FName AttachSocketName;//[Offset: 0x350, Size: 0x8]
	bool bIsHoming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	float HomingAccelerationMagnitude;//[Offset: 0x35c, Size: 0x4]
	float Speed;//[Offset: 0x360, Size: 0x4]
	float MaxDistance;//[Offset: 0x364, Size: 0x4]
	float ProjectileGravityScale;//[Offset: 0x368, Size: 0x4]
	Actor* TargetActor;//[Offset: 0x36c, Size: 0x4]
	float HitDamage;//[Offset: 0x370, Size: 0x4]
	bool bHasBeenThrowedOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	HighArcParam[] HighArcGravityScales;//[Offset: 0x378, Size: 0xc]
	void StartFly(Vector Velocity, float GravityScale);// 0x14057fc
	void OnStartFly();// 0x14057e8
	void OnRep_AttachSocketName();// 0x14057d4
	void OnProjectileDestroy();// 0x14057c0
	void OnImpact(out const HitResult _ImpactResult);// 0x1405724
	void CauseDamageToActor(Actor* ImpactActor);// 0x14056ac

--------------------------------
Class: PVEProjectileMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x150, Size: 0x4]

--------------------------------
Class: HighArcParam
	float HeightDiff;//[Offset: 0x0, Size: 0x4]
	float GravityScale;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PVPBossMgr.ActorComponent.Object

--------------------------------
Class: ZombieBaseGameMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	float BackupEnterTimer;//[Offset: 0x1140, Size: 0x4]
	bool IsEnableBackupPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1144, Size: 0x1]
	bool IsGMEnablePoisonFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1145, Size: 0x1]
	int[] WeatherPhases;//[Offset: 0x1150, Size: 0xc]
	int CurWeatherPhaseIndex;//[Offset: 0x115c, Size: 0x4]
	int CurWeatherPhase;//[Offset: 0x1160, Size: 0x4]
	enum[] WeatherProcessArray;//[Offset: 0x1164, Size: 0xc]
	enum CurrentNightStatus;//[Offset: 0x1170, Size: 0x1]
	float AIAttackZombieScale;//[Offset: 0x1174, Size: 0x4]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1178, Size: 0x1]
	bool IsConfigRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1179, Size: 0x1]
	bool IsConfigZombieDestroyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117a, Size: 0x1]
	byte ConfigLastCircleCountToDestroyActor;//[Offset: 0x117b, Size: 0x1]
	bool IsConfigRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117c, Size: 0x1]
	bool IsConfigPoisonFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117d, Size: 0x1]
	Actor*[] OccupiedPlayerStartGroupList;//[Offset: 0x1180, Size: 0xc]
	STExtraPlayerStartGroup*[] UnOccupiedPlayerStartGroupList;//[Offset: 0x118c, Size: 0xc]
	int VehicleExplosionLifeSpan;//[Offset: 0x1198, Size: 0x4]
	int CaculateCatchUpByMonsterInterFrame;//[Offset: 0x119c, Size: 0x4]
	int TmpCatchUpInterTimes;//[Offset: 0x11a0, Size: 0x4]
	bool bMapLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a4, Size: 0x1]
	int iRandomPolicestationIndex;//[Offset: 0x11a8, Size: 0x4]
	void SetNightStatus(enum Status);// 0x1557960
	void SetGameEndReportData();// 0x132b318
	void SetForbidNightVehicle(bool isForbid);// 0x15578e0
	void NotifyGameModeInit();// 0x15578c4
	void NextWeatherPhaseByType(enum DayPhase);// 0x155784c
	void NextWeatherPhase();// 0x12e82e4
	void LoadMapFinished();// 0x1557838
	bool IsInNight();// 0x1557808
	int GetWeatherPhase();// 0x15577d8
	Actor*[] GetOccupiedPlayerStartGroupList();// 0x15576b8
	int GetCurWeatherStateTimes();// 0x1557690
	enum GetCurWeatherState();// 0x1557668
	int GetCurWeatherPhaseIndex();// 0x132aef0
	void GenerateCatchupByMonsterDistance();// 0x1557654

--------------------------------
Class: STExtraPlayerStartGroup.Actor.Object
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	int TeamID;//[Offset: 0x2cc, Size: 0x4]

--------------------------------
Class: PVPZombieBaseGameMode.ZombieBaseGameMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: PVPZombieGameMode.PVPZombieBaseGameMode.ZombieBaseGameMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString InfectionAreaLevel;//[Offset: 0x11ac, Size: 0xc]

--------------------------------
Class: PVPZombieStandardGameMode.PVPZombieGameMode.PVPZombieBaseGameMode.ZombieBaseGameMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: QuickSignMarkWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	float MaxAlpha;//[Offset: 0x2f0, Size: 0x4]
	float MinAlpha;//[Offset: 0x2f4, Size: 0x4]
	Vector4 Limit;//[Offset: 0x300, Size: 0x10]
	Vector2D UIOffset;//[Offset: 0x310, Size: 0x8]
	Vector4 ActiveCenterRect;//[Offset: 0x320, Size: 0x10]
	FString DistAppendix;//[Offset: 0x330, Size: 0xc]
	bool IsInActiveCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	TextBlock* TextBlock_Distance;//[Offset: 0x340, Size: 0x4]
	CanvasPanelSlot* SelfCanvasSlot;//[Offset: 0x344, Size: 0x4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x348, Size: 0x4]
	void SetWorldPos(out const Vector Loc);// 0x1409af4
	void OnWidgetAlphaChange(const float NewAlpha);// 0x1c01fa0
	void OnCenterOffsetChange(out const Vector2D CenterOffset);// 0x1c01fa0

--------------------------------
Class: RadiationCircle.Actor.Object
	StaticMeshComponent* CylinderMesh;//[Offset: 0x2c8, Size: 0x4]
	StaticMeshComponent* CylinderMeshBase;//[Offset: 0x2cc, Size: 0x4]
	STExtraGameStateBase* SGameStatNew;//[Offset: 0x2d0, Size: 0x4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x2e4, Size: 0x4]
	MaterialInstanceDynamic* DynamicMatBase;//[Offset: 0x2e8, Size: 0x4]
	void InitRadiationCircle();// 0x140b4ec
	void HandleOnSafeZoneTips(float Val);// 0x140b474

--------------------------------
Class: RefitVehicleHandle.Object
	<int,FString> SlotConfig;//[Offset: 0x1c, Size: 0x3c]
	float Scale;//[Offset: 0x58, Size: 0x4]
	Vector Location;//[Offset: 0x5c, Size: 0xc]

--------------------------------
Class: ReloadWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: RevivalCardItemHandle.BattleItemHandleBase.ItemHandleBase.Object
	uint32 DroperPlayerKey;//[Offset: 0x9c, Size: 0x4]
	FString DroperPlayerName;//[Offset: 0xa0, Size: 0xc]
	BackpackComponent* pBackpackComp;//[Offset: 0xac, Size: 0x4]
	void TimerUseSelf();// 0x140d1b4
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x13086dc
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x13082c8

--------------------------------
Class: RevivalModeComponent.GameModeBaseComponent.ActorComponent.Object
	<uint32,int> DynamicBattleRank;//[Offset: 0xc4, Size: 0x3c]
	void RemoveDynamicRank(uint32 PlayerKey);// 0x140d7f4
	void OnPlayerEscape(STExtraPlayerState* PlayerState, bool bIsPlayerAlive);// 0x140d730
	bool IsAllTeamInRevival(int TeamID);// 0x140d6b0
	DynamicBattleRankInfo[] GetDynamicBattleRankInfoList();// 0x140d5f0
	void AddDynamicRankWinner(uint32 PlayerKey);// 0x140d578
	void AddDynamicRank(uint32 PlayerKey);// 0x140d500

--------------------------------
Class: DynamicBattleRankInfo
	int BattleRank;//[Offset: 0x0, Size: 0x4]
	uint64 PlayerUID;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: RevivalPointInteractionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	STExtraPlayerController* MyPC;//[Offset: 0x2ec, Size: 0x4]
	Image* Image_ItemCDBar;//[Offset: 0x2f0, Size: 0x4]
	TextBlock* TextBlock_ItemCDTime;//[Offset: 0x2f4, Size: 0x4]
	int TimeToShowDigist;//[Offset: 0x2f8, Size: 0x4]
	bool bShowRevivalCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bResetCountDownTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	void ShowHideTowerUI(bool isFreeCameraInOB);// 0x140e444

--------------------------------
Class: SecretRoom.UAERegionActor.Actor.Object
	SceneComponent* Root;//[Offset: 0x2d4, Size: 0x4]
	void SpawnItems();// 0x140f5c0

--------------------------------
Class: SecurityLogWeaponCollector.ActorComponent.Object
	STExtraBaseCharacter* OwnerCH;//[Offset: 0xbc, Size: 0x4]
	SecuryInfoComponent* SecurityLogSender;//[Offset: 0xc0, Size: 0x4]
	void OnCharacterWeaponStartFire();// 0x140fd10
	void OnCharacterWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x140facc
	void OnCharacterUsingWeaponChanged(byte TargetChangeSlot);// 0x140fa4c
	void OnCharacterShootTarget(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x140f934
	void OnCharacterAimModeChanged(byte Mode);// 0x1351dbc
	bool IsInADSAimState();// 0x140f918
	void CheckReportSecAttackFlowWithAttackFlow(out const AttackFlow AttackFlow);// 0x140f868
	void CheckReportSecAttackFlow();// 0x140f854

--------------------------------
Class: SeekAndLockCrossHairComponent.CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FString BoxFrameUIPath;//[Offset: 0x188, Size: 0xc]
	Vector2D LockFrameCornerLineSize;//[Offset: 0x194, Size: 0x8]
	<enum,LinearColor> LockFrameColorConfig;//[Offset: 0x19c, Size: 0x3c]
	bool bDrawDebugSeekAndLockFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	SeekAndLockWeaponComponent* SeekAndLockWeaponComponent;//[Offset: 0x1dc, Size: 0x4]
	Texture2D* BoxFrameTexture;//[Offset: 0x1e0, Size: 0x4]
	void DrawHUD(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x1413654

--------------------------------
Class: SeekAndLockProjectileComponent.NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float ShootDirectFlyTime;//[Offset: 0x3e0, Size: 0x4]
	float TurnDirectionRadSpeed;//[Offset: 0x3e4, Size: 0x4]
	<enum,float> FollowTargetTimeByStageMap;//[Offset: 0x3e8, Size: 0x3c]
	SeekAndLockRPGBulletUploadData SeekAndLockRPGBulletUploadData;//[Offset: 0x424, Size: 0x8]

--------------------------------
Class: SeekAndLockRPGBullet.ExplosionProjectileBullet.ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	float MaxHp;//[Offset: 0x608, Size: 0x4]
	float SpeedAcceleration;//[Offset: 0x60c, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x610, Size: 0x4]
	float DelayBurstSpeedUpTime;//[Offset: 0x614, Size: 0x4]
	SeekAndLockRPGBulletLaunchParams ServerSeekAndLockLaunchParams;//[Offset: 0x620, Size: 0x70]
	RPGBulletSeekAndLockData SeekAndLockData;//[Offset: 0x690, Size: 0x14]
	float CurFlyTime;//[Offset: 0x6a4, Size: 0x4]
	float CurHP;//[Offset: 0x6a8, Size: 0x4]
	float CurDelayBurstSpeedUpTime;//[Offset: 0x6ac, Size: 0x4]
	bool bHasBurstSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	float TakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x14144a4
	void SetSeekAndLockData(out const RPGBulletSeekAndLockData Data);// 0x14143ec
	void RPC_Multicast_StartSeekAndLockLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID, out const RPGBulletSeekAndLockData Data);// 0x1414160
	void OnRep_ServerSeekAndLockLaunchParams(out const SeekAndLockRPGBulletLaunchParams OldParam);// 0x1414030
	void LaunchOnServer(float Speed, out Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x1413e00
	float GetMaxBulletFlySpeed();// 0x1413dd0
	void BPOnStartBurstSpeedUp();// 0x1c01fa0

--------------------------------
Class: SeekAndLockRPGBulletLaunchParams
	ProjectileBulletLaunchParams BaseParam;//[Offset: 0x0, Size: 0x50]
	RPGBulletSeekAndLockData SeekAndLockData;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: RPGBulletSeekAndLockData
	float DirectFlyTime;//[Offset: 0x0, Size: 0x4]
	float TurnDirectionRadSpeed;//[Offset: 0x4, Size: 0x4]
	float FollowTargetTime;//[Offset: 0x8, Size: 0x4]
	Actor* FollowTarget;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: SeekAndLockWeapon3DWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	float LandscapeRotation;//[Offset: 0x2ec, Size: 0x4]
	float Offset;//[Offset: 0x2f0, Size: 0x4]
	float Width;//[Offset: 0x2f4, Size: 0x4]
	FName materialXParameterName;//[Offset: 0x2f8, Size: 0x8]
	float CPPNavigatorTickRate;//[Offset: 0x300, Size: 0x4]
	MaterialInstanceDynamic* CompassMat;//[Offset: 0x304, Size: 0x4]
	int DisplayCharRotation;//[Offset: 0x310, Size: 0x4]
	SeekAndLockWeaponComponent* SeekAndLockWeaponComponent;//[Offset: 0x314, Size: 0x4]
	SeekAndLockCrossHairComponent* SeekAndLockCrossHairComponent;//[Offset: 0x318, Size: 0x4]
	CustomWidgetComponent* CustomWidgetComp;//[Offset: 0x328, Size: 0x4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x32c, Size: 0x4]
	STExtraPlayerCharacter* OwnerPlayer;//[Offset: 0x330, Size: 0x4]
	void UpdateRT();// 0x1415400
	void Show3DUI();// 0x14153e4
	void SetCompassMat(MaterialInstanceDynamic* InCompassMat);// 0x141536c
	void OnPostInitWidget();// 0x1c01fa0
	bool IsTextNotEqualTo(FText SelfValue, FText OtherText, bool ReverseResult);// 0x13d64a8
	bool IsStrNotEqualToText(FString InValue, FText InText, bool ReverseResult);// 0x13d6088
	bool IsModToZero(int InValue, int ModValue);// 0x14152a8
	bool IsIntNotEqualToText(int InValue, FText InText, bool ReverseResult);// 0x13d5c7c
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x14151e4
	void Hide3DUI();// 0x1346880
	void HandleWeaponScopeOut(bool bIsBegin);// 0x1415164
	void HandleWeaponScopeIn(bool bIsBegin);// 0x14150e4
	void HandleWeaponGetOwner(Actor* OwnerActor);// 0x141506c
	void HandleChangeTraceTarget(out const HitResult HitInfo);// 0x1414fd0
	void HandleChangeSeekAndLockStageTip(FString Tip);// 0x1414e78
	Rotator GetPlayerLookRotation();// 0x13d5c34
	void ExtraForGuidedMissileRenderStyle(bool bSet);// 0x1414df8
	void BPChangeTraceTargetDis(float Distance);// 0x1c01fa0
	void BPChangeSeekAndLockStageTip(FString Tip);// 0x1c01fa0
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x1414d34

--------------------------------
Class: SeekAndLockOwnerInterface.Interface.Object
	void StopPlayedLockedByEnemy2DSound();// 0x1416db0
	void StopPlayedEnemyLaunchRocket2DSound();// 0x1416d94
	void PlayLockedByEnemy2DSound();// 0x1416d78
	void PlayEnemyLaunchRocket2DSound();// 0x12f95b4
	bool NeedPlayLockedByEnemy2DSoundOnSimulatedClient();// 0x1416d48
	Vector GetLocationForSeekAndLock();// 0x1416cf8
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x1416c70

--------------------------------
Class: ServerSwitchComponent.ActorComponent.Object
	delegate OnFPSMonitorConfigSwitchRecv;//[Offset: 0xbc, Size: 0xc]
	delegate OnFPSLowWarning;//[Offset: 0xc8, Size: 0xc]
	FPSMonitorConfigSwitch FPSMonitorConfigSwitch;//[Offset: 0xd4, Size: 0x14]
	float LowFPSWarningTipsLastTime;//[Offset: 0xe8, Size: 0x4]
	FString[] FPSLowWarningSDKMatch;//[Offset: 0xec, Size: 0xc]
	bool bLocalSwitcherFPSLowWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	void RequireConfigRPC();// 0x1418638
	void OnUserQualitySettingChanged(int renderlevel);// 0x14185c0
	void MakeLowFPSWarningEx();// 0x14185ac
	void MakeLowFPSWarning(float targetFPS, float currentFPS);// 0x14184f0
	void CountingDown();// 0x14184dc
	void CloseFPSCheck();// 0x14184c8
	void AnswerconfigRPC(FPSMonitorConfigSwitch configswitch);// 0x1418414

--------------------------------
Class: FPSMonitorConfigSwitch
	bool bFPSMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float FPSCollectInternal;//[Offset: 0x4, Size: 0x4]
	int FPSCollectCountForGroup;//[Offset: 0x8, Size: 0x4]
	float FPSThreshold;//[Offset: 0xc, Size: 0x4]
	int FPSLowActionType;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ShootingPracticeTarget.Actor.Object
	float MaxHealth;//[Offset: 0x2c8, Size: 0x4]
	float UpDownChangeSpeed;//[Offset: 0x2cc, Size: 0x4]
	Rotator HorizontalMeshRelativeRot;//[Offset: 0x2d0, Size: 0xc]
	Rotator VerticalMeshRelativeRot;//[Offset: 0x2dc, Size: 0xc]
	float ResetAndGetUpTimeAfterShootDown;//[Offset: 0x2e8, Size: 0x4]
	float CurHealth;//[Offset: 0x2ec, Size: 0x4]
	bool bIsUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bHasActivatedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	delegate DestroyShootingPracticeTargetDelegate;//[Offset: 0x2f4, Size: 0xc]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x300, Size: 0x4]
	SmoothActorMoveComponent* MoveComp;//[Offset: 0x304, Size: 0x4]
	void SetUpOrDownOnServer(bool bUp);// 0x1419374
	void RPC_NetMulticast_SetUpOrDownOnServer(bool bUp);// 0x14192ac
	void RPC_NetMulticast_NotifyBroken();// 0x1419250
	void ResetAndGetUpOnServer();// 0x141923c
	void OnRep_bIsUp();// 0x1419228
	void OnRep_bHasActivatedMove();// 0x1419214
	void HandleBroken(bool bFromClientBeginPlay);// 0x141918c

--------------------------------
Class: SmoothActorMoveComponent.ActorComponent.Object
	SegamentData[] MoveData;//[Offset: 0xbc, Size: 0xc]
	bool bAutoMoveWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	enum LoopMoveMode;//[Offset: 0xc9, Size: 0x1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	void StopMove();// 0x14269ac
	void StartMove();// 0x1426998

--------------------------------
Class: SegamentData
	Vector TargetLocation;//[Offset: 0x0, Size: 0xc]
	float MoveSpeed;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ShootingUIWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	float ReloadingCD;//[Offset: 0x2ec, Size: 0x4]
	FText ReloadCountDownText;//[Offset: 0x2f0, Size: 0xc]
	FText GunBulletText;//[Offset: 0x2fc, Size: 0xc]
	FText BulletLeftCount;//[Offset: 0x308, Size: 0xc]
	Image* ReloadCDMask;//[Offset: 0x314, Size: 0x4]
	Image* ReloadBtnBG;//[Offset: 0x318, Size: 0x4]
	Button* SprintBtn;//[Offset: 0x31c, Size: 0x4]
	Button* ReloadBtn;//[Offset: 0x320, Size: 0x4]
	Image* FireBtn;//[Offset: 0x324, Size: 0x4]
	STExtraBaseCharacter* CurPlayerBaseCharacter;//[Offset: 0x328, Size: 0x4]
	delegate OnReloadCountDownChangeDelegate;//[Offset: 0x32c, Size: 0xc]
	delegate OnGunBulletNumChangeDelegate;//[Offset: 0x338, Size: 0xc]
	delegate OnBulletLeftNumChangeDelegate;//[Offset: 0x344, Size: 0xc]

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0xdc, Size: 0x4]
	ButtonStyle WidgetStyle;//[Offset: 0xe0, Size: 0x298]
	LinearColor ColorAndOpacity;//[Offset: 0x378, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x388, Size: 0x10]
	byte ClickMethod;//[Offset: 0x398, Size: 0x1]
	byte TouchMethod;//[Offset: 0x399, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 0x1]
	bool IsPassMouseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 0x1]
	int nClickCd;//[Offset: 0x39c, Size: 0x4]
	delegate OnClicked;//[Offset: 0x3a0, Size: 0xc]
	delegate OnPressed;//[Offset: 0x3ac, Size: 0xc]
	delegate OnReleased;//[Offset: 0x3b8, Size: 0xc]
	delegate OnHovered;//[Offset: 0x3c4, Size: 0xc]
	delegate OnUnhovered;//[Offset: 0x3d0, Size: 0xc]
	delegate OnMouseButtonDownEvent;//[Offset: 0x3e0, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x2383cc8
	void SetStyle(out const ButtonStyle InStyle);// 0x2383c1c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x2383ba0
	void SetClickMethod(byte InClickMethod);// 0x2383b28
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x2383aac
	bool IsPressed();// 0x2383a84

--------------------------------
Class: ShootVerifyBaseComp.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object

--------------------------------
Class: ShootWeaponStateManager.WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object

--------------------------------
Class: ShowActorFrameComponent.SceneComponent.ActorComponent.Object
	FrameUITransformData FrameUITransformData;//[Offset: 0x240, Size: 0x40]
	MaterialBillboardComponent* FrameUI;//[Offset: 0x280, Size: 0x8]
	int TranslucentSortPriority;//[Offset: 0x288, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x28c, Size: 0x4]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x290, Size: 0x4]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x298, Size: 0x4]
	FString FrameDetailsUIPath;//[Offset: 0x29c, Size: 0xc]
	FString FrameDetailsParentWidgetName;//[Offset: 0x2a8, Size: 0xc]
	FString FrameDetailsParentOuterName;//[Offset: 0x2b4, Size: 0xc]
	FString BPFunction_WhenWidgetCreate;//[Offset: 0x2c0, Size: 0xc]
	FString BPFunction_WhenWidgetDestroy;//[Offset: 0x2cc, Size: 0xc]
	ActorPositionWidget* DetailsWidget;//[Offset: 0x2d8, Size: 0x4]
	ActorPositionWidget* GetDetailsWidget();// 0x141b950
	void DestroyFrameUI();// 0x141b93c
	bool CreateFrameUI(int ParamIfNecessary);// 0x141b8bc

--------------------------------
Class: FrameUITransformData
	Transform Offset;//[Offset: 0x0, Size: 0x30]
	float BaseSizeX;//[Offset: 0x30, Size: 0x4]
	float BaseSizeY;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: VehicleAnimInstance.AnimInstance.Object
	WheeledVehicleMovementComponent* WheeledVehicleMovementComponent;//[Offset: 0x6f0, Size: 0x4]
	WheeledVehicle* GetVehicle();// 0x39d84ec

--------------------------------
Class: WheeledVehicle.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x30c, Size: 0x4]
	WheeledVehicleMovementComponent* VehicleMovement;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: STVehicleAnimInstance.VehicleAnimInstance.AnimInstance.Object
	Vector RotationInputDir;//[Offset: 0x6f4, Size: 0xc]
	Vector MoveInput;//[Offset: 0x700, Size: 0xc]
	Vector MoveInputExt;//[Offset: 0x70c, Size: 0xc]
	bool HelicopterEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 0x1]
	float HelicopterStartAnimationRate;//[Offset: 0x71c, Size: 0x4]
	bool HelicopterWingStartFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]
	bool HelicopterWingEndFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 0x1]
	bool HelicopterMoveStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x722, Size: 0x1]
	bool HelicopterMoveStartUpStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x723, Size: 0x1]
	bool HelicopterIsinIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 0x1]
	bool MotorcycleHandleStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 0x1]
	Rotator MotorcycleHandleDirOrg;//[Offset: 0x728, Size: 0xc]
	FName MotorcycleHandleBoneName;//[Offset: 0x738, Size: 0x8]
	float MotorcycleHandleMaxAngle;//[Offset: 0x740, Size: 0x4]
	Rotator RotSpeedLeft;//[Offset: 0x744, Size: 0xc]
	Rotator RotSpeedRight;//[Offset: 0x750, Size: 0xc]
	float SpeedMax;//[Offset: 0x75c, Size: 0x4]
	Rotator RotRPMLeft;//[Offset: 0x760, Size: 0xc]
	Rotator RotRPMRight;//[Offset: 0x76c, Size: 0xc]
	float RPMMax;//[Offset: 0x778, Size: 0x4]
	bool TickIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 0x1]
	Rotator MPHNeedleRot;//[Offset: 0x780, Size: 0xc]
	Rotator RPMNeedleRot;//[Offset: 0x78c, Size: 0xc]
	void UpdateHelicopterEffect(bool IsShow);// 0x1343e64

--------------------------------
Class: SimulatedSlidingAnimInstance.STVehicleAnimInstance.VehicleAnimInstance.AnimInstance.Object
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x798, Size: 0x4]
	SimulatedSlidingMovementComponent* SimulatedSlidingMovementComp;//[Offset: 0x79c, Size: 0x4]
	float C_ForwardSpeed;//[Offset: 0x7a0, Size: 0x4]
	enum C_SnowBoardState;//[Offset: 0x7a4, Size: 0x1]
	bool C_HandleBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a5, Size: 0x1]
	bool PlayingBrakeMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a6, Size: 0x1]
	AnimSequence* Ski_CurrentPlayingLandAnim;//[Offset: 0x7a8, Size: 0x4]
	AnimSequence* Ski_CurrentPlayingJumpAnim;//[Offset: 0x7ac, Size: 0x4]
	bool bIsSkiJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]
	bool bIsSkiFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b1, Size: 0x1]
	bool bIsSkiLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b2, Size: 0x1]
	bool bIsSkiPlayingLandAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b3, Size: 0x1]
	bool bIsSkiPlayingJumpAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 0x1]
	AnimSequence* Ski_JumpStationary;//[Offset: 0x7b8, Size: 0x4]
	AnimSequence* Ski_DownTurnLR;//[Offset: 0x7bc, Size: 0x4]
	AnimSequence* Ski_DownTurnRL;//[Offset: 0x7c0, Size: 0x4]
	AnimSequence* Ski_DownTurnFD;//[Offset: 0x7c4, Size: 0x4]
	AnimSequence* Ski_Falling;//[Offset: 0x7c8, Size: 0x4]
	AnimSequence* Ski_DownFallLandingAdditive;//[Offset: 0x7cc, Size: 0x4]
	AnimSequence* Ski_DownFallLandingHard;//[Offset: 0x7d0, Size: 0x4]
	CurveFloat* SkiSpeedToMaxTurnCurve;//[Offset: 0x7d4, Size: 0x4]
	CurveFloat* SkiSpeedToMaxCrouchCurve;//[Offset: 0x7d8, Size: 0x4]
	float SkiBlendSpaceXInput;//[Offset: 0x7dc, Size: 0x4]
	float SkiBlendSpaceYInput;//[Offset: 0x7e0, Size: 0x4]
	float SkiPlayJumpAnimRate;//[Offset: 0x7e4, Size: 0x4]
	float SkiPlayJumpAnimRateMin;//[Offset: 0x7e8, Size: 0x4]
	float SkiPlayJumpAnimRateMax;//[Offset: 0x7ec, Size: 0x4]
	float SkiJumpStationaryRiseRate;//[Offset: 0x7f0, Size: 0x4]
	float SkiDownTurnLRRate;//[Offset: 0x7f4, Size: 0x4]
	float SkiDownTurnRLRate;//[Offset: 0x7f8, Size: 0x4]
	float SkiDownTurnFDRate;//[Offset: 0x7fc, Size: 0x4]
	void PlayLoopBrakeMontage();// 0x1c01fa0
	void PlayEndBrakeMontage();// 0x1c01fa0

--------------------------------
Class: SimulatedSlidingMovementComponent.STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float StartBrakeMontageSpeed;//[Offset: 0x424, Size: 0x4]
	float EndBrakeMontageSpeed;//[Offset: 0x428, Size: 0x4]
	float SpeedThresholds;//[Offset: 0x42c, Size: 0x4]
	float SpeedUpImpulse;//[Offset: 0x430, Size: 0x4]
	float JumpImpulse;//[Offset: 0x434, Size: 0x4]
	float JumpImpulseBig;//[Offset: 0x438, Size: 0x4]
	float ImpulseMinusGradeCompensate;//[Offset: 0x43c, Size: 0x4]
	float MaxStayAirTimeUseServerCtr;//[Offset: 0x440, Size: 0x4]
	float StayAirTimer;//[Offset: 0x444, Size: 0x4]
	float FallingLandHardThreshold;//[Offset: 0x448, Size: 0x4]
	float JumpRiseBaseTime;//[Offset: 0x45c, Size: 0x4]
	float AutoExitHeightThreshold;//[Offset: 0x460, Size: 0x4]
	float HitTestToSeaLevelBias;//[Offset: 0x464, Size: 0x4]
	enum SnowBoardState;//[Offset: 0x468, Size: 0x1]
	float BigJumpAnimReadyTime;//[Offset: 0x46c, Size: 0x4]
	enum BigJumpAnimSnowBoardState;//[Offset: 0x470, Size: 0x1]
	bool EnableFppCameraJumpChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1]
	float FppCameraJumpChangeTimer;//[Offset: 0x474, Size: 0x4]
	float FallingEnterTime;//[Offset: 0x484, Size: 0x4]
	float FlyingEnterTime;//[Offset: 0x48c, Size: 0x4]
	bool IsEnableExitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	float DisToLand;//[Offset: 0x49c, Size: 0x4]
	Vector ImpactPoint;//[Offset: 0x4a0, Size: 0xc]
	Vector ImpactNormal;//[Offset: 0x4ac, Size: 0xc]
	byte LastSurfaceType;//[Offset: 0x4b8, Size: 0x1]
	PhysicalMaterial* LastSurfacePhysicalMaterial;//[Offset: 0x4bc, Size: 0x4]
	float SpeedUpJumpDelay;//[Offset: 0x4c4, Size: 0x4]
	float SpeedUpForwardParm;//[Offset: 0x4c8, Size: 0x4]
	<byte,float> VehiclePhysicalSurfaceDragConfig;//[Offset: 0x4e0, Size: 0x3c]
	float NoMappingLinearDamping;//[Offset: 0x51c, Size: 0x4]
	float AirLinearDamping;//[Offset: 0x520, Size: 0x4]
	float GravityMaxLandDis;//[Offset: 0x524, Size: 0x4]
	float InitPowerTime;//[Offset: 0x528, Size: 0x4]
	float InitPowerCD;//[Offset: 0x52c, Size: 0x4]
	CurveFloat* InitPowerCurve;//[Offset: 0x530, Size: 0x4]
	float SlideThrottleFactor;//[Offset: 0x534, Size: 0x4]
	float BackoffThrottleFactor;//[Offset: 0x538, Size: 0x4]
	float InitPowerSpeed;//[Offset: 0x53c, Size: 0x4]
	float LandTraceMaxHeight;//[Offset: 0x540, Size: 0x4]
	float LandTraceForwardOffset;//[Offset: 0x544, Size: 0x4]
	int SlidingWheelNotInAirMinNum;//[Offset: 0x548, Size: 0x4]
	float SlidingSpeedTolerate;//[Offset: 0x54c, Size: 0x4]
	float SlidingSpeedCosAngle;//[Offset: 0x550, Size: 0x4]
	float PlayAnimDisToLand;//[Offset: 0x554, Size: 0x4]
	float InitPowerTimeCounter;//[Offset: 0x558, Size: 0x4]
	bool RepValidInitPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]
	float MinRotatorSteerInput;//[Offset: 0x574, Size: 0x4]
	float SecondRotatorYaw;//[Offset: 0x578, Size: 0x4]
	float MinRotatorSpeed;//[Offset: 0x57c, Size: 0x4]
	float StandRotatingSteerInput;//[Offset: 0x580, Size: 0x4]
	void ServerSetSnowBoardState(enum InState);// 0x141c76c
	void ServerInitPower(bool IsEnterVehicle);// 0x141c6a4
	void ServerDoJumpRoll(enum State);// 0x141c5f0
	void ServerDoJump();// 0x141c594
	void OnRep_SnowBoardState();// 0x141c580
	void OnExitVehicle();// 0x141c56c
	void OnEnterVehicle(bool IsSucc);// 0x141c4ec
	bool IsSpeedReachJumpThreshold();// 0x141c4c4
	void EnterOrExitVehicleJump(bool IsEnter);// 0x1343e64
	void DelaySpeedUpJump();// 0x141c4b0
	void ClientSetSnowBoardState(enum InState);// 0x141c3fc
	void BroadcastClientSpeedUp(bool IsEnterVehicle);// 0x141c334

--------------------------------
Class: SingleIDComponent.ActorComponent.Object

--------------------------------
Class: SkillUtils.Object
	static bool IsCurUseGrenade(STExtraBaseCharacter* pChar);// 0x141e458
	static STExtraPlayerController* GetPlayerController(Pawn* OwnerPawn);// 0x141e3e0
	static void GetParticleComps(Actor* UserActor, FName ParticleTagName, out ParticleSystemComponent*[] OutParArr);// 0x141e28c
	static MeshComponent* GetMeshCompFromCharacter(STExtraBaseCharacter* pChar, FName MeshTagName);// 0x141e1d0

--------------------------------
Class: SkirtAnimInstanceBase.AvatarDynamicAnimInstance.AnimInstance.Object
	byte CurrentPoseType;//[Offset: 0x2fc, Size: 0x1]
	bool IsOnMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x300, Size: 0x4]
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x141ee24
	bool isCothAnimEnable();// 0x141edfc
	void HandleStateChanged(enum EnteredState);// 0x141ed84
	void EnableClothAnim();// 0x141ed70
	void DisableClothAnim();// 0x141ed5c

--------------------------------
Class: SpotGroupLocSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x235, Size: 0x1]
	int SpotProbability;//[Offset: 0x238, Size: 0x4]

--------------------------------
Class: SpotLocSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x235, Size: 0x1]
	int SpotProbability;//[Offset: 0x238, Size: 0x4]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]

--------------------------------
Class: SRadarChartUserWidget.Widget.Visual.Object
	SlateBrushAsset* RadarBrush;//[Offset: 0xd4, Size: 0x4]
	Image* CenterPointImg;//[Offset: 0xd8, Size: 0x4]
	Color[] VertexColor;//[Offset: 0xdc, Size: 0xc]
	Image*[] VertexFarPointImg;//[Offset: 0xe8, Size: 0xc]
	float[] VertexScale;//[Offset: 0xf4, Size: 0xc]
	Vector2D[] VertexUV;//[Offset: 0x100, Size: 0xc]
	void OnHide();// 0x1426f2c
	void FreshChartDataToContent();// 0x1426f18

--------------------------------
Class: STAISenseEvent_Hearing.AISenseEvent.Object
	STAINoiseEvent Event;//[Offset: 0x20, Size: 0x38]

--------------------------------
Class: StatePC.State.Object

--------------------------------
Class: StatePC_Dead.StatePC.State.Object

--------------------------------
Class: StatePC_Fight.StatePC.State.Object
	void DelayStopSound();// 0x1428b08

--------------------------------
Class: StatePC_Finish.StatePC.State.Object

--------------------------------
Class: StatePC_InExPlane.StatePC.State.Object

--------------------------------
Class: StatePC_Initial.StatePC.State.Object

--------------------------------
Class: StatePC_InPlane.StatePC.State.Object

--------------------------------
Class: StatePC_ParachuteJump.StatePC.State.Object
	float JumpRadius;//[Offset: 0x24, Size: 0x4]
	float JumpHeight;//[Offset: 0x28, Size: 0x4]
	float JumpHeightMin;//[Offset: 0x2c, Size: 0x4]
	float JumpHeightMax;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: StatePC_ParachuteOpen.StatePC.State.Object
	float ForwardDiffHeightThreshold;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: StatHUD.HUD.Actor.Object
	void ToggleSlateStat();// 0x12e82e4

--------------------------------
Class: StaticMeshActorFM.Actor.Object
	HierarchicalInstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: StaticMeshLoaderComponent.SceneComponent.ActorComponent.Object
	int DelayTime;//[Offset: 0x238, Size: 0x4]
	Vector LocationOffset;//[Offset: 0x23c, Size: 0xc]
	Vector RotationOffset;//[Offset: 0x248, Size: 0xc]
	Vector ScaleOffset;//[Offset: 0x254, Size: 0xc]
	bool EnableInLowLevelDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	StaticMesh* StaticMeshPtr;//[Offset: 0x268, Size: 0x28]
	StaticMeshComponent* LoadedComponent;//[Offset: 0x290, Size: 0x4]
	StaticMeshComponent* GetLoadedComponent();// 0x13e2c60

--------------------------------
Class: STBuffAction_AddRemoveBuff.STBuffAction.Object
	bool IsAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int BuffID;//[Offset: 0x38, Size: 0x4]
	int SkillID;//[Offset: 0x3c, Size: 0x4]
	int CauseSkillConfigArrayNum;//[Offset: 0x40, Size: 0x4]
	enum TargetSourceType;//[Offset: 0x44, Size: 0x1]
	float AreaOfRadiusSqr;//[Offset: 0x48, Size: 0x4]
	float Interval;//[Offset: 0x4c, Size: 0x4]
	void OnTick(float DetalTime);// 0x12ebfe0
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void HandleAreaOfMonster(STExtraCharacter* Character, STBuff* Buff);// 0x1429e38
	void ExecuteTarget(STExtraCharacter* Target, STExtraCharacter* Character, STBuff* Buff);// 0x1429d38

--------------------------------
Class: STBuffAction_AIMoveToLocation.STBuffAction.Object
	Vector TargetLocation;//[Offset: 0x34, Size: 0xc]
	void OnTakeDamageEvent(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Causer);// 0x142a3e8
	void OnInitialize();// 0x133d2f0
	void OnForceMoveToLocationEvent(Vector MoveToPos);// 0x142a378
	void OnExecute();// 0x13e6168
	void OnDestroy();// 0x12fe19c
	void DoForceMoveToLocation(bool bStart);// 0x142a2f8

--------------------------------
Class: STBuffAction_Attachment.STBuffAction.Object
	BuffAttachmentItem[] Attachments;//[Offset: 0x34, Size: 0xc]
	<FString,ParticleSystem*> DecentParticles;//[Offset: 0xe4, Size: 0x3c]
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0
	void DestroyAttachment();// 0x142aa80
	void CreateAttachment();// 0x142aa6c
	void AsyncLoadFinish();// 0x142aa58
	void AsyncLoad();// 0x142aa44

--------------------------------
Class: BuffAttachmentItem
	SceneComponent* Component;//[Offset: 0x0, Size: 0x4]
	ParticleSystem* ParticleSystem;//[Offset: 0x8, Size: 0x28]
	FName SocketName;//[Offset: 0x30, Size: 0x8]
	enum TargetType;//[Offset: 0x38, Size: 0x1]
	SceneComponent* Instance;//[Offset: 0x3c, Size: 0x4]
	int SoftPathIndex;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: STBuffAction_AttrModifier.STBuffAction.Object
	FString AttrName;//[Offset: 0x34, Size: 0xc]
	float ModifyValue;//[Offset: 0x40, Size: 0x4]
	bool MultiplyOnLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	enum AttrRefValueType;//[Offset: 0x45, Size: 0x1]
	enum DoActionNetRole;//[Offset: 0x46, Size: 0x1]
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_BaseHitFilter.STBuffAction.Object
	enum FilterType;//[Offset: 0x34, Size: 0x1]
	<int> FilterGunIDs;//[Offset: 0x38, Size: 0x3c]
	<int> FilterBulletIDs;//[Offset: 0x74, Size: 0x3c]
	bool FilterGun(Actor* shooter);// 0x142b36c
	bool FilterBullet(Actor* shooter);// 0x142b2ec
	bool CheckFilter(Actor* shooter);// 0x142b26c

--------------------------------
Class: STBuffAction_BPCallEvent.STBuffAction.Object
	delegate OnExecuteDelegate;//[Offset: 0x34, Size: 0xc]
	delegate OnEndDelegate;//[Offset: 0x40, Size: 0xc]
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0
	void BPInitialize();// 0x1c01fa0
	Actor* BPGetOwner();// 0x142b804

--------------------------------
Class: STBuffAction_CameraAnim.STBuffAction.Object
	class CameraShake* CameraShakeClass;//[Offset: 0x34, Size: 0x4]
	float CameraShakeScale;//[Offset: 0x38, Size: 0x4]
	byte CameraShakePlaySpace;//[Offset: 0x3c, Size: 0x1]
	Rotator CameraShakeUserPlaySpaceRot;//[Offset: 0x40, Size: 0xc]
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_ColorfulGrenade.STBuffAction.Object
	float DyeingWaterEffectKeepTime;//[Offset: 0x34, Size: 0x4]
	ParticleSystem* DyeingWaterEffect;//[Offset: 0x38, Size: 0x4]
	FName EffectColorParamName;//[Offset: 0x40, Size: 0x8]
	CustomMatConfig MatConfig;//[Offset: 0x48, Size: 0x30]
	void UpdateMatParams(bool End);// 0x142c030
	void SetMatParameter(MeshComponent* meshComp, bool isHemlet, bool End);// 0x142bf1c
	void PlayDyeingWaterEffect();// 0x142bf08
	void OnTick(float DetalTime);// 0x12ebfe0
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_Dot.STBuffAction.Object
	float DotValue;//[Offset: 0x34, Size: 0x4]
	float Interval;//[Offset: 0x38, Size: 0x4]
	bool MultiplyOnLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	enum DotValueType;//[Offset: 0x3d, Size: 0x1]
	bool UsePercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	FString ValueAttrRateRef;//[Offset: 0x40, Size: 0xc]
	void TakeDotValue();// 0x142cb18
	void OnTick(float DetalTime);// 0x12ebfe0
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void HandleShootWeaponDamage(STBuff* Buff, float RealDotValue);// 0x142ca5c
	void HandlePoisonFogDamage(STBuff* Buff, float RealDotValue);// 0x142c9a0
	void HandleBurningDamage(STBuff* Buff, float RealDotValue);// 0x142c8e4
	void HandleAddHelmet(STBuff* Buff, float RealDotValue);// 0x142c828
	void HandleAddHealth(STBuff* Buff, float RealDotValue);// 0x142c76c
	void HandleAddBulletNum(STBuff* Buff, float RealDotValue);// 0x142c6b0
	void HandleAddArmor(STBuff* Buff, float RealDotValue);// 0x142c5f4

--------------------------------
Class: STBuffAction_DotBullet.STBuffAction.Object
	float Interval;//[Offset: 0x34, Size: 0x4]
	bool MultiplyOnLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool UsePercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	BuffDotBulletItem[] DotBullets;//[Offset: 0x3c, Size: 0xc]
	void TakeDotValue();// 0x142d2bc
	void OnTick(float DetalTime);// 0x12ebfe0
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void HandleAddBulletNum(STBuff* Buff);// 0x142d244
	float CaculateDotValue(float OriginValue);// 0x142d1c4

--------------------------------
Class: BuffDotBulletItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Number;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: STBuffAction_EnterState.STBuffAction.Object
	enum State;//[Offset: 0x34, Size: 0x1]
	enum MonsterState;//[Offset: 0x38, Size: 0x4]
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_GenBulletHitEffect.STBuffAction_BaseHitFilter.STBuffAction.Object
	float GenProbility;//[Offset: 0xb0, Size: 0x4]
	float GenProtectTime;//[Offset: 0xb4, Size: 0x4]
	float PreGenEffectTime;//[Offset: 0xb8, Size: 0x4]
	class Actor* ActorTemplate;//[Offset: 0xbc, Size: 0x4]
	PropSkillExplodeParam ExplodeParam;//[Offset: 0xc0, Size: 0x24]
	class Actor* ActorExplodeTemplate;//[Offset: 0xe4, Size: 0x4]
	float DefaultDamage;//[Offset: 0xe8, Size: 0x4]
	CurveFloat*[] CurveLevelTimeArray;//[Offset: 0xec, Size: 0xc]
	bool bImmediatelyTriggerAtOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bAddScreenEdgeEff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	int ScreenEdgeEffBuffID;//[Offset: 0xfc, Size: 0x4]
	float ActorOffect;//[Offset: 0x100, Size: 0x4]
	Actor* SpawnedActor;//[Offset: 0x114, Size: 0x4]
	Actor* SpawnedExplodeActor;//[Offset: 0x118, Size: 0x4]
	void SpawnExplodeActor(Vector SpawnEffActorPos);// 0x142dcb8
	void SpawnEffectActor(Vector SpawnEffActorPos);// 0x142dc48
	void OnServerBulleteHitEvent(const Actor* Causer, const Actor* Victim, out const Vector HitPos);// 0x142db3c
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnDestroy();// 0x12fe19c
	void OnClientBulleteHitEvent(const Actor* Causer, const Actor* Victim, out const Vector HitPos);// 0x142da30
	void AddScreenEdgeEff();// 0x142da1c

--------------------------------
Class: PropSkillExplodeParam
	float GenProbility;//[Offset: 0x0, Size: 0x4]
	int PropSkillLevel;//[Offset: 0x4, Size: 0x4]
	float PlayerInnerDamageHealthRatio;//[Offset: 0x8, Size: 0x4]
	float PlayerOuterDamageHealthRatio;//[Offset: 0xc, Size: 0x4]
	float ZombieInnerDamageHealthRatio;//[Offset: 0x10, Size: 0x4]
	float ZombieOuterDamageHealthRatio;//[Offset: 0x14, Size: 0x4]
	float WallWeakenDamageRatio;//[Offset: 0x18, Size: 0x4]
	float InnerDamageRadius;//[Offset: 0x1c, Size: 0x4]
	float OuterDamageRadius;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: STBuffAction_GenBulletHitExplode.STBuffAction_BaseHitFilter.STBuffAction.Object
	float GenExplodeHurtRadius;//[Offset: 0xb0, Size: 0x4]
	float CheckInterval;//[Offset: 0xb4, Size: 0x4]
	PropSkillExplodeParam[] ExplodeDamageParam;//[Offset: 0xb8, Size: 0xc]
	class Actor* ActorTemplate;//[Offset: 0xc4, Size: 0x4]
	bool bAddScreenEdgeEff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	int ScreenEdgeEffBuffID;//[Offset: 0xcc, Size: 0x4]
	Actor* SpawnedActor;//[Offset: 0xd8, Size: 0x4]
	void RemoveExplodeEffect();// 0x142e484
	void OnServerBulleteHitEvent(const Actor* Causer, const Actor* Victim, out const Vector HitPos);// 0x142e378
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x12fe19c
	void OnClientBulleteHitEvent(const Actor* Causer, const Actor* Victim, out const Vector HitPos);// 0x142da30
	void AddScreenEdgeEff();// 0x142e364

--------------------------------
Class: STBuffAction_GenBulletPosionHitEffect.STBuffAction_BaseHitFilter.STBuffAction.Object
	PropSkillPosionParam[] BulletHitPosionParam;//[Offset: 0xb0, Size: 0xc]
	void OnServerBulleteHitEvent(const Actor* Causer, const Actor* Victim, out const Vector HitPos);// 0x142ea10
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x12fe19c
	void OnClientBulleteHitEvent(const Actor* Causer, const Actor* Victim, out const Vector HitPos);// 0x142da30

--------------------------------
Class: PropSkillPosionParam
	float GenProbility;//[Offset: 0x0, Size: 0x4]
	int PropSkillLevel;//[Offset: 0x4, Size: 0x4]
	float CheckPeriod;//[Offset: 0x8, Size: 0x4]
	int HumanBuffID;//[Offset: 0xc, Size: 0x4]
	int ZombieBuffID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: STBuffAction_GenCureAmplifier.STBuffAction.Object
	PropSkillCureRangeParam PusleCureRangeParam;//[Offset: 0x34, Size: 0x10]
	class Actor* ActorTemplate;//[Offset: 0x44, Size: 0x4]
	Actor* SpawnedActor;//[Offset: 0x48, Size: 0x4]
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnDestroy();// 0x12fe19c
	void GenCureEffect();// 0x142eef8

--------------------------------
Class: PropSkillCureRangeParam
	float RangeLifeSpan;//[Offset: 0x0, Size: 0x4]
	float CheckPeriod;//[Offset: 0x4, Size: 0x4]
	float RangeRadius;//[Offset: 0x8, Size: 0x4]
	int CureBuffID;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: STBuffAction_GenEffectAtPosition.STBuffAction_BaseHitFilter.STBuffAction.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	enum TargetType;//[Offset: 0xb1, Size: 0x1]
	byte KillDamageType;//[Offset: 0xb2, Size: 0x1]
	enum MonsterType;//[Offset: 0xb3, Size: 0x1]
	float CheckInterval;//[Offset: 0xb4, Size: 0x4]
	ParticleSystem* TemplateParticle_Effect;//[Offset: 0xb8, Size: 0x4]
	void OnParticleSystemFinished(ParticleSystemComponent* PSC);// 0x142f5dc
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x12fe19c
	void OnClientTakeDamageEvent(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Causer);// 0x142f470
	void OnClientPushDamageEvent(float Damage, out const DamageEvent DamageEvent, Actor* Causer, Actor* Victim);// 0x142f304
	void GenDieEffect(Vector GenPosition);// 0x142f294

--------------------------------
Class: STBuffAction_GenNoiseAmplifier.STBuffAction_BaseHitFilter.STBuffAction.Object
	PropSkillNoiseRangeParam[] NoiseRangeParam;//[Offset: 0xb0, Size: 0xc]
	class Actor* ActorTemplate;//[Offset: 0xbc, Size: 0x4]
	bool bImmediatelyTriggerAtOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bAddScreenEdgeEff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	int ScreenEdgeEffBuffID;//[Offset: 0xc4, Size: 0x4]
	Actor* SpawnedActor;//[Offset: 0xc8, Size: 0x4]
	void SpawnEffectActor(Vector SpawnEffActorPos);// 0x142fc80
	void OnServerBulleteHitEvent(const Actor* Causer, const Actor* Victim, out const Vector HitPos);// 0x142fb74
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnDestroy();// 0x12fe19c
	void OnClientBulleteHitEvent(const Actor* Causer, const Actor* Victim, out const Vector HitPos);// 0x142da30
	void GenBulletHitEffect(Vector GenPosition);// 0x142fb04
	void AddScreenEdgeEff();// 0x142faf0

--------------------------------
Class: STBuffAction_GenPosionExtractor.STBuffAction.Object

--------------------------------
Class: STBuffAction_GenSmokeAmplifier.STBuffAction.Object
	PropSkillSmokeDamageParam[] SmokeDamageParam;//[Offset: 0x34, Size: 0xc]
	class Actor* ActorTemplate;//[Offset: 0x40, Size: 0x4]
	Actor* SpawnedActor;//[Offset: 0x44, Size: 0x4]
	void RemoveSmokeEffect();// 0x12e82e4
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnDestroy();// 0x12fe19c
	void GenSmokeEffect();// 0x1430958

--------------------------------
Class: STBuffAction_InGameUIMsg.STBuffAction.Object
	FString UIMessage;//[Offset: 0x34, Size: 0xc]
	bool AppendShowAndHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_Invincible.STBuffAction.Object
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_ModifyDuration.STBuffAction.Object
	enum ModifyType;//[Offset: 0x34, Size: 0x1]
	CurveFloat* CurveDistanceRef;//[Offset: 0x38, Size: 0x4]
	<int,float> MonsterTypeTimeRef;//[Offset: 0x3c, Size: 0x3c]
	FString OtherAttrTimeRef;//[Offset: 0x78, Size: 0xc]
	void OnInitialize();// 0x133d2f0

--------------------------------
Class: STBuffAction_MPCSpeedScale.STBuffAction.Object
	float[] SpeedScales;//[Offset: 0x34, Size: 0xc]
	enum AttrRefenceValeType;//[Offset: 0x40, Size: 0x1]
	bool IsChangeByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool IsTickCatchState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	enum LastMobWalkType;//[Offset: 0x4c, Size: 0x1]
	void OnTick(float DetalTime);// 0x12ebfe0
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_MultiAttrModifier.STBuffAction.Object
	BuffAttrModifierItem[] MultiAttrModifiers;//[Offset: 0x34, Size: 0xc]
	bool MultiplyOnLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	enum DoActionNetRole;//[Offset: 0x41, Size: 0x1]
	AttrDynamicModifyItem[] MultiAttrModifyItems;//[Offset: 0x44, Size: 0xc]
	Actor* TargetActor;//[Offset: 0x50, Size: 0x8]
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0
	AttrModifyComponent* GetAttrModify();// 0x1431b34

--------------------------------
Class: BuffAttrModifierItem
	FString AttrName;//[Offset: 0x0, Size: 0xc]
	float ModifyValue;//[Offset: 0xc, Size: 0x4]
	enum AttrRefValueType;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: AttrDynamicModifyItem
	Object* Causer;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: STBuffAction_PetVisible.STBuffAction.Object
	bool bPetVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_PlayAkAudio.STBuffAction.Object
	AkAudioEvent* NormalSound;//[Offset: 0x34, Size: 0x4]
	AkAudioEvent* FemaleSound;//[Offset: 0x38, Size: 0x4]
	FName RTPCName;//[Offset: 0x40, Size: 0x8]
	float RTPCValue;//[Offset: 0x48, Size: 0x4]
	float TickInterval;//[Offset: 0x4c, Size: 0x4]
	AkComponent* AkComponent;//[Offset: 0x50, Size: 0x4]
	FString DummyString;//[Offset: 0x54, Size: 0xc]
	void OnTick(float DeltaTime);// 0x12ebfe0
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_PlayAnimation.STBuffAction.Object
	UAESkillAction_PlayMontage* PlayMontage;//[Offset: 0x34, Size: 0x4]
	void OnTick(float DetalTime);// 0x12ebfe0
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: UAESkillAction_PlayMontage.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	AnimMontage* AnimMontage;//[Offset: 0x110, Size: 0x28]
	bool AnimStopAfterPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool ModifyWithActivityAcotr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	FString AnimPlayRateAdjustAttr;//[Offset: 0x13c, Size: 0xc]
	bool bKeepAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	FName StartSectionName;//[Offset: 0x150, Size: 0x8]
	void OnAsyncLoadAnimResFinished(PlayMontageAsyncloadParams LoadParams);// 0x151042c

--------------------------------
Class: UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: PlayMontageAsyncloadParams

--------------------------------
Class: STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: STBuffAction_PlaySCAppearance.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	FString AppearanceKeyString;//[Offset: 0x110, Size: 0xc]
	MaterialInterface* AppearanceMaterial;//[Offset: 0x11c, Size: 0x4]
	float LifeSpan;//[Offset: 0x120, Size: 0x4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x124, Size: 0x4]

--------------------------------
Class: STBuffAction_PlayScreenEffect.STBuffAction.Object
	FString AppearanceKeyString;//[Offset: 0x34, Size: 0xc]
	MaterialInterface* AppearanceMaterial;//[Offset: 0x40, Size: 0x4]
	float LifeSpan;//[Offset: 0x44, Size: 0x4]
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_SetEyeEffect.STBuffAction.Object
	float LightSwitch;//[Offset: 0x34, Size: 0x4]
	LinearColor LightColor;//[Offset: 0x38, Size: 0x10]
	float DefaultSwitch;//[Offset: 0x48, Size: 0x4]
	LinearColor DefaultColor;//[Offset: 0x4c, Size: 0x10]
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_SetMaterialParameter.STBuffAction.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x34, Size: 0xc]
	void SetMatParameter(MeshComponent* meshComp, CustomMatConfig Config, bool End);// 0x14332d0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0

--------------------------------
Class: STBuffAction_SpawnActor.STBuffAction.Object
	BuffSpawnActorItem[] SpawnActorItems;//[Offset: 0x34, Size: 0xc]
	void OnInitialize();// 0x133d2f0
	void OnExecute();// 0x13e6168
	void OnEnd();// 0x13e61a0
	void AsyncLoadFinish();// 0x143394c

--------------------------------
Class: BuffSpawnActorItem
	class Actor* ActorClass;//[Offset: 0x0, Size: 0x28]
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	enum TargetType;//[Offset: 0x30, Size: 0x1]
	Vector RelLocation;//[Offset: 0x34, Size: 0xc]
	Rotator Rotator;//[Offset: 0x40, Size: 0xc]
	enum EnableRole;//[Offset: 0x4c, Size: 0x1]
	bool IsDestroyOnBuffEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	Actor* Instance;//[Offset: 0x50, Size: 0x4]
	int SoftPathIndex;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: TslDamageField.Actor.Object
	Actor* ParentGrenade;//[Offset: 0x2c8, Size: 0x4]
	void SetParentGrenade(Actor* Val);// 0x1433d58
	Actor* GetParentGrenade();// 0x13a86cc

--------------------------------
Class: STBuffApplifierSpreading.Actor.Object
	Actor* ParentGrenade;//[Offset: 0x2c8, Size: 0x4]
	SceneComponent* SceneRoot;//[Offset: 0x2d8, Size: 0x4]
	Rotator[] InitialTraceArray;//[Offset: 0x2dc, Size: 0xc]
	int StepsPerTick;//[Offset: 0x2e8, Size: 0x4]
	int SpreadDirectionCount;//[Offset: 0x2ec, Size: 0x4]
	int MaxInstanceCount;//[Offset: 0x2f0, Size: 0x4]
	int MaxMaterialAdditiveInstanceCount;//[Offset: 0x2f4, Size: 0x4]
	float InitialTraceLenClamp;//[Offset: 0x2f8, Size: 0x4]
	FName BlockingTag;//[Offset: 0x300, Size: 0x8]
	float NormalLimitZ;//[Offset: 0x308, Size: 0x4]
	float GroundTraceNormalScale_Start;//[Offset: 0x30c, Size: 0x4]
	float InitialGroundTraceHeightZ;//[Offset: 0x310, Size: 0x4]
	float ConcurrentGroundTraceHeightZ;//[Offset: 0x314, Size: 0x4]
	float ProcessedHitLenClamp;//[Offset: 0x318, Size: 0x4]
	float SphereRadius;//[Offset: 0x31c, Size: 0x4]
	float SpreadXY;//[Offset: 0x320, Size: 0x4]
	float SpreadZ;//[Offset: 0x324, Size: 0x4]
	class TslDamageField* DamageFieldClass;//[Offset: 0x328, Size: 0x4]
	float DamageTickInterval;//[Offset: 0x32c, Size: 0x4]
	bool bModifyEffectLifetime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	float InitialEffectLifetime;//[Offset: 0x334, Size: 0x4]
	float MinEffectLifetimeForStart;//[Offset: 0x338, Size: 0x4]
	float EffectLifetimeVariation;//[Offset: 0x33c, Size: 0x4]
	byte[] InterestedSurfaceTypes;//[Offset: 0x340, Size: 0xc]
	float DamageFieldOffGround;//[Offset: 0x34c, Size: 0x4]
	bool bMergeTwoBurningGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	void TickDamageFields();// 0x14346bc
	void SetParentGrenade(Actor* Val);// 0x1433d58
	void SetMaxMaterialAdditiveInstanceCount(int Val);// 0x1434648
	void SetLastImpactVelocity(Vector InVelocity);// 0x14345d8
	void SetInitialEffectLifetime(float Val);// 0x1434564
	Actor* GetParentGrenade();// 0x13a86cc
	int GetMaxMaterialAdditiveInstanceCount();// 0x1434548
	float GetInitialEffectLifetime();// 0x143452c
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x1434358
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x143420c
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x14340c0

--------------------------------
Class: STBuffCondition.Object
	enum AndOrPrev;//[Offset: 0x1c, Size: 0x1]
	bool IsKeepResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	STBuffAction* OwnerAction;//[Offset: 0x20, Size: 0x4]
	STBuff* OwnerBuff;//[Offset: 0x24, Size: 0x4]
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x13e6184
	STBuffCondition* Copy(Object* Outer);// 0x15c554c
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_Drowning.STBuffCondition.Object
	STExtraBaseCharacter* Target;//[Offset: 0x2c, Size: 0x4]
	void OnInitialize();// 0x133d2f0
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_InPoisonFog.STBuffCondition.Object
	int MinFogStage;//[Offset: 0x2c, Size: 0x4]
	int MaxFogStage;//[Offset: 0x30, Size: 0x4]
	STExtraBaseCharacter* Target;//[Offset: 0x34, Size: 0x4]
	void OnInitialize();// 0x133d2f0
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_IsHealthOn.STBuffCondition.Object
	float MinValue;//[Offset: 0x2c, Size: 0x4]
	float MaxValue;//[Offset: 0x30, Size: 0x4]
	bool IsUsePercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float MinPercValue;//[Offset: 0x38, Size: 0x4]
	float MaxPercValue;//[Offset: 0x3c, Size: 0x4]
	STExtraCharacter* OwnerChar;//[Offset: 0x40, Size: 0x4]
	void OnInitialize();// 0x133d2f0
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_IsHit.STBuffCondition.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	enum TargetType;//[Offset: 0x2a, Size: 0x1]
	enum ShootPosition;//[Offset: 0x2b, Size: 0x1]
	byte KillDamageType;//[Offset: 0x2c, Size: 0x1]
	enum MonsterType;//[Offset: 0x2d, Size: 0x1]
	<int> FilterBulletIDs;//[Offset: 0x30, Size: 0x3c]
	enum Role;//[Offset: 0x6c, Size: 0x1]
	bool ConditionResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	void OnTakeDamageEvent(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Causer);// 0x14358d0
	void OnPushDamageEvent(float Damage, out const DamageEvent DamageEvent, Actor* Causer, Actor* Victim);// 0x1435764
	void OnPostTakeDamageEvent(float Damage, out const DamageEvent DamageEvent, Controller* Controller, Actor* DamageCauser);// 0x14355f8
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x13e6184
	bool IsFilterBullet(Actor* shooter);// 0x1435578
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_IsKeepInState.STBuffCondition.Object
	enum[] States;//[Offset: 0x2c, Size: 0xc]
	float KeepTime;//[Offset: 0x38, Size: 0x4]
	FString KeepTimeAttrRef;//[Offset: 0x3c, Size: 0xc]
	bool IsFalseOnHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	STExtraBaseCharacter* OwnerChar;//[Offset: 0x4c, Size: 0x4]
	bool KeepInState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float EnabledTime;//[Offset: 0x54, Size: 0x4]
	void OnTakeDamageEvent(float Damage, out const DamageEvent DamageEvent, Controller* Controller, Actor* DamageCauser);// 0x1435fa8
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x13e6184
	bool IsInState();// 0x1435f80
	void HandlePlayerStateChanged(enum NewState);// 0x1435f08
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_IsKill.STBuffCondition.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	enum TargetType;//[Offset: 0x2a, Size: 0x1]
	enum ShootPosition;//[Offset: 0x2b, Size: 0x1]
	byte KillDamageType;//[Offset: 0x2c, Size: 0x1]
	enum MonsterType;//[Offset: 0x2d, Size: 0x1]
	<int> FilterGunIDs;//[Offset: 0x30, Size: 0x3c]
	<int> FilterBulletIDs;//[Offset: 0x6c, Size: 0x3c]
	bool ConditionResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	void OnTakeDamageEvent(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Causer);// 0x14367d0
	void OnPushDamageEvent(float Damage, out const DamageEvent DamageEvent, Actor* Causer, Actor* Victim);// 0x1436664
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x13e6184
	bool IsFilterGun(Actor* shooter);// 0x14365e4
	bool IsFilterBullet(Actor* shooter);// 0x1436564
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_IsNearDeath.STBuffCondition.Object
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x13e6184
	void IsEnterNearDeath(bool IsEnter);// 0x1436e24
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_IsOnVehicle.STBuffCondition.Object
	bool EnterOrExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool ConditionResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	void OnInitialize();// 0x133d2f0
	void OnEnterVehicle(bool IsEnter, Actor* Vehicle);// 0x1437238
	void OnDestroy();// 0x13e6184
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_IsRescueFinish.STBuffCondition.Object
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x13e6184
	void IsRescueFinish();// 0x14376b8
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_IsStartRescue.STBuffCondition.Object
	bool CheckStartRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool TargetIsBeRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x13e6184
	void IsStartRescue(Actor* BeRescue, bool bIsStart);// 0x1437a64
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_IsWeaponEquip.STBuffCondition.Object
	bool IsChecckEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool TargetIsWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x13e6184
	void IsUnEquipWeapon(STExtraWeapon* Weapon);// 0x1437f90
	void IsEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x1437ed4
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_LayerMax.STBuffCondition.Object
	int LastLayerCount;//[Offset: 0x2c, Size: 0x4]
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_LayerSpecific.STBuffCondition.Object
	int LayerSpecificCount;//[Offset: 0x2c, Size: 0x4]
	int LastLayerCount;//[Offset: 0x30, Size: 0x4]
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffCondition_TeammateDistance.STBuffCondition.Object
	float MaxTeammateDistanceSqr;//[Offset: 0x2c, Size: 0x4]
	float MinTeammateDistanceSqr;//[Offset: 0x30, Size: 0x4]
	int NeedTeamateNum;//[Offset: 0x34, Size: 0x4]
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffConditionACtion_PoisonFog.STBuffAction.Object
	PoisonFogStageConfig[] PoisonFogStageConfigs;//[Offset: 0x34, Size: 0xc]
	int MaxTraceTimes;//[Offset: 0x40, Size: 0x4]
	float GetFPAreaIntervalTime;//[Offset: 0x44, Size: 0x4]
	STExtraBaseCharacter* Target;//[Offset: 0x4c, Size: 0x4]
	bool IsInFobidPoisonArea(out Vector TargetPos);// 0x14391d0
	int GetPoisonFogStage(int Progress);// 0x1439150
	bool GetIsInFobidPoisonAreaInterval(out Vector TargetPos);// 0x14390c4

--------------------------------
Class: PoisonFogStageConfig
	float InTime;//[Offset: 0x0, Size: 0x4]
	float OutTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: STClothAnimInstance.AnimInstance.Object
	enum AnimInstanceType;//[Offset: 0x2ec, Size: 0x1]
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2f0, Size: 0x4]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool C_IsSimulatCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	float C_BlendFactorInLobby;//[Offset: 0x2f8, Size: 0x4]
	float C_BlendFactorInBattle;//[Offset: 0x2fc, Size: 0x4]
	float C_MoveThreshold;//[Offset: 0x300, Size: 0x4]
	float C_BlendScaleThreshold;//[Offset: 0x304, Size: 0x4]
	float C_BlendScale;//[Offset: 0x308, Size: 0x4]
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x310, Size: 0x4]
	Vector LastLocation;//[Offset: 0x314, Size: 0xc]
	SkeletalMeshComponent* TryGetParentMeshComponent();// 0x143e4d8
	bool isCothAnimEnable();// 0x143e4b0
	void EnableClothAnim();// 0x143e49c
	void DisableClothAnim();// 0x143e488

--------------------------------
Class: STCustomMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object[] ObjectsForChecking;//[Offset: 0x5a8, Size: 0xc]
	FName[] ObjectsNamesForIgnore;//[Offset: 0x5b4, Size: 0xc]
	byte InitCollisionType;//[Offset: 0x5c0, Size: 0x1]
	void SetCollisionTraceFlag(byte Flag);// 0x143ebf4
	void RebuildBodyWithCollisionTraceFlag(byte Flag);// 0x143eb7c
	bool CheckAnyOverlappingActor(World* World, Transform tranx);// 0x143ea00

--------------------------------
Class: STEActorCacheComponent.ActorComponent.Object
	int PoolSizeLimit_Bullet;//[Offset: 0xf8, Size: 0x4]
	int PoolSizeLimit_BulletImpactEffect;//[Offset: 0xfc, Size: 0x4]
	bool PushActorToPool(byte ID, STECachableActor* Target);// 0x143f26c
	STECachableActor* GetActorFromPool(byte ID);// 0x143f1ec

--------------------------------
Class: STECachableActor.Actor.Object
	STEActorCacheComponent* ActorCacheComponent;//[Offset: 0x2c8, Size: 0x4]
	void RegisterCachePool(STEActorCacheComponent* Pool);// 0x143f678
	bool PushToPool(byte ID);// 0x143f5f8

--------------------------------
Class: STEFlareGuntProjectComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object

--------------------------------
Class: STEShootWeaponInstantComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object

--------------------------------
Class: STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	float BoostModifier;//[Offset: 0xcf4, Size: 0x4]
	STExtraFloatingVehicleMovementComponent* FloatingVehicleMovement;//[Offset: 0xcf8, Size: 0x4]
	void HandleOnMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x144231c
	Vector GetRotationInputDir();// 0x14422cc

--------------------------------
Class: STExtraAdvancedFloatingVehicle.STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	class FloatLogic* LogicControllerType;//[Offset: 0xd00, Size: 0x4]
	bool bUseOldLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 0x1]
	FloatLogic* FloatLogicControl;//[Offset: 0xd08, Size: 0x4]
	void PlaySfxUnderWater_Out();// 0x1440cf0
	void PlaySfxUnderWater_In();// 0x1440cdc

--------------------------------
Class: STExtraAirborne.Character.Pawn.Actor.Object
	Vector CurrentForwardSpeedV2;//[Offset: 0x5e4, Size: 0xc]
	Vector CurrentTurnSpeedV2;//[Offset: 0x5f0, Size: 0xc]
	AirborneSpeed FallSpeed2;//[Offset: 0x5fc, Size: 0x40]
	AirborneSpeed OpenSpeed2;//[Offset: 0x63c, Size: 0x40]
	byte AirborneState2;//[Offset: 0x67c, Size: 0x1]
	float CurrentAltitude2;//[Offset: 0x680, Size: 0x4]
	CameraSettings FreefallCameraSetting2;//[Offset: 0x684, Size: 0x14]
	CameraSettings OpeningCameraSetting2;//[Offset: 0x698, Size: 0x14]
	AkComponent* AkComponent;//[Offset: 0x6ac, Size: 0x4]
	SpringArmComponent* SpringArmFromBP;//[Offset: 0x6b0, Size: 0x4]
	TimelineComponent* LerpCameraTimeline;//[Offset: 0x6b4, Size: 0x4]
	CurveFloat* CameraCurve;//[Offset: 0x6b8, Size: 0x4]
	CameraSettingComponentFromBP* CameraSettingComponentFromBP;//[Offset: 0x6d0, Size: 0x4]
	AkAudioEvent* FreeFallAkEvent;//[Offset: 0x6d4, Size: 0x4]
	AkAudioEvent* OpeningAkEvent;//[Offset: 0x6d8, Size: 0x4]
	CameraAnim* AirborneCameraAnim;//[Offset: 0x6dc, Size: 0x4]
	delegate OnAirborneJump;//[Offset: 0x6e0, Size: 0xc]
	Pawn* GroundPawnFromBP;//[Offset: 0x6ec, Size: 0x4]
	float HaveToOpenAltitude;//[Offset: 0x6f0, Size: 0x4]
	delegate AirborneStateChangeDelegate;//[Offset: 0x6f4, Size: 0xc]
	void SwitchCameraFromBP(out CameraSettings CameraSetting);// 0x1441938
	void StateChangeServerFromBP();// 0x1441924
	void StateChangeClientFromBP();// 0x1441910
	void ServerSetStateFromBP(const byte AirborneStateBP);// 0x144185c
	void ServerAndAirbornAfterLand();// 0x1c01fa0
	void RotateMulticastFromBP(const Rotator Rotator);// 0x14417b0
	void OnStateChangeServerFromBP();// 0x1441754
	void OnStateChangeMultiCastFromBP();// 0x14416f8
	void OnRep_AirbornStateChange();// 0x14416e4
	void OnCameraSettingLerp(float LerpAlpha);// 0x144166c
	Vector NormalSpeedFromBP();// 0x1441624
	void MoveRight(float Rate);// 0x14415a4
	void MoveForward(float Rate);// 0x1441524
	bool IsAutonomousFromBP();// 0x14414fc
	Vector GetVerticalSpeed2();// 0x14414b4
	Vector GetAirborneVelocity2();// 0x144146c
	void DoMoveRight(float Rate);// 0x1c01fa0
	void DoMoveForward(float Rate);// 0x1c01fa0
	void ChangeCurForwardSpeedVFromBP(const Vector Speed);// 0x14413c0

--------------------------------
Class: AirborneSpeed
	Vector minSpeed;//[Offset: 0x0, Size: 0xc]
	Vector MaxSpeed;//[Offset: 0xc, Size: 0xc]
	Vector NormalSpeed;//[Offset: 0x18, Size: 0xc]
	Vector VerticalSpeed;//[Offset: 0x24, Size: 0xc]
	float TurnSpeed;//[Offset: 0x30, Size: 0x4]
	Vector TurnSpeedV;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: STExtraAIShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object

--------------------------------
Class: STExtraAmphibiousVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	float BoostModifier;//[Offset: 0xe98, Size: 0x4]
	STExtraFloatingVehicleMovementComponent* FloatingVehicleMovement;//[Offset: 0xe9c, Size: 0x4]
	AkAudioEvent* Sfx_WaterLoop;//[Offset: 0xea0, Size: 0x4]
	float InOutSoundCD;//[Offset: 0xef4, Size: 0x4]
	bool RepUseSyncatClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefc, Size: 0x1]
	int DisableBuoyancyDistance;//[Offset: 0xf00, Size: 0x4]
	bool DisableBuoyancyTickInLowPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf04, Size: 0x1]
	byte DisableBuoyancyPlatformLevel;//[Offset: 0xf05, Size: 0x1]
	void SendServerIntoWater(const Vector InWaterLocation);// 0x14423ec
	void OnRep_UseSyncatClient();// 0x14423d8
	void HandleOnMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x144231c
	Vector GetRotationInputDir();// 0x14422cc

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2ec, Size: 0x4]
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x1443b5c
	void HandleOwnerAnimEvent(FName EventMsg);// 0x1443adc
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x1443930

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 0x1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 0x1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f7, Size: 0x1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb, Size: 0x1]
	bool C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe, Size: 0x1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff, Size: 0x1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 0x1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x303, Size: 0x1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 0x1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 0x1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b, Size: 0x1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 0x1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 0x1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f, Size: 0x1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 0x1]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x313, Size: 0x1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 0x1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 0x1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	bool C_Reload_Or_PickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]
	bool C_TurningBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 0x1]
	bool C_SightSlowMoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 0x1]
	bool C_SightSlowMoveAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	bool C_AWTNoneWeaponType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1]
	bool C_ScopingAndAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 0x1]
	bool C_Walk2RiflejumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31f, Size: 0x1]
	byte C_LODLevel;//[Offset: 0x320, Size: 0x1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x324, Size: 0x4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x32c, Size: 0xc]
	byte C_PoseType;//[Offset: 0x338, Size: 0x1]
	byte C_LastMovementMode;//[Offset: 0x339, Size: 0x1]
	byte C_WeaponType;//[Offset: 0x33a, Size: 0x1]
	byte C_WeaponHoldType;//[Offset: 0x33b, Size: 0x1]
	byte C_WeaponState;//[Offset: 0x33c, Size: 0x1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x340, Size: 0x4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 0x1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x348, Size: 0x4]
	float C_CharacterYawRotateRate;//[Offset: 0x34c, Size: 0x4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x350, Size: 0x4]
	float C_MaxFallingSpeed;//[Offset: 0x354, Size: 0x4]
	float C_FireAlpha;//[Offset: 0x358, Size: 0x4]
	float b_WalkAdditiveAlpha;//[Offset: 0x35c, Size: 0x4]
	float f_FallingVelocityZFactor;//[Offset: 0x360, Size: 0x4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x364, Size: 0x4]
	float PeekFrameRate;//[Offset: 0x368, Size: 0x4]
	float PeekSpeed;//[Offset: 0x36c, Size: 0x4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x370, Size: 0x4]
	float C_ForegripAnimParam;//[Offset: 0x374, Size: 0x4]
	float C_HandleFolderFactor;//[Offset: 0x378, Size: 0x4]
	Vector C_MoveVelocity;//[Offset: 0x37c, Size: 0xc]
	Vector C_MoveDir;//[Offset: 0x388, Size: 0xc]
	Vector C_HurtDir;//[Offset: 0x394, Size: 0xc]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x3a0, Size: 0xc]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x3ac, Size: 0xc]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x3b8, Size: 0xc]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x3c4, Size: 0xc]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x3d0, Size: 0xc]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x3dc, Size: 0xc]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x3e8, Size: 0xc]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x3f4, Size: 0xc]
	Rotator C_OwnerRotation;//[Offset: 0x400, Size: 0xc]
	Rotator C_ControlRotation;//[Offset: 0x40c, Size: 0xc]
	Rotator C_ViewRotation;//[Offset: 0x418, Size: 0xc]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x424, Size: 0xc]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x430, Size: 0xc]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x43c, Size: 0xc]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x448, Size: 0xc]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x454, Size: 0xc]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x460, Size: 0xc]
	Rotator C_UpShpvelingRotationAddZOnly;//[Offset: 0x46c, Size: 0xc]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x478, Size: 0xc]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x484, Size: 0x4]
	Rotator OwnerRotation;//[Offset: 0x488, Size: 0xc]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	Rotator ShovelingRotation;//[Offset: 0x498, Size: 0xc]
	float ShovelingRotationoffset;//[Offset: 0x4a4, Size: 0x4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x4a8, Size: 0xc]
	Rotator FloorRotation;//[Offset: 0x4b4, Size: 0xc]
	byte Role;//[Offset: 0x4c0, Size: 0x1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c2, Size: 0x1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c3, Size: 0x1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x4c8, Size: 0x4]
	BlendSpace* C_MovementBSCache;//[Offset: 0x4cc, Size: 0x4]
	BlendSpace* C_MovementBSCache_Dest;//[Offset: 0x4d0, Size: 0x4]
	AnimSequence* C_IdleAddtive;//[Offset: 0x4d4, Size: 0x4]
	BlendSpace1D* C_FallingBS;//[Offset: 0x4d8, Size: 0x4]
	AnimSequence* C_JumpStart;//[Offset: 0x4dc, Size: 0x4]
	AnimSequence* C_LandLight;//[Offset: 0x4e0, Size: 0x4]
	AnimSequence* C_LandHeavy;//[Offset: 0x4e4, Size: 0x4]
	AnimSequence* C_TurnAnim;//[Offset: 0x4e8, Size: 0x4]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x4ec, Size: 0x4]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x4f0, Size: 0x4]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x4f4, Size: 0x4]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x4f8, Size: 0x4]
	AnimMontage* C_MontageRescue;//[Offset: 0x4fc, Size: 0x4]
	AnimMontage* C_MontageDead;//[Offset: 0x500, Size: 0x4]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x504, Size: 0x4]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x508, Size: 0x4]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x50c, Size: 0x4]
	enum AnimInstanceType;//[Offset: 0x510, Size: 0x1]
	void RefreshPeekState();// 0x144400c
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x1443f8c
	void PlayPostReloadWeaponAnimation();// 0x1443f78
	void PlayPlayerDeadAnimation();// 0x1443f64
	void PlayAnimationByEventType(byte Type);// 0x1443eec
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x1443e6c
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x1443da8
	void HandlePlayerPickUp();// 0x1443d8c
	void HandlePlayerEnterRescueState(bool bBeginRescueing);// 0x1443d04
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x1c01fa0
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x1443b5c
	void HandleOwnerAnimEvent(FName EventMsg);// 0x1443adc
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x1443930
	byte GetRole();// 0x1443908
	void EnableAnimFlag(enum PlayFlag);// 0x1443890
	void DisableAnimFlag(enum PlayFlag);// 0x1443818

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x530, Size: 0x3f0]
	Rotator OwnerAimRotation;//[Offset: 0x924, Size: 0xc]
	Rotator C_SightAngledRotOffset;//[Offset: 0x930, Size: 0xc]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 0x1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93d, Size: 0x1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93e, Size: 0x1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93f, Size: 0x1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x941, Size: 0x1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x942, Size: 0x1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x943, Size: 0x1]
	Rotator SwimRotate;//[Offset: 0x944, Size: 0xc]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 0x1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 0x1]
	float C_SwimSpeed;//[Offset: 0x954, Size: 0x4]
	float C_ProneHandleAlpha;//[Offset: 0x958, Size: 0x4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0x960, Size: 0x4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 0x1]
	byte C_SeatSpecialType;//[Offset: 0x965, Size: 0x1]
	int WeaponReloadSlotIndex;//[Offset: 0x968, Size: 0x4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c, Size: 0x1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96d, Size: 0x1]
	float NeckTurnUILeftAngle;//[Offset: 0x970, Size: 0x4]
	float NeckTurnUIRightAngle;//[Offset: 0x974, Size: 0x4]
	float NeckTurnUIUPAngle;//[Offset: 0x978, Size: 0x4]
	float NeckTurnUIDownAngle;//[Offset: 0x97c, Size: 0x4]
	float NeckNotTurnAngle;//[Offset: 0x980, Size: 0x4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0x984, Size: 0x4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0x988, Size: 0x4]
	float NeckMapAngleLeft;//[Offset: 0x98c, Size: 0x4]
	float NeckMapAngleRight;//[Offset: 0x990, Size: 0x4]
	float NeckMapAngleUp;//[Offset: 0x994, Size: 0x4]
	float NeckMapAngleDown;//[Offset: 0x998, Size: 0x4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0x99c, Size: 0x4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0x9a0, Size: 0x4]
	float NeckMapCrouchAngleLeft;//[Offset: 0x9a4, Size: 0x4]
	float NeckMapCrouchAngleRight;//[Offset: 0x9a8, Size: 0x4]
	float NeckMapCrouchAngleUp;//[Offset: 0x9ac, Size: 0x4]
	float NeckMapCrouchAngleDown;//[Offset: 0x9b0, Size: 0x4]
	float NeckTurnSpeed;//[Offset: 0x9b4, Size: 0x4]
	byte C_ParachuteState;//[Offset: 0x9b8, Size: 0x1]
	Rotator C_HeadRotOffset;//[Offset: 0x9bc, Size: 0xc]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8, Size: 0x1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c9, Size: 0x1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ca, Size: 0x1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cb, Size: 0x1]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cc, Size: 0x1]
	float C_HoldingShieldAlpha;//[Offset: 0x9d0, Size: 0x4]
	float C_HoldingShieldAdditive;//[Offset: 0x9d4, Size: 0x4]
	BlendSpace* C_ObstructedAnim;//[Offset: 0x9d8, Size: 0x4]
	AnimSequence* C_ShieldAddtive;//[Offset: 0x9dc, Size: 0x4]
	AnimMontage* C_RevivalMontage;//[Offset: 0x9e0, Size: 0x4]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 0x1]
	Vector C_MoveDirExt;//[Offset: 0x9e8, Size: 0xc]
	int C_DebugAnimBPBranch;//[Offset: 0x9f4, Size: 0x4]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0x9f8, Size: 0xc]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xa04, Size: 0xc]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 0x1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa12, Size: 0x1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa13, Size: 0x1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa14, Size: 0x1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa15, Size: 0x1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa16, Size: 0x1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa17, Size: 0x1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 0x1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa19, Size: 0x1]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1a, Size: 0x1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1b, Size: 0x1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xa1c, Size: 0x4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xa20, Size: 0x4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 0x1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0xa28, Size: 0xc]
	float C_LeanOut_AimAngle;//[Offset: 0xa34, Size: 0x4]
	bool C_IsReloadingWhilePoseChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 0x1]
	float LeanOutL_AimAngle;//[Offset: 0xa40, Size: 0x4]
	float LeanOutR_AimAngle;//[Offset: 0xa44, Size: 0x4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 0x1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 0x1]
	void TryToFireFlareGun();// 0x1442b98
	void SetVelocityZFactor(float NewFactor);// 0x1442b20
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x1442a5c
	void PostCacheParamList(float DeltaSeconds);// 0x1c01fa0
	void DumpAllProperties();// 0x12e82e4
	void DumpAllAnimInstancesInThisWorld();// 0x12e82e4
	AnimParamList CacheParamList(float DeltaSeconds);// 0x144292c
	PlayerAnimList CacheAnimVarList();// 0x144285c

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x3d8, Size: 0x4]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x3dc, Size: 0x4]

--------------------------------
Class: AnimInstanceProxy

--------------------------------
Class: STExtraAnimInstance_TDM.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x530, Size: 0x3f0]

--------------------------------
Class: STExtraBagPetAnimInstance.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2ec, Size: 0x8]
	SkeletalMeshComponent* C_OwnerSkeletalMesh;//[Offset: 0x2f4, Size: 0x4]
	float CheckPlayAnimDuration;//[Offset: 0x2f8, Size: 0x4]
	float AimAtAngleToPlayAnim;//[Offset: 0x2fc, Size: 0x4]
	int RandomIndex;//[Offset: 0x300, Size: 0x4]
	float RandomIndexDuration;//[Offset: 0x304, Size: 0x4]
	bool ShowDebugMaxDistanceFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void UpdateCheckAdjustAnimFromOwnerCharacter(float DeltaTime);// 0x1446a34

--------------------------------
Class: STExtraBuffSystemComponent.STBaseBuffSystemComponent.ActorComponent.Object

--------------------------------
Class: STExtraBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static Rotator Vector2Rotator(Vector ver);// 0x1475520
	static bool TraceGround(Object* ContextObject, Vector AboveGroundLoc, float TraceDeepDis, out HitResult HitInfo, bool bForceStatic);// 0x1475368
	static bool TraceBlock(Object* ContextObject, Vector Start, Vector End, out HitResult HitInfo, out const Actor*[] IgnoreActors, bool bForceStatic);// 0x1475120
	static bool TraceAllBlocks(out HitResult[] OutHits, Object* ContextObject, Vector Start, Vector End, out HitResult HitInfo, out const Actor*[] IgnoreActors, bool bForceStatic);// 0x1474e28
	static bool SphereTraceAllObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult[] OutHits, bool bIgnoreSelf);// 0x1474a64
	static ParticleSystemComponent* SpawnEmitterLocationWithMgr(Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy);// 0x1474888
	static ParticleSystemComponent* SpawnEmitterAttachedWithMgr(Object* WorldContextObject, ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy);// 0x1474598
	static CustomParticleSystemComponent* SpawnCustomEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bAutoDestroy);// 0x1474368
	static CustomParticleSystemComponent* SpawnCustomEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, bool bAutoDestroy);// 0x14741d8
	static GameModeCorpsDetailData[] SortCorpsByKilledPlayer(out const GameModeCorpsDetailData[] CorpsInfo);// 0x1473f7c
	static void SetUpPostProcessSetting(PostProcessVolume* PostProcessVolume, out MaterialInstanceDynamic*[] Blends);// 0x1473e74
	static void SetPostProcessBlendEffectWeightByIndex(PostProcessVolume* PostProcessVolume, byte Index, float Weight);// 0x1473d7c
	static void SetCollisionResponseForBodies(SkeletalMeshComponent* SkelMesh, byte Channel, byte NewResponse, FName[] BodyNames);// 0x1473b54
	static bool LuaRemoteEventWithObjects(Object* WorldContextObject, FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x1473810
	static bool LuaRemoteEventWithObject(Object* WorldContextObject, FString EventTag, FString CustomParam, Object* TObject);// 0x1473514
	static bool LuaRemoteEvent(Object* WorldContextObject, FString EventTag, FString CustomParam);// 0x147325c
	static Vector LimitVector(out const Vector CurVec, out const Vector MaxVec);// 0x1473174
	static Rotator LimitRotator(out const Rotator CurRot, out const Rotator MaxRot);// 0x1473174
	static bool IsVeryLowMemoryDevice();// 0x147314c
	static bool IsSlotHasEquipped(Character* Character, enum InSlotType);// 0x1473090
	static bool IsSamePlayerState(UAEPlayerState* stateA, UAEPlayerState* stateB);// 0x1472fd4
	static bool IsPlayerCantBlock(Actor* DamageCauser, out HitResult HitResult);// 0x1472ef4
	static bool IsHiddenByOtherSlot(Character* Character, int ItemResID);// 0x1472e38
	static bool HasTeammateAlive(STExtraPlayerState* PS);// 0x1472dc0
	static bool GetWorldToUIShowLocationRect(Object* WorldContextObject, out const Vector WorldLocation, out const Vector4 Limit, out const Vector2D UIOffset, out Vector2D OutPosition, out float Angle);// 0x1472b80
	static float GetUIShowLocationAngle(Object* WorldContextObject, out const Vector2D InPosition, out const Vector4 Limit);// 0x1472a40
	static Margin GetUIAdaptation();// 0x14729f8
	static StaticMesh* GetStaticMeshFromString(const FString Name);// 0x14728a0
	static Actor*[] GetSphereOverlappingPawns(Object* WorldContextObject, float Radius, float CollisionFreeRadius, out const Vector Origin, Actor* DamageCauser, out const Actor*[] IgnoreActors, bool DrawVisibleTraceDebugLine);// 0x147259c
	static Actor*[] GetSphereOverlappingActors(Object* WorldContextObject, float Radius, float CollisionFreeRadius, out const Vector Origin, Actor* DamageCauser, out const Actor*[] IgnoreActors, bool DrawVisibleTraceDebugLine);// 0x1472298
	static SkeletalMesh* GetSkeletalMeshFromString(const FString Name);// 0x1472140
	static SceneComponent*[] GetSceneComponentAttachedChildren(SceneComponent* SceneComponent);// 0x1472084
	static float GetRadialDamageImpulseAtLocation(Vector Location, const DamageType* DamageType, Vector Origin, float Radius);// 0x1471f38
	static QuickSignComponent* GetQuickSignComponentFromController(Controller* Controller);// 0x1471ec0
	static WeightedBlendable GetPostProcessBlendEffectWeightByIndex(PostProcessVolume* PostProcessVolume, byte Index);// 0x1471dfc
	static ParticleSystem* GetParticleSystemFromString(const FString Name);// 0x1471ca4
	static MaterialInterface* GetMaterialFromString(const FString Name);// 0x1471b4c
	static DynamicWeatherMgr* GetDynamicWeatherMgr(const Object* WorldContextObject);// 0x1471ad4
	static float GetDistanceToPlayer(const Object* WorldContextObject, out const Vector Position, int PlayerIndex);// 0x14719c4
	static FString GetDeviceName();// 0x147190c
	static void GetClassByAssetReferenceAsync(SoftObjectPath AssetReference, delegate ClassLoadSuccessDelegate);// 0x1471734
	static class Object GetClassByAssetReference(SoftObjectPath AssetReference);// 0x14715c8
	static ChatComponent* GetChatComponentFromController(Controller* Controller);// 0x1471550
	static ChatComponent* GetChatComponentFromCharacter(Character* Character);// 0x14714d8
	static Actor*[] GetCapsuleOverlappingActors(Object* WorldContextObject, float CapsuleRadius, float CapsuleHalfHeight, out const Quat RotQuat, out const Vector Origin, Actor* DamageCauser, out const Actor*[] IgnoreActors, bool DrawVisibleTraceDebugLine);// 0x147117c
	static void GetBuildConfiguration(out FString Configuration);// 0x14710b8
	static BackpackComponent* GetBackpackComponentFromPawn(Pawn* Character);// 0x1471040
	static BackpackComponent* GetBackpackComponentFromController(Controller* Controller);// 0x1470fc8
	static BackpackComponent* GetBackpackComponentFromCharacter(Character* Character);// 0x1470f50
	static void GetAssetByAssetReferenceAsyncWithID(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate, int resID);// 0x1470d34
	static void GetAssetByAssetReferenceAsyncWithFuncName(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate);// 0x1470b5c
	static void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate, bool AtLeastOneFrame);// 0x1470934
	static void GetAssetByAssetReferenceAndOneParamAsync(SoftObjectPath AssetReference, Object* InputParam, delegate AssetLoadSuccessDelegate);// 0x1470718
	static Object* GetAssetByAssetReference(SoftObjectPath AssetReference);// 0x14705ac
	static FString GetAlphaTexturePathByImgPath(FString imagepath);// 0x1470470
	static FString GetAlphaSperateMatPathByImagePath(FString MatPath);// 0x1470334
	static Vector[] Generate3StageBezierPointsSrcToDst(Vector Src, Vector Ctl, Vector Dst, int Num);// 0x1470164
	static bool GasolineCanExplosionApplyDamage(Object* WorldContextObject, out const ApplyRadialDamageParams ApplyRadialDamageParams);// 0x146ffe8
	static void FlushSlateZBufferWriteState(World* World);// 0x146ff78
	static void FilterActorsByNumLimit(Vector Center, out <Actor*,HitResult> OutActors, int MaxTargetNum);// 0x146fde8
	static void EventFunc_Client_OnStartWeakGuidForActor(Actor* GuidActor, int GuidID);// 0x146fd34
	static void EventFunc_Client_InfectionOnCloseZombieSelectUI(Object* TriggerObj, int CloseCount);// 0x146fc80
	static void EventFunc_Client_InfectionCloseStageTip(Object* TriggerObj);// 0x146fc10
	static void EventFunc_Client_InfectionCloseFirstTimeTip(Object* TriggerObj);// 0x146fba0
	static void EventFunc_Client_HeavyWeaponCloseFirstTimeTip(Object* TriggerObj);// 0x146fb30
	static float DistanceSqToBox(out const Vector Location, out const Vector BoxCenter, out const Rotator BoxRotation, out const Vector BoxExtent, out Vector ClosestPoint, bool DebugDraw, World* World, float DeltaTime);// 0x146f878
	static int DiffUTCTime();// 0x146f850
	static void DestroyActorWithParam(Actor* Target, bool bForce, bool bModifyLevel);// 0x146f744
	static UserWidget* CreateWidgetByPathName(const FString Name, Object* ContextObject);// 0x146f5a8
	static bool CreateMyLandscape(Object* WorldContextObject, FString MatPath, FString GeoPath);// 0x146f424
	static bool ComponentIsVisibleFromOrigin(PrimitiveComponent* VictimComp, out const Vector Origin, Actor* IgnoredActor, out const Actor*[] IgnoreActors, byte TraceChannel, bool DrawVisibleTraceDebugLine, bool IsConsideringVehicleBlock);// 0x146f194
	static bool ComponentIsVisibleFromExplosionWithEndPosition(PrimitiveComponent* VictimComp, out const Vector Origin, out const Vector EndPos, Actor* IgnoredActor, out const Actor*[] IgnoreActors, byte TraceChannel, bool DrawVisibleTraceDebugLine, bool IsConsideringVehicleBlock);// 0x146eeb0
	static bool ComponentIsVisibleFromExplosion(PrimitiveComponent* VictimComp, out const Vector Origin, Actor* IgnoredActor, out const Actor*[] IgnoreActors, byte TraceChannel, bool DrawVisibleTraceDebugLine, bool IsConsideringVehicleBlock);// 0x146ec20
	static float CalculateKDRatio(const int iKillNum, const int iDeathNum);// 0x146eb64
	static bool ApplyRadiusDamageSTEWithMomentum(Object* WorldContextObject, float BaseDamage, float MinimumDamage, float BaseMomentumMag, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, float CollisionFreeRadius, <byte,float> AddtionalDamage, bool IsVehicleExplode, bool DrawVisibleTraceDebugLine, float BaseDamageForZombie, float MininumDamageForZombie, int Type, int TypeSpecificID, byte InDamageType, int MaxTargetNum);// 0x146e310
	static bool ApplyRadiusDamageSTEThroughWall(Object* WorldContextObject, float BaseDamage, float MinimumDamage, float BaseMomentumMag, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, float ThrowWallDamageScale, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, float CollisionFreeRadius, <byte,float> AddtionalDamage, bool DrawVisibleTraceDebugLine, byte InDamageType, int MaxTargetNum);// 0x146dc04
	static bool ApplyRadiusDamageSTE(Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, float CollisionFreeRadius, bool DrawVisibleTraceDebugLine);// 0x146d7cc
	static bool ApplyRadialDamage(Object* WorldContextObject, out const ApplyRadialDamageParams RadialDamageParams);// 0x146d650
	static void AddDistributedImpulseAtLocation(SkeletalMeshComponent* SkelMesh, Vector Impulse, Vector Location, FName BoneName, float DistriburedImpulseScale);// 0x146d4bc

--------------------------------
Class: STExtraBuffAction_AdjustSmokePostMat.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	CurveFloat* CurveAlphaAlongTime;//[Offset: 0x110, Size: 0x4]
	CurveFloat* CurveAlphaAlongDistance;//[Offset: 0x114, Size: 0x4]
	bool ResetOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	MaterialInterface* ParentMaterial;//[Offset: 0x11c, Size: 0x4]
	FName ShaderUniformName;//[Offset: 0x120, Size: 0x8]
	STScreenAppearanceComponent* OwnerScreenAppearanceCompCache;//[Offset: 0x134, Size: 0x4]

--------------------------------
Class: STExtraBuffAction_AdjustStunPostMat.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float FadeInDuration;//[Offset: 0x110, Size: 0x4]
	bool IsUseBreathPercentageAsAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	float FadeOutDuration;//[Offset: 0x118, Size: 0x4]
	bool ResetOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	MaterialInterface* ParentMaterial;//[Offset: 0x120, Size: 0x4]
	FName ShaderUniformName;//[Offset: 0x128, Size: 0x8]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x130, Size: 0x4]
	bool IsUniqueEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	StaticMeshComponent* CameraStaticMeshCom;//[Offset: 0x138, Size: 0x4]

--------------------------------
Class: STExtraBuffAction_Attachment.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTBuffAttachment[] Attachments;//[Offset: 0x110, Size: 0xc]
	<FString,ParticleSystem*> DecentParticles;//[Offset: 0x11c, Size: 0x3c]

--------------------------------
Class: UTBuffAttachment
	SceneComponent* Component;//[Offset: 0x0, Size: 0x4]
	SceneComponent* ComponentEnemy;//[Offset: 0x4, Size: 0x4]
	FName SocketName;//[Offset: 0x8, Size: 0x8]
	bool bShowOnlyFirstPersonView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: DamageType_BuffDot.Object

--------------------------------
Class: DamageTargetRate_BuffDot.DamageType_BuffDot.Object
	float Percent;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: STExtraBuffAction_Dot.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float IntervalTime;//[Offset: 0x110, Size: 0x4]
	float DotValue;//[Offset: 0x114, Size: 0x4]
	int ItemType;//[Offset: 0x118, Size: 0x4]
	int ItemSpecificID;//[Offset: 0x11c, Size: 0x4]
	bool bUseWeaponDamageType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool NeedMultiplyDamageForLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	CurveFloat* CurveLayeredDamage;//[Offset: 0x124, Size: 0x4]
	DamageType_BuffDot* DamageType;//[Offset: 0x128, Size: 0x4]
	class DamageType* DamageTypeClass;//[Offset: 0x12c, Size: 0x4]
	bool HasEffectWhenNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]

--------------------------------
Class: STExtraBuffAction_DrowningDamage.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float IntervalTime;//[Offset: 0x110, Size: 0x4]
	float DotValue;//[Offset: 0x114, Size: 0x4]
	float BreathAmountThrehold;//[Offset: 0x118, Size: 0x4]
	class DamageType* DamageTypeClass;//[Offset: 0x11c, Size: 0x4]

--------------------------------
Class: STExtraBuffAction_EnableAttrModifier.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	FString AttrConfigItemName;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: STExtraBuffAction_EnterState.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	enum TargetState;//[Offset: 0x110, Size: 0x1]

--------------------------------
Class: STExtraBuffAction_Invincible.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	bool RunOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	void UndoAction_Internal();// 0x140c600
	bool RealDoAction_Internal();// 0x147816c

--------------------------------
Class: STExtraBuffAction_ListenWeaponAttack.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	bool ListenHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool ListenLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	void UndoAction_Internal();// 0x140c600
	bool RealDoAction_Internal();// 0x147816c
	void NotifyHitLost();// 0x1478684
	void NotifyHit(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x14784a0

--------------------------------
Class: STExtraBuffAction_Log.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	FString LogString;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: STExtraBuffAction_PeriodAction.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillAction* Action;//[Offset: 0x110, Size: 0x4]
	float Interval;//[Offset: 0x114, Size: 0x4]
	float CurrentTickDeltaTime;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: STExtraBuffAction_PlayAnimation.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	BuffAnimationItem BuffAnimations;//[Offset: 0x110, Size: 0xa8]
	BuffAnimationTagItem BuffAnimationTags;//[Offset: 0x1b8, Size: 0x28]

--------------------------------
Class: BuffAnimationItem
	AnimationAsset* AnimationAssetToPlay;//[Offset: 0x0, Size: 0x28]
	AnimationAsset* AnimationAssetToPlayFPP;//[Offset: 0x28, Size: 0x28]
	AnimMontage* AnimationMontageToPlay;//[Offset: 0x50, Size: 0x28]
	AnimMontage* AnimationMontageToPlayFPP;//[Offset: 0x78, Size: 0x28]
	bool NeedReplayByChangFirstView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: BuffAnimationTagItem
	FName AnimationAssetTag;//[Offset: 0x0, Size: 0x8]
	FName AnimationAssetTagFPP;//[Offset: 0x8, Size: 0x8]
	FName AnimationMontageTag;//[Offset: 0x10, Size: 0x8]
	FName AnimationMontageTagFPP;//[Offset: 0x18, Size: 0x8]
	bool NeedReplayByChangFirstView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: STExtraBuffAction_SpellSkill.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	int SkillID;//[Offset: 0x110, Size: 0x4]
	byte SpellerType;//[Offset: 0x114, Size: 0x1]
	byte SourceType;//[Offset: 0x115, Size: 0x1]
	void StartSkill(Actor* Speller);// 0x147925c
	bool RealDoAction_Internal();// 0x147816c

--------------------------------
Class: STExtraBuffAction_StopMovement.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: STExtraBuffApplierComponent.ActorComponent.Object
	FString OverlapCheckComponnentName;//[Offset: 0xbc, Size: 0xc]
	int MaxTargetNum;//[Offset: 0xc8, Size: 0x4]
	BuffApplierConditionPair[] BuffConditionArray;//[Offset: 0xcc, Size: 0xc]
	STExtraCharacter*[] Targets;//[Offset: 0xd8, Size: 0xc]
	float CheckPeriod;//[Offset: 0xe4, Size: 0x4]
	ShapeComponent* OverlapCheckComponnent;//[Offset: 0xec, Size: 0x4]
	bool IsCheckingBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool IsIgnoreThrower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	bool IsIgnoreTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 0x1]
	bool IsRemoveBuffWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool bNeedRefreshBuffInRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	Vector ServerIsHeadVisibleOffsetForProne;//[Offset: 0xf8, Size: 0xc]
	void SetIsEnableChecking(bool Enable);// 0x1479948
	void OverlapCheckerOneTarget(Actor* OtherActor);// 0x14798d0

--------------------------------
Class: BuffApplierConditionPair
	byte ConditionVar;//[Offset: 0x0, Size: 0x1]
	bool IsShowDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float InSightCheckAngle;//[Offset: 0x4, Size: 0x4]
	float InnerRangeDistance;//[Offset: 0x8, Size: 0x4]
	CurveFloat* CurveExpirePerDistance;//[Offset: 0xc, Size: 0x4]
	FName[] BuffNameArray;//[Offset: 0x10, Size: 0xc]
	int[] BuffSkillIdArray;//[Offset: 0x1c, Size: 0xc]
	int[] BuffSkillIdArrayForZombie;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: STExtraBuffRandomApplierComponent.STExtraBuffApplierComponent.ActorComponent.Object

--------------------------------
Class: STExtraBuffStatusType_CanMove.STBaseBuffStatusType.Object

--------------------------------
Class: STExtraBuffStatusType_CanAttack.STBaseBuffStatusType.Object

--------------------------------
Class: STExtraDamageActor.Actor.Object
	bool bCanPlayEff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	void TakeRangeDamage();// 0x1c01fa0
	void SetDamageParam(float PlayerInnerHealthDamage, float PlayerOuterHealthDamage, float ZombieInnerHealthDamage, float ZombieOuterHealthDamage, float WallWeakenDamageRatio, float InnerRadius, float OuterRadius);// 0x1c01fa0
	void PlayFrontedEffect(Vector ExplodePos);// 0x1c01fa0
	void OnInitialize();// 0x12ee368
	void OnClientBulleteHitEvent(const Actor* Causer, const Actor* Victim, out const Vector HitPos);// 0x147c4a8
	void BroadcastClientEffect(Vector ExplodePos);// 0x147c3fc

--------------------------------
Class: STExtraDamageType.DamageType.Object
	<enum,float> DamageAdditionalRateMap;//[Offset: 0x30, Size: 0x3c]
	<enum,float> AdditionaAbsoluteDamageMap;//[Offset: 0x6c, Size: 0x3c]
	<enum,float> MomentumAbsoluteRateMap;//[Offset: 0xa8, Size: 0x3c]
	byte STExtraDamageType;//[Offset: 0xe4, Size: 0x1]
	int STExtraDamageAdditionalParam;//[Offset: 0xe8, Size: 0x4]
	bool IsCanDamageSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	float DamageScaleOfSelf;//[Offset: 0xf0, Size: 0x4]
	bool IsCanDamageTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	float DamageScaleOfTeammate;//[Offset: 0xf8, Size: 0x4]
	bool bPlayCamersShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]

--------------------------------
Class: STExtraDelegateMgr.BlueprintFunctionLibrary.Object
	delegate OnPlayerStateNameChange;//[Offset: 0x1c, Size: 0xc]
	delegate OnHPChange;//[Offset: 0x28, Size: 0xc]
	delegate OnCanRescueOtherChange;//[Offset: 0x34, Size: 0xc]
	delegate OnRescueingStatusChangeChange;//[Offset: 0x40, Size: 0xc]
	delegate OnBreathChange;//[Offset: 0x4c, Size: 0xc]
	delegate OnKilledTips;//[Offset: 0x58, Size: 0xc]
	delegate OnVehicleHPChange;//[Offset: 0x64, Size: 0xc]
	delegate OnCharacterStateChangeDelegate;//[Offset: 0x70, Size: 0xc]
	delegate OnEnterBornIsland;//[Offset: 0x7c, Size: 0xc]
	delegate OnCorpsOutGame;//[Offset: 0x88, Size: 0xc]
	delegate OnCorpsJoinGame;//[Offset: 0x94, Size: 0xc]
	static STExtraDelegateMgr* STExtraDelegateMgrInstance();// 0x147cecc

--------------------------------
Class: STExtraDemoNetDriver.DemoNetDriver.NetDriver.Object

--------------------------------
Class: STExtraHouseActor.UAEHouseActor.UAENetActor.Actor.Object
	Vector[] itemSpotPosList;//[Offset: 0x394, Size: 0xc]
	BuildingSearchPath[] searchPathList;//[Offset: 0x3a0, Size: 0xc]
	Vector[] cornerPointList;//[Offset: 0x3ac, Size: 0xc]
	Vector centerPoint;//[Offset: 0x3b8, Size: 0xc]
	bool isAddInAIList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]

--------------------------------
Class: BuildingSearchPath
	BuildingSearchPathLink[] itemPosLinkList;//[Offset: 0x0, Size: 0xc]
	int8 buildingPartIndext;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: BuildingSearchPathLink
	Vector[] WayPointList;//[Offset: 0x0, Size: 0xc]
	int targetSpotIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: STExtraDynamicHouseActor.STExtraHouseActor.UAEHouseActor.UAENetActor.Actor.Object
	SceneComponent* RootSceneComponent;//[Offset: 0x3cc, Size: 0x4]

--------------------------------
Class: STExtraExplosiveActor.Actor.Object
	float BaseDamage;//[Offset: 0x2c8, Size: 0x4]
	float MinimumDamage;//[Offset: 0x2cc, Size: 0x4]
	float DamageInnerRadius;//[Offset: 0x2d0, Size: 0x4]
	float DamageOuterRadius;//[Offset: 0x2d4, Size: 0x4]
	float DamageFreeRadius;//[Offset: 0x2d8, Size: 0x4]
	float DamageFalloff;//[Offset: 0x2dc, Size: 0x4]
	class DamageType* DamageTypeClass;//[Offset: 0x2e0, Size: 0x4]
	class STExtraExplosionEffect* ExplosionEffectTemplate;//[Offset: 0x2e4, Size: 0x4]
	bool DrawExplodeVisibleTraceDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	void Explode(Pawn* InstigatorPawn, Actor* DamageCauser, Actor*[] IgnoreActors, Vector Origin, bool bReplicateToClients);// 0x147d564

--------------------------------
Class: STExtraPetMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object

--------------------------------
Class: STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bEnablePetReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 0x1]
	bool bEnableTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 0x1]
	float DefaultTraceDeltaTime;//[Offset: 0x958, Size: 0x4]
	float TraceLength;//[Offset: 0x95c, Size: 0x4]
	float CurrentTraceDeltaTime;//[Offset: 0x960, Size: 0x4]
	byte[] TraceTypeConfig;//[Offset: 0x964, Size: 0xc]
	SimulateSyncSmoothComponent* PetSimulateSyncSmooth;//[Offset: 0x970, Size: 0x4]
	void TraceForward();// 0x147e8dc
	SimulateSyncSmoothComponent* GetSyncSmoothComponent();// 0x147e8b4

--------------------------------
Class: UAESkeletalMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ModifyLODBias;//[Offset: 0x9d4, Size: 0x4]

--------------------------------
Class: STPetMeshComponent.UAESkeletalMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool UseModifyLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 0x1]
	int LowLevelDeviceLODBias;//[Offset: 0x9dc, Size: 0x4]

--------------------------------
Class: STExtraPetComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	STExtraBaseCharacter* PetOwnerPlayerPawn;//[Offset: 0x238, Size: 0x4]
	STExtraPetCharacter* PetPawn;//[Offset: 0x23c, Size: 0x4]
	void OnRep_PetPawn();// 0x1c01fa0
	void OnRep_PetOwnerPlayerPawn();// 0x1c01fa0

--------------------------------
Class: STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	bool bEnableUpdateControlPetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x366, Size: 0x1]
	float PetBlockDetectionDistance;//[Offset: 0x368, Size: 0x4]
	float PetBlockDetectionInterval;//[Offset: 0x36c, Size: 0x4]
	int PetBlockDetectionSampleCount;//[Offset: 0x370, Size: 0x4]

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x135, Size: 0x1]
	float MaxFlyHeight;//[Offset: 0x138, Size: 0x4]
	float InitialMaxTarceDist;//[Offset: 0x13c, Size: 0x4]
	Vector InitialLocation;//[Offset: 0x140, Size: 0xc]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x14c, Size: 0xc]
	Actor* ActorOwner;//[Offset: 0x158, Size: 0x4]
	void SetSkipUpdate(bool bNewValue);// 0x147f1c0
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x1c01fa0
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x1c01fa0
	float GetMaxFlyHeight();// 0x147f198

--------------------------------
Class: STExtraFireBalloon.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x2d0, Size: 0x4]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x2d4, Size: 0x4]
	FireBalloonMovementComponent* Movement;//[Offset: 0x2d8, Size: 0x4]
	int MapMarkTypeID;//[Offset: 0x2dc, Size: 0x4]
	enum MapMarkFlag;//[Offset: 0x2e0, Size: 0x1]
	Pawn* Driver;//[Offset: 0x2e8, Size: 0x4]
	float MoveUpValue;//[Offset: 0x2ec, Size: 0x4]
	byte MovementSmoothMode;//[Offset: 0x320, Size: 0x1]
	float MovementSmoothAlpha;//[Offset: 0x324, Size: 0x4]
	float MoveUpScale;//[Offset: 0x328, Size: 0x4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	float AutoFallOffSpeed;//[Offset: 0x330, Size: 0x4]
	Vector ControlInputVector;//[Offset: 0x334, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x340, Size: 0xc]
	float TickInterval;//[Offset: 0x34c, Size: 0x4]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x147f5e8
	void SetMoveUpValue(float InMoveUpValue);// 0x147f570
	void SetDriver(Pawn* InPawn);// 0x12ee384
	void OnRep_Driver(Pawn* PrevDriver);// 0x12de114
	Pawn* GetDriver();// 0x12de3e8
	bool CanBeDriver(Pawn* InPawn);// 0x1424e24
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x1c01fa0

--------------------------------
Class: STExtraFlareGunBullet.Actor.Object
	SphereComponent* SphereComponent;//[Offset: 0x2c8, Size: 0x4]
	BulletMovementComponent* PMComp;//[Offset: 0x2cc, Size: 0x4]
	ParticleSystemComponent* ParticleComp;//[Offset: 0x2d0, Size: 0x4]
	float CallSuperAirDropHeight;//[Offset: 0x2d4, Size: 0x4]
	float LifeTime;//[Offset: 0x2d8, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0x2dc, Size: 0x4]
	float Phase1LastTime;//[Offset: 0x2e0, Size: 0x4]
	float Phase2FallZSpeed;//[Offset: 0x2e4, Size: 0x4]
	float CallSuperAirSropRadius;//[Offset: 0x2e8, Size: 0x4]
	float ParticleScaleParamByDistanceToCamera;//[Offset: 0x2ec, Size: 0x4]
	int CallSuccessMsgTipID;//[Offset: 0x2f0, Size: 0x4]
	int TeammateCallSuccessMsgTipID;//[Offset: 0x2f4, Size: 0x4]
	delegate OnCallAirDrop;//[Offset: 0x2f8, Size: 0xc]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x304, Size: 0x4]
	delegate OnLaunchBullet;//[Offset: 0x308, Size: 0xc]
	void SetPhase1ParticleSystemInActive();// 0x147fef8
	void RPC_Multicast_StartLaunch(Vector Velocity, float Gravity);// 0x147fdf4
	void RPC_Multicast_EnterPhase2();// 0x147fd98
	void RPC_Multicast_CanAirDrop();// 0x147fd3c
	void OnBounce(out const HitResult _ImpactResult, out const Vector _ImpactVelocity);// 0x147fc48
	void LaunchBulletDelegate__DelegateSignature();// 0x1c01fa0
	void CallAirDropDelegate__DelegateSignature();// 0x1c01fa0

--------------------------------
Class: STExtraFlareGunShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	class STExtraFlareGunBullet* BulletTemplate;//[Offset: 0xae4, Size: 0x4]

--------------------------------
Class: STExtraFPPAnimInstance.STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	Transform C_FPPWeaponOffset;//[Offset: 0xa70, Size: 0x30]
	Vector C_FPPStandMeshOffset;//[Offset: 0xaa0, Size: 0xc]
	float C_FPPAimOffsetRotateRate;//[Offset: 0xaac, Size: 0x4]
	bool C_HoldingGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 0x1]
	Vector C_FPPWeaponOffset_Location;//[Offset: 0xab4, Size: 0xc]
	bool ShouldRotateSpine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 0x1]
	bool b_PickupFPPIKFalse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac1, Size: 0x1]
	bool b_GripIKTrue_PoseChangeIKTure_ForeGripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac2, Size: 0x1]
	Rotator r_C_OwnerRotation_Sub_C_ControlRotation;//[Offset: 0xac4, Size: 0xc]
	Rotator r_C_OwnerRotation_Sub_C_ControlRotation_Roll;//[Offset: 0xad0, Size: 0xc]
	bool b_Vel500_OR_Vel350Crouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 0x1]
	bool b_CrouchOrProneOrWeaponChargeGUN;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadd, Size: 0x1]
	bool b_WeaponType_NEQ_None_AND_Knife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xade, Size: 0x1]
	bool b_WeaponType_NEQ_None_AND_Knife_AND_ChargeGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadf, Size: 0x1]
	float f_C_CharacterYawRotateRate;//[Offset: 0xae0, Size: 0x4]
	bool b_C_MoveVelocityX_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae4, Size: 0x1]
	bool C_HandleFolderFactor_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae5, Size: 0x1]
	bool C_JumpAndSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae6, Size: 0x1]
	bool C_NoAimOffset_Or_JumpAndSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae7, Size: 0x1]
	AnimParamList CacheParamList(float DeltaSeconds);// 0x144292c

--------------------------------
Class: STExtraGameMode.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	float PlaneFlyHeight;//[Offset: 0xb20, Size: 0x4]
	float PlaneStartDistance;//[Offset: 0xb24, Size: 0x4]
	float PlaneFlySpeed;//[Offset: 0xb28, Size: 0x4]
	float PlaneFlyPathRandomRadius;//[Offset: 0xb2c, Size: 0x4]
	float HaveToJumpDistance;//[Offset: 0xb30, Size: 0x4]
	float PrachuteHaveToOpeningHeight;//[Offset: 0xb34, Size: 0x4]
	float ParachuteHaveToLandHeight;//[Offset: 0xb38, Size: 0x4]
	FString MapName;//[Offset: 0xb3c, Size: 0xc]
	void OnGameEnd();// 0x12e82e4

--------------------------------
Class: STExtraGameplayStatics.GameplayStatics.BlueprintFunctionLibrary.Object
	static void UnloadWeatherStreamLevel(const Object* WorldContextObject);// 0x1486558
	static void StopSyncSound(Actor* pSouceActor);// 0x14864e8
	static void StopAkEvent(int AkEventID, Object* WorldContextObject);// 0x1486434
	static float STApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x14861ec
	static void SetWetness(float Wetness);// 0x148617c
	static void SetScreenSizeModifier(bool bActive, out const Vector2D Center, float Radius, float ScreenSizeFactor);// 0x1486024
	static void PostSyncAkEvent(int AkEventID, Actor* pSouceActor, out const Vector AkLocation, bool IsFireSound);// 0x1485ed0
	static bool IsShipping();// 0x1485ea8
	static bool IsActorInWater(const Actor* Actor, out float OutWaterHeight);// 0x1485ddc
	static void ClientFlushDebugStrings();// 0x1485dc8
	static void ClientDrawDebugString(const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0x1485c00
	static void ClientDrawDebugSphere(const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x1485a28
	static void ClientDrawDebugPoint(const Vector Position, float Size, LinearColor PointColor, float Duration);// 0x14858dc
	static void ClientDrawDebugLine(const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0x148574c
	static void ClientDrawDebugCylinder(const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x1485528
	static void ClientDrawDebugCoordinateSystem(const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0x1485398
	static void ClientDrawDebugConeInDegrees(const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x14850dc
	static void ClientDrawDebugCone(const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x14850dc
	static void ClientDrawDebugCircle(Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0x1484df4
	static void ClientDrawDebugCapsule(const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0x1484bcc
	static void ClientDrawDebugBox(const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0x14849e8
	static void ClientDrawDebugArrow(const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0x1484808

--------------------------------
Class: STExtraGameSession.GameSession.Info.Actor.Object

--------------------------------
Class: STExtraGlobalData.BlueprintFunctionLibrary.Object
	GM GMData;//[Offset: 0x1c, Size: 0x4]
	byte GameMap;//[Offset: 0x20, Size: 0x1]
	bool bIsUpdateRCityWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	float FPPDeafultFov;//[Offset: 0x24, Size: 0x4]
	bool HadPlayedSplash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	static STExtraGlobalData* STExtraGlobalDataInstance();// 0x148d3e8
	FString CurVersionNumber();// 0x148d328

--------------------------------
Class: GM
	bool GrassEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: STExtraGMDelegatesMgr.BlueprintFunctionLibrary.Object
	delegate NotifyGameEnterFightDelegate;//[Offset: 0x1c, Size: 0xc]
	delegate NotifyGameEnterFinishDelegate;//[Offset: 0x28, Size: 0xc]
	delegate InitGameModeProbeDelegate;//[Offset: 0x34, Size: 0xc]
	delegate UninitGameModeProbeDelegate;//[Offset: 0x40, Size: 0xc]
	delegate OnPlayerEscapeDelegate;//[Offset: 0x4c, Size: 0xc]
	delegate OnReceivedAICAddDelegate;//[Offset: 0x58, Size: 0xc]
	delegate OnPlayerRespawnedDelegate;//[Offset: 0x64, Size: 0xc]
	delegate OnPlayerRealExitDelegate;//[Offset: 0x70, Size: 0xc]
	static STExtraGMDelegatesMgr* GetInstance();// 0x148d948

--------------------------------
Class: UAEProjectile.Actor.Object
	int GrenadeItemId;//[Offset: 0x2c8, Size: 0x4]
	bool IsServerAlreadyExplodedCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	Vector ProjInitialRelativeOffset;//[Offset: 0x2d0, Size: 0xc]
	Vector ProjStandOffset;//[Offset: 0x2dc, Size: 0xc]
	Vector ProjCrouchOffset;//[Offset: 0x2e8, Size: 0xc]
	Vector ProjProneOffset;//[Offset: 0x2f4, Size: 0xc]
	byte ProjPrevoisOwnerPose;//[Offset: 0x300, Size: 0x1]
	bool bIsGroundedOnServerCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	void WorkAsBuffApplierEvent(out const FString BuffName, Pawn* BuffTarget);// 0x185fd9c
	void TimeoutExplodeMulticast_CPP();// 0x185fd40
	void TimeoutExplodeMulticast_BPEvent();// 0x133c1bc
	void StartFlyMulticast_CPP(Vector vel, bool isHighMode);// 0x185fc2c
	void StartFlyMulticast_BPEvent(Vector vel, bool isHighMode);// 0x185fb60
	void SetActorInitialRelativeOffset(Vector Offset, Vector StandOffset, Vector CrouchOffset, Vector ProneOffset, byte PrevoisOwnerPose);// 0x185f9bc
	void ServerNotifyGroundEventOnClient();// 0x1c01fa0
	void OnRep_IsServerAlreadyExplodedCpp();// 0x185f9a8
	void OnRep_IsGroundedOnServerCpp();// 0x185f994
	void OnProjectileStopOnServer();// 0x185f980
	void OnProjectileStopOnClient();// 0x185f96c
	void IsServerAlreadyExplodedCppNotify();// 0x185f950
	bool IsOwnerAutomous();// 0x185f928
	void GlassDetect(out const Vector Start, out const Vector End);// 0x185f850
	float GetRemainingEffectTime();// 0x185f820
	void CallExplode();// 0x185f804
	void BroadcastClientExplode();// 0x185f7a8

--------------------------------
Class: STExtraGrenadeBase.UAEProjectile.Actor.Object
	class STExtraExplosionEffect* ExplosionTemplate;//[Offset: 0x308, Size: 0x28]
	class STExtraExplosionEffect* ExplosionTemplateInAir;//[Offset: 0x330, Size: 0x28]
	class STExtraExplosionEffect* ExplosionTemplateInWater;//[Offset: 0x358, Size: 0x28]
	ItemDefineID ItemDefineID;//[Offset: 0x380, Size: 0x18]
	class Object* ExplosionTemplateClass;//[Offset: 0x398, Size: 0x4]
	class Object* ExplosionTemplateInAirClass;//[Offset: 0x39c, Size: 0x4]
	class Object* ExplosionTemplateInWaterClass;//[Offset: 0x3a0, Size: 0x4]
	void SpawnExplosionEffect(out const Vector Location);// 0x148e030
	void MulticastSpawnExplosionEffect(const Vector Location);// 0x148dfb8
	bool IsInWater();// 0x148df90
	bool IsFoor();// 0x148df68
	bool IsAttachToMovementPlatform();// 0x148df40
	void HandleLoadExplosionEffectFinished();// 0x148df2c
	void CheckUAVNofitySoundTips(out const Vector Location);// 0x148dea8
	void AttachToMovementPlatform();// 0x148de94

--------------------------------
Class: STExtraHelicopterVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STExtraHelicopterVehicleMovementComponent* HelicopterVehicleMovement;//[Offset: 0xcf4, Size: 0x4]
	CameraComponent* CameraComponent;//[Offset: 0xcf8, Size: 0x4]
	HelicopterTorqueCurveFloat[] ForWardTorqueCurveList;//[Offset: 0xcfc, Size: 0xc]
	HelicopterTorqueCurveFloat[] RightTorqueCurveList;//[Offset: 0xd10, Size: 0xc]
	CurveFloat* IdleForwardTorqueCurveFloat;//[Offset: 0xd24, Size: 0x4]
	float IdleForwardCountTime;//[Offset: 0xd28, Size: 0x4]
	CurveFloat* IdleRightTorqueCurveFloat;//[Offset: 0xd30, Size: 0x4]
	float IdleRightCountTime;//[Offset: 0xd34, Size: 0x4]
	ParticleSystemComponent* TopWingsEfeect;//[Offset: 0xd40, Size: 0x4]
	ParticleSystemComponent* BackWingsEfeect;//[Offset: 0xd44, Size: 0x4]
	ParticleSystemComponent* DustEffect;//[Offset: 0xd48, Size: 0x4]
	ParticleSystemComponent* WaterDustEffect;//[Offset: 0xd4c, Size: 0x4]
	ParticleSystemComponent* SandDustEffect;//[Offset: 0xd50, Size: 0x4]
	ParticleSystemComponent* GrassDustEffect;//[Offset: 0xd54, Size: 0x4]
	ParticleSystemComponent* SnowDustEffect;//[Offset: 0xd58, Size: 0x4]
	ParticleSystemComponent* WaterPlaneEffect;//[Offset: 0xd5c, Size: 0x4]
	FName TopWingsBoneName;//[Offset: 0xd60, Size: 0x8]
	FName BackWingsBoneName;//[Offset: 0xd68, Size: 0x8]
	float CrashHeight;//[Offset: 0xd70, Size: 0x4]
	float OnLandHeight;//[Offset: 0xd74, Size: 0x4]
	float IdleSpeed;//[Offset: 0xd78, Size: 0x4]
	float WingAccelerateMaxTime;//[Offset: 0xd7c, Size: 0x4]
	float showWaterPlaneffectHeight;//[Offset: 0xd80, Size: 0x4]
	float WaterPlaneffectHeigh;//[Offset: 0xd84, Size: 0x4]
	SkeletalMesh* HelicopterDestoryMeshAssetRef;//[Offset: 0xd98, Size: 0x28]
	AkAudioEvent* Sfx_Start_Local;//[Offset: 0xe24, Size: 0x4]
	AkAudioEvent* Sfx_Stop_Local;//[Offset: 0xe28, Size: 0x4]
	AkAudioEvent* Sfx_Start_Remote;//[Offset: 0xe2c, Size: 0x4]
	AkAudioEvent* Sfx_Stop_Remote;//[Offset: 0xe30, Size: 0x4]
	AkAudioEvent* Sfx_Helicopter_Topsloop_local;//[Offset: 0xe84, Size: 0x4]
	AkAudioEvent* Sfx_Helicopter_Topsloop_Remote;//[Offset: 0xe88, Size: 0x4]
	AkAudioEvent* Sfx_Helicopter_TopsloopStop_local;//[Offset: 0xe8c, Size: 0x4]
	AkAudioEvent* Sfx_Helicopter_TopsloopStop_Remote;//[Offset: 0xe90, Size: 0x4]
	AkAudioEvent* Sfx_Helicopter_burning;//[Offset: 0xe94, Size: 0x4]
	AkAudioEvent* Sfx_Helicopter_burningStop;//[Offset: 0xe98, Size: 0x4]
	float CrashMinSin;//[Offset: 0xeec, Size: 0x4]
	float NoFuelJumpHeight;//[Offset: 0xef0, Size: 0x4]
	void UpdateEngineStateByFuel(bool isStart);// 0x148eb10
	void SetParticleSystem(ParticleSystemComponent* topwings, ParticleSystemComponent* backwings, ParticleSystemComponent* nowdusteffect, ParticleSystemComponent* nowwaterdusteffect, ParticleSystemComponent* nowsanddusteffect, ParticleSystemComponent* nowgrassdusteffect, ParticleSystemComponent* nowsnowdusteffect, ParticleSystemComponent* nowWaterPlaneffect);// 0x148e8b0
	void SendToServerChangeCameraMode(bool isFreeMode);// 0x148e7e8
	void SendToAllChangeCameraMode(bool isFreeMode);// 0x148e760
	void HelicopterEngineUpdate(bool isStart);// 0x148e6d8
	Vector GetRotationInputDir();// 0x14422cc
	float GetDisToLand();// 0x148e6b0

--------------------------------
Class: STExtraHelicopterVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float NewtonFixedRate;//[Offset: 0x124, Size: 0x4]
	float TorqueFixedRate;//[Offset: 0x128, Size: 0x4]
	float MaxbodyPitchAngle;//[Offset: 0x12c, Size: 0x4]
	float MaxBodyPitchTorqueVaule;//[Offset: 0x130, Size: 0x4]
	float ForwardMaxAcceleration;//[Offset: 0x134, Size: 0x4]
	float MaxForwardMaxAccelerationPitchAngle;//[Offset: 0x138, Size: 0x4]
	float StartOffForwardTorqueBySpeedVaule;//[Offset: 0x13c, Size: 0x4]
	float StartOffForwardTorqueBySpeedAngle;//[Offset: 0x140, Size: 0x4]
	float OffForwardTorqueBySpeedVaule;//[Offset: 0x144, Size: 0x4]
	float MaxbodRollAngle;//[Offset: 0x148, Size: 0x4]
	float MaxBodyRollTorqueVaule;//[Offset: 0x14c, Size: 0x4]
	float RightMaxAcceleration;//[Offset: 0x150, Size: 0x4]
	float MaxRightMaxAccelerationRollAngle;//[Offset: 0x154, Size: 0x4]
	float MaxBackWingTorqueVaule;//[Offset: 0x158, Size: 0x4]
	float MaxBackWingPowerAngle;//[Offset: 0x15c, Size: 0x4]
	float PowerSmokeScale;//[Offset: 0x160, Size: 0x4]
	float PowerburnningScale;//[Offset: 0x164, Size: 0x4]
	CurveFloat* VerticalAccelerationCurve;//[Offset: 0x168, Size: 0x4]
	float OffGravityRate;//[Offset: 0x16c, Size: 0x4]
	float freelyfallingRate;//[Offset: 0x170, Size: 0x4]
	float EnterAdaptiveStateSpeed;//[Offset: 0x174, Size: 0x4]
	float BeyondMaxHeightAddaptiveExtra;//[Offset: 0x178, Size: 0x4]
	CurveFloat* VerticalAdaptiveAccelerationCurve;//[Offset: 0x17c, Size: 0x4]
	float MaxDistanceToLand;//[Offset: 0x180, Size: 0x4]
	float MaxDistanceToLandRange;//[Offset: 0x184, Size: 0x4]
	float EnterFlyStateHeight;//[Offset: 0x188, Size: 0x4]
	float LandTraceMaxHeight;//[Offset: 0x18c, Size: 0x4]
	float CloseDustEffectHeight;//[Offset: 0x190, Size: 0x4]
	float OpenParachuteHeight;//[Offset: 0x194, Size: 0x4]
	float CanOpenParachuteHeightInHelicopter;//[Offset: 0x198, Size: 0x4]
	float ForceOpenParachuteHeightInHelicopter;//[Offset: 0x19c, Size: 0x4]
	float CloseParachuteHeightInHelicopter;//[Offset: 0x1a0, Size: 0x4]
	float SkipOpenParachuteHeight;//[Offset: 0x1a4, Size: 0x4]
	bool isSecondControlMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	float SecondMaxBackWingTorqueVaule;//[Offset: 0x1ac, Size: 0x4]
	float SecondRightMaxAcceleration;//[Offset: 0x1b0, Size: 0x4]
	float ZVauleCheckTime;//[Offset: 0x1b4, Size: 0x4]
	float ZVauleCheckScale;//[Offset: 0x1b8, Size: 0x4]
	float CaveProtectTestLength;//[Offset: 0x1bc, Size: 0x4]
	float CaveMoveOffset;//[Offset: 0x1c0, Size: 0x4]
	float AddGForceHeight;//[Offset: 0x1c4, Size: 0x4]
	float SpwanCloseGrivitiyTime;//[Offset: 0x1c8, Size: 0x4]
	float SpwanCheckLandDis;//[Offset: 0x1cc, Size: 0x4]
	float upInputRate;//[Offset: 0x1d0, Size: 0x4]
	float forWardInputRate;//[Offset: 0x1d4, Size: 0x4]
	float rightInputRate;//[Offset: 0x1d8, Size: 0x4]
	float cameraRationYaw;//[Offset: 0x1dc, Size: 0x4]
	float verticalUpDis;//[Offset: 0x1e0, Size: 0x4]
	float STUpInputRate;//[Offset: 0x1e4, Size: 0x4]
	float STForWardInputRate;//[Offset: 0x1e8, Size: 0x4]
	float STRightInputRate;//[Offset: 0x1ec, Size: 0x4]
	float STcameraRationYaw;//[Offset: 0x1f0, Size: 0x4]
	float STverticalUpDis;//[Offset: 0x1f4, Size: 0x4]
	STExtraHelicopterVehicle* ownerHelicopter;//[Offset: 0x21c, Size: 0x4]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0x220, Size: 0x4]
	void ServerUpdateInput(float FowardInput, float RightInput, float UpInput, float nowcameraRationYaw, float nowverticalUpDis);// 0x148f028

--------------------------------
Class: HelicopterTorqueCurveFloat
	CurveFloat* TorqueCurveFloat;//[Offset: 0x0, Size: 0x4]
	float CurveTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: STExtraHoverVehicle.STExtraVehicleBase.Pawn.Actor.Object
	float BoostModifier;//[Offset: 0xcf4, Size: 0x4]
	STExtraHoverVehicleMovementComponent* HoverVehicleMovement;//[Offset: 0xcf8, Size: 0x4]
	void HandleOnMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x144231c
	Vector GetRotationInputDir();// 0x14422cc

--------------------------------
Class: STExtraHoverVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	HoverSimulateData[] HoverSimulateDatas;//[Offset: 0x124, Size: 0xc]
	float MovementRoughness;//[Offset: 0x130, Size: 0x4]
	float MainTraceLenght;//[Offset: 0x134, Size: 0x4]
	float MainHoverDistance;//[Offset: 0x138, Size: 0x4]
	float ForceSpring;//[Offset: 0x13c, Size: 0x4]
	float ForceDampening;//[Offset: 0x140, Size: 0x4]
	float TickInterval;//[Offset: 0x144, Size: 0x4]
	bool bDisableGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool bStickToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	bool bInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1]
	bool bGravityIncrease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1]
	float MaxAcceleration;//[Offset: 0x14c, Size: 0x4]
	float StartAccelerationRate;//[Offset: 0x150, Size: 0x4]
	float StopAccelerationRate;//[Offset: 0x154, Size: 0x4]
	float MaxRotationYawAngle;//[Offset: 0x158, Size: 0x4]
	float RotationYawRate;//[Offset: 0x15c, Size: 0x4]
	float BackwardForceScale;//[Offset: 0x160, Size: 0x4]
	float Acceleration;//[Offset: 0x164, Size: 0x4]
	float RotationYawAngle;//[Offset: 0x168, Size: 0x4]
	FName ApplyForceSocketName;//[Offset: 0x170, Size: 0x8]
	CurveFloat* SlideCompensationCurve;//[Offset: 0x178, Size: 0x4]
	float STThrottleInput;//[Offset: 0x184, Size: 0x4]
	float STSteeringInput;//[Offset: 0x188, Size: 0x4]
	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);// 0x148fbd4
	float GetThrottleInput();// 0x148fbb8
	float GetSteeringInput();// 0x148fb9c

--------------------------------
Class: HoverSimulateData
	float TraceLenght;//[Offset: 0x0, Size: 0x4]
	float HoverDistance;//[Offset: 0x4, Size: 0x4]
	float HoverDelta;//[Offset: 0x8, Size: 0x4]
	float HoverDelta_Old;//[Offset: 0xc, Size: 0x4]
	float SprintCoefficent;//[Offset: 0x10, Size: 0x4]
	float DampingCoefficent;//[Offset: 0x14, Size: 0x4]
	bool bInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float TickInterval;//[Offset: 0x1c, Size: 0x4]
	Vector TraceHitLocation;//[Offset: 0x20, Size: 0xc]
	Vector SimulateLocation;//[Offset: 0x2c, Size: 0xc]
	ArrowComponent* ArrowComp;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: STExtraInputInterface.Interface.Object
	void MoveUp(float Rate);// 0x12df754
	void MoveRight(float Rate);// 0x12df6d4
	void MoveForward(float Rate);// 0x1490010

--------------------------------
Class: STExtraLobbyVehicle.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x2c8, Size: 0x4]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0x2cc, Size: 0x4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0x2d0, Size: 0x4]
	bool PutOnVehicleStyleID(int InStyleID);// 0x14927c4
	bool PutOnVehicleItem(int InModelID, int ColorID, int PatternID, int ParticleID);// 0x149266c
	bool PutOffVehicleStyleID(int InStyleID);// 0x14925e4
	bool PutOffVehicleSlot(enum InSlotType);// 0x149255c
	bool PutOffVehicleItem(int InModelID);// 0x14924d4
	bool PreChangeVehicleFPPAvatar();// 0x14924a4
	bool PreChangeVehicleBrokenMat();// 0x1492474
	bool PreChangeVehicleAvatar_Old(int InAvatarID, int InAdvanceAvatarID);// 0x14923a8
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x14922dc
	VehicleAvatarComponent* GetVehicleAvatar();// 0x14922b4
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x149228c
	int GetDefaultAvatarID(int InAvatarID);// 0x1492204
	bool ClearAllVehicleStyleID();// 0x14921d4
	bool ClearAllVehicleItems();// 0x14921a4

--------------------------------
Class: STExtraMapFunctionLibrary.BlueprintFunctionLibrary.Object
	static void UpdateTeamMateLocAndRot(STExtraPlayerState*[] TeamMateStateArray, const PanelWidget*[] TeamMateInfoGridArray, Vector LevelLandScapeCenter, float CorrectMapScale, float RotateAngle, STExtraPlayerState* myPS, Image*[] ArrowImageArray, Vector2D MapAdjustOffset, float MapWindowHalfExtent, out int[] OutOfRangeTeammateIndex, bool isEntireMap);// 0x1496a60
	static void UpdatePlayersLocAndRot(out const STExtraPlayerState*[] TeamMateStateArray, out const Widget*[] PlayerInfoWidgetArray, const Vector LevelLandScapeCenter, float CorrectMapScale, float RotateAngle, STExtraPlayerState* myPS, Widget*[] PlayerRotWidgetArray, out const Vector2D MapAdjustOffset, float MapWindowHalfExtent, out int[] OutOfRangeTeammateIndex, bool isEntireMap);// 0x14964f0
	static void SetLeftRouteLength(CanvasPanelSlot* LeftRouteSlot, CanvasPanelSlot* PassedRouteSlot, float FlyingProcess, float RouteTotalLengthInMap, float MapScale, float TopOffset, float BottomOffset, bool bIsWar);// 0x149628c
	static void RnederThreadSetBigCore(bool isbig);// 0x1496214
	static STExtraMapFunctionLibrary* MapFuncLibInstance();// 0x14961ec
	static Vector MapCenterToPointVector(Vector PointLocationInLevel, Vector LevelLandScapeCenter, float LevelToMapScale);// 0x14960d4
	static bool IsPlayerOutSafeZone(PlayerController* PC, STExtraGameStateBase* GS);// 0x1496018
	bool IsNeedDrawGuideLine(float WhiteCircleRadius, Vector2D PlayerCoord, Vector2D WhiteCircleCoord);// 0x1495f14
	static Vector2D GetRotatedVector2D(Vector2D InputVector, float RotateAngle);// 0x1495e54
	static MiniMapStandardPoint* GetMapStandardPoint(const Object* WorldContextObject);// 0x1495ddc
	MapRealTimeInfo GetMapRealTimeInfo(STExtraPlayerController* PC, STExtraGameStateBase* GS, Vector LevelLandScapeCenter, float LevelToMapScale, float RotateAngle, MapRealTimeInfo CacheMapInfo, bool isEntireMap, out Vector OutPlayerLoc);// 0x1495764
	static float GetLevelLandscapeBoundsWithoutFakeTile(const Object* WorldContextObject);// 0x14956ec
	static float GetLevelLandscapeBounds(const Object* WorldContextObject);// 0x1495674
	static Vector2D GetLandscapeMidPoint(const Object* WorldContextObject);// 0x14955f4
	Vector2D GetCircleMapLocation(Vector CirclePositionInWorld, Vector LevelLandScapeCenter, float LevelToMapScale, float RotateAngle);// 0x149548c
	static int GetAlivePlayerNumber();// 0x1495464
	static void GameThreadSetBigCore(bool isbig);// 0x14953ec
	static Vector2D FindPointInWhichLandscape(Vector TargetPoint, const Object* ContextObject);// 0x1495328
	static void DrawPlayerMarkerInGrid(STExtraPlayerController* PC, GridSlot* PlayerMarkerPanelSlot, Vector2D PlayerCoord, PanelWidget* PlayerMarkerImagePanel, byte PlayerOperation, float RotateAngle);// 0x149515c
	static void DrawPlayerMarker(STExtraPlayerController* PC, PanelWidget* PlayerMarkerPanel, Vector2D PlayerCoord, byte PlayerOperation, float RotateAngle, PanelWidget* selfArrow, bool isEntireMap);// 0x1494f40
	void DrawPlayerItineraryInMap(out const PaintContext InContext, out const Vector[] PlayerPosList, Vector2D MapSize, Vector LevelLandScapeCenter, float LevelToMapScale, LinearColor LineColor);// 0x1494cf4
	void DrawGuideLineMiniMap(out const PaintContext InContext, float DashSize, LinearColor DashColor, float MapWindowExtent, float MapImageExtent, Vector2D WhiteCircleCenter, Vector2D PlayerCoord, float LineThickness, bool bAntiAlias);// 0x1494a1c
	void DrawGuideLineEntireMap(out const PaintContext InContext, float DashSize, LinearColor DashColor, float MapWindowExtent, float MapImageExtent, Vector2D WhiteCircleCenter, Vector2D PlayerCoord, float LineThickness, bool bAntiAlias);// 0x1494744
	void DrawGuideLine(out const PaintContext InContext, float DashSize, LinearColor DashColor, float MapWindowExtent, float MapImageExtent, Vector2D WhiteCircleCenter, Vector2D PlayerCoord, byte MapType, float LineThickness, bool bAntiAlias);// 0x1494424
	void DrawCircle(out const PaintContext InContext, Vector2D CircleCenter, LinearColor CircleColor, float CircleRadius, float MapWindowExtent, Vector2D PlayerCoord, byte MapType, bool bAntiAlias, float LevelToMapScaleC, Vector LevelLandScapeCenterC);// 0x14940f8
	void DrawAirplaneRouteInMiniMap(out const PaintContext InContext, float DashSize, LinearColor DashColor, float MapWindowExtent, float MapImageExtent, Vector MapCenterToPlayer, Vector2D EndCoord, Vector2D PlayerCoord, Vector2D RouteVelocity, float LineThickness, bool bAntiAlias);// 0x1493d74
	void DrawAirplaneRouteInEntiremap(out const PaintContext InContext, float DashSize, LinearColor DashColor, float MapWindowExtent, float MapImageExtent, float MiniMapWindowExtent, float MiniMapImageExtent, Vector MapCenterToPlayer, Vector2D StartCoord, Vector2D EndCoord, float LineThickness, bool bAntiAlias);// 0x14939c0
	static float CalPlayerToMarkerDist(PlayerController* PC, float LevelLandscapeExtent, Vector2D MarkerInMap, Vector LevelLandScapeCenter);// 0x1493878
	static void CalPlayerToMarkerDelYawAndDist(PlayerController* PC, Vector MarkerAlign, float LevelLandscapeExtent, Vector LandscapeCenter, out float DelYaw, out float Dist);// 0x1493684
	float CalPlayerRotationToPointDelYaw(PlayerController* PC, Vector TargetPoint);// 0x14935bc
	static Vector2D AdjustMapPosition(CanvasPanelSlot* MapCanvas, Vector2D MapCenterToPlayer, float RotateAngle, float MiniMapWindowHalfSize, float MapImageSize);// 0x1493420

--------------------------------
Class: STExtraMonsterAnimInstance.AnimInstance.Object
	STExtraSimpleCharacter* C_OwnerMonsterCharacter;//[Offset: 0x2ec, Size: 0x4]
	bool bIsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	AnimSequence* C_Birth_01;//[Offset: 0x2f4, Size: 0x4]
	AnimSequence* C_Birth_02;//[Offset: 0x2f8, Size: 0x4]
	AnimMontage* C_Birth_01_Montage;//[Offset: 0x2fc, Size: 0x4]
	AnimMontage* C_Birth_02_Montage;//[Offset: 0x300, Size: 0x4]
	AnimSequence* C_Idle;//[Offset: 0x304, Size: 0x4]
	AnimSequence* C_Combat_Idle;//[Offset: 0x308, Size: 0x4]
	BlendSpace1D* C_Run;//[Offset: 0x30c, Size: 0x4]
	BlendSpace1D* C_Combat_Run;//[Offset: 0x310, Size: 0x4]
	AnimSequence* C_Attack_01;//[Offset: 0x314, Size: 0x4]
	AnimSequence* C_Attack_02;//[Offset: 0x318, Size: 0x4]
	AnimSequence* C_Attack_03;//[Offset: 0x31c, Size: 0x4]
	AnimSequence* C_Hit_Hard;//[Offset: 0x320, Size: 0x4]
	BlendSpace* C_Hit_BlendSpace;//[Offset: 0x324, Size: 0x4]
	AnimSequence* C_Stiff;//[Offset: 0x328, Size: 0x4]
	AnimSequence* C_Jump_Start;//[Offset: 0x32c, Size: 0x4]
	BlendSpace1D* C_Fall;//[Offset: 0x330, Size: 0x4]
	AnimSequence* C_Fall_Stand;//[Offset: 0x334, Size: 0x4]
	AnimSequence* C_Fall_Hard_Stand;//[Offset: 0x338, Size: 0x4]
	AnimMontage* C_Death_Front;//[Offset: 0x33c, Size: 0x4]
	AnimMontage* C_Death_HeadShot;//[Offset: 0x340, Size: 0x4]
	AnimMontage* C_Death_Explosion;//[Offset: 0x344, Size: 0x4]
	AnimMontage* C_Death_Stand;//[Offset: 0x348, Size: 0x4]
	AnimMontage* C_Death_VehicleHit;//[Offset: 0x34c, Size: 0x4]
	AnimSequence* C_Climb;//[Offset: 0x350, Size: 0x4]
	AnimSequence* C_Climb_Window;//[Offset: 0x354, Size: 0x4]
	AnimSequence* C_Climbing;//[Offset: 0x358, Size: 0x4]
	AnimSequence* C_Stun;//[Offset: 0x35c, Size: 0x4]
	AnimSequence* C_Striding;//[Offset: 0x360, Size: 0x4]
	bool C_Born_State;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	bool C_Birth_01_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	bool C_Birth_02_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x366, Size: 0x1]
	bool C_Idle_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x367, Size: 0x1]
	bool C_Combat_Idle_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool C_Run_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	bool C_Combat_Run_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 0x1]
	bool C_Attack_01_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 0x1]
	bool C_Attack_02_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	bool C_Attack_03_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d, Size: 0x1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e, Size: 0x1]
	bool C_Hit_BlendSpace_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36f, Size: 0x1]
	Vector C_HurtDir;//[Offset: 0x370, Size: 0xc]
	bool C_Stiff_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	bool C_Fall_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	bool C_Jump_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37e, Size: 0x1]
	bool C_Light_Fall_Stand_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37f, Size: 0x1]
	bool C_Hard_Fall_Stand_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool C_Death_Front_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	bool C_Death_HeadShot_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 0x1]
	bool C_Death_VehicleHit_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 0x1]
	bool C_Death_Explosion_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1]
	bool C_Death_Stand_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 0x1]
	bool C_Climb_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x386, Size: 0x1]
	bool C_Climb_Window_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x387, Size: 0x1]
	bool C_Stun_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	float fPlayMoveAnimThreshold;//[Offset: 0x38c, Size: 0x4]
	float C_FallingSpeed;//[Offset: 0x390, Size: 0x4]
	float C_MoveSpeed;//[Offset: 0x394, Size: 0x4]
	int C_ClimbState;//[Offset: 0x398, Size: 0x4]
	int C_StrideState;//[Offset: 0x39c, Size: 0x4]
	int C_RandomAnimID;//[Offset: 0x3a0, Size: 0x4]
	bool C_ClimbOnCeiling_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float C_SpeedScale;//[Offset: 0x3a8, Size: 0x4]
	void TryUpdateAnimVarList();// 0x1498650
	void RefreshAnimParam();// 0x13012fc
	void OnPawnLeaveState(enum NewState);// 0x14985d8
	void OnPawnEnterState(enum NewState);// 0x1498560
	void OnMobClimbStateChange();// 0x149854c
	AnimationAsset* GetMonsterAnimByPoseType(byte PoseType);// 0x14984cc
	void CacheParamList(float DeltaSeconds);// 0x149844c
	void CacheAnimVarList();// 0x1498438

--------------------------------
Class: STExtraMonsterInterface.Interface.Object
	void GotoEarthAndDie();// 0x1498e3c
	FString GetMonsterName();// 0x1358be4
	class PlayerTombBox GetDropTomb();// 0x1498e0c
	bool CheckHasFunc(enum Func);// 0x1416c70
	RoadPointInfo[] BleCallGetRoadPoints();// 0x1498d44

--------------------------------
Class: STExtraMotorcycleAnimInstance.STVehicleAnimInstance.VehicleAnimInstance.AnimInstance.Object
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x798, Size: 0x4]
	VehicleMotorbikeComponent* MotorcycleComp;//[Offset: 0x79c, Size: 0x4]
	float SteerRoll;//[Offset: 0x7a0, Size: 0x4]
	Rotator KickstandRot;//[Offset: 0x7a4, Size: 0xc]
	Rotator SteeringRotFinal;//[Offset: 0x7b0, Size: 0xc]

--------------------------------
Class: VehicleMotorbikeComponent.VehicleComponent.ActorComponent.Object
	delegate OnContactChanged;//[Offset: 0xbc, Size: 0xc]
	CurveFloat* Curve_Roll;//[Offset: 0xc8, Size: 0x4]
	CurveFloat* Curve_ReturnClamp;//[Offset: 0xcc, Size: 0x4]
	CurveFloat* Curve_Steer;//[Offset: 0xd0, Size: 0x4]
	CurveFloat* Curve_Yaw;//[Offset: 0xd4, Size: 0x4]
	CurveFloat* Curve_TorqueStab;//[Offset: 0xd8, Size: 0x4]
	CurveFloat* Curve_Roll_Cart;//[Offset: 0xdc, Size: 0x4]
	CurveFloat* Curve_ReturnClamp_Cart;//[Offset: 0xe0, Size: 0x4]
	CurveFloat* Curve_Steer_Cart;//[Offset: 0xe4, Size: 0x4]
	CurveFloat* Curve_Yaw_Cart;//[Offset: 0xe8, Size: 0x4]
	CurveFloat* Curve_TorqueStab_Cart;//[Offset: 0xec, Size: 0x4]
	bool bHasSidecart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	FName LowStabBoneName;//[Offset: 0xf8, Size: 0x8]
	FName HighStabBoneName;//[Offset: 0x100, Size: 0x8]
	Vector SideCartHighStabCOM;//[Offset: 0x108, Size: 0xc]
	float MinSuspensionOffsetForContact;//[Offset: 0x114, Size: 0x4]
	Vector StabStaticVector;//[Offset: 0x118, Size: 0xc]
	Vector2D StabXVelocityIn;//[Offset: 0x124, Size: 0x8]
	Vector2D StabXVelocityOut;//[Offset: 0x12c, Size: 0x8]
	Vector2D StabXPitchIn;//[Offset: 0x134, Size: 0x8]
	Vector2D StabXPitchOut;//[Offset: 0x13c, Size: 0x8]
	Vector2D StabZVelocityIn;//[Offset: 0x144, Size: 0x8]
	Vector2D StabZVelocityOut;//[Offset: 0x14c, Size: 0x8]
	Vector2D StabZRollIn;//[Offset: 0x154, Size: 0x8]
	Vector2D StabZRollOut;//[Offset: 0x15c, Size: 0x8]
	Vector2D StabZPitchIn;//[Offset: 0x164, Size: 0x8]
	Vector2D StabZPitchOut;//[Offset: 0x16c, Size: 0x8]
	Vector2D StabTorqueIn;//[Offset: 0x174, Size: 0x8]
	Vector2D StabTorqueOut;//[Offset: 0x17c, Size: 0x8]
	float StabTorqueForceScalar;//[Offset: 0x184, Size: 0x4]
	Vector2D StabTorquePitchIn;//[Offset: 0x188, Size: 0x8]
	Vector2D StabTorquePitchOut;//[Offset: 0x190, Size: 0x8]
	bool bUseNewCOMCal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	float ScaleTorque;//[Offset: 0x19c, Size: 0x4]
	float ScaleCenterOfMass;//[Offset: 0x1a0, Size: 0x4]
	Vector CurrentTorque;//[Offset: 0x1a4, Size: 0xc]
	Vector CurrentCenterOfMass;//[Offset: 0x1b0, Size: 0xc]
	bool bKickstandStabilizeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	float KickstandAngularDamping;//[Offset: 0x1c0, Size: 0x4]
	float KickstandMaxAngVelocity;//[Offset: 0x1c4, Size: 0x4]
	float KickstandEnableMaxSpeed;//[Offset: 0x1c8, Size: 0x4]
	Vector2D AirControlFVelMap;//[Offset: 0x1cc, Size: 0x8]
	Vector2D AirControlBVelMap;//[Offset: 0x1d4, Size: 0x8]
	float AirControlFBTorque;//[Offset: 0x1dc, Size: 0x4]
	bool bShouldResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 0x1]
	float COMOffsetSteer;//[Offset: 0x1ec, Size: 0x4]
	float RotSteeringFinal;//[Offset: 0x1f0, Size: 0x4]
	void HandleOnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x1534f40

--------------------------------
Class: STExtraNewBuffApplierComponent.ActorComponent.Object
	FString OverlapCheckComponnentName;//[Offset: 0xbc, Size: 0xc]
	int MaxTargetNum;//[Offset: 0xc8, Size: 0x4]
	NewBuffApplierConditionPair[] BuffConditionArray;//[Offset: 0xcc, Size: 0xc]
	STExtraCharacter*[] AddedBuffTargets;//[Offset: 0xd8, Size: 0xc]
	float CheckPeriod;//[Offset: 0xe4, Size: 0x4]
	ShapeComponent* OverlapCheckComponnent;//[Offset: 0xec, Size: 0x4]
	bool IsCheckingBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool IsIgnoreThrower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	bool IsRemoveBuffWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 0x1]
	bool bNeedRefreshBuffInRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	Vector ServerIsHeadVisibleOffsetForProne;//[Offset: 0xf8, Size: 0xc]
	void SetIsEnableChecking(bool Enable);// 0x1499684
	void OverlapCheckerOneTarget(Actor* OtherActor);// 0x149960c

--------------------------------
Class: NewBuffApplierConditionPair
	byte ConditionVar;//[Offset: 0x0, Size: 0x1]
	bool IsShowDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float InSightCheckAngle;//[Offset: 0x4, Size: 0x4]
	float InnerRangeDistance;//[Offset: 0x8, Size: 0x4]
	int[] BuffSkillIdArray;//[Offset: 0xc, Size: 0xc]
	int[] BuffSkillIdArrayForZombie;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: STExtraOBState.UAEOBState.PlayerState.Info.Actor.Object
	PlayerStaticInfoInOB[] TotalPlayers;//[Offset: 0x330, Size: 0xc]

--------------------------------
Class: STExtraOnlineSession.OnlineSession.Object

--------------------------------
Class: STExtraPetAnimInstance.AnimInstance.Object
	STExtraPetCharacter* C_PetCharacter;//[Offset: 0x2ec, Size: 0x4]
	STExtraBaseCharacter* C_PetOwnerCharacter;//[Offset: 0x2f0, Size: 0x4]
	int C_DeviceLevel;//[Offset: 0x2f4, Size: 0x4]
	bool C_PetOwnerHasSprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool C_PetOwnerIsAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	float C_PetMoveSpeed;//[Offset: 0x2fc, Size: 0x4]
	bool C_IsPetParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool C_IsPetFastFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	bool C_IsPetDisappear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 0x1]
	bool C_IsPetFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x303, Size: 0x1]
	bool C_IsPetFlyAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool C_IsPetSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	float C_PetSwimmingAnimRate;//[Offset: 0x308, Size: 0x4]
	float C_PetSwimmingMaxAnimRate;//[Offset: 0x30c, Size: 0x4]
	float C_PetSwimmingMinAnimRate;//[Offset: 0x310, Size: 0x4]
	float C_PetSwimmingAnimRateFactor;//[Offset: 0x314, Size: 0x4]
	float C_PetFastFallSpeed;//[Offset: 0x318, Size: 0x4]
	float C_PetFlyAroundDisappearTime;//[Offset: 0x31c, Size: 0x4]
	float C_PetMoveThreshold;//[Offset: 0x320, Size: 0x4]
	AnimSequenceBase* C_AppearAnim;//[Offset: 0x324, Size: 0x4]
	AnimSequenceBase* C_DisppearAnim;//[Offset: 0x328, Size: 0x4]
	AnimSequenceBase* C_IdleAnim;//[Offset: 0x32c, Size: 0x4]
	AnimSequenceBase* C_FreeFallAnim;//[Offset: 0x330, Size: 0x4]
	AnimSequenceBase* C_FastFreeFallAnim;//[Offset: 0x334, Size: 0x4]
	AnimSequenceBase* C_FollowAnim;//[Offset: 0x338, Size: 0x4]
	AnimSequenceBase* C_FlyAroundAnim;//[Offset: 0x33c, Size: 0x4]
	AnimSequenceBase* C_SwimmingAnim;//[Offset: 0x340, Size: 0x4]
	BlendSpaceBase* C_SwimmingBS;//[Offset: 0x344, Size: 0x4]
	BlendSpaceBase* C_MovementBS;//[Offset: 0x348, Size: 0x4]
	STExtraBaseCharacter* SafeGetPetOwnerCharacter();// 0x1499dc8
	void OnPetStateChanged(byte State, bool IsEnter);// 0x1499cfc
	void OnPetMontage(PetMontageData Data);// 0x1499c84
	void OnDisappearAnimEnd();// 0x1499c70

--------------------------------
Class: STExtraPlayerStartWithVehicle.STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: STExtraPulseRangeActor.ASTExtraRangeActor.Actor.Object
	PropSkillCureRangeParam CureRangeParamCfg;//[Offset: 0x2d8, Size: 0x10]
	void MakeEffectToAllOverlappedActors(<Actor*,RangeCheckRetParam> OverlapComponentMap);// 0x12efc80
	void InitRangeParam(Actor* Creator, out const PropSkillCureRangeParam CureRangeParam);// 0x14d169c

--------------------------------
Class: STExtraPVEPlayerStart.STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: STSimpleCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool CanWalkUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61e, Size: 0x1]

--------------------------------
Class: STMonsterMeshComponent.UAESkeletalMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int EffectiveDeviceLevel;//[Offset: 0x9d8, Size: 0x4]
	bool bSkipFirstFrameAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9dc, Size: 0x1]

--------------------------------
Class: STExtraSimulatedSlidingVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	AkAudioEvent* Sfx_JumpMiddle;//[Offset: 0xe98, Size: 0x4]
	AkAudioEvent* Sfx_JumpHeavy;//[Offset: 0xe9c, Size: 0x4]
	AkAudioEvent* Sfx_LandingLight;//[Offset: 0xea0, Size: 0x4]
	AkAudioEvent* Sfx_LandingHeavy;//[Offset: 0xea4, Size: 0x4]
	AkAudioEvent* Sfx_SlideEnemy;//[Offset: 0xea8, Size: 0x4]
	AkAudioEvent* Sfx_SlideTeammate;//[Offset: 0xeac, Size: 0x4]
	AkAudioEvent* Sfx_JumpLight;//[Offset: 0xeb0, Size: 0x4]
	AkAudioEvent* Sfx_Brake;//[Offset: 0xeb4, Size: 0x4]
	float SlideSoundSpeedThreshold;//[Offset: 0xeb8, Size: 0x4]
	class STExtraWeapon* SpecialAttachActorClass;//[Offset: 0xebc, Size: 0x4]
	FName SpecialAttachActorSocket;//[Offset: 0xec0, Size: 0x8]
	ItemDefineID SpecialAttachActorItemDefineID;//[Offset: 0xec8, Size: 0x18]
	Actor* CachedSpecialAttachActor;//[Offset: 0xee0, Size: 0x4]
	float PlayerEnterVelocityRate;//[Offset: 0xee8, Size: 0x4]
	float PlayerEnterVelocityDelay;//[Offset: 0xeec, Size: 0x4]
	float MinAddEnterVelocity;//[Offset: 0xef0, Size: 0x4]
	Vector PlayerEnterVelocity;//[Offset: 0xef4, Size: 0xc]
	float MaxStayAtDropGroundSecond;//[Offset: 0xf00, Size: 0x4]
	byte InAirSurfaceType;//[Offset: 0xf08, Size: 0x1]
	byte LastJumpLandSurfaceType;//[Offset: 0xf09, Size: 0x1]
	bool RepUseSyncatClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf20, Size: 0x1]
	bool SnowBoardUnuseable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf21, Size: 0x1]
	bool UseServerCtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf22, Size: 0x1]
	SimulatedSlidingMovementComponent* SlidingMovementComp;//[Offset: 0xf24, Size: 0x4]
	STExtraVehicleSfxLoop SlideSfxLoop;//[Offset: 0xf38, Size: 0x50]
	STExtraVehicleSfxLoop BrakeSfxLoop;//[Offset: 0xf88, Size: 0x50]
	delegate OnSlidingVehicleLanding;//[Offset: 0xfd8, Size: 0xc]
	<int,float> DeviceUpdateTrailIntervalMap;//[Offset: 0xfe4, Size: 0x3c]
	void SpawnOrDelSpecialAttachActor(bool IsSpawn);// 0x14dfb34
	void SetSyncatClient(bool SyncatClient);// 0x14dfab4
	void SetPlayerEnterVelocity();// 0x14dfaa0
	void ServerEquipSpecialAttachActor();// 0x14dfa44
	void ServerCloseCollision();// 0x14df9e8
	void ServerCheckPlayEnterAnim();// 0x14df98c
	void SendToServerClientInitOK();// 0x14df930
	void RecordJumpAction();// 0x14df8d4
	void PlaySfxSpeedUp();// 0x14df8c0
	void PlaySfxSlide(float DeltaTime, bool bIsSliding);// 0x14df7fc
	void PlaySfxJumpStart(bool bIsHeavy);// 0x14df77c
	void PlaySfxJumpEnd(bool bIsHeavy);// 0x14df6fc
	void PlaySfxBrake(float DeltaTime, bool bIsBraking);// 0x14df638
	void PlayFXJumpStart();// 0x1c01fa0
	void OnRep_UseSyncatClient();// 0x14df624
	void OnRep_SpecialAttachActor();// 0x14df610
	SimulatedSlidingMovementComponent* GetSimulateSlidingMovementComp();// 0x14df5e8
	void ExitVehicle();// 0x14df5d4
	void EnterVehicle(bool IsSucc);// 0x14df554
	void ClientPlayerAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x14df4dc
	void ClientEnterVehicle(STExtraPlayerCharacter* Character, enum SeatType);// 0x14df420
	bool CheckHaveSpecialAttachActor();// 0x14df3f0
	void BroadcastClientExitVehicle();// 0x14df394
	void BroadcastClientEnterVehicle(bool InPlayTakeOut, bool InVelocityInhert, Vector InHertVelocity);// 0x14df218
	void AfterExitVehicleAnimPlay();// 0x14df204
	void ActiveFXBrake(bool Inactive);// 0x1c01fa0

--------------------------------
Class: STExtraSnowMan.UAERegionActor.Actor.Object
	void UpdateSnowManStatusBlueprint(enum Status);// 0x1c01fa0
	void UpdateSnowManStatus(enum Status);// 0x14e0780

--------------------------------
Class: STExtraUIUtils.BlueprintFunctionLibrary.Object
	static void PrintGameLog(FString LogContent);// 0x14e1810
	static FString GetOwningPlayerRoleID(UAEUserWidget* UAEUserWidget);// 0x14e1710
	static STExtraPlayerCharacter* GetOwningPlayerPawnOrVehicleDriver(UAEUserWidget* UAEUserWidget);// 0x14e1698
	static FString GetOwningPlayerOpenID(UAEUserWidget* UAEUserWidget);// 0x14e1598
	static STExtraPlayerController* GetOwningPlayerNoDefault(UAEUserWidget* UAEUserWidget);// 0x14e1520
	static STExtraPlayerController* GetOwningPlayer(UAEUserWidget* UAEUserWidget);// 0x14e14a8
	static FText GetMinuteAndSecondTextByTime(int Second);// 0x14e130c
	static FText GetFloatAsStringWithPrecision(float TheFloat, int Precision, bool IncludeLeadingZero);// 0x14e10e0
	static STExtraPlayerState* GetCurPlayerState(UAEUserWidget* UAEUserWidget);// 0x14e1068
	static FString GetBattleID(UAEUserWidget* UAEUserWidget);// 0x14e0f68

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	FName UnderWaterFogTagName;//[Offset: 0x238, Size: 0x8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x240, Size: 0x4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x250, Size: 0x30]
	AkAudioEvent* SfxInWater;//[Offset: 0x280, Size: 0x4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x284, Size: 0x4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x288, Size: 0x4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x28c, Size: 0x4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x290, Size: 0x4]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x294, Size: 0xc]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x2a0, Size: 0xc]
	CameraComponent* LastActiveCamComp;//[Offset: 0x2ac, Size: 0x4]
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x14e1ed4

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x2c8, Size: 0x4]
	float Interval;//[Offset: 0x2cc, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x2d0, Size: 0x4]
	class Pawn[] DamageFilters;//[Offset: 0x2d4, Size: 0xc]
	int[] BuffIDs;//[Offset: 0x2e0, Size: 0xc]
	int[] SkillBuffIDs;//[Offset: 0x2ec, Size: 0xc]
	BoxComponent* WaterBoxComp;//[Offset: 0x2f8, Size: 0x4]
	bool IsLocationInWater(out const Vector Location);// 0x1544e08
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x1544d20

--------------------------------
Class: STExtraVehicleAnimInstance.STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	PlayerVehAnimList CharacterVehAnimList;//[Offset: 0xa64, Size: 0x70]
	BlendSpace* BackUpAnimBlendSpace;//[Offset: 0xad4, Size: 0x4]
	AnimSequence* BackUpAnimAnimSequence;//[Offset: 0xad8, Size: 0x4]
	BlendSpace* IdleAnim;//[Offset: 0xadc, Size: 0x4]
	BlendSpace1D* LeanInAnim;//[Offset: 0xae0, Size: 0x4]
	BlendSpace1D* LeanOutAnim;//[Offset: 0xae4, Size: 0x4]
	BlendSpace* AimAnim;//[Offset: 0xae8, Size: 0x4]
	BlendSpace1D* AimAnim1D;//[Offset: 0xaec, Size: 0x4]
	AnimVehParamList VehAnimParam;//[Offset: 0xaf0, Size: 0x30]
	AnimationAsset* DriverAnim;//[Offset: 0xb20, Size: 0x4]
	BlendSpace* DriverAnimBS;//[Offset: 0xb24, Size: 0x4]
	AnimSequence* DriverAnimAsSeq;//[Offset: 0xb28, Size: 0x4]
	BlendSpace* DriverAnimAsBS;//[Offset: 0xb2c, Size: 0x4]
	AnimSequence* DriverMotorbikeIdleAnim;//[Offset: 0xb30, Size: 0x4]
	BlendSpace* DriverMotorbikeVacateAnim;//[Offset: 0xb34, Size: 0x4]
	AnimSequence* PassengerMotorbikeIdleAnim;//[Offset: 0xb38, Size: 0x4]
	BlendSpace* PassengerMotorbikeVacateAnim;//[Offset: 0xb3c, Size: 0x4]
	BlendSpace* MotorbikeDriverAnim;//[Offset: 0xb40, Size: 0x4]
	AnimSequence* SurfBoard_IdleAnim;//[Offset: 0xb44, Size: 0x4]
	BlendSpace* SurfBoard_MoveAnim;//[Offset: 0xb48, Size: 0x4]
	AnimSequence* SurfBoard_JumpAnim;//[Offset: 0xb4c, Size: 0x4]
	AnimSequence* SurfBoard_LandAnim;//[Offset: 0xb50, Size: 0x4]
	AnimSequence* SurfBoard_JumpLeftTurnAnim;//[Offset: 0xb54, Size: 0x4]
	AnimSequence* SurfBoard_JumpRightTurnAnim;//[Offset: 0xb58, Size: 0x4]
	float SpeedThresholds;//[Offset: 0xb5c, Size: 0x4]
	AnimSequence* Ski_JumpStationary;//[Offset: 0xb60, Size: 0x4]
	AnimSequence* Ski_DownTurnLR;//[Offset: 0xb64, Size: 0x4]
	AnimSequence* Ski_DownTurnRL;//[Offset: 0xb68, Size: 0x4]
	AnimSequence* Ski_DownTurnFD;//[Offset: 0xb6c, Size: 0x4]
	BlendSpace1D* Ski_Falling;//[Offset: 0xb70, Size: 0x4]
	AnimSequence* Ski_DownFallLandingAdditive;//[Offset: 0xb74, Size: 0x4]
	AnimSequence* Ski_DownFallLandingHard;//[Offset: 0xb78, Size: 0x4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0xb7c, Size: 0x4]
	AnimSequence* AimAdd;//[Offset: 0xb80, Size: 0x4]
	AnimSequence* SeatIdle;//[Offset: 0xb84, Size: 0x4]
	bool IsVehicleAnimLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 0x1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb89, Size: 0x1]
	bool IsAimAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8a, Size: 0x1]
	bool IsSeatIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8b, Size: 0x1]
	bool HasLeanAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 0x1]
	AnimSequence* Reload;//[Offset: 0xb90, Size: 0x4]
	bool IsReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 0x1]
	bool IsFPPAimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb95, Size: 0x1]
	bool IsFPPVehicleAnimInstace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb96, Size: 0x1]
	float DriverMoveDir;//[Offset: 0xb98, Size: 0x4]
	bool UseNewAimBS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9c, Size: 0x1]
	float NewAimVehViewYaw;//[Offset: 0xba0, Size: 0x4]
	bool IsMotorcycleDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba4, Size: 0x1]
	float MotorcycleDriverStopAnimBlendWeights;//[Offset: 0xba8, Size: 0x4]
	bool ShouldBlendForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbac, Size: 0x1]
	bool bUseVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbad, Size: 0x1]
	bool bReloadVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbae, Size: 0x1]
	Rotator VehicleWeaponRotator;//[Offset: 0xbb0, Size: 0xc]
	BlendSpace* VehicleWeaponAimOffsetBlendSpace;//[Offset: 0xbbc, Size: 0x4]
	bool bVehicleWeaponAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 0x1]
	bool C_bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc1, Size: 0x1]
	Transform C_VehicleWeaponGripTransformR;//[Offset: 0xbd0, Size: 0x30]
	Transform C_VehicleWeaponGripTransformL;//[Offset: 0xc00, Size: 0x30]
	Vector UseVehicleIdleBlendSpaceXY;//[Offset: 0xc30, Size: 0xc]
	byte DriverAnimType;//[Offset: 0xc3c, Size: 0x1]
	float AddtiveNormalSeatAlpha;//[Offset: 0xc40, Size: 0x4]
	float AddtiveNormalSeatIdleAlpha;//[Offset: 0xc44, Size: 0x4]
	Rotator IdleAnimBSParam;//[Offset: 0xc48, Size: 0xc]
	float LeanOutAnimBSXParam;//[Offset: 0xc54, Size: 0x4]
	bool IsReloadingOnNarrowSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 0x1]
	Rotator AimAnimBSParam;//[Offset: 0xc5c, Size: 0xc]
	bool ShouldTransIdleToAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 0x1]
	bool ShouldTransIdleToLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc69, Size: 0x1]
	bool ShouldTransLeanOutToAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6a, Size: 0x1]
	bool ShouldTransLeanInToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6b, Size: 0x1]
	bool ShouldTransAimToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 0x1]
	bool ShouldTransAimToLeanIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6d, Size: 0x1]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 0x1]
	bool IsVehicleMotorbikeAnimLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc75, Size: 0x1]
	float VacateHight;//[Offset: 0xc78, Size: 0x4]
	Rotator LastRotator;//[Offset: 0xc7c, Size: 0xc]
	Vector VehicleMoveVelocity;//[Offset: 0xc88, Size: 0xc]
	AnimMontage* JumpMontage;//[Offset: 0xc94, Size: 0x4]
	AnimMontage* EnterMontage;//[Offset: 0xc98, Size: 0x4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0xc9c, Size: 0x4]
	STExtraBaseCharacter* NowbaseCharacter;//[Offset: 0xca0, Size: 0x4]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xca4, Size: 0x4]
	bool bIsSnowBoard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 0x1]
	float CharacterSpeed;//[Offset: 0xcac, Size: 0x4]
	AnimSequence* Ski_CurrentPlayingLandAnim;//[Offset: 0xcb0, Size: 0x4]
	AnimSequence* Ski_CurrentPlayingJumpAnim;//[Offset: 0xcb4, Size: 0x4]
	bool bIsSkiJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8, Size: 0x1]
	bool bIsSkiLowJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb9, Size: 0x1]
	bool bIsSkiFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcba, Size: 0x1]
	bool bIsSkiLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbb, Size: 0x1]
	bool bIsSkiPlayingLandAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbc, Size: 0x1]
	bool bIsSkiPlayingJumpAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbd, Size: 0x1]
	CurveFloat* SkiSpeedToMaxTurnCurve;//[Offset: 0xcc0, Size: 0x4]
	CurveFloat* SkiSpeedToMaxCrouchCurve;//[Offset: 0xcc4, Size: 0x4]
	CurveFloat* SkiSpeedToFallingCurve;//[Offset: 0xcc8, Size: 0x4]
	float SkiBlendSpaceXInput;//[Offset: 0xccc, Size: 0x4]
	float SkiBlendSpaceYInput;//[Offset: 0xcd0, Size: 0x4]
	float SkiFallingBSInput;//[Offset: 0xcd4, Size: 0x4]
	float SkiPlayJumpAnimRate;//[Offset: 0xcd8, Size: 0x4]
	float SkiPlayJumpAnimRateMin;//[Offset: 0xcdc, Size: 0x4]
	float SkiPlayJumpAnimRateMax;//[Offset: 0xce0, Size: 0x4]
	float SkiJumpStationaryRiseRate;//[Offset: 0xce4, Size: 0x4]
	float SkiDownTurnLRRate;//[Offset: 0xce8, Size: 0x4]
	float SkiDownTurnRLRate;//[Offset: 0xcec, Size: 0x4]
	float SkiDownTurnFDRate;//[Offset: 0xcf0, Size: 0x4]
	bool bIsDisableSkiSlopAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1]
	float DisableSkiSlopeAdaptReMainTime;//[Offset: 0xcf8, Size: 0x4]
	float AdaptSkiSlopeSpeed;//[Offset: 0xcfc, Size: 0x4]
	float SkiIKSlopBlendRate;//[Offset: 0xd00, Size: 0x4]
	float SkiIKSlopBlendRateSpeed;//[Offset: 0xd04, Size: 0x4]
	float SkiStandRotatingAlphaSpeed;//[Offset: 0xd08, Size: 0x4]
	float SkiStandRotatingAlpha;//[Offset: 0xd0c, Size: 0x4]
	SkeletalMeshComponent* SkiSkeletalMeshComp;//[Offset: 0xd10, Size: 0x4]
	bool b_C_VehicleMotorbike_And_VehicleMotorbikeAnimLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd14, Size: 0x1]
	bool b_C_VehicleMotorbike_And_VehicleMotorbikeAnimLoaded_And_IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd15, Size: 0x1]
	float C_DriverAnimTimer;//[Offset: 0xd18, Size: 0x4]
	void PlayEnterMontage();// 0x14e2578
	void OnOwnerDetachFromVehicle(STExtraVehicleBase* InVehicle);// 0x14e2500
	void OnOwnerAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x14e2488
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x14e2330
	void HandleVehicleWeaponStateChanged(byte NewState);// 0x14e22b8
	void HandleOwnerAnimEvent(FName EventMsg);// 0x1443adc

--------------------------------
Class: STExtraVehicleUtils.Object
	static bool IsPassenger(STExtraBaseCharacter* Character);// 0x14eaee4
	static bool IsDriver(const STExtraBaseCharacter* Character);// 0x14eae6c
	static World* GetWorldFromActor(Actor* Actor);// 0x14eadf4
	static VehicleUserComponent* GetVehicleUserComp(STExtraBaseCharacter* Character);// 0x14ead7c
	static FString GetVehicleSpawnPath(int VehicleID);// 0x14eac7c
	static enum GetVehiclePartByBoneName(STExtraVehicleBase* Vehicle, FName BoneName);// 0x14eabc0
	static FString GetVehicleInfo(const STExtraVehicleBase* VH);// 0x14eaac0
	static VehicleUserComponent* GetFirstVehicleUserComp(World* World);// 0x14eaa48
	static STExtraBaseCharacter* GetDriver(const STExtraVehicleBase* Vehicle);// 0x14ea9d0
	static STExtraPlayerController* GetController(STExtraBaseCharacter* Character);// 0x14ea958
	static FString GetCharacterInfo(STExtraBaseCharacter* CH);// 0x14ea858
	static STExtraBaseCharacter* GetCharacter(STExtraPlayerController* PC);// 0x14ea7e0
	static STExtraVehicleBase* AirDropVehicle(World* World, Vector SpawnLoc, VehicleGenerateRandomInfo GenerateInfo);// 0x14ea5e4

--------------------------------
Class: STExtraVehicleWheel.VehicleWheel.Object
	Vector SuspensionTravelDir;//[Offset: 0xc8, Size: 0xc]
	Vector TireForceOffset;//[Offset: 0xd4, Size: 0xc]
	byte QueryChannel;//[Offset: 0xe0, Size: 0x1]
	float LongSlipEffectThreshold;//[Offset: 0xe4, Size: 0x4]
	float LatSlipEffectThreshold;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: STHairAnimInstance.AnimInstance.Object
	enum AnimInstanceType;//[Offset: 0x2ec, Size: 0x1]
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2f0, Size: 0x4]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x2f8, Size: 0xc]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x304, Size: 0xc]
	SkeletalMeshComponent* TryGetParentMeshComponent();// 0x14ee0f4

--------------------------------
Class: STPlayerCameraManager.PlayerCameraManager.Actor.Object
	float InVehicleFPPViewPitchLimitMin;//[Offset: 0x18e8, Size: 0x4]
	float InVehicleFPPViewYawLimit;//[Offset: 0x18ec, Size: 0x4]
	float InVehicleNarrowSeatGrenadesYawLimit;//[Offset: 0x18f0, Size: 0x4]

--------------------------------
Class: ReplicationGraph.ReplicationDriver.Object
	class NetReplicationGraphConnection* ReplicationConnectionManagerClass;//[Offset: 0x1c, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x20, Size: 0x4]
	NetReplicationGraphConnection*[] Connections;//[Offset: 0x24, Size: 0xc]
	NetReplicationGraphConnection*[] PendingConnections;//[Offset: 0x30, Size: 0xc]
	ReplicationGraphNode*[] GlobalGraphNodes;//[Offset: 0x6c, Size: 0xc]
	ReplicationGraphNode*[] PrepareForReplicationNodes;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: NetReplicationGraphConnection.ReplicationConnectionDriver.Object
	NetConnection* NetConnection;//[Offset: 0x1c, Size: 0x4]
	ReplicationGraphDebugActor* DebugActor;//[Offset: 0x12c, Size: 0x4]
	ReplicationGraphNode*[] ConnectionGraphNodes;//[Offset: 0x138, Size: 0xc]
	ReplicationGraphNode_TearOff_ForConnection* TearOffNode;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: ReplicationGraphDebugActor.Actor.Object
	ReplicationGraph* ReplicationGraph;//[Offset: 0x2c8, Size: 0x4]
	NetReplicationGraphConnection* ConnectionManager;//[Offset: 0x2cc, Size: 0x4]
	void ServerStopDebugging();// 0x39f8e18
	void ServerStartDebugging();// 0x39f8dbc
	void ServerSetPeriodFrameForClass(class Object Class, int PeriodFrame);// 0x39f8cc0
	void ServerSetCullDistanceForClass(class Object Class, float CullDistance);// 0x39f8bc4
	void ServerPrintAllActorInfo(FString str);// 0x39f8ad0
	void ServerCellInfo();// 0x39f8a74
	void ClientCellInfo(Vector CellLocation, Vector CellExtent, const Actor*[] Actors);// 0x39f8920

--------------------------------
Class: ReplicationGraphNode.Object
	ReplicationGraphNode*[] AllChildNodes;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: ReplicationGraphNode_TearOff_ForConnection.ReplicationGraphNode.Object
	TearOffActorInfo[] TearOffActors;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: TearOffActorInfo
	Actor* Actor;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: STReplicationGraph.ReplicationGraph.ReplicationDriver.Object
	RepGraphConfig[] StaticGraph;//[Offset: 0x250, Size: 0xc]
	RepGraphConfig[] DynamicGraph;//[Offset: 0x25c, Size: 0xc]
	class Object[] SpatializedClasses;//[Offset: 0x268, Size: 0xc]
	class Object[] NonSpatializedClasses;//[Offset: 0x274, Size: 0xc]
	class Object[] AlwaysRelevantClasses;//[Offset: 0x280, Size: 0xc]
	class Object[] IgnoredClasses;//[Offset: 0x28c, Size: 0xc]
	Actor*[] ActorsWithoutNetConnection;//[Offset: 0x298, Size: 0xc]
	STConnectionAlwaysRelevantNodePair[] AlwaysRelevantForConnectionList;//[Offset: 0x2a4, Size: 0xc]
	ReplicationGraphNode_GridSpatialization2D* GridNode;//[Offset: 0x2b0, Size: 0x4]
	ReplicationGraphNode_ActorList* AlwaysRelevantNode;//[Offset: 0x2b4, Size: 0x4]

--------------------------------
Class: RepGraphConfig
	FName StaticClass;//[Offset: 0x0, Size: 0x8]
	float CullDistanceSquared;//[Offset: 0x8, Size: 0x4]
	int ReplicationPeriodFrame;//[Offset: 0xc, Size: 0x4]
	int RoutePolicy;//[Offset: 0x10, Size: 0x4]
	float DistancePriorityScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: STConnectionAlwaysRelevantNodePair
	NetConnection* NetConnection;//[Offset: 0x0, Size: 0x4]
	STReplicationGraphNode_AR_FC* Node;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: STReplicationGraphNode_AR_FC.ReplicationGraphNode_AlwaysRelevant_ForConnection.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_AlwaysRelevant_ForConnection.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object
	AlwaysRelevantActorInfo[] PastRelevantActors;//[Offset: 0xc8, Size: 0xc]
	Actor* LastViewer;//[Offset: 0xd4, Size: 0x4]
	Actor* LastViewTarget;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: AlwaysRelevantActorInfo
	NetConnection* Connection;//[Offset: 0x0, Size: 0x4]
	Actor* LastViewer;//[Offset: 0x4, Size: 0x4]
	Actor* LastViewTarget;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ReplicationGraphNode_GridSpatialization2D.ReplicationGraphNode.Object

--------------------------------
Class: STReplicationGraphNode_PlayerStateFrequencyLimiter.ReplicationGraphNode.Object

--------------------------------
Class: Stronghold.Actor.Object
	SceneComponent* Root;//[Offset: 0x2cc, Size: 0x4]
	StrongholdMiniMapData StrongholdMiniMapData;//[Offset: 0x2d0, Size: 0x60]
	float DelayActiveStrongholdCD;//[Offset: 0x330, Size: 0x4]
	FString RevivalTowerPath;//[Offset: 0x334, Size: 0xc]
	StrongholdWeaponBoxConfig[] WeaponBoxConfigs;//[Offset: 0x340, Size: 0xc]
	<FString,int> VehicleTypes;//[Offset: 0x34c, Size: 0x3c]
	float DelaySpawnVehicleCD;//[Offset: 0x388, Size: 0x4]
	int FuelPercentMax;//[Offset: 0x38c, Size: 0x4]
	bool ActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	bool bFreezeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	int UnfreezeVehicleTime;//[Offset: 0x394, Size: 0x4]
	bool bRegisterGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	float CircleContainMaxFloatLength;//[Offset: 0x39c, Size: 0x4]
	CircleMgrComponent* CacheCircleMgrComponent;//[Offset: 0x3a0, Size: 0x4]
	void SetTimes(float SpawnVehicleCD, float ActiveTimeToSet, float UnfreezeTimeToSet);// 0x14ef460
	void OnWeaponBoxOpened();// 0x14ef44c
	void ActiveStrongHold();// 0x14ef438

--------------------------------
Class: StrongholdMiniMapData
	int MapIconID;//[Offset: 0x4c, Size: 0x4]
	int DelayShowCD;//[Offset: 0x50, Size: 0x4]
	int UnActivatedIndex;//[Offset: 0x54, Size: 0x4]
	int ActivatedIndex;//[Offset: 0x58, Size: 0x4]
	int GrayIndex;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: StrongholdWeaponBoxConfig
	FString WeaponBoxType;//[Offset: 0x0, Size: 0xc]
	Vector RelativeLocation;//[Offset: 0xc, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x18, Size: 0xc]
	bool bAttachToLifer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StrongHoldPlatformActor.Actor.Object
	float SecondsToRaiseCpp;//[Offset: 0x2d0, Size: 0x4]
	bool HandleTimerStopped();// 0x14921d4

--------------------------------
Class: STScreenAppearanceComponentAdditional.STScreenAppearanceComponent.ActorComponent.Object
	FName ShaderUniformName;//[Offset: 0x150, Size: 0x8]
	MaterialInstanceDynamic* currentMatInstanceDynamic;//[Offset: 0x194, Size: 0x4]
	void StopScreenAppearanceWithTag(FString AppearanceName, FString TagString);// 0x14f1de8
	MaterialInstanceDynamic* PlayCustomScreenAppearanceWithTag(FString AppearanceName, FString TagString, FName paramShaderUniformName, MaterialInterface* MatToPlay, float LifeSpan);// 0x14f1bc8

--------------------------------
Class: STSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	float RunSpeedScale;//[Offset: 0x324, Size: 0x4]
	float WalkSpeedScale;//[Offset: 0x328, Size: 0x4]
	bool bIsRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	bool bIsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x330, Size: 0x4]
	void OnStopWalking();// 0x14f2458
	void OnStopRunning();// 0x14f2444
	void OnStartWalking();// 0x14f2430
	void OnStartRunning();// 0x14f241c
	void MoveUp(float AxisValue);// 0x14f23a4

--------------------------------
Class: SupplySpotComponent.ActorComponent.Object
	SupplySpotConfig[] SSConfigList;//[Offset: 0xbc, Size: 0xc]
	class SupplySpot* SpotClass;//[Offset: 0xc8, Size: 0x4]
	SupplySpot*[] SpotList;//[Offset: 0xcc, Size: 0xc]
	void RemoveAllSupplySpot();// 0x1367444
	void RandomSpawnSupplySpot(int Number);// 0x14f30b0

--------------------------------
Class: SupplySpotConfig
	Vector SSLocation;//[Offset: 0x0, Size: 0xc]
	int SSCount;//[Offset: 0xc, Size: 0x4]
	int SSBulletCount;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SufBoardLogic.FloatLogic.Object
	SurfBoardComp* MySurfBoardMove;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SurfBoardComp.ActorComponent.Object
	float SpeedThresholds;//[Offset: 0xbc, Size: 0x4]
	float JumpImpulse;//[Offset: 0xc0, Size: 0x4]
	float JumpImpulseBig;//[Offset: 0xc4, Size: 0x4]
	float MaxStateTime_Jump;//[Offset: 0xc8, Size: 0x4]
	float RealStateTime_Jump;//[Offset: 0xcc, Size: 0x4]
	float FloorInWaterLow;//[Offset: 0xd0, Size: 0x4]
	float HalfInWaterLow;//[Offset: 0xd4, Size: 0x4]
	float RealInWaterLow;//[Offset: 0xd8, Size: 0x4]
	float MaxHalfInWaterLowTime;//[Offset: 0xdc, Size: 0x4]
	float JumpCeilingHeight;//[Offset: 0xe0, Size: 0x4]
	float HalfJumpHeight;//[Offset: 0xe4, Size: 0x4]
	float RealJumpHeight;//[Offset: 0xe8, Size: 0x4]
	float MaxInHalfJumpHeightTime;//[Offset: 0xec, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4]
	float RealMaxSpeed;//[Offset: 0xf4, Size: 0x4]
	float InWaterTolerance;//[Offset: 0xf8, Size: 0x4]
	int LeaveFlyPointNum;//[Offset: 0x108, Size: 0x4]
	int PersistanceFrameThreshold;//[Offset: 0x10c, Size: 0x4]
	float AutoExitHeightThreshold;//[Offset: 0x110, Size: 0x4]
	float HitTestToSeaLevelBias;//[Offset: 0x114, Size: 0x4]
	enum SurfBoardState;//[Offset: 0x118, Size: 0x1]
	void ServerSetSurfBoardState(enum InState);// 0x14f3768
	void OnRep_SurfBoardState();// 0x14f3754
	void ClientSetSurfBoardState(enum InState);// 0x14f36a0

--------------------------------
Class: SwimRingActor.Actor.Object
	AnimSequence* IdleAnimSeq;//[Offset: 0x2c8, Size: 0x4]
	AnimSequence* SpringAnimSeq;//[Offset: 0x2cc, Size: 0x4]
	float DSTriggerCoolDownTime;//[Offset: 0x2d0, Size: 0x4]
	SkeletalMeshComponent* SkeletalMeshComToPlay;//[Offset: 0x2e0, Size: 0x4]
	void TriggerPlaySpringAnim();// 0x14f43b0
	void RPC_Broadcast_PlaySpringAnim();// 0x133c1bc
	void ResetPlaySprintAnim();// 0x14f439c
	void InitWithSkeletalMesh(SkeletalMeshComponent* SkeletalMeshCom);// 0x14f4324

--------------------------------
Class: TargetMoveOperation.TargetKeyOperation.Object
	byte Update(float DeltaTime);// 0x131b4b0
	byte Start();// 0x134fd24
	byte MoveCloseToTargetWithSprint(float DeltaTime);// 0x14f4f80
	byte MoveCloseToTarget(float DletaTime);// 0x14f4f00
	bool IsValidate();// 0x14f4900
	bool IsReachable();// 0x1391820
	byte Finish();// 0x1391958

--------------------------------
Class: TargetSprintOperation.TargetKeyOperation.Object
	byte Start();// 0x134fd24
	bool IsValidate();// 0x14f4900

--------------------------------
Class: TargetCrouchOperation.TargetKeyOperation.Object
	byte Update(float DeltaTime);// 0x131b4b0
	byte Start();// 0x134fd24
	bool IsValidate();// 0x14f4900

--------------------------------
Class: TargetVehicleOperation.TargetKeyOperation.Object
	byte Update(float DeltaTime);// 0x131b4b0
	byte Start();// 0x134fd24
	bool IsValidate();// 0x14f4900

--------------------------------
Class: TaskAreaDefineActor.Actor.Object
	TaskAreaData[] TaskAreaDatas;//[Offset: 0x2c8, Size: 0xc]
	byte TaskAreaType;//[Offset: 0x2d4, Size: 0x1]
	Vector[] TaskAreaAnchors;//[Offset: 0x2d8, Size: 0xc]
	Vector PlayerLocation;//[Offset: 0x2e4, Size: 0xc]
	Vector[] Points;//[Offset: 0x2f0, Size: 0xc]

--------------------------------
Class: TaskAreaData
	int TaskAreaType;//[Offset: 0x0, Size: 0x4]
	FString TaskAreaAnchorsStr;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: TeamMassActor.Actor.Object
	TeamMassPoint[] MassList;//[Offset: 0x2c8, Size: 0xc]

--------------------------------
Class: TeamMassPoint
	Actor*[] ActorList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: TestAIController.BaseAIController.AIController.Controller.Actor.Object
	class PickUpWrapperActor* EquipedWeaponClass;//[Offset: 0x600, Size: 0x4]
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0x604, Size: 0x4]

--------------------------------
Class: TirggerItem_TriggerBox.TriggerBox.TriggerBase.Actor.Object
	FString ExtraMsgInfo;//[Offset: 0x2cc, Size: 0xc]
	void OnTriggerExit(Actor* OverlappedActor, Actor* Other);// 0x1398190
	void OnTriggerEnter(Actor* OverlappedActor, Actor* Other);// 0x14fac04

--------------------------------
Class: TreasureBox.Actor.Object
	FString GeneratorGroupName;//[Offset: 0x2c8, Size: 0xc]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x2d4, Size: 0x4]
	FName WrapperBoxName;//[Offset: 0x2d8, Size: 0x8]
	StaticMeshComponent* Mesh;//[Offset: 0x2e0, Size: 0x4]
	void OnPickUpDataEmptyOnServer();// 0x1c01fa0
	void GenerateWrappersBox(out const AirDropBoxGenerateWrapperItemData[] DataList, Vector BoxLoc);// 0x14fb504

--------------------------------
Class: TreasureBoxPointActor.Actor.Object
	int TreasureBoxPointID;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: TriggerAction_ActiveInfectArea.TriggerAction.Object

--------------------------------
Class: TriggerAction_ActiveLevelNearBornPoint.TriggerAction.Object

--------------------------------
Class: TriggerAction_ActiveLevelNearBornPointNumLimit.TriggerAction.Object

--------------------------------
Class: TriggerAction_ActiveRelifePoint.TriggerAction.Object

--------------------------------
Class: TriggerAction_AllUnitSetRageLevel.TriggerAction.Object

--------------------------------
Class: TriggerAction_BroadcastVoice.TriggerAction.Object

--------------------------------
Class: TriggerAction_CastUIMsg.TriggerAction.Object

--------------------------------
Class: TriggerAction_ChangeMonsterSpotByTrigger.TriggerAction.Object

--------------------------------
Class: TriggerAction_ChangeTimerEvent.TriggerAction.Object

--------------------------------
Class: TriggerAction_CircleEnd.TriggerAction.Object

--------------------------------
Class: TriggerAction_CircleStartFromBegin.TriggerAction.Object

--------------------------------
Class: TriggerAction_Task.TriggerAction.Object

--------------------------------
Class: TriggerAction_CollectItem.TriggerAction_Task.TriggerAction.Object

--------------------------------
Class: TriggerAction_CreateTimerEvent.TriggerAction.Object
	void ChangeTime(float Time);// 0x14fca44

--------------------------------
Class: TriggerAction_DestroyActor.TriggerAction.Object
	Action_DestroyActorTag[] TagForRemoveActorList;//[Offset: 0x64, Size: 0xc]
	int DestroyNumPerFrame;//[Offset: 0x70, Size: 0x4]
	bool bDestoryByHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	ActorHealthSegment[] ActorHealthSegmentList;//[Offset: 0x78, Size: 0xc]
	float DestoryByHealthActorsCD;//[Offset: 0x88, Size: 0x4]
	Action_PendDestroyActor[] AllPendingActors;//[Offset: 0x90, Size: 0xc]
	Action_PendDestroyActor[] DestoryByHealthActors;//[Offset: 0x9c, Size: 0xc]

--------------------------------
Class: Action_DestroyActorTag
	FString Tag;//[Offset: 0x0, Size: 0xc]
	enum Reason;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ActorHealthSegment
	float MinRatio;//[Offset: 0x0, Size: 0x4]
	float MaxRatio;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Action_PendDestroyActor
	Actor* DestroyActor;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: TriggerAction_DirectorEnable.TriggerAction.Object

--------------------------------
Class: TriggerAction_EnableGuidActor.TriggerAction.Object

--------------------------------
Class: TriggerAction_EnterLevelAndStartMonsterWave.TriggerAction.Object

--------------------------------
Class: TriggerAction_EnterRevival.TriggerAction.Object
	BattleRoyaleGameModeTeam* GameModeTeam;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: TriggerAction_ExitAllMonster.TriggerAction.Object

--------------------------------
Class: TriggerAction_ExitMonsterByFuncType.TriggerAction.Object

--------------------------------
Class: TriggerAction_ExitMonsterSpotByTrigger.TriggerAction.Object

--------------------------------
Class: TriggerAction_FinishMatch.TriggerAction.Object

--------------------------------
Class: TriggerAction_GenerateEnhanceSpot.TriggerAction.Object

--------------------------------
Class: TriggerAction_KillPlayer.TriggerAction_Task.TriggerAction.Object

--------------------------------
Class: TriggerAction_KillUnit.TriggerAction.Object

--------------------------------
Class: TriggerAction_LeaveRevival.TriggerAction.Object
	BattleRoyaleGameModeTeam* GameModeTeam;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: TriggerAction_MonsterAutoExit.TriggerAction.Object

--------------------------------
Class: TriggerAction_MsgToLevel.TriggerAction.Object

--------------------------------
Class: TriggerAction_NodeActive.TriggerAction.Object

--------------------------------
Class: TriggerAction_NodeDeactive.TriggerAction.Object

--------------------------------
Class: TriggerAction_PlayerAddBuffBySkill.TriggerAction.Object

--------------------------------
Class: TriggerAction_PlayerBattleResult.TriggerAction.Object

--------------------------------
Class: TriggerAction_PlayerRemoveBuffBySkill.TriggerAction.Object

--------------------------------
Class: TriggerAction_PlayMatinee.TriggerAction.Object

--------------------------------
Class: TriggerAction_PostEventSound.TriggerAction.Object

--------------------------------
Class: TriggerAction_PostGlobalAkEvent.TriggerAction.Object
	AkAudioEvent*[] AkEvents;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: TriggerAction_PrintMsg.TriggerAction.Object
	float DelayTime;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: TriggerAction_PVPCallABoss.TriggerAction.Object

--------------------------------
Class: TriggerAction_RandomAction.TriggerAction.Object
	TriggerAction*[] ChildActions;//[Offset: 0x64, Size: 0xc]
	int[] RandomSeeds;//[Offset: 0x70, Size: 0xc]

--------------------------------
Class: TriggerAction_RedoCollectItem.TriggerAction_Task.TriggerAction.Object

--------------------------------
Class: TriggerAction_RemoveAllSupplySpot.TriggerAction.Object

--------------------------------
Class: TriggerAction_ResetAreaTrigger.TriggerAction.Object

--------------------------------
Class: TriggerAction_ResetEnhanceSpots.TriggerAction.Object

--------------------------------
Class: TriggerAction_SetUnitVisible.TriggerAction.Object

--------------------------------
Class: TriggerAction_ShowCountDown.TriggerAction.Object

--------------------------------
Class: TriggerAction_ShowGameTips.TriggerAction.Object

--------------------------------
Class: TriggerAction_ShowPlayerCommonCountTips.TriggerAction.Object

--------------------------------
Class: TriggerAction_ShowZombieWaveState.TriggerAction.Object

--------------------------------
Class: TriggerAction_SpawnAirplane.TriggerAction.Object
	AirplaneParam PlaneParam;//[Offset: 0x64, Size: 0x34]
	AirplaneData CurPlaneData;//[Offset: 0x98, Size: 0x6c]

--------------------------------
Class: AirplaneParam
	class Pawn* PlaneClass;//[Offset: 0x0, Size: 0x4]
	BehaviorTree* PlaneBT;//[Offset: 0x4, Size: 0x4]
	float Radius1;//[Offset: 0x8, Size: 0x4]
	float Radius3;//[Offset: 0xc, Size: 0x4]
	float Radius2;//[Offset: 0x10, Size: 0x4]
	Vector MapCenter;//[Offset: 0x14, Size: 0xc]
	float PlaneSpeed;//[Offset: 0x20, Size: 0x4]
	float PlaneHeight;//[Offset: 0x24, Size: 0x4]
	float CanOpenParachuteHeight;//[Offset: 0x28, Size: 0x4]
	float ForceOpenParachuteHeight;//[Offset: 0x2c, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: AirplaneData
	float PlaneHeight;//[Offset: 0x0, Size: 0x4]
	float CanOpenParachuteHeight;//[Offset: 0x4, Size: 0x4]
	float ForceOpenParachuteHeight;//[Offset: 0x8, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0xc, Size: 0x4]
	Vector DestinationCenter;//[Offset: 0x10, Size: 0xc]
	Vector PlaneVelocity;//[Offset: 0x1c, Size: 0xc]
	Vector PlaneStartLoc;//[Offset: 0x28, Size: 0xc]
	Vector PlaneEndLoc;//[Offset: 0x34, Size: 0xc]
	Vector2D CanJumpLoc;//[Offset: 0x40, Size: 0x8]
	Vector2D ForceJumpLoc;//[Offset: 0x48, Size: 0x8]
	int TotalPlayerNum;//[Offset: 0x50, Size: 0x4]
	PlayerController*[] TotalPlayers;//[Offset: 0x54, Size: 0xc]
	PlayerController*[] CurPlayers;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: TriggerAction_SpawnHeavyWeaponBox.TriggerAction.Object
	float DelayTimeScale;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: TriggerAction_SpawnItemCooked.TriggerAction.Object
	SpawnItemCfg SpawnItemCfg;//[Offset: 0x78, Size: 0x168]
	TriggerAction_SpawnItemUtils* SpawnItemUtils;//[Offset: 0x1e0, Size: 0x4]
	UAESpotDataSerialize SpotDataSerialize;//[Offset: 0x1e8, Size: 0x158]
	RepeatSpawnItemCD[] RepeatSpawnItemCDList;//[Offset: 0x34c, Size: 0xc]

--------------------------------
Class: SpawnItemCfg
	enum SpawnActorCollisionHandlingMethod;//[Offset: 0x0, Size: 0x1]
	byte SpawnItemFunction;//[Offset: 0x1, Size: 0x1]
	SecondsSegment[] SecondsSegmentCondition;//[Offset: 0x4, Size: 0xc]
	FString[] LineTracePlaceInclude;//[Offset: 0x10, Size: 0xc]
	FString[] LineTracePlaceExclude;//[Offset: 0x1c, Size: 0xc]
	int GenerateSpotCountPerTick;//[Offset: 0x28, Size: 0x4]
	bool bItemGenerateOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Vector ItemGenerateOffset;//[Offset: 0x30, Size: 0xc]
	bool bSpawnLocationZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float SpawnLocationZOffset;//[Offset: 0x40, Size: 0x4]
	bool bRandomSpawnRotatorYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bSpawnRotatorYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	float ItemSpawnRotatorYaw;//[Offset: 0x48, Size: 0x4]
	bool bUseCookedRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bUseSpotPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bNetCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	float NetCullDistance;//[Offset: 0x50, Size: 0x4]
	FString CookedFilePath;//[Offset: 0x54, Size: 0xc]
	FString[] DeleteCategoryList;//[Offset: 0x60, Size: 0xc]
	int DropHeight;//[Offset: 0x6c, Size: 0x4]
	int AppearRadiusStart;//[Offset: 0x70, Size: 0x4]
	int AppearRadius;//[Offset: 0x74, Size: 0x4]
	int AppearRadiusSecondLevel;//[Offset: 0x78, Size: 0x4]
	bool bExpressUseSpotLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	float ExpressUseSpotLocationMinDistance;//[Offset: 0x80, Size: 0x4]
	float ExpressUseSpotLocationMaxDistance;//[Offset: 0x84, Size: 0x4]
	FString MonsterSpawnDataTablePath;//[Offset: 0x88, Size: 0xc]
	FString TreasureBoxTablePath;//[Offset: 0x94, Size: 0xc]
	FString ItemSpawnDataTablePath;//[Offset: 0xa0, Size: 0xc]
	bool bCombinationCategoryAndValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool bSpotPerGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	int NeedSpotPerGroupMin;//[Offset: 0xb0, Size: 0x4]
	int NeedSpotPerGroupMax;//[Offset: 0xb4, Size: 0x4]
	bool bGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	int NeedGroupMin;//[Offset: 0xbc, Size: 0x4]
	int NeedGroupMax;//[Offset: 0xc0, Size: 0x4]
	bool bGeneratedBySpotFileDirect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	enum AirDropType;//[Offset: 0xc5, Size: 0x1]
	bool RandomItemAtItemSpotUseSpotPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]
	bool bExcludeUsedGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bExcludeUsedSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bNeedInBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool UseGroupInBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	bool bNeedInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 0x1]
	bool UseGroupInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool UseExcludeAirLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]
	float ExcludeAirLineDistance;//[Offset: 0xd0, Size: 0x4]
	bool UseItemGeneratorAreaItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool UseItemGeneratorAreaIIDItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	bool UseSpotTriggerOtherSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	SpotTriggerOtherSpot[] SpotTriggerOtherSpotList;//[Offset: 0xd8, Size: 0xc]
	bool UseCleanUpSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	bool bNeedAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 0x1]
	bool bExpressItemNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 0x1]
	int ExpressItemNumMin;//[Offset: 0xe8, Size: 0x4]
	int ExpressItemNumMax;//[Offset: 0xec, Size: 0x4]
	bool bExpressItemNumPerPlayerCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	int ExpressItemNumPerPlayer;//[Offset: 0xf4, Size: 0x4]
	int ExpressItemNumPerPlayerTotal;//[Offset: 0xf8, Size: 0x4]
	bool bSpawnExpressItemPerPlayerCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	float SpawnExpressItemPerPlayerCD;//[Offset: 0x100, Size: 0x4]
	bool bSupplementExpressItemCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	float SupplementExpressItemCD;//[Offset: 0x108, Size: 0x4]
	bool bExpressReplaceZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bDestroySpots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	bool bAISpawnExpressItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]
	bool bAttachToHostActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 0x1]
	bool bCaculateRelativeTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bAttachToHostActorIsStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool UseSpawnTogetherClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	bool IsTogetherItemSameAsMainItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113, Size: 0x1]
	bool UseDropLifeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	float DropLifeTime;//[Offset: 0x118, Size: 0x4]
	bool UseDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	DropItemCfg DropItemCfg;//[Offset: 0x120, Size: 0x28]
	bool UseRepeatItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	RepeatItemCfg RepeatItemCfg;//[Offset: 0x14c, Size: 0x4]
	int FuelPercentMax;//[Offset: 0x150, Size: 0x4]
	bool ActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	bool UseLocationID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1]
	bool bRegistHostActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 0x1]
	bool bUseItemIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 0x1]
	bool bSpawnPedestal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	SpotGroupProperty[] SpotGroupProperties;//[Offset: 0x15c, Size: 0xc]

--------------------------------
Class: SecondsSegment
	float BeginSeconds;//[Offset: 0x0, Size: 0x4]
	float EndSeconds;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SpotTriggerOtherSpot
	FString SrcSpotTag;//[Offset: 0x0, Size: 0xc]
	FString DstSpotTag;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: DropItemCfg
	FString DropConfigTablePath;//[Offset: 0x0, Size: 0xc]
	FString DropRuleConfigTablePath;//[Offset: 0xc, Size: 0xc]
	bool UseDropID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int DropID;//[Offset: 0x1c, Size: 0x4]
	bool UseActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int MaxRandomWeight;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: RepeatItemCfg
	float RepeatSpawnItemCD;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: TriggerAction_SpawnItemUtils.Object
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0xac, Size: 0xc]
	World* MyWorld;//[Offset: 0x268, Size: 0x4]
	Location2HostActor[] HostActorList;//[Offset: 0x26c, Size: 0xc]
	Object* TriggerAction;//[Offset: 0x278, Size: 0x4]
	UAESpawnActorComponent* pSpawnMonsterHelper;//[Offset: 0x29c, Size: 0x4]
	FString UseDebug;//[Offset: 0x2b4, Size: 0xc]

--------------------------------
Class: Location2HostActor
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Actor* Host;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UAESpawnActorComponent.ActorComponent.Object
	Actor* UAESpawnActor(UAESpawnActorParam Param);// 0x1860d7c
	class Object PrepareSpawnData(int TemplateID);// 0x1860cf4
	void InitializeActor(Actor* InActor, int TemplateID);// 0x1860c30

--------------------------------
Class: UAESpawnActorParam
	int TemplateID;//[Offset: 0x0, Size: 0x4]
	class Object* ActorClass;//[Offset: 0x4, Size: 0x4]
	Vector SpawnLocation;//[Offset: 0x8, Size: 0xc]
	Rotator SpawnRotator;//[Offset: 0x14, Size: 0xc]
	Vector SpawnOffsetLoc;//[Offset: 0x20, Size: 0xc]
	enum CollisionHandling;//[Offset: 0x2c, Size: 0x1]
	float RandomRadius;//[Offset: 0x30, Size: 0x4]
	bool RandomRotYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	class Actor[] TraceAvoidClass;//[Offset: 0x38, Size: 0xc]
	Actor* Owner;//[Offset: 0x44, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x48, Size: 0x4]
	FString MakerName;//[Offset: 0x4c, Size: 0xc]
	bool IsTracePos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsHalfCapsulePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	byte SpawnType;//[Offset: 0x5a, Size: 0x1]
	int ZTraceOffset;//[Offset: 0x5c, Size: 0x4]
	int MonsterBornType;//[Offset: 0x60, Size: 0x4]
	int MonsterFrontBornType;//[Offset: 0x64, Size: 0x4]
	enum FeatureSetType;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: UAESpotDataSerialize

--------------------------------
Class: RepeatSpawnItemCD
	int idx;//[Offset: 0x0, Size: 0x4]
	float CurrentSpawnItemCD;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TriggerAction_SpawnItemDrop.TriggerAction.Object
	SpawnItemCfg SpawnItemCfg;//[Offset: 0x88, Size: 0x168]
	TriggerAction_SpawnItemUtils* SpawnItemUtils;//[Offset: 0x1f0, Size: 0x4]

--------------------------------
Class: TriggerAction_SpawnItemForPlayer.TriggerAction_SpawnItemDrop.TriggerAction.Object
	STExtraPlayerController* TargetPC;//[Offset: 0x220, Size: 0x4]

--------------------------------
Class: TriggerAction_SpawnItemInterface.Interface.Object

--------------------------------
Class: TriggerAction_SpawnItemSecretRoom.TriggerAction.Object
	SpawnItemCfg SpawnItemCfg;//[Offset: 0x80, Size: 0x168]
	FString ActionTag;//[Offset: 0x1e8, Size: 0xc]
	bool bTraceGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1]
	TriggerAction_SpawnItemUtils* SpawnItemUtils;//[Offset: 0x1f8, Size: 0x4]

--------------------------------
Class: TriggerAction_SpawnItemSpotFile.TriggerAction.Object
	SpawnItemCfg SpawnItemCfg;//[Offset: 0x74, Size: 0x168]
	TriggerAction_SpawnItemUtils* SpawnItemUtils;//[Offset: 0x1dc, Size: 0x4]
	UAESpotDataSerialize SpotDataSerialize;//[Offset: 0x1e0, Size: 0x158]

--------------------------------
Class: TriggerAction_SpawnItemTrigger.TriggerAction.Object
	SpawnItemCfg SpawnItemCfg;//[Offset: 0x94, Size: 0x168]
	bool UseCfgLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 0x1]
	Vector CfgLocation;//[Offset: 0x200, Size: 0xc]
	bool UseCfgRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 0x1]
	Rotator CfgRotator;//[Offset: 0x210, Size: 0xc]
	TriggerAction_SpawnItemUtils* SpawnItemUtils;//[Offset: 0x21c, Size: 0x4]

--------------------------------
Class: TriggerAction_SpawnMonsterOutBossArea.TriggerAction.Object

--------------------------------
Class: TriggerAction_SpawnSupplySpot.TriggerAction.Object

--------------------------------
Class: TriggerAction_SpawnUnit.TriggerAction.Object

--------------------------------
Class: TriggerAction_SpawnZombie.TriggerAction.Object

--------------------------------
Class: TriggerAction_StartMonsterWave.TriggerAction.Object

--------------------------------
Class: TriggerAction_StartWeakGuid.TriggerAction.Object

--------------------------------
Class: TriggerAction_StopWeakGuid.TriggerAction.Object

--------------------------------
Class: TriggerAction_SwitchWeather.TriggerAction.Object
	int WeatherIdx;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: TriggerAction_SwitchWeatherLevel.TriggerAction.Object
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: TriggerAction_TeamBattleResult.TriggerAction.Object

--------------------------------
Class: TriggerAction_TeamMass.TriggerAction.Object

--------------------------------
Class: TriggerAction_TeamTerminated.TriggerAction.Object

--------------------------------
Class: TriggerAction_TeleportLevelPosi.TriggerAction.Object

--------------------------------
Class: TriggerAction_TriggerActive.TriggerAction.Object

--------------------------------
Class: TriggerAction_TriggerDeactive.TriggerAction.Object

--------------------------------
Class: TriggerAction_UnitSetRageLevel.TriggerAction.Object

--------------------------------
Class: TriggerAction_UnitUseSkill.TriggerAction.Object

--------------------------------
Class: TriggerCondition_AllTeamRevival.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_AND.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_Bool.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_BoolCompare.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_CollectItem.TriggerCondition_Task.TriggerCondition.Object
	int CollectedItemID;//[Offset: 0x40, Size: 0x4]
	int NeedToCollect;//[Offset: 0x44, Size: 0x4]
	int Collected;//[Offset: 0x48, Size: 0x4]
	void SetCollectConditionParam(FString InParams);// 0x1503c28
	bool GetItemIDFromData(VariableSet* InDataSource, out int OutItemID);// 0x1503b54
	bool GetItemCountFromData(VariableSet* InDataSource, out int outItemCount);// 0x1503a80
	int GetCollectProcess();// 0x1503a58

--------------------------------
Class: TriggerCondition_GameMode.TriggerCondition_Task.TriggerCondition.Object
	enum SpecifiedGameModeType;//[Offset: 0x3f, Size: 0x1]
	void SetGameModeType(enum GameModeType);// 0x1504210

--------------------------------
Class: TriggerCondition_InfectAreaInBlueCircle.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_IntegerCompare.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_KillPlayer.TriggerCondition_Task.TriggerCondition.Object
	int SpecifiedKillCount;//[Offset: 0x40, Size: 0x4]
	int TargetKillingCount;//[Offset: 0x44, Size: 0x4]
	int InitProcess;//[Offset: 0x48, Size: 0x4]
	void UpdateTaskProcess();// 0x1504860
	bool GetKillCountFromData(VariableSet* InDataSource, out int outKillCount);// 0x150478c

--------------------------------
Class: TriggerCondition_No.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_ObjectEqual.TriggerCondition.Object
	FString CompareKeyName;//[Offset: 0x3c, Size: 0xc]
	FString ExtraMsg;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: TriggerCondition_OperatorAND.TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_OperatorOR.TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_OR.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_SpecifiedArea.TriggerCondition_Task.TriggerCondition.Object
	byte SpecifiedTriggerAreaType;//[Offset: 0x3f, Size: 0x1]
	void SetTriggerAreaType(byte TriggerAreaType);// 0x1505394
	bool GetTriggerAreaTypeFromData(VariableSet* InDataSource, out byte outTriggerAreaType);// 0x15052c0

--------------------------------
Class: TriggerCondition_SpecifiedItem.TriggerCondition_Task.TriggerCondition.Object
	int SpecifiedItemID;//[Offset: 0x40, Size: 0x4]
	void SetSpecifiedItemID(int ItemID);// 0x15056e0
	bool GetItemIDFromData(VariableSet* InDataSource, out int OutItemID);// 0x150478c

--------------------------------
Class: TriggerCondition_SpecifiedPlace.TriggerCondition_Task.TriggerCondition.Object
	byte SpecifiedTriggerItemType;//[Offset: 0x3f, Size: 0x1]
	void SetTriggerItemType(byte TriggerItemType);// 0x1505394
	bool GetTriggerItemTypeFromData(VariableSet* InDataSource, out byte outTriggerItemType);// 0x15052c0

--------------------------------
Class: TriggerEvent_Task.TriggerEvent.Object
	byte EventType;//[Offset: 0x7c, Size: 0x1]
	void BroadCast(int Param);// 0x1506e34

--------------------------------
Class: TriggerEvent_DoEmote.TriggerEvent_Task.TriggerEvent.Object

--------------------------------
Class: TriggerEvent_DropItem.TriggerEvent_Task.TriggerEvent.Object

--------------------------------
Class: TriggerEvent_KillPlayer.TriggerEvent_Task.TriggerEvent.Object

--------------------------------
Class: TriggerEvent_LevelObjectMsg.TriggerEvent.Object

--------------------------------
Class: TriggerEvent_PickupItem.TriggerEvent_Task.TriggerEvent.Object

--------------------------------
Class: TriggerEvent_PlayerDead.TriggerEvent.Object

--------------------------------
Class: TriggerEvent_UseItem.TriggerEvent.Object

--------------------------------
Class: TriggerItem_Task.TriggerSphere.TriggerBase.Actor.Object
	int OwningTeamID;//[Offset: 0x2cc, Size: 0x4]
	byte TriggerItemType;//[Offset: 0x2d0, Size: 0x1]
	ParticleSystem* TriggerVisualEffect;//[Offset: 0x2d4, Size: 0x4]
	int LifeSpan;//[Offset: 0x2d8, Size: 0x4]
	void OnTriggerExit(Actor* OverlappedActor, Actor* Other);// 0x150791c
	void OnTriggerEnter(Actor* OverlappedActor, Actor* Other);// 0x135ac18

--------------------------------
Class: TriggerItem_PicnicMat.TriggerItem_Task.TriggerSphere.TriggerBase.Actor.Object
	int PicnicMatID;//[Offset: 0x2dc, Size: 0x4]

--------------------------------
Class: TssHookEx.Actor.Object

--------------------------------
Class: TurnAroundViewComponent.ActorComponent.Object
	FocusTargetItem FocusTurnData;//[Offset: 0xbc, Size: 0x34]
	bool bTurnOnlyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	Character* MyChar;//[Offset: 0x11c, Size: 0x4]
	void OnRep_FocusTurnTargetChange();// 0x1508234

--------------------------------
Class: FocusTargetItem
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	Vector Position;//[Offset: 0x8, Size: 0xc]
	bool IsStartTurnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float TurnTargetVelocity;//[Offset: 0x18, Size: 0x4]
	Rotator LastActorRotation;//[Offset: 0x1c, Size: 0xc]
	FString CurveName;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: UAEAIOcclusionBoundsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: UAEBaseSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x400, Size: 0xc]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x1508d14

--------------------------------
Class: UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	float MaxCastDistance;//[Offset: 0x40c, Size: 0x4]
	float MinCastDistance;//[Offset: 0x410, Size: 0x4]

--------------------------------
Class: UAEAvatarDisplayDirector.Actor.Object
	int poseNum;//[Offset: 0x2c8, Size: 0x4]
	CameraActor* avatarCamera;//[Offset: 0x2cc, Size: 0x4]
	AvatarDisplayPoseComponent*[] avatarPoseList;//[Offset: 0x2d0, Size: 0xc]
	Vector2D[] ScreenPos;//[Offset: 0x2dc, Size: 0xc]
	Vector4 Limit;//[Offset: 0x2f0, Size: 0x10]
	delegate OnCoordCalculated;//[Offset: 0x300, Size: 0xc]
	void UnloadWeatherLevel();// 0x1508a04
	void SpawnAvatar();// 0x133c1bc
	void SetMainCamera(CameraActor* Camera);// 0x1508990
	void SendScreenPosEvent();// 0x150897c
	void CalcCharacterScreenPos(int Pos, CharacterAvatarComponent2* CharComp);// 0x15088c0

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0x36c, Size: 0xc]
	FString SkillTableName;//[Offset: 0x378, Size: 0xc]
	FString SkillBuffTableName;//[Offset: 0x384, Size: 0xc]
	FString PropSkillMapTableName;//[Offset: 0x390, Size: 0xc]
	bool TriggerEvent(int SkillID, byte EventType);// 0x15091a4
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x15090e0
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x1517b84
	FString GetSkillIconBySkillID(int SkillID);// 0x1517a7c
	UTSkill* GetSkillByEntry(enum Entry);// 0x15179f4
	int GetPropMappedSkillID(int PropID, int PropSkillLevel);// 0x1517930
	PropSkillMapTableRow GetPropMappedRow(int PropSkillID, int PropSkillLevel);// 0x1517758
	int GetPropMappedAuxSkillID(int PropID, int PropSkillLevel);// 0x1517694
	bool CheckPropSkillFilterGun(int PropSkillID, int PropSkillLevel, int GunID);// 0x151758c

--------------------------------
Class: UTSkillEntryConfig
	enum Entry;//[Offset: 0x0, Size: 0x1]
	int SkillIndex;//[Offset: 0x4, Size: 0x4]
	FString Interrupts;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: PropSkillMapTableRow
	int SkillMapID;//[Offset: 0x0, Size: 0x4]
	int PropID;//[Offset: 0x4, Size: 0x4]
	int PropSkillLevel;//[Offset: 0x8, Size: 0x4]
	int PropSkillID;//[Offset: 0xc, Size: 0x4]
	int AuxPropSkillID;//[Offset: 0x10, Size: 0x4]
	int[] FilterGunIDs;//[Offset: 0x14, Size: 0xc]
	FString PropSkillIconPath;//[Offset: 0x20, Size: 0xc]
	FString PropSkillUseIconPath;//[Offset: 0x2c, Size: 0xc]
	FString PropSkillDesc;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	bool TriggerEvent(int SkillID, byte EventType);// 0x15091a4
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x15090e0
	void SetSkillOwner(Actor* Pawn);// 0x1509060

--------------------------------
Class: UAECustomizePanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	UIElemLayoutDetail CurrentLayoutData;//[Offset: 0xe8, Size: 0x30]
	UIElemLayoutDetail DefaultLayoutData;//[Offset: 0x118, Size: 0x30]
	Border* Border_Opacity;//[Offset: 0x148, Size: 0x4]
	FString Border_OtherName;//[Offset: 0x14c, Size: 0xc]
	float OpacticyMin;//[Offset: 0x158, Size: 0x4]
	float OpacityMax;//[Offset: 0x15c, Size: 0x4]
	float BackgroundBrushMin;//[Offset: 0x160, Size: 0x4]
	LinearColor LinerColor0;//[Offset: 0x164, Size: 0x10]
	LinearColor LinerColor1;//[Offset: 0x174, Size: 0x10]
	DynamicMatImageInfo[] DynamicMatImageInfoList;//[Offset: 0x184, Size: 0xc]
	bool bUseDynamicMatImageFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	int EnableDynamicMatImageFeature;//[Offset: 0x194, Size: 0x4]
	float Threshold;//[Offset: 0x198, Size: 0x4]
	void SetLayoutData(out const UIElemLayoutDetail InData);// 0x1509bfc
	void InitLayoutData(out const UIElemLayoutDetail InData);// 0x1509b68
	UIElemLayoutDetail GetLayoutDataFromSG(int FireMode, int SlotIdx);// 0x1c01fa0
	UIElemLayoutDetail GetLayoutData();// 0x1509b0c
	Border* GetFirstBorder(Widget* Widget);// 0x1509a8c
	bool GetDetailInfoFromSG(const SaveGame* pSaveGame, int CrtUseIndex, out UIElemLayoutDetail LayoutDetail);// 0x1c01fa0
	UIElemLayoutDetail GetDefaultLayoutData();// 0x1509a30
	void ApplyLayoutFromSG(int FireMode, int SlotIdx);// 0x1509974
	void ApplyLayoutData(out const UIElemLayoutDetail InData);// 0x15098e0
	void ApplyDefaultLayout();// 0x15098cc
	void ApplyCustomizeData(const SaveGame* pSaveGame, int CrtUseIndex);// 0x1319548

--------------------------------
Class: UIElemLayoutDetail
	int Type;//[Offset: 0x0, Size: 0x4]
	float Opacity;//[Offset: 0x4, Size: 0x4]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Anchors AnchorType;//[Offset: 0x10, Size: 0x10]
	Vector2D RelativePos;//[Offset: 0x20, Size: 0x8]
	Vector2D OriginSize;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: DynamicMatImageInfo
	FName MatParmName;//[Offset: 0x0, Size: 0x8]
	Image* DynamicMatImage;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: UAEMonsterAnimListComponentBase.UAEAnimListComponentBase.ActorComponent.Object
	MonsterAnimPhaseData[] MonsterAnimDatas;//[Offset: 0x150, Size: 0xc]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom1;//[Offset: 0x15c, Size: 0xc]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom2;//[Offset: 0x168, Size: 0xc]
	delegate OnAnimLoadedFinished;//[Offset: 0x174, Size: 0xc]
	int RandomAnimID;//[Offset: 0x180, Size: 0x4]
	void OnAsyncLoadingFinished(MonsterAsyncloadAnimParams loadAnimParams);// 0x150a89c
	MonsterAnimPhaseData GetMonsterAnimPhaseDataByType(byte PoseType);// 0x150a7b0
	AnimationAsset* GetMonsterAnimByType(byte PoseType);// 0x150a730

--------------------------------
Class: MonsterAnimPhaseData
	byte PosType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: MonsterAsyncloadAnimParams
	byte PosType;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: UAEMonsterAnimListComponent.UAEMonsterAnimListComponentBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAERecastNavMesh.RecastNavMesh.NavigationData.Actor.Object
	FString NavDataPath;//[Offset: 0x4ac, Size: 0xc]
	FString NewNavDataPath;//[Offset: 0x4b8, Size: 0xc]
	FString[] PVENavDataPath;//[Offset: 0x4c4, Size: 0xc]
	FString[] PVENavLinkPath;//[Offset: 0x4d0, Size: 0xc]
	PVELinkLevelData[] PVELinkLevels;//[Offset: 0x4dc, Size: 0xc]
	bool LoadInPIE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	bool LoadInDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	bool LoadInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 0x1]
	bool LoadInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4eb, Size: 0x1]
	void LoadPVELinkLevels(int Index);// 0x150acd0

--------------------------------
Class: PVELinkLevelData
	FString[] levelList;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	Pawn* OwnerPawnForBuff;//[Offset: 0xe4, Size: 0x4]

--------------------------------
Class: UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESKCond_CheckItemUpgrade.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	byte OperatorType;//[Offset: 0xe8, Size: 0x1]
	int NeedItemNum;//[Offset: 0xec, Size: 0x4]
	int CheckItemType;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	enum PawnState;//[Offset: 0x40d, Size: 0x1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 0x1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 0x1]
	int CastFailTipsID;//[Offset: 0x410, Size: 0x4]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1]
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x150b328

--------------------------------
Class: UAESkillAction_ActionWithConditions.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UAESkillCondition*[] Conditions;//[Offset: 0x110, Size: 0xc]
	UTSkillAction* Action;//[Offset: 0x11c, Size: 0x4]

--------------------------------
Class: UAESkillAction_ActivityInteractiveFinished.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_ActivityInteractiveReset.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_ActivityInteractiveStarted.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_ActorFall.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	bool bDisableGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	Vector MoveVelocity;//[Offset: 0x114, Size: 0xc]

--------------------------------
Class: UAESkillAction_ActorJump.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UAESkillPicker* DamagePicker;//[Offset: 0x110, Size: 0x4]
	float Speed;//[Offset: 0x114, Size: 0x4]
	bool bShouldFollowTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	int JumpStartOffsetZ;//[Offset: 0x11c, Size: 0x4]
	int JumpHighThreshold;//[Offset: 0x120, Size: 0x4]
	bool bShouldCheckOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	float MinDistanceFromTarget;//[Offset: 0x128, Size: 0x4]
	void OnActorLanded(out const HitResult InHitResult);// 0x150c03c
	void HandleOnActorHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x150bed4

--------------------------------
Class: UAESkillPicker.UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_ActorMove.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UAESkillPicker* DamagePicker;//[Offset: 0x110, Size: 0x4]
	float Speed;//[Offset: 0x114, Size: 0x4]
	float Acceleration;//[Offset: 0x118, Size: 0x4]
	float MaxSpeed;//[Offset: 0x11c, Size: 0x4]
	bool bShouldFollowTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool bShouldCheckOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	float MinDistanceFromTarget;//[Offset: 0x124, Size: 0x4]
	byte[] OverlapObjectTypes;//[Offset: 0x128, Size: 0xc]
	Pawn* OwnerPawn;//[Offset: 0x134, Size: 0x4]
	void HandleOnActorHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x150c3a4

--------------------------------
Class: UAESkillAction_AddCmptToPicker.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UAESkillPicker* DamagePicker;//[Offset: 0x110, Size: 0x4]
	bool bCheckDuplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool bKeepComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]
	class ActorComponent[] Components;//[Offset: 0x118, Size: 0xc]

--------------------------------
Class: UAESkillAction_AddRecoveryPrompt.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	FString ShowDataKey;//[Offset: 0x110, Size: 0xc]
	float Value;//[Offset: 0x11c, Size: 0x4]

--------------------------------
Class: UAESkillAction_AddRemoveBuff.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	bool IsAddBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	FName BuffName;//[Offset: 0x118, Size: 0x8]
	int BuffID;//[Offset: 0x120, Size: 0x4]
	int SkillID;//[Offset: 0x124, Size: 0x4]
	int AddLayerCount;//[Offset: 0x128, Size: 0x4]
	UAESkillPicker* TargetPicker;//[Offset: 0x12c, Size: 0x4]
	class Actor[] IgnoredActorClasses;//[Offset: 0x130, Size: 0xc]

--------------------------------
Class: UAESkillAction_ApplyRadiusDamage.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	bool bAirAttackDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float BaseDamage;//[Offset: 0x114, Size: 0x4]
	float MiniDamage;//[Offset: 0x118, Size: 0x4]
	float Momentum;//[Offset: 0x11c, Size: 0x4]
	float InnerRadius;//[Offset: 0x120, Size: 0x4]
	float OuterRadius;//[Offset: 0x124, Size: 0x4]
	float FalloffParam;//[Offset: 0x128, Size: 0x4]
	float AdditionalDamagForVehicle;//[Offset: 0x12c, Size: 0x4]
	class DamageType* DamageTypeClass;//[Offset: 0x130, Size: 0x4]
	float CollitionFreeRadius;//[Offset: 0x134, Size: 0x4]
	bool IsVehicleExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]

--------------------------------
Class: UAESkillAction_ApplyVehicleWeaponBoard.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	VehicleWeaponBoardDataConfigItem[] DataConfigList;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: VehicleWeaponBoardDataConfigItem
	int SeatID;//[Offset: 0x0, Size: 0x4]
	int WeaponListID;//[Offset: 0x4, Size: 0x4]
	enum DataType;//[Offset: 0x8, Size: 0x1]
	UAEBlackboardKeySelector BlackboardKey;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UAESkillAction_AttachActor.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	SkillAction_AttachActorCreateData AttachActorData;//[Offset: 0x110, Size: 0x30]
	Actor* AttachedActor;//[Offset: 0x140, Size: 0x4]

--------------------------------
Class: SkillAction_AttachActorCreateData
	class Actor* ActorTemplate;//[Offset: 0x0, Size: 0x4]
	FName AttachSocketName;//[Offset: 0x8, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x10, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x1c, Size: 0xc]
	bool DestroyAfterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool DestroyAfterPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool SnapToTargetIncludingScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	float DestroyAfterTime;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: UAESkillAction_BreakGlass.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UAESkillPicker* DamagePicker;//[Offset: 0x110, Size: 0x4]

--------------------------------
Class: UAESkillAction_CallAirAttack.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float FlightHeight;//[Offset: 0x110, Size: 0x4]
	float SeaLevelHeight;//[Offset: 0x114, Size: 0x4]
	AirAttackConfig AirAttackConfig;//[Offset: 0x118, Size: 0x14]

--------------------------------
Class: AirAttackConfig
	float AttackLastingTime;//[Offset: 0x0, Size: 0x4]
	float AttackAreaRadius;//[Offset: 0x4, Size: 0x4]
	int TotalBombs;//[Offset: 0x8, Size: 0x4]
	float BombsRadius;//[Offset: 0xc, Size: 0x4]
	class AirAttackBombActor* BombActorTemplate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: UAESkillAction_CameraShake.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	class CameraShake* CameraShakeTemplate;//[Offset: 0x110, Size: 0x4]
	float ShakeScale;//[Offset: 0x114, Size: 0x4]
	float MaxDistance;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: UAESkillAction_ChangePoseState.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	byte TargetPoseState;//[Offset: 0x110, Size: 0x1]

--------------------------------
Class: UAESkillAction_ChangeWearing.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_ConsumeHandleItem.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	int ItemID;//[Offset: 0x110, Size: 0x4]
	int Type;//[Offset: 0x114, Size: 0x4]
	int count;//[Offset: 0x118, Size: 0x4]
	bool IsGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	bool IsNeedNotifyLobbyServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1]

--------------------------------
Class: UAESkillAction_ConsumeHandleItems.UAESkillAction_ConsumeHandleItem.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	int[] PreferItemIDs;//[Offset: 0x120, Size: 0xc]
	bool[] PreferItemToLobby;//[Offset: 0x12c, Size: 0xc]

--------------------------------
Class: UAESkillAction_CustomEvent.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	byte CustomEvent;//[Offset: 0x110, Size: 0x1]
	byte UTCustomEvent;//[Offset: 0x111, Size: 0x1]

--------------------------------
Class: UAESkillAction_DoBatteryChipUse.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_FaceTarget.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float AcceptableAngle;//[Offset: 0x110, Size: 0x4]
	float TurnSpeed;//[Offset: 0x114, Size: 0x4]
	UAESkillPicker* DamagePicker;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: UAESkillAction_FireWeapon.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	byte FireType;//[Offset: 0x110, Size: 0x1]

--------------------------------
Class: UAESkillAction_GasCan.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	bool RunOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float GasValue;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: UAESkillAction_GrenadeSwitchBackToWeapon.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_JumpPhase.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	int NewPhaseID;//[Offset: 0x110, Size: 0x4]
	UAESkillCondition* JumpCondtion;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: UAESkillAction_JumpToRandomPhase.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	int StartIndex;//[Offset: 0x110, Size: 0x4]
	int EndIndex;//[Offset: 0x114, Size: 0x4]
	bool IsCanBeCurIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	UAESkillCondition* JumpCondtion;//[Offset: 0x11c, Size: 0x4]

--------------------------------
Class: UAESkillAction_LaunchToxicGrnd.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	class PVEProjectileBase* ProjectileActorTemplate;//[Offset: 0x110, Size: 0x4]
	UAESkillPicker* DamagePicker;//[Offset: 0x114, Size: 0x4]
	bool bUseCharacterHeadLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	Vector ProjectileLineOffset;//[Offset: 0x11c, Size: 0xc]
	Vector TargetActorOffset;//[Offset: 0x128, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x134, Size: 0x4]
	float Speed;//[Offset: 0x138, Size: 0x4]
	float MaxDistance;//[Offset: 0x13c, Size: 0x4]
	FName AttachSocketName;//[Offset: 0x140, Size: 0x8]
	float DelayFlyTime;//[Offset: 0x148, Size: 0x4]
	float MaxLifeSpan;//[Offset: 0x14c, Size: 0x4]
	bool bUseHighArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	HighArcParam[] HighArcGravityScales;//[Offset: 0x154, Size: 0xc]
	bool bIsHoming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	float HomingAccelerationMagnitude;//[Offset: 0x164, Size: 0x4]
	bool bIsRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bIsHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	bool bUseCachedTargetLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]

--------------------------------
Class: UAESkillAction_ListenTakeDamage.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	enum DamagePosition;//[Offset: 0x110, Size: 0x1]
	float MaxDamageValue;//[Offset: 0x114, Size: 0x4]
	byte TriggerEventType;//[Offset: 0x118, Size: 0x1]
	void UndoAction_Internal();// 0x140c600
	bool RealDoAction_Internal();// 0x147816c
	void NofityTakeDamage(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x150f2d8

--------------------------------
Class: UAESkillAction_LockItem.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_Log.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	FString LogString;//[Offset: 0x110, Size: 0xc]
	bool bPrintEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	void UndoAction_Internal();// 0x140c600

--------------------------------
Class: AESkillAction_MaintenanceVehicle.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	bool RunOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float PercentValue;//[Offset: 0x114, Size: 0x4]
	bool FixTire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]

--------------------------------
Class: UAESkillAction_MobHide.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_PauseAnims.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float Duration;//[Offset: 0x110, Size: 0x4]
	void ResetAnimationFrame();// 0x134cb28

--------------------------------
Class: UAESkillAction_PeriodAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillAction* Action;//[Offset: 0x110, Size: 0x4]
	float Interval;//[Offset: 0x114, Size: 0x4]
	float CurrentTickDeltaTime;//[Offset: 0x118, Size: 0x4]
	Rotator RotationOffsetStart;//[Offset: 0x11c, Size: 0xc]
	Rotator RotationOffsetEnd;//[Offset: 0x128, Size: 0xc]
	float TotalActionTime;//[Offset: 0x134, Size: 0x4]

--------------------------------
Class: UAESkillAction_PlayMontage_IsArmed.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float CheckDurationConfig;//[Offset: 0x110, Size: 0x4]
	AnimMontage* AnimMontage;//[Offset: 0x118, Size: 0x28]
	bool ModifyWithActivityAcotr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool AnimStopAfterPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	void OnAsyncLoadAnimResFinished(PlayMontageAsyncloadParams LoadParams);// 0x15108e4

--------------------------------
Class: UAESkillAction_PlayMontage_Pose.UAESkillAction_PlayMontage.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	SkillPoseMontageData PoseMontageData;//[Offset: 0x168, Size: 0xa8]
	SkillPoseMontageData FPPPoseMontageData;//[Offset: 0x210, Size: 0xa8]
	FString MutexMontageGroupName;//[Offset: 0x2b8, Size: 0xc]
	bool NeedStopMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	FString AkAudioStopEventName;//[Offset: 0x2c8, Size: 0xc]

--------------------------------
Class: SkillPoseMontageData
	AnimMontage* AnimMontage_Stand;//[Offset: 0x0, Size: 0x28]
	AnimMontage* AnimMontage_Crouch;//[Offset: 0x28, Size: 0x28]
	AnimMontage* AnimMontage_Prone;//[Offset: 0x50, Size: 0x28]
	AnimMontage* AnimMontage_Vehicle;//[Offset: 0x78, Size: 0x28]
	enum AnimPlayFlag;//[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: UAESkillAction_PlayMontage_Jump.UAESkillAction_PlayMontage_Pose.UAESkillAction_PlayMontage.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	AnimMontage* AnimMontage_Jump;//[Offset: 0x2d4, Size: 0x4]

--------------------------------
Class: UAESkillAction_PlayMontage_Pose_IsArmed.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	SkillPoseMontageData PoseMontageDataArmed;//[Offset: 0x110, Size: 0xa8]
	SkillPoseMontageData FPPPoseMontageDataArmed;//[Offset: 0x1b8, Size: 0xa8]
	SkillPoseMontageData PoseMontageData;//[Offset: 0x260, Size: 0xa8]
	SkillPoseMontageData FPPPoseMontageData;//[Offset: 0x308, Size: 0xa8]
	float CheckDurationConfig;//[Offset: 0x3b0, Size: 0x4]
	bool IsEntertainmentEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	float EntertainmentRatio;//[Offset: 0x3b8, Size: 0x4]
	void OnAsyncLoadAnimResFinished(PlayMontageAsyncloadParams LoadParams);// 0x15114c8

--------------------------------
Class: UAESkillAction_PlayMontageWithPrepare.UAESkillAction_PlayMontage.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_PlayMontageWithSection.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	AnimMontage* AnimMontage;//[Offset: 0x110, Size: 0x4]
	FName SectionName;//[Offset: 0x118, Size: 0x8]
	bool AnimStopAfterPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool bConsiderPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]

--------------------------------
Class: UAESkillAction_PostEventAtLoc.STExtraBuffAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	AkAudioEvent* in_pAkEvent;//[Offset: 0x110, Size: 0x4]

--------------------------------
Class: UAESkillAction_RandomAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	RandomActionGroup[] SkillCandidates;//[Offset: 0x110, Size: 0xc]
	int RandomeIndex;//[Offset: 0x11c, Size: 0x4]

--------------------------------
Class: RandomActionGroup
	UTSkillAction*[] Actions;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: UAESkillAction_Recovery.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	FString PropertyName;//[Offset: 0x110, Size: 0xc]
	byte RecoveryType;//[Offset: 0x11c, Size: 0x1]
	float RecoveryValue;//[Offset: 0x120, Size: 0x4]
	float RecoveryLimit;//[Offset: 0x124, Size: 0x4]
	bool RunOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	byte ReasonType;//[Offset: 0x129, Size: 0x1]

--------------------------------
Class: UAESkillAction_ReplaceCharAnim.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x4, Size: 0xc]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: UAESkillAction_SetAntidoteTime.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float AntidoteTime;//[Offset: 0x110, Size: 0x4]

--------------------------------
Class: UAESkillAction_SetPlayerState.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	enum PawnState;//[Offset: 0x110, Size: 0x1]
	bool SetEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]

--------------------------------
Class: UAESkillAction_SetRecoveryPrompt.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	HealthPredictShowData ShowData;//[Offset: 0x110, Size: 0x18]
	HealthPredictShowData CacShowData;//[Offset: 0x128, Size: 0x18]
	FString RemovePrePromptKey;//[Offset: 0x140, Size: 0xc]
	bool RemoveByAddBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]

--------------------------------
Class: UAESkillAction_ShowSkillPrompt.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float LastTime;//[Offset: 0x110, Size: 0x4]
	FString TimeAdjustAttr;//[Offset: 0x114, Size: 0xc]
	FString PromptText;//[Offset: 0x120, Size: 0xc]

--------------------------------
Class: UAESkillAction_ShowWeapon.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	bool bShowWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bUndoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool bPhaseFinishClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	FName WeaponName;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: UAESkillAction_SpawnActor.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	SkillAction_SpawnActorCreateData SpawnActorData;//[Offset: 0x110, Size: 0x50]
	byte PreviousPoseType;//[Offset: 0x160, Size: 0x1]

--------------------------------
Class: SkillAction_SpawnActorCreateData
	class Actor* ActorTemplate;//[Offset: 0x0, Size: 0x4]
	UTSkillLocationPicker* LocationPicker;//[Offset: 0x4, Size: 0x4]
	bool bLocalSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bClientSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bUseOffsetWithOutLocationPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bEnableAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	FName AttachSocket;//[Offset: 0x10, Size: 0x8]
	Vector OffsetLocationStand;//[Offset: 0x18, Size: 0xc]
	Vector OffsetLocationCrouch;//[Offset: 0x24, Size: 0xc]
	Vector OffsetLocationProne;//[Offset: 0x30, Size: 0xc]
	Rotator OffsetRotation;//[Offset: 0x3c, Size: 0xc]
	bool bAllowChangePoseWillUpdating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: UTSkillLocationPicker.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_SpawnLocalActor.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	class Actor* ActorTemplate;//[Offset: 0x110, Size: 0x4]
	Vector Offset;//[Offset: 0x114, Size: 0xc]
	Actor* SpawnedActor;//[Offset: 0x120, Size: 0x4]

--------------------------------
Class: UAESkillAction_SpawnMonster.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	SpawnMonsterConfig[] SpawnMonsterList;//[Offset: 0x110, Size: 0xc]

--------------------------------
Class: SpawnMonsterConfig
	int MonsterID;//[Offset: 0x0, Size: 0x4]
	Vector Pos;//[Offset: 0x4, Size: 0xc]
	bool bIsRelativePos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: UAESkillAction_SpawnProjectile.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	SkillAction_SpawnProjectileCreateData SpawnProjectileData;//[Offset: 0x110, Size: 0x1c]

--------------------------------
Class: SkillAction_SpawnProjectileCreateData
	class UAEProjectile* ProjectileTemplate;//[Offset: 0x0, Size: 0x4]
	Vector OffsetLocation;//[Offset: 0x4, Size: 0xc]
	Rotator OffsetRotation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: UAESkillAction_StopSkill.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillAction_SwitchWeapon.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	byte WeaponSlot;//[Offset: 0x110, Size: 0x1]
	bool SwitchBackWhenFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]

--------------------------------
Class: UAESkillAction_SwitchWeaponToGrenade.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	FString WeaponSlotName;//[Offset: 0x110, Size: 0xc]
	ItemDefineID ItemDefineID;//[Offset: 0x120, Size: 0x18]

--------------------------------
Class: DamageType_TakeDamageType.STExtraDamageType.DamageType.Object

--------------------------------
Class: UAESkillAction_TakeDamage.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float DamageAmount;//[Offset: 0x110, Size: 0x4]
	float DamageAmountHeadshot;//[Offset: 0x114, Size: 0x4]
	float DamageToVehicle;//[Offset: 0x118, Size: 0x4]
	int SpecificItemID;//[Offset: 0x11c, Size: 0x4]
	int ItemType;//[Offset: 0x120, Size: 0x4]
	bool bUseWeaponDamageType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	byte SubDamageType;//[Offset: 0x125, Size: 0x1]
	UAESkillPicker* DamagePicker;//[Offset: 0x128, Size: 0x4]
	bool OnlyApplyOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	class DamageType* DamageTypeClass;//[Offset: 0x13c, Size: 0x4]

--------------------------------
Class: UAESkillAction_TriggerSkill.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	class UTSkill* SkillClass;//[Offset: 0x110, Size: 0x28]
	bool TriggerOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]

--------------------------------
Class: UAESkillAction_UIMessage.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	FString DoUIMsg;//[Offset: 0x110, Size: 0xc]
	FString UndoUIMsg;//[Offset: 0x11c, Size: 0xc]
	FString UIModule;//[Offset: 0x128, Size: 0xc]
	void UndoAction_Internal();// 0x140c600
	bool RealDoAction_Internal();// 0x147816c
	STExtraPlayerController* GetOwernPawnController();// 0x1513ddc

--------------------------------
Class: UAESkillCondition_AllowPawnState.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	enum[] ArrAllowPawnState;//[Offset: 0xe8, Size: 0xc]

--------------------------------
Class: UAESkillCondition_And.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	UAESkillCondition*[] Conditions;//[Offset: 0xe8, Size: 0xc]

--------------------------------
Class: UAESkillCondition_CheckActivityActor.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillCondition_FallingMode.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillCondition_GrenadeMode.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	byte GrenadeMode;//[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: UAESkillCondition_HandleItemLimit.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	byte OperatorType;//[Offset: 0xe8, Size: 0x1]
	int NeedItemNum;//[Offset: 0xec, Size: 0x4]
	int ItemID;//[Offset: 0xf0, Size: 0x4]
	int Type;//[Offset: 0xf4, Size: 0x4]
	bool bCheckBothSide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: UAESkillCondition_KeyEvent.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	byte KeyEvent;//[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: UAESkillCondition_LocationPickSuc.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	UTSkillLocationPicker* LocationPicker;//[Offset: 0xe8, Size: 0x4]
	bool ShowPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	int PromptID;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: UAESkillCondition_MoveDist.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	byte OperatorType;//[Offset: 0xe8, Size: 0x1]
	float DistValue;//[Offset: 0xec, Size: 0x4]
	bool bIgnoreWithNotProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: UAESkillCondition_MoveSpeed.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	byte OperatorType;//[Offset: 0xe8, Size: 0x1]
	float SpeedValue;//[Offset: 0xec, Size: 0x4]
	enum CheckType;//[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: UAESkillCondition_Not.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	UAESkillCondition* Condition;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: UAESkillCondition_Or.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	UAESkillCondition*[] Conditions;//[Offset: 0xe8, Size: 0xc]

--------------------------------
Class: UAESkillCondition_PlayerHasTag.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	FName NeededTag;//[Offset: 0xe8, Size: 0x8]

--------------------------------
Class: UAESkillCondition_PlayerState.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	byte OperatorType;//[Offset: 0xe8, Size: 0x1]
	enum[] ArrPlayerState;//[Offset: 0xec, Size: 0xc]

--------------------------------
Class: UAESkillCondition_PropertyLimit.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	FString PropertyName;//[Offset: 0xe8, Size: 0xc]
	byte OperatorType;//[Offset: 0xf4, Size: 0x1]
	byte ValueType;//[Offset: 0xf5, Size: 0x1]
	float PropertyValue;//[Offset: 0xf8, Size: 0x4]
	bool ShowPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	int PromptID;//[Offset: 0x100, Size: 0x4]

--------------------------------
Class: UAESkillCondition_VelocityChange.UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	enum CheckType;//[Offset: 0xe8, Size: 0x1]
	float SpeedChangeValue;//[Offset: 0xec, Size: 0x4]

--------------------------------
Class: UAESkillConditionAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UAESkillCondition* Condition;//[Offset: 0x110, Size: 0x4]
	UAESkillAction* Action;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: UAESkillEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte UAESkillEventType;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: UTSkillInterface.Interface.Object
	void TriggerEvent(int SkillID, byte EventType);// 0x3797834
	void HandleSkillStart(int SkillID);// 0x3797750
	void HandleSkillEnd(int SkillID, enum Reason);// 0x3797600

--------------------------------
Class: UAESkillInterface.UTSkillInterface.Interface.Object
	bool TriggerEntryEvent(enum EntryEvent);// 0x1516b6c
	void TriggerCustomEvent(byte EventType);// 0x1516aec
	void InitFromSkill(UAEBaseSkill* SkillOwner);// 0x1516a6c

--------------------------------
Class: UAESkillPhase.UTSkillPhase.ActorComponent.Object

--------------------------------
Class: UAESkillPicker_Capsule.UAESkillPicker.UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPicker_CapsuleCreateData CapsuleData;//[Offset: 0x128, Size: 0x3c]

--------------------------------
Class: UTSkillPicker_CapsuleCreateData
	float Radius;//[Offset: 0x0, Size: 0x4]
	float HalfHeight;//[Offset: 0x4, Size: 0x4]
	float MinCosValue;//[Offset: 0x8, Size: 0x4]
	Rotator ActionRotationOffset;//[Offset: 0xc, Size: 0xc]
	Vector Offset;//[Offset: 0x18, Size: 0xc]
	float HorizonOffset;//[Offset: 0x24, Size: 0x4]
	float VerticalOffset;//[Offset: 0x28, Size: 0x4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bIsBoneCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	bool bCanApplyTrainModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 0x1]

--------------------------------
Class: UAESkillPicker_Fan.UAESkillPicker.UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPicker_FanCreateData FanData;//[Offset: 0x128, Size: 0x2c]

--------------------------------
Class: UTSkillPicker_FanCreateData
	float Radius;//[Offset: 0x0, Size: 0x4]
	float Angle;//[Offset: 0x4, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x8, Size: 0x4]
	Vector Offset;//[Offset: 0xc, Size: 0xc]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: UAESkillPicker_FanForClient.UAESkillPicker_Fan.UAESkillPicker.UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillPicker_FromBlackboard.UAESkillPicker.UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	FName[] ObjectNames;//[Offset: 0x128, Size: 0xc]
	bool bNeedCheckRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	float Radius;//[Offset: 0x138, Size: 0x4]
	float Angle;//[Offset: 0x13c, Size: 0x4]

--------------------------------
Class: UAESkillPicker_SkillOwner.UAESkillPicker.UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: AESkillPool.Object
	GameInstance* GameInstanceRef;//[Offset: 0x1c, Size: 0x4]
	UAESkillPoolManager* SkillManager;//[Offset: 0x9c, Size: 0x4]
	void OnAsyncLoadingFinished(SkillPoolAysncLoadParams LoadParams);// 0x15190c8

--------------------------------
Class: UAESkillPoolManager.Object
	AESkillPool* Pool;//[Offset: 0x1c, Size: 0x4]
	bool IsCurAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	AESkillPool*[] DirtyPools;//[Offset: 0x24, Size: 0xc]
	GameInstance* GameInstanceRef;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SkillPoolAysncLoadParams

--------------------------------
Class: UAESkillManagerUtils.BlueprintFunctionLibrary.Object
	static <FName,byte> GetWeaponSlotNameToGrenadeType();// 0x1519950
	static class STExtraWeapon GetWeaponClassFromPath(FString PathName);// 0x15197f8
	static bool GetSkillHideCancleFlag(int SkillID);// 0x1519780
	static <int,byte> GetItemIDGrenadeTypeMap();// 0x1519750
	static <int,SkillIconConfig> GetItemIDBrushMapConfig();// 0x1519720
	static <byte,int> GetGrenadeTypeToID();// 0x15196f0
	static <byte,SkillIconConfig> GetGrenadeTypeIconMapConfig();// 0x15196c0
	static <byte,FString> GetGrenadeToSlotIndexDict();// 0x1519690
	static <FName,FString> GetGrenadeLogicSocketToWeaponPathMap();// 0x1519660
	static <FName,class STExtraWeapon> GetGrenadeLogicSocketToWeaponClassMap();// 0x1519630
	static <int,FName> GetGrenadeIDToNameDict();// 0x1519600
	static int[] GetGrenadeIDsOrder();// 0x1519598
	static bool EnableLoadWeaponClassMapOptimize();// 0x1519570

--------------------------------
Class: SkillIconConfig
	FString IconPath;//[Offset: 0x0, Size: 0xc]
	int IconWidth;//[Offset: 0xc, Size: 0x4]
	int IconHeight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: UAEStateGM.UAEState.Object

--------------------------------
Class: UAEStateGM_Active.UAEStateGM.UAEState.Object

--------------------------------
Class: UAEStateGM_Fighting.UAEStateGM.UAEState.Object

--------------------------------
Class: UAEStateGM_Finished.UAEStateGM.UAEState.Object
	bool IsSendTeamBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: UAEStateGM_Ready.UAEStateGM.UAEState.Object
	float StopJoinTime;//[Offset: 0x1c, Size: 0x4]
	float ForceStartCountDownTime;//[Offset: 0x20, Size: 0x4]
	float StateTime;//[Offset: 0x50, Size: 0x4]
	void StopJoin();// 0x151a788

--------------------------------
Class: UAETriggerParamLibrary.UAETriggerParamFuncLib.UAETriggerFuncLib.Object
	static void RestartPlayer(int PlayerKey);// 0x151bb48
	static bool IsNotEqualString(FString Param1, FString Param2);// 0x151b8d8
	static bool IsNotEqualInt(int Param1, int Param2);// 0x151b81c
	static bool IsNotEqualBool(bool Param1, bool Param2);// 0x151b74c
	static bool IsLessInt(int Param1, int Param2);// 0x151b690
	static bool IsLessEqualInt(int Param1, int Param2);// 0x151b5d4
	static bool IsGreaterInt(int Param1, int Param2);// 0x151b518
	static bool IsGreaterEqualInt(int Param1, int Param2);// 0x151b45c
	static bool IsEqualString(FString Param1, FString Param2);// 0x151b1ec
	static bool IsEqualInt(int Param1, int Param2);// 0x151b130
	static bool IsEqualBool(bool Param1, bool Param2);// 0x151b060
	static bool GetTriggerClassParam(FString ClassTag, out TriggerClassItem TargetClassItem);// 0x151ae38
	static int GetPVEWeatherStage();// 0x151ae10
	static int GetInt32(int Param1, int Param2);// 0x151ad54
	static int GetInt32(int Param1);// 0x151ac20
	static float GetFloat(float Param1, float Param2);// 0x151ac98
	static float GetFloat(float Param1);// 0x151ac20
	static FString GetClassPathByTag(FString ClassTag);// 0x151aa48
	static Actor* GetActorTest();// 0x151aa20

--------------------------------
Class: UAETriggerEventFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: UAETriggerEventLibrary.UAETriggerEventFuncLib.UAETriggerFuncLib.Object
	void EventFunc_UseItem(int ID, out const Vector InVec, FString UserPlayerKey);// 0x1c01fa0
	void EventFunc_UnitUseSkill(int BotCat, int BotType, int SkillID);// 0x151c6d0
	void EventFunc_TriggerSelfEnable();// 0x143c964
	void EventFunc_TimerEvent(FString EventTag);// 0x151c5a4
	void EventFunc_TestEvent2(FString P1, float P2);// 0x1c01fa0
	void EventFunc_TerminateShrinkCircle(FString TerminatorTag);// 0x1c01fa0
	void EventFunc_TeamTerminated(int TeamID);// 0x151c53c
	void EventFunc_TeamBattleResult(BattleRoyaleGameModeTeam* GameMode, int TeamID);// 0x151c36c
	void EventFunc_TakePlane(uint32 PlayerKey);// 0x1396184
	void EventFunc_SurviveModeEnd();// 0x143c964
	void EventFunc_StartMonsterWave(int WaveID);// 0x151c53c
	void EventFunc_SpawnMonster(int MonsterID, int MonsterNum, int MonsterRebornTimes, int MonsterWaveId, out const Vector SpawnLoc, int SpawnRadius);// 0x151cba8
	void EventFunc_SpawnItemSecretRoom(Actor* Actor, FString Tag);// 0x151ca3c
	void EventFunc_SpawnAirplane(uint32[] PlayerKeys, Vector RespawnLocation);// 0x151c8d8
	void EventFunc_SpawnActorAtLocation(FString ClassTag, Vector TargetLocation, FString ExtraInfoTag);// 0x1c01fa0
	void EventFunc_SpawnActor(Actor* SpawnedActor);// 0x1c01fa0
	void EventFunc_ShrinkStartTimer(float TimeToWait, float BaseTime);// 0x1c01fa0
	void EventFunc_ShrinkCircleTimer(float TimeToWait, float BaseTime);// 0x1c01fa0
	void EventFunc_ShrinkCircle(float ShrinkTime, float BaseTime);// 0x1c01fa0
	void EventFunc_ReviveTeammate(Actor* TeammatePC, Vector RespawnLocation, int RespawnStartID, bool bJump);// 0x151c7b8
	void EventFunc_RemoveDynamicRank(uint32 PlayerKey);// 0x151c53c
	void EventFunc_PVEWeatherChange(int WeatherPhase);// 0x151c53c
	void EventFunc_PVESwitchLevel(int LevelId);// 0x151c53c
	void EventFunc_PVELevelEnd(int ChapterID, int LevelId);// 0x151c36c
	void EventFunc_PVEGameStart();// 0x143c964
	void EventFunc_PVEForceResult();// 0x143c964
	void EventFunc_PVECircleMoveEnd(int NodeID);// 0x151c53c
	void EventFunc_PlayerEscape(uint32 PlayerKey);// 0x151c53c
	void EventFunc_PawnGenerate(int SpawnClassID, int SpawnGroupID, out const Vector SpawnLoc, int SpawnRange, FString MakerName, int SpawnType, Actor* Owner);// 0x1c01fa0
	void EventFunc_MonsterWaveEnd(int WaveID, int CurChapterID, int CurLevelID);// 0x151c6d0
	void EventFunc_MonsterBeginPlay(Actor* Monster);// 0x151c53c
	void EventFunc_LeaveRevival(uint32 PlayerKey, uint32 SaviorKey);// 0x151c36c
	void EventFunc_InfectedAreaActived(int AreaID, int HardLevel);// 0x151c36c
	void EventFunc_GameModeStateChange(FString State);// 0x151c5a4
	void EventFunc_FinishMatch(BattleRoyaleGameModeTeam* GameMode);// 0x151c53c
	void EventFunc_ExitTriggerWithPoints(int AreaID, int AreaPlayerNum, Actor* thisActor, Actor* OtherActor);// 0x151c414
	void EventFunc_ExitAreaTrigger(int AreaID, int AreaPlayerNum, Actor* thisActor, Actor* OtherActor);// 0x151c414
	void EventFunc_EnterTriggerWithPoints(int AreaID, int AreaPlayerNum, Actor* thisActor, Actor* OtherActor);// 0x151c414
	void EventFunc_EnterRevival(uint32 PlayerKey, uint32 KillerKey);// 0x151c36c
	void EventFunc_EnterAreaTrigger(int AreaID, int AreaPlayerNum, Actor* thisActor, Actor* OtherActor);// 0x151c414
	void EventFunc_BotDied(int MonsterID, int MonsterType);// 0x151c36c
	void EventFunc_BotBorn(int MonsterID, int MonsterType);// 0x151c36c
	void EventFunc_AddDynamicRank(uint32 PlayerKey, bool bIsWinner);// 0x151c36c

--------------------------------
Class: UAETriggerObject_CollectItem.UAETriggerObject_Task.UAETriggerObject.Object
	void ReportTaskCollectionProcess();// 0x1520330
	int GetTaskCollectionProcess();// 0x1520308

--------------------------------
Class: UAETriggerObject_KillPlayer.UAETriggerObject_Task.UAETriggerObject.Object

--------------------------------
Class: UIBPFunctionLibrary.BlueprintFunctionLibrary.Object
	static FString TimeSecondsToStringSec(float InSeconds);// 0x1522b20
	static FString TimeSecondsToString(float InSeconds);// 0x1522a20
	static bool GetWorldToUIShowLocationRect_VehicleWar(Object* WorldContextObject, out const Vector WorldLocation, out const Vector4 Limit, out const Vector2D UIOffset, out Vector2D OutPosition, out float Angle);// 0x15227e0
	static GameStateBase* GetGameStateByObj(Object* Obj);// 0x1522764
	static bool GetBulletNumForVehicleWar(Object* WorldCtx, out int OutBulletNumInClip);// 0x1522698

--------------------------------
Class: UIDataProcessingFunctionLibrary.BlueprintFunctionLibrary.Object
	void UpdatePlayerPredictHealthUI(STExtraPlayerController* PC);// 0x1524c98
	void UpdatePlayerHealthUI(STExtraPlayerController* PC);// 0x1524c20
	void UpdatePlayerEnergyUI(STExtraPlayerController* PC);// 0x1524ba8
	void UpdatePlayerDyingHealth(STExtraPlayerController* PC);// 0x1524b30
	void UpdatePlayerBreathAmmount(STExtraPlayerController* PC);// 0x1396184
	static UIDataProcessingFunctionLibrary* UILibraryInstance();// 0x1524b08
	ComparableGrenadeItemType[] SortGrenadeItemArray(ComparableGrenadeItemType[] GrenadeArray, STExtraBaseCharacter* PlayerCharacter, byte CurListFirstType, bool SetFirstByCurFistTypeForce);// 0x152474c
	CompatableComsumableItemType[] SortConsumableItemArray(CompatableComsumableItemType[] ConsumableArray, bool IgnoreFirst, byte FirstItemType);// 0x15243d0
	static void SetUnitPosAndOpacityAndSize(PanelWidget* GPanel, Border* BBorder, Vector2D Scale, float Opacity, Vector2D OffsetVector);// 0x1524250
	static void SetUnitAnchor(Widget* GPanel, Anchors Anchor);// 0x1524190
	static CompatableComsumableItemType SetItemPriorityBySortModeNew(CompatableComsumableItemType Data, bool IntelligentDrugs, byte SortMode);// 0x1523ff8
	static CompatableComsumableItemType SetItemPriorityBySortMode(CompatableComsumableItemType Data, bool IntelligentDrugs, byte SortMode);// 0x1523e60
	void SetInGameUIUserWidget(UAEUserWidget* UserWidget);// 0x1523de8
	static bool IsPlayerCanDoSprintOperation(STExtraPlayerCharacter* Player);// 0x1523d70
	static bool IsNeedAntidoteFirst(byte SortMode);// 0x1523cf8
	bool IsHitPointValidInCircularHitTestPolicy(out const Geometry MyGeometry, out const PointerEvent MouseEvent, float HitAreaRadius);// 0x1523a1c
	static bool IsConsumableItem(out const ItemDefineID DefineID);// 0x152398c
	void HandleCharacterAttrChange(FString AttrName, STExtraBaseCharacter* Character);// 0x152388c
	byte GrenadeSpecificSlotNameToENumAdapter(FName GrenadeSpecificSlotName);// 0x1523800
	static float GetServerWorldSecond(const Object* WorldContextObject);// 0x1523788
	static float GetCurrToTargetValue(float CurrRadio, float TargetRadio, float deltaRadio, out bool change);// 0x1523634
	int GetCurPlatformType();// 0x152360c
	static byte GetConsumItemTypeBySpecificID(out ItemDefineID DefineID);// 0x152357c
	static CompatableComsumableItemType[] GetCompatableComsumableArray(BattleItemData[] BattleItemDatas, bool IntelligentDrugs, byte SortMode);// 0x152322c
	float GetCharacterEnergyValue(Pawn* CharaterPawn);// 0x15231ac

--------------------------------
Class: ComparableGrenadeItemType
	BattleItemData BattleItemData;//[Offset: 0x0, Size: 0x80]
	byte GrenadeItemType;//[Offset: 0x80, Size: 0x1]
	int ItemPriority;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: CompatableComsumableItemType
	BattleItemData BattleItemData;//[Offset: 0x0, Size: 0x80]
	byte ConsumableItemType;//[Offset: 0x80, Size: 0x1]
	int ItemPriority;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: UIDuplicatedItemPool.Object
	FString[] TagArray;//[Offset: 0x1c, Size: 0xc]
	FString ItemBPClassPath;//[Offset: 0x28, Size: 0xc]
	class Object* ItemClass;//[Offset: 0x34, Size: 0x4]
	UserWidget*[] UsedItemList;//[Offset: 0x38, Size: 0xc]
	UserWidget*[] IdleItemList;//[Offset: 0x44, Size: 0xc]
	void RemoveTagFromItemPool(FString TagName);// 0x1525f50
	void RemoveAllTagFromItemPool();// 0x1525f3c
	void RecycleUnusedItem();// 0x1525f28
	bool ItemPoolHasTag(FString TagName);// 0x1525e64
	bool ItemPoolHasOneTagAtLeast(out const FString[] TagNameList);// 0x1525d28
	bool ItemPoolHasAllTag(out const FString[] TagNameList);// 0x1525bec
	void InitItemPool(FString ClassPath, int DefaultItemCounts);// 0x1525aec
	UserWidget* GetOneItem();// 0x1525ac4
	void GetAllUsedItem(out UserWidget*[] ItemList);// 0x15259f8
	void GetAllTagFromItemPool(out FString[] tagList);// 0x15258c4
	void FreeOneItem(UserWidget* IdleItem);// 0x152584c
	void AddTagToItemPool(FString TagName);// 0x1525790
	void AddMultiTagToItemPool(out const FString[] TagNameList);// 0x152565c

--------------------------------
Class: SJKAssetUtils.BlueprintFunctionLibrary.Object
	static ParticleSystem* GetAssetByStr(FString Name);// 0x15265ec

--------------------------------
Class: UJKAssetsUtil.Object
	ParticleSystem* GetAssetByStr(FString Name);// 0x1526a10

--------------------------------
Class: UNGCondition_CanGetInVehicle.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_CanJumpOutPlane.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_CanOpenParachute.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_DeadBoxCollapsed.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_HaveDeadBoxInRange.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_HaveSpecifiedStuff.STNewbieGuideConditionBase.Object
	int[] CheckTypeArray;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: UNGCondition_HaveStuffCanPickUp.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_HaveStuffInBackpack.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_IsBackpackPanelOpen.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_IsBeenLandingXsec.STNewbieGuideConditionBase.Object
	float ActiveTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: NGCondition_IsChangeWearingOpened.STNewbieGuideConditionBase.Object
	bool bNeedOpenChangingWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	int UnlockWearCount;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: NGCondition_IsFinishNewbieGuide.STNewbieGuideConditionBase.Object
	int NewbieGuideID;//[Offset: 0x24, Size: 0x4]
	int NeedCount;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: UNGCondition_IsHealthInRange.STNewbieGuideConditionBase.Object
	float HealthUpperLimit;//[Offset: 0x24, Size: 0x4]
	float HealthLowerLimit;//[Offset: 0x28, Size: 0x4]
	STExtraBaseCharacter* PlayerCharacter;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: UNGCondition_IsHurtByWeapon.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_IsInKillZoneLastXs.STNewbieGuideConditionBase.Object
	float ActiveTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: NGCondition_IsInReadyState.STNewbieGuideConditionBase.Object

--------------------------------
Class: NGCondition_IsInReadyStateOrTrainingMode.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_IsInSafeZone.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_IsInSomePoseForXSec.STNewbieGuideConditionBase.Object
	float ActiveTime;//[Offset: 0x24, Size: 0x4]
	byte CheckState;//[Offset: 0x28, Size: 0x1]
	void OnPlayerStateChange(byte LastPose, byte NewPose);// 0x152896c

--------------------------------
Class: UNGCondition_IsNoEnemyInRange.STNewbieGuideConditionBase.Object

--------------------------------
Class: NGCondition_IsNotDeathMatchMode.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_IsOnTagVehicle.STNewbieGuideConditionBase.Object
	bool bIsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	FName[] TagVehicleClass;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: UNGCondition_IsPropSlotHaveGun.STNewbieGuideConditionBase.Object
	byte CheckSlotType;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: UNGCondition_KillSomeOne.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_PickUpCollapsed.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_PickupListCollapsed.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_SafeZoneFirstAppear.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_SitOnSpecifiedSeat.STNewbieGuideConditionBase.Object
	enum CheckSeatType;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: UNGCondition_TeammateIDCardExist.STNewbieGuideConditionBase.Object

--------------------------------
Class: UNGCondition_TeammateIDCardPicked.STNewbieGuideConditionBase.Object

--------------------------------
Class: URevivalPointWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	TextBlock* DisText;//[Offset: 0x2ec, Size: 0x4]
	CanvasPanel* ArrowImage;//[Offset: 0x2f0, Size: 0x4]
	Border* Border_SideDistanceNative;//[Offset: 0x2f4, Size: 0x4]
	CanvasPanel* CanvasPanel;//[Offset: 0x2f8, Size: 0x4]
	int FilterDistance;//[Offset: 0x2fc, Size: 0x4]
	int MinShowPanelDistance;//[Offset: 0x300, Size: 0x4]
	Vector4 Limit;//[Offset: 0x310, Size: 0x10]
	Vector2D UIOffset;//[Offset: 0x320, Size: 0x8]
	MarkSyncData[] AllRevivalPointSyncData;//[Offset: 0x328, Size: 0xc]
	RevivalPointIconChangeFactor[] ChangeFactors;//[Offset: 0x334, Size: 0xc]
	void ShowHideAllRevivalUI(bool isFreeCameraInOB);// 0x1343e64

--------------------------------
Class: RevivalPointIconChangeFactor
	int MinDis;//[Offset: 0x0, Size: 0x4]
	int MaxDis;//[Offset: 0x4, Size: 0x4]
	float MinScaleFactorFactor;//[Offset: 0x8, Size: 0x4]
	float MaxScaleFactorFactor;//[Offset: 0xc, Size: 0x4]
	float MinTransparencyFactor;//[Offset: 0x10, Size: 0x4]
	float MaxTransparencyFactor;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UserInputCache.Object
	static void ResetReportComplaintNames();// 0x152a90c
	static bool CheckIsNameReport(FString ReportName);// 0x152a7b4
	static void CacheReportComplaintName(FString ReportName, bool IsReport);// 0x152a614

--------------------------------
Class: UTSkillAppearance_AddParticle.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	ParticleSystem* TemplateParticle_Effect;//[Offset: 0x110, Size: 0x4]
	FName HangMeshTagName;//[Offset: 0x118, Size: 0x8]
	FName ParticleCompTagName;//[Offset: 0x120, Size: 0x8]
	Vector LocationPosition;//[Offset: 0x128, Size: 0xc]
	Rotator LocationRotation;//[Offset: 0x134, Size: 0xc]
	Vector LocationScale;//[Offset: 0x140, Size: 0xc]
	Vector FPPScale;//[Offset: 0x14c, Size: 0xc]
	Vector FPPLocationPosition;//[Offset: 0x158, Size: 0xc]
	bool bPhaseFinishRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]
	bool bUndoRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 0x1]
	<FString,ParticleSystem*> DecentParticles;//[Offset: 0x168, Size: 0x3c]
	void UndoAction_Internal();// 0x140c600
	void Reset_Internal();// 0x13468b8
	void OnParticleSystemFinished(ParticleSystemComponent* PSC);// 0x152ac54

--------------------------------
Class: UTSkillAppearance_AnimHurtingState.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	enum Target;//[Offset: 0x110, Size: 0x1]

--------------------------------
Class: UTSkillAppearance_ParticleSystem.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillAppearance_ParticleSystem_Item Item;//[Offset: 0x110, Size: 0x68]
	<FString,ParticleSystem*> DecentParticles;//[Offset: 0x180, Size: 0x3c]
	void StopParticleSystem(UTSkillManagerComponent* SkillManagerComponent);// 0x152b52c
	void RealDoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent);// 0x152b4b4
	void RealDoActionWrapper(UTSkillManagerComponent* SkillManagerComponent);// 0x152b43c
	void OnHurtAppearanceParticleSystemFinished(ParticleSystemComponent* PSC);// 0x152b3bc
	void OnAppearanceParticleSystemFinished(ParticleSystemComponent* PSC);// 0x152ac54

--------------------------------
Class: UTSkillAppearance_ParticleSystem_Item
	UTSkillPicker* TargetPicker;//[Offset: 0x0, Size: 0x4]
	ParticleSystem* TemplateSelfTeam_Effect;//[Offset: 0x4, Size: 0x4]
	ParticleSystem* TemplateEnermyTeam_Effect;//[Offset: 0x8, Size: 0x4]
	ParticleSystem* TemplateSelfTeamFPP_Effect;//[Offset: 0xc, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Scale;//[Offset: 0x14, Size: 0x4]
	FName SocketName;//[Offset: 0x18, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x20, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x2c, Size: 0xc]
	Vector LocationOffsetTPP;//[Offset: 0x38, Size: 0xc]
	Rotator RotationOffsetTPP;//[Offset: 0x44, Size: 0xc]
	float ScaleTPP;//[Offset: 0x50, Size: 0x4]
	FName HurtRotationSocketName;//[Offset: 0x58, Size: 0x8]
	float AutoDispearTime;//[Offset: 0x60, Size: 0x4]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: UTSkillAppearance_RemoveWarning.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UTSkillAppearance_RomoveParticle.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	FName ParticleCompTagName;//[Offset: 0x110, Size: 0x8]
	bool bPhaseFinishRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bUndoRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	void UndoAction_Internal();// 0x140c600
	void Reset_Internal();// 0x13468b8
	bool RealDoAction_Internal();// 0x147816c

--------------------------------
Class: UTSkillAppearance_ScreenParticle.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	ParticleSystem*[] ParticleTemplates;//[Offset: 0x110, Size: 0xc]
	ParticleSystem*[] ParticleTemplate_Ints;//[Offset: 0x11c, Size: 0xc]
	Transform TransformOffset;//[Offset: 0x130, Size: 0x30]
	float RotationOffset;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: UTSkillAppearance_SimpleParticleSystem.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	ParticleSystem* Template_Effect;//[Offset: 0x110, Size: 0x4]
	Vector OffsetLoc;//[Offset: 0x114, Size: 0xc]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	FName AttachedCompTag;//[Offset: 0x128, Size: 0x8]
	FName AttachedSocketName;//[Offset: 0x130, Size: 0x8]
	void RealDoActionWrapper(UTSkillManagerComponent* SkillManagerComponent);// 0x152b43c

--------------------------------
Class: UTSkillAppearance_SkillWarning.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	MaterialInstance* WarningDecalMaterial;//[Offset: 0x110, Size: 0x4]
	Vector LocationOffset;//[Offset: 0x114, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x120, Size: 0xc]
	Vector Scale;//[Offset: 0x12c, Size: 0xc]
	float AutoDisappearTime;//[Offset: 0x138, Size: 0x4]
	bool bSkillEndRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	void UndoAction_Internal();// 0x140c600

--------------------------------
Class: UTSkillAppearance_SoundCue.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillAppearance_SoundCue_Item Item;//[Offset: 0x110, Size: 0xc]
	<byte,AkAudioEvent*> PhysSoundMapForLocal;//[Offset: 0x11c, Size: 0x3c]
	bool IsPlayingCollideSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	<byte,AkAudioEvent*> PhysSoundMap;//[Offset: 0x15c, Size: 0x3c]
	bool bUseWeaponAvatarPhysSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	byte WeaponPropSlot;//[Offset: 0x199, Size: 0x1]
	bool bUseWeaponAvatarItemSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 0x1]

--------------------------------
Class: UTSkillAppearance_SoundCue_Item
	enum ListenType;//[Offset: 0x0, Size: 0x1]
	AkAudioEvent* AkEvent;//[Offset: 0x4, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: UTSkillLocationPicker_GroundLoc.UTSkillLocationPicker.UTSkillBaseWidget.ActorComponent.Object
	float OffsetFromCenter;//[Offset: 0xe0, Size: 0x4]
	bool bUseOwnerAsCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]

--------------------------------
Class: UTSkillLocationPicker_ImpactPos.UTSkillLocationPicker.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UUNGCondition_HeavyWBoxAppear.STNewbieGuideConditionBase.Object

--------------------------------
Class: VACTask_AccelerationControl.VehicleAntiCheatTask.Object
	float StartCheckSpeed;//[Offset: 0x1c, Size: 0x4]
	float MaxAccelerationSpeed;//[Offset: 0x20, Size: 0x4]
	float CheckInterval;//[Offset: 0x24, Size: 0x4]
	STExtraVehicleBase* MyVehicleOwner;//[Offset: 0x4c, Size: 0x4]
	STExtraVehicleMovementComponent4W* MyVehicleOwnerMovement4W;//[Offset: 0x58, Size: 0x4]
	void OnDriverChanged(STExtraPlayerCharacter* OldChara, STExtraPlayerCharacter* NewChara);// 0x152ccc4
	void OnClientMove(float InClientTime, out const Vector InClientPos);// 0x152cbfc

--------------------------------
Class: VACTask_ClientAbsSpeed.VehicleAntiCheatTask.Object
	float MaxHorizonSpeed;//[Offset: 0x1c, Size: 0x4]
	float CheckInterval;//[Offset: 0x20, Size: 0x4]
	bool bUseConvertedTimeSpeedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool IsIncludeZDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	void OnDriverChanged(STExtraPlayerCharacter* OldChara, STExtraPlayerCharacter* NewChara);// 0x152d238
	void OnClientMove(float InClientTime, out const Vector InClientPos);// 0x152d170

--------------------------------
Class: VehAttachmentAnimInstanceBase.AnimInstance.Object
	STExtraVehicleBase* C_OwnerVehicle;//[Offset: 0x2ec, Size: 0x4]
	Vector RotationInputDir;//[Offset: 0x2f0, Size: 0xc]

--------------------------------
Class: VACTContinuous.VehicleAntiCheatTask.Object

--------------------------------
Class: VACTBytimes.VehicleAntiCheatTask.Object

--------------------------------
Class: VACTask_FlyingVehicle.VACTContinuous.VehicleAntiCheatTask.Object
	bool bTestBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: VACTask_FlyingVehicleVelocity.VACTContinuous.VehicleAntiCheatTask.Object

--------------------------------
Class: VACTask_FlyingVehicleVelocityChange.VACTContinuous.VehicleAntiCheatTask.Object

--------------------------------
Class: VACTask_FlyingVehicleZ.VACTContinuous.VehicleAntiCheatTask.Object

--------------------------------
Class: VACTask_FlyingVehicleTimeLimit.VACTContinuous.VehicleAntiCheatTask.Object

--------------------------------
Class: VACTask_DrivingUnderwater.VACTBytimes.VehicleAntiCheatTask.Object

--------------------------------
Class: VACTask_DrivingUnderwaterAllDir.VACTask_DrivingUnderwater.VACTBytimes.VehicleAntiCheatTask.Object

--------------------------------
Class: VACTask_SuperSpeed.VACTContinuous.VehicleAntiCheatTask.Object
	float MaxAllowedSyncSpeedDiff;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: VACTask_SuperSpeedAllDir.VACTask_SuperSpeed.VACTContinuous.VehicleAntiCheatTask.Object

--------------------------------
Class: VehicleAvatarHandle.AvatarHandleBase.ItemHandleBase.Object
	enum slotType;//[Offset: 0x8c, Size: 0x1]
	enum[] RelativeChildSlots;//[Offset: 0x90, Size: 0xc]
	enum RelativeParentSlot;//[Offset: 0x9c, Size: 0x1]
	VehicleMeshPackage MeshPackage;//[Offset: 0xa0, Size: 0xf0]
	VehicleMeshPackage FPPMeshPackage;//[Offset: 0x190, Size: 0xf0]
	VehicleMeshPackage ReplaceMeshPackage;//[Offset: 0x280, Size: 0xf0]
	VehicleMeshPackage[] MutilReplaceMeshPackage;//[Offset: 0x370, Size: 0xc]
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x1531874
	bool HandleMutilReplaceMeshPack(out const AvatarSlotDesc InSlotDesc, out VehicleMeshPackage OutMeshPack, Object* Outer);// 0x1531604

--------------------------------
Class: VehicleMeshPackage.AssetPackage
	StaticMesh* stMesh;//[Offset: 0x8, Size: 0x28]
	SkeletalMesh* skMesh;//[Offset: 0x30, Size: 0x28]
	MaterialInterface* Mat;//[Offset: 0x58, Size: 0x28]
	MaterialInterface* BrokenMat;//[Offset: 0x80, Size: 0x28]
	MaterialInterface* MatBase;//[Offset: 0xa8, Size: 0x28]
	MaterialAsset[] additionalMats;//[Offset: 0xd0, Size: 0xc]
	class AnimInstance* animBP;//[Offset: 0xdc, Size: 0x4]
	ParticleAsset[] ParticleData;//[Offset: 0xe0, Size: 0xc]

--------------------------------
Class: VehicleDataMgr.Actor.Object
	STExtraVehicleBase*[] VehiclesDataMap;//[Offset: 0x2c8, Size: 0xc]
	STExtraVehicleBase*[] uavDataMap;//[Offset: 0x2d4, Size: 0xc]
	UAEDataTable* VehicleSpawnTable;//[Offset: 0x31c, Size: 0x4]
	UAEDataTable* VehicleMaxHPTable;//[Offset: 0x320, Size: 0x4]
	UAEDataTable* CarMusicTable;//[Offset: 0x360, Size: 0x4]
	void UnRegisterVehicle(STExtraVehicleBase* Vehicle);// 0x1533f50
	void UnRegisterUAV(STExtraVehicleBase* uav);// 0x1533ed8
	void RemoveNoFreezeOn(SceneComponent* Actor);// 0x1533e60
	void RegisterVehicle(STExtraVehicleBase* Vehicle);// 0x1533de8
	void RegisterUAV(STExtraVehicleBase* uav);// 0x1533d70
	static VehicleDataMgr* GetInstance(World* World);// 0x1533cf8
	void AddNoFreezeOn(SceneComponent* Actor);// 0x1533c80

--------------------------------
Class: VehicleLagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	byte VerifyWeaponOwnerPos(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13b25e0
	byte VerifyWeaponOwnerAndMuzzleDis(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13b24c4
	byte VerifyShootPointByNetDelay(STExtraCharacter* Victim, out const Vector MuzzlePos, Pawn* AttackPawn);// 0x15349a8
	float SimulatedCharacterServerTime();// 0x13b15c8
	void OnDriverChanged(STExtraPlayerCharacter* OldChara, STExtraPlayerCharacter* NewChara);// 0x15348ec
	byte Do_VerifyShoot(STExtraShootWeapon* Weapon, STExtraCharacter* shooter, Actor* Victim, out const BulletHitInfoUploadData ShootData);// 0x1534748
	byte _VerifyClientHitAndBullet(STExtraCharacter* shooter, out const Vector InBulletPos, out const Vector InHittedActorPos);// 0x153461c

--------------------------------
Class: VehicleStatComponent.ActorComponent.Object
	int RollCount;//[Offset: 0xd4, Size: 0x4]
	float RollDegrees;//[Offset: 0xd8, Size: 0x4]
	float InAirTime;//[Offset: 0xdc, Size: 0x4]
	float AirControlFTime;//[Offset: 0xe0, Size: 0x4]
	float AirControlBTime;//[Offset: 0xe4, Size: 0x4]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	float ReachGroundTime;//[Offset: 0xec, Size: 0x4]
	void StopRecord();// 0x1538124
	void ClearStats();// 0x1538110
	void BeginRecord();// 0x15380fc

--------------------------------
Class: VehicleStatesDataTable.DataAsset.Object
	VehicleStatesDataRecord[] arr;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: VehicleStatesDataRecord
	int ID;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	bool always;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float Param1;//[Offset: 0xc, Size: 0x4]
	float Param2;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: VehicleWeaponACComp.WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object

--------------------------------
Class: VehWeaponAnimInstanceBase.AnimInstance.Object
	VehicleShootWeapon* C_OwnerVehShootWeapon;//[Offset: 0x2ec, Size: 0x4]
	STExtraVehicleBase* C_OwnerVehicle;//[Offset: 0x2f0, Size: 0x4]
	Rotator C_CameraRotator;//[Offset: 0x2f4, Size: 0xc]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	AnimSequence* C_VehicleWeaponIdle;//[Offset: 0x304, Size: 0x4]
	AnimSequence* C_VehicleWeaponReload;//[Offset: 0x308, Size: 0x4]
	AnimSequence* C_VehicleWeaponUnuseIdle;//[Offset: 0x30c, Size: 0x4]
	float C_VehicleWeaponReloadRate;//[Offset: 0x310, Size: 0x4]
	AnimMontage* C_VehicleWeaponFireMontage;//[Offset: 0x314, Size: 0x4]
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x153f90c

--------------------------------
Class: VisualFieldComponent.GameModeBaseComponent.ActorComponent.Object
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0xc4, Size: 0x24]
	float VisualFieldServerRepInterval;//[Offset: 0xe8, Size: 0x4]
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0xf8, Size: 0x8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x100, Size: 0x3c]
	void OnClientReportPeerVisualFieldActorList(int CampID, Actor*[] PeerVisualFieldActorList);// 0x153fdd4
	void ListenPeerVisualFieldReport(PlayerController* InTargetPlayer);// 0x153fd5c

--------------------------------
Class: VNInfectableArea.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x2c8, Size: 0x4]
	class Actor[] InfactableActors;//[Offset: 0x2cc, Size: 0xc]
	class ActorComponent* InfactableComponent;//[Offset: 0x2d8, Size: 0x4]
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1540d14

--------------------------------
Class: VNInstigatorInterface.Interface.Object
	Controller* GetVNInstigator();// 0x13c17d8

--------------------------------
Class: VNPainCausingVolComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x524, Size: 0x1]
	float DamagePerSec;//[Offset: 0x528, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x52c, Size: 0x4]
	float PainInterval;//[Offset: 0x530, Size: 0x4]
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 0x1]
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x534, Size: 0x1]
	bool bShouldUseTraceMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x534, Size: 0x1]
	bool bToOwnerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 0x1]
	float Duration;//[Offset: 0x538, Size: 0x4]
	bool bSingleInstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 0x1]
	Controller* DamageInstigator;//[Offset: 0x540, Size: 0x4]
	int SpecificItemID;//[Offset: 0x544, Size: 0x4]
	int ItemType;//[Offset: 0x548, Size: 0x4]
	bool bInstantDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	bool bSelfDamaging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 0x1]
	byte SubDamageType;//[Offset: 0x54e, Size: 0x1]
	void OnDamagePulse(float Damage);// 0x1c01fa0
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x154150c
	Controller* GetVNInstigator();// 0x15414dc

--------------------------------
Class: VNSplineActor.Actor.Object
	SplineComponent* Spline;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: VNTargetedProjectileActor.Actor.Object
	Vector TargetActorLocation;//[Offset: 0x2c8, Size: 0xc]
	Vector TargetActorOffset;//[Offset: 0x2d4, Size: 0xc]
	Vector InitLocation;//[Offset: 0x2e0, Size: 0xc]
	float Speed;//[Offset: 0x2ec, Size: 0x4]
	bool bShouldRotateAlongWithSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bShouldAutoTraceToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	float TraceGroundDepth;//[Offset: 0x2f4, Size: 0x4]
	bool bIsRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bIsHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	float RayFlyDistance;//[Offset: 0x2fc, Size: 0x4]
	bool bReadyForLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool bDrawDebugDots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	SplineComponent* SplineComponent;//[Offset: 0x308, Size: 0x4]
	VNSplineActor* SplineActor;//[Offset: 0x30c, Size: 0x4]
	BillboardComponent* SpriteComponent;//[Offset: 0x310, Size: 0x4]
	int DebugLineSegments;//[Offset: 0x314, Size: 0x4]
	CurveFloat* Curve;//[Offset: 0x318, Size: 0x4]

--------------------------------
Class: VNToxicGrenade.Actor.Object
	int HitDamage;//[Offset: 0x2c8, Size: 0x4]
	class Actor[] IgnoredTemplates;//[Offset: 0x2cc, Size: 0xc]
	bool bDestroyAfterOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	UTSkill* OwnerSkill;//[Offset: 0x2dc, Size: 0x4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x31c, Size: 0x4]
	byte[] ObjectTypes;//[Offset: 0x328, Size: 0xc]
	bool bIgnoreOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	void ServerStopAndDestroy();// 0x1541f3c
	void OnHitCallback(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x13814a8
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1541d40
	void OnActorOverlapped(Actor* OverlappedActor, Actor* Other);// 0x1398190
	void Kill();// 0x12e82e4

--------------------------------
Class: VoiceCheckObject.Object
	int MaxCount;//[Offset: 0x1c, Size: 0x4]
	int maxShowCount;//[Offset: 0x20, Size: 0x4]
	float maxShowAlpha;//[Offset: 0x24, Size: 0x4]
	float nowViewDis;//[Offset: 0x28, Size: 0x4]
	float MoveMaxShowDis;//[Offset: 0x2c, Size: 0x4]
	float WeaponMaxShowDis;//[Offset: 0x30, Size: 0x4]
	float VehicleMaxShowDis;//[Offset: 0x34, Size: 0x4]
	float glassMaxShowDis;//[Offset: 0x38, Size: 0x4]
	VoiceCheckObjectNode[] imageList;//[Offset: 0x3c, Size: 0xc]
	STExtraPlayerController* PlayerController;//[Offset: 0x48, Size: 0x4]
	float ShootRpcCoolDownCfg;//[Offset: 0x4c, Size: 0x4]
	float CurShootRpcCoolDown;//[Offset: 0x50, Size: 0x4]
	bool bCanRpcShootEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	float StepRpcCoolDownCfg;//[Offset: 0x58, Size: 0x4]
	float CurStepRpcCoolDown;//[Offset: 0x5c, Size: 0x4]
	bool bCanRpcStepEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	void VoiceTick(float DeltaTime);// 0x154290c
	void AddWeaponShotVoice(STExtraShootWeapon* Weapon, Vector posVector, float showTime, bool isslience);// 0x15427b4
	void AddVehicleVoice(STExtraVehicleBase* Vehicle, Vector posVector, float showTime);// 0x15426ac
	void AddGlassVoice(Vector posVector, float showTime);// 0x15425f0
	void AddCharacterMoveVoice(STExtraBaseCharacter* Character, Vector posVector, float showTime);// 0x15424e8

--------------------------------
Class: VoiceCheckObjectNode
	STExtraBaseCharacter* nowCharacter;//[Offset: 0x0, Size: 0x4]
	STExtraVehicleBase* nowVehicle;//[Offset: 0x4, Size: 0x4]
	Image* moveImage;//[Offset: 0x8, Size: 0x4]
	Image* weaponImage;//[Offset: 0xc, Size: 0x4]
	Image* silencerWeaponImage;//[Offset: 0x10, Size: 0x4]
	Image* VehicleImage;//[Offset: 0x14, Size: 0x4]
	Image* GlassImage;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WarGameMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	int MatchDurationTime;//[Offset: 0x1140, Size: 0x4]
	int WinScore;//[Offset: 0x1144, Size: 0x4]
	int Score_MakeOtherGotoNearDeath;//[Offset: 0x1148, Size: 0x4]
	int Score_RescueOthers;//[Offset: 0x114c, Size: 0x4]
	int Score_TeamAllDeath;//[Offset: 0x1150, Size: 0x4]
	int Score_Kill;//[Offset: 0x1154, Size: 0x4]
	Pawn* CurRespawnPlane;//[Offset: 0x1158, Size: 0x4]

--------------------------------
Class: WarGameMode_GrandTheft.WarGameMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	GrandTheftScoreItem[] ConfigScoreItems;//[Offset: 0x115c, Size: 0xc]
	CurveFloat* GunsDamageModifierCurve;//[Offset: 0x1168, Size: 0x4]
	CurveFloat* GrenadeDamageModifierCurve;//[Offset: 0x116c, Size: 0x4]
	CurveFloat* MeleeDamageModifierCurve;//[Offset: 0x1170, Size: 0x4]
	void UpdateCharacterAttrModifier(STExtraPlayerController* PC);// 0x1543148
	void HandlePlayerPickupItem(int ItemID, int count, STExtraPlayerController* PC);// 0x1543048
	STExtraPlayerController* GetLastDamageCauser(uint32 LastDamageCauserPlayerKey);// 0x1542fc8
	int GetItemScore(int ItemSpecificID);// 0x1542f48

--------------------------------
Class: GrandTheftScoreItem
	int ItemSpecificID;//[Offset: 0x0, Size: 0x4]
	int Score;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WarGameMode_SuperPower.WarGameMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: WarGameState.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	ScoreChangeValue ScoreChangeValue;//[Offset: 0x7d8, Size: 0x8]
	float PersistentOriginRadius;//[Offset: 0x7e0, Size: 0x4]
	float MatchLeftTimeRepPeriod;//[Offset: 0x7e4, Size: 0x4]
	int GameModeWinScore;//[Offset: 0x7e8, Size: 0x4]
	int MatchLeftTime;//[Offset: 0x7f8, Size: 0x4]
	float RespawnLeftTime;//[Offset: 0x7fc, Size: 0x4]
	bool ResetRespawnLeftTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 0x1]
	int TeamCount;//[Offset: 0x808, Size: 0x4]
	float LastRespawnTimeUpdateTimeSecond;//[Offset: 0x80c, Size: 0x4]
	void UpdateRespawnCountDownUI();// 0x1543918
	void SetLastRespawnTimeUpdateTimeSecond();// 0x1543904
	void OnRep_WinScore();// 0x15438f0
	void OnRep_TeamCount();// 0x15438dc
	void OnRep_RespawnLeftTime();// 0x15438c8
	void OnRep_MatchLeftTime();// 0x15438b4
	void OnRep_LastRespawnTimeUpdateTimeSecond();// 0x15438a0
	int GetWinScore();// 0x1543884
	int GetTeamCount();// 0x1543868
	float GetRespawnLeftTime();// 0x154384c
	float GetMatchLeftTime();// 0x1543824

--------------------------------
Class: ScoreChangeValue
	int Score_RescueOthers;//[Offset: 0x0, Size: 0x4]
	int Score_Kill;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WarGameState_GrandTheft.WarGameState.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	WarPlayerState* ScoreLeaderPlayerState;//[Offset: 0x814, Size: 0x4]
	int UpdateTeamScore(STExtraPlayerState* InstigatorPlayerState, int ChangedScore, enum Reason);// 0x1544000
	void UpdateGlobalRepParam();// 0x1543fec
	void NotifyTeamScoreChanged(STExtraPlayerState* InstigatorPlayerState, enum Reason);// 0x1543f30
	int LoseScore(STExtraPlayerState* TargetPlayerState);// 0x1543eb0
	WarPlayerState* FindScoreLeader();// 0x1543e88

--------------------------------
Class: WarPlayerState.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	WarPlayerStateScore RepPlayerStateScore;//[Offset: 0xd10, Size: 0x18]
	WarPlayerStateScore DisplayTipsScore;//[Offset: 0xd28, Size: 0x18]
	WarPlayerStateScore CachePlayerStateScore;//[Offset: 0xd40, Size: 0x18]
	void OnRep_PlayerStateScore();// 0x154465c

--------------------------------
Class: WarPlayerState_GrandTheft.WarPlayerState.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	WarPlayerState_GrandTheft* ThiefPlayerState;//[Offset: 0xd58, Size: 0x4]
	Vector ThiefLocation;//[Offset: 0xd5c, Size: 0xc]
	Vector ScoreLeaderLocation;//[Offset: 0xd68, Size: 0xc]
	void OnRep_ThiefLocation();// 0x12e82e4
	void OnRep_ScoreLeaderLocation();// 0x12e82e4
	int LoseScore();// 0x1544968
	void AddScore(int NewScore);// 0x15448f0

--------------------------------
Class: WeaponAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2ec, Size: 0x4]
	STExtraShootWeapon* C_OwnerWeapon;//[Offset: 0x2f0, Size: 0x4]
	bool C_Charge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool C_Tactical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	byte C_WeaponState;//[Offset: 0x2f6, Size: 0x1]
	float C_ReloadAnimRate;//[Offset: 0x2f8, Size: 0x4]
	bool C_CustomScopping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	bool C_WeaponState_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	bool C_State_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe, Size: 0x1]
	bool C_State_Charge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff, Size: 0x1]
	float C_AlphaForHolder;//[Offset: 0x300, Size: 0x4]
	AnimMontage* TacticalReloadMontage;//[Offset: 0x304, Size: 0x4]
	AnimMontage* ChargeReloadMontage;//[Offset: 0x308, Size: 0x4]
	AnimMontage* BoltMontage;//[Offset: 0x30c, Size: 0x4]
	AnimMontage* FireMontage;//[Offset: 0x310, Size: 0x4]
	void PlayPostReloadWeaponAnimation(int RemainBulletNumToReload);// 0x12fddb8
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x153f90c

--------------------------------
Class: WeaponOwnerInterface.Interface.Object
	void ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, uint32 ShootID, int Pellet);// 0x1550950
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x155075c
	void SetWeaponReconnectIdx(int WeaponReconnectOpIndex);// 0x1516a6c
	void SetTemporaryWeapon(STExtraShootWeapon* InVehicleWeapon, bool IsServerCall);// 0x1550690
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x15505cc
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x1550544
	void SetCurReloadWeapon(STExtraWeapon* Weapon);// 0x15504c4
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x15503b0
	void ServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator InRot);// 0x15502ec
	void RefreshWeaponOwnerCollision(float CountDown);// 0x155026c
	void PawnLeaveState(enum State);// 0x15501ec
	bool PawnHasState(enum PawnState);// 0x1550164
	Controller* PawnGetController();// 0x1550134
	bool PawnEnterState(enum State);// 0x15500ac
	bool PawnAllowState(enum State, bool withLog);// 0x154ffd8
	void OpenBoxHitCollison(float CountTime);// 0x154ff58
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x154fe84
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x154fe04
	bool IsWeaponOwnerLocallyControlled();// 0x154fdd4
	bool IsLocalViewed();// 0x154fda4
	bool IsGunADS();// 0x154fd74
	bool IsEnableBulletFlySound();// 0x154fd44
	bool IsClient_WeaponOwner();// 0x154fd14
	bool IsAlive();// 0x154fce4
	bool IsAI();// 0x154fcb4
	void HandleWeaponShootLost();// 0x154fc98
	void HandleStartFireDelegate(STExtraShootWeapon* ShootWeapon);// 0x154fc18
	void HandleShootDelegate(STExtraShootWeapon* ShootWeapon);// 0x154fb98
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x154fb18
	void HandleMoveAntiShootVerifyMiss();// 0x154fafc
	void HandleBulletHitEvent(Actor* ImpactActor, Vector ImpactPoint);// 0x154fa38
	uint32 GetWeaponUserPlayerKey();// 0x154fa08
	Actor* GetWeaponUserConst();// 0x154f9d8
	STExtraBaseCharacter* GetWeaponUserCharacter();// 0x154f9a8
	Actor* GetWeaponUser();// 0x154f978
	int GetWeaponReconnectIdx();// 0x154f948
	uint32 GetWeaponOwnerPlayerKey();// 0x1321090
	float GetWeaponOwnerPawnHealth();// 0x154f918
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x154f8e8
	WeaponManagerComponent* GetWeaponManager();// 0x154f8b8
	STExtraWeapon* GetWeaponBySlot(byte Slot);// 0x154f830
	STExtraShootWeapon* GetTemporaryWeapon();// 0x154f800
	STExtraShootWeapon* GetShootWeaponBySlot(byte Slot);// 0x154f778
	SecuryInfoComponent* GetSecuryInfoComp();// 0x154f748
	byte GetRole();// 0x154f718
	STExtraPlayerState* GetPlayerState();// 0x154f6e8
	FString GetPlayerNameSafety();// 0x154f620
	uint32 GetPlayerIdentifier();// 0x154f5f0
	STExtraPlayerController* GetPlayerControllerSafety();// 0x154f5c0
	PartHitComponent* GetPartHitComponent();// 0x154f590
	Vector GetOwnerActorLocation();// 0x154f540
	enum GetObserverType();// 0x154f510
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x154f4e0
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x154f4b0
	bool GetIsInDoor();// 0x154f480
	bool GetIsGunADS();// 0x154f450
	int GetHandFolderRatio();// 0x154f420
	Vector GetGunOwnerHeadLocation();// 0x154f3d0
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x154f3a0
	STExtraVehicleBase* GetCurrentVehicle();// 0x154f370
	uint64 GetCurrentStatesInterface();// 0x154f340
	UAECharAnimListCompBase* GetCharacterAnimComponent();// 0x154f310
	CapsuleComponent* GetCapsuleComponentInterface();// 0x154f2e0
	void EnterFire();// 0x154f2c4
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x154f23c
	bool CheckPickWeaponCanAutoUse();// 0x1391958
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x154f178
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x154f0f0
	void CalculateShootPlayerHeadNum(int AddShootTimes, bool IsAI);// 0x154f024
	void CalculateShootNum(int AddShootTimes);// 0x154efa4
	void CalculateShootAndHitPlayerNum(int AddShootTimes, bool IsAI);// 0x154eed8
	void CalculateBulletCount(int BulletID, int count);// 0x154ee14

--------------------------------
Class: WeaponOwnerProxyFactory.Interface.Object
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x12df7d4

--------------------------------
Class: WeaponPostFireState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: WeaponPostReloadState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: WeaponPreFireState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: WeaponShiled.STExtraWeapon.Actor.Object

--------------------------------
Class: WeaponStateDefault.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object

--------------------------------
Class: WeaponWarmUpState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	float BarrelRotateAccSpeed;//[Offset: 0x128, Size: 0x4]
	float BarrelRotateDesSpeed;//[Offset: 0x12c, Size: 0x4]
	float BarrelRotateMaxSpeed;//[Offset: 0x130, Size: 0x4]
	float CurBarrelRotateSpeed;//[Offset: 0x134, Size: 0x4]
	float CurBarrelRotateVal;//[Offset: 0x138, Size: 0x4]
	float FireWarm;//[Offset: 0x13c, Size: 0x4]
	float MaxWarm;//[Offset: 0x140, Size: 0x4]
	float WarmUpSpeed;//[Offset: 0x144, Size: 0x4]
	float WarmDownSpeed;//[Offset: 0x148, Size: 0x4]
	delegate OnWarmUpFinishAndStartFire;//[Offset: 0x150, Size: 0xc]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x15c, Size: 0x4]
	STExtraBaseCharacter* WeaponOwner;//[Offset: 0x160, Size: 0x4]
	bool bWarmUpFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]

--------------------------------
Class: WeatherCountDown.UAEUserWidget.UserWidget.Widget.Visual.Object
	DynamicWeatherMgr* WeatherMgr;//[Offset: 0x2ec, Size: 0x4]
	WeatherUIType[] WeatherUIConfig;//[Offset: 0x2f0, Size: 0xc]
	TextBlock* textTimeSuperCold;//[Offset: 0x2fc, Size: 0x4]
	CanvasPanel* PanelRoot2;//[Offset: 0x300, Size: 0x4]
	WidgetSwitcher* weatherSwitch2;//[Offset: 0x304, Size: 0x4]
	WidgetSwitcher* typeSwitch;//[Offset: 0x308, Size: 0x4]
	int CurrWeatherConfigIndex;//[Offset: 0x320, Size: 0x4]

--------------------------------
Class: WeatherUIType
	enum UIType;//[Offset: 0x0, Size: 0x1]
	WeatherUIStatus[] StatusList;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: WeatherUIStatus
	enum WeatherStatus;//[Offset: 0x0, Size: 0x1]
	SlateBrush PVENightBrush;//[Offset: 0x8, Size: 0x90]

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0xdc, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x2380ff0
	void SetActiveWidget(Widget* Widget);// 0x13ba91c
	Widget* GetWidgetAtIndex(int Index);// 0x2392c7c
	int GetNumWidgets();// 0x23b7a0c
	int GetActiveWidgetIndex();// 0x23b79e4
	Widget* GetActiveWidget();// 0x23b79bc

--------------------------------
Class: WrapperOverlapManagerComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	uint16 ManagerLevel;//[Offset: 0x51c, Size: 0x2]
	float OverlapCheckInterval;//[Offset: 0x520, Size: 0x4]
	bool bDrawSubLevelManageComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]
	float DrawSubLevelManageCompTime;//[Offset: 0x528, Size: 0x4]
	Actor*[] OverlappedSubLevelActorArray;//[Offset: 0x52c, Size: 0xc]
	void HandleOnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x15556f0
	void HandleEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x15555a8

--------------------------------
Class: XTArea.Actor.Object
	int AreaID;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: XTAreaBox.XTArea.Actor.Object
	BoxComponent* Area;//[Offset: 0x2cc, Size: 0x4]
	bool IsInArea(out Vector Position);// 0x1555cf4

--------------------------------
Class: XTAreaSphere.XTArea.Actor.Object
	SphereComponent* SphereArea;//[Offset: 0x2cc, Size: 0x4]
	bool IsInArea(out Vector Position);// 0x1555cf4

--------------------------------
Class: ZombieSurviveGameMode.ZombieBaseGameMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	float AIBornRadius;//[Offset: 0x11ac, Size: 0x4]
	bool IsResetPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b0, Size: 0x1]
	void SetPlayerStartOccupied(Actor* PlayerStart);// 0x1396184
	void NotifyGameModeInit();// 0x15578c4
	bool IsNeedRestPlayerStart(Controller* Player);// 0x1558354
	void InitPlayerStartObjs();// 0x1558340
	void GotoFinishedState();// 0x132afd0
	void GotoFightingState();// 0x132afb4
	Actor* GetUsePlayerStartByGroup(STExtraPlayerStartGroup* Group, bool CanRepeat);// 0x1558274
	void DestroyPlayerStartObjs();// 0x1558260
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x132acbc
	bool CheckTeamGameEnd();// 0x132c674
	void CheckResetPlayerStartGroup(int TeamID);// 0x15581e8
	bool CheckGameEnd();// 0x132ac2c
	void ChangeFinishTime(int RestTime);// 0x1558170

--------------------------------
Class: ZombieSurviveGameModeStateFighting.GameModeStateFightingTeam.GameModeStateFighting.GameModeState.Object
	bool IsShowCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float DelayShowCountDownTime;//[Offset: 0x44, Size: 0x4]
	void ChangeFinishTime(int RestTime);// 0x15589c8

--------------------------------
Class: ZombieSurviveGameModeStateFinished.GameModeStateFinishedTeam.GameModeStateFinished.GameModeState.Object

--------------------------------
Class: ZombieSurviveGameStateBase.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	delegate FightingCountDownMessage;//[Offset: 0x7d8, Size: 0xc]
	bool IsShowFightingStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 0x1]
	float FightingStateTime;//[Offset: 0x7e8, Size: 0x4]
	float RestFightingStateTime;//[Offset: 0x7ec, Size: 0x4]
	float DelayShowFightingStateCDTime;//[Offset: 0x7f0, Size: 0x4]
	void BroadFightingStateTime(bool IsShowCountDown, float StateTime, float RestFStateTime, float DelayTime);// 0x1559018
	void BroadFightingLeftTime(float StateTime, float RestFStateTime, float DelayTime);// 0x1558f10

--------------------------------
Class: AttrModifyInterface.Interface.Object
	void SetAttrValue(FString AttrName, float NewVal, int Reason);// 0x15b403c
	void RegisterModifiedAttributes();// 0x1498e3c
	Actor*[] GetAttrModifyRelevantActors();// 0x15b3f74
	AttrModifyComponent* GetAttrModifyComponent();// 0x12df7d4
	float GetAttributeValue(FString AttrName);// 0x15b3ea4
	void AddAttrValue(FString AttrName, float AddVal, int Reason);// 0x15b3d58

--------------------------------
Class: BlueprintFunctionOverride.BlueprintFunctionLibrary.Object
	FString LuaFilePath;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: BPClassManager.DataAsset.Object
	BPClassItem[] BPClassList;//[Offset: 0x20, Size: 0xc]
	<class Object,class Object> BPClassLookUp;//[Offset: 0x2c, Size: 0x3c]
	<FString,class Object> BPClassNameLookUp;//[Offset: 0x68, Size: 0x3c]
	FString BPClassManagerPath;//[Offset: 0xa4, Size: 0xc]
	class Object GetUClass(int KeyIndex);// 0x1389ff0
	class Object GetBPClassOverrideByName(FString ClassTagName);// 0x15b62b8
	class Object GetBPClassOverride(class Object InNativeClass);// 0x15b6238
	static BPClassManager* Get();// 0x15b6210

--------------------------------
Class: BPClassItem
	FString ClassTagName;//[Offset: 0x0, Size: 0xc]
	class Object* NativeClass;//[Offset: 0x10, Size: 0x28]
	class Object* BPClass;//[Offset: 0x38, Size: 0x28]

--------------------------------
Class: FeatureSetDefine.Object

--------------------------------
Class: ItemContainerInterface.Interface.Object
	Object* GetOwningObject();// 0x12df7d4
	ItemHandleBase*[] GetItemHandleListByDefineID(ItemDefineID DefineID);// 0x15bc144
	ItemHandleBase* GetItemHandleByDefineID(ItemDefineID DefineID);// 0x15bc0ac
	ItemDefineID[] GetItemDefineIDList();// 0x15bbfe4

--------------------------------
Class: ItemFactoryInterface.Interface.Object

--------------------------------
Class: LuaEventBridgeFunction.BlueprintFunctionLibrary.Object
	static void UnRegisterEventByTarget(Object* ObjContext);// 0x15bd01c
	static void UnRegisterEvent(FString FEventType, FString EventID, Object* ObjContext);// 0x15bcea0
	static void RegistEvent(FString EventType, FString EventID, Object* ObjContext, FString FunctionName);// 0x15bcca0

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 0x8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x28, Size: 0x3c]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x64, Size: 0x3c]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xa0, Size: 0x3c]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0xdc, Size: 0xc]
	Property*[] Params;//[Offset: 0xe8, Size: 0xc]
	void SyncLuaRegisterEventNum(FString EventType, FString EventID, int Number);// 0x15bd630
	LuaTemBPData*[] GetCurrentParam();// 0x15bd5c8
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x15bd540
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventID);// 0x15bd3a8

--------------------------------
Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0, Size: 0x8]
	FString FunctionName;//[Offset: 0x8, Size: 0xc]
	FString EventType;//[Offset: 0x14, Size: 0xc]
	FString EventID;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: OwnerRelevancyDependencyInterface.Interface.Object

--------------------------------
Class: PackTool.Object
	Object*[] CookCache;//[Offset: 0x1c, Size: 0xc]
	void CookResBySelection();// 0x15be0dc

--------------------------------
Class: STBaseBuffCarrierInterface.Interface.Object
	void SyncInvincibleData(float TotalTime);// 0x15bf664
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x15bf590
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x15bf480
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x15bf328
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x15bf204
	bool IsSameTeamWithFirstPC();// 0x15bf1d4
	bool HasBuffID(int BuffID);// 0x15bf14c
	bool HasBuff(FName BuffName);// 0x15bf0c4
	float GetBuffExpiry(FName BuffName);// 0x15bf03c
	STBaseBuff* GetBuffByName(FName BuffName);// 0x15befb4
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x15beee8
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x15bee14
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x15bed04
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x15bebac
	int AddBuff(FName BuffName, Controller* SkillActor, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x15bea08

--------------------------------
Class: STBaseBuffConditionBase.ActorComponent.Object
	STBaseBuff* OwnerBuff;//[Offset: 0xbc, Size: 0x8]

--------------------------------
Class: STBaseBuffEventType_LayerMax.STBaseBuffEventType.Object

--------------------------------
Class: STBaseBuffEventType_LayerSpecific.STBaseBuffEventType.Object
	int LayerCountParam;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: STBaseBuffEventType_Removed.STBaseBuffEventType.Object

--------------------------------
Class: STBaseBuffEventType_TakeBuffDamage.STBaseBuffEventType.Object

--------------------------------
Class: STBaseBuffEventType_OnAttach.STBaseBuffEventType.Object

--------------------------------
Class: STBaseBuffEventType_ConditionNotMatch.STBaseBuffEventType.Object

--------------------------------
Class: STBaseBuffEventType_Resurrection.STBaseBuffEventType.Object

--------------------------------
Class: STBaseBuffEventType_WeaponAttack.STBaseBuffEventType.Object
	int HitCount;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: STBaseBuffList.Object
	FString BuffListName;//[Offset: 0x1c, Size: 0xc]
	STBaseBuffTemplateItem[] BuffList;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: STBaseBuffTemplateItem
	int ID;//[Offset: 0x0, Size: 0x4]
	FName Name;//[Offset: 0x8, Size: 0x8]
	STBaseBuff* Buff;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BuffManagerPathClass.Actor.Object
	FString BuffManagerBlueprintPath;//[Offset: 0x2c8, Size: 0xc]

--------------------------------
Class: STBaseBuffManager.Object
	STBaseBuffTemplateItem[] BuffList;//[Offset: 0x1c, Size: 0xc]
	class STBaseBuffList[] BuffListTemplates;//[Offset: 0x28, Size: 0xc]
	<int,STBaseBuff*> BuffInstancedTemplateMap;//[Offset: 0x34, Size: 0x3c]

--------------------------------
Class: STBaseBuffStatusType_ImmuneDebuff.STBaseBuffStatusType.Object

--------------------------------
Class: STBuffConditionComplex.STBuffCondition.Object
	STBuffCondition*[] Conditions;//[Offset: 0x2c, Size: 0xc]
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x13e6184
	STBuffCondition* Copy(Object* Outer);// 0x15c554c
	bool CheckIsTrue();// 0x1391958

--------------------------------
Class: STBuffConditionAction.STBuffAction.Object
	STBuffCondition* Condition;//[Offset: 0x34, Size: 0x4]
	float Probality;//[Offset: 0x38, Size: 0x4]
	enum ExecuteTimeType;//[Offset: 0x3c, Size: 0x1]
	bool IsDoOnFalse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool IsNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	BuffConditionActionItem[] LinkActions;//[Offset: 0x40, Size: 0xc]
	void OnTick(float DetalTime);// 0x12ebfe0
	void OnInitialize();// 0x133d2f0
	void OnDestroy();// 0x12fe19c
	void OnConditionTrue();// 0x15c6860
	void OnConditionFalse();// 0x15c684c
	void OnChangeNotify();// 0x15c567c
	void CheckCondition();// 0x15c6838

--------------------------------
Class: BuffConditionActionItem
	int Index;//[Offset: 0x0, Size: 0x4]
	enum InitializeType;//[Offset: 0x4, Size: 0x1]
	enum TrueExecType;//[Offset: 0x5, Size: 0x1]
	enum FalseExecType;//[Offset: 0x6, Size: 0x1]

--------------------------------
Class: UStringMap.Object
	StringMap Map;//[Offset: 0x1c, Size: 0x3c]

--------------------------------
Class: StringMap
	<FString,FString> Data;//[Offset: 0x0, Size: 0x3c]

--------------------------------
Class: UAEGameEngine.GameEngine.Engine.Object
	BackendHUD* AssociatedBackendHUD;//[Offset: 0xa94, Size: 0x4]
	bool bEnableAutoStat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa4, Size: 0x1]
	float StatCollection_AvgTickDeltaThreshold;//[Offset: 0xaa8, Size: 0x4]
	float AutoStat_AvgTickDeltaThreshold;//[Offset: 0xaac, Size: 0x4]
	float AutoStat_StartTime;//[Offset: 0xab0, Size: 0x4]
	float AutoStat_Duration_Engine;//[Offset: 0xab8, Size: 0x4]
	float AutoStat_Duration_PhysX;//[Offset: 0xabc, Size: 0x4]

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x1c, Size: 0x4]
	ObjectCollectorManager* CollectorManager;//[Offset: 0x20, Size: 0x4]
	FString BackendUtilsClassName;//[Offset: 0x24, Size: 0xc]
	BackendUtils* Utils;//[Offset: 0x30, Size: 0x4]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x34, Size: 0xc]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x40, Size: 0x3c]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x2ebac30
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x2ebabb0

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BPTable.Object
	FString BPTableName;//[Offset: 0x1c, Size: 0xc]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x28, Size: 0x3c]
	FString GetWrapperPath(int ID);// 0x15ca654
	class Object GetWrapperClass(int ID);// 0x15ca5d4
	FString GetPath(int ID);// 0x15ca4cc
	Object* GetObject(int ID, Object* Outer);// 0x15ca408
	class Object GetCustom1Class(int ID);// 0x15ca388
	class Object GetClass(int ID);// 0x15ca308

--------------------------------
Class: BPTableItem
	int ID;//[Offset: 0x0, Size: 0x4]
	FString Name;//[Offset: 0x4, Size: 0xc]
	FString Path;//[Offset: 0x10, Size: 0xc]
	FString WrapperPath;//[Offset: 0x1c, Size: 0xc]
	FString Custom1;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: UAELoadedClassManager.Object
	class Object[] m_CachClass;//[Offset: 0x1c, Size: 0xc]
	<uint32,class Object> m_CookClass;//[Offset: 0x28, Size: 0x3c]
	<int,UAEResList> m_ResTableData;//[Offset: 0x6c, Size: 0x3c]
	<FString,BPTable*> BPTableMap;//[Offset: 0xa8, Size: 0x3c]
	FString LoadedClassManagerClassName;//[Offset: 0xe4, Size: 0xc]
	bool IsDedicatedServer();// 0x15cbc50
	void InitTableData();// 0x131b67c
	void InitBPTableMap();// 0x1c01fa0
	void Init();// 0x15cbc3c
	FString GetWrapperPath(FString BPTableName, int ID);// 0x15cba18
	class Object GetWrapperClass(FString BPTableName, int ID);// 0x15cb874
	FString GetPath(FString BPTableName, int ID, bool IsLobby);// 0x15cb600
	Object* GetObject(FString BPTableName, int ID, Object* Outer);// 0x15cb418
	class Object GetCustom1Class(FString BPTableName, int ID);// 0x15cb274
	class Object GetClass(FString BPTableName, int ID, bool IsLobby);// 0x15cb080
	void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate, bool AtLeastNextFrame);// 0x15cae50
	static UAELoadedClassManager* Get();// 0x15cae28
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x15cacc8
	void ClearAssetByAssetReferenceAsync(delegate AssetLoadSuccessDelegate);// 0x15cac24
	void ClearAllData();// 0x15cac10

--------------------------------
Class: UAEResList
	int ResIndex;//[Offset: 0x0, Size: 0x4]
	FString ResPathName;//[Offset: 0x4, Size: 0xc]
	bool ServerNeedLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool ClientNeedLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool iEditorLoadType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool BuildClientNeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool BuildServerNeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool IsResident;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]

--------------------------------
Class: UAEMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x540, Size: 0x1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x540, Size: 0x1]
	uint32 MaxPortCountToTry;//[Offset: 0x544, Size: 0x4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x554, Size: 0x4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x558, Size: 0x4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x55c, Size: 0x4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x560, Size: 0x4]
	float RecreateSocketCooldownTime;//[Offset: 0x5b4, Size: 0x4]
	float RecreateSocketMaxTryCount;//[Offset: 0x5b8, Size: 0x4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 0x1]

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x5c0, Size: 0x4]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c, Size: 0xc]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x28, Size: 0xc]
	UAEDataTable*[] TableObjList;//[Offset: 0x70, Size: 0xc]
	World* CurWorld;//[Offset: 0x7c, Size: 0x4]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x80, Size: 0x3c]
	void ReleaseTable(FName tableName);// 0x15ce7bc
	UAEDataTable* GetTablePtr(FName tableName);// 0x15ce73c
	static FString GetStringFromTable(FString Table, FString Row, FString Tag);// 0x15ce4f8
	static int GetIntFromTable(FString Table, FString Row, FString Tag);// 0x15ce334
	static float GetFloatFromTable(FString Table, FString Row, FString Tag);// 0x15ce16c
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x15ce0b0
	static bool GetBoolFromTable(FString Table, FString Row, FString Tag);// 0x15cdeec

--------------------------------
Class: UEMathUtilityMethods.BlueprintFunctionLibrary.Object
	static float CalculateAngleToTargetAngle(float startAngle, float targetAngle, float stepAngle, enum dir);// 0x15cedc0
	static float AngleDis(float angleA, float angleB);// 0x15ced04

--------------------------------
Class: AppBaseConfig.Object
	int PUBLISH_REGION_ID;//[Offset: 0x1c, Size: 0x4]
	FString IMSDK_GAME_ID;//[Offset: 0x20, Size: 0xc]
	FString GEMAppID;//[Offset: 0x2c, Size: 0xc]
	uint32 TSSGameId;//[Offset: 0x38, Size: 0x4]
	uint64 GameID;//[Offset: 0x40, Size: 0x8]
	FString GameKey;//[Offset: 0x48, Size: 0xc]
	uint64 GVoiceGameId;//[Offset: 0x58, Size: 0x8]
	FString GVoiceGameKey;//[Offset: 0x60, Size: 0xc]
	FString APPID_FACEBOOK;//[Offset: 0x6c, Size: 0xc]
	FString APPID_APPLE;//[Offset: 0x78, Size: 0xc]
	FString APPID_GOOGLE;//[Offset: 0x84, Size: 0xc]
	FString APPID_TWITTER;//[Offset: 0x90, Size: 0xc]
	FString APPID_WECHAT;//[Offset: 0x9c, Size: 0xc]
	FString APPID_VK;//[Offset: 0xa8, Size: 0xc]
	FString APPID_LINE;//[Offset: 0xb4, Size: 0xc]
	FString APPID_QQ;//[Offset: 0xc0, Size: 0xc]

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x1c, Size: 0x3c]
	void SetMaxTaskNum(int Num);// 0x1725b1c
	void RunNextTask();// 0x1725b08
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x172599c
	void ClearOneTask(FString ObjectPath);// 0x1725844
	void ClearAllTask();// 0x1725830
	void AddTaskSync(FString ObjectPath);// 0x17256d8
	void AddTask(FString ObjectPath, int LoadPriority);// 0x172553c

--------------------------------
Class: AsyncTaskCDNDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x3c, Size: 0xc]
	static AsyncTaskCDNDownloader* DownloadCDNContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x17262dc

--------------------------------
Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x3c, Size: 0xc]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x1726b84

--------------------------------
Class: BattleWindowMgr.BlueprintFunctionLibrary.Object
	static void ShowUI(Object* WorldContextObject, FString WindowName, Object* ObjectParam);// 0x17274fc
	static void SetInstance(BattleWindowMgrLuaUtils* InInstance, const LuaStateWrapper* InLuaStateWrapper);// 0x1727448
	static void HideUI(Object* WorldContextObject, FString WindowName);// 0x17272b0
	static bool CheckWindowOpen(Object* WorldContextObject, FString WindowName);// 0x1727110

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 0x8]
	FString LuaManagerName;//[Offset: 0x24, Size: 0xc]
	FString ShowUI;//[Offset: 0x30, Size: 0xc]
	FString HideUI;//[Offset: 0x3c, Size: 0xc]
	FString CheckWindowOpen;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString imagepath, float X, float Y, float Z);// 0x17281b8
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x1727dd4
	void ReadZipLog(FString Filename);// 0x1727c7c
	byte[] CompressLog(bool pullAllLog);// 0x1727b6c

--------------------------------
Class: BuildConfig.Object
	FString branch_name;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BusinessHelper.BlueprintFunctionLibrary.Object
	static Object* UIGetResWithPath(FString DesManagerName);// 0x17298d8
	static LuaClassObj* UIGetLuaManagerByName(UAEUserWidget* pUIClass, FString InManagerName);// 0x1729da8
	static LuaClassObj* UIGetLuaManager(UAEUserWidget* pUIClass);// 0x1729d30
	static void StopUIStat(FString UIName, bool bReport);// 0x1729b90
	static float StopTimeWatch();// 0x1729b68
	static void StartUIStat(FString UIName);// 0x1729a18
	static void StartTimeWatch();// 0x1729a04
	static void SetUIStatMaxClickTimes(int Times);// 0x1729994
	static Object* LoadAssetFromPath(FString DesManagerName);// 0x17298d8
	static bool IsSplitMiniPakVersion();// 0x14028e0
	static bool IsSplitMapPakVersion();// 0x1485ea8
	static bool IsClassOf(const Object* Object, const class Object Class);// 0x172981c
	static bool IsCEVersion();// 0x17297f4
	static bool HasDownloadedBasePak();// 0x1485ea8
	static UAEUserWidget* GetWidgetByName2(FString InManagerName, FString InWidgtName);// 0x17296b4
	static UAEUserWidget* GetWidgetByName(UAEUserWidget* pUIClass, FString InManagerName, FString InWidgtName);// 0x1729530
	static float GetTime();// 0x1729508
	static FString GetSplitMapConfigInfo();// 0x1729450
	static int GetPublishRegionID();// 0x1729428
	static FString GetPublishRegion();// 0x1729370
	static FString GetPackChannel();// 0x17292b8
	static FString GetMobileBasePath(FString InPath);// 0x172917c
	static FString GetITopGameId();// 0x17290c4
	static int GetIMSDKEnv();// 0x172909c
	static UAEDataTable* GetDataTable(FString tableName);// 0x1728fe0
	static int GetCurrentNetworkState();// 0x1728fb8
	static Widget* GetChildByName(UserWidget* pParent, FString Name);// 0x1728eb8
	static FString GetBranchName();// 0x1728e00
	static FString GetAppVersion();// 0x1728d48
	static int GetAOSSHOPID();// 0x1728d20
	static FString GetAOSSHOP();// 0x1728c68
	static void ClearDisplayLookupTable();// 0x1728c54
	static void BroadCastMSG(FrontendHUD* FrontendHUD, FString DesManagerName, FString Msg);// 0x1728ad8

--------------------------------
Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x2d4, Size: 0x4]
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget);// 0x1748b5c
	void SubShowHideEvent(out const FString[] WidgetPathList);// 0x1748a28
	void SubDefaultSceneCamera(const int sceneCameraIndex);// 0x17489b0
	void SubDefaultChildUI(out const FString[] childList);// 0x174887c
	void SubDefaultBaseUI(FString baseUI);// 0x17487c0
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x1748608
	void SetWidgetZorder(const int Index, const int ZOrder);// 0x174854c
	void RestoreWidgetZorder(const int Index);// 0x17484d4
	void RestoreAllWidgetZorder();// 0x17484c0
	bool IsTopStackPanel();// 0x1748498
	bool IsPushedPanel();// 0x1748470
	bool InCombatState();// 0x1748448
	void HandleUIMessageNoFetch(FString UIMessage);// 0x174838c
	void HandleUIMessage(FString UIMessage);// 0x17482d0
	void HandleDynamicDestroy();// 0x17482bc
	void HandleDynamicCreation();// 0x17482a8
	void HandleCollapseWidgetList(FString RootWidgetName);// 0x17481ec
	FString GetTopStackPanelSrcTag();// 0x174812c
	FString GetTopStackPanelDstTag();// 0x174806c
	FString GetGameStatus();// 0x1747fac
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x1747f00
	void AddToTopStackPanel();// 0x1747eec

--------------------------------
Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x2c8, Size: 0x4]
	Object* OwningObject;//[Offset: 0x2cc, Size: 0x4]
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x2d0, Size: 0x4]

--------------------------------
Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0xb4, Size: 0xc]
	UAEPlayerController* OwningController;//[Offset: 0xfc, Size: 0x4]
	LuaClassObj* LuaObject;//[Offset: 0x104, Size: 0x4]
	UAEUserWidget* GetWidget(int Index);// 0x1730ec8
	LuaClassObj* GetLuaObject();// 0x1531e40
	GameFrontendHUD* GetGameFrontendHUD();// 0x1730ea0

--------------------------------
Class: GameWidgetConfig
	FString Path;//[Offset: 0x0, Size: 0xc]
	FString Container;//[Offset: 0xc, Size: 0xc]
	int ZOrder;//[Offset: 0x18, Size: 0x4]
	class Object* WidgetClass;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	FString CSVTableRelativeDir;//[Offset: 0x144, Size: 0xc]
	<FName,FString> GameStatusMap;//[Offset: 0x150, Size: 0x3c]
	<FString,bool> LanguageMap;//[Offset: 0x18c, Size: 0x3c]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	GVoiceInterface* GVoice;//[Offset: 0x1cc, Size: 0x4]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	BugReporter* BugReporter;//[Offset: 0x1d4, Size: 0x4]
	int MaxUpdateRetryTimes;//[Offset: 0x1d8, Size: 0x4]
	GDolphinUpdater* GDolphin;//[Offset: 0x1e4, Size: 0x4]
	Translator* Translator;//[Offset: 0x1e8, Size: 0x4]
	GCPufferDownloader* GPuffer;//[Offset: 0x1ec, Size: 0x4]
	LaggingReporter* LaggingReporter;//[Offset: 0x1f0, Size: 0x4]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 0x1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd, Size: 0x1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe, Size: 0x1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff, Size: 0x1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 0x1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x203, Size: 0x1]
	CDNUpdate* CDNUpdater;//[Offset: 0x208, Size: 0x4]
	int ODPaksPoolSize;//[Offset: 0x20c, Size: 0x4]
	int ODPaksPoolSizeLowend;//[Offset: 0x210, Size: 0x4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x214, Size: 0x4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	FName UnrealNetworkStatus;//[Offset: 0x240, Size: 0x8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x258, Size: 0x4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	FString[] PersistentLuaManager;//[Offset: 0x260, Size: 0xc]
	float UnrealNetworkConnectingTime;//[Offset: 0x278, Size: 0x4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x280, Size: 0x4]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x284, Size: 0x4]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x288, Size: 0x4]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x28c, Size: 0x4]
	FString ScriptBPRelativeDir;//[Offset: 0x294, Size: 0xc]
	FString ScriptRelativeDir;//[Offset: 0x2a0, Size: 0xc]
	FString InGameLuaDir;//[Offset: 0x2ac, Size: 0xc]
	FString PreloadLuaFileRelativePath;//[Offset: 0x2b8, Size: 0xc]
	FString[] LuaDirList;//[Offset: 0x2c4, Size: 0xc]
	FString[] NoGCPackage;//[Offset: 0x2d0, Size: 0xc]
	float LuaTickTime;//[Offset: 0x2dc, Size: 0x4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	int PingFirstReportIntervalSecond;//[Offset: 0x308, Size: 0x4]
	int PingReportIntervalSecond;//[Offset: 0x30c, Size: 0x4]
	TssManager* TssMgr;//[Offset: 0x310, Size: 0x4]
	float PingReportInterval;//[Offset: 0x32c, Size: 0x4]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x390, Size: 0x4]
	delegate UIStackChangeDelegate;//[Offset: 0x394, Size: 0xc]
	delegate UIStackRecoverDelegate;//[Offset: 0x3a0, Size: 0xc]
	FString UserSettingsClassName;//[Offset: 0x3ac, Size: 0xc]
	FString LanguageSettingsClassName;//[Offset: 0x3b8, Size: 0xc]
	FString ActiveSaveGameName;//[Offset: 0x3c4, Size: 0xc]
	FString CachedSaveGameName;//[Offset: 0x3d0, Size: 0xc]
	FString LanguageSaveGameName;//[Offset: 0x3dc, Size: 0xc]
	class Object* UserSettingsClass;//[Offset: 0x3e8, Size: 0x4]
	SaveGame* UserSettings;//[Offset: 0x3ec, Size: 0x4]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x3f0, Size: 0xc]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x480, Size: 0x4]
	int FpsForWindowClient;//[Offset: 0x484, Size: 0x4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x488, Size: 0x4]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 0x1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 0x1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 0x1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 0x1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	int GDPRUserType;//[Offset: 0x498, Size: 0x4]
	float fLaggingFPSDiffThreshold;//[Offset: 0x49c, Size: 0x4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x4a0, Size: 0x4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x4a4, Size: 0x4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x4a8, Size: 0x4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x4ac, Size: 0x4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x4b0, Size: 0x4]
	float fFPSReportInterval;//[Offset: 0x4b4, Size: 0x4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d7, Size: 0x1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x560, Size: 0xc]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 0x1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 0x1]
	int NativeHUDTickIndex;//[Offset: 0x570, Size: 0x4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x574, Size: 0x4]
	void VNGPostPersonalInfo(FString OpenID, FString Name, FString passportId, FString email, FString phone, FString address);// 0x1735824
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x17356cc
	void TickUdpCollector(float DeltaTime);// 0x1735654
	void StatisVisibilityWidget(Widget* Widget);// 0x1396184
	bool StartGrayUpdate();// 0x173562c
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x1735618
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x1735604
	void ShutdownUnrealNetwork();// 0x13e6184
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x1735458
	void RetryDownload();// 0x1735444
	void RetryCDNDownload();// 0x1735430
	void ResetUserSettings();// 0x173541c
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x1735254
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x1735254
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x1735254
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x1735254
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x17351b0
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x1734fe8
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x1734ee0
	void OnWebviewActionNotify(FString URL);// 0x1734d88
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x1734cbc
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x1734acc
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x17349c0
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x17348b0
	void OnNotUpdateFinished();// 0x173489c
	void OnNearByPersonInfoNotify();// 0x12e82e4
	void OnLoginFlowNotify(int _Flow, int _Param, FString extraData);// 0x17346b4
	void OnLocationInfoNotify(out const LocationInfoWrapper locationInfo);// 0x1734630
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x1734574
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x17344b4
	void OnGetCountryNoNotify(int country);// 0x173443c
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x17342f8
	void OnGameMasterEvent(FString EventName, int Ret);// 0x173415c
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x1734054
	void MakeToSuppotIphoneXNotch(PanelSlot* PanelSlot);// 0x1733fdc
	void LuaDoString(FString LuaString);// 0x1733f18
	bool IsWindowOB();// 0x1457648
	bool IsInstallPlatform(FString platform);// 0x1733db8
	void HandleCultureChanged();// 0x12e82e4
	SaveGame* GetUserSettings();// 0x131ee18
	GDolphinUpdater* GetUpdater();// 0x1733d9c
	Translator* GetTranslator();// 0x1733d80
	GCPufferDownloader* GetPufferDownloader();// 0x1733d64
	LuaStateWrapper* GetLuaStateWrapper();// 0x1733d3c
	LuaEventBridge* GetLuaEventBridge();// 0x1733d14
	GVoiceInterface* GetGVoiceInterface();// 0x1733ce4
	GameStateBase* GetGameState();// 0x1733cbc
	int GetDetailNetInfoFromGCloud();// 0x130bc40
	SaveGame* GetCustomSetting(FString InSlotName);// 0x1733bf8
	Object* GetClientNetObj();// 0x1733bd0
	BugReporter* GetBugReporter();// 0x1733ba8
	FString GetBattleIDHexStr();// 0x1733ae8
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x1733ac0
	void FinishModifyUserSettings();// 0x1733aac
	void EnableFPSAndMemoryLog(bool bEnable);// 0x1733a2c
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x17339a4
	void DispatchConfirmMisKill(FString KillerName);// 0x17338e8
	void ClearUIElemSettings();// 0x17338d4
	void CheckLocalizationLanguage();// 0x17338c0
	void CallGlobalScriptFunction(FString InFunctionName);// 0x17337fc
	void BeginModifyUserSettings();// 0x17337e8
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x17336e8

--------------------------------
Class: GVoiceInterface.Object
	FString ServerInfo;//[Offset: 0x64, Size: 0xc]
	uint32 openGvoiceLog;//[Offset: 0x70, Size: 0x4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x80, Size: 0x4]
	void UploadRecordFile();// 0x17401fc
	void TestMic();// 0x17401e8
	bool TeamSpeakerEnable();// 0x17401cc
	bool TeamMicphoneEnable();// 0x17401b0
	void SwitchMicphoneWhenCorpsMode();// 0x174019c
	void StopRecord();// 0x1740188
	void StopPlayRecordFile();// 0x1740174
	void StopInterphone();// 0x1740160
	void StartRecord();// 0x174014c
	void StartInterphone();// 0x1740138
	void SpeechToText();// 0x1740124
	void ShowOpenSpeakerAtFirstMsg();// 0x1740110
	void ShowCorpsModeCannotUseLBSVoice();// 0x17400fc
	void SetVoiceMode(int Type);// 0x1740084
	void SetSpeakerVolum(float Value);// 0x174000c
	void SetSpeakerStatus(bool Flag);// 0x173ff8c
	void SetMicphoneVolum(float Value);// 0x173ff14
	void SetMicphoneStatus(bool Flag);// 0x173fe94
	void SetLbsVoiceRadius(float Radius);// 0x173fe20
	void SetLbsRoomEnableStatus(bool Flag);// 0x173fda0
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x173fd28
	void SetCurrentDownloadFieldID(FString filedId);// 0x173fbcc
	void SetAllVoiceStatus(bool Flag);// 0x173fb4c
	void ResetWhenLogOut();// 0x173fb38
	void ReactiveLbsStatus();// 0x173fb24
	void QuitRoom();// 0x173fb10
	void PlayRecordFile();// 0x173fafc
	void OpenTeamSpeakerOnly(bool showTips);// 0x173fa7c
	int OpenTeamMicphoneOnly(bool showTips);// 0x173f9f4
	int OpenTeamInterphone();// 0x173f9cc
	int OpenSpeaker();// 0x173f9a4
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x173f990
	int OpenMic();// 0x173f968
	void OpenIngameSpeaker();// 0x173f954
	int OpenIngameMicphone();// 0x173f92c
	void OpenAllSpeaker(bool showTips);// 0x173f8ac
	int OpenAllMicphone(bool showTips);// 0x173f824
	int OpenAllInterphone();// 0x173f7fc
	void OnRoomTypeChanged(FString itemtext);// 0x13b9b8c
	bool LbsSpeakerEnable();// 0x173f7e0
	bool LbsMicphoneEnable();// 0x173f7c4
	void JoinRoom(FString room, FString userID);// 0x173f554
	void JoinLbsRoom(FString lbsRoom, FString userID);// 0x173f2e4
	bool IsTeamInterphoneOpenned();// 0x173f2c8
	bool IsLbsInterphoneOpenned();// 0x173f2ac
	bool IsInterphoneMode();// 0x173f270
	void InitGVoiceComponent(FString userID);// 0x173f118
	bool HaveTeamRoom();// 0x173f0f0
	bool HaveLbsRoom();// 0x173f0c8
	float GetVoiceLength();// 0x173f0a0
	void GetAuthKey();// 0x173f08c
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x173efc8
	void DownloadRecordFile();// 0x173efb4
	void CloseSpeaker();// 0x173efa0
	void CloseMic();// 0x173ef8c
	void CloseIngameSpeaker();// 0x173ef78
	void CloseIngameMicphone();// 0x173ef64
	void CloseAllSpeaker(bool showTips);// 0x173eee4
	void CloseAllMicphone(bool showTips);// 0x173ee64
	void CheckAndEnableRoomSpeaker();// 0x173ee50
	void ChatShowAgeRestrictionMsgInLobby();// 0x173ee3c
	void ChatShowAgeRestrictionMsgInFighting();// 0x173ee28
	void ChatShowAgeRestrictionMsgInChat();// 0x173ee14
	void ChatRequestPrivacyInSetting();// 0x173ee00
	void ChatRequestPrivacyInGame();// 0x173edec

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x4c, Size: 0x3c]
	FString AppStoreUrl;//[Offset: 0x88, Size: 0xc]
	FString GooglePlayUrl;//[Offset: 0x94, Size: 0xc]
	FString SamSungPlayUrl;//[Offset: 0xa0, Size: 0xc]
	FString AmazonPlayUrl;//[Offset: 0xac, Size: 0xc]
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	FString UpdateUrl;//[Offset: 0xbc, Size: 0xc]
	FString VersionUrl;//[Offset: 0xc8, Size: 0xc]
	FString CDNVersionUrl;//[Offset: 0xd4, Size: 0xc]
	FString PreUpdateUrl;//[Offset: 0xe0, Size: 0xc]
	FString PreVersionUrl;//[Offset: 0xec, Size: 0xc]
	FString PreCDNVersionUrl;//[Offset: 0xf8, Size: 0xc]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x108, Size: 0x4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x10c, Size: 0x4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x110, Size: 0x4]
	uint32 UpdateChannel;//[Offset: 0x114, Size: 0x4]
	uint32 UpdateChannelIOS;//[Offset: 0x118, Size: 0x4]
	uint32 UpdateChannelAndroidGoogle;//[Offset: 0x11c, Size: 0x4]
	uint32 UpdateChannelAndroidSamSung;//[Offset: 0x120, Size: 0x4]
	uint32 UpdateChannelAndroidMultiChannel;//[Offset: 0x124, Size: 0x4]
	uint32 UpdateChannelAndroidThirdPartyPayment;//[Offset: 0x128, Size: 0x4]
	uint32 UpdateChannelIOS_PVRTC;//[Offset: 0x12c, Size: 0x4]
	uint32 UpdateChannelIOS_PVRTC_Shipping;//[Offset: 0x130, Size: 0x4]
	bool PreUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	FString UpdateInfoPath;//[Offset: 0x138, Size: 0xc]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	void StartAppUpdate();// 0x1737eec
	void SetEnableCDNGetVersion(bool Enable);// 0x1737e6c
	void OnDolphinBGDownloadDone();// 0x12e82e4
	bool IsUpdating();// 0x1737e44
	bool IsGrayUpdate();// 0x1737e1c
	bool IsExamine();// 0x1457648
	void Install();// 0x1737e08
	int GetCurStage(out float Percent, out int GetCurVal, out int GetMaxVal);// 0x1737cc8
	uint32 GetChannelID();// 0x1737ca0
	void FinishUpdate();// 0x1737c8c
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x1343e64
	bool EnableCDNGetVersion();// 0x1737c64
	void ContinueUpdate();// 0x1737c50
	void CancelUpdate();// 0x1737c3c

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x1c, Size: 0xc]
	FString StoredAccessToken;//[Offset: 0x28, Size: 0xc]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x38, Size: 0x10]
	delegate OnDetectDelegate;//[Offset: 0x48, Size: 0x10]
	delegate OnTranslateDelegate;//[Offset: 0x58, Size: 0x10]
	void TranslateV2(int Channel, int ID, FString Text);// 0x1742fb4
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x1742c74
	void OnTranslateV2(bool Success, FString Data);// 0x1742b68
	void OnTranslate__DelegateSignature(bool isSuccess, FString LanguageFrom, FString Translation);// 0x1c01fa0
	void OnTranslate(bool Success, FString Data);// 0x1742a5c
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x1742950
	void OnGetAccessToken__DelegateSignature(bool isSuccess, FString Token);// 0x1c01fa0
	void OnGetAccessToken(bool Success, FString Data);// 0x1742844
	void OnDetectV2(bool Success, FString Data);// 0x1742738
	void OnDetect__DelegateSignature(bool isSuccess, FString from, FString to);// 0x1c01fa0
	void OnDetect(bool Success, FString Data);// 0x174262c
	bool HasTranslating();// 0x1742604
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x1742270
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x1741f30

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool PreDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	FString PreServerURL;//[Offset: 0x184, Size: 0xc]
	FString ServerURL;//[Offset: 0x190, Size: 0xc]
	uint32 ProductID;//[Offset: 0x19c, Size: 0x4]
	uint32 ProductID_IOS;//[Offset: 0x1a0, Size: 0x4]
	uint32 ProductID_IOS_PVRTC;//[Offset: 0x1a4, Size: 0x4]
	uint32 ProductID_IOS_PVRTC_Shipping;//[Offset: 0x1a8, Size: 0x4]
	uint32 ProductID_Android_Google;//[Offset: 0x1ac, Size: 0x4]
	uint32 ProductID_Android_SamSung;//[Offset: 0x1b0, Size: 0x4]
	uint32 ProductID_Android_MultiChannel;//[Offset: 0x1b4, Size: 0x4]
	uint32 ProductID_Android_ThirdPartyPayment;//[Offset: 0x1b8, Size: 0x4]
	FString DownloadDir;//[Offset: 0x1bc, Size: 0xc]
	FString PufferTmpDir;//[Offset: 0x1c8, Size: 0xc]
	uint32 CleanFlagVer;//[Offset: 0x1d4, Size: 0x4]
	FString[] CleanFileNamePattern;//[Offset: 0x1d8, Size: 0xc]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 0x1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6, Size: 0x1]
	FString[] PreFetchPakNames;//[Offset: 0x1e8, Size: 0xc]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x1f4, Size: 0x4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x1fc, Size: 0x4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x200, Size: 0x4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x204, Size: 0x4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x208, Size: 0x4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x20c, Size: 0xc]
	float PreFetchODPaks_StartTime;//[Offset: 0x218, Size: 0x4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x21c, Size: 0xc]
	bool StopTask(uint64 TaskID);// 0x173c044
	int StopMergeBinDiffPak(int outterTaskID);// 0x173bfc4
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x173bf44
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x173bd50
	static int ReturnLocalFiles_LuaState();// 0x13bae8c
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x173bba0
	bool RemountPakFiles();// 0x173bb78
	FString ReadFile(FString Filename);// 0x173b998
	bool PreFetchPakFiles();// 0x173b970
	int PreFetchODPakFilesUpdate();// 0x173b948
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x173b8c0
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x173b840
	bool PreFetchODPakFiles(bool Start);// 0x173b7b8
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x173b618
	int MoveFileTo(FString Filename, FString from, FString to);// 0x173b288
	int MoveFile(FString from, FString to);// 0x173b010
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x173abe8
	bool IsODPaks(FString FilePath);// 0x173aa88
	bool IsODFileExists(FString Path);// 0x173a9c4
	bool IsInitSuccess();// 0x173a99c
	bool IsFileReady(FString FilePath);// 0x173a83c
	bool IsFileExist(FString Filename, FString extension);// 0x173a5c4
	bool InitializeODPaks();// 0x173a59c
	FString GetTempWorkPath();// 0x173a4dc
	uint32 GetProductID();// 0x173a4b4
	FString GetODPakName(FString Path);// 0x173a370
	uint32 GetInitErrcode();// 0x173a348
	uint32 GetFileSizeCompressed(FString FilePath);// 0x173a1e8
	float GetFileSize(FString Filename);// 0x173a084
	FString GetDownloadPath();// 0x1739fc4
	static bool DeleteFile(FString FullPath);// 0x1739e6c
	bool ConvertPreFetchFiles();// 0x1739e44
	bool ClearUselessODPaks();// 0x1739e1c
	bool ClearPreFetchODPaksFiles();// 0x1739df4
	bool ClearPreFetchFiles();// 0x1739dcc
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x1739be0

--------------------------------
Class: LaggingReporter.Object

--------------------------------
Class: CDNUpdate.Object
	void StartUpdateApp();// 0x172ed78
	void StartAppUpdate(bool StartGrayUpdate);// 0x172ecf8
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x172ec2c
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x172eb60
	bool IsUpdating();// 0x172eb38
	bool IsGrayUpdate();// 0x172eb10
	int GetCurStage(out float Percent, out int GetCurVal, out int GetMaxVal);// 0x172e9d0
	void FinishUpdate();// 0x172e9bc
	void ContinueUpdate();// 0x172e9a8
	void CancelUpdate();// 0x172e994

--------------------------------
Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0, Size: 0x1]
	FString FileSavePath;//[Offset: 0x4, Size: 0xc]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int BytesSent;//[Offset: 0x14, Size: 0x4]
	int BytesReceived;//[Offset: 0x18, Size: 0x4]
	int ContentType;//[Offset: 0x1c, Size: 0x4]
	int ResponseCode;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x1c, Size: 0x3c]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x1747848
	void AddSystem(const FString SystemName, const FString BPPath);// 0x17475d8

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x20, Size: 0xc]
	void Init();// 0x1c01fa0

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x1c, Size: 0xc]
	FString TssBuildInIpInfo;//[Offset: 0x28, Size: 0xc]
	int TssLocal;//[Offset: 0x34, Size: 0x4]
	static int SendSkdData_LuaState();// 0x13bae8c
	static int SendEigeninfoData_LuaState();// 0x13bae8c
	static int OnRecvData_LuaState();// 0x13bae8c
	static int GetUserTag4Lua_LuaState();// 0x13bae8c
	static int GetDeviceFeature_LuaState();// 0x13bae8c
	static int EigenArrayObfuscationVerify_LuaState();// 0x13bae8c

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 0xc]
	SaveGame* SaveGame;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFail;//[Offset: 0x28, Size: 0xc]
	FString FileURL;//[Offset: 0x34, Size: 0xc]
	FString FileSavePath;//[Offset: 0x40, Size: 0xc]
	FString UrlHash;//[Offset: 0x4c, Size: 0xc]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	void Start(FString URL);// 0x17437f8
	static ImageDownloader* MakeDownloaderInGame();// 0x17437d0
	static ImageDownloader* MakeDownloader();// 0x17437a8
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x1743648
	void Cancel();// 0x1743634

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x44, Size: 0x3c]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0x90, Size: 0xc]
	void TickUDPPing(float DeltaTime);// 0x17747ac
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x17744b0
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x17742d0
	void OnPingServerResultDelegate__DelegateSignature(FString address, bool isSuccess, float Time);// 0x1c01fa0
	bool IsChooingZoneAccess();// 0x17742a8
	bool isAllZoneHasPingValue();// 0x1774280
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x17740f0
	float GetZoneServerDelay(FString ServerAddress);// 0x1773f8c
	int GetMinDealyAddress();// 0x1773f64
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x1773dc4

--------------------------------
Class: PingServerInfo

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 0x4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 0x4]
	FString Reason;//[Offset: 0x4, Size: 0xc]
	int Extend;//[Offset: 0x10, Size: 0x4]
	int Extend2;//[Offset: 0x14, Size: 0x4]
	FString MsgData;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0, Size: 0x4]
	<FString,FString> friendsInfo;//[Offset: 0x4, Size: 0x3c]

--------------------------------
Class: LocationInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 0x4]
	double Longitude;//[Offset: 0x8, Size: 0x8]
	double Latitude;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 0x4]
	int Flag;//[Offset: 0x4, Size: 0x4]
	int ErrorCode;//[Offset: 0x8, Size: 0x4]
	int platform;//[Offset: 0xc, Size: 0x4]
	FString Desc;//[Offset: 0x10, Size: 0xc]
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x1c, Size: 0x24]

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 0xc]
	FString MemberNum;//[Offset: 0xc, Size: 0xc]
	FString ChatRoomURL;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: DownloaderInfo
	enum State;//[Offset: 0x0, Size: 0x1]
	FString FileSavePath;//[Offset: 0x4, Size: 0xc]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int BytesSent;//[Offset: 0x14, Size: 0x4]
	int BytesReceived;//[Offset: 0x18, Size: 0x4]
	int ContentType;//[Offset: 0x1c, Size: 0x4]
	int ResponseCode;//[Offset: 0x20, Size: 0x4]
	FString StringContent;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0xc0, Size: 0x4]
	void PushScriptArrayIndexData(FString ParamName, int Index);// 0x3760550
	void PushOneScriptPropertyValues(FString ParamName);// 0x37603f0
	void PushAllScriptPropertyValues();// 0x134e440
	void FetchScriptArrayIndexData(FString ParamName, int Index);// 0x3760254
	void FetchOneScriptPropertyValues(FString ParamName);// 0x37600f4
	void FetchAllScriptPropertyValues();// 0x13ca444
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x375ff9c
	void CallScriptFunction(FString FunctionName);// 0x375fe44

--------------------------------
Class: IntlHelper.BlueprintFunctionLibrary.Object
	static void UpdateXGPushNightTag(bool bInit);// 0x172d138
	static void UpdateXGPushDayTag(bool bInit);// 0x172d0c0
	static void UpdateVoiceUrl(FString regionVoiceUrl);// 0x172cf70
	static FString TimeFormatString(FString Format, const int hours, const int Mins, const int secs);// 0x172cd64
	static void SaveXGTags(FString Language, FString timezone, FString region);// 0x172c9e4
	static void OnSwitchLanguage();// 0x172c9d0
	static void OnChoosingZone(int ZoneID, FString AddrIP, FString regionVoiceUrl);// 0x172c720
	static bool IsRemoteNotificationsEnabled();// 0x172c6f8
	static void HelpshiftUploadLog();// 0x172c6e4
	static void HelpshiftShowFAQsWithInfo();// 0x172c6d0
	static void HelpshiftShowFAQs();// 0x172c6bc
	static void HelpshiftShowConversionWithInfo(FString Name, FString Level, FString Gold);// 0x172c33c
	static void HelpshiftShowConversion();// 0x172c328
	static FString GetSavedXGTimezoneTag();// 0x172c270
	static FString GetSavedXGRegionTag();// 0x172c1b8
	static FString GetSavedXGPushNightTag();// 0x172c100
	static FString GetSavedXGPushDayTag();// 0x172c048
	static FString GetSavedXGLanguageTag();// 0x172bf90
	static int GetLocalTimezone();// 0x172bf68
	static FString GetLocalizeStringWithString(FString sourceString, const int numStringIndex, FString string1, FString string2, FString string3, FString string4);// 0x172bbcc
	static FString GetLocalizeStringWithNum(const int ID, const int numStringIndex, FString string1, FString string2, FString string3, FString string4);// 0x172b870
	static FString GetLocalizeStrByStr(FString Source, FString string1, FString string2, FString string3, FString string4);// 0x172b51c
	static FString GetLocalizeStrByID(const int ID, FString string1, FString string2, FString string3, FString string4);// 0x172b208
	static FString GetLocalizationStringWithID(const int ID);// 0x172b108
	static FString GetLocalizationString(FString Key);// 0x172afcc
	static FString GetLocalizationBattleStringWithID(const int ID);// 0x172aecc
	static FString FormatLocalizeStrByStr(FString Source, out const FString[] stringArr);// 0x172ac8c
	static void DownloadTranslation(FString PatchName);// 0x172ab3c
	static void DownloadServerList();// 0x172ab28
	static void DirectToNotificationSetup();// 0x172ab14
	static void ClearAdjustDeepLink();// 0x172ab00
	static void AdjustParaAnalysis();// 0x172aaec

--------------------------------
Class: TestHUD.Actor.Object
	void TestFunctionNOParam();// 0x12e82e4
	float TestFunctionBP_LUA();// 0x1c01fa0
	float TestFunctionBP();// 0x1c01fa0
	float Function_LUA_Call();// 0x172df20
	float Function_Lua();// 0x172def8
	float Function_CPlus_Call();// 0x172ded0
	float Function_CPlus();// 0x172dea8
	float Function_BP_CPP();// 0x1c01fa0
	float Function_BP_Call_LUA();// 0x172de80
	float Function_BP_Call_CPP();// 0x1c01fa0
	float Function_BP_Call_CPlus();// 0x172de58
	float Function_BP_Call();// 0x172de30
	float Function_BP();// 0x172de08

--------------------------------
Class: NetInterface.Interface.Object

--------------------------------
Class: ClientNetInterface.NetInterface.Interface.Object

--------------------------------
Class: CrashContextProcessor.Object
	void TriggerLoginCrashTest();// 0x17302b4
	void TriggerLobbyCrashTest(int Type);// 0x173023c
	void Initialize();// 0x1730228
	static CrashContextProcessor* GetInstance();// 0x1730200
	void AddAttachFileString(FString Type, bool bClear, out FString strInfo);// 0x172ffc0

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x17306f8
	UAELoadedClassManager* GetLoadedClassManager();// 0x17306d0

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x1730a3c
	static GameBackendHUD* GetInstance();// 0x1730a14
	GameFrontendHUD* GetFirstGameFrontendHUD();// 0x17309ec

--------------------------------
Class: GameFrontendUtils.FrontendUtils.Object

--------------------------------
Class: GameJoyInterface.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x1c, Size: 0x4]
	void ShareVideo(int Channel);// 0x1396184
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x1396184
	void OnVideoShare(FString Msg);// 0x13b9b8c
	void OnShowVideoPlayer(int IsShow);// 0x1396184
	void OnRecordingStart(int Status);// 0x1396184
	void OnRecordingEnd(int64 Duration);// 0x1737764
	void OnManualRecordingStart(int Status);// 0x1396184
	void OnCheckSDKPermission(bool isSuccess);// 0x1343e64
	void OnCheckSDKFeature(int sdkFeatureInt);// 0x1396184
	bool IsSDKFeatureSupport();// 0x1457648
	static GameJoyInterface* GetInstance();// 0x173773c

--------------------------------
Class: GCloudNotice.Object
	NoticeInfo[] GetNotice(FString Scene);// 0x1738f90
	static GCloudNotice* GetInstance();// 0x1738f68
	void ClearNotice();// 0x1738f54

--------------------------------
Class: NoticeInfo
	FString msgID;//[Offset: 0x0, Size: 0xc]
	FString OpenID;//[Offset: 0xc, Size: 0xc]
	FString MsgUrl;//[Offset: 0x18, Size: 0xc]
	enum MsgType;//[Offset: 0x24, Size: 0x1]
	FString MsgScene;//[Offset: 0x28, Size: 0xc]
	FString StartTime;//[Offset: 0x34, Size: 0xc]
	FString endTime;//[Offset: 0x40, Size: 0xc]
	enum MsgContentType;//[Offset: 0x4c, Size: 0x1]
	FString MsgOrder;//[Offset: 0x50, Size: 0xc]
	FString ContentUrl;//[Offset: 0x5c, Size: 0xc]
	PictureInfomation[] PicArray;//[Offset: 0x68, Size: 0xc]
	FString MsgTitle;//[Offset: 0x74, Size: 0xc]
	FString msgContent;//[Offset: 0x80, Size: 0xc]
	FString MsgEditCond;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: PictureInfomation
	enum PicScreenDir;//[Offset: 0x0, Size: 0x1]
	FString PicPath;//[Offset: 0x4, Size: 0xc]
	FString HashValue;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: IMSDKNotice.Object
	IMSDKNoticeInfo[] GetNotice(FString Scene);// 0x1739554
	static IMSDKNotice* GetInstance();// 0x173952c
	void ClearNotice();// 0x1739518

--------------------------------
Class: IMSDKNoticeInfo
	FString msgID;//[Offset: 0x0, Size: 0xc]
	FString OpenID;//[Offset: 0xc, Size: 0xc]
	FString MsgUrl;//[Offset: 0x18, Size: 0xc]
	enum MsgType;//[Offset: 0x24, Size: 0x1]
	FString MsgScene;//[Offset: 0x28, Size: 0xc]
	FString StartTime;//[Offset: 0x34, Size: 0xc]
	FString endTime;//[Offset: 0x40, Size: 0xc]
	enum MsgContentType;//[Offset: 0x4c, Size: 0x1]
	FString MsgOrder;//[Offset: 0x50, Size: 0xc]
	FString ContentUrl;//[Offset: 0x5c, Size: 0xc]
	IMSDKPictureInfomation[] PicArray;//[Offset: 0x68, Size: 0xc]
	FString MsgTitle;//[Offset: 0x74, Size: 0xc]
	FString msgContent;//[Offset: 0x80, Size: 0xc]
	FString MsgEditCond;//[Offset: 0x8c, Size: 0xc]
	FString LoginTimes;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: IMSDKPictureInfomation
	enum PicScreenDir;//[Offset: 0x0, Size: 0x1]
	FString PicPath;//[Offset: 0x4, Size: 0xc]
	FString HashValue;//[Offset: 0x10, Size: 0xc]
	FString PicTitle;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: HotUpdater.Object
	void OnGetVersionData(bool Successful, FString FileURL, out const byte[] Data);// 0x1741adc
	void OnDownloadedOneFile(bool Successful, FString FileURL, out const byte[] Data);// 0x174193c

--------------------------------
Class: InGameUIManager.GameBusinessManager.LogicManagerBase.Object
	class Object[] InGameUIList;//[Offset: 0x108, Size: 0xc]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly);// 0x1743dd4
	void HandleUIMessage(FString UIMessage);// 0x1743d18
	void HandleDynamicDestroy();// 0x1743d04
	void HandleDynamicCreation();// 0x1743cf0

--------------------------------
Class: LiveBroadcast.Object
	void OpenLiveBroadcast(FString URL);// 0x17445e8
	static LiveBroadcast* GetInstance();// 0x17445c0
	void CloseWebView();// 0x17445ac
	void C2JSetIndex(int Index);// 0x1744534

--------------------------------
Class: LoadTexture.BlueprintFunctionLibrary.Object
	static Texture2D* LoadTexture2D(FString imagepath, out bool IsValid, out int OutWidth, out int OutHeight);// 0x1744b54
	static Texture2D* GetTexture2DFromDiskFile(FString FilePath);// 0x1744a98

--------------------------------
Class: LuaBlueprintLibrary.BlueprintFunctionLibrary.Object
	static LuaBPVar StringToLVar(const Object* WorldContextObject, FString Value);// 0x1746dd8
	static LuaBPVar ObjectToLVar(const Object* WorldContextObject, Object* O);// 0x1746cec
	static FString LVarToString(const Object* WorldContextObject, out const LuaBPVar Value);// 0x1746b7c
	static Object* LVarToObject(const Object* WorldContextObject, out const LuaBPVar Value);// 0x1746a8c
	static int LVarToInt(const Object* WorldContextObject, out const LuaBPVar Value);// 0x174699c
	static float LVarToFloat(const Object* WorldContextObject, out const LuaBPVar Value);// 0x17468a8
	static bool LVarToBool(const Object* WorldContextObject, out const LuaBPVar Value);// 0x17467b8
	static LuaBPVar IntToLVar(const Object* WorldContextObject, int Value);// 0x17466cc
	static LuaBPVar FloatToLVar(const Object* WorldContextObject, float Value);// 0x17465e0
	static void CallLuaWithMultiArgs(const Object* WorldContextObject, out FString Function, out const LuaBPVar InA, out const LuaBPVar InB, out const LuaBPVar InC, out const LuaBPVar InD, out const LuaBPVar InE, out const LuaBPVar InF, out LuaBPVar OutA, out LuaBPVar OutB, out LuaBPVar OutC, out LuaBPVar OutD);// 0x1746028
	static void CallLuaWithHUD(const Object* WorldContextObject, GameFrontendHUD* GameFrontendHUD, out FString Function, out const LuaBPVar InA, out const LuaBPVar InB, out const LuaBPVar InC, out const LuaBPVar InD, out LuaBPVar OutA, out LuaBPVar OutB, out LuaBPVar OutC, out LuaBPVar OutD);// 0x1745b30
	static void CallLuaWithArgs(const Object* WorldContextObject, out FString Function, out const LuaBPVar InA, out const LuaBPVar InB, out const LuaBPVar InC, out const LuaBPVar InD, out LuaBPVar OutA, out LuaBPVar OutB, out LuaBPVar OutC, out LuaBPVar OutD);// 0x1745678
	static void CallLua(const Object* WorldContextObject, out FString Function, out LuaBPVar OutA, out LuaBPVar OutB, out LuaBPVar OutC, out LuaBPVar OutD);// 0x17453a0
	static LuaBPVar BoolToLVar(const Object* WorldContextObject, bool Value);// 0x17452ac

--------------------------------
Class: LuaBPVar

--------------------------------
Class: MidasManager.Object
	FString payChannel;//[Offset: 0x3c, Size: 0xc]
	FString midasIDC;//[Offset: 0x48, Size: 0xc]
	FString ZoneID;//[Offset: 0x54, Size: 0xc]
	FString goodsZoneID;//[Offset: 0x60, Size: 0xc]
	FString offerID;//[Offset: 0x6c, Size: 0xc]
	int iAOSShop;//[Offset: 0x78, Size: 0x4]
	FString offerID_H5;//[Offset: 0x7c, Size: 0xc]
	FString payChannel_H5;//[Offset: 0x88, Size: 0xc]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xd0, Size: 0x4]
	void TickMidasPackage();// 0x174c32c
	void Tick(float DeltaTime);// 0x174c2b4
	void SwitchPayChannel(enum switchChannel);// 0x174c23c
	void Subscribe(FString ProductID, int payItem, FString country, FString currency, FString serviceCode, FString serviceName, bool autoPay);// 0x174bbe0
	void SetZoneID(FString inZoneID, FString inGoodsZoneID);// 0x174b970
	void SetRoleInfo(int InChannel, FString OpenID);// 0x174b7d0
	void SetMidasIDC(FString idc);// 0x174b678
	void SetJPAge(int Age);// 0x174b600
	void SetFrontendHUD(GameFrontendHUD* InFrontendHUD);// 0x174b588
	void Reprovide();// 0x12e82e4
	void Pay(FString ProductID, int payItem, FString country, FString currency);// 0x174b1b4
	void Initialize(enum envior);// 0x174b13c
	void H5Pay(FString country);// 0x174afe4
	void GoodsPresent(FString ProductID, int payItem, FString price, FString country, FString currency, FString MetaData);// 0x174a9d8
	void Goods(FString ProductID, int payItem, FString price, FString country, FString currency);// 0x174a4e8
	void GetProductInfo(FString[] listProductID);// 0x174a2d4
	FString getPF();// 0x174a214
	FString GetPayEnvironment();// 0x174a154
	FString GetPayChannel();// 0x174a094
	FString GetPackChannel();// 0x1749fd4
	FString GetOfferID();// 0x1749f14
	FString GetNativePackageTag();// 0x1749e54
	void GetMPInfo(FString country, FString currency);// 0x1749be4
	void GetIntroPrice(FString[] listProductID);// 0x17499d0
	static MidasManager* GetInstance();// 0x17499a8
	FString GetInIDC();// 0x17498e8
	int GetAOSSHOP();// 0x17498c0

--------------------------------
Class: NewButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	enum ClickSound;//[Offset: 0x400, Size: 0x1]
	void SetClickSound(enum inSoundType);// 0x174e130

--------------------------------
Class: PlatformAppraise.Object

--------------------------------
Class: ScreenshotMaker.Object
	static bool SaveToPhotosAlbumEx(FString pathStr);// 0x174efc8
	static bool SaveToPhotosAlbum(FString pathStr);// 0x174ee70
	static void ReMakePicture(FString pathStr, Vector4 Vector4);// 0x174ecb0
	static FString MakePictureToLua(GameFrontendHUD* InFrontendHUD, FString tableName, FString FunctionName, bool isShowUI);// 0x174e924
	static FString MakePicture(bool isShowUI);// 0x174e81c
	static FString MakeBugReprotPic(bool isShowUI);// 0x174e714
	static bool HasCaptured(FString pathStr);// 0x174e5bc
	static int GetSaveStatus();// 0x174e594

--------------------------------
Class: ScriptHelperClient.Object
	static FString ZLIBDecompress(FString CompressedData, int CompressedSize, int UnCompressedSize);// 0x1769ab8
	static int ZLIBCompress_LuaState();// 0x13bae8c
	static void WechatShareWithUrlInfo(out interface class ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, FString _url, int _shareScene);// 0x17697d0
	static void WeChatShareWithMiniApp(out interface class ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, FString _webpageUrl, FString _userName, FString _path, FString _messageExt, FString _messageAction, int _shareScene);// 0x17692c8
	static void WechatShareToFriend(out interface class ClientNetInterface, FString OpenID, FString Title, FString Desc, FString mediaId, FString messageExt, FString mediaTagName, FString msdkExtInfo);// 0x1768e90
	static void WechatShare(out interface class ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, FString _mediaTagName, FString _messageExt);// 0x1768b68
	static void WechatQueryGroup(out interface class ClientNetInterface, FString unionId, FString OpenIdList);// 0x17689d4
	static void WechatJoinGroup(out interface class ClientNetInterface, FString unionId, FString chatRoomNickName);// 0x1768840
	static void WechatCreateGroup(out interface class ClientNetInterface, FString unionId, FString chatRoomName, FString chatRoomNickName);// 0x1768628
	static void WakeupFromSuspendSound();// 0x1768614
	static int VPNTearDown();// 0x17685ec
	static int VPNSetUserInfo(FString InUserId, FString InUserToken, FString InAppId);// 0x1768428
	static int VPNSetPortRange(int Min, int Max);// 0x176836c
	static int VPNSetNodelist(FString InNodelist);// 0x17682b0
	static int VPNPrepare();// 0x1768288
	static int VPNHandUp();// 0x1768260
	static FString VPNGetNodeRegionList();// 0x17681a8
	static int VPNDialUp(FString InRegion);// 0x17680ec
	static FString UrlEncode(FString UnencodedString);// 0x1767fb0
	static void UpdatePublishRegionForBattle();// 0x1767f9c
	static void UnsubscribeFromTopic(FString Topic);// 0x1767ee8
	static void TriggerLoginCrashTest();// 0x1767ed4
	static void TriggerLobbyCrashTest();// 0x1767ec0
	static void TriggerCrash();// 0x1767eac
	static void TapmReport(int Type, FString extraInfo, bool send);// 0x1767cc4
	static void TapmMarkTime(int Type);// 0x1767c54
	static void TApmDisconnectReport(GameFrontendHUD* GameFrontendHUD, int EventID);// 0x1767ba0
	static void TApmDataReport(GameFrontendHUD* GameFrontendHUD, int EventID, FString EventInfo);// 0x17679c0
	static void SwitchUser(out interface class ClientNetInterface, bool useExternalAccount);// 0x17678ec
	static void SwitchSceneCamera(GameFrontendHUD* GameFrontendHUD, FString SceneCameraName, float blendTime, bool bForce);// 0x17676c0
	static void SuspendSound();// 0x17676ac
	static void SubscribeToTopic(FString Topic);// 0x17675f8
	static void StopUIStat(FString UIName, bool bReport);// 0x1767458
	static bool StopTask(GameFrontendHUD* GameFrontendHUD, uint64 TaskID);// 0x1767398
	static bool StopShaderPrecompile();// 0x1767370
	static void StopH5Downloading();// 0x1485dc8
	static void StartUIStat(FString UIName);// 0x1767220
	static bool StartShaderPrecompile();// 0x17671f8
	static bool StartGrayUpdate(GameFrontendHUD* GameFrontendHUD);// 0x1767180
	static void StartCDNUpdateAfterDolphinUpdateFailed(GameFrontendHUD* GameFrontendHUD);// 0x1767110
	static void SleepNoStats(float Seconds);// 0x17670a0
	static void ShutdownUnrealNetwork(GameFrontendHUD* GameFrontendHUD);// 0x1767030
	static void ShowWebView(bool Show);// 0x1766fb8
	static void ShowVideoListDialog();// 0x1485dc8
	static void ShowScreenDebugMessage(FString Message);// 0x1766e68
	static void ShowHelpCenter(FString userID, FString nickname, FString lvl, FString headimg, FString c1, FString c2, FString c3, FString c4, FString c5);// 0x1766980
	static void ShowH5WebView();// 0x1485dc8
	static void ShowGRobot(FString JsonString, FString signString);// 0x1766848
	static void ShorterStreamingDistanceWhenGameEnd(uint32 Distance);// 0x17667d8
	static void ShareWithPhotoByChannel(out interface class ClientNetInterface, FString _imgPath, FString _mediaTagName, FString _messageExt, FString _messageAction, int _channel);// 0x17664f0
	static void SetWeatherInfo(GameFrontendHUD* GameFrontendHUD, int WeatherID, FString WeatherName);// 0x1766310
	static void SetVoiceSwitch(GameFrontendHUD* GameFrontendHUD, bool FirstVoicePopupSwitch, bool GDPRForbidVoiceSwitch, bool GDPRSettingSwitch);// 0x17661b4
	static void SetVoiceReEneterInfo(GameFrontendHUD* GameFrontendHUD, float Duration, int MaxCount);// 0x17660bc
	static void SetUserProperty(FString propertyKey, FString PropertyValue);// 0x1765f84
	static void SetUIStatMaxClickTimes(int Times);// 0x1765f14
	static void SetUIRectOffset(FString uirect);// 0x1765dc4
	static void SetUIElemLayoutJsonConfigSwitch(GameFrontendHUD* GameFrontendHUD, bool UIElemLayoutJsonConfigSwitch);// 0x1765d08
	static void SetTssNetworkStatus(GameFrontendHUD* GameFrontendHUD, int Status);// 0x1765c54
	static void SetTickMemoryInterval(GameFrontendHUD* GameFrontendHUD, float Interval);// 0x1765ba0
	static void SetTestEditorNum(int playerCount, FString Num, FString SceneName, int platform);// 0x17658ac
	static void SetShowFriendObservers(GameFrontendHUD* GameFrontendHUD, bool bShow);// 0x17657f0
	static void SetSelfieSwitch(GameFrontendHUD* GameFrontendHUD, bool SelfieSwitch);// 0x1765734
	static int SetSdkIoctl(GameFrontendHUD* GameFrontendHUD, int request, out FString Token);// 0x17655e0
	static void SetScreenHole(FString sceenHole);// 0x1765490
	static void SetReportBugSwitch(GameFrontendHUD* GameFrontendHUD, bool ReportBugSwitch);// 0x17653d4
	static void SetRegionNoByLua(out interface class ClientNetInterface, int regionNo);// 0x1765308
	static void SetRedBloodSwitch(bool redBloodSwitch);// 0x1765290
	static void SetPlayerBaseInfo(GameFrontendHUD* GameFrontendHUD, FString OpenID, uint64 RoleID, FString PlayerName, FString HeadIconUrl);// 0x1764e6c
	static void SetNationSwitch(GameFrontendHUD* GameFrontendHUD, bool NationAllSwitch, bool NationBattleSwitch, bool NationRankSwitch);// 0x1764d10
	static void SetMyFriendObserversDetail(GameFrontendHUD* GameFrontendHUD, FriendObserver[] FriendObserversDetails);// 0x1764ac4
	static int SetMidasZoneID_LuaState();// 0x13bae8c
	static void SetMidasIDC(FString midasIDC);// 0x1764974
	static bool SetLinkStyle(FString StyleName, int FontSize, FString FontPath, FString FontColor, bool ShowUnderline);// 0x1764554
	static void SetiTOPLbsDelay(int Delay);// 0x17644e4
	static void SetIPRegion(int region_no);// 0x1764474
	static void SetIntDefaultConfig(int Value);// 0x1764404
	static bool SetImageStyle(FString StyleName, int ImageSize, FString imagepath, FString ImageColor);// 0x1764034
	static void SetGRobotEnable(bool Enable);// 0x1763fbc
	static void SetGlobalRedBloodSwitch(bool redBloodSwitch);// 0x1763f44
	static void SetGDPRUserType(GameFrontendHUD* GameFrontendHUD, int GDPRUserType);// 0x1763e90
	static void SetGameStatusMap(GameFrontendHUD* GameFrontendHUD, <FName,FString> GameStatusMap);// 0x1763ca4
	static void SetGameSrvID(GameFrontendHUD* GameFrontendHUD, int GameSrvID);// 0x1763bf0
	static bool SetFontStyle(FString StyleName, int FontSize, FString FontPath, FString FontColor, bool UseShadow);// 0x17637d0
	static void SetDynamicLevels(GameFrontendHUD* GameFrontendHUD, FString[] DynamicLevels);// 0x1763584
	static void SetCrashContextReportLevel(int Level);// 0x1763514
	static void SetCanWatchEnemy(GameFrontendHUD* GameFrontendHUD, bool bCan);// 0x1763458
	static void SetBtnClickInCdFunc();// 0x1763444
	static void SendRetriveBeginnerFinisheGuideReq(GameFrontendHUD* GameFrontendHUD);// 0x17633d4
	static void SendRecordFinishedGuideReq(GameFrontendHUD* GameFrontendHUD, FString TipsID);// 0x176323c
	static void SendPlayEmote(GameFrontendHUD* GameFrontendHUD, int EmoteIndex);// 0x1763188
	static void SendLobbyChat(GameFrontendHUD* GameFrontendHUD, FString gid, FString Content);// 0x1762ed8
	static void SendDirtyToFilter(GameFrontendHUD* GameFrontendHUD, FString dirtyString, FString prefixString, int Uid);// 0x1762be4
	static void SendClientLog(GameFrontendHUD* GameFrontendHUD, FString errorReason, FString errorDescription, bool pullAll);// 0x1762a1c
	static void SaveStringToIntermediateFile(FString String, FString Filename);// 0x17628e4
	static void SaveStringToFile(FString String, FString Filename);// 0x17627ac
	static bool SaveSavFile(FString CompressedData, FString Filename, int CompressedSize, int UnCompressedSize);// 0x17624b4
	static void SaveLuaMemoryFile(FString Filename, FString InputContent, bool RmExistFile);// 0x1762330
	static int SaveArrayToFile_LuaState();// 0x173773c
	static int Save_LuaState();// 0x173773c
	static void RunConsoleCommond(FString commond);// 0x176227c
	static void RoomOwnerInterruptGame(GameFrontendHUD* GameFrontendHUD);// 0x176220c
	static void ReturnToLobby(GameFrontendHUD* GameFrontendHUD);// 0x176219c
	static uint64 RequestFile(GameFrontendHUD* GameFrontendHUD, FString FilePath, bool ForceUpdate);// 0x1761fac
	static void ReportFirebaseEventWithString(FString eventTypeString, FString bundleExtraKey, FString bundleExtraValue, bool isUnique);// 0x1761da4
	static void ReportFirebaseEventWithParam(FString eventTypeString, <FString,FString> _params, bool isUnique);// 0x1761b2c
	static void ReportEventRegisterCompleted();// 0x1761b18
	static void ReportEventLoadingCompleted();// 0x1761b04
	static void ReportContextValuesOnCrash(out FString Json);// 0x1761a40
	static void ReplyInvite(GameFrontendHUD* GameFrontendHUD, FString gid, bool bReply);// 0x1761858
	static bool RemountPakFiles(GameFrontendHUD* GameFrontendHUD);// 0x17617e0
	static void ReloadLuaFiles();// 0x17617cc
	static void ReInitializePuffer(GameFrontendHUD* GameFrontendHUD, bool needCheck, int maxDownloadsPerTask, int maxDownTask, int maxDownloadSpeed);// 0x176163c
	static void QuitVoiceRoom(GameFrontendHUD* GameFrontendHUD);// 0x17615cc
	static void QuitLbsVoiceRoom(GameFrontendHUD* GameFrontendHUD);// 0x176155c
	static void QuitFightChat(GameFrontendHUD* GameFrontendHUD);// 0x17614ec
	static void QuickLogin(out interface class ClientNetInterface);// 0x1761468
	static void QQShareWithPhotoExtra(out interface class ClientNetInterface, FString _imgPath, FString _extraScene, FString _messageExt, int _shareScene);// 0x1761208
	static void QQShareWithPhoto(out interface class ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, int _shareScene);// 0x1760fa8
	static void QQShareToFriend(out interface class ClientNetInterface, int Act, FString OpenID, FString Title, FString Desc, FString targetUrl, FString imgUrl, FString previewText, FString gameTag, FString msdkExtInfo);// 0x1760aa0
	static void QQShareH5WithPhoto(out interface class ClientNetInterface, FString _title, FString _fullURL, int Channel);// 0x17608c8
	static void QQShare(out interface class ClientNetInterface, FString _descShare, FString _titleShare, FString _imgPath, FString _imgUrl, FString _url, int _shareScene);// 0x1760558
	static void QQAddFriend(out interface class ClientNetInterface, FString OpenID, FString Desc, FString Message);// 0x1760340
	static FString ProjectSavedDir();// 0x1760288
	static void ProcessServerRelationChainError(out interface class ClientNetInterface, FString errorMsg, int iForceLoginInterval);// 0x1760098
	static void PostGameStatusToTGPASMap(GameFrontendHUD* GameFrontendHUD, FString Key, <FString,FString> mapData);// 0x175fd90
	static void PandoraSendCmd(FString jsonStr);// 0x14e1810
	static void PandoraInit(FString InOpenId, FString InRoleId, FString InAppId, FString InPlatId, FString InAccType, FString InArea, FString InPartion, FString InCloudTest, FString InAccessToken, FString InSdkVersion, FString InGameVersion, FString InRoleName, FString InPayToken, FString InHeadUrl, FString InChanelId, FString InBelongingId, FString InLanguage, FString InTicket);// 0x175e970
	static void PandoraEnable(bool Enable);// 0x1759908
	static void PandoraClose();// 0x1485dc8
	static void OpenWebviewInGameProcess(FString URL, int Left, int Top, int Right, int Bottom);// 0x175e7a8
	static void OpenURL(FString URL, bool isGetTicket);// 0x175e608
	static void OpenH5FromCache(GameFrontendHUD* GameFrontendHUD, FString ModuleName, int Top, int Right);// 0x175c4d0
	static void OnNotifyFightFriendChat(GameFrontendHUD* GameFrontendHUD, out const FightFriendChat Data);// 0x175e494
	static void OnInviteNextBattle(GameFrontendHUD* GameFrontendHUD, FString gid, FString Name);// 0x175e318
	static void OnGetUpdateStateCDNConfigUrl(GameFrontendHUD* GameFrontendHUD, FString URL);// 0x175e220
	static void OnFilterFinish(GameFrontendHUD* GameFrontendHUD, FString filterText);// 0x175e128
	static void OnEnterLobbyReloadLocalizationResource(GameFrontendHUD* GameFrontendHUD);// 0x175e0b8
	static void OnEnterGameReleaseLocalizationResource(GameFrontendHUD* GameFrontendHUD);// 0x175e048
	static void OnCombatHitFeedback(GameFrontendHUD* GameFrontendHUD, bool bCombatHitFeedbackEnable);// 0x175df8c
	static void OnBattleResult(GameFrontendHUD* GameFrontendHUD, BattleResultData BattleResultData);// 0x175ddec
	static void NotifyBeginnerFinishedGuideUpdated(GameFrontendHUD* GameFrontendHUD, bool GuideSwitch, const PlayerFinishedGuide[] finished_guide, int player_level, int player_exp_type);// 0x175db78
	static bool MountPakFile(FString InPakFilename, FString Key);// 0x175da38
	static int MidasSDKInit_LuaState();// 0x13bae8c
	static int MidasReprovide_LuaState();// 0x13bae8c
	static void MidasPay(FString ProductID, int payItem, FString country, FString currency);// 0x175d838
	static void MidasH5Pay(FString country);// 0x175d784
	static void MidasGoodsPresent(FString ProductID, int payItem, FString price, FString country, FString currency, FString MetaData);// 0x175d474
	static void MidasGoods(FString ProductID, int payItem, FString price, FString country, FString currency);// 0x175d1ec
	static void MessageBoxExt(FString Caption, FString Text);// 0x175d0b4
	static FString MD5HashAnsiString(FString str);// 0x175cedc
	static void Logout(out interface class ClientNetInterface);// 0x175ce58
	static void Login(out interface class ClientNetInterface, uint32 Channel);// 0x175cd8c
	static void LobbySetUserRegion(int InRegion);// 0x175cd1c
	static void LobbySetProxyPortlist(FString InNodePortList);// 0x175cc68
	static void LobbySetProxyNodelist(FString InNodeIpList);// 0x175cbb4
	static void LobbySetEchoPortlist(FString InEchoPortList);// 0x175cb00
	static bool LobbyIsLinkProxy(FString InIp, int InPort);// 0x175ca00
	static void LobbyAddAddress(FString InProtocol, FString InIp, int InPort);// 0x175c884
	static int LoadSavFile_LuaState();// 0x13bae8c
	static int LoadMidasProductInfo_LuaState();// 0x13bae8c
	static int LoadMidasMP_LuaState();// 0x13bae8c
	static int LoadMidasIntroPrice_LuaState();// 0x13bae8c
	static void LoadLuaFile(GameFrontendHUD* GameFrontendHUD, FString Filename);// 0x175c78c
	static FString LoadIntermediateFileToString(FString Filename);// 0x175c650
	static void LoadH5FromCache(GameFrontendHUD* GameFrontendHUD, FString ModuleName, int Top, int Right);// 0x175c4d0
	static FString LoadFileToString(FString Filename);// 0x175c394
	static int LoadFileToArray_LuaState();// 0x173773c
	static int Load_LuaState();// 0x173773c
	static void LaunchUrl(out FString URL);// 0x175c2d0
	static void JumpSettingPage();// 0x175c2bc
	static void JumpNoticeCenterPage();// 0x175c2a8
	static void JoinVoiceRoom(GameFrontendHUD* GameFrontendHUD, FString roomName, FString userID);// 0x175bff8
	static void JoinLbsVoiceRoom(GameFrontendHUD* GameFrontendHUD, FString lbsRoomName, FString userID);// 0x175bd48
	static bool IsWindowOB(GameFrontendHUD* GameFrontendHUD);// 0x175b8e8
	static bool IsUseTypicalResultFlowMode(GameFrontendHUD* GameFrontendHUD);// 0x175bcd0
	static bool IsUpdateSkip(GameFrontendHUD* GameFrontendHUD);// 0x175bc58
	static bool IsUIAutoTest();// 0x175bc30
	static bool IsTypicalMode(GameFrontendHUD* GameFrontendHUD);// 0x175bbb8
	static bool IsTest();// 0x14028e0
	static int IsTableDataExist_LuaState();// 0x13bae8c
	static bool IsSystemVPNOpened();// 0x175bb90
	static bool IsSplitMiniPakVersion();// 0x1482270
	static bool IsSplitMapPakVersion();// 0x17599bc
	static bool isSkipUpdateByRepair(GameFrontendHUD* GameFrontendHUD);// 0x175bb18
	static bool IsShipping();// 0x1485ea8
	static bool IsRemoteNotificationsEnabled();// 0x175baf0
	static bool IsReleaseVersion();// 0x1485ea8
	static bool IsPVEMode(GameFrontendHUD* GameFrontendHUD);// 0x175ba78
	static bool IsPhotoPermissionAvalible();// 0x175ba50
	static bool IsNetworkReachable();// 0x175ba28
	static bool IsNeedClearHiddenUI(FrontendHUD* GameFrontendHUD);// 0x175b9b0
	static bool IsMicroPhonePermissionAvalible();// 0x175b988
	static bool IsLocationPermissionAvalible();// 0x175b960
	static bool IsLiteVersion();// 0x1485ea8
	static bool IsIPhoneFiveS(GameFrontendHUD* GameFrontendHUD);// 0x175b8e8
	static bool IsInstallWX(out interface class ClientNetInterface);// 0x175b85c
	static bool IsInstallWhatsapp(out interface class ClientNetInterface);// 0x175b6b8
	static bool IsInstallVK(out interface class ClientNetInterface);// 0x175b7d0
	static bool IsInstallTwitter(out interface class ClientNetInterface);// 0x175b6b8
	static bool IsInstallQQByiTOP(out interface class ClientNetInterface);// 0x175b6b8
	static bool IsInstallQQ(out interface class ClientNetInterface);// 0x175b744
	static bool IsInstallOpenRec(out interface class ClientNetInterface);// 0x175b6b8
	static bool IsInstallMirrativ(out interface class ClientNetInterface);// 0x175b6b8
	static bool IsInstallMessenger(out interface class ClientNetInterface);// 0x175b6b8
	static bool IsInstallLine(out interface class ClientNetInterface);// 0x175b6b8
	static bool IsForCE();// 0x14028e0
	static bool IsFileReady(GameFrontendHUD* GameFrontendHUD, FString FilePath);// 0x175b518
	static bool IsFileExistsWithPakCheck(FString Filename);// 0x175b45c
	static bool IsFileExistByFileName(FString Filename);// 0x175b3a0
	static bool IsFileExistByExtension(GameFrontendHUD* GameFrontendHUD, FString Filename, FString fileExtension);// 0x175b0e8
	static bool IsFileExist(GameFrontendHUD* GameFrontendHUD, FString Filename);// 0x175af48
	static bool IsEmulatorWhenInit();// 0x175af20
	static bool IsEmulator();// 0x175aef8
	static bool IsEditor();// 0x14028e0
	static bool IsConnected(out interface class ClientNetInterface);// 0x175ae6c
	static bool IsCEVersion();// 0x175ae44
	static bool IsBluetoothPermissionAvalible();// 0x175ae1c
	static bool IsAwakedByNotification();// 0x175adf4
	static void InviteWhatsappOfflineFriends(out interface class ClientNetInterface, FString Title, FString Content);// 0x175ac60
	static void InviteSystemOfflineFriends(out interface class ClientNetInterface, FString Title, FString Content);// 0x175aacc
	static void InviteSMSOfflineFriends(out interface class ClientNetInterface, FString Content);// 0x175a9bc
	static void InviteLineOfflineFriends(out interface class ClientNetInterface, FString Title, FString Content);// 0x175a828
	static void InviteFBOfflineFriends(out interface class ClientNetInterface, FString Title, FString Content, FString link);// 0x175a610
	static void InviteFBFriendsUnregistered(out interface class ClientNetInterface, FString Title, FString Content, FString Extend);// 0x175a3f8
	static void InstallNewApp(GameFrontendHUD* GameFrontendHUD);// 0x14864e8
	static int InitVPN(FString InVPNGUID, FString InClientVersion);// 0x175a2b8
	static void InitQuantumPlatformMisc();// 0x175a2a4
	static void InitLoginAccount(out interface class ClientNetInterface, uint64 AccUin, FString AccPswd);// 0x175a0a0
	static void InitJavaFunctions();// 0x175a08c
	static void InitIMSDKEnv(out interface class ClientNetInterface, uint32 iEnv);// 0x1759fc0
	static void InitializePuffer(GameFrontendHUD* GameFrontendHUD, bool needCheck, int maxDownloadsPerTask, int maxDownTask, int maxDownloadSpeed);// 0x1759e30
	static void InitializeLaggingReporter(GameFrontendHUD* GameFrontendHUD, bool Enable);// 0x1759d74
	static void InitGRobotJavaFunctions();// 0x1759d60
	static void InitGRobot();// 0x1759d4c
	static void InitGCloudRemoteConfig();// 0x1759d38
	static FString HtmlEncode(FString UnencodedString);// 0x1759bfc
	static void HideH5WebView();// 0x1485dc8
	static void HelpshiftShowFAQsWithInfo();// 0x1759be8
	static void HelpshiftShowConversion();// 0x1759bd4
	static void HelpshiftRequestUnreadMessagesCount();// 0x1759bc0
	static int HelpshiftGetUnreadMessgesCount();// 0x1759b98
	static void HelpshiftClearUnreadMessgesCount();// 0x1759b84
	static bool HaveReceivedNoticeCallback();// 0x1759b5c
	static bool HasRemoteConfigReady();// 0x1759b34
	static bool HasNotice(int Type, FString Scene);// 0x1759a34
	static bool HasNotchInScreen();// 0x1759a0c
	static bool HasInitGRobot();// 0x17599e4
	static bool HasDownloadedBasePak();// 0x17599bc
	static bool HasActiveWifi();// 0x1759994
	static void GotoPlatformAppraise();// 0x1759980
	static void GMH5Enable(bool Flag);// 0x1759908
	static FString GetWebviewVersion();// 0x1759850
	static FString GetWebViewTicket(out interface class ClientNetInterface);// 0x175973c
	static FString GetUnrealNetworkStatus(GameFrontendHUD* GameFrontendHUD);// 0x175963c
	static FString GetUIRectOffset();// 0x1759584
	static FString GetToken(out interface class ClientNetInterface);// 0x1759470
	static FString GetTelecomSvr();// 0x17593b8
	static int GetTableDataOld_LuaState();// 0x13bae8c
	static int GetTableData_LuaState();// 0x13bae8c
	static int GetTableCount(FString tableName);// 0x17592fc
	static int GetTable_LuaState();// 0x13bae8c
	static int GetSystemLanguage_LuaState();// 0x13bae8c
	static FString GetSrcVersion();// 0x1759244
	static FString GetSplitMapConfigInfo();// 0x175918c
	static FString GetSpecialData();// 0x17590d4
	static int GetShaderPrecompileProgress();// 0x17590ac
	static int GetServerDelay(FString ServerAddress);// 0x1758ff0
	static int GetScreenWidthForWebview();// 0x1758fc8
	static int GetScreenWidth();// 0x1758fc8
	static FString GetScreenHole();// 0x1758f10
	static int GetScreenHight();// 0x1758ee8
	static int GetScreenHeightForWebview();// 0x1758ee8
	static int GetScreenDensity();// 0x173773c
	static FString GetRemarkNameByGIDWithObj(Object* Obj, FString gid, FString PlayerName);// 0x1758bb0
	static FString GetRemarkNameByGID(GameFrontendHUD* GameFrontendHUD, FString gid, FString PlayerName);// 0x1758878
	static FString GetRegisterChannelID(out interface class ClientNetInterface);// 0x1758764
	static bool GetRedBloodSwitch();// 0x175873c
	static bool GetPufferInitResult(GameFrontendHUD* GameFrontendHUD);// 0x17586c4
	static uint32 GetPufferInitErrCode(GameFrontendHUD* GameFrontendHUD);// 0x175864c
	static FString GetPublishRegion();// 0x1758594
	static FString GetPingReportInfo(GameFrontendHUD* GameFrontendHUD);// 0x1758494
	static FString GetPingReportData(GameFrontendHUD* GameFrontendHUD);// 0x1758394
	static FString GetPhoneType();// 0x17582dc
	static FString GetPhoneDeviceID();// 0x1758224
	static FString GetPhoneAdvertisingID();// 0x175816c
	static FString GetPackChannel();// 0x17580b4
	static FString GetOSVersion();// 0x1757ffc
	static FString GetNotificationExtraDataString(FString Key);// 0x1757ec0
	static int[] GetNotchSize();// 0x1757e08
	static FString GetNetWorkType();// 0x1757d50
	static void GetNearbyPersonInfo(out interface class ClientNetInterface);// 0x1752090
	static FString GetNativeVersion();// 0x1757c98
	static FString GetNativePackageTag();// 0x1757be0
	static FString[] GetMyFriendObservers(GameFrontendHUD* GameFrontendHUD);// 0x1757a44
	static int GetMidasPF_LuaState();// 0x13bae8c
	static int GetMidasPayChannel_LuaState();// 0x13bae8c
	static int GetMemoryStats_LuaState();// 0x13bae8c
	static int GetMemorySize();// 0x1757a1c
	static int GetLoginChannel(out interface class ClientNetInterface);// 0x1757990
	static void GetLocationInfo(out interface class ClientNetInterface);// 0x1752090
	static int GetLocalTimezone_LuaState();// 0x13bae8c
	static int GetiTOPLbsDelay();// 0x1757968
	static FString GetITopGameId(out interface class ClientNetInterface);// 0x1757854
	static bool GetIsOpenBattlePlayback(GameFrontendHUD* GameFrontendHUD);// 0x17577dc
	static int GetIPRegion();// 0x17577b4
	static FString GetIpAddrByHost(FString Host);// 0x1757678
	static FString GetIpAddr();// 0x17575c0
	static int GetIntDefaultOffset();// 0x1757598
	static FString GetInstallChannelID(out interface class ClientNetInterface);// 0x1757484
	static bool GetH5CacheStatus(FString ModuleName);// 0x17573c8
	static void GetGvoiceReconnectInfo(GameFrontendHUD* GameFrontendHUD, const <FString,FString> Data);// 0x17571dc
	static GroupInfoWrapper GetGroupInfo(out interface class ClientNetInterface, int SnsAction);// 0x1756ff4
	static int GetGoogleServiceVersionCode();// 0x1756fcc
	static FString GetGLVersion();// 0x1756f14
	static FString GetGLType();// 0x1756e5c
	static FString GetGameStatus(GameFrontendHUD* GameFrontendHUD);// 0x1756d5c
	static float GetFPS();// 0x1756d34
	static uint32 GetFileSizeOnDisk(FString FilePath);// 0x1756bdc
	static uint32 GetFileSizeCompressed(GameFrontendHUD* GameFrontendHUD, FString FilePath);// 0x1756a3c
	static void GetFBFriendsUnregistered(out interface class ClientNetInterface, uint32 page, uint32 count, uint32 Type, FString Extend);// 0x175685c
	static FString GetEncodeUrl(FString URL);// 0x1756684
	static FString GetEmulatorName();// 0x17565cc
	static FString GetDSVersion(GameFrontendHUD* GameFrontendHUD);// 0x17564cc
	static FString GetDevicePlatformName();// 0x1756414
	static FString GetDeviceInfo();// 0x175635c
	static uint64 GetDeviceFreeSpace();// 0x1756334
	static int GetCurrentZoneID();// 0x175630c
	static int GetCurrentLanguage_LuaState();// 0x13bae8c
	static int GetCurrentChannel(GameFrontendHUD* GameFrontendHUD);// 0x1756294
	static FString GetCpuType();// 0x17561dc
	static void GetCDNUpdateInfo(GameFrontendHUD* GameFrontendHUD, const <FString,FString> Data);// 0x1755ff0
	static FString GetAreaIPNo();// 0x1755f38
	static FString GetAppVersion();// 0x1755e80
	static FString GetApplicationVersion();// 0x1755dc8
	static FString GetAOSSHOP();// 0x1755d10
	static FString GetAndroidSysInfo();// 0x1755c58
	static int GetAndroidSOVersion();// 0x1755c30
	static int GetAndroidBuildForArm();// 0x1755c08
	static FString GetAlphaTexturePath(FString Path);// 0x1755acc
	static FString GetAccessToken(out interface class ClientNetInterface);// 0x17559b8
	static void GenerateQRImage(out interface class ClientNetInterface, const int Tag, const int Size, FString Content, FString logoPath);// 0x1755798
	static void GEMReportSubEvent(GameFrontendHUD* GameFrontendHUD, FString EventName, FString SubEventName, out const FString[] EventParams);// 0x1755520
	static void GEMReportEvent(GameFrontendHUD* GameFrontendHUD, FString EventName, <FString,FString> EventParams);// 0x1755218
	static void GEMReportEnterLobbyEvent(GameFrontendHUD* GameFrontendHUD, bool isSuccess, FString strDesc);// 0x1755030
	static FString GCloudRemoteConfigGetString(FString InKey, FString InDefaultValue);// 0x1754e70
	static int GCloudRemoteConfigGetInt(FString InKey, int InDefaultValue);// 0x1754d70
	static bool GCloudRemoteConfigGetBool(FString InKey, bool InDefaultValue);// 0x1754c68
	static void GameMasterSetUserInfo(FString InPaidInfo, FString InUserToken, FString InAppId);// 0x1754aac
	static void GameMasterSetUsableRegion(FString InRegion);// 0x17549f8
	static void GameMasterSetUdpEchoPort(int InPort);// 0x1754988
	static void GameMasterSetOnlyWifiAccel(bool InOn);// 0x1754910
	static void GameMasterSetFreeFlowUser(int InType);// 0x17548a0
	static void GameMasterOnNetDelay(int InMillis);// 0x1754830
	static bool GameMasterIsAccelOpened();// 0x1754808
	static int GameMasterInit(const int InHookType, FString InGuid, FString InLibs, const int InEchoPort);// 0x1754640
	static FString GameMasterGetWebUIUrl(int InType);// 0x1754540
	static FString GameMasterGetVIPValidTime();// 0x1754488
	static void GameMasterClearAccelAddr();// 0x1754474
	static void GameMasterBeginRound(FString InOpenId, FString InPvpId);// 0x175433c
	static void GameMasterAddAccelAddr(FString InProtocol, FString InIp, const int InPort);// 0x17541c0
	static void GameJoySwitchOn(int isOn);// 0x14864e8
	static void GameJoyStopManualRecord();// 0x1485dc8
	static void GameJoyStartMomentsRecord();// 0x1485dc8
	static void GameJoyStartManualRecord();// 0x1485dc8
	static void GameJoySetVideoQuality(int quality);// 0x14864e8
	static void GameJoySetMomentRecordSwitchOn(int isOn);// 0x14864e8
	static void GameJoySetLuaguage();// 0x1485dc8
	static void GameJoySetCurrentRecorderPosition(float X, float Y);// 0x1750858
	static bool GameJoyIsSDKFeatureSupport();// 0x14028e0
	static void GameJoyGenerateMomentsVideo(TimeStamp[] shortVideosTimeStampList, TimeStamp[] largeVideosTimeStampList, FString Title, <FString,FString> extraInfo);// 0x1753b5c
	static void GameJoyEndMomentsRecord();// 0x1485dc8
	static void GameJoyClearMomentsVideo();// 0x1485dc8
	static void ExitGameForSafety();// 0x1753b48
	static void ExitGame();// 0x1753b34
	static void EnterLoading(GameFrontendHUD* GameFrontendHUD);// 0x1753ac4
	static void EnterFightChat(GameFrontendHUD* GameFrontendHUD, FString gid);// 0x175392c
	static void EnterBattle(GameFrontendHUD* GameFrontendHUD, FString HostnameOrIP, uint32 Port, uint32 PlayerKey, FString PlayerName, FString PacketKey, uint64 GameID, bool IsObserver, int WaterType);// 0x17533e4
	static FString EncryptUID(FString sUid, FString sKey);// 0x17530f4
	static void EnableTxtCheck();// 0x1485dc8
	static void EnableReportGVoiceEvent(GameFrontendHUD* GameFrontendHUD, bool GVoiceInitGVoiceComponentReportEnable, bool GVoiceJoinRoomReportEnable, bool GVoiceQuitRoomReportEnable, bool GVoiceJoinLbsRoomReportEnable, bool GVoiceQuitLbsRoomReportEnable, bool GVoiceOnJoinTeamRoomReportEnable, bool GVoiceOnJoinLbsRoomReportEnable);// 0x1752e5c
	static void EnableLocalizationStatus(GameFrontendHUD* GameFrontendHUD, bool Status);// 0x1752da0
	static void EnableGvoiceGemReport(GameFrontendHUD* GameFrontendHUD, bool Enable);// 0x1752ce4
	static void EnableGvoice(GameFrontendHUD* GameFrontendHUD, bool Enable);// 0x1752c28
	static void EnableDeathPlayback(GameFrontendHUD* GameFrontendHUD, bool bEnable, bool bFlush);// 0x1752b1c
	static void Disconnect(out interface class ClientNetInterface);// 0x1752a98
	static void DisableRepairResource(GameFrontendHUD* GameFrontendHUD);// 0x1752a28
	static void DirectToSetting();// 0x1752a14
	static void DestroyConnector(out interface class ClientNetInterface);// 0x1752990
	static void DeleteDirectory(FString FilePath);// 0x1752840
	static FString ConvertGamePathToRelativeFilePath(FString Path);// 0x1752704
	static void ConnectToURL(out interface class ClientNetInterface, FString URL, int ConnectTimeOutSeconds);// 0x1752514
	static void CloseWebView();// 0x1485dc8
	static void CloseVideoListDialog();// 0x1485dc8
	static void CloseH5WebView(GameFrontendHUD* GameFrontendHUD);// 0x14864e8
	static void CloseGRobot();// 0x1752500
	static void ClipBoardCopy(FString Text);// 0x17523b0
	static void ClientKickPlayerFromGame(GameFrontendHUD* GameFrontendHUD);// 0x1752340
	static void ClientEnterWarMode(GameFrontendHUD* GameFrontendHUD);// 0x17522d0
	static void ClientConfirmReturnToGame(GameFrontendHUD* GameFrontendHUD);// 0x1752260
	static void ClientConfirmMisKill(GameFrontendHUD* GameFrontendHUD, int bConfirm);// 0x17521ac
	static void ClearChannelID(out interface class ClientNetInterface);// 0x1752128
	static void ClearAdjustDeepLink();// 0x1752114
	static void CleanLocation(out interface class ClientNetInterface);// 0x1752090
	static void CheckPhotoPermission();// 0x175207c
	static bool CheckNoticeCenterPermission();// 0x1752054
	static void CheckMicroPhonePermission();// 0x1752040
	static void CheckLocationPermission();// 0x175202c
	static bool CheckIsiOS13();// 0x1752004
	static void CheckBluetoothPermission();// 0x1751ff0
	static void ChangeLocalizationReleaseTestStatus(GameFrontendHUD* GameFrontendHUD, bool Status);// 0x1751f34
	static void CallIngameFirstTimeTips(GameFrontendHUD* GameFrontendHUD, FString tableName, FString FunctionName);// 0x1751db8
	static void CacheH5WebView(FString ModuleName);// 0x1751d04
	static void BuglySetAppVersion(out interface class ClientNetInterface, FString Version);// 0x1751b58
	static void BuglyPutUserData(out interface class ClientNetInterface, FString Key, FString Value);// 0x1751894
	static void BuglyPostException(out interface class ClientNetInterface, const int Category, FString Reason);// 0x17516a0
	static void BuglyLog(out interface class ClientNetInterface, int Level, FString Tag, FString Log, bool needDump);// 0x1751344
	static void AutoTestWaitForSecond(int Sec);// 0x17512d4
	static bool AutoTestWaitForJumpPlane();// 0x17512ac
	static void AutoTestVehicleDriverShoot(GameFrontendHUD* GameFrontendHUD);// 0x14864e8
	static void AutoTestVaultWall();// 0x1751298
	static void AutoTestUseItemClientEx(GameFrontendHUD* GameFrontendHUD, int ItemID);// 0x1750858
	static void AutoTestUseItem(int ItemID);// 0x1751228
	static void AutoTestThrowBoom(int SkillID);// 0x17511b8
	static void AutoTestSwitchWeapon(int WeaponType);// 0x1751148
	static void AutoTestSwitchMode(FString FunName);// 0x1751094
	static void AutoTestStopRecordStats();// 0x1751080
	static void AutoTestStartRecordStats(FString FileStr);// 0x1750fcc
	static void AutoTestStartFire(int X, int Y, int Z, int Sec);// 0x1750e90
	static void AutoTestSpecating(GameFrontendHUD* GameFrontendHUD, int leftTeamCnt);// 0x1750858
	static void AutoTestSpawnVehicle(FString ResPath);// 0x1750d40
	static void AutoTestSetVehicleRotation(int X, int Y, int Z);// 0x1750c48
	static void AutoTestSetRecordFrequency(uint32 Frequency);// 0x1750bd8
	static void AutoTestSetActorRotation(float Rate, float Speed);// 0x1750b24
	static void AutoTestSetActorPitch(float Rate);// 0x1750ab4
	static void AutoTestSetActorFacePoint(int X, int Y, int Z);// 0x17509bc
	static Vector2D AutoTestPickupItem();// 0x1750984
	static void AutoTestOpenScope(bool bOpenScope);// 0x175090c
	static void AutoTestMustDie(GameFrontendHUD* GameFrontendHUD, int leftTeamCnt);// 0x1750858
	static void AutoTestMoveVehicleForward(float Speed, float Rate, float Sec);// 0x1750760
	static void AutoTestMoveToPoint(int X, int Y, int Z);// 0x1750668
	static void AutoTestJumpPlane(int Sec);// 0x17505f8
	static void AutoTestJump();// 0x17505e4
	static void AutoTestInputMovement(float Rate);// 0x1750574
	static void AutoTestGMGotoClientEx(GameFrontendHUD* GameFrontendHUD, int X, int Y, int Z);// 0x1750438
	static void AutoTestGMGoto(int X, int Y, int Z);// 0x1750340
	static void AutoTestGMCommand(FString Command);// 0x175028c
	static Vector AutoTestGetVehicleLocation();// 0x175024c
	static void AutoTestGetRuntimeStats();// 0x1750238
	static void AutoTestGetOnVehicle();// 0x1750224
	static void AutoTestGetOffVehicle();// 0x1750210
	static Vector AutoTestGetNearVehiclePos();// 0x17501d0
	static FString AutoTestGetMapName();// 0x1750118
	static FString AutoTestGetGameModeState();// 0x1750060
	static Vector AutoTestGetFrameInfo();// 0x1750020
	static int AutoTestGetDis2D(int X, int Y, int Z, int x2, int y2, int z2);// 0x174fe4c
	static FString AutoTestGetActorName();// 0x174fd94
	static Vector AutoTestGetActorLocation(FString PlayerName);// 0x174fcc8
	static void AutoTestEnableUITest();// 0x174fcb4
	static void AutoTestDropItemClientEx(GameFrontendHUD* GameFrontendHUD, int ItemID, int nCount);// 0x174fa10
	static void AutoTestContinuousMoveTo(float X, float Y, float Z);// 0x174fbbc
	static void AutoTestConsoleCommand(FString Command);// 0x174fb08
	static void AutoTestAddItemClientEx(GameFrontendHUD* GameFrontendHUD, int ItemID, int nCount);// 0x174fa10
	static void AutoTestAddItem(int ItemID, int nCount);// 0x174f95c
	static bool AndroidShouldShowPermissionRationale();// 0x174f934
	static bool AndroidCheckPermission();// 0x174f90c
	static void AdjustParaAnalysis();// 0x174f8f8
	static void AddCrashContextData(int Key, FString Val, bool bAppendTimeStamp, int reportLevel);// 0x174f76c

--------------------------------
Class: FightFriendChat
	FString Uid;//[Offset: 0x0, Size: 0xc]
	FString Name;//[Offset: 0xc, Size: 0xc]
	FString Msg;//[Offset: 0x18, Size: 0xc]
	bool selfMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: BattleResultData
	FString Reason;//[Offset: 0x0, Size: 0xc]
	uint32 RemainingPlayerCount;//[Offset: 0xc, Size: 0x4]
	uint32 TotalPlayerCount;//[Offset: 0x10, Size: 0x4]
	uint32 RemainingTeamCount;//[Offset: 0x14, Size: 0x4]
	uint32 TotalTeamCount;//[Offset: 0x18, Size: 0x4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	uint32 ShootWeaponShotNum;//[Offset: 0x20, Size: 0x4]
	uint32 ShootWeaponShotAndHitPlayerNum;//[Offset: 0x24, Size: 0x4]
	uint32 HealTimes;//[Offset: 0x28, Size: 0x4]
	float marchDistance;//[Offset: 0x2c, Size: 0x4]
	float DriveDistance;//[Offset: 0x30, Size: 0x4]
	uint32 destroyVehicleNum;//[Offset: 0x34, Size: 0x4]
	uint32 add_exp;//[Offset: 0x38, Size: 0x4]
	uint32 add_gold;//[Offset: 0x3c, Size: 0x4]
	uint64 battle_id;//[Offset: 0x40, Size: 0x8]
	uint32 max_game_num;//[Offset: 0x48, Size: 0x4]
	uint32 person_rank;//[Offset: 0x4c, Size: 0x4]
	uint32 team_rank;//[Offset: 0x50, Size: 0x4]
	MemBTResultData[] BP_ARRAY_TeammateList;//[Offset: 0x54, Size: 0xc]
	ResultRatingData BP_STRUCT_BTRating;//[Offset: 0x60, Size: 0x18]

--------------------------------
Class: MemBTResultData
	FString Name;//[Offset: 0x0, Size: 0xc]
	uint32 Kill;//[Offset: 0xc, Size: 0x4]
	FString State;//[Offset: 0x10, Size: 0xc]
	float travelDistance;//[Offset: 0x1c, Size: 0x4]
	float DamageAmount;//[Offset: 0x20, Size: 0x4]
	float surviveTime;//[Offset: 0x24, Size: 0x4]
	uint32 AssistNum;//[Offset: 0x28, Size: 0x4]
	uint32 HeadShotNum;//[Offset: 0x2c, Size: 0x4]
	uint32 rescueTimes;//[Offset: 0x30, Size: 0x4]
	float HealAmount;//[Offset: 0x34, Size: 0x4]
	uint64 Uid;//[Offset: 0x38, Size: 0x8]
	int8 ShouldShowAddFriendBtn;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: ResultRatingData
	int rank_rating;//[Offset: 0x0, Size: 0x4]
	int kill_rating;//[Offset: 0x4, Size: 0x4]
	int win_rating;//[Offset: 0x8, Size: 0x4]
	int change_rank_rating;//[Offset: 0xc, Size: 0x4]
	int change_kill_rating;//[Offset: 0x10, Size: 0x4]
	int change_win_rating;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: PlayerFinishedGuide
	int guideID;//[Offset: 0x0, Size: 0x4]
	int FinishedCounts;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TimeStamp
	FString Title;//[Offset: 0x0, Size: 0xc]
	int Priority;//[Offset: 0xc, Size: 0x4]
	int StartTime;//[Offset: 0x10, Size: 0x4]
	int endTime;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ScriptHelperEngine.Object

--------------------------------
Class: UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: UAELobbyGameMode.UAEClientGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: UAELobbyPlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: UTRichTextBlock.Widget.Visual.Object
	FString ContentText;//[Offset: 0xcc, Size: 0xc]
	SlateFontInfo Font;//[Offset: 0xe8, Size: 0x40]
	bool bSupportHyLink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bSupportImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	LinearColor TextColor;//[Offset: 0x12c, Size: 0x10]
	byte Justification;//[Offset: 0x13c, Size: 0x1]
	byte TextVerticalJustification;//[Offset: 0x13d, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 0x1]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x140, Size: 0x518]
	Margin HScrollBarPadding;//[Offset: 0x658, Size: 0x10]
	Margin VScrollBarPadding;//[Offset: 0x668, Size: 0x10]
	float WrapTextAt;//[Offset: 0x678, Size: 0x4]
	Margin Margin;//[Offset: 0x67c, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x68c, Size: 0x4]
	FString HyperlinkDecoratorTag;//[Offset: 0x690, Size: 0xc]
	FString HyperlinkCallBackFunctionName;//[Offset: 0x69c, Size: 0xc]
	FString HyperlinkCallBackTableName;//[Offset: 0x6a8, Size: 0xc]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x890, Size: 0x4]
	void SetText(FText InText);// 0x1772eb0
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x1772e38
	FText GetText();// 0x1772cdc

--------------------------------
Class: AEVarButton.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0xdc, Size: 0x4]
	ButtonStyle WidgetStyle;//[Offset: 0xe0, Size: 0x298]
	LinearColor ColorAndOpacity;//[Offset: 0x378, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x388, Size: 0x10]
	byte ClickMethod;//[Offset: 0x398, Size: 0x1]
	byte TouchMethod;//[Offset: 0x399, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 0x1]
	bool IsPassMouseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 0x1]
	FString ButtonVar;//[Offset: 0x39c, Size: 0xc]
	delegate OnButtonClicked;//[Offset: 0x3a8, Size: 0xc]
	delegate OnButtonPressed;//[Offset: 0x3b4, Size: 0xc]
	delegate OnButtonReleased;//[Offset: 0x3c0, Size: 0xc]
	delegate OnButtonHovered;//[Offset: 0x3cc, Size: 0xc]
	delegate OnButtonUnhovered;//[Offset: 0x3d8, Size: 0xc]
	delegate OnMouseButtonDownEvent;//[Offset: 0x3e8, Size: 0x10]
	delegate OnClicked;//[Offset: 0x400, Size: 0xc]
	delegate OnPressed;//[Offset: 0x40c, Size: 0xc]
	delegate OnReleased;//[Offset: 0x418, Size: 0xc]
	delegate OnHovered;//[Offset: 0x424, Size: 0xc]
	delegate OnUnhovered;//[Offset: 0x430, Size: 0xc]
	void SetTouchMethod(byte InTouchMethod);// 0x17737e8
	void SetStyle(out const ButtonStyle InStyle);// 0x177373c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x17736c0
	void SetClickMethod(byte InClickMethod);// 0x1773648
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x17735cc
	bool IsPressed();// 0x17735a4

--------------------------------
Class: GCloudNet.Object
	GCloudSDK* _GCloudSDKInst;//[Offset: 0x234, Size: 0x4]
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x17a137c
	void OnTConndAuthFailDelegate();// 0x17a1368
	void OnShareNotify(int Result, int platform);// 0x17a12ac
	void OnReceiveDataNotify(int Result, byte[] Msg);// 0x17a110c
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x17a1000
	void OnQRCodeGenQRImg(int Tag, int Ret, FString imgPath);// 0x17a0ebc
	void OnNearByPersonInfoNotify(out const NearByPersonInfo[] Info);// 0x17a0e10
	void OnMigrateNotify(int Result);// 0x17a0d98
	void OnLaunchInfo(FString roominfo);// 0x17a0cdc
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x17a0c1c
	void OnGetWebviewActionNotify(FString webviewinfo);// 0x17a0ac4
	void OnGetPlatformFriendsNotify(out const PlatformFriendInfoMap platformFriends);// 0x17a09b4
	void OnGetCountryNoByIMSDK(int country);// 0x17a093c
	void OnGCloudStateChangeNotify(int State, int Param1, int Param2, int param3);// 0x17a07f4
	void OnGCloudGetLocationInfoNotify(out const LocationInfoWrapper locationInfo);// 0x17a0770
	void OnGCloudDisconnectedNotify(int Result);// 0x17a06f8
	void OnGCloudConnectedNotify(int IsConnected, int nResult);// 0x17a063c
	void OnGameMasterEvent(FString EvenName, int Result);// 0x17a04a0
	void OnBindIntlNotify(int bindEventID);// 0x17a0428
	void OnAccountLogoutNotify(int Result);// 0x17a03b0
	void OnAccountLoginNotify(int Result, FString OpenID, int Channel, FString resultMsg);// 0x17a00ac
	void OnAccountInitializeNotify(int Result);// 0x1396184
	void OnAccessTokenRefreshedNotify(int Result);// 0x1396184

--------------------------------
Class: GCloudSDK.Object
	bool OpenBuglyLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	static void UploadImage(FString _imgPath);// 0x17a2420
	void ShareWithPhotoByChannel_Simple(FString _imgPath, FString _title, FString _content, int _channel);// 0x17a2214
	static void ShareFacebookLink(FString ftitle, FString fdesc, FString fsharelink);// 0x17a2058
	void InviteFBFriendsUnregistered_Link(FString _title, FString _content, FString _link, FString _extend);// 0x17a1e0c
	static FString GetUploadUrl();// 0x17a1d54
	static int GetUploadStatus();// 0x17a1d2c

--------------------------------
Class: NearByPersonInfo
	FString OpenID;//[Offset: 0x0, Size: 0xc]
	FString gender;//[Offset: 0xc, Size: 0xc]
	bool IsFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int Distance;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GCloudSDKDelegates.Object
	delegate ConnectNotifyDelegate;//[Offset: 0x1c, Size: 0xc]
	delegate ConnectStateChangedNotifyDelegate;//[Offset: 0x28, Size: 0xc]
	delegate DisconnectNotifyDelegate;//[Offset: 0x34, Size: 0xc]
	delegate ReceiveDataNotifyDelegate;//[Offset: 0x40, Size: 0xc]
	delegate AccountInitializeNotifyDelegate;//[Offset: 0x4c, Size: 0xc]
	delegate AccountLoginNotifyDelegate;//[Offset: 0x58, Size: 0xc]
	delegate AccessTokenRefreshedNotifyDelegate;//[Offset: 0x64, Size: 0xc]
	delegate AccountLogoutNotifyDelegate;//[Offset: 0x70, Size: 0xc]
	delegate ShareNotifyDelegate;//[Offset: 0x7c, Size: 0xc]
	delegate GroupNotifyDelegate;//[Offset: 0x88, Size: 0xc]
	delegate QuickLoginNotifyDelegate;//[Offset: 0x94, Size: 0xc]
	delegate QRCodeGenQRImgDelegate;//[Offset: 0xa0, Size: 0xc]
	delegate QRCodeLaunchDelegate;//[Offset: 0xac, Size: 0xc]
	delegate WebviewNotifyDelegate;//[Offset: 0xb8, Size: 0xc]
	delegate TConndAuthFailDelegate;//[Offset: 0xc4, Size: 0xc]
	delegate LocationInfoDelegate;//[Offset: 0xd0, Size: 0xc]
	delegate NearByPersonInfoDelegate;//[Offset: 0xdc, Size: 0xc]
	delegate GameMasterEventDelegate;//[Offset: 0xe8, Size: 0xc]

--------------------------------
Class: IMSDKConfig.Object
	FString IMSDK_GAME_ID;//[Offset: 0x1c, Size: 0xc]
	FString IMSDK_SERVER_SDKAPI_RELEASE;//[Offset: 0x28, Size: 0xc]
	FString IMSDK_SERVER_NOTICE_RELEASE;//[Offset: 0x34, Size: 0xc]
	FString IMSDK_SERVER_HELP_RELEASE;//[Offset: 0x40, Size: 0xc]
	FString IMSDK_SERVER_HELP_SCHEME_RELEASE;//[Offset: 0x4c, Size: 0xc]
	FString IMSDK_SERVER_CONFIG_RELEASE;//[Offset: 0x58, Size: 0xc]
	FString IMSDK_LOG_LEVEL_RELEASE;//[Offset: 0x64, Size: 0xc]
	FString IMSDK_DEBUG_RELEASE;//[Offset: 0x70, Size: 0xc]
	FString IMSDK_INNER_VOLLEY_DEBUG_RELEASE;//[Offset: 0x7c, Size: 0xc]
	FString IMSDK_SERVER_SDKAPI_TEST;//[Offset: 0x88, Size: 0xc]
	FString IMSDK_SERVER_NOTICE_TEST;//[Offset: 0x94, Size: 0xc]
	FString IMSDK_SERVER_HELP_TEST;//[Offset: 0xa0, Size: 0xc]
	FString IMSDK_SERVER_HELP_SCHEME_TEST;//[Offset: 0xac, Size: 0xc]
	FString IMSDK_SERVER_CONFIG_TEST;//[Offset: 0xb8, Size: 0xc]
	FString IMSDK_LOG_LEVEL_TEST;//[Offset: 0xc4, Size: 0xc]
	FString IMSDK_DEBUG_TEST;//[Offset: 0xd0, Size: 0xc]
	FString IMSDK_INNER_VOLLEY_DEBUG_TEST;//[Offset: 0xdc, Size: 0xc]

--------------------------------
Class: IMSDKHelper.Object
	bool isBindFB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool isBindGPGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool isBindGP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool isBindGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool isBindVK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool isBindTwitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool isBindWeChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool isBindLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	bool isBindQQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	int iBindFBRetCode;//[Offset: 0x28, Size: 0x4]
	int iBindFBThirdRetCode;//[Offset: 0x2c, Size: 0x4]
	FString strBindFBUserName;//[Offset: 0x30, Size: 0xc]
	int iBindGPGCRetCode;//[Offset: 0x3c, Size: 0x4]
	int iBindGPGCThirdRetCode;//[Offset: 0x40, Size: 0x4]
	FString strBindGPGCUserName;//[Offset: 0x44, Size: 0xc]
	FString strBindTwitterUserName;//[Offset: 0x50, Size: 0xc]
	FString strBindWeChatUserName;//[Offset: 0x5c, Size: 0xc]
	FString strBindVKUserName;//[Offset: 0x68, Size: 0xc]
	FString strBindLineUserName;//[Offset: 0x74, Size: 0xc]
	FString strBindQQUserName;//[Offset: 0x80, Size: 0xc]
	int iDeleteAccountRetCode;//[Offset: 0x8c, Size: 0x4]
	int iGenerateTransferCodeRetCode;//[Offset: 0x90, Size: 0x4]
	FString GeneratedTransferCode;//[Offset: 0x94, Size: 0xc]
	int iTransferRetCode;//[Offset: 0xa0, Size: 0x4]
	int iTransferThirdRetCode;//[Offset: 0xa4, Size: 0x4]
	FString inputTransferCode;//[Offset: 0xa8, Size: 0xc]
	int iSwitchAccountFBRetCode;//[Offset: 0xb4, Size: 0x4]
	int iSwitchAccountFBThirdRetCode;//[Offset: 0xb8, Size: 0x4]
	int iSwitchAccountGPGCRetCode;//[Offset: 0xbc, Size: 0x4]
	int iSwitchAccountGPGCThirdRetCode;//[Offset: 0xc0, Size: 0x4]
	bool bGCQuietSwitchAccount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	double mLongitude;//[Offset: 0xc8, Size: 0x8]
	double mLatitude;//[Offset: 0xd0, Size: 0x8]
	double mHorizontalAccuracyMeters;//[Offset: 0xd8, Size: 0x8]
	double mVerticalAccuracyMeters;//[Offset: 0xe0, Size: 0x8]
	void Transfer();// 0x12e82e4
	void StartNewGame();// 0x12e82e4
	void SetUserID(FString userID);// 0x17a530c
	void SetNoAuthOpenid(FString OpenID);// 0x13b9b8c
	void SetIMSDKEnv(int iEnv);// 0x17a5294
	void SetGPSInfo(double Longitude, double Latitude, double horizontalAccuracyMeters, double verticalAccuracyMeters);// 0x17a5138
	void SetCustomData(FString customData);// 0x17a4fe0
	void SetAdvertiseUnit(FString unitID);// 0x17a4e88
	void SaveLastIMSDKChannelID(int channelId);// 0x17a4e10
	void ReqBindInfo();// 0x12e82e4
	void PlayAdvertise();// 0x17a4dfc
	void LoadAdvertise();// 0x17a4de8
	bool IsEqualCurLoginPlatform(FString strChannel);// 0x17a4c88
	bool isBindFBOrGPGC();// 0x17a4c60
	bool IsAlreadyBindWeChat();// 0x17a4c38
	bool IsAlreadyBindVK();// 0x17a4c10
	bool IsAlreadyBindTwitter();// 0x17a4be8
	bool IsAlreadyBindQQ();// 0x17a4bc0
	bool IsAlreadyBindLine();// 0x17a4b98
	bool IsAlreadyBindGPGC();// 0x17a4b70
	bool IsAlreadyBindFB();// 0x17a4b48
	enum GetPlatformType();// 0x17a4b20
	FString GetOpenId();// 0x17a4a60
	int GetLastIMSDKChannelID();// 0x17a4a38
	bool GetIsAdvertiseVaild();// 0x17a4a10
	bool GetIsAdvertiseLoadSuccess();// 0x17a49e8
	bool GetIsAdvertiseLoad();// 0x17a49c0
	static IMSDKHelper* GetInstance();// 0x17a4998
	void GetGPSInfo(int accuracy, int Timeout);// 0x17a48dc
	bool GetGPSEnable();// 0x17a48b4
	FString GetCurLoginPlatform();// 0x17a47f4
	void GetBindInfo();// 0x17a47e0
	void GetBindFBRetCode();// 0x17a47cc
	int GetBindCount();// 0x17a47a4
	void GenerateTransferCode();// 0x12e82e4
	void EnableGPS(bool EnableGPS);// 0x17a4724
	void CopyTransferCodeToClipboard();// 0x17a4710
	int ConvertStrToIMSDKChannel(FString strChannel);// 0x17a45b0
	FString ConvertIMSDKChannelToStr(int imsdkChannel);// 0x17a44a8
	void BuglySetAppVersion(FString Version);// 0x17a4350
	void BuglyPutUserData(FString Key, FString Value);// 0x17a40e0
	void BuglyPostException(const int Category, FString Name, FString Reason, FString[] stacks, <FString,FString> extras, bool Exit);// 0x17a3a94
	void BuglyLog(int Level, FString Tag, FString Log);// 0x17a37dc
	void BindWeChat();// 0x17a37c8
	void BindVK();// 0x17a37b4
	void BindTwitter();// 0x17a37a0
	void BindQQ();// 0x17a378c
	void BindLine();// 0x17a3778
	void BindGPGC();// 0x17a3764
	void BindFB();// 0x17a3750

--------------------------------
Class: iTOPPrefs.SaveGame.Object
	bool bForceLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bFirstLoginGuestAfterBindFB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	int nGCloudChannelID;//[Offset: 0x20, Size: 0x4]
	int nLastIMSDKChannelID;//[Offset: 0x24, Size: 0x4]
	bool bNeedFBForceLoginForRelationChainError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int64 lastTimeSetFBForceLoginForRelationChainError;//[Offset: 0x30, Size: 0x8]
	bool bNeedWXForceLoginForRelationChainError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int64 lastTimeSetWXForceLoginForRelationChainError;//[Offset: 0x40, Size: 0x8]
	bool bNeedVKForceLoginForRelationChainError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	int64 lastTimeSetVKForceLoginForRelationChainError;//[Offset: 0x50, Size: 0x8]
	bool bNeedLineForceLoginForRelationChainError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int64 lastTimeSetLineForceLoginForRelationChainError;//[Offset: 0x60, Size: 0x8]
	bool bNeedQQForceLoginForRelationChainError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int64 lastTimeSetQQForceLoginForRelationChainError;//[Offset: 0x70, Size: 0x8]
	bool bNeedForceLoginForRelationChainError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int64 lastTimeSetForceLoginForRelationChainError;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: ConfigInterface.Interface.Object

--------------------------------
Class: GameModeConfigComponent.ActorComponent.Object
	int appleGrenadeID;//[Offset: 0xbc, Size: 0x4]
	int appleGrenadeCount;//[Offset: 0xc0, Size: 0x4]
	int[] forbitPickItemTypeList;//[Offset: 0xc4, Size: 0xc]

--------------------------------
Class: PatchTableUtils.BlueprintFunctionLibrary.Object

--------------------------------
Class: GameModeStatisticsComponent.ActorComponent.Object

--------------------------------
Class: GeneratorActorAIInterface.Interface.Object
	void RegisterAIPickupPoint(Vector BuildingLoc, Vector SpotLoc, Actor* PickUpActor);// 0x1836fdc

--------------------------------
Class: GeneratorActorInterface.Interface.Object
	void SetExtendData(FString Key, int Value);// 0x1837a44
	void InitDataNew(int ItemCount, FString Value, FString Category, bool RepeatGenerateItem, int SpotDataIndex);// 0x18376ec
	void InitData(ItemSpotSceneComponent* ItemSpotSceneComponent, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x1837394

--------------------------------
Class: GeneratorVehicleInterface.Interface.Object
	void SetSafeSpawn(bool ab_IsSafeSpawn);// 0x18381a0
	void InitVehicle(int FuelPercent, bool bEngineOn);// 0x18380d4
	void CheckSpawnLocation(Vector SpawnLocation, float MaxSpawnDistance);// 0x1838010

--------------------------------
Class: GlobalConfigActor.Actor.Object
	bool bInitComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	void Init();// 0x133c1a0

--------------------------------
Class: GMDataManager.Object
	GMDataSource*[] DataSources;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: GMDataSource_SyncGameInfo.GMDataSource.Object
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x20, Size: 0xc]
	FString AIDataAssetClassPath;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: GMSubSystemBase.Object
	class Object* SubSystemClass;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ItemBandSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	FString SpotItemValue;//[Offset: 0x24c, Size: 0xc]
	FString SpotItemCategory;//[Offset: 0x258, Size: 0xc]
	FString ConditionItemValue;//[Offset: 0x264, Size: 0xc]
	FString ConditionItemCategory;//[Offset: 0x270, Size: 0xc]

--------------------------------
Class: ItemConfigActorComponent.ActorComponent.Object
	ItemSpawnData[] ItemSpawnDatas;//[Offset: 0xbc, Size: 0xc]
	<int,GroupTypeSceneComponents> AllSpotGroups;//[Offset: 0xc8, Size: 0x3c]
	void RegisterGroupSceneComponent(int GroupType, SceneComponent* GroupSceneComponent);// 0x183a990
	ItemSpawnClass[] RandomItemSpawnClass(FString ItemValue, FString ItemCategory);// 0x183a698
	SceneComponent*[] RandomGroupSceneComponents(int GroupType, int Persent);// 0x183a54c
	SceneComponent* RandomGroupSceneComponent(SceneComponent*[] AllGroups);// 0x183a3ec
	class Object LoadActorClass(FString Path);// 0x183a28c
	ItemSpawnClass[] GetItemSpawnClass(ItemSpawnData Data);// 0x183a118

--------------------------------
Class: ItemSpawnData
	FName RowName;//[Offset: 0x0, Size: 0x8]
	int KeyID;//[Offset: 0x8, Size: 0x4]
	FString ItemValue;//[Offset: 0xc, Size: 0xc]
	FString ItemCategory;//[Offset: 0x18, Size: 0xc]
	int ItemWeight;//[Offset: 0x24, Size: 0x4]
	FString ItemPath;//[Offset: 0x28, Size: 0xc]
	int ItemStackCount;//[Offset: 0x34, Size: 0x4]
	FString ItemTogetherPath;//[Offset: 0x38, Size: 0xc]
	int ItemTogetherStackCount;//[Offset: 0x44, Size: 0x4]
	int ItemTogetherCountMin;//[Offset: 0x48, Size: 0x4]
	int ItemTogetherCountMax;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: GroupTypeSceneComponents
	int GroupType;//[Offset: 0x0, Size: 0x4]
	SceneComponent*[] SceneComponents;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: ItemSpawnClass
	class Object* ItemClass;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ItemCountArea.Actor.Object
	BoxComponent* Area;//[Offset: 0x2c8, Size: 0x4]
	bool IsInArea(out Vector Position);// 0x1555cf4

--------------------------------
Class: ItemGenerateInterface.Interface.Object

--------------------------------
Class: SpotGeneratorStruct.Object

--------------------------------
Class: SubLevelConfigComponent.ActorComponent.Object
	FString DefaultSubLevelName;//[Offset: 0xc0, Size: 0xc]
	void Init();// 0x1367444

--------------------------------
Class: TriggerActionSpawnItemInterface.Interface.Object

--------------------------------
Class: UAEActorMap.Info.Actor.Object
	<Vector,Actor*> ActorsMap;//[Offset: 0x2c8, Size: 0x3c]

--------------------------------
Class: UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool DefaultLoadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x158, Size: 0xc]
	void OnIdleAnimListAsyncLoadingFinished();// 0x185257c
	void OnAnimListAsyncLoadingFinished(AsyncLoadCharVehAnimParams LoadingParam);// 0x1852318

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: AsyncLoadCharVehAnimParams

--------------------------------
Class: UAEIndependentSpot.Actor.Object
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	enum SpotType;//[Offset: 0x2c9, Size: 0x1]

--------------------------------
Class: UAESimpleSceneActor.Actor.Object

--------------------------------
Class: UAESpotGroupObject.Object
	Object* Host;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: VehicleConfigActorComponent.ActorComponent.Object
	class Object LoadActorClass(FString Path);// 0x183a28c

--------------------------------
Class: VehicleGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x168, Size: 0xc]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x178, Size: 0x3c]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x1b4, Size: 0x3c]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x1f0, Size: 0x48]
	void WriteVehicleSpotStatisticsDatas();// 0x12e82e4
	void WriteVehicleClassStatisticsDatas();// 0x12e82e4
	void WriteAllVehicleStatisticsDatas();// 0x12e82e4
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x1864bc8
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x1359bf4
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x18649f4
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x1864820
	void RandomGroups();// 0x12e0f50
	void LoadVehicleGenerateTable();// 0x13aa438
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x1864690
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x1864448
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x18641dc
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x1828da8
	void GenerateSpotOnTick(float DeltaTime);// 0x13b484c
	void DeleteGroups();// 0x1862738
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x18624c0
	void AddVehicleClassCount(FString Path, bool IsValid, int count);// 0x18622d4

--------------------------------
Class: VehicleGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: VehicleSpotObject.Object
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x58, Size: 0x20]

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontBulkData.Object

--------------------------------
Class: FontFaceInterface.Interface.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateTypes.Object

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ButtonStyle ButtonStyle;//[Offset: 0x20, Size: 0x298]

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x20, Size: 0x5a8]

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x20, Size: 0x408]

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x20, Size: 0x3d0]

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x20, Size: 0x828]

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x90]
	SlateBrush BackgroundImageHovered;//[Offset: 0x98, Size: 0x90]
	SlateBrush BackgroundImageFocused;//[Offset: 0x128, Size: 0x90]
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1b8, Size: 0x90]
	Margin Padding;//[Offset: 0x248, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x258, Size: 0x40]
	SlateColor ForegroundColor;//[Offset: 0x298, Size: 0x1c]
	SlateColor BackgroundColor;//[Offset: 0x2b4, Size: 0x1c]
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2d0, Size: 0x1c]
	Margin HScrollBarPadding;//[Offset: 0x2ec, Size: 0x10]
	Margin VScrollBarPadding;//[Offset: 0x2fc, Size: 0x10]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x310, Size: 0x518]

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextStyle EditableTextStyle;//[Offset: 0x20, Size: 0x218]

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x40]
	SlateColor ColorAndOpacity;//[Offset: 0x48, Size: 0x1c]
	SlateBrush BackgroundImageSelected;//[Offset: 0x68, Size: 0x90]
	SlateBrush BackgroundImageComposing;//[Offset: 0xf8, Size: 0x90]
	SlateBrush CaretImage;//[Offset: 0x188, Size: 0x90]

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x20, Size: 0x1b8]

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x90]
	SlateBrush FillImage;//[Offset: 0x98, Size: 0x90]
	SlateBrush MarqueeImage;//[Offset: 0x128, Size: 0x90]

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x20, Size: 0x518]

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x20, Size: 0x248]

--------------------------------
Class: SlateSettings.Object
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x20, Size: 0x308]

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x8, Size: 0x90]
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x98, Size: 0x90]
	SlateBrush ActiveFillBrush;//[Offset: 0x128, Size: 0x90]
	SlateBrush InactiveFillBrush;//[Offset: 0x1b8, Size: 0x90]
	SlateBrush ArrowsImage;//[Offset: 0x248, Size: 0x90]
	SlateColor ForegroundColor;//[Offset: 0x2d8, Size: 0x1c]
	Margin TextPadding;//[Offset: 0x2f4, Size: 0x10]

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object
	TextBlockStyle TextBlockStyle;//[Offset: 0x20, Size: 0x1c8]

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x40]
	SlateColor ColorAndOpacity;//[Offset: 0x48, Size: 0x1c]
	Vector2D ShadowOffset;//[Offset: 0x64, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x6c, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0x7c, Size: 0x1c]
	LinearColor HighlightColor;//[Offset: 0x98, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xa8, Size: 0x90]
	SlateBrush UnderlineBrush;//[Offset: 0x138, Size: 0x90]

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0x203e9e4
	static void SetTrackingOrigin(byte Origin);// 0x203e96c
	static void SetSpectatorScreenTexture(Texture* InTexture);// 0x203e8fc
	static void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack);// 0x203e728
	static void SetSpectatorScreenMode(enum Mode);// 0x203e6b8
	static void SetClippingPlanes(float Near, float Far);// 0x203e604
	static void ResetOrientationAndPosition(float Yaw, byte Options);// 0x203e550
	static bool IsSpectatorScreenModeControllable();// 0x203e528
	static bool IsInLowPersistenceMode();// 0x15cbc50
	static bool IsHeadMountedDisplayEnabled();// 0x203e500
	static bool IsHeadMountedDisplayConnected();// 0x203e4d8
	static bool HasValidTrackingPosition();// 0x203e4b0
	static float GetWorldToMetersScale(Object* WorldContext);// 0x203e438
	static void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0x203e360
	static void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int Index);// 0x203df84
	static byte GetTrackingOrigin();// 0x203df4c
	static float GetScreenPercentage();// 0x203df24
	static void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0x203dc9c
	static void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0x203dbcc
	static int GetNumOfTrackingSensors();// 0x203dba4
	static byte GetHMDWornState();// 0x203db7c
	static FName GetHMDDeviceName();// 0x203db44
	static void EnableLowPersistenceMode(bool bEnable);// 0x151c53c
	static bool EnableHMD(bool bEnable);// 0x203dac4

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x500, Size: 0x4]
	enum Hand;//[Offset: 0x504, Size: 0x1]
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x505, Size: 0x1]
	enum CurrentTrackingStatus;//[Offset: 0x506, Size: 0x1]
	bool IsTracked();// 0x203f7b8

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);// 0x203fef4
	static bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0x203fe38
	static bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x203fdc0
	static bool IsMotionTrackedDeviceCountManagementNecessary();// 0x203fd98
	static int GetMotionTrackingEnabledControllerCount();// 0x203fd70
	static int GetMaximumMotionTrackedControllerCount();// 0x203fd48
	static bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x203fc8c
	static bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0x203fc14
	static void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x203fb60
	static void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0x203faf0
	static void DisableMotionTrackingOfAllControllers();// 0x203fadc
	static void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x203fa6c

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xbc, Size: 0xc]
	delegate HMDTrackingInitializedDelegate;//[Offset: 0xc8, Size: 0xc]
	delegate HMDRecenteredDelegate;//[Offset: 0xd4, Size: 0xc]
	delegate HMDLostDelegate;//[Offset: 0xe0, Size: 0xc]
	delegate HMDReconnectedDelegate;//[Offset: 0xec, Size: 0xc]
	delegate HMDConnectCanceledDelegate;//[Offset: 0xf8, Size: 0xc]
	delegate HMDPutOnHeadDelegate;//[Offset: 0x104, Size: 0xc]
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x110, Size: 0xc]
	delegate VRControllerRecenteredDelegate;//[Offset: 0x11c, Size: 0xc]

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x720, Size: 0xc]
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x72c, Size: 0xc]

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object
	static int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x21484e8
	static int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0x21483d0

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x1c, Size: 0x10]
	float Density;//[Offset: 0x2c, Size: 0x4]
	float DensityAdjustmentFactor;//[Offset: 0x30, Size: 0x4]
	float Radius;//[Offset: 0x34, Size: 0x4]
	enum Scaling;//[Offset: 0x38, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x3c, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x44, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x4c, Size: 0x8]
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x54, Size: 0xc]
	byte VertexColorMask;//[Offset: 0x84, Size: 0x1]
	float VertexColorMaskThreshold;//[Offset: 0x88, Size: 0x4]
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	FloatInterval ZOffset;//[Offset: 0x90, Size: 0x8]
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	float AlignMaxAngle;//[Offset: 0x9c, Size: 0x4]
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	float RandomPitchAngle;//[Offset: 0xa4, Size: 0x4]
	FloatInterval GroundSlopeAngle;//[Offset: 0xa8, Size: 0x8]
	FloatInterval Height;//[Offset: 0xb0, Size: 0x8]
	FName[] LandscapeLayers;//[Offset: 0xb8, Size: 0xc]
	FName LandscapeLayer;//[Offset: 0xc8, Size: 0x8]
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	Vector CollisionScale;//[Offset: 0xd4, Size: 0xc]
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4]
	BoxSphereBounds MeshBounds;//[Offset: 0xe4, Size: 0x1c]
	Vector LowBoundOriginRadius;//[Offset: 0x100, Size: 0xc]
	byte Mobility;//[Offset: 0x10c, Size: 0x1]
	Int32Interval CullDistance;//[Offset: 0x110, Size: 0x8]
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x118, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x118, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x118, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x118, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x118, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x119, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x11c, Size: 0x4]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	BodyInstance BodyInstance;//[Offset: 0x128, Size: 0x148]
	byte CustomNavigableGeometry;//[Offset: 0x270, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x271, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x272, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x274, Size: 0x4]
	float CollisionRadius;//[Offset: 0x278, Size: 0x4]
	float ShadeRadius;//[Offset: 0x27c, Size: 0x4]
	int NumSteps;//[Offset: 0x280, Size: 0x4]
	float InitialSeedDensity;//[Offset: 0x284, Size: 0x4]
	float AverageSpreadDistance;//[Offset: 0x288, Size: 0x4]
	float SpreadVariance;//[Offset: 0x28c, Size: 0x4]
	int SeedsPerStep;//[Offset: 0x290, Size: 0x4]
	int DistributionSeed;//[Offset: 0x294, Size: 0x4]
	float MaxInitialSeedOffset;//[Offset: 0x298, Size: 0x4]
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1]
	float MaxInitialAge;//[Offset: 0x2a0, Size: 0x4]
	float MaxAge;//[Offset: 0x2a4, Size: 0x4]
	float OverlapPriority;//[Offset: 0x2a8, Size: 0x4]
	FloatInterval ProceduralScale;//[Offset: 0x2ac, Size: 0x8]
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x2b4, Size: 0x58]
	int ChangeCount;//[Offset: 0x30c, Size: 0x4]
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1]
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 0x1]
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310, Size: 0x1]
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x310, Size: 0x1]
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x310, Size: 0x1]
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x310, Size: 0x1]
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x310, Size: 0x1]
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x310, Size: 0x1]
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x311, Size: 0x1]
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x311, Size: 0x1]
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x311, Size: 0x1]
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x311, Size: 0x1]
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x311, Size: 0x1]
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x311, Size: 0x1]
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x311, Size: 0x1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x311, Size: 0x1]

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float MaskThreshold;//[Offset: 0x4, Size: 0x4]
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4]
	int Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FoliageType_Actor.FoliageType.Object
	class Actor* ActorClass;//[Offset: 0x314, Size: 0x4]
	bool bShouldAttachToBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* Mesh;//[Offset: 0x314, Size: 0x4]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x318, Size: 0xc]
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x324, Size: 0x4]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2d0, Size: 0x4]
	Vector TouchingActorEntryPosition;//[Offset: 0x2d4, Size: 0xc]
	Vector FoliageVelocity;//[Offset: 0x2e0, Size: 0xc]
	Vector FoliageForce;//[Offset: 0x2ec, Size: 0xc]
	Vector FoliagePosition;//[Offset: 0x2f8, Size: 0xc]
	float FoliageDamageImpulseScale;//[Offset: 0x304, Size: 0x4]
	float FoliageTouchImpulseScale;//[Offset: 0x308, Size: 0x4]
	float FoliageStiffness;//[Offset: 0x30c, Size: 0x4]
	float FoliageStiffnessQuadratic;//[Offset: 0x310, Size: 0x4]
	float FoliageDamping;//[Offset: 0x314, Size: 0x4]
	float MaxDamageImpulse;//[Offset: 0x318, Size: 0x4]
	float MaxTouchImpulse;//[Offset: 0x31c, Size: 0x4]
	float MaxForce;//[Offset: 0x320, Size: 0x4]
	float Mass;//[Offset: 0x324, Size: 0x4]
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x2149524

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xbc, Size: 0x4]
	float TileOverlap;//[Offset: 0xc0, Size: 0x4]
	Volume* SpawningVolume;//[Offset: 0xc4, Size: 0x4]
	Guid ProceduralGuid;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x1c, Size: 0x4]
	float TileSize;//[Offset: 0x20, Size: 0x4]
	int NumUniqueTiles;//[Offset: 0x24, Size: 0x4]
	float MinimumQuadTreeSize;//[Offset: 0x28, Size: 0x4]
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x30, Size: 0xc]
	bool bNeedsSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	void Simulate(int NumSteps);// 0x214a0fc

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x4]
	FoliageType* TypeInstance;//[Offset: 0x4, Size: 0x4]
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ProceduralFoliageTile.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x1c, Size: 0x4]
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: ProceduralFoliageInstance
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Quat Rotation;//[Offset: 0x10, Size: 0x10]
	Vector Normal;//[Offset: 0x20, Size: 0xc]
	float Age;//[Offset: 0x2c, Size: 0x4]
	float Scale;//[Offset: 0x30, Size: 0x4]
	FoliageType* Type;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeInfo.Object
	Landscape* LandscapeActor;//[Offset: 0x1c, Size: 0x1c]
	Guid LandscapeGuid;//[Offset: 0x38, Size: 0x10]
	int ComponentSizeQuads;//[Offset: 0x48, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x4c, Size: 0x4]
	int ComponentNumSubsections;//[Offset: 0x50, Size: 0x4]
	Vector DrawScale;//[Offset: 0x54, Size: 0xc]
	<LandscapeStreamingProxy*> Proxies;//[Offset: 0x9c, Size: 0x3c]

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x59c, Size: 0x1c]

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1]

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid MeshGuid;//[Offset: 0x5d8, Size: 0x10]

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x5a8, Size: 0x10]
	IntPoint[] ProxyComponentBases;//[Offset: 0x5b8, Size: 0xc]
	int8 ProxyLOD;//[Offset: 0x5c4, Size: 0x1]

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	GrassInput[] GrassTypes;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: GrassInput
	FName Name;//[Offset: 0x0, Size: 0x8]
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x4]
	ExpressionInput Input;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object
	LayerBlendInput[] Layers;//[Offset: 0x44, Size: 0xc]
	Guid ExpressionGUID;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: LayerBlendInput
	FName LayerName;//[Offset: 0x0, Size: 0x8]
	byte BlendType;//[Offset: 0x8, Size: 0x1]
	ExpressionInput LayerInput;//[Offset: 0x10, Size: 0x30]
	ExpressionInput HeightInput;//[Offset: 0x40, Size: 0x30]
	float PreviewWeight;//[Offset: 0x70, Size: 0x4]
	Vector ConstLayerInput;//[Offset: 0x74, Size: 0xc]
	float ConstHeightInput;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x44, Size: 0x1]
	byte CustomUVType;//[Offset: 0x45, Size: 0x1]
	ExpressionInput MappingScaleOverride;//[Offset: 0x48, Size: 0x30]
	float MappingScale;//[Offset: 0x78, Size: 0x4]
	float MappingRotation;//[Offset: 0x7c, Size: 0x4]
	float MappingPanU;//[Offset: 0x80, Size: 0x4]
	float MappingPanV;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x48, Size: 0x8]
	float PreviewWeight;//[Offset: 0x50, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object
	ExpressionInput LayerUsed;//[Offset: 0x48, Size: 0x30]
	ExpressionInput LayerNotUsed;//[Offset: 0x78, Size: 0x30]
	FName ParameterName;//[Offset: 0xa8, Size: 0x8]
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0xb4, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x48, Size: 0x30]
	ExpressionInput Layer;//[Offset: 0x78, Size: 0x30]
	FName ParameterName;//[Offset: 0xa8, Size: 0x8]
	float PreviewWeight;//[Offset: 0xb0, Size: 0x4]
	Vector ConstBase;//[Offset: 0xb4, Size: 0xc]
	Guid ExpressionGUID;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverridesInterface.Interface.Object

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object
	float OnEvaluate(float Interp);// 0x1c01fa0

--------------------------------
Class: MovieSceneFolder.Object
	FName FolderName;//[Offset: 0x20, Size: 0x8]
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x28, Size: 0xc]
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x34, Size: 0xc]
	FString[] ChildObjectBindingStrings;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x48, Size: 0x2]
	MovieSceneEasingSettings Easing;//[Offset: 0x4c, Size: 0x28]
	float StartTime;//[Offset: 0x74, Size: 0x4]
	float endTime;//[Offset: 0x78, Size: 0x4]
	int RowIndex;//[Offset: 0x7c, Size: 0x4]
	int OverlapPriority;//[Offset: 0x80, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	float PrerollTime;//[Offset: 0x88, Size: 0x4]
	float PostrollTime;//[Offset: 0x8c, Size: 0x4]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0x90, Size: 0x2]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum CompletionMode;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneEasingSettings
	float AutoEaseInTime;//[Offset: 0x0, Size: 0x4]
	float AutoEaseOutTime;//[Offset: 0x4, Size: 0x4]
	interface class * EaseIn;//[Offset: 0x8, Size: 0x8]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float ManualEaseInTime;//[Offset: 0x14, Size: 0x4]
	interface class * EaseOut;//[Offset: 0x18, Size: 0x8]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float ManualEaseOutTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneSegmentCompilerTestTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	MovieSceneSection*[] SectionArray;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieSceneSegmentCompilerTestSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: AnimCustomInstance.AnimInstance.Object

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object
	FName NotifyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AnimSequencerInstance.AnimCustomInstance.AnimInstance.Object

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	static void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0x220b23c
	static Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0x220af90

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x1c, Size: 0xc]
	delegate OnBlendOut;//[Offset: 0x28, Size: 0xc]
	delegate OnInterrupted;//[Offset: 0x34, Size: 0xc]
	delegate OnNotifyBegin;//[Offset: 0x40, Size: 0xc]
	delegate OnNotifyEnd;//[Offset: 0x4c, Size: 0xc]
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x220bc44
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x220bb60
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x220ba9c
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x220b9d8
	static PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0x220b844

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid ConstraintId;//[Offset: 0x94, Size: 0x10]

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	FName AttachSocketName;//[Offset: 0xa8, Size: 0x8]
	FName AttachComponentName;//[Offset: 0xb0, Size: 0x8]
	enum AttachmentLocationRule;//[Offset: 0xb8, Size: 0x1]
	enum AttachmentRotationRule;//[Offset: 0xb9, Size: 0x1]
	enum AttachmentScaleRule;//[Offset: 0xba, Size: 0x1]
	enum DetachmentLocationRule;//[Offset: 0xbb, Size: 0x1]
	enum DetachmentRotationRule;//[Offset: 0xbc, Size: 0x1]
	enum DetachmentScaleRule;//[Offset: 0xbd, Size: 0x1]

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	RichCurve TimingCurve;//[Offset: 0xa4, Size: 0x54]
	enum FrontAxisEnum;//[Offset: 0xf8, Size: 0x1]
	enum UpAxisEnum;//[Offset: 0xf9, Size: 0x1]
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1]
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 0x1]
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfa, Size: 0x1]

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneTransformMask TransformMask;//[Offset: 0x98, Size: 0x4]
	RichCurve Translation;//[Offset: 0x9c, Size: 0x54]
	RichCurve Rotation;//[Offset: 0x198, Size: 0x54]
	RichCurve Scale;//[Offset: 0x294, Size: 0x54]
	RichCurve ManualWeight;//[Offset: 0x390, Size: 0x54]

--------------------------------
Class: MovieSceneTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName PropertyName;//[Offset: 0x50, Size: 0x8]
	FString PropertyPath;//[Offset: 0x58, Size: 0xc]
	MovieSceneSection*[] Sections;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x98, Size: 0x54]
	FString[] ActorGuidStrings;//[Offset: 0xf8, Size: 0xc]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x40, Size: 0xc]
	int DefaultValue;//[Offset: 0x4c, Size: 0x4]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	IntegralCurve BoolCurve;//[Offset: 0x9c, Size: 0x54]

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object
	IntegralCurve ByteCurve;//[Offset: 0x98, Size: 0x54]

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0x94, Size: 0x18]
	CameraAnim* CameraAnim;//[Offset: 0xac, Size: 0x4]
	float PlayRate;//[Offset: 0xb0, Size: 0x4]
	float PlayScale;//[Offset: 0xb4, Size: 0x4]
	float BlendInTime;//[Offset: 0xb8, Size: 0x4]
	float BlendOutTime;//[Offset: 0xbc, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x4]
	float PlayRate;//[Offset: 0x4, Size: 0x4]
	float PlayScale;//[Offset: 0x8, Size: 0x4]
	float BlendInTime;//[Offset: 0xc, Size: 0x4]
	float BlendOutTime;//[Offset: 0x10, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid CameraGuid;//[Offset: 0x94, Size: 0x10]

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0x94, Size: 0x18]
	class CameraShake* ShakeClass;//[Offset: 0xac, Size: 0x4]
	float PlayScale;//[Offset: 0xb0, Size: 0x4]
	byte PlaySpace;//[Offset: 0xb4, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0xb8, Size: 0xc]

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class CameraShake* ShakeClass;//[Offset: 0x0, Size: 0x4]
	float PlayScale;//[Offset: 0x4, Size: 0x4]
	byte PlaySpace;//[Offset: 0x8, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0x94, Size: 0x14]
	float StartOffset;//[Offset: 0xa8, Size: 0x4]
	float TimeScale;//[Offset: 0xac, Size: 0x4]
	float PrerollTime;//[Offset: 0xb0, Size: 0x4]
	MovieSceneSequence* SubSequence;//[Offset: 0xb4, Size: 0x4]
	Actor* ActorToRecord;//[Offset: 0xb8, Size: 0x1c]
	FString TargetSequenceName;//[Offset: 0xd4, Size: 0xc]
	DirectoryPath TargetPathToRecordTo;//[Offset: 0xe0, Size: 0xc]

--------------------------------
Class: MovieSceneSectionParameters
	float StartOffset;//[Offset: 0x0, Size: 0x4]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	int HierarchicalBias;//[Offset: 0x8, Size: 0x4]
	float PrerollTime;//[Offset: 0xc, Size: 0x4]
	float PostrollTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FText DisplayName;//[Offset: 0xec, Size: 0xc]

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object
	RichCurve RedCurve;//[Offset: 0x98, Size: 0x54]
	RichCurve GreenCurve;//[Offset: 0xec, Size: 0x54]
	RichCurve BlueCurve;//[Offset: 0x140, Size: 0x54]
	RichCurve AlphaCurve;//[Offset: 0x194, Size: 0x54]

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	IntegralCurve EnumCurve;//[Offset: 0x98, Size: 0x54]

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0x94, Size: 0x4c]
	MovieSceneEventSectionData EventData;//[Offset: 0xe0, Size: 0x18]

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FName Value;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MovieSceneEventSectionData
	float[] KeyTimes;//[Offset: 0x0, Size: 0xc]
	EventPayload[] KeyValues;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8]
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1]
	enum EventPosition;//[Offset: 0x4e, Size: 0x1]
	MovieSceneObjectBindingID[] EventReceivers;//[Offset: 0x50, Size: 0xc]
	MovieSceneSection*[] Sections;//[Offset: 0x5c, Size: 0xc]

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	RichCurve FloatCurve;//[Offset: 0x98, Size: 0x54]

--------------------------------
Class: MovieSceneFadeSection.MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	LinearColor FadeColor;//[Offset: 0xec, Size: 0x10]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object
	IntegralCurve IntegerCurve;//[Offset: 0x98, Size: 0x54]

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object
	enum Visibility;//[Offset: 0x92, Size: 0x1]
	FName[] LevelNames;//[Offset: 0x94, Size: 0xc]

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MaterialParameterCollection* MPC;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0x94, Size: 0xc]
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0xa0, Size: 0xc]
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0xac, Size: 0xc]

--------------------------------
Class: ScalarParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	int Index;//[Offset: 0x8, Size: 0x4]
	RichCurve ParameterCurve;//[Offset: 0xc, Size: 0x54]

--------------------------------
Class: VectorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	int Index;//[Offset: 0x8, Size: 0x4]
	RichCurve XCurve;//[Offset: 0xc, Size: 0x54]
	RichCurve YCurve;//[Offset: 0x60, Size: 0x54]
	RichCurve ZCurve;//[Offset: 0xb4, Size: 0x54]

--------------------------------
Class: ColorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	int Index;//[Offset: 0x8, Size: 0x4]
	RichCurve RedCurve;//[Offset: 0xc, Size: 0x54]
	RichCurve GreenCurve;//[Offset: 0x60, Size: 0x54]
	RichCurve BlueCurve;//[Offset: 0xb4, Size: 0x54]
	RichCurve AlphaCurve;//[Offset: 0x108, Size: 0x54]

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	IntegralCurve ParticleKeys;//[Offset: 0x94, Size: 0x54]

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0x98, Size: 0x78]
	AnimSequence* AnimSequence;//[Offset: 0x110, Size: 0x4]
	AnimSequenceBase* Animation;//[Offset: 0x114, Size: 0x4]
	float StartOffset;//[Offset: 0x118, Size: 0x4]
	float EndOffset;//[Offset: 0x11c, Size: 0x4]
	float PlayRate;//[Offset: 0x120, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	FName SlotName;//[Offset: 0x128, Size: 0x8]

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x4]
	float StartOffset;//[Offset: 0x4, Size: 0x4]
	float EndOffset;//[Offset: 0x8, Size: 0x4]
	float PlayRate;//[Offset: 0xc, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	FName SlotName;//[Offset: 0x18, Size: 0x8]
	RichCurve Weight;//[Offset: 0x20, Size: 0x54]

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x50, Size: 0xc]
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x50, Size: 0xc]
	Guid ObjectGuid;//[Offset: 0x5c, Size: 0x10]

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object
	StringCurve StringCurve;//[Offset: 0x98, Size: 0x58]

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x40, Size: 0xc]
	StringCurveKey[] Keys;//[Offset: 0x4c, Size: 0xc]

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FString Value;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	RichCurve Curves;//[Offset: 0x98, Size: 0x54]
	int ChannelsUsed;//[Offset: 0x1e8, Size: 0x4]

--------------------------------
Class: MovieSceneVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFail;//[Offset: 0x28, Size: 0xc]
	static AsyncTaskDownloadImage* DownloadImage(FString URL);// 0x2380b1c

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0xdc, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0xec, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0xed, Size: 0x1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]
	float BlurStrength;//[Offset: 0xf0, Size: 0x4]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	int BlurRadius;//[Offset: 0xf8, Size: 0x4]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x100, Size: 0x90]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2381420
	void SetPadding(Margin InPadding);// 0x2381398
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x23810e8
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2381070
	void SetBlurStrength(float InStrength);// 0x2380ff0
	void SetBlurRadius(int InBlurRadius);// 0x2380f78
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x2380ef8

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2381a20
	void SetPadding(Margin InPadding);// 0x2381998
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2381920

--------------------------------
Class: BoolBinding.PropertyBinding.Object
	bool GetValue();// 0x2381dac

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2383130
	void SetPadding(Margin InPadding);// 0x23830a8
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2383030

--------------------------------
Class: BrushBinding.PropertyBinding.Object
	SlateBrush GetValue();// 0x23834bc

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2384318
	void SetPadding(Margin InPadding);// 0x2384290
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2384218

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0xd9, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0xe0, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0xf0, Size: 0x5a8]
	SlateWidgetStyleAsset* Style;//[Offset: 0x698, Size: 0x4]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x69c, Size: 0x4]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6a0, Size: 0x4]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6a4, Size: 0x4]
	SlateBrushAsset* CheckedImage;//[Offset: 0x6a8, Size: 0x4]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6ac, Size: 0x4]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6b0, Size: 0x4]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6b4, Size: 0x4]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6b8, Size: 0x4]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x6bc, Size: 0x4]
	byte HorizontalAlignment;//[Offset: 0x6c0, Size: 0x1]
	Margin Padding;//[Offset: 0x6c4, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x6d4, Size: 0x1c]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x6f4, Size: 0xc]
	void SetIsChecked(bool InIsChecked);// 0x2385c3c
	void SetCheckedState(enum InCheckedState);// 0x2385bc4
	bool IsPressed();// 0x2385b9c
	bool IsChecked();// 0x2385b74
	enum GetCheckedState();// 0x2385b4c

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object
	enum GetValue();// 0x2386060

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0xcc, Size: 0x4]
	float Period;//[Offset: 0xd0, Size: 0x4]
	float Radius;//[Offset: 0xd4, Size: 0x4]
	SlateBrushAsset* PieceImage;//[Offset: 0xd8, Size: 0x4]
	SlateBrush Image;//[Offset: 0xe0, Size: 0x90]
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	void SetRadius(float InRadius);// 0x23863f8
	void SetPeriod(float InPeriod);// 0x2386380
	void SetNumberOfPieces(int InNumberOfPieces);// 0x2386308

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0x23867c8
	LinearColor GetLinearValue();// 0x2386784

--------------------------------
Class: ComboBox.Widget.Visual.Object
	Object*[] items;//[Offset: 0xcc, Size: 0xc]
	delegate OnGenerateWidgetEvent;//[Offset: 0xd8, Size: 0x10]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0xcc, Size: 0xc]
	delegate TextDelegate;//[Offset: 0xd8, Size: 0x10]
	FText HintText;//[Offset: 0xe8, Size: 0xc]
	delegate HintTextDelegate;//[Offset: 0xf8, Size: 0x10]
	EditableTextStyle WidgetStyle;//[Offset: 0x108, Size: 0x218]
	SlateWidgetStyleAsset* Style;//[Offset: 0x320, Size: 0x4]
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x324, Size: 0x4]
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x328, Size: 0x4]
	SlateBrushAsset* CaretImage;//[Offset: 0x32c, Size: 0x4]
	SlateFontInfo Font;//[Offset: 0x330, Size: 0x40]
	SlateColor ColorAndOpacity;//[Offset: 0x370, Size: 0x1c]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0x390, Size: 0x4]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1]
	byte KeyboardType;//[Offset: 0x39a, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x39c, Size: 0x4]
	delegate OnTextChanged;//[Offset: 0x3a0, Size: 0xc]
	delegate OnTextCommitted;//[Offset: 0x3ac, Size: 0xc]
	void SetText(FText InText);// 0x2389898
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x2389818
	void SetIsPassword(bool InbIsPassword);// 0x2389798
	void SetHintText(FText InHintText);// 0x23894f0
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1c01fa0
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x1c01fa0
	FText GetText();// 0x2389394

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0xcc, Size: 0xc]
	delegate TextDelegate;//[Offset: 0xd8, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0xe8, Size: 0x828]
	SlateWidgetStyleAsset* Style;//[Offset: 0x910, Size: 0x4]
	FText HintText;//[Offset: 0x914, Size: 0xc]
	delegate HintTextDelegate;//[Offset: 0x920, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x930, Size: 0x40]
	LinearColor ForegroundColor;//[Offset: 0x970, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x980, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x990, Size: 0x10]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a1, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0x9a4, Size: 0x4]
	Margin Padding;//[Offset: 0x9a8, Size: 0x10]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b9, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ba, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bb, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bd, Size: 0x1]
	byte KeyboardType;//[Offset: 0x9be, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x9c0, Size: 0x4]
	delegate OnTextChanged;//[Offset: 0x9c4, Size: 0xc]
	delegate OnTextCommitted;//[Offset: 0x9d0, Size: 0xc]
	void SetText(FText InText);// 0x238a70c
	void SetIsReadOnly(bool bReadOnly);// 0x238a68c
	void SetHintText(FText InText);// 0x238a3e4
	void SetError(FText InError);// 0x238a13c
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1c01fa0
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x1c01fa0
	bool HasError();// 0x238a114
	FText GetText();// 0x2389fb8
	void ClearError();// 0x2389fa4

--------------------------------
Class: ExpandableArea.Widget.Visual.Object
	ExpandableAreaStyle Style;//[Offset: 0xd0, Size: 0x130]
	SlateBrush BorderBrush;//[Offset: 0x200, Size: 0x90]
	SlateColor BorderColor;//[Offset: 0x290, Size: 0x1c]
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	float MaxHeight;//[Offset: 0x2b0, Size: 0x4]
	Margin HeaderPadding;//[Offset: 0x2b4, Size: 0x10]
	Margin AreaPadding;//[Offset: 0x2c4, Size: 0x10]
	delegate OnExpansionChanged;//[Offset: 0x2d4, Size: 0xc]
	Widget* HeaderContent;//[Offset: 0x2e0, Size: 0x4]
	Widget* BodyContent;//[Offset: 0x2e4, Size: 0x4]
	void SetIsExpanded_Animated(bool IsExpanded);// 0x238af9c
	void SetIsExpanded(bool IsExpanded);// 0x238af1c
	bool GetIsExpanded();// 0x238aef4

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle
	SlateBrush CollapsedImage;//[Offset: 0x8, Size: 0x90]
	SlateBrush ExpandedImage;//[Offset: 0x98, Size: 0x90]
	float RolloutAnimationSeconds;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0x238b42c

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0xd0, Size: 0x298]
	TextBlockStyle TextStyle;//[Offset: 0x368, Size: 0x1c8]
	InputChord SelectedKey;//[Offset: 0x530, Size: 0x18]
	SlateFontInfo Font;//[Offset: 0x548, Size: 0x40]
	Margin Margin;//[Offset: 0x588, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x598, Size: 0x10]
	FText KeySelectionText;//[Offset: 0x5a8, Size: 0xc]
	FText NoKeySpecifiedText;//[Offset: 0x5b4, Size: 0xc]
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1]
	Key[] EscapeKeys;//[Offset: 0x5c4, Size: 0xc]
	delegate OnKeySelected;//[Offset: 0x5d0, Size: 0xc]
	delegate OnIsSelectingKeyChanged;//[Offset: 0x5dc, Size: 0xc]
	void SetTextBlockVisibility(const enum InVisibility);// 0x238e598
	void SetSelectedKey(out const InputChord InSelectedKey);// 0x238e3ec
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0x238e144
	void SetKeySelectionText(FText InKeySelectionText);// 0x238de9c
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0x238de1c
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0x238dd9c
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0x1c01fa0
	void OnIsSelectingKeyChanged__DelegateSignature();// 0x1c01fa0
	bool GetIsSelectingKey();// 0x238dd74

--------------------------------
Class: Int32Binding.PropertyBinding.Object
	int GetValue();// 0x238ea14

--------------------------------
Class: TableViewBase.Widget.Visual.Object

--------------------------------
Class: ListView.TableViewBase.Widget.Visual.Object
	float ItemHeight;//[Offset: 0xcc, Size: 0x4]
	Object*[] items;//[Offset: 0xd0, Size: 0xc]
	byte SelectionMode;//[Offset: 0xdc, Size: 0x1]
	delegate OnGenerateRowEvent;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0xdc, Size: 0x4]
	delegate OnGetMenuContentEvent;//[Offset: 0xe0, Size: 0x10]
	byte Placement;//[Offset: 0xf0, Size: 0x1]
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	delegate OnMenuOpenChanged;//[Offset: 0xf4, Size: 0xc]
	void ToggleOpen(bool bFocusOnOpen);// 0x238f5cc
	bool ShouldOpenDueToClick();// 0x238f5a4
	void Open(bool bFocusMenu);// 0x238f524
	bool IsOpen();// 0x238f4fc
	bool HasOpenSubMenus();// 0x238f4d4
	Vector2D GetMenuPosition();// 0x238f494
	void Close();// 0x238f480

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object
	byte GetValue();// 0x238fa80

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	RichCurve Translation;//[Offset: 0x98, Size: 0x54]
	RichCurve Rotation;//[Offset: 0x140, Size: 0x54]
	RichCurve Scale;//[Offset: 0x194, Size: 0x54]
	RichCurve Shear;//[Offset: 0x23c, Size: 0x54]

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	RichCurve TopCurve;//[Offset: 0x98, Size: 0x54]
	RichCurve LeftCurve;//[Offset: 0xec, Size: 0x54]
	RichCurve RightCurve;//[Offset: 0x140, Size: 0x54]
	RichCurve BottomCurve;//[Offset: 0x194, Size: 0x54]

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName[] BrushPropertyNamePath;//[Offset: 0x5c, Size: 0xc]
	FName TrackName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf0, Size: 0xc]
	FText HintText;//[Offset: 0xfc, Size: 0xc]
	delegate HintTextDelegate;//[Offset: 0x108, Size: 0x10]
	TextBlockStyle WidgetStyle;//[Offset: 0x118, Size: 0x1c8]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0x2e8, Size: 0x40]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	delegate OnTextChanged;//[Offset: 0x32c, Size: 0xc]
	delegate OnTextCommitted;//[Offset: 0x338, Size: 0xc]
	void SetText(FText InText);// 0x2390b70
	void SetIsReadOnly(bool bReadOnly);// 0x2390af0
	void SetHintText(FText InText);// 0x2390848
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1c01fa0
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x1c01fa0
	FText GetText();// 0x23906ec

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf0, Size: 0xc]
	FText HintText;//[Offset: 0xfc, Size: 0xc]
	delegate HintTextDelegate;//[Offset: 0x108, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x118, Size: 0x828]
	TextBlockStyle TextStyle;//[Offset: 0x940, Size: 0x1c8]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb09, Size: 0x1]
	SlateWidgetStyleAsset* Style;//[Offset: 0xb0c, Size: 0x4]
	SlateFontInfo Font;//[Offset: 0xb10, Size: 0x40]
	LinearColor ForegroundColor;//[Offset: 0xb50, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0xb60, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xb70, Size: 0x10]
	delegate OnTextChanged;//[Offset: 0xb80, Size: 0xc]
	delegate OnTextCommitted;//[Offset: 0xb8c, Size: 0xc]
	void SetText(FText InText);// 0x2391934
	void SetIsReadOnly(bool bReadOnly);// 0x23918b4
	void SetHintText(FText InText);// 0x239160c
	void SetError(FText InError);// 0x2391364
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x1c01fa0
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x1c01fa0
	FText GetText();// 0x2391208

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x2392224

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2392628
	void SetPadding(Margin InPadding);// 0x23925a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2392528

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0xd0, Size: 0x1b8]
	SlateWidgetStyleAsset* Style;//[Offset: 0x288, Size: 0x4]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x28c, Size: 0x4]
	SlateBrushAsset* FillImage;//[Offset: 0x290, Size: 0x4]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x294, Size: 0x4]
	float Percent;//[Offset: 0x298, Size: 0x4]
	byte BarFillType;//[Offset: 0x29c, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x2a0, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x2a8, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x2b8, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2c8, Size: 0x10]
	void SetPercent(float InPercent);// 0x23934e4
	void SetIsMarquee(bool InbIsMarquee);// 0x2393464
	void SetFillColorAndOpacity(LinearColor InColor);// 0x23933e8

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	int Phase;//[Offset: 0xdc, Size: 0x4]
	int PhaseCount;//[Offset: 0xe0, Size: 0x4]
	MaterialInterface* EffectMaterial;//[Offset: 0xe4, Size: 0x4]
	FName TextureParameter;//[Offset: 0xe8, Size: 0x8]
	void SetTextureParameter(FName TextureParameter);// 0x2393a0c
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x2393994
	void RequestRender();// 0x2393980
	MaterialInstanceDynamic* GetEffectMaterial();// 0x2393958

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf0, Size: 0xc]
	delegate TextDelegate;//[Offset: 0x100, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x110, Size: 0x40]
	LinearColor Color;//[Offset: 0x150, Size: 0x10]
	RichTextBlockDecorator*[] Decorators;//[Offset: 0x160, Size: 0xc]

--------------------------------
Class: RichTextBlockDecorator.Object
	bool bReveal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int RevealedIndex;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x2394b74

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	Margin SafeAreaScale;//[Offset: 0x28, Size: 0x10]
	byte HAlign;//[Offset: 0x38, Size: 0x1]
	byte VAlign;//[Offset: 0x39, Size: 0x1]
	Margin Padding;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0xd9, Size: 0x1]
	byte StretchDirection;//[Offset: 0xda, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0xdc, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bSingleLayoutPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x2395214
	void SetStretchDirection(byte InStretchDirection);// 0x239519c
	void SetStretch(byte InStretch);// 0x2395124
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x23950a4

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2384318
	void SetPadding(Margin InPadding);// 0x23955e8
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2384218

--------------------------------
Class: ScrollBar.Widget.Visual.Object
	ScrollBarStyle WidgetStyle;//[Offset: 0xd0, Size: 0x518]
	SlateWidgetStyleAsset* Style;//[Offset: 0x5e8, Size: 0x4]
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 0x1]
	byte Orientation;//[Offset: 0x5ed, Size: 0x1]
	Vector2D Thickness;//[Offset: 0x5f0, Size: 0x8]
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0x2395984

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	void SetPadding(Margin InPadding);// 0x1354b54
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x1354adc

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd9, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd9, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd9, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd9, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd9, Size: 0x1]
	float WidthOverride;//[Offset: 0xdc, Size: 0x4]
	float HeightOverride;//[Offset: 0xe0, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0xe4, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0xe8, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0xec, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0xf0, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0xf4, Size: 0x4]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x2396f6c
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x2396ef4
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x2396e7c
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x2396e04
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x2396d8c
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x2396d14
	void SetHeightOverride(float InHeightOverride);// 0x2396c9c
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x2396c1c
	bool GetDontPaintWhenChildEmpty();// 0x2396bf4
	void ClearWidthOverride();// 0x2396be0
	void ClearMinDesiredWidth();// 0x2396bcc
	void ClearMinDesiredHeight();// 0x2396bb8
	void ClearMaxDesiredWidth();// 0x2396ba4
	void ClearMaxDesiredHeight();// 0x2396b90
	void ClearMaxAspectRatio();// 0x2396b7c
	void ClearHeightOverride();// 0x2396b68

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2384318
	void SetPadding(Margin InPadding);// 0x2397710
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2384218

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate);// 0x2398948
	static void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate);// 0x2398848
	static void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0x2398748
	static void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x2398594
	static Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0x23984bc
	static bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0x23983dc
	static Vector2D GetLocalSize(out const Geometry Geometry);// 0x2398344
	static Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0x23982ac
	static Vector2D GetAbsolutePosition(out const Geometry Geometry);// 0x2398214
	static bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0x2397cdc
	static void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x2397b84
	static Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0x2397aac

--------------------------------
Class: SlateDataSheet.Object
	Texture2D* DataTexture;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SlateVectorArtData.Object
	SlateMeshVertex[] VertexData;//[Offset: 0x1c, Size: 0xc]
	uint32[] IndexData;//[Offset: 0x28, Size: 0xc]
	MaterialInterface* Material;//[Offset: 0x34, Size: 0x4]
	Vector2D ExtentMin;//[Offset: 0x38, Size: 0x8]
	Vector2D ExtentMax;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: SlateMeshVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x8]
	Color Color;//[Offset: 0x8, Size: 0x4]
	Vector2D UV0;//[Offset: 0xc, Size: 0x8]
	Vector2D UV1;//[Offset: 0x14, Size: 0x8]
	Vector2D UV2;//[Offset: 0x1c, Size: 0x8]
	Vector2D UV3;//[Offset: 0x24, Size: 0x8]
	Vector2D UV4;//[Offset: 0x2c, Size: 0x8]
	Vector2D UV5;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0xcc, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0xd0, Size: 0x10]
	SliderStyle WidgetStyle;//[Offset: 0xe0, Size: 0x250]
	byte Orientation;//[Offset: 0x330, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x334, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x344, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 0x1]
	float StepSize;//[Offset: 0x358, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x360, Size: 0xc]
	delegate OnMouseCaptureEnd;//[Offset: 0x36c, Size: 0xc]
	delegate OnControllerCaptureBegin;//[Offset: 0x378, Size: 0xc]
	delegate OnControllerCaptureEnd;//[Offset: 0x384, Size: 0xc]
	delegate OnValueChanged;//[Offset: 0x390, Size: 0xc]
	void SetValue(float InValue);// 0x2399ae4
	void SetStepSize(float InValue);// 0x2399a6c
	void SetSliderHandleColor(LinearColor InValue);// 0x23999f0
	void SetSliderBarColor(LinearColor InValue);// 0x2399974
	void SetLocked(bool InValue);// 0x23998f4
	void SetIndentHandle(bool InValue);// 0x2399874
	float GetValue();// 0x239984c

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x90]
	SlateBrush DisabledBarImage;//[Offset: 0x98, Size: 0x90]
	SlateBrush NormalThumbImage;//[Offset: 0x128, Size: 0x90]
	SlateBrush DisabledThumbImage;//[Offset: 0x1b8, Size: 0x90]
	float BarThickness;//[Offset: 0x248, Size: 0x4]

--------------------------------
Class: SpinBox.Widget.Visual.Object
	float Value;//[Offset: 0xcc, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0xd0, Size: 0x10]
	SpinBoxStyle WidgetStyle;//[Offset: 0xe0, Size: 0x308]
	SlateWidgetStyleAsset* Style;//[Offset: 0x3e8, Size: 0x4]
	float Delta;//[Offset: 0x3ec, Size: 0x4]
	float SliderExponent;//[Offset: 0x3f0, Size: 0x4]
	SlateFontInfo Font;//[Offset: 0x3f8, Size: 0x40]
	byte Justification;//[Offset: 0x438, Size: 0x1]
	float MinDesiredWidth;//[Offset: 0x43c, Size: 0x4]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	SlateColor ForegroundColor;//[Offset: 0x444, Size: 0x1c]
	delegate OnValueChanged;//[Offset: 0x460, Size: 0xc]
	delegate OnValueCommitted;//[Offset: 0x46c, Size: 0xc]
	delegate OnBeginSliderMovement;//[Offset: 0x478, Size: 0xc]
	delegate OnEndSliderMovement;//[Offset: 0x484, Size: 0xc]
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1]
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x490, Size: 0x1]
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x490, Size: 0x1]
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x490, Size: 0x1]
	float MinValue;//[Offset: 0x494, Size: 0x4]
	float MaxValue;//[Offset: 0x498, Size: 0x4]
	float MinSliderValue;//[Offset: 0x49c, Size: 0x4]
	float MaxSliderValue;//[Offset: 0x4a0, Size: 0x4]
	void SetValue(float NewValue);// 0x239a9e0
	void SetMinValue(float NewValue);// 0x239a968
	void SetMinSliderValue(float NewValue);// 0x239a8f0
	void SetMaxValue(float NewValue);// 0x239a878
	void SetMaxSliderValue(float NewValue);// 0x239a800
	void SetForegroundColor(SlateColor InForegroundColor);// 0x239a4e0
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0x1c01fa0
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0x1c01fa0
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0x1c01fa0
	float GetValue();// 0x239a4ac
	float GetMinValue();// 0x239a484
	float GetMinSliderValue();// 0x239a45c
	float GetMaxValue();// 0x239a434
	float GetMaxSliderValue();// 0x239a40c
	void ClearMinValue();// 0x239a3f8
	void ClearMinSliderValue();// 0x239a3e4
	void ClearMaxValue();// 0x239a3d0
	void ClearMaxSliderValue();// 0x239a3bc

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0x239b324
	FString GetStringValue();// 0x239b264

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0xcc, Size: 0x4]
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	SlateBrushAsset* PieceImage;//[Offset: 0xd4, Size: 0x4]
	SlateBrush Image;//[Offset: 0xd8, Size: 0x90]
	void SetNumberOfPieces(int InNumberOfPieces);// 0x239cea0
	void SetAnimateVertically(bool bInAnimateVertically);// 0x239ce20
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0x239cda0
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0x239cd20

--------------------------------
Class: TileView.TableViewBase.Widget.Visual.Object
	float ItemWidth;//[Offset: 0xcc, Size: 0x4]
	float ItemHeight;//[Offset: 0xd0, Size: 0x4]
	Object*[] items;//[Offset: 0xd4, Size: 0xc]
	byte SelectionMode;//[Offset: 0xe0, Size: 0x1]
	delegate OnGenerateTileEvent;//[Offset: 0xe8, Size: 0x10]
	void SetItemWidth(float Width);// 0x239d390
	void SetItemHeight(float Height);// 0x239d318
	void RequestListRefresh();// 0x239d304

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0xdc, Size: 0x10]
	float MinDesiredSlotWidth;//[Offset: 0xec, Size: 0x4]
	float MinDesiredSlotHeight;//[Offset: 0xf0, Size: 0x4]
	void SetSlotPadding(Margin InSlotPadding);// 0x239de88
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0x239de10
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0x239dd98
	UniformGridSlot* AddChildToUniformGrid(Widget* Content);// 0x239dd18

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x24, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x25, Size: 0x1]
	int Row;//[Offset: 0x28, Size: 0x4]
	int Column;//[Offset: 0x2c, Size: 0x4]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x239e4c0
	void SetRow(int InRow);// 0x239e448
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x239e3d0
	void SetColumn(int InColumn);// 0x239e358

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x238c4dc
	bool GetDontPaintWhenChildEmpty();// 0x238c4b4
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x23aa364

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x34, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x3c, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x3d, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x238ca00
	void SetSize(SlateChildSize InSize);// 0x238c970
	void SetPadding(Margin InPadding);// 0x238c8e8
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x238c870

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor BackgroundColor;//[Offset: 0xdc, Size: 0x10]
	Actor* Spawn(class Actor ActorClass);// 0x23aabec
	void SetViewRotation(Rotator Rotation);// 0x23aab7c
	void SetViewLocation(Vector Location);// 0x23aab0c
	Rotator GetViewRotation();// 0x23aaac4
	World* GetViewportWorld();// 0x23aaa9c
	Vector GetViewLocation();// 0x23aaa54

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object
	enum GetValue();// 0x23ab058

--------------------------------
Class: WeakRefImage.Image.Widget.Visual.Object
	void UnloadTextureResource();// 0x23ab4b4
	void LoadTextureResource(bool bAsync);// 0x23ab434

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0x23ad5c4

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	WidgetTree* WidgetTree;//[Offset: 0x1d4, Size: 0x4]
	bool bAllowTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 0x1]
	bool bValidTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 0x1]
	bool bTemplateInitialized;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8, Size: 0x1]
	bool bCookedTemplate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d8, Size: 0x1]
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x1dc, Size: 0xc]
	WidgetAnimation*[] Animations;//[Offset: 0x1e8, Size: 0xc]
	FName[] NamedSlots;//[Offset: 0x1f4, Size: 0xc]
	UserWidget* TemplateAsset;//[Offset: 0x200, Size: 0x28]
	UserWidget* Template;//[Offset: 0x228, Size: 0x4]

--------------------------------
Class: DelegateRuntimeBinding
	FString ObjectName;//[Offset: 0x0, Size: 0xc]
	FName PropertyName;//[Offset: 0x10, Size: 0x8]
	FName FunctionName;//[Offset: 0x18, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0xc]
	enum Kind;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	static EventReply UnlockMouse(out EventReply Reply);// 0x23b2f9c
	static EventReply Unhandled();// 0x23b2f10
	static EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0x23b2d30
	static EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0x23b2ba4
	static void SetInputMode_UIOnlyEx(PlayerController* Target, Widget* InWidgetToFocus, enum InMouseLockMode);// 0x23b2aac
	static void SetInputMode_UIOnly(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x23b29ac
	static void SetInputMode_GameOnly(PlayerController* Target);// 0x23b293c
	static void SetInputMode_GameAndUIEx(PlayerController* Target, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0x23b27f8
	static void SetInputMode_GameAndUI(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x23b26a8
	static bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0x23b255c
	static void SetFocusToGameViewport();// 0x23b2548
	static void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0x23b225c
	static void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0x23b225c
	static EventReply ReleaseMouseCapture(out EventReply Reply);// 0x23b210c
	static EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0x23adef8
	static SlateBrush NoResourceBrush();// 0x23b1e00
	static SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0x23b1a24
	static SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0x23b1648
	static SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0x23b12f4
	static EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0x23b1160
	static bool IsDragDropping();// 0x23b1138
	static EventReply Handled();// 0x23b10ac
	static void GetSafeZonePadding(Object* WorldContextObject, out Vector2D SafePadding, out Vector2D SafePaddingScale, out Vector2D SpillOverPadding);// 0x23b0f44
	static KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0x23b0b30
	static InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0x23b08f0
	static InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0x23b0824
	static InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0x23b0614
	static InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0x23b0554
	static MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0x23b02a4
	static DragDropOperation* GetDragDroppingContent();// 0x23b027c
	static Texture2D* GetBrushResourceAsTexture2D(out SlateBrush Brush);// 0x23affcc
	static MaterialInterface* GetBrushResourceAsMaterial(out SlateBrush Brush);// 0x23afd1c
	static Object* GetBrushResource(out SlateBrush Brush);// 0x23afa6c
	static void GetAllWidgetsWithInterface(Object* WorldContextObject, class Interface Interface, out UserWidget*[] FoundWidgets, bool TopLevelOnly);// 0x23af8d0
	static void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0x23af734
	static EventReply EndDragDrop(out EventReply Reply);// 0x23af5e4
	static void DrawTextFormatted(out PaintContext Context, out const FText Text, Vector2D Position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0x23af28c
	static void DrawText(out PaintContext Context, FString inString, Vector2D Position, LinearColor Tint);// 0x23af0f0
	static void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias);// 0x23aef30
	static void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias);// 0x23aed8c
	static void DrawBox(out PaintContext Context, Vector2D Position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0x23aebe8
	static void DismissAllMenus();// 0x23aebd4
	static EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0x23ae658
	static EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0x23ae20c
	static DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0x23ae194
	static UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0x23ae094
	static EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0x23adef8
	static EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0x23add64
	static EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0x23adb84
	static void CancelDragDrop();// 0x23adb70

--------------------------------
Class: NavigationEvent.InputEvent

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x238, Size: 0xc]
	int VirtualUserIndex;//[Offset: 0x24c, Size: 0x4]
	float PointerIndex;//[Offset: 0x250, Size: 0x4]
	byte TraceChannel;//[Offset: 0x254, Size: 0x1]
	float InteractionDistance;//[Offset: 0x258, Size: 0x4]
	enum InteractionSource;//[Offset: 0x25c, Size: 0x1]
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1]
	LinearColor DebugColor;//[Offset: 0x260, Size: 0x10]
	HitResult CustomHitResult;//[Offset: 0x2c8, Size: 0x88]
	Vector2D LocalHitLocation;//[Offset: 0x350, Size: 0x8]
	Vector2D LastLocalHitLocation;//[Offset: 0x358, Size: 0x8]
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x360, Size: 0x4]
	HitResult LastHitResult;//[Offset: 0x368, Size: 0x88]
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 0x1]
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 0x1]
	void SetCustomHitResult(out const HitResult HitResult);// 0x23b6034
	bool SendKeyChar(FString Characters, bool bRepeat);// 0x23b5e7c
	void ScrollWheel(float ScrollDelta);// 0x23b5dfc
	void ReleasePointerKey(Key Key);// 0x23b5b08
	bool ReleaseKey(Key Key);// 0x23b580c
	void PressPointerKey(Key Key);// 0x23b5518
	bool PressKey(Key Key, bool bRepeat);// 0x23b51d0
	bool PressAndReleaseKey(Key Key);// 0x23b4ed4
	bool IsOverInteractableWidget();// 0x23b4eac
	bool IsOverHitTestVisibleWidget();// 0x23b4e84
	bool IsOverFocusableWidget();// 0x23b4e5c
	HitResult GetLastHitResult();// 0x23b4de4
	WidgetComponent* GetHoveredWidgetComponent();// 0x23b4dbc
	Vector2D Get2DHitLocation();// 0x23b4d7c

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object
	static VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0x23b7028
	static UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0x23b6fb0
	static OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0x23b6f38
	static HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0x23b6ec0
	static GridSlot* SlotAsGridSlot(Widget* Widget);// 0x23b6e48
	static CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0x23b6dd0
	static BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0x23b6d58
	static void RemoveAllWidgets(Object* WorldContextObject);// 0x23b6ce8
	static Vector2D ProjectWorldLocationToWidgetPositionReturnValue(PlayerController* PlayerController, Vector WorldLocation);// 0x23b6c1c
	static bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition);// 0x23b6b10
	static Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0x23b6a88
	static Vector2D GetViewportSize(Object* WorldContextObject);// 0x23b6a08
	static float GetViewportScale(Object* WorldContextObject);// 0x23b6990
	static Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0x23b6908
	static bool GetMousePositionScaledByDPI(PlayerController* Player, out float LocationX, out float LocationY);// 0x23b67e4
	static Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0x23b6764
	static Vector2D GetMousePositionOnPlatform();// 0x23b672c

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x23b8050
	void SetPadding(Margin InPadding);// 0x23925a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x23b7fd8

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x23b86f4
	void SetPadding(Margin InPadding);// 0x23b866c
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x23b85f4

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x34, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x35, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x23b8b80
	void SetPadding(Margin InPadding);// 0x23b8af8
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x23b8a80

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x2c8, Size: 0x4]
	float CraneYaw;//[Offset: 0x2cc, Size: 0x4]
	float CraneArmLength;//[Offset: 0x2d0, Size: 0x4]
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	SceneComponent* TransformComponent;//[Offset: 0x2d8, Size: 0x4]
	SceneComponent* CraneYawControl;//[Offset: 0x2dc, Size: 0x4]
	SceneComponent* CranePitchControl;//[Offset: 0x2e0, Size: 0x4]
	SceneComponent* CraneCameraMount;//[Offset: 0x2e4, Size: 0x4]

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x2c8, Size: 0x4]
	SceneComponent* TransformComponent;//[Offset: 0x2cc, Size: 0x4]
	SplineComponent* RailSplineComponent;//[Offset: 0x2d0, Size: 0x4]
	SceneComponent* RailCameraMount;//[Offset: 0x2d4, Size: 0x4]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7c0, Size: 0x28]
	CineCameraComponent* GetCineCameraComponent();// 0x23bbfb4

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x14, Size: 0x4]
	Vector RelativeOffset;//[Offset: 0x18, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x780, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x78c, Size: 0x14]
	CameraFocusSettings FocusSettings;//[Offset: 0x7a0, Size: 0x30]
	float CurrentFocalLength;//[Offset: 0x7d0, Size: 0x4]
	float CurrentAperture;//[Offset: 0x7d4, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x7d8, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x7e4, Size: 0xc]
	NamedLensPreset[] LensPresets;//[Offset: 0x7f0, Size: 0xc]
	FString DefaultFilmbackPresetName;//[Offset: 0x7fc, Size: 0xc]
	FString DefaultLensPresetName;//[Offset: 0x808, Size: 0xc]
	float DefaultLensFocalLength;//[Offset: 0x814, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x818, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x23bcc80
	void SetFilmbackPresetByName(FString InPresetName);// 0x23bcbc4
	float GetVerticalFieldOfView();// 0x23bcb9c
	FString GetLensPresetName();// 0x23bcadc
	float GetHorizontalFieldOfView();// 0x23bcab4
	FString GetFilmbackPresetName();// 0x23bc9f4

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x14]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x20, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x28, Size: 0x4]
	float FocusOffset;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x4]
	Vector RelativeOffset;//[Offset: 0x4, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0xc]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0xc, Size: 0x14]

--------------------------------
Class: AssetRegistryHelpers.Object
	static SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0x243eec0
	static ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0x243ec88
	static bool IsValid(out const AssetData InAssetData);// 0x243ea98
	static bool IsUAsset(out const AssetData InAssetData);// 0x243e8a8
	static bool IsRedirector(out const AssetData InAssetData);// 0x243e6b8
	static bool IsAssetLoaded(out const AssetData InAssetData);// 0x243e4c8
	static bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0x243e1e8
	static FString GetFullName(out const AssetData InAssetData);// 0x243df78
	static FString GetExportTextName(out const AssetData InAssetData);// 0x243dd08
	static class Object GetClass(out const AssetData InAssetData);// 0x243db18
	static interface class GetAssetRegistry();// 0x243dad8
	static Object* GetAsset(out const AssetData InAssetData);// 0x243d8e8
	static AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0x243d5e0

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8]
	FName PackageName;//[Offset: 0x8, Size: 0x8]
	FName PackagePath;//[Offset: 0x10, Size: 0x8]
	FName AssetName;//[Offset: 0x18, Size: 0x8]
	FName AssetClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ARFilter
	FName[] PackageNames;//[Offset: 0x0, Size: 0xc]
	FName[] PackagePaths;//[Offset: 0xc, Size: 0xc]
	FName[] ObjectPaths;//[Offset: 0x18, Size: 0xc]
	FName[] ClassNames;//[Offset: 0x24, Size: 0xc]
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x6c, Size: 0x3c]
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1]

--------------------------------
Class: TagAndValue
	FName Tag;//[Offset: 0x0, Size: 0x8]
	FString Value;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: AssetRegistry.Interface.Object
	void RunAssetsThroughFilter(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x244044c
	bool IsLoadingAssets();// 0x154f480
	bool HasAssets(const FName PackagePath, const bool bRecursive);// 0x2440370
	void GetSubPaths(FString InBasePath, out FString[] OutPathList, bool bInRecurse);// 0x2440160
	bool GetAssetsByPath(FName PackagePath, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0x243ffb8
	bool GetAssetsByPackageName(FName PackageName, out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x243fe60
	bool GetAssetsByClass(FName ClassName, out AssetData[] OutAssetData, bool bSearchSubClasses);// 0x243fd08
	bool GetAssets(out const ARFilter Filter, out AssetData[] OutAssetData);// 0x243fb78
	AssetData GetAssetByObjectPath(const FName ObjectPath, bool bIncludeOnlyOnDiskAssets);// 0x243f858
	void GetAllCachedPaths(out FString[] OutPathList);// 0x243f71c
	bool GetAllAssets(out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x243f610

--------------------------------
Class: GameNetworkManagerSettings.Object
	int MinDynamicBandwidth;//[Offset: 0x1c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x20, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x24, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x28, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x30, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x34, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x38, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x3c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x40, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: GameSessionSettings.Object
	int MaxSpectators;//[Offset: 0x1c, Size: 0x4]
	int MaxPlayers;//[Offset: 0x20, Size: 0x4]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: GeneralProjectSettings.Object
	FString CompanyName;//[Offset: 0x1c, Size: 0xc]
	FString CompanyDistinguishedName;//[Offset: 0x28, Size: 0xc]
	FString CopyrightNotice;//[Offset: 0x34, Size: 0xc]
	FString Description;//[Offset: 0x40, Size: 0xc]
	FString Homepage;//[Offset: 0x4c, Size: 0xc]
	FString LicensingTerms;//[Offset: 0x58, Size: 0xc]
	FString PrivacyPolicy;//[Offset: 0x64, Size: 0xc]
	Guid ProjectID;//[Offset: 0x70, Size: 0x10]
	FString ProjectName;//[Offset: 0x80, Size: 0xc]
	FString ProjectVersion;//[Offset: 0x8c, Size: 0xc]
	FString SupportContact;//[Offset: 0x98, Size: 0xc]
	FText ProjectDisplayedTitle;//[Offset: 0xa4, Size: 0xc]
	FText ProjectDebugTitleInfo;//[Offset: 0xb0, Size: 0xc]
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]
	bool bStartInAR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 0x1]
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]

--------------------------------
Class: HudSettings.Object
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	FName[] DebugDisplay;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object
	static bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x2454dec
	static bool NotEqual_TagTag(GameplayTag A, FString B);// 0x2454c44
	static bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0x2454970
	static bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x2454794
	static bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x24546d0
	static bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0x24545b8
	static bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x245441c
	static GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0x24541ec
	static GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0x2454168
	static GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0x245408c
	static GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0x2453f94
	static GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0x2453e54
	static bool IsGameplayTagValid(GameplayTag GameplayTag);// 0x2453ddc
	static bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0x2453c3c
	static bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x2453a14
	static bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x24537ec
	static bool HasAllMatchingGameplayTags(interface class TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0x2453674
	static FName GetTagName(out const GameplayTag GameplayTag);// 0x24535e0
	static int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0x24534d8
	static FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0x2453350
	static FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0x245324c
	static void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0x245308c
	static bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x2452eb0
	static bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x2452dec
	static bool DoesTagAssetInterfaceHaveTag(interface class TagContainerInterface, GameplayTag Tag);// 0x2452d00
	static bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0x2452b84
	static void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0x24529f0
	static void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0x245281c
	static void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x24526d8

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0xc]
	GameplayTag[] ParentTags;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x4, Size: 0xc]
	byte[] QueryTokenStream;//[Offset: 0x10, Size: 0xc]
	FString UserDescription;//[Offset: 0x1c, Size: 0xc]
	FString AutoDescription;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: GameplayTagAssetInterface.Interface.Object
	bool HasMatchingGameplayTag(GameplayTag TagToCheck);// 0x2455e08
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x2455cf0
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x2455bd8
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0x2455ac8

--------------------------------
Class: EditableGameplayTagQuery.Object
	FString UserDescription;//[Offset: 0x1c, Size: 0xc]
	EditableGameplayTagQueryExpression* RootExpression;//[Offset: 0x34, Size: 0x4]
	GameplayTagQuery TagQueryExportText_Helper;//[Offset: 0x38, Size: 0x34]

--------------------------------
Class: EditableGameplayTagQueryExpression.Object

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x1c, Size: 0x18]

--------------------------------
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x1c, Size: 0x18]

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x1c, Size: 0x18]

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: GameplayTagsManager.Object
	GameplayTagSource[] TagSources;//[Offset: 0x7c, Size: 0xc]
	DataTable*[] GameplayTagTables;//[Offset: 0xd4, Size: 0xc]

--------------------------------
Class: GameplayTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8]
	enum SourceType;//[Offset: 0x8, Size: 0x1]
	GameplayTagsList* SourceTagList;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x1c, Size: 0xc]
	GameplayTagTableRow[] GameplayTagList;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: GameplayTagTableRow.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8]
	FString DevComment;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: GameplayTagsSettings.GameplayTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	GameplayTagCategoryRemap[] CategoryRemapping;//[Offset: 0x38, Size: 0xc]
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	SoftObjectPath[] GameplayTagTableList;//[Offset: 0x48, Size: 0xc]
	GameplayTagRedirect[] GameplayTagRedirects;//[Offset: 0x54, Size: 0xc]
	FName[] CommonlyReplicatedTags;//[Offset: 0x60, Size: 0xc]
	int NumBitsForContainerSize;//[Offset: 0x6c, Size: 0x4]
	int NetIndexFirstBitSegment;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: GameplayTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0xc]
	FString[] RemapCategories;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: GameplayTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8]
	FName NewTagName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayTagsDeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: GameplayTask_ClaimResource.GameplayTask.Object
	static GameplayTask_ClaimResource* ClaimResources(interface class InTaskOwner, class GameplayTaskResource[] ResourceClasses, const byte Priority, const FName TaskInstanceName);// 0x245ea8c
	static GameplayTask_ClaimResource* ClaimResource(interface class InTaskOwner, class GameplayTaskResource ResourceClass, const byte Priority, const FName TaskInstanceName);// 0x245e914

--------------------------------
Class: GameplayTask_SpawnActor.GameplayTask.Object
	delegate Success;//[Offset: 0x48, Size: 0xc]
	delegate DidNotSpawn;//[Offset: 0x54, Size: 0xc]
	class Actor* ClassToSpawn;//[Offset: 0x78, Size: 0x4]
	static GameplayTask_SpawnActor* SpawnActor(interface class TaskOwner, Vector SpawnLocation, Rotator SpawnRotation, class Actor Class, bool bSpawnOnlyOnAuthority);// 0x245f278
	void FinishSpawningActor(Object* WorldContextObject, Actor* SpawnedActor);// 0x245f1b4
	bool BeginSpawningActor(Object* WorldContextObject, out Actor* SpawnedActor);// 0x245f0d8

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x48, Size: 0xc]
	delegate OnTimeExpired;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: GameplayTask_WaitDelay.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x48, Size: 0xc]
	static GameplayTask_WaitDelay* TaskWaitDelay(interface class TaskOwner, float Time, const byte Priority);// 0x245f9ac
	void TaskDelayDelegate__DelegateSignature();// 0x1c01fa0

--------------------------------
Class: GameplayTaskOwnerInterface.Interface.Object

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object
	static void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0x250bdec
	static Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail);// 0x250bc18
	static void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0x250bac8
	static void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0x250b9bc
	static bool IsValidAIRotation(Rotator Rotation);// 0x250b94c
	static bool IsValidAILocation(Vector Location);// 0x250b8dc
	static bool IsValidAIDirection(Vector DirectionVector);// 0x250b86c
	static NavigationPath* GetCurrentPath(Controller* Controller);// 0x250b7f4
	static BlackboardComponent* GetBlackboard(Actor* Target);// 0x250b77c
	static AIController* GetAIController(Actor* ControlledActor);// 0x250b704
	static AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0x250b528

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object
	FName ParamName;//[Offset: 0x20, Size: 0x8]
	float FloatValue;//[Offset: 0x28, Size: 0x4]
	int IntValue;//[Offset: 0x2c, Size: 0x4]
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object
	float Min;//[Offset: 0x34, Size: 0x4]
	float Max;//[Offset: 0x38, Size: 0x4]
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: AIPerceptionListenerInterface.Interface.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xc0, Size: 0xc]
	void UnregisterFromSense(class AISense SenseClass);// 0x250f62c
	void UnregisterFromPerceptionSystem();// 0x250f618
	void RegisterWithPerceptionSystem();// 0x250f604
	void RegisterForSense(class AISense SenseClass);// 0x250f58c

--------------------------------
Class: AIResourceInterface.Interface.Object

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object

--------------------------------
Class: AIResource_Logic.GameplayTaskResource.Object

--------------------------------
Class: AISense_Blueprint.AISense.Object
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x58, Size: 0x4]
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x5c, Size: 0xc]
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x68, Size: 0xc]
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0x1c01fa0
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x1c01fa0
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x1c01fa0
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x1c01fa0
	void K2_OnNewPawn(Pawn* NewPawn);// 0x1c01fa0
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0x2510c70
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0x2510ba4

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x58, Size: 0xc]
	static void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0x2511290

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector HitLocation;//[Offset: 0x10, Size: 0xc]
	Actor* DamagedActor;//[Offset: 0x1c, Size: 0x4]
	Actor* Instigator;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AISense_Hearing.AISense.Object
	AINoiseEvent[] NoiseEvents;//[Offset: 0x58, Size: 0xc]
	float SpeedOfSoundSq;//[Offset: 0x64, Size: 0x4]
	static void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag);// 0x25117fc

--------------------------------
Class: AINoiseEvent
	Vector NoiseLocation;//[Offset: 0x4, Size: 0xc]
	float Loudness;//[Offset: 0x10, Size: 0x4]
	float MaxRange;//[Offset: 0x14, Size: 0x4]
	Actor* Instigator;//[Offset: 0x18, Size: 0x4]
	FName Tag;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AISense_Prediction.AISense.Object
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x58, Size: 0xc]
	static void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0x2511e74
	static void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0x2511d7c

--------------------------------
Class: AIPredictionEvent
	Actor* Requestor;//[Offset: 0x0, Size: 0x4]
	Actor* PredictedActor;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0xdc, Size: 0x4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0xe0, Size: 0x4]
	double MaxTimeSlicePerTick;//[Offset: 0xe8, Size: 0x8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0xf0, Size: 0x4]
	float MaxQueryImportance;//[Offset: 0xf8, Size: 0x4]
	float SightLimitQueryImportance;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: AISense_Team.AISense.Object
	AITeamStimulusEvent[] RegisteredEvents;//[Offset: 0x58, Size: 0xc]

--------------------------------
Class: AITeamStimulusEvent
	Actor* Broadcaster;//[Offset: 0x28, Size: 0x4]
	Actor* Enemy;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: AISense_Touch.AISense.Object
	AITouchEvent[] RegisteredEvents;//[Offset: 0x58, Size: 0xc]

--------------------------------
Class: AITouchEvent
	Actor* TouchReceiver;//[Offset: 0xc, Size: 0x4]
	Actor* OtherActor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: AISenseConfig_Blueprint.AISenseConfig.Object
	class AISense_Blueprint* Implementation;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: AISenseConfig_Hearing.AISenseConfig.Object
	class AISense_Hearing* Implementation;//[Offset: 0x34, Size: 0x4]
	float HearingRange;//[Offset: 0x38, Size: 0x4]
	float LoSHearingRange;//[Offset: 0x3c, Size: 0x4]
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: AISenseConfig_Prediction.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x34, Size: 0x4]
	float SightRadius;//[Offset: 0x38, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x3c, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x40, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x44, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: AISenseConfig_Team.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Touch.AISenseConfig.Object

--------------------------------
Class: AISenseEvent_Damage.AISenseEvent.Object
	AIDamageEvent Event;//[Offset: 0x1c, Size: 0x24]

--------------------------------
Class: AISenseEvent_Hearing.AISenseEvent.Object
	AINoiseEvent Event;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: AISightTargetInterface.Interface.Object

--------------------------------
Class: AITask.GameplayTask.Object
	AIController* OwnerController;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object

--------------------------------
Class: AITask_MoveTo.AITask.GameplayTask.Object
	delegate OnRequestFailed;//[Offset: 0x4c, Size: 0xc]
	delegate OnMoveFinished;//[Offset: 0x58, Size: 0xc]
	AIMoveRequest MoveRequest;//[Offset: 0x64, Size: 0x28]
	static AITask_MoveTo* AIMoveTo(AIController* Controller, Vector GoalLocation, Actor* GoalActor, float AcceptanceRadius, byte StopOnOverlap, byte AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking);// 0x251466c

--------------------------------
Class: AIMoveRequest
	Actor* GoalActor;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AITask_RunEQS.AITask.GameplayTask.Object
	static AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate);// 0x2514c44

--------------------------------
Class: BehaviorTreeTypes.Object

--------------------------------
Class: BlackboardKeyType_Class.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object
	Enum* EnumType;//[Offset: 0x20, Size: 0x4]
	FString EnumName;//[Offset: 0x24, Size: 0xc]
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Name.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object
	FString EnumName;//[Offset: 0x20, Size: 0xc]
	Enum* EnumType;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object
	byte FinishMode;//[Offset: 0x5f, Size: 0x1]

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int IntValue;//[Offset: 0x60, Size: 0x4]
	float FloatValue;//[Offset: 0x64, Size: 0x4]
	FString StringValue;//[Offset: 0x68, Size: 0xc]
	FString CachedDescription;//[Offset: 0x74, Size: 0xc]
	byte OperationType;//[Offset: 0x80, Size: 0x1]
	byte NotifyObserver;//[Offset: 0x81, Size: 0x1]

--------------------------------
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x40, Size: 0x4]
	Actor* ActorOwner;//[Offset: 0x44, Size: 0x4]
	FName[] ObservedKeyNames;//[Offset: 0x48, Size: 0xc]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x1c01fa0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x1c01fa0
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x1c01fa0
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0x1c01fa0
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x1c01fa0
	void ReceiveObserverActivated(Actor* OwnerActor);// 0x1c01fa0
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x1c01fa0
	void ReceiveExecutionStart(Actor* OwnerActor);// 0x1c01fa0
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0x1c01fa0
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0x1c01fa0
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x1c01fa0
	bool PerformConditionCheck(Actor* OwnerActor);// 0x1c01fa0
	bool IsDecoratorObserverActive();// 0x251a5ac
	bool IsDecoratorExecutionActive();// 0x251a584

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ActorToCheck;//[Offset: 0x40, Size: 0x20]
	enum TagsToMatch;//[Offset: 0x60, Size: 0x1]
	GameplayTagContainer GameplayTags;//[Offset: 0x64, Size: 0x18]
	FString CachedDescription;//[Offset: 0x7c, Size: 0xc]

--------------------------------
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte Operator;//[Offset: 0x3e, Size: 0x1]
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x40, Size: 0x20]
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x40, Size: 0x4]
	BlackboardKeySelector ConeOrigin;//[Offset: 0x48, Size: 0x20]
	BlackboardKeySelector ConeDirection;//[Offset: 0x68, Size: 0x20]
	BlackboardKeySelector Observed;//[Offset: 0x88, Size: 0x20]

--------------------------------
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float CoolDownTime;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x40, Size: 0x20]
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x60, Size: 0x20]
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	byte PathQueryType;//[Offset: 0x81, Size: 0x1]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x60, Size: 0x4]
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x68, Size: 0x20]
	enum GeometricDistanceType;//[Offset: 0x88, Size: 0x1]
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class Object* TestClass;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x40, Size: 0x4]
	BlackboardKeySelector ConeOrigin;//[Offset: 0x48, Size: 0x20]
	BlackboardKeySelector Observed;//[Offset: 0x68, Size: 0x20]
	bool bUseSelfAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bUseSelfAsObserved;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int NumLoops;//[Offset: 0x40, Size: 0x4]
	bool bInfiniteLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float InfiniteLoopTimeoutTime;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x40, Size: 0x8]
	float CooldownDuration;//[Offset: 0x48, Size: 0x4]
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x40, Size: 0x8]
	float CooldownDuration;//[Offset: 0x48, Size: 0x4]
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bActivatesCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]

--------------------------------
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float TimeLimit;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object
	static void StopUsingExternalEvent(BTNode* NodeOwner);// 0x14864e8
	static void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0x1750858
	static void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0x251e21c
	static void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0x251dfd8
	static void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0x251de74
	static void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0x251dd10
	static void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0x251dbac
	static void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0x251da48
	static void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0x251d8e4
	static void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0x251d780
	static void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0x251d61c
	static void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0x251d4b0
	static BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0x251d438
	static BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0x251d3c0
	static Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251d28c
	static FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251d0e8
	static Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251cfb4
	static Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251ce90
	static FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251cd64
	static int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251cc40
	static float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251cb18
	static byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251c9f4
	static class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251c8d0
	static bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251c7ac
	static Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251c688
	static void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251c56c
	static void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x251c56c

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x48, Size: 0x4]
	Actor* ActorOwner;//[Offset: 0x4c, Size: 0x4]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x1c01fa0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x1c01fa0
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x1c01fa0
	void ReceiveSearchStart(Actor* OwnerActor);// 0x1c01fa0
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x1c01fa0
	void ReceiveDeactivation(Actor* OwnerActor);// 0x1c01fa0
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x1c01fa0
	void ReceiveActivation(Actor* OwnerActor);// 0x1c01fa0
	bool IsServiceActive();// 0x251f3a8

--------------------------------
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0x68, Size: 0x38]

--------------------------------
Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x4]
	AIDynamicParam[] QueryConfig;//[Offset: 0x4, Size: 0xc]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x10, Size: 0x20]
	byte RunMode;//[Offset: 0x30, Size: 0x1]
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	float Value;//[Offset: 0xc, Size: 0x4]
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x4c, Size: 0x4]
	Actor* ActorOwner;//[Offset: 0x50, Size: 0x4]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0x251ffe0
	void SetFinishOnMessage(FName MessageName);// 0x251ff68
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x1c01fa0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x1c01fa0
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x1c01fa0
	void ReceiveExecute(Actor* OwnerActor);// 0x1c01fa0
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x1c01fa0
	void ReceiveAbort(Actor* OwnerActor);// 0x1c01fa0
	bool IsTaskExecuting();// 0x251ff40
	bool IsTaskAborting();// 0x251ff18
	void FinishExecute(bool bSuccess);// 0x251fe98
	void FinishAbort();// 0x251fe84

--------------------------------
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object
	bool bWaitForGameplayTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object
	float Loudnes;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object
	AnimationAsset* AnimationToPlay;//[Offset: 0x4c, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bNonBlocking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0x54, Size: 0x4]
	SkeletalMeshComponent* CachedSkelMesh;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object
	PawnAction* Action;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float Precision;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object
	BehaviorTree* BehaviorAsset;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object
	GameplayTag InjectionTag;//[Offset: 0x50, Size: 0x8]
	BehaviorTree* DefaultBehaviorAsset;//[Offset: 0x58, Size: 0x4]
	BehaviorTree* BehaviorAsset;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	EnvQuery* QueryTemplate;//[Offset: 0x70, Size: 0x4]
	EnvNamedValue[] QueryParams;//[Offset: 0x74, Size: 0xc]
	AIDynamicParam[] QueryConfig;//[Offset: 0x80, Size: 0xc]
	byte RunMode;//[Offset: 0x8c, Size: 0x1]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x90, Size: 0x20]
	bool bUseBBKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0xb8, Size: 0x38]

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	float Value;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x50, Size: 0x8]
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	float CooldownDuration;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x58, Size: 0x20]

--------------------------------
Class: CrowdAgentInterface.Interface.Object

--------------------------------
Class: CrowdManager.CrowdManagerBase.Object
	bool EnabledCrowd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	NavigationData* MyNavData;//[Offset: 0x20, Size: 0x4]
	CrowdAvoidanceConfig[] AvoidanceConfig;//[Offset: 0x24, Size: 0xc]
	CrowdAvoidanceSamplingPattern[] SamplingPatterns;//[Offset: 0x30, Size: 0xc]
	int MaxAgents;//[Offset: 0x3c, Size: 0x4]
	float MaxAgentRadius;//[Offset: 0x40, Size: 0x4]
	int MaxAvoidedAgents;//[Offset: 0x44, Size: 0x4]
	int MaxAvoidedWalls;//[Offset: 0x48, Size: 0x4]
	float NavmeshCheckInterval;//[Offset: 0x4c, Size: 0x4]
	float PathOptimizationInterval;//[Offset: 0x50, Size: 0x4]
	float SeparationDirClamp;//[Offset: 0x54, Size: 0x4]
	float PathOffsetRadiusMultiplier;//[Offset: 0x58, Size: 0x4]
	bool bResolveCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: CrowdAvoidanceConfig
	float VelocityBias;//[Offset: 0x0, Size: 0x4]
	float DesiredVelocityWeight;//[Offset: 0x4, Size: 0x4]
	float CurrentVelocityWeight;//[Offset: 0x8, Size: 0x4]
	float SideBiasWeight;//[Offset: 0xc, Size: 0x4]
	float ImpactTimeWeight;//[Offset: 0x10, Size: 0x4]
	float ImpactTimeRange;//[Offset: 0x14, Size: 0x4]
	byte CustomPatternIdx;//[Offset: 0x18, Size: 0x1]
	byte AdaptiveDivisions;//[Offset: 0x19, Size: 0x1]
	byte AdaptiveRings;//[Offset: 0x1a, Size: 0x1]
	byte AdaptiveDepth;//[Offset: 0x1b, Size: 0x1]

--------------------------------
Class: CrowdAvoidanceSamplingPattern
	float[] Angles;//[Offset: 0x0, Size: 0xc]
	float[] Radii;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: DetourCrowdAIController.AIController.Controller.Actor.Object

--------------------------------
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object
	void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, out Vector ResultingLocation);// 0x1c01fa0
	void ProvideSingleActor(Object* QuerierObject, Actor* QuerierActor, out Actor* ResultingActor);// 0x1c01fa0
	void ProvideLocationsSet(Object* QuerierObject, Actor* QuerierActor, out Vector[] ResultingLocationSet);// 0x1c01fa0
	void ProvideActorsSet(Object* QuerierObject, Actor* QuerierActor, out Actor*[] ResultingActorsSet);// 0x1c01fa0

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object

--------------------------------
Class: EnvQueryContext_Querier.EnvQueryContext.Object

--------------------------------
Class: EnvQueryDebugHelpers.Object

--------------------------------
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* SearchedActorClass;//[Offset: 0x34, Size: 0x4]
	AIDataProviderBoolValue GenerateOnlyActorsInRadius;//[Offset: 0x38, Size: 0x20]
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x58, Size: 0x20]
	class EnvQueryContext* SearchCenter;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	FText GeneratorsActionDescription;//[Offset: 0x34, Size: 0xc]
	class EnvQueryContext* Context;//[Offset: 0x40, Size: 0x4]
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x44, Size: 0x4]
	Object* GetQuerier();// 0x25235d0
	void DoItemGeneration(out const Vector[] ContextLocations);// 0x1c01fa0
	void AddGeneratedVector(Vector GeneratedVector);// 0x2523560
	void AddGeneratedActor(Actor* GeneratedActor);// 0x25234e8

--------------------------------
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object
	EnvQueryGenerator*[] Generators;//[Offset: 0x34, Size: 0xc]
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x34, Size: 0x28]

--------------------------------
Class: EnvTraceData
	int VersionNum;//[Offset: 0x0, Size: 0x4]
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x4, Size: 0x4]
	float ProjectDown;//[Offset: 0x8, Size: 0x4]
	float ProjectUp;//[Offset: 0xc, Size: 0x4]
	float ExtentX;//[Offset: 0x10, Size: 0x4]
	float ExtentY;//[Offset: 0x14, Size: 0x4]
	float ExtentZ;//[Offset: 0x18, Size: 0x4]
	float PostProjectionVerticalOffset;//[Offset: 0x1c, Size: 0x4]
	byte TraceChannel;//[Offset: 0x20, Size: 0x1]
	byte SerializedChannel;//[Offset: 0x21, Size: 0x1]
	byte TraceShape;//[Offset: 0x22, Size: 0x1]
	byte TraceMode;//[Offset: 0x23, Size: 0x1]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x60, Size: 0x20]
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0x80, Size: 0x20]
	AIDataProviderFloatValue AngleStep;//[Offset: 0xa0, Size: 0x20]
	AIDataProviderFloatValue Range;//[Offset: 0xc0, Size: 0x20]
	class EnvQueryContext* CenterActor;//[Offset: 0xe0, Size: 0x4]
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe4, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object
	class EnvQueryContext* QueryContext;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue InnerRadius;//[Offset: 0x60, Size: 0x20]
	AIDataProviderFloatValue OuterRadius;//[Offset: 0x80, Size: 0x20]
	AIDataProviderIntValue NumberOfRings;//[Offset: 0xa0, Size: 0x20]
	AIDataProviderIntValue PointsPerRing;//[Offset: 0xc0, Size: 0x20]
	EnvDirection ArcDirection;//[Offset: 0xe0, Size: 0x10]
	AIDataProviderFloatValue ArcAngle;//[Offset: 0xf0, Size: 0x20]
	bool bUseSpiralPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	class EnvQueryContext* Center;//[Offset: 0x114, Size: 0x4]
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue
	int DefaultValue;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: EnvDirection
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x4]
	class EnvQueryContext* LineTo;//[Offset: 0x4, Size: 0x4]
	class EnvQueryContext* Rotation;//[Offset: 0x8, Size: 0x4]
	byte DirMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x60, Size: 0x20]
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0x80, Size: 0x20]
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xa0, Size: 0x20]
	enum PointOnCircleSpacingMethod;//[Offset: 0xc0, Size: 0x1]
	EnvDirection ArcDirection;//[Offset: 0xc4, Size: 0x10]
	AIDataProviderFloatValue ArcAngle;//[Offset: 0xd8, Size: 0x20]
	float AngleRadians;//[Offset: 0xf8, Size: 0x4]
	class EnvQueryContext* CircleCenter;//[Offset: 0xfc, Size: 0x4]
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x108, Size: 0x20]
	EnvTraceData TraceData;//[Offset: 0x128, Size: 0x28]
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue GridSize;//[Offset: 0x60, Size: 0x20]
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0x80, Size: 0x20]
	class EnvQueryContext* GenerateAround;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderBoolValue PathToItem;//[Offset: 0xa8, Size: 0x20]
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0xc8, Size: 0x4]
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0xd0, Size: 0x20]

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x129, Size: 0x1]
	class EnvQueryContext* DistanceTo;//[Offset: 0x12c, Size: 0x4]

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object
	EnvDirection LineA;//[Offset: 0x12c, Size: 0x10]
	EnvDirection LineB;//[Offset: 0x13c, Size: 0x10]
	enum TestMode;//[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 0x1]

--------------------------------
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x12c, Size: 0x34]
	bool bUpdatedToUseQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	enum TagsToMatch;//[Offset: 0x161, Size: 0x1]
	GameplayTagContainer GameplayTags;//[Offset: 0x164, Size: 0x18]

--------------------------------
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object
	EnvOverlapData OverlapData;//[Offset: 0x12c, Size: 0x1c]

--------------------------------
Class: EnvOverlapData
	float ExtentX;//[Offset: 0x0, Size: 0x4]
	float ExtentY;//[Offset: 0x4, Size: 0x4]
	float ExtentZ;//[Offset: 0x8, Size: 0x4]
	Vector ShapeOffset;//[Offset: 0xc, Size: 0xc]
	byte OverlapChannel;//[Offset: 0x18, Size: 0x1]
	byte OverlapShape;//[Offset: 0x19, Size: 0x1]
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	bool bOverlapComplex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x129, Size: 0x1]
	class EnvQueryContext* Context;//[Offset: 0x12c, Size: 0x4]
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x130, Size: 0x20]
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x150, Size: 0x20]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x170, Size: 0x4]

--------------------------------
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x178, Size: 0x20]

--------------------------------
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x12c, Size: 0x28]

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x12c, Size: 0x28]
	AIDataProviderBoolValue TraceFromContext;//[Offset: 0x158, Size: 0x20]
	AIDataProviderFloatValue ItemHeightOffset;//[Offset: 0x178, Size: 0x20]
	AIDataProviderFloatValue ContextHeightOffset;//[Offset: 0x198, Size: 0x20]
	class EnvQueryContext* Context;//[Offset: 0x1b8, Size: 0x4]

--------------------------------
Class: EnvQueryTypes.Object

--------------------------------
Class: EQSQueryResultSourceInterface.Interface.Object

--------------------------------
Class: EQSRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object
	EnvQuery* QueryTemplate;//[Offset: 0x5e4, Size: 0x4]
	EnvNamedValue[] QueryParams;//[Offset: 0x5e8, Size: 0xc]
	AIDynamicParam[] QueryConfig;//[Offset: 0x5f4, Size: 0xc]
	float TimeLimitPerStep;//[Offset: 0x600, Size: 0x4]
	int StepToDebugDraw;//[Offset: 0x604, Size: 0x4]
	enum HighlightMode;//[Offset: 0x608, Size: 0x1]
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x609, Size: 0x1]
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x609, Size: 0x1]
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x609, Size: 0x1]
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x609, Size: 0x1]
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x609, Size: 0x1]
	byte QueryingMode;//[Offset: 0x60a, Size: 0x1]

--------------------------------
Class: GenericTeamAgentInterface.Interface.Object

--------------------------------
Class: GridPathAIController.AIController.Controller.Actor.Object

--------------------------------
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	NavLocalGridManager* GridManager;//[Offset: 0x24c, Size: 0x4]

--------------------------------
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object

--------------------------------
Class: PawnAction_BlueprintBase.PawnAction.Object
	void ActionTick(Pawn* ControlledPawn, float DeltaSeconds);// 0x1c01fa0
	void ActionStart(Pawn* ControlledPawn);// 0x1c01fa0
	void ActionResume(Pawn* ControlledPawn);// 0x1c01fa0
	void ActionPause(Pawn* ControlledPawn);// 0x1c01fa0
	void ActionFinished(Pawn* ControlledPawn, byte WithResult);// 0x1c01fa0

--------------------------------
Class: PawnAction_Move.PawnAction.Object
	Actor* GoalActor;//[Offset: 0x64, Size: 0x4]
	Vector GoalLocation;//[Offset: 0x68, Size: 0xc]
	float AcceptableRadius;//[Offset: 0x74, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x78, Size: 0x4]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 0x1]
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 0x1]
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 0x1]
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 0x1]
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 0x1]
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: PawnAction_Repeat.PawnAction.Object
	PawnAction* ActionToRepeat;//[Offset: 0x64, Size: 0x4]
	PawnAction* RecentActionCopy;//[Offset: 0x68, Size: 0x4]
	byte ChildFailureHandlingMode;//[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: PawnAction_Sequence.PawnAction.Object
	PawnAction*[] ActionSequence;//[Offset: 0x64, Size: 0xc]
	byte ChildFailureHandlingMode;//[Offset: 0x70, Size: 0x1]
	PawnAction* RecentActionCopy;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: PawnAction_Wait.PawnAction.Object
	float TimeToWait;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object
	float HearingThreshold;//[Offset: 0xbc, Size: 0x4]
	float LOSHearingThreshold;//[Offset: 0xc0, Size: 0x4]
	float SightRadius;//[Offset: 0xc4, Size: 0x4]
	float SensingInterval;//[Offset: 0xc8, Size: 0x4]
	float HearingMaxSoundAge;//[Offset: 0xcc, Size: 0x4]
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1]
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd0, Size: 0x1]
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd0, Size: 0x1]
	delegate OnSeePawn;//[Offset: 0xe0, Size: 0xc]
	delegate OnHearNoise;//[Offset: 0xec, Size: 0xc]
	float PeripheralVisionAngle;//[Offset: 0xf8, Size: 0x4]
	float PeripheralVisionCosine;//[Offset: 0xfc, Size: 0x4]
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0x13bd2a8
	void SetSensingInterval(const float NewSensingInterval);// 0x12e0ed0
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0x12e0f6c
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0x1c01fa0
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0x1c01fa0
	float GetPeripheralVisionCosine();// 0x252bad8
	float GetPeripheralVisionAngle();// 0x12e0970

--------------------------------
Class: VisualLoggerExtension.Object

--------------------------------
Class: GeometryCache.Object
	MaterialInterface*[] Materials;//[Offset: 0x20, Size: 0xc]
	GeometryCacheTrack*[] Tracks;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: GeometryCacheTrack.Object

--------------------------------
Class: GeometryCacheActor.Actor.Object
	GeometryCacheComponent* GeometryCacheComponent;//[Offset: 0x2c8, Size: 0x4]
	GeometryCacheComponent* GetGeometryCacheComponent();// 0x253e73c

--------------------------------
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GeometryCache* GeometryCache;//[Offset: 0x51c, Size: 0x4]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 0x1]
	float StartTimeOffset;//[Offset: 0x524, Size: 0x4]
	float PlaybackSpeed;//[Offset: 0x528, Size: 0x4]
	int NumTracks;//[Offset: 0x52c, Size: 0x4]
	float ElapsedTime;//[Offset: 0x530, Size: 0x4]
	void Stop();// 0x253ee28
	void SetStartTimeOffset(const float NewStartTimeOffset);// 0x253edb0
	void SetPlaybackSpeed(const float NewPlaybackSpeed);// 0x253ed38
	void SetLooping(const bool bNewLooping);// 0x253ecb8
	bool SetGeometryCache(GeometryCache* NewGeomCache);// 0x253ec30
	void PlayReversedFromEnd();// 0x253ec1c
	void PlayReversed();// 0x253ec08
	void PlayFromStart();// 0x253ebf4
	void Play();// 0x253ebe0
	void Pause();// 0x253ebcc
	bool IsPlayingReversed();// 0x253eba4
	bool IsPlaying();// 0x253eb7c
	bool IsLooping();// 0x253eb54
	float GetStartTimeOffset();// 0x253eb2c
	float GetPlaybackSpeed();// 0x253eb04

--------------------------------
Class: GeometryCacheTrack_FlipbookAnimation.GeometryCacheTrack.Object
	uint32 NumMeshSamples;//[Offset: 0x38, Size: 0x4]
	void AddMeshSample(out const GeometryCacheMeshData MeshData, const float SampleTime);// 0x253f74c

--------------------------------
Class: GeometryCacheMeshData

--------------------------------
Class: GeometryCacheTrack_TransformAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x253fad8

--------------------------------
Class: GeometryCacheTrack_TransformGroupAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x253fad8

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0x133d2f0
	void StartReconstruction();// 0x131b67c
	void PauseReconstruction();// 0x13e6168
	bool IsReconstructionStarted();// 0x1391ee8
	bool IsReconstructionPaused();// 0x2545408
	void DisconnectMRMesh();// 0x15c567c
	MRMeshConfiguration ConnectMRMesh(MRMeshComponent* Mesh);// 0x1505c8c

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x504, Size: 0x4]
	MeshReconstructorBase* MeshReconstructor;//[Offset: 0x508, Size: 0x4]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 0x1]
	BodySetup*[] BodySetups;//[Offset: 0x510, Size: 0xc]
	MeshReconstructorBase* GetReconstructor();// 0x2545904
	void ConnectReconstructor(MeshReconstructorBase* Reconstructor);// 0x254588c

--------------------------------
Class: MRMeshConfiguration

--------------------------------
Class: MoviePlayerSettings.Object
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	FString[] bMoviesAreSkippable;//[Offset: 0x20, Size: 0xc]
	FString[] StartupMovies;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: JsonUtilitiesDummyObject.Object

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: OverlayItem
	Timespan StartTime;//[Offset: 0x0, Size: 0x8]
	Timespan endTime;//[Offset: 0x8, Size: 0x8]
	FString Text;//[Offset: 0x10, Size: 0xc]
	Vector2D Position;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x1c, Size: 0x4]
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x20, Size: 0x3c]

--------------------------------
Class: ClothingAssetCustomData.Object

--------------------------------
Class: ClothingAsset.ClothingAssetBase.Object
	PhysicsAsset* PhysicsAsset;//[Offset: 0x38, Size: 0x4]
	ClothConfig ClothConfig;//[Offset: 0x3c, Size: 0xbc]
	ClothLODData[] LODData;//[Offset: 0xf8, Size: 0xc]
	int[] LodMap;//[Offset: 0x104, Size: 0xc]
	FName[] UsedBoneNames;//[Offset: 0x110, Size: 0xc]
	int[] UsedBoneIndices;//[Offset: 0x11c, Size: 0xc]
	int ReferenceBoneIndex;//[Offset: 0x128, Size: 0x4]
	ClothingAssetCustomData* customData;//[Offset: 0x12c, Size: 0x4]

--------------------------------
Class: ClothConfig
	enum WindMethod;//[Offset: 0x0, Size: 0x1]
	ClothConstraintSetup VerticalConstraintConfig;//[Offset: 0x4, Size: 0x10]
	ClothConstraintSetup HorizontalConstraintConfig;//[Offset: 0x14, Size: 0x10]
	ClothConstraintSetup BendConstraintConfig;//[Offset: 0x24, Size: 0x10]
	ClothConstraintSetup ShearConstraintConfig;//[Offset: 0x34, Size: 0x10]
	float SelfCollisionRadius;//[Offset: 0x44, Size: 0x4]
	float SelfCollisionStiffness;//[Offset: 0x48, Size: 0x4]
	float SelfCollisionCullScale;//[Offset: 0x4c, Size: 0x4]
	Vector Damping;//[Offset: 0x50, Size: 0xc]
	float Friction;//[Offset: 0x5c, Size: 0x4]
	float WindDragCoefficient;//[Offset: 0x60, Size: 0x4]
	float WindLiftCoefficient;//[Offset: 0x64, Size: 0x4]
	Vector LinearDrag;//[Offset: 0x68, Size: 0xc]
	Vector AngularDrag;//[Offset: 0x74, Size: 0xc]
	Vector LinearInertiaScale;//[Offset: 0x80, Size: 0xc]
	Vector AngularInertiaScale;//[Offset: 0x8c, Size: 0xc]
	Vector CentrifugalInertiaScale;//[Offset: 0x98, Size: 0xc]
	float SolverFrequency;//[Offset: 0xa4, Size: 0x4]
	float StiffnessFrequency;//[Offset: 0xa8, Size: 0x4]
	float GravityScale;//[Offset: 0xac, Size: 0x4]
	float TetherStiffness;//[Offset: 0xb0, Size: 0x4]
	float TetherLimit;//[Offset: 0xb4, Size: 0x4]
	float CollisionThickness;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: ClothConstraintSetup
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4]
	float StretchLimit;//[Offset: 0x8, Size: 0x4]
	float CompressionLimit;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothLODData
	ClothPhysicalMeshData PhysicalMeshData;//[Offset: 0x0, Size: 0x74]
	ClothCollisionData CollisionData;//[Offset: 0x74, Size: 0x24]

--------------------------------
Class: ClothPhysicalMeshData
	Vector[] Vertices;//[Offset: 0x0, Size: 0xc]
	Vector[] Normals;//[Offset: 0xc, Size: 0xc]
	uint32[] Indices;//[Offset: 0x18, Size: 0xc]
	float[] MaxDistances;//[Offset: 0x24, Size: 0xc]
	float[] BackstopDistances;//[Offset: 0x30, Size: 0xc]
	float[] BackstopRadiuses;//[Offset: 0x3c, Size: 0xc]
	float[] InverseMasses;//[Offset: 0x48, Size: 0xc]
	ClothVertBoneData[] BoneData;//[Offset: 0x54, Size: 0xc]
	int MaxBoneWeights;//[Offset: 0x60, Size: 0x4]
	int NumFixedVerts;//[Offset: 0x64, Size: 0x4]
	uint32[] SelfCollisionIndices;//[Offset: 0x68, Size: 0xc]

--------------------------------
Class: ClothVertBoneData
	int NumInfluences;//[Offset: 0x0, Size: 0x4]
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2]
	float BoneWeights;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ClothCollisionData
	ClothCollisionPrim_Sphere[] Spheres;//[Offset: 0x0, Size: 0xc]
	ClothCollisionPrim_SphereConnection[] SphereConnections;//[Offset: 0xc, Size: 0xc]
	ClothCollisionPrim_Convex[] Convexes;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: ClothCollisionPrim_Sphere
	int BoneIndex;//[Offset: 0x0, Size: 0x4]
	float Radius;//[Offset: 0x4, Size: 0x4]
	Vector LocalPosition;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: ClothCollisionPrim_SphereConnection
	int SphereIndices;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ClothCollisionPrim_Convex
	Plane[] Planes;//[Offset: 0x0, Size: 0xc]
	int BoneIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object

--------------------------------
Class: AndroidRuntimeSettings.Object
	FString PackageName;//[Offset: 0x1c, Size: 0xc]
	int StoreVersion;//[Offset: 0x28, Size: 0x4]
	FString ApplicationDisplayName;//[Offset: 0x2c, Size: 0xc]
	FString VersionDisplayName;//[Offset: 0x38, Size: 0xc]
	int MinSDKVersion;//[Offset: 0x44, Size: 0x4]
	int TargetSDKVersion;//[Offset: 0x48, Size: 0x4]
	byte InstallLocation;//[Offset: 0x4c, Size: 0x1]
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	byte Orientation;//[Offset: 0x52, Size: 0x1]
	float MaxAspectRatio;//[Offset: 0x54, Size: 0x4]
	byte AntVerbosity;//[Offset: 0x58, Size: 0x1]
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	byte DepthBufferPreference;//[Offset: 0x5b, Size: 0x1]
	FString[] ExtraManifestNodeTags;//[Offset: 0x5c, Size: 0xc]
	FString[] ExtraApplicationNodeTags;//[Offset: 0x68, Size: 0xc]
	FString ExtraApplicationSettings;//[Offset: 0x74, Size: 0xc]
	FString[] ExtraActivityNodeTags;//[Offset: 0x80, Size: 0xc]
	FString ExtraActivitySettings;//[Offset: 0x8c, Size: 0xc]
	FString[] ExtraPermissions;//[Offset: 0x98, Size: 0xc]
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bPackageForGearVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 0x1]
	byte[] GoogleVRCaps;//[Offset: 0xa8, Size: 0xc]
	bool bGoogleVRSustainedPerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	FString KeyStore;//[Offset: 0xb8, Size: 0xc]
	FString KeyAlias;//[Offset: 0xc4, Size: 0xc]
	FString KeyStorePassword;//[Offset: 0xd0, Size: 0xc]
	FString KeyPassword;//[Offset: 0xdc, Size: 0xc]
	bool bBuildForArmV7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bBuildForX86;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	bool bBuildForES2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 0x1]
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	FString GamesAppID;//[Offset: 0xf4, Size: 0xc]
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x100, Size: 0xc]
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x10c, Size: 0xc]
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	FString AdMobAdUnitID;//[Offset: 0x11c, Size: 0xc]
	FString[] AdMobAdUnitIDs;//[Offset: 0x128, Size: 0xc]
	FString GooglePlayLicenseKey;//[Offset: 0x134, Size: 0xc]
	FString GCMClientSenderID;//[Offset: 0x140, Size: 0xc]
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]
	byte AndroidAudio;//[Offset: 0x14d, Size: 0x1]
	int AudioSampleRate;//[Offset: 0x150, Size: 0x4]
	int AudioCallbackBufferFrameSize;//[Offset: 0x154, Size: 0x4]
	int AudioNumBuffersToEnqueue;//[Offset: 0x158, Size: 0x4]
	int AudioMaxChannels;//[Offset: 0x15c, Size: 0x4]
	int AudioNumSourceWorkers;//[Offset: 0x160, Size: 0x4]
	FString SpatializationPlugin;//[Offset: 0x164, Size: 0xc]
	FString ReverbPlugin;//[Offset: 0x170, Size: 0xc]
	FString OcclusionPlugin;//[Offset: 0x17c, Size: 0xc]
	byte AndroidGraphicsDebugger;//[Offset: 0x188, Size: 0x1]
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x18c, Size: 0xc]
	DirectoryPath RenderDocPath;//[Offset: 0x198, Size: 0xc]
	bool bMultiTargetFormat_ETC1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 0x1]
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 0x1]
	bool bMultiTargetFormat_PVRTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a7, Size: 0x1]
	bool bMultiTargetFormat_ATC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]
	float TextureFormatPriority_ETC1;//[Offset: 0x1ac, Size: 0x4]
	float TextureFormatPriority_ETC2;//[Offset: 0x1b0, Size: 0x4]
	float TextureFormatPriority_DXT;//[Offset: 0x1b4, Size: 0x4]
	float TextureFormatPriority_PVRTC;//[Offset: 0x1b8, Size: 0x4]
	float TextureFormatPriority_ATC;//[Offset: 0x1bc, Size: 0x4]
	float TextureFormatPriority_ASTC;//[Offset: 0x1c0, Size: 0x4]

--------------------------------
Class: GooglePlayAchievementMapping
	FString Name;//[Offset: 0x0, Size: 0xc]
	FString AchievementID;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: GooglePlayLeaderboardMapping
	FString Name;//[Offset: 0x0, Size: 0xc]
	FString LeaderboardID;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BlueprintTableLibrary.BlueprintFunctionLibrary.Object
	static bool IsValid(out const UAETableRow Row);// 0x2ebb574
	static FString GetRowString(out const UAETableRow Row, FName Key);// 0x2ebb414
	static int GetRowInt(out const UAETableRow Row, FName Key);// 0x2ebb340
	static float GetRowFloat(out const UAETableRow Row, FName Key);// 0x2ebb26c
	static bool GetRowBool(out const UAETableRow Row, FName Key);// 0x2ebb198

--------------------------------
Class: BuildPatchManifest.Object
	byte ManifestFileVersion;//[Offset: 0x1c, Size: 0x1]
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	uint32 appId;//[Offset: 0x20, Size: 0x4]
	FString AppName;//[Offset: 0x24, Size: 0xc]
	FString BuildVersion;//[Offset: 0x30, Size: 0xc]
	FString LaunchExe;//[Offset: 0x3c, Size: 0xc]
	FString LaunchCommand;//[Offset: 0x48, Size: 0xc]
	<FString> PrereqIds;//[Offset: 0x54, Size: 0x3c]
	FString PrereqName;//[Offset: 0x90, Size: 0xc]
	FString PrereqPath;//[Offset: 0x9c, Size: 0xc]
	FString PrereqArgs;//[Offset: 0xa8, Size: 0xc]
	FileManifestData[] FileManifestList;//[Offset: 0xb4, Size: 0xc]
	ChunkInfoData[] ChunkList;//[Offset: 0xc0, Size: 0xc]
	CustomFieldData[] CustomFields;//[Offset: 0xcc, Size: 0xc]

--------------------------------
Class: FileManifestData
	FString Filename;//[Offset: 0x0, Size: 0xc]
	SHAHashData FileHash;//[Offset: 0xc, Size: 0x14]
	ChunkPartData[] FileChunkParts;//[Offset: 0x20, Size: 0xc]
	FString[] InstallTags;//[Offset: 0x2c, Size: 0xc]
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	FString SymlinkTarget;//[Offset: 0x3c, Size: 0xc]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: SHAHashData
	byte Hash;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ChunkPartData
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	uint32 Offset;//[Offset: 0x10, Size: 0x4]
	uint32 Size;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ChunkInfoData
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	uint64 Hash;//[Offset: 0x10, Size: 0x8]
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14]
	int64 FileSize;//[Offset: 0x30, Size: 0x8]
	byte GroupNumber;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: CustomFieldData
	FString Key;//[Offset: 0x0, Size: 0xc]
	FString Value;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x134fd68
	FString GetUrl();// 0x2cba744

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x28, Size: 0xc]
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	void SetFilePath(FString Path);// 0x2f7294c

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x2f73314
	static void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x2f73228
	static void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x2f7313c

--------------------------------
Class: MediaCaptureDevice
	FText DisplayName;//[Offset: 0x0, Size: 0xc]
	FString URL;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x1c, Size: 0xc]
	delegate OnMediaClosed;//[Offset: 0x28, Size: 0xc]
	delegate OnMediaOpened;//[Offset: 0x34, Size: 0xc]
	delegate OnMediaOpenFailed;//[Offset: 0x40, Size: 0xc]
	delegate OnPlaybackResumed;//[Offset: 0x4c, Size: 0xc]
	delegate OnPlaybackSuspended;//[Offset: 0x58, Size: 0xc]
	delegate OnSeekCompleted;//[Offset: 0x64, Size: 0xc]
	delegate OnTracksChanged;//[Offset: 0x70, Size: 0xc]
	Timespan CacheAhead;//[Offset: 0x80, Size: 0x8]
	Timespan CacheBehind;//[Offset: 0x88, Size: 0x8]
	Timespan CacheBehindGame;//[Offset: 0x90, Size: 0x8]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a, Size: 0x1]
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a, Size: 0x1]
	MediaPlaylist* Playlist;//[Offset: 0x9c, Size: 0x4]
	int PlaylistIndex;//[Offset: 0xa0, Size: 0x4]
	float HorizontalFieldOfView;//[Offset: 0xa4, Size: 0x4]
	float VerticalFieldOfView;//[Offset: 0xa8, Size: 0x4]
	Rotator ViewRotation;//[Offset: 0xac, Size: 0xc]
	Guid PlayerGuid;//[Offset: 0xdc, Size: 0x10]
	bool SupportsSeeking();// 0x2f758ac
	bool SupportsScrubbing();// 0x2f75884
	bool SupportsRate(float Rate, bool Unthinned);// 0x2f757b8
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x2f756dc
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x2f755cc
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x2f754c4
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x2f753bc
	bool SetRate(float Rate);// 0x2f7533c
	bool SetLooping(bool Looping);// 0x2f752b4
	void SetDesiredPlayerName(FName PlayerName);// 0x2f7523c
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x2f75178
	bool Seek(out const Timespan Time);// 0x2f750ec
	bool Rewind();// 0x2f750c4
	bool Reopen();// 0x2f7509c
	bool Previous();// 0x2f75074
	bool Play();// 0x2f7504c
	bool Pause();// 0x2f75024
	bool OpenURL(FString URL);// 0x2f74f60
	bool OpenSource(MediaSource* MediaSource);// 0x2f74ee0
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x2f74e1c
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x2f74d98
	bool OpenFile(FString FilePath);// 0x2f74cd4
	bool Next();// 0x2f74cac
	bool IsReady();// 0x2f74c84
	bool IsPreparing();// 0x2f74c5c
	bool IsPlaying();// 0x2f74c34
	bool IsPaused();// 0x2f74c0c
	bool IsLooping();// 0x2f74be4
	bool IsConnecting();// 0x2f74bbc
	bool IsBuffering();// 0x2f74b94
	bool HasError();// 0x2f74b6c
	Rotator GetViewRotation();// 0x2f74b24
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x2f749d8
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x2f748f4
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x2f74830
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x2f7475c
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x2f74698
	float GetVerticalFieldOfView();// 0x2f74670
	FString GetUrl();// 0x2f74608
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x2f744bc
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x2f743f8
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x2f74210
	Timespan GetTime();// 0x2f741d0
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x2f740b4
	int GetSelectedTrack(enum TrackType);// 0x2f74034
	float GetRate();// 0x2f7400c
	int GetPlaylistIndex();// 0x2f73ff0
	MediaPlaylist* GetPlaylist();// 0x2f73fd4
	FName GetPlayerName();// 0x2f73f94
	int GetNumTracks(enum TrackType);// 0x2f73f14
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x2f73e50
	FText GetMediaName();// 0x2f73cec
	float GetHorizontalFieldOfView();// 0x2f73cc4
	Timespan GetDuration();// 0x2f73c84
	FName GetDesiredPlayerName();// 0x2f73c44
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x2f73af8
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x2f73a34
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x2f73970
	void Close();// 0x2f7395c
	bool CanPlayUrl(FString URL);// 0x2f73898
	bool CanPlaySource(MediaSource* MediaSource);// 0x2f73818
	bool CanPause();// 0x2f737f0

--------------------------------
Class: MediaPlaylist.Object
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	MediaSource*[] items;//[Offset: 0x20, Size: 0xc]
	bool Replace(int Index, MediaSource* Replacement);// 0x2f77298
	bool RemoveAt(int Index);// 0x2f77218
	bool Remove(MediaSource* MediaSource);// 0x2f77198
	int Num();// 0x2f7717c
	void Insert(MediaSource* MediaSource, int Index);// 0x2f770c0
	MediaSource* GetRandom(out int OutIndex);// 0x2f77030
	MediaSource* GetPrevious(out int InOutIndex);// 0x2f76fa0
	MediaSource* GetNext(out int InOutIndex);// 0x2f76f10
	MediaSource* Get(int Index);// 0x2f76e90
	bool AddUrl(FString URL);// 0x2f76dcc
	bool AddFile(FString FilePath);// 0x2f76d08
	bool Add(MediaSource* MediaSource);// 0x2f76c88

--------------------------------
Class: MediaTexture.Texture.Object
	byte AddressX;//[Offset: 0x94, Size: 0x1]
	byte AddressY;//[Offset: 0x95, Size: 0x1]
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	LinearColor ClearColor;//[Offset: 0x98, Size: 0x10]
	MediaPlayer* MediaPlayer;//[Offset: 0xa8, Size: 0x4]
	int GetWidth();// 0x2dadac8
	int GetHeight();// 0x2f77b04
	float GetAspectRatio();// 0x2f77adc

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString StreamUrl;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: SurviveLoadingSettings.DeveloperSettings.Object
	SoftObjectPath[] Images;//[Offset: 0x30, Size: 0xc]
	SoftObjectPath[] Videos;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: ZLevelData.Actor.Object
	GameLevelDesc LevelDesc;//[Offset: 0x2c8, Size: 0x14]
	FString[] TargetClassPaths;//[Offset: 0x2dc, Size: 0xc]
	FString LeveDirectorFilePath;//[Offset: 0x2e8, Size: 0xc]
	byte EndCondType;//[Offset: 0x2f4, Size: 0x1]
	FString EndCondPar;//[Offset: 0x2f8, Size: 0xc]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	int DiffcultPerc;//[Offset: 0x308, Size: 0x4]
	ZPVECircle*[] PVECircleConfigs;//[Offset: 0x30c, Size: 0xc]
	ZPVERelifePoint*[] PVERelifePoints;//[Offset: 0x318, Size: 0xc]
	ZMonsterSpotGroup*[] MonsterSpotGroups;//[Offset: 0x324, Size: 0xc]
	Vector[] TaskPointLocations;//[Offset: 0x330, Size: 0xc]
	RelifePoint[] PVERelifePointsInfo;//[Offset: 0x33c, Size: 0xc]
	PVECircle[] PVECircleInfo;//[Offset: 0x348, Size: 0xc]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x354, Size: 0xc]
	LevelData[] CfgList;//[Offset: 0x360, Size: 0xc]
	LevelObjets[] LevelAddObjs;//[Offset: 0x36c, Size: 0xc]
	int CurComponentNameIndex;//[Offset: 0x378, Size: 0x4]
	void ReBindLevelDataComponent();// 0x2f9d718
	void CheckMonsterSpotIsOnLand(ZMonsterSpot* MonsterSpot, ZMonsterSpotGroup* SpotGroup);// 0x2f9d5e0

--------------------------------
Class: ZPVECircle.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int CircleID;//[Offset: 0x238, Size: 0x4]
	Vector2D TargetPos;//[Offset: 0x23c, Size: 0x8]
	float Radius;//[Offset: 0x244, Size: 0x4]
	float MoveTime;//[Offset: 0x248, Size: 0x4]
	float Pain;//[Offset: 0x24c, Size: 0x4]

--------------------------------
Class: ZPVERelifePoint.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x238, Size: 0x4]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]

--------------------------------
Class: UAEOTConsoleCommandObject.Object
	void UOTStartReportSlatePaint();// 0x2fa7c0c
	void UOTReportUIObject(FString InFileName);// 0x2fa7b50
	void UOTReportObjectPath(FString InFileName);// 0x2fa79d8
	void UOTReportObjectCount(FString InFileName);// 0x2fa79d8
	void UOTReportObjectAll(FString InFileName);// 0x2fa79d8
	void UOTReportActor(FString InFileName);// 0x2fa7a94
	void UOTObjectReports(FString InFileName);// 0x2fa79d8
	void UOTEndReportSlatePaintEnd(int Filter, FString Filename);// 0x2fa78d8
	void ReportClassObjectInfo(FString ClassName);// 0x13951c0

--------------------------------
Class: StatManager.Object
	void ReportEventWithString(enum EventType, FString _eventBody, bool isRealTime);// 0x2fbba1c
	void ReportEventWithParam(enum EventType, <FString,FString> _params, bool isRealTime);// 0x2fbb7d8
	void ReportEventWithNoParam(enum EventType, bool isRealTime);// 0x2fbb714
	static StatManager* GetInstance();// 0x2fbb6ec

--------------------------------
Class: QuantumFirebaseRemoteConfig.Object
	FString[] QueryConfigNamesArray;//[Offset: 0x20, Size: 0xc]
	enum GetStatus();// 0x2fc07b8
	FString GetRemoteConfig(FString ConfigNameToQuery);// 0x2fc05d8
	static QuantumFirebaseRemoteConfig* GetInstance();// 0x2fc05b0

--------------------------------
Class: AkAcousticPortal.Volume.Brush.Actor.Object
	float Gain;//[Offset: 0x2f0, Size: 0x4]
	enum InitialState;//[Offset: 0x2f4, Size: 0x1]
	void OpenPortal();// 0x3732844
	enum GetCurrentState();// 0x373281c
	void ClosePortal();// 0x3732808

--------------------------------
Class: AkAcousticTexture.Object

--------------------------------
Class: AkAmbientSound.Actor.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2c8, Size: 0x4]
	AkComponent* AkComponent;//[Offset: 0x2cc, Size: 0x4]
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	void StopAmbientSound();// 0x3732dcc
	void StartAmbientSound();// 0x3732db8

--------------------------------
Class: AkSettings.Object
	byte MaxSimultaneousReverbVolumes;//[Offset: 0x1c, Size: 0x1]
	FilePath WwiseProjectPath;//[Offset: 0x20, Size: 0xc]
	DirectoryPath WwiseWindowsInstallationPath;//[Offset: 0x2c, Size: 0xc]
	FilePath WwiseMacInstallationPath;//[Offset: 0x38, Size: 0xc]
	bool SuppressWwiseProjectPathWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool UseAlternateObstructionOcclusionFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]

--------------------------------
Class: AkAudioDeviceSettings.Object
	int SuperHighDefaultPoolSize;//[Offset: 0x1c, Size: 0x4]
	int SuperHighEngineDefaultPoolSize;//[Offset: 0x20, Size: 0x4]
	int HighDefaultPoolSize;//[Offset: 0x24, Size: 0x4]
	int HighEngineDefaultPoolSize;//[Offset: 0x28, Size: 0x4]
	int LowDefaultPoolSize;//[Offset: 0x2c, Size: 0x4]
	int LowEngineDefaultPoolSize;//[Offset: 0x30, Size: 0x4]
	int DefaultCommandQueueSize;//[Offset: 0x34, Size: 0x4]
	int DefaultBluetoothDelay;//[Offset: 0x38, Size: 0x4]
	float DefaultBluetoothErrThres;//[Offset: 0x3c, Size: 0x4]
	float DefaultBluetoothErrRatio;//[Offset: 0x40, Size: 0x4]
	float DefaultBluetoothMaxTime;//[Offset: 0x44, Size: 0x4]
	void InitConfig();// 0x3733394

--------------------------------
Class: AkGameplayStatics.BlueprintFunctionLibrary.Object
	static void WakeupFromSuspend();// 0x37378ac
	static void UseReverbVolumes(bool inUseReverbVolumes, Actor* Actor);// 0x37377ec
	static void UseEarlyReflections(Actor* Actor, AkAuxBus* AuxBus, bool Left, bool Right, bool Floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x3737480
	static void UnloadBankByName(FString BankName);// 0x37373cc
	static void UnloadBank(AkAudioBank* Bank, FString BankName);// 0x37372d4
	static void Suspend();// 0x37372c0
	static void StopProfilerCapture();// 0x37372ac
	static void StopPlayingID(int PlayingID);// 0x373723c
	static void StopOutputCapture();// 0x3737228
	static void StopAllAmbientSounds(Object* WorldContextObject);// 0x37371b8
	static void StopAll();// 0x37371a4
	static void StopActor(Actor* Actor);// 0x3737134
	static void StartProfilerCapture(FString Filename);// 0x3737080
	static void StartOutputCapture(FString Filename);// 0x3736fcc
	static void StartAllAmbientSounds(Object* WorldContextObject);// 0x3736f5c
	static AkComponent* SpawnAkComponentAtLocation(Object* WorldContextObject, AkAudioEvent* AkEvent, AkAuxBus* EarlyReflectionsBus, Vector Location, Rotator Orientation, bool AutoPost, FString EventName, FString EarlyReflectionsBusName, bool AutoDestroy);// 0x3736c0c
	static void ShowAKComponentPosition(bool _IsShow);// 0x3736b94
	static void SetSwitchWithDummyActor(FName SwitchGroup, FName SwitchState);// 0x3736ad8
	static void SetSwitch(FName SwitchGroup, FName SwitchState, Actor* Actor);// 0x37369d0
	static void SetState(FName StateGroup, FName State);// 0x3736914
	static void SetRTPCValue(FName RTPC, float Value, int InterpolationTimeMs, Actor* Actor);// 0x37367d0
	static void SetPanningRule(enum PanRule);// 0x3736760
	static void SetOutputBusVolume(float BusVolume, Actor* Actor);// 0x37366ac
	static void SetOcclusionScalingFactor(float ScalingFactor);// 0x3736630
	static void SetOcclusionRefreshInterval(float RefreshInterval, Actor* Actor);// 0x373657c
	static void SetBusConfig(FString BusName, enum ChannelConfiguration);// 0x3736484
	static void PostTrigger(FName Trigger, Actor* Actor);// 0x37363cc
	static int PostEventWithDummyActor(AkAudioEvent* AkEvent, FString EventName, Object* WorldContextObject);// 0x37361e8
	static void PostEventByName(FString EventName, Actor* Actor, bool bStopWhenAttachedToDestroyed);// 0x37360a4
	static int PostEventAttached(AkAudioEvent* AkEvent, Actor* Actor, FName AttachPointName, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x3735e14
	static void PostEventAtLocationByName(FString EventName, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x3735c98
	static int PostEventAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, FString EventName, Object* WorldContextObject);// 0x3735ac4
	static int PostEvent(AkAudioEvent* AkEvent, Actor* Actor, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x373588c
	static void LoadInitBank();// 0x3735878
	static void LoadBanks(out const AkAudioBank*[] SoundBanks, bool SynchronizeSoundBanks);// 0x3735764
	static void LoadBankByName(FString BankName);// 0x37356b0
	static void LoadBank(AkAudioBank* Bank, FString BankName);// 0x37355b8
	static bool IsGame(Object* WorldContextObject);// 0x3735540
	static bool IsEditor();// 0x14028e0
	static float GetOcclusionScalingFactor();// 0x3735518
	static AkComponent* GetAkComponent(SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, byte LocationType);// 0x37353c4
	static void ClearBanks();// 0x37353b0
	static void AKSetRTPCValue(FString RTPC, float Value, bool in_bBypassInternalValueInterpolation);// 0x37351cc
	static void AddOutputCaptureMarker(FString MarkerText);// 0x3735118

--------------------------------
Class: AkLateReverbComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	AkAuxBus* AuxBus;//[Offset: 0x238, Size: 0x4]
	FString AuxBusName;//[Offset: 0x23c, Size: 0xc]
	float SendLevel;//[Offset: 0x248, Size: 0x4]
	float FadeRate;//[Offset: 0x24c, Size: 0x4]
	float Priority;//[Offset: 0x250, Size: 0x4]

--------------------------------
Class: AkReverbVolume.Volume.Brush.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	AkAuxBus* AuxBus;//[Offset: 0x2f4, Size: 0x4]
	FString AuxBusName;//[Offset: 0x2f8, Size: 0xc]
	float SendLevel;//[Offset: 0x304, Size: 0x4]
	float FadeRate;//[Offset: 0x308, Size: 0x4]
	float Priority;//[Offset: 0x30c, Size: 0x4]
	AkLateReverbComponent* LateReverbComponent;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: AkRoomComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	float Priority;//[Offset: 0x23c, Size: 0x4]
	void RemoveSpatialAudioRoom();// 0x37389f0
	void AddSpatialAudioRoom();// 0x37389dc

--------------------------------
Class: AkSpatialAudioVolume.Volume.Brush.Actor.Object
	AkSurfaceReflectorSetComponent* SurfaceReflectorSet;//[Offset: 0x2f0, Size: 0x4]
	AkLateReverbComponent* LateReverb;//[Offset: 0x2f4, Size: 0x4]
	AkRoomComponent* room;//[Offset: 0x2f8, Size: 0x4]

--------------------------------
Class: AkSurfaceReflectorSetComponent.SceneComponent.ActorComponent.Object
	bool bEnableSurfaceReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	AkPoly[] AcousticPolys;//[Offset: 0x238, Size: 0xc]
	void UpdateSurfaceReflectorSet();// 0x37391cc
	void SendSurfaceReflectorSet();// 0x37391b8
	void RemoveSurfaceReflectorSet();// 0x37391a4

--------------------------------
Class: AkPoly
	AkAcousticTexture* Texture;//[Offset: 0x0, Size: 0x4]
	bool EnableSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: AkSpotReflector.Actor.Object
	AkAuxBus* AuxBus;//[Offset: 0x2c8, Size: 0x4]
	FString AuxBusName;//[Offset: 0x2cc, Size: 0xc]
	AkAcousticTexture* AcousticTexture;//[Offset: 0x2d8, Size: 0x4]
	float DistanceScalingFactor;//[Offset: 0x2dc, Size: 0x4]
	float Level;//[Offset: 0x2e0, Size: 0x4]

--------------------------------
Class: InterpTrackAkAudioEvent.InterpTrackVectorBase.InterpTrack.Object
	AkAudioEventTrackKey[] Events;//[Offset: 0x60, Size: 0xc]
	bool bContinueEventOnMatineeEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: AkAudioEventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x4, Size: 0x4]
	FString EventName;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: InterpTrackAkAudioRTPC.InterpTrackFloatBase.InterpTrack.Object
	FString Param;//[Offset: 0x60, Size: 0xc]
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool bContinueRTPCOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: InterpTrackInstAkAudioEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InterpTrackInstAkAudioRTPC.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MovieSceneAkAudioEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	AkAudioEvent* Event;//[Offset: 0x94, Size: 0x4]
	bool StopAtSectionEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	FString EventName;//[Offset: 0x9c, Size: 0xc]

--------------------------------
Class: MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x50, Size: 0xc]
	bool bIsAMasterTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: MovieSceneAkAudioEventTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAkAudioRTPCSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString Name;//[Offset: 0x98, Size: 0xc]
	RichCurve FloatCurve;//[Offset: 0xa4, Size: 0x54]

--------------------------------
Class: MovieSceneAkAudioRTPCTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MobileInstalledContent.Object
	bool Mount(int PakOrder, FString MountPoint);// 0x373fe14
	float GetInstalledContentSize();// 0x373fdec
	float GetDiskFreeSpace();// 0x373fdc4

--------------------------------
Class: MobilePendingContent.MobileInstalledContent.Object
	void StartInstall(delegate OnSucceeded, delegate OnFailed);// 0x374039c
	float GetTotalDownloadedSize();// 0x3740374
	float GetRequiredDiskSpace();// 0x374034c
	float GetInstallProgress();// 0x3740324
	FText GetDownloadStatusText();// 0x37401c8
	float GetDownloadSpeed();// 0x37401a0
	float GetDownloadSize();// 0x3740178

--------------------------------
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object
	static void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed);// 0x3740bfc
	static bool HasActiveWiFiConnection();// 0x1759994
	static FString[] GetSupportedPlatformNames();// 0x3740aa8
	static MobileInstalledContent* GetInstalledContent(FString InstallDirectory);// 0x37409ec
	static FString GetActiveDeviceProfileName();// 0x3740934

--------------------------------
Class: OMobileFBPL.BlueprintFunctionLibrary.Object
	static int GetVolumeState();// 0x3741654
	static FString GetDeviceName();// 0x17561dc
	static float GetBatteryTemperature();// 0x374162c
	static int GetBatteryLevel();// 0x3741604
	static bool AreHeadphonesPluggedIn();// 0x37415dc

--------------------------------
Class: ScriptProfiler.Object

--------------------------------
Class: ScriptBlueprint.Blueprint.BlueprintCore.Object
	byte[] ByteCode;//[Offset: 0xac, Size: 0xc]
	FString SourceCode;//[Offset: 0xb8, Size: 0xc]

--------------------------------
Class: ScriptBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	byte[] ByteCode;//[Offset: 0x1d4, Size: 0xc]
	FString SourceCode;//[Offset: 0x1e0, Size: 0xc]
	Property*[] ScriptProperties;//[Offset: 0x1ec, Size: 0xc]

--------------------------------
Class: ScriptContext.Object
	void CallScriptFunction(FString FunctionName);// 0x375fb54

--------------------------------
Class: ScriptHelperNetInterface.Object
	static int SendPacket_LuaState();// 0x173773c
	static void Disconnect(out interface class NetInterface);// 0x1752a98
	static void Connect(out interface class NetInterface, int Timeout);// 0x3760b50

--------------------------------
Class: ScriptPluginComponent.Object
	bool CallScriptFunction(FString FunctionName);// 0x3760f38

--------------------------------
Class: ScriptTestActor.Actor.Object
	FString TestString;//[Offset: 0x2c8, Size: 0xc]
	float TestValue;//[Offset: 0x2d4, Size: 0x4]
	bool TestBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	float TestFunction(float InValue, float InFactor, bool bMultiply);// 0x3761564

--------------------------------
Class: LuaClassBaseObj.Actor.Object
	FString ItsATest(PlayerInfo Player1, int[] nums, int X, FString Q, PlayerInfo[] Player2);// 0x3761a84
	void HandleUIMessage(FString UIMessage);// 0x37619c0
	FString GetGameStatus();// 0x37618f8

--------------------------------
Class: PlayerInfo
	int Level;//[Offset: 0x0, Size: 0x4]
	FString Name;//[Offset: 0x4, Size: 0xc]
	int LocalPosition;//[Offset: 0x10, Size: 0x4]
	SonInfo mySon;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: SonInfo
	int xlevel;//[Offset: 0x0, Size: 0x4]
	FString xname;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: AddNewSkillToOwnerInterface.Interface.Object
	ItemSkillsConfig[] GetSkillTemplates();// 0x37923ec

--------------------------------
Class: ItemSkillsConfig
	class UTSkill* SkillTemplateClass;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: UTSkillEvent.Object
	byte SkillEventType;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: UTSkillInstancedNodeContainerInterface.Interface.Object

--------------------------------
Class: UTSkillInstancedNodeInterface.Interface.Object

--------------------------------
Class: STSkillTemplateManager.Object
	<class UTSkill,UTSkill*> SkillInstancedTemplateMap;//[Offset: 0x1c, Size: 0x3c]

--------------------------------
Class: UAESharedModuleInterface.Interface.Object

--------------------------------
Class: AdvancedBuoyancyComponent.SceneComponent.ActorComponent.Object
	bool bUseDrag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	bool bDebugOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1]
	OceanManager* TheOcean;//[Offset: 0x238, Size: 0x4]
	float WaterDensity;//[Offset: 0x23c, Size: 0x4]
	float Gravity;//[Offset: 0x240, Size: 0x4]
	float MeshDensity;//[Offset: 0x244, Size: 0x4]
	StaticMeshComponent* BuoyantMesh;//[Offset: 0x254, Size: 0x4]
	Transform MeshTransform;//[Offset: 0x260, Size: 0x30]
	float FalseVolume;//[Offset: 0x290, Size: 0x4]
	float BuoyancyReductionCoefficient;//[Offset: 0x294, Size: 0x4]
	float BuoyancyPitchReductionCoefficient;//[Offset: 0x298, Size: 0x4]
	float DensityCorrection;//[Offset: 0x29c, Size: 0x4]
	float DensityCorrectionModifier;//[Offset: 0x2a0, Size: 0x4]
	float SubmergedVolume;//[Offset: 0x2a4, Size: 0x4]
	float ImpactCoefficient;//[Offset: 0x2a8, Size: 0x4]
	Vector DragCoefficient;//[Offset: 0x2ac, Size: 0xc]
	Vector SuctionCoefficient;//[Offset: 0x2b8, Size: 0xc]
	float ViscousDragCoefficient;//[Offset: 0x2c4, Size: 0x4]
	float MaxSlamAcceleration;//[Offset: 0x2c8, Size: 0x4]
	Vector[] AdvancedGridHeight;//[Offset: 0x2cc, Size: 0xc]
	ForceTriangle[] SubmergedTris;//[Offset: 0x2d8, Size: 0xc]
	float[] TriSizes;//[Offset: 0x2e4, Size: 0xc]
	float[] TriSubmergedArea;//[Offset: 0x2f0, Size: 0xc]
	float TriangleArea(Vector A, Vector B, Vector C);// 0x37b7e00
	ForceTriangle[] SplitTriangle(BuoyancyVertex H, BuoyancyVertex M, BuoyancyVertex L, Vector InArrow);// 0x37b7b7c
	void SetMeshDensity(float NewDensity, float NewWaterDensity);// 0x37b7ac0
	float GetOceanDepthFromGrid(Vector Position, bool bJustGetHeightAtLocation);// 0x37b79f4
	void GetOcean();// 0x37b79e0
	void DrawDebugStuff(ForceTriangle TriForce, Color DebugColor);// 0x37b78ac
	void ApplySlamForce(Vector SlamForce, Vector TriCenter);// 0x37b77ec
	void ApplyForce(ForceTriangle TriForce);// 0x37b76f4

--------------------------------
Class: ForceTriangle

--------------------------------
Class: BuoyancyVertex

--------------------------------
Class: BuoyancyComponent.MovementComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0xf4, Size: 0x4]
	float MeshDensity;//[Offset: 0xf8, Size: 0x4]
	float FluidDensity;//[Offset: 0xfc, Size: 0x4]
	float FluidLinearDamping;//[Offset: 0x100, Size: 0x4]
	float FluidAngularDamping;//[Offset: 0x104, Size: 0x4]
	Vector VelocityDamper;//[Offset: 0x108, Size: 0xc]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	float MaxUnderwaterVelocity;//[Offset: 0x118, Size: 0x4]
	float TestPointRadius;//[Offset: 0x11c, Size: 0x4]
	Vector[] TestPoints;//[Offset: 0x120, Size: 0xc]
	float[] PointDensityOverride;//[Offset: 0x12c, Size: 0xc]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	float StayUprightStiffness;//[Offset: 0x13c, Size: 0x4]
	float StayUprightDamping;//[Offset: 0x140, Size: 0x4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x144, Size: 0xc]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float WaveForceMultiplier;//[Offset: 0x154, Size: 0x4]

--------------------------------
Class: BuoyantMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bVerticalForcesOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	bool bUseWaterPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 0x1]
	bool bUseStaticForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ae, Size: 0x1]
	bool bUseDynamicForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5af, Size: 0x1]
	OceanManager* OceanManager;//[Offset: 0x5b0, Size: 0x4]
	bool bDrawForceArrows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1]
	bool bDrawWaterline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 0x1]
	bool bDrawVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6, Size: 0x1]
	bool bDrawTriangles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b7, Size: 0x1]
	bool bDrawSubtriangles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	float ForceArrowSize;//[Offset: 0x5bc, Size: 0x4]
	bool bOverrideMeshDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	float MeshDensity;//[Offset: 0x5c4, Size: 0x4]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	float Mass;//[Offset: 0x5cc, Size: 0x4]
	float WaterDensity;//[Offset: 0x5d0, Size: 0x4]
	WaterHeightmapComponent* WaterHeightmap;//[Offset: 0x5ec, Size: 0x4]

--------------------------------
Class: WaterHeightmapComponent.ActorComponent.Object
	float DesiredCellSize;//[Offset: 0xbc, Size: 0x4]
	bool bOnlyCollidingComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float GridSizeMultiplier;//[Offset: 0xc4, Size: 0x4]
	bool bDrawUsedTriangles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bDrawHeightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	OceanManager* OceanManager;//[Offset: 0x11c, Size: 0x4]

--------------------------------
Class: FishManager.Actor.Object
	class Object[] flockTypes;//[Offset: 0x2c8, Size: 0xc]
	float[] numInFlock;//[Offset: 0x2d4, Size: 0xc]
	float minZ;//[Offset: 0x2e0, Size: 0x4]
	float maxZ;//[Offset: 0x2e4, Size: 0x4]
	float underwaterBoxLength;//[Offset: 0x2e8, Size: 0x4]
	bool attachToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool DebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	class Object* PlayerType;//[Offset: 0x2f0, Size: 0x4]
	Actor* Player;//[Offset: 0x2f4, Size: 0x4]

--------------------------------
Class: FlockFish.Pawn.Actor.Object
	SphereComponent* FishInteractionSphere;//[Offset: 0x314, Size: 0x4]
	bool isLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	class Object[] enemyTypes;//[Offset: 0x31c, Size: 0xc]
	class Object[] preyTypes;//[Offset: 0x328, Size: 0xc]
	class Object* neighborType;//[Offset: 0x334, Size: 0x4]
	float followDist;//[Offset: 0x338, Size: 0x4]
	float Speed;//[Offset: 0x33c, Size: 0x4]
	float MaxSpeed;//[Offset: 0x340, Size: 0x4]
	float TurnSpeed;//[Offset: 0x344, Size: 0x4]
	float turnFrequency;//[Offset: 0x348, Size: 0x4]
	float hungerResetTime;//[Offset: 0x34c, Size: 0x4]
	float distBehindSpeedUpRange;//[Offset: 0x350, Size: 0x4]
	float SeperationDistanceMultiplier;//[Offset: 0x354, Size: 0x4]
	float FleeDistanceMultiplier;//[Offset: 0x358, Size: 0x4]
	float FleeAccelerationMultiplier;//[Offset: 0x35c, Size: 0x4]
	float ChaseAccelerationMultiplier;//[Offset: 0x360, Size: 0x4]
	float SeekDecelerationMultiplier;//[Offset: 0x364, Size: 0x4]
	float AvoidForceMultiplier;//[Offset: 0x368, Size: 0x4]
	float AvoidanceForce;//[Offset: 0x36c, Size: 0x4]
	class Object* PlayerType;//[Offset: 0x370, Size: 0x4]
	Vector underwaterMin;//[Offset: 0x374, Size: 0xc]
	Vector underwaterMax;//[Offset: 0x380, Size: 0xc]
	float CustomZSeekMin;//[Offset: 0x38c, Size: 0x4]
	float CustomZSeekMax;//[Offset: 0x390, Size: 0x4]
	float NumNeighborsToEvaluate;//[Offset: 0x394, Size: 0x4]
	float UpdateEveryTick;//[Offset: 0x398, Size: 0x4]
	bool DebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	Actor* Leader;//[Offset: 0x3bc, Size: 0x4]
	Actor*[] neighbors;//[Offset: 0x3c0, Size: 0xc]
	Actor*[] nearbyEnemies;//[Offset: 0x3cc, Size: 0xc]
	Actor*[] nearbyPrey;//[Offset: 0x3d8, Size: 0xc]
	Actor*[] nearbyFriends;//[Offset: 0x3e4, Size: 0xc]
	Actor* fleeTarget;//[Offset: 0x3f0, Size: 0x4]
	Actor* preyTarget;//[Offset: 0x3f4, Size: 0x4]
	Actor* FishManager;//[Offset: 0x448, Size: 0x4]
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x37b8fbc
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x37b8dc0

--------------------------------
Class: InfiniteSystemComponent.SceneComponent.ActorComponent.Object
	bool UpdateInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	byte FollowMethod;//[Offset: 0x236, Size: 0x1]
	float GridSnapSize;//[Offset: 0x238, Size: 0x4]
	float MaxLookAtDistance;//[Offset: 0x23c, Size: 0x4]
	bool ScaleByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	float ScaleDistanceFactor;//[Offset: 0x244, Size: 0x4]
	float ScaleStartDistance;//[Offset: 0x248, Size: 0x4]
	float ScaleMin;//[Offset: 0x24c, Size: 0x4]
	float ScaleMax;//[Offset: 0x250, Size: 0x4]

--------------------------------
Class: TimeManager.Actor.Object
	TimeDate CurrentLocalTime;//[Offset: 0x2c8, Size: 0x1c]
	float Latitude;//[Offset: 0x2e4, Size: 0x4]
	float Longitude;//[Offset: 0x2e8, Size: 0x4]
	int OffsetUTC;//[Offset: 0x2ec, Size: 0x4]
	int OffsetDST;//[Offset: 0x2f0, Size: 0x4]
	bool bAllowDaylightSavings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool bDaylightSavingsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	float TimeScaleMultiplier;//[Offset: 0x2f8, Size: 0x4]
	float SolarTime;//[Offset: 0x2fc, Size: 0x4]
	float LocalClockTime;//[Offset: 0x300, Size: 0x4]
	float TimeCorrection;//[Offset: 0x304, Size: 0x4]
	int LSTM;//[Offset: 0x308, Size: 0x4]
	int DayOfYear;//[Offset: 0x30c, Size: 0x4]
	float EoT;//[Offset: 0x310, Size: 0x4]
	float SolarAltAngle;//[Offset: 0x314, Size: 0x4]
	float SolarDeclination;//[Offset: 0x318, Size: 0x4]
	float SolarAzimuth;//[Offset: 0x31c, Size: 0x4]
	float SolarHRA;//[Offset: 0x320, Size: 0x4]
	float SiderealTime;//[Offset: 0x324, Size: 0x4]
	float LunarAltAngle;//[Offset: 0x328, Size: 0x4]
	float LunarHRA;//[Offset: 0x32c, Size: 0x4]
	float LunarDeclination;//[Offset: 0x330, Size: 0x4]
	float LunarAzimuth;//[Offset: 0x334, Size: 0x4]
	float LunarRightAsc;//[Offset: 0x338, Size: 0x4]
	float LunarElapsedDays;//[Offset: 0x33c, Size: 0x4]
	float EcLongitude;//[Offset: 0x340, Size: 0x4]
	float EcLatitude;//[Offset: 0x344, Size: 0x4]
	float EcDistance;//[Offset: 0x348, Size: 0x4]
	float PartL;//[Offset: 0x34c, Size: 0x4]
	float PartM;//[Offset: 0x350, Size: 0x4]
	float PartF;//[Offset: 0x354, Size: 0x4]
	void SetCurrentLocalTime(float Time);// 0x37ba2dc
	bool IsLeapYear(int Year);// 0x37ba25c
	void InitializeCalendar(TimeDate Time);// 0x37ba1cc
	void IncrementTime(float DeltaSeconds);// 0x37ba154
	float GetYearPhase();// 0x37ba12c
	float GetElapsedDayInMinutes();// 0x37ba104
	int GetDaysInYear(int Year);// 0x37ba084
	int GetDaysInMonth(int Year, int Month);// 0x37b9fc0
	float GetDayPhase();// 0x37b9f98
	int GetDayOfYear(TimeDate Time);// 0x37b9f00
	Rotator CalculateSunAngle();// 0x37b9eb8
	float CalculateMoonPhase();// 0x37b9e90
	Rotator CalculateMoonAngle();// 0x37b9e48

--------------------------------
Class: TimeDate
	int Millisecond;//[Offset: 0x0, Size: 0x4]
	int Second;//[Offset: 0x4, Size: 0x4]
	int Minute;//[Offset: 0x8, Size: 0x4]
	int Hour;//[Offset: 0xc, Size: 0x4]
	int Day;//[Offset: 0x10, Size: 0x4]
	int Month;//[Offset: 0x14, Size: 0x4]
	int Year;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: DestructibleActor.Actor.Object
	DestructibleComponent* DestructibleComponent;//[Offset: 0x2c8, Size: 0x4]
	bool bAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	delegate OnActorFracture;//[Offset: 0x2d0, Size: 0xc]

--------------------------------
Class: DestructibleComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bFractureEffectOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60c, Size: 0x1]
	FractureEffect[] FractureEffects;//[Offset: 0x610, Size: 0xc]
	bool bEnableHardSleeping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	float LargeChunkThreshold;//[Offset: 0x620, Size: 0x4]
	delegate OnComponentFracture;//[Offset: 0x630, Size: 0xc]
	void SetDestructibleMesh(DestructibleMesh* NewMesh);// 0x37bd0d8
	DestructibleMesh* GetDestructibleMesh();// 0x37bd0b0
	void ApplyRadiusDamage(float BaseDamage, out const Vector HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);// 0x37bcf00
	void ApplyDamage(float DamageAmount, out const Vector HitLocation, out const Vector ImpulseDir, float ImpulseStrength);// 0x37bcd90

--------------------------------
Class: FractureEffect
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: DestructibleMesh.SkeletalMesh.Object
	DestructibleParameters DefaultDestructibleParameters;//[Offset: 0x228, Size: 0x7c]
	FractureEffect[] FractureEffects;//[Offset: 0x2a4, Size: 0xc]

--------------------------------
Class: DestructibleParameters
	DestructibleDamageParameters DamageParameters;//[Offset: 0x0, Size: 0x1c]
	DestructibleDebrisParameters DebrisParameters;//[Offset: 0x1c, Size: 0x2c]
	DestructibleAdvancedParameters AdvancedParameters;//[Offset: 0x48, Size: 0x10]
	DestructibleSpecialHierarchyDepths SpecialHierarchyDepths;//[Offset: 0x58, Size: 0x14]
	DestructibleDepthParameters[] DepthParameters;//[Offset: 0x6c, Size: 0xc]
	DestructibleParametersFlag Flags;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: DestructibleDamageParameters
	float DamageThreshold;//[Offset: 0x0, Size: 0x4]
	float DamageSpread;//[Offset: 0x4, Size: 0x4]
	bool bEnableImpactDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float ImpactDamage;//[Offset: 0xc, Size: 0x4]
	int DefaultImpactDamageDepth;//[Offset: 0x10, Size: 0x4]
	bool bCustomImpactResistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float ImpactResistance;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: DestructibleDebrisParameters
	float DebrisLifetimeMin;//[Offset: 0x0, Size: 0x4]
	float DebrisLifetimeMax;//[Offset: 0x4, Size: 0x4]
	float DebrisMaxSeparationMin;//[Offset: 0x8, Size: 0x4]
	float DebrisMaxSeparationMax;//[Offset: 0xc, Size: 0x4]
	Box ValidBounds;//[Offset: 0x10, Size: 0x1c]

--------------------------------
Class: DestructibleAdvancedParameters
	float DamageCap;//[Offset: 0x0, Size: 0x4]
	float ImpactVelocityThreshold;//[Offset: 0x4, Size: 0x4]
	float MaxChunkSpeed;//[Offset: 0x8, Size: 0x4]
	float FractureImpulseScale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DestructibleSpecialHierarchyDepths
	int SupportDepth;//[Offset: 0x0, Size: 0x4]
	int MinimumFractureDepth;//[Offset: 0x4, Size: 0x4]
	bool bEnableDebris;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int DebrisDepth;//[Offset: 0xc, Size: 0x4]
	int EssentialDepth;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DestructibleDepthParameters
	byte ImpactDamageOverride;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: DestructibleParametersFlag
	bool bAccumulateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAssetDefinedSupport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bWorldSupport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bDebrisTimeout;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bDebrisMaxSeparation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bCrumbleSmallestChunks;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bAccurateRaycasts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bUseValidBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bFormExtendedStructures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DestructibleFractureSettings.Object
	int CellSiteCount;//[Offset: 0x1c, Size: 0x4]
	FractureMaterial FractureMaterialDesc;//[Offset: 0x20, Size: 0x24]
	int RandomSeed;//[Offset: 0x44, Size: 0x4]
	Vector[] VoronoiSites;//[Offset: 0x48, Size: 0xc]
	int OriginalSubmeshCount;//[Offset: 0x54, Size: 0x4]
	MaterialInterface*[] Materials;//[Offset: 0x58, Size: 0xc]
	DestructibleChunkParameters[] ChunkParameters;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: FractureMaterial
	Vector2D UVScale;//[Offset: 0x0, Size: 0x8]
	Vector2D UVOffset;//[Offset: 0x8, Size: 0x8]
	Vector Tangent;//[Offset: 0x10, Size: 0xc]
	float UAngle;//[Offset: 0x1c, Size: 0x4]
	int InteriorElementIndex;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: DestructibleChunkParameters
	bool bIsSupportChunk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bDoNotFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bDoNotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bDoNotCrumble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FpsReportActor.Actor.Object

--------------------------------
Class: TApmHelper.BlueprintFunctionLibrary.Object
	static FString ValidateDevice();// 0x37d09a0
	static void UpdateGameStatusToVmp(int Key, FString Value);// 0x37d0808
	static void SetVersionIden(FString versionName);// 0x37d06b8
	static void SetUserID(FString userID);// 0x37d0568
	static void SetTragetFrameRate(int Target);// 0x37d04f8
	static void SetQuality(int quality);// 0x37d0488
	static void SetPssManualMode();// 0x37d0474
	static void SetLocale(FString Locale);// 0x37d0324
	static void SetDeviceLevel(int DeviceLevel);// 0x37d02b4
	static void setAffinityForThread(int tid);// 0x37d0244
	static void requestResourceGuarantee(int Condition, int loadType, int applyType);// 0x37d014c
	static void RequestPssSample();// 0x37d0138
	static void ReleaseStepEventContext();// 0x37d0124
	static void RegisterRomCallBackMeta(FString OpenID, FString ZoneID);// 0x37cfebc
	static void PutKVS(FString Key, FString Value);// 0x37cfc54
	static void PutKVI(FString Key, int Value);// 0x37cfac0
	static void PutKVD(FString Key, float Value);// 0x37cf92c
	static void PostValueS(FString catgory, FString Key, FString Value);// 0x37cf5ac
	static void PostValueI3(FString catgory, FString Key, int A, int B, int C);// 0x37cf274
	static void PostValueI2(FString catgory, FString Key, int A, int B);// 0x37cef84
	static void PostValueI1(FString catgory, FString Key, int A);// 0x37cecd8
	static void PostValueF3(FString catgory, FString Key, float A, float B, float C);// 0x37ce9a0
	static void PostValueF2(FString catgory, FString Key, float A, float B);// 0x37ce6b0
	static void PostValueF1(FString catgory, FString Key, float A);// 0x37ce404
	static void PostTrackState(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x37ce238
	static void PostStreamEvent(int stepId, int Status, int Code, FString Info);// 0x37ce010
	static void PostStepEvent(FString eventCategory, int stepId, int Status, int Code, FString Msg, FString extraKey);// 0x37cdbb0
	static void PostNTL(int latency);// 0x37cdb40
	static void PostLargeValueS(FString catgory, FString Key, FString Value);// 0x37cd7c0
	static void PostLagStatus(float Distance);// 0x37cd750
	static void PostGameStatusToTGPASS(FString Key, FString Value);// 0x37cd4e8
	static void PostGameStatusToTGPASMap(FString Key, <FString,FString> mapData);// 0x37cd228
	static void PostGameStatusToTGPAIS(int Key, FString Value);// 0x37cd090
	static void PostFrame(float DeltaTime);// 0x37cd020
	static void PostEvent(int Key, FString Info);// 0x37cce88
	static void MarkLevelLoadCompleted();// 0x37cce74
	static void MarkLevelLoad(FString SceneName, int quality);// 0x37ccce0
	static void MarkLevelFin();// 0x37ccccc
	static void MarkAppFinishLaunch();// 0x37cccb8
	static void LinkLastStepEventSession(FString eventCategory);// 0x37ccb68
	static void InitTGPA();// 0x37ccb54
	static void InitStepEventContext();// 0x37ccb40
	static FString GetOptCfgStr();// 0x37cca88
	static int GetDeviceLevelByQcc(FString ConfigName, FString GPUFamily);// 0x37cc818
	static int GetDeviceLevel();// 0x37cc7f0
	static FString GetDataFromTGPA(FString Key, FString Value);// 0x37cc500
	static void EndTupleWrap();// 0x37cc4ec
	static void EndTag();// 0x37cc4d8
	static void EndExclude();// 0x37cc4c4
	static void EnableDebugMode();// 0x37cc4b0
	static void cancelAffinityForThread(int tid);// 0x37cc440
	static void BeginTupleWrap(FString Key);// 0x37cc2f0
	static void BeginExclude();// 0x37cc2dc
	static void AddTag(FString TagName);// 0x37cc18c

--------------------------------
Class: TApmSceneMarker.Object
	static void SetEnable(bool Enabled);// 0x37d1e18
	static void MarkOPScene(int ID);// 0x37d1da8
	static void MarkFlowScene(int ID);// 0x37d1d38
	static void CancelOPScene(int ID);// 0x37d1cc8

--------------------------------
Class: AndFlowNode.FlowNodeBase.Object

--------------------------------
Class: BranchFlowNode.FlowNodeBase.Object

--------------------------------
Class: OrFlowNode.FlowNodeBase.Object

--------------------------------
Class: SequenceFlowNode.FlowNodeBase.Object

--------------------------------
Class: SubBranchFlowNode.FlowNodeBase.Object

--------------------------------
Class: TriggerAction_CallFunction.TriggerAction.Object

--------------------------------
Class: TriggerCondition_Comparison.TriggerCondition.Object

--------------------------------
Class: TriggerEvent_Implementable.TriggerEvent.Object
	Property*[] Params;//[Offset: 0x88, Size: 0xc]
	Function* CachedAreaEventFunc;//[Offset: 0xa4, Size: 0x4]
	<FString,EventFuncListenerTrigger> EventFuncListener;//[Offset: 0xa8, Size: 0x3c]

--------------------------------
Class: EventFuncListenerTrigger
	UAETriggerObject*[] ListenerTriggers;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: TriggerEventBroadcastInterface.Interface.Object

--------------------------------
Class: TriggersFlowMultiNodes.TriggersFlowBase.Object

--------------------------------
Class: TriggersFlowTree.TriggersFlowBase.Object
	FlowNodeBase* RootNode;//[Offset: 0x68, Size: 0x4]
	FlowNodeBase* TailNode;//[Offset: 0x6c, Size: 0x4]
	FlowNodeBase* CurrentNode;//[Offset: 0x70, Size: 0x4]
	FlowNodeBase* SubNode;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: UAELevelEventCenterInterface.Interface.Object

--------------------------------
Class: Variable.Object

--------------------------------
Class: HelpshiftUE4Settings.Object
	FString APIKey;//[Offset: 0x1c, Size: 0xc]
	FString DomainName;//[Offset: 0x28, Size: 0xc]
	FString AppID_iOS;//[Offset: 0x34, Size: 0xc]
	FString AppID_Android;//[Offset: 0x40, Size: 0xc]
	bool FirebaseIntegration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: IGH5CachePluginSettings.Object
	FString Html5Url;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: RuntimeMeshLibrary.BlueprintFunctionLibrary.Object
	static void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out RuntimeMeshTangent[] Tangents);// 0x3874f80
	static void GenerateTessellationIndexBuffer(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out RuntimeMeshTangent[] Tangents, out int[] OutTessTriangles);// 0x3874bc0
	static void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0x3874a24
	static void CreateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out RuntimeMeshTangent[] Tangents);// 0x38746c0
	static void CopyRuntimeMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComp, int LODIndex, RuntimeMeshComponent* RuntimeMeshComp, bool bShouldCreateCollision);// 0x387457c
	static void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0x38743a4
	static void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out RuntimeMeshTangent[] Tangents);// 0x387407c

--------------------------------
Class: LatentDelegate.Object
	void OnLatentCallback(int threadRef);// 0x38fc83c

--------------------------------
Class: LuaActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x2cc, Size: 0xc]

--------------------------------
Class: LuaTableObjectInterface.Interface.Object

--------------------------------
Class: LuaDelegate.Object
	void EventTrigger();// 0x12e82e4

--------------------------------
Class: LuaLevelScriptActor.LevelScriptActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x2d0, Size: 0xc]

--------------------------------
Class: LuaOverrider.Object

--------------------------------
Class: LuaOverriderInterface.Interface.Object
	FString GetLuaFilePath();// 0x38fd30c

--------------------------------
Class: LuaUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x1f4, Size: 0xc]
	FString LuaStateName;//[Offset: 0x200, Size: 0xc]

--------------------------------
Class: TemBPLibrary.BlueprintFunctionLibrary.Object
	static void TempUIMsgInvokeRef(Object* ObjContext, FString MsgName, FString ModuleName, out const TemBPDataAddr[] ParamArray);// 0x38feba4
	static void TempBridgeEventInvokeRef(Object* ObjContext, FString EventType, FString EventID, out const TemBPDataAddr[] ParamArray);// 0x38fe92c
	static TemBPDataAddr AddrFromWild(FString DataType, out const TemBPDataAddr InAny);// 0x38fe920
	static TemBPDataAddr AddrFromSet(FString DataType, out const <int> InAny);// 0x38fe920
	static TemBPDataAddr AddrFromMap(FString DataType, out const <int,int> InAny);// 0x38fe920
	static TemBPDataAddr AddrFromArray(FString DataType, out const int[] InAny);// 0x38fe920

--------------------------------
Class: TemBPDataAddr
	uint64 Value;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: LuaTemBPData_bool.LuaTemBPData.Object
	bool Data;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: LuaTemBPData_int.LuaTemBPData.Object
	int Data;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: LuaTemBPData_float.LuaTemBPData.Object
	float Data;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: LuaTemBPData_string.LuaTemBPData.Object
	FString Data;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: LuaTemBPData_object.LuaTemBPData.Object
	Object* Data;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: TestStatemachine.Actor.Object
	UAEStateMachineComponent* UAEStateMachineComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	int AdditionalSlotIndex;//[Offset: 0x174, Size: 0x4]
	FText SlotDisplayName;//[Offset: 0x178, Size: 0xc]

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x5e0, Size: 0x4]

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x51c, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x520, Size: 0x4]
	float PlayRate;//[Offset: 0x524, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x528, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x528, Size: 0x1]
	float AccumulatedTime;//[Offset: 0x52c, Size: 0x4]
	int CachedFrameIndex;//[Offset: 0x530, Size: 0x4]
	LinearColor SpriteColor;//[Offset: 0x534, Size: 0x10]
	BodySetup* CachedBodySetup;//[Offset: 0x544, Size: 0x4]
	delegate OnFinishedPlaying;//[Offset: 0x548, Size: 0xc]
	void Stop();// 0x3926454
	void SetSpriteColor(LinearColor NewColor);// 0x39263d8
	void SetPlayRate(float NewRate);// 0x253edb0
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0x3926314
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0x3926250
	void SetNewTime(float NewTime);// 0x39261d8
	void SetLooping(bool bNewLooping);// 0x3926158
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0x253ec30
	void ReverseFromEnd();// 0x3926144
	void Reverse();// 0x3926130
	void PlayFromStart();// 0x392611c
	void Play();// 0x3926108
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0x3926090
	bool IsReversing();// 0x3926068
	bool IsPlaying();// 0x3926040
	bool IsLooping();// 0x3926018
	float GetPlayRate();// 0x253eb2c
	int GetPlaybackPositionInFrames();// 0x3925ff0
	float GetPlaybackPosition();// 0x3925fc8
	int GetFlipbookLengthInFrames();// 0x3925fa0
	float GetFlipbookLength();// 0x3925f78
	float GetFlipbookFramerate();// 0x3925f50
	PaperFlipbook* GetFlipbook();// 0x3925f20

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x1c, Size: 0x4]
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x20, Size: 0xc]
	MaterialInterface* DefaultMaterial;//[Offset: 0x2c, Size: 0x4]
	byte CollisionSource;//[Offset: 0x30, Size: 0x1]
	bool IsValidKeyFrameIndex(int Index);// 0x3925a04
	float GetTotalDuration();// 0x39259dc
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0x3925910
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0x3925890
	int GetNumKeyFrames();// 0x2f7717c
	int GetNumFrames();// 0x3925868
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0x392579c

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x4]
	int FrameRun;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x24, Size: 0x8]
	Vector2D SourceDimension;//[Offset: 0x2c, Size: 0x8]
	Texture2D* SourceTexture;//[Offset: 0x34, Size: 0x4]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0xc]
	Vector2D BakedSourceUV;//[Offset: 0x44, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x4c, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x54, Size: 0x4]
	MaterialInterface* DefaultMaterial;//[Offset: 0x58, Size: 0x4]
	bool UseDefaultMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	MaterialInterface* AlternateMaterial;//[Offset: 0x60, Size: 0x4]
	PaperSpriteSocket[] Sockets;//[Offset: 0x64, Size: 0xc]
	byte SpriteCollisionDomain;//[Offset: 0x70, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x74, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x78, Size: 0x4]
	int AlternateMaterialSplitIndex;//[Offset: 0x7c, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x80, Size: 0xc]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x51c, Size: 0xc]
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x528, Size: 0xc]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x3927550
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0x3927434
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0x39273c4
	bool RemoveInstance(int InstanceIndex);// 0x392733c
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x39271a0
	int GetInstanceCount();// 0x3925fc8
	void ClearInstances();// 0x14912a4
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0x3926fb0

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]
	PaperSprite* SourceSprite;//[Offset: 0x40, Size: 0x4]
	Color VertexColor;//[Offset: 0x44, Size: 0x4]
	int MaterialIndex;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: PaperRuntimeSettings.Object
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x51c, Size: 0x4]
	MaterialInterface* MaterialOverride;//[Offset: 0x520, Size: 0x4]
	LinearColor SpriteColor;//[Offset: 0x524, Size: 0x10]
	void SetSpriteColor(LinearColor NewColor);// 0x39289f4
	bool SetSprite(PaperSprite* NewSprite);// 0x253ec30
	PaperSprite* GetSprite();// 0x3925f20

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0x3928460

--------------------------------
Class: PaperTerrainActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x2c8, Size: 0x4]
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x2cc, Size: 0x4]
	PaperTerrainComponent* RenderComponent;//[Offset: 0x2d0, Size: 0x4]

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x500, Size: 0x4]
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1]
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 0x1]
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x508, Size: 0x4]
	int RandomSeed;//[Offset: 0x50c, Size: 0x4]
	float SegmentOverlapAmount;//[Offset: 0x510, Size: 0x4]
	LinearColor TerrainColor;//[Offset: 0x514, Size: 0x10]
	int ReparamStepsPerSegment;//[Offset: 0x524, Size: 0x4]
	byte SpriteCollisionDomain;//[Offset: 0x528, Size: 0x1]
	float CollisionThickness;//[Offset: 0x52c, Size: 0x4]
	BodySetup* CachedBodySetup;//[Offset: 0x530, Size: 0x4]
	void SetTerrainColor(LinearColor NewColor);// 0x3928fb0

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x20, Size: 0xc]
	PaperSprite* InteriorFill;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x4]
	PaperSprite*[] Body;//[Offset: 0x4, Size: 0xc]
	PaperSprite* EndCap;//[Offset: 0x10, Size: 0x4]
	float MinimumAngle;//[Offset: 0x14, Size: 0x4]
	float MaximumAngle;//[Offset: 0x18, Size: 0x4]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float CollisionOffset;//[Offset: 0x20, Size: 0x4]
	int DrawOrder;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x1c, Size: 0xc]
	int LayerWidth;//[Offset: 0x28, Size: 0x4]
	int LayerHeight;//[Offset: 0x2c, Size: 0x4]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	float CollisionThicknessOverride;//[Offset: 0x34, Size: 0x4]
	float CollisionOffsetOverride;//[Offset: 0x38, Size: 0x4]
	LinearColor LayerColor;//[Offset: 0x3c, Size: 0x10]
	int AllocatedWidth;//[Offset: 0x4c, Size: 0x4]
	int AllocatedHeight;//[Offset: 0x50, Size: 0x4]
	PaperTileInfo[] AllocatedCells;//[Offset: 0x54, Size: 0xc]
	PaperTileSet* TileSet;//[Offset: 0x60, Size: 0x4]
	int[] AllocatedGrid;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x4]
	int PackedTileIndex;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x1c, Size: 0x8]
	Texture2D* TileSheet;//[Offset: 0x24, Size: 0x4]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x28, Size: 0xc]
	IntMargin BorderMargin;//[Offset: 0x34, Size: 0x10]
	IntPoint PerTileSpacing;//[Offset: 0x44, Size: 0x8]
	IntPoint DrawingOffset;//[Offset: 0x4c, Size: 0x8]
	int WidthInTiles;//[Offset: 0x54, Size: 0x4]
	int HeightInTiles;//[Offset: 0x58, Size: 0x4]
	int AllocatedWidth;//[Offset: 0x5c, Size: 0x4]
	int AllocatedHeight;//[Offset: 0x60, Size: 0x4]
	PaperTileMetadata[] PerTileData;//[Offset: 0x64, Size: 0xc]
	PaperTileSetTerrain[] Terrains;//[Offset: 0x70, Size: 0xc]
	int TileWidth;//[Offset: 0x7c, Size: 0x4]
	int TileHeight;//[Offset: 0x80, Size: 0x4]
	int Margin;//[Offset: 0x84, Size: 0x4]
	int Spacing;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4]
	int Top;//[Offset: 0x4, Size: 0x4]
	int Right;//[Offset: 0x8, Size: 0x4]
	int Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8]
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x28]
	byte TerrainMembership;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0xc]
	byte GeometryType;//[Offset: 0xc, Size: 0x1]
	int PixelsPerSubdivisionX;//[Offset: 0x10, Size: 0x4]
	int PixelsPerSubdivisionY;//[Offset: 0x14, Size: 0x4]
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x1c, Size: 0x4]
	float DetailAmount;//[Offset: 0x20, Size: 0x4]
	float SimplifyEpsilon;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1]
	Vector2D[] Vertices;//[Offset: 0x4, Size: 0xc]
	Vector2D BoxSize;//[Offset: 0x10, Size: 0x8]
	Vector2D BoxPosition;//[Offset: 0x18, Size: 0x8]
	float Rotation;//[Offset: 0x20, Size: 0x4]
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0xc]
	int CenterTileIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x1c, Size: 0x4]
	int MapHeight;//[Offset: 0x20, Size: 0x4]
	int TileWidth;//[Offset: 0x24, Size: 0x4]
	int TileHeight;//[Offset: 0x28, Size: 0x4]
	float PixelsPerUnrealUnit;//[Offset: 0x2c, Size: 0x4]
	float SeparationPerTileX;//[Offset: 0x30, Size: 0x4]
	float SeparationPerTileY;//[Offset: 0x34, Size: 0x4]
	float SeparationPerLayer;//[Offset: 0x38, Size: 0x4]
	PaperTileSet* SelectedTileSet;//[Offset: 0x40, Size: 0x28]
	MaterialInterface* Material;//[Offset: 0x68, Size: 0x4]
	PaperTileLayer*[] TileLayers;//[Offset: 0x6c, Size: 0xc]
	float CollisionThickness;//[Offset: 0x78, Size: 0x4]
	byte SpriteCollisionDomain;//[Offset: 0x7c, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x7d, Size: 0x1]
	int HexSideLength;//[Offset: 0x80, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x84, Size: 0x4]
	int LayerNameIndex;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: PaperTileMapActor.Actor.Object
	PaperTileMapComponent* RenderComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MapWidth;//[Offset: 0x51c, Size: 0x4]
	int MapHeight;//[Offset: 0x520, Size: 0x4]
	int TileWidth;//[Offset: 0x524, Size: 0x4]
	int TileHeight;//[Offset: 0x528, Size: 0x4]
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x52c, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x530, Size: 0x4]
	PaperTileLayer*[] TileLayers;//[Offset: 0x534, Size: 0xc]
	LinearColor TileMapColor;//[Offset: 0x540, Size: 0x10]
	int UseSingleLayerIndex;//[Offset: 0x550, Size: 0x4]
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]
	PaperTileMap* TileMap;//[Offset: 0x558, Size: 0x4]
	void SetTileMapColor(LinearColor NewColor);// 0x392ac1c
	bool SetTileMap(PaperTileMap* NewTileMap);// 0x253ec30
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0x392aac8
	void SetLayerColor(LinearColor NewColor, int Layer);// 0x392aa08
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0x392a7c0
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0x392a6fc
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0x392a640
	void RebuildCollision();// 0x392a62c
	bool OwnsTileMap();// 0x392a604
	void MakeTileMapEditable();// 0x392a5f0
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0x392a404
	LinearColor GetTileMapColor();// 0x392a3c0
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x392a258
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x392a0f0
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0x3929fd8
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0x3929ea0
	LinearColor GetLayerColor(int Layer);// 0x3929e14
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0x3929c34
	PaperTileLayer* AddNewLayer();// 0x3929c0c

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object
	static PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0x392c1f8
	static FName GetTileUserData(PaperTileInfo Tile);// 0x392c16c
	static Transform GetTileTransform(PaperTileInfo Tile);// 0x392c098
	static void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0x392be64

--------------------------------
Class: AndroidMediaSettings.Object
	bool CacheableVideoSampleBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ImgMediaSource.BaseMediaSource.MediaSource.Object
	float FramesPerSecondOverride;//[Offset: 0x28, Size: 0x4]
	FString ProxyOverride;//[Offset: 0x2c, Size: 0xc]
	DirectoryPath SequencePath;//[Offset: 0x38, Size: 0xc]
	void SetSequencePath(FString Path);// 0x39423f8
	FString GetSequencePath();// 0x39422e0
	void GetProxies(out FString[] OutProxies);// 0x39421ac

--------------------------------
Class: ImgMediaSettings.Object
	float DefaultFps;//[Offset: 0x1c, Size: 0x4]
	float CacheBehindPercentage;//[Offset: 0x20, Size: 0x4]
	float CacheSizeGB;//[Offset: 0x24, Size: 0x4]
	uint32 ExrDecoderThreads;//[Offset: 0x28, Size: 0x4]
	FString DefaultProxy;//[Offset: 0x2c, Size: 0xc]
	bool UseDefaultProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MediaPlane.Actor.Object
	MediaPlaneComponent* MediaPlane;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: MediaPlaneComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MediaPlaneParameters Plane;//[Offset: 0x500, Size: 0x30]
	void SetMediaPlane(MediaPlaneParameters Plane);// 0x3949f90
	void OnRenderTextureChanged();// 0x3949f7c
	MediaPlaneParameters GetPlane();// 0x3949f3c

--------------------------------
Class: MediaPlaneParameters
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x4]
	FName TextureParameterName;//[Offset: 0x8, Size: 0x8]
	bool bFillScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D FillScreenAmount;//[Offset: 0x14, Size: 0x8]
	Vector2D FixedSize;//[Offset: 0x1c, Size: 0x8]
	Texture* RenderTexture;//[Offset: 0x24, Size: 0x4]
	MaterialInstanceDynamic* DynamicMaterial;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MediaPlaneFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: MovieSceneMediaSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString Proxy;//[Offset: 0x94, Size: 0xc]
	MediaSource* MediaSource;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: MovieSceneMediaTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 0x4]
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 0x18]

--------------------------------
Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 0xc]
	ActorSequenceObjectReferences[] References;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 0x1]
	Guid ActorId;//[Offset: 0x4, Size: 0x10]
	FString PathToComponent;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xbc, Size: 0x20]
	ActorSequence* Sequence;//[Offset: 0xdc, Size: 0x4]
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xe0, Size: 0x4]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object

--------------------------------
Class: NamedInterfaces.Object
	NamedInterface[] NamedInterfaces;//[Offset: 0x1c, Size: 0xc]
	NamedInterfaceDef[] NamedInterfaceDefs;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: NamedInterface
	FName InterfaceName;//[Offset: 0x0, Size: 0x8]
	Object* InterfaceObject;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NamedInterfaceDef
	FName InterfaceName;//[Offset: 0x0, Size: 0x8]
	FString InterfaceClassName;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0x1c01fa0
	void OnMatchEnded(FString Match);// 0x1c01fa0

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out float Progress);// 0x39a4850
	static void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out FText Title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0x39a4260

--------------------------------
Class: AchievementQueryCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static AchievementQueryCallbackProxy* CacheAchievements(Object* WorldContextObject, PlayerController* PlayerController);// 0x39a4dd0
	static AchievementQueryCallbackProxy* CacheAchievementDescriptions(Object* WorldContextObject, PlayerController* PlayerController);// 0x39a4d14

--------------------------------
Class: AchievementWriteCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static AchievementWriteCallbackProxy* WriteAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementName, float Progress, int UserTag);// 0x39a51a0

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0x39a5600

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0x39a5940

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0x39a5d10

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface class MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0x39a6050

--------------------------------
Class: EndTurnCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static EndTurnCallbackProxy* EndTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, interface class TurnBasedMatchInterface);// 0x39a65b8

--------------------------------
Class: FindSessionsCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static FString GetServerName(out const BlueprintSessionResult Result);// 0x39a70a0
	static int GetPingInMs(out const BlueprintSessionResult Result);// 0x39a6f80
	static int GetMaxPlayers(out const BlueprintSessionResult Result);// 0x39a6e60
	static int GetCurrentPlayers(out const BlueprintSessionResult Result);// 0x39a6d40
	static FindSessionsCallbackProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0x39a6bf4

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface class MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0x39a762c

--------------------------------
Class: InAppPurchaseCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static InAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest ProductRequest);// 0x39a7b30

--------------------------------
Class: InAppPurchaseProductRequest
	FString ProductIdentifier;//[Offset: 0x0, Size: 0xc]
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x39a7ef4

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static InAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest[] ConsumableProductFlags, PlayerController* PlayerController);// 0x39a8320

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0x39a89dc

--------------------------------
Class: LeaderboardBlueprintLibrary.BlueprintFunctionLibrary.Object
	static bool WriteLeaderboardInteger(PlayerController* PlayerController, FName StatName, int StatValue);// 0x39a8e08

--------------------------------
Class: LeaderboardFlushCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static LeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(PlayerController* PlayerController, FName SessionName);// 0x39a91c4

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0x39a9534

--------------------------------
Class: LogoutCallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static LogoutCallbackProxy* Logout(Object* WorldContextObject, PlayerController* PlayerController);// 0x39a98bc

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x2cc, Size: 0x4]
	float BeaconConnectionTimeout;//[Offset: 0x2d0, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x2d4, Size: 0x4]

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x2e8, Size: 0x4]
	NetConnection* BeaconConnection;//[Offset: 0x2ec, Size: 0x4]
	enum ConnectionState;//[Offset: 0x2f0, Size: 0x1]
	void ClientOnConnected();// 0x39a9e58

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x2c8, Size: 0xc]
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x2d4, Size: 0x4]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x2d8, Size: 0xc]

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object
	int ListenPort;//[Offset: 0x2e8, Size: 0x4]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x2ec, Size: 0xc]

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object
	FName VoiceSubsystemNameOverride;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: OnlinePIESettings.DeveloperSettings.Object
	bool bOnlinePIEEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	PIELoginSettingsInternal[] Logins;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: PIELoginSettingsInternal
	FString ID;//[Offset: 0x0, Size: 0xc]
	FString Token;//[Offset: 0xc, Size: 0xc]
	FString Type;//[Offset: 0x18, Size: 0xc]
	byte[] TokenBytes;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1]

--------------------------------
Class: PartyBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x32c, Size: 0xc]
	PartyReservation PendingReservation;//[Offset: 0x338, Size: 0x1c]
	enum RequestType;//[Offset: 0x354, Size: 0x1]
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 0x1]
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x356, Size: 0x1]
	void ServerUpdateReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x39ab92c
	void ServerReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x39ab674
	void ServerCancelReservationRequest(const UniqueNetIdRepl PartyLeader);// 0x39ab470
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x39ab3f0
	void ClientSendReservationFull();// 0x2d02048
	void ClientReservationResponse(byte ReservationResponse);// 0x14eba74
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x39ab370

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 0x4]
	UniqueNetIdRepl PartyLeader;//[Offset: 0x4, Size: 0xc]
	PlayerReservation[] PartyMembers;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueId;//[Offset: 0x0, Size: 0xc]
	FString ValidationStr;//[Offset: 0xc, Size: 0xc]
	float ElapsedTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PartyBeaconState* State;//[Offset: 0x2e4, Size: 0x4]
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	float SessionTimeoutSecs;//[Offset: 0x314, Size: 0x4]
	float TravelSessionTimeoutSecs;//[Offset: 0x318, Size: 0x4]

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x20, Size: 0x8]
	int NumConsumedReservations;//[Offset: 0x28, Size: 0x4]
	int MaxReservations;//[Offset: 0x2c, Size: 0x4]
	int NumTeams;//[Offset: 0x30, Size: 0x4]
	int NumPlayersPerTeam;//[Offset: 0x34, Size: 0x4]
	FName TeamAssignmentMethod;//[Offset: 0x38, Size: 0x8]
	int ReservedHostTeamNum;//[Offset: 0x40, Size: 0x4]
	int ForceTeamNum;//[Offset: 0x44, Size: 0x4]
	PartyReservation[] Reservations;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: QuitMatchCallbackProxy.OnlineBlueprintCallProxyBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static QuitMatchCallbackProxy* QuitMatch(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, byte Outcome, int TurnTimeoutInSeconds);// 0x39ac5b0

--------------------------------
Class: ShowLoginUICallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 0xc]
	delegate OnFailure;//[Offset: 0x28, Size: 0xc]
	static ShowLoginUICallbackProxy* ShowExternalLoginUI(Object* WorldContextObject, PlayerController* InPlayerController);// 0x39acaa8

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	void ServerPong();// 0x39ace70
	void ClientPing();// 0x2ce27bc

--------------------------------
Class: TestBeaconHost.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: TurnBasedBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void RegisterTurnBasedMatchInterfaceObject(Object* WorldContextObject, PlayerController* PlayerController, Object* Object);// 0x39ada04
	static void GetPlayerDisplayName(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, int PlayerIndex, out FString PlayerDisplayName);// 0x39ad748
	static void GetMyPlayerIndex(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out int PlayerIndex);// 0x39ad510
	static void GetIsMyTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out bool bIsMyTurn);// 0x39ad2d8

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object
	static bool CheckPermission(FString permission);// 0x39b3dc0
	static AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] Permissions);// 0x39b3c8c

--------------------------------
Class: CableActor.Actor.Object
	CableComponent* CableComponent;//[Offset: 0x2c8, Size: 0x4]

--------------------------------
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAttachStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1]
	bool bAttachEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a, Size: 0x1]
	ComponentReference AttachEndTo;//[Offset: 0x520, Size: 0x18]
	FName AttachEndToSocketName;//[Offset: 0x538, Size: 0x8]
	Vector EndLocation;//[Offset: 0x540, Size: 0xc]
	float CableLength;//[Offset: 0x54c, Size: 0x4]
	int NumSegments;//[Offset: 0x550, Size: 0x4]
	float SubstepTime;//[Offset: 0x554, Size: 0x4]
	int SolverIterations;//[Offset: 0x558, Size: 0x4]
	bool bEnableStiffness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55d, Size: 0x1]
	float CollisionFriction;//[Offset: 0x560, Size: 0x4]
	Vector CableForce;//[Offset: 0x564, Size: 0xc]
	float CableGravityScale;//[Offset: 0x570, Size: 0x4]
	float CableWidth;//[Offset: 0x574, Size: 0x4]
	int NumSides;//[Offset: 0x578, Size: 0x4]
	float TileMaterial;//[Offset: 0x57c, Size: 0x4]
	void SetAttachEndTo(Actor* Actor, FName ComponentProperty, FName SocketName);// 0x39b8a34
	void GetCableParticleLocations(out Vector[] Locations);// 0x39b8968
	SceneComponent* GetAttachedComponent();// 0x39b8940
	Actor* GetAttachedActor();// 0x39b8918

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x4]
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SimpleWheeledVehicleMovementComponent.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	void SetSteerAngle(float SteerAngle, int WheelIndex);// 0x39d7d28
	void SetDriveTorque(float DriveTorque, int WheelIndex);// 0x39d7c6c
	void SetBrakeTorque(float BrakeTorque, int WheelIndex);// 0x39d7bb0

--------------------------------
Class: BasicReplicationGraph.ReplicationGraph.ReplicationDriver.Object
	ReplicationGraphNode_GridSpatialization2D* GridNode;//[Offset: 0x250, Size: 0x4]
	ReplicationGraphNode_ActorList* AlwaysRelevantNode;//[Offset: 0x254, Size: 0x4]
	ConnectionAlwaysRelevantNodePair[] AlwaysRelevantForConnectionList;//[Offset: 0x258, Size: 0xc]
	Actor*[] ActorsWithoutNetConnection;//[Offset: 0x264, Size: 0xc]

--------------------------------
Class: ConnectionAlwaysRelevantNodePair
	NetConnection* NetConnection;//[Offset: 0x0, Size: 0x4]
	ReplicationGraphNode_AlwaysRelevant_ForConnection* Node;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicationGraphNode_ActorListFrequencyBuckets.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_ConnectionDormanyNode.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_DormancyNode.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_GridCell.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object
	ReplicationGraphNode* DynamicNode;//[Offset: 0x110, Size: 0x4]
	ReplicationGraphNode_DormancyNode* DormancyNode;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: ReplicationGraphNode_AlwaysRelevant.ReplicationGraphNode.Object
	ReplicationGraphNode* ChildNode;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: LoadedClassManager_BP_C.UAELoadedClassManager.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x240, Size: 0x4]
	void LoadDecalBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_DecalBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadSkillPropsBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_SkillPropsBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadVehilceRefitPartternBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleRefitPatternTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, int CallFunc_Len_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadVehilceRefitColorBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleRefitColorTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Len_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadVehilceRefitParticleBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleRefitParticleTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadPetAvatarBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_PetDressBlueprintTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadVehilceRefitBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleRefitBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadSeasonMissionBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_SeasonMissionBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadAvatarPatternBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_DiySuitPatternConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadAvatarColorBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_DiySuitColorConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadVehicleBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadPlaneBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_PlaneBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadEmoteBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_EmoteBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadConsumableBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_ConsumableBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadGameModeBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_GameModeBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadAvatarBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_AvatarBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void LoadWeaponBPTable(FString BPTableName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BPTable* CallFunc_CreateAndAddBPTable_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_WeaponBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BPTableItem K2Node_MakeStruct_BPTableItem, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void InitBPTableMap();// 0x1c01fa0
	void ExecuteUbergraph_LoadedClassManager_BP(int EntryPoint);// 0x1c01fa0

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: BP_STRUCT_DecalBPTable_type
	int ID_0_0CAD9D8055C0CD6A25A0DCEE0A0553D4;//[Offset: 0x0, Size: 0x4]
	FString Path_1_0033FD807638E0C45A483151055262A8;//[Offset: 0x4, Size: 0xc]
	FString CName_2_6D7E0B40638C94B731ACB8980538E865;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: BP_STRUCT_SkillPropsBPTable_type
	FString CName_0_638079C0129E37EF7ABD58DE018085B5;//[Offset: 0x0, Size: 0xc]
	FString Path_1_7125AC0045061D844040043E0816E498;//[Offset: 0xc, Size: 0xc]
	int ID_2_3E5DCC006BF812EC2517437F0C381754;//[Offset: 0x18, Size: 0x4]
	FString Wrapper_3_17D6010032F6D6462C8642BA064BF7A2;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BP_STRUCT_VehicleRefitPatternTable_type
	FString PatternBPPath_0_4B5944C06FBA413D7EB727A808597AD8;//[Offset: 0x0, Size: 0xc]
	int ID_1_3B4768C07AEB475737EB9B560A7BEF14;//[Offset: 0xc, Size: 0x4]
	FString IconOffset_2_59F5A18037D665B02424026A0AB3EDF4;//[Offset: 0x10, Size: 0xc]
	FString IconPath2_3_024EF7804CE8216627C3CAFF038879F2;//[Offset: 0x1c, Size: 0xc]
	FString IconPath1_4_024DF7404CE8216527C3CAFC038879F1;//[Offset: 0x28, Size: 0xc]
	int IconScale1_5_46562E0071F9B3283BE305F8087656B1;//[Offset: 0x34, Size: 0x4]
	int IconScale2_6_46572E4071F9B3293BE305FF087656B2;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: BP_STRUCT_VehicleRefitColorTable_type
	int Gray_0_23C2528073E753A86CAE45C709177089;//[Offset: 0x0, Size: 0x4]
	FString Color1_1_133D19C0217781852E65F410071E3F41;//[Offset: 0x4, Size: 0xc]
	FString Color2_2_133E1A00217781862E65F413071E3F42;//[Offset: 0x10, Size: 0xc]
	int ID_3_7607F1003C307130785E051708091744;//[Offset: 0x1c, Size: 0x4]
	FString ColorBPPath_4_507BD54027F0DEF913818BAA07048B58;//[Offset: 0x20, Size: 0xc]
	FString Color3_5_133F1A40217781872E65F412071E3F43;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: BP_STRUCT_VehicleRefitParticleTable_type
	int StyleID_0_4BC8E2804CB29D6C7BC616430EFC4DA4;//[Offset: 0x0, Size: 0x4]
	int ID_1_7D8FDE406414C5ED44FDA70204464694;//[Offset: 0x4, Size: 0x4]
	FString PartileBPPath_2_5E40F7001EF760FC74A533720BB8A4F8;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: BP_STRUCT_PetDressBlueprintTable_type
	int ID_0_688F3A8033A7814C565560B30E5FAEF4;//[Offset: 0x0, Size: 0x4]
	FString Path_1_51589A804E9002622E9485530FAF46F8;//[Offset: 0x4, Size: 0xc]
	int Slot_2_31125FC006688BBB2E6646B20FAFCD34;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BP_STRUCT_VehicleRefitBPTable_type
	int TemplateID_0_188844C035CA84B912116AE102FE3804;//[Offset: 0x0, Size: 0x4]
	int ID_1_7E5115C05AFA7931402A62180B97D7E4;//[Offset: 0x4, Size: 0x4]
	FString Path_2_367735C04445450711936E2507D65338;//[Offset: 0x8, Size: 0xc]
	int SkinID_3_178D3B00586DF4A03398AF2E06BA7504;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BP_STRUCT_SeasonMissionBPTable_type
	FString Path_0_746EFA0071EA42DC1C74470F02D39998;//[Offset: 0x0, Size: 0xc]
	int ID_1_73B51A0066811C521281291A0132D224;//[Offset: 0xc, Size: 0x4]
	FString CName_2_3B02C7C021A8868F32F1BA220D295515;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: BP_STRUCT_DiySuitPatternConfig_type
	int ID_0_1986288022A4FBB87BF37984018D0894;//[Offset: 0x0, Size: 0x4]
	FString Icon_1_051847804144FD206B0A47070D08B9DE;//[Offset: 0x4, Size: 0xc]
	int ItemID_2_0F4A4C4062CFB54B08ACFC37094B4CD4;//[Offset: 0x10, Size: 0x4]
	FString BPUrl_3_25D5368039F7AA966A5B00C00083445C;//[Offset: 0x14, Size: 0xc]
	int Cost_4_22EF0B80079BBB006A2E79840D08E724;//[Offset: 0x20, Size: 0x4]
	FString Name_5_5103258079CB0E186B3912250D0907B5;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BP_STRUCT_DiySuitColorConfig_type
	int ItemID_1_15B6748029F10AF4167429B5070FACB4;//[Offset: 0x0, Size: 0x4]
	FString BPUrl_2_1E617EC03A4F456D2C223D0106670E5C;//[Offset: 0x4, Size: 0xc]
	int Cost_3_63AB73C07271FCFF75FDA1880D66A384;//[Offset: 0x10, Size: 0x4]
	int ID_4_0CD2D0C023DDAD912AEEEF92052D66D4;//[Offset: 0x14, Size: 0x4]
	int ColorG_6_55EE7F00036767CC6B99C3BD06A11B07;//[Offset: 0x18, Size: 0x4]
	int ColorB_7_55E97DC0036767C76B99C3A206A11B02;//[Offset: 0x1c, Size: 0x4]
	int ColorR_8_55F981C0036767D76B99C3B206A11B12;//[Offset: 0x20, Size: 0x4]
	FString ColorName_9_56C1CD807D19C79E1E3D3EDE01B12E25;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BP_STRUCT_VehicleBPTable_type
	int ID_0_0D9DF74051BBD583279703B701F172E4;//[Offset: 0x0, Size: 0x4]
	FString Path_2_2F72974026FE3BC32110651501735958;//[Offset: 0x4, Size: 0xc]
	FString CName_3_138BC5001BE2FE5E5E66B36807255925;//[Offset: 0x10, Size: 0xc]
	int VehicleShapeID_5_2C43E38070C85DC025E56CC303F69884;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BP_STRUCT_PlaneBPTable_type
	int ID_0_59EBC34020F2CB575FD7DA4501D5C5E4;//[Offset: 0x0, Size: 0x4]
	FString Path_1_6A746340179EA83F75000E8B05C45978;//[Offset: 0x4, Size: 0xc]
	FString CName_2_5267910037561B4A1C0638D70C555B65;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: BP_STRUCT_EmoteBPTable_type
	FString Path_0_247605C000C1809320361CC70BC26958;//[Offset: 0x0, Size: 0xc]
	FString CName_1_20BFF38058E1993E3181765E0C385985;//[Offset: 0xc, Size: 0xc]
	int ID_2_6D1FE5C03D4B9B6365DA363A01FBC3D4;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BP_STRUCT_ConsumableBPTable_type
	FString CName_0_3A46A7E346B57C4E5F45619DF5906006;//[Offset: 0x0, Size: 0xc]
	FString Path_1_81463AA644426E53AF3240A311C1D4E0;//[Offset: 0xc, Size: 0xc]
	int ID_2_AD337FD040A1235FE67F55BBA677262B;//[Offset: 0x18, Size: 0x4]
	FString Wrapper_3_66935E806EA99C4E6B9844A505FF3052;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BP_STRUCT_GameModeBPTable_type
	int ID_0_5A5311F84AF5AD63F284598DF413D62D;//[Offset: 0x0, Size: 0x4]
	FString CName_1_120D6DB74537DE28D87E4BAD2052E558;//[Offset: 0x4, Size: 0xc]
	FString Path_2_D808EF6946A66B7E51F6318FC7CCE098;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: BP_STRUCT_AvatarBPTable_type
	FString CName_0_A4052DC94E7BDAA9FAD3B19A7B988D48;//[Offset: 0x0, Size: 0xc]
	FString AvatarBPPath_1_891FA0534B751701E31560B16F286D8B;//[Offset: 0xc, Size: 0xc]
	int ItemID_2_5414CFBB435533293B561394BF4A770E;//[Offset: 0x18, Size: 0x4]
	FString BaseMaterial_3_CF8E62E64F77A71FBA663394520BD34E;//[Offset: 0x1c, Size: 0xc]
	int IsPackage_4_4347B95845DB19587DE29887A52E05D7;//[Offset: 0x28, Size: 0x4]
	FString Wrapper_5_663E34007B103FC200DAC514020BE042;//[Offset: 0x2c, Size: 0xc]
	int TemplateID_7_2887AE005383C2E84A80675E0040CD54;//[Offset: 0x38, Size: 0x4]
	FString MeshPath_8_2C6542406658161909A9383A04A40258;//[Offset: 0x3c, Size: 0xc]
	int IsReuseWrapper_9_30F4A4006900D02E4EC7D5B60E3DD5A2;//[Offset: 0x48, Size: 0x4]
	FString MaterialPath_10_66A36AC07FBB0355612D10BC0591FD48;//[Offset: 0x4c, Size: 0xc]

--------------------------------
Class: BP_STRUCT_WeaponBPTable_type
	FString CName_0_CD600C314161E84152102388BAC2C6E5;//[Offset: 0x0, Size: 0xc]
	FString Path_1_4B3A115440CA4D3ED6BB1CAE5312F1D0;//[Offset: 0xc, Size: 0xc]
	int ID_2_CE3ED80D47C51A8880AD2CBC79F2E6D0;//[Offset: 0x18, Size: 0x4]
	FString Wrapper_3_1417B6C029873FAD0DDBA26505064332;//[Offset: 0x1c, Size: 0xc]
	FString WeaponClass_4_06A7B680656FDD4E11BFC0FA01E01EC3;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: GlobalUIEventDispatcher_BP_C.Object
	void WardrobePutDownEvent__DelegateSignature(int PutonID, int resID);// 0x1c01fa0
	delegate WardrobePutDownEvent;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: GameLogicManagerBase_C.GameBusinessManager.LogicManagerBase.Object

--------------------------------
Class: bp_global_C.LuaClassObj.LuaContext.Actor.Object
	void EventSetInfo_Push_NoFetch();// 0x1c01fa0
	void EventSetInfo_Push();// 0x1c01fa0
	void EventJumpUrl_NoFetch();// 0x1c01fa0
	void EventJumpUrl();// 0x1c01fa0
	void EventChatCheckBan_NoFetch();// 0x1c01fa0
	void EventChatCheckBan();// 0x1c01fa0
	void EventChatBanInfo_NoFetch();// 0x1c01fa0
	void EventChatBanInfo();// 0x1c01fa0
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void EventGlobalShowHelpTips_NoFetch();// 0x1c01fa0
	void EventGlobalShowHelpTips();// 0x1c01fa0
	void EventShowPlatQQVip_NoFetch();// 0x1c01fa0
	void EventShowPlatQQVip();// 0x1c01fa0
	void EventOnLobbyRecoverCamera_NoFetch();// 0x1c01fa0
	void EventOnLobbyRecoverCamera();// 0x1c01fa0
	void EventOnLobbyCoverCamera_NoFetch();// 0x1c01fa0
	void EventOnLobbyCoverCamera();// 0x1c01fa0
	void EventGotoItemPreviewClick_NoFetch();// 0x1c01fa0
	void EventGotoItemPreviewClick();// 0x1c01fa0
	void EventCheckEUChatRestriction_NoFetch();// 0x1c01fa0
	void EventCheckEUChatRestriction();// 0x1c01fa0
	void EventSendBAReport_NoFetch();// 0x1c01fa0
	void EventSendBAReport();// 0x1c01fa0
	void EventGlobalCloseItemTips_NoFetch();// 0x1c01fa0
	void EventGlobalCloseItemTips();// 0x1c01fa0
	void EventShowPlatWXStartup_NoFetch();// 0x1c01fa0
	void EventShowPlatWXStartup();// 0x1c01fa0
	void EventGlobalShowItemTips_Push_NoFetch();// 0x1c01fa0
	void EventGlobalShowItemTips_Push();// 0x1c01fa0
	void EventSetPlayedCG_NoFetch();// 0x1c01fa0
	void EventSetPlayedCG();// 0x1c01fa0
	void EventShowLoadAdvertiseError_NoFetch();// 0x1c01fa0
	void EventShowLoadAdvertiseError();// 0x1c01fa0
	void EventAndroidQuitGame_NoFetch();// 0x1c01fa0
	void EventAndroidQuitGame();// 0x1c01fa0
	void EventFetchNationSwitch_NoFetch();// 0x1c01fa0
	void EventFetchNationSwitch();// 0x1c01fa0
	void EventGlobalUseItem_NoFetch();// 0x1c01fa0
	void EventGlobalUseItem();// 0x1c01fa0
	void EventGotoItemPreviewPress_NoFetch();// 0x1c01fa0
	void EventGotoItemPreviewPress();// 0x1c01fa0
	void EventShowPlatIconTips_NoFetch();// 0x1c01fa0
	void EventShowPlatIconTips();// 0x1c01fa0
	void EventSwitchLobbySkinCompleted_NoFetch();// 0x1c01fa0
	void EventSwitchLobbySkinCompleted();// 0x1c01fa0
	void EventUpdateServerTime_NoFetch();// 0x1c01fa0
	void EventUpdateServerTime();// 0x1c01fa0
	void EventCheckIfMenuOpen_NoFetch();// 0x1c01fa0
	void EventCheckIfMenuOpen();// 0x1c01fa0
	void EventGlobalCloseHelpTips_NoFetch();// 0x1c01fa0
	void EventGlobalCloseHelpTips();// 0x1c01fa0
	void EventShowPlatQQStartup_NoFetch();// 0x1c01fa0
	void EventShowPlatQQStartup();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	int BP_StartUpType;//[Offset: 0x304, Size: 0x4]
	FString BP_Global_SelfUID;//[Offset: 0x308, Size: 0xc]
	float BP_Global_ShadowDistanceScale_Current_f;//[Offset: 0x314, Size: 0x4]
	bool BP_GlobalTips_ShowLimitIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	int BP_Global_Last_Lobby_Skin_Id;//[Offset: 0x31c, Size: 0x4]
	FString BP_String_ServerTime;//[Offset: 0x320, Size: 0xc]
	bool BP_Global_CloseLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	BP_STRUCT_GlobalTips_Pos BP_STRUCT_GlobalTips_Pos;//[Offset: 0x330, Size: 0x8]
	int BP_Share_Platform;//[Offset: 0x338, Size: 0x4]
	int BP_GlobalTips_ItemID;//[Offset: 0x33c, Size: 0x4]
	bool BP_IsAppleAudit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	int BP_played_cg;//[Offset: 0x344, Size: 0x4]
	int BP_CHECK_MENU_OPEN_ID;//[Offset: 0x348, Size: 0x4]
	BP_STRUCT_NATION_SWITCH BP_STRUCT_NATION_SWITCH;//[Offset: 0x34c, Size: 0x4]
	FString BP_GlobalConfigTempStringValue;//[Offset: 0x350, Size: 0xc]
	int BP_Global_Cur_Lobby_Skin_Id;//[Offset: 0x35c, Size: 0x4]
	FString BP_GlobalConfigOperateKey;//[Offset: 0x360, Size: 0xc]
	int BP_Platform;//[Offset: 0x36c, Size: 0x4]
	int BP_GlobalSwitchLobbyMeshBgIndex;//[Offset: 0x370, Size: 0x4]
	int BP_Localize_StringWithNum_id;//[Offset: 0x374, Size: 0x4]
	bool BP_Global_HasPufferID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	int BP_GlobalTips_ColorID;//[Offset: 0x37c, Size: 0x4]
	float BP_Global_ShadowDistanceScale_f;//[Offset: 0x380, Size: 0x4]
	int BP_Localize_StringWithNum_NumStringIndex;//[Offset: 0x384, Size: 0x4]
	int BP_GlobalConfigTempIntValue;//[Offset: 0x388, Size: 0x4]
	bool BP_Global_AdvertiseNeedShowtask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	FString BP_Localize_StringWithNum_String1;//[Offset: 0x390, Size: 0xc]
	BP_STRUCT_GlobalHelpTips_Pos BP_STRUCT_GlobalHelpTips_Pos;//[Offset: 0x39c, Size: 0x8]
	bool BP_HadPlayAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	int BP_GlobalHelpTips_StringID;//[Offset: 0x3a8, Size: 0x4]
	int BP_BA_BUTTON_TYPE;//[Offset: 0x3ac, Size: 0x4]
	bool BP_NearBy_RedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	BP_STRUCT_GlobalTips_TimeInfo BP_STRUCT_GlobalTips_TimeInfo;//[Offset: 0x3b4, Size: 0x10]
	int BP_BA_REASON;//[Offset: 0x3c4, Size: 0x4]
	bool BP_Global_AndroidKey_IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	int BP_GlobalTips_PatternID;//[Offset: 0x3cc, Size: 0x4]
	int BP_GameGender;//[Offset: 0x3d0, Size: 0x4]
	bool BP_CHECK_MENU_OPEN_RESULT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	bool BP_IOS_CHECK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 0x1]
	bool BP_Global_IS_Show_10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d6, Size: 0x1]
	FString BP_Global_AdvertiseUnitID;//[Offset: 0x3d8, Size: 0xc]
	FString BP_Localize_StringWithNum_String4;//[Offset: 0x3e4, Size: 0xc]
	FString BP_Localize_StringWithNum_ReturnStr;//[Offset: 0x3f0, Size: 0xc]
	bool BP_EUChatRestriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	FString BP_Global_Url;//[Offset: 0x400, Size: 0xc]
	int BP_ChatBan;//[Offset: 0x40c, Size: 0x4]
	bool BP_GlobalConfigTempBooleanValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	int BP_Global_PreviewItemId;//[Offset: 0x414, Size: 0x4]
	int BP_GlobalConfigOperateType;//[Offset: 0x418, Size: 0x4]
	bool BP_IS_EXTERNAL_CHANNEL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	int BP_Global_CorpsShopLevelForRedPiont;//[Offset: 0x420, Size: 0x4]
	FString BP_Localize_StringWithNum_String2;//[Offset: 0x424, Size: 0xc]
	bool BP_ShouldRequestChatPrivacy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	float BP_GlobalConfigTempFloatValue_f;//[Offset: 0x434, Size: 0x4]
	int BP_CurSceneCameraIndex;//[Offset: 0x438, Size: 0x4]
	FString BP_Localize_StringWithNum_String3;//[Offset: 0x43c, Size: 0xc]
	int BP_GlobalTips_ItemCount;//[Offset: 0x448, Size: 0x4]
	int BP_GlobalSwitchCameraIndex;//[Offset: 0x44c, Size: 0x4]
	FString BP_GLOBAL_USE_ITEM;//[Offset: 0x450, Size: 0xc]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x45c, Size: 0x4]

--------------------------------
Class: BP_STRUCT_GlobalTips_Pos
	int x_0_BC95162242299DF7575384BF3165B2D9;//[Offset: 0x0, Size: 0x4]
	int y_1_7244EB0D4A9825ADADE0B99F4A4761CB;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BP_STRUCT_NATION_SWITCH
	bool NationRankSwitch_0_90EC58964A07013E18D9C4A0C24C6D72;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool NationAllSwitch_1_FFDC7E7C4281022AAE40A5B03DD5CE4A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool NationBattleSwitch_2_DCD8C0084AAD46192D3CA48FD5FCC651;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool Updated_3_5B3974684ED721353E91AA966D7347A5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: BP_STRUCT_GlobalHelpTips_Pos
	int y_0_4DBA1E404EED75A173CEF46903C67CB9;//[Offset: 0x0, Size: 0x4]
	int x_1_4DB91E004EED75A073CEF46803C67CB8;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BP_STRUCT_GlobalTips_TimeInfo
	bool is_limit_0_C44FFA274459A428B4E947B664175E8A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString time_s_1_F3B38E0D4CA07B5A44179194CBB4AC32;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: bp_lobby_C.LuaClassObj.LuaContext.Actor.Object
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void EventEnterRank_NoFetch();// 0x1c01fa0
	void EventEnterRank();// 0x1c01fa0
	void EventLobbyHideShop_NoFetch();// 0x1c01fa0
	void EventLobbyHideShop();// 0x1c01fa0
	void EventOpenXinyue_NoFetch();// 0x1c01fa0
	void EventOpenXinyue();// 0x1c01fa0
	void EventTestRemovePlayer3_NoFetch();// 0x1c01fa0
	void EventTestRemovePlayer3();// 0x1c01fa0
	void EventShowTeamupFriendLobbyRedPoint_NoFetch();// 0x1c01fa0
	void EventShowTeamupFriendLobbyRedPoint();// 0x1c01fa0
	void EventEnterWardrobe_NoFetch();// 0x1c01fa0
	void EventEnterWardrobe();// 0x1c01fa0
	void EventLobby_ClickSupply_NoFetch();// 0x1c01fa0
	void EventLobby_ClickSupply();// 0x1c01fa0
	void EventEnterShop_NoFetch();// 0x1c01fa0
	void EventEnterShop();// 0x1c01fa0
	void EventLobbyEnterAlliance_NoFetch();// 0x1c01fa0
	void EventLobbyEnterAlliance();// 0x1c01fa0
	void EventTestRemovePlayer_NoFetch();// 0x1c01fa0
	void EventTestRemovePlayer();// 0x1c01fa0
	void EventHaveNewHeadportraitInLobby_NoFetch();// 0x1c01fa0
	void EventHaveNewHeadportraitInLobby();// 0x1c01fa0
	void EventGetCollectEquipOpenState_NoFetch();// 0x1c01fa0
	void EventGetCollectEquipOpenState();// 0x1c01fa0
	void EventOpenMallSystem_NoFetch();// 0x1c01fa0
	void EventOpenMallSystem();// 0x1c01fa0
	void EventOpenChatUI_NoFetch();// 0x1c01fa0
	void EventOpenChatUI();// 0x1c01fa0
	void EventOpenGuidePanel_NoFetch();// 0x1c01fa0
	void EventOpenGuidePanel();// 0x1c01fa0
	void EventEnterTeamUp_NoFetch();// 0x1c01fa0
	void EventEnterTeamUp();// 0x1c01fa0
	void EventTestSpawnPlayer3_NoFetch();// 0x1c01fa0
	void EventTestSpawnPlayer3();// 0x1c01fa0
	void EventTestSpawnPlayer2_NoFetch();// 0x1c01fa0
	void EventTestSpawnPlayer2();// 0x1c01fa0
	void EventGetExcitingPartyOpenState_NoFetch();// 0x1c01fa0
	void EventGetExcitingPartyOpenState();// 0x1c01fa0
	void EventIsActivityOpened_NoFetch();// 0x1c01fa0
	void EventIsActivityOpened();// 0x1c01fa0
	void EventLobbyLeaveItemGet_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveItemGet();// 0x1c01fa0
	void EventShowUnknowPassIsNotInSession_NoFetch();// 0x1c01fa0
	void EventShowUnknowPassIsNotInSession();// 0x1c01fa0
	void EventLobbyLeaveChatWnd_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveChatWnd();// 0x1c01fa0
	void EventLobbyLeaveRankList_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveRankList();// 0x1c01fa0
	void EventLobbyLeaveFriend_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveFriend();// 0x1c01fa0
	void EventLobbyLeaveMail_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveMail();// 0x1c01fa0
	void EventOnClickCorps_NoFetch();// 0x1c01fa0
	void EventOnClickCorps();// 0x1c01fa0
	void EventEnterFriendList_NoFetch();// 0x1c01fa0
	void EventEnterFriendList();// 0x1c01fa0
	void EventLobbyLeaveTask_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveTask();// 0x1c01fa0
	void EventGetFriendProfile_NoFetch();// 0x1c01fa0
	void EventGetFriendProfile();// 0x1c01fa0
	void EventTestSpawnPlayer_NoFetch();// 0x1c01fa0
	void EventTestSpawnPlayer();// 0x1c01fa0
	void EventSimulateTestReConnect_NoFetch();// 0x1c01fa0
	void EventSimulateTestReConnect();// 0x1c01fa0
	void EventEnterRoleInfo_NoFetch();// 0x1c01fa0
	void EventEnterRoleInfo();// 0x1c01fa0
	void EventClickDailyShareBtn_NoFetch();// 0x1c01fa0
	void EventClickDailyShareBtn();// 0x1c01fa0
	void EventOpenUnknowPass_NoFetch();// 0x1c01fa0
	void EventOpenUnknowPass();// 0x1c01fa0
	void EventAvatarChange_NoFetch();// 0x1c01fa0
	void EventAvatarChange();// 0x1c01fa0
	void EventInitActivityListComplete_NoFetch();// 0x1c01fa0
	void EventInitActivityListComplete();// 0x1c01fa0
	void EventOpenFreeDataUrl_NoFetch();// 0x1c01fa0
	void EventOpenFreeDataUrl();// 0x1c01fa0
	void EventOpenMissionUI_NoFetch();// 0x1c01fa0
	void EventOpenMissionUI();// 0x1c01fa0
	void EventTeamUpRings_NoFetch();// 0x1c01fa0
	void EventTeamUpRings();// 0x1c01fa0
	void EventTestScrollMsg_NoFetch();// 0x1c01fa0
	void EventTestScrollMsg();// 0x1c01fa0
	void EventPutOnWeapon_NoFetch();// 0x1c01fa0
	void EventPutOnWeapon();// 0x1c01fa0
	void EventLobbyUpdateDoubleCardButton_NoFetch();// 0x1c01fa0
	void EventLobbyUpdateDoubleCardButton();// 0x1c01fa0
	void EventCanOpenUrl_NoFetch();// 0x1c01fa0
	void EventCanOpenUrl();// 0x1c01fa0
	void EventOpenGetExcitingPartyUI_NoFetch();// 0x1c01fa0
	void EventOpenGetExcitingPartyUI();// 0x1c01fa0
	void EventHideScrollMsg_NoFetch();// 0x1c01fa0
	void EventHideScrollMsg();// 0x1c01fa0
	void EventOpenShopLimitUI_NoFetch();// 0x1c01fa0
	void EventOpenShopLimitUI();// 0x1c01fa0
	void EventLobbyOpenArmory_NoFetch();// 0x1c01fa0
	void EventLobbyOpenArmory();// 0x1c01fa0
	void EventOpenHuati_NoFetch();// 0x1c01fa0
	void EventOpenHuati();// 0x1c01fa0
	void EventOpenESportTV_NoFetch();// 0x1c01fa0
	void EventOpenESportTV();// 0x1c01fa0
	void EventOpenEnchargePanel_NoFetch();// 0x1c01fa0
	void EventOpenEnchargePanel();// 0x1c01fa0
	void EventSetAchievementInitialFlag_NoFetch();// 0x1c01fa0
	void EventSetAchievementInitialFlag();// 0x1c01fa0
	void EventOpenActivityGroupUI_NoFetch();// 0x1c01fa0
	void EventOpenActivityGroupUI();// 0x1c01fa0
	void EventOpenLobbyWeapon_NoFetch();// 0x1c01fa0
	void EventOpenLobbyWeapon();// 0x1c01fa0
	void EventLobbyMallGetHotPointState_NoFetch();// 0x1c01fa0
	void EventLobbyMallGetHotPointState();// 0x1c01fa0
	void EventOpenQQlibao_NoFetch();// 0x1c01fa0
	void EventOpenQQlibao();// 0x1c01fa0
	void EventQuestionDone_NoFetch();// 0x1c01fa0
	void EventQuestionDone();// 0x1c01fa0
	void EventEnterSeason_NoFetch();// 0x1c01fa0
	void EventEnterSeason();// 0x1c01fa0
	void EventTestLevelUp_NoFetch();// 0x1c01fa0
	void EventTestLevelUp();// 0x1c01fa0
	void EventOpenCollectEquipment_NoFetch();// 0x1c01fa0
	void EventOpenCollectEquipment();// 0x1c01fa0
	void EventOpenGMMenu_NoFetch();// 0x1c01fa0
	void EventOpenGMMenu();// 0x1c01fa0
	void EventEnterConfig_NoFetch();// 0x1c01fa0
	void EventEnterConfig();// 0x1c01fa0
	void EventEnterMail_NoFetch();// 0x1c01fa0
	void EventEnterMail();// 0x1c01fa0
	void EventRankSavedChoosingZoneId_Push_NoFetch();// 0x1c01fa0
	void EventRankSavedChoosingZoneId_Push();// 0x1c01fa0
	void EventLobbyShowDoubleCard_NoFetch();// 0x1c01fa0
	void EventLobbyShowDoubleCard();// 0x1c01fa0
	void EventSwitchLobbyCameraByIndex_NoFetch();// 0x1c01fa0
	void EventSwitchLobbyCameraByIndex();// 0x1c01fa0
	void EventLobbyMallSetCurTime_NoFetch();// 0x1c01fa0
	void EventLobbyMallSetCurTime();// 0x1c01fa0
	void EventMallHotPointUpdateByMonthCord_NoFetch();// 0x1c01fa0
	void EventMallHotPointUpdateByMonthCord();// 0x1c01fa0
	void EventOpenCommunityInLobby_NoFetch();// 0x1c01fa0
	void EventOpenCommunityInLobby();// 0x1c01fa0
	void EventPutOnEquipment_NoFetch();// 0x1c01fa0
	void EventPutOnEquipment();// 0x1c01fa0
	void EventTestRemovePlayer2_NoFetch();// 0x1c01fa0
	void EventTestRemovePlayer2();// 0x1c01fa0
	void EventHandleActivityBtn_NoFetch();// 0x1c01fa0
	void EventHandleActivityBtn();// 0x1c01fa0
	void EventRoleInfoSavedChoosingZoneId_Push_NoFetch();// 0x1c01fa0
	void EventRoleInfoSavedChoosingZoneId_Push();// 0x1c01fa0
	void EventOpenWorldView_NoFetch();// 0x1c01fa0
	void EventOpenWorldView();// 0x1c01fa0
	void EventLobbyLuckAirDropShow_NoFetch();// 0x1c01fa0
	void EventLobbyLuckAirDropShow();// 0x1c01fa0
	void EventLobbyActivityEnd_NoFetch();// 0x1c01fa0
	void EventLobbyActivityEnd();// 0x1c01fa0
	void EventLobbyLeaveWorldView_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveWorldView();// 0x1c01fa0
	void EventLeaveWeekSignUp_NoFetch();// 0x1c01fa0
	void EventLeaveWeekSignUp();// 0x1c01fa0
	void EventSetInfo_Push_NoFetch();// 0x1c01fa0
	void EventSetInfo_Push();// 0x1c01fa0
	void EventclickDecompose_NoFetch();// 0x1c01fa0
	void EventclickDecompose();// 0x1c01fa0
	void EventRerollAllScrollMsg_NoFetch();// 0x1c01fa0
	void EventRerollAllScrollMsg();// 0x1c01fa0
	void EventLobbyAndroidBack_NoFetch();// 0x1c01fa0
	void EventLobbyAndroidBack();// 0x1c01fa0
	void EventLobbyLeaveRoleInfo_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveRoleInfo();// 0x1c01fa0
	void EventGetShopLimitTitle_NoFetch();// 0x1c01fa0
	void EventGetShopLimitTitle();// 0x1c01fa0
	void EventLeaveWardrobe_NoFetch();// 0x1c01fa0
	void EventLeaveWardrobe();// 0x1c01fa0
	void EventLobbyStartDownload_NoFetch();// 0x1c01fa0
	void EventLobbyStartDownload();// 0x1c01fa0
	void EventLobbyPauseDownload_NoFetch();// 0x1c01fa0
	void EventLobbyPauseDownload();// 0x1c01fa0
	void EventLobby_DownloadOnShow_NoFetch();// 0x1c01fa0
	void EventLobby_DownloadOnShow();// 0x1c01fa0
	void EventLobby_DownloadOnHide_NoFetch();// 0x1c01fa0
	void EventLobby_DownloadOnHide();// 0x1c01fa0
	void EventInitActivityRedPoint_NoFetch();// 0x1c01fa0
	void EventInitActivityRedPoint();// 0x1c01fa0
	void EventLobbyLeaveGuidePanel_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveGuidePanel();// 0x1c01fa0
	void EventEnterSigninSystem_NoFetch();// 0x1c01fa0
	void EventEnterSigninSystem();// 0x1c01fa0
	void EventHideTeamupFriendLobbyRedPoint_NoFetch();// 0x1c01fa0
	void EventHideTeamupFriendLobbyRedPoint();// 0x1c01fa0
	void EventLobbyLeaveSetting_NoFetch();// 0x1c01fa0
	void EventLobbyLeaveSetting();// 0x1c01fa0
	void EventLeaveLobby_NoFetch();// 0x1c01fa0
	void EventLeaveLobby();// 0x1c01fa0
	void EventOpenQQVip_NoFetch();// 0x1c01fa0
	void EventOpenQQVip();// 0x1c01fa0
	void EventOpenActivityPanel_NoFetch();// 0x1c01fa0
	void EventOpenActivityPanel();// 0x1c01fa0
	void EventOpenLobbyCharacter_NoFetch();// 0x1c01fa0
	void EventOpenLobbyCharacter();// 0x1c01fa0
	void EventTestRedpoint_NoFetch();// 0x1c01fa0
	void EventTestRedpoint();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	bool BP_NATION_BATTLE_SWITCH;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool BP_Lobby_Mall_Hot_Point_IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	int BP_Lobby_Exp_Rate;//[Offset: 0x308, Size: 0x4]
	BP_STRUCT_AvatarChange BP_STRUCT_AvatarChange;//[Offset: 0x30c, Size: 0x10]
	int BP_Lobby_Role_Avatar_Frame;//[Offset: 0x31c, Size: 0x4]
	int BP_PlayerGold;//[Offset: 0x320, Size: 0x4]
	FString BP_PlayerAliasNation;//[Offset: 0x324, Size: 0xc]
	BP_STRUCT_ShopLimit BP_STRUCT_ShopLimit;//[Offset: 0x330, Size: 0x18]
	int BP_LobbyTargetCameraBlendTime;//[Offset: 0x348, Size: 0x4]
	bool BP_Lobby_RankChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	bool BP_XinyueRedPointSvrOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1]
	BP_Struct_LobbyShowDownloadingMapInfo[] BP_Array_LobbyShowDownloadingMapInfoList;//[Offset: 0x350, Size: 0xc]
	FString BP_SystemTargetCameraSysName;//[Offset: 0x35c, Size: 0xc]
	FString BP_Activity_Icon_Path;//[Offset: 0x368, Size: 0xc]
	FString BP_PlayerIconUrl;//[Offset: 0x374, Size: 0xc]
	bool BP_UNKNOWPASS_PANEL_IS_ENABLE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	FString BP_LobbyLogic_ClassPath;//[Offset: 0x384, Size: 0xc]
	int BP_Lobby_Mall_Cur_ServerTime;//[Offset: 0x390, Size: 0x4]
	bool BP_NATION_ALL_SWITCH;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	int BP_PlayerTicket;//[Offset: 0x398, Size: 0x4]
	int BP_PlayerExp;//[Offset: 0x39c, Size: 0x4]
	int BP_Lobby_PlayerMaxRankLevel;//[Offset: 0x3a0, Size: 0x4]
	bool BP_LevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	int BP_RankSavedChoosingZoneId;//[Offset: 0x3a8, Size: 0x4]
	bool BP_Lobby_IsActivityOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	int BP_PutOnResId;//[Offset: 0x3b0, Size: 0x4]
	bool BP_LobbyPlayerShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	bool BP_Lobby_NeedShowAdvertise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1]
	int BP_PlayerAliasID;//[Offset: 0x3b8, Size: 0x4]
	bool BP_Lobby_OpenShoporWardrobe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	int BP_RoleInfoSavedChoosingZoneId;//[Offset: 0x3c0, Size: 0x4]
	BP_STRUCT_TransformUseList BP_STRUCT_TransformUseList;//[Offset: 0x3c4, Size: 0x8]
	int BP_LOBBY_ClickedActivityState;//[Offset: 0x3cc, Size: 0x4]
	bool BP_UNKNOWPASS_IS_IN_CURRENT_SESSION;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	BP_STRUCT_SpawnPlayerData[] BP_ARRAY_LobbyPlayerDataList;//[Offset: 0x3d4, Size: 0xc]
	BP_STRUCT_TeamUpRingsChange BP_STRUCT_TeamUpRingsChange;//[Offset: 0x3e0, Size: 0x10]
	bool BP_LobbyCameraSwitchLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	bool BP_Lobby_Has_Gold_Rate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 0x1]
	bool EmulatorCheck_FirstinLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 0x1]
	int BP_Lobby_AllDownloadCurrent;//[Offset: 0x3f4, Size: 0x4]
	int BP_PlayerGender;//[Offset: 0x3f8, Size: 0x4]
	FString BP_Lobby_WeaponStatusChange_UID;//[Offset: 0x3fc, Size: 0xc]
	int BP_LobbyPlayerNum;//[Offset: 0x408, Size: 0x4]
	FString BP_PlayerName;//[Offset: 0x40c, Size: 0xc]
	bool BP_LobbyNetworkStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	BP_STRUCT_LOBBY_GoldExp_BuffInfo BP_STRUCT_LOBBY_GoldExp_BuffInfo;//[Offset: 0x41c, Size: 0x18]
	int BP_SystemTargetCameraIndex;//[Offset: 0x434, Size: 0x4]
	int G_Index_In_Login;//[Offset: 0x438, Size: 0x4]
	bool BP_Lobby_Supply_RedDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	bool BP_ShowPersonSpaceReddot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 0x1]
	FString BP_PlayerUid;//[Offset: 0x440, Size: 0xc]
	int BP_Activity_IconShowTimes;//[Offset: 0x44c, Size: 0x4]
	bool BP_Lobby_IsDownloadingMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	bool BP_UnknowPass_ShowReddot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1]
	FString BP_PlayerAliasTitle;//[Offset: 0x454, Size: 0xc]
	bool BP_Lobby_MenuOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	int[] BP_ARRAY_Lobby_ActivityNotOpenList;//[Offset: 0x464, Size: 0xc]
	int BP_LobbyTargetCameraIndex;//[Offset: 0x470, Size: 0x4]
	int BP_Lobby_Play_Sound_FromWhereType;//[Offset: 0x474, Size: 0x4]
	bool BP_COLLECT_EQUIPMENT_Open;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	int BP_PlayerQQVip;//[Offset: 0x47c, Size: 0x4]
	int BP_LobbyBubble_CurItemID;//[Offset: 0x480, Size: 0x4]
	bool BP_Free_Data_Open;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	int BP_LobbyNetworkDelay;//[Offset: 0x488, Size: 0x4]
	BP_STRUCT_AvatarInfo BP_STRUCT_AvatarInfo;//[Offset: 0x48c, Size: 0xc]
	FString BP_Activity_Jump_Url;//[Offset: 0x498, Size: 0xc]
	bool BP_Lobby_CanOpenUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	int BP_PlayerDiamond;//[Offset: 0x4a8, Size: 0x4]
	FString BP_Lobby_CurrentDownloadFileName;//[Offset: 0x4ac, Size: 0xc]
	int BP_PlayerLevel;//[Offset: 0x4b8, Size: 0x4]
	int BP_CurrentMenuId;//[Offset: 0x4bc, Size: 0x4]
	FString BP_Lobby_Play_Sound_Uid;//[Offset: 0x4c0, Size: 0xc]
	bool BP_TheFirstCharge_RedDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1]
	int BP_PlayerGoldChip;//[Offset: 0x4d0, Size: 0x4]
	int BP_Lobby_Gold_Rate;//[Offset: 0x4d4, Size: 0x4]
	bool BP_NATION_SWITCH_UPDATED;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	BP_STRUCT_LOBBY_GoldExp_BuffInfo[] BP_ARRAY_Lobby_GoldBuffInfo;//[Offset: 0x4dc, Size: 0xc]
	int BP_FriendApplyMessageCount;//[Offset: 0x4e8, Size: 0x4]
	int BP_Lobby_AdvertiseLastTime;//[Offset: 0x4ec, Size: 0x4]
	BP_STRUCT_LOBBY_GoldExp_BuffInfo[] BP_ARRAY_Lobby_ExpBuffInfo;//[Offset: 0x4f0, Size: 0xc]
	bool BP_CurrentRedPointStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 0x1]
	BP_STRUCT_ActivityBtnDisplay BP_STRUCT_ActivityBtnDisplay;//[Offset: 0x500, Size: 0x50]
	bool BP_NATION_RANK_SWITCH;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	int BP_PutOnWeaponResId;//[Offset: 0x554, Size: 0x4]
	bool BP_Lobby_Has_Exp_Rate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1]
	int[] BP_ARRAY_LobbyStoreBoxHotPoint;//[Offset: 0x55c, Size: 0xc]
	bool BP_ShowHeadportraitReddot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	BP_STRUCT_SpawnPlayerData BP_STRUCT_SpawnPlayerData;//[Offset: 0x56c, Size: 0x34]
	int BP_TheFirstCharge_IconFlag;//[Offset: 0x5a0, Size: 0x4]
	bool BP_MallPlayerShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	bool BP_PutOnRes_Isolated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 0x1]
	BP_STRUCT_ActivityBtnDisplay[] BP_ARRAY_LobbyActivityBtnDisplayList;//[Offset: 0x5a8, Size: 0xc]
	int BP_LuckAirDropTime;//[Offset: 0x5b4, Size: 0x4]
	bool DataMgrInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	int BP_CurrentMaxExp;//[Offset: 0x5bc, Size: 0x4]
	int BP_Activity_Type;//[Offset: 0x5c0, Size: 0x4]
	BP_STRUCT_AvatarInfo[] BP_ARRAY_AvatarList;//[Offset: 0x5c4, Size: 0xc]
	int BP_LuckAirDropTimeLeft;//[Offset: 0x5d0, Size: 0x4]
	int BP_Lobby_WeaponStatusChange_WeaponResId;//[Offset: 0x5d4, Size: 0x4]
	int BP_LOBBY_SPAWNPOS;//[Offset: 0x5d8, Size: 0x4]
	bool BP_Exciting_Party_Open;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 0x1]
	BP_Struct_LobbyShowDownloadingMapInfo BP_Struct_LobbyShowDownloadingMapInfo;//[Offset: 0x5e0, Size: 0x38]
	FString BP_Lobby_Play_Sound_Path;//[Offset: 0x618, Size: 0xc]
	BP_STRUCT_LobbyAdvertiseSpecialTaskInfo BP_STRUCT_LobbyAdvertiseSpecialTaskInfo;//[Offset: 0x624, Size: 0x20]
	int BP_Lobby_AllDownloadTotal;//[Offset: 0x644, Size: 0x4]
	bool LobbyModeSwitched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1]
	int[] BP_ARRAY_LobbyStoreBoxList;//[Offset: 0x64c, Size: 0xc]
	int BP_ClickTimeNotBind;//[Offset: 0x658, Size: 0x4]
	int BP_ClickTimeBind;//[Offset: 0x65c, Size: 0x4]
	int BP_CurrentDay;//[Offset: 0x660, Size: 0x4]
	int BP_SystemTargetCameraBlendTime;//[Offset: 0x664, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x668, Size: 0x4]

--------------------------------
Class: BP_STRUCT_AvatarChange
	FString gid_0_0068A02D4FB8507FACCE29A6D83352E4;//[Offset: 0x0, Size: 0xc]
	int resId_1_B16CC58E4E3009EDA5FFDF966711B5CB;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_ShopLimit
	FString Title_0_BFA319E2462060909DF1C4B8CD28019B;//[Offset: 0x0, Size: 0xc]
	FString EndTime_1_281F06BD42BC4BFDBF28D39ADBED9AA3;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BP_Struct_LobbyShowDownloadingMapInfo
	int current_0_713FD44078ABF52F4CEE46BE023B3FC4;//[Offset: 0x0, Size: 0x4]
	FString name_1_3301BBC043383CA540CCC60A0B5AC915;//[Offset: 0x4, Size: 0xc]
	int total_2_2D597C802B40A87E6AABA4DB058398CC;//[Offset: 0x10, Size: 0x4]
	FString fileName_3_3C991BC0611761B3514B151B01031F75;//[Offset: 0x14, Size: 0xc]
	int state_4_54977BC0544272F76A54CE7505825A15;//[Offset: 0x20, Size: 0x4]
	int percent_5_4ED7AFC05E8158E90F68386D0E3A2FD4;//[Offset: 0x24, Size: 0x4]
	FString desc_6_7921BB40572D0E5F47826C080B5923B3;//[Offset: 0x28, Size: 0xc]
	int type_7_09CE240062C417B040D2BAB50B584F45;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: BP_STRUCT_TransformUseList
	int index_0_8EB710D74F66FC0D18778A85F4279B6B;//[Offset: 0x0, Size: 0x4]
	bool inUse_1_3808403449351BB245F037A0F1CA2BB0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: BP_STRUCT_SpawnPlayerData
	FString gid_0_5016F4854EC3A5A8C89AB9A764FDB20C;//[Offset: 0x0, Size: 0xc]
	int sex_2_0DDDE1C14A0CC9529DBFC78A27E51E63;//[Offset: 0xc, Size: 0x4]
	int headId_3_268971594D7E7A10BB2864B16488B3D7;//[Offset: 0x10, Size: 0x4]
	int index_4_1D0911E640748785A250C28C3602624D;//[Offset: 0x14, Size: 0x4]
	int weaponSkinId_7_4C88EC4015366C731872894B0D0BF054;//[Offset: 0x18, Size: 0x4]
	int weaponResId_8_1E2C51804BEB6A2A300038250ACE66D4;//[Offset: 0x1c, Size: 0x4]
	BP_STRUCT_AvatarInfo[] BP_ARRAY_AvatarList_9_553F8BC04CDF25B128537B000050C784;//[Offset: 0x20, Size: 0xc]
	int headShow_10_2769A6003DC3968C2B78CEE10AEE5137;//[Offset: 0x2c, Size: 0x4]
	int bagSkinInsId_11_5AC33EC0019344B33FCFD18B021A0824;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: BP_STRUCT_AvatarInfo
	int patternID_0_5FECBAC0567F500B20D9B5D5001BA9A4;//[Offset: 0x0, Size: 0x4]
	int colorID_1_0EBAE30065ECB54C348EC20305BAD1D4;//[Offset: 0x4, Size: 0x4]
	int resID_5_3BCBFAFC45B08783019855A321922B12;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BP_STRUCT_TeamUpRingsChange
	FString[] BP_ARRAY_CurrentTeamMemberGidList_0_D2CDCC1D471B89B9F0AB7EA00B0FC54F;//[Offset: 0x0, Size: 0xc]
	int teamMemberNum_1_77DA28B0499A92734B37ADB6DAF70618;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_LOBBY_GoldExp_BuffInfo
	FString name_0_34A8038067341ADC3219DE360098E615;//[Offset: 0x0, Size: 0xc]
	FString timer_1_7ED8638029326F046DCB4B5E0960E1C2;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BP_STRUCT_ActivityBtnDisplay
	int Priority_0_46159A294AD8CE52B8706D9F5544BD82;//[Offset: 0x0, Size: 0x4]
	FString ActivityName_1_BDDD54604B8656536C99C0A3F5074B3F;//[Offset: 0x4, Size: 0xc]
	FString IconPath_2_C79C7E02493AE6F3925939B80B14DE6D;//[Offset: 0x10, Size: 0xc]
	FString JumpUrl_3_883F04534B750337906ECABA456B4935;//[Offset: 0x1c, Size: 0xc]
	bool IsShowCountDownIcon_7_6D7870C063D0BBF506ED453F0E94291E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int ActivityType_8_7B7F6AC01B53CA476EC6B45A012F6925;//[Offset: 0x2c, Size: 0x4]
	FString EndTime_9_3CF0D880683B9FF41A4A6FDC06FE3125;//[Offset: 0x30, Size: 0xc]
	FString StartTime_10_0DE1164068816D5B70CB6F1A0F06AC25;//[Offset: 0x3c, Size: 0xc]
	int EndTimeUTC_11_7BB893801BAE54260B5CEF1D0312C563;//[Offset: 0x48, Size: 0x4]
	int StartTimeUTC_12_3FB0314032DCC95F676A48D10AC25AE3;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BP_STRUCT_LobbyAdvertiseSpecialTaskInfo
	int status_0_5BEF6600312C95B86DD09FF70C42D463;//[Offset: 0x0, Size: 0x4]
	bool canShow_1_51BCF1C0394C00B32036B488080665B7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int count_2_787687405C3FCD9534B88DD10AD8EFA4;//[Offset: 0x8, Size: 0x4]
	int progress_3_022EBA40390E25275F689CBE01012033;//[Offset: 0xc, Size: 0x4]
	int reward_count_9_7C29C0403D63DE8D3AE1FF20063EED74;//[Offset: 0x10, Size: 0x4]
	FString reward_icon_8_03C8C04028ECC53761100C820263B22E;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: bp_battleresult_C.LuaClassObj.LuaContext.Actor.Object
	void EventGetIsMyFriend_NoFetch();// 0x1c01fa0
	void EventGetIsMyFriend();// 0x1c01fa0
	void EventBattleResultGenerateMyHeadInfo_NoFetch();// 0x1c01fa0
	void EventBattleResultGenerateMyHeadInfo();// 0x1c01fa0
	void EventClientFreshData_NoFetch();// 0x1c01fa0
	void EventClientFreshData();// 0x1c01fa0
	void EventClientExitTraining_NoFetch();// 0x1c01fa0
	void EventClientExitTraining();// 0x1c01fa0
	void EventShowGameJoyRecordFailNotice_NoFetch();// 0x1c01fa0
	void EventShowGameJoyRecordFailNotice();// 0x1c01fa0
	void EventAddFriendRequest_Push_NoFetch();// 0x1c01fa0
	void EventAddFriendRequest_Push();// 0x1c01fa0
	void EventOnClickInGameCollect_NoFetch();// 0x1c01fa0
	void EventOnClickInGameCollect();// 0x1c01fa0
	void EventUpvoteTeammateRequest_Push_NoFetch();// 0x1c01fa0
	void EventUpvoteTeammateRequest_Push();// 0x1c01fa0
	void EventShowResultMVPView_NoFetch();// 0x1c01fa0
	void EventShowResultMVPView();// 0x1c01fa0
	void EventShowSingleResult_NoFetch();// 0x1c01fa0
	void EventShowSingleResult();// 0x1c01fa0
	void EventDoIgnoreDSError_Push_NoFetch();// 0x1c01fa0
	void EventDoIgnoreDSError_Push();// 0x1c01fa0
	void EventDelayCall_NoFetch();// 0x1c01fa0
	void EventDelayCall();// 0x1c01fa0
	void EventClientExitGame_NoFetch();// 0x1c01fa0
	void EventClientExitGame();// 0x1c01fa0
	void EventClientGetIsClickReply_NoFetch();// 0x1c01fa0
	void EventClientGetIsClickReply();// 0x1c01fa0
	void EventEnterAnchorObserve_NoFetch();// 0x1c01fa0
	void EventEnterAnchorObserve();// 0x1c01fa0
	void EventGameJoyVideoShareSuccess_NoFetch();// 0x1c01fa0
	void EventGameJoyVideoShareSuccess();// 0x1c01fa0
	void EventResultUIGiveUpObserver_NoFetch();// 0x1c01fa0
	void EventResultUIGiveUpObserver();// 0x1c01fa0
	void EventWatchGameOnSelect_NoFetch();// 0x1c01fa0
	void EventWatchGameOnSelect();// 0x1c01fa0
	void EventWatchGameUpdateReservationState_NoFetch();// 0x1c01fa0
	void EventWatchGameUpdateReservationState();// 0x1c01fa0
	void EventReturnFromLeagueBattle_NoFetch();// 0x1c01fa0
	void EventReturnFromLeagueBattle();// 0x1c01fa0
	void EventEnterSpectating_NoFetch();// 0x1c01fa0
	void EventEnterSpectating();// 0x1c01fa0
	void EventReviveStateReturnToLobbyConfirm_NoFetch();// 0x1c01fa0
	void EventReviveStateReturnToLobbyConfirm();// 0x1c01fa0
	void EventOnClickAdvertiseButton_NoFetch();// 0x1c01fa0
	void EventOnClickAdvertiseButton();// 0x1c01fa0
	void EventWatchGameClickReserveFriend_NoFetch();// 0x1c01fa0
	void EventWatchGameClickReserveFriend();// 0x1c01fa0
	void EventOBViewGetCurSeasonName_NoFetch();// 0x1c01fa0
	void EventOBViewGetCurSeasonName();// 0x1c01fa0
	void EventGetPlayerMatchMode_NoFetch();// 0x1c01fa0
	void EventGetPlayerMatchMode();// 0x1c01fa0
	void EventBattleResult_BackToLobby_NoFetch();// 0x1c01fa0
	void EventBattleResult_BackToLobby();// 0x1c01fa0
	void EventOBViewAddFriendRequest_NoFetch();// 0x1c01fa0
	void EventOBViewAddFriendRequest();// 0x1c01fa0
	void EventReturnLocalResResultTitleCofig_NoFetch();// 0x1c01fa0
	void EventReturnLocalResResultTitleCofig();// 0x1c01fa0
	void EventCloseBattleResult_NoFetch();// 0x1c01fa0
	void EventCloseBattleResult();// 0x1c01fa0
	void EventGetItemIsCollected_NoFetch();// 0x1c01fa0
	void EventGetItemIsCollected();// 0x1c01fa0
	void EventShowGameJoyNoRecordsNotice_NoFetch();// 0x1c01fa0
	void EventShowGameJoyNoRecordsNotice();// 0x1c01fa0
	void EventClientFreshToComplaint_NoFetch();// 0x1c01fa0
	void EventClientFreshToComplaint();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	BP_STRUCT_RecordDataTLogUpload BP_STRUCT_RecordDataTLogUpload;//[Offset: 0x304, Size: 0x18]
	BP_STRUCT_BattleResultData BP_STRUCT_BattleResultData;//[Offset: 0x31c, Size: 0x214]
	int Ingame_OBPlayer_BattleData_Mode;//[Offset: 0x530, Size: 0x4]
	bool BP_EnterSpectateMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	BP_STRUCT_OBTeamResult[] BP_ARRAY_OBBattleResult;//[Offset: 0x538, Size: 0xc]
	bool BP_BattleResultShouldShowMVPScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 0x1]
	bool BP_BattleResultIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 0x1]
	FString BP_WatchGame_TargetName;//[Offset: 0x548, Size: 0xc]
	FString Ingame_CurSeasonName;//[Offset: 0x554, Size: 0xc]
	BP_STRUCT_SpawnPlayerRoleInfo BP_STRUCT_SpawnPlayerRoleInfo;//[Offset: 0x560, Size: 0x48]
	FString BP_WatchExitReason;//[Offset: 0x5a8, Size: 0xc]
	BP_STRUCT_MemBTResultData BP_STRUCT_MemBTResultData;//[Offset: 0x5b4, Size: 0x94]
	FString BP_RecordUpvoteTeammateUID;//[Offset: 0x648, Size: 0xc]
	BP_STRUCT_SegmentProtect BP_STRUCT_SegmentProtect;//[Offset: 0x654, Size: 0x10]
	bool BP_ShouldDelayShowBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 0x1]
	int BP_BattleResultSecondWatchPlusTime;//[Offset: 0x668, Size: 0x4]
	bool BP_HasInWatchGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	int BattleDataMatchMode;//[Offset: 0x670, Size: 0x4]
	int BP_BattleResultHeavyWeaponWinnerFreeMoveTime;//[Offset: 0x674, Size: 0x4]
	bool BP_IsShowOBGender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	bool BP_BattleResultNeedShowAd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 0x1]
	BP_STRUCT_BattleResultMyInfo BP_STRUCT_BattleResultMyInfo;//[Offset: 0x67c, Size: 0x2c]
	int BP_MyPVETotalScore;//[Offset: 0x6a8, Size: 0x4]
	int BP_MyPetAddExp;//[Offset: 0x6ac, Size: 0x4]
	BP_STRUCT_OBTeamResult BP_STRUCT_OBTeamResult;//[Offset: 0x6b0, Size: 0xc]
	int BP_MyPVE_DEGREE;//[Offset: 0x6bc, Size: 0x4]
	BP_STRUCT_PVE_SCORE BP_STRUCT_PVE_SCORE;//[Offset: 0x6c0, Size: 0x24]
	BP_STRUCT_GOLD_DETAIL BP_STRUCT_GOLD_DETAIL;//[Offset: 0x6e4, Size: 0x34]
	BP_STRUCT_PVE_INFO BP_STRUCT_PVE_INFO;//[Offset: 0x718, Size: 0x1c]
	FString Ingame_PlayerTitle;//[Offset: 0x734, Size: 0xc]
	int BP_MyCurPVE_EXP;//[Offset: 0x740, Size: 0x4]
	FString Ingame_OBPlayer_BattleData_UID;//[Offset: 0x744, Size: 0xc]
	BP_STRUCT_PVEMemberData[] BP_ARRAY_PVEMembersList;//[Offset: 0x750, Size: 0xc]
	BP_STRUCT_PVETeamData BP_STRUCT_PVETeamData;//[Offset: 0x75c, Size: 0x10]
	bool BP_BattleResultIsIOSCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 0x1]
	FString BP_WatchGame_ReplyTip;//[Offset: 0x770, Size: 0xc]
	BP_STRUCT_OBPersonalResult BP_STRUCT_OBPersonalResult;//[Offset: 0x77c, Size: 0x24]
	int BP_MyKillGNum;//[Offset: 0x7a0, Size: 0x4]
	bool BP_WatchGame_CanReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 0x1]
	float BP_MySurviveTime_f;//[Offset: 0x7a8, Size: 0x4]
	BP_STRUCT_TeammateProfile BP_STRUCT_TeammateProfile;//[Offset: 0x7ac, Size: 0x20]
	int BP_WatchGame_ReplyState;//[Offset: 0x7cc, Size: 0x4]
	bool BP_DirectShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 0x1]
	FString Ingame_PlayerData_MatchMode_PlayerNum;//[Offset: 0x7d4, Size: 0xc]
	int BP_MyKillMonsterNum;//[Offset: 0x7e0, Size: 0x4]
	int BP_RecordUpvoteTeammateIndex;//[Offset: 0x7e4, Size: 0x4]
	BP_STRUCT_BattleResult_Pass_Mission_Info BP_STRUCT_BattleResult_Pass_Mission_Info;//[Offset: 0x7e8, Size: 0x28]
	FString BP_TITLE;//[Offset: 0x810, Size: 0xc]
	int BP_MyKillTyrantNum;//[Offset: 0x81c, Size: 0x4]
	BP_STRUCT_EXP_DETAIL BP_STRUCT_EXP_DETAIL;//[Offset: 0x820, Size: 0x3c]
	bool BP_IsReceiveResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85c, Size: 0x1]
	FString BP_mystate;//[Offset: 0x860, Size: 0xc]
	int BP_LoginChannel;//[Offset: 0x86c, Size: 0x4]
	int BP_BattleResultPVEWinnerFreeMoveTime;//[Offset: 0x870, Size: 0x4]
	BP_STRUCT_PVETeamData[] BP_ARRAY_PVEVictoryRankingList;//[Offset: 0x874, Size: 0xc]
	bool Ingame_IsCurItemCollected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	bool BP_WatchGame_AcceptReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 0x1]
	FString BP_BattleResultRankTopDisplay;//[Offset: 0x884, Size: 0xc]
	BP_STRUCT_AvatarInfo[] BP_ARRAY_AvatarList;//[Offset: 0x890, Size: 0xc]
	int[] BP_ARRAY_BattleResultForbidWinnerTimeSubMode;//[Offset: 0x89c, Size: 0xc]
	int BP_BattleResultWinnerFreeMoveTime;//[Offset: 0x8a8, Size: 0x4]
	FString BP_UpvotePlayerName;//[Offset: 0x8ac, Size: 0xc]
	int BP_ServerTimeSecNow;//[Offset: 0x8b8, Size: 0x4]
	int BATTLETYPE_MODE;//[Offset: 0x8bc, Size: 0x4]
	BP_STRUCT_RecordingUpload BP_STRUCT_RecordingUpload;//[Offset: 0x8c0, Size: 0x3c]
	FString BP_TeamModeName;//[Offset: 0x8fc, Size: 0xc]
	FString BP_BattleResultMurderName;//[Offset: 0x908, Size: 0xc]
	bool testResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 0x1]
	BP_STRUCT_CHAR_EXP_DETAIL BP_STRUCT_CHAR_EXP_DETAIL;//[Offset: 0x918, Size: 0x10]
	int BPRecordAddFriendIndex;//[Offset: 0x928, Size: 0x4]
	BP_STRUCT_SpawnPlayerRoleInfo[] BP_ARRAY_TeammateRoleInfo;//[Offset: 0x92c, Size: 0xc]
	bool BP_IsTodayShareDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 0x1]
	int BP_MyTotalPVE_EXP;//[Offset: 0x93c, Size: 0x4]
	int BP_MyKillLickerNum;//[Offset: 0x940, Size: 0x4]
	BP_STRUCT_BTRating BP_STRUCT_BTRating;//[Offset: 0x944, Size: 0x20]
	BP_STRUCT_BTRatingProtect BP_STRUCT_BTRatingProtect;//[Offset: 0x964, Size: 0x10]
	FString BP_myname;//[Offset: 0x974, Size: 0xc]
	bool BP_IsShareAwardGold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 0x1]
	bool BP_IsReportComplaintShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x981, Size: 0x1]
	BP_STRUCT_PVEMemberData BP_STRUCT_PVEMemberData;//[Offset: 0x984, Size: 0x10]
	bool BP_IsDroiyanMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 0x1]
	FString BP_Terminator;//[Offset: 0x998, Size: 0xc]
	bool BP_BattleResultCanShowStrategyBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	int BP_mykill;//[Offset: 0x9a8, Size: 0x4]
	bool Retry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 0x1]
	BP_STRUCT_AvatarInfo BP_STRUCT_AvatarInfo;//[Offset: 0x9b0, Size: 0xc]
	BP_STRUCT_RADAR BP_STRUCT_RADAR;//[Offset: 0x9bc, Size: 0xa0]
	bool BP_BattleResultIsEnableWinnerTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 0x1]
	FString Ingame_PlayerData_MatchMode;//[Offset: 0xa60, Size: 0xc]
	bool BP_BattleResultIsClickReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 0x1]
	BP_STRUCT_TeammateProfile[] BP_ARRAY_TeammateProfile;//[Offset: 0xa70, Size: 0xc]
	bool InGame_IsMyFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 0x1]
	bool BP_IsDelayShowBattleRankingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7d, Size: 0x1]
	bool BP_IsShowResultPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7e, Size: 0x1]
	int BP_BattleResultCakePlacementDelayTime;//[Offset: 0xa80, Size: 0x4]
	int Ingame_CurItemId;//[Offset: 0xa84, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xa88, Size: 0x4]

--------------------------------
Class: BP_STRUCT_RecordDataTLogUpload
	FString device_type_0_6D784E806481468467186E040D35AE05;//[Offset: 0x0, Size: 0xc]
	FString share_channel_1_775B1D0060F2978A4693005209EE6B7C;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BP_STRUCT_BattleResultData
	FString Reason_0_090FA58547C1A0B16D89ED93556131B8;//[Offset: 0x0, Size: 0xc]
	int RemainingPlayerCount_1_B6DCB4414166FCD5925CDDB9D1FE4005;//[Offset: 0xc, Size: 0x4]
	int TotalPlayerCount_2_3C547194403DC35E7A7441A850D9052A;//[Offset: 0x10, Size: 0x4]
	BP_STRUCT_MemBTResultData[] BP_ARRAY_TeammateList_4_D1D37C9F463CFE5D12DB56A25C3FC3F5;//[Offset: 0x14, Size: 0xc]
	bool IsSolo_5_7761A17048044B6BA00837870DEE79A6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int RemainingTeamCount_6_09A91CE14B0638569CB67BA3C11DA4C1;//[Offset: 0x24, Size: 0x4]
	int TotalTeamCount_7_B45CD71043E4B40CE3733EB58A5FA2C8;//[Offset: 0x28, Size: 0x4]
	int HealTimes_8_92E7141942C26836199CD295FA664C38;//[Offset: 0x2c, Size: 0x4]
	int destroyVehicleNum_10_39F2606240FAD9BB96112FB36D7F3476;//[Offset: 0x30, Size: 0x4]
	int ShootWeaponShotNum_15_00FDC55D46412A4EF2D46788057C4B8E;//[Offset: 0x34, Size: 0x4]
	int ShootWeaponShotAndHitPlayerNum_16_2F13756C4750D3F3F05932BC37A64410;//[Offset: 0x38, Size: 0x4]
	int add_exp_18_33F80B2F441B32D5C0B97FA429A2643D;//[Offset: 0x3c, Size: 0x4]
	int add_gold_19_88091C09400E4592461BFA9B7875B20F;//[Offset: 0x40, Size: 0x4]
	int battle_id_20_991B81644AB2AFE897194A8812ED48F2;//[Offset: 0x44, Size: 0x4]
	int max_game_num_21_89652E3B4A981D752CEE0DB8B057F65E;//[Offset: 0x48, Size: 0x4]
	BP_STRUCT_BTRating BP_STRUCT_BTRating_23_9103901146E6516BDB1721AD842CA08D;//[Offset: 0x4c, Size: 0x20]
	int person_rank_24_4BE9AF544E5666C0D1276F9D4B7381A1;//[Offset: 0x6c, Size: 0x4]
	int team_rank_25_19B113CD47B5E1F5B1D2C4AE0CACF918;//[Offset: 0x70, Size: 0x4]
	bool is_last_survive_27_D64038A548BAF4E29E66ECB94800871A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool is_team_result_28_77AFCE32426209D6DA3EDDB119CBB9C9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	int HeadShotRatio_29_CF108FB640585FC2F35E53BA84BB23EB;//[Offset: 0x78, Size: 0x4]
	bool is_version_match_30_8C55192942DA2E7A91B2189BE6B447B1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	FString final_level_41_373D4259445F1E41E1D787A83FEDB9AE;//[Offset: 0x80, Size: 0xc]
	BP_STRUCT_RADAR BP_STRUCT_RADAR_32_9B0B06274CA0904C8C6ACF9C0B2A1118;//[Offset: 0x8c, Size: 0xa0]
	BP_STRUCT_EXP_DETAIL BP_STRUCT_EXP_DETAIL_33_FF719D304AB7D06CBE973FA998C24768;//[Offset: 0x12c, Size: 0x3c]
	BP_STRUCT_GOLD_DETAIL BP_STRUCT_GOLD_DETAIL_34_7B6FA53C4264732A91CF779C7ADDF600;//[Offset: 0x168, Size: 0x34]
	int battle_owner_35_9B67D91445929AEB73E7AF886DA9A77B;//[Offset: 0x19c, Size: 0x4]
	int famous_id_36_916DFF8C4F04711F0E5F80B5883BA08C;//[Offset: 0x1a0, Size: 0x4]
	int get_gold_today_37_B74B5698443090483A1E9BB30255B216;//[Offset: 0x1a4, Size: 0x4]
	int battle_type_38_4A56D05E4711978AE31924A97AC6D490;//[Offset: 0x1a8, Size: 0x4]
	bool isobserver_39_8CE87EF145765FFC2EA57DA09566A2E7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 0x1]
	int sub_mode_40_30956600233A9EF42F9B8F200891AD95;//[Offset: 0x1b0, Size: 0x4]
	bool segment_protect_42_6E49E7400FC56D9F1D16E4BD04F47144;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	bool is_anchor_ob_45_6CC7AC00023421902654B4FD038AE7B2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 0x1]
	int char_add_exp_46_13658700555ABB3A41B40CFB0EA52F00;//[Offset: 0x1b8, Size: 0x4]
	int add_carteam_coin_47_66672DC067EDE5916779219B0824F63E;//[Offset: 0x1bc, Size: 0x4]
	int tournament_id_48_4B10B0C07C4C3DE11C73F85007F68AF4;//[Offset: 0x1c0, Size: 0x4]
	int kill_score_49_05A57C407803CCDD335A5E4D05C32B65;//[Offset: 0x1c4, Size: 0x4]
	int delay_time_50_43F119C04A44DD7B2A503CDA0D5F97E5;//[Offset: 0x1c8, Size: 0x4]
	bool is_activity_protect_51_7C5954805947912248F676C00EAC34D4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	int league_seq_52_615119404ED12BA906CAD6940B11D141;//[Offset: 0x1d0, Size: 0x4]
	int add_vaccinum_53_44984A004464421E5E26A6160E7096DD;//[Offset: 0x1d4, Size: 0x4]
	int char_id_54_3F2565001A597A5272177D4C00D73F64;//[Offset: 0x1d8, Size: 0x4]
	BP_STRUCT_CHAR_EXP_DETAIL BP_STRUCT_CHAR_EXP_DETAIL_55_1986DEC00524E28F09B977DB021ACCBC;//[Offset: 0x1dc, Size: 0x10]
	int rank_score_56_06309C4019D1832B1E8D666606C19345;//[Offset: 0x1ec, Size: 0x4]
	BP_STRUCT_BTRatingProtect BP_STRUCT_BTRatingProtect_58_055BB6C046BF660537A5C09A090F8B34;//[Offset: 0x1f0, Size: 0x10]
	bool is_pug_result_59_1D6E93C039B5DFB5118C210C0F458B44;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	BP_STRUCT_SegmentProtect BP_STRUCT_SegmentProtect_60_32B1CCC01422B36F312342B0004A3794;//[Offset: 0x204, Size: 0x10]

--------------------------------
Class: BP_STRUCT_MemBTResultData
	FString Name_0_DFDA3DC143AAE955AA8105BAF2ADCD38;//[Offset: 0x0, Size: 0xc]
	FString State_1_48C8DC874029DCADB2E3DBAEF5DD9D82;//[Offset: 0xc, Size: 0xc]
	int Kill_2_DA4DC35B4BB8501F720144829B85837B;//[Offset: 0x18, Size: 0x4]
	int travelDistance_3_269F558844A85BC6B7EE85B4CDA706F4;//[Offset: 0x1c, Size: 0x4]
	int HealAmount_4_B8C060C243D8A53CC2FB25B014DAA2DD;//[Offset: 0x20, Size: 0x4]
	int DamageAmount_5_9798AED546B6451447073F88F94ECA1A;//[Offset: 0x24, Size: 0x4]
	int AssistNum_6_53E92D69472136A2FA572CA42AFF0F2D;//[Offset: 0x28, Size: 0x4]
	int surviveTime_7_4095C08E4C9E9C36F3476BBBBDF7A7C7;//[Offset: 0x2c, Size: 0x4]
	int rescueTimes_8_22FDF96242283590BDDE31A6E4592C0F;//[Offset: 0x30, Size: 0x4]
	int HeadShotNum_9_CB4C63474DFB365351BFDF826A564311;//[Offset: 0x34, Size: 0x4]
	int ShouldShowAddFriendBtn_10_F6E1B5B546973A68905B49A608F211F0;//[Offset: 0x38, Size: 0x4]
	FString UID_11_3CF2C4FB440351FC6E2A819D5C9E3A95;//[Offset: 0x3c, Size: 0xc]
	int TravelScore_12_E14E8FC742D3CA88E429B1BFFCD5D2DF;//[Offset: 0x48, Size: 0x4]
	int BattleScore_13_E763470E496A1859971915AF0ED432FC;//[Offset: 0x4c, Size: 0x4]
	bool IsMVP_14_9FEBBB9A41D633DAEF4F7AA0AA50379E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int SupportScore_16_E6685A2F4D4EED4000131FBCED53A176;//[Offset: 0x54, Size: 0x4]
	int SurviveScore_17_B32B433B4A28BB930A2B69B437791D6D;//[Offset: 0x58, Size: 0x4]
	int driveDistance_18_BE0AE86B448F9DD558B6459D4E5D42FB;//[Offset: 0x5c, Size: 0x4]
	int marchDistance_19_E5AAD6E54F9230A68C4EA993BD9A8940;//[Offset: 0x60, Size: 0x4]
	int SupplyScore_21_C702D2FE49ACF7EFBCFC4DA55B3DBE2B;//[Offset: 0x64, Size: 0x4]
	float FinalScore_f_22_4840B559455CD01E651617BFC406BC82;//[Offset: 0x68, Size: 0x4]
	int[] BP_ARRAY_Title_List_23_7571F56B4430B657A552E3888F79E912;//[Offset: 0x6c, Size: 0xc]
	int rela_sex_24_7ADBC58C425660E499A9B489F948F94E;//[Offset: 0x78, Size: 0x4]
	int TotalDamageAmountToMonsters_28_662C7E004E77824E6163F3B00D2A0E63;//[Offset: 0x7c, Size: 0x4]
	int MonsterHeadShotKilledTimes_29_66857C8011001D7A5C1B269A0F0F3A83;//[Offset: 0x80, Size: 0x4]
	int KillMonsterNum_30_3F5911C06701EA31032BA7FE08763E0D;//[Offset: 0x84, Size: 0x4]
	int pve_total_score_31_3BFB1B005685A0065CA2B51A059234E5;//[Offset: 0x88, Size: 0x4]
	int settl_motion_32_3B15B1001B9EE37E20B633E10964FC7E;//[Offset: 0x8c, Size: 0x4]
	int brand_id_33_428355800656B86C6D6D433A06ADA994;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: BP_STRUCT_BTRating
	int change_rank_rating_30_3022F3C649CCAF70ED2262AEFF63941A;//[Offset: 0x0, Size: 0x4]
	int change_win_rating_31_8E3F5C4C45B48822803F06B5830EAEF0;//[Offset: 0x4, Size: 0x4]
	int kill_rating_32_887C5E6C43E2754281639FB8224EE63A;//[Offset: 0x8, Size: 0x4]
	int change_kill_rating_33_292F57254C9D5A389F6501A63B1743BF;//[Offset: 0xc, Size: 0x4]
	int rank_rating_34_FCA5AD94413785C36C9A0EAF24EA56FB;//[Offset: 0x10, Size: 0x4]
	int win_rating_35_D18CD8AB4F2C342EDA0EE2BC6FB10C24;//[Offset: 0x14, Size: 0x4]
	int new_segment_36_041F830079D5745E136E87FA08B0B294;//[Offset: 0x18, Size: 0x4]
	int old_segment_37_3F32604018024EFB740BD33308AA5794;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BP_STRUCT_RADAR
	FString HurtScore_s_0_C8663AFA442DFA6D8AA13388C1C55A0C;//[Offset: 0x0, Size: 0xc]
	float KillScore_f_1_37CE787D429CD88433879EA2CD7452E9;//[Offset: 0xc, Size: 0x4]
	int KillScore_2_3DE6CB244A13B693BA715FAF9A164A5D;//[Offset: 0x10, Size: 0x4]
	int HurtScore_3_B58A1965434B582FB7F70F8272DC4F24;//[Offset: 0x14, Size: 0x4]
	float SupportScore_f_4_6025AD594F590D4C08FD19AF140195A9;//[Offset: 0x18, Size: 0x4]
	FString SupportScore_s_5_846B96624E6248D1986C81A21A454012;//[Offset: 0x1c, Size: 0xc]
	FString KillScore_s_6_1F09B75C49829431658E5692025DFF05;//[Offset: 0x28, Size: 0xc]
	float HurtScore_f_7_41CA91F84AF8492A8E10EE987189E51B;//[Offset: 0x34, Size: 0x4]
	FString SupplyScore_s_8_80DA3D8A473E51C7D8B6E08FC1DA2DAF;//[Offset: 0x38, Size: 0xc]
	int SupplyScore_9_ACE09E574E567E59B849DDB2389C4A67;//[Offset: 0x44, Size: 0x4]
	FString SurviveScore_s_10_75CA592D4A358A6834C7C396AE33B5C3;//[Offset: 0x48, Size: 0xc]
	int SurviveScore_11_EC99DC8F4225291789D8D8B8051AAE47;//[Offset: 0x54, Size: 0x4]
	int SupportScore_12_B0470C484AF0DDE4396E8297B89F2367;//[Offset: 0x58, Size: 0x4]
	float SupplyScore_f_13_0E7D68A04133FFDFA4E6D8A84E9DF371;//[Offset: 0x5c, Size: 0x4]
	float SurviveScore_f_14_9FF7DA184864ED54B14581A20BE48DB3;//[Offset: 0x60, Size: 0x4]
	int MonsterHeadShotScore_15_53B214C03A9272856EE0DFCA0C1C3AE5;//[Offset: 0x64, Size: 0x4]
	int MonsterDamageScore_16_6994A0802279027C70E75E2A0817D7D5;//[Offset: 0x68, Size: 0x4]
	int MonsterKillScore_17_515033C07651DA917CFD2768013C6355;//[Offset: 0x6c, Size: 0x4]
	float MonsterKillScore_f_18_7CB9C50019E225AE31B15ECB0C635C66;//[Offset: 0x70, Size: 0x4]
	float MonsterHeadShotScore_f_19_3D9AA6006FDE193A55DFE9070C3AE746;//[Offset: 0x74, Size: 0x4]
	FString MonsterDamageScore_s_20_7A6675005287F9984B0BD29007D7D373;//[Offset: 0x78, Size: 0xc]
	float MonsterDamageScore_f_21_7A5971C05287F98B4B0BD28507D7D346;//[Offset: 0x84, Size: 0x4]
	FString MonsterHeadShotScore_s_22_3DA7A9406FDE194755DFE9320C3AE773;//[Offset: 0x88, Size: 0xc]
	FString MonsterKillScore_s_23_7CC6C84019E225BB31B15EF60C635C53;//[Offset: 0x94, Size: 0xc]

--------------------------------
Class: BP_STRUCT_EXP_DETAIL
	int first_exp_0_710BEFA24D6F24CC8CA77E87DC04268A;//[Offset: 0x0, Size: 0x4]
	int exp_card_add_1_A62C7B24487327E899737483DCC2DEEB;//[Offset: 0x4, Size: 0x4]
	int top10_exp_2_843215F54C20FCA4CEDD3E90B8EBC04A;//[Offset: 0x8, Size: 0x4]
	int plat_add_3_5F710ACF45929A735068059A3D5D9027;//[Offset: 0xc, Size: 0x4]
	int sm_add_4_5E0EBDB1491EDB2E3CCB1FAF4BD9700E;//[Offset: 0x10, Size: 0x4]
	int survive_exp_5_53ACFEAF4717408860DEF0B5F93AD25D;//[Offset: 0x14, Size: 0x4]
	int watch_exp_6_748B4CDA4B6E0A2797904C94DAB61FA0;//[Offset: 0x18, Size: 0x4]
	int kill_exp_7_52FCA30A42AA90012F9B3A9E38474B2E;//[Offset: 0x1c, Size: 0x4]
	int qq_super_vip_add_8_F771D3E54538ADBF8CA264BFBBDDF3ED;//[Offset: 0x20, Size: 0x4]
	int team_add_10_F974848D48B8C31A47D2FFA9977F05E3;//[Offset: 0x24, Size: 0x4]
	int clan_add_11_BE7D15594C2984CEE8A432883FD8EF23;//[Offset: 0x28, Size: 0x4]
	int famous_master_add_12_660EA48E449F01F183AFCDA5A085D40F;//[Offset: 0x2c, Size: 0x4]
	int limitact_double_exp_rate_13_68CD970052734F686CF2E8C10289F475;//[Offset: 0x30, Size: 0x4]
	int kill_monster_exp_16_48A14CC00AFEE77F6EFC87560E553CF0;//[Offset: 0x34, Size: 0x4]
	int survived_exp_17_16E726001F8A44545A62696B0D0F7320;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: BP_STRUCT_GOLD_DETAIL
	int watch_gold_0_F37BAECB4BE18121879A369012417798;//[Offset: 0x0, Size: 0x4]
	int sm_add_1_B806DCAE4AD52645B0E7599E3536794A;//[Offset: 0x4, Size: 0x4]
	int kill_gold_2_C74730E5494C322B1295DDBE1E835CDA;//[Offset: 0x8, Size: 0x4]
	int gold_card_add_3_568ADAC24B89208B92F70A9AFF57CCFA;//[Offset: 0xc, Size: 0x4]
	int rank_gold_4_01978BAE4138E4B71D2A91941568F3B3;//[Offset: 0x10, Size: 0x4]
	int team_add_6_718848B1446775E1A8CDF3A13A9151DF;//[Offset: 0x14, Size: 0x4]
	int hurt_gold_7_DED9144E40A08CEBF689F78C75FA3A4D;//[Offset: 0x18, Size: 0x4]
	int famous_master_add_8_5BD3A16344202B9A40049DB04126E67E;//[Offset: 0x1c, Size: 0x4]
	int limitact_double_gold_rate_9_01E69B800A2A9F340760F92E085106A5;//[Offset: 0x20, Size: 0x4]
	int up_limit_10_3059040007BE36A434846FFD0DF43854;//[Offset: 0x24, Size: 0x4]
	int kill_monster_gold_13_1CA2B1407DAD882B1977B88C052C0604;//[Offset: 0x28, Size: 0x4]
	int survived_gold_14_267C6A80192BC04807B2A67B08D779A4;//[Offset: 0x2c, Size: 0x4]
	int survive_gold_15_33EAF1801D206D5A2606AAF708A10FF4;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: BP_STRUCT_CHAR_EXP_DETAIL
	int daily_exp_max_0_7294F5400DB4F36174116AE101202598;//[Offset: 0x0, Size: 0x4]
	int level_1_2C2122401321611B51E413390B555ACC;//[Offset: 0x4, Size: 0x4]
	int daily_exp_2_57528C0043D04C143679FD1A0A461110;//[Offset: 0x8, Size: 0x4]
	int max_level_3_5D7ECB804F01947610FD5AC80C3998AC;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_BTRatingProtect
	FString protect_type_0_43201CC05EA146D70747C07502DED645;//[Offset: 0x0, Size: 0xc]
	int value_1_272FFB800BBFB50261D32A5F098E9275;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_SegmentProtect
	bool is_random_match_0_5D3F34403E96684519EE5B1407F20888;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int old_segment_protect_shield_1_225A1C807A329F3C7AFD33850074C1C4;//[Offset: 0x4, Size: 0x4]
	int segment_protect_shield_2_435FD500605A48542035F7730F2B90D4;//[Offset: 0x8, Size: 0x4]
	int cancel_rating_3_383FDCC033974657766C83B9044E03F7;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_OBTeamResult
	BP_STRUCT_OBPersonalResult[] BP_ARRAY_OBPersonalResult_0_7F9CABC03957F2F90AA3A37D04560A14;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: BP_STRUCT_OBPersonalResult
	int rank_0_043D3D401375153129135EC603B83EFB;//[Offset: 0x0, Size: 0x4]
	int kill_1_26521D404DDB5A6F290FDEDB03BAA69C;//[Offset: 0x4, Size: 0x4]
	int gender_2_24AB2F80486EF83666B9C9CE0962F972;//[Offset: 0x8, Size: 0x4]
	FString name_3_703FDA8026FDF3F6290E6BB503BAFE85;//[Offset: 0xc, Size: 0xc]
	FString uid_5_06C2A2C056D224D92722DDCB0B3B8054;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BP_STRUCT_SpawnPlayerRoleInfo
	FString gid_0_1AEF4F40101466B13EFD891E0E969D74;//[Offset: 0x0, Size: 0xc]
	int headId_2_1F74120029F32700111F882D09E39194;//[Offset: 0xc, Size: 0x4]
	int sex_3_1818D64042C174353EFD86A50E968948;//[Offset: 0x10, Size: 0x4]
	int index_4_2CCCC84000FC6769346A685106A0C458;//[Offset: 0x14, Size: 0x4]
	int weaponId_5_747D500022AF919A1F563F7603704A24;//[Offset: 0x18, Size: 0x4]
	int weaponSkinId_6_4344F54039D9C4355E6C22FC0B5292B4;//[Offset: 0x1c, Size: 0x4]
	FString playerName_7_01F025C00299F3515B029EE806AF3E55;//[Offset: 0x20, Size: 0xc]
	int resultAvatarPose_8_4136C7800D38BEEA5506679B09D77E55;//[Offset: 0x2c, Size: 0x4]
	int PetAvatarID_10_4B7B47804C5695F4794278860A2CC0C4;//[Offset: 0x30, Size: 0x4]
	BP_STRUCT_AvatarInfo[] BP_ARRAY_AvatarList_11_7F0C14C03B11E1AF51BE51270B996DF4;//[Offset: 0x34, Size: 0xc]
	int PetLevel_12_418DCA8034ED34EE01E41DBE047BA6DC;//[Offset: 0x40, Size: 0x4]
	int PetId_13_779E17C041CEA67939873D7106A64664;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: BP_STRUCT_BattleResultMyInfo
	int cur_avatar_box_id_0_CC46D42A4A2774E69F4C21A391C56458;//[Offset: 0x0, Size: 0x4]
	int gender_1_B83D6E0B46CB391CE26CC0AF83C309B3;//[Offset: 0x4, Size: 0x4]
	FString headIconUrl_2_C86329F140F8E08106A8C5B95E4B059D;//[Offset: 0x8, Size: 0xc]
	FString nickName_3_77E6C3CF4E910687B3222CBC5BB7C700;//[Offset: 0x14, Size: 0xc]
	FString roleUid_4_4C05AE434ED60BEA5228A28764659315;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: BP_STRUCT_PVE_SCORE
	int TakeMonsterDamageScore_0_03CEF8C01B9BB64B5CC9EB6309C8C3C5;//[Offset: 0x0, Size: 0x4]
	int MonsterHeadShotScore_1_4661EBC0070398B90D1EE5FB02FB7CC5;//[Offset: 0x4, Size: 0x4]
	int BossMonsterKillScore_2_0AB3108073BE8A701175DDA6039FFB15;//[Offset: 0x8, Size: 0x4]
	int EliteMonsterKillScore_3_16A6E780217D81581FF98F3801E310E5;//[Offset: 0xc, Size: 0x4]
	int KillScore_4_05A8D0C009CCCA2942EE9C240BE57EC5;//[Offset: 0x10, Size: 0x4]
	int SurviveScore_5_72444AC01CE754F114CD05D403999245;//[Offset: 0x14, Size: 0x4]
	int MonsterDamageScore_6_7E7B77804396E36824E405EC0E793095;//[Offset: 0x18, Size: 0x4]
	int MonsterKillScore_7_1F6E0AC01872650578C47FF6087A8DB5;//[Offset: 0x1c, Size: 0x4]
	int NormalMonsterKillScore_8_56D305004F58E2C843F850F005654745;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BP_STRUCT_PVE_INFO
	int TotalDamageAmountToMonsters_0_6056D0001FD2E0A403B0C0040DC024C3;//[Offset: 0x0, Size: 0x4]
	int BeMonsterDownTimes_1_59A0A50067B9A07A644AF34E07C88953;//[Offset: 0x4, Size: 0x4]
	int NormalMonsterKillNum_2_37221E0078DC32F67D4B500009ED5A6D;//[Offset: 0x8, Size: 0x4]
	int BossKillNum_3_67C48F8065F5BF3836C65EB90BF531AD;//[Offset: 0xc, Size: 0x4]
	int TotalDamageAmountFromMonsters_4_270864406431B63F7B0B0DC10F579523;//[Offset: 0x10, Size: 0x4]
	int MonsterHeadShotKilledTimes_5_2938CE802238BC32605A7FC501019563;//[Offset: 0x14, Size: 0x4]
	int EliteMonsterKillNum_6_600E808059D3229A5513749102E78DDD;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BP_STRUCT_PVEMemberData
	float score_f_0_10CC84C011FDD2D9713463FA07F8DC76;//[Offset: 0x0, Size: 0x4]
	FString name_1_7A5754C07CB1BE114ADC44600514A1D5;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: BP_STRUCT_PVETeamData
	BP_STRUCT_PVEMemberData[] BP_ARRAY_PVEMembersList_0_71FA008008F3844E617E8D0D011918F4;//[Offset: 0x0, Size: 0xc]
	float TotalScore_f_1_210C2980305272A06160EBBE0023E146;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_TeammateProfile
	int cur_avatar_box_id_0_E0ED49DC4D1EF8FFD029288092681D0B;//[Offset: 0x0, Size: 0x4]
	int level_1_72F0B6784886C4B715159A9E774DC5B9;//[Offset: 0x4, Size: 0x4]
	FString uid_4_05A1E1F442031408BA24208ACA543691;//[Offset: 0x8, Size: 0xc]
	FString picUrl_3_40A2A0984A821FE9B91E86A98CE28AA5;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: BP_STRUCT_BattleResult_Pass_Mission_Info
	int refresh_time_0_5B0D9BC038F7C78563717500038EF335;//[Offset: 0x0, Size: 0x4]
	int status_1_069DE5807A7EF23A1F9D7BEA0A890E03;//[Offset: 0x4, Size: 0x4]
	FString desc_2_5AB1E44049BA57DD39BB3F1405CB8F13;//[Offset: 0x8, Size: 0xc]
	int weekTaskNum_3_3063984024DF128F3D2B5B21062681ED;//[Offset: 0x14, Size: 0x4]
	int taskId_4_6C77B480446A9204319BE6010A8B1A34;//[Offset: 0x18, Size: 0x4]
	FString weekTitle_5_2CAD68007C38FC0659618A240457A6A5;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: BP_STRUCT_RecordingUpload
	FString openUid_0_54D56FF14523BD47320C999A356D4A89;//[Offset: 0x0, Size: 0xc]
	FString battleUid_1_E085462F49A09FBF73121597985007B0;//[Offset: 0xc, Size: 0xc]
	FString roleUid_2_BCE9DEF348A2756A826DBAB7C9C35515;//[Offset: 0x18, Size: 0xc]
	int HeadShotNum_3_1F6986E44FBDD374A4EFFCB4D9155E13;//[Offset: 0x24, Size: 0x4]
	int killNum_4_58DEC1EE4B1FE46CCB08479A637854DD;//[Offset: 0x28, Size: 0x4]
	FString platform_5_11FC63E6443F3259AD396F958EDEB0F1;//[Offset: 0x2c, Size: 0xc]
	int MaxKillDistane_6_FF85298B476C4D8EF2CDAC87DBCDCD81;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: bp_corps_C.LuaClassObj.LuaContext.Actor.Object
	void EventOnCorpsClose_NoFetch();// 0x1c01fa0
	void EventOnCorpsClose();// 0x1c01fa0
	void EventClickToggle_Push_NoFetch();// 0x1c01fa0
	void EventClickToggle_Push();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	bool BP_Corps_NeedReOpenRoleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool BP_CorpsUI_Has_New_IvitedCorps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	int BP_Corps_Checkbox_ID;//[Offset: 0x308, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x30c, Size: 0x4]

--------------------------------
Class: bp_corps_base_C.LuaClassObj.LuaContext.Actor.Object
	void EventCorpsOnAfterShow_NoFetch();// 0x1c01fa0
	void EventCorpsOnAfterShow();// 0x1c01fa0
	void EventOnAfterHide_NoFetch();// 0x1c01fa0
	void EventOnAfterHide();// 0x1c01fa0
	void EventOnSelectIndex_NoFetch();// 0x1c01fa0
	void EventOnSelectIndex();// 0x1c01fa0
	void EventCorpsClose_NoFetch();// 0x1c01fa0
	void EventCorpsClose();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	bool[] BP_Array_CorpsBaseUI_RedPoint;//[Offset: 0x304, Size: 0xc]
	bool[] BP_Array_CorpsBaseUI_ShowTab;//[Offset: 0x310, Size: 0xc]
	int BP_CorpsBase_SelectedIndex;//[Offset: 0x31c, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x320, Size: 0x4]

--------------------------------
Class: bp_faceteam_C.LuaClassObj.LuaContext.Actor.Object
	void EventCreateFaceTeamCode_NoFetch();// 0x1c01fa0
	void EventCreateFaceTeamCode();// 0x1c01fa0
	void EventOpenAddFaceTeamCodePanel_NoFetch();// 0x1c01fa0
	void EventOpenAddFaceTeamCodePanel();// 0x1c01fa0
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void EventEnsureAddCodeTeam_NoFetch();// 0x1c01fa0
	void EventEnsureAddCodeTeam();// 0x1c01fa0
	void EventFaceteamUIRelease_NoFetch();// 0x1c01fa0
	void EventFaceteamUIRelease();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	FString Bp_FaceTeam_Code;//[Offset: 0x304, Size: 0xc]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: bp_lobby_friend_C.LuaClassObj.LuaContext.Actor.Object
	void EventLobbySendFriendFinish_NoFetch();// 0x1c01fa0
	void EventLobbySendFriendFinish();// 0x1c01fa0
	void EventSelectBatchDeleteInnerFriend_NoFetch();// 0x1c01fa0
	void EventSelectBatchDeleteInnerFriend();// 0x1c01fa0
	void EventLobbyFriendApplyReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendApplyReq();// 0x1c01fa0
	void EventOpenNearByPanel_NoFetch();// 0x1c01fa0
	void EventOpenNearByPanel();// 0x1c01fa0
	void EventHideMasterPanel_NoFetch();// 0x1c01fa0
	void EventHideMasterPanel();// 0x1c01fa0
	void EventLobbyFriendDeleteReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendDeleteReq();// 0x1c01fa0
	void EventLobbyFriendProfileReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendProfileReq();// 0x1c01fa0
	void EventSetXYAPIHideRedPoint_NoFetch();// 0x1c01fa0
	void EventSetXYAPIHideRedPoint();// 0x1c01fa0
	void EventLobbyFriendScrollSearchList_NoFetch();// 0x1c01fa0
	void EventLobbyFriendScrollSearchList();// 0x1c01fa0
	void EventLobbyFriendScrollPlatList_NoFetch();// 0x1c01fa0
	void EventLobbyFriendScrollPlatList();// 0x1c01fa0
	void EventLobbyFriendChat_NoFetch();// 0x1c01fa0
	void EventLobbyFriendChat();// 0x1c01fa0
	void EventXYAPISetUrl_NoFetch();// 0x1c01fa0
	void EventXYAPISetUrl();// 0x1c01fa0
	void EventLeaveBatchDeleteInnerFriend_NoFetch();// 0x1c01fa0
	void EventLeaveBatchDeleteInnerFriend();// 0x1c01fa0
	void EventLobbyFriendIntimacyReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendIntimacyReq();// 0x1c01fa0
	void EventLobbyFriendMasterNotOpen_NoFetch();// 0x1c01fa0
	void EventLobbyFriendMasterNotOpen();// 0x1c01fa0
	void EventGetRecentTeammateList_NoFetch();// 0x1c01fa0
	void EventGetRecentTeammateList();// 0x1c01fa0
	void EventLobbyFriendDeleteBlackReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendDeleteBlackReq();// 0x1c01fa0
	void EventLobbyFriendGetBlackListReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendGetBlackListReq();// 0x1c01fa0
	void EventLobbyFriendRelationClick_NoFetch();// 0x1c01fa0
	void EventLobbyFriendRelationClick();// 0x1c01fa0
	void EventOpenMyCardPanelInFriendPanel_NoFetch();// 0x1c01fa0
	void EventOpenMyCardPanelInFriendPanel();// 0x1c01fa0
	void EventFetchNewNearByPersonInfoList_NoFetch();// 0x1c01fa0
	void EventFetchNewNearByPersonInfoList();// 0x1c01fa0
	void EventNearByOpenLocation_NoFetch();// 0x1c01fa0
	void EventNearByOpenLocation();// 0x1c01fa0
	void EventRecentTeammateScrollApplyList_NoFetch();// 0x1c01fa0
	void EventRecentTeammateScrollApplyList();// 0x1c01fa0
	void EventLobbyPresentCoinReq_NoFetch();// 0x1c01fa0
	void EventLobbyPresentCoinReq();// 0x1c01fa0
	void EventNearByCloseLocation_NoFetch();// 0x1c01fa0
	void EventNearByCloseLocation();// 0x1c01fa0
	void EventOpenFriendRuleDescriptionPanel_NoFetch();// 0x1c01fa0
	void EventOpenFriendRuleDescriptionPanel();// 0x1c01fa0
	void EventOpenIntimacyDescriptionPanel_NoFetch();// 0x1c01fa0
	void EventOpenIntimacyDescriptionPanel();// 0x1c01fa0
	void EventNearByUpdateFilterArray_NoFetch();// 0x1c01fa0
	void EventNearByUpdateFilterArray();// 0x1c01fa0
	void EventLobbyFriendRespondApply_NoFetch();// 0x1c01fa0
	void EventLobbyFriendRespondApply();// 0x1c01fa0
	void EventUnselectBatchDeleteInnerFriend_NoFetch();// 0x1c01fa0
	void EventUnselectBatchDeleteInnerFriend();// 0x1c01fa0
	void EventOpenMasterPanel_NoFetch();// 0x1c01fa0
	void EventOpenMasterPanel();// 0x1c01fa0
	void EventLobbyFriendAddFriendReqList_NoFetch();// 0x1c01fa0
	void EventLobbyFriendAddFriendReqList();// 0x1c01fa0
	void EventLobbyFriendDeleteRelationReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendDeleteRelationReq();// 0x1c01fa0
	void EventLobbyFriendSendItemList_NoFetch();// 0x1c01fa0
	void EventLobbyFriendSendItemList();// 0x1c01fa0
	void EventSetXYAPIShowRedPoint_NoFetch();// 0x1c01fa0
	void EventSetXYAPIShowRedPoint();// 0x1c01fa0
	void EventLobbySendItemReq_NoFetch();// 0x1c01fa0
	void EventLobbySendItemReq();// 0x1c01fa0
	void EventLobbyFriendWatch_NoFetch();// 0x1c01fa0
	void EventLobbyFriendWatch();// 0x1c01fa0
	void EventFriendOnTapChange_NoFetch();// 0x1c01fa0
	void EventFriendOnTapChange();// 0x1c01fa0
	void EventConfirmBatchDeleteInnerFriend_NoFetch();// 0x1c01fa0
	void EventConfirmBatchDeleteInnerFriend();// 0x1c01fa0
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void EventLobbyFriendAddQQFriend_NoFetch();// 0x1c01fa0
	void EventLobbyFriendAddQQFriend();// 0x1c01fa0
	void EventLobbyFriendSearchReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendSearchReq();// 0x1c01fa0
	void EventLobbyFriendScrollApplyList_NoFetch();// 0x1c01fa0
	void EventLobbyFriendScrollApplyList();// 0x1c01fa0
	void EventShowSendAddFriendRequestTips_NoFetch();// 0x1c01fa0
	void EventShowSendAddFriendRequestTips();// 0x1c01fa0
	void EventLobbyFriendScrollInnerList_NoFetch();// 0x1c01fa0
	void EventLobbyFriendScrollInnerList();// 0x1c01fa0
	void EventLobbyShowRecentLikePanel_NoFetch();// 0x1c01fa0
	void EventLobbyShowRecentLikePanel();// 0x1c01fa0
	void EventLobbyFriendLabelSearchReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendLabelSearchReq();// 0x1c01fa0
	void EventCheckWatchingSwitch_NoFetch();// 0x1c01fa0
	void EventCheckWatchingSwitch();// 0x1c01fa0
	void EventLobbyFriendReplyRelationReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendReplyRelationReq();// 0x1c01fa0
	void EventHideLobbyFriendUI_NoFetch();// 0x1c01fa0
	void EventHideLobbyFriendUI();// 0x1c01fa0
	void EventLobbyFriendBlackListScroll_NoFetch();// 0x1c01fa0
	void EventLobbyFriendBlackListScroll();// 0x1c01fa0
	void EventLobbyFriendFetchFriendList_NoFetch();// 0x1c01fa0
	void EventLobbyFriendFetchFriendList();// 0x1c01fa0
	void EventLobbyFriendBuildRelationReq_NoFetch();// 0x1c01fa0
	void EventLobbyFriendBuildRelationReq();// 0x1c01fa0
	void EventEnterBatchDeleteInnerFriend_NoFetch();// 0x1c01fa0
	void EventEnterBatchDeleteInnerFriend();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	FString BP_Friend_Intimacy_Gid;//[Offset: 0x304, Size: 0xc]
	BP_STRUCT_Search_Data[] BP_Array_Search_Data;//[Offset: 0x310, Size: 0xc]
	int BP_Platform_Friend_Scroll_End;//[Offset: 0x31c, Size: 0x4]
	int BP_Friend_Search_PlayDate;//[Offset: 0x320, Size: 0x4]
	FString BP_DELETE_FRIEND_BLACK_NAME;//[Offset: 0x324, Size: 0xc]
	int BP_Friend_Search_PlayTime;//[Offset: 0x330, Size: 0x4]
	int BP_Friend_Search_Segment;//[Offset: 0x334, Size: 0x4]
	int BP_Friend_Search_Tendency;//[Offset: 0x338, Size: 0x4]
	int BP_Friend_Search_Language;//[Offset: 0x33c, Size: 0x4]
	BP_STRUCT_FriendLiteProfile[] BP_ARRAY_Recent_Teammate_Lite_Profile;//[Offset: 0x340, Size: 0xc]
	BP_STRUCT_Intimacy_DetailData BP_STRUCT_Intimacy_DetailData;//[Offset: 0x34c, Size: 0x18]
	int BP_Friend_Search_Gender;//[Offset: 0x364, Size: 0x4]
	FString BP_FriendSystem_Present_Coin_Friend_ID;//[Offset: 0x368, Size: 0xc]
	FString BP_Add_Friend_ID;//[Offset: 0x374, Size: 0xc]
	int BP_Verify_MaxWordCount;//[Offset: 0x380, Size: 0x4]
	BP_STRUCT_FriendLiteProfile[] BP_ARRAY_SendItem_Friend_Lite_Profile;//[Offset: 0x384, Size: 0xc]
	FString BP_RSPAdd_Friend_ID;//[Offset: 0x390, Size: 0xc]
	BP_STRUCT_Lobby_Friend_Search_Data BP_STRUCT_Lobby_Friend_Search_Data;//[Offset: 0x39c, Size: 0x114]
	int BP_Friend_Platform;//[Offset: 0x4b0, Size: 0x4]
	BP_STRUCT_FriendProfile BP_STRUCT_FriendProfile;//[Offset: 0x4b4, Size: 0x1c4]
	FString BP_NearBy_SelfUID;//[Offset: 0x678, Size: 0xc]
	int BP_SendItem_Friend_Scroll_Start;//[Offset: 0x684, Size: 0x4]
	BP_STRUCT_Intimacy_DetailData[] BP_Array_Intimacy_DetailData;//[Offset: 0x688, Size: 0xc]
	int BP_Apply_Friend_Scroll_Start;//[Offset: 0x694, Size: 0x4]
	int BP_Apply_Friend_Scroll_End;//[Offset: 0x698, Size: 0x4]
	FString BP_Delete_Friend_ID;//[Offset: 0x69c, Size: 0xc]
	BP_STRUCT_Lobby_Friend_Search_Data[] BP_ARRAY_Search_Friend_Detail_Profile;//[Offset: 0x6a8, Size: 0xc]
	BP_STRUCT_Lobby_Friend_Common_Data BP_STRUCT_Lobby_Friend_Common_Data;//[Offset: 0x6b4, Size: 0xfc]
	bool BP_NearBy_Location_Open;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]
	int BP_MaxDeleteFriendCount;//[Offset: 0x7b4, Size: 0x4]
	int BP_Friend_UpdateInnerIndex;//[Offset: 0x7b8, Size: 0x4]
	FString BP_FRIEND_PROFILE_ID;//[Offset: 0x7bc, Size: 0xc]
	bool BP_Friend_Intimacy_Apply_Has_New;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	bool BP_Friend_Search_Is_Same_City;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 0x1]
	int BP_BlackList_Friend_Scroll_Start;//[Offset: 0x7cc, Size: 0x4]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Near_By_Profile;//[Offset: 0x7d0, Size: 0xc]
	FString BP_FRIEND_CHAT_ID;//[Offset: 0x7dc, Size: 0xc]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Plat_Friend_Detail_Profile;//[Offset: 0x7e8, Size: 0xc]
	int BP_Recent_Teammate_ScrollStart;//[Offset: 0x7f4, Size: 0x4]
	bool BP_FRIEND_IS_WATCHING_OPEN;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]
	int BP_Inner_Friend_Scroll_End;//[Offset: 0x7fc, Size: 0x4]
	int BP_Recent_Teammate_ScrollEnd;//[Offset: 0x800, Size: 0x4]
	FString BP_XY_API_URL;//[Offset: 0x804, Size: 0xc]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Near_By_Gender_Filter_Profile;//[Offset: 0x810, Size: 0xc]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Recent_Like_Profile;//[Offset: 0x81c, Size: 0xc]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Blacklist_Friend_Profile;//[Offset: 0x828, Size: 0xc]
	int BP_Search_Friend_Scroll_Start;//[Offset: 0x834, Size: 0x4]
	int BP_Friend_Send_Item_Count;//[Offset: 0x838, Size: 0x4]
	FString BP_FRIEND_WATCH_ID;//[Offset: 0x83c, Size: 0xc]
	int BP_BlackList_Friend_Scroll_End;//[Offset: 0x848, Size: 0x4]
	int BP_SelecterDeleteFriendCount;//[Offset: 0x84c, Size: 0x4]
	BP_STRUCT_FriendLiteProfile[] BP_ARRAY_Apply_Friend_Lite_Profile;//[Offset: 0x850, Size: 0xc]
	int BP_Friend_Intimacy_Relation;//[Offset: 0x85c, Size: 0x4]
	int BP_Friend_Intimacy_Op;//[Offset: 0x860, Size: 0x4]
	FString BP_Friend_Intimacy_NickName;//[Offset: 0x864, Size: 0xc]
	FString BP_Friend_Intimacy_Delete_Gid;//[Offset: 0x870, Size: 0xc]
	int BP_Friend_Intimacy_Delete_State;//[Offset: 0x87c, Size: 0x4]
	BP_STRUCT_FriendProfile[] BP_ARRAY_SendItem_Friend_Detail_Profile;//[Offset: 0x880, Size: 0xc]
	BP_STRUCT_Intimacy_Data BP_STRUCT_Intimacy_Data;//[Offset: 0x88c, Size: 0x94]
	FString BP_NearBy_Empty_Tips;//[Offset: 0x920, Size: 0xc]
	int BP_Friend_Intimacy_Build_Relation;//[Offset: 0x92c, Size: 0x4]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Recent_Teammate_Detail_Profile;//[Offset: 0x930, Size: 0xc]
	bool BP_Friend_Intimacy_Relation_Available;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 0x1]
	bool BP_Friend_Is_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93d, Size: 0x1]
	BP_STRUCT_EnumRecentLikeOp BP_STRUCT_EnumRecentLikeOp;//[Offset: 0x940, Size: 0xc]
	BP_STRUCT_FriendLiteProfile[] BP_ARRAY_Search_Friend_Lite_Profile;//[Offset: 0x94c, Size: 0xc]
	int BP_Friend_Add_Index;//[Offset: 0x958, Size: 0x4]
	int BP_Friend_UpdatePlatIndex;//[Offset: 0x95c, Size: 0x4]
	int BP_Search_Friend_Scroll_End;//[Offset: 0x960, Size: 0x4]
	BP_STRUCT_Search_Data BP_STRUCT_Search_Data;//[Offset: 0x964, Size: 0x14]
	bool BP_LobbyFriend_Master_RedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978, Size: 0x1]
	FString BP_FriendSystem_SelectedFriendNickNameAddQQFriend;//[Offset: 0x97c, Size: 0xc]
	FString BP_RSPAdd_OP;//[Offset: 0x988, Size: 0xc]
	int BP_Platform_Friend_Scroll_Start;//[Offset: 0x994, Size: 0x4]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Search_Friend_Profile;//[Offset: 0x998, Size: 0xc]
	bool BP_Friend_Send_Item;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	BP_STRUCT_FriendProfile[] BP_ARRAY_ALL_Friend_SendItem_Profile;//[Offset: 0x9a8, Size: 0xc]
	int BP_Friend_Search_PreServer;//[Offset: 0x9b4, Size: 0x4]
	BP_STRUCT_FriendLiteProfile BP_STRUCT_FriendLiteProfile;//[Offset: 0x9b8, Size: 0xc]
	FString BP_DELETE_FRIEND_BLACK_ID;//[Offset: 0x9c4, Size: 0xc]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Recent_Teammate_Profile;//[Offset: 0x9d0, Size: 0xc]
	FString BP_Friend_Intimacy_Build_Gid;//[Offset: 0x9dc, Size: 0xc]
	int BP_SendItem_Friend_Scroll_End;//[Offset: 0x9e8, Size: 0x4]
	BP_STRUCT_Lobby_Friend_Apply_Data[] BP_ARRAY_Apply_Friend_Detail_Profile;//[Offset: 0x9ec, Size: 0xc]
	FString BP_Friend_Send_Item_Friend_ID;//[Offset: 0x9f8, Size: 0xc]
	int BP_Friend_Send_Item_ResID;//[Offset: 0xa04, Size: 0x4]
	BP_STRUCT_Intimacy_Data[] BP_ARRAY_Intimacy_Data;//[Offset: 0xa08, Size: 0xc]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Apply_Friend_Profile;//[Offset: 0xa14, Size: 0xc]
	int BP_Friend_Send_Item_Expire;//[Offset: 0xa20, Size: 0x4]
	int BP_Friend_Panel_Tab_Index;//[Offset: 0xa24, Size: 0x4]
	FString BP_NearBy_Empty_Tips_Location_Close;//[Offset: 0xa28, Size: 0xc]
	int BP_Add_Friend_Gender;//[Offset: 0xa34, Size: 0x4]
	BP_STRUCT_Lobby_Friend_Apply_Data BP_STRUCT_Lobby_Friend_Apply_Data;//[Offset: 0xa38, Size: 0x118]
	int BP_Friend_Intimacy_Delete_Relation;//[Offset: 0xb50, Size: 0x4]
	FString BP_Friend_Intimacy_Delete_NickName;//[Offset: 0xb54, Size: 0xc]
	BP_STRUCT_FriendLiteProfile[] BP_ARRAY_Blacklist_Friend_Lite_Profile;//[Offset: 0xb60, Size: 0xc]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Inner_Friend_Profile;//[Offset: 0xb6c, Size: 0xc]
	FString BP_Friend_Search_Nation;//[Offset: 0xb78, Size: 0xc]
	bool BP_IsInBatchDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84, Size: 0x1]
	bool BP_Friend_Process_Add_Friend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb85, Size: 0x1]
	FString BP_Add_Friend_Verify;//[Offset: 0xb88, Size: 0xc]
	BP_STRUCT_FriendLiteProfile[] BP_ARRAY_Inner_Friend_Lite_Profile;//[Offset: 0xb94, Size: 0xc]
	FString BP_Friend_SearchName;//[Offset: 0xba0, Size: 0xc]
	int BP_NearBy_Gender_Filter;//[Offset: 0xbac, Size: 0x4]
	FString[] BP_ARRAY_LobbyFriendDeleteFriendIDList;//[Offset: 0xbb0, Size: 0xc]
	BP_STRUCT_FriendLiteProfile[] BP_ARRAY_Plat_Friend_Lite_Profile;//[Offset: 0xbbc, Size: 0xc]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Inner_Friend_Detail_Profile;//[Offset: 0xbc8, Size: 0xc]
	int BP_Inner_Friend_Scroll_Start;//[Offset: 0xbd4, Size: 0x4]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Plat_Friend_Profile;//[Offset: 0xbd8, Size: 0xc]
	BP_STRUCT_FriendProfile[] BP_ARRAY_Blacklist_Friend_Detail_Profile;//[Offset: 0xbe4, Size: 0xc]
	FString BP_Delete_Friend_Name;//[Offset: 0xbf0, Size: 0xc]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xbfc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_Search_Data
	int labelType_0_0DE2518072D83792246900730683F135;//[Offset: 0x0, Size: 0x4]
	FString labelStr_1_15F637403B185025468A681B05683FA2;//[Offset: 0x4, Size: 0xc]
	int labelId_2_07D4B440765698B35306500F015682A4;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BP_STRUCT_FriendLiteProfile
	FString gid_0_73C6B800203BCA3C09F24FC105E4BF84;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: BP_STRUCT_Intimacy_DetailData
	FString relationStr_0_728B1D805232491A4DD094E8060B91F2;//[Offset: 0x0, Size: 0xc]
	int maxCount_1_6FFACB80665E41FC074D59B40A569A14;//[Offset: 0xc, Size: 0x4]
	int curCount_2_762C4C803F156A744352DBD60EF69B84;//[Offset: 0x10, Size: 0x4]
	int relation_3_30F7EF405F2B09012360B0D40AB460AE;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BP_STRUCT_Lobby_Friend_Search_Data
	int playDate_0_19AC19804191333A3A5BFE8D0A5A1695;//[Offset: 0x0, Size: 0x4]
	int tendency_1_71E4C30036F3463A40218C8D049D1A49;//[Offset: 0x4, Size: 0x4]
	int cityId_2_489D860024C1842C359334310FE86A44;//[Offset: 0x8, Size: 0x4]
	int playTime_3_3519FDC07D1AC0733A8F84200A591205;//[Offset: 0xc, Size: 0x4]
	BP_STRUCT_Lobby_Friend_Common_Data BP_STRUCT_Lobby_Friend_Common_Data_4_5E006DC03FDB3EB90A6599180EDC1821;//[Offset: 0x10, Size: 0xfc]
	int expertArea_1_5_6F7E94C06667B5AF1919AE34070F0E01;//[Offset: 0x10c, Size: 0x4]
	int expertArea_2_6_6F7F95006667B5B01919AE35070F0E02;//[Offset: 0x110, Size: 0x4]

--------------------------------
Class: BP_STRUCT_Lobby_Friend_Common_Data
	int history_max_segment_level_0_50141140765719B55405B9CC0AE6FA5C;//[Offset: 0x0, Size: 0x4]
	int sex_1_2EE3C5407B0EB8835FFB601707D652B8;//[Offset: 0x4, Size: 0x4]
	FString remarks_name_2_14E04E8060770812113555B107C903C5;//[Offset: 0x8, Size: 0xc]
	bool isInnerFriendNotPlatFriend_3_6557C3C070B9F55F74AE4D7002A425A4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	int startup_type_4_6A0BBE403E38D9B526D50823095B54B5;//[Offset: 0x18, Size: 0x4]
	int relation_5_4EA568C047534A61748F76060D55CB6E;//[Offset: 0x1c, Size: 0x4]
	int lastOnlineTime_6_57607B4073BFC46B56127987019CEE85;//[Offset: 0x20, Size: 0x4]
	FString militaryRank_7_19F90F007E80169668E866B40D17EB8B;//[Offset: 0x24, Size: 0xc]
	int showInviteIcon_8_008CFF80594F680C4629F9F70ABF5AAE;//[Offset: 0x30, Size: 0x4]
	int online_9_1197B2802E7680F026E6A2B405F45325;//[Offset: 0x34, Size: 0x4]
	int vipLevel_10_588F830068D60DE61D48E822074FA93C;//[Offset: 0x38, Size: 0x4]
	FString lastOnlineTimeStr_11_7761A9803BD26B46244CED2F0EE8B372;//[Offset: 0x3c, Size: 0xc]
	int lastLoginTime_12_33BBE040370FE10717B61584041ECB35;//[Offset: 0x48, Size: 0x4]
	FString nickName_13_3E4AFAC0586E4F4D69DA64EB08E323C5;//[Offset: 0x4c, Size: 0xc]
	int bNewMessage_14_0E8BE5806614F8A81B8041C10584ACA5;//[Offset: 0x58, Size: 0x4]
	int bXiaoYue_15_73B41AC0627EF1CD65C1A1E8098B3475;//[Offset: 0x5c, Size: 0x4]
	int level_16_062A17407A8FF65766B960E40659BB6C;//[Offset: 0x60, Size: 0x4]
	int cur_avatar_box_id_17_7DF4704046BC982B47216BD10B1FDFF4;//[Offset: 0x64, Size: 0x4]
	FString gid_18_31BA3E4045381AD75FF8D26407D64684;//[Offset: 0x68, Size: 0xc]
	FString signature_19_03DBA5C01E8B9C3F7112F0700B9EEE05;//[Offset: 0x74, Size: 0xc]
	int intimacy_20_1FABA8C0604CCB975EBDC36402D353F9;//[Offset: 0x80, Size: 0x4]
	int friendType_21_4DD897C034BF6F29378FB2BB072DEFE5;//[Offset: 0x84, Size: 0x4]
	int segment_info_solo_22_190577C02CE74E192056B766035A118F;//[Offset: 0x88, Size: 0x4]
	int segment_info_duo_23_5FB15A8072796BD60C4B23FD0A3592EF;//[Offset: 0x8c, Size: 0x4]
	int exp_24_3EDDE48059F491765FFB46DB07D64780;//[Offset: 0x90, Size: 0x4]
	FString picUrl_25_5E236D006DE60C3C5064752805D8F1EC;//[Offset: 0x94, Size: 0xc]
	int ladder_26_49446C405C9B5BD901BD1E080590D7A2;//[Offset: 0xa0, Size: 0x4]
	int qq_vip_27_0672354062024DAB099E200605321260;//[Offset: 0xa4, Size: 0x4]
	int lastInviteTime_28_657CBDC05FC6C3E1773151000F7F1055;//[Offset: 0xa8, Size: 0x4]
	int segment_info_squad_29_69BD70006A12FCD432A7720505A3D144;//[Offset: 0xac, Size: 0x4]
	FString platName_30_78C7BDC0512B76272501DBB305F623D5;//[Offset: 0xb0, Size: 0xc]
	int upass_is_buy_38_6FF7B6C008E60F7969707063017AAE39;//[Offset: 0xbc, Size: 0x4]
	int upass_is_show_39_0613930051EECBE621E112BA07A9E277;//[Offset: 0xc0, Size: 0x4]
	int aliasId_45_092AFF007891A9587227C0A30D5851B4;//[Offset: 0xc4, Size: 0x4]
	FString roleNation_46_0F5A18002711A7BC6AA470D4052DED0E;//[Offset: 0xc8, Size: 0xc]
	FString language_47_4E4E02401DB9DE09035D32650133D245;//[Offset: 0xd4, Size: 0xc]
	FString aliasTitle_48_266BF44035E6463B2AD5787305EFE0A5;//[Offset: 0xe0, Size: 0xc]
	FString aliasNation_49_55CC2E004A58890204AC505A0205F80E;//[Offset: 0xec, Size: 0xc]
	int upass_keep_buy_50_4ED389000C02F93A0BAC67060A33A8A9;//[Offset: 0xf8, Size: 0x4]

--------------------------------
Class: BP_STRUCT_FriendProfile
	int sex_0_51770F314E97A4E85B85A283DEE1B898;//[Offset: 0x0, Size: 0x4]
	int vipLevel_1_09F7328D426B1F997B84C98A9B6DBFF3;//[Offset: 0x4, Size: 0x4]
	int lastOnlineTime_3_A23193DB4F4D8DBF8A3585A84BA3A951;//[Offset: 0x8, Size: 0x4]
	int level_4_68C1CAAF40C31038219DC0A179B37593;//[Offset: 0xc, Size: 0x4]
	FString platName_5_BCC4A9D74054617B341A44B7A356AB99;//[Offset: 0x10, Size: 0xc]
	int ladder_6_66B2CDA946B1B5D2D2A8D4AF452E2D01;//[Offset: 0x1c, Size: 0x4]
	FString picUrl_7_13A061C24E845B250CEABDBB0BC30D59;//[Offset: 0x20, Size: 0xc]
	FString gid_8_88BCB9CA4E6BC1B534A5E0B88A448EF1;//[Offset: 0x2c, Size: 0xc]
	FString nickName_10_A0BB006C40A7F58195208E8A8E80CD46;//[Offset: 0x38, Size: 0xc]
	FString applyMsg_12_D1916EAA4D2B47395FA30E94B1D42244;//[Offset: 0x44, Size: 0xc]
	int teamState_19_F8685C3540B419C2089C2FBDBD641631;//[Offset: 0x50, Size: 0x4]
	int teamId_20_EA61FCB14B2074ABAED0D98F91A4BC88;//[Offset: 0x54, Size: 0x4]
	int currentTeamAmount_21_4AA42FFB4FBC270C77DA9EAF117F8F33;//[Offset: 0x58, Size: 0x4]
	int maxTeamAmount_22_21D156A945651C42192BF9971E768909;//[Offset: 0x5c, Size: 0x4]
	int timeSinceGameBegin_23_1C74E3FD466673D11616F3A04DDC837B;//[Offset: 0x60, Size: 0x4]
	int online_24_570786B0478A0089A73F5FB2EBA58EB4;//[Offset: 0x64, Size: 0x4]
	int createTime_30_8E7A2C6747B691DBEB68DBB2F4D0CDBE;//[Offset: 0x68, Size: 0x4]
	int exp_31_57CB093F40CF21C108F544892CD45F3F;//[Offset: 0x6c, Size: 0x4]
	int lastLoginTime_32_D22C16C7467B94B3286167AFDECB0135;//[Offset: 0x70, Size: 0x4]
	int friendType_33_FDD913874EBCB7DA4D0B96833F938B97;//[Offset: 0x74, Size: 0x4]
	FString createTimeStr_36_B0152FAF4D81C926D38B8797DACEC14A;//[Offset: 0x78, Size: 0xc]
	FString lastOnlineTimeStr_37_3971926E4E07461BCACDDA9CD353337C;//[Offset: 0x84, Size: 0xc]
	FString militaryRank_38_846230904D03F77AEE9624BFA9E3B5E6;//[Offset: 0x90, Size: 0xc]
	FString timeSinceGameBeginStr_39_2703957043059A4511890C900BC32086;//[Offset: 0x9c, Size: 0xc]
	int segment_info_duo_40_2829E5D045D309EDC12C9290A2643CD1;//[Offset: 0xa8, Size: 0x4]
	int segment_info_solo_41_AE449EC14BB42B896029D2B9286CE9F4;//[Offset: 0xac, Size: 0x4]
	int segment_info_squad_43_F6C69CCF45F0BB0CDFA396830A2296CA;//[Offset: 0xb0, Size: 0x4]
	int endtime_44_AC2DD02D45CFE857BC9B018BE005E5C0;//[Offset: 0xb4, Size: 0x4]
	int rank_45_B5F45CB040C38B4E65FB45BB2CD2130B;//[Offset: 0xb8, Size: 0x4]
	FString endtimeStr_46_09802CB9477DF0F0699EE092ADAFEF52;//[Offset: 0xbc, Size: 0xc]
	int mode_47_C0B7C2B741C8376940C44F9CC7D7FBB5;//[Offset: 0xc8, Size: 0x4]
	int kill_48_EFF118CD46899F9F8F7F9787F4B3D893;//[Offset: 0xcc, Size: 0x4]
	int total_49_061D823946AA07152B4B4AA8CD440EDD;//[Offset: 0xd0, Size: 0x4]
	FString score_51_56A729ED472243B95F99D29152556FDF;//[Offset: 0xd4, Size: 0xc]
	FString modeStr_52_32FAC5354F59CD9CFFE0B3AE7CFBFE2B;//[Offset: 0xe0, Size: 0xc]
	int lastInviteTime_53_893B9B504BAC0132E9BAB9882F4064E7;//[Offset: 0xec, Size: 0x4]
	int intimacy_54_044A5DD14AE5F829231C6D935DD35B40;//[Offset: 0xf0, Size: 0x4]
	int showInviteIcon_55_AF5C9EA949A9AE721DC1249611AA7801;//[Offset: 0xf4, Size: 0x4]
	int lastPresentCoinTime_56_81D481014B43D0F9D08427A6745A1523;//[Offset: 0xf8, Size: 0x4]
	int bPresentedCoin_58_173EEA844C986BF64C50CBB1303BF93A;//[Offset: 0xfc, Size: 0x4]
	int cur_avatar_box_id_59_4FA31B904F4BEDE7C86D58ADE0A20BA8;//[Offset: 0x100, Size: 0x4]
	int startup_type_60_CBF2A75F476270CA61453DA92D2449A4;//[Offset: 0x104, Size: 0x4]
	int qq_vip_61_3E6123544BA9E53B9D4454B8DF1300FA;//[Offset: 0x108, Size: 0x4]
	FString remarks_name_62_F2C0036A4B8ECABC5DF2D58B887EDE1D;//[Offset: 0x10c, Size: 0xc]
	int bNewMessage_63_EB2FCD5D4ED24C49C41DA290A42B091C;//[Offset: 0x118, Size: 0x4]
	int bXiaoYue_64_D9EB0FD048953AEBC20056AB0500CA04;//[Offset: 0x11c, Size: 0x4]
	bool isPlatFriend_65_02B938C051A9222B336584890B9AEA64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	int expertArea_2_66_04551000110141DE0F08D60A0A0DBB12;//[Offset: 0x124, Size: 0x4]
	int expertArea_1_67_04540FC0110141DD0F08D6150A0DBB11;//[Offset: 0x128, Size: 0x4]
	bool isInnerFriendNotPlatFriend_68_55C0FA000153957C4D5C761D0D9BE374;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	int cityId_69_69840100347EAE364900D8C002EADD54;//[Offset: 0x130, Size: 0x4]
	int playTime_70_41A578C04F612A657110D3C208EE0D05;//[Offset: 0x134, Size: 0x4]
	bool isFriend_71_4B6AB48066DA512A21CE41DC0DB85904;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	int distance_72_38569A407164180F4A844BDC0ACAE665;//[Offset: 0x13c, Size: 0x4]
	int tendency_73_7E703E003F9FDDA02180B4CA022A2749;//[Offset: 0x140, Size: 0x4]
	FString signature_74_1C7DFC006DD404FE2FA177C40C4281D5;//[Offset: 0x144, Size: 0xc]
	int playDate_75_26379480654FEC1671E60C9808ED0B95;//[Offset: 0x150, Size: 0x4]
	int game_mode_76_1314EF00239B2AE01B6FF37805C02C45;//[Offset: 0x154, Size: 0x4]
	FString gameModeStr_77_65EB7D80611DC71070757D490A734F12;//[Offset: 0x158, Size: 0xc]
	int history_max_segment_level_78_1FC4678039E29A9C1EA3C03708F1C63C;//[Offset: 0x164, Size: 0x4]
	int relation_79_591EDF0035C6A04A7754414302480D9E;//[Offset: 0x168, Size: 0x4]
	int upass_is_show_87_46F969400B6548F53B1B76E208583E17;//[Offset: 0x16c, Size: 0x4]
	int upass_is_buy_88_6C74AD0015D22EF45958A8E20785B3F9;//[Offset: 0x170, Size: 0x4]
	int recentLikeUID_100_578A818020DA900A095351940EFE6614;//[Offset: 0x174, Size: 0x4]
	int recentLikeTs_101_29BBDAC06308F221381A15670CEFE643;//[Offset: 0x178, Size: 0x4]
	int recentLikeOp_102_3EA078C019E97DC3381A14F80CEFE690;//[Offset: 0x17c, Size: 0x4]
	FString roleNation_103_6FB54E406637DBD302C87AB10AEB501E;//[Offset: 0x180, Size: 0xc]
	FString language_104_58C778805B8426CC2E5F2F680E2E14B5;//[Offset: 0x18c, Size: 0xc]
	int enableWatch_105_3068DF00134D8B28033AC410089D6B08;//[Offset: 0x198, Size: 0x4]
	FString aliasTitle_106_06C72A8035D542BC236DDE57082943B5;//[Offset: 0x19c, Size: 0xc]
	int upass_keep_buy_107_6DB23F4078AACED1093C9ADC07306E59;//[Offset: 0x1a8, Size: 0x4]
	FString aliasNation_108_6F7044403643E181163437190E6C27DE;//[Offset: 0x1ac, Size: 0xc]
	int aliasId_109_070B954014D17B371B10BAC704898DD4;//[Offset: 0x1b8, Size: 0x4]
	int gameSubMode_110_1A2139C07FE5268D4558F0E100A0E005;//[Offset: 0x1bc, Size: 0x4]
	int watchUid_111_08B0B5C06F6DE54971E3851702C97864;//[Offset: 0x1c0, Size: 0x4]

--------------------------------
Class: BP_STRUCT_Intimacy_Data
	int relationSortPriority_0_33399D000F4979DE09B12A670F1E4B79;//[Offset: 0x0, Size: 0x4]
	int level_1_43E9E90059A6802C5B2BB827090549DC;//[Offset: 0x4, Size: 0x4]
	int state_2_5AC52B405798D7B152478D0508ED2DC5;//[Offset: 0x8, Size: 0x4]
	FString gid_3_6563D0007AAA7DA4240A1A9F0568FA74;//[Offset: 0xc, Size: 0xc]
	int param_4_4C43E74058C220F557C1A1AE08E10D1D;//[Offset: 0x18, Size: 0x4]
	int stateSortPriority_5_12BBADC00F1EDCB5752D4F5A0A8D4409;//[Offset: 0x1c, Size: 0x4]
	int cur_avatar_box_id_6_1CF9C2005312FC1A086089F105C34EA4;//[Offset: 0x20, Size: 0x4]
	int segment_info_squad_7_17B5E1C00F6185473E08554B00ECFAD4;//[Offset: 0x24, Size: 0x4]
	int segment_info_solo_8_380AC9800698841C569421370A0F033F;//[Offset: 0x28, Size: 0x4]
	int segment_info_duo_9_20338C4040F757195F8A9EFA01A0DDCF;//[Offset: 0x2c, Size: 0x4]
	FString picUrl_10_75965EC071FCD1EF4617BB8F0E17DA0C;//[Offset: 0x30, Size: 0xc]
	int vipLevel_11_34B8B4C06672858160A5850C0824427C;//[Offset: 0x3c, Size: 0x4]
	int intimacy_12_7BD4DA805833AD7C0191CA7C0DFAB839;//[Offset: 0x40, Size: 0x4]
	FString signature_13_5B07F7802B435CC22921AB1B092052F5;//[Offset: 0x44, Size: 0xc]
	FString nickName_14_1A742C8033716AB449A57A2107CAD805;//[Offset: 0x50, Size: 0xc]
	int sex_15_628D570021394568240BEED10568EE48;//[Offset: 0x5c, Size: 0x4]
	int upass_is_buy_22_7ACD68803D3D6CD8500EB3EC0CB785D9;//[Offset: 0x60, Size: 0x4]
	int upass_is_show_23_7DAC64C063FA2F7965CAC4900B7B60A7;//[Offset: 0x64, Size: 0x4]
	int aliasId_28_12C110C07BC6E193014EC33001AAEF04;//[Offset: 0x68, Size: 0x4]
	FString aliasNation_29_3C4EBFC017152C1D49A2845400B906AE;//[Offset: 0x6c, Size: 0xc]
	int upass_keep_buy_30_439F7AC07A34908D7A97BBF2051A4569;//[Offset: 0x78, Size: 0x4]
	FString roleNation_31_51F989C0406B3ACF5A134F8A00C7A2DE;//[Offset: 0x7c, Size: 0xc]
	FString aliasTitle_32_690B66001008A1B8071C36F90E061185;//[Offset: 0x88, Size: 0xc]

--------------------------------
Class: BP_STRUCT_EnumRecentLikeOp
	int initiative_0_74C299407C549E5923FB97040FECC045;//[Offset: 0x0, Size: 0x4]
	int together_1_1C8604406E9633A515EC08230E59BC72;//[Offset: 0x4, Size: 0x4]
	int passive_2_46C84A802827BC2C0D9EB50E0632D1E5;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BP_STRUCT_Lobby_Friend_Apply_Data
	FString createTimeStr_0_6392678076A6ADA84F5AF9D201CE43D2;//[Offset: 0x0, Size: 0xc]
	BP_STRUCT_Lobby_Friend_Common_Data BP_STRUCT_Lobby_Friend_Common_Data_1_11E859C04C7F2C0F47CC49FD015D4BF1;//[Offset: 0xc, Size: 0xfc]
	FString applyMsg_2_6C518BC0673556914AF31A770B15F807;//[Offset: 0x108, Size: 0xc]
	int createTime_3_3A0E39405419E223091652D30E961CE5;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: bp_rank_C.LuaClassObj.LuaContext.Actor.Object
	void EventTestRank_NoFetch();// 0x1c01fa0
	void EventTestRank();// 0x1c01fa0
	void EventRankShowHelp_NoFetch();// 0x1c01fa0
	void EventRankShowHelp();// 0x1c01fa0
	void EventRank_Push_NoFetch();// 0x1c01fa0
	void EventRank_Push();// 0x1c01fa0
	void EventRankScrollPos_NoFetch();// 0x1c01fa0
	void EventRankScrollPos();// 0x1c01fa0
	void EventRankGetZoneList_NoFetch();// 0x1c01fa0
	void EventRankGetZoneList();// 0x1c01fa0
	void EventRankClose_NoFetch();// 0x1c01fa0
	void EventRankClose();// 0x1c01fa0
	void EventQueryRank_NoFetch();// 0x1c01fa0
	void EventQueryRank();// 0x1c01fa0
	void EventRankFetchInfo_NoFetch();// 0x1c01fa0
	void EventRankFetchInfo();// 0x1c01fa0
	void EventIsUPassRankOpened_NoFetch();// 0x1c01fa0
	void EventIsUPassRankOpened();// 0x1c01fa0
	void EventRankShowRole_NoFetch();// 0x1c01fa0
	void EventRankShowRole();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	FString BP_RankSelectType;//[Offset: 0x304, Size: 0xc]
	BP_STRUCT_RankInfoMe BP_STRUCT_RankInfoMe;//[Offset: 0x310, Size: 0xb4]
	FString BP_RankSelectMemberType;//[Offset: 0x3c4, Size: 0xc]
	FString BP_RankShowRoleUid;//[Offset: 0x3d0, Size: 0xc]
	int[] BP_ARRAY_RankZoneList;//[Offset: 0x3dc, Size: 0xc]
	BP_STRUCT_Rank_Alias_Info BP_STRUCT_Rank_Alias_Info;//[Offset: 0x3e8, Size: 0x38]
	FString BP_RankShowHelpContent;//[Offset: 0x420, Size: 0xc]
	int BP_Back_ShowRankZoneId;//[Offset: 0x42c, Size: 0x4]
	FString BP_RankPeriodType;//[Offset: 0x430, Size: 0xc]
	int BP_RankUpdateIdx;//[Offset: 0x43c, Size: 0x4]
	FString BP_RankInfoSelfBelow1wDisplay;//[Offset: 0x440, Size: 0xc]
	BP_STRUCT_RankInfo BP_STRUCT_RankInfo;//[Offset: 0x44c, Size: 0xb4]
	bool BP_Rank_IsUPassOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	bool BP_Is_RankList_Close;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1]
	BP_STRUCT_RankInfo[] BP_ARRAY_RankList;//[Offset: 0x504, Size: 0xc]
	FString BP_RankRegionType;//[Offset: 0x510, Size: 0xc]
	int BP_RankScrollPos;//[Offset: 0x51c, Size: 0x4]
	BP_STRUCT_RankUpdateItemInfo BP_STRUCT_RankUpdateItemInfo;//[Offset: 0x520, Size: 0xb4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5d4, Size: 0x4]

--------------------------------
Class: BP_STRUCT_RankInfoMe
	BP_STRUCT_RankInfo BP_STRUCT_RankInfo_0_F963206A4F4BE4A99EA008BF831E4BBC;//[Offset: 0x0, Size: 0xb4]

--------------------------------
Class: BP_STRUCT_RankInfo
	FString uid_0_951191854B1D7BD586C9E9B45AAFBB4A;//[Offset: 0x0, Size: 0xc]
	int no_1_4182BB0342C89B0CBA9E76BCB162879E;//[Offset: 0xc, Size: 0x4]
	FString city_2_DC3408564E16BC35A7D486A3BA901971;//[Offset: 0x10, Size: 0xc]
	FString name_3_209DAE1B40FE2734E586148DBA1E05CE;//[Offset: 0x1c, Size: 0xc]
	FString content2_4_66789CC04460A8E81B602D9B88B5B0CA;//[Offset: 0x28, Size: 0xc]
	int score_5_FE06130944A19326737A559A99B839E9;//[Offset: 0x34, Size: 0x4]
	FString content1_6_31E885C04FA17436582AFA8F43A0FF1B;//[Offset: 0x38, Size: 0xc]
	FString content3_7_A9E0BD10434A6F597EF6C59F5C8F50E0;//[Offset: 0x44, Size: 0xc]
	int gender_8_171CD1454F7F502EE78307B2451E6131;//[Offset: 0x50, Size: 0x4]
	int level_9_D030C1A14ED97F063BFC45ABD7E298E1;//[Offset: 0x54, Size: 0x4]
	FString url_10_5EA6E3534B86E9977C811B961923CAB4;//[Offset: 0x58, Size: 0xc]
	int segment_12_746755464BE574F47F70AABAADC82602;//[Offset: 0x64, Size: 0x4]
	int qq_vip_13_0AA66F654565D1764BAD9AA9279D2240;//[Offset: 0x68, Size: 0x4]
	int startup_type_14_D2DB30A049EBDECCC4E0049FC408C8EA;//[Offset: 0x6c, Size: 0x4]
	int cur_avatar_box_id_15_84D640C64D178EE1D04261885C48CB1C;//[Offset: 0x70, Size: 0x4]
	FString nation_16_17A882F442ABD97FB6159C905A00AA23;//[Offset: 0x74, Size: 0xc]
	int aliasId_22_35F2B1007A220F443169D8DD07076134;//[Offset: 0x80, Size: 0x4]
	FString aliasNation_23_1AAFE0001D3D79AE161DAB07028FA93E;//[Offset: 0x84, Size: 0xc]
	FString aliasTitle_24_1288A64027B7C24F42662B8E06E77B55;//[Offset: 0x90, Size: 0xc]
	bool uishow_25_5D46AB0073AB8B821C7FD2400DB21107;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	int is_buy_26_220566006CF559422218D2260D1BD7A9;//[Offset: 0xa0, Size: 0x4]
	int keep_buy_27_63E9F84041009A3928DDEC0C094C34C9;//[Offset: 0xa4, Size: 0x4]
	FString strScore_28_5342B88065A8E84A66B4D8C409F80B35;//[Offset: 0xa8, Size: 0xc]

--------------------------------
Class: BP_STRUCT_Rank_Alias_Info
	int aliasId_0_539A9B00799ED74E1D0B142E0A68F714;//[Offset: 0x0, Size: 0x4]
	FString roleNation_1_6C9FB40051D5FFF2144E6E750F47DE0E;//[Offset: 0x4, Size: 0xc]
	FString title_2_4F15D5C002CFF8272B65E96D00F54E55;//[Offset: 0x10, Size: 0xc]
	FString pathUrl_3_06BD85406426417F4854823908CDAC7C;//[Offset: 0x1c, Size: 0xc]
	int quality_4_487C0F804C3B61FE6C0AFEEB06F16049;//[Offset: 0x28, Size: 0x4]
	FString uid_5_47BC5DC052725E2161CA4F0C0770F5B4;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: BP_STRUCT_RankUpdateItemInfo
	BP_STRUCT_RankInfo BP_STRUCT_RankInfo_0_F93E07134DCE78519CDAF28B00D4B7F4;//[Offset: 0x0, Size: 0xb4]

--------------------------------
Class: bp_room_C.LuaClassObj.LuaContext.Actor.Object
	void EventCompareClickRefreshTime_NoFetch();// 0x1c01fa0
	void EventCompareClickRefreshTime();// 0x1c01fa0
	void EventGetMoreRoom_NoFetch();// 0x1c01fa0
	void EventGetMoreRoom();// 0x1c01fa0
	void EventRoomRelease_NoFetch();// 0x1c01fa0
	void EventRoomRelease();// 0x1c01fa0
	void EventRequestRoomList_NoFetch();// 0x1c01fa0
	void EventRequestRoomList();// 0x1c01fa0
	void EventRequestJoinRoom_NoFetch();// 0x1c01fa0
	void EventRequestJoinRoom();// 0x1c01fa0
	void EventAfterLeaveRoomList_NoFetch();// 0x1c01fa0
	void EventAfterLeaveRoomList();// 0x1c01fa0
	void EventEnterGamingRoomNotice_NoFetch();// 0x1c01fa0
	void EventEnterGamingRoomNotice();// 0x1c01fa0
	void EventVersionNotMatched_NoFetch();// 0x1c01fa0
	void EventVersionNotMatched();// 0x1c01fa0
	void EventCloseRoomChatUI_NoFetch();// 0x1c01fa0
	void EventCloseRoomChatUI();// 0x1c01fa0
	void EventRefreshRoomCardInfo_NoFetch();// 0x1c01fa0
	void EventRefreshRoomCardInfo();// 0x1c01fa0
	void EventSelectZoneInRoomList_Push_NoFetch();// 0x1c01fa0
	void EventSelectZoneInRoomList_Push();// 0x1c01fa0
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void EventRoomListChangeMap_NoFetch();// 0x1c01fa0
	void EventRoomListChangeMap();// 0x1c01fa0
	void EventCheckInputRoomID_NoFetch();// 0x1c01fa0
	void EventCheckInputRoomID();// 0x1c01fa0
	void EventShowRoomCreateUI_NoFetch();// 0x1c01fa0
	void EventShowRoomCreateUI();// 0x1c01fa0
	void EventGetZoneListInRoom_NoFetch();// 0x1c01fa0
	void EventGetZoneListInRoom();// 0x1c01fa0
	void EventNotAnchor_NoFetch();// 0x1c01fa0
	void EventNotAnchor();// 0x1c01fa0
	void EventEnterRoom_NoFetch();// 0x1c01fa0
	void EventEnterRoom();// 0x1c01fa0
	void EventAfterEnterRoomList_NoFetch();// 0x1c01fa0
	void EventAfterEnterRoomList();// 0x1c01fa0
	void EventOpenRoomChatUI_NoFetch();// 0x1c01fa0
	void EventOpenRoomChatUI();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	BP_STRUCT_RoomInfo[] BP_ARRAY_RoomList;//[Offset: 0x304, Size: 0xc]
	bool BP_CreateRoom_Hot_Point_IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	FString BP_Room_CardInfo_Normal;//[Offset: 0x314, Size: 0xc]
	bool BP_Room_CardInfo_NormalIsTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	FString BP_Room_CardInfo_Match;//[Offset: 0x324, Size: 0xc]
	bool BP_Room_IsCompetitionRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	int BP_Room_RefreshLeftTime;//[Offset: 0x334, Size: 0x4]
	bool BP_Room_IsCurListNormalRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	int BP_Room_Map_Select;//[Offset: 0x33c, Size: 0x4]
	int BP_Zone_Id_In_Room;//[Offset: 0x340, Size: 0x4]
	FString BP_EnterRoom_ID;//[Offset: 0x344, Size: 0xc]
	int LastRequestJoinRoomTime;//[Offset: 0x350, Size: 0x4]
	BP_STRUCT_GroupType[] BP_ARRAY_GroupTypeList;//[Offset: 0x354, Size: 0xc]
	BP_STRUCT_RoomInfo BP_STRUCT_RoomInfo;//[Offset: 0x360, Size: 0x74]
	BP_STRUCT_GroupType BP_STRUCT_GroupType;//[Offset: 0x3d4, Size: 0x10]
	int BP_SelectRoomID;//[Offset: 0x3e4, Size: 0x4]
	bool BP_CreateRoom_Adv_Hot_Point_IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	FString BP_Room_SelfName;//[Offset: 0x3ec, Size: 0xc]
	int BP_EnterRoom_Type;//[Offset: 0x3f8, Size: 0x4]
	FString BP_Room_CardInfo_Highlevel;//[Offset: 0x3fc, Size: 0xc]
	FString BP_Room_ClientVersion;//[Offset: 0x408, Size: 0xc]
	int[] BP_ARRAY_ZoneListInRoom;//[Offset: 0x414, Size: 0xc]
	FString BP_Room_CardInfo;//[Offset: 0x420, Size: 0xc]
	bool BP_Room_IsHighLevelRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	bool BP_Room_IsAnchor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 0x1]
	FString BP_EnterRoom_Passwd;//[Offset: 0x430, Size: 0xc]
	bool BP_Room_CardInfo_HighlevelIsTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x440, Size: 0x4]

--------------------------------
Class: BP_STRUCT_RoomInfo
	int player_count_7_3C511CFC47DBC696B9C74790AFA73D83;//[Offset: 0x0, Size: 0x4]
	FString owner_id_1_EC8BB0664920BD7961262791BFC2F3FB;//[Offset: 0x4, Size: 0xc]
	FString state_2_98C921C84A16218020746FAAABDB13E4;//[Offset: 0x10, Size: 0xc]
	FString name_3_4D2491D0400DCB399113168B562B27C9;//[Offset: 0x1c, Size: 0xc]
	int id_9_E0E04E1B4356DD24D82151AC8F3E8CD3;//[Offset: 0x28, Size: 0x4]
	FString owner_name_5_F933685E47BD8C88B9063EB06ABD7B60;//[Offset: 0x2c, Size: 0xc]
	int map_id_8_C36827ED47ACE4F3692212BA2948A845;//[Offset: 0x38, Size: 0x4]
	int group_type_12_2579951649F014C9A6DE85906F80F49C;//[Offset: 0x3c, Size: 0x4]
	int create_time_13_49E1E18F4D6C152561542D99BDD37F51;//[Offset: 0x40, Size: 0x4]
	int game_start_14_E7C4BD4B4457B3F0720AFA98BBD026BC;//[Offset: 0x44, Size: 0x4]
	bool lock_state_15_397B694144C77EE7DF88B4B628E86BEB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString version_16_DF55A7EE4F7F54F7CB22968980FC1EE3;//[Offset: 0x4c, Size: 0xc]
	int max_room_ob_20_16FCAC002BCC6942460B460B0DFA94C2;//[Offset: 0x58, Size: 0x4]
	int max_room_player_21_1DC83B0073BB18307744DF48010F7552;//[Offset: 0x5c, Size: 0x4]
	int ob_count_22_5C33DDC0377DAA4963EFB49306D721F4;//[Offset: 0x60, Size: 0x4]
	FString room_type_24_266B9F0075F7E04210019EBD0EE218E5;//[Offset: 0x64, Size: 0xc]
	bool is_anchor_ob_25_7DD701001F30DB8C55869EA6022DBD52;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: BP_STRUCT_GroupType
	int Type_0_CBFD22254E63190A4C378883A34F578A;//[Offset: 0x0, Size: 0x4]
	FString GroupName_1_BE8E18014255CDFD210E869660F8D850;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: bp_unknow_pass_award_C.LuaClassObj.LuaContext.Actor.Object
	void EventEliteGetClick_NoFetch();// 0x1c01fa0
	void EventEliteGetClick();// 0x1c01fa0
	void EventUnknowPassAward_BuyAnotherSplitGroupItem_NoFetch();// 0x1c01fa0
	void EventUnknowPassAward_BuyAnotherSplitGroupItem();// 0x1c01fa0
	void EventUnknowPassAward_SplitGroupPreviewItemClicked_NoFetch();// 0x1c01fa0
	void EventUnknowPassAward_SplitGroupPreviewItemClicked();// 0x1c01fa0
	void EventUnknowPassAwardBuyToLevel_NoFetch();// 0x1c01fa0
	void EventUnknowPassAwardBuyToLevel();// 0x1c01fa0
	void EventOrdinaryItemClick_NoFetch();// 0x1c01fa0
	void EventOrdinaryItemClick();// 0x1c01fa0
	void EventBuyScoreClick_NoFetch();// 0x1c01fa0
	void EventBuyScoreClick();// 0x1c01fa0
	void EventShowUnknowpassDetailClick_NoFetch();// 0x1c01fa0
	void EventShowUnknowpassDetailClick();// 0x1c01fa0
	void EventOnClickSendGift_NoFetch();// 0x1c01fa0
	void EventOnClickSendGift();// 0x1c01fa0
	void EventUnknowPassAwardShowTips_NoFetch();// 0x1c01fa0
	void EventUnknowPassAwardShowTips();// 0x1c01fa0
	void EventUnknowPassAward_SplitGroupItemClicked_NoFetch();// 0x1c01fa0
	void EventUnknowPassAward_SplitGroupItemClicked();// 0x1c01fa0
	void EventOrdinaryPreviewItemClick_NoFetch();// 0x1c01fa0
	void EventOrdinaryPreviewItemClick();// 0x1c01fa0
	void EventUnknowPassAwardBuyClick_NoFetch();// 0x1c01fa0
	void EventUnknowPassAwardBuyClick();// 0x1c01fa0
	void EventUnknowpassAwardReuseListBack_NoFetch();// 0x1c01fa0
	void EventUnknowpassAwardReuseListBack();// 0x1c01fa0
	void EventUnknowPassAwardGetAllClick_NoFetch();// 0x1c01fa0
	void EventUnknowPassAwardGetAllClick();// 0x1c01fa0
	void EventEliteItemClick_NoFetch();// 0x1c01fa0
	void EventEliteItemClick();// 0x1c01fa0
	void EventOrdinaryGetClick_NoFetch();// 0x1c01fa0
	void EventOrdinaryGetClick();// 0x1c01fa0
	void EventUnknowPassAwardUpdateUpgradeUI_NoFetch();// 0x1c01fa0
	void EventUnknowPassAwardUpdateUpgradeUI();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	int BP_UnknowPass_Prime_Status;//[Offset: 0x304, Size: 0x4]
	int BP_UnknowPass_CurrentSelectItemID;//[Offset: 0x308, Size: 0x4]
	int BP_ARRAY_UnknowPass_Award_Preview_Unlock_Level;//[Offset: 0x30c, Size: 0x4]
	int BP_UnknowPass_Score;//[Offset: 0x310, Size: 0x4]
	int BP_UnknowPass_CurrentEliteGetGroupID;//[Offset: 0x314, Size: 0x4]
	bool BP_UnknowPass_HasBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	int BP_UnknowPass_MaxGroupAwardCount;//[Offset: 0x31c, Size: 0x4]
	int BP_UnknowPass_Award_StayLevel;//[Offset: 0x320, Size: 0x4]
	int BP_ENUM_UNKNOWPASS_NeedBuy;//[Offset: 0x324, Size: 0x4]
	bool BP_UnknowPass_Award_IsMaxLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool BP_UnknowPass_Award_HasCanGetAward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	int BP_UnknowPass_Current_Preview_Level;//[Offset: 0x32c, Size: 0x4]
	BP_STRUCT_UnknowPassAward_Item BP_STRUCT_UnknowPassAward_Item;//[Offset: 0x330, Size: 0x18]
	FString BP_UnknowPass_Prime_Add;//[Offset: 0x348, Size: 0xc]
	BP_STRUCT_UnknowPass_Award_Level_Info BP_STRUCT_UnknowPass_Award_Level_Info;//[Offset: 0x354, Size: 0x28]
	int BP_UnknowPass_MaxAwardCount;//[Offset: 0x37c, Size: 0x4]
	int BP_ENUM_UNKNOWPASS_CanGet;//[Offset: 0x380, Size: 0x4]
	int BP_UnknowPass_Current_Preview_DiscountPrice;//[Offset: 0x384, Size: 0x4]
	int BP_UnknowPass_Current_Preview_PriceType;//[Offset: 0x388, Size: 0x4]
	int BP_ENUM_UNKNOWPASS_Lock;//[Offset: 0x38c, Size: 0x4]
	FString BP_UnknowPass_Award_Tips;//[Offset: 0x390, Size: 0xc]
	int BP_ENUM_UNKNOWPASS_NoAward;//[Offset: 0x39c, Size: 0x4]
	int BP_UnknowPass_Ticket;//[Offset: 0x3a0, Size: 0x4]
	int BP_UnknowPass_Current_Preview_Price;//[Offset: 0x3a4, Size: 0x4]
	int BP_UnknowPass_BuyLevel;//[Offset: 0x3a8, Size: 0x4]
	int BP_UnknowPass_CurrentClickLevel;//[Offset: 0x3ac, Size: 0x4]
	BP_STRUCT_UnknowPass_Award_Level_Info[] BP_ARRAY_UnknowPass_Award_Level_Preview_List;//[Offset: 0x3b0, Size: 0xc]
	int BP_ENUM_UNKNOWPASS_HasGet;//[Offset: 0x3bc, Size: 0x4]
	int BP_UnknowPass_Award_BuyPass_Tips_Num;//[Offset: 0x3c0, Size: 0x4]
	int BP_UnknowPass_Level;//[Offset: 0x3c4, Size: 0x4]
	BP_STRUCT_UnknowPass_Award_Jump_Info BP_STRUCT_UnknowPass_Award_Jump_Info;//[Offset: 0x3c8, Size: 0xc]
	int BP_UnknowPass_Award_Gender;//[Offset: 0x3d4, Size: 0x4]
	BP_STRUCT_UnknowPass_Award_Level_Info[] BP_ARRAY_UnknowPass_Award_Level_List;//[Offset: 0x3d8, Size: 0xc]
	int BP_UnknowPass_Award_Season_Index;//[Offset: 0x3e4, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e8, Size: 0x4]

--------------------------------
Class: BP_STRUCT_UnknowPassAward_Item
	int number_0_2D8FDD003E5551E622F9B4F9045C4F42;//[Offset: 0x0, Size: 0x4]
	int resId_1_1C27988064C2BDEA27722C290828C084;//[Offset: 0x4, Size: 0x4]
	int groupId_2_7527D1404071D003697E153A0E91BCC4;//[Offset: 0x8, Size: 0x4]
	bool showSpecialEffect_3_67676E80310CBC0C3FDF0E8302FEA574;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int status_4_02DA43C03691AC8D5EBB837602AAFC43;//[Offset: 0x10, Size: 0x4]
	int gender_5_6A07580015B86094075C964403DC3D42;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BP_STRUCT_UnknowPass_Award_Level_Info
	int level_0_09F4ED80458466A47A4134CE0878AC1C;//[Offset: 0x0, Size: 0x4]
	int eliteAwardState_1_61A928404802017D65A841BA089B4775;//[Offset: 0x4, Size: 0x4]
	BP_STRUCT_UnknowPassAward_Item[] BP_Array_OrdinaryAward_2_609D690041A3D494676B8AB20D4E6714;//[Offset: 0x8, Size: 0xc]
	BP_STRUCT_UnknowPassAward_Item[] BP_Array_EliteAward_3_577BB3C04B4899B35A2388A60F287C44;//[Offset: 0x14, Size: 0xc]
	int ordinaryAwardState_4_7DA75D800F2AEDD862A7805607C983E5;//[Offset: 0x20, Size: 0x4]
	bool isUnlock_5_052519807A57EE864E2ADF310ECFB23B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool isPreview_6_195BD70020B075D4346A723F0724B527;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool isBuyTo_7_25165B4012CD2EAF5BC65A3D0A1966DF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool isSplitGroup_8_4CE684C067A0B2412ACA307307203B70;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: BP_STRUCT_UnknowPass_Award_Jump_Info
	int Idx_0_44EA99C02EF8BF2770843FE50D9EC2C8;//[Offset: 0x0, Size: 0x4]
	bool IsElite_1_74445C40190C0851423FEA950D07CE75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int EliteIdx_2_7FA9F680142D326E3FC9743906D373C8;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: bp_lucky_unback_C.LuaClassObj.LuaContext.Actor.Object
	void EventLuckyUnbackClose_NoFetch();// 0x1c01fa0
	void EventLuckyUnbackClose();// 0x1c01fa0
	void EventLuckyUnbackShowGet_NoFetch();// 0x1c01fa0
	void EventLuckyUnbackShowGet();// 0x1c01fa0
	void EventLuckyUnbackHideBubble_NoFetch();// 0x1c01fa0
	void EventLuckyUnbackHideBubble();// 0x1c01fa0
	void EventLuckyUnbackShowRule_NoFetch();// 0x1c01fa0
	void EventLuckyUnbackShowRule();// 0x1c01fa0
	void EventLuckyUnbackShowRate_NoFetch();// 0x1c01fa0
	void EventLuckyUnbackShowRate();// 0x1c01fa0
	void EventLuckyUnbackSwicthRound_NoFetch();// 0x1c01fa0
	void EventLuckyUnbackSwicthRound();// 0x1c01fa0
	void EventLuckyUnbackEnterFromLobby_NoFetch();// 0x1c01fa0
	void EventLuckyUnbackEnterFromLobby();// 0x1c01fa0
	void EventLuckyUnbackShowSurprise_NoFetch();// 0x1c01fa0
	void EventLuckyUnbackShowSurprise();// 0x1c01fa0
	void EventLuckyUnbackExchangeClick_NoFetch();// 0x1c01fa0
	void EventLuckyUnbackExchangeClick();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	int BP_LuckyUnback_Cur_UC;//[Offset: 0x304, Size: 0x4]
	FString BP_LuckyUnback_ImageLink;//[Offset: 0x308, Size: 0xc]
	int BP_LuckyUnback_ResourceType;//[Offset: 0x314, Size: 0x4]
	bool BP_LuckyUnback_IsShowBubble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	int BP_LuckyUnback_CurVoucherCount;//[Offset: 0x31c, Size: 0x4]
	FString BP_LuckyUnback_TimePeriod;//[Offset: 0x320, Size: 0xc]
	int BP_LuckyUnback_SurpriseStatus;//[Offset: 0x32c, Size: 0x4]
	BP_STRUCT_LuckyUnback_ItemInfo[] BP_ARRAY_LuckyUnback_ItemInfo_List;//[Offset: 0x330, Size: 0xc]
	int BP_LuckyUnback_Total_Round;//[Offset: 0x33c, Size: 0x4]
	BP_STRUCT_LuckyUnback_Voucher BP_STRUCT_LuckyUnback_Voucher;//[Offset: 0x340, Size: 0x14]
	int BP_LuckyUnback_Round_Count;//[Offset: 0x354, Size: 0x4]
	int BP_LuckyUnback_Had_Draw_Count;//[Offset: 0x358, Size: 0x4]
	int BP_LuckyUnback_AnimStage;//[Offset: 0x35c, Size: 0x4]
	bool BP_LuckyUnback_IsOpenLobbyEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	int BP_LuckyUnback_CurVoucherId;//[Offset: 0x364, Size: 0x4]
	BP_STRUCT_LuckyUnback_Voucher[] BP_ARRAY_LuckyUnback_Voucher_List;//[Offset: 0x368, Size: 0xc]
	int BP_LuckyUnback_CurGetPos;//[Offset: 0x374, Size: 0x4]
	BP_STRUCT_LuckyUnback_ItemInfo BP_STRUCT_LuckyUnback_ItemInfo;//[Offset: 0x378, Size: 0x38]
	int BP_LuckyUnback_CurVoucherPrice;//[Offset: 0x3b0, Size: 0x4]
	bool BP_LuckyUnback_RedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	int BP_LuckyUnback_Cur_Price;//[Offset: 0x3b8, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3bc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_LuckyUnback_ItemInfo
	FString iconPath_0_597E20400427A5A362DC5B4A07E0FB28;//[Offset: 0x0, Size: 0xc]
	bool hasGet_1_4022E9C03228BCA15C162E650397FE54;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FString name_2_0CB25B00416D98226E5C0EEB039439B5;//[Offset: 0x10, Size: 0xc]
	int oldUC_3_4256888028A8B7666BAED4CD0943D1A3;//[Offset: 0x1c, Size: 0x4]
	int itemId_4_21F409C072C9CB294CF3324104754264;//[Offset: 0x20, Size: 0x4]
	int itemQuality_5_100DD8C0120C4E3F5C98D19601F184A9;//[Offset: 0x24, Size: 0x4]
	int pos_6_753DE740664438AB44CB190F08392293;//[Offset: 0x28, Size: 0x4]
	int recommendLevel_7_6A531F402EF7EDB326B9289F00B57DEC;//[Offset: 0x2c, Size: 0x4]
	int num_8_5B23A6C047D233F144CB21B20839424D;//[Offset: 0x30, Size: 0x4]
	int saleUC_9_06A222007B5B4B2C3546B62902E9A903;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: BP_STRUCT_LuckyUnback_Voucher
	int price_0_267F07C065103BC97BA63CCC05137095;//[Offset: 0x0, Size: 0x4]
	int voucher_id_1_7212ED0018750DC257AAF4F109BDFCB4;//[Offset: 0x4, Size: 0x4]
	FString name_2_62C0AB407A4916B9405FDA0E005109C5;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: bp_mall_weapon_model_handler_C.LuaClassObj.LuaContext.Actor.Object
	void EventProjectileAndParticleEffectFinish_NoFetch();// 0x1c01fa0
	void EventProjectileAndParticleEffectFinish();// 0x1c01fa0
	void EventSetInfo_Push_NoFetch();// 0x1c01fa0
	void EventSetInfo_Push();// 0x1c01fa0
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	int BP_MallWeapon_GRENADE_BOOM_Y;//[Offset: 0x304, Size: 0x4]
	bool BP_MallWeapon_isRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool BP_MallWeapon_Cur_Show_Weapon_Need_AutoRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	int BP_MallWeapon_Cur_Show_Weapon_Resid;//[Offset: 0x30c, Size: 0x4]
	int BP_MallWeapon_Cur_Equipment_Resid;//[Offset: 0x310, Size: 0x4]
	bool BP_MallWeapon_HasEditorConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	int BP_MallWeapon_CameraId;//[Offset: 0x318, Size: 0x4]
	int[] BP_Array_MallWeapon_AdaptRotation;//[Offset: 0x31c, Size: 0xc]
	int[] BP_Array_MallWeapon_AdaptTransform;//[Offset: 0x328, Size: 0xc]
	bool BP_MallWeapon_Cur_Show_Weapon_Need_RotateBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	int BP_MallWeapon_GRENADE_BOOM_X;//[Offset: 0x338, Size: 0x4]
	int BP_MallWeapon_GRENADE_BOOM_Z;//[Offset: 0x33c, Size: 0x4]
	FString BP_MallWeapon_Display_ExtraData;//[Offset: 0x340, Size: 0xc]
	bool BP_MallWeapon_Cur_Show_Weapon_Need_ResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	int[] BP_Array_MallWeapon_PutOnEquipment_Resid_List;//[Offset: 0x350, Size: 0xc]
	bool BP_MallWeapon_Cur_Show_Weapon_Skin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x360, Size: 0x4]

--------------------------------
Class: TableFunctionLibrary_C.BlueprintFunctionLibrary.Object
	static void GetItemTableRow(int ID, Object* __WorldContext, out BP_STRUCT_Item_type Item, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1c01fa0

--------------------------------
Class: BP_STRUCT_Item_type
	FString ItemBigIcon_0_733663734EEB8DD5D7FF41A6E96480D4;//[Offset: 0x0, Size: 0xc]
	int MaxCount_1_D5BF33434E37E75739D213989C4FA372;//[Offset: 0xc, Size: 0x4]
	int BPID_2_F73A5EF243D620CE49BBCAA8832C6AF9;//[Offset: 0x10, Size: 0x4]
	int ItemType_3_4CBCE77A4D2A20BEBD861AADEF3B616B;//[Offset: 0x14, Size: 0x4]
	bool AutoEquipAndDrop_4_144B885646B92B9836CE33923842AB1E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int ItemID_5_29F7B64741688A0A853FD281FAE4E28D;//[Offset: 0x1c, Size: 0x4]
	bool Consumable_7_B08070BD407AD029B7CDA7BDB341A342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	FString ItemDesc_8_8ED919494479E8A62F11DBB9C7AD0F9A;//[Offset: 0x24, Size: 0xc]
	FString ItemSmallIcon_9_B13D206C4A153C963FCE478A1B39C15F;//[Offset: 0x30, Size: 0xc]
	FString ItemName_10_B257B36A422BB69651454E90EBC1323B;//[Offset: 0x3c, Size: 0xc]
	FString WardrobeTab_11_6562B47746AECB0B5C84BC9C96EACD9D;//[Offset: 0x48, Size: 0xc]
	int ItemSubType_12_087F026E41DAB82F567758A4F56D72CF;//[Offset: 0x54, Size: 0x4]
	bool Equippable_13_BB222DC04DCB195FCB3F29B89EA210CA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	float UnitWeight_f_14_725EBB604F31443B93AF3597580ECAE4;//[Offset: 0x5c, Size: 0x4]
	FString ItemWhiteIcon_15_AA35FD8045790AA9F73F58829F202B94;//[Offset: 0x60, Size: 0xc]
	int ItemQuality_16_3EF7461D45D14FC186EB3DBB70D01484;//[Offset: 0x6c, Size: 0x4]
	int SellTokenType_17_B410373F45F6C04F12302FB860FB46DC;//[Offset: 0x70, Size: 0x4]
	int SellPrice_18_12D0424A4E19AC2E29A301AB474CBFD8;//[Offset: 0x74, Size: 0x4]
	FString KillWhiteIcon_27_16289384496FF361F9005580DEF9CAD1;//[Offset: 0x78, Size: 0xc]
	int NeedShare_73_D9C0818D40A3C6AB07231BABA5477060;//[Offset: 0x84, Size: 0x4]
	int WeightforOrder_29_4373EFCD4D78E7DF4067FF9D3E213664;//[Offset: 0x88, Size: 0x4]
	FString Preview_32_1997D4634D3D3F8CC7360283D2AF4E6C;//[Offset: 0x8c, Size: 0xc]
	FString ExTime_33_8299B7454C71BC6A899937AF00BFF0C5;//[Offset: 0x98, Size: 0xc]
	FString JumpUrl_34_A5DE7C2C406E2C16620017929DDEEA4F;//[Offset: 0xa4, Size: 0xc]
	int SourceBookEnable_35_80A540DA4CF5C9DEE5E79E9668E6511C;//[Offset: 0xb0, Size: 0x4]
	FString PickupDesc_36_D5D621864C55ED8C6ABE728B6F002D4E;//[Offset: 0xb4, Size: 0xc]
	int WardrobeMainTab_38_D234FCBE4A19AAF3066394AD7C7D98DF;//[Offset: 0xc0, Size: 0x4]
	int Durability_39_7B54DEB94CD411488438539500D225E1;//[Offset: 0xc4, Size: 0x4]
	bool IsBatchUse_40_88AB90DA48C707B0FE6DB18185C6253A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	FString JumpExchangeUrl_41_03C710694C2A928C1AF3C6A9A3F23CE6;//[Offset: 0xcc, Size: 0xc]
	FString ArmorySimpleDesc_42_27A16200667F9D5C22753FAB004E0C93;//[Offset: 0xd8, Size: 0xc]
	int AIFullVaule_43_6A3A6FC023E58D4B4FDDDF270E81E075;//[Offset: 0xe4, Size: 0x4]
	int LongDescID_44_4E8350406652C05F7794F90804562904;//[Offset: 0xe8, Size: 0x4]
	FString ArmoryDesc_45_5ADDC7800942285E5EA7A0880964AD23;//[Offset: 0xec, Size: 0xc]
	FString ItemSmallIcon2_46_6ED99A00141F4C900B45252101330012;//[Offset: 0xf8, Size: 0xc]
	FString ItemBigIcon2_47_2C0E40404ED554873AD82D3A053DBC62;//[Offset: 0x104, Size: 0xc]
	FString BackpackSimple_48_26F807C06BB149650FE17C280F83D985;//[Offset: 0x110, Size: 0xc]
	FString ItemRegion_49_3899A60047215AA47D8652720D715E6E;//[Offset: 0x11c, Size: 0xc]
	FString DescTag1_50_53531C406D7915D37BEE637E04075E81;//[Offset: 0x128, Size: 0xc]
	FString DescTag3_51_53551CC06D7915D57BEE637804075E83;//[Offset: 0x134, Size: 0xc]
	FString DescTag2_52_53541C806D7915D47BEE637F04075E82;//[Offset: 0x140, Size: 0xc]
	int ShowSexInMall_56_0C9F0CC01B8DDF89290B2B7F0D9E026C;//[Offset: 0x14c, Size: 0x4]
	FString RedEmotionSoundPath_57_1D0ECC4066CAAAF35D35519A029C0D28;//[Offset: 0x150, Size: 0xc]
	int RedEmotionPlayCD_58_4FB3EE0022A2DB4E4F16119706CC2024;//[Offset: 0x15c, Size: 0x4]
	FString RedEmotionIcon_59_01AF890033431A2479C4BA460D5728FE;//[Offset: 0x160, Size: 0xc]
	int RedEmotionId_60_346EF2004F911664698794F60EAD5724;//[Offset: 0x16c, Size: 0x4]
	int RedEmotionFlag_61_2E8D25401E2A77DF79CB9A7B0D572CD7;//[Offset: 0x170, Size: 0x4]
	int RedEmotionFightId_62_3F02EE804F5D9F9C4F294BF001172D84;//[Offset: 0x174, Size: 0x4]
	FString JapanKoreaItemBigIcon_66_2E164AC00FFFA7653C8D19BD0C25A0CE;//[Offset: 0x178, Size: 0xc]
	FString JapanKoreaItemSmallIcon_67_034B848076AC1078415670770A5658BE;//[Offset: 0x184, Size: 0xc]
	int AvatarID_68_319E644077E02FFF04B5C19B04157FD4;//[Offset: 0x190, Size: 0x4]
	bool IsPatchItem_69_349A78005F80430E28984D2C053505CD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	int DefaultBPID_70_565E22406359818D69EDC21605AA41A4;//[Offset: 0x198, Size: 0x4]
	FString StoreDetailImage_71_02C21A00264C878869630051096EDE55;//[Offset: 0x19c, Size: 0xc]
	FString SpecialIcon_72_55E01BC05ADCEE1500E06C0F01021C3E;//[Offset: 0x1a8, Size: 0xc]
	FString ValidRegionCodes_74_2EA4F9C02DC66B4573D87CB8064AB793;//[Offset: 0x1b4, Size: 0xc]
	int ValidTimes_75_5BC6A5C03028B6616FF746180062B373;//[Offset: 0x1c0, Size: 0x4]
	FString PreviewDisplay_76_15377740089E1C37746DD63C0B5976C9;//[Offset: 0x1c4, Size: 0xc]
	int RateType_77_176334C00292E359401D0B6600355865;//[Offset: 0x1d0, Size: 0x4]
	int character_param_78_2F2A70804AD88C7E6E8F5B83071E93DD;//[Offset: 0x1d4, Size: 0x4]
	FString QualityRate_79_5F4A46807D1C4B2C0A08E8F50F3EB745;//[Offset: 0x1d8, Size: 0xc]
	int ItemSoundID_80_7010328028DE3D6841FCD9F407C46B04;//[Offset: 0x1e4, Size: 0x4]
	int JKBPID_81_1FF3B64037160BBF09A6FDF60967EB24;//[Offset: 0x1e8, Size: 0x4]
	int CanIntoBag_82_416CF6C01FD7CDED0F5E477601A418C7;//[Offset: 0x1ec, Size: 0x4]
	int ResSeprateType_83_5349D1400501D3B166D23C1D0CBC9FE5;//[Offset: 0x1f0, Size: 0x4]

--------------------------------
Class: GlobalLuaWidget_C.LuaUserWidget.UserWidget.Widget.Visual.Object
	void GetNewLevelTaskData(FString TaskID, out bool Has, out BP_STRUCT_NewLevelTask_type BP_STRUCT_NewLevelTask_type);// 0x1c01fa0

--------------------------------
Class: BP_STRUCT_NewLevelTask_type
	int TouristSwitch2_0_07F03A404907C74147D6D7AC0AEBF7E2;//[Offset: 0x0, Size: 0x4]
	int Level_1_0F0B10C01F30D35763EAB4540563A09C;//[Offset: 0x4, Size: 0x4]
	int TouristSwitch1_2_07EF3A004907C74047D6D7AF0AEBF7E1;//[Offset: 0x8, Size: 0x4]
	FString Task2Detail_3_61BB38C0398B095F4DEFFEE503E7423C;//[Offset: 0xc, Size: 0xc]
	FString JumpTo2_4_171B770071C2E7202553E80100E88042;//[Offset: 0x18, Size: 0xc]
	FString Unlock_5_54330DC077D16E993B46B7F904B3F7CB;//[Offset: 0x24, Size: 0xc]
	int Task2Award_6_3E5B5FC035CE93AF7BAA12770C3C66D4;//[Offset: 0x30, Size: 0x4]
	int Award_7_63A86E802253655463E379D20559B4A4;//[Offset: 0x34, Size: 0x4]
	int Task2Cond_8_75434500020FE0D236016D4505C3EFA4;//[Offset: 0x38, Size: 0x4]
	int IOSSwitch1_9_72507640177498ED761F6C0B08957BF1;//[Offset: 0x3c, Size: 0x4]
	FString Task1Detail_10_22B2F8802B35ECB859A1B20000E7423C;//[Offset: 0x40, Size: 0xc]
	int IOSSwitch2_11_72517680177498EE761F6C0C08957BF2;//[Offset: 0x4c, Size: 0x4]
	FString JumpTo1_12_171A76C071C2E71F2553E80000E88041;//[Offset: 0x50, Size: 0xc]
	int Task1Cond_13_70D2C4C0008AB2212C1CB48805C0EFA4;//[Offset: 0x5c, Size: 0x4]
	int Task1Award_14_4AA6FF8023DBC7502297C6040C0C66D4;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: NewbieTips_Auto_C.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x4]
	void InitNewbieTips(Widget* Widget, out const FString TipText, int ShapeType, bool bShowSpreadEffect, bool bIsOneLine, float LineHorLength, float LineVertLength);// 0x1c01fa0
	void ExecuteUbergraph_NewbieTips_Auto(int EntryPoint, GridSlot* CallFunc_SlotAsGridSlot_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue2, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue3, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Divide_FloatFloat_ReturnValue, Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, int CallFunc_SelectInt_ReturnValue, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, int CallFunc_SelectInt_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector2D CallFunc_GetPosition_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_BreakVector2D_X4, float CallFunc_BreakVector2D_Y4, int CallFunc_SelectInt_ReturnValue3, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X5, float CallFunc_BreakVector2D_Y5, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue5, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool K2Node_SwitchInteger2_CmpSuccess, Geometry CallFunc_GetCachedGeometry_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue3, Vector2D CallFunc_GetLocalSize_ReturnValue2, Vector2D CallFunc_LocalToViewport_PixelPosition, Vector2D CallFunc_LocalToViewport_ViewportPosition, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X6, float CallFunc_BreakVector2D_Y6, float CallFunc_Divide_FloatFloat_ReturnValue4, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue2, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue3, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue4, float CallFunc_BreakVector2D_X7, float CallFunc_BreakVector2D_Y7, float CallFunc_Divide_FloatFloat_ReturnValue5, float CallFunc_BreakVector2D_X8, float CallFunc_BreakVector2D_Y8, float CallFunc_Add_FloatFloat_ReturnValue2, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue3, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue6, Vector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_BreakVector2D_X9, float CallFunc_BreakVector2D_Y9, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue4, Vector2D CallFunc_MakeVector2D_ReturnValue5, Vector2D CallFunc_MakeVector2D_ReturnValue6, Vector2D CallFunc_MakeVector2D_ReturnValue7, Vector2D CallFunc_MakeVector2D_ReturnValue8, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue7, float CallFunc_Divide_FloatFloat_ReturnValue7, float CallFunc_BreakVector2D_X10, float CallFunc_BreakVector2D_Y10, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, float CallFunc_Add_FloatFloat_ReturnValue6, float CallFunc_BreakVector2D_X11, float CallFunc_BreakVector2D_Y11, Vector2D CallFunc_MakeVector2D_ReturnValue9, Vector2D CallFunc_MakeVector2D_ReturnValue10, float CallFunc_Subtract_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue5, float CallFunc_Divide_FloatFloat_ReturnValue8, Margin CallFunc_GetUIAdaptation_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue6, Vector2D CallFunc_MakeVector2D_ReturnValue11, Vector2D CallFunc_MakeVector2D_ReturnValue12, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue7, Vector2D CallFunc_MakeVector2D_ReturnValue13, Vector2D CallFunc_MakeVector2D_ReturnValue14, Vector2D CallFunc_MakeVector2D_ReturnValue15, Vector2D CallFunc_MakeVector2D_ReturnValue16, Vector2D CallFunc_MakeVector2D_ReturnValue17, bool K2Node_SwitchInteger3_CmpSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue8, float CallFunc_BreakVector2D_X12, float CallFunc_BreakVector2D_Y12, float CallFunc_Subtract_FloatFloat_ReturnValue7, Vector2D CallFunc_MakeVector2D_ReturnValue18, Vector2D CallFunc_MakeVector2D_ReturnValue19, GridSlot* CallFunc_SlotAsGridSlot_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue8, Vector2D CallFunc_MakeVector2D_ReturnValue20, Vector2D CallFunc_MakeVector2D_ReturnValue21, PanelWidget* CallFunc_GetParent_ReturnValue, Geometry CallFunc_GetCachedGeometry_ReturnValue3, Vector2D CallFunc_GetLocalSize_ReturnValue3, bool K2Node_SwitchInteger4_CmpSuccess, float CallFunc_Divide_FloatFloat_ReturnValue9, float CallFunc_BreakVector2D_X13, float CallFunc_BreakVector2D_Y13, float CallFunc_Add_FloatFloat_ReturnValue9, float CallFunc_Add_FloatFloat_ReturnValue10, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue9, Vector2D CallFunc_MakeVector2D_ReturnValue22, float CallFunc_BreakVector2D_X14, float CallFunc_BreakVector2D_Y14, float CallFunc_Divide_FloatFloat_ReturnValue10, float CallFunc_Subtract_FloatFloat_ReturnValue8, float CallFunc_Subtract_FloatFloat_ReturnValue9, Vector2D CallFunc_MakeVector2D_ReturnValue23, Vector2D CallFunc_MakeVector2D_ReturnValue24, Vector2D CallFunc_MakeVector2D_ReturnValue25, Widget* K2Node_CustomEvent_Widget, const FString K2Node_CustomEvent_TipText, int K2Node_CustomEvent_ShapeType, bool K2Node_CustomEvent_bShowSpreadEffect, bool K2Node_CustomEvent_bIsOneLine, float K2Node_CustomEvent_LineHorLength, float K2Node_CustomEvent_LineVertLength, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue11, float CallFunc_BreakVector2D_X15, float CallFunc_BreakVector2D_Y15, float CallFunc_Add_FloatFloat_ReturnValue12, float CallFunc_Subtract_FloatFloat_ReturnValue10, Vector2D CallFunc_MakeVector2D_ReturnValue26, float CallFunc_Subtract_FloatFloat_ReturnValue11, Vector2D CallFunc_MakeVector2D_ReturnValue27, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue10);// 0x1c01fa0
	CanvasPanel* CanvasPanel_Root;//[Offset: 0x2f4, Size: 0x4]
	Image* Image_Box;//[Offset: 0x2f8, Size: 0x4]
	Image* Image_box_line_down;//[Offset: 0x2fc, Size: 0x4]
	Image* Image_box_line_right;//[Offset: 0x300, Size: 0x4]
	Image* Image_Circle;//[Offset: 0x304, Size: 0x4]
	Image* Image_Circle_Effect;//[Offset: 0x308, Size: 0x4]
	Image* Image_line_hor;//[Offset: 0x30c, Size: 0x4]
	Image* Image_line_vert;//[Offset: 0x310, Size: 0x4]
	CanvasPanel* TxtPanel;//[Offset: 0x314, Size: 0x4]
	UTRichTextBlock* UTRichTextBlock_Tips;//[Offset: 0x318, Size: 0x4]
	WidgetSwitcher* WidgetSwitcher_Shape;//[Offset: 0x31c, Size: 0x4]
	int LocalShapeType;//[Offset: 0x320, Size: 0x4]
	Vector2D LocalWidgetCenterPos;//[Offset: 0x324, Size: 0x8]
	Vector2D LocalUIScreenSize;//[Offset: 0x32c, Size: 0x8]
	int LocalAreaIndex;//[Offset: 0x334, Size: 0x4]
	float LocalVerLineOffset;//[Offset: 0x338, Size: 0x4]
	Widget* LocalGuidWidget;//[Offset: 0x33c, Size: 0x4]
	float LocalLineHorLength;//[Offset: 0x340, Size: 0x4]
	float LocalLineVertLength;//[Offset: 0x344, Size: 0x4]
	Vector2D TextTipALignLoc;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: Global_Bp_C.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x4]
	void ShowItemPreviewPress();// 0x1c01fa0
	void ShowItemPreviewClick(int ItemID);// 0x1c01fa0
	void SetGlobalConfigData(FString opKey, PlayerPrefs_C* playerprefs, bool CallFunc_SaveData_SaveDataState, bool K2Node_SwitchInteger_CmpSuccess, PlayerPrefs_C* CallFunc_CreateSaveGameObject_ReturnValue, PlayerPrefs_C* CallFunc_GetPlayerPrefs_bp_playerprefs, bool CallFunc_IsValid_ReturnValue);// 0x1c01fa0
	void DestroyLobbyCameras();// 0x1c01fa0
	void HideLobbyCamera(GameInstance* CallFunc_GetGameInstance_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, FrontendUtils* CallFunc_GetUtils_ReturnValue);// 0x1c01fa0
	void ShowLobbyCamera(FString Temp_string_Variable, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, int CallFunc_LVarToInt_ReturnValue);// 0x1c01fa0
	void SetShadowDistanceScale();// 0x1c01fa0
	void GetShadowDistanceScale();// 0x1c01fa0
	void SetCloseLocation(PlayerPrefs_C* CallFunc_GetPlayerPrefs_bp_playerprefs);// 0x1c01fa0
	void SetNearByRedPoint(PlayerPrefs_C* CallFunc_GetPlayerPrefs_bp_playerprefs, bool CallFunc_HasNearByNewTips_Has, bool CallFunc_Not_PreBool_ReturnValue);// 0x1c01fa0
	void GetCorpsIconTexture(int IconID, out Texture2D* Value, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BP_STRUCT_CorpsBadge_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Texture2D* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void GetGlobalConfigData(FString opKey, PlayerPrefs_C* playerprefs, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, float CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3, int CallFunc_Map_Find_Value4, bool CallFunc_Map_Find_ReturnValue4, PlayerPrefs_C* CallFunc_CreateSaveGameObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, PlayerPrefs_C* CallFunc_GetPlayerPrefs_bp_playerprefs);// 0x1c01fa0
	void TryPlayAdvertise(IMSDKHelper* CallFunc_GetInstance_ReturnValue, bool CallFunc_GetIsAdvertiseLoad_ReturnValue);// 0x1c01fa0
	void PlayAdvertise(IMSDKHelper* CallFunc_GetInstance_ReturnValue);// 0x1c01fa0
	void TryLoadAdvertise(IMSDKHelper* CallFunc_GetInstance_ReturnValue, bool CallFunc_GetIsAdvertiseLoad_ReturnValue);// 0x1c01fa0
	void LoadAdvertise(IMSDKHelper* CallFunc_GetInstance_ReturnValue);// 0x1c01fa0
	void GetLocalizeStringWithNum(FString CallFunc_GetLocalizeStringWithNum_ReturnValue);// 0x1c01fa0
	void SaveMallShow10Animation(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x1c01fa0
	void GetMallShow10Animation();// 0x1c01fa0
	void GetRankTexture(int rankIntegral, out Texture2D* Output, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_RankIntegralLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, Texture2D* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void SwitchLobbyMeshBg();// 0x1c01fa0
	void GetFrameTexture(int frameLevel, out Texture2D* Output, <FString,Texture2D*> frameTextureMap, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_AvatarFrame_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void ShowHelpshiftConversion(LuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, bp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2);// 0x1c01fa0
	void EnterCreateRoleDelay(FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);// 0x1c01fa0
	void EnterCreateRole(TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x1c01fa0
	void EnterFightStopMusic(int CallFunc_PostEventAtLocation_ReturnValue);// 0x1c01fa0
	void OpenPGUrl();// 0x1c01fa0
	void EventAndroidQuitGame(LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_global_C* K2Node_DynamicCast_AsBp_Global, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void QuitGame(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void EnterLobby(FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);// 0x1c01fa0
	void EnterLogin(FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue);// 0x1c01fa0
	void SwitchLobbySkin();// 0x1c01fa0
	void Construct();// 0x1c01fa0
	void ExecuteUbergraph_Global_Bp(int EntryPoint, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bp_global_C* K2Node_DynamicCast_AsBp_Global, bool K2Node_DynamicCast_bSuccess, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue2, UAEDataTable* CallFunc_GetDataTable_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, BP_STRUCT_LobbySceneSkinTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_LobbySceneSkinTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue4);// 0x1c01fa0
	SettingConfig_C* SettingConfig;//[Offset: 0x2f4, Size: 0x4]
	bp_global_C* bp_global;//[Offset: 0x2f8, Size: 0x4]
	<FString,Texture2D*> rankTextureMap;//[Offset: 0x2fc, Size: 0x3c]
	<FString,Texture2D*> corpsIconTextureMap;//[Offset: 0x338, Size: 0x3c]

--------------------------------
Class: PlayerPrefs_C.SaveGame.Object
	void GetDecomposeIndexTriggerTime(out int DecomposeTriggerTim);// 0x1c01fa0
	void SetDecomposeIndexTriggerTime(int TimeStamp, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetClickTimeAnniversary(FString Uid, int Time, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void GetClickTimeAnniversary(FString Uid, out int Value, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1c01fa0
	void GetCliickVehicleAcitivtyGuideExchange(FString Key, out bool hasClick, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1c01fa0
	void SetCliickVehicleAcitivtyGuideExchange(FString Key, bool isClick, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetClickTimeIceLucky(int Time, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void GetClickTimeIceLucky(FString UUID, out int Value, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1c01fa0
	void SetIsVNGAdult(bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void GetIsFirstTimeShowPrime(out bool IsfirstTimeOpenPrime);// 0x1c01fa0
	void SetIsFirstTimeShowPrime(bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetHasClickHalloweenExchange(bool isClick, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void GetHasClickHalloweenExchange(FString UUID, out bool hasClick, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1c01fa0
	void SetClickTimeHalloweenVehicle(int Time, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void GetClickTimeHalloweenVehicle(FString UUID, out int Value, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1c01fa0
	void GetFaceInfoClickedIDAndTime(FString faceid, out FString TimeStamp, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1c01fa0
	void SetFaceInfoClickedIDAndTime(FString faceid, FString Temp_string_Variable, bool CallFunc_SaveData_SaveDataState, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, int CallFunc_LVarToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1c01fa0
	void GetCursorFaceInfoID(out int CursorFaceInfoID);// 0x1c01fa0
	void SetCursorFaceInfoID(int LastFace, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetHasClickInviteTeamAct(bool isClick, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void GetHasClickInviteTeamAct(FString UUID, out bool hasClick, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1c01fa0
	void GetHasClickUPassAct(FString UUID, out bool hasClick, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1c01fa0
	void SetHasClickUPassAct(bool isClick, FString UUID, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetShowSwitchSecondLanguageNextTime(DateTime DateTime, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void GetShowSwitchSecondLanguageNextTime(out DateTime DateTime);// 0x1c01fa0
	void GetLoginFrequency(out int loginfreq);// 0x1c01fa0
	void SetLoginFrequency(int CurrentDay, bool CallFunc_SaveData_SaveDataState, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SaveData_SaveDataState2);// 0x1c01fa0
	void GetAirDropTime(FString Uid, out int outAirDropTime, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1c01fa0
	void SetAirDropTime(int InTime, FString Uid, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetMystery2LastTime(int Time, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetStoreGiftBoxList(out int[] BoxList, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void GetClickTimeAboutBind(FString Uid, out int TimeNotBind, out int TimeBind, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x1c01fa0
	void SetClickTimeAboutBind(int TimeNotBind, int TimeBind, FString Uid, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void IsEqualCurID(int ids, out bool Has, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1c01fa0
	void SetNewsIds(int ids, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetMallSeeDict(<int,bool> dict, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetStoreBosList(out int[] BoxList, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetCorpsShopRedPoint(int coprsLevel, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetFirstEnterMall(bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetMysteryLastTime(int Time, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void RejectUserAgreement(bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void AcceptUserAgreement(int NewVersion, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void ServerListClick(bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void HasCloseLocation(bool Uid, out bool Has, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x1c01fa0
	void SetCloseLocation(bool CloseLocation, FString Uid, bool CallFunc_SaveData_SaveDataState, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Remove_ReturnValue);// 0x1c01fa0
	void HasNearByNewTips(FString Uid, out bool Has, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1c01fa0
	void SetNearByNewTipsRead(FString Uid, bool CallFunc_HasNearByNewTips_Has, int CallFunc_Array_Add_ReturnValue, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetYXXYRedPoint(int isRed, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void AcceptGuestWarning(bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void RejectPolicy(bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void AcceptPolicy(int NewVersion, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetFirstInLobby(bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetTime(int arg, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void ClearCount(bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	void SetCount(int count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_SaveData_SaveDataState);// 0x1c01fa0
	SaveGame* LoadData(SaveGame* CallFunc_LoadGameFromSlot_ReturnValue);// 0x1c01fa0
	void SaveData(out bool SaveDataState, bool CallFunc_SaveGameToSlot_ReturnValue);// 0x1c01fa0
	int LoginCount;//[Offset: 0x20, Size: 0x4]
	int LoginTime;//[Offset: 0x24, Size: 0x4]
	bool FirstInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool GuestWarningAccepted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int YXXYRedPoint;//[Offset: 0x2c, Size: 0x4]
	FString[] NearByNewTipsList;//[Offset: 0x30, Size: 0xc]
	<FString> CloseLocationList;//[Offset: 0x3c, Size: 0x3c]
	bool QuestionDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool ServerListClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	int MysteryLastTime;//[Offset: 0x7c, Size: 0x4]
	bool notFirstEnterMall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int CoprsShopLevelRedPoint;//[Offset: 0x84, Size: 0x4]
	int[] StoreBoxList;//[Offset: 0x88, Size: 0xc]
	<int,bool> HasSeeShopItemDict;//[Offset: 0x94, Size: 0x3c]
	int NewsIds;//[Offset: 0xd0, Size: 0x4]
	int LobbyNoticeID;//[Offset: 0xd4, Size: 0x4]
	int UserAgreementAcceptedVersion;//[Offset: 0xd8, Size: 0x4]
	int PrivacyPolicyAcceptedVersion;//[Offset: 0xdc, Size: 0x4]
	int ClickTimeNotBind;//[Offset: 0xe0, Size: 0x4]
	int ClickTimeBind;//[Offset: 0xe4, Size: 0x4]
	<FString,int> UidClickTimeNotBind;//[Offset: 0xe8, Size: 0x3c]
	<FString,int> UidClickTimeBind;//[Offset: 0x124, Size: 0x3c]
	int[] StoreGiftBoxList;//[Offset: 0x160, Size: 0xc]
	bool AchievementInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	int Mystery2LastTime;//[Offset: 0x170, Size: 0x4]
	<FString,FString> ConfigStringMap;//[Offset: 0x174, Size: 0x3c]
	<FString,int> ConfigIntMap;//[Offset: 0x1b0, Size: 0x3c]
	<FString,float> ConfigFloatMap;//[Offset: 0x1ec, Size: 0x3c]
	<FString,bool> ConfigBoolMap;//[Offset: 0x228, Size: 0x3c]
	<FString,int> UidAirDropTime;//[Offset: 0x264, Size: 0x3c]
	int LoginFrequency;//[Offset: 0x2a0, Size: 0x4]
	int CurrentDay;//[Offset: 0x2a4, Size: 0x4]
	FString[] SecondLanguage;//[Offset: 0x2a8, Size: 0xc]
	DateTime ShowSwitchSecondLanguageNextTime;//[Offset: 0x2b8, Size: 0x8]
	<FString,bool> HasClickUPassAct;//[Offset: 0x2c0, Size: 0x3c]
	<FString,bool> HasClickInviteTeamAct;//[Offset: 0x2fc, Size: 0x3c]
	int CursorFaceInfoID;//[Offset: 0x338, Size: 0x4]
	<FString,FString> FaceInfoClickedIDAndTime;//[Offset: 0x33c, Size: 0x3c]
	bool LanguagePromptState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	bool HasTipLeagueGameSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	<FString,int> ClickTimeHalloweenVehicle;//[Offset: 0x37c, Size: 0x3c]
	<FString,bool> HasClickHalloweenExchange;//[Offset: 0x3b8, Size: 0x3c]
	FString primeClicktimestamp;//[Offset: 0x3f4, Size: 0xc]
	bool isVNGadult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	<FString,int> ClickTimeIceLucky;//[Offset: 0x404, Size: 0x3c]
	bool IsFirstTimeShowPrime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	<FString,bool> HasCliickVehicleAcitivtyGuide;//[Offset: 0x444, Size: 0x3c]
	<FString,int> ClickTimeAnniversary;//[Offset: 0x480, Size: 0x3c]
	int DecomposeTriggerTime;//[Offset: 0x4bc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_CorpsBadge_type
	FString BigIconPath_0_10CC26002C2272C4426923F90B6405C8;//[Offset: 0x0, Size: 0xc]
	int ID_1_5727FF4053D9C66568AE85A909693024;//[Offset: 0xc, Size: 0x4]
	FString IconPath_2_038F818050E2694643DA924F014A58A8;//[Offset: 0x10, Size: 0xc]
	FString Name_3_56563C4042608BF33377F2DB0931BF55;//[Offset: 0x1c, Size: 0xc]
	int TabPosi_4_17AFE880638188BE77062DBF05E20589;//[Offset: 0x28, Size: 0x4]
	int UnLockLv_5_04857F8051FE2B7A53B16D630C5CAF66;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: BP_STRUCT_RankIntegralLevel_type
	int IntegralType_0_5DB652C74A6C2C5E4B1123A62ADC38A8;//[Offset: 0x0, Size: 0x4]
	FString IntegralTypeName_1_37066B404ACB346A9C01D683DD3A29FB;//[Offset: 0x4, Size: 0xc]
	FString FrameID_2_FA51FC0F47FB8AEB41067AB1A00E044D;//[Offset: 0x10, Size: 0xc]
	int MinIntegral_3_8BCC404B4E31165611A2F3A5DCA7F9EB;//[Offset: 0x1c, Size: 0x4]
	int Level_4_4248BF2F4F85F33AF1FFF8B269550E92;//[Offset: 0x20, Size: 0x4]
	int IntegralTypeOrder_5_E1D966464BA0136A4682EA8533722D30;//[Offset: 0x24, Size: 0x4]
	FString Name_6_B98FA8AA4955E5E532285FA0BC38606D;//[Offset: 0x28, Size: 0xc]
	FString SmallIcon_7_3B6D3480778CAC664F339B4106DA305E;//[Offset: 0x34, Size: 0xc]
	FString SubIcon_8_5BB640C031E57E65018BD3BD0684148E;//[Offset: 0x40, Size: 0xc]
	int NextIntegralScore_9_194CC840003BFCBD1B7B7E14029BE565;//[Offset: 0x4c, Size: 0x4]
	int StarNum_10_045B8680677A2C3C3C50D91C069A9F6D;//[Offset: 0x50, Size: 0x4]
	FString BigIcon_11_55E7FAC04C1A035F0AEAB48904C9149E;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: BP_STRUCT_AvatarFrame_type
	int Type_0_1A0A9F0743331BBE49AADB988DC87C90;//[Offset: 0x0, Size: 0x4]
	FString Desc_1_AC45D7034D7DDDC90D52E19BF6D66EF9;//[Offset: 0x4, Size: 0xc]
	FString Name_2_401DF90F47F3FF259DF5AD890925B071;//[Offset: 0x10, Size: 0xc]
	int ID_3_831225F64111B05931B2D0B74884A6BD;//[Offset: 0x1c, Size: 0x4]
	FString DescGet_4_E78748484096828FA71D5E85901FD57B;//[Offset: 0x20, Size: 0xc]
	FString IconBig_5_82F9A60A40DA032B376321A0896F07F2;//[Offset: 0x2c, Size: 0xc]
	FString Icon_6_7C7ADBE24A1E2C45A54BC7BD91D84759;//[Offset: 0x38, Size: 0xc]
	FString DescTime_7_684743074A1D090755252DAA2F6832B5;//[Offset: 0x44, Size: 0xc]
	int AppleAuditHide_8_C3DCAE874E4C89FB670303A48501283C;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	int CrossHairColor;//[Offset: 0x20, Size: 0x4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
	int LeftHandFire;//[Offset: 0x28, Size: 0x4]
	int Gyroscope;//[Offset: 0x2c, Size: 0x4]
	int ArtQuality;//[Offset: 0x30, Size: 0x4]
	float ViewPercentage;//[Offset: 0x34, Size: 0x4]
	int FireMode;//[Offset: 0x38, Size: 0x4]
	int VehicleControlMode;//[Offset: 0x3c, Size: 0x4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	int CameraLensSensibility;//[Offset: 0x44, Size: 0x4]
	float CamLensSenNoneSniper;//[Offset: 0x48, Size: 0x4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c, Size: 0x4]
	float CamLensSen2XSniper;//[Offset: 0x50, Size: 0x4]
	float CamLensSen4XSniper;//[Offset: 0x54, Size: 0x4]
	float CamLensSen8XSniper;//[Offset: 0x58, Size: 0x4]
	int FireCameraLensSensibility;//[Offset: 0x5c, Size: 0x4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60, Size: 0x4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64, Size: 0x4]
	float FireCamLensSen2XSniper;//[Offset: 0x68, Size: 0x4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c, Size: 0x4]
	float FireCamLensSen8XSniper;//[Offset: 0x70, Size: 0x4]
	int GyroscopeSensibility;//[Offset: 0x74, Size: 0x4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78, Size: 0x4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c, Size: 0x4]
	float GyroscopeSen2XSniper;//[Offset: 0x80, Size: 0x4]
	float GyroscopeSen4XSniper;//[Offset: 0x84, Size: 0x4]
	float GyroscopeSen8XSniper;//[Offset: 0x88, Size: 0x4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	float MainVolumValue;//[Offset: 0x90, Size: 0x4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float EffectVolumValue;//[Offset: 0x98, Size: 0x4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float UIVolumValue;//[Offset: 0xa0, Size: 0x4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	float BGMVolumValue;//[Offset: 0xa8, Size: 0x4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	int VoiceChannel;//[Offset: 0xb0, Size: 0x4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float MicphoneVolumValue;//[Offset: 0xb8, Size: 0x4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float SpeakerVolumValue;//[Offset: 0xc0, Size: 0x4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 0x1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 0x1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 0x1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 0x1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 0x1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	int LimitBandage;//[Offset: 0xd8, Size: 0x4]
	int LimitMedical;//[Offset: 0xdc, Size: 0x4]
	int LimitAnodyne;//[Offset: 0xe0, Size: 0x4]
	int LimitEnergyDrinks;//[Offset: 0xe4, Size: 0x4]
	int LimitAdrenaline;//[Offset: 0xe8, Size: 0x4]
	int LimitShouliudan;//[Offset: 0xec, Size: 0x4]
	int LimitYanwudan;//[Offset: 0xf0, Size: 0x4]
	int LimitZhenbaodan;//[Offset: 0xf4, Size: 0x4]
	int LimitRanshaodan;//[Offset: 0xf8, Size: 0x4]
	int LimitBullet9mm;//[Offset: 0xfc, Size: 0x4]
	int LimitBullet7_62mm;//[Offset: 0x100, Size: 0x4]
	int Limit12koujing;//[Offset: 0x104, Size: 0x4]
	int Limit45koujing;//[Offset: 0x108, Size: 0x4]
	int Limit300magenandanyao;//[Offset: 0x10c, Size: 0x4]
	int Limitbolt;//[Offset: 0x110, Size: 0x4]
	int LimitBullet5;//[Offset: 0x114, Size: 0x4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	int FPSLevel;//[Offset: 0x11c, Size: 0x4]
	int ArtStyle;//[Offset: 0x120, Size: 0x4]
	int RecordTipShowLastTime;//[Offset: 0x124, Size: 0x4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x128, Size: 0x3c]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x164, Size: 0x3c]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 0x1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a4, Size: 0x3c]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0x1e4, Size: 0xc]
	int[] ChatOptiongList1;//[Offset: 0x1f0, Size: 0xc]
	int LRShootMode;//[Offset: 0x1fc, Size: 0x4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 0x1]
	int[] ChatOptiongList2;//[Offset: 0x204, Size: 0xc]
	int[] ChatOptiongList3;//[Offset: 0x210, Size: 0xc]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]
	int NewGetActorID;//[Offset: 0x220, Size: 0x4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	float 3DTouchValue;//[Offset: 0x228, Size: 0x4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	int ShotGunShootMode;//[Offset: 0x230, Size: 0x4]
	int SingleShotWeaponShootMode;//[Offset: 0x234, Size: 0x4]
	int isFirstOpenMicCheck;//[Offset: 0x238, Size: 0x4]
	float VehicleEye;//[Offset: 0x23c, Size: 0x4]
	float ParachuteEye;//[Offset: 0x240, Size: 0x4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x244, Size: 0xc]
	int RepeatingWeaponShootMode;//[Offset: 0x250, Size: 0x4]
	int DrivingViewMode;//[Offset: 0x254, Size: 0x4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	int FpViewValue;//[Offset: 0x25c, Size: 0x4]
	float CamFpFreeEye;//[Offset: 0x260, Size: 0x4]
	float CamLensSenNoneSniperFP;//[Offset: 0x264, Size: 0x4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x268, Size: 0x4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x26c, Size: 0x4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	int DaliyWarmodeInfo;//[Offset: 0x274, Size: 0x4]
	FString currentLanguage;//[Offset: 0x278, Size: 0xc]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	FString lastViewDayTime;//[Offset: 0x288, Size: 0xc]
	FString lastViewWeekTime;//[Offset: 0x294, Size: 0xc]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	float CamLensSen3XSniper;//[Offset: 0x2a4, Size: 0x4]
	float CamLensSen6XSniper;//[Offset: 0x2a8, Size: 0x4]
	float FireCamLensSen3XSniper;//[Offset: 0x2ac, Size: 0x4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b0, Size: 0x4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b4, Size: 0x4]
	float GyroscopeSen6XSniper;//[Offset: 0x2b8, Size: 0x4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	int RedDotCHColor;//[Offset: 0x2c0, Size: 0x4]
	int RedDotCHType;//[Offset: 0x2c4, Size: 0x4]
	int HolographicCHColor;//[Offset: 0x2c8, Size: 0x4]
	int HolographicCHType;//[Offset: 0x2cc, Size: 0x4]
	int Sinper2xCHColor;//[Offset: 0x2d0, Size: 0x4]
	int Sinper2xCHType;//[Offset: 0x2d4, Size: 0x4]
	int Sniper3xCHColor;//[Offset: 0x2d8, Size: 0x4]
	int Sniper3xCHType;//[Offset: 0x2dc, Size: 0x4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e4, Size: 0x3c]
	int LimitFirstAidKit;//[Offset: 0x320, Size: 0x4]
	FString XGLanguageTag;//[Offset: 0x324, Size: 0xc]
	FString XGTimezoneTag;//[Offset: 0x330, Size: 0xc]
	FString XGPushNightTag;//[Offset: 0x33c, Size: 0xc]
	FString XGPushDayTag;//[Offset: 0x348, Size: 0xc]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	int SelectUIElemIndex1;//[Offset: 0x358, Size: 0x4]
	int SelectUIElemIndex2;//[Offset: 0x35c, Size: 0x4]
	int SelectUIElemIndex3;//[Offset: 0x360, Size: 0x4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	int LimitSniper2X;//[Offset: 0x368, Size: 0x4]
	int LimitSniper3X;//[Offset: 0x36c, Size: 0x4]
	int LimitSniper4X;//[Offset: 0x370, Size: 0x4]
	int LimitSniper6X;//[Offset: 0x374, Size: 0x4]
	int LimitSniper8X;//[Offset: 0x378, Size: 0x4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	int SidewaysMode;//[Offset: 0x380, Size: 0x4]
	int OpenMirrorMode;//[Offset: 0x384, Size: 0x4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 0x1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 0x1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 0x1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	int LobbyStyleID;//[Offset: 0x390, Size: 0x4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 0x1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 0x1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 0x1]
	float ScreenLightness;//[Offset: 0x398, Size: 0x4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 0x1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 0x1]
	FString FirstChargeVersion;//[Offset: 0x3a0, Size: 0xc]
	FString RechargePosSave;//[Offset: 0x3ac, Size: 0xc]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 0x1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 0x1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 0x1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3bc, Size: 0x3c]
	int LimitZombieGrenade;//[Offset: 0x3f8, Size: 0x4]
	bool AutoPickupSwitcher_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	bool DisableAutoPickupSwitcher_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 0x1]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 0x1]
	bool AutoPickupPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ff, Size: 0x1]
	int LimitBandage_pve;//[Offset: 0x400, Size: 0x4]
	int LimitMedical_pve;//[Offset: 0x404, Size: 0x4]
	int LimitAnodyne_pve;//[Offset: 0x408, Size: 0x4]
	int LimitEnergyDrinks_pve;//[Offset: 0x40c, Size: 0x4]
	int LimitAdrenaline_pve;//[Offset: 0x410, Size: 0x4]
	int LimitFirstAidKit_pve;//[Offset: 0x414, Size: 0x4]
	int LimitShouliudan_pve;//[Offset: 0x418, Size: 0x4]
	int LimitYanwudan_pve;//[Offset: 0x41c, Size: 0x4]
	int LimitZhenbaodan_pve;//[Offset: 0x420, Size: 0x4]
	int LimitRanshaodan_pve;//[Offset: 0x424, Size: 0x4]
	int LimitSniper2X_pve;//[Offset: 0x428, Size: 0x4]
	int LimitSniper3X_pve;//[Offset: 0x42c, Size: 0x4]
	int LimitSniper4X_pve;//[Offset: 0x430, Size: 0x4]
	int LimitSniper6X_pve;//[Offset: 0x434, Size: 0x4]
	int LimitSniper8X_pve;//[Offset: 0x438, Size: 0x4]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x440, Size: 0x4]
	int SideMirrorMode;//[Offset: 0x444, Size: 0x4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0x448, Size: 0xc]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 0x1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x456, Size: 0x1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x457, Size: 0x1]
	int LimitYeDanGrenade;//[Offset: 0x458, Size: 0x4]
	int LimitAntidote;//[Offset: 0x45c, Size: 0x4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	int[] ChatOptiongList4;//[Offset: 0x464, Size: 0xc]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	int ScoreTips_TModeCnt;//[Offset: 0x474, Size: 0x4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	int FPPFireMode;//[Offset: 0x47c, Size: 0x4]
	int SelectUIElemIndexFPP1;//[Offset: 0x480, Size: 0x4]
	int SelectUIElemIndexFPP2;//[Offset: 0x484, Size: 0x4]
	int SelectUIElemIndexFPP3;//[Offset: 0x488, Size: 0x4]
	byte TurboLastQuality;//[Offset: 0x48c, Size: 0x1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x490, Size: 0x3c]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x4cc, Size: 0x3c]
	bool IsEnableFloatingText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	int AimAssistLevel;//[Offset: 0x50c, Size: 0x4]
	bool OpenQuickSwitchItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x512, Size: 0x1]
	bool OpenQuickSwitchSubWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x513, Size: 0x1]
	int QuickGunBeginTips_GameCount;//[Offset: 0x514, Size: 0x4]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a, Size: 0x1]
	bool ChangeSeatAccurate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51b, Size: 0x1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1]
	int[] QuickSignIDList;//[Offset: 0x520, Size: 0xc]
	int[] QuickSignWheelIDList;//[Offset: 0x52c, Size: 0xc]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]

--------------------------------
Class: BP_STRUCT_LobbySceneSkinTable_type
	FString SkinStreamLevelName_0_3781FCC026A707C5085B0B8D0763C135;//[Offset: 0x0, Size: 0xc]
	int SkinID_1_11FAE6C0633AFB313233DCF907356724;//[Offset: 0xc, Size: 0x4]
	int SkinStyleKey3_2_3E26BEC04C85800B40BF19470D807903;//[Offset: 0x10, Size: 0x4]
	int SkinStyleKey2_3_3E25BE804C85800A40BF19440D807902;//[Offset: 0x14, Size: 0x4]
	int SkinStyleKey4_4_3E27BF004C85800C40BF19460D807904;//[Offset: 0x18, Size: 0x4]
	int SkinStyleKey5_5_3E28BF404C85800D40BF19410D807905;//[Offset: 0x1c, Size: 0x4]
	int SkinStyleKey6_6_3E29BF804C85800E40BF19400D807906;//[Offset: 0x20, Size: 0x4]
	int SkinStyleKey1_7_3E24BE404C85800940BF19450D807901;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: Common_RankIntegralLevel_Style_Small_UIBP_C.UserWidget.Widget.Visual.Object
	void SetRankInteralExtend(int rankIntegral, TextBlock* textIntegralName, Texture2D* Texture, out Texture2D* Output, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, BP_STRUCT_RankIntegralLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue3, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, Texture2D* CallFunc_GetLobbyRankTexture_output, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, bool CallFunc_IsValid_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void SetRankInteral(int rankIntegral, TextBlock* textIntegralName, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STRUCT_RankIntegralLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	Image* Image_Icon;//[Offset: 0x1b0, Size: 0x4]

--------------------------------
Class: GlobalUIFunctionLibrary_C.BlueprintFunctionLibrary.Object
	static void IsConfigGameModeType(enum InGameModeType, Object* Context, Object* __WorldContext, out bool res);// 0x1c01fa0
	static void PlayModelSequence(FString Path, Object* __WorldContext, out LevelSequencePlayer* playingsequence, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue, LevelSequence* K2Node_DynamicCast_AsLevel_Sequence, bool K2Node_DynamicCast_bSuccess, LevelSequenceActor* CallFunc_CreateLevelSequencePlayer_OutActor, LevelSequencePlayer* CallFunc_CreateLevelSequencePlayer_ReturnValue);// 0x1c01fa0
	static void GetPingColor(float ms, Object* __WorldContext, out LinearColor Color, LinearColor CallFunc_MakeColor_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue2, LinearColor CallFunc_MakeColor_ReturnValue3);// 0x1c01fa0
	static void InitAmmoDropBox(MeshComponent* MeshComponent, int LOD, Object* __WorldContext, byte TEXTUREGROUP_UI, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess2, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x1c01fa0
	static void LoadSprite(Image* Image, FString IconPath, Object* __WorldContext, Object* CallFunc_UIGetResWithPath_ReturnValue, PaperSprite* K2Node_DynamicCast_AsPaper_Sprite, bool K2Node_DynamicCast_bSuccess, SlateBrush CallFunc_MakeBrushFromSprite_ReturnValue);// 0x1c01fa0
	static void GetGlobalLuaUI(Object* WorldContextObject, Object* __WorldContext, out GlobalLuaWidget_C* AsGlobal Lua Widget, FString Temp_string_Variable, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, Object* CallFunc_LVarToObject_ReturnValue, GlobalLuaWidget_C* K2Node_DynamicCast_AsGlobal_Lua_Widget, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	static void SetArenaWeaponLightProperty(Object* __WorldContext, LinearColor K2Node_MakeStruct_LinearColor, Transform CallFunc_MakeTransform_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor2, Rotator CallFunc_MakeRotator_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2);// 0x1c01fa0
	static void GetXieQualityPath(int quality, Object* __WorldContext, out FString Path, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x1c01fa0
	static void SetCornerQuality(Image* Image, int quality, Object* __WorldContext, FString CallFunc_GetXieQualityPath_path, bool CallFunc_EqualEqual_IntInt_ReturnValue, Object* CallFunc_UIGetResWithPath_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x1c01fa0
	static void SetIconQuality(Image* Image, int quality, Object* __WorldContext, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x1c01fa0
	static FString GetRankIntegralSmallIcon(FString Icon, Object* __WorldContext);// 0x1c01fa0
	static void SetRankInteral(BP_STRUCT_RankIntegralLevel_type RankIntegralLevelInfo, Image* ImageIcon, TextBlock* TextBlock_Rank, CanvasPanel* Canvas Panel_Star, Image* Image_Star, TextBlock* TextBlock_Star, Object* __WorldContext, FString tempPath, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue3, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, enum CallFunc_BoolToVisible_visibility, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5);// 0x1c01fa0
	static void ShowUIOnCheckIOS(Widget* UIWidget, bool bShow, Object* __WorldContext, bp_global_C* CallFunc_GetGlobalData_globalObj, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1c01fa0
	static void RefreshCurrentFPS(Object* __WorldContext, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, SaveGame* CallFunc_GetUserSettings_ReturnValue, int CallFunc_GetFPSLevel_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x1c01fa0
	static void SetFpsByIndex(int Index, Object* __WorldContext, int CallFunc_Subtract_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x1c01fa0
	static void SetAndroidKeyIsValid(bool Valid, Object* __WorldContext);// 0x1c01fa0
	static void GetCurrentCamera(Object* __WorldContext, out CameraActor* Result, GameInstance* CallFunc_GetGameInstance_ReturnValue, CameraActor*[] CallFunc_GetAllActorsOfClass_OutActors, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, int Temp_int_Array_Index_Variable, FrontendUtils* CallFunc_GetUtils_ReturnValue, CameraActor* CallFunc_Array_Get_Item, FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1c01fa0
	static void UpdateMPCLightDirection(Object* __WorldContext, int TmpMinIndex, float TmpMinDistance);// 0x1c01fa0
	static void GetAlphaSperateMatPathByImagePath(FString imgPath, Object* __WorldContext, out FString MatPath, FString CallFunc_GetAlphaSperateMatPathByImagePath_ReturnValue);// 0x1c01fa0
	static void SetImgWithPath(Image* ImgRef, FString imgPath, bool IsMatchSize, Object* __WorldContext);// 0x1c01fa0
	static void GetBgQualityPath(int quality, Object* __WorldContext, out FString Path, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x1c01fa0
	static void GetLobbyCorpsIcon(int IconID, Object* __WorldContext, out Texture2D* Value, Global_Bp_C* CallFunc_GetLobbyGlobalBp_AsGlobal_Bp, bool CallFunc_IsValid_ReturnValue, Texture2D* CallFunc_GetCorpsIconTexture_Value);// 0x1c01fa0
	static void CloseHelpTips(Object* __WorldContext, bp_global_C* CallFunc_GetGlobalData_globalObj);// 0x1c01fa0
	static void ShowHelpTipsByButton(int StrID, Button* Button, Object* __WorldContext, bp_global_C* LuaRef, bp_global_C* CallFunc_GetGlobalData_globalObj, Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_LocalToViewport_PixelPosition, Vector2D CallFunc_LocalToViewport_ViewportPosition, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue2, BP_STRUCT_GlobalHelpTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalHelpTips_Pos);// 0x1c01fa0
	static void GetBrushFromSprite(SlateBrush Brush, FString Path, Object* __WorldContext, out SlateBrush Result, Object* CallFunc_UIGetResWithPath_ReturnValue, PaperSprite* K2Node_DynamicCast_AsPaper_Sprite, bool K2Node_DynamicCast_bSuccess, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x1c01fa0
	static void IdToColor(int ID, Object* __WorldContext, out Color Color, Color K2Node_MakeStruct_Color, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_CorpsIconColor_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_Conv_IntToByte_ReturnValue3, Color K2Node_MakeStruct_Color2);// 0x1c01fa0
	static void SetCorpsLevelLimit(TextBlock* textWidget, int Level, Object* __WorldContext, UAEDataTable* CallFunc_GetDataTable_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_CorpsConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Max_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue2, BP_STRUCT_MilitaryRankLevel_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FString CallFunc_GetLocalizeString_textValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x1c01fa0
	static void SetCorpsSegmentLimit(Common_RankIntegralLevel_Style_Small_UIBP_C* segmentWidget, TextBlock* textWidget, int LevelId, Object* __WorldContext, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_GetLocalizeString_textValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_RankIntegralLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum CallFunc_BoolToVisible_visibility, FString CallFunc_GetLocalizeString_textValue2, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_IsValid_ReturnValue2);// 0x1c01fa0
	static void SetMoneyIconByType(Image* img, int Type, Object* __WorldContext, int tempItemID, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_GetSmallItemIconByID_path);// 0x1c01fa0
	static void GetSmallItemIconByID(int ItemID, Object* __WorldContext, out FString Path, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, BP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1c01fa0
	static void SetImageFromPath(Image* Image, FString IconPath, Object* __WorldContext, out bool IsOK);// 0x1c01fa0
	static void GetLangueTable(Object* __WorldContext, out UAEDataTable* NewParam, UAEDataTable* CallFunc_GetDataTable_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, bool CallFunc_IsCEVersion_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue3, UAEDataTable* CallFunc_GetDataTable_ReturnValue4, UAEDataTable* CallFunc_GetDataTable_ReturnValue5, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	static void GetAlphaTexturePathByImgPath(FString imagepath, Object* __WorldContext, out FString AlphaImagePath, FString CallFunc_GetAlphaTexturePathByImgPath_ReturnValue);// 0x1c01fa0
	static void SetDXUIMaterialParam(FString indexString, FString imgPath, MaterialInstanceDynamic* MaterialInst, Object* __WorldContext, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Texture2D* CallFunc_GetAlpahTextureByImgPath_AlphaTexture, FName CallFunc_Conv_StringToName_ReturnValue2);// 0x1c01fa0
	static void GetAlpahTextureByImgPath(FString imgPath, Object* __WorldContext, out Texture2D* AlphaTexture, FString CallFunc_GetAlphaTexturePath_ReturnValue, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	static void numToTimeStrFormat(int timeNum, Object* __WorldContext, out FString TimeStr, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1c01fa0
	static void SetCharacterImage(FString imgPath, Image* imageItem, Object* __WorldContext, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	static void numToTimeStr(int timeNum, Object* __WorldContext, out FString TimeStr, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue2, int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_numToTimeStrFormat_timeStr, FString CallFunc_numToTimeStrFormat_timeStr2, int CallFunc_Percent_IntInt_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue2, FString CallFunc_numToTimeStrFormat_timeStr3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x1c01fa0
	static void UseSperateAlphaMaterialByImgPath(Image* img, FString imgPath, Object* __WorldContext, out bool Success);// 0x1c01fa0
	static void GetItemName(FString Name_, int length_, bool chineseSensity, Object* __WorldContext, out FString OutName, FString NewName, int CallFunc_GetTextLength_length, int Temp_int_Array_Index_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString[] CallFunc_GetCharacterArrayFromString_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_GetTextLength_length2, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x1c01fa0
	static void GetQualityPath(int quality, Object* __WorldContext, out FString Path, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x1c01fa0
	static void GetServerCurrentTime(Object* __WorldContext, out DateTime Time, bp_global_C* CallFunc_GetGlobalData_globalObj, DateTime CallFunc_DateTimeFromString_Result, bool CallFunc_DateTimeFromString_ReturnValue);// 0x1c01fa0
	static void Global_SpawnNewbieTips(CanvasPanel* ParentWidget, Widget* GuidWidget, out FString TipTxt, int ShapeType, bool ShowSpreadEffect, bool IsOneLine, float LineHorLength, float LineVertLength, Object* __WorldContext, out NewbieTips_Auto_C* NewBieTip, Margin K2Node_MakeStruct_Margin, PlayerController* CallFunc_GetPlayerController_ReturnValue, Anchors K2Node_MakeStruct_Anchors, NewbieTips_Auto_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x1c01fa0
	static void ChangeBrushColor(SlateBrush Brush, LinearColor Color, Object* __WorldContext, out SlateBrush NewBrush, SlateColor K2Node_MakeStruct_SlateColor, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x1c01fa0
	static void UpdateImageTint(Image* Image, LinearColor Color, Object* __WorldContext, SlateBrush CallFunc_ChangeBrushColor_NewBrush);// 0x1c01fa0
	static void UpdateNationImage(Image* Image, FString RoleNation, Object* __WorldContext, bool CallFunc_GetNationSwitch_ret, bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1c01fa0
	static void UpdateImageByPath(Image* Image, FString Path, Object* __WorldContext);// 0x1c01fa0
	static void ShowItemTipsByWidget(int ItemID, Widget* Widget, Vector2D LocalCoordinate, bool IsLimit, FString Times, int ColorID, int PatternID, int ItemCount, Object* __WorldContext, bp_global_C* LuaRef, bp_global_C* CallFunc_GetGlobalData_globalObj, BP_STRUCT_GlobalTips_TimeInfo K2Node_MakeStruct_BP_STRUCT_GlobalTips_TimeInfo, Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_LocalToViewport_PixelPosition, Vector2D CallFunc_LocalToViewport_ViewportPosition, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue2, BP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos);// 0x1c01fa0
	static void SetHumanLightProperty(Object* __WorldContext);// 0x1c01fa0
	static void SetWeaponLightProperty(Object* __WorldContext);// 0x1c01fa0
	static void GetCameraMod(Object* __WorldContext, out int mod, PlayerController* CallFunc_GetPlayerController_ReturnValue, int CallFunc_GetViewportSize_SizeX, int CallFunc_GetViewportSize_SizeY, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x1c01fa0
	static void IsJapanOrKorea(Object* __WorldContext, out bool Result, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	static void GetLobbyRankTexture(int rankIntegral, Object* __WorldContext, out Texture2D* Output, Global_Bp_C* CallFunc_GetLobbyGlobalBp_AsGlobal_Bp, bool CallFunc_IsValid_ReturnValue, Texture2D* CallFunc_GetRankTexture_output);// 0x1c01fa0
	static void GetGameGender(Object* __WorldContext, out int gender, bp_global_C* CallFunc_GetGlobalData_globalObj);// 0x1c01fa0
	static void SwitchSceneCameraByIndex(int idx, float blendTime, bool skipNotify, Object* __WorldContext, byte HightAspectRatio, bool needSwitch, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, int CallFunc_GetViewportSize_SizeX, int CallFunc_GetViewportSize_SizeY, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, FrontendUtils* CallFunc_GetUtils_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, LuaBPVar CallFunc_IntToLVar_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString Temp_string_Variable, LuaBPVar Temp_struct_Variable, LuaBPVar Temp_struct_Variable2, LuaBPVar Temp_struct_Variable3, LuaBPVar Temp_struct_Variable4, UAEDataTable* CallFunc_GetDataTable_ReturnValue, LuaBPVar Temp_struct_Variable5, BP_STRUCT_LobbyCameraInfo_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, LuaBPVar CallFunc_CallLuaWithMultiArgs_OutA, LuaBPVar CallFunc_CallLuaWithMultiArgs_OutB, LuaBPVar CallFunc_CallLuaWithMultiArgs_OutC, LuaBPVar CallFunc_CallLuaWithMultiArgs_OutD, bool CallFunc_IsValid_ReturnValue, int CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, int CallFunc_Len_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString[] CallFunc_ParseIntoArray_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue8, FString[] CallFunc_ParseIntoArray_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue9, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, int CallFunc_Conv_StringToInt_ReturnValue, Vector CallFunc_MakeVector_ReturnValue4, byte CallFunc_Conv_IntToByte_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue13, byte CallFunc_GetValidValue_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, Rotator CallFunc_MakeRotator_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue3);// 0x1c01fa0
	static void SetItemQuality(int ItemQuality, Image* imageres, Object* __WorldContext, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x1c01fa0
	static void SetSceneSkyLightProperty(FString lightName, Transform Trans, float Intensity, LinearColor Color, Object* __WorldContext);// 0x1c01fa0
	static void SetLobbyDefaultLightProperty(Object* __WorldContext);// 0x1c01fa0
	static void SetScenePointLightProperty(FString lightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius, Object* __WorldContext);// 0x1c01fa0
	static void SetSceneDirectionalLightProperty(FString lightName, Transform targetTrans, float Intensity, LinearColor Color, Object* __WorldContext);// 0x1c01fa0
	static void SwitchLobbyCameraByIndex(int Index, float blendTime, Object* __WorldContext, out bool Success, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess3, int CallFunc_FTrunc_ReturnValue);// 0x1c01fa0
	static void SwitchLobbyMeshBg(int BgIdx, Object* __WorldContext, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, FrontendUtils* CallFunc_GetUtils_ReturnValue, Actor* CallFunc_GetSceneMatChangeableMeshByIdx_ReturnValue, LobbyMatChgActor* K2Node_DynamicCast_AsLobby_Mat_Chg_Actor, bool K2Node_DynamicCast_bSuccess2);// 0x1c01fa0
	static void GetPlatfromDisplayName(FString strChannel, Object* __WorldContext, out FString showChannel, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	static void GetPlayerPrefs(Object* __WorldContext, out PlayerPrefs_C* bp_playerprefs, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_DoesSaveGameExist_ReturnValue, PlayerPrefs_C* K2Node_DynamicCast_AsPlayer_Prefs, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	static void ShowLobbyMenuEnterAnimation(Object* __WorldContext);// 0x1c01fa0
	static void NoReferenceAssetContainer(Object* __WorldContext, out ParticleSystem*[] Ret, ParticleSystem*[] NoReferencedParticles, ParticleSystem*[] K2Node_MakeArray_Array);// 0x1c01fa0
	static void GetLobbyGlobalBp(Object* __WorldContext, out Global_Bp_C* AsGlobal Bp, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, UAEUserWidget* CallFunc_GetWidget_ReturnValue, Global_Bp_C* K2Node_DynamicCast_AsGlobal_Bp, bool K2Node_DynamicCast_bSuccess3);// 0x1c01fa0
	static void GetLobbyFrameTexture(int frameLevel, Object* __WorldContext, out Texture2D* Output);// 0x1c01fa0
	static void InvoleBpFunctionNoFetch(FString InName, FString InFunname, Object* __WorldContext, FString FuncName, FName bpname, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue);// 0x1c01fa0
	static void CheckChatPrivacyAcceptStatus(Object* __WorldContext, out bool ChatPrivacyAcceptStatus, bp_global_C* CallFunc_GetGlobalData_globalObj, FString CallFunc_GetAppVersion_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1c01fa0
	static void GetGVoiceInterface(Object* __WorldContext, out GVoiceInterface* outputObj, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue);// 0x1c01fa0
	static void OpenUseItemUI(FString itemInsID, Object* __WorldContext, bp_global_C* CallFunc_GetGlobalData_globalObj);// 0x1c01fa0
	static void ConvertURLByLanguage(FString URL, Object* __WorldContext, out FString convertedURL, FString CallFunc_GetCurrentLanguage_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Replace_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, int CallFunc_FindSubstring_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x1c01fa0
	static void isChineseSymbol(FString Text, Object* __WorldContext, out bool Result, int[] K2Node_MakeArray_Array, int CallFunc_GetCharacterAsNumber_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x1c01fa0
	static void isSpace(FString Text, Object* __WorldContext, out bool Result, int CallFunc_GetCharacterAsNumber_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1c01fa0
	static void GetNationInfo(FString NationCode, Object* __WorldContext, out BP_STRUCT_RegionConfig_type NationInfo, BP_STRUCT_RegionConfig_type NationInfoRet, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_RegionConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_RegionConfig_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2);// 0x1c01fa0
	static void SetImageWithSpriteRes(FString ResPath, Image* Image, Object* __WorldContext);// 0x1c01fa0
	static void GetNationSwitch(FString Name, Object* __WorldContext, out bool Ret, bool NationSwitch, LuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, bp_global_C* K2Node_DynamicCast_AsBp_Global, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_SystemConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	static void GetBpLuaObject(FString bp_name, Object* __WorldContext, out LuaClassObj* Lua obj, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue);// 0x1c01fa0
	static void CheckIfMenuOpen(int MenuId, Object* __WorldContext, out bool Ret, bp_global_C* CallFunc_GetGlobalData_globalObj);// 0x1c01fa0
	static void GetValidStringAll(FString Text, bool CanBeEnglish, bool CanBeNumber, bool CanBeWhiteSpace, bool CanBeChinese, bool CanBeSpace, bool CanBeChineseSymbol, Object* __WorldContext, out FString validText, FString ValidResultText, bool Temp_bool_True_if_break_was_hit_Variable, int CallFunc_Len_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString[] CallFunc_GetCharacterArrayFromString_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Array_Get_Item, bool CallFunc_IsValidChar_Result, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Replace_ReturnValue);// 0x1c01fa0
	static void UpdateLobbyRedpointStatus(bool IsShow, int modeId, Object* __WorldContext, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue, bp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess3, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x1c01fa0
	static void GetItemTimeS_Server(int expire_ts, int valid_hours, Object* __WorldContext, out FString time_s, out bool is_have_limit, FString CallFunc_TimeNumToTimeS_time_s, FString CallFunc_GetLocalizeString_textValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x1c01fa0
	static void GetItemTimeS(int res_id, int FirstTimeNum, Object* __WorldContext, out FString time_s, out bool is_have_limit, BP_STRUCT_Item_type CallFunc_GetItemTableRow_Item, FString CallFunc_TimeNumToTimeS_time_s, FString CallFunc_GetLocalizeString_textValue, int CallFunc_Len_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Replace_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_GetLocalizeString_textValue2);// 0x1c01fa0
	static void TimeNumToTimeS(int time_num, Object* __WorldContext, out FString time_s, FString CallFunc_GetLocalizeString_textValue, FString CallFunc_GetLocalizeString_textValue2, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x1c01fa0
	static void ShowItemTipsWithItemInfo(Widget* Button, BP_STRUCT_CommonItemData item_info, Object* __WorldContext, Geometry CallFunc_GetCachedGeometry_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, Vector2D CallFunc_LocalToViewport_PixelPosition, Vector2D CallFunc_LocalToViewport_ViewportPosition, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, int CallFunc_FTrunc_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue3, BP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos, int CallFunc_FTrunc_ReturnValue4, int CallFunc_FTrunc_ReturnValue5, Vector2D CallFunc_GetViewportSize_ReturnValue, BP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos2, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, bp_global_C* CallFunc_GetGlobalData_globalObj, float CallFunc_Subtract_FloatFloat_ReturnValue4, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue5, int CallFunc_FTrunc_ReturnValue6, BP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos3, BP_STRUCT_GlobalTips_TimeInfo K2Node_MakeStruct_BP_STRUCT_GlobalTips_TimeInfo);// 0x1c01fa0
	static void ShowItemTipsByButton(int ItemID, Button* Button, int ColorID, int PatternID, bool ShowLimitIcon, Object* __WorldContext, bp_global_C* LuaRef, bp_global_C* CallFunc_GetGlobalData_globalObj, Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetAbsoluteSize_ReturnValue, Vector2D CallFunc_LocalToViewport_PixelPosition, Vector2D CallFunc_LocalToViewport_ViewportPosition, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue2, BP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos, BP_STRUCT_GlobalTips_TimeInfo K2Node_MakeStruct_BP_STRUCT_GlobalTips_TimeInfo);// 0x1c01fa0
	static void CloseItemTips(Object* __WorldContext, bp_global_C* CallFunc_GetGlobalData_globalObj);// 0x1c01fa0
	static void ShowItemTipsByPos(int ItemID, Vector2D Pos, Object* __WorldContext, bp_global_C* LuaRef, bp_global_C* CallFunc_GetGlobalData_globalObj, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue2, BP_STRUCT_GlobalTips_Pos K2Node_MakeStruct_BP_STRUCT_GlobalTips_Pos);// 0x1c01fa0
	static void CreateUAEUserWidget(class UAEUserWidget Class, UAEUserWidget* Parent, Object* __WorldContext, out UAEUserWidget* Widget, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, UAEUserWidget* CallFunc_Create_ReturnValue);// 0x1c01fa0
	static void PlaySoundCloseButton(Object* __WorldContext, int CallFunc_PostEventAtLocation_ReturnValue);// 0x1c01fa0
	static void ShowEffect(out Widget*[] Widget, bool IsShow, Object* __WorldContext, enum Type, int Temp_int_Variable, enum CallFunc_BoolToVisible_visibility, int CallFunc_Add_IntInt_ReturnValue, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x1c01fa0
	static void IsWidgetVisible(Widget* Widget, Object* __WorldContext, out bool visible, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);// 0x1c01fa0
	static void PlaySoundClickButton(Object* __WorldContext, int CallFunc_PostEventAtLocation_ReturnValue);// 0x1c01fa0
	static void IsChinese(FString Text, Object* __WorldContext, out bool Result, int CallFunc_GetCharacterAsNumber_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1c01fa0
	static void SendBAReport(int ButtonType, int Reason, Object* __WorldContext, bp_global_C* CallFunc_GetGlobalData_globalObj);// 0x1c01fa0
	static void IsValidChar(FString Text, bool CanBeEnglish, bool CanBeNumber, bool CanBeWhiteSpace, bool CanBeChinese, bool CanBeSpace, bool CanBeChineseSymbol, Object* __WorldContext, out bool Result, bool CallFunc_isChineseSymbol_Result, bool CallFunc_isSpace_Result, bool CallFunc_IsChinese_Result, bool CallFunc_IsWhiteSpace_Result, bool CallFunc_IsNumber_Result, bool CallFunc_IsEnglish_isEnglish);// 0x1c01fa0
	static void IsNumber(FString Text, Object* __WorldContext, out bool Result, int CallFunc_GetCharacterAsNumber_ReturnValue, int CallFunc_GetCharacterAsNumber_ReturnValue2, int CallFunc_GetCharacterAsNumber_ReturnValue3, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1c01fa0
	static void IsWhiteSpace(FString Text, Object* __WorldContext, out bool Result, int CallFunc_GetCharacterAsNumber_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x1c01fa0
	static void GetTextLength(FString Text, bool chineseSensity, Object* __WorldContext, out int Length, int TextLength, int CallFunc_Len_ReturnValue, FString[] CallFunc_GetCharacterArrayFromString_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Array_Get_Item, bool CallFunc_IsWhiteSpace_Result, bool CallFunc_IsNumeric_ReturnValue, bool CallFunc_IsEnglish_isEnglish, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue3);// 0x1c01fa0
	static void BoolToVisible(bool visible, bool collapse, bool isButton, Object* __WorldContext, out enum Visibility);// 0x1c01fa0
	static void GetValidString(int maxLength, FString Text, bool CanBeEnglish, bool CanBeNumber, bool CanBeSpace, bool CanBeChinese, bool chineseSensity, Object* __WorldContext, out FString validText, FString ValidResultText, int CallFunc_Len_ReturnValue, int CallFunc_GetTextLength_length, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Left_ReturnValue, int CallFunc_Len_ReturnValue2, FString[] CallFunc_GetCharacterArrayFromString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Replace_ReturnValue, bool CallFunc_IsValidChar_Result, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1c01fa0
	static void IsEnglish(FString Text, Object* __WorldContext, out bool IsEnglish, int CallFunc_GetCharacterAsNumber_ReturnValue, int CallFunc_GetCharacterAsNumber_ReturnValue2, int CallFunc_GetCharacterAsNumber_ReturnValue3, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_GetCharacterAsNumber_ReturnValue4, int CallFunc_GetCharacterAsNumber_ReturnValue5, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_GetCharacterAsNumber_ReturnValue6, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x1c01fa0
	static void OpenURL(FString URL, Object* __WorldContext, bp_global_C* CallFunc_GetGlobalData_globalObj);// 0x1c01fa0
	static void UpdateRankName(TextBlock* Text, int Level, Object* __WorldContext, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BP_STRUCT_MilitaryRankLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x1c01fa0
	static void UpdateRankIcon(Image* imageObj, int Level, Object* __WorldContext, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_MilitaryRankLevel_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1c01fa0
	static void GetGlobalData(Object* __WorldContext, out bp_global_C* globalObj, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue, bp_global_C* K2Node_DynamicCast_AsBp_Global, bool K2Node_DynamicCast_bSuccess3);// 0x1c01fa0
	static void InvoleBpFunction(FString bp_name, FString func_name, Object* __WorldContext, FString FuncName, FName bpname, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue);// 0x1c01fa0
	static void GetLocalizeString(int ID, FString string1, FString string2, FString string3, Object* __WorldContext, out FString TextValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FText CallFunc_Conv_StringToText_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FName CallFunc_Conv_StringToName_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue4, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x1c01fa0
	static void GetGlobalUIEventDispatcher(FrontendHUD* FrontendHUD, Object* __WorldContext, out GlobalUIEventDispatcher_BP_C* NewParam, FrontendUtils* CallFunc_GetUtils_ReturnValue, Object* CallFunc_GetGlobalUIEventDispatcher_ReturnValue, GlobalUIEventDispatcher_BP_C* K2Node_DynamicCast_AsGlobal_UIEvent_Dispatcher_BP, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0

--------------------------------
Class: BP_STRUCT_CorpsIconColor_type
	int ID_0_52760C80425177D07DAE1F650BD163E4;//[Offset: 0x0, Size: 0x4]
	int GNum_1_373F670000ACE8EC1AE46FEE01639E6D;//[Offset: 0x4, Size: 0x4]
	int RNum_2_6CDA49C06AA821FF1ACB3BEC01626E6D;//[Offset: 0x8, Size: 0x4]
	int BNum_3_591045C044DDA06F1AEA692201636E6D;//[Offset: 0xc, Size: 0x4]
	FString Color_4_02A7A9005D76F20C79AF79E8063C0072;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: BP_STRUCT_CorpsConfig_type
	FString ConfigValue_0_306151800211D5305EAE9A9700E1D6A5;//[Offset: 0x0, Size: 0xc]
	FString ConfigName_1_72343280216367E6602CC642010A9D65;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BP_STRUCT_MilitaryRankLevel_type
	FString MilitaryRankName_0_6803185A4F44EE4389F6A3B24C13845F;//[Offset: 0x0, Size: 0xc]
	int Exp_1_0727D7694F81C282360C298C96801A35;//[Offset: 0xc, Size: 0x4]
	FString MilitaryRankType_2_F858884B40EBC459D56457B1741D963D;//[Offset: 0x10, Size: 0xc]
	int Level_3_756F8DA14F48640682AFFFBD2A052F83;//[Offset: 0x1c, Size: 0x4]
	FString MilitaryRankBigIconPath_4_9A4E25B74B0B8657724BD1AD59F3CB7C;//[Offset: 0x20, Size: 0xc]
	FString MilitaryRankSmallIconPath_5_F068C6BA4EB3CFAFA8CD159178EB8765;//[Offset: 0x2c, Size: 0xc]
	FString MilitaryRankTypeIconPath_6_9AE9634945BC5B59F5709EB9C63E9970;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: BP_STRUCT_LobbyCameraInfo_type
	FString BlendTime_0_48FF35C029EC8B7B17E35E2A01AA1EF5;//[Offset: 0x0, Size: 0xc]
	FString CameraRotation_1_1901DF00292BF94210F0DE080C2A13CE;//[Offset: 0xc, Size: 0xc]
	FString FieldOfView_2_774965C01E82608B78610A1F0CEEDE07;//[Offset: 0x18, Size: 0xc]
	FString ProjectMode_3_05044FC04CBC5C8904E0C53F08075A45;//[Offset: 0x24, Size: 0xc]
	FString CameraLocation_4_337EB9401C40211F6EB5E73A0F1A116E;//[Offset: 0x30, Size: 0xc]
	FString CameraScale_5_187545000777A7B8563DCE430BD94005;//[Offset: 0x3c, Size: 0xc]
	int CameraID_6_2E8DAE400C973D5F0716503A0A82BED4;//[Offset: 0x48, Size: 0x4]
	FString CameraLocationX_7_0D8E2F407AB6F6691CDF865C01A117C8;//[Offset: 0x4c, Size: 0xc]
	FString CameraLocationWidth_8_2795B9402C37D69925FC607507CC5AB8;//[Offset: 0x58, Size: 0xc]
	FString LightLevelName_15_4980F50004BC70381F310B1E0DE28A45;//[Offset: 0x64, Size: 0xc]
	FString AvatarPositionLong_16_2F4DC9C079A02A0560B7794104E7A257;//[Offset: 0x70, Size: 0xc]
	FString SceneName_17_3B50D48067150C2E7CDC093801ABE845;//[Offset: 0x7c, Size: 0xc]
	FString AvatarPositionWidth_18_699EA5C07AF9251538B9AA9D0E76BAE8;//[Offset: 0x88, Size: 0xc]
	FString AvatarPosition_19_2DCEE5C039B936A35A436F3D04B414DE;//[Offset: 0x94, Size: 0xc]
	FString CameraAnimationPath_20_4B7A7640586729291B2F6F2408CB7BE8;//[Offset: 0xa0, Size: 0xc]
	FString CameraAnimationPathLong_21_3EB85A40709683A7360F690B0BE5FF37;//[Offset: 0xac, Size: 0xc]

--------------------------------
Class: BP_STRUCT_RegionConfig_type
	FString RegionName_0_6FD56A274264F9D23BF6E78649990B96;//[Offset: 0x0, Size: 0xc]
	FString RegionCode_1_5DC6C7FB4FECF18D480EFAA3DE14C386;//[Offset: 0xc, Size: 0xc]
	FString NationLang_2_E7700BFA44598D0C74CD639FE4FC307D;//[Offset: 0x18, Size: 0xc]
	int IsNation_3_00FBDD66481A878845FE90B9489F0408;//[Offset: 0x24, Size: 0x4]
	FString res_path_4_1CDB9AEE44DDB2ADB7DB72921E8181A7;//[Offset: 0x28, Size: 0xc]
	FString sort_key_5_CBE9558C47B42D474F2C8F9D0A3E0021;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: BP_STRUCT_SystemConfig_type
	FString ConfigName_0_B351EBDD4943D6FD5424AEA22C61E67A;//[Offset: 0x0, Size: 0xc]
	FString ConfigValue_1_620016104053F64B0B760E850ADBE839;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: BP_STRUCT_CommonItemData
	int count_1_AAF73B26409C664053B0D480875DF1FC;//[Offset: 0x0, Size: 0x4]
	int res_id_2_D7E4E79043F24F18D6FD60806FC0F5B7;//[Offset: 0x4, Size: 0x4]
	int quality_6_780EECF244A4EA42C9ABE6ADBC97986B;//[Offset: 0x8, Size: 0x4]
	bool isSelected_7_79B52F524E830F0B45BF21A0AD0C79FB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool isNew_8_283C7F274004CE4583E6988CFED70773;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool isUsing_9_D820856A433734B499F22B92FC9C781D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	FString ins_id_12_F145E80F49630B6C92026BAB085F7FA7;//[Offset: 0x10, Size: 0xc]
	FString limitTimeStr_13_DFF8155F4D98123B51BE2D8CC020ADC3;//[Offset: 0x1c, Size: 0xc]
	FString itemName_14_AD711E5446FDA105FD03EEB108CBFF48;//[Offset: 0x28, Size: 0xc]
	bool needShowName_15_C8DBF0F2499E16778D860FB0D6AFD73D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool hasLimitTime_16_22C0511C4CBE4C575212B9B08FA2107C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool hasLock_17_B1F713EE43FE9CFB5E198C9D34A96E86;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool isSourceBook_18_89E8BB2543AC5613EA5920A87189310A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	int index_19_E8B16AA944FC8253477886AC86876E71;//[Offset: 0x38, Size: 0x4]
	bool isIsolated_23_53DEDE0061EB48F44575C38F03E37894;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int useCount_24_6D042F4050C524292F66FFB40FB3EB64;//[Offset: 0x40, Size: 0x4]
	bool isRolewear_25_171761001E1B031836B1EA900FAD2532;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	int color_id_26_7CFA8C802CE551E046742CFF041E0584;//[Offset: 0x48, Size: 0x4]
	int pattern_id_27_24C2C4404642963D7D562E77014ABB64;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: BP_STRUCT_LocalizeRes_type
	FString TextValue_0_4D37165A410D67320AF278A1C1028E4F;//[Offset: 0x0, Size: 0xc]
	int TextId_1_20B947934F165858A322E599888F816E;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Editor_login_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2d0, Size: 0x4]
	void SetFpsByIndex(int idx, int CallFunc_Subtract_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x1c01fa0
	void PCLogin(GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue);// 0x1c01fa0
	void InitSplashUI(GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue);// 0x1c01fa0
	void InitLoginUI(GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue);// 0x1c01fa0
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x1c01fa0
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x1c01fa0
	void ReceiveBeginPlay();// 0x1c01fa0
	void InpAxisKeyEvt_Tilt_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x1c01fa0
	void ExecuteUbergraph_Editor_login(int EntryPoint, Vector K2Node_InputVectorAxisEvent_AxisValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, LuaBPVar CallFunc_FloatToLVar_ReturnValue, LuaBPVar CallFunc_FloatToLVar_ReturnValue2, LuaBPVar CallFunc_FloatToLVar_ReturnValue3, Key K2Node_InputKeyEvent_Key, LuaClassObj* CallFunc_GetBpLuaObject_Lua_obj, Key K2Node_InputKeyEvent_Key2, bp_lobby_C* K2Node_DynamicCast_AsBp_Lobby, bool K2Node_DynamicCast_bSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess2, int CallFunc_GetFPSLevel_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FString Temp_string_Variable, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_NotEqual_IntInt_ReturnValue, LuaBPVar Temp_struct_Variable, LuaBPVar CallFunc_CallLuaWithArgs_OutA, LuaBPVar CallFunc_CallLuaWithArgs_OutB, LuaBPVar CallFunc_CallLuaWithArgs_OutC, LuaBPVar CallFunc_CallLuaWithArgs_OutD);// 0x1c01fa0
	UAEUserWidget* loginWindow;//[Offset: 0x2d4, Size: 0x4]

--------------------------------
Class: Login_Update_UIBP_C.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x4]
	void UpdateStartShaderPreCompile(FString CallFunc_GetLocalizeString_textValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x1c01fa0
	void UpdateProgressShaderPreCompile(float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x1c01fa0
	void OnShaderPreCompileTimer();// 0x1c01fa0
	void StopShaderPreCompileTimer();// 0x1c01fa0
	void StartDownloadCDNContent(LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_versionupdate_C* K2Node_DynamicCast_AsBp_Versionupdate, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1c01fa0
	void GrayShowWaiting();// 0x1c01fa0
	void RetryDownload(FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void NoWifiStartUpdate(FString CallFunc_GetPlatformName_ReturnValue, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bp_versionupdate_C* K2Node_DynamicCast_AsBp_Versionupdate, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void ShowWaiting();// 0x1c01fa0
	void OnFinished();// 0x1c01fa0
	void onShow(FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_HasActiveWiFiConnection_ReturnValue, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_versionupdate_C* K2Node_DynamicCast_AsBp_Versionupdate, bool K2Node_DynamicCast_bSuccess, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2);// 0x1c01fa0
	void ShowUpdateUI();// 0x1c01fa0
	void UpdateFinish();// 0x1c01fa0
	void StartUpdate(FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, GDolphinUpdater* CallFunc_GetUpdater_ReturnValue);// 0x1c01fa0
	void CancelUpdate(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, GDolphinUpdater* CallFunc_GetUpdater_ReturnValue);// 0x1c01fa0
	void NoticeUpdate();// 0x1c01fa0
	void SetCurStage(FString Stage, FString CallFunc_GetLocalizeText_Text, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetLocalizeText_Text2, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_GetLocalizeText_Text3, FText CallFunc_Conv_StringToText_ReturnValue3, FString CallFunc_GetLocalizeText_Text4, FText CallFunc_Conv_StringToText_ReturnValue4, FString CallFunc_GetLocalizeText_Text5, FText CallFunc_Conv_StringToText_ReturnValue5, FString CallFunc_GetLocalizeText_Text6, FString CallFunc_GetLocalizeText_Text7, FText CallFunc_Conv_StringToText_ReturnValue6, FText CallFunc_Conv_StringToText_ReturnValue7, FString CallFunc_GetLocalizeText_Text8, FString CallFunc_GetLocalizeText_Text9, FText CallFunc_Conv_StringToText_ReturnValue8, FText CallFunc_Conv_StringToText_ReturnValue9, FString CallFunc_GetLocalizeText_Text10, FText CallFunc_Conv_StringToText_ReturnValue10, bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue3, bool CallFunc_NotEqual_StrStr_ReturnValue4, bool CallFunc_NotEqual_StrStr_ReturnValue5, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_GetLocalizeText_Text11, bool CallFunc_BooleanAND_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue11, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_NotEqual_StrStr_ReturnValue6);// 0x1c01fa0
	void RefreshProgress(int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_versionupdate_C* K2Node_DynamicCast_AsBp_Versionupdate, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchString_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue, bool K2Node_SwitchString2_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue2, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, GDolphinUpdater* CallFunc_GetUpdater_ReturnValue, float CallFunc_GetCurStage_percent, int CallFunc_GetCurStage_GetCurVal, int CallFunc_GetCurStage_GetMaxVal, int CallFunc_GetCurStage_ReturnValue, bool CallFunc_IsGrayUpdate_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1c01fa0
	void onRequestHandler_5B5DFD874209B365CDBEF886B12FAA9F(CDNDownloaderInfo Info);// 0x1c01fa0
	void Construct();// 0x1c01fa0
	void BndEvt__Button_Cancel_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_Updated_K2Node_ComponentBoundEvent_21_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void DownloadCDNContent(FString URL, int loaderType, FString savedDir, bool CDNNeedBreakpointContinualTransfer);// 0x1c01fa0
	void ExecuteUbergraph_Login_Update_UIBP(int EntryPoint, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_versionupdate_C* K2Node_DynamicCast_AsBp_Versionupdate, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, CDNDownloaderInfo K2Node_CustomEvent_info, CDNDownloaderInfo Temp_struct_Variable, FString CallFunc_GetLocalizeString_textValue, FString K2Node_CustomEvent_url, int K2Node_CustomEvent_loaderType, FString K2Node_CustomEvent_savedDir, bool K2Node_CustomEvent_CDNNeedBreakpointContinualTransfer, FText CallFunc_Conv_StringToText_ReturnValue, AsyncTaskCDNDownloader* CallFunc_DownloadCDNContent_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1c01fa0
	Button* Button_Cancel;//[Offset: 0x2f4, Size: 0x4]
	Button* Button_Updated;//[Offset: 0x2f8, Size: 0x4]
	GridPanel* GridPanel_IPX;//[Offset: 0x2fc, Size: 0x4]
	GridPanel* GridPanel_NoWifiUpdated;//[Offset: 0x300, Size: 0x4]
	GridPanel* GridPanel_UpdateUI;//[Offset: 0x304, Size: 0x4]
	GridPanel* GridPanel_WifiUpdated;//[Offset: 0x308, Size: 0x4]
	HorizontalBox* HorizontalBox_VersionSizeInfo;//[Offset: 0x30c, Size: 0x4]
	Login_UIPanelBG_C* Login_UIPanelBG;//[Offset: 0x310, Size: 0x4]
	ProgressBar* ProgressBar_Update;//[Offset: 0x314, Size: 0x4]
	Reconnect_BP_C* Reconnect_BP;//[Offset: 0x318, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x31c, Size: 0x4]
	TextBlock* TextBlock_Current;//[Offset: 0x320, Size: 0x4]
	TextBlock* TextBlock_Max;//[Offset: 0x324, Size: 0x4]
	UTRichTextBlock* UpdateTips;//[Offset: 0x328, Size: 0x4]
	UTRichTextBlock* UpdateTips2;//[Offset: 0x32c, Size: 0x4]
	UTRichTextBlock* UpdateTips3;//[Offset: 0x330, Size: 0x4]
	VerticalBox* VerticalBox_autoHide;//[Offset: 0x334, Size: 0x4]
	VerticalBox* VerticalBox_UpdateInfo;//[Offset: 0x338, Size: 0x4]
	FString Unit;//[Offset: 0x33c, Size: 0xc]
	FString curStage;//[Offset: 0x348, Size: 0xc]
	BP_STRUCT_VersionUpdateInfo UpdateInfo;//[Offset: 0x354, Size: 0x64]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	bool noticed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 0x1]
	bool checkVersionNoConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 0x1]
	bool IsGrayUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 0x1]
	int CurVal;//[Offset: 0x3bc, Size: 0x4]
	int MaxVal;//[Offset: 0x3c0, Size: 0x4]
	float Percent;//[Offset: 0x3c4, Size: 0x4]
	bp_versionupdate_C* LuaObject;//[Offset: 0x3c8, Size: 0x4]

--------------------------------
Class: bp_versionupdate_C.LuaClassObj.LuaContext.Actor.Object
	void EventNoWifiNotifyAndroidAppUpdate_Push_NoFetch();// 0x1c01fa0
	void EventNoWifiNotifyAndroidAppUpdate_Push();// 0x1c01fa0
	void EventWindowsAppUpdate_NoFetch();// 0x1c01fa0
	void EventWindowsAppUpdate();// 0x1c01fa0
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void EventShaderCompileProgress_NoFetch();// 0x1c01fa0
	void EventShaderCompileProgress();// 0x1c01fa0
	void EventNoWifiNotifyIOSAppUpdate_Push_NoFetch();// 0x1c01fa0
	void EventNoWifiNotifyIOSAppUpdate_Push();// 0x1c01fa0
	void EventNoConnectionStartUpdate_Push_NoFetch();// 0x1c01fa0
	void EventNoConnectionStartUpdate_Push();// 0x1c01fa0
	void EventWifiNotifyAndroidAppUpdate_Push_NoFetch();// 0x1c01fa0
	void EventWifiNotifyAndroidAppUpdate_Push();// 0x1c01fa0
	void EventWifiNotifyIOSAppUpdate_Push_NoFetch();// 0x1c01fa0
	void EventWifiNotifyIOSAppUpdate_Push();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	BP_STRUCT_VersionUpdateInfo BP_STRUCT_VersionUpdateInfo;//[Offset: 0x304, Size: 0x64]
	FString BP_CDNLoaderUrl;//[Offset: 0x368, Size: 0xc]
	FString BP_CDNLoaderSavedDir;//[Offset: 0x374, Size: 0xc]
	bool BP_EnableCDNGetVersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool BP_IsExamin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	bool BP_CDNNeedBreakpointContinualTransfer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 0x1]
	int BP_ShaderCompileCurPercent;//[Offset: 0x384, Size: 0x4]
	int BP_CurPercent;//[Offset: 0x388, Size: 0x4]
	FString BP_CurStage;//[Offset: 0x38c, Size: 0xc]
	int BP_CDNLoaderType;//[Offset: 0x398, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x39c, Size: 0x4]

--------------------------------
Class: BP_STRUCT_VersionUpdateInfo
	FString isAppUpdating_0_E6690F6B40E329A7D534F7A9AA1486C2;//[Offset: 0x0, Size: 0xc]
	FString isNeedUpdating_1_7DEF18944AC725B1A2E612BC4173B477;//[Offset: 0xc, Size: 0xc]
	FString versionString_2_E8428CB24748F92CE545E8888CB66610;//[Offset: 0x18, Size: 0xc]
	FString versionDescrition_3_DEA8C78E4626A9BDA6B54B93C187781A;//[Offset: 0x24, Size: 0xc]
	FString userDefineStr_4_B7B148F746032C2F44D4D2BC027AC670;//[Offset: 0x30, Size: 0xc]
	FString isForcedUpdating_6_7853489640C050B24A83EBA7B51CF960;//[Offset: 0x3c, Size: 0xc]
	float needDownloadSize_f_7_B978907241DA7EFAC3D380B44E071BDD;//[Offset: 0x48, Size: 0x4]
	FString isUsingDolphinUpdate_8_3C1DB74043AB6BD7282BE157031EB515;//[Offset: 0x4c, Size: 0xc]
	FString isUsingCDNUpdate_9_059B390042262D66792CE20808B5EA85;//[Offset: 0x58, Size: 0xc]

--------------------------------
Class: Login_UIPanelBG_C.UserWidget.Widget.Visual.Object
	EventReply OnMouseButtonDown(Geometry MyGeometry, out PointerEvent MouseEvent, EventReply K2Node_MakeStruct_EventReply);// 0x1c01fa0
	void Show Effects(bool Is show, enum Type);// 0x1c01fa0
	Image* FX_CloudL;//[Offset: 0x1b0, Size: 0x4]
	Image* FX_Light1;//[Offset: 0x1b4, Size: 0x4]
	Image* FX_Light2;//[Offset: 0x1b8, Size: 0x4]
	Image* FX_Light3;//[Offset: 0x1bc, Size: 0x4]
	Image* FX_Light4;//[Offset: 0x1c0, Size: 0x4]
	Image* FX_LightX;//[Offset: 0x1c4, Size: 0x4]
	Image* FX_Smoke;//[Offset: 0x1c8, Size: 0x4]
	Image* FX_Smoke1;//[Offset: 0x1cc, Size: 0x4]
	Image* FX_Smoke2;//[Offset: 0x1d0, Size: 0x4]
	Image* FX_Smoke3;//[Offset: 0x1d4, Size: 0x4]
	Image* Image;//[Offset: 0x1d8, Size: 0x4]

--------------------------------
Class: Reconnect_BP_C.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x4]
	void HideText();// 0x1c01fa0
	void ShowText(FString CallFunc_GetLocalizeStringWithNum_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x1c01fa0
	void UIHide();// 0x1c01fa0
	void UIShow();// 0x1c01fa0
	void updateTime(FString Time);// 0x1c01fa0
	void Construct();// 0x1c01fa0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1c01fa0
	void ExecuteUbergraph_Reconnect_BP(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x1c01fa0
	Reconnect_UIBP_C* Reconnect_UIBP;//[Offset: 0x2f4, Size: 0x4]
	TextBlock* TextNumber;//[Offset: 0x2f8, Size: 0x4]
	TextBlock* TextInfo;//[Offset: 0x2fc, Size: 0x4]
	HorizontalBox* BoxText;//[Offset: 0x300, Size: 0x4]
	bool isShowText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	int StartTime;//[Offset: 0x308, Size: 0x4]
	float lastTickTime;//[Offset: 0x30c, Size: 0x4]
	float curTickTIme;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: Reconnect_UIBP_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b0, Size: 0x4]
	void Construct();// 0x1c01fa0
	void BndEvt__Button_Bg_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void ExecuteUbergraph_Reconnect_UIBP(int EntryPoint);// 0x1c01fa0
	WidgetAnimation* DX_Bullet;//[Offset: 0x1b4, Size: 0x4]
	Button* Button_Bg;//[Offset: 0x1b8, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x1bc, Size: 0x4]

--------------------------------
Class: bp_authorization_C.LuaClassObj.LuaContext.Actor.Object
	void EventLoginCheck_NoFetch();// 0x1c01fa0
	void EventLoginCheck();// 0x1c01fa0
	void EventAskForPrivacyPolicy_NoFetch();// 0x1c01fa0
	void EventAskForPrivacyPolicy();// 0x1c01fa0
	void EventShowVLinkFromAuthorization_NoFetch();// 0x1c01fa0
	void EventShowVLinkFromAuthorization();// 0x1c01fa0
	void EventShowPushShortTips_NoFetch();// 0x1c01fa0
	void EventShowPushShortTips();// 0x1c01fa0
	void EventAutoAuthLogin_NoFetch();// 0x1c01fa0
	void EventAutoAuthLogin();// 0x1c01fa0
	void EventRedoAutoAuthorization_NoFetch();// 0x1c01fa0
	void EventRedoAutoAuthorization();// 0x1c01fa0
	void EventClearChannelID_NoFetch();// 0x1c01fa0
	void EventClearChannelID();// 0x1c01fa0
	void EventGCLoginTimeOut_NoFetch();// 0x1c01fa0
	void EventGCLoginTimeOut();// 0x1c01fa0
	void EventDeleteSavedDir_NoFetch();// 0x1c01fa0
	void EventDeleteSavedDir();// 0x1c01fa0
	void EventShowPushLongTips_NoFetch();// 0x1c01fa0
	void EventShowPushLongTips();// 0x1c01fa0
	void EventGetPrivacyPolicyVersion_NoFetch();// 0x1c01fa0
	void EventGetPrivacyPolicyVersion();// 0x1c01fa0
	void EventGetUserAgreementVersion_NoFetch();// 0x1c01fa0
	void EventGetUserAgreementVersion();// 0x1c01fa0
	void EventAskForUserAgreement_NoFetch();// 0x1c01fa0
	void EventAskForUserAgreement();// 0x1c01fa0
	void EventShowPushTipsThenLogin_NoFetch();// 0x1c01fa0
	void EventShowPushTipsThenLogin();// 0x1c01fa0
	void EventShowService_NoFetch();// 0x1c01fa0
	void EventShowService();// 0x1c01fa0
	void EventQuickLogin_NoFetch();// 0x1c01fa0
	void EventQuickLogin();// 0x1c01fa0
	void EventShowPrivacyAgreement_NoFetch();// 0x1c01fa0
	void EventShowPrivacyAgreement();// 0x1c01fa0
	void EventLoginTimeOut_NoFetch();// 0x1c01fa0
	void EventLoginTimeOut();// 0x1c01fa0
	void EventLogout_NoFetch();// 0x1c01fa0
	void EventLogout();// 0x1c01fa0
	void EventClearLoginLimit_NoFetch();// 0x1c01fa0
	void EventClearLoginLimit();// 0x1c01fa0
	void EventAddLoginCount_NoFetch();// 0x1c01fa0
	void EventAddLoginCount();// 0x1c01fa0
	void EventUpdateLoginTime_NoFetch();// 0x1c01fa0
	void EventUpdateLoginTime();// 0x1c01fa0
	void EventClickKefu_NoFetch();// 0x1c01fa0
	void EventClickKefu();// 0x1c01fa0
	void EventShowNoticeBeforeLogin_NoFetch();// 0x1c01fa0
	void EventShowNoticeBeforeLogin();// 0x1c01fa0
	void EventStartAuthorization_NoFetch();// 0x1c01fa0
	void EventStartAuthorization();// 0x1c01fa0
	void EventGetLoginTypeList_NoFetch();// 0x1c01fa0
	void EventGetLoginTypeList();// 0x1c01fa0
	void EventAuthShowConnect_NoFetch();// 0x1c01fa0
	void EventAuthShowConnect();// 0x1c01fa0
	void EventAuthHideConnect_NoFetch();// 0x1c01fa0
	void EventAuthHideConnect();// 0x1c01fa0
	void EventLoginWithoutBasePakInNoMiniVersion_NoFetch();// 0x1c01fa0
	void EventLoginWithoutBasePakInNoMiniVersion();// 0x1c01fa0
	void EventOpenRepairDailog_NoFetch();// 0x1c01fa0
	void EventOpenRepairDailog();// 0x1c01fa0
	void EventGetCustomerServiceOpenStatus_NoFetch();// 0x1c01fa0
	void EventGetCustomerServiceOpenStatus();// 0x1c01fa0
	void EventShowCustomerService_NoFetch();// 0x1c01fa0
	void EventShowCustomerService();// 0x1c01fa0
	void EventEnterLanguageSetting_NoFetch();// 0x1c01fa0
	void EventEnterLanguageSetting();// 0x1c01fa0
	void EventShowNotInstallVkMsg_NoFetch();// 0x1c01fa0
	void EventShowNotInstallVkMsg();// 0x1c01fa0
	void EventShowTouristNotice_NoFetch();// 0x1c01fa0
	void EventShowTouristNotice();// 0x1c01fa0
	void EventShowNotInstallWechatMsg_NoFetch();// 0x1c01fa0
	void EventShowNotInstallWechatMsg();// 0x1c01fa0
	void EventCheckWeChatInstalled_NoFetch();// 0x1c01fa0
	void EventCheckWeChatInstalled();// 0x1c01fa0
	void EventShowRefuse_NoFetch();// 0x1c01fa0
	void EventShowRefuse();// 0x1c01fa0
	void EventStartLogin_NoFetch();// 0x1c01fa0
	void EventStartLogin();// 0x1c01fa0
	void EventGameVersion_NoFetch();// 0x1c01fa0
	void EventGameVersion();// 0x1c01fa0
	void EventBeforeAuthLogin_NoFetch();// 0x1c01fa0
	void EventBeforeAuthLogin();// 0x1c01fa0
	void EventUnrealLogoBtnClick_NoFetch();// 0x1c01fa0
	void EventUnrealLogoBtnClick();// 0x1c01fa0
	void EventAuthShowButtons_NoFetch();// 0x1c01fa0
	void EventAuthShowButtons();// 0x1c01fa0
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	int BP_WECHAT_INSTALL;//[Offset: 0x304, Size: 0x4]
	int BP_LoginCount;//[Offset: 0x308, Size: 0x4]
	int BP_TokenIsValid;//[Offset: 0x30c, Size: 0x4]
	FString BP_GameVersion;//[Offset: 0x310, Size: 0xc]
	FString BP_QQPasswd;//[Offset: 0x31c, Size: 0xc]
	int BP_DeviceLimit;//[Offset: 0x328, Size: 0x4]
	int BP_PrivacyPolicyVersion;//[Offset: 0x32c, Size: 0x4]
	int BP_LoginTime;//[Offset: 0x330, Size: 0x4]
	int BP_AutoAuthLogin;//[Offset: 0x334, Size: 0x4]
	FString BP_QQID;//[Offset: 0x338, Size: 0xc]
	int BP_LoginCheck;//[Offset: 0x344, Size: 0x4]
	FString[] BP_ARRAY_LoginTypeOrderList;//[Offset: 0x348, Size: 0xc]
	int BP_MaxLoginTypeNum;//[Offset: 0x354, Size: 0x4]
	FString BP_AuthLoginChannel;//[Offset: 0x358, Size: 0xc]
	bool BP_IsCustomerServiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	bool HasShowDeviceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	FString BP_DeviceNameBeforeAuthLogin;//[Offset: 0x368, Size: 0xc]
	int BP_UserAgreementVersion;//[Offset: 0x374, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x378, Size: 0x4]

--------------------------------
Class: GlobalUIContainer_BP_C.UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f8, Size: 0x4]
	void AddWidgetInternal(UserWidget* Widget);// 0x1c01fa0
	void RemoveWidgetInternal(UserWidget* Widget);// 0x1c01fa0
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x1c01fa0
	void ExecuteUbergraph_GlobalUIContainer_BP(int EntryPoint, Anchors K2Node_MakeStruct_Anchors, Margin K2Node_MakeStruct_Margin, UserWidget* K2Node_Event_Widget, int K2Node_Event_ZOrder, Anchors K2Node_MakeStruct_Anchors2, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, Margin K2Node_MakeStruct_Margin2, UserWidget* K2Node_Event_Widget2, UserWidget* K2Node_Event_Widget3, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue2, UAEUserWidget* K2Node_DynamicCast_AsUAEUser_Widget, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	CanvasPanel* CanvasContainer;//[Offset: 0x2fc, Size: 0x4]

--------------------------------
Class: BP_SAVEGAME_UIElemLayout_C.SaveGame.Object
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict1;//[Offset: 0x20, Size: 0x3c]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict2;//[Offset: 0x5c, Size: 0x3c]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict3;//[Offset: 0x98, Size: 0x3c]
	bool IsDataValid1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool IsDataValid2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	bool IsDataValid3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	float RushTriggerLength1;//[Offset: 0xd8, Size: 0x4]
	float RushTriggerLength2;//[Offset: 0xdc, Size: 0x4]
	float RushTriggerLength3;//[Offset: 0xe0, Size: 0x4]
	FString SaveSlotName;//[Offset: 0xe4, Size: 0xc]
	FString LayoutName1;//[Offset: 0xf0, Size: 0xc]
	FString LayoutName2;//[Offset: 0xfc, Size: 0xc]
	FString LayoutName3;//[Offset: 0x108, Size: 0xc]
	int TimeTag;//[Offset: 0x114, Size: 0x4]
	int[] InvalidArray1;//[Offset: 0x118, Size: 0xc]
	int[] InvalidArray2;//[Offset: 0x124, Size: 0xc]
	int[] InvalidArray3;//[Offset: 0x130, Size: 0xc]

--------------------------------
Class: BP_STRUCT_UIElemLayoutDetail
	int Type_23_55DBE0E544DAFBECC9EFB6BB17ABA028;//[Offset: 0x0, Size: 0x4]
	Vector2D Scale_17_041C81B04F88C44906CC9C9124ED2CF5;//[Offset: 0x4, Size: 0x8]
	float Opacity_7_DA1E8BC343F74DC18A9B0FBB6DA17CCB;//[Offset: 0xc, Size: 0x4]
	Anchors AnchorType_16_8C6A88824F5B4009F1532EBCA05CA534;//[Offset: 0x10, Size: 0x10]
	Vector2D RelativePos_19_41E2D4F647EC741044D6AC9C8DD94ED4;//[Offset: 0x20, Size: 0x8]
	Vector2D OriginSize_22_61D9CB8A48FFB415806311A1771BDF74;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GlobalBattleUIFunctionLibrary_C.BlueprintFunctionLibrary.Object
	static void SetUseBalanceLayoutIndex(Object* __WorldContext, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	static void GetQuickSignText(Object* WorldContext, int SignType, int ActorId, Object* __WorldContext, out int TextId, LuaBPVar Temp_struct_Variable, LuaBPVar CallFunc_IntToLVar_ReturnValue, LuaBPVar CallFunc_IntToLVar_ReturnValue2, LuaBPVar Temp_struct_Variable2, FString Temp_string_Variable, LuaBPVar CallFunc_CallLuaWithArgs_OutA, LuaBPVar CallFunc_CallLuaWithArgs_OutB, LuaBPVar CallFunc_CallLuaWithArgs_OutC, LuaBPVar CallFunc_CallLuaWithArgs_OutD, int CallFunc_LVarToInt_ReturnValue);// 0x1c01fa0
	static void GetUserSettingSaveGame(Object* __WorldContext, out SettingConfig_C* rlt, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	static void GetQuickSignAudio(Object* WorldContext, int SignType, Object* __WorldContext, out int audioID, SettingConfig_C* CallFunc_GetUserSettingSaveGame_rlt, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, int CallFunc_Array_Get_Item2);// 0x1c01fa0
	static void GetLocalizeVoiceText(FString Key, Object* __WorldContext, out FString Text, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_GetLocalizeBattleText_Text, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1c01fa0
	static void GetLayoutName(int NewParam, Object* __WorldContext, out FString NewParam1, <int,FString> idx2key, <int,FString> K2Node_MakeVariable_MakeVariableOutput, int CallFunc_Percent_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_GetLocalizeText_Text);// 0x1c01fa0
	static void GetCustomSettingSaveGame(int idx, Object* __WorldContext, out BP_SAVEGAME_UIElemLayout_C* SaveGame, BP_SAVEGAME_UIElemLayout_C* RltSaveGame, <int,FString> idex2slotname, FString CallFunc_GetLayoutName_NewParam1, bool CallFunc_IsValid_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, <int,FString> K2Node_MakeVariable_MakeVariableOutput, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue3, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, SaveGame* CallFunc_GetCustomSetting_ReturnValue, BP_SAVEGAME_UIElemLayout_C* K2Node_DynamicCast_AsBP_SAVEGAME_UIElem_Layout, bool K2Node_DynamicCast_bSuccess, BP_SAVEGAME_UIElemLayout_C* K2Node_DynamicCast_AsBP_SAVEGAME_UIElem_Layout2, bool K2Node_DynamicCast_bSuccess2, BP_SAVEGAME_UIElemLayout_C* CallFunc_CreateSaveGameObject_ReturnValue);// 0x1c01fa0
	static void GetGameFireMode(Object* __WorldContext, out int FireMode, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2);// 0x1c01fa0
	static void PrintLayoutDetail(<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetail, float RushTriggerLength, Object* __WorldContext, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int[] CallFunc_Map_Keys_Keys, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Array_Length_ReturnValue, FText CallFunc_Format_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Get_Item, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, BP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int Temp_int_Loop_Counter_Variable, FText CallFunc_Conv_Vector2dToText_ReturnValue, FText CallFunc_Conv_Vector2dToText_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData K2Node_MakeStruct_FormatArgumentData4, FormatArgumentData K2Node_MakeStruct_FormatArgumentData5, FText CallFunc_Conv_Vector2dToText_ReturnValue3, FText CallFunc_Conv_Vector2dToText_ReturnValue4, FormatArgumentData K2Node_MakeStruct_FormatArgumentData6, FormatArgumentData K2Node_MakeStruct_FormatArgumentData7, FText CallFunc_Conv_Vector2dToText_ReturnValue5, FormatArgumentData K2Node_MakeStruct_FormatArgumentData8, FormatArgumentData K2Node_MakeStruct_FormatArgumentData9, bool CallFunc_Less_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue);// 0x1c01fa0
	static void PrintUIElemSaveGame(out BP_SAVEGAME_UIElemLayout_C* SaveGameObj, Object* __WorldContext, bool CallFunc_IsValid_ReturnValue);// 0x1c01fa0
	static BP_SAVEGAME_UIElemLayout_C* CreateFreeFireUIElem(Object* __WorldContext, BP_SAVEGAME_UIElemLayout_C* CallFunc_CreateSaveGameObject_ReturnValue);// 0x1c01fa0
	static void SaveSelectUIElemIndex(bool IsFPP, int LayoutIndex, Object* __WorldContext, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);// 0x1c01fa0
	static void GetFireModeBySetting(bool IsFPP, Object* __WorldContext, out int FireMode, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	static void GetJsonSlotName(bool IsFPP, int ElemIndex, Object* __WorldContext, out FString SlotName, int SlotIndex, FString DefaultSlotName, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_BuildString_Int_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1c01fa0
	static void GetSelectUIElemIndex(bool IsFPP, Object* __WorldContext, out int UIElemIndex, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);// 0x1c01fa0
	static void LoadJsonUIElemLayoutSGBySetting(bool IsFPP, Object* __WorldContext, out BP_SAVEGAME_UIElemLayout_C* SaveGame, int CallFunc_GetSelectUIElemIndex_UIElemIndex, FString CallFunc_GetJsonSlotName_SlotName, bool CallFunc_LoadJsonUIElemLayoutSG_IsExist, BP_SAVEGAME_UIElemLayout_C* CallFunc_LoadJsonUIElemLayoutSG_SaveGame);// 0x1c01fa0
	static bool SaveJsonUIElemLayoutSG(out SaveGame* SaveGameObject, Object* __WorldContext, BP_SAVEGAME_UIElemLayout_C* K2Node_DynamicCast_AsBP_SAVEGAME_UIElem_Layout, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	static void LoadJsonUIElemLayoutSG(FString LayoutName, Object* __WorldContext, out bool IsExist, out BP_SAVEGAME_UIElemLayout_C* SaveGame, LuaBPVar Temp_struct_Variable, LuaBPVar CallFunc_StringToLVar_ReturnValue, LuaBPVar Temp_struct_Variable2, LuaBPVar Temp_struct_Variable3, FString Temp_string_Variable, BP_SAVEGAME_UIElemLayout_C* CallFunc_CreateSaveGameObject_ReturnValue, LuaBPVar CallFunc_CallLuaWithArgs_OutA, LuaBPVar CallFunc_CallLuaWithArgs_OutB, LuaBPVar CallFunc_CallLuaWithArgs_OutC, LuaBPVar CallFunc_CallLuaWithArgs_OutD, Object* CallFunc_LVarToObject_ReturnValue, BP_SAVEGAME_UIElemLayout_C* K2Node_DynamicCast_AsBP_SAVEGAME_UIElem_Layout, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x1c01fa0
	static void IsIOSOneGigabyteDevice(Object* __WorldContext, out bool Output, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsIOSOneGigabyteDevice_ReturnValue);// 0x1c01fa0
	static void GetLocalizeBattleText(FString Key, Object* __WorldContext, out FString Text, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1c01fa0
	static void GetReportBugSwitch(Object* __WorldContext, out bool Ret, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x1c01fa0
	static void GetSelfieSwitch(Object* __WorldContext, out bool Ret, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x1c01fa0
	static void LoadDownloadUIElemLayoutSG(Object* __WorldContext, out bool IsExist, out BP_SAVEGAME_UIElemLayout_C* SaveGameList, bool CallFunc_DoesSaveGameExist_ReturnValue, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, BP_SAVEGAME_UIElemLayout_C* K2Node_DynamicCast_AsBP_SAVEGAME_UIElem_Layout, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x1c01fa0
	static void LoadAllUIElemLayoutSG(Object* __WorldContext, out BP_SAVEGAME_UIElemLayout_C*[] SaveGameList, out bool[] IsExistList, bool TempExistState, bool[] ExistStateList, BP_SAVEGAME_UIElemLayout_C* TempLayout, BP_SAVEGAME_UIElemLayout_C*[] UIElemLayoutList, int Temp_int_Array_Index_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetLocalizationStringWithID_ReturnValue, FString CallFunc_GetLocalizationStringWithID_ReturnValue2, FString CallFunc_GetLocalizationStringWithID_ReturnValue3, int CallFunc_Array_Add_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_EqualEqual_StrStr_ReturnValue4, int Temp_int_Loop_Counter_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_DoesSaveGameExist_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_IsValid_ReturnValue, BP_SAVEGAME_UIElemLayout_C* K2Node_DynamicCast_AsBP_SAVEGAME_UIElem_Layout, bool K2Node_DynamicCast_bSuccess, BP_SAVEGAME_UIElemLayout_C* CallFunc_CreateSaveGameObject_ReturnValue);// 0x1c01fa0
	static void GetRushTriggerLengthByType(BP_SAVEGAME_UIElemLayout_C* SaveGameObj, int LayoutIndex, Object* __WorldContext, out float RushTriggerLength, bool K2Node_SwitchInteger_CmpSuccess);// 0x1c01fa0
	static void GetLayoutDetailByType(out BP_SAVEGAME_UIElemLayout_C* SaveGameObj, int LayoutIndex, byte ElemKey, Object* __WorldContext, out BP_STRUCT_UIElemLayoutDetail LayoutDetail, out bool IsFound, int CallFunc_Conv_ByteToInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, BP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, BP_STRUCT_UIElemLayoutDetail CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x1c01fa0
	static void ShowGender(Object* __WorldContext, out bool BShowGender);// 0x1c01fa0
	static void IsWidgetVisible(Widget* Widget, Object* __WorldContext, out bool visible, enum CallFunc_GetVisibility_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);// 0x1c01fa0
	static void GetTimeByInt(int second_, Object* __WorldContext, out FString Time, FString secs, FString Mins, FString hours, int Sec, int Min, int Hour, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue2, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Conv_IntToString_ReturnValue6, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue3);// 0x1c01fa0
	static void SetImageWithSpriteResInBattle(FString ResPath, Image* Image, Object* __WorldContext, Object* CallFunc_UIGetResWithPath_ReturnValue, PaperSprite* K2Node_DynamicCast_AsPaper_Sprite, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	static void GetNationInfoInBattle(FString NationCode, Object* __WorldContext, out BP_STRUCT_RegionConfig_type NationInfo, BP_STRUCT_RegionConfig_type NationInfoRet, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_RegionConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_RegionConfig_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2);// 0x1c01fa0
	static void GetNationSwitch(FString Name, Object* __WorldContext, out bool Ret, bool NationSwitch, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_SystemConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1c01fa0
	static void CreateUAEUserWidget(class UAEUserWidget Class, UAEUserWidget* Parent, Object* __WorldContext, out UAEUserWidget* Widget, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, UAEUserWidget* CallFunc_Create_ReturnValue);// 0x1c01fa0
	static void GetLocalizeText(FString Key, Object* __WorldContext, out FString Text, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1c01fa0
	static bool SaveUIElemLayoutSG(out SaveGame* SaveGameObject, Object* __WorldContext, BP_SAVEGAME_UIElemLayout_C* K2Node_DynamicCast_AsBP_SAVEGAME_UIElem_Layout, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SaveGameToSlot_ReturnValue);// 0x1c01fa0
	static void LoadUIElemLayoutSG(Object* __WorldContext, out BP_SAVEGAME_UIElemLayout_C* UIElemSaveGame, int SelectUIElemIndex, BP_SAVEGAME_UIElemLayout_C*[] CallFunc_LoadAllUIElemLayoutSG_SaveGameList, bool[] CallFunc_LoadAllUIElemLayoutSG_IsExistList, BP_SAVEGAME_UIElemLayout_C* CallFunc_CreateSaveGameObject_ReturnValue, BP_SAVEGAME_UIElemLayout_C* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x1c01fa0

--------------------------------
Class: BP_STRUCT_VoiceText_type
	int VoiceTextId_0_6FC5DE403E05E86B27664BDF0A63A1A4;//[Offset: 0x0, Size: 0x4]
	FString VoiceTextValue_1_0BE5D24055E8B9FB76C1783D0A09E585;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: BP_STRUCT_BattleText_type
	FString BattleTextValue_0_C862B6A74DAE6AFFE016F7A75B08BB2E;//[Offset: 0x0, Size: 0xc]
	int BattleTextId_1_B87A149F450B53DA84777BAED491366B;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LoginKPJP_UIPanelBG_C.UserWidget.Widget.Visual.Object
	EventReply OnMouseButtonDown(Geometry MyGeometry, out PointerEvent MouseEvent, EventReply K2Node_MakeStruct_EventReply);// 0x1c01fa0
	void Show Effects(bool Is show, enum Type);// 0x1c01fa0
	Image* FX_CloudL;//[Offset: 0x1b0, Size: 0x4]
	Image* FX_CloudR;//[Offset: 0x1b4, Size: 0x4]
	Image* FX_Light;//[Offset: 0x1b8, Size: 0x4]
	Image* FX_LightX;//[Offset: 0x1bc, Size: 0x4]
	Image* FX_Sine;//[Offset: 0x1c0, Size: 0x4]
	Image* FX_Smoke;//[Offset: 0x1c4, Size: 0x4]
	Image* Image;//[Offset: 0x1c8, Size: 0x4]

--------------------------------
Class: bp_eugdpr_panel_C.LuaClassObj.LuaContext.Actor.Object
	void EventTryToShowEUGDPR_NoFetch();// 0x1c01fa0
	void EventTryToShowEUGDPR();// 0x1c01fa0
	void EventShowGDPRagreementPanel_NoFetch();// 0x1c01fa0
	void EventShowGDPRagreementPanel();// 0x1c01fa0
	void EventSyncEUGDPRCancelDeleteAccount_NoFetch();// 0x1c01fa0
	void EventSyncEUGDPRCancelDeleteAccount();// 0x1c01fa0
	void EventEUGDPRReportBtnClick_NoFetch();// 0x1c01fa0
	void EventEUGDPRReportBtnClick();// 0x1c01fa0
	void EventSyncEUGDPRDeleteAccount_NoFetch();// 0x1c01fa0
	void EventSyncEUGDPRDeleteAccount();// 0x1c01fa0
	void EventIsEUCountry_NoFetch();// 0x1c01fa0
	void EventIsEUCountry();// 0x1c01fa0
	void EventShowGDPRPrivacyPanel_NoFetch();// 0x1c01fa0
	void EventShowGDPRPrivacyPanel();// 0x1c01fa0
	void EventShowGDPRDateOfBirth_NoFetch();// 0x1c01fa0
	void EventShowGDPRDateOfBirth();// 0x1c01fa0
	void EventShowGDPRAbortPanel_NoFetch();// 0x1c01fa0
	void EventShowGDPRAbortPanel();// 0x1c01fa0
	void EventCloseAllGDPRUI_NoFetch();// 0x1c01fa0
	void EventCloseAllGDPRUI();// 0x1c01fa0
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void EventShowVlink_NoFetch();// 0x1c01fa0
	void EventShowVlink();// 0x1c01fa0
	void EventShowGDPRCountDownPanel_NoFetch();// 0x1c01fa0
	void EventShowGDPRCountDownPanel();// 0x1c01fa0
	void EventEUGDPRReturnToLogin_NoFetch();// 0x1c01fa0
	void EventEUGDPRReturnToLogin();// 0x1c01fa0
	void EventSyncEUGDPRStateToServer_NoFetch();// 0x1c01fa0
	void EventSyncEUGDPRStateToServer();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	int BP_EUGDPR_Type;//[Offset: 0x304, Size: 0x4]
	FString EP_EUGDPR_Recommend;//[Offset: 0x308, Size: 0xc]
	FString BP_EUGDPR_EuropeTxt;//[Offset: 0x314, Size: 0xc]
	BP_STRUCT_GDPRNationsPool[] BP_ARRAY_GDPRNationsList;//[Offset: 0x320, Size: 0xc]
	FString[] BP_ARRAY_GDPREUNationsList;//[Offset: 0x32c, Size: 0xc]
	int BP_EUGDPR_ChangeAgeTime;//[Offset: 0x338, Size: 0x4]
	BP_STRUCT_GDPRNationsPool BP_STRUCT_GDPRNationsPool;//[Offset: 0x33c, Size: 0x1c]
	int BP_EUGDPR_CountDown;//[Offset: 0x358, Size: 0x4]
	int BP_EUGDPR_State;//[Offset: 0x35c, Size: 0x4]
	BP_STRUCT_EUGDPRTipsByState[] BP_ARRAY_GDPRStateTextList;//[Offset: 0x360, Size: 0xc]
	FString[] BP_ARRAY_GDPRContinentsList;//[Offset: 0x36c, Size: 0xc]
	FString EP_EUGDPR_RecommendNation;//[Offset: 0x378, Size: 0xc]
	BP_STRUCT_EUGDPRTipsByState BP_STRUCT_EUGDPRTipsByState;//[Offset: 0x384, Size: 0x10]
	int PB_EUGDPR_ParentAgreeTime;//[Offset: 0x394, Size: 0x4]
	BP_STRUCT_EUGDPRDateOfBirth BP_STRUCT_EUGDPRDateOfBirth;//[Offset: 0x398, Size: 0x8]
	bool BP_EUGDPR_IsNewUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	int[] BP_ARRAY_GDPRMonthList;//[Offset: 0x3a4, Size: 0xc]
	int[] BP_ARRAY_GDPRYearList;//[Offset: 0x3b0, Size: 0xc]
	bool BP_EUGDPR_IsEUByCountry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	FString BP_EUGDPR_SelectedCountry;//[Offset: 0x3c0, Size: 0xc]
	int BP_EUGDPR_DeleteTime;//[Offset: 0x3cc, Size: 0x4]
	int BP_EUGPPR_BtnID;//[Offset: 0x3d0, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3d4, Size: 0x4]

--------------------------------
Class: BP_STRUCT_GDPRNationsPool
	FString nation_0_8EBF8A5548C103750D041683156BC922;//[Offset: 0x0, Size: 0xc]
	FString code_1_29F0D0124E260A130E30A4BDCFE45E31;//[Offset: 0xc, Size: 0xc]
	int id_2_197299400AEB67355E7C85A306E4FAD4;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BP_STRUCT_EUGDPRTipsByState
	FString text_0_5C502EE948F65195DFEE988BBC30D664;//[Offset: 0x0, Size: 0xc]
	int state_1_AA59980E474DE99682C23FBA71EF6B74;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BP_STRUCT_EUGDPRDateOfBirth
	int year_0_D50E3BB34625A984527B368EB0DC81E7;//[Offset: 0x0, Size: 0x4]
	int month_1_982668CA455AC248350C67A9FB6BA5E2;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: UICommonFunctionLibrary_C.BlueprintFunctionLibrary.Object
	static void GetAdaptaionUIRect(int Index, Object* __WorldContext, out int Ret, FString CallFunc_GetUIRectOffset_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue);// 0x1c01fa0
	static void LuaCloseHelpTipsPanel(Object* __WorldContext, FString Temp_string_Variable, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD);// 0x1c01fa0
	static void LuaShowHelpTipsWithPos(Widget* Widget, int localizeID, bool IsBattleText, Object* __WorldContext, FString Temp_string_Variable, LuaBPVar CallFunc_BoolToLVar_ReturnValue, LuaBPVar CallFunc_IntToLVar_ReturnValue, Geometry CallFunc_GetCachedGeometry_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_LocalToViewport_PixelPosition, Vector2D CallFunc_LocalToViewport_ViewportPosition, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue2, LuaBPVar CallFunc_IntToLVar_ReturnValue2, LuaBPVar CallFunc_IntToLVar_ReturnValue3, LuaBPVar CallFunc_CallLuaWithArgs_OutA, LuaBPVar CallFunc_CallLuaWithArgs_OutB, LuaBPVar CallFunc_CallLuaWithArgs_OutC, LuaBPVar CallFunc_CallLuaWithArgs_OutD);// 0x1c01fa0
	static void SetAdaptationReverse(Widget* Widget, Object* __WorldContext, FString CallFunc_GetUIRectOffset_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, Margin CallFunc_GetOffsets_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Array_Get_Item2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, FString CallFunc_Array_Get_Item4, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue4, Margin K2Node_MakeStruct_Margin);// 0x1c01fa0
	static void SetAdaptationByOffset(Widget* Widget, Object* __WorldContext, FString CallFunc_GetUIRectOffset_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, Margin CallFunc_GetOffsets_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Array_Get_Item2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, FString CallFunc_Array_Get_Item4, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue4, Margin K2Node_MakeStruct_Margin);// 0x1c01fa0
	static void SetAndroidPhoneAdaptation(CanvasPanelSlot* Panel, Object* __WorldContext, Margin K2Node_MakeStruct_Margin, FString CallFunc_GetDeviceName_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	static void SetAdaptation_Lobby(Widget* Widget, Object* __WorldContext);// 0x1c01fa0
	static void FormatSecondsToString(int Seconds, Object* __WorldContext, out FText Ret, FText SecondText, FText MiniteText, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array2, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, BP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FText CallFunc_Format_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue2, BP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, bool CallFunc_IsValid_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Format_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData4, FormatArgumentData[] K2Node_MakeArray_Array3, FText CallFunc_Format_ReturnValue3);// 0x1c01fa0
	static void SetSquareFixedScslr(Widget* Widget, Object* __WorldContext, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x1c01fa0
	static void SetAdaptation(Widget* Widget, Object* __WorldContext, FString CallFunc_GetUIRectOffset_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, FString CallFunc_Array_Get_Item4, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Margin K2Node_MakeStruct_Margin, bool CallFunc_IsValid_ReturnValue2);// 0x1c01fa0
	static void SetTabStyle(bool isCheck, TextBlock* Text, Image* Icon, Color onColor, Color offColor, Object* __WorldContext, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue2, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x1c01fa0

--------------------------------
Class: Authorization_BP_C.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x4]
	void SetLogo(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	void SetIsVNGAdult();// 0x1c01fa0
	void ShowGuestButton(CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, PanelSlot* CallFunc_AddChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue2, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	void SetScreenLightness(SettingConfig_C* Config, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_FloatToString_ReturnValue);// 0x1c01fa0
	void IsConfigChannel(FString strChannel, out bool bRet, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1c01fa0
	void GetGlobalLoginBtn(FString strChannel, out bool bSucc, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInstallPlatform_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString2_CmpSuccess, FString CallFunc_GetPublishRegion_ReturnValue2, bool K2Node_SwitchString3_CmpSuccess, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue2, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue3, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess2, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD3, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsInstallPlatform_ReturnValue2, bool CallFunc_IsInstallPlatform_ReturnValue3);// 0x1c01fa0
	void ClearLoginBtns();// 0x1c01fa0
	void GetSecondLoginBtn(bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GetSaveChannelBtn_bSucc, int Temp_int_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GetGlobalLoginBtn_bSucc, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1c01fa0
	void GetFirstLoginBtn(bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GetGlobalLoginBtn_bSucc, int CallFunc_Add_IntInt_ReturnValue);// 0x1c01fa0
	void iOSCheckHideBtn();// 0x1c01fa0
	void SendPictureSetting(int tempValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GetApplyingShadowQuality_ReturnValue, RenderQualitySettings CallFunc_GetRenderQualityApplying_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue2, int CallFunc_Multiply_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue3, int CallFunc_Add_IntInt_ReturnValue4, int CallFunc_Multiply_IntInt_ReturnValue3, int CallFunc_Multiply_IntInt_ReturnValue4, int CallFunc_Multiply_IntInt_ReturnValue5, int CallFunc_Add_IntInt_ReturnValue5, int CallFunc_Add_IntInt_ReturnValue6, int CallFunc_Add_IntInt_ReturnValue7);// 0x1c01fa0
	void SetUserAgreementNoTencent(FString CallFunc_GetLocalizationStringWithID_ReturnValue, FString CallFunc_GetCurrentLanguage_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	void ProcessUIByPublishRegion(bool IsShow, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	void StartLoginCountDown(TimerHandle CallFunc_K2_SetTimer_ReturnValue, bool CallFunc_K2_TimerExistsHandle_ReturnValue);// 0x1c01fa0
	void CheckUserAgreement(bp_global_C* CallFunc_GetGlobalData_globalObj, PlayerPrefs_C* CallFunc_GetPlayerPrefs_bp_playerprefs, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1c01fa0
	void ConvertStrChannelToIMSDKChannel(FString strChannel, out int imsdkChannel, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1c01fa0
	void RemoveLoginTimer(bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_TimerExistsHandle_ReturnValue);// 0x1c01fa0
	void LoginTimeOut();// 0x1c01fa0
	void GetMoreBtnImagePath(FString strChannel, out FString imgPath, bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	void SetupMoreBtn(FString strChannel, FString CallFunc_GetPlatfromDisplayName_showChannel, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetMoreBtnImagePath_imgPath, FString CallFunc_GetPlatfromDisplayName_showChannel2, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_GetMoreBtnImagePath_imgPath2, FString CallFunc_GetPlatfromDisplayName_showChannel3, FText CallFunc_Conv_StringToText_ReturnValue3, FString CallFunc_GetMoreBtnImagePath_imgPath3, FString CallFunc_GetPlatfromDisplayName_showChannel4, FText CallFunc_Conv_StringToText_ReturnValue4, FString CallFunc_GetPlatfromDisplayName_showChannel5, FText CallFunc_Conv_StringToText_ReturnValue5, FString CallFunc_GetPlatfromDisplayName_showChannel6, FText CallFunc_Conv_StringToText_ReturnValue6, FString CallFunc_GetPlatfromDisplayName_showChannel7, FText CallFunc_Conv_StringToText_ReturnValue7, FString CallFunc_GetPlatfromDisplayName_showChannel8, FText CallFunc_Conv_StringToText_ReturnValue8, FString CallFunc_GetPlatfromDisplayName_showChannel9, FString CallFunc_GetMoreBtnImagePath_imgPath4, FText CallFunc_Conv_StringToText_ReturnValue9, FString CallFunc_GetMoreBtnImagePath_imgPath5, FString CallFunc_GetMoreBtnImagePath_imgPath6, FString CallFunc_GetMoreBtnImagePath_imgPath7, FString CallFunc_GetMoreBtnImagePath_imgPath8, FString CallFunc_GetMoreBtnImagePath_imgPath9, bool K2Node_SwitchInteger_CmpSuccess);// 0x1c01fa0
	void StartLogin(FString strChannel, bool K2Node_SwitchString_CmpSuccess, bp_global_C* CallFunc_GetGlobalData_globalObj, PlayerPrefs_C* CallFunc_GetPlayerPrefs_bp_playerprefs, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString2_CmpSuccess, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_HasDownloadedBasePak_ReturnValue, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsInstallPlatform_ReturnValue, bool CallFunc_IsInstallPlatform_ReturnValue2);// 0x1c01fa0
	void IsEqualDisplayChannel(int Index, out bool bSucc, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1c01fa0
	void GetSaveChannelBtn(out bool bSucc, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInstallPlatform_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue2, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue3, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess2, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD3, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsInstallPlatform_ReturnValue2, bool CallFunc_IsInstallPlatform_ReturnValue3, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_EqualEqual_StrStr_ReturnValue4, bool CallFunc_EqualEqual_StrStr_ReturnValue5, bool CallFunc_EqualEqual_StrStr_ReturnValue6, bool CallFunc_EqualEqual_StrStr_ReturnValue7, bool CallFunc_EqualEqual_StrStr_ReturnValue8, bool CallFunc_EqualEqual_StrStr_ReturnValue9, IMSDKHelper* CallFunc_GetInstance_ReturnValue, int CallFunc_GetLastIMSDKChannelID_ReturnValue, FString CallFunc_ConvertIMSDKChannelToStr_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_IsConfigChannel_bRet);// 0x1c01fa0
	void GetGlobalMoreBtn(int Index, out bool bSucc, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInstallPlatform_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue2, bool K2Node_SwitchString2_CmpSuccess, FString CallFunc_GetPlatformName_ReturnValue, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsInstallPlatform_ReturnValue2, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue3, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD3, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsInstallPlatform_ReturnValue3, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchString3_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1c01fa0
	void ShowGlobalLoginBtn(FString strChannel, bool K2Node_SwitchString_CmpSuccess, PanelSlot* CallFunc_AddChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue2, PanelSlot* CallFunc_AddChild_ReturnValue3, PanelSlot* CallFunc_AddChild_ReturnValue4, PanelSlot* CallFunc_AddChild_ReturnValue5, PanelSlot* CallFunc_AddChild_ReturnValue6, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue7, PanelSlot* CallFunc_AddChild_ReturnValue8, PanelSlot* CallFunc_AddChild_ReturnValue9);// 0x1c01fa0
	void RefreshMoreBtn(int Temp_int_Variable, bool CallFunc_IsEqualDisplayChannel_bSucc, bool CallFunc_GetGlobalMoreBtn_bSucc, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable2, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, FString Temp_string_Variable);// 0x1c01fa0
	void AcceptTouristNotice();// 0x1c01fa0
	void AutoLogin(bool K2Node_SwitchString_CmpSuccess);// 0x1c01fa0
	void RemoveGCLoginTimer(bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_TimerExistsHandle_ReturnValue);// 0x1c01fa0
	void GCLoginTimeOut();// 0x1c01fa0
	void RefreshLoginBtn(PanelSlot* CallFunc_AddChild_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_IsCEVersion_ReturnValue);// 0x1c01fa0
	void CheckPrivacyPolicy();// 0x1c01fa0
	void CheckRendingSafe(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void RefreshGameVersion(FText CallFunc_Conv_StringToText_ReturnValue);// 0x1c01fa0
	void ShowEffects(bool Is show, enum Type);// 0x1c01fa0
	void UIShow2();// 0x1c01fa0
	void ShowUI(GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue);// 0x1c01fa0
	void InitAuthorizationUI(bool CallFunc_IsEditor_ReturnValue);// 0x1c01fa0
	void InitLoginUI(GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue);// 0x1c01fa0
	void doAutoLogin(FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1c01fa0
	void UpdateRelatedSetting(FText CallFunc_Conv_StringToText_ReturnValue);// 0x1c01fa0
	void DoUpdate(FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GDolphinUpdater* CallFunc_GetUpdater_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue, LuaClassObj* CallFunc_GetLuaObject_ReturnValue, bool CallFunc_IsUpdating_ReturnValue, bool CallFunc_IsUpdating_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x1c01fa0
	void SetFpsByIndex(int Index);// 0x1c01fa0
	void InitFps(SettingConfig_C* SettingConfig, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetFPSLevel_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x1c01fa0
	void SetLbsOffAndDisableMicphone(SettingConfig_C* settingObj, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x1c01fa0
	void InitVoiceSetting(SettingConfig_C* settingObj, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue);// 0x1c01fa0
	void SetSoudsSetting(FName ParamName, float ParamValue, float CallFunc_Multiply_IntFloat_ReturnValue);// 0x1c01fa0
	void InitUserSetting(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void setLoginLimit(FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2);// 0x1c01fa0
	void addLoginCount(int CallFunc_GetCurrentNetworkState_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x1c01fa0
	void clearLoginCount();// 0x1c01fa0
	void redoAutoAuthorization();// 0x1c01fa0
	void doAuthorization(FString CallFunc_GetActiveDeviceProfileName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_GetDeviceName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLimit_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x1c01fa0
	void hideButtons();// 0x1c01fa0
	void showButtons();// 0x1c01fa0
	void QuitGame(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void hideAuthorizationUI();// 0x1c01fa0
	void startAuthorization(LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_authorization_C* K2Node_DynamicCast_AsBp_Authorization, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void showAuthorizationUI(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue, bp_eugdpr_panel_C* K2Node_DynamicCast_AsBp_Eugdpr_Panel, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x1c01fa0
	void BndEvt__Button_Help_K2Node_ComponentBoundEvent_129_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_LeavePlane_K2Node_ComponentBoundEvent_112_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_LoginOut_K2Node_ComponentBoundEvent_62_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_2_K2Node_ComponentBoundEvent_51_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void AnimationFinish();// 0x1c01fa0
	void BndEvt__Button_1_K2Node_ComponentBoundEvent_34_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_Login_K2Node_ComponentBoundEvent_249_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_Repair_K2Node_ComponentBoundEvent_37_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__btnSwitchAccount_K2Node_ComponentBoundEvent_147_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_7_K2Node_ComponentBoundEvent_32_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_4_K2Node_ComponentBoundEvent_227_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__btnHelp_K2Node_ComponentBoundEvent_67_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void GuestLogin();// 0x1c01fa0
	void BndEvt__Button_start_K2Node_ComponentBoundEvent_45_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_Service_PrivacyAgreement_K2Node_ComponentBoundEvent_47_OnButtonClickedEvent__Delegate();// 0x1c01fa0
	void BndEvt__Button_guest_K2Node_ComponentBoundEvent_76_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_FB_K2Node_ComponentBoundEvent_161_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_wechat_K2Node_ComponentBoundEvent_281_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_GP_K2Node_ComponentBoundEvent_509_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_GC_K2Node_ComponentBoundEvent_160_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_Twitter_K2Node_ComponentBoundEvent_174_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void StartAutoAuthorization();// 0x1c01fa0
	void Construct();// 0x1c01fa0
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_85_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_Button_VisitorEnter0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSigna();// 0x1c01fa0
	void BndEvt__Button_MORE_K2Node_ComponentBoundEvent_146_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_Close_dialog_K2Node_ComponentBoundEvent_196_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_FB_K2Node_ComponentBoundEvent_1131_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__BtnMoreFB_K2Node_ComponentBoundEvent_346_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__BtnMoreTW_K2Node_ComponentBoundEvent_367_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__BtnMoreGC_K2Node_ComponentBoundEvent_414_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__BtnMoreGP_K2Node_ComponentBoundEvent_472_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__BtnMoreWechat_K2Node_ComponentBoundEvent_490_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__BtnMoreVK_K2Node_ComponentBoundEvent_540_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_VK_K2Node_ComponentBoundEvent_591_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_yigouxuan_K2Node_ComponentBoundEvent_1500_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_Service_Agreement_K2Node_ComponentBoundEvent_748_OnButtonClickedEvent__DelegateSignat();// 0x1c01fa0
	void BndEvt__Button_AgreementWeigouxuan_K2Node_ComponentBoundEvent_979_OnButtonClickedEvent__DelegateSign();// 0x1c01fa0
	void CloseMore();// 0x1c01fa0
	void BndEvt__Button_5_K2Node_ComponentBoundEvent_139_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_LINE_K2Node_ComponentBoundEvent_140_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__BtnMore7_K2Node_ComponentBoundEvent_336_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__ButtonMore8_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__Button_QQdenglu_K2Node_ComponentBoundEvent_164_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__BtnMore9_K2Node_ComponentBoundEvent_625_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void ExecuteUbergraph_Authorization_BP(int EntryPoint, PlayerPrefs_C* CallFunc_CreateSaveGameObject_ReturnValue, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_DoesSaveGameExist_ReturnValue, PlayerPrefs_C* K2Node_DynamicCast_AsPlayer_Prefs, bool K2Node_DynamicCast_bSuccess, int CallFunc_PostEventAtLocation_ReturnValue, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_authorization_C* K2Node_DynamicCast_AsBp_Authorization, bool K2Node_DynamicCast_bSuccess2, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, FText CallFunc_GetText_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, int CallFunc_PostEventAtLocation_ReturnValue2, int CallFunc_PostEventAtLocation_ReturnValue3, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue2, bp_authorization_C* K2Node_DynamicCast_AsBp_Authorization2, bool K2Node_DynamicCast_bSuccess3, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_EqualEqual_StrStr_ReturnValue4, WidgetTransform K2Node_MakeStruct_WidgetTransform, FString CallFunc_GetPublishRegion_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue5, bp_global_C* CallFunc_GetGlobalData_globalObj, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1c01fa0
	void startGameSounds__DelegateSignature();// 0x1c01fa0
	WidgetAnimation* Start;//[Offset: 0x2f4, Size: 0x4]
	WidgetAnimation* LOGO_anima;//[Offset: 0x2f8, Size: 0x4]
	Image* 18+;//[Offset: 0x2fc, Size: 0x4]
	WidgetSwitcher* AuthTypeSwitcher;//[Offset: 0x300, Size: 0x4]
	Button* btnHelpLogin;//[Offset: 0x304, Size: 0x4]
	Button* BtnMore1;//[Offset: 0x308, Size: 0x4]
	Button* BtnMore2;//[Offset: 0x30c, Size: 0x4]
	Button* BtnMore3;//[Offset: 0x310, Size: 0x4]
	Button* BtnMore4;//[Offset: 0x314, Size: 0x4]
	Button* BtnMore5;//[Offset: 0x318, Size: 0x4]
	Button* BtnMore6;//[Offset: 0x31c, Size: 0x4]
	Button* BtnMore7;//[Offset: 0x320, Size: 0x4]
	Button* BtnMore8;//[Offset: 0x324, Size: 0x4]
	Button* BtnMore9;//[Offset: 0x328, Size: 0x4]
	Button* btnSwitchAccount;//[Offset: 0x32c, Size: 0x4]
	Button* Button;//[Offset: 0x330, Size: 0x4]
	Button* Button;//[Offset: 0x334, Size: 0x4]
	Button* Button;//[Offset: 0x338, Size: 0x4]
	Button* Button;//[Offset: 0x33c, Size: 0x4]
	Button* Button;//[Offset: 0x340, Size: 0x4]
	Button* Button;//[Offset: 0x344, Size: 0x4]
	Button* Button;//[Offset: 0x348, Size: 0x4]
	Button* Button_Agreement;//[Offset: 0x34c, Size: 0x4]
	Button* Button_Button_VisitorEnter;//[Offset: 0x350, Size: 0x4]
	Button* Button_Close_dialog;//[Offset: 0x354, Size: 0x4]
	Button* Button_continue_guest;//[Offset: 0x358, Size: 0x4]
	Button* Button_FB;//[Offset: 0x35c, Size: 0x4]
	Button* Button_GC;//[Offset: 0x360, Size: 0x4]
	Button* Button_GP;//[Offset: 0x364, Size: 0x4]
	Button* Button_guest;//[Offset: 0x368, Size: 0x4]
	Button* Button_Help;//[Offset: 0x36c, Size: 0x4]
	Button* Button_LeavePlane;//[Offset: 0x370, Size: 0x4]
	Button* Button_LINE;//[Offset: 0x374, Size: 0x4]
	Button* Button_LoginOut;//[Offset: 0x378, Size: 0x4]
	Button* Button_MORE;//[Offset: 0x37c, Size: 0x4]
	Button* Button_Privacy;//[Offset: 0x380, Size: 0x4]
	Button* Button_QQ;//[Offset: 0x384, Size: 0x4]
	Button* Button_QQdenglu;//[Offset: 0x388, Size: 0x4]
	Button* Button_Repair;//[Offset: 0x38c, Size: 0x4]
	Button* Button_Service_Agreement;//[Offset: 0x390, Size: 0x4]
	Button* Button_Service_Privacy;//[Offset: 0x394, Size: 0x4]
	Button* Button_start;//[Offset: 0x398, Size: 0x4]
	Button* Button_Twitter;//[Offset: 0x39c, Size: 0x4]
	Button* Button_VK;//[Offset: 0x3a0, Size: 0x4]
	Button* Button_wechat;//[Offset: 0x3a4, Size: 0x4]
	Button* Button_WX;//[Offset: 0x3a8, Size: 0x4]
	CanvasPanel* CanvasPanel;//[Offset: 0x3ac, Size: 0x4]
	CanvasPanel* CanvasPanel_Logo;//[Offset: 0x3b0, Size: 0x4]
	CheckBox* CheckBox_AgreementAgree;//[Offset: 0x3b4, Size: 0x4]
	CheckBox* CheckBox_PrivacyAgree;//[Offset: 0x3b8, Size: 0x4]
	GridPanel* GridPanel_IPX;//[Offset: 0x3bc, Size: 0x4]
	HorizontalBox* HorizontalBox;//[Offset: 0x3c0, Size: 0x4]
	HorizontalBox* HorizontalBox;//[Offset: 0x3c4, Size: 0x4]
	HorizontalBox* HorizontalBox_autoHide;//[Offset: 0x3c8, Size: 0x4]
	HorizontalBox* HorizontalBox_autoHide;//[Offset: 0x3cc, Size: 0x4]
	CanvasPanel* HorizontalBox_autoHide;//[Offset: 0x3d0, Size: 0x4]
	HorizontalBox* HorizontalBox_Login;//[Offset: 0x3d4, Size: 0x4]
	Image* Image;//[Offset: 0x3d8, Size: 0x4]
	Image* Image;//[Offset: 0x3dc, Size: 0x4]
	Image* Image;//[Offset: 0x3e0, Size: 0x4]
	Image* Image;//[Offset: 0x3e4, Size: 0x4]
	Image* Image;//[Offset: 0x3e8, Size: 0x4]
	Image* Image;//[Offset: 0x3ec, Size: 0x4]
	Image* Image;//[Offset: 0x3f0, Size: 0x4]
	Image* Image;//[Offset: 0x3f4, Size: 0x4]
	Image* Image;//[Offset: 0x3f8, Size: 0x4]
	Image* Image;//[Offset: 0x3fc, Size: 0x4]
	Image* Image;//[Offset: 0x400, Size: 0x4]
	Image* Image_bt1;//[Offset: 0x404, Size: 0x4]
	Image* Image_bt2;//[Offset: 0x408, Size: 0x4]
	Image* Image_logo;//[Offset: 0x40c, Size: 0x4]
	Image* Image_more;//[Offset: 0x410, Size: 0x4]
	Image* Image_weigouxuan;//[Offset: 0x414, Size: 0x4]
	Image* Image_yigouxuan;//[Offset: 0x418, Size: 0x4]
	Image* ImageMore1;//[Offset: 0x41c, Size: 0x4]
	Image* ImageMore2;//[Offset: 0x420, Size: 0x4]
	Image* ImageMore3;//[Offset: 0x424, Size: 0x4]
	Image* ImageMore4;//[Offset: 0x428, Size: 0x4]
	Image* ImageMore5;//[Offset: 0x42c, Size: 0x4]
	Image* ImageMore6;//[Offset: 0x430, Size: 0x4]
	Image* ImageMore7;//[Offset: 0x434, Size: 0x4]
	Image* ImageMore8;//[Offset: 0x438, Size: 0x4]
	Image* ImageMore9;//[Offset: 0x43c, Size: 0x4]
	Image* LGSG_Logt_02;//[Offset: 0x440, Size: 0x4]
	Image* LGSG_Logt_03;//[Offset: 0x444, Size: 0x4]
	Login_UIPanelBG_C* Login_UIPanelBG;//[Offset: 0x448, Size: 0x4]
	GridPanel* LoginChoice_Panel;//[Offset: 0x44c, Size: 0x4]
	LoginKPJP_UIPanelBG_C* LoginKRJP_UIPanelBG;//[Offset: 0x450, Size: 0x4]
	Image* LQSG_Logo_01;//[Offset: 0x454, Size: 0x4]
	Image* LQSG_Logo_Light;//[Offset: 0x458, Size: 0x4]
	CanvasPanel* Panel_LoginBtn;//[Offset: 0x45c, Size: 0x4]
	Image* PUBG_Logo_01;//[Offset: 0x460, Size: 0x4]
	Image* PUBG_Logo_02;//[Offset: 0x464, Size: 0x4]
	MultiLineEditableTextBox* Text_ID;//[Offset: 0x468, Size: 0x4]
	EditableText* Text_Pswd;//[Offset: 0x46c, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x470, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x474, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x478, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x47c, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x480, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x484, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x488, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x48c, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x490, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x494, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x498, Size: 0x4]
	TextBlock* TextBlock;//[Offset: 0x49c, Size: 0x4]
	TextBlock* TextBlock_UserAgreement;//[Offset: 0x4a0, Size: 0x4]
	TextBlock* TextBlock_Version;//[Offset: 0x4a4, Size: 0x4]
	TextBlock* TextGuestTipInMore;//[Offset: 0x4a8, Size: 0x4]
	TextBlock* TextGuestTips;//[Offset: 0x4ac, Size: 0x4]
	TextBlock* TextMore1;//[Offset: 0x4b0, Size: 0x4]
	TextBlock* TextMore2;//[Offset: 0x4b4, Size: 0x4]
	TextBlock* TextMore3;//[Offset: 0x4b8, Size: 0x4]
	TextBlock* TextMore4;//[Offset: 0x4bc, Size: 0x4]
	TextBlock* TextMore5;//[Offset: 0x4c0, Size: 0x4]
	TextBlock* TextMore6;//[Offset: 0x4c4, Size: 0x4]
	TextBlock* TextMore7;//[Offset: 0x4c8, Size: 0x4]
	TextBlock* TextMore8;//[Offset: 0x4cc, Size: 0x4]
	TextBlock* TextMore9;//[Offset: 0x4d0, Size: 0x4]
	VerticalBox* VerticalBox_autoHide;//[Offset: 0x4d4, Size: 0x4]
	WidgetSwitcher* WidgetSwitcher_AgreementCheckBox;//[Offset: 0x4d8, Size: 0x4]
	WidgetSwitcher* WidgetSwitcher_PrivacyCheckBox;//[Offset: 0x4dc, Size: 0x4]
	Button* Windows_Login;//[Offset: 0x4e0, Size: 0x4]
	bool m_privacy_checked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 0x1]
	bool m_agreement_checked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 0x1]
	FString PlatformName;//[Offset: 0x4e8, Size: 0xc]
	bp_authorization_C* bp_auth;//[Offset: 0x4f4, Size: 0x4]
	delegate startGameSounds;//[Offset: 0x4f8, Size: 0xc]
	int LoginCount;//[Offset: 0x504, Size: 0x4]
	PlayerPrefs_C* MyPlayerPrefs;//[Offset: 0x508, Size: 0x4]
	FString SlotName;//[Offset: 0x50c, Size: 0xc]
	bp_global_C* bpGlobal;//[Offset: 0x518, Size: 0x4]
	TimerHandle GCLoginTimer;//[Offset: 0x520, Size: 0x8]
	int login_type;//[Offset: 0x528, Size: 0x4]
	bool IsBtnMore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1]
	int tmpIndex;//[Offset: 0x530, Size: 0x4]
	FString[] ArrayMoreBtnLoginType;//[Offset: 0x534, Size: 0xc]
	TimerHandle LoginTimer;//[Offset: 0x540, Size: 0x8]
	FString tmpGlobalChannel;//[Offset: 0x548, Size: 0xc]
	FString tmpGlobalExcludeChannel;//[Offset: 0x554, Size: 0xc]
	int tmpGlobalIndex;//[Offset: 0x560, Size: 0x4]
	FString tmpStrChannel;//[Offset: 0x564, Size: 0xc]
	FString SecondLoginStrChannel;//[Offset: 0x570, Size: 0xc]
	FString FirstLoginStrChannel;//[Offset: 0x57c, Size: 0xc]
	int tempFpsIndex;//[Offset: 0x588, Size: 0x4]
	FString NewVar;//[Offset: 0x58c, Size: 0xc]
	Login_Update_UIBP_C* bp_update;//[Offset: 0x598, Size: 0x4]

--------------------------------
Class: Login_SplashScreen_C.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x4]
	void InitLoginUI(GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetOwningFrontendHUD_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess3, LuaClassObj* CallFunc_GetLuaObject_ReturnValue, bp_versionupdate_C* K2Node_DynamicCast_AsBp_Versionupdate, bool K2Node_DynamicCast_bSuccess4, GDolphinUpdater* CallFunc_GetUpdater_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance2, bool K2Node_DynamicCast_bSuccess5, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue2, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager2, bool K2Node_DynamicCast_bSuccess6, LuaClassObj* CallFunc_GetLuaObject_ReturnValue2);// 0x1c01fa0
	void UIShow(STExtraGlobalData* CallFunc_STExtraGlobalDataInstance_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bp_global_C* CallFunc_GetGlobalData_globalObj);// 0x1c01fa0
	void ShowUI(GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameBusinessManager* K2Node_DynamicCast_AsGame_Business_Manager, bool K2Node_DynamicCast_bSuccess2, LuaClassObj* CallFunc_GetLuaObject_ReturnValue);// 0x1c01fa0
	void InitAuthorizationUI();// 0x1c01fa0
	void Construct();// 0x1c01fa0
	void AnimationFinish();// 0x1c01fa0
	void ExecuteUbergraph_Login_SplashScreen(int EntryPoint);// 0x1c01fa0
	void startGameSounds__DelegateSignature();// 0x1c01fa0
	WidgetAnimation* LOGO_anima_kp;//[Offset: 0x2f4, Size: 0x4]
	WidgetAnimation* LOGO_anima;//[Offset: 0x2f8, Size: 0x4]
	WidgetAnimation* LOGO_anima_jk;//[Offset: 0x2fc, Size: 0x4]
	CanvasPanel* CanvasPanel_Logo;//[Offset: 0x300, Size: 0x4]
	Image* copyritht;//[Offset: 0x304, Size: 0x4]
	Image* Image_Pubg_Logobg;//[Offset: 0x308, Size: 0x4]
	Image* PUBG_Logo_01;//[Offset: 0x30c, Size: 0x4]
	bool m_checked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	FString PlatformName;//[Offset: 0x314, Size: 0xc]
	bp_authorization_C* bp_auth;//[Offset: 0x320, Size: 0x4]
	delegate startGameSounds;//[Offset: 0x324, Size: 0xc]
	int LoginCount;//[Offset: 0x330, Size: 0x4]
	PlayerPrefs_C* MyPlayerPrefs;//[Offset: 0x334, Size: 0x4]
	FString SlotName;//[Offset: 0x338, Size: 0xc]
	bp_global_C* bpGlobal;//[Offset: 0x344, Size: 0x4]

--------------------------------
Class: bp_camera_manager_C.LuaClassObj.LuaContext.Actor.Object
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	BP_STRUCT_CameraManager_FullscreenCameraData BP_STRUCT_CameraManager_FullscreenCameraData;//[Offset: 0x304, Size: 0x14]
	BP_STRUCT_CameraManager_DefaultCameraData BP_STRUCT_CameraManager_DefaultCameraData;//[Offset: 0x318, Size: 0x8]
	int BP_MallFullscreenRootCameraID;//[Offset: 0x320, Size: 0x4]
	FString BP_LobbyCameraManager_ExtraData;//[Offset: 0x324, Size: 0xc]
	FString BP_LobbyCameraManager_ClassPath;//[Offset: 0x330, Size: 0xc]
	int BP_LobbyCamera_BlendTime;//[Offset: 0x33c, Size: 0x4]
	int BP_CurrentCameraAdapt;//[Offset: 0x340, Size: 0x4]
	BP_STRUCT_CameraManager_EnlargeLensCameraData BP_STRUCT_CameraManager_EnlargeLensCameraData;//[Offset: 0x344, Size: 0x14]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x358, Size: 0x4]

--------------------------------
Class: BP_STRUCT_CameraManager_FullscreenCameraData
	int z_0_270C0A003D9D685C47BB848007F65DDA;//[Offset: 0x0, Size: 0x4]
	int duration_1_3761E50031F488900D69C4C703ED749E;//[Offset: 0x4, Size: 0x4]
	int rootCameraID_2_1D3752002EA6E8C844DA06740A378894;//[Offset: 0x8, Size: 0x4]
	int y_3_270B09C03D9D685B47BB848F07F65DD9;//[Offset: 0xc, Size: 0x4]
	int x_4_270A09803D9D685A47BB848E07F65DD8;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BP_STRUCT_CameraManager_DefaultCameraData
	int rootCameraID_0_0FD33E804CA77B242690849F0C457F24;//[Offset: 0x0, Size: 0x4]
	int blendTime_1_5BA11D0049C317863261CC9C036F79C5;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BP_STRUCT_CameraManager_EnlargeLensCameraData
	int blendTime_0_25AA7FC03DFAD07B3A5018130FD3A8F5;//[Offset: 0x0, Size: 0x4]
	int z_1_54D919400EC8E57560A833020FE59A1A;//[Offset: 0x4, Size: 0x4]
	int y_2_54D819000EC8E57460A833030FE59A19;//[Offset: 0x8, Size: 0x4]
	int x_3_54D718C00EC8E57360A833000FE59A18;//[Offset: 0xc, Size: 0x4]
	int rootCameraID_4_4BDC81405799F7715D41E7C907B0B4E4;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: bp_chat_emoji_C.LuaClassObj.LuaContext.Actor.Object
	void EventClickEmojiItem_NoFetch();// 0x1c01fa0
	void EventClickEmojiItem();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	int BP_ChatEmoji_ClickIndex;//[Offset: 0x304, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x308, Size: 0x4]

--------------------------------
Class: bp_chat_voice_C.LuaClassObj.LuaContext.Actor.Object
	void EventStopGVoiceRecord_NoFetch();// 0x1c01fa0
	void EventStopGVoiceRecord();// 0x1c01fa0
	void EventOnTryOpenMic_NoFetch();// 0x1c01fa0
	void EventOnTryOpenMic();// 0x1c01fa0
	void EventStopPlayGVoiceRecord_NoFetch();// 0x1c01fa0
	void EventStopPlayGVoiceRecord();// 0x1c01fa0
	void EventStartPlayGVoiceRecord_NoFetch();// 0x1c01fa0
	void EventStartPlayGVoiceRecord();// 0x1c01fa0
	void EventChangeSpeakerState_NoFetch();// 0x1c01fa0
	void EventChangeSpeakerState();// 0x1c01fa0
	void EventChangeMicState_NoFetch();// 0x1c01fa0
	void EventChangeMicState();// 0x1c01fa0
	void EventNotifySystemMicOpen_NoFetch();// 0x1c01fa0
	void EventNotifySystemMicOpen();// 0x1c01fa0
	void EventChatRequestPrivacy_NoFetch();// 0x1c01fa0
	void EventChatRequestPrivacy();// 0x1c01fa0
	void EventTickVoiceRoom_NoFetch();// 0x1c01fa0
	void EventTickVoiceRoom();// 0x1c01fa0
	void EventStartGVoiceRecord_NoFetch();// 0x1c01fa0
	void EventStartGVoiceRecord();// 0x1c01fa0
	void EventChangeGVoiceMode_NoFetch();// 0x1c01fa0
	void EventChangeGVoiceMode();// 0x1c01fa0
	void EventNotifyVoiceChatFailToRecord_NoFetch();// 0x1c01fa0
	void EventNotifyVoiceChatFailToRecord();// 0x1c01fa0
	void EventNotifySystemVoiceOpen_NoFetch();// 0x1c01fa0
	void EventNotifySystemVoiceOpen();// 0x1c01fa0
	void EventNotifyVoiceProcedureFailed_NoFetch();// 0x1c01fa0
	void EventNotifyVoiceProcedureFailed();// 0x1c01fa0
	void EventNotifyVoiceRecordTooShort_NoFetch();// 0x1c01fa0
	void EventNotifyVoiceRecordTooShort();// 0x1c01fa0
	void EventNotifyVoiceOpenSpeaker_NoFetch();// 0x1c01fa0
	void EventNotifyVoiceOpenSpeaker();// 0x1c01fa0
	void EventNotifyRecordTooShort_NoFetch();// 0x1c01fa0
	void EventNotifyRecordTooShort();// 0x1c01fa0
	void EventCancelGVoiceRecord_NoFetch();// 0x1c01fa0
	void EventCancelGVoiceRecord();// 0x1c01fa0
	void EventFetchInfo_NoFetch();// 0x1c01fa0
	void EventFetchInfo();// 0x1c01fa0
	void EventUploadGVoiceRecord_NoFetch();// 0x1c01fa0
	void EventUploadGVoiceRecord();// 0x1c01fa0
	void EventClearGVoiceProcedure_NoFetch();// 0x1c01fa0
	void EventClearGVoiceProcedure();// 0x1c01fa0
	void EventNotifySystemSpeakerOpen_NoFetch();// 0x1c01fa0
	void EventNotifySystemSpeakerOpen();// 0x1c01fa0
	void EventSetInfo_Push_NoFetch();// 0x1c01fa0
	void EventSetInfo_Push();// 0x1c01fa0
	void EventNotifyDownloadFailed_NoFetch();// 0x1c01fa0
	void EventNotifyDownloadFailed();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	bool BP_GlobalChatvoiceRecordSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	FString BP_GlobalChatvoiceToTextContent;//[Offset: 0x308, Size: 0xc]
	FString BP_GlobalChatvoiceCurrentStage;//[Offset: 0x314, Size: 0xc]
	BP_STRUCT_GlobalChatvoiceDownloadData[] BP_ARRAY_GlobalChatvoiceDownloadList;//[Offset: 0x320, Size: 0xc]
	bool BP_GlobalChatvoiceMicOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	int BP_GlobalChatvoiceCurrentMode;//[Offset: 0x330, Size: 0x4]
	bool BP_GlobalChatvoiceIsTeamup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	int BP_GlobalChatvoiceUploadTime;//[Offset: 0x338, Size: 0x4]
	bool BP_GlobalChatvoiceDefaultOpenTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	int BP_GlobalChatvoiceTotalLimit;//[Offset: 0x340, Size: 0x4]
	FString BP_GlobalChatvoiceUploadMsgId;//[Offset: 0x344, Size: 0xc]
	FString BP_GlobalChatvoiceCurrentRole;//[Offset: 0x350, Size: 0xc]
	BP_STRUCT_GlobalChatvoiceDownloadData BP_STRUCT_GlobalChatvoiceDownloadData;//[Offset: 0x35c, Size: 0x30]
	bool BP_GlobalChatvoiceSpeakerOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	FString BP_GlobalChatvoiceCurrentPlayFile;//[Offset: 0x390, Size: 0xc]
	FString BP_GlobalChatvoiceCurrentRoom;//[Offset: 0x39c, Size: 0xc]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3a8, Size: 0x4]

--------------------------------
Class: BP_STRUCT_GlobalChatvoiceDownloadData
	FString fileId_0_27A7E9814AFBC6BF898DD088626C4C44;//[Offset: 0x0, Size: 0xc]
	int msgLength_1_AA0B7A75470EBDA4A1B263A9DF37786C;//[Offset: 0xc, Size: 0x4]
	FString msgSenderGID_2_A17583F444CD82A19E60DBB86D8EBDD7;//[Offset: 0x10, Size: 0xc]
	FString msgContextGID_3_4DC6B36A4ADBF5BA22228B9262D45E49;//[Offset: 0x1c, Size: 0xc]
	int msgId_4_6367BF0A434687426F510F81D8518471;//[Offset: 0x28, Size: 0x4]
	int msgChannel_5_B110640C4860EF195694518E5BD4BA4E;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: Global_Voice_C.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x4]
	void OnChatPrivacyAccepted(FString CallFunc_GetAppVersion_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	void Transitions_Enter();// 0x1c01fa0
	void SyncPushOneData(FString prop);// 0x1c01fa0
	void SyncOneData(FString prop);// 0x1c01fa0
	void ChangeSpeakerFlag(bool Open);// 0x1c01fa0
	void ChangeMicphoneFlag(bool Open, int CallFunc_OpenTeamMicphoneOnly_ReturnValue, int CallFunc_OpenAllMicphone_ReturnValue);// 0x1c01fa0
	void OnTryCloseSpeaker();// 0x1c01fa0
	void TickVoiceRoom();// 0x1c01fa0
	void UIHide();// 0x1c01fa0
	void UIShow();// 0x1c01fa0
	void OnUploadRecordFailed();// 0x1c01fa0
	void OnTryCloseMic();// 0x1c01fa0
	void StopPlayRecordFileAndRecoverBGM();// 0x1c01fa0
	void FadeOutBGM(int thisVolume, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x1c01fa0
	void FadeInBGM(int thisVolume, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x1c01fa0
	void CheckVoiceMessageInited(out bool Ret);// 0x1c01fa0
	void OnClickSpeakerOff();// 0x1c01fa0
	void OnClickSpeakerOn();// 0x1c01fa0
	void OnClickMicOff();// 0x1c01fa0
	void OnClickMicOn();// 0x1c01fa0
	void ClearAllTimers(TimerHandle CallFunc_GetProcedureTimer_output, TimerHandle CallFunc_GetProcedureTimer_output2, TimerHandle CallFunc_GetProcedureTimer_output3, TimerHandle CallFunc_GetProcedureTimer_output4, TimerHandle CallFunc_GetProcedureTimer_output5, TimerHandle CallFunc_GetProcedureTimer_output6, TimerHandle CallFunc_GetProcedureTimer_output7, TimerHandle CallFunc_GetProcedureTimer_output8, TimerHandle CallFunc_GetProcedureTimer_output9, TimerHandle CallFunc_GetProcedureTimer_output10, TimerHandle CallFunc_GetProcedureTimer_output11, TimerHandle CallFunc_GetProcedureTimer_output12);// 0x1c01fa0
	void RefreshSpeakerUI(bool CallFunc_TeamSpeakerEnable_ReturnValue);// 0x1c01fa0
	void RefreshMicUI(bool CallFunc_TeamMicphoneEnable_ReturnValue);// 0x1c01fa0
	void SyncTeamupState();// 0x1c01fa0
	void RefreshTeamUI();// 0x1c01fa0
	void ChangeSpeakerState(bool Open);// 0x1c01fa0
	void ChangeMicState(bool State);// 0x1c01fa0
	void RefreshLobbyUI();// 0x1c01fa0
	void RefreshStageUI(bool CallFunc_TeamSpeakerEnable_ReturnValue, bool CallFunc_TeamMicphoneEnable_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1c01fa0
	void StopRecordVoice(bool Cancel, bool isCancel, bool CallFunc_CheckVoiceMessageInited_ret, TimerHandle CallFunc_GetProcedureTimer_output, TimerHandle CallFunc_GetProcedureTimer_output2, float CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x1c01fa0
	void StartRecordVoice(bool CallFunc_CheckVoiceMessageInited_ret, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x1c01fa0
	void StopPlayRecordFile(bool CallFunc_CheckVoiceMessageInited_ret, TimerHandle CallFunc_GetProcedureTimer_output);// 0x1c01fa0
	void PlayDownloadFile(BP_STRUCT_GlobalChatvoiceDownloadData thisDownload, bool CallFunc_CheckVoiceMessageInited_ret, float CallFunc_Conv_IntToFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1c01fa0
	void RequireGVoiceDownload(BP_STRUCT_GlobalChatvoiceDownloadData thisDownload, bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_CheckVoiceMessageInited_ret, TimerHandle CallFunc_K2_SetTimer_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1c01fa0
	void RecoverGVoiceRealtime(bool CallFunc_NotEqual_StrStr_ReturnValue);// 0x1c01fa0
	void LeaveGVoiceOffline();// 0x1c01fa0
	void RetrieveGVoiceOffline();// 0x1c01fa0
	void GetProcedureTimer(int Type, bool stopTimer, out TimerHandle Output);// 0x1c01fa0
	void AddProcedureTimer(TimerHandle Handle, int resendType, bool isStop);// 0x1c01fa0
	void ClearGVoiceSpeechToTextResendEntry(TimerHandle CallFunc_GetProcedureTimer_output);// 0x1c01fa0
	void ClearGVoiceUploadResendEntry(TimerHandle CallFunc_GetProcedureTimer_output);// 0x1c01fa0
	void ClearGVoiceAuthResendEntry(TimerHandle CallFunc_GetProcedureTimer_output);// 0x1c01fa0
	void ProcessVoiceProcedure(out bool Output, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1c01fa0
	void ClearResendProcedure();// 0x1c01fa0
	void RequireGVoiceSpeechToText();// 0x1c01fa0
	void RequireGVoiceUpload(float CallFunc_GetVoiceLength_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_GetVoiceLength_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_FFloor_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_ProcessVoiceProcedure_output, FString CallFunc_Concat_StrStr_ReturnValue5);// 0x1c01fa0
	void RequireGVoiceAuth(bool CallFunc_ProcessVoiceProcedure_output);// 0x1c01fa0
	void RequireGVoiceSpeechToTextEntry();// 0x1c01fa0
	void RequireGVoiceUploadEntry(TimerHandle CallFunc_GetProcedureTimer_output, TimerHandle CallFunc_GetProcedureTimer_output2);// 0x1c01fa0
	void RequireGVoiceAuthEntry();// 0x1c01fa0
	void ResetGVoiceMode(int Mode);// 0x1c01fa0
	void ResetTeamVoice(bool CallFunc_IsEditor_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue);// 0x1c01fa0
	void SyncPushLuaData();// 0x1c01fa0
	void SyncLuaData();// 0x1c01fa0
	void OnResetRoleInfo();// 0x1c01fa0
	void OnClearRoleInfo();// 0x1c01fa0
	void OnGVoiceInited();// 0x1c01fa0
	void OnAfterRequireAuth();// 0x1c01fa0
	void OnRequireAuthResend();// 0x1c01fa0
	void OnClearAuthResend();// 0x1c01fa0
	void OnAfterRequireUpload();// 0x1c01fa0
	void OnRequireUploadResend();// 0x1c01fa0
	void OnClearUploadResend();// 0x1c01fa0
	void OnAfterRequireSpeechToText();// 0x1c01fa0
	void OnRequireSpeechToTextResend();// 0x1c01fa0
	void OnClearSpeechToTextResend();// 0x1c01fa0
	void OnTryDownloadVoiceRecord();// 0x1c01fa0
	void OnClearDownloadFailedNotify();// 0x1c01fa0
	void OnDownloadFileComplete();// 0x1c01fa0
	void OnVoiceModeChanged();// 0x1c01fa0
	void OnApplyMessageKeyComplete();// 0x1c01fa0
	void OnTryStartRecordVoice();// 0x1c01fa0
	void OnTryStopRecordVoice();// 0x1c01fa0
	void OnTryCancelRecordVoice();// 0x1c01fa0
	void OnUploadRecordFileComplete();// 0x1c01fa0
	void OnUploadSpeechToTextComplete();// 0x1c01fa0
	void OnGameStageChanged();// 0x1c01fa0
	void BndEvt__btn_voice_on_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__btn_voice_off_K2Node_ComponentBoundEvent_41_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void BndEvt__btn_mic_on_K2Node_ComponentBoundEvent_58_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void OnVoiceMicOpenChanged();// 0x1c01fa0
	void OnVoiceSpeakerOpenChanged();// 0x1c01fa0
	void BndEvt__btn_mic_off_K2Node_ComponentBoundEvent_104_OnButtonClickedEvent__DelegateSignature();// 0x1c01fa0
	void OnTeamStateChanged();// 0x1c01fa0
	void OnTryStopPlayRecordVoice();// 0x1c01fa0
	void OnApplicationDeactivated();// 0x1c01fa0
	void OnUploadRecordFileFailed();// 0x1c01fa0
	void OnUploadSpeechToTextFailed();// 0x1c01fa0
	void OnJoinVoiceRoomSuccess();// 0x1c01fa0
	void OnTeamVoiceRoomChanged();// 0x1c01fa0
	void OnQuitVoiceRoomSuccess();// 0x1c01fa0
	void Construct();// 0x1c01fa0
	void ExecuteUbergraph_Global_Voice(int EntryPoint, bool CallFunc_NotEqual_StrStr_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue2, TimerHandle CallFunc_K2_SetTimer_ReturnValue3, TimerHandle CallFunc_GetProcedureTimer_output, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_chat_voice_C* K2Node_DynamicCast_AsBp_Chat_Voice, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_OpenMic_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue2, int CallFunc_OpenSpeaker_ReturnValue, TimerHandle CallFunc_GetProcedureTimer_output2, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_CheckVoiceMessageInited_ret, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_CheckVoiceMessageInited_ret2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_CheckVoiceMessageInited_ret3, bool CallFunc_CheckVoiceMessageInited_ret4, bool CallFunc_BooleanOR_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_CheckVoiceMessageInited_ret5, bool CallFunc_CheckVoiceMessageInited_ret6, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, GVoiceInterface* CallFunc_GetGvoiceInterface_outputObj, bp_global_C* CallFunc_GetGlobalData_globalObj, bool CallFunc_CheckChatPrivacyAcceptStatus_ChatPrivacyAcceptStatus, int CallFunc_OpenSpeaker_ReturnValue2, int CallFunc_OpenMic_ReturnValue2);// 0x1c01fa0
	WidgetAnimation* DX_Transitions_Enter;//[Offset: 0x2f4, Size: 0x4]
	WidgetAnimation* DX_Transitions_StartEnter;//[Offset: 0x2f8, Size: 0x4]
	Button* btn_mic_off;//[Offset: 0x2fc, Size: 0x4]
	Button* btn_mic_on;//[Offset: 0x300, Size: 0x4]
	Button* btn_voice_off;//[Offset: 0x304, Size: 0x4]
	Button* btn_voice_on;//[Offset: 0x308, Size: 0x4]
	Image* Image;//[Offset: 0x30c, Size: 0x4]
	Image* Image;//[Offset: 0x310, Size: 0x4]
	Image* Image;//[Offset: 0x314, Size: 0x4]
	Image* Image;//[Offset: 0x318, Size: 0x4]
	Image* Image;//[Offset: 0x31c, Size: 0x4]
	Image* Image;//[Offset: 0x320, Size: 0x4]
	Image* Image;//[Offset: 0x324, Size: 0x4]
	Image* Image;//[Offset: 0x328, Size: 0x4]
	CanvasPanel* lobby_root_anchor;//[Offset: 0x32c, Size: 0x4]
	Overlay* mic_root_anchor;//[Offset: 0x330, Size: 0x4]
	Overlay* voice_root_anchor;//[Offset: 0x334, Size: 0x4]
	GVoiceInterface* GVoiceHandle;//[Offset: 0x338, Size: 0x4]
	bp_chat_voice_C* LuaObject;//[Offset: 0x33c, Size: 0x4]
	int GVOICE_REALTIME;//[Offset: 0x340, Size: 0x4]
	int GVOICE_OFFLINE;//[Offset: 0x344, Size: 0x4]
	bool VoiceMessageInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	bool RoleValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	FString RoleGID;//[Offset: 0x34c, Size: 0xc]
	int GVoiceResendCounter;//[Offset: 0x358, Size: 0x4]
	int GVoiceResendRatio;//[Offset: 0x35c, Size: 0x4]
	int GVOICE_TIMER_AUTH;//[Offset: 0x360, Size: 0x4]
	int GVOICE_TIMER_UPLOAD;//[Offset: 0x364, Size: 0x4]
	int GVOICE_TIMER_TOTEXT;//[Offset: 0x368, Size: 0x4]
	int GVOICE_TIMER_RECORD;//[Offset: 0x36c, Size: 0x4]
	int GVOICE_TIMER_DOWNLOAD;//[Offset: 0x370, Size: 0x4]
	int GVOICE_TIMER_PLAYRECORD;//[Offset: 0x374, Size: 0x4]
	TimerHandle[] GVoiceResendStopTimers;//[Offset: 0x378, Size: 0xc]
	TimerHandle[] GVoiceResendLoopTimers;//[Offset: 0x384, Size: 0xc]
	float GVoiceOfflineLimit;//[Offset: 0x390, Size: 0x4]
	float GVoiceProcedureResendTime;//[Offset: 0x394, Size: 0x4]
	FString lastDownloadRecord;//[Offset: 0x398, Size: 0xc]
	bool voiceRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	bool voiceTryDelayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 0x1]
	bool voiceTryDownloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 0x1]
	bool voiceTryRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a7, Size: 0x1]
	bool voiceUploading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool isTeamup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	SettingConfig_C* userSetting;//[Offset: 0x3ac, Size: 0x4]
	int lastBGMVolume;//[Offset: 0x3b0, Size: 0x4]
	bool lastBGMFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	float thisRecordTime;//[Offset: 0x3b8, Size: 0x4]
	TimerHandle tickTimer;//[Offset: 0x3c0, Size: 0x8]
	bool voiceDownloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	bool voiceToTexting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1]
	bool animationShowUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 0x1]

--------------------------------
Class: bp_loading_C.LuaClassObj.LuaContext.Actor.Object
	void EventBpLoadingSetBgResPath_NoFetch();// 0x1c01fa0
	void EventBpLoadingSetBgResPath();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	FString BP_LoadingBgPath;//[Offset: 0x304, Size: 0xc]
	int BP_LoadingTo;//[Offset: 0x310, Size: 0x4]
	int BP_InitPercent;//[Offset: 0x314, Size: 0x4]
	float BP_Percent_f;//[Offset: 0x318, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x31c, Size: 0x4]

--------------------------------
Class: Login_Loading_UIBP_C.UAEUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f0, Size: 0x4]
	void UIHide();// 0x1c01fa0
	void RefreshLoading();// 0x1c01fa0
	void FinishLoading();// 0x1c01fa0
	void InitLoading(FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Object* CallFunc_UIGetResWithPath_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeText_Text, bool CallFunc_NotEqual_StrStr_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue);// 0x1c01fa0
	void UIShow();// 0x1c01fa0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1c01fa0
	void DelayShowLoading();// 0x1c01fa0
	void Construct();// 0x1c01fa0
	void ExecuteUbergraph_Login_Loading_UIBP(int EntryPoint, bool CallFunc_Less_FloatFloat_ReturnValue, FString Temp_string_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, LuaBPVar CallFunc_CallLua_OutA, LuaBPVar CallFunc_CallLua_OutB, LuaBPVar CallFunc_CallLua_OutC, LuaBPVar CallFunc_CallLua_OutD, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, LuaClassObj* CallFunc_UIGetLuaManager_ReturnValue, bp_loading_C* K2Node_DynamicCast_AsBp_Loading, bool K2Node_DynamicCast_bSuccess);// 0x1c01fa0
	WidgetAnimation* Loading_anima;//[Offset: 0x2f4, Size: 0x4]
	WeakRefImage* BackImage;//[Offset: 0x2f8, Size: 0x4]
	CanvasPanel* CanvasPanel;//[Offset: 0x2fc, Size: 0x4]
	GridPanel* GridPanel_Root;//[Offset: 0x300, Size: 0x4]
	Image* Image;//[Offset: 0x304, Size: 0x4]
	ProgressBar* ProgressBar_Loading;//[Offset: 0x308, Size: 0x4]
	TextBlock* TextBlock_LoadingTips;//[Offset: 0x30c, Size: 0x4]
	float SliderPercent;//[Offset: 0x310, Size: 0x4]
	bool TimerSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	float BreakMinValue;//[Offset: 0x318, Size: 0x4]
	bp_loading_C* bp_loading;//[Offset: 0x31c, Size: 0x4]
	int imgIndex;//[Offset: 0x320, Size: 0x4]
	bp_loading_C* NewVar;//[Offset: 0x324, Size: 0x4]

--------------------------------
Class: bp_roleinfo_achievement_float_tip_C.LuaClassObj.LuaContext.Actor.Object
	void EventAchievementFloatTipGo_NoFetch();// 0x1c01fa0
	void EventAchievementFloatTipGo();// 0x1c01fa0
	void EventAchievementFloatTipNext_NoFetch();// 0x1c01fa0
	void EventAchievementFloatTipNext();// 0x1c01fa0
	void EventAchievementInitialize_NoFetch();// 0x1c01fa0
	void EventAchievementInitialize();// 0x1c01fa0
	void EventAchievementClickIgnore_NoFetch();// 0x1c01fa0
	void EventAchievementClickIgnore();// 0x1c01fa0
	void EventAchievementFloatTipClear_NoFetch();// 0x1c01fa0
	void EventAchievementFloatTipClear();// 0x1c01fa0
	void EventAchievementFloatTipPeekNext_NoFetch();// 0x1c01fa0
	void EventAchievementFloatTipPeekNext();// 0x1c01fa0
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	int BP_Achievement_FloatTip_ID;//[Offset: 0x304, Size: 0x4]
	FString BP_Achievement_FloatTip_Title;//[Offset: 0x308, Size: 0xc]
	int BP_Achievement_FloatTip_Group;//[Offset: 0x314, Size: 0x4]
	FString BP_Achievement_FloatTip_ImgUrl;//[Offset: 0x318, Size: 0xc]
	bool BP_Achievement_FloatTip_QuickHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	BP_STRUCT_Achievement_FloatTip_Awards BP_STRUCT_Achievement_FloatTip_Awards;//[Offset: 0x328, Size: 0x14]
	int BP_Achievement_FloatTip_GroupNum;//[Offset: 0x33c, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x340, Size: 0x4]

--------------------------------
Class: BP_STRUCT_Achievement_FloatTip_Awards
	int score_0_13DAEF40717FF7DB434EDAC40D31F595;//[Offset: 0x0, Size: 0x4]
	int count0_3_41593E8017A157FC534DED73022194A0;//[Offset: 0x4, Size: 0x4]
	int id0_4_3101C7806CA7BDF07194AFBB031D2700;//[Offset: 0x8, Size: 0x4]
	int count1_5_415A3EC017A157FD534DED70022194A1;//[Offset: 0xc, Size: 0x4]
	int id1_6_3102C7C06CA7BDF17194AFB4031D2701;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: bp_scene_manager_C.LuaClassObj.LuaContext.Actor.Object
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	FString BP_LobbySceneManager_ClassPath;//[Offset: 0x304, Size: 0xc]
	int BP_LobbySceneManager_MallSceneMaterialID;//[Offset: 0x310, Size: 0x4]
	FString BP_LobbySceneManager_ExtraData;//[Offset: 0x314, Size: 0xc]
	FString BP_LobbySceneManager_OperateExtraModelPath;//[Offset: 0x320, Size: 0xc]
	int BP_LobbySceneManager_OperateExtraModelID;//[Offset: 0x32c, Size: 0x4]
	int[] BP_Array_LobbySceneManager_OperateExtraModelTransform;//[Offset: 0x330, Size: 0xc]
	FString BP_LobbySceneManager_MallSceneTextureURL;//[Offset: 0x33c, Size: 0xc]
	int BP_LobbySceneManager_LightType;//[Offset: 0x348, Size: 0x4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x34c, Size: 0x4]

--------------------------------
Class: bp_pet_manager_C.LuaClassObj.LuaContext.Actor.Object
	void UserConstructionScript();// 0x1c01fa0
	ScriptContextComponent* Generated_ScriptContext;//[Offset: 0x300, Size: 0x4]
	int BP_PetManagerCreateAvatarID;//[Offset: 0x304, Size: 0x4]
	int BP_PetManagerOperateAvatarID;//[Offset: 0x308, Size: 0x4]
	int BP_PetManagerLevel;//[Offset: 0x30c, Size: 0x4]
	BP_STRUCT_PetManager_PositionData BP_STRUCT_PetManager_PositionData;//[Offset: 0x310, Size: 0xc]
	FString BP_PetManagerOperateTypeID;//[Offset: 0x31c, Size: 0xc]
	int BP_STRUCT_PetManager_ActionId;//[Offset: 0x328, Size: 0x4]
	FString BP_PetManager_ExtraData;//[Offset: 0x32c, Size: 0xc]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x338, Size: 0x4]

--------------------------------
Class: BP_STRUCT_PetManager_PositionData
	float y_f_0_268091405F1EF313393D793003B7C336;//[Offset: 0x0, Size: 0x4]
	float z_f_1_0099518079B5758A393D75B903B7C436;//[Offset: 0x4, Size: 0x4]
	float x_f_2_4C67D1004488709C393D7D8B03B7C236;//[Offset: 0x8, Size: 0x4]

--------------------------------
