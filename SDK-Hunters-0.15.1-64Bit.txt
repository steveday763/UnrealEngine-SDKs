Class: Package.Object // 71a4988300

--------------------------------
Class: Object // 719b170d80
	void ExecuteUbergraph(int EntryPoint);// 0x45c6aa0 0x717df97780

--------------------------------
Class: Class.Struct.Field.Object // 71a4988580

--------------------------------
Class: Struct.Field.Object // 71a4988a80

--------------------------------
Class: Field.Object // 71a4988d00

--------------------------------
Class: ScriptStruct.Struct.Field.Object // 71a4988800

--------------------------------
Class: Enum.Field.Object // 71a4987400

--------------------------------
Class: Function.Struct.Field.Object // 71a4988080

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object // 71a4b0b280
	ProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0x10] 0x7172ba6140

--------------------------------
Class: ProfileMatch // 717dfca600
	FString Profile;//[Offset: 0x0, Size: 0x10] 0x717df8cc00
	ProfileMatchItem[] Match;//[Offset: 0x10, Size: 0x10] 0x7172ba60a0

--------------------------------
Class: ProfileMatchItem // 717dfca540
	byte SourceType;//[Offset: 0x0, Size: 0x1] 0x717df8cc80
	byte CompareType;//[Offset: 0x1, Size: 0x1] 0x717df8cd00
	FString MatchString;//[Offset: 0x8, Size: 0x10] 0x717df8cd80

--------------------------------
Class: AndroidJavaSurfaceViewDevices.Object // 71a4b0b000
	JavaSurfaceViewDevice[] SurfaceViewDevices;//[Offset: 0x28, Size: 0x10] 0x7172ba5f60

--------------------------------
Class: JavaSurfaceViewDevice // 717dfca480
	FString Manufacturer;//[Offset: 0x0, Size: 0x10] 0x717df8c700
	FString Model;//[Offset: 0x10, Size: 0x10] 0x717df8c780

--------------------------------
Class: GCObjectReferencer.Object // 71a4989200

--------------------------------
Class: SlateSettings.Object // 71a4993a80
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d255e80

--------------------------------
Class: ZyngaAuthenticationSubsystem.Object // 71a483f100
	ZyngaAccountDetails* AccountDetails;//[Offset: 0x438, Size: 0x8] 0x715cf5f200
	ZyngaAccountDetails* GetAccountDetails();// 0x352ce0c 0x715cf4e780
	void ClearAccountStore();// 0x352cdc0 0x715cf4e860
	bool AccountStoreContainsUserAccounts();// 0x352cdd4 0x715cf4e940

--------------------------------
Class: ZyngaAccountDetails.Object // 71a4836280
	ZyngaInstallCredentials InstallCredentials;//[Offset: 0x28, Size: 0x18] 0x715cf5c680
	ZyngaGameAccount GameAccount;//[Offset: 0x40, Size: 0x68] 0x715cf5c700
	ZyngaZisToken ZisToken;//[Offset: 0xa8, Size: 0x30] 0x715cf5c780
	ZyngaUserAccount UserAccount;//[Offset: 0xd8, Size: 0xd0] 0x715cf5c800
	ZyngaSsoTokenOptional SsoToken;//[Offset: 0x1a8, Size: 0x30] 0x715cf5c880
	bool IsAnonymous();// 0x350f8d4 0x715cf4d280

--------------------------------
Class: ZyngaInstallCredentials // 715da35a40
	int64 Identifier;//[Offset: 0x0, Size: 0x8] 0x715da4a400
	FString Secret;//[Offset: 0x8, Size: 0x10] 0x715da4a480

--------------------------------
Class: ZyngaGameAccount // 715da33580
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da47800
	int AppId;//[Offset: 0x4, Size: 0x4] 0x715da47880
	int64 PlayerId;//[Offset: 0x8, Size: 0x8] 0x715da47900
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715da47980
	<enum,int64> Logins;//[Offset: 0x18, Size: 0x50] 0x715da334c0

--------------------------------
Class: ZyngaZisToken // 715da35b00
	FString Token;//[Offset: 0x0, Size: 0x10] 0x715da4a500
	DateTime IssuedAt;//[Offset: 0x10, Size: 0x8] 0x715da48480
	DateTime ExpiresAt;//[Offset: 0x18, Size: 0x8] 0x715da48500
	enum[] AuthenticationContexts;//[Offset: 0x20, Size: 0x10] 0x715d8972c0

--------------------------------
Class: DateTime // 717dfc8500

--------------------------------
Class: ZyngaUserAccount // 715da33e80
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da48080
	int64 ID;//[Offset: 0x8, Size: 0x8] 0x715da48100
	ZyngaAccountName Name;//[Offset: 0x10, Size: 0x18] 0x715da48280
	ZyngaEmailState EmailState;//[Offset: 0x28, Size: 0x20] 0x715da46500
	ZyngaFacebookState FacebookState;//[Offset: 0x48, Size: 0x20] 0x715da46700
	ZyngaSiwaState SiwaState;//[Offset: 0x68, Size: 0x60] 0x715da46b80
	ZyngaEmailPassword Password;//[Offset: 0xc8, Size: 0x5] 0x715da46f00

--------------------------------
Class: ZyngaAccountName // 715da33880
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da48180
	FString Name;//[Offset: 0x8, Size: 0x10] 0x715da48200

--------------------------------
Class: ZyngaEmailState // 715da33a00
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da48300
	FString ID;//[Offset: 0x8, Size: 0x10] 0x715da48380
	bool bVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715da48400
	ZyngaMarketingOptIn MarketingOptIn;//[Offset: 0x19, Size: 0x2] 0x715da46480

--------------------------------
Class: ZyngaMarketingOptIn // 715da33940
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da46380
	bool bMarketingOptIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715da46400

--------------------------------
Class: ZyngaFacebookState // 715da33ac0
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da46580
	bool bVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715da46600
	OptionalString Name;//[Offset: 0x8, Size: 0x18] 0x715da46680

--------------------------------
Class: OptionalString // 715da33b80
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da46a00
	FString Value;//[Offset: 0x8, Size: 0x10] 0x715da46a80

--------------------------------
Class: ZyngaSiwaState // 715da33c40
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da46780
	bool bVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715da46800
	FString Zid;//[Offset: 0x8, Size: 0x10] 0x715da46880
	OptionalString Name;//[Offset: 0x18, Size: 0x18] 0x715da46900
	OptionalString AccessToken;//[Offset: 0x30, Size: 0x18] 0x715da46980
	OptionalString RefreshToken;//[Offset: 0x48, Size: 0x18] 0x715da46b00

--------------------------------
Class: ZyngaEmailPassword // 715da33dc0
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da46c00
	bool bIsVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715da46c80
	bool bIsConnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715da46d00
	ZyngaPasswordType MatchedPassword;//[Offset: 0x3, Size: 0x2] 0x715da46e80

--------------------------------
Class: ZyngaPasswordType // 715da33d00
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da46d80
	enum PasswordType;//[Offset: 0x1, Size: 0x1] 0x715d897900

--------------------------------
Class: ZyngaSsoTokenOptional // 715da35bc0
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da48600
	ZyngaSsoToken Value;//[Offset: 0x8, Size: 0x28] 0x715da48680

--------------------------------
Class: ZyngaSsoToken // 715da337c0
	FString Token;//[Offset: 0x0, Size: 0x10] 0x715da47e80
	DateTime IssuedAt;//[Offset: 0x10, Size: 0x8] 0x715da47f00
	enum[] AuthenticationContexts;//[Offset: 0x18, Size: 0x10] 0x715d897860

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object // 71a4987e00

--------------------------------
Class: ZyngaAuthenticationSubsystemDelegates.Object // 71a4834c00
	void OnVerificationLinkSent(ZyngaVerificationLinkSentFlow* VerificationLinkSentFlow);// 0x33289d4 0x715cf4ab20
	void OnPromptUserAccountLogin(ZyngaAccountLoginFlow* AccountLoginFlow);// 0x3328d08 0x715cf4ac00
	void OnPromptSecondaryDeviceLogin(ZyngaSecondaryDeviceLoginFlow* AccountAuthCodeFlow);// 0x33287e8 0x715cf4ace0
	void OnPromptEmailChange(ZyngaAccountLoginFlow* AccountLoginFlow);// 0x3328930 0x715cf47400
	void OnPromptConfirmCreateAccount(ZyngaConfirmCreateAccountFlow* ConfirmCreateAccountFlow);// 0x3328b1c 0x715cf474e0
	void OnPromptConfirmAccountLogin(ZyngaConfirmAccountLoginFlow* ConfirmAccountLoginFlow);// 0x3328a78 0x715cf475c0
	void OnPromptCaptcha(ZyngaCaptchaChallengeFlow* CaptchaChallengeFlow);// 0x332888c 0x715cf476a0
	void OnPromptAuthCode(ZyngaAccountAuthCodeFlow* AccountAuthCodeFlow);// 0x3328c64 0x715cf47780
	void OnHandleSecurityChallenge(ZyngaHandleSecurityChallengeFlow* HandleSecurityChallengeFlow);// 0x3328bc0 0x715cf47860
	void OnAccountChanged(ZyngaAccountDetails* AccountDetails);// 0x3328744 0x715cf47940

--------------------------------
Class: ZyngaVerificationLinkSentFlow.Object // 71a483df80

--------------------------------
Class: ZyngaAccountLoginFlow.Object // 71a483f380

--------------------------------
Class: ZyngaSecondaryDeviceLoginFlow.Object // 71a483e200

--------------------------------
Class: ZyngaConfirmCreateAccountFlow.Object // 71a483e700

--------------------------------
Class: ZyngaConfirmAccountLoginFlow.Object // 71a483e980

--------------------------------
Class: ZyngaCaptchaChallengeFlow.Object // 71a483ec00

--------------------------------
Class: ZyngaAccountAuthCodeFlow.Object // 71a483f600

--------------------------------
Class: ZyngaHandleSecurityChallengeFlow.Object // 71a483e480

--------------------------------
Class: AssetRegistryImpl.Object // 71a49c0380

--------------------------------
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object // 71a4987b80

--------------------------------
Class: TextBuffer.Object // 71a4988f80

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object // 71a4987900

--------------------------------
Class: PackageMap.Object // 71a4987680

--------------------------------
Class: Interface.Object // 719b177680

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object // 71a4987180

--------------------------------
Class: LinkerPlaceholderExportObject.Object // 71a4986f00

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object // 71a4986c80

--------------------------------
Class: MetaData.Object // 71a4986a00

--------------------------------
Class: ObjectRedirector.Object // 71a4986780

--------------------------------
Class: Property.Field.Object // 71a4986500

--------------------------------
Class: EnumProperty.Property.Field.Object // 71a4986280

--------------------------------
Class: ArrayProperty.Property.Field.Object // 71a4986000

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object // 71a4985d80

--------------------------------
Class: BoolProperty.Property.Field.Object // 71a4985b00

--------------------------------
Class: NumericProperty.Property.Field.Object // 71a4985600

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object // 71a4985880

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object // 71a498f600

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object // 71a4985380

--------------------------------
Class: DelegateProperty.Property.Field.Object // 71a498f380

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object // 71a498f100

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object // 71a498ee80

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object // 71a498ec00

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object // 71a498e980

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object // 71a498e700

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object // 71a498e480

--------------------------------
Class: InterfaceProperty.Property.Field.Object // 71a498e200

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object // 71a498df80

--------------------------------
Class: MapProperty.Property.Field.Object // 71a498dd00

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object // 71a498da80

--------------------------------
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object // 71a498d800

--------------------------------
Class: MulticastSparseDelegateProperty.MulticastDelegateProperty.Property.Field.Object // 71a498d580

--------------------------------
Class: NameProperty.Property.Field.Object // 71a498d300

--------------------------------
Class: SetProperty.Property.Field.Object // 71a498d080

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object // 71a498cb80

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object // 71a498ce00

--------------------------------
Class: StrProperty.Property.Field.Object // 71a498c900

--------------------------------
Class: StructProperty.Property.Field.Object // 71a498c680

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object // 71a498c400

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object // 71a498c180

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object // 71a498bf00

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object // 71a498bc80

--------------------------------
Class: TextProperty.Property.Field.Object // 71a498ba00

--------------------------------
Class: PropertyWrapper.Object // 71a498b780

--------------------------------
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object // 71a498b500

--------------------------------
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object // 71a498b280

--------------------------------
Class: Model.Object // 71a49d4e80

--------------------------------
Class: Actor.Object // 719b177e00
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30] 0x715d876800
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x715d876880
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x715d876900
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1] 0x715d876980
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1] 0x715d876a00
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1] 0x715d876a80
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1] 0x715d876b00
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1] 0x715d876b80
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x715d876c00
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x715d876c80
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x715d876d00
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x715d876d80
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1] 0x715d876e00
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1] 0x715d876e80
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1] 0x715d876f00
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1] 0x715d876f80
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1] 0x715d877000
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1] 0x715d877080
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1] 0x715d877100
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1] 0x715d877180
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1] 0x715d877200
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1] 0x715d877280
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1] 0x715d877300
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1] 0x715d877380
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1] 0x715d875300
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x715d875380
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x715d875400
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x715d875480
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1] 0x715d875500
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1] 0x715d875600
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 0x1] 0x7148cdeca0
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1] 0x7148cded40
	byte RemoteRole;//[Offset: 0x5f, Size: 0x1] 0x715d875700
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 0x34] 0x715d875c00
	float InitialLifeSpan;//[Offset: 0x94, Size: 0x4] 0x715d875c80
	float CustomTimeDilation;//[Offset: 0x98, Size: 0x4] 0x715d875d00
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 0x40] 0x715d876080
	Actor* Owner;//[Offset: 0xe0, Size: 0x8] 0x715d876100
	FName NetDriverName;//[Offset: 0xe8, Size: 0x8] 0x715d876180
	byte Role;//[Offset: 0xf0, Size: 0x1] 0x715d876200
	byte NetDormancy;//[Offset: 0xf1, Size: 0x1] 0x715d876280
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 0x1] 0x7148cdf060
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 0x1] 0x715d874280
	int InputPriority;//[Offset: 0xf4, Size: 0x4] 0x715d874300
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 0x8] 0x715d874380
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 0x4] 0x715d874400
	int NetTag;//[Offset: 0x104, Size: 0x4] 0x715d874480
	float NetUpdateFrequency;//[Offset: 0x108, Size: 0x4] 0x715d874500
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 0x4] 0x715d874580
	float NetPriority;//[Offset: 0x110, Size: 0x4] 0x715d874600
	Pawn* Instigator;//[Offset: 0x118, Size: 0x8] 0x715d874680
	Actor*[] Children;//[Offset: 0x120, Size: 0x10] 0x7148cdf100
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 0x8] 0x715d874780
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 0x10] 0x7148cdf1a0
	FName[] Layers;//[Offset: 0x150, Size: 0x10] 0x7148cdf240
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 0x8] 0x715d874900
	FName[] Tags;//[Offset: 0x170, Size: 0x10] 0x7148cdf2e0
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 0x1] 0x715d874a00
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 0x1] 0x715d874a80
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 0x1] 0x715d874b00
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 0x1] 0x715d874b80
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 0x1] 0x715d874c00
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 0x1] 0x715d874c80
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 0x1] 0x715d874d00
	delegate OnClicked;//[Offset: 0x187, Size: 0x1] 0x715d874d80
	delegate OnReleased;//[Offset: 0x188, Size: 0x1] 0x715d874e00
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 0x1] 0x715d874e80
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 0x1] 0x715d874f00
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 0x1] 0x715d874f80
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 0x1] 0x715d875000
	delegate OnActorHit;//[Offset: 0x18d, Size: 0x1] 0x715d875080
	delegate OnDestroyed;//[Offset: 0x18e, Size: 0x1] 0x715d875100
	delegate OnEndPlay;//[Offset: 0x18f, Size: 0x1] 0x715d875180
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 0x10] 0x7148cdf380
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 0x10] 0x7148cdf420
	bool WasRecentlyRendered(float Tolerance);// 0x60c9710 0x715d83f9e0
	void UserConstructionScript();// 0x45c6aa0 0x715d83fac0
	void TearOff();// 0x60cdf28 0x715d83fba0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x60caa6c 0x715d83fc80
	void SetTickGroup(byte NewTickGroup);// 0x60c97c0 0x715d83fd60
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x60ca41c 0x715d83fe40
	void SetReplicates(bool bInReplicates);// 0x60cddb4 0x715d83ff20
	void SetReplicateMovement(bool bInReplicateMovement);// 0x60cdd00 0x715d83caa0
	void SetOwner(Actor* NewOwner);// 0x60c9df0 0x715d83cb80
	void SetNetDormancy(byte NewDormancy);// 0x60c9c80 0x715d83cc60
	void SetLifeSpan(float InLifespan);// 0x60ca0b0 0x715d83cd40
	void SetAutoDestroyWhenFinished(bool bVal);// 0x60cde7c 0x715d83ce20
	void SetActorTickInterval(float TickInterval);// 0x60c9eec 0x715d83cf00
	void SetActorTickEnabled(bool bEnabled);// 0x60c9fc8 0x715d83cfe0
	void SetActorScale3D(Vector NewScale3D);// 0x60ccd30 0x715d83d0c0
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x60cb680 0x715d83d1a0
	void SetActorHiddenInGame(bool bNewHidden);// 0x60cb594 0x715d83d280
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x60cb4e8 0x715d83d360
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x60ca500 0x715d83d440
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x60ca5ac 0x715d83d520
	void ReceiveTick(float DeltaSeconds);// 0x45c6aa0 0x715d83d600
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x45c6aa0 0x715d83d6e0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x45c6aa0 0x715d83d7c0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x45c6aa0 0x715d83d8a0
	void ReceiveEndPlay(byte EndPlayReason);// 0x45c6aa0 0x715d83d980
	void ReceiveDestroyed();// 0x45c6aa0 0x715d83da60
	void ReceiveBeginPlay();// 0x45c6aa0 0x715d83db40
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x45c6aa0 0x715d83dc20
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x45c6aa0 0x715d83dd00
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x45c6aa0 0x715d83dde0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x45c6aa0 0x715d83dec0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x45c6aa0 0x715d83dfa0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x45c6aa0 0x715d83e080
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x45c6aa0 0x715d83e160
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x45c6aa0 0x715d83e240
	void ReceiveActorEndCursorOver();// 0x45c6aa0 0x715d83e320
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x45c6aa0 0x715d83e400
	void ReceiveActorBeginCursorOver();// 0x45c6aa0 0x715d83e4e0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x60c95b4 0x715d83e5c0
	void OnRep_ReplicateMovement();// 0x60cdf44 0x715d83e6a0
	void OnRep_ReplicatedMovement();// 0x60c9e9c 0x715d83adc0
	void OnRep_Owner();// 0x60cde60 0x715d83aea0
	void OnRep_Instigator();// 0x60cdc90 0x715d83af80
	void OnRep_AttachmentReplication();// 0x60cdcac 0x715d83b060
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x60c8f2c 0x715d83b140
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x60ca370 0x715d83b220
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x60c99d4 0x715d83b300
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cc1b4 0x715d83b3e0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x60ccfd8 0x715d83b4c0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cb724 0x715d83b5a0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cb90c 0x715d83b680
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cbabc 0x715d83b760
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60ccdd4 0x715d83b840
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cd4c0 0x715d83b920
	void K2_OnReset();// 0x45c6aa0 0x715d83ba00
	void K2_OnEndViewTarget(PlayerController* PC);// 0x45c6aa0 0x715d83bae0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x45c6aa0 0x715d83bbc0
	SceneComponent* K2_GetRootComponent();// 0x60cd114 0x715d83bca0
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x60c930c 0x715d83bd80
	Rotator K2_GetActorRotation();// 0x60cd3c8 0x715d83be60
	Vector K2_GetActorLocation();// 0x60cd67c 0x715d83bf40
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x60ca894 0x715d83c020
	void K2_DestroyComponent(ActorComponent* Component);// 0x60cb230 0x715d83c100
	void K2_DestroyActor();// 0x60cb4ac 0x715d83c1e0
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x60caec0 0x715d83c2c0
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x60cab50 0x715d83c3a0
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x60cad4c 0x715d83c480
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x60cb0bc 0x715d83c560
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cc3a8 0x715d83c640
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cc590 0x715d83c720
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cc740 0x715d83c800
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cbc6c 0x715d83c8e0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cbe54 0x715d83c9c0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x60cc004 0x715d8390e0
	bool IsOverlappingActor(const Actor* Other);// 0x60c9d24 0x715d8391c0
	bool IsChildActor();// 0x60c9c34 0x715d8392a0
	bool IsActorTickEnabled();// 0x60c9f90 0x715d839380
	bool IsActorBeingDestroyed();// 0x60ca31c 0x715d839460
	bool HasAuthority();// 0x60cb488 0x715d839540
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x60cca48 0x715d839620
	Vector GetVelocity();// 0x60cd0d4 0x715d839700
	Transform GetTransform();// 0x60cd6d4 0x715d8397e0
	bool GetTickableWhenPaused();// 0x60ca4c8 0x715d8398c0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x60ccba0 0x715d8399a0
	byte GetRemoteRole();// 0x60cdcc8 0x715d839a80
	ChildActorComponent* GetParentComponent();// 0x60c9af8 0x715d839b60
	Actor* GetParentActor();// 0x60c9ac4 0x715d839c40
	Actor* GetOwner();// 0x60c9dd4 0x715d839d20
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x60ca15c 0x715d839e00
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x60ca21c 0x715d839ee0
	byte GetLocalRole();// 0x60cdce4 0x715d839fc0
	float GetLifeSpan();// 0x60ca074 0x715d83a0a0
	Controller* GetInstigatorController();// 0x60cd710 0x715d83a180
	Pawn* GetInstigator();// 0x60cd744 0x715d83a260
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x60cd778 0x715d83a340
	float GetInputAxisValue(const FName InputAxisName);// 0x60cda8c 0x715d83a420
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x60cd904 0x715d83a500
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x60cc8f0 0x715d83a5e0
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x60ccaf4 0x715d83a6c0
	float GetGameTimeSinceCreation();// 0x60ca33c 0x715d83a7a0
	float GetDotProductTo(const Actor* OtherActor);// 0x60cc99c 0x715d83a880
	float GetDistanceTo(const Actor* OtherActor);// 0x60ccc4c 0x715d83a960
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x60c91d4 0x715d83aa40
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x60c90dc 0x715d83ab20
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x60c9404 0x715d83ac00
	FName GetAttachParentSocketName();// 0x60c996c 0x715d83ace0
	Actor* GetAttachParentActor();// 0x60c99a0 0x715d837400
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x60c9864 0x715d8374e0
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x60c9b2c 0x715d8375c0
	Vector GetActorUpVector();// 0x60cd320 0x715d8376a0
	float GetActorTimeDilation();// 0x60ca7b0 0x715d837780
	float GetActorTickInterval();// 0x60c9eb8 0x715d837860
	Vector GetActorScale3D();// 0x60cccf8 0x715d837940
	Vector GetActorRightVector();// 0x60cd2cc 0x715d837a20
	Vector GetActorRelativeScale3D();// 0x60cb648 0x715d837b00
	Vector GetActorForwardVector();// 0x60cd374 0x715d837be0
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x60c94b0 0x715d837cc0
	bool GetActorEnableCollision();// 0x60cb4c8 0x715d837da0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x60cd130 0x715d837e80
	void ForceNetUpdate();// 0x60c96f4 0x715d837f60
	void FlushNetDormancy();// 0x60c9c6c 0x715d838040
	void EnableInput(PlayerController* PlayerController);// 0x60cdbe4 0x715d838120
	void DisableInput(PlayerController* PlayerController);// 0x60cdb38 0x715d838200
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x60ca9c0 0x715d8382e0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x60ca658 0x715d8383c0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x60ca704 0x715d8384a0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x60cb2d4 0x715d838580
	bool ActorHasTag(FName Tag);// 0x60ca7e4 0x715d838660

--------------------------------
Class: ActorTickFunction.TickFunction // 714906ca00

--------------------------------
Class: TickFunction // 7149066dc0
	byte TickGroup;//[Offset: 0x8, Size: 0x1] 0x7148ca6f80
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1] 0x7148ca7000
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7148ca7080
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x7148ca7100
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x7148ca7180
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x7148ca7200
	float TickInterval;//[Offset: 0xc, Size: 0x4] 0x7148ca7280

--------------------------------
Class: RepMovement // 714906cac0
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc] 0x715d875780
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc] 0x715d875800
	Vector Location;//[Offset: 0x18, Size: 0xc] 0x715d875880
	Rotator Rotation;//[Offset: 0x24, Size: 0xc] 0x715d875900
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x715d875980
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x715d875a00
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1] 0x7148cdee80
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1] 0x7148cdede0
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1] 0x7148cdef20

--------------------------------
Class: Vector // 717dfc6b80
	float X;//[Offset: 0x0, Size: 0x4] 0x717df87880
	float Y;//[Offset: 0x4, Size: 0x4] 0x717df87900
	float Z;//[Offset: 0x8, Size: 0x4] 0x717df87980

--------------------------------
Class: Rotator // 717dfc67c0
	float Pitch;//[Offset: 0x0, Size: 0x4] 0x717df89380
	float Yaw;//[Offset: 0x4, Size: 0x4] 0x717df89400
	float Roll;//[Offset: 0x8, Size: 0x4] 0x717df89480

--------------------------------
Class: RepAttachment // 714906cc40
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8] 0x715d875d80
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc] 0x715d875e00
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc] 0x715d875e80
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc] 0x715d875f00
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8] 0x715d875f80
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8] 0x715d876000

--------------------------------
Class: Vector_NetQuantize100.Vector // 7149067f00

--------------------------------
Class: SceneComponent.ActorComponent.Object // 71a482ba00
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8] 0x715d87dd00
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8] 0x715d87dd80
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8] 0x715d87de00
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10] 0x7148cdfe20
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10] 0x7148cdfec0
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc] 0x715d87df80
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc] 0x715d87e000
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc] 0x715d87e080
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc] 0x715d87e100
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x715d87e180
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1] 0x715d87e200
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1] 0x715d87e280
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1] 0x715d87e300
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1] 0x715d87e380
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1] 0x715d87e400
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1] 0x715d87e480
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1] 0x715d87e500
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1] 0x715d87e580
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1] 0x715d87e600
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1] 0x715d87e680
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1] 0x715d87e700
	byte Mobility;//[Offset: 0x14f, Size: 0x1] 0x715d87c680
	byte DetailMode;//[Offset: 0x150, Size: 0x1] 0x715d87c700
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1] 0x715d87c780
	void ToggleVisibility(bool bPropagateToChildren);// 0x62de040 0x715d885480
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x62de998 0x715d885560
	void SetWorldScale3D(Vector NewScale);// 0x62dfad0 0x715d885640
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x62de104 0x715d881d60
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x62e0ee4 0x715d881e40
	void SetRelativeScale3D(Vector NewScale3D);// 0x62e077c 0x715d881f20
	void SetMobility(byte NewMobility);// 0x62dd92c 0x715d882000
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x62ddf40 0x715d8820e0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x62ddbc8 0x715d8821c0
	void ResetRelativeTransform();// 0x62e0820 0x715d8822a0
	void OnRep_Visibility(bool OldValue);// 0x62e0de8 0x715d882380
	void OnRep_Transform();// 0x62e0ed0 0x715d882460
	void OnRep_AttachSocketName();// 0x62e0e94 0x715d882540
	void OnRep_AttachParent();// 0x62e0ebc 0x715d882620
	void OnRep_AttachChildren();// 0x62e0ea8 0x715d882700
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62df8e8 0x715d8827e0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62dfb74 0x715d8828c0
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62dd9d8 0x715d8829a0
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62dfd24 0x715d882a80
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62e08a0 0x715d882b60
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62e0a88 0x715d882c40
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62ddd1c 0x715d882d20
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62e0c38 0x715d882e00
	Transform K2_GetComponentToWorld();// 0x62df28c 0x715d882ee0
	Vector K2_GetComponentScale();// 0x62df2f8 0x715d882fc0
	Rotator K2_GetComponentRotation();// 0x62df330 0x715d8830a0
	Vector K2_GetComponentLocation();// 0x62df368 0x715d883180
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x62de71c 0x715d883260
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x62dea88 0x715d883340
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x62dec90 0x715d883420
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62df3a0 0x715d883500
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62df588 0x715d8835e0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62df738 0x715d8836c0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62e041c 0x715d8837a0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62e05cc 0x715d883880
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62dfed4 0x715d883960
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62e00bc 0x715d880080
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x62e026c 0x715d880160
	bool IsVisible();// 0x62de204 0x715d880240
	bool IsSimulatingPhysics(FName BoneName);// 0x62df12c 0x715d880320
	bool IsAnySimulatingPhysics();// 0x62df0ec 0x715d880400
	Vector GetUpVector();// 0x62df21c 0x715d8804e0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x62de564 0x715d8805c0
	Rotator GetSocketRotation(FName InSocketName);// 0x62de3f4 0x715d8806a0
	Quat GetSocketQuaternion(FName InSocketName);// 0x62de33c 0x715d880780
	Vector GetSocketLocation(FName InSocketName);// 0x62de4ac 0x715d880860
	bool GetShouldUpdatePhysicsVolume();// 0x62e0f90 0x715d880940
	Vector GetRightVector();// 0x62df1e4 0x715d880a20
	Transform GetRelativeTransform();// 0x62e0834 0x715d880b00
	PhysicsVolume* GetPhysicsVolume();// 0x62ddf0c 0x715d880be0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x62deff4 0x715d880cc0
	int GetNumChildrenComponents();// 0x62defc0 0x715d880da0
	Vector GetForwardVector();// 0x62df254 0x715d880e80
	Vector GetComponentVelocity();// 0x62de244 0x715d880f60
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x62dee10 0x715d881040
	SceneComponent* GetChildComponent(int ChildIndex);// 0x62def14 0x715d881120
	FName GetAttachSocketName();// 0x62df0b4 0x715d881200
	SceneComponent* GetAttachParent();// 0x62df0d0 0x715d8812e0
	FName[] GetAllSocketNames();// 0x62de66c 0x715d8813c0
	bool DoesSocketExist(FName InSocketName);// 0x62de284 0x715d8814a0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x62de894 0x715d881580

--------------------------------
Class: ActorComponent.Object // 719b178580
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30] 0x7148ca7300
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10] 0x7148cd0600
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x7148cd06a0
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4] 0x7148ca5380
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1] 0x7148ca5400
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1] 0x7148ca5480
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1] 0x7148ca5500
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1] 0x7148ca5580
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1] 0x7148ca5600
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1] 0x7148ca5680
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1] 0x7148ca5700
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1] 0x7148cd0740
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1] 0x7148ca5800
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1] 0x7148ca5900
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10] 0x7148cd0880
	void ToggleActive();// 0x60d2c84 0x7149047320
	void SetTickGroup(byte NewTickGroup);// 0x60d2744 0x7149043a40
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x60d2b04 0x7149043b20
	void SetIsReplicated(bool ShouldReplicate);// 0x60d2a58 0x7149043c00
	void SetComponentTickInterval(float TickInterval);// 0x60d28c0 0x7149043ce0
	void SetComponentTickEnabled(bool bEnabled);// 0x60d29a4 0x7149043dc0
	void SetAutoActivate(bool bNewAutoActivate);// 0x60d2bb0 0x7149043ea0
	void SetActive(bool bNewActive, bool bReset);// 0x60d2ca0 0x7149043f80
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x60d2494 0x7149044060
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x60d2540 0x7149044140
	void ReceiveTick(float DeltaSeconds);// 0x45c6aa0 0x7149044220
	void ReceiveEndPlay(byte EndPlayReason);// 0x45c6aa0 0x7149044300
	void ReceiveBeginPlay();// 0x45c6aa0 0x71490443e0
	void OnRep_IsActive();// 0x60d2f40 0x71490444c0
	void K2_DestroyComponent(Object* Object);// 0x60d27e8 0x71490445a0
	bool IsComponentTickEnabled();// 0x60d2964 0x7149044680
	bool IsBeingDestroyed();// 0x60d2f5c 0x7149044760
	bool IsActive();// 0x60d2c64 0x7149044840
	Actor* GetOwner();// 0x60d2f24 0x7149044920
	float GetComponentTickInterval();// 0x60d288c 0x7149044a00
	void Deactivate();// 0x60d2da4 0x7149044ae0
	bool ComponentHasTag(FName Tag);// 0x60d2e74 0x7149044bc0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x60d25ec 0x7149044ca0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x60d2698 0x7149044d80
	void Activate(bool bReset);// 0x60d2dc0 0x7149044e60

--------------------------------
Class: ActorComponentTickFunction.TickFunction // 7149066d00

--------------------------------
Class: Transform // 717dfc8680
	Quat Rotation;//[Offset: 0x0, Size: 0x10] 0x717df8a580
	Vector Translation;//[Offset: 0x10, Size: 0xc] 0x717df8a600
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc] 0x717df8a680

--------------------------------
Class: Quat // 717dfc6700
	float X;//[Offset: 0x0, Size: 0x4] 0x717df89180
	float Y;//[Offset: 0x4, Size: 0x4] 0x717df89200
	float Z;//[Offset: 0x8, Size: 0x4] 0x717df89280
	float W;//[Offset: 0xc, Size: 0x4] 0x717df89300

--------------------------------
Class: HitResult // 7149067240
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7148ca2a80
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7148ca2b00
	int FaceIndex;//[Offset: 0x4, Size: 0x4] 0x7148ca2b80
	float Time;//[Offset: 0x8, Size: 0x4] 0x7148ca2c00
	float Distance;//[Offset: 0xc, Size: 0x4] 0x7148ca2c80
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc] 0x7148ca2d00
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc] 0x7148ca2d80
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc] 0x7148ca2e00
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc] 0x7148ca2e80
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc] 0x7148ca2f00
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc] 0x7148ca2f80
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4] 0x7148ca3000
	int Item;//[Offset: 0x5c, Size: 0x4] 0x7148ca3080
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8] 0x7148ca3100
	Actor* Actor;//[Offset: 0x68, Size: 0x8] 0x7148ca3180
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8] 0x7148ca1100
	FName BoneName;//[Offset: 0x78, Size: 0x8] 0x7148ca1180
	FName MyBoneName;//[Offset: 0x80, Size: 0x8] 0x7148ca1200

--------------------------------
Class: Vector_NetQuantize.Vector // 7149067180

--------------------------------
Class: Vector_NetQuantizeNormal.Vector // 71490670c0

--------------------------------
Class: PhysicalMaterial.Object // 71a4acd300
	float Friction;//[Offset: 0x28, Size: 0x4] 0x715cc42680
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1] 0x715cc42700
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x715cc42780
	float Restitution;//[Offset: 0x30, Size: 0x4] 0x715cc42800
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1] 0x715cc42880
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x715cc42900
	float Density;//[Offset: 0x38, Size: 0x4] 0x715cc42980
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4] 0x715cc42a00
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4] 0x715cc42a80
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8] 0x715cc42b00
	byte SurfaceType;//[Offset: 0x50, Size: 0x1] 0x715cc42b80
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4] 0x715cc42c00
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10] 0x715cb2c860

--------------------------------
Class: PhysicalMaterialPropertyBase.Object // 71a4acce00

--------------------------------
Class: TireFrictionScalePair // 715ce704c0
	TireType* TireType;//[Offset: 0x0, Size: 0x8] 0x715ce6b380
	float FrictionScale;//[Offset: 0x8, Size: 0x4] 0x715ce6b400

--------------------------------
Class: TireType.DataAsset.Object // 71a4aea100
	float FrictionScale;//[Offset: 0x30, Size: 0x4] 0x715cc91880

--------------------------------
Class: DataAsset.Object // 719b17fb00
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8] 0x7148cd8940

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a482bc80
	int ZoneOverride;//[Offset: 0x1f8, Size: 0x4] 0x715d8ad100
	float MinDrawDistance;//[Offset: 0x1fc, Size: 0x4] 0x715d8ad180
	float LDMaxDrawDistance;//[Offset: 0x200, Size: 0x4] 0x715d8ad200
	float CachedMaxDrawDistance;//[Offset: 0x204, Size: 0x4] 0x715d8ad280
	byte DepthPriorityGroup;//[Offset: 0x208, Size: 0x1] 0x715d8ad300
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x209, Size: 0x1] 0x715d8ad380
	byte IndirectLightingCacheQuality;//[Offset: 0x20a, Size: 0x1] 0x715d8ad400
	enum LightmapType;//[Offset: 0x20b, Size: 0x1] 0x715d890740
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1] 0x715d8ad500
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 0x1] 0x715d8ad580
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 0x1] 0x715d8ad600
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20c, Size: 0x1] 0x715d8ad680
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 0x1] 0x715d8ab600
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 0x1] 0x715d8ab680
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20d, Size: 0x1] 0x715d8ab700
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20d, Size: 0x1] 0x715d8ab780
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20d, Size: 0x1] 0x715d8ab800
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20d, Size: 0x1] 0x715d8ab880
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20d, Size: 0x1] 0x715d8ab900
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20d, Size: 0x1] 0x715d8ab980
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20e, Size: 0x1] 0x715d8aba00
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20e, Size: 0x1] 0x715d8aba80
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20e, Size: 0x1] 0x715d8abb00
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20e, Size: 0x1] 0x715d8abb80
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20e, Size: 0x1] 0x715d8abc00
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20e, Size: 0x1] 0x715d8abc80
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20e, Size: 0x1] 0x715d8abd00
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20e, Size: 0x1] 0x715d8abd80
	bool bSelectable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20f, Size: 0x1] 0x715d8abe00
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20f, Size: 0x1] 0x715d8abe80
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20f, Size: 0x1] 0x715d8abf00
	bool CastShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20f, Size: 0x1] 0x715d8abf80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20f, Size: 0x1] 0x715d8ac000
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20f, Size: 0x1] 0x715d8ac080
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20f, Size: 0x1] 0x715d8ac100
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20f, Size: 0x1] 0x715d8ac180
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1] 0x715d8ac200
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1] 0x715d8ac280
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1] 0x715d8ac300
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1] 0x715d8ac380
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1] 0x715d8ac400
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x210, Size: 0x1] 0x715d8ac480
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x210, Size: 0x1] 0x715d8ac500
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1] 0x715d8ac580
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1] 0x715d8ac600
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1] 0x715d8aa580
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 0x1] 0x715d8aa600
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 0x1] 0x715d8aa680
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 0x1] 0x715d8aa700
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 0x1] 0x715d8aa780
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 0x1] 0x715d8aa800
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 0x1] 0x715d8aa880
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 0x1] 0x715d8aa900
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 0x1] 0x715d8aa980
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 0x1] 0x715d8aaa80
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 0x1] 0x715d8aaa00
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x212, Size: 0x1] 0x715d8aab00
	byte bHasCustomNavigableGeometry;//[Offset: 0x213, Size: 0x1] 0x715d8aab80
	byte CanCharacterStepUpOn;//[Offset: 0x215, Size: 0x1] 0x715d8aac00
	LightingChannels LightingChannels;//[Offset: 0x216, Size: 0x1] 0x715d8aae00
	enum CustomDepthStencilWriteMask;//[Offset: 0x217, Size: 0x1] 0x715d8907e0
	int CustomDepthStencilValue;//[Offset: 0x218, Size: 0x4] 0x715d8aaf00
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x220, Size: 0x10] 0x715d8aaf80
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x230, Size: 0x10] 0x715d8ab080
	enum OutlineMode;//[Offset: 0x240, Size: 0x1] 0x715d890880
	int TranslucencySortPriority;//[Offset: 0x244, Size: 0x4] 0x715d8ab180
	int VisibilityId;//[Offset: 0x248, Size: 0x4] 0x715d8ab200
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x250, Size: 0x10] 0x715d8909c0
	int8 VirtualTextureLodBias;//[Offset: 0x260, Size: 0x1] 0x715d8ab300
	int8 VirtualTextureCullMips;//[Offset: 0x261, Size: 0x1] 0x715d8ab380
	int8 VirtualTextureMinCoverage;//[Offset: 0x262, Size: 0x1] 0x715d8ab400
	enum VirtualTextureRenderPassType;//[Offset: 0x263, Size: 0x1] 0x715d890a60
	float LpvBiasMultiplier;//[Offset: 0x268, Size: 0x4] 0x715d8ab500
	float BoundsScale;//[Offset: 0x274, Size: 0x4] 0x715d8ab580
	Actor*[] MoveIgnoreActors;//[Offset: 0x288, Size: 0x10] 0x715d890b00
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x298, Size: 0x10] 0x715d890ba0
	BodyInstance BodyInstance;//[Offset: 0x2b8, Size: 0x130] 0x715d8a7c00
	delegate OnComponentHit;//[Offset: 0x3e8, Size: 0x1] 0x715d8a7c80
	delegate OnComponentBeginOverlap;//[Offset: 0x3e9, Size: 0x1] 0x715d8a7d00
	delegate OnComponentEndOverlap;//[Offset: 0x3ea, Size: 0x1] 0x715d8a7d80
	delegate OnComponentWake;//[Offset: 0x3eb, Size: 0x1] 0x715d8a7e00
	delegate OnComponentSleep;//[Offset: 0x3ec, Size: 0x1] 0x715d8a7e80
	delegate OnBeginCursorOver;//[Offset: 0x3ee, Size: 0x1] 0x715d8a7f00
	delegate OnEndCursorOver;//[Offset: 0x3ef, Size: 0x1] 0x715d8a7f80
	delegate OnClicked;//[Offset: 0x3f0, Size: 0x1] 0x715d8a8000
	delegate OnReleased;//[Offset: 0x3f1, Size: 0x1] 0x715d8a8080
	delegate OnInputTouchBegin;//[Offset: 0x3f2, Size: 0x1] 0x715d8a8100
	delegate OnInputTouchEnd;//[Offset: 0x3f3, Size: 0x1] 0x715d8a8180
	delegate OnInputTouchEnter;//[Offset: 0x3f4, Size: 0x1] 0x715d8a8200
	delegate OnInputTouchLeave;//[Offset: 0x3f5, Size: 0x1] 0x715d8a8280
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x410, Size: 0x8] 0x715d8a8300
	bool WasRecentlyRendered(float Tolerance);// 0x62c2f94 0x715d88bae0
	void WakeRigidBody(FName BoneName);// 0x62bfaa0 0x715d88bbc0
	void WakeAllRigidBodies();// 0x62bda10 0x715d88bca0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x62c1d38 0x715d88bd80
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x62bd0d4 0x715d88be60
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x62bf3f0 0x715d88bf40
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x62bf494 0x715d88c020
	void SetSimulatePhysics(bool bSimulate);// 0x62c1c84 0x715d88c100
	void SetRenderInMainPass(bool bValue);// 0x62bdfdc 0x715d88c1e0
	void SetRenderCustomDepth(bool bValue);// 0x62be274 0x715d88c2c0
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x62bf344 0x715d88c3a0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x62bcd98 0x715d88c480
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x62bff24 0x715d88c560
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x62c005c 0x715d88c640
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x62c01a4 0x715d88c720
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x62c0978 0x715d88c800
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x62c0444 0x715d88c8e0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x62c02ec 0x715d88c9c0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x62c0584 0x715d8890e0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x62bf89c 0x715d8891c0
	void SetOutlineMode(enum InOutlineMode);// 0x62be088 0x715d8892a0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x62bf7f0 0x715d889380
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x62bf948 0x715d889460
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x62c2228 0x715d889540
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x62c2314 0x715d889620
	void SetMassScale(FName BoneName, float InMassScale);// 0x62bd65c 0x715d889700
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x62bd3c0 0x715d8897e0
	void SetLinearDamping(float InDamping);// 0x62bd870 0x715d8898c0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x62c3044 0x715d8899a0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x62bf5ec 0x715d889a80
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x62c3198 0x715d889b60
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x62bf540 0x715d889c40
	void SetEnableGravity(bool bGravityEnabled);// 0x62bd95c 0x715d889d20
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x62c287c 0x715d889e00
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x62c2968 0x715d889ee0
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x62c2a4c 0x715d889fc0
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x62c2b2c 0x715d88a0a0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x62be12c 0x715d88a180
	void SetCustomDepthStencilValue(int Value);// 0x62be1d0 0x715d88a260
	void SetCullDistance(float NewCullDistance);// 0x62bccf4 0x715d88a340
	void SetConstraintMode(byte ConstraintMode);// 0x62c1bd8 0x715d88a420
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x62bcef0 0x715d88a500
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x62bce44 0x715d88a5e0
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x62bf1a0 0x715d88a6c0
	void SetCollisionObjectType(byte Channel);// 0x62bf0c0 0x715d88a7a0
	void SetCollisionEnabled(byte NewType);// 0x62bf298 0x715d88a880
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x62bfb4c 0x715d88a960
	void SetCastShadow(bool NewCastShadow);// 0x62bf744 0x715d88aa40
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x62bf698 0x715d88ab20
	void SetBoundsScale(float NewBoundsScale);// 0x62c24b8 0x715d88ac00
	void SetAngularDamping(float InDamping);// 0x62bd788 0x715d88ace0
	void SetAllUseCCD(bool InUseCCD);// 0x62bd020 0x715d887400
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x62c06dc 0x715d8874e0
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x62bda2c 0x715d8875c0
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x62bdb2c 0x715d8876a0
	void SetAllMassScale(float InMassScale);// 0x62bd4fc 0x715d887780
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x62bd1d0 0x715d887860
	void PutRigidBodyToSleep(FName BoneName);// 0x62bf9fc 0x715d887940
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x62be9dc 0x715d887a20
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x62be320 0x715d887b00
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x62bed70 0x715d887be0
	bool K2_IsQueryCollisionEnabled();// 0x62bdd8c 0x715d887cc0
	bool K2_IsPhysicsCollisionEnabled();// 0x62bdd44 0x715d887da0
	bool K2_IsCollisionEnabled();// 0x62bddd4 0x715d887e80
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x62be674 0x715d887f60
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x62c27cc 0x715d888040
	bool IsOverlappingActor(const Actor* Other);// 0x62c271c 0x715d888120
	bool IsGravityEnabled();// 0x62bd91c 0x715d888200
	bool IsAnyRigidBodyAwake();// 0x62bcfe0 0x715d8882e0
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x62c2cf0 0x715d8883c0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x62c2ea4 0x715d8884a0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x62c1e00 0x715d888580
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x62c07d4 0x715d888660
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x62c08c8 0x715d888740
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x62bfce4 0x715d888820
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x62bfd94 0x715d888900
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x62bfe5c 0x715d8889e0
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x62c255c 0x715d888ac0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x62c261c 0x715d888ba0
	int GetNumMaterials();// 0x62bdfa0 0x715d888c80
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x62c1e38 0x715d888d60
	MaterialInterface* GetMaterial(int ElementIndex);// 0x62c2404 0x715d888e40
	float GetMassScale(FName BoneName);// 0x62bd5a8 0x715d888f20
	float GetMass();// 0x62bd384 0x715d889000
	float GetLinearDamping();// 0x62bd834 0x715d885720
	Vector GetInertiaTensor(FName BoneName);// 0x62bd2cc 0x715d885800
	bool GetGenerateOverlapEvents();// 0x62c3244 0x715d8858e0
	byte GetCollisionResponseToChannel(byte Channel);// 0x62bdc90 0x715d8859c0
	FName GetCollisionProfileName();// 0x62bf16c 0x715d885aa0
	byte GetCollisionObjectType();// 0x62bdc54 0x715d885b80
	byte GetCollisionEnabled();// 0x62bde18 0x715d885c60
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x62bde54 0x715d885d40
	Vector GetCenterOfMass(FName BoneName);// 0x62bfc34 0x715d885e20
	float GetAngularDamping();// 0x62bd74c 0x715d885f00
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x62c1f44 0x715d885fe0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x62c207c 0x715d8860c0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x62c2174 0x715d8861a0
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x62c2c40 0x715d886280
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x62c2df4 0x715d886360
	void ClearMoveIgnoreComponents();// 0x62c2c14 0x715d886440
	void ClearMoveIgnoreActors();// 0x62c2de0 0x715d886520
	bool CanCharacterStepUp(Pawn* Pawn);// 0x62bcc3c 0x715d886600
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x62c0c0c 0x715d8866e0
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x62c0ab8 0x715d8867c0
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x62c0d48 0x715d8868a0
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x62c13e0 0x715d886980
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x62c0e84 0x715d886a60
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x62c15a0 0x715d886b40
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x62c1a9c 0x715d886c20
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x62c1044 0x715d886d00
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x62c1174 0x715d886de0
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x62c12a4 0x715d886ec0
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x62c1824 0x715d886fa0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x62c16d0 0x715d887080
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x62c1960 0x715d887160

--------------------------------
Class: WalkableSlopeOverride // 714906c700
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1] 0x715d8a2680
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4] 0x715d8a2700

--------------------------------
Class: LightingChannels // 714906f400
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715d8aac80
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715d8aad00
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715d8aad80

--------------------------------
Class: CustomPrimitiveData // 714906f4c0
	float[] Data;//[Offset: 0x0, Size: 0x10] 0x715d890920

--------------------------------
Class: MaterialInterface.Object // 71a49a5100
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8] 0x715ca93500
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10] 0x715ca93580
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10] 0x715ca71b40
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x715ca71be0
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x625bd48 0x715ca80860
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x625c10c 0x715ca80940
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x625c058 0x715ca80a20
	PhysicalMaterial* GetPhysicalMaterial();// 0x625c148 0x715ca80b00
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x625bf28 0x715ca80be0
	Material* GetBaseMaterial();// 0x625c184 0x715ca80cc0

--------------------------------
Class: PhysicalMaterialMask.Object // 71a4acd080
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4] 0x715cc42500
	byte AddressX;//[Offset: 0x2c, Size: 0x1] 0x715cc42580
	byte AddressY;//[Offset: 0x2d, Size: 0x1] 0x715cc42600

--------------------------------
Class: MaterialFunctionInterface.Object // 71a4aa3a80
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x715cc18c80
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1] 0x715cb29de0

--------------------------------
Class: Guid // 717dfc6c40
	int A;//[Offset: 0x0, Size: 0x4] 0x717df87a00
	int B;//[Offset: 0x4, Size: 0x4] 0x717df87a80
	int C;//[Offset: 0x8, Size: 0x4] 0x717df87b00
	int D;//[Offset: 0xc, Size: 0x4] 0x717df87b80

--------------------------------
Class: MaterialParameterInfo // 715db1f100
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715db4e400
	byte Association;//[Offset: 0x8, Size: 0x1] 0x715db4e480
	int Index;//[Offset: 0xc, Size: 0x4] 0x715db4e500

--------------------------------
Class: Material.MaterialInterface.Object // 71a4a81c80
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x715cc0ba00
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8] 0x715cc0ba80
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8] 0x715cc0bb00
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc] 0x715cc0bb80
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc] 0x715cc0bc00
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc] 0x715cc0bc80
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc] 0x715cc0bd00
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc] 0x715cc0bd80
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc] 0x715cc0be00
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1] 0x715cc0be80
	byte BlendMode;//[Offset: 0x151, Size: 0x1] 0x715cc0bf00
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1] 0x715cc0bf80
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1] 0x715cc0c000
	byte ShadingModel;//[Offset: 0x154, Size: 0x1] 0x715cc0c080
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1] 0x715cc0c100
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2] 0x715cc0c180
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4] 0x715cc0c200
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc] 0x715cc0c280
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc] 0x715cc0c300
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10] 0x715cc0c380
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc] 0x715cc0c400
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc] 0x715cc0c480
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1] 0x715cc0c500
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1] 0x715cc0c580
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1] 0x715cc0c600
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1] 0x715cc0a580
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1] 0x715cc0a600
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1] 0x715cc0a680
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1] 0x715cc0a700
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1] 0x715cc0a780
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 0x1] 0x715cc0a800
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1] 0x715cc0a880
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4] 0x715cc0a900
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4] 0x715cc0a980
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4] 0x715cc0aa00
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4] 0x715cc0aa80
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4] 0x715cc0ab00
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4] 0x715cc0ab80
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4] 0x715cc0ac00
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10] 0x715cc0ac80
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4] 0x715cc0ad00
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1] 0x715cc0ad80
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1] 0x715cc0ae00
	bool bOccludeOutlines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1] 0x715cc0ae80
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1] 0x715cc0af00
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1] 0x715cc0af80
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1] 0x715cc0b000
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1] 0x715cc0b080
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1] 0x715cc0b100
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1] 0x715cc0b180
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1] 0x715cc0b200
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1] 0x715cc0b280
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1] 0x715cc0b300
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1] 0x715cc0b380
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1] 0x715cc0b400
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1] 0x715cc0b480
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1] 0x715cc0b500
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1] 0x715cc0b580
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1] 0x715cc09500
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1] 0x715cc09580
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1] 0x715cc09600
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1] 0x715cc09680
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1] 0x715cc09700
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1] 0x715cc09780
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1] 0x715cc09800
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1] 0x715cc09880
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1] 0x715cc09900
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1] 0x715cc09980
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1] 0x715cc09a00
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1] 0x715cc09a80
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1] 0x715cc09b00
	bool bAllowsClusteredDecals;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1] 0x715cc09b80
	bool bAllowsClusteredSpotLightShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1] 0x715cc09c00
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1] 0x715cc09c80
	byte FloatPrecisionMode;//[Offset: 0x1fd, Size: 0x1] 0x715cc09d00
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1] 0x715cc09d80
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1] 0x715cc09e00
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1] 0x715cc09e80
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1] 0x715cc09f00
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1] 0x715cc09f80
	byte D3D11TessellationMode;//[Offset: 0x1ff, Size: 0x1] 0x715cc0a000
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1] 0x715cc0a080
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1] 0x715cc0a100
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1] 0x715cc0a180
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1] 0x715cc0a200
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1] 0x715cc0a280
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 0x1] 0x715cc0a300
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1] 0x715cc0a380
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1] 0x715cc0a400
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1] 0x715cc0a480
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1] 0x715cc0a500
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1] 0x715cc08480
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1] 0x715cc08500
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1] 0x715cc08580
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x201, Size: 0x1] 0x715cc08600
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x201, Size: 0x1] 0x715cc08680
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x201, Size: 0x1] 0x715cc08700
	byte BlendableLocation;//[Offset: 0x202, Size: 0x1] 0x715cc08780
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1] 0x715cc08800
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x203, Size: 0x1] 0x715cc08880
	byte StencilCompare;//[Offset: 0x204, Size: 0x1] 0x715cc08900
	byte StencilRefValue;//[Offset: 0x205, Size: 0x1] 0x715cc08980
	byte RefractionMode;//[Offset: 0x206, Size: 0x1] 0x715cc08a00
	int BlendablePriority;//[Offset: 0x208, Size: 0x4] 0x715cc08a80
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1] 0x715cc08b00
	uint32 UsageFlagWarnings;//[Offset: 0x210, Size: 0x4] 0x715cc08b80
	float RefractionDepthBias;//[Offset: 0x214, Size: 0x4] 0x715cc08c00
	Guid StateId;//[Offset: 0x218, Size: 0x10] 0x715cc08c80
	float MaxDisplacement;//[Offset: 0x228, Size: 0x4] 0x715cc08d00
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2b8, Size: 0x228] 0x715cc08d80

--------------------------------
Class: ScalarMaterialInput.MaterialInput // 7149067540

--------------------------------
Class: MaterialInput // 71490676c0
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x7148ca1e00
	FName ExpressionName;//[Offset: 0x4, Size: 0x8] 0x7148ca1e80

--------------------------------
Class: VectorMaterialInput.MaterialInput // 71490673c0

--------------------------------
Class: ColorMaterialInput.MaterialInput // 7149067600

--------------------------------
Class: MaterialShadingModelField // 715db1c1c0
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2] 0x715db45100

--------------------------------
Class: MaterialAttributesInput.ExpressionInput // 7149067840
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4] 0x7148ca1f80

--------------------------------
Class: ExpressionInput // 7149067900
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x7148ca2000
	FName ExpressionName;//[Offset: 0x4, Size: 0x8] 0x7148ca2080

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput // 7149067480

--------------------------------
Class: LinearColor // 717dfc9400
	float R;//[Offset: 0x0, Size: 0x4] 0x717df88700
	float G;//[Offset: 0x4, Size: 0x4] 0x717df88780
	float B;//[Offset: 0x8, Size: 0x4] 0x717df88800
	float A;//[Offset: 0xc, Size: 0x4] 0x717df88880

--------------------------------
Class: MaterialCachedExpressionData // 715db1f4c0
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0] 0x715db4c980
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10] 0x715daec2c0
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10] 0x715daec360
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10] 0x715daec400
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10] 0x715daec4a0
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10] 0x715daec540
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10] 0x715daec5e0
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10] 0x715daec680
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10] 0x715daec720
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x715db4d000
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1] 0x715db4d080

--------------------------------
Class: MaterialCachedParameters // 715db1f280
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40] 0x715db4e700
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10] 0x715daebf00
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10] 0x715daebfa0
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10] 0x715daec040
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10] 0x715daec0e0
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10] 0x715daec180
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10] 0x715daec220

--------------------------------
Class: MaterialCachedParameterEntry // 715db1f1c0
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10] 0x715daebc80
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10] 0x715daebd20
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10] 0x715daebdc0
	bool[] Overrides;//[Offset: 0x30, Size: 0x10] 0x715daebe60

--------------------------------
Class: Texture.StreamableRenderAsset.Object // 71a4998a80
	Guid LightingGuid;//[Offset: 0x48, Size: 0x10] 0x715d25ec00
	int LODBias;//[Offset: 0x58, Size: 0x4] 0x715d25ec80
	byte CompressionSettings;//[Offset: 0x5c, Size: 0x1] 0x715d25ed00
	byte Filter;//[Offset: 0x5d, Size: 0x1] 0x715d25ed80
	enum MipLoadOptions;//[Offset: 0x5e, Size: 0x1] 0x715d1be980
	byte LODGroup;//[Offset: 0x5f, Size: 0x1] 0x715d25ee80
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x715d25ef00
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x715d25ef80
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x715d25f000
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1] 0x715d25f080
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 0x1] 0x715d25f100
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10] 0x715d1bea20

--------------------------------
Class: StreamableRenderAsset.Object // 71a4998800
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8] 0x715d25f200
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4] 0x715d25f280
	int StreamingIndex;//[Offset: 0x34, Size: 0x4] 0x715d25f300
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4] 0x715d25f380
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1] 0x715d25f400
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x715d25f480
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1] 0x715d25f500
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1] 0x715d25f580
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1] 0x715d25f600
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1] 0x715d25f680
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1] 0x715d25f700
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1] 0x715d25f780
	bool bIgnoreLastRenderTimeForFastResponse;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1] 0x715d25d700
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e, Size: 0x1] 0x715d25d780

--------------------------------
Class: AssetUserData.Object // 71a486df80

--------------------------------
Class: Font.Object // 71a4a1ad80
	enum FontCacheType;//[Offset: 0x30, Size: 0x1] 0x715cb215a0
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10] 0x715cb21640
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10] 0x715cb216e0
	int IsRemapped;//[Offset: 0x58, Size: 0x4] 0x715cb55180
	float EmScale;//[Offset: 0x5c, Size: 0x4] 0x715cb55200
	float Ascent;//[Offset: 0x60, Size: 0x4] 0x715cb55280
	float Descent;//[Offset: 0x64, Size: 0x4] 0x715cb53200
	float Leading;//[Offset: 0x68, Size: 0x4] 0x715cb53280
	int Kerning;//[Offset: 0x6c, Size: 0x4] 0x715cb53300
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8] 0x715cb53380
	int NumCharacters;//[Offset: 0x118, Size: 0x4] 0x715cb53400
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10] 0x715cb21780
	float ScalingFactor;//[Offset: 0x130, Size: 0x4] 0x715cb53500
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4] 0x715cb53580
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8] 0x715cb53600
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38] 0x715cb53680

--------------------------------
Class: FontCharacter // 715db1c040
	int StartU;//[Offset: 0x0, Size: 0x4] 0x715db44c80
	int StartV;//[Offset: 0x4, Size: 0x4] 0x715db44d00
	int USize;//[Offset: 0x8, Size: 0x4] 0x715db44d80
	int VSize;//[Offset: 0xc, Size: 0x4] 0x715db44e00
	byte TextureIndex;//[Offset: 0x10, Size: 0x1] 0x715db44e80
	int VerticalOffset;//[Offset: 0x14, Size: 0x4] 0x715db44f00

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object // 71a4a10380
	int LevelIndex;//[Offset: 0xb8, Size: 0x4] 0x715cb35900
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 0x4] 0x715cb35980
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x715cb35a00
	byte AddressX;//[Offset: 0xc1, Size: 0x1] 0x715cb35a80
	byte AddressY;//[Offset: 0xc2, Size: 0x1] 0x715cb35b00
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 0x8] 0x715cb35b80
	int Blueprint_GetSizeY();// 0x632c410 0x715cb15b80
	int Blueprint_GetSizeX();// 0x632c444 0x715cb15c60

--------------------------------
Class: IntPoint // 717dfc6400
	int X;//[Offset: 0x0, Size: 0x4] 0x717df88d00
	int Y;//[Offset: 0x4, Size: 0x4] 0x717df88d80

--------------------------------
Class: FontImportOptionsData // 715db1bf80
	FString FontName;//[Offset: 0x0, Size: 0x10] 0x715db45f00
	float Height;//[Offset: 0x10, Size: 0x4] 0x715db45f80
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x715db46000
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x715db46080
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x715db46100
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x715db46180
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x715db46200
	byte CharacterSet;//[Offset: 0x15, Size: 0x1] 0x715db46280
	FString Chars;//[Offset: 0x18, Size: 0x10] 0x715db46300
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10] 0x715db44280
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10] 0x715db44300
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10] 0x715db44380
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x715db44400
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x715db44480
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10] 0x715db44500
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x715db44580
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4] 0x715db44600
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4] 0x715db44680
	int XPadding;//[Offset: 0x78, Size: 0x4] 0x715db44700
	int YPadding;//[Offset: 0x7c, Size: 0x4] 0x715db44780
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4] 0x715db44800
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4] 0x715db44880
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4] 0x715db44900
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4] 0x715db44980
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x715db44a00
	int Kerning;//[Offset: 0x94, Size: 0x4] 0x715db44a80
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x715db44b00
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4] 0x715db44b80
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4] 0x715db44c00

--------------------------------
Class: CompositeFont // 715da9a0c0
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10] 0x715dab7800
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18] 0x715dab7880
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10] 0x715d89e020

--------------------------------
Class: Typeface // 715da99f40
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10] 0x715d89df80

--------------------------------
Class: TypefaceEntry // 715da99e80
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715dab7a00
	FontData Font;//[Offset: 0x8, Size: 0x20] 0x715dab7d00

--------------------------------
Class: FontData // 715da99dc0
	FString FontFilename;//[Offset: 0x0, Size: 0x10] 0x715dab7a80
	enum Hinting;//[Offset: 0x10, Size: 0x1] 0x715d89de40
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1] 0x715d89dee0
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4] 0x715dab7c00
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8] 0x715dab7c80

--------------------------------
Class: CompositeFallbackFont // 715da9a000
	Typeface Typeface;//[Offset: 0x0, Size: 0x10] 0x715dab7e00
	float ScalingFactor;//[Offset: 0x10, Size: 0x4] 0x715dab7e80

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont // 715da99d00
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10] 0x715d89dda0
	FString Cultures;//[Offset: 0x28, Size: 0x10] 0x715dab7980

--------------------------------
Class: Int32Range // 717dfcab40
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x717df8b980
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x717df8ba00

--------------------------------
Class: Int32RangeBound // 717dfcac00
	byte Type;//[Offset: 0x0, Size: 0x1] 0x717df8ba80
	int Value;//[Offset: 0x4, Size: 0x4] 0x717df8bb00

--------------------------------
Class: RuntimeVirtualTexture.Object // 71a4ad9e80
	enum MaterialType;//[Offset: 0x28, Size: 0x1] 0x715cb2db20
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715cc55480
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x715cc55500
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x715cc55580
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x715cc55600
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x715cc55680
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1] 0x715cc55700
	int Size;//[Offset: 0x30, Size: 0x4] 0x715cc55780
	int TileCount;//[Offset: 0x34, Size: 0x4] 0x715cc55800
	int TileSize;//[Offset: 0x38, Size: 0x4] 0x715cc55880
	int TileBorderSize;//[Offset: 0x3c, Size: 0x4] 0x715cc55900
	int StreamLowMips;//[Offset: 0x40, Size: 0x4] 0x715cc55980
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8] 0x715cc55a00
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715cc55a80
	int RemoveLowMips;//[Offset: 0x54, Size: 0x4] 0x715cc55b00
	int GetTileSize();// 0x62d27ec 0x715cc3a260
	int GetTileCount();// 0x62d2820 0x715cc3a340
	int GetTileBorderSize();// 0x62d27bc 0x715cc3a420
	int GetSize();// 0x62d2854 0x715cc3a500

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object // 71a4ad9980
	VirtualTextureBuildSettings Settings;//[Offset: 0xe8, Size: 0xc] 0x715cc57180
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1] 0x715cc57200
	uint32 BuildHash;//[Offset: 0xf8, Size: 0x4] 0x715cc57280

--------------------------------
Class: VirtualTextureBuildSettings // 715ce78500
	int TileSize;//[Offset: 0x0, Size: 0x4] 0x715cea0e80
	int TileBorderSize;//[Offset: 0x4, Size: 0x4] 0x715cea0f00
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715cea0f80
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x715cea1000

--------------------------------
Class: MaterialFunctionInfo // 715db1f340
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x715db4ca80
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8] 0x715db4cb00

--------------------------------
Class: MaterialParameterCollectionInfo // 715db1f400
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x715db4cc00
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8] 0x715db4cc80

--------------------------------
Class: MaterialParameterCollection.Object // 71a4aa2680
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x715cc19580
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10] 0x715cb297a0
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10] 0x715cb29840

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase // 715db1e380
	float DefaultValue;//[Offset: 0x18, Size: 0x4] 0x715db4fd00

--------------------------------
Class: CollectionParameterBase // 715db1e500
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x715db4fe00
	Guid ID;//[Offset: 0x8, Size: 0x10] 0x715db4fe80

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase // 715db1e440
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10] 0x715db4fd80

--------------------------------
Class: LandscapeGrassType.Object // 71a499b000
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10] 0x715ca71f00
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715ca92900
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8] 0x715ca92980
	float GrassDensity;//[Offset: 0x48, Size: 0x4] 0x715ca92a00
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4] 0x715ca92a80
	int StartCullDistance;//[Offset: 0x50, Size: 0x4] 0x715ca92b00
	int EndCullDistance;//[Offset: 0x54, Size: 0x4] 0x715ca92b80
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715ca92c00
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x715ca92c80

--------------------------------
Class: GrassVariety // 715da9d900
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8] 0x715dabe880
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4] 0x715dabe900
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715dabe980
	float PlacementJitter;//[Offset: 0x10, Size: 0x4] 0x715dabea00
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4] 0x715dabea80
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4] 0x715dabeb00
	int MinLOD;//[Offset: 0x1c, Size: 0x4] 0x715dabeb80
	enum Scaling;//[Offset: 0x20, Size: 0x1] 0x715d89d080
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8] 0x715dabec80
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8] 0x715dabed00
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8] 0x715dabed80
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715dabee00
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x715dabee80
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1] 0x715dabef00
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1] 0x715dabef80
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x715dabf000
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x715dabf080
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x715dabf100

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object // 71a4ae3f80
	PerPlatformInt MinLOD;//[Offset: 0x60, Size: 0x4] 0x715cc6d480
	float LpvBiasMultiplier;//[Offset: 0x64, Size: 0x4] 0x715cc6d500
	StaticMaterial[] StaticMaterials;//[Offset: 0x68, Size: 0x10] 0x715cc813c0
	float LightmapUVDensity;//[Offset: 0x78, Size: 0x4] 0x715cc6d600
	int LightMapResolution;//[Offset: 0x7c, Size: 0x4] 0x715cc6d680
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 0x4] 0x715cc6b600
	float DistanceFieldSelfShadowBias;//[Offset: 0x84, Size: 0x4] 0x715cc6b680
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8] 0x715cc6b700
	int LODForCollision;//[Offset: 0x90, Size: 0x4] 0x715cc6b780
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1] 0x715cc6b800
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1] 0x715cc6b880
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1] 0x715cc6b900
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 0x1] 0x715cc6b980
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x94, Size: 0x1] 0x715cc6ba00
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x94, Size: 0x1] 0x715cc6ba80
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x94, Size: 0x1] 0x715cc6bb00
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x95, Size: 0x1] 0x715cc6bb80
	StaticMeshSocket*[] Sockets;//[Offset: 0xb8, Size: 0x10] 0x715cc81460
	Vector PositiveBoundsExtension;//[Offset: 0xd8, Size: 0xc] 0x715cc6bc80
	Vector NegativeBoundsExtension;//[Offset: 0xe4, Size: 0xc] 0x715cc6bd00
	BoxSphereBounds ExtendedBounds;//[Offset: 0xf0, Size: 0x1c] 0x715cc6bd80
	int ElementToIgnoreForTexFactor;//[Offset: 0x10c, Size: 0x4] 0x715cc6be00
	AssetUserData*[] AssetUserData;//[Offset: 0x110, Size: 0x10] 0x715cb2f7e0
	Object* EditableMesh;//[Offset: 0x128, Size: 0x8] 0x715cc6bf00
	NavCollisionBase* NavCollision;//[Offset: 0x130, Size: 0x8] 0x715cc6bf80
	void RemoveSocket(StaticMeshSocket* Socket);// 0x631e18c 0x715cc74e60
	int GetNumSections(int InLOD);// 0x631e584 0x715cc74f40
	int GetNumLODs();// 0x631e708 0x715cc75020
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x631e98c 0x715cc75100
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x631e8e8 0x715cc751e0
	int GetMaterialIndex(FName MaterialSlotName);// 0x631e380 0x715cc752c0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x631e4d8 0x715cc753a0
	BoxSphereBounds GetBounds();// 0x631e69c 0x715cc75480
	Box GetBoundingBox();// 0x631e630 0x715cc75560
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x631e230 0x715cc75640
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x631e844 0x715cc71d60
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x631e73c 0x715cc71e40
	void AddSocket(StaticMeshSocket* Socket);// 0x631e2dc 0x715cc71f20
	FName AddMaterial(MaterialInterface* Material);// 0x631e42c 0x715cc72000

--------------------------------
Class: PerPlatformInt // 715da3f340
	int Default;//[Offset: 0x0, Size: 0x4] 0x715da5f000

--------------------------------
Class: StaticMaterial // 715ce77480
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x715ce8af00
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x715ce8af80
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8] 0x715ce8b000
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14] 0x715ce8b080

--------------------------------
Class: MeshUVChannelInfo // 715db16a00
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715db38900
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715db38980
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4] 0x715db38a00

--------------------------------
Class: BodySetup.Object // 71a49dd080
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58] 0x715cb0a880
	FName BoneName;//[Offset: 0x80, Size: 0x8] 0x715cb0a900
	byte PhysicsType;//[Offset: 0x88, Size: 0x1] 0x715cb0a980
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1] 0x715cb0aa00
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1] 0x715cb0aa80
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1] 0x715cb0ab00
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1] 0x715cb0ab80
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1] 0x715cb0ac00
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1] 0x715cb0ac80
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1] 0x715cb0ad00
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1] 0x715cb0ad80
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1] 0x715cb0ae00
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1] 0x715cb0ae80
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8] 0x715cb0af00
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10] 0x715cb0af80
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 0x130] 0x715cb0b000
	Vector BuildScale3D;//[Offset: 0x258, Size: 0xc] 0x715cb0b080

--------------------------------
Class: KAggregateGeom // 715dadef80
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10] 0x715dae7860
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10] 0x715dae7900
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10] 0x715dae79a0
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10] 0x715dae7b80
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10] 0x715dae52e0

--------------------------------
Class: KSphereElem.KShapeElem // 715dadeb00
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x715db0a800
	float Radius;//[Offset: 0x3c, Size: 0x4] 0x715db0a880

--------------------------------
Class: KShapeElem // 715dadeec0
	float RestOffset;//[Offset: 0x8, Size: 0x4] 0x715db0b400
	FName Name;//[Offset: 0xc, Size: 0x8] 0x715db0b480
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x715db0b500

--------------------------------
Class: KBoxElem.KShapeElem // 715dadebc0
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x715db0a980
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x715db0aa00
	float X;//[Offset: 0x48, Size: 0x4] 0x715db0aa80
	float Y;//[Offset: 0x4c, Size: 0x4] 0x715db0ab00
	float Z;//[Offset: 0x50, Size: 0x4] 0x715db0ab80

--------------------------------
Class: KSphylElem.KShapeElem // 715dadec80
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x715db0ac80
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x715db0ad00
	float Radius;//[Offset: 0x48, Size: 0x4] 0x715db0ad80
	float Length;//[Offset: 0x4c, Size: 0x4] 0x715db0ae00

--------------------------------
Class: KConvexElem.KShapeElem // 715daded40
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10] 0x715dae7a40
	int[] IndexData;//[Offset: 0x40, Size: 0x10] 0x715dae7ae0
	Box ElemBox;//[Offset: 0x50, Size: 0x1c] 0x715db0b000
	Transform Transform;//[Offset: 0x70, Size: 0x30] 0x715db0b080

--------------------------------
Class: Box // 717dfc9340
	Vector Min;//[Offset: 0x0, Size: 0xc] 0x717df88580
	Vector Max;//[Offset: 0xc, Size: 0xc] 0x717df88600
	byte IsValid;//[Offset: 0x18, Size: 0x1] 0x717df88680

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem // 715dadee00
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x715db0b180
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x715db0b200
	float Radius0;//[Offset: 0x48, Size: 0x4] 0x715db0b280
	float Radius1;//[Offset: 0x4c, Size: 0x4] 0x715db0b300
	float Length;//[Offset: 0x50, Size: 0x4] 0x715db0b380

--------------------------------
Class: BodyInstance // 714906f700
	byte ObjectType;//[Offset: 0x6, Size: 0x1] 0x715d8a9600
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1] 0x715d8a9680
	enum SleepFamily;//[Offset: 0xa, Size: 0x1] 0x715d890c40
	byte DOFMode;//[Offset: 0xb, Size: 0x1] 0x715d8a9780
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715d8a9800
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x715d8a9880
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x715d8a9900
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x715d8a9980
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1] 0x715d8a9a00
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1] 0x715d8a9a80
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1] 0x715d8a9b00
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1] 0x715d8a9b80
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1] 0x715d8a9c00
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1] 0x715d8a9c80
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1] 0x715d8a9d00
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1] 0x715d8a9d80
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1] 0x715d8a9e00
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1] 0x715d8a9e80
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1] 0x715d8a9f00
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1] 0x715d8a9f80
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1] 0x715d8aa000
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1] 0x715d8aa080
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1] 0x715d8aa100
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1] 0x715d8aa180
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1] 0x715d8aa200
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1] 0x715d8aa280
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8] 0x715d8aa300
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1] 0x715d8aa380
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1] 0x715d8aa400
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30] 0x715d8a7480
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4] 0x715d8a7500
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4] 0x715d8a7580
	float LinearDamping;//[Offset: 0x68, Size: 0x4] 0x715d8a7600
	float AngularDamping;//[Offset: 0x6c, Size: 0x4] 0x715d8a7680
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc] 0x715d8a7700
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc] 0x715d8a7780
	float MassScale;//[Offset: 0x88, Size: 0x4] 0x715d8a7800
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc] 0x715d8a7880
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10] 0x715d8a7900
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8] 0x715d8a7980
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4] 0x715d8a7a00
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4] 0x715d8a7a80
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4] 0x715d8a7b00
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4] 0x715d8a7b80

--------------------------------
Class: CollisionResponse // 714906c640
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20] 0x715d8a9380
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10] 0x715d890ce0

--------------------------------
Class: CollisionResponseContainer // 714906f580
	byte WorldStatic;//[Offset: 0x0, Size: 0x1] 0x715d8aa480
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1] 0x715d8aa500
	byte Pawn;//[Offset: 0x2, Size: 0x1] 0x715d8a8480
	byte Visibility;//[Offset: 0x3, Size: 0x1] 0x715d8a8500
	byte Camera;//[Offset: 0x4, Size: 0x1] 0x715d8a8580
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1] 0x715d8a8600
	byte Vehicle;//[Offset: 0x6, Size: 0x1] 0x715d8a8680
	byte Destructible;//[Offset: 0x7, Size: 0x1] 0x715d8a8700
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1] 0x715d8a8780
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1] 0x715d8a8800
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1] 0x715d8a8880
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1] 0x715d8a8900
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1] 0x715d8a8980
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1] 0x715d8a8a00
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1] 0x715d8a8a80
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1] 0x715d8a8b00
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1] 0x715d8a8b80
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1] 0x715d8a8c00
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1] 0x715d8a8c80
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1] 0x715d8a8d00
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1] 0x715d8a8d80
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1] 0x715d8a8e00
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1] 0x715d8a8e80
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1] 0x715d8a8f00
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1] 0x715d8a8f80
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1] 0x715d8a9000
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1] 0x715d8a9080
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1] 0x715d8a9100
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1] 0x715d8a9180
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1] 0x715d8a9200
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1] 0x715d8a9280
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1] 0x715d8a9300

--------------------------------
Class: ResponseChannel // 714906f640
	FName Channel;//[Offset: 0x0, Size: 0x8] 0x715d8a9400
	byte Response;//[Offset: 0x8, Size: 0x1] 0x715d8a9480

--------------------------------
Class: StaticMeshSocket.Object // 71a4ae3d00
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x715cc6d200
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc] 0x715cc6d280
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc] 0x715cc6d300
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc] 0x715cc6d380
	FString Tag;//[Offset: 0x58, Size: 0x10] 0x715cc6d400

--------------------------------
Class: BoxSphereBounds // 717dfc91c0
	Vector Origin;//[Offset: 0x0, Size: 0xc] 0x717df8a380
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc] 0x717df8a400
	float SphereRadius;//[Offset: 0x18, Size: 0x4] 0x717df8a480

--------------------------------
Class: NavCollisionBase.Object // 71a4aa0600
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715cc1bc00

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object // 71a49c7180
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x572a1b4 0x715cabe940
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x5729d7c 0x715cabea20
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x572a2e4 0x715cabeb00
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x5729e84 0x715cabebe0

--------------------------------
Class: MeshDescriptionBase.Object // 71a49c7400
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x571a588 0x715cabecc0
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x571849c 0x715cabeda0
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x57183a0 0x715cabee80
	void ReversePolygonFacing(PolygonID PolygonID);// 0x57182f0 0x715cabef60
	void ReserveNewVertices(int NumberOfNewVertices);// 0x571cc64 0x715cabf040
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x571c970 0x715cabf120
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x571c080 0x715cabf200
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x571ba10 0x715cabf2e0
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x571b3a0 0x715cabf3c0
	void ReserveNewEdges(int NumberOfNewEdges);// 0x571c548 0x715cabf4a0
	bool IsVertexValid(VertexID VertexID);// 0x571ca14 0x715cabf580
	bool IsVertexOrphaned(VertexID VertexID);// 0x571b094 0x715cabf660
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x571c5ec 0x715cabf740
	bool IsTriangleValid(const TriangleID TriangleID);// 0x571bab4 0x715cabf820
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x5719690 0x715cabf900
	bool IsPolygonValid(PolygonID PolygonID);// 0x571b444 0x715cabf9e0
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x571b150 0x715cabfac0
	bool IsEmpty();// 0x571cd08 0x715cabfba0
	bool IsEdgeValid(EdgeID EdgeID);// 0x571c124 0x715cabfc80
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x5719e60 0x715cabfd60
	bool IsEdgeInternal(EdgeID EdgeID);// 0x5719f70 0x715cabfe40
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x571aca8 0x715cabff20
	Vector GetVertexPosition(VertexID VertexID);// 0x571a688 0x715cabcaa0
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x571af88 0x715cabcb80
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x571a4d0 0x715cabcc60
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x571a3c4 0x715cabcd40
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x571903c 0x715cabce20
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x57185d8 0x715cabcf00
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x571a2b0 0x715cabcfe0
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x571a0e4 0x715cabd0c0
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x571aadc 0x715cabd1a0
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x571a910 0x715cabd280
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x571ae74 0x715cabd360
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x571a744 0x715cabd440
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x5719370 0x715cabd520
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x571957c 0x715cabd600
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x5719484 0x715cabd6e0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x571974c 0x715cabd7c0
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x5719804 0x715cabd8a0
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x571925c 0x715cabd980
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x5719148 0x715cabda60
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x5718b90 0x715cabdb40
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5718d5c 0x715cabdc20
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x5718f28 0x715cabdd00
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x57186e4 0x715cabdde0
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x5718a7c 0x715cabdec0
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x5718968 0x715cabdfa0
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x571812c 0x715cabe080
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x571879c 0x715cabe160
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x571abf0 0x715cabe240
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x571a1f8 0x715cabe320
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x571a02c 0x715cabe400
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x571aa24 0x715cabe4e0
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x571a858 0x715cabe5c0
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x571adbc 0x715cabe6a0
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x5718ca4 0x715cabadc0
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x5718e70 0x715cabaea0
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x57188b0 0x715cabaf80
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x5718074 0x715cabb060
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x5719c94 0x715cabb140
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x5719ac8 0x715cabb220
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x57198bc 0x715cabb300
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x57199d0 0x715cabb3e0
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x5719d4c 0x715cabb4c0
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x5719b80 0x715cabb5a0
	void Empty();// 0x571cd40 0x715cabb680
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x571c6a8 0x715cabb760
	void DeleteVertex(VertexID VertexID);// 0x571cad0 0x715cabb840
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x571bb70 0x715cabb920
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x571b20c 0x715cabba00
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x571b500 0x715cabbae0
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x571c1e0 0x715cabbbc0
	void CreateVertexWithID(VertexID VertexID);// 0x571cb80 0x715cabbca0
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x571c7bc 0x715cabbd80
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x571c8b8 0x715cabbe60
	VertexID CreateVertex();// 0x571cc30 0x715cabbf40
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x571bd44 0x715cabc020
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x571bf00 0x715cabc100
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x571b6d4 0x715cabc1e0
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x571b2bc 0x715cabc2c0
	PolygonGroupID CreatePolygonGroup();// 0x571b36c 0x715cabc3a0
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x571b890 0x715cabc480
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x571c2f4 0x715cabc560
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x571c43c 0x715cabc640
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x5718240 0x715cabc720

--------------------------------
Class: VertexInstanceID.ElementID // 715da90880

--------------------------------
Class: ElementID // 715da91300
	int IDValue;//[Offset: 0x0, Size: 0x4] 0x715da82300

--------------------------------
Class: VertexID.ElementID // 715da90b80

--------------------------------
Class: Vector2D // 717dfc6a00
	float X;//[Offset: 0x0, Size: 0x4] 0x717df87580
	float Y;//[Offset: 0x4, Size: 0x4] 0x717df87600

--------------------------------
Class: PolygonGroupID.ElementID // 715da91180

--------------------------------
Class: PolygonID.ElementID // 715da91000

--------------------------------
Class: TriangleID.ElementID // 715da92a40

--------------------------------
Class: EdgeID.ElementID // 715da90580

--------------------------------
Class: PerPlatformFloat // 715da3f400
	float Default;//[Offset: 0x0, Size: 0x4] 0x715da5f100

--------------------------------
Class: FloatInterval // 717dfcaa80
	float Min;//[Offset: 0x0, Size: 0x4] 0x717df8b880
	float Max;//[Offset: 0x4, Size: 0x4] 0x717df8b900

--------------------------------
Class: SubsurfaceProfile.Object // 71a4ae2680
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c] 0x715cc6db80

--------------------------------
Class: SubsurfaceProfileStruct // 715ce764c0
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10] 0x715ce8c980
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10] 0x715ce8ca00
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4] 0x715ce8ca80
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4] 0x715ce8cb00
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715ce8cb80
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4] 0x715ce8cc00
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10] 0x715ce8cc80
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10] 0x715ce8cd00
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10] 0x715ce8cd80
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4] 0x715ce8ce00
	float NormalScale;//[Offset: 0x64, Size: 0x4] 0x715ce8ce80
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4] 0x715ce8cf00
	float IOR;//[Offset: 0x6c, Size: 0x4] 0x715ce8cf80
	float Roughness0;//[Offset: 0x70, Size: 0x4] 0x715ce8d000
	float Roughness1;//[Offset: 0x74, Size: 0x4] 0x715ce8d080
	float LobeMix;//[Offset: 0x78, Size: 0x4] 0x715ce8d100
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10] 0x715ce8d180

--------------------------------
Class: LightmassMaterialInterfaceSettings // 715db1e680
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4] 0x715db4e880
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4] 0x715db4e900
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4] 0x715db4e980
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715db4ea00
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x715db4ea80
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x715db4eb00
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x715db4eb80
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x715db4ec00

--------------------------------
Class: MaterialTextureInfo // 715db1e740
	float SamplingScale;//[Offset: 0x0, Size: 0x4] 0x715db4ec80
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4] 0x715db4ed00
	FName TextureName;//[Offset: 0x8, Size: 0x8] 0x715db4ed80

--------------------------------
Class: Vector4 // 717dfc6ac0
	float X;//[Offset: 0x0, Size: 0x4] 0x717df87680
	float Y;//[Offset: 0x4, Size: 0x4] 0x717df87700
	float Z;//[Offset: 0x8, Size: 0x4] 0x717df87780
	float W;//[Offset: 0xc, Size: 0x4] 0x717df87800

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object // 71a4aa2900
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x625a9e8 0x715cbeff20
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x625aaec 0x715cbecaa0
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x625ad48 0x715cbecb80
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x625ae4c 0x715cbecc60
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x625b0a8 0x715cbecd40
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x625b1ac 0x715cbece20
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x625a740 0x715cbecf00
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x625a868 0x715cbecfe0
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x625a938 0x715cbed0c0
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x625abd0 0x715cbed1a0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x625ac9c 0x715cbed280
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x625af30 0x715cbed360
	float K2_GetScalarParameterValue(FName ParameterName);// 0x625affc 0x715cbed440
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x625a650 0x715cbed520
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x625a508 0x715cbed600
	void CopyInterpParameters(MaterialInstance* Source);// 0x625a5ac 0x715cbed6e0

--------------------------------
Class: MaterialInstance.MaterialInterface.Object // 71a499f880
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x715ca94f00
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8] 0x715ca94f80
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8] 0x715ca95000
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x715ca95080
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x715ca95100
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10] 0x715ca71780
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10] 0x715ca71820
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10] 0x715ca718c0
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10] 0x715ca71960
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10] 0x715ca71a00
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8] 0x715ca93300
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40] 0x715ca93380
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0] 0x715ca93400
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10] 0x715ca71aa0

--------------------------------
Class: ScalarParameterValue // 715db1e980
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x715db4f580
	float ParameterValue;//[Offset: 0x10, Size: 0x4] 0x715db4f600
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x715db4f680

--------------------------------
Class: VectorParameterValue // 715db1ea40
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x715db4f700
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10] 0x715db4f780
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10] 0x715db4d700

--------------------------------
Class: TextureParameterValue // 715db1eb00
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x715db4d780
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x715db4d800
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x715db4d880

--------------------------------
Class: RuntimeVirtualTextureParameterValue // 715db1ebc0
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x715db4d900
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x715db4d980
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x715db4da00

--------------------------------
Class: FontParameterValue // 715db1ec80
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x715db4da80
	Font* FontValue;//[Offset: 0x10, Size: 0x8] 0x715db4db00
	int FontPage;//[Offset: 0x18, Size: 0x4] 0x715db4db80
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10] 0x715db4dc00

--------------------------------
Class: MaterialInstanceBasePropertyOverrides // 715db1e800
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715db4ee00
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715db4ee80
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715db4ef00
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715db4ef80
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715db4f000
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715db4f080
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715db4f100
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x715db4f180
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x715db4f200
	byte BlendMode;//[Offset: 0x2, Size: 0x1] 0x715db4f280
	byte ShadingModel;//[Offset: 0x3, Size: 0x1] 0x715db4f300
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4] 0x715db4f380

--------------------------------
Class: StaticParameterSet // 715ce76b80
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10] 0x715daefba0
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10] 0x715daefc40
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10] 0x715daefce0
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10] 0x715daefd80

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase // 715ce767c0
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x715ce8b600

--------------------------------
Class: StaticParameterBase // 715ce76ac0
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x715ce8bb80
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715ce8bc00
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x715ce8bc80

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase // 715ce76880
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x715ce8b700
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x715ce8b780
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1] 0x715ce8b800
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1] 0x715ce8b880

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase // 715ce76940
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4] 0x715ce8b980
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715ce8ba00

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase // 715ce76a00
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40] 0x715ce8bb00

--------------------------------
Class: MaterialLayersFunctions // 715db1e5c0
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10] 0x715daebaa0
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10] 0x715daebb40
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10] 0x715daebbe0
	FString KeyString;//[Offset: 0x30, Size: 0x10] 0x715db4e800

--------------------------------
Class: Pawn.Actor.Object // 719b176780
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x715cee7080
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x715cee7100
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x715cee7180
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1] 0x715cee7200
	float BaseEyeHeight;//[Offset: 0x22c, Size: 0x4] 0x715cee7280
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 0x1] 0x715cee7300
	enum AutoPossessAI;//[Offset: 0x231, Size: 0x1] 0x715ce98b20
	byte RemoteViewPitch;//[Offset: 0x232, Size: 0x1] 0x715cee5300
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 0x8] 0x715ce98bc0
	PlayerState* PlayerState;//[Offset: 0x240, Size: 0x8] 0x715cee5380
	Controller* LastHitBy;//[Offset: 0x250, Size: 0x8] 0x715cee5400
	Controller* Controller;//[Offset: 0x258, Size: 0x8] 0x715cee5480
	Vector ControlInputVector;//[Offset: 0x264, Size: 0xc] 0x715cee5500
	Vector LastControlInputVector;//[Offset: 0x270, Size: 0xc] 0x715cee5580
	void SpawnDefaultController();// 0x629508c 0x715ced1820
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x6295204 0x715ced1900
	void ReceiveUnpossessed(Controller* OldController);// 0x45c6aa0 0x715ced19e0
	void ReceivePossessed(Controller* NewController);// 0x45c6aa0 0x715ced1ac0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x62954a0 0x715ced1ba0
	void OnRep_PlayerState();// 0x6295300 0x715ced1c80
	void OnRep_Controller();// 0x629531c 0x715da1e780
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6294b1c 0x715da1e860
	Vector K2_GetMovementInputVector();// 0x6294ae4 0x715da1e940
	bool IsPlayerControlled();// 0x6295144 0x715da1ea20
	bool IsPawnControlled();// 0x629538c 0x715da1eb00
	bool IsMoveInputIgnored();// 0x6294c5c 0x715da1ebe0
	bool IsLocallyControlled();// 0x6295184 0x715da1ecc0
	bool IsControlled();// 0x62953c4 0x715da1eda0
	bool IsBotControlled();// 0x6295104 0x715da1ee80
	Vector GetPendingMovementInputVector();// 0x6294f18 0x715da1ef60
	Vector GetNavAgentLocation();// 0x62951c4 0x715da1f040
	PawnMovementComponent* GetMovementComponent();// 0x6295614 0x715da1f120
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x62953fc 0x715da1f200
	Vector GetLastMovementInputVector();// 0x6294ee0 0x715da1f2e0
	Rotator GetControlRotation();// 0x6295338 0x715da1f3c0
	Controller* GetController();// 0x6295370 0x715da1f4a0
	Rotator GetBaseAimRotation();// 0x62950c4 0x715da1f580
	void DetachFromControllerPendingDestroy();// 0x62950a8 0x715da1f660
	Vector ConsumeMovementInputVector();// 0x6294ea0 0x715da1f740
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x6294f50 0x715da1f820
	void AddControllerYawInput(float Val);// 0x6294d48 0x715da1f900
	void AddControllerRollInput(float Val);// 0x6294c9c 0x715da1f9e0
	void AddControllerPitchInput(float Val);// 0x6294df4 0x715da1fac0

--------------------------------
Class: Controller.Actor.Object // 71a4901000
	PlayerState* PlayerState;//[Offset: 0x228, Size: 0x8] 0x715d17a500
	delegate OnInstigatedAnyDamage;//[Offset: 0x238, Size: 0x10] 0x715d178480
	FName StateName;//[Offset: 0x248, Size: 0x8] 0x715d178500
	Pawn* Pawn;//[Offset: 0x250, Size: 0x8] 0x715d178580
	Character* Character;//[Offset: 0x260, Size: 0x8] 0x715d178600
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 0x8] 0x715d178680
	Rotator ControlRotation;//[Offset: 0x288, Size: 0xc] 0x715d178700
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1] 0x715d178780
	void UnPossess();// 0x6148de8 0x715d1682e0
	void StopMovement();// 0x6148dcc 0x715d1683c0
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x61493a0 0x715d1684a0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x6148d18 0x715d168580
	void SetIgnoreLookInput(bool bNewLookInput);// 0x6148c08 0x715d168660
	void SetControlRotation(out const Rotator NewRotation);// 0x61494a4 0x715d168740
	void ResetIgnoreMoveInput();// 0x6148cfc 0x715d168820
	void ResetIgnoreLookInput();// 0x6148bec 0x715d168900
	void ResetIgnoreInputFlags();// 0x6148b90 0x715d1689e0
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x45c6aa0 0x715d168ac0
	void ReceivePossess(Pawn* PossessedPawn);// 0x45c6aa0 0x715d168ba0
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x45c6aa0 0x715d168c80
	void Possess(Pawn* InPawn);// 0x6148dfc 0x715d168d60
	void OnRep_PlayerState();// 0x6149224 0x715d168e40
	void OnRep_Pawn();// 0x6149240 0x715d168f20
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x614925c 0x715d169000
	Pawn* K2_GetPawn();// 0x6148fd8 0x715d165720
	bool IsPlayerController();// 0x6148f3c 0x715d165800
	bool IsMoveInputIgnored();// 0x6148cbc 0x715d1658e0
	bool IsLookInputIgnored();// 0x6148bac 0x715d1659c0
	bool IsLocalPlayerController();// 0x6148ee0 0x715d165aa0
	bool IsLocalController();// 0x6148ea0 0x715d165b80
	Actor* GetViewTarget();// 0x6148f9c 0x715d165c60
	Rotator GetDesiredRotation();// 0x6148f5c 0x715d165d40
	Rotator GetControlRotation();// 0x614955c 0x715d165e20
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x614900c 0x715d165f00
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x6149104 0x715d165fe0
	PlayerController* CastToPlayerController();// 0x61491f0 0x715d1660c0

--------------------------------
Class: DamageType.Object // 71a4a1a100
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715cb37080
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x715cb37100
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x715cb37180
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4] 0x715cb37200
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4] 0x715cb37280
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4] 0x715cb37300
	float DamageFalloff;//[Offset: 0x38, Size: 0x4] 0x715cb37380

--------------------------------
Class: PlayerController.Controller.Actor.Object // 71a4901280
	Player* Player;//[Offset: 0x298, Size: 0x8] 0x715d182c80
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 0x8] 0x715d182d00
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 0x8] 0x715d182d80
	HUD* MyHUD;//[Offset: 0x2b0, Size: 0x8] 0x715d182e00
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 0x8] 0x715d182e80
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 0x8] 0x715d0bc360
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x715d182f00
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 0xc] 0x715d182f80
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 0x4] 0x715d183000
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 0x10] 0x715d0bc400
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 0x10] 0x715d0bc4a0
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 0x4] 0x715d183180
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 0xc] 0x715d181100
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 0xc] 0x715d181180
	int ClientCap;//[Offset: 0x330, Size: 0x4] 0x715d181200
	CheatManager* CheatManager;//[Offset: 0x338, Size: 0x8] 0x715d181280
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 0x8] 0x715d0bc540
	PlayerInput* PlayerInput;//[Offset: 0x348, Size: 0x8] 0x715d181300
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x350, Size: 0x10] 0x715d0bc5e0
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 0x1] 0x715d181400
	byte NetPlayerIndex;//[Offset: 0x3d1, Size: 0x1] 0x715d181480
	NetConnection* PendingSwapConnection;//[Offset: 0x410, Size: 0x8] 0x715d181500
	NetConnection* NetConnection;//[Offset: 0x418, Size: 0x8] 0x715d181580
	float InputYawScale;//[Offset: 0x42c, Size: 0x4] 0x715d181600
	float InputPitchScale;//[Offset: 0x430, Size: 0x4] 0x715d181680
	float InputRollScale;//[Offset: 0x434, Size: 0x4] 0x715d181700
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1] 0x715d181780
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 0x1] 0x715d181800
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 0x1] 0x715d181880
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 0x1] 0x715d181900
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 0x1] 0x715d181980
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 0x1] 0x715d181a00
	float ForceFeedbackScale;//[Offset: 0x43c, Size: 0x4] 0x715d181a80
	Key[] ClickEventKeys;//[Offset: 0x440, Size: 0x10] 0x715d0bc680
	byte DefaultMouseCursor;//[Offset: 0x450, Size: 0x1] 0x715d181b80
	byte CurrentMouseCursor;//[Offset: 0x451, Size: 0x1] 0x715d181c00
	byte DefaultClickTraceChannel;//[Offset: 0x452, Size: 0x1] 0x715d181c80
	byte CurrentClickTraceChannel;//[Offset: 0x453, Size: 0x1] 0x715d181d00
	float HitResultTraceDistance;//[Offset: 0x454, Size: 0x4] 0x715d181d80
	uint16 SeamlessTravelCount;//[Offset: 0x458, Size: 0x2] 0x715d181e00
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x45a, Size: 0x2] 0x715d181e80
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d0, Size: 0x8] 0x715d181f00
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d8, Size: 0x1] 0x715d181f80
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f0, Size: 0x8] 0x715d182000
	SpectatorPawn* SpectatorPawn;//[Offset: 0x548, Size: 0x8] 0x715d182080
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1] 0x715d182100
	Vector SpawnLocation;//[Offset: 0x558, Size: 0xc] 0x715d180080
	bool WasInputKeyJustReleased(Key Key);// 0x62a9b88 0x715d16ee80
	bool WasInputKeyJustPressed(Key Key);// 0x62a9d14 0x715d16ef60
	void ToggleSpeaking(bool bInSpeaking);// 0x62aeed8 0x715d16f040
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x62abd84 0x715d16f120
	void SwitchLevel(FString URL);// 0x62aff4c 0x715d16f200
	void StopHapticEffect(enum Hand);// 0x62abb68 0x715d16f2e0
	void StartFire(byte FireModeNum);// 0x62af040 0x715d16f3c0
	void SetVirtualJoystickVisibility(bool bVisible);// 0x62a8d98 0x715d16f4a0
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x62a8b28 0x715d16f580
	void SetName(FString S);// 0x62b0004 0x715d16f660
	void SetMouseLocation(const int X, const int Y);// 0x62af0ec 0x715d16f740
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x62ac958 0x715d16f820
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x62aba40 0x715d16f900
	void SetDisableHaptics(bool bNewDisabled);// 0x62ab98c 0x715d16f9e0
	void SetControllerLightColor(Color Color);// 0x62ab8ec 0x715d16fac0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x62a86b4 0x715d16fba0
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x62a8a04 0x715d16fc80
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x62a890c 0x715d16fd60
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x62aa410 0x715d16fe40
	void ServerViewPrevPlayer();// 0x62aa508 0x715d16ff20
	void ServerViewNextPlayer();// 0x62aa564 0x715d16caa0
	void ServerVerifyViewTarget();// 0x62aa5c0 0x715d16cb80
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x62aa61c 0x715d16cc60
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x62aa6f4 0x715d16cd40
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x62aa7cc 0x715d16ce20
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x62ae96c 0x715d16cf00
	void ServerToggleAILogging();// 0x62aa230 0x715d16cfe0
	void ServerShortTimeout();// 0x62aa8fc 0x715d16d0c0
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x62b072c 0x715d16d1a0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x62aaa10 0x715d16d280
	void ServerRestartPlayer();// 0x62aab40 0x715d16d360
	void ServerPause();// 0x62aab9c 0x715d16d440
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x62aabf8 0x715d16d520
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x62aec14 0x715d16d600
	void ServerExecRPC(FString Msg);// 0x62b03f4 0x715d16d6e0
	void ServerExec(FString Msg);// 0x62b0344 0x715d16d7c0
	void ServerCheckClientPossessionReliable();// 0x62aa958 0x715d16d8a0
	void ServerCheckClientPossession();// 0x62aa9b4 0x715d16d980
	void ServerChangeName(FString S);// 0x62aaccc 0x715d16da60
	void ServerCamera(FName NewMode);// 0x62aadb4 0x715d16db40
	void ServerAcknowledgePossession(Pawn* P);// 0x62aae98 0x715d16dc20
	void SendToConsole(FString Command);// 0x62ae38c 0x715d16dd00
	void RestartLevel();// 0x62b0594 0x715d16dde0
	void ResetControllerLightColor();// 0x62ab8d8 0x715d16dec0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x62af1d0 0x715d16dfa0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x62abc0c 0x715d16e080
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x62abe68 0x715d16e160
	void Pause();// 0x62b00bc 0x715d16e240
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x62a8600 0x715d16e320
	void LocalTravel(FString URL);// 0x62b04dc 0x715d16e400
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x62ac320 0x715d16e4e0
	bool IsInputKeyDown(Key Key);// 0x62a9ea0 0x715d16e5c0
	void GetViewportSize(out int SizeX, out int SizeY);// 0x62aca74 0x715d16e6a0
	SpectatorPawn* GetSpectatorPawn();// 0x62a85e4 0x715d16adc0
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x62a941c 0x715d16aea0
	Vector GetInputVectorKeyState(Key Key);// 0x62a9874 0x715d16af80
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x62a96d0 0x715d16b060
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x62a9190 0x715d16b140
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x62a9534 0x715d16b220
	float GetInputKeyTimeDown(Key Key);// 0x62a9294 0x715d16b300
	void GetInputAnalogStickStateRaw(byte WhichStick, out float StickX, out float StickY);// 0x62a8ef8 0x715d16b3e0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x62a9044 0x715d16b4c0
	float GetInputAnalogKeyState(Key Key);// 0x62a9a00 0x715d16b5a0
	HUD* GetHUD();// 0x62aca40 0x715d16b680
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x62af5c4 0x715d16b760
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x62af790 0x715d16b840
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x62af940 0x715d16b920
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x62afaf0 0x715d16ba00
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x62afc74 0x715d16bae0
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x62afde0 0x715d16bbc0
	Vector GetFocalLocation();// 0x62a85a4 0x715d16bca0
	void FOV(float NewFOV);// 0x62b05b0 0x715d16bd80
	void EnableCheats();// 0x62b065c 0x715d16be60
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x62af320 0x715d16bf40
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x62af4b4 0x715d16c020
	void ConsoleKey(Key Key);// 0x62ae444 0x715d16c100
	void ClientWasKicked(const FText KickReason);// 0x62ab218 0x715d16c1e0
	void ClientVoiceHandshakeComplete();// 0x62aeebc 0x715d16c2c0
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x62ab320 0x715d16c3a0
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x62ab3d8 0x715d16c480
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x62ae5cc 0x715d16c560
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x62ab5c0 0x715d16c640
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x62ab750 0x715d16c720
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x62aa28c 0x715d16c800
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x62ac138 0x715d16c8e0
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x62ac4f8 0x715d16c9c0
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x62ac5e8 0x715d1690e0
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x62ac6e0 0x715d1691c0
	void ClientStartOnlineSession();// 0x62ab1fc 0x715d1692a0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x62ac7a8 0x715d169380
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x62ac854 0x715d169460
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x62b0678 0x715d169540
	void ClientSetHUD(class HUD NewHUDClass);// 0x62acb78 0x715d169620
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x62acc24 0x715d169700
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x62acd58 0x715d1697e0
	void ClientSetCameraMode(FName NewCamMode);// 0x62acf04 0x715d1698c0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x62acfb0 0x715d1699a0
	void ClientSetBlockOnAsyncLoading();// 0x62ad170 0x715d169a80
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x62b0184 0x715d169b60
	void ClientReturnToMainMenu(FString ReturnReason);// 0x62b028c 0x715d169c40
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x62ab134 0x715d169d20
	void ClientRestart(Pawn* NewPawn);// 0x62ad18c 0x715d169e00
	void ClientReset();// 0x62ad238 0x715d169ee0
	void ClientRepObjRef(Object* Object);// 0x62b00d8 0x715d169fc0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x62aaf7c 0x715d16a0a0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x62ad254 0x715d16a180
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x62ad3d8 0x715d16a260
	void ClientPlaySoundAtLocation(SoundBase* sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x62ad520 0x715d16a340
	void ClientPlaySound(SoundBase* sound, float VolumeMultiplier, float PitchMultiplier);// 0x62ad690 0x715d16a420
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x62ac224 0x715d16a500
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x62ad7c0 0x715d16a5e0
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x62ad8a4 0x715d16a6c0
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x62ada18 0x715d16a7a0
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x62ae79c 0x715d16a880
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x62adcf8 0x715d16a960
	void ClientIgnoreMoveInput(bool bIgnore);// 0x62ade38 0x715d16aa40
	void ClientIgnoreLookInput(bool bIgnore);// 0x62adeec 0x715d16ab20
	void ClientGotoState(FName NewState);// 0x62adfa0 0x715d16ac00
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x62ae04c 0x715d16ace0
	void ClientForceGarbageCollection();// 0x62ae144 0x715d167400
	void ClientFlushLevelStreaming();// 0x62ae160 0x715d1674e0
	void ClientEndOnlineSession();// 0x62ab1e0 0x715d1675c0
	void ClientEnableNetworkVoice(bool bEnable);// 0x62aef8c 0x715d1676a0
	void ClientCommitMapChange();// 0x62ae174 0x715d167780
	void ClientClearCameraLensEffects();// 0x62ac78c 0x715d167860
	void ClientCapBandwidth(int Cap);// 0x62ae190 0x715d167940
	void ClientCancelPendingMapChange();// 0x62ae23c 0x715d167a20
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x62ae258 0x715d167b00
	void ClearAudioListenerOverride();// 0x62a89f0 0x715d167be0
	void ClearAudioListenerAttenuationOverride();// 0x62a88f8 0x715d167cc0
	bool CanRestartPlayer();// 0x62a88b8 0x715d167da0
	void Camera(FName NewMode);// 0x62a8cec 0x715d167e80
	void AddYawInput(float Val);// 0x62aa0d8 0x715d167f60
	void AddRollInput(float Val);// 0x62aa02c 0x715d168040
	void AddPitchInput(float Val);// 0x62aa184 0x715d168120
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x62a8e4c 0x715d168200

--------------------------------
Class: Key // 7149067000
	FName KeyName;//[Offset: 0x0, Size: 0x8] 0x7148ca2280

--------------------------------
Class: UserWidget.Widget.Visual.Object // 71a4829c00
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 0x10] 0x715d7d2000
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 0x10] 0x715d7d2080
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 0x28] 0x715d7d2100
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 0x10] 0x715d7d0080
	Margin Padding;//[Offset: 0x168, Size: 0x10] 0x715d7d0100
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x178, Size: 0x10] 0x7148cdb960
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x188, Size: 0x10] 0x7148cdba00
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x198, Size: 0x10] 0x714961ba00
	WidgetTree* WidgetTree;//[Offset: 0x1a8, Size: 0x8] 0x715d7d0400
	int Priority;//[Offset: 0x1b0, Size: 0x4] 0x715d7d0480
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 0x1] 0x715d7d0500
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b4, Size: 0x1] 0x715d7d0580
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b4, Size: 0x1] 0x715d7d0600
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1b4, Size: 0x1] 0x715d7d0680
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1b4, Size: 0x1] 0x715d7d0700
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1b4, Size: 0x1] 0x715d7d0780
	enum TickFrequency;//[Offset: 0x1c0, Size: 0x1] 0x7148cd90c0
	InputComponent* InputComponent;//[Offset: 0x1c8, Size: 0x8] 0x715d7d0880
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1d0, Size: 0x10] 0x7148cd9200
	void UnregisterInputComponent();// 0x55e1848 0x715d7c3960
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x55e3170 0x715d7c0080
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x55e2eec 0x715d7c0160
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x55e30cc 0x715d7c0240
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x55e2e48 0x715d7c0320
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x45c6aa0 0x715d7c0400
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x55e1884 0x715d7c04e0
	void StopListeningForAllInputActions();// 0x55e1870 0x715d7c05c0
	void StopAnimationsAndLatentActions();// 0x55e3350 0x715d7c06a0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x55e212c 0x715d7c0780
	void StopAllAnimations();// 0x55e2118 0x715d7c0860
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x55e3714 0x715d7c0940
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x55e1d08 0x715d7c0a20
	void SetPadding(Margin InPadding);// 0x55e2898 0x715d7c0b00
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x55e33ac 0x715d7c0be0
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x55e1df0 0x715d7c0cc0
	void SetInputActionPriority(int NewPriority);// 0x55e16f4 0x715d7c0da0
	void SetInputActionBlocking(bool bShouldBlock);// 0x55e1648 0x715d7c0e80
	void SetForegroundColor(SlateColor InForegroundColor);// 0x55e2940 0x715d7c0f60
	void SetDesiredSizeInViewport(Vector2D Size);// 0x55e3674 0x715d7c1040
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x55e2ad4 0x715d7c1120
	void SetAnchorsInViewport(Anchors Anchors);// 0x55e35cc 0x715d7c1200
	void SetAlignmentInViewport(Vector2D Alignment);// 0x55e352c 0x715d7c12e0
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x55e1c64 0x715d7c13c0
	void RemoveFromViewport();// 0x55e3800 0x715d7c14a0
	void RegisterInputComponent();// 0x55e185c 0x715d7c1580
	void PreConstruct(bool IsDesignTime);// 0x45c6aa0 0x715d7c1660
	void PlaySound(SoundBase* SoundToPlay);// 0x55e1b10 0x715d7c1740
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x55e2448 0x715d7c1820
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x55e21d0 0x715d7c1900
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x55e230c 0x715d7c19e0
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x55e2690 0x715d7c1ac0
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x55e206c 0x715d7c1ba0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x45c6aa0 0x715d7c1c80
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x45c6aa0 0x715d79e780
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x45c6aa0 0x715d79e860
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x45c6aa0 0x715d79e940
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x45c6aa0 0x715d79ea20
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x45c6aa0 0x715d79eb00
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x45c6aa0 0x715d79ebe0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x45c6aa0 0x715d79ecc0
	void OnPaint(out PaintContext Context);// 0x45c6aa0 0x715d79eda0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x45c6aa0 0x715d79ee80
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x45c6aa0 0x715d79ef60
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x45c6aa0 0x715d79f040
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x45c6aa0 0x715d79f120
	void OnMouseCaptureLost();// 0x45c6aa0 0x715d79f200
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x45c6aa0 0x715d79f2e0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x45c6aa0 0x715d79f3c0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x45c6aa0 0x715d79f4a0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x45c6aa0 0x715d79f580
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x45c6aa0 0x715d79f660
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x45c6aa0 0x715d79f740
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x45c6aa0 0x715d79f820
	void OnInitialized();// 0x45c6aa0 0x715d79f900
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x45c6aa0 0x715d79f9e0
	void OnFocusLost(FocusEvent InFocusEvent);// 0x45c6aa0 0x715d79fac0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x45c6aa0 0x715d79fba0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x45c6aa0 0x715d79fc80
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x45c6aa0 0x715d79fd60
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x45c6aa0 0x715d79fe40
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x45c6aa0 0x715d79ff20
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x45c6aa0 0x715d79caa0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x55e2c24 0x715d79cb80
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x55e2b78 0x715d79cc60
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x45c6aa0 0x715d79cd40
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x45c6aa0 0x715d79ce20
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x55e196c 0x715d79cf00
	bool IsPlayingAnimation();// 0x55e1aec 0x715d79cfe0
	bool IsListeningForInputAction(FName ActionName);// 0x55e1798 0x715d79d0c0
	bool IsInViewport();// 0x55e3450 0x715d79d1a0
	bool IsInteractable();// 0x45c6aa0 0x715d79d280
	bool IsAnyAnimationPlaying();// 0x55e1ed8 0x715d79d360
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x55e1bb4 0x715d79d440
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x55e1f10 0x715d79d520
	Pawn* GetOwningPlayerPawn();// 0x55e3378 0x715d79d600
	bool GetIsVisible();// 0x55e3488 0x715d79d6e0
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x55e1fc0 0x715d79d7c0
	Anchors GetAnchorsInViewport();// 0x55e34f4 0x715d79d8a0
	Vector2D GetAlignmentInViewport();// 0x55e34c0 0x715d79d980
	void Destruct();// 0x45c6aa0 0x715d79da60
	void Construct();// 0x45c6aa0 0x715d79db40
	void CancelLatentActions();// 0x55e3364 0x715d79dc20
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x55e3260 0x715d79dd00
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x55e2fdc 0x715d79dde0
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x55e2cd0 0x715d79dec0
	void AllowReceiveFocus(FocusEvent InFocusEvent, out enum Result);// 0x45c6aa0 0x715d79dfa0
	void AllowLostFocus(FocusEvent InFocusEvent, out enum Result);// 0x45c6aa0 0x715d79e080
	void AddToViewport(int ZOrder);// 0x55e38c4 0x715d79e160
	bool AddToPlayerScreen(int ZOrder);// 0x55e3814 0x715d79e240

--------------------------------
Class: Widget.Visual.Object // 71a4829980
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8] 0x715d78ab80
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10] 0x715d78ac00
	FText ToolTipText;//[Offset: 0x40, Size: 0x18] 0x715d78ac80
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10] 0x715d78ad00
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8] 0x715d78ad80
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10] 0x715d78ae00
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10] 0x715d78ae80
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c] 0x715d78af00
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8] 0x715d78af80
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x715d78b000
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1] 0x715d78b080
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1] 0x715d78b100
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1] 0x715d78b180
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8] 0x715d78b200
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x715d78b280
	byte Cursor;//[Offset: 0xc1, Size: 0x1] 0x715d78b300
	enum Clipping;//[Offset: 0xc2, Size: 0x1] 0x7148cda4c0
	enum Visibility;//[Offset: 0xc3, Size: 0x1] 0x7148cd7c20
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4] 0x715d78b480
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8] 0x715d78b500
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1] 0x7148cd7cc0
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 0x10] 0x7148cd7d60
	void SetVisibility(enum InVisibility);// 0x55ede2c 0x715d792620
	void SetUserFocus(PlayerController* PlayerController);// 0x55ed794 0x715d792700
	void SetToolTipText(out const FText InToolTipText);// 0x55ee0a0 0x715d7927e0
	void SetToolTip(Widget* Widget);// 0x55edffc 0x715d7928c0
	void SetRenderTranslation(Vector2D Translation);// 0x55ee33c 0x715d7929a0
	void SetRenderTransformPivot(Vector2D Pivot);// 0x55ee29c 0x715d792a80
	void SetRenderTransformAngle(float Angle);// 0x55ee410 0x715d792b60
	void SetRenderTransform(WidgetTransform InTransform);// 0x55ee5f4 0x715d792c40
	void SetRenderShear(Vector2D Shear);// 0x55ee4b4 0x715d792d20
	void SetRenderScale(Vector2D Scale);// 0x55ee554 0x715d792e00
	void SetRenderOpacity(float InOpacity);// 0x55edd54 0x715d792ee0
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x55ed354 0x715d792fc0
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x55ed174 0x715d7930a0
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x55ed264 0x715d793180
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x55ed43c 0x715d793260
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x55ed524 0x715d793340
	void SetKeyboardFocus();// 0x55eda1c 0x715d793420
	void SetIsEnabled(bool bInIsEnabled);// 0x55ee1b0 0x715d793500
	void SetFocus();// 0x55ed838 0x715d7935e0
	void SetCursor(byte InCursor);// 0x55edf58 0x715d7936c0
	void SetClipping(enum InClipping);// 0x55edc7c 0x715d7937a0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x55ed650 0x715d793880
	void ResetCursor();// 0x55edf44 0x715d793960
	void RemoveFromParent();// 0x55ed124 0x715d790080
	EventReply OnReply__DelegateSignature();// 0x45c6aa0 0x715d790160
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x45c6aa0 0x715d790240
	bool IsVisible();// 0x55edf0c 0x715d790320
	bool IsHovered();// 0x55edb90 0x715d790400
	void InvalidateLayoutAndVolatility();// 0x55ed76c 0x715d7904e0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x55ed84c 0x715d7905c0
	bool HasUserFocus(PlayerController* PlayerController);// 0x55ed96c 0x715d7906a0
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x55eda30 0x715d790780
	bool HasMouseCapture();// 0x55edb20 0x715d790860
	bool HasKeyboardFocus();// 0x55edb58 0x715d790940
	bool HasFocusedDescendants();// 0x55ed8fc 0x715d790a20
	bool HasAnyUserFocus();// 0x55ed934 0x715d790b00
	Widget* GetWidget__DelegateSignature();// 0x45c6aa0 0x715d790be0
	enum GetVisibility();// 0x55eded8 0x715d790cc0
	Geometry GetTickSpaceGeometry();// 0x55ed0b4 0x715d790da0
	FText GetText__DelegateSignature();// 0x45c6aa0 0x715d790e80
	enum GetSlateVisibility__DelegateSignature();// 0x45c6aa0 0x715d790f60
	SlateColor GetSlateColor__DelegateSignature();// 0x45c6aa0 0x715d791040
	SlateBrush GetSlateBrush__DelegateSignature();// 0x45c6aa0 0x715d791120
	float GetRenderTransformAngle();// 0x55ee3dc 0x715d791200
	float GetRenderOpacity();// 0x55eddf8 0x715d7912e0
	PanelWidget* GetParent();// 0x55ed140 0x715d7913c0
	Geometry GetPaintSpaceGeometry();// 0x55ed07c 0x715d7914a0
	PlayerController* GetOwningPlayer();// 0x55ed00c 0x715d791580
	LocalPlayer* GetOwningLocalPlayer();// 0x55ecfd0 0x715d791660
	byte GetMouseCursor__DelegateSignature();// 0x45c6aa0 0x715d791740
	LinearColor GetLinearColor__DelegateSignature();// 0x45c6aa0 0x715d791820
	bool GetIsEnabled();// 0x55ee264 0x715d791900
	int GetInt32__DelegateSignature();// 0x45c6aa0 0x715d7919e0
	GameInstance* GetGameInstance();// 0x55ed048 0x715d791ac0
	float GetFloat__DelegateSignature();// 0x45c6aa0 0x715d791ba0
	Vector2D GetDesiredSize();// 0x55ed738 0x715d791c80
	enum GetClipping();// 0x55edd20 0x715d76e780
	enum GetCheckBoxState__DelegateSignature();// 0x45c6aa0 0x715d76e860
	Geometry GetCachedGeometry();// 0x55ed0ec 0x715d76e940
	bool GetBool__DelegateSignature();// 0x45c6aa0 0x715d76ea20
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x45c6aa0 0x715d76eb00
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x45c6aa0 0x715d76ebe0
	void ForceVolatile(bool bForce);// 0x55edbd0 0x715d76ecc0
	void ForceLayoutPrepass();// 0x55ed780 0x715d76eda0

--------------------------------
Class: Visual.Object // 71a4829700

--------------------------------
Class: SlateColor // 714906a3c0
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10] 0x715d789180
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1] 0x715d789280

--------------------------------
Class: Margin // 714906a300
	float Left;//[Offset: 0x0, Size: 0x4] 0x715d788f00
	float Top;//[Offset: 0x4, Size: 0x4] 0x715d788f80
	float Right;//[Offset: 0x8, Size: 0x4] 0x715d789000
	float Bottom;//[Offset: 0xc, Size: 0x4] 0x715d789080

--------------------------------
Class: PanelSlot.Visual.Object // 71a482f380
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8] 0x715cf37780
	Widget* Content;//[Offset: 0x30, Size: 0x8] 0x715cf37800

--------------------------------
Class: PanelWidget.Widget.Visual.Object // 71a4828d00
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 0x10] 0x715ce9a9c0
	bool RemoveChildAt(int Index);// 0x55cb658 0x715ceddd00
	bool RemoveChild(Widget* Content);// 0x55cb4fc 0x715ceddde0
	bool HasChild(Widget* Content);// 0x55cb708 0x715ceddec0
	bool HasAnyChildren();// 0x55cb4c4 0x715ceddfa0
	int GetChildrenCount();// 0x55cb9c0 0x715cede080
	int GetChildIndex(const Widget* Content);// 0x55cb7b8 0x715cede160
	Widget* GetChildAt(int Index);// 0x55cb914 0x715cede240
	Widget*[] GetAllChildren();// 0x55cb864 0x715cede320
	void ClearChildren();// 0x55cb4a8 0x715cede400
	PanelSlot* AddChild(Widget* Content);// 0x55cb5ac 0x715cede4e0

--------------------------------
Class: WidgetTransform // 714906a000
	Vector2D Translation;//[Offset: 0x0, Size: 0x8] 0x715d789900
	Vector2D Scale;//[Offset: 0x8, Size: 0x8] 0x715d789980
	Vector2D Shear;//[Offset: 0x10, Size: 0x8] 0x715d789a00
	float Angle;//[Offset: 0x18, Size: 0x4] 0x715d789a80

--------------------------------
Class: EventReply // 714906a240

--------------------------------
Class: Geometry // 714906a540

--------------------------------
Class: PointerEvent.InputEvent // 714906a0c0

--------------------------------
Class: InputEvent // 714906a180

--------------------------------
Class: SlateBrush // 714906a480
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8] 0x715d788e80
	Margin Margin;//[Offset: 0x10, Size: 0x10] 0x715d789100
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28] 0x715d789300
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8] 0x715d789380
	FName ResourceName;//[Offset: 0x50, Size: 0x8] 0x715d789400
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14] 0x715d789480
	byte DrawAs;//[Offset: 0x6c, Size: 0x1] 0x715d787400
	byte Tiling;//[Offset: 0x6d, Size: 0x1] 0x715d787480
	byte Mirroring;//[Offset: 0x6e, Size: 0x1] 0x715d787500
	byte ImageType;//[Offset: 0x6f, Size: 0x1] 0x715d787580
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715d787600
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x715d787680

--------------------------------
Class: Box2D // 717dfc9280
	Vector2D Min;//[Offset: 0x0, Size: 0x8] 0x717df8a500
	Vector2D Max;//[Offset: 0x8, Size: 0x8] 0x717df88480
	byte bIsValid;//[Offset: 0x10, Size: 0x1] 0x717df88500

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object // 71a49bbf00
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8] 0x715cac1a80
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10] 0x715ca75740
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1] 0x715cac1b80
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10] 0x715cac1c00
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x55efbd0 0x715cab0240
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x55ef94c 0x715cab0320
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x55efb2c 0x715cab0400
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x55ef8a8 0x715cab04e0
	float GetStartTime();// 0x55efde4 0x715cab05c0
	float GetEndTime();// 0x55efdb0 0x715cab06a0
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x55efcc0 0x715cab0780
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x55efa3c 0x715cab0860

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object // 71a4822180
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0] 0x715cf1e400
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1] 0x715ce9b0a0
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x715cf1e500
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1] 0x715cf1e580
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x5383c48 0x715ceda7a0
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x5383d44 0x715ceda880

--------------------------------
Class: MovieSceneSignedObject.Object // 71a4821f00
	Guid Signature;//[Offset: 0x28, Size: 0x10] 0x715cf1c700

--------------------------------
Class: MovieSceneObjectBindingID // 715da9ca00
	int SequenceID;//[Offset: 0x0, Size: 0x4] 0x715dac0200
	enum Space;//[Offset: 0x4, Size: 0x1] 0x715d89f740
	Guid Guid;//[Offset: 0x8, Size: 0x10] 0x715dac0300

--------------------------------
Class: MovieSceneEvaluationTemplate // 715da9e5c0
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50] 0x715da9fa00
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30] 0x715dac3580
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0] 0x715dac2280
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10] 0x715dac2300
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4] 0x715dac2400
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8] 0x715dac2700
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60] 0x715dac2780
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60] 0x715dac2800

--------------------------------
Class: MovieSceneTrackIdentifier // 715da9eb00
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x715dac2f00

--------------------------------
Class: MovieSceneEvaluationTrack // 715da9f940
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10] 0x715dac4e80
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2] 0x715dac4f00
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1] 0x715d89e980
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20] 0x715dac5100
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8] 0x715dac5180
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60] 0x715dac5200
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10] 0x715d89eb60
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38] 0x715dac3200
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8] 0x715dac3280
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x715dac3300
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x715dac3380
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x715dac3400

--------------------------------
Class: MovieSceneEvaluationTrackSegments // 715dad1840
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10] 0x715d89ea20
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10] 0x715d89eac0

--------------------------------
Class: MovieSceneSegment // 715dad1780

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object // 71a483bf00
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4] 0x715cf81b00
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x715cf81b80

--------------------------------
Class: MovieSceneTrackEvalOptions // 715dad04c0
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715dac8400
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715dac6380
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715dac6400
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715dac6480
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715dac6500

--------------------------------
Class: SectionEvaluationDataTree // 715da9f7c0

--------------------------------
Class: MovieSceneEvalTemplatePtr // 715da9f040

--------------------------------
Class: MovieSceneTrackImplementationPtr // 715da9f880

--------------------------------
Class: MovieSceneEvaluationField // 715da9eec0
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10] 0x715d89ed40
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10] 0x715d89ef20
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10] 0x715d89f100

--------------------------------
Class: MovieSceneFrameRange // 715da9e680

--------------------------------
Class: MovieSceneEvaluationGroup // 715da9ea40
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10] 0x715d89ede0
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10] 0x715d89ee80

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex // 715da9e740
	int LUTOffset;//[Offset: 0x0, Size: 0x4] 0x715dac2900
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4] 0x715dac2980
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4] 0x715dac2a00

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr // 715da9e8c0
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4] 0x715dac2b80

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr // 715da9e980
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x715dac2c00
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x715dac2c80

--------------------------------
Class: MovieSceneSequenceID // 715da916c0
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x715da82900

--------------------------------
Class: MovieSceneSegmentIdentifier // 715da9e800
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4] 0x715dac2b00

--------------------------------
Class: MovieSceneEvaluationMetaData // 715da9ee00
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10] 0x715d89efc0
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10] 0x715d89f060
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50] 0x715da9ed40

--------------------------------
Class: MovieSceneOrderedEvaluationKey // 715da9ec80
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc] 0x715dac3080
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2] 0x715dac3100
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2] 0x715dac3180

--------------------------------
Class: MovieSceneEvaluationKey // 715da9ebc0
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x715dac2e80
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x715dac2f80
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4] 0x715dac3000

--------------------------------
Class: MovieSceneSequenceHierarchy // 715da9e080
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50] 0x715da9ff40
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50] 0x715da9dfc0

--------------------------------
Class: MovieSceneSubSequenceData // 715da9fe80
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18] 0x715dac3600
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20] 0x715dac3680
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8] 0x715dac3700
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4] 0x715dac3780
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10] 0x715dac3800
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10] 0x715dac3880
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10] 0x715dac3900
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10] 0x715dac3980
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10] 0x715dac3a00
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4] 0x715dac3a80
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18] 0x715dac3b00
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10] 0x715dac3b80
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20] 0x715dac4000

--------------------------------
Class: SoftObjectPath // 717dfc7fc0
	FName AssetPathName;//[Offset: 0x0, Size: 0x8] 0x717df8be80
	FString SubPathString;//[Offset: 0x8, Size: 0x10] 0x717df8bf00

--------------------------------
Class: MovieSceneSequenceTransform // 715da9fdc0
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x715dac3c00
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10] 0x715d89ec00

--------------------------------
Class: MovieSceneTimeTransform // 715da9fb80
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x715dac3c80
	FrameTime Offset;//[Offset: 0x4, Size: 0x8] 0x715dac3d00

--------------------------------
Class: FrameTime // 717dfc82c0
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x717df8c300
	float SubFrame;//[Offset: 0x4, Size: 0x4] 0x717df8c380

--------------------------------
Class: FrameNumber // 717dfc8440
	int Value;//[Offset: 0x0, Size: 0x4] 0x717df8c500

--------------------------------
Class: MovieSceneNestedSequenceTransform // 715da9fd00
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x715dac3d80
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8] 0x715dac3f00

--------------------------------
Class: MovieSceneTimeWarping // 715da9fc40
	FrameNumber Start;//[Offset: 0x0, Size: 0x4] 0x715dac3e00
	FrameNumber End;//[Offset: 0x4, Size: 0x4] 0x715dac3e80

--------------------------------
Class: FrameRate // 717dfc8380
	int Numerator;//[Offset: 0x0, Size: 0x4] 0x717df8c400
	int Denominator;//[Offset: 0x4, Size: 0x4] 0x717df8c480

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr // 715da9fac0

--------------------------------
Class: MovieSceneSequenceHierarchyNode // 715da9df00
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4] 0x715dac4180
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10] 0x715d89eca0

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber // 715da9e140
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x715dac2380

--------------------------------
Class: MovieSceneTemplateGenerationLedger // 715da9e380
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4] 0x715dac2480
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50] 0x715da9e200
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50] 0x715da9e2c0

--------------------------------
Class: MovieSceneTrackFieldData // 715da9e440

--------------------------------
Class: MovieSceneSubSectionFieldData // 715da9e500

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object // 71a49a1280
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10] 0x715ca734e0
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10] 0x715ca73580
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10] 0x715ca73620
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50] 0x715cecf1c0
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10] 0x715ca736c0
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8] 0x715ca99100
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10] 0x715ca99180
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10] 0x715ca99200
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8] 0x715ca99280
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8] 0x715ca99300
	enum EvaluationType;//[Offset: 0x118, Size: 0x1] 0x715ca73760
	enum ClockSource;//[Offset: 0x119, Size: 0x1] 0x715ca73800
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18] 0x715ca99480
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10] 0x715ca738a0

--------------------------------
Class: MovieSceneSpawnable // 715dad0700
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30] 0x715dac6600
	FName[] Tags;//[Offset: 0x30, Size: 0x10] 0x715d89fba0
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x715dac6700
	Guid Guid;//[Offset: 0x44, Size: 0x10] 0x715dac6780
	FString Name;//[Offset: 0x58, Size: 0x10] 0x715dac6800
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8] 0x715dac6880
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10] 0x715d89fc40
	enum Ownership;//[Offset: 0x80, Size: 0x1] 0x715d89fce0
	FName LevelName;//[Offset: 0x84, Size: 0x8] 0x715dac6a00

--------------------------------
Class: MovieScenePossessable // 715dad0dc0
	FName[] Tags;//[Offset: 0x0, Size: 0x10] 0x715d89ff60
	Guid Guid;//[Offset: 0x10, Size: 0x10] 0x715dac5d80
	FString Name;//[Offset: 0x20, Size: 0x10] 0x715dac5e00
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8] 0x715d89e3e0
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10] 0x715dac5e80

--------------------------------
Class: MovieSceneBinding // 715da9f640
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10] 0x715dac1a00
	FString BindingName;//[Offset: 0x10, Size: 0x10] 0x715dac1a80
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10] 0x715d89f4c0

--------------------------------
Class: MovieSceneObjectBindingIDs // 715da9cac0
	MovieSceneObjectBindingID[] Ids;//[Offset: 0x0, Size: 0x10] 0x715d89f7e0

--------------------------------
Class: MovieSceneMarkedFrame // 715da9c640
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x715dac1c80
	FString Label;//[Offset: 0x8, Size: 0x10] 0x717df85600

--------------------------------
Class: WidgetAnimationBinding // 715dad9f40
	FName WidgetName;//[Offset: 0x0, Size: 0x8] 0x715daff180
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8] 0x715daff200
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10] 0x715daff280
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715daff300

--------------------------------
Class: Anchors // 714906c040
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8] 0x715d7ac380
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8] 0x715d7ac400

--------------------------------
Class: UMGSequencePlayer.Object // 71a49bce00
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8] 0x715cac0e80
	void SetUserTag(FName InUserTag);// 0x55dfea8 0x715cab1740
	FName GetUserTag();// 0x55dff4c 0x715cab1820

--------------------------------
Class: NamedSlotBinding // 714906be00
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715d7d0280
	Widget* Content;//[Offset: 0x8, Size: 0x8] 0x715d7d0300

--------------------------------
Class: SlateAccessibleWidgetData.Object // 71a49be200
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d786380
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1] 0x7148cd8800
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1] 0x7148cd8760
	FText AccessibleText;//[Offset: 0x30, Size: 0x18] 0x715d786500
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10] 0x715d786580
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18] 0x715d786600
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10] 0x715d786700

--------------------------------
Class: WidgetNavigation.Object // 71a49ba600
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24] 0x715cac5980
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24] 0x715cac5a00
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24] 0x715cac5a80
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24] 0x715cac5b00
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24] 0x715cac5b80
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24] 0x715cac5c00

--------------------------------
Class: WidgetNavigationData // 715dad9940
	enum Rule;//[Offset: 0x0, Size: 0x1] 0x715dae43e0
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8] 0x715dafff80
	Widget* Widget;//[Offset: 0xc, Size: 0x8] 0x715dafe780
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10] 0x715dafe800

--------------------------------
Class: PropertyBinding.Object // 71a49b2b80
	Object* SourceObject;//[Offset: 0x28, Size: 0x8] 0x715caa1f00
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28] 0x715caa1f80
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8] 0x715caa2000

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath // 715dada6c0

--------------------------------
Class: CachedPropertyPath // 715dada900
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10] 0x715dae4c00
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8] 0x715dafe400

--------------------------------
Class: PropertyPathSegment // 715dada840
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715dafe200
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x715dafe280
	Struct* Struct;//[Offset: 0x10, Size: 0x8] 0x715dafe300

--------------------------------
Class: WidgetTree.Object // 71a49bf880
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8] 0x715cac7300

--------------------------------
Class: SoundBase.Object // 71a49c0b00
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8] 0x715cacbc00
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x715cacbc80
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x715cacbd00
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x715cacbd80
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1] 0x715cacbe00
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1] 0x715cacbe80
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1] 0x715cacbf00
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1] 0x715ca770e0
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50] 0x715ca77180
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x1c] 0x715cacc080
	float Duration;//[Offset: 0xf4, Size: 0x4] 0x715cacc100
	float MaxDistance;//[Offset: 0xf8, Size: 0x4] 0x715cacc180
	float TotalSamples;//[Offset: 0xfc, Size: 0x4] 0x715cacc200
	float Priority;//[Offset: 0x100, Size: 0x4] 0x715cacc280
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8] 0x715cacc300
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10] 0x715cacc380
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8] 0x715cacc400
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10] 0x715ca77220
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8] 0x715cacc500
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10] 0x715ca772c0
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10] 0x715ca77360

--------------------------------
Class: SoundClass.Object // 71a4ad5600
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58] 0x715cc64d00
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10] 0x715cb2e8e0
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10] 0x715cb2e980
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10] 0x715cc64e80
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8] 0x715cc64f00

--------------------------------
Class: SoundClassProperties // 715ce755c0
	float Volume;//[Offset: 0x0, Size: 0x4] 0x715ce88300
	float Pitch;//[Offset: 0x4, Size: 0x4] 0x715ce88380
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4] 0x715ce88400
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4] 0x715ce86380
	float StereoBleed;//[Offset: 0x10, Size: 0x4] 0x715ce86400
	float LFEBleed;//[Offset: 0x14, Size: 0x4] 0x715ce86480
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4] 0x715ce86500
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4] 0x715ce86580
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4] 0x715ce86600
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x715ce86680
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x715ce86700
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1] 0x715ce86780
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1] 0x715ce86800
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1] 0x715ce86880
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1] 0x715ce86900
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1] 0x715ce86980
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4] 0x715ce86a00
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1] 0x715ce86a80
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1] 0x715daee7a0
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8] 0x715ce86b80

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object // 71a4ada600
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x715cc67980
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10] 0x715cb2fce0
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8] 0x715cc67a80
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4] 0x715cc67b00
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4] 0x715cc67b80
	float OutputVolume;//[Offset: 0x68, Size: 0x4] 0x715cc67c00
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10] 0x715cc67c80
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x630c258 0x715cc705c0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x630c110 0x715cc706a0
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x630c47c 0x715cc70780
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x630c1b4 0x715cc70860
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x630bf1c 0x715cc70940
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x630c004 0x715cc70a20

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object // 71a4ada880
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8] 0x715cc68380

--------------------------------
Class: SoundSubmixBase.Object // 71a4adab00
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10] 0x715cb2fe20

--------------------------------
Class: SoundWave.SoundBase.Object // 71a49c0d80
	int CompressionQuality;//[Offset: 0x160, Size: 0x4] 0x715cacd080
	int StreamingPriority;//[Offset: 0x164, Size: 0x4] 0x715cacd100
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1] 0x715ca76d20
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1] 0x715cacd200
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1] 0x715cacd280
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1] 0x715cacd300
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1] 0x715cacd380
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1] 0x715ca76dc0
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1] 0x715cacd480
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1] 0x715cacd500
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1] 0x715cacd580
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1] 0x715cacd600
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10] 0x715ca76e60
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10] 0x715ca76f00
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10] 0x715ca76fa0
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4] 0x715cacb700
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10] 0x715cacb780
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4] 0x715cacb800
	float Volume;//[Offset: 0x1fc, Size: 0x4] 0x715cacb880
	float Pitch;//[Offset: 0x200, Size: 0x4] 0x715cacb900
	int NumChannels;//[Offset: 0x204, Size: 0x4] 0x715cacb980
	int SampleRate;//[Offset: 0x208, Size: 0x4] 0x715cacba00
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10] 0x715ca77040
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8] 0x715cacbb00
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8] 0x715cacbb80

--------------------------------
Class: SoundWaveSpectralTimeData // 715ce74c00
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10] 0x715daee5c0
	float TimeSec;//[Offset: 0x10, Size: 0x4] 0x715ce88480

--------------------------------
Class: SoundWaveSpectralDataEntry // 715ce74b40
	float Magnitude;//[Offset: 0x0, Size: 0x4] 0x715ce8a400
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4] 0x715ce8a480

--------------------------------
Class: SoundWaveEnvelopeTimeData // 715ce74cc0
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x715ce88500
	float TimeSec;//[Offset: 0x4, Size: 0x4] 0x715ce88580

--------------------------------
Class: SubtitleCue // 7149066c40
	FText Text;//[Offset: 0x0, Size: 0x18] 0x7148ca6700
	float Time;//[Offset: 0x18, Size: 0x4] 0x7148ca6780

--------------------------------
Class: CurveTable.Object // 71a4a12900

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object // 71a49c1f00

--------------------------------
Class: SoundEffectPreset.Object // 71a49c1c80

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object // 71a4886000

--------------------------------
Class: PassiveSoundMixModifier // 715ce75680
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8] 0x715ce86c00
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4] 0x715ce86c80
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4] 0x715ce86d00

--------------------------------
Class: SoundMix.Object // 71a4adec00
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715cc66300
	float EQPriority;//[Offset: 0x2c, Size: 0x4] 0x715cc64280
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40] 0x715cc64300
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10] 0x715cb2e700
	float InitialDelay;//[Offset: 0x80, Size: 0x4] 0x715cc64400
	float FadeInTime;//[Offset: 0x84, Size: 0x4] 0x715cc64480
	float Duration;//[Offset: 0x88, Size: 0x4] 0x715cc64500
	float FadeoutTime;//[Offset: 0x8c, Size: 0x4] 0x715cc64580

--------------------------------
Class: AudioEQEffect.AudioEffectParameters // 715ce75080
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4] 0x715ce89400
	float Gain0;//[Offset: 0x14, Size: 0x4] 0x715ce89480
	float Bandwidth0;//[Offset: 0x18, Size: 0x4] 0x715ce87400
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4] 0x715ce87480
	float Gain1;//[Offset: 0x20, Size: 0x4] 0x715ce87500
	float Bandwidth1;//[Offset: 0x24, Size: 0x4] 0x715ce87580
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4] 0x715ce87600
	float Gain2;//[Offset: 0x2c, Size: 0x4] 0x715ce87680
	float Bandwidth2;//[Offset: 0x30, Size: 0x4] 0x715ce87700
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4] 0x715ce87780
	float Gain3;//[Offset: 0x38, Size: 0x4] 0x715ce87800
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4] 0x715ce87880

--------------------------------
Class: AudioEffectParameters // 715db14180

--------------------------------
Class: SoundClassAdjuster // 715ce75140
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8] 0x715ce87900
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4] 0x715ce87980
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4] 0x715ce87a00
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4] 0x715ce87a80
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x715ce87b00
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4] 0x715ce87b80

--------------------------------
Class: SoundModulation // 715dadc340
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10] 0x715dae42a0

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object // 71a49c3300

--------------------------------
Class: SoundConcurrency.Object // 71a4ad5380
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c] 0x715cc64c80

--------------------------------
Class: SoundConcurrencySettings // 715ce75440
	int MaxCount;//[Offset: 0x0, Size: 0x4] 0x715ce87f00
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x715ce87f80
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1] 0x715ce88000
	float VolumeScale;//[Offset: 0x8, Size: 0x4] 0x715ce88080
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4] 0x715ce88100
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x715ce88180
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4] 0x715ce88200
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4] 0x715ce88280

--------------------------------
Class: SoundAttenuation.Object // 71a4ad5880
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0] 0x715cc64f80

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings // 715ce758c0
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715ce86d80
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x715ce86e00
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x715ce86e80
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x715ce86f00
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x715ce86f80
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x715ce87000
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1] 0x715ce87080
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1] 0x715ce87100
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x715ce87180
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x715ce87200
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x715ce87280
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x715ce87300
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1] 0x715ce87380
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4] 0x715ce85300
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1] 0x715daee840
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1] 0x715ce85400
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1] 0x715daee8e0
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1] 0x715daee980
	float OmniRadius;//[Offset: 0xbc, Size: 0x4] 0x715ce85580
	float StereoSpread;//[Offset: 0xc0, Size: 0x4] 0x715ce85600
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4] 0x715ce85680
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4] 0x715ce85700
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88] 0x715ce85780
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88] 0x715ce85800
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4] 0x715ce85880
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4] 0x715ce85900
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4] 0x715ce85980
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4] 0x715ce85a00
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4] 0x715ce85a80
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4] 0x715ce85b00
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4] 0x715ce85b80
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4] 0x715ce85c00
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4] 0x715ce85c80
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4] 0x715ce85d00
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4] 0x715ce85d80
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4] 0x715ce85e00
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4] 0x715ce85e80
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4] 0x715ce85f00
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4] 0x715ce85f80
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4] 0x715ce86000
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4] 0x715ce86080
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4] 0x715ce86100
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4] 0x715ce86180
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4] 0x715ce86200
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4] 0x715ce86280
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4] 0x715ce86300
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88] 0x715ce84280
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10] 0x715daeeac0
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4] 0x715ce84780
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4] 0x715ce84800
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4] 0x715ce84880
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4] 0x715ce84900
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4] 0x715ce84980
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88] 0x715ce84a00
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30] 0x715ce84c00

--------------------------------
Class: BaseAttenuationSettings // 715db14300
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1] 0x715daea380
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1] 0x715db24900
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4] 0x715db24980
	enum FalloffMode;//[Offset: 0x10, Size: 0x1] 0x715daea420
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc] 0x715db24a80
	float ConeOffset;//[Offset: 0x20, Size: 0x4] 0x715db24b00
	float FalloffDistance;//[Offset: 0x24, Size: 0x4] 0x715db24b80
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88] 0x715db24c00

--------------------------------
Class: RuntimeFloatCurve // 715da382c0
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80] 0x715da52880
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8] 0x715da52900

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve // 715da37fc0
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x715d896b40

--------------------------------
Class: RealCurve.IndexedCurve // 715da38080
	float DefaultValue;//[Offset: 0x68, Size: 0x4] 0x715da52680
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1] 0x715da52700
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1] 0x715da52780

--------------------------------
Class: IndexedCurve // 715da38200
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60] 0x715da52800

--------------------------------
Class: RichCurveKey // 715da37f00
	byte InterpMode;//[Offset: 0x0, Size: 0x1] 0x715da52180
	byte TangentMode;//[Offset: 0x1, Size: 0x1] 0x715da52200
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1] 0x715da52280
	float Time;//[Offset: 0x4, Size: 0x4] 0x715da52300
	float Value;//[Offset: 0x8, Size: 0x4] 0x715da52380
	float ArriveTangent;//[Offset: 0xc, Size: 0x4] 0x715da52400
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x715da52480
	float LeaveTangent;//[Offset: 0x14, Size: 0x4] 0x715da52500
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4] 0x715da52580

--------------------------------
Class: KeyHandleMap // 715da38140

--------------------------------
Class: CurveFloat.CurveBase.Object // 71a4a10b00
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80] 0x715cb36300
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715cb34280
	float GetFloatValue(float InTime);// 0x614b248 0x715cb15f00

--------------------------------
Class: CurveBase.Object // 71a4a11000
	void GetValueRange(out float MinValue, out float MaxValue);// 0x614ab30 0x715cb15fe0
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x614ac34 0x715cb160c0

--------------------------------
Class: AttenuationSubmixSendSettings // 715ce75740
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8] 0x715ce84300
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1] 0x715daeea20
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4] 0x715ce84400
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4] 0x715ce84480
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4] 0x715ce84500
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4] 0x715ce84580
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4] 0x715ce84600
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88] 0x715ce84680

--------------------------------
Class: SoundAttenuationPluginSettings // 715ce75800
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10] 0x715daeeb60
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10] 0x715daeec00
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10] 0x715daeeca0

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object // 71a49c3800

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object // 71a49c3580

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object // 71a49c3080

--------------------------------
Class: SoundSubmixSendInfo // 715ce74d80
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x715daee660
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8] 0x715ce88680
	float SendLevel;//[Offset: 0x10, Size: 0x4] 0x715ce88700
	float MinSendLevel;//[Offset: 0x14, Size: 0x4] 0x715ce88780
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4] 0x715ce88800
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4] 0x715ce88880
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4] 0x715ce88900
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88] 0x715ce88980

--------------------------------
Class: SoundEffectSourcePresetChain.Object // 71a4adf100
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10] 0x715cb2e840
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cc64700

--------------------------------
Class: SourceEffectChainEntry // 715ce752c0
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8] 0x715ce87e00
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715ce87e80

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object // 71a4adf380

--------------------------------
Class: SoundSourceBusSendInfo // 715ce74e40
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x715daee700
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8] 0x715ce88a80
	float SendLevel;//[Offset: 0x10, Size: 0x4] 0x715ce88b00
	float MinSendLevel;//[Offset: 0x14, Size: 0x4] 0x715ce88b80
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4] 0x715ce88c00
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4] 0x715ce88c80
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4] 0x715ce88d00
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88] 0x715ce88d80

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object // 71a4adad80
	enum SourceBusChannels;//[Offset: 0x304, Size: 0x1] 0x715cb2fec0
	float SourceBusDuration;//[Offset: 0x308, Size: 0x4] 0x715cc66400
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1] 0x715cc66480

--------------------------------
Class: FocusEvent // 714906c100

--------------------------------
Class: KeyEvent.InputEvent // 7149069dc0

--------------------------------
Class: PaintContext // 7149069f40

--------------------------------
Class: MotionEvent.InputEvent // 714906bf80

--------------------------------
Class: CharacterEvent.InputEvent // 7149069e80

--------------------------------
Class: DragDropOperation.Object // 71a48e9c00
	FString Tag;//[Offset: 0x28, Size: 0x10] 0x715d107b00
	Object* Payload;//[Offset: 0x38, Size: 0x8] 0x715d107b80
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8] 0x715d107c00
	enum Pivot;//[Offset: 0x48, Size: 0x1] 0x715d0b4ca0
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8] 0x715d107d00
	delegate OnDrop;//[Offset: 0x58, Size: 0x10] 0x715d107d80
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10] 0x715d107e00
	delegate OnDragged;//[Offset: 0x78, Size: 0x10] 0x715d107e80
	void Drop(out const PointerEvent PointerEvent);// 0x55b9be4 0x715d111e40
	void Dragged(out const PointerEvent PointerEvent);// 0x55b991c 0x715d111f20
	void DragCancelled(out const PointerEvent PointerEvent);// 0x55b9a80 0x715d112000

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent // 7149069c40

--------------------------------
Class: InputComponent.ActorComponent.Object // 71a4a22180
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10] 0x715cb24980
	bool WasControllerKeyJustReleased(Key Key);// 0x61a0890 0x715cb6a0a0
	bool WasControllerKeyJustPressed(Key Key);// 0x61a0a1c 0x715cb6a180
	bool IsControllerKeyDown(Key Key);// 0x61a0ba8 0x715cb6a260
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x61a03d8 0x715cb6a340
	Vector GetControllerVectorKeyState(Key Key);// 0x61a057c 0x715cb6a420
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x61a014c 0x715cb6a500
	float GetControllerKeyTimeDown(Key Key);// 0x61a0250 0x715cb6a5e0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x61a0000 0x715cb6a6c0
	float GetControllerAnalogKeyState(Key Key);// 0x61a0708 0x715cb6a7a0

--------------------------------
Class: CachedKeyToActionInfo // 715db1b080
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8] 0x715db47c80

--------------------------------
Class: PlayerInput.Object // 71a4ad4e80
	KeyBind[] DebugExecBindings;//[Offset: 0x198, Size: 0x10] 0x715cb2be60
	FName[] InvertedAxis;//[Offset: 0x1d8, Size: 0x10] 0x715cb2bf00
	void SetMouseSensitivity(const float Sensitivity);// 0x62b75a4 0x715cc33b20
	void SetBind(FName BindName, FString Command);// 0x62b74b0 0x715cc33c00
	void InvertAxisKey(const Key AxisKey);// 0x62b7330 0x715cc33ce0
	void InvertAxis(const FName AxisName);// 0x62b728c 0x715cc33dc0
	void ClearSmoothing();// 0x62b7278 0x715cc33ea0

--------------------------------
Class: KeyBind // 715ce72a40
	Key Key;//[Offset: 0x0, Size: 0x18] 0x715ce6b900
	FString Command;//[Offset: 0x18, Size: 0x10] 0x715ce6b980
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715ce6ba00
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x715ce6ba80
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x715ce6bb00
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x715ce6bb80
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x715ce6bc00
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x715ce6bc80
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x715ce6bd00
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x715ce6bd80
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x715ce6be00

--------------------------------
Class: AnimationEventBinding // 714906bec0
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8] 0x715d7d0900
	delegate Delegate;//[Offset: 0x8, Size: 0x10] 0x715d7d0980
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1] 0x7148cd9160
	FName UserTag;//[Offset: 0x1c, Size: 0x8] 0x715d7d0a80

--------------------------------
Class: LocalPlayer.Player.Object // 71a4a82680
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8] 0x715cc09400
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1] 0x715cc09480
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8] 0x715cb27d60
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x715cc07400
	int ControllerId;//[Offset: 0xb8, Size: 0x4] 0x715cc07480

--------------------------------
Class: Player.Object // 71a4831280
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8] 0x715cf57080
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4] 0x715cf57100
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4] 0x715cf57180
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4] 0x715cf57200

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object // 71a4a11f00
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8] 0x715cb7a980
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10] 0x715cb24fc0
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4] 0x715cb7aa80
	World* World;//[Offset: 0x70, Size: 0x8] 0x715cb7ab00
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8] 0x715cb7ab80
	void SSSwapControllers();// 0x61955f4 0x715cb67b00
	void ShowTitleSafeArea();// 0x61955d8 0x715cb67be0
	void SetConsoleTarget(int PlayerIndex);// 0x619552c 0x715cb67cc0

--------------------------------
Class: ScriptViewportClient.Object // 71a4a11c80

--------------------------------
Class: Console.Object // 71a4a12180
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8] 0x715cb33600
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8] 0x715cb33680
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8] 0x715cb33700
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10] 0x715cb227c0

--------------------------------
Class: DebugDisplayProperty // 715db18ec0
	Object* Obj;//[Offset: 0x0, Size: 0x8] 0x715db3a680
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8] 0x715dae90c0

--------------------------------
Class: World.Object // 71a484d080
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8] 0x715cc96d80
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8] 0x715cc96e00
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8] 0x715cc96e80
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8] 0x715cc96f00
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8] 0x715cc96f80
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8] 0x715cc97000
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8] 0x715cc97080
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10] 0x715cc80100
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10] 0x715cc801a0
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10] 0x715cc80240
	LevelStreaming*[] StreamingLevels;//[Offset: 0x98, Size: 0x10] 0x715cc802e0
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0xa8, Size: 0x28] 0x715cc97300
	FString StreamingLevelsPrefix;//[Offset: 0xd0, Size: 0x10] 0x715cc97380
	Level* CurrentLevelPendingVisibility;//[Offset: 0xe0, Size: 0x8] 0x715cc95300
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xe8, Size: 0x8] 0x715cc95380
	DemoNetDriver* DemoNetDriver;//[Offset: 0xf0, Size: 0x8] 0x715cc95400
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xf8, Size: 0x8] 0x715cc95480
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x100, Size: 0x8] 0x715cc95500
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11e, Size: 0x1] 0x715cc95580
	NavigationSystemBase* NavigationSystem;//[Offset: 0x120, Size: 0x8] 0x715cc95600
	GameModeBase* AuthorityGameMode;//[Offset: 0x128, Size: 0x8] 0x715cc95680
	GameStateBase* GameState;//[Offset: 0x130, Size: 0x8] 0x715cc95700
	AISystemBase* AISystem;//[Offset: 0x138, Size: 0x8] 0x715cc95780
	AvoidanceManager* AvoidanceManager;//[Offset: 0x140, Size: 0x8] 0x715cc95800
	Level*[] Levels;//[Offset: 0x148, Size: 0x10] 0x715cc80380
	LevelCollection[] LevelCollections;//[Offset: 0x158, Size: 0x10] 0x715cc80420
	GameInstance* OwningGameInstance;//[Offset: 0x188, Size: 0x8] 0x715cc95980
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x190, Size: 0x10] 0x715cc804c0
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a0, Size: 0x8] 0x715cc95a80
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a8, Size: 0x8] 0x715cc95b00
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x200, Size: 0x10] 0x715cc80560
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x210, Size: 0x10] 0x715cc80600
	WorldComposition* WorldComposition;//[Offset: 0x560, Size: 0x8] 0x715cc95c80
	WorldPSCPool PSCPool;//[Offset: 0x5f0, Size: 0x58] 0x715cc95d00
	WorldSettings* K2_GetWorldSettings();// 0x63414a8 0x715cc7a7a0
	void HandleTimelineScrubbed();// 0x63414dc 0x715cc7a880

--------------------------------
Class: Level.Object // 71a4a2fb00
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8] 0x715cc05c00
	Model* Model;//[Offset: 0xc0, Size: 0x8] 0x715cc05c80
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10] 0x715cb283a0
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8] 0x715cc05d80
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4] 0x715cc05e00
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4] 0x715cc05e80
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8] 0x715cc05f00
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8] 0x715cc05f80
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8] 0x715cc06000
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10] 0x715cb28440
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4] 0x715cc06100
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4] 0x715cc06180
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10] 0x715cb284e0
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10] 0x715cb28580
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10] 0x715cc06300
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8] 0x715cc04280
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc] 0x715cc04300
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1] 0x715cc04380
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1] 0x715cc04400
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1] 0x715cc04480
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1] 0x715cc04500
	WorldSettings* WorldSettings;//[Offset: 0x240, Size: 0x8] 0x715cc04580
	AssetUserData*[] AssetUserData;//[Offset: 0x250, Size: 0x10] 0x715cb28620
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x270, Size: 0x10] 0x715cb286c0

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4aa0d80
	BodySetup* ModelBodySetup;//[Offset: 0x430, Size: 0x8] 0x715cc1bd00

--------------------------------
Class: LevelActorContainer.Object // 71a4a2f880
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10] 0x715cb28300

--------------------------------
Class: LevelScriptActor.Actor.Object // 71a4a84e80
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x715cc05580
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x45c6aa0 0x715cbeaea0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x622b4bc 0x715cbeaf80
	bool RemoteEvent(FName EventName);// 0x622b6c0 0x715cbeb060
	void LevelReset();// 0x45c6aa0 0x715cbeb140

--------------------------------
Class: IntVector // 717dfc6340
	int X;//[Offset: 0x0, Size: 0x4] 0x717df88b80
	int Y;//[Offset: 0x4, Size: 0x4] 0x717df88c00
	int Z;//[Offset: 0x8, Size: 0x4] 0x717df88c80

--------------------------------
Class: NavigationObjectBase.Actor.Object // 71a4aaa100
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 0x8] 0x715cc1b980
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 0x8] 0x715cc1ba00
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 0x8] 0x715cc1ba80
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x715cc1bb00

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a498a380
	float CapsuleHalfHeight;//[Offset: 0x430, Size: 0x4] 0x715d8ae380
	float CapsuleRadius;//[Offset: 0x434, Size: 0x4] 0x715d8ae400
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x6134938 0x715d88aea0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x6134844 0x715d88af80
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x6134750 0x715d88b060
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x61341e4 0x715d88b140
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x61342f4 0x715d88b220
	float GetUnscaledCapsuleRadius();// 0x613443c 0x715d88b300
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x61343fc 0x715d88b3e0
	float GetUnscaledCapsuleHalfHeight();// 0x6134420 0x715d88b4c0
	float GetShapeScale();// 0x61341a4 0x715d88b5a0
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x6134458 0x715d88b680
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x6134598 0x715d88b760
	float GetScaledCapsuleRadius();// 0x6134720 0x715d88b840
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x61346bc 0x715d88b920
	float GetScaledCapsuleHalfHeight();// 0x61346fc 0x715d88ba00

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a496ee80
	BodySetup* ShapeBodySetup;//[Offset: 0x418, Size: 0x8] 0x715d8ace80
	class NavAreaBase* AreaClass;//[Offset: 0x420, Size: 0x8] 0x715d8906a0
	Color ShapeColor;//[Offset: 0x428, Size: 0x4] 0x715d8acf00
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42c, Size: 0x1] 0x715d8acf80
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x42c, Size: 0x1] 0x715d8ad000
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x42c, Size: 0x1] 0x715d8ad080

--------------------------------
Class: NavAreaBase.Object // 71a4906c80

--------------------------------
Class: Color // 717dfc94c0
	byte B;//[Offset: 0x0, Size: 0x1] 0x717df88980
	byte G;//[Offset: 0x1, Size: 0x1] 0x717df88a00
	byte R;//[Offset: 0x2, Size: 0x1] 0x717df88a80
	byte A;//[Offset: 0x3, Size: 0x1] 0x717df88b00

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a49de980
	Texture2D* Sprite;//[Offset: 0x418, Size: 0x8] 0x715cb03500
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x420, Size: 0x1] 0x715cb03580
	float ScreenSize;//[Offset: 0x424, Size: 0x4] 0x715cb03600
	float U;//[Offset: 0x428, Size: 0x4] 0x715cb03680
	float UL;//[Offset: 0x42c, Size: 0x4] 0x715cb03700
	float V;//[Offset: 0x430, Size: 0x4] 0x715cb03780
	float VL;//[Offset: 0x434, Size: 0x4] 0x715cb03800
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x610e044 0x715caebd80
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x610de90 0x715caebe60
	void SetSprite(Texture2D* NewSprite);// 0x610e1b4 0x715caebf40

--------------------------------
Class: NavigationDataChunk.Object // 71a4aa0100
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8] 0x715cc1bb80

--------------------------------
Class: MapBuildDataRegistry.Object // 71a4a81f00
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1] 0x715cc08e00
	FString LightmassTime;//[Offset: 0x30, Size: 0x10] 0x715cc08e80
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x40, Size: 0x4c] 0x715cc08f00

--------------------------------
Class: LightmassWorldInfoSettings // 715ce7a9c0
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 0x4] 0x715cea2b80
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 0x4] 0x715cea2c00
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 0x4] 0x715cea2c80
	float IndirectLightingQuality;//[Offset: 0xc, Size: 0x4] 0x715cea2d00
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 0x4] 0x715cea2d80
	Color EnvironmentColor;//[Offset: 0x14, Size: 0x4] 0x715cea2e00
	float EnvironmentIntensity;//[Offset: 0x18, Size: 0x4] 0x715cea2e80
	float EmissiveBoost;//[Offset: 0x1c, Size: 0x4] 0x715cea2f00
	float DiffuseBoost;//[Offset: 0x20, Size: 0x4] 0x715cea2f80
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 0x1] 0x715cea3000
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25, Size: 0x1] 0x715cea3080
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25, Size: 0x1] 0x715cea3100
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25, Size: 0x1] 0x715cea3180
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25, Size: 0x1] 0x715cea1100
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25, Size: 0x1] 0x715cea1180
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 0x4] 0x715cea1200
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 0x4] 0x715cea1280
	float VolumetricLightmapSphericalHarmonicSmoothing;//[Offset: 0x30, Size: 0x4] 0x715cea1300
	float VolumeLightSamplePlacementScale;//[Offset: 0x34, Size: 0x4] 0x715cea1380
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 0x4] 0x715cea1400
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 0x4] 0x715cea1480
	float OcclusionExponent;//[Offset: 0x40, Size: 0x4] 0x715cea1500
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 0x4] 0x715cea1580
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 0x4] 0x715cea1600

--------------------------------
Class: WorldSettings.Info.Actor.Object // 71a4aef600
	int VisibilityCellSize;//[Offset: 0x228, Size: 0x4] 0x715cc99480
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 0x1] 0x715cc97400
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 0x1] 0x715cc97480
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 0x1] 0x715cc97500
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 0x1] 0x715cc97580
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 0x1] 0x715cc97600
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 0x1] 0x715cc97680
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 0x1] 0x715cc97700
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 0x1] 0x715cc97780
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 0x1] 0x715cc97800
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 0x1] 0x715cc97880
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 0x1] 0x715cc97900
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 0x1] 0x715cc97980
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 0x1] 0x715cc97a00
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 0x1] 0x715cc97a80
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 0x1] 0x715cc97b00
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 0x1] 0x715cc97b80
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 0x8] 0x715cc97c00
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 0x8] 0x715cc97c80
	float WorldToMeters;//[Offset: 0x240, Size: 0x4] 0x715cc97d00
	float KillZ;//[Offset: 0x244, Size: 0x4] 0x715cc97d80
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 0x8] 0x715cc822c0
	float WorldGravityZ;//[Offset: 0x250, Size: 0x4] 0x715cc97e00
	float GlobalGravityZ;//[Offset: 0x254, Size: 0x4] 0x715cc97e80
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 0x8] 0x715cc82360
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 0x8] 0x715cc82400
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 0x8] 0x715cc824a0
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 0x8] 0x715cc82540
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 0x4] 0x715cc97f00
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 0xc] 0x715cc97f80
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 0x4] 0x715cc98000
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 0x4] 0x715cc98080
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 0x4] 0x715cc98100
	ClusteredDecalWorldSettings ClusteredDecalSettings;//[Offset: 0x298, Size: 0x10] 0x715cc98180
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2a8, Size: 0x20] 0x715cc98200
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2c8, Size: 0x24] 0x715cc98280
	float MonoCullingDistance;//[Offset: 0x2ec, Size: 0x4] 0x715cc98300
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2f0, Size: 0x8] 0x715cc98380
	float TimeDilation;//[Offset: 0x2f8, Size: 0x4] 0x715cc98400
	float MatineeTimeDilation;//[Offset: 0x2fc, Size: 0x4] 0x715cc96380
	float DemoPlayTimeDilation;//[Offset: 0x300, Size: 0x4] 0x715cc96400
	float MinGlobalTimeDilation;//[Offset: 0x304, Size: 0x4] 0x715cc96480
	float MaxGlobalTimeDilation;//[Offset: 0x308, Size: 0x4] 0x715cc96500
	float MinUndilatedFrameTime;//[Offset: 0x30c, Size: 0x4] 0x715cc96580
	float MaxUndilatedFrameTime;//[Offset: 0x310, Size: 0x4] 0x715cc96600
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x314, Size: 0x40] 0x715cc96680
	PlayerState* Pauser;//[Offset: 0x358, Size: 0x8] 0x715cc96700
	NetViewer[] ReplicationViewers;//[Offset: 0x360, Size: 0x10] 0x715cc825e0
	AssetUserData*[] AssetUserData;//[Offset: 0x370, Size: 0x10] 0x715cc82680
	PlayerState* PauserPlayerState;//[Offset: 0x380, Size: 0x8] 0x715cc96880
	int MaxNumberOfBookmarks;//[Offset: 0x388, Size: 0x4] 0x715cc96900
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x390, Size: 0x8] 0x715cc82720
	BookmarkBase*[] BookmarkArray;//[Offset: 0x398, Size: 0x10] 0x715cc827c0
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x3a8, Size: 0x8] 0x715cc82860
	void OnRep_WorldGravityZ();// 0x63425f8 0x715cc7a6c0

--------------------------------
Class: Info.Actor.Object // 71a488d300

--------------------------------
Class: NavigationSystemConfig.Object // 71a4aa9c00
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18] 0x715cc1b780
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4] 0x715cc1b800
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8] 0x715cc1b880
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x715cc1b900

--------------------------------
Class: SoftClassPath.SoftObjectPath // 717dfc7f00

--------------------------------
Class: NavAgentSelector // 715db1f940
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715ce65280
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715ce63200
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715ce63280
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715ce63300
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715ce63380
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715ce63400
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715ce63480
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x715ce63500
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x715ce63580
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x715ce63600
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x715ce63680
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x715ce63700
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x715ce63780
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x715ce63800
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x715ce63880
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x715ce63900

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object // 71a4a18d00

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object // 71a494a880
	float TerminalVelocity;//[Offset: 0x258, Size: 0x4] 0x715d206380
	int Priority;//[Offset: 0x25c, Size: 0x4] 0x715d206400
	float FluidFriction;//[Offset: 0x260, Size: 0x4] 0x715d206480
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x715d206500
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x715d206580

--------------------------------
Class: Volume.Brush.Actor.Object // 71a4843a80

--------------------------------
Class: Brush.Actor.Object // 71a4843800
	byte BrushType;//[Offset: 0x220, Size: 0x1] 0x715cf84280
	Color BrushColor;//[Offset: 0x224, Size: 0x4] 0x715cf84300
	int PolyFlags;//[Offset: 0x228, Size: 0x4] 0x715cf84380
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1] 0x715cf84400
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 0x1] 0x715cf84480
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 0x1] 0x715cf84500
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 0x1] 0x715cf84580
	Model* Brush;//[Offset: 0x230, Size: 0x8] 0x715cf84600
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 0x8] 0x715cf84680
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x715cf84700
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 0x10] 0x715ce9e660

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a49db280
	Model* Brush;//[Offset: 0x418, Size: 0x8] 0x715cb0b600
	BodySetup* BrushBodySetup;//[Offset: 0x420, Size: 0x8] 0x715cb0b680

--------------------------------
Class: GeomSelection // 715db14e40
	int Type;//[Offset: 0x0, Size: 0x4] 0x715db28780
	int Index;//[Offset: 0x4, Size: 0x4] 0x715db28800
	int SelectionIndex;//[Offset: 0x8, Size: 0x4] 0x715db28880

--------------------------------
Class: PhysicsCollisionHandler.Object // 71a4acc680
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4] 0x715cc43f80
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4] 0x715cc44000
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8] 0x715cc44080
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4] 0x715cc44100

--------------------------------
Class: GameModeBase.Info.Actor.Object // 71a488d580
	FString OptionsString;//[Offset: 0x220, Size: 0x10] 0x715d05cb80
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 0x8] 0x715cf9d580
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 0x8] 0x715cf9d620
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 0x8] 0x715cf9d6c0
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 0x8] 0x715cf9d760
	class HUD* HUDClass;//[Offset: 0x250, Size: 0x8] 0x715cf9d800
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 0x8] 0x715cf9d8a0
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 0x8] 0x715cf9d940
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 0x8] 0x715cf9d9e0
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 0x8] 0x715cf9da80
	GameSession* GameSession;//[Offset: 0x278, Size: 0x8] 0x715d05cc00
	GameStateBase* GameState;//[Offset: 0x280, Size: 0x8] 0x715d05cc80
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 0x8] 0x715d05cd00
	FText DefaultPlayerName;//[Offset: 0x290, Size: 0x18] 0x715d05cd80
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x715d05ce00
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x715d05ce80
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x715d05cf00
	void StartPlay();// 0x6180bf8 0x715d060780
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x618000c 0x715d060860
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x617fee4 0x715d060940
	bool ShouldReset(Actor* ActorToReset);// 0x6180b00 0x715d060a20
	void ReturnToMainMenuHost();// 0x6180ac8 0x715d060b00
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x6180100 0x715d060be0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x6180220 0x715d060cc0
	void RestartPlayer(Controller* NewPlayer);// 0x618030c 0x715d060da0
	void ResetLevel();// 0x6180ae4 0x715d060e80
	bool PlayerCanRestart(PlayerController* Player);// 0x61803b8 0x715d060f60
	bool MustSpectate(PlayerController* NewPlayerController);// 0x6180964 0x715d061040
	void K2_PostLogin(PlayerController* NewPlayer);// 0x45c6aa0 0x715d061120
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x45c6aa0 0x715d061200
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x45c6aa0 0x715d0612e0
	void K2_OnLogout(Controller* ExitingController);// 0x45c6aa0 0x715d0613c0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x45c6aa0 0x715d0614a0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x6180470 0x715d061580
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x617fdf8 0x715d061660
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x617fd4c 0x715d061740
	bool HasMatchStarted();// 0x6180bb8 0x715d061820
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x6180a1c 0x715d061900
	int GetNumSpectators();// 0x6180c14 0x715d0619e0
	int GetNumPlayers();// 0x6180c50 0x715d061ac0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x6180c8c 0x715d061ba0
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x618056c 0x715d061c80
	Actor* ChoosePlayerStart(Controller* Player);// 0x6180670 0x715d02e780
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x6180724 0x715d02e860
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x618086c 0x715d02e940

--------------------------------
Class: GameSession.Info.Actor.Object // 71a4a24e80
	int MaxSpectators;//[Offset: 0x220, Size: 0x4] 0x715cb77b80
	int MaxPlayers;//[Offset: 0x224, Size: 0x4] 0x715cb77c00
	int MaxPartySize;//[Offset: 0x228, Size: 0x4] 0x715cb77c80
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 0x1] 0x715cb77d00
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1] 0x715cb77d80
	FName SessionName;//[Offset: 0x230, Size: 0x8] 0x715cb77e00

--------------------------------
Class: GameStateBase.Info.Actor.Object // 71a48a1000
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 0x8] 0x715cf9f920
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 0x8] 0x715d0a4700
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 0x8] 0x715cf9f9c0
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 0x10] 0x715cf9fa60
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x715d0a4800
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 0x4] 0x715d0a4880
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 0x4] 0x715d0a4900
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 0x4] 0x715d0a4980
	void OnRep_SpectatorClass();// 0x61916d0 0x715d06dd00
	void OnRep_ReplicatedWorldTimeSeconds();// 0x6191698 0x715d06dde0
	void OnRep_ReplicatedHasBegunPlay();// 0x61916b4 0x715d06dec0
	void OnRep_GameModeClass();// 0x61916ec 0x715d06dfa0
	bool HasMatchStarted();// 0x6191870 0x715d06e080
	bool HasBegunPlay();// 0x61918b0 0x715d06e160
	float GetServerWorldTimeSeconds();// 0x61918f0 0x715d06e240
	float GetPlayerStartTime(Controller* Controller);// 0x61917bc 0x715d06e320
	float GetPlayerRespawnDelay(Controller* Controller);// 0x6191708 0x715d06e400

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object // 71a490a100

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object // 719b176a00
	float BaseTurnRate;//[Offset: 0x27c, Size: 0x4] 0x715cee6b00
	float BaseLookUpRate;//[Offset: 0x280, Size: 0x4] 0x715cee6b80
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 0x8] 0x715cee6c00
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 0x8] 0x715cee6c80
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 0x8] 0x715cee6d00
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1] 0x715cee6d80
	void TurnAtRate(float Rate);// 0x61547e8 0x715ced13c0
	void MoveUp_World(float Val);// 0x6154894 0x715ced14a0
	void MoveRight(float Val);// 0x6154940 0x715ced1580
	void MoveForward(float Val);// 0x61549ec 0x715ced1660
	void LookUpAtRate(float Rate);// 0x615473c 0x715ced1740

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object // 71a48fbc80
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8] 0x715d155400
	Vector K2_GetInputVector();// 0x6297bf8 0x715d13d1a0
	bool IsMoveInputIgnored();// 0x6297c64 0x715d13d280
	Vector GetPendingInputVector();// 0x6297d1c 0x715d13d360
	Pawn* GetPawnOwner();// 0x6297c30 0x715d13d440
	Vector GetLastInputVector();// 0x6297ce4 0x715d13d520
	Vector ConsumeInputVector();// 0x6297ca4 0x715d13d600
	void AddInputVector(Vector WorldVector, bool bForce);// 0x6297d54 0x715d13d6e0

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object // 71a48fba00
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30] 0x715d155880
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4] 0x715d155900
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1] 0x715d155980
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1] 0x715d155a00
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1] 0x715d155a80
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1] 0x715d155b00
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8] 0x715d155b80
	void StopMovementKeepPathing();// 0x626ec80 0x715d13d7c0
	void StopActiveMovement();// 0x626ecd0 0x715d13d8a0
	bool IsSwimming();// 0x626eb80 0x715d13d980
	bool IsMovingOnGround();// 0x626ebc0 0x715d13da60
	bool IsFlying();// 0x626eb40 0x715d13db40
	bool IsFalling();// 0x626ec00 0x715d13dc20
	bool IsCrouching();// 0x626ec40 0x715d13dd00

--------------------------------
Class: MovementComponent.ActorComponent.Object // 71a48fb780
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8] 0x7148ca8980
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8] 0x7148ca8a00
	Vector Velocity;//[Offset: 0xc4, Size: 0xc] 0x7148ca8a80
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc] 0x7148ca8b00
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc] 0x7148ca8b80
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1] 0x7148ca8c00
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1] 0x7148ca8c80
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1] 0x7148ca8d00
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1] 0x7148ca8d80
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1] 0x7148ca8e00
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1] 0x7148ca8e80
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1] 0x7148ca8f00
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1] 0x7148ca8f80
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1] 0x7148cd01a0
	void StopMovementImmediately();// 0x6267a10 0x7149048ac0
	void SnapUpdatedComponentToPlane();// 0x6267000 0x7149048ba0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x626787c 0x7149048c80
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x6267378 0x7149048d60
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x6267510 0x7149048e40
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x6267424 0x7149048f20
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x62672c4 0x7149049000
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x62675d8 0x7149045720
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x6267928 0x7149045800
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x6267684 0x71490458e0
	float K2_GetModifiedMaxSpeed();// 0x6267ae4 0x71490459c0
	float K2_GetMaxSpeedModifier();// 0x6267b20 0x7149045aa0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x6267a2c 0x7149045b80
	Vector GetPlaneConstraintOrigin();// 0x6267244 0x7149045c60
	Vector GetPlaneConstraintNormal();// 0x6267284 0x7149045d40
	enum GetPlaneConstraintAxisSetting();// 0x62675bc 0x7149045e20
	PhysicsVolume* GetPhysicsVolume();// 0x62679d4 0x7149045f00
	float GetMaxSpeed();// 0x6267b5c 0x7149045fe0
	float GetGravityZ();// 0x6267b98 0x71490460c0
	Vector ConstrainNormalToPlane(Vector Normal);// 0x626701c 0x71490461a0
	Vector ConstrainLocationToPlane(Vector Location);// 0x62670d4 0x7149046280
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x626718c 0x7149046360

--------------------------------
Class: NavAgentProperties.MovementProperties // 715db1fac0
	float AgentRadius;//[Offset: 0x4, Size: 0x4] 0x715ce63b00
	float AgentHeight;//[Offset: 0x8, Size: 0x4] 0x715ce63b80
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4] 0x715ce63c00
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4] 0x715ce63c80
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18] 0x715ce63d00

--------------------------------
Class: MovementProperties // 715db1fb80
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715ce63d80
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715ce63e00
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715ce63e80
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715ce63f00
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715ce63f80

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a496f100
	float SphereRadius;//[Offset: 0x430, Size: 0x4] 0x715d225980
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x630e07c 0x715d21dde0
	float GetUnscaledSphereRadius();// 0x630e018 0x715d21dec0
	float GetShapeScale();// 0x630dfd8 0x715d21dfa0
	float GetScaledSphereRadius();// 0x630e034 0x715d21e080

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4903300
	int ForcedLodModel;//[Offset: 0x43c, Size: 0x4] 0x715d175900
	int PreviousLODLevel;//[Offset: 0x440, Size: 0x4] 0x715d175980
	int MinLOD;//[Offset: 0x444, Size: 0x4] 0x715d175a00
	int SubDivisionStepSize;//[Offset: 0x448, Size: 0x4] 0x715d175a80
	StaticMesh* StaticMesh;//[Offset: 0x450, Size: 0x8] 0x715d175b00
	Color WireframeColorOverride;//[Offset: 0x458, Size: 0x4] 0x715d175b80
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1] 0x715d175c00
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 0x1] 0x715d175c80
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 0x1] 0x715d175d00
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45c, Size: 0x1] 0x715d175d80
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x45c, Size: 0x1] 0x715d175e00
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x45c, Size: 0x1] 0x715d175e80
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x45c, Size: 0x1] 0x715d175f00
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x45c, Size: 0x1] 0x715d175f80
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45d, Size: 0x1] 0x715d176000
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45d, Size: 0x1] 0x715d176080
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45d, Size: 0x1] 0x715d176100
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45d, Size: 0x1] 0x715d176180
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x45d, Size: 0x1] 0x715d176200
	int OverriddenLightMapRes;//[Offset: 0x460, Size: 0x4] 0x715d176280
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x464, Size: 0x4] 0x715d176300
	float DistanceFieldSelfShadowBias;//[Offset: 0x468, Size: 0x4] 0x715d174280
	float StreamingDistanceMultiplier;//[Offset: 0x46c, Size: 0x4] 0x715d174300
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x470, Size: 0x10] 0x715d0bac40
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x480, Size: 0x10] 0x715d0bace0
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x490, Size: 0x18] 0x715d174480
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x6321fcc 0x715d164ae0
	void SetReverseCulling(bool ReverseCulling);// 0x6321cdc 0x715d164bc0
	void SetForcedLodModel(int NewForcedLodModel);// 0x6321f28 0x715d164ca0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x6321e84 0x715d164d80
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x6322084 0x715d164e60
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x6321d88 0x715d164f40

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a482bf00
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x418, Size: 0x10] 0x715d892220
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1] 0x715d931380
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x6261ce8 0x715d88eb00
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x6261dcc 0x715d88ebe0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x6261eb4 0x715d88ecc0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x6261ff4 0x715d88eda0
	FName[] GetMaterialSlotNames();// 0x62620ac 0x715d88ee80
	MaterialInterface*[] GetMaterials();// 0x6262218 0x715d88ef60
	int GetMaterialIndex(FName MaterialSlotName);// 0x6262164 0x715d88f040

--------------------------------
Class: StaticMeshComponentLODInfo // 715ce76c40

--------------------------------
Class: StreamingTextureBuildInfo // 715ce76e80
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4] 0x715ce8c200
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4] 0x715ce8c280
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x715ce8c300

--------------------------------
Class: LightmassPrimitiveSettings // 715db197c0
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715db42180
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715db42200
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715db42280
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715db42300
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4] 0x715db42380
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4] 0x715db42400
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4] 0x715db42480
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4] 0x715db42500
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4] 0x715db42580

--------------------------------
Class: PlayerState.Info.Actor.Object // 71a4ad4700
	float Score;//[Offset: 0x220, Size: 0x4] 0x715cc4a980
	int PlayerId;//[Offset: 0x224, Size: 0x4] 0x715cc4aa00
	byte Ping;//[Offset: 0x228, Size: 0x1] 0x715cc4aa80
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 0x1] 0x715cc4ab00
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 0x1] 0x715cc4ab80
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 0x1] 0x715cc4ac00
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 0x1] 0x715cc4ac80
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 0x1] 0x715cc4ad00
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 0x1] 0x715cc4ad80
	int StartTime;//[Offset: 0x22c, Size: 0x4] 0x715cc4ae00
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 0x8] 0x715cb2bdc0
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 0x10] 0x715cc4ae80
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 0x28] 0x715cc4af00
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 0x8] 0x715cc4af80
	FString PlayerNamePrivate;//[Offset: 0x2f8, Size: 0x10] 0x715cc4b000
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x45c6aa0 0x715cc36de0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x45c6aa0 0x715cc36ec0
	void OnRep_UniqueId();// 0x62b813c 0x715cc36fa0
	void OnRep_Score();// 0x62b81ac 0x715cc37080
	void OnRep_PlayerName();// 0x62b8190 0x715cc37160
	void OnRep_PlayerId();// 0x62b8158 0x715cc37240
	void OnRep_bIsInactive();// 0x62b8174 0x715cc37320
	FString GetPlayerName();// 0x62b808c 0x715cc33a40

--------------------------------
Class: LocalMessage.Object // 71a4a1ba00

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper // 715da346c0
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10] 0x715d895560

--------------------------------
Class: UniqueNetIdWrapper // 717dfc6d00

--------------------------------
Class: HUD.Actor.Object // 719b178080
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 0x8] 0x715cee3e00
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x715cee3e80
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x715cee3f00
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x715cee3f80
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 0x4] 0x715cee4000
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1] 0x715cee4080
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1] 0x715cee4100
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1] 0x715cee4180
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 0x10] 0x715ce98ee0
	FName[] DebugDisplay;//[Offset: 0x250, Size: 0x10] 0x715ce98f80
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 0x10] 0x715ce99020
	Canvas* Canvas;//[Offset: 0x270, Size: 0x8] 0x715cee2280
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 0x8] 0x715cee2300
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 0x10] 0x715ce96780
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 0x8] 0x715ce96820
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 0x8] 0x715cee2400
	void ShowHUD();// 0x619a560 0x715da1fd60
	void ShowDebugToggleSubCategory(FName Category);// 0x619a410 0x715da1fe40
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x619a36c 0x715da1ff20
	void ShowDebug(FName DebugType);// 0x619a4b4 0x715da1caa0
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x6199ea8 0x715da1cb80
	void RemoveAllDebugStrings();// 0x6199f98 0x715da1cc60
	void ReceiveHitBoxRelease(const FName BoxName);// 0x45c6aa0 0x715da1cd40
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x45c6aa0 0x715da1ce20
	void ReceiveHitBoxClick(const FName BoxName);// 0x45c6aa0 0x715da1cf00
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x45c6aa0 0x715da1cfe0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x45c6aa0 0x715da1d0c0
	Vector Project(Vector Location);// 0x619870c 0x715da1d1a0
	void PreviousDebugTarget();// 0x61980f4 0x715da1d280
	void NextDebugTarget();// 0x6198110 0x715da1d360
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x6199cc4 0x715da1d440
	PlayerController* GetOwningPlayerController();// 0x6198160 0x715da1d520
	Pawn* GetOwningPawn();// 0x619812c 0x715da1d600
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x6198348 0x715da1d6e0
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x61990c0 0x715da1d7c0
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6199278 0x715da1d8a0
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x6199a7c 0x715da1d980
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x61996dc 0x715da1da60
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x61987bc 0x715da1db40
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x6198ab0 0x715da1dc20
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6198cec 0x715da1dd00
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x6199888 0x715da1dde0
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x619858c 0x715da1dec0
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x6198194 0x715da1dfa0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x6199fac 0x715da1e080

--------------------------------
Class: Canvas.Object // 71a4a14e80
	float OrgX;//[Offset: 0x28, Size: 0x4] 0x715cb30400
	float OrgY;//[Offset: 0x2c, Size: 0x4] 0x715cb30480
	float ClipX;//[Offset: 0x30, Size: 0x4] 0x715cb30500
	float ClipY;//[Offset: 0x34, Size: 0x4] 0x715cb30580
	Color DrawColor;//[Offset: 0x38, Size: 0x4] 0x715cb30600
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x715cb30680
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x715cb30700
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x715cb30780
	int SizeX;//[Offset: 0x40, Size: 0x4] 0x715cb30800
	int SizeY;//[Offset: 0x44, Size: 0x4] 0x715cb30880
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10] 0x715cb30900
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8] 0x715cb30980
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8] 0x715cb30a00
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8] 0x715cb30a80
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x6131880 0x715cb122a0
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x61319b8 0x715cb12380
	Vector K2_Project(Vector WorldLocation);// 0x6131bf0 0x715cb12460
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x6131f8c 0x715cb12540
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x6132c98 0x715cb12620
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x61326b4 0x715cb12700
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x6131ca0 0x715cb127e0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x6131e40 0x715cb128c0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x6132a7c 0x715cb129a0
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x6132f44 0x715cb12a80
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x61320d8 0x715cb12b60
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x6132248 0x715cb12c40
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x6131ab4 0x715cb12d20

--------------------------------
Class: Plane.Vector // 717dfc6880
	float W;//[Offset: 0xc, Size: 0x4] 0x717df87400

--------------------------------
Class: CanvasUVTri // 715db1a900
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8] 0x715db3e880
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8] 0x715db3e900
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10] 0x715db3e980
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8] 0x715db3ea00
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8] 0x715db3ea80
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10] 0x715db3eb00
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8] 0x715db3eb80
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8] 0x715db3ec00
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10] 0x715db3ec80

--------------------------------
Class: ReporterGraph.ReporterBase.Object // 71a4ad0600

--------------------------------
Class: ReporterBase.Object // 71a4ad0880

--------------------------------
Class: DebugTextInfo // 715db18e00
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8] 0x715db3c100
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc] 0x715db3c180
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc] 0x715db3c200
	FString DebugText;//[Offset: 0x20, Size: 0x10] 0x715db3c280
	float TimeRemaining;//[Offset: 0x30, Size: 0x4] 0x715db3c300
	float Duration;//[Offset: 0x34, Size: 0x4] 0x715db3c380
	Color TextColor;//[Offset: 0x38, Size: 0x4] 0x715db3c400
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x715db3c480
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x715db3c500
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x715db3c580
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc] 0x715db3c600
	Font* Font;//[Offset: 0x50, Size: 0x8] 0x715db3a580
	float FontScale;//[Offset: 0x58, Size: 0x4] 0x715db3a600

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object // 71a4ad7e00
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x715cc58700
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x715cc58780
	uint32 Channels;//[Offset: 0x224, Size: 0x4] 0x715cc58800
	uint32 InRate;//[Offset: 0x228, Size: 0x4] 0x715cc58880
	uint32 OutRate;//[Offset: 0x22c, Size: 0x4] 0x715cc58900
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 0x4] 0x715cc58980
	uint32 InRateClientMax;//[Offset: 0x238, Size: 0x4] 0x715cc58a00
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 0x4] 0x715cc58a80
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 0x4] 0x715cc58b00
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 0x4] 0x715cc58b80
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 0x4] 0x715cc58c00
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 0x4] 0x715cc58c80
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 0x4] 0x715cc58d00
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 0x4] 0x715cc58d80
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 0x4] 0x715cc58e00
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 0x4] 0x715cc58e80
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 0x4] 0x715cc58f00
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 0x4] 0x715cc58f80
	uint32 NetNumClients;//[Offset: 0x268, Size: 0x4] 0x715cc59000
	uint32 InPackets;//[Offset: 0x26c, Size: 0x4] 0x715cc59080
	uint32 OutPackets;//[Offset: 0x270, Size: 0x4] 0x715cc59100
	uint32 InBunches;//[Offset: 0x274, Size: 0x4] 0x715cc59180
	uint32 OutBunches;//[Offset: 0x278, Size: 0x4] 0x715cc59200
	uint32 OutLoss;//[Offset: 0x27c, Size: 0x4] 0x715cc59280
	uint32 InLoss;//[Offset: 0x280, Size: 0x4] 0x715cc59300
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 0x4] 0x715cc59380
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 0x4] 0x715cc59400
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 0x4] 0x715cc59480
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 0x4] 0x715cc57400
	uint32 PercentInVoice;//[Offset: 0x294, Size: 0x4] 0x715cc57480
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 0x4] 0x715cc57500
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 0x4] 0x715cc57580
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 0x4] 0x715cc57600
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 0x4] 0x715cc57680
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 0x4] 0x715cc57700
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 0x4] 0x715cc57780
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 0x4] 0x715cc57800
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 0x4] 0x715cc57880
	uint32 NumActors;//[Offset: 0x2b8, Size: 0x4] 0x715cc57900
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 0x4] 0x715cc57980
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 0x4] 0x715cc57a00
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 0x4] 0x715cc57a80
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 0x4] 0x715cc57b00
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 0x4] 0x715cc57b80
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 0x4] 0x715cc57c00
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 0x4] 0x715cc57c80
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 0x4] 0x715cc57d00
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 0x4] 0x715cc57d80
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 0x4] 0x715cc57e00

--------------------------------
Class: GameNetworkManager.Info.Actor.Object // 71a4a1f880
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 0x4] 0x715cb57000
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 0x4] 0x715cb57080
	int BadPingThreshold;//[Offset: 0x228, Size: 0x4] 0x715cb57100
	int SeverePingThreshold;//[Offset: 0x22c, Size: 0x4] 0x715cb57180
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 0x4] 0x715cb57200
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 0x4] 0x715cb57280
	int TotalNetBandwidth;//[Offset: 0x238, Size: 0x4] 0x715cb57300
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 0x4] 0x715cb57380
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 0x4] 0x715cb55300
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1] 0x715cb55380
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1] 0x715cb55400
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 0x4] 0x715cb55480
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 0x4] 0x715cb55500
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 0x4] 0x715cb55580
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 0x4] 0x715cb55600
	float PercentForBadPing;//[Offset: 0x258, Size: 0x4] 0x715cb55680
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 0x4] 0x715cb55700
	float MoveRepSize;//[Offset: 0x260, Size: 0x4] 0x715cb55780
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 0x4] 0x715cb55800
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 0x4] 0x715cb55880
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 0x4] 0x715cb55900
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 0x4] 0x715cb55980
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 0x4] 0x715cb55a00
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 0x4] 0x715cb55a80
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 0x4] 0x715cb55b00
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 0x4] 0x715cb55b80
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 0x4] 0x715cb55c00
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 0x4] 0x715cb55c80
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 0x4] 0x715cb55d00
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 0x4] 0x715cb55d80
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 0x4] 0x715cb55e00
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 0x4] 0x715cb55e80
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x715cb55f00
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 0x4] 0x715cb55f80
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 0x4] 0x715cb56000
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 0x4] 0x715cb56080
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1] 0x715cb56100
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1] 0x715cb56180
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 0x4] 0x715cb56200
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 0x4] 0x715cb56280
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 0x4] 0x715cb56300
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 0x4] 0x715cb54280
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x715cb54300
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x715cb54380

--------------------------------
Class: ClusteredDecalWorldSettings // 715ce7acc0
	Texture2D* ColorOpacityAtlas;//[Offset: 0x0, Size: 0x8] 0x715cea0100
	Texture2D* NormalRoughnessAtlas;//[Offset: 0x8, Size: 0x8] 0x715cea0180

--------------------------------
Class: ReverbSettings // 715ce72200
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715ce6cc00
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8] 0x715ce6cc80
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8] 0x715ce6cd00
	float Volume;//[Offset: 0x18, Size: 0x4] 0x715ce6cd80
	float FadeTime;//[Offset: 0x1c, Size: 0x4] 0x715ce6ce00

--------------------------------
Class: ReverbEffect.Object // 71a4ad0380
	float Density;//[Offset: 0x28, Size: 0x4] 0x715cc56000
	float Diffusion;//[Offset: 0x2c, Size: 0x4] 0x715cc56080
	float Gain;//[Offset: 0x30, Size: 0x4] 0x715cc56100
	float GainHF;//[Offset: 0x34, Size: 0x4] 0x715cc56180
	float DecayTime;//[Offset: 0x38, Size: 0x4] 0x715cc56200
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4] 0x715cc56280
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4] 0x715cc56300
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4] 0x715cc54280
	float LateGain;//[Offset: 0x48, Size: 0x4] 0x715cc54300
	float LateDelay;//[Offset: 0x4c, Size: 0x4] 0x715cc54380
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4] 0x715cc54400
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4] 0x715cc54480

--------------------------------
Class: InteriorSettings // 715db13f40
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715db26180
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4] 0x715db26200
	float ExteriorTime;//[Offset: 0x8, Size: 0x4] 0x715db26280
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4] 0x715db26300
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4] 0x715db24280
	float InteriorVolume;//[Offset: 0x14, Size: 0x4] 0x715db24300
	float InteriorTime;//[Offset: 0x18, Size: 0x4] 0x715db24380
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4] 0x715db24400
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4] 0x715db24480

--------------------------------
Class: BroadphaseSettings // 715ce7ac00
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715cea1f00
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715cea1f80
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715cea2000
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c] 0x715cea2080
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c] 0x715cea2100
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4] 0x715cea0080

--------------------------------
Class: NetViewer // 715ce7aa80
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8] 0x715cea1680
	Actor* InViewer;//[Offset: 0x8, Size: 0x8] 0x715cea1700
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8] 0x715cea1780
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc] 0x715cea1800
	Vector ViewDir;//[Offset: 0x24, Size: 0xc] 0x715cea1880

--------------------------------
Class: NetConnection.Player.Object // 71a4831500
	ChildConnection*[] Children;//[Offset: 0x60, Size: 0x10] 0x715ce9d9e0
	NetDriver* Driver;//[Offset: 0x70, Size: 0x8] 0x715cf56b00
	class PackageMap* PackageMapClass;//[Offset: 0x78, Size: 0x8] 0x715ce9da80
	PackageMap* PackageMap;//[Offset: 0x80, Size: 0x8] 0x715cf56b80
	Channel*[] OpenChannels;//[Offset: 0x88, Size: 0x10] 0x715ce9db20
	Actor*[] SentTemporaries;//[Offset: 0x98, Size: 0x10] 0x715ce9dbc0
	Actor* ViewTarget;//[Offset: 0xa8, Size: 0x8] 0x715cf56d00
	Actor* OwningActor;//[Offset: 0xb0, Size: 0x8] 0x715cf56d80
	int MaxPacket;//[Offset: 0xb8, Size: 0x4] 0x715cf56e00
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x715cf56e80
	UniqueNetIdRepl PlayerId;//[Offset: 0x178, Size: 0x28] 0x715cf56f00
	double LastReceiveTime;//[Offset: 0x1e8, Size: 0x8] 0x715cf56f80
	Channel*[] ChannelsToTick;//[Offset: 0x1528, Size: 0x10] 0x715ce9dc60

--------------------------------
Class: ChildConnection.NetConnection.Player.Object // 71a4a13a80
	NetConnection* Parent;//[Offset: 0x1a48, Size: 0x8] 0x715cb32580

--------------------------------
Class: NetDriver.Object // 71a4830d80
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10] 0x715cf57c80
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10] 0x715cf57d00
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4] 0x715cf57d80
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x715cf57e00
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4] 0x715cf57e80
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4] 0x715cf57f00
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4] 0x715cf57f80
	int MaxClientRate;//[Offset: 0x64, Size: 0x4] 0x715cf58000
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4] 0x715cf58080
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4] 0x715cf58100
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4] 0x715cf58180
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4] 0x715cf58200
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4] 0x715cf58280
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4] 0x715cf58300
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4] 0x715cf58380
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x715cf58400
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x715cf56380
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8] 0x715cf56400
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10] 0x715ce9d6c0
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4] 0x715cf56500
	World* World;//[Offset: 0x140, Size: 0x8] 0x715cf56580
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8] 0x715cf56600
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8] 0x715ce9d760
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8] 0x715ce9d800
	FName NetDriverName;//[Offset: 0x190, Size: 0x8] 0x715cf56680
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10] 0x715ce9d8a0
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50] 0x715cecc340
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10] 0x715ce9d940
	float Time;//[Offset: 0x210, Size: 0x4] 0x715cf56900
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6e8, Size: 0x8] 0x715cf56980

--------------------------------
Class: ChannelDefinition // 715ce71780
	FName ChannelName;//[Offset: 0x0, Size: 0x8] 0x715ce65c80
	FName ClassName;//[Offset: 0x8, Size: 0x8] 0x715ce65d00
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8] 0x715daedc60
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4] 0x715ce65d80
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x715ce65e00
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x715ce65e80
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1] 0x715ce65f00
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1] 0x715ce65f80
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715ce66000

--------------------------------
Class: Channel.Object // 71a49d4980
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8] 0x715caf6d00

--------------------------------
Class: ReplicationDriver.Object // 71a4ad0d80

--------------------------------
Class: BookmarkBase.Object // 71a49dc900

--------------------------------
Class: ReplicatedStaticActorDestructionInfo // 715db1cb80
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8] 0x715daec7c0

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4a82b80

--------------------------------
Class: LevelStreaming.Object // 71a4a84980
	World* WorldAsset;//[Offset: 0x28, Size: 0x28] 0x715cc06480
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8] 0x715cc06500
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10] 0x715cb281c0
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30] 0x715cc06600
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4] 0x715cc06680
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4] 0x715cc06700
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1] 0x715cc06780
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1] 0x715cc06800
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1] 0x715cc06880
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1] 0x715cc06900
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1] 0x715cc06980
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1] 0x715cc06a00
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1] 0x715cc06a80
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1] 0x715cc06b00
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10] 0x715cc06b80
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10] 0x715cb28260
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4] 0x715cc06c80
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10] 0x715cc06d00
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10] 0x715cc06d80
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10] 0x715cc06e00
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10] 0x715cc06e80
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8] 0x715cc06f00
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8] 0x715cc06f80
	bool ShouldBeLoaded();// 0x622c06c 0x715cbedde0
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x622c2dc 0x715cbedec0
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x622c228 0x715cbedfa0
	void SetPriority(int NewPriority);// 0x622c0e0 0x715cbee080
	void SetLevelLODIndex(int LODIndex);// 0x622c184 0x715cbee160
	bool IsStreamingStatePending();// 0x622bfbc 0x715cbee240
	bool IsLevelVisible();// 0x622c018 0x715cbee320
	bool IsLevelLoaded();// 0x622bff4 0x715cbee400
	FName GetWorldAssetPackageFName();// 0x622c0ac 0x715cbee4e0
	Level* GetLoadedLevel();// 0x622c050 0x715cbee5c0
	LevelScriptActor* GetLevelScriptActor();// 0x622bed0 0x715cbee6a0
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x622bf04 0x715cbeadc0

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object // 71a4a83f80
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 0x10] 0x715cb28120
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x715cc07d00
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 0x1] 0x715cc07d80
	byte StreamingUsage;//[Offset: 0x269, Size: 0x1] 0x715cc07e00

--------------------------------
Class: StreamingLevelsToConsider // 715ce782c0
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10] 0x715ce91320

--------------------------------
Class: LevelStreamingWrapper // 715ce78200
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8] 0x715cea0980

--------------------------------
Class: DemoNetDriver.NetDriver.Object // 71a4a18800
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x840, Size: 0x50] 0x715cece380
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xc54, Size: 0x4] 0x715cb38a80
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xc88, Size: 0x10] 0x715cb222c0
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 0x1] 0x715cb38b80
	PlayerController*[] SpectatorControllers;//[Offset: 0xcf0, Size: 0x10] 0x715cb22360

--------------------------------
Class: RollbackNetStartupActorInfo // 715db18bc0
	Object* Archetype;//[Offset: 0x8, Size: 0x8] 0x715db3bb80
	Level* Level;//[Offset: 0x38, Size: 0x8] 0x715db3bc00
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10] 0x715daeb960

--------------------------------
Class: MulticastRecordOptions // 715db18c80
	FString FuncPathName;//[Offset: 0x0, Size: 0x10] 0x715db3bd00
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715db3bd80
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x715db3be00

--------------------------------
Class: ParticleEventManager.Actor.Object // 71a4aa6f00

--------------------------------
Class: NavigationSystemBase.Object // 71a4aa9e80

--------------------------------
Class: AISystemBase.Object // 71a49d3800
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18] 0x715caf8400
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8] 0x715caf6380
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715caf6400

--------------------------------
Class: AvoidanceManager.Object // 71a49dee80
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4] 0x715cb03e00
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4] 0x715cb03e80
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4] 0x715cb03f00
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4] 0x715cb03f80
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4] 0x715cb04000
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4] 0x715cb04080
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4] 0x715cb04100
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x610d4c8 0x715caec020
	int GetObjectCount();// 0x610d5f0 0x715caec100
	int GetNewAvoidanceUID();// 0x610d5bc 0x715caec1e0
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x610d418 0x715caec2c0

--------------------------------
Class: LevelCollection // 715ce78140
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8] 0x715cea0700
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8] 0x715cea0780
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8] 0x715cea0800
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8] 0x715cea0880
	<Level*> Levels;//[Offset: 0x28, Size: 0x50] 0x715ce91280

--------------------------------
Class: GameInstance.Object // 71a4836500
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10] 0x7148cd27c0
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8] 0x7148cad480
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10] 0x7148cd2860
	void ReceiveShutdown();// 0x45c6aa0 0x7149049d20
	void ReceiveInit();// 0x45c6aa0 0x7149049e00
	void HandleTravelError(byte FailureType);// 0x45c6aa0 0x7149049ee0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x45c6aa0 0x7149049fc0
	void DebugRemovePlayer(int ControllerId);// 0x617bc0c 0x714904a0a0
	void DebugCreatePlayer(int ControllerId);// 0x617bcb8 0x714904a180

--------------------------------
Class: OnlineSession.Object // 71a4838f80

--------------------------------
Class: MaterialParameterCollectionInstance.Object // 71a4aa2400
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8] 0x715cc19500

--------------------------------
Class: WorldComposition.Object // 71a4ae5600
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10] 0x715cc80060
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8] 0x715cc96b80
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715cc96c00
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x715cc96c80
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4] 0x715cc96d00

--------------------------------
Class: WorldPSCPool // 715ce77e40
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50] 0x715ce77d80

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object // 71a4ace480
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4] 0x715cc2e480
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4] 0x715cc2e500
	float WarmupTime;//[Offset: 0x34, Size: 0x4] 0x715cc2e580
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4] 0x715cc2e600
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10] 0x715cb2a6a0
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8] 0x715cc2e700
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8] 0x715cc2c680
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4] 0x715cc2c700
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4] 0x715cc2c780
	float[] LODDistances;//[Offset: 0x68, Size: 0x10] 0x715cb2a740
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10] 0x715cb2a7e0
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c] 0x715cc2c900
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4] 0x715cc2c980
	float Delay;//[Offset: 0xa8, Size: 0x4] 0x715cc2ca00
	float DelayLow;//[Offset: 0xac, Size: 0x4] 0x715cc2ca80
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715cc2cb00
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x715cc2cb80
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x715cc2cc00
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x715cc2cc80
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x715cc2cd00
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x715cc2cd80
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x715cc2ce00
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x715cc2ce80
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x715cc2cf00
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x715cc2cf80
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1] 0x715cc2d000
	byte LODMethod;//[Offset: 0xb3, Size: 0x1] 0x715cc2d080
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1] 0x715cb2a880
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1] 0x715cc2d180
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1] 0x715cb2a920
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4] 0x715cc2d280
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4] 0x715cc2d300
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc] 0x715cc2d380
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c] 0x715cc2d400
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10] 0x715cb2a9c0
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10] 0x715cb2aa60
	bool ContainsEmitterType(class Object TypeData);// 0x628d890 0x715cbef2e0

--------------------------------
Class: FXSystemAsset.Object // 71a4ace700
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4] 0x715cc2d600

--------------------------------
Class: ParticleEmitter.Object // 71a4aa7180
	FName EmitterName;//[Offset: 0x28, Size: 0x8] 0x715cc1e200
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4] 0x715cc1e280
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1] 0x715cc1e300
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1] 0x715cb2b780
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1] 0x715cc1e400
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1] 0x715cc1e480
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1] 0x715cc1e500
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1] 0x715cc1e580
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1] 0x715cc1e600
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cc1e680
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10] 0x715cb2b820
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4] 0x715cc1c680
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4] 0x715cc1c700
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4] 0x715cc1c780
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4] 0x715cc1c800

--------------------------------
Class: ParticleLODLevel.Object // 71a4aa6c80
	int Level;//[Offset: 0x28, Size: 0x4] 0x715cc1db00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x715cc1db80
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8] 0x715cc1dc00
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10] 0x715cb2b3c0
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8] 0x715cc1dd00
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8] 0x715cc1dd80
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8] 0x715cc1de00
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10] 0x715cb2b460
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10] 0x715cb2b500
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10] 0x715cb2b5a0
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10] 0x715cb2b640
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10] 0x715cb2b6e0
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715cc1e100
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4] 0x715cc1e180

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object // 71a4ac0600
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8] 0x715cc27b80
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4] 0x715cc27c00
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4] 0x715cc27c80
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc] 0x715cc27d00
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc] 0x715cc27d80
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1] 0x715cc27e00
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x715cc27e80
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x715cc27f00
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x715cc27f80
	byte SortMode;//[Offset: 0x5a, Size: 0x1] 0x715cc28000
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x715cc28080
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x715cc28100
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x715cc28180
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4] 0x715cc28200
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30] 0x715cc28280
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10] 0x715cb2ace0
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4] 0x715cc28380
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4] 0x715cc28400
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x715cc26380
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1] 0x715cc26400
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1] 0x715cc26480
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1] 0x715cc26500
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1] 0x715cc26580
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x715cc26600
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x715cc26680
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1] 0x715cc26700
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1] 0x715cc26780
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1] 0x715cc26800
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4] 0x715cc26880
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4] 0x715cc26900
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4] 0x715cc26980
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4] 0x715cc26a00
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc] 0x715cc26a80
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4] 0x715cc26b00
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1] 0x715cb2ad80
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1] 0x715cc26c00
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1] 0x715cc26c80
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc] 0x715cc26d00
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4] 0x715cc26d80
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4] 0x715cc26e00
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8] 0x715cc26e80
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4] 0x715cc26f00
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4] 0x715cc26f80
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc] 0x715cc27000
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10] 0x715cb2ae20

--------------------------------
Class: ParticleModule.Object // 71a4aa6a00
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715cc1f580
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x715cc1f600
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x715cc1f680
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x715cc1f700
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x715cc1f780
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x715cc1d700
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x715cc1d780
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x715cc1d800
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x715cc1d880
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x715cc1d900
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x715cc1d980
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x715cc1da00
	byte LODValidity;//[Offset: 0x2a, Size: 0x1] 0x715cc1da80

--------------------------------
Class: RawDistributionFloat.RawDistribution // 715db18800
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x715db3d600
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x715db3d680
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8] 0x715db3b600

--------------------------------
Class: RawDistribution // 7149064cc0
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x7148ca0680

--------------------------------
Class: DistributionLookupTable // 7149064e40
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x7148ca0700
	float TimeBias;//[Offset: 0x4, Size: 0x4] 0x7148ca0780
	float[] Values;//[Offset: 0x8, Size: 0x10] 0x7148cd09c0
	byte Op;//[Offset: 0x18, Size: 0x1] 0x7148ca0880
	byte EntryCount;//[Offset: 0x19, Size: 0x1] 0x7148ca0900
	byte EntryStride;//[Offset: 0x1a, Size: 0x1] 0x7148ca0980
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1] 0x7148ca0a00
	byte LockFlag;//[Offset: 0x1c, Size: 0x1] 0x7148ca0a80

--------------------------------
Class: DistributionFloat.Distribution.Object // 71a4a16000
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x715cb3db80
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x715cb3dc00

--------------------------------
Class: Distribution.Object // 71a4a16280

--------------------------------
Class: ParticleBurst // 715ce71480
	int Count;//[Offset: 0x0, Size: 0x4] 0x715ce67380
	int CountLow;//[Offset: 0x4, Size: 0x4] 0x715ce65300
	float Time;//[Offset: 0x8, Size: 0x4] 0x715ce65380

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object // 71a4ac7180

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object // 71a4ac8800
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30] 0x715cc28e80
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30] 0x715cc28f00
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1] 0x715cc28f80
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10] 0x715cb2ac40
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30] 0x715cc29080
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x715cc29100

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object // 71a4ac8580
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x715cc29180
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x715cc29200

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object // 71a4aac900
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10] 0x715cb2b280

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object // 71a4aacb80

--------------------------------
Class: ParticleEvent_GenerateInfo // 715ce71180
	byte Type;//[Offset: 0x0, Size: 0x1] 0x715ce66980
	int Frequency;//[Offset: 0x4, Size: 0x4] 0x715ce66a00
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4] 0x715ce66a80
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715ce66b00
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x715ce66b80
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x715ce66c00
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x715ce66c80
	FName CustomName;//[Offset: 0x10, Size: 0x8] 0x715ce66d00
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10] 0x715daedb20

--------------------------------
Class: ParticleModuleEventSendToGame.Object // 71a4aabf00

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object // 71a4ac1a00
	byte ChainMode;//[Offset: 0x2c, Size: 0x1] 0x715cc25300
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48] 0x715cc25380
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4] 0x715cc25400
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48] 0x715cc25480
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4] 0x715cc25500
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48] 0x715cc25580
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4] 0x715cc25600

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object // 71a4ac1780
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x715cc25680

--------------------------------
Class: RawDistributionVector.RawDistribution // 715db18740
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x715db3d380
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x715db3d400
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc] 0x715db3d480
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc] 0x715db3d500
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8] 0x715db3d580

--------------------------------
Class: DistributionVector.Distribution.Object // 71a4a1f380
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x715cb3f580
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x715cb3f600
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x715cb3f680

--------------------------------
Class: OrbitOptions // 715ce71000
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715ce66700
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715ce66780
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715ce66800

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object // 71a4aac680
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1] 0x715cc22800
	FName EventName;//[Offset: 0x2c, Size: 0x8] 0x715cc22880

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4acdf80
	ParticleSystem* Template;//[Offset: 0x418, Size: 0x8] 0x715cc41900
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x420, Size: 0x10] 0x715cb2c900
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x430, Size: 0x10] 0x715cb2c9a0
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x441, Size: 0x1] 0x715cc41a80
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x441, Size: 0x1] 0x715cc41b00
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x441, Size: 0x1] 0x715cc41b80
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x441, Size: 0x1] 0x715cc41c00
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x441, Size: 0x1] 0x715cc41c80
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x442, Size: 0x1] 0x715cc41d00
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x442, Size: 0x1] 0x715cc41d80
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x442, Size: 0x1] 0x715cc41e00
	byte LODMethod;//[Offset: 0x44e, Size: 0x1] 0x715cc41e80
	enum RequiredSignificance;//[Offset: 0x44f, Size: 0x1] 0x715cb2ca40
	ParticleSysParam[] InstanceParameters;//[Offset: 0x458, Size: 0x10] 0x715cb2cae0
	delegate OnParticleSpawn;//[Offset: 0x468, Size: 0x10] 0x715cc42000
	delegate OnParticleBurst;//[Offset: 0x478, Size: 0x10] 0x715cc42080
	delegate OnParticleDeath;//[Offset: 0x488, Size: 0x10] 0x715cc42100
	delegate OnParticleCollide;//[Offset: 0x498, Size: 0x10] 0x715cc40080
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1] 0x715cc40100
	Vector OldPosition;//[Offset: 0x4ac, Size: 0xc] 0x715cc40180
	Vector PartSysVelocity;//[Offset: 0x4b8, Size: 0xc] 0x715cc40200
	float WarmupTime;//[Offset: 0x4c4, Size: 0x4] 0x715cc40280
	float WarmupTickRate;//[Offset: 0x4c8, Size: 0x4] 0x715cc40300
	float SecondsBeforeInactive;//[Offset: 0x4d0, Size: 0x4] 0x715cc40380
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x4d8, Size: 0x4] 0x715cc40400
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x4f8, Size: 0x10] 0x715cb2cb80
	float CustomTimeDilation;//[Offset: 0x510, Size: 0x4] 0x715cc40500
	SceneComponent* AutoAttachParent;//[Offset: 0x568, Size: 0x8] 0x715cc40580
	FName AutoAttachSocketName;//[Offset: 0x570, Size: 0x8] 0x715cc40600
	enum AutoAttachLocationRule;//[Offset: 0x578, Size: 0x1] 0x715cb2cc20
	enum AutoAttachRotationRule;//[Offset: 0x579, Size: 0x1] 0x715cb2ccc0
	enum AutoAttachScaleRule;//[Offset: 0x57a, Size: 0x1] 0x715cb2cd60
	delegate OnSystemFinished;//[Offset: 0x5a8, Size: 0x10] 0x715cc40800
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x62921c0 0x715cc30b00
	void SetTemplate(ParticleSystem* NewTemplate);// 0x62924e0 0x715cc30be0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6292584 0x715cc30cc0
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x6293064 0x715cc30da0
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x6292f30 0x715cc30e80
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x6293194 0x715cc30f60
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x62933f8 0x715cc31040
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x62932c4 0x715cc31120
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x6293528 0x715cc31200
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x6293658 0x715cc312e0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x6293744 0x715cc313c0
	int GetNumActiveParticles();// 0x62924ac 0x715cc314a0
	MaterialInterface* GetNamedMaterial(FName InName);// 0x6292018 0x715cc31580
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x62927b8 0x715cc31660
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x6292668 0x715cc31740
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x6292900 0x715cc31820
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x6292b98 0x715cc31900
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x6292a48 0x715cc319e0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x6292ce0 0x715cc31ac0
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x6292e28 0x715cc31ba0
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x6291e68 0x715cc31c80
	void EndTrails();// 0x629232c 0x715cbee780
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x62920cc 0x715cbee860
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x6292340 0x715cbee940

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4ace200
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x629169c 0x715cbeea20
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x6291124 0x715cbeeb00
	void SetFloatParameter(FName ParameterName, float Param);// 0x6291788 0x715cbeebe0
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x6291390 0x715cbeecc0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x62915b0 0x715cbeeda0
	void SetBoolParameter(FName ParameterName, bool Param);// 0x6291878 0x715cbeee80
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x62911d8 0x715cbeef60
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x62914c4 0x715cbef040
	void ReleaseToPool();// 0x6291108 0x715cbef120
	FXSystemAsset* GetFXSystemAsset();// 0x6291488 0x715cbef200

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4869200
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x650, Size: 0x8] 0x715cb2efc0
	class AnimInstance* AnimClass;//[Offset: 0x658, Size: 0x8] 0x715cb2f060
	AnimInstance* AnimScriptInstance;//[Offset: 0x660, Size: 0x8] 0x715cc61c80
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x668, Size: 0x8] 0x715cc61d00
	SingleAnimationPlayData AnimationData;//[Offset: 0x670, Size: 0x18] 0x715cc61d80
	Vector RootBoneTranslation;//[Offset: 0x698, Size: 0xc] 0x715cc61e00
	Vector LineCheckBoundsScale;//[Offset: 0x6a4, Size: 0xc] 0x715cc61e80
	AnimInstance*[] LinkedInstances;//[Offset: 0x6d0, Size: 0x10] 0x715cb2f100
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x6e0, Size: 0x10] 0x715cb2f1a0
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x6f0, Size: 0x10] 0x715cb2f240
	float GlobalAnimRateScale;//[Offset: 0x720, Size: 0x4] 0x715cc62080
	byte KinematicBonesUpdateType;//[Offset: 0x724, Size: 0x1] 0x715cc62100
	byte PhysicsTransformUpdateMode;//[Offset: 0x725, Size: 0x1] 0x715cc60080
	byte AnimationMode;//[Offset: 0x727, Size: 0x1] 0x715cc60100
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x729, Size: 0x1] 0x715cc60180
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x729, Size: 0x1] 0x715cc60200
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x729, Size: 0x1] 0x715cc60280
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x729, Size: 0x1] 0x715cc60300
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x729, Size: 0x1] 0x715cc60380
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72a, Size: 0x1] 0x715cc60400
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72a, Size: 0x1] 0x715cc60480
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x72a, Size: 0x1] 0x715cc60500
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x72a, Size: 0x1] 0x715cc60580
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x72a, Size: 0x1] 0x715cc60600
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72b, Size: 0x1] 0x715cc60680
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72b, Size: 0x1] 0x715cc60700
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x72b, Size: 0x1] 0x715cc60780
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x72b, Size: 0x1] 0x715cc60800
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x72b, Size: 0x1] 0x715cc60880
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x72b, Size: 0x1] 0x715cc60900
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x72b, Size: 0x1] 0x715cc60980
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72c, Size: 0x1] 0x715cc60a00
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72c, Size: 0x1] 0x715cc60a80
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x72c, Size: 0x1] 0x715cc60b00
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x72c, Size: 0x1] 0x715cc60b80
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x72c, Size: 0x1] 0x715cc60c00
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x72c, Size: 0x1] 0x715cc60c80
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x72c, Size: 0x1] 0x715cc60d00
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x72c, Size: 0x1] 0x715cc60d80
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72d, Size: 0x1] 0x715cc60e00
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72d, Size: 0x1] 0x715cc60e80
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x72d, Size: 0x1] 0x715cc60f00
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x72d, Size: 0x1] 0x715cc60f80
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x72d, Size: 0x1] 0x715cc61000
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x72d, Size: 0x1] 0x715cc61080
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x72d, Size: 0x1] 0x715cc5f800
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x72d, Size: 0x1] 0x715cc5f880
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72e, Size: 0x1] 0x715cc5f900
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72e, Size: 0x1] 0x715cc5f980
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x72e, Size: 0x1] 0x715cc5fa00
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x72e, Size: 0x1] 0x715cc5fa80
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x730, Size: 0x2] 0x715cc5fb00
	enum MassMode;//[Offset: 0x732, Size: 0x1] 0x715cb2f2e0
	float UniformMass;//[Offset: 0x734, Size: 0x4] 0x715cc5fc00
	float TotalMass;//[Offset: 0x738, Size: 0x4] 0x715cc5fc80
	float Density;//[Offset: 0x73c, Size: 0x4] 0x715cc5fd00
	float MinPerParticleMass;//[Offset: 0x740, Size: 0x4] 0x715cc5fd80
	float ClothBlendWeight;//[Offset: 0x744, Size: 0x4] 0x715cc5fe00
	float EdgeStiffness;//[Offset: 0x748, Size: 0x4] 0x715cc5fe80
	float BendingStiffness;//[Offset: 0x74c, Size: 0x4] 0x715cc5ff00
	float AreaStiffness;//[Offset: 0x750, Size: 0x4] 0x715cc5ff80
	float VolumeStiffness;//[Offset: 0x754, Size: 0x4] 0x715cc5e780
	float StrainLimitingStiffness;//[Offset: 0x758, Size: 0x4] 0x715cc5e800
	float ShapeTargetStiffness;//[Offset: 0x75c, Size: 0x4] 0x715cc5e880
	FName[] DisallowedAnimCurves;//[Offset: 0x760, Size: 0x10] 0x715cb2f380
	BodySetup* BodySetup;//[Offset: 0x770, Size: 0x8] 0x715cc5e980
	delegate OnConstraintBroken;//[Offset: 0x780, Size: 0x10] 0x715cc5ea00
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x790, Size: 0x8] 0x715cb2f420
	float TeleportDistanceThreshold;//[Offset: 0x868, Size: 0x4] 0x715cc5ea80
	float TeleportRotationThreshold;//[Offset: 0x86c, Size: 0x4] 0x715cc5eb00
	uint32 LastPoseTickFrame;//[Offset: 0x878, Size: 0x4] 0x715cc5eb80
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x8d0, Size: 0x8] 0x715cc5ec00
	delegate OnAnimInitialized;//[Offset: 0x9a0, Size: 0x10] 0x715cc5ec80
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x62eefe8 0x715cc3ee80
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x62ee184 0x715cc3ef60
	void ToggleDisablePostProcessBlueprint();// 0x62ef5f4 0x715cc3f040
	void TermBodiesBelow(FName ParentBoneName);// 0x62ece08 0x715cc3f120
	void SuspendClothingSimulation();// 0x62ee2a4 0x715cc3f200
	void Stop();// 0x62eea88 0x715cc3f2e0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x62ee3b8 0x715cc3f3c0
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x62edfb4 0x715cc3f4a0
	void SetTeleportRotationThreshold(float Threshold);// 0x62edb2c 0x715cc3f580
	void SetTeleportDistanceThreshold(float Threshold);// 0x62eda54 0x715cc3f660
	void SetPosition(float InPos, bool bFireNotifies);// 0x62ee960 0x715cc3f740
	void SetPlayRate(float Rate);// 0x62ee888 0x715cc3f820
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x62eccb8 0x715cc3f900
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x62ed7dc 0x715cc3f9e0
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x62ee550 0x715cc3fac0
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x62ecc0c 0x715cc3fba0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x62ed4f8 0x715cc3fc80
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x62ed6e8 0x715cc3fd60
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x62ef510 0x715cc3fe40
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x62edf08 0x715cc3ff20
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x62ec0a0 0x715cc3caa0
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x62ec190 0x715cc3cb80
	void SetClothMaxDistanceScale(float Scale);// 0x62ee2e0 0x715cc3cc60
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x62ed924 0x715cc3cd40
	void SetAnimClass(class Object NewClass);// 0x62ef464 0x715cc3ce20
	void SetAnimationMode(byte InAnimationMode);// 0x62eed10 0x715cc3cf00
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x62eeb48 0x715cc3cfe0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x62ebd60 0x715cc3d0c0
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x62ee088 0x715cc3d1a0
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x62edc04 0x715cc3d280
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x62ede34 0x715cc3d360
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x62ec434 0x715cc3d440
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x62ec588 0x715cc3d520
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x62ec2c0 0x715cc3d600
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x62ecd5c 0x715cc3d6e0
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x62ec9b4 0x715cc3d7c0
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x62ecab8 0x715cc3d8a0
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x62ec81c 0x715cc3d980
	void ResumeClothingSimulation();// 0x62ee290 0x715cc3da60
	void ResetClothTeleportMode();// 0x62ee244 0x715cc3db40
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x62eedb4 0x715cc3dc20
	void ResetAllowedAnimCurveEvaluation();// 0x62edd0c 0x715cc3dd00
	void ResetAllBodiesSimulatePhysics();// 0x62ecaa4 0x715cc3dde0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x62eebec 0x715cc3dec0
	void Play(bool bLooping);// 0x62eea9c 0x715cc3dfa0
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x62ee684 0x715cc3e080
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x62ef130 0x715cc3e160
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x62ef08c 0x715cc3e240
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x62ed2f4 0x715cc3e320
	bool IsPlaying();// 0x62eea50 0x715cc3e400
	bool IsClothingSimulationSuspended();// 0x62ee258 0x715cc3e4e0
	bool IsBodyGravityEnabled(FName BoneName);// 0x62ed638 0x715cc3e5c0
	bool HasValidAnimationInstance();// 0x62eee58 0x715cc3e6a0
	float GetTeleportRotationThreshold();// 0x62edbd0 0x715cc3adc0
	float GetTeleportDistanceThreshold();// 0x62edaf8 0x715cc3aea0
	Vector GetSkeletalCenterOfMass();// 0x62ed1c4 0x715cc3af80
	AnimInstance* GetPostProcessInstance();// 0x62ef3c8 0x715cc3b060
	float GetPosition();// 0x62ee92c 0x715cc3b140
	float GetPlayRate();// 0x62ee854 0x715cc3b220
	float GetMorphTarget(FName MorphTargetName);// 0x62ee490 0x715cc3b300
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x62eef3c 0x715cc3b3e0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x62eee90 0x715cc3b4c0
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x62ef214 0x715cc3b5a0
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x62ef31c 0x715cc3b680
	bool GetDisablePostProcessBlueprint();// 0x62ef5bc 0x715cc3b760
	bool GetDisableAnimCurves();// 0x62edee0 0x715cc3b840
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x62ebbbc 0x715cc3b920
	float GetClothMaxDistanceScale();// 0x62ee384 0x715cc3ba00
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x62eda20 0x715cc3bae0
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x62ed1fc 0x715cc3bbc0
	AnimInstance* GetAnimInstance();// 0x62ef3fc 0x715cc3bca0
	class Object GetAnimClass();// 0x62ef430 0x715cc3bd80
	byte GetAnimationMode();// 0x62eecdc 0x715cc3be60
	bool GetAllowRigidBodyAnimNode();// 0x62ee060 0x715cc3bf40
	bool GetAllowedAnimCurveEvaluate();// 0x62ede10 0x715cc3c020
	void ForceClothNextUpdateTeleportAndReset();// 0x62ee2b8 0x715cc3c100
	void ForceClothNextUpdateTeleport();// 0x62ee2cc 0x715cc3c1e0
	FName FindConstraintBoneName(int ConstraintIndex);// 0x62ebff4 0x715cc3c2c0
	void ClearMorphTargets();// 0x62ee53c 0x715cc3c3a0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x62ebecc 0x715cc3c480
	void BindClothToMasterPoseComponent();// 0x62ee230 0x715cc3c560
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x62edd20 0x715cc3c640
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x62eceac 0x715cc3c720
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x62ed038 0x715cc3c800
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x62ec6dc 0x715cc3c8e0

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4868f80
	SkeletalMesh* SkeletalMesh;//[Offset: 0x440, Size: 0x8] 0x715cc4f100
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x448, Size: 0x8] 0x715cc4f180
	enum[] SkinCacheUsage;//[Offset: 0x450, Size: 0x10] 0x715cb2baa0
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x558, Size: 0x8] 0x715cc4f280
	int ForcedLodModel;//[Offset: 0x560, Size: 0x4] 0x715cc4f300
	int MinLodModel;//[Offset: 0x564, Size: 0x4] 0x715cc4f380
	float StreamingDistanceMultiplier;//[Offset: 0x570, Size: 0x4] 0x715cc4f400
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x580, Size: 0x10] 0x715cb2bb40
	enum VisibilityBasedAnimTickOption;//[Offset: 0x5b4, Size: 0x1] 0x715cb2bbe0
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b6, Size: 0x1] 0x715cc4f580
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b6, Size: 0x1] 0x715cc4f600
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b6, Size: 0x1] 0x715cc4f680
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b6, Size: 0x1] 0x715cc4f700
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b6, Size: 0x1] 0x715cc4f780
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b6, Size: 0x1] 0x715cc4d700
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b7, Size: 0x1] 0x715cc4d780
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b7, Size: 0x1] 0x715cc4d800
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b7, Size: 0x1] 0x715cc4d880
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b7, Size: 0x1] 0x715cc4d900
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b7, Size: 0x1] 0x715cc4d980
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b7, Size: 0x1] 0x715cc4da00
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b7, Size: 0x1] 0x715cc4da80
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b7, Size: 0x1] 0x715cc4db00
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b8, Size: 0x1] 0x715cc4db80
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b8, Size: 0x1] 0x715cc4dc00
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b8, Size: 0x1] 0x715cc4dc80
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b8, Size: 0x1] 0x715cc4dd00
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b8, Size: 0x1] 0x715cc4dd80
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b8, Size: 0x1] 0x715cc4de00
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b9, Size: 0x1] 0x715cc4de80
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5bc, Size: 0x4] 0x715cc4df00
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x5d0, Size: 0x1c] 0x715cc4df80
	Matrix CachedWorldToLocalTransform;//[Offset: 0x5f0, Size: 0x40] 0x715cc4e000
	void UnloadSkinWeightProfile(FName InProfileName);// 0x62f57b8 0x715cc38120
	void UnHideBoneByName(FName BoneName);// 0x62f4e50 0x715cc38200
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x62f532c 0x715cc382e0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x62f516c 0x715cc383c0
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x62f4c28 0x715cc384a0
	void ShowAllMaterialSections(int LODIndex);// 0x62f4b84 0x715cc38580
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x62f5b70 0x715cc38660
	bool SetSkinWeightProfile(FName InProfileName);// 0x62f5870 0x715cc38740
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x62f59c4 0x715cc38820
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x62f5f80 0x715cc38900
	void SetRenderStatic(bool bNewValue);// 0x62f49e8 0x715cc389e0
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x62f665c 0x715cc38ac0
	void SetMinLOD(int InNewMinLOD);// 0x62f6584 0x715cc38ba0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x62f568c 0x715cc38c80
	void SetForcedLOD(int InNewForcedLOD);// 0x62f64e0 0x715cc38d60
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x62f6354 0x715cc38e40
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x62f6400 0x715cc38f20
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x62f62b0 0x715cc39000
	bool IsUsingSkinWeightProfile();// 0x62f577c 0x715cc35720
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x62f4a94 0x715cc35800
	bool IsBoneHiddenByName(FName BoneName);// 0x62f4da0 0x715cc358e0
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x62f4ef4 0x715cc359c0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x62f5c78 0x715cc35aa0
	FName GetSocketBoneName(FName InSocketName);// 0x62f6078 0x715cc35b80
	Vector GetRefPosePosition(int BoneIndex);// 0x62f54ec 0x715cc35c60
	FName GetParentBone(FName BoneName);// 0x62f5ed4 0x715cc35d40
	int GetNumLODs();// 0x62f6628 0x715cc35e20
	int GetNumBones();// 0x62f627c 0x715cc35f00
	int GetForcedLOD();// 0x62f64ac 0x715cc35fe0
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x62f5dd8 0x715cc360c0
	FName GetCurrentSkinWeightProfileName();// 0x62f579c 0x715cc361a0
	FName GetBoneName(int BoneIndex);// 0x62f6124 0x715cc36280
	int GetBoneIndex(FName BoneName);// 0x62f61d0 0x715cc36360
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x62f4fdc 0x715cc36440
	void ClearVertexColorOverride(int LODIndex);// 0x62f5acc 0x715cc36520
	void ClearSkinWeightProfile();// 0x62f585c 0x715cc36600
	void ClearSkinWeightOverride(int LODIndex);// 0x62f5920 0x715cc366e0
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x62f559c 0x715cc367c0

--------------------------------
Class: SkelMeshSkinWeightInfo // 715ce75e00
	int Bones;//[Offset: 0x0, Size: 0x4] 0x715ce85080
	byte Weights;//[Offset: 0x30, Size: 0x1] 0x715ce85100

--------------------------------
Class: AnimInstance.Object // 71a4869480
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8] 0x715cff5a80
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1] 0x715cff5b00
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x715cff5b80
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1] 0x715cff5c00
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1] 0x715cff5c80
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1] 0x715cff5d00
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1] 0x715cff5d80
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10] 0x715cff5e00
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10] 0x715cff5e80
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10] 0x715cff5f00
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10] 0x715cff5f80
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70] 0x715cff6000
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10] 0x715cf93580
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x60de99c 0x715cfde320
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x60dffb8 0x715cfde400
	Pawn* TryGetPawnOwner();// 0x60e1c48 0x715cfde4e0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x60e1350 0x715cfde5c0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x60e1abc 0x715cfde6a0
	void SetRootMotionMode(byte Value);// 0x60dfdbc 0x715cfdadc0
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x60e19e8 0x715cfdaea0
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x60e1914 0x715cfdaf80
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x60decb4 0x715cfdb060
	void SavePoseSnapshot(FName SnapshotName);// 0x60e1b9c 0x715cfdb140
	void ResetDynamics(enum InTeleportType);// 0x60de484 0x715cfdb220
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x60e1438 0x715cfdb300
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x60e16b4 0x715cfdb3e0
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x60e0ecc 0x715cfdb4c0
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x60e0fb4 0x715cfdb5a0
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x60e060c 0x715cfdb680
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x60e09ac 0x715cfdb760
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x60e0a94 0x715cfdb840
	void Montage_Resume(const AnimMontage* Montage);// 0x60e0d84 0x715cfdb920
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x60e109c 0x715cfdba00
	void Montage_Pause(const AnimMontage* Montage);// 0x60e0e28 0x715cfdbae0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x60e0bbc 0x715cfdbbc0
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x60e0ca0 0x715cfdbca0
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x60e084c 0x715cfdbd80
	bool Montage_IsActive(const AnimMontage* Montage);// 0x60e08fc 0x715cfdbe60
	float Montage_GetPosition(const AnimMontage* Montage);// 0x60e06f4 0x715cfdbf40
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x60e0404 0x715cfdc020
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x60e055c 0x715cfdc100
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x60e07a0 0x715cfdc1e0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x60e04b0 0x715cfdc2c0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x60dea98 0x715cfdc3a0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x60e0100 0x715cfdc480
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x60e005c 0x715cfdc560
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x60de5e4 0x715cfdc640
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x60e1260 0x715cfdc720
	bool IsAnyMontagePlaying();// 0x60e03cc 0x715cfdc800
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x60de764 0x715cfdc8e0
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x60de854 0x715cfdc9c0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x60de528 0x715cfd90e0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x60df380 0x715cfd91c0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x60df46c 0x715cfd92a0
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x60df0bc 0x715cfd9380
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x60df1a8 0x715cfd9460
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x60df294 0x715cfd9540
	bool GetReceiveNotifiesFromLinkedInstances();// 0x60e1a9c 0x715cfd9620
	bool GetPropagateNotifiesToLinkedInstances();// 0x60e19c8 0x715cfd9700
	SkeletalMeshComponent* GetOwningComponent();// 0x60e18ac 0x715cfd97e0
	Actor* GetOwningActor();// 0x60e18e0 0x715cfd98c0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x60dff0c 0x715cfd99a0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x60dfe60 0x715cfd9a80
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x60e01e4 0x715cfd9b60
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x60e02ec 0x715cfd9c40
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x60df558 0x715cfd9d20
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x60df644 0x715cfd9e00
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x60df730 0x715cfd9ee0
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x60df8c8 0x715cfd9fc0
	float GetInstanceMachineWeight(int MachineIndex);// 0x60df9b4 0x715cfda0a0
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x60df81c 0x715cfda180
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x60dfa60 0x715cfda260
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x60dfb0c 0x715cfda340
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x60dfbb8 0x715cfda420
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x60dfc64 0x715cfda500
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x60dfd10 0x715cfda5e0
	float GetCurveValue(FName CurveName);// 0x60df010 0x715cfda6c0
	FName GetCurrentStateName(int MachineIndex);// 0x60ded9c 0x715cfda7a0
	AnimMontage* GetCurrentActiveMontage();// 0x60e0398 0x715cfda880
	void GetAllCurveNames(out FName[] OutNames);// 0x60dee48 0x715cfda960
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x60def08 0x715cfdaa40
	void ClearMorphTargets();// 0x60deca0 0x715cfdab20
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x60deb94 0x715cfdac00
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x45c6aa0 0x715cfdace0
	void BlueprintPostEvaluateAnimation();// 0x45c6aa0 0x715cfd7400
	void BlueprintLinkedAnimationLayersInitialized();// 0x45c6aa0 0x715cfd74e0
	void BlueprintInitializeAnimation();// 0x45c6aa0 0x715cfd75c0
	void BlueprintBeginPlay();// 0x45c6aa0 0x715cfd76a0

--------------------------------
Class: PoseSnapshot // 715dad61c0
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10] 0x715dae1a00
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10] 0x715dae1aa0
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8] 0x715daf2700
	FName SnapshotName;//[Offset: 0x28, Size: 0x8] 0x715daf2780
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715daf2800

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object // 71a49d1c80
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10] 0x715ca7bc80
	float SequenceLength;//[Offset: 0x90, Size: 0x4] 0x715caf8780
	float RateScale;//[Offset: 0x94, Size: 0x4] 0x715caf8800
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10] 0x715caf8880
	float GetPlayLength();// 0x60f601c 0x715cae7860

--------------------------------
Class: AnimationAsset.Object // 71a49d3f80
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x715caf6a80
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10] 0x715ca7cb80
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x715ca7cc20

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement // 715db10e80
	float DisplayTime;//[Offset: 0x30, Size: 0x4] 0x715db0f180
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4] 0x715db0f200
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4] 0x715db0f280
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4] 0x715db0f300
	FName NotifyName;//[Offset: 0x40, Size: 0x8] 0x715db0f380
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8] 0x715db0f400
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8] 0x715db0f480
	float Duration;//[Offset: 0x58, Size: 0x4] 0x715db0f500
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30] 0x715db0f580
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x715db0f600
	byte MontageTickType;//[Offset: 0x91, Size: 0x1] 0x715db0f680
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4] 0x715db0f700
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1] 0x715db0f780
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4] 0x715db0d700
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x715db0d780
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1] 0x715db0d800
	int TrackIndex;//[Offset: 0xa4, Size: 0x4] 0x715db0d880

--------------------------------
Class: AnimLinkableElement // 715db11000
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8] 0x715db0db80
	int SlotIndex;//[Offset: 0x10, Size: 0x4] 0x715db0dc00
	int SegmentIndex;//[Offset: 0x14, Size: 0x4] 0x715db0dc80
	byte LinkMethod;//[Offset: 0x18, Size: 0x1] 0x715db0dd00
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1] 0x715db0dd80
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4] 0x715db0de00
	float SegmentLength;//[Offset: 0x20, Size: 0x4] 0x715db0de80
	float LinkValue;//[Offset: 0x24, Size: 0x4] 0x715db0df00
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8] 0x715db0df80

--------------------------------
Class: AnimNotify.Object // 71a48f2900
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x45c6aa0 0x715d130a20
	FString GetNotifyName();// 0x60f3c7c 0x715d130b00

--------------------------------
Class: AnimNotifyState.Object // 71a483b280
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x45c6aa0 0x715cf73340
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x45c6aa0 0x715cf73420
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x45c6aa0 0x715cf73500
	FString GetNotifyName();// 0x60f4bb4 0x715cf735e0

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object // 71a49d9e80
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30] 0x715cafa880
	float BlendInTime;//[Offset: 0xd8, Size: 0x4] 0x715cafa900
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30] 0x715cafa980
	float BlendOutTime;//[Offset: 0x110, Size: 0x4] 0x715cafaa00
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4] 0x715cafaa80
	FName SyncGroup;//[Offset: 0x118, Size: 0x8] 0x715cafab00
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4] 0x715cafab80
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20] 0x715cafac00
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10] 0x715ca7e0c0
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10] 0x715ca7e160
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10] 0x715ca7e200
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1] 0x715cafae00
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1] 0x715cafae80
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1] 0x715cafaf00
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1] 0x715cafaf80
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10] 0x715ca7e2a0
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10] 0x715ca7ba00
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x30] 0x715cafb100
	FName TimeStretchCurveName;//[Offset: 0x1d0, Size: 0x8] 0x715cafb180
	float GetSectionLength(int SectionIndex);// 0x60ea2ec 0x715cae75c0
	int GetSectionIndex(FName InSectionName);// 0x60ea240 0x715cae76a0
	float GetDefaultBlendOutTime();// 0x60ea398 0x715cae7780

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object // 71a49d1f00

--------------------------------
Class: AlphaBlend // 715da3a9c0
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8] 0x715da55080
	float BlendTime;//[Offset: 0x8, Size: 0x4] 0x715da55100
	enum BlendOption;//[Offset: 0x24, Size: 0x1] 0x715d896a00

--------------------------------
Class: MarkerSyncData // 715db11b40
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10] 0x715dae7fe0

--------------------------------
Class: AnimSyncMarker // 715db11a80
	FName MarkerName;//[Offset: 0x0, Size: 0x8] 0x715db23e00
	float Time;//[Offset: 0x8, Size: 0x4] 0x715db23e80

--------------------------------
Class: CompositeSection.AnimLinkableElement // 715db10b80
	FName SectionName;//[Offset: 0x30, Size: 0x8] 0x715db0e900
	float StartTime;//[Offset: 0x38, Size: 0x4] 0x715db0e980
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8] 0x715db0ea00
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10] 0x715dae6d20

--------------------------------
Class: AnimMetaData.Object // 71a48fdd00

--------------------------------
Class: SlotAnimationTrack // 715db10c40
	FName SlotName;//[Offset: 0x0, Size: 0x8] 0x715db0eb00
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10] 0x715db0eb80

--------------------------------
Class: AnimTrack // 715dadf940
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10] 0x715dae7180

--------------------------------
Class: AnimSegment // 715dadf880
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8] 0x715db0ce80
	float StartPos;//[Offset: 0x8, Size: 0x4] 0x715db0cf00
	float AnimStartTime;//[Offset: 0xc, Size: 0x4] 0x715db0cf80
	float AnimEndTime;//[Offset: 0x10, Size: 0x4] 0x715db0d000
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4] 0x715db0d080
	int LoopingCount;//[Offset: 0x18, Size: 0x4] 0x715db0d100

--------------------------------
Class: BranchingPoint.AnimLinkableElement // 715db10d00
	FName EventName;//[Offset: 0x30, Size: 0x8] 0x715db0ec00
	float DisplayTime;//[Offset: 0x38, Size: 0x4] 0x715db0ec80
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4] 0x715db0ed00

--------------------------------
Class: BranchingPointMarker // 715db10dc0
	int NotifyIndex;//[Offset: 0x0, Size: 0x4] 0x715db0ed80
	float TriggerTime;//[Offset: 0x4, Size: 0x4] 0x715db0ee00
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1] 0x715db0ee80

--------------------------------
Class: TimeStretchCurve // 715ce78800
	float SamplingRate;//[Offset: 0x0, Size: 0x4] 0x715ce8fd00
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4] 0x715ce8fd80
	bool bForceMarkersForCurveKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715ce8fe00
	TimeStretchCurveMarker[] Markers;//[Offset: 0x10, Size: 0x10] 0x715ce91460
	float Sum_dT_i_by_C_i;//[Offset: 0x20, Size: 0x4] 0x715ce8e780

--------------------------------
Class: TimeStretchCurveMarker // 715ce78740
	float Time;//[Offset: 0x0, Size: 0x4] 0x715ce8fe80
	float Alpha;//[Offset: 0xc, Size: 0x4] 0x715ce8ff00

--------------------------------
Class: RawCurveTracks // 715db11780
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10] 0x715dae70e0

--------------------------------
Class: FloatCurve.AnimCurveBase // 715db11540
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80] 0x715db0ca00

--------------------------------
Class: AnimCurveBase // 715db116c0
	FName LastObservedName;//[Offset: 0x0, Size: 0x8] 0x715db0ca80
	SmartName Name;//[Offset: 0x8, Size: 0xc] 0x715db0cb80
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4] 0x715db0cc00

--------------------------------
Class: SmartName // 715db11600
	FName DisplayName;//[Offset: 0x0, Size: 0x8] 0x715db0cb00

--------------------------------
Class: Skeleton.Object // 71a49de200
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10] 0x715cb2eac0
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10] 0x715cb2eb60
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10] 0x715cc63100
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10] 0x715cb2ec00
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10] 0x715cb2eca0
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50] 0x715cc61180
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10] 0x715cb2ed40
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10] 0x715cb2ede0
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10] 0x715cb2ee80

--------------------------------
Class: BoneNode // 715ce76040
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715ce83200
	int ParentIndex;//[Offset: 0x8, Size: 0x4] 0x715ce83280
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1] 0x715ce83300

--------------------------------
Class: VirtualBone // 715ce73340
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8] 0x715ce83800
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8] 0x715ce83880
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8] 0x715ce83900

--------------------------------
Class: SkeletalMeshSocket.Object // 71a4ad6a00
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x715cc61380
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x715cc61400
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc] 0x715cc61480
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x715cc61500
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc] 0x715cc61580
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x715cc61600
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x62f3798 0x715cc3ecc0
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x62f38bc 0x715cc3eda0

--------------------------------
Class: SmartNameContainer // 715ce75b00

--------------------------------
Class: BlendProfile.Object // 71a49de480
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8] 0x715cb03400
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10] 0x715ca7eca0

--------------------------------
Class: BlendProfileBoneEntry // 715db131c0
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x715db26780
	float BlendScale;//[Offset: 0x10, Size: 0x4] 0x715db26800

--------------------------------
Class: BoneReference // 715da3a480
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x715da55e80

--------------------------------
Class: AnimSlotGroup // 715ce73280
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x715ce83700
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10] 0x715daef100

--------------------------------
Class: MarkerSyncAnimPosition // 715dade800
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8] 0x715db0c600
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8] 0x715db0a580
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4] 0x715db0a600

--------------------------------
Class: AnimNotifyQueue // 715db12bc0
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10] 0x715dae8ee0
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50] 0x715db12b00

--------------------------------
Class: AnimNotifyEventReference // 715db12980
	Object* NotifySource;//[Offset: 0x8, Size: 0x8] 0x715db21c00

--------------------------------
Class: AnimNotifyArray // 715db12a40
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10] 0x715dae8f80

--------------------------------
Class: SingleAnimationPlayData // 715ce74240
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8] 0x715ce80880
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715ce80900
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x715ce80980
	float SavedPosition;//[Offset: 0xc, Size: 0x4] 0x715ce80a00
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4] 0x715ce80a80

--------------------------------
Class: ClothingSimulationInteractor.Object // 71a49c6500
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x57a568c 0x715cae1ac0
	void PhysicsAssetUpdated();// 0x57a5754 0x715cae1ba0
	void EnableGravityOverride(out const Vector InVector);// 0x57a55d4 0x715cae1c80
	void DisableGravityOverride();// 0x57a55b8 0x715cabe780
	void ClothConfigUpdated();// 0x57a5738 0x715cabe860

--------------------------------
Class: ClothingSimulationFactory.Object // 71a49c6780

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object // 71a4ad7680
	Skeleton* Skeleton;//[Offset: 0x60, Size: 0x8] 0x715cc5ae80
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 0x1c] 0x715cc5af00
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 0x1c] 0x715cc5af80
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 0xc] 0x715cc5b000
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 0xc] 0x715cc5b080
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 0x10] 0x715cb2d120
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 0x10] 0x715cb2d1c0
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 0x10] 0x715cb2d260
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 0x4] 0x715cc5b280
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x13c, Size: 0x1] 0x715cc5b300
	byte SkelMirrorAxis;//[Offset: 0x13d, Size: 0x1] 0x715cc5b380
	byte SkelMirrorFlipAxis;//[Offset: 0x13e, Size: 0x1] 0x715cc5b400
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13f, Size: 0x1] 0x715cc5b480
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13f, Size: 0x1] 0x715cc5b500
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13f, Size: 0x1] 0x715cc5b580
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13f, Size: 0x1] 0x715cc59500
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13f, Size: 0x1] 0x715cc59580
	BodySetup* BodySetup;//[Offset: 0x140, Size: 0x8] 0x715cc59600
	PhysicsAsset* PhysicsAsset;//[Offset: 0x148, Size: 0x8] 0x715cc59680
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x150, Size: 0x8] 0x715cc59700
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x158, Size: 0x10] 0x715cb2d300
	MorphTarget*[] MorphTargets;//[Offset: 0x168, Size: 0x10] 0x715cb2d3a0
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f0, Size: 0x8] 0x715cb2d440
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x2f8, Size: 0x10] 0x715cb2d4e0
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x308, Size: 0x30] 0x715cc59900
	AssetUserData*[] AssetUserData;//[Offset: 0x338, Size: 0x10] 0x715cb2d580
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x350, Size: 0x10] 0x715cb2d620
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x370, Size: 0x10] 0x715cb2d6c0
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x62e7a2c 0x715cc39380
	int NumSockets();// 0x62e74bc 0x715cc39460
	FString[] K2_GetAllMorphTargetNames();// 0x62e7868 0x715cc39540
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x62e7318 0x715cc39620
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x62e7410 0x715cc39700
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x62e7980 0x715cc397e0
	BoxSphereBounds GetImportedBounds();// 0x62e7ad0 0x715cc398c0
	BoxSphereBounds GetBounds();// 0x62e7b3c 0x715cc399a0
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x62e74f0 0x715cc39a80
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x62e76b8 0x715cc39b60
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x62e77bc 0x715cc39c40

--------------------------------
Class: SkeletalMaterial // 715ce74180
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x715ce80700
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x715ce80780
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14] 0x715ce80800

--------------------------------
Class: BoneMirrorInfo // 715ce73c40
	int SourceIndex;//[Offset: 0x0, Size: 0x4] 0x715ce82400
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1] 0x715ce82480

--------------------------------
Class: SkeletalMeshLODInfo // 715ce73f40
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x715ce82a80
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x715ce82b00
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10] 0x715daef6a0
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14] 0x715ce82c00
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c] 0x715ce81600
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10] 0x715daef740
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10] 0x715daecea0
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4] 0x715ce81780
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8] 0x715ce81800
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8] 0x715ce81880
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10] 0x715ce81900
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1] 0x715daecf40
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x715ce81a00
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x715ce81a80
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x715ce81b00
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x715ce81b80

--------------------------------
Class: SkeletalMeshBuildSettings // 715db1a0c0
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715db40700
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715db40780
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715db40800
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715db40880
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715db40900
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715db40980
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715db40a00
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x715db40a80
	bool bOptimizeForCPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x715db40b00
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4] 0x715db40b80
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4] 0x715db40c00
	float ThresholdUV;//[Offset: 0xc, Size: 0x4] 0x715db40c80
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4] 0x715db40d00

--------------------------------
Class: SkeletalMeshOptimizationSettings // 715ce73e80
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1] 0x715ce82c80
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4] 0x715ce82d00
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4] 0x715ce82d80
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4] 0x715ce82e00
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4] 0x715ce82e80
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4] 0x715ce82f00
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1] 0x715ce82f80
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1] 0x715ce83000
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1] 0x715ce83080
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1] 0x715ce83100
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1] 0x715ce83180
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x715ce81100
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x715ce81180
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4] 0x715ce81200
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4] 0x715ce81280
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4] 0x715ce81300
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x715ce81380
	float VolumeImportance;//[Offset: 0x30, Size: 0x4] 0x715ce81400
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x715ce81480
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1] 0x715ce81500
	int BaseLOD;//[Offset: 0x38, Size: 0x4] 0x715ce81580

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object // 71a49d8580
	int NumFrames;//[Offset: 0xa8, Size: 0x4] 0x715cafd580
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10] 0x715ca7dee0
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8] 0x715cafd680
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8] 0x715cafb600
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1] 0x715cafb680
	byte RefPoseType;//[Offset: 0x151, Size: 0x1] 0x715cafb700
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8] 0x715cafb780
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4] 0x715cafb800
	FName RetargetSource;//[Offset: 0x164, Size: 0x8] 0x715cafb880
	enum Interpolation;//[Offset: 0x16c, Size: 0x1] 0x715ca7df80
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1] 0x715cafb980
	bool bIgnoreStripDataOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1] 0x715cafba00
	byte RootMotionRootLock;//[Offset: 0x16f, Size: 0x1] 0x715cafba80
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1] 0x715cafbb00
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1] 0x715cafbb80
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1] 0x715cafbc00
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10] 0x715ca7e020

--------------------------------
Class: TrackToSkeletonMap // 715db11c00
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4] 0x715db23f80

--------------------------------
Class: AnimBoneCompressionSettings.Object // 71a49d2900
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10] 0x715ca7c540

--------------------------------
Class: AnimBoneCompressionCodec.Object // 71a49d2b80
	FString Description;//[Offset: 0x28, Size: 0x10] 0x715caf9400

--------------------------------
Class: AnimCurveCompressionSettings.Object // 71a49da380
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8] 0x715cafb480

--------------------------------
Class: AnimCurveCompressionCodec.Object // 71a49d0880

--------------------------------
Class: PerPlatformBool // 715da3f280
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da5ee80

--------------------------------
Class: PhysicsAsset.Object // 71a4accb80
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10] 0x715cb2c5e0
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10] 0x715cb2c680
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10] 0x715cb2c720
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18] 0x715cc42300
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715cc42380
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8] 0x715cc42400
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10] 0x715cb2c7c0

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object // 71a4acc900
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x715cc44180
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 0x10] 0x715cb2c540

--------------------------------
Class: PhysicalAnimationProfile // 715ce70400
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x715ce6b280
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24] 0x715ce6b300

--------------------------------
Class: PhysicalAnimationData // 715ce70580
	FName BodyName;//[Offset: 0x0, Size: 0x8] 0x715ce6b480
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715ce6b500
	float OrientationStrength;//[Offset: 0xc, Size: 0x4] 0x715ce6b580
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4] 0x715ce69500
	float PositionStrength;//[Offset: 0x14, Size: 0x4] 0x715ce69580
	float VelocityStrength;//[Offset: 0x18, Size: 0x4] 0x715ce69600
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4] 0x715ce69680
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4] 0x715ce69700

--------------------------------
Class: PhysicsConstraintTemplate.Object // 71a4acbc80
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8] 0x715cc45b00
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10] 0x715cb2c4a0
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104] 0x715cc45c00

--------------------------------
Class: ConstraintInstance // 715db16640
	FName JointName;//[Offset: 0x18, Size: 0x8] 0x715db3ad00
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8] 0x715db3ad80
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8] 0x715db3ae00
	Vector Pos1;//[Offset: 0x30, Size: 0xc] 0x715db3ae80
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc] 0x715db3af00
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc] 0x715db3af80
	Vector Pos2;//[Offset: 0x54, Size: 0xc] 0x715db3b000
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc] 0x715db3b080
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc] 0x715db3b100
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc] 0x715db3b180
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1] 0x715db3b200
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104] 0x715db3a000

--------------------------------
Class: ConstraintProfileProperties // 715db16580
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4] 0x715db3b280
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4] 0x715db3b300
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4] 0x715db3b380
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4] 0x715db3b400
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c] 0x715db39580
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20] 0x715db39800
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c] 0x715db39c00
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c] 0x715db39c80
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c] 0x715db39d00
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x715db39d80
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1] 0x715db39e00
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1] 0x715db39e80
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1] 0x715db39f00
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1] 0x715db39f80

--------------------------------
Class: LinearConstraint.ConstraintBaseParams // 715db19400
	float Limit;//[Offset: 0x14, Size: 0x4] 0x715db3b480
	byte XMotion;//[Offset: 0x18, Size: 0x1] 0x715db3b500
	byte YMotion;//[Offset: 0x19, Size: 0x1] 0x715db3b580
	byte ZMotion;//[Offset: 0x1a, Size: 0x1] 0x715db39500

--------------------------------
Class: ConstraintBaseParams // 715db164c0
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x715db39980
	float Damping;//[Offset: 0x4, Size: 0x4] 0x715db39a00
	float Restitution;//[Offset: 0x8, Size: 0x4] 0x715db39a80
	float ContactDistance;//[Offset: 0xc, Size: 0x4] 0x715db39b00
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x715db39b80

--------------------------------
Class: ConeConstraint.ConstraintBaseParams // 715db16340
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4] 0x715db39600
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4] 0x715db39680
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1] 0x715db39700
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1] 0x715db39780

--------------------------------
Class: TwistConstraint.ConstraintBaseParams // 715db16400
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4] 0x715db39880
	byte TwistMotion;//[Offset: 0x18, Size: 0x1] 0x715db39900

--------------------------------
Class: LinearDriveConstraint // 715db16700
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc] 0x715db3a080
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc] 0x715db3a100
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10] 0x715db3a180
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10] 0x715db3a200
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10] 0x715db3a280
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715db3a300

--------------------------------
Class: ConstraintDrive // 715db167c0
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x715db3a480
	float Damping;//[Offset: 0x4, Size: 0x4] 0x715db3a500
	float MaxForce;//[Offset: 0x8, Size: 0x4] 0x715db38480
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715db38500
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x715db38580

--------------------------------
Class: AngularDriveConstraint // 715db16880
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10] 0x715db3a380
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10] 0x715db3a400
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10] 0x715db38600
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc] 0x715db38680
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc] 0x715db38700
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1] 0x715db38780

--------------------------------
Class: PhysicsConstraintProfileHandle // 715ce70340
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104] 0x715ce6b180
	FName ProfileName;//[Offset: 0x104, Size: 0x8] 0x715ce6b200

--------------------------------
Class: SolverIterations // 715dad5c80
	int SolverIterations;//[Offset: 0x0, Size: 0x4] 0x715daf3e00
	int JointIterations;//[Offset: 0x4, Size: 0x4] 0x715daf3e80
	int CollisionIterations;//[Offset: 0x8, Size: 0x4] 0x715daf3f00
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4] 0x715daf3f80
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4] 0x715daf4000
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4] 0x715daf4080

--------------------------------
Class: ThumbnailInfo.Object // 71a4ae0380

--------------------------------
Class: NodeMappingContainer.Object // 71a4aa8580
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50] 0x715cece080
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50] 0x715cece140
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50] 0x715cece200
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28] 0x715cc1d180
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28] 0x715cc1d200

--------------------------------
Class: NodeItem // 715ce71540
	FName ParentName;//[Offset: 0x0, Size: 0x8] 0x715ce65400
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x715ce65480

--------------------------------
Class: MorphTarget.Object // 71a4aa0b00
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8] 0x715cc1bc80

--------------------------------
Class: ClothingAssetBase.Object // 71a49c6a00
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10] 0x715cadd680
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10] 0x715cadb600

--------------------------------
Class: SkeletalMeshSamplingInfo // 715ce73880
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10] 0x715daef2e0
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20] 0x715ce83f80

--------------------------------
Class: SkeletalMeshSamplingRegion // 715ce73580
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715ce83980
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x715ce83a00
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715ce83a80
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10] 0x715daef1a0
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10] 0x715daef240

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter // 715ce73400
	FName MaterialName;//[Offset: 0x0, Size: 0x8] 0x715ce83b00

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter // 715ce734c0
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x715ce83c00
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715ce83c80
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x715ce83d00

--------------------------------
Class: SkeletalMeshSamplingBuiltData // 715ce737c0
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10] 0x715daef380
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10] 0x715daef420

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData // 715ce73640

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData // 715ce73700

--------------------------------
Class: SkinWeightProfileInfo // 715ce75d40
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715ce84f00
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1] 0x715ce84f80
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4] 0x715ce85000

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object // 71a4ad6f00
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4] 0x715cc61980
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1] 0x715cc61a00
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1] 0x715cc61a80
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4] 0x715cc61b00
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4] 0x715cc61b80
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10] 0x715cb2ef20

--------------------------------
Class: SkeletalMeshLODGroupSettings // 715ce73a00
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x715ce84000
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x715ce84080
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1] 0x715daef4c0
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10] 0x715daef560
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10] 0x715daef600
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4] 0x715ce82280
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8] 0x715ce82300
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c] 0x715ce82380

--------------------------------
Class: BoneFilter // 715ce73940
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715ce84180
	FName BoneName;//[Offset: 0x4, Size: 0x8] 0x715ce84200

--------------------------------
Class: Blueprint.BlueprintCore.Object // 719b179980
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8] 0x715ce99de0
	byte BlueprintType;//[Offset: 0x58, Size: 0x1] 0x715cf18a00
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x715cf18a80
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x715cf18b00
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x715cf18b80
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4] 0x715cf18c00
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8] 0x715cf18c80
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10] 0x715ce99e80
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10] 0x715ce99f20
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10] 0x715ce99fc0
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8] 0x715cf18e80

--------------------------------
Class: BlueprintCore.Object // 719b179700
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8] 0x715ce9a060
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8] 0x715ce9a100
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cf18f00
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10] 0x715cf18f80

--------------------------------
Class: SimpleConstructionScript.Object // 71a4ad7900
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10] 0x715cb2d800
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10] 0x715cb2d8a0
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8] 0x715cc58600

--------------------------------
Class: SCS_Node.Object // 71a4ad8300
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8] 0x715cb2d940
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8] 0x715cc57e80
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48] 0x715cc57f00
	FName AttachToName;//[Offset: 0x80, Size: 0x8] 0x715cc57f80
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8] 0x715cc58000
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8] 0x715cc58080
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x715cc58100
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10] 0x715cb2d9e0
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10] 0x715cb2da80
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10] 0x715cc58280
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8] 0x715cc58300

--------------------------------
Class: BlueprintCookedComponentInstancingData // 715db15680
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10] 0x715dae9ac0
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x715db28c00

--------------------------------
Class: BlueprintComponentChangedPropertyInfo // 715db155c0
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x715db28a00
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x715db28a80
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8] 0x715db28b00

--------------------------------
Class: BPVariableMetaDataEntry // 715db15b00
	FName DataKey;//[Offset: 0x0, Size: 0x8] 0x715db27b00
	FString DataValue;//[Offset: 0x8, Size: 0x10] 0x715db27b80

--------------------------------
Class: TimelineTemplate.Object // 71a4aea380
	float TimelineLength;//[Offset: 0x28, Size: 0x4] 0x715cc91900
	byte LengthMode;//[Offset: 0x2c, Size: 0x1] 0x715cc91980
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x715cc91a00
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x715cc91a80
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1] 0x715cc91b00
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1] 0x715cc91b80
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10] 0x715cc80ce0
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10] 0x715cc80d80
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10] 0x715cc80e20
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10] 0x715cc80ec0
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10] 0x715cc80f60
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10] 0x715cc91e80
	FName VariableName;//[Offset: 0x90, Size: 0x8] 0x715cc91f00
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8] 0x715cc91f80
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8] 0x715cc92000
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8] 0x715cc92080

--------------------------------
Class: TTEventTrack.TTTrackBase // 715ce78980
	FName FunctionName;//[Offset: 0x14, Size: 0x8] 0x715ce8e880
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8] 0x715ce8e900

--------------------------------
Class: TTTrackBase // 715ce78d40
	FName TrackName;//[Offset: 0x8, Size: 0x8] 0x715ce8eb80
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715ce8ec00

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase // 715ce78a40
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8] 0x715ce8e980

--------------------------------
Class: TTPropertyTrack.TTTrackBase // 715ce78c80
	FName PropertyName;//[Offset: 0x14, Size: 0x8] 0x715ce8eb00

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase // 715ce78b00
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8] 0x715ce8ea00

--------------------------------
Class: CurveVector.CurveBase.Object // 71a4a1a380
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x715cb35300
	Vector GetVectorValue(float InTime);// 0x614cc94 0x715cb15720

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase // 715ce78bc0
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8] 0x715ce8ea80

--------------------------------
Class: CurveLinearColor.CurveBase.Object // 71a4a10880
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x715cb35d00
	float AdjustHue;//[Offset: 0x230, Size: 0x4] 0x715cb35d80
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4] 0x715cb35e00
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4] 0x715cb35e80
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4] 0x715cb35f00
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4] 0x715cb35f80
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4] 0x715cb36000
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4] 0x715cb36080
	LinearColor GetLinearColorValue(float InTime);// 0x614b828 0x715cb15d40
	LinearColor GetClampedLinearColorValue(float InTime);// 0x614b770 0x715cb15e20

--------------------------------
Class: BPComponentClassOverride // 715db15740
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x715db28c80
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8] 0x715dae9b60

--------------------------------
Class: InheritableComponentHandler.Object // 71a4a22e00
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10] 0x715cb24c00
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10] 0x715cb24ca0

--------------------------------
Class: ComponentOverrideRecord // 715db1b500
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8] 0x715daea560
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8] 0x715db48200
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20] 0x715db48380
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48] 0x715db48400

--------------------------------
Class: ComponentKey // 715db1b440
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8] 0x715daea600
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8] 0x715db48280
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10] 0x715db48300

--------------------------------
Class: SkelMeshComponentLODInfo // 715ce75ec0
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10] 0x715daeed40

--------------------------------
Class: Matrix // 717dfc9040
	Plane XPlane;//[Offset: 0x0, Size: 0x10] 0x717df89e00
	Plane YPlane;//[Offset: 0x10, Size: 0x10] 0x717df89e80
	Plane ZPlane;//[Offset: 0x20, Size: 0x10] 0x717df89f00
	Plane WPlane;//[Offset: 0x30, Size: 0x10] 0x717df89f80

--------------------------------
Class: ParticleSysParam // 715ce70940
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715ce69780
	byte ParamType;//[Offset: 0x8, Size: 0x1] 0x715ce69800
	float Scalar;//[Offset: 0xc, Size: 0x4] 0x715ce69880
	float Scalar_Low;//[Offset: 0x10, Size: 0x4] 0x715ce69900
	Vector Vector;//[Offset: 0x14, Size: 0xc] 0x715ce69980
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc] 0x715ce69a00
	Color Color;//[Offset: 0x2c, Size: 0x4] 0x715ce69a80
	Actor* Actor;//[Offset: 0x30, Size: 0x8] 0x715ce69b00
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8] 0x715ce69b80

--------------------------------
Class: ParticleSystemReplay.Object // 71a4acdd00
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4] 0x715cc41880

--------------------------------
Class: InterpCurveEdSetup.Object // 71a4a20b00
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10] 0x715cb23ee0
	int ActiveTab;//[Offset: 0x38, Size: 0x4] 0x715cb7f000

--------------------------------
Class: CurveEdTab // 715db1db40
	FString TabName;//[Offset: 0x0, Size: 0x10] 0x715db48d00
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10] 0x715daecb80
	float ViewStartInput;//[Offset: 0x20, Size: 0x4] 0x715db49280
	float ViewEndInput;//[Offset: 0x24, Size: 0x4] 0x715db49300
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4] 0x715db49380
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4] 0x715db49400

--------------------------------
Class: CurveEdEntry // 715db1da80
	Object* CurveObject;//[Offset: 0x0, Size: 0x8] 0x715db48d80
	Color CurveColor;//[Offset: 0x8, Size: 0x4] 0x715db48e00
	FString CurveName;//[Offset: 0x10, Size: 0x10] 0x715db48e80
	int bHideCurve;//[Offset: 0x20, Size: 0x4] 0x715db48f00
	int bColorCurve;//[Offset: 0x24, Size: 0x4] 0x715db48f80
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4] 0x715db49000
	int bClamp;//[Offset: 0x2c, Size: 0x4] 0x715db49080
	float ClampLow;//[Offset: 0x30, Size: 0x4] 0x715db49100
	float ClampHigh;//[Offset: 0x34, Size: 0x4] 0x715db49180

--------------------------------
Class: ParticleSystemLOD // 715ce70a00

--------------------------------
Class: LODSoloTrack // 715ce70ac0
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10] 0x715daed800

--------------------------------
Class: NamedEmitterMaterial // 715ce70b80
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715ce69c80
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x715ce69d00

--------------------------------
Class: PSCPool // 715ce77cc0
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x715ce910a0
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10] 0x715ce91140
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10] 0x715ce911e0

--------------------------------
Class: PSCPoolElem // 715ce77c00
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8] 0x715cea0200

--------------------------------
Class: ViewTargetTransitionParams // 715ce70040
	float BlendTime;//[Offset: 0x0, Size: 0x4] 0x715ce6ac80
	byte BlendFunction;//[Offset: 0x4, Size: 0x1] 0x715ce6ad00
	float BlendExp;//[Offset: 0x8, Size: 0x4] 0x715ce6ad80
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715ce6ae00

--------------------------------
Class: UpdateLevelVisibilityLevelInfo // 715ce72f80
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x715ce6a880
	FName Filename;//[Offset: 0x8, Size: 0x8] 0x715ce6a900
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x715ce6a980

--------------------------------
Class: HapticFeedbackEffect_Base.Object // 71a4a24480

--------------------------------
Class: LatentActionInfo // 71490667c0
	int Linkage;//[Offset: 0x0, Size: 0x4] 0x715d755a00
	int UUID;//[Offset: 0x4, Size: 0x4] 0x715d755a80
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8] 0x715d755b00
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8] 0x715d755b80

--------------------------------
Class: ForceFeedbackEffect.Object // 71a4a1fb00
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10] 0x715cb23c60
	float Duration;//[Offset: 0x38, Size: 0x4] 0x715cb54480

--------------------------------
Class: ForceFeedbackChannelDetails // 715db1bc80
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715db45a00
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715db45a80
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715db45b00
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715db45b80
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88] 0x715db45c00

--------------------------------
Class: UpdateLevelStreamingLevelStatus // 715ce72ec0
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x715ce6a600
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x715ce6a680
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715ce6a700
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x715ce6a780
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x715ce6a800

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object // 71a4a26500
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8] 0x715cb80800

--------------------------------
Class: InterpTrackInst.Object // 71a484fd80

--------------------------------
Class: PlayerCameraManager.Actor.Object // 71a48fd080
	PlayerController* PCOwner;//[Offset: 0x220, Size: 0x8] 0x715d154900
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 0x8] 0x715d154980
	float DefaultFOV;//[Offset: 0x238, Size: 0x4] 0x715d154a00
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 0x4] 0x715d154a80
	float DefaultAspectRatio;//[Offset: 0x248, Size: 0x4] 0x715d154b00
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 0x6f0] 0x715d154b80
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x980, Size: 0x6f0] 0x715d154c00
	TViewTarget ViewTarget;//[Offset: 0x1070, Size: 0x700] 0x715d154c80
	TViewTarget PendingViewTarget;//[Offset: 0x1770, Size: 0x700] 0x715d154d00
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1ea0, Size: 0x6f0] 0x715d154d80
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2590, Size: 0x6f0] 0x715d154e00
	CameraModifier*[] ModifierList;//[Offset: 0x2c80, Size: 0x10] 0x715d0b9e80
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2c90, Size: 0x10] 0x715d0b9fc0
	float FreeCamDistance;//[Offset: 0x2ca0, Size: 0x4] 0x715d154f00
	Vector FreeCamOffset;//[Offset: 0x2ca4, Size: 0xc] 0x715d154f80
	Vector ViewTargetOffset;//[Offset: 0x2cb0, Size: 0xc] 0x715d155000
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2cd0, Size: 0x10] 0x715d0ba060
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2ce0, Size: 0x8] 0x715d155100
	CameraAnimInst* AnimInstPool;//[Offset: 0x2ce8, Size: 0x8] 0x715d155180
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2d28, Size: 0x10] 0x715d0ba100
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2d48, Size: 0x10] 0x715d0ba1a0
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2d58, Size: 0x10] 0x715d0ba240
	CameraActor* AnimCameraActor;//[Offset: 0x2d68, Size: 0x8] 0x715d153280
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d70, Size: 0x1] 0x715d153300
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d70, Size: 0x1] 0x715d153380
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d70, Size: 0x1] 0x715d153400
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d70, Size: 0x1] 0x715d153480
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d71, Size: 0x1] 0x715d153500
	float ViewPitchMin;//[Offset: 0x2d74, Size: 0x4] 0x715d153580
	float ViewPitchMax;//[Offset: 0x2d78, Size: 0x4] 0x715d153600
	float ViewYawMin;//[Offset: 0x2d7c, Size: 0x4] 0x715d153680
	float ViewYawMax;//[Offset: 0x2d80, Size: 0x4] 0x715d153700
	float ViewRollMin;//[Offset: 0x2d84, Size: 0x4] 0x715d153780
	float ViewRollMax;//[Offset: 0x2d88, Size: 0x4] 0x715d153800
	float ServerUpdateCameraTimeout;//[Offset: 0x2d90, Size: 0x4] 0x715d153880
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x62a6bb4 0x715d13af80
	void StopCameraFade();// 0x62a66e8 0x715d13b060
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x62a6094 0x715d13b140
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x62a69c4 0x715d13b220
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x62a6abc 0x715d13b300
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x62a618c 0x715d13b3e0
	void StopAllCameraShakes(bool bImmediately);// 0x62a6910 0x715d13b4c0
	void StopAllCameraAnims(bool bImmediate);// 0x62a5fe0 0x715d13b5a0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x62a6704 0x715d13b680
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x62a65b0 0x715d13b760
	void SetGameCameraCutThisFrame();// 0x62a5fbc 0x715d13b840
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x62a7154 0x715d13b920
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x62a6f38 0x715d13ba00
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x62a6cac 0x715d13bae0
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x62a6da0 0x715d13bbc0
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x62a6284 0x715d13bca0
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x62a7420 0x715d13bd80
	void OnPhotographySessionStart();// 0x62a7404 0x715d13be60
	void OnPhotographySessionEnd();// 0x62a73e8 0x715d13bf40
	void OnPhotographyMultiPartCaptureStart();// 0x62a73cc 0x715d13c020
	void OnPhotographyMultiPartCaptureEnd();// 0x62a73b0 0x715d13c100
	PlayerController* GetOwningPlayerController();// 0x62a7374 0x715d13c1e0
	float GetFOVAngle();// 0x62a7118 0x715d13c2c0
	Rotator GetCameraRotation();// 0x62a70d8 0x715d13c3a0
	Vector GetCameraLocation();// 0x62a7098 0x715d13c480
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x62a720c 0x715d13c560
	void ClearCameraLensEffects();// 0x62a6f1c 0x715d13c640
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x45c6aa0 0x715d13c720
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x62a72c0 0x715d13c800
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x62a6fe4 0x715d13c8e0

--------------------------------
Class: CameraCacheEntry // 715ce73040
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x715ce6aa00
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6e0] 0x715ce6aa80

--------------------------------
Class: MinimalViewInfo // 715db17600
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715db37e80
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x715db37f00
	float FOV;//[Offset: 0x18, Size: 0x4] 0x715db37f80
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4] 0x715db38000
	float OrthoWidth;//[Offset: 0x20, Size: 0x4] 0x715db38080
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4] 0x715db38100
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4] 0x715db38180
	float AspectRatio;//[Offset: 0x2c, Size: 0x4] 0x715db38200
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x715db38280
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x715db38300
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1] 0x715db38380
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4] 0x715db38400
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x650] 0x715db29a00
	Vector2D OffCenterProjectionOffset;//[Offset: 0x690, Size: 0x8] 0x715db29a80

--------------------------------
Class: PostProcessSettings // 715db17540
	bool bOverride_DirectionalLightColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715db36380
	bool bOverride_FogHeight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715db36400
	bool bOverride_FogDensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715db36480
	bool bOverride_FogHeightFalloff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715db36500
	bool bOverride_FogInscatteringColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715db36580
	bool bOverride_FogMaxOpacity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715db36600
	bool bOverride_FogStartDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715db36680
	bool bOverride_FogCutoffDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x715db36700
	bool bOverride_FogDirectionalInscatteringExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x715db36780
	bool bOverride_FogDirectionalInscatteringStartDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x715db36800
	bool bOverride_FogDirectionalInscatteringColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x715db36880
	bool bOverride_OutlinesAllyColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x715db36900
	bool bOverride_OutlinesEnemyColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x715db36980
	bool bOverride_OutlinesTargetColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x715db36a00
	bool bOverride_OutlinesObjectiveColor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x715db36a80
	bool bOverride_OutlinesAllyFillColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x715db36b00
	bool bOverride_OutlinesTargetFillColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x715db36b80
	bool bOverride_OutlinesObjectiveFillColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x715db36c00
	bool bOverride_OutlinesWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x715db36c80
	bool bOverride_DamageVignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x715db36d00
	bool bOverride_DamageVignetteColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x715db36d80
	bool bOverride_DamageVignetteWavePeriod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x715db36e00
	bool bOverride_DamageVignetteWaveOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x715db36e80
	bool bOverride_DamageVignetteFalloff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x715db36f00
	bool bOverride_DamageVignetteSharpness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x715db36f80
	bool bOverride_BorderSplashIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x715db37000
	bool bOverride_BorderSplashColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x715db37080
	bool bOverride_BorderSplashRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x715db37100
	bool bOverride_BorderSplashSectorSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x715db37180
	bool bOverride_BorderSplashFalloff;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x715db37200
	bool bOverride_BorderSplashSharpness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x715db37280
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x715db37300
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x715db37380
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1] 0x715db35300
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1] 0x715db35380
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1] 0x715db35400
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1] 0x715db35480
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1] 0x715db35500
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1] 0x715db35580
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1] 0x715db35600
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1] 0x715db35680
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1] 0x715db35700
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1] 0x715db35780
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1] 0x715db35800
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1] 0x715db35880
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1] 0x715db35900
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1] 0x715db35980
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1] 0x715db35a00
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1] 0x715db35a80
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1] 0x715db35b00
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1] 0x715db35b80
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1] 0x715db35c00
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1] 0x715db35c80
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1] 0x715db35d00
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1] 0x715db35d80
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1] 0x715db35e00
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1] 0x715db35e80
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1] 0x715db35f00
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1] 0x715db35f80
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1] 0x715db36000
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1] 0x715db36080
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1] 0x715db36100
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1] 0x715db36180
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1] 0x715db36200
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715db36280
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x715db36300
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x715db34280
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x715db34300
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x715db34380
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1] 0x715db34400
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1] 0x715db34480
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1] 0x715db34500
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1] 0x715db34580
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1] 0x715db34600
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1] 0x715db34680
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1] 0x715db34700
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1] 0x715db34780
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1] 0x715db34800
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1] 0x715db34880
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1] 0x715db34900
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x715db34980
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x715db34a00
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x715db34a80
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x715db34b00
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1] 0x715db34b80
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1] 0x715db34c00
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1] 0x715db34c80
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1] 0x715db34d00
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1] 0x715db34d80
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1] 0x715db34e00
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1] 0x715db34e80
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1] 0x715db34f00
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1] 0x715db34f80
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1] 0x715db35000
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1] 0x715db35080
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1] 0x715db35100
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715db35180
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x715db35200
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x715db35280
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x715db33200
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x715db33280
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1] 0x715db33300
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1] 0x715db33380
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1] 0x715db33400
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1] 0x715db33480
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1] 0x715db33500
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1] 0x715db33580
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1] 0x715db33600
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1] 0x715db33680
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1] 0x715db33700
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1] 0x715db33780
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1] 0x715db33800
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1] 0x715db33880
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1] 0x715db33900
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1] 0x715db33980
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1] 0x715db33a00
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1] 0x715db33a80
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1] 0x715db33b00
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1] 0x715db33b80
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1] 0x715db33c00
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1] 0x715db33c80
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1] 0x715db33d00
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1] 0x715db33d80
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1] 0x715db33e00
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1] 0x715db33e80
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1] 0x715db33f00
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1] 0x715db33f80
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1] 0x715db34000
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x715db34080
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x715db34100
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x715db34180
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x715db34200
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x715db32180
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x715db32200
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x715db32280
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x715db32300
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1] 0x715db32380
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1] 0x715db32400
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1] 0x715db32480
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1] 0x715db32500
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1] 0x715db32580
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1] 0x715db32600
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1] 0x715db32680
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1] 0x715db32700
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1] 0x715db32780
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1] 0x715db32800
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1] 0x715db32880
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1] 0x715db32900
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1] 0x715db32980
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1] 0x715db32a00
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1] 0x715db32a80
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1] 0x715db32b00
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1] 0x715db32b80
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1] 0x715db32c00
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1] 0x715db32c80
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1] 0x715db32d00
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1] 0x715db32d80
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1] 0x715db32e00
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1] 0x715db32e80
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1] 0x715db32f00
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x715db32f80
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x715db33000
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x715db33080
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x715db33100
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x715db33180
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1] 0x715db31100
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1] 0x715db31180
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1] 0x715db31200
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1] 0x715db31280
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1] 0x715db31300
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1] 0x715db31380
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1] 0x715db31400
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1] 0x715db31480
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1] 0x715db31500
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1] 0x715db31580
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1] 0x715db31600
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1] 0x715db31680
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1] 0x715db31700
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1] 0x715db31780
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1] 0x715db31800
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1] 0x715db31880
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1] 0x715db31900
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1] 0x715db31980
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1] 0x715db31a00
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1] 0x715db31a80
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1] 0x715db31b00
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1] 0x715db31b80
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1] 0x715db31c00
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1] 0x715db31c80
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1] 0x715db31d00
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1] 0x715db31d80
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1] 0x715db31e00
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x715db31e80
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x715db31f00
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x715db31f80
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x715db32000
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1] 0x715db32080
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1] 0x715db32100
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1] 0x715db30080
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1] 0x715db30100
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x715db30180
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x715db30200
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x715db30280
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1] 0x715db30300
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1] 0x715db30380
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1] 0x715db30400
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1] 0x715db30480
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1] 0x715db30500
	float DirectionalLightIntensity;//[Offset: 0x1c, Size: 0x4] 0x715db30580
	LinearColor DirectionalLightColor;//[Offset: 0x20, Size: 0x10] 0x715db30600
	float FogHeight;//[Offset: 0x30, Size: 0x4] 0x715db30680
	float FogDensity;//[Offset: 0x34, Size: 0x4] 0x715db30700
	float FogHeightFalloff;//[Offset: 0x38, Size: 0x4] 0x715db30780
	LinearColor FogInscatteringColor;//[Offset: 0x3c, Size: 0x10] 0x715db30800
	float FogMaxOpacity;//[Offset: 0x4c, Size: 0x4] 0x715db30880
	float FogStartDistance;//[Offset: 0x50, Size: 0x4] 0x715db30900
	float FogCutoffDistance;//[Offset: 0x54, Size: 0x4] 0x715db30980
	float FogDirectionalInscatteringExponent;//[Offset: 0x58, Size: 0x4] 0x715db30a00
	float FogDirectionalInscatteringStartDistance;//[Offset: 0x5c, Size: 0x4] 0x715db30a80
	LinearColor FogDirectionalInscatteringColor;//[Offset: 0x60, Size: 0x10] 0x715db30b00
	LinearColor OutlinesAllyColor;//[Offset: 0x70, Size: 0x10] 0x715db30b80
	LinearColor OutlinesEnemyColor;//[Offset: 0x80, Size: 0x10] 0x715db30c00
	LinearColor OutlinesTargetColor;//[Offset: 0x90, Size: 0x10] 0x715db30c80
	LinearColor OutlinesObjectiveColor;//[Offset: 0xa0, Size: 0x10] 0x715db30d00
	LinearColor OutlinesAllyFillColor;//[Offset: 0xb0, Size: 0x10] 0x715db30d80
	LinearColor OutlinesTargetFillColor;//[Offset: 0xc0, Size: 0x10] 0x715db30e00
	LinearColor OutlinesObjectiveFillColor;//[Offset: 0xd0, Size: 0x10] 0x715db30e80
	int OutlinesWidth;//[Offset: 0xe0, Size: 0x4] 0x715db30f00
	float DamageVignetteIntensity;//[Offset: 0xe4, Size: 0x4] 0x715db30f80
	LinearColor DamageVignetteColor;//[Offset: 0xe8, Size: 0x10] 0x715db31000
	float DamageVignetteWavePeriod;//[Offset: 0xf8, Size: 0x4] 0x715db31080
	float DamageVignetteWaveOffset;//[Offset: 0xfc, Size: 0x4] 0x715db2f800
	float DamageVignetteFalloff;//[Offset: 0x100, Size: 0x4] 0x715db2f880
	float DamageVignetteSharpness;//[Offset: 0x104, Size: 0x4] 0x715db2f900
	float BorderSplashIntensity;//[Offset: 0x108, Size: 0x4] 0x715db2f980
	LinearColor BorderSplashColor;//[Offset: 0x10c, Size: 0x10] 0x715db2fa00
	float BorderSplashRotation;//[Offset: 0x11c, Size: 0x4] 0x715db2fa80
	float BorderSplashSectorSize;//[Offset: 0x120, Size: 0x4] 0x715db2fb00
	float BorderSplashFalloff;//[Offset: 0x124, Size: 0x4] 0x715db2fb80
	float BorderSplashSharpness;//[Offset: 0x128, Size: 0x4] 0x715db2fc00
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 0x1] 0x715db2fc80
	byte BloomMethod;//[Offset: 0x12d, Size: 0x1] 0x715db2fd00
	byte AutoExposureMethod;//[Offset: 0x12e, Size: 0x1] 0x715db2fd80
	float WhiteTemp;//[Offset: 0x130, Size: 0x4] 0x715db2fe00
	float WhiteTint;//[Offset: 0x134, Size: 0x4] 0x715db2fe80
	Vector4 ColorSaturation;//[Offset: 0x140, Size: 0x10] 0x715db2ff00
	Vector4 ColorContrast;//[Offset: 0x150, Size: 0x10] 0x715db2ff80
	Vector4 ColorGamma;//[Offset: 0x160, Size: 0x10] 0x715db2e780
	Vector4 ColorGain;//[Offset: 0x170, Size: 0x10] 0x715db2e800
	Vector4 ColorOffset;//[Offset: 0x180, Size: 0x10] 0x715db2e880
	Vector4 ColorSaturationShadows;//[Offset: 0x190, Size: 0x10] 0x715db2e900
	Vector4 ColorContrastShadows;//[Offset: 0x1a0, Size: 0x10] 0x715db2e980
	Vector4 ColorGammaShadows;//[Offset: 0x1b0, Size: 0x10] 0x715db2ea00
	Vector4 ColorGainShadows;//[Offset: 0x1c0, Size: 0x10] 0x715db2ea80
	Vector4 ColorOffsetShadows;//[Offset: 0x1d0, Size: 0x10] 0x715db2eb00
	Vector4 ColorSaturationMidtones;//[Offset: 0x1e0, Size: 0x10] 0x715db2eb80
	Vector4 ColorContrastMidtones;//[Offset: 0x1f0, Size: 0x10] 0x715db2ec00
	Vector4 ColorGammaMidtones;//[Offset: 0x200, Size: 0x10] 0x715db2ec80
	Vector4 ColorGainMidtones;//[Offset: 0x210, Size: 0x10] 0x715db2ed00
	Vector4 ColorOffsetMidtones;//[Offset: 0x220, Size: 0x10] 0x715db2ed80
	Vector4 ColorSaturationHighlights;//[Offset: 0x230, Size: 0x10] 0x715db2ee00
	Vector4 ColorContrastHighlights;//[Offset: 0x240, Size: 0x10] 0x715db2ee80
	Vector4 ColorGammaHighlights;//[Offset: 0x250, Size: 0x10] 0x715db2ef00
	Vector4 ColorGainHighlights;//[Offset: 0x260, Size: 0x10] 0x715db2ef80
	Vector4 ColorOffsetHighlights;//[Offset: 0x270, Size: 0x10] 0x715db2f000
	float ColorCorrectionHighlightsMin;//[Offset: 0x280, Size: 0x4] 0x715db2f080
	float ColorCorrectionShadowsMax;//[Offset: 0x284, Size: 0x4] 0x715db2f100
	float BlueCorrection;//[Offset: 0x288, Size: 0x4] 0x715db2f180
	float ExpandGamut;//[Offset: 0x28c, Size: 0x4] 0x715db2f200
	float FilmSlope;//[Offset: 0x290, Size: 0x4] 0x715db2f280
	float FilmToe;//[Offset: 0x294, Size: 0x4] 0x715db2f300
	float FilmShoulder;//[Offset: 0x298, Size: 0x4] 0x715db2f380
	float FilmBlackClip;//[Offset: 0x29c, Size: 0x4] 0x715db2f400
	float FilmWhiteClip;//[Offset: 0x2a0, Size: 0x4] 0x715db2f480
	LinearColor FilmWhitePoint;//[Offset: 0x2a4, Size: 0x10] 0x715db2f500
	LinearColor FilmShadowTint;//[Offset: 0x2b4, Size: 0x10] 0x715db2f580
	float FilmShadowTintBlend;//[Offset: 0x2c4, Size: 0x4] 0x715db2f600
	float FilmShadowTintAmount;//[Offset: 0x2c8, Size: 0x4] 0x715db2f680
	float FilmSaturation;//[Offset: 0x2cc, Size: 0x4] 0x715db2f700
	LinearColor FilmChannelMixerRed;//[Offset: 0x2d0, Size: 0x10] 0x715db2f780
	LinearColor FilmChannelMixerGreen;//[Offset: 0x2e0, Size: 0x10] 0x715db2d700
	LinearColor FilmChannelMixerBlue;//[Offset: 0x2f0, Size: 0x10] 0x715db2d780
	float FilmContrast;//[Offset: 0x300, Size: 0x4] 0x715db2d800
	float FilmToeAmount;//[Offset: 0x304, Size: 0x4] 0x715db2d880
	float FilmHealAmount;//[Offset: 0x308, Size: 0x4] 0x715db2d900
	float FilmDynamicRange;//[Offset: 0x30c, Size: 0x4] 0x715db2d980
	LinearColor SceneColorTint;//[Offset: 0x310, Size: 0x10] 0x715db2da00
	float SceneFringeIntensity;//[Offset: 0x320, Size: 0x4] 0x715db2da80
	float ChromaticAberrationStartOffset;//[Offset: 0x324, Size: 0x4] 0x715db2db00
	float BloomIntensity;//[Offset: 0x328, Size: 0x4] 0x715db2db80
	float BloomThreshold;//[Offset: 0x32c, Size: 0x4] 0x715db2dc00
	float BloomSizeScale;//[Offset: 0x330, Size: 0x4] 0x715db2dc80
	float Bloom1Size;//[Offset: 0x334, Size: 0x4] 0x715db2dd00
	float Bloom2Size;//[Offset: 0x338, Size: 0x4] 0x715db2dd80
	float Bloom3Size;//[Offset: 0x33c, Size: 0x4] 0x715db2de00
	float Bloom4Size;//[Offset: 0x340, Size: 0x4] 0x715db2de80
	float Bloom5Size;//[Offset: 0x344, Size: 0x4] 0x715db2df00
	float Bloom6Size;//[Offset: 0x348, Size: 0x4] 0x715db2df80
	LinearColor Bloom1Tint;//[Offset: 0x34c, Size: 0x10] 0x715db2e000
	LinearColor Bloom2Tint;//[Offset: 0x35c, Size: 0x10] 0x715db2e080
	LinearColor Bloom3Tint;//[Offset: 0x36c, Size: 0x10] 0x715db2e100
	LinearColor Bloom4Tint;//[Offset: 0x37c, Size: 0x10] 0x715db2e180
	LinearColor Bloom5Tint;//[Offset: 0x38c, Size: 0x10] 0x715db2e200
	LinearColor Bloom6Tint;//[Offset: 0x39c, Size: 0x10] 0x715db2e280
	float BloomConvolutionSize;//[Offset: 0x3ac, Size: 0x4] 0x715db2e300
	Texture2D* BloomConvolutionTexture;//[Offset: 0x3b0, Size: 0x8] 0x715db2e380
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x3b8, Size: 0x8] 0x715db2e400
	float BloomConvolutionPreFilterMin;//[Offset: 0x3c0, Size: 0x4] 0x715db2e480
	float BloomConvolutionPreFilterMax;//[Offset: 0x3c4, Size: 0x4] 0x715db2e500
	float BloomConvolutionPreFilterMult;//[Offset: 0x3c8, Size: 0x4] 0x715db2e580
	float BloomConvolutionBufferScale;//[Offset: 0x3cc, Size: 0x4] 0x715db2e600
	Texture* BloomDirtMask;//[Offset: 0x3d0, Size: 0x8] 0x715db2e680
	float BloomDirtMaskIntensity;//[Offset: 0x3d8, Size: 0x4] 0x715db2e700
	LinearColor BloomDirtMaskTint;//[Offset: 0x3dc, Size: 0x10] 0x715db2c680
	LinearColor AmbientCubemapTint;//[Offset: 0x3ec, Size: 0x10] 0x715db2c700
	float AmbientCubemapIntensity;//[Offset: 0x3fc, Size: 0x4] 0x715db2c780
	TextureCube* AmbientCubemap;//[Offset: 0x400, Size: 0x8] 0x715db2c800
	float CameraShutterSpeed;//[Offset: 0x408, Size: 0x4] 0x715db2c880
	float CameraISO;//[Offset: 0x40c, Size: 0x4] 0x715db2c900
	float DepthOfFieldFstop;//[Offset: 0x410, Size: 0x4] 0x715db2c980
	float DepthOfFieldMinFstop;//[Offset: 0x414, Size: 0x4] 0x715db2ca00
	int DepthOfFieldBladeCount;//[Offset: 0x418, Size: 0x4] 0x715db2ca80
	float AutoExposureBias;//[Offset: 0x41c, Size: 0x4] 0x715db2cb00
	float AutoExposureBiasBackup;//[Offset: 0x420, Size: 0x4] 0x715db2cb80
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1] 0x715db2cc00
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x424, Size: 0x1] 0x715db2cc80
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x428, Size: 0x8] 0x715db2cd00
	Texture* AutoExposureMeterMask;//[Offset: 0x430, Size: 0x8] 0x715db2cd80
	float AutoExposureLowPercent;//[Offset: 0x438, Size: 0x4] 0x715db2ce00
	float AutoExposureHighPercent;//[Offset: 0x43c, Size: 0x4] 0x715db2ce80
	float AutoExposureMinBrightness;//[Offset: 0x440, Size: 0x4] 0x715db2cf00
	float AutoExposureMaxBrightness;//[Offset: 0x444, Size: 0x4] 0x715db2cf80
	float AutoExposureSpeedUp;//[Offset: 0x448, Size: 0x4] 0x715db2d000
	float AutoExposureSpeedDown;//[Offset: 0x44c, Size: 0x4] 0x715db2d080
	float HistogramLogMin;//[Offset: 0x450, Size: 0x4] 0x715db2d100
	float HistogramLogMax;//[Offset: 0x454, Size: 0x4] 0x715db2d180
	float AutoExposureCalibrationConstant;//[Offset: 0x458, Size: 0x4] 0x715db2d200
	float LensFlareIntensity;//[Offset: 0x45c, Size: 0x4] 0x715db2d280
	LinearColor LensFlareTint;//[Offset: 0x460, Size: 0x10] 0x715db2d300
	float LensFlareBokehSize;//[Offset: 0x470, Size: 0x4] 0x715db2d380
	float LensFlareThreshold;//[Offset: 0x474, Size: 0x4] 0x715db2d400
	Texture* LensFlareBokehShape;//[Offset: 0x478, Size: 0x8] 0x715db2d480
	LinearColor LensFlareTints;//[Offset: 0x480, Size: 0x10] 0x715db2d500
	float VignetteIntensity;//[Offset: 0x500, Size: 0x4] 0x715db2d580
	float GrainJitter;//[Offset: 0x504, Size: 0x4] 0x715db2d600
	float GrainIntensity;//[Offset: 0x508, Size: 0x4] 0x715db2d680
	float AmbientOcclusionIntensity;//[Offset: 0x50c, Size: 0x4] 0x715db2b600
	float AmbientOcclusionStaticFraction;//[Offset: 0x510, Size: 0x4] 0x715db2b680
	float AmbientOcclusionRadius;//[Offset: 0x514, Size: 0x4] 0x715db2b700
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 0x1] 0x715db2b780
	float AmbientOcclusionFadeDistance;//[Offset: 0x51c, Size: 0x4] 0x715db2b800
	float AmbientOcclusionFadeRadius;//[Offset: 0x520, Size: 0x4] 0x715db2b880
	float AmbientOcclusionDistance;//[Offset: 0x524, Size: 0x4] 0x715db2b900
	float AmbientOcclusionPower;//[Offset: 0x528, Size: 0x4] 0x715db2b980
	float AmbientOcclusionBias;//[Offset: 0x52c, Size: 0x4] 0x715db2ba00
	float AmbientOcclusionQuality;//[Offset: 0x530, Size: 0x4] 0x715db2ba80
	float AmbientOcclusionMipBlend;//[Offset: 0x534, Size: 0x4] 0x715db2bb00
	float AmbientOcclusionMipScale;//[Offset: 0x538, Size: 0x4] 0x715db2bb80
	float AmbientOcclusionMipThreshold;//[Offset: 0x53c, Size: 0x4] 0x715db2bc00
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x540, Size: 0x1] 0x715db2bc80
	int RayTracingAOSamplesPerPixel;//[Offset: 0x544, Size: 0x4] 0x715db2bd00
	LinearColor IndirectLightingColor;//[Offset: 0x548, Size: 0x10] 0x715db2bd80
	float IndirectLightingIntensity;//[Offset: 0x558, Size: 0x4] 0x715db2be00
	enum RayTracingGIType;//[Offset: 0x55c, Size: 0x1] 0x715dae9480
	int RayTracingGIMaxBounces;//[Offset: 0x560, Size: 0x4] 0x715db2bf00
	int RayTracingGISamplesPerPixel;//[Offset: 0x564, Size: 0x4] 0x715db2bf80
	float ColorGradingIntensity;//[Offset: 0x568, Size: 0x4] 0x715db2c000
	Texture* ColorGradingLUT;//[Offset: 0x570, Size: 0x8] 0x715db2c080
	float DepthOfFieldSensorWidth;//[Offset: 0x578, Size: 0x4] 0x715db2c100
	float DepthOfFieldFocalDistance;//[Offset: 0x57c, Size: 0x4] 0x715db2c180
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x580, Size: 0x4] 0x715db2c200
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x584, Size: 0x4] 0x715db2c280
	float DepthOfFieldFocalRegion;//[Offset: 0x588, Size: 0x4] 0x715db2c300
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x58c, Size: 0x4] 0x715db2c380
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x590, Size: 0x4] 0x715db2c400
	float DepthOfFieldScale;//[Offset: 0x594, Size: 0x4] 0x715db2c480
	float DepthOfFieldNearBlurSize;//[Offset: 0x598, Size: 0x4] 0x715db2c500
	float DepthOfFieldFarBlurSize;//[Offset: 0x59c, Size: 0x4] 0x715db2c580
	float DepthOfFieldOcclusion;//[Offset: 0x5a0, Size: 0x4] 0x715db2c600
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x5a4, Size: 0x4] 0x715db2a580
	float DepthOfFieldVignetteSize;//[Offset: 0x5a8, Size: 0x4] 0x715db2a600
	float MotionBlurAmount;//[Offset: 0x5ac, Size: 0x4] 0x715db2a680
	float MotionBlurMax;//[Offset: 0x5b0, Size: 0x4] 0x715db2a700
	int MotionBlurTargetFPS;//[Offset: 0x5b4, Size: 0x4] 0x715db2a780
	float MotionBlurPerObjectSize;//[Offset: 0x5b8, Size: 0x4] 0x715db2a800
	float LPVIntensity;//[Offset: 0x5bc, Size: 0x4] 0x715db2a880
	float LPVVplInjectionBias;//[Offset: 0x5c0, Size: 0x4] 0x715db2a900
	float LPVSize;//[Offset: 0x5c4, Size: 0x4] 0x715db2a980
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x5c8, Size: 0x4] 0x715db2aa00
	float LPVSecondaryBounceIntensity;//[Offset: 0x5cc, Size: 0x4] 0x715db2aa80
	float LPVGeometryVolumeBias;//[Offset: 0x5d0, Size: 0x4] 0x715db2ab00
	float LPVEmissiveInjectionIntensity;//[Offset: 0x5d4, Size: 0x4] 0x715db2ab80
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x5d8, Size: 0x4] 0x715db2ac00
	float LPVDirectionalOcclusionRadius;//[Offset: 0x5dc, Size: 0x4] 0x715db2ac80
	float LPVDiffuseOcclusionExponent;//[Offset: 0x5e0, Size: 0x4] 0x715db2ad00
	float LPVSpecularOcclusionExponent;//[Offset: 0x5e4, Size: 0x4] 0x715db2ad80
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x5e8, Size: 0x4] 0x715db2ae00
	float LPVSpecularOcclusionIntensity;//[Offset: 0x5ec, Size: 0x4] 0x715db2ae80
	enum ReflectionsType;//[Offset: 0x5f0, Size: 0x1] 0x715dae9520
	float ScreenSpaceReflectionIntensity;//[Offset: 0x5f4, Size: 0x4] 0x715db2af80
	float ScreenSpaceReflectionQuality;//[Offset: 0x5f8, Size: 0x4] 0x715db2b000
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x5fc, Size: 0x4] 0x715db2b080
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x600, Size: 0x4] 0x715db2b100
	int RayTracingReflectionsMaxBounces;//[Offset: 0x604, Size: 0x4] 0x715db2b180
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x608, Size: 0x4] 0x715db2b200
	enum RayTracingReflectionsShadows;//[Offset: 0x60c, Size: 0x1] 0x715dae95c0
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60d, Size: 0x1] 0x715db2b300
	enum TranslucencyType;//[Offset: 0x60e, Size: 0x1] 0x715dae9660
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x610, Size: 0x4] 0x715db2b400
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x614, Size: 0x4] 0x715db2b480
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x618, Size: 0x4] 0x715db2b500
	enum RayTracingTranslucencyShadows;//[Offset: 0x61c, Size: 0x1] 0x715dae9700
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61d, Size: 0x1] 0x715db29500
	int PathTracingMaxBounces;//[Offset: 0x620, Size: 0x4] 0x715db29580
	int PathTracingSamplesPerPixel;//[Offset: 0x624, Size: 0x4] 0x715db29600
	float LPVFadeRange;//[Offset: 0x628, Size: 0x4] 0x715db29680
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x62c, Size: 0x4] 0x715db29700
	float ScreenPercentage;//[Offset: 0x630, Size: 0x4] 0x715db29780
	WeightedBlendables WeightedBlendables;//[Offset: 0x638, Size: 0x10] 0x715db29980

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object // 71a4997e00

--------------------------------
Class: WeightedBlendables // 715db17480
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10] 0x715dae97a0

--------------------------------
Class: WeightedBlendable // 715db173c0
	float Weight;//[Offset: 0x0, Size: 0x4] 0x715db29800
	Object* Object;//[Offset: 0x8, Size: 0x8] 0x715db29880

--------------------------------
Class: TViewTarget // 715ce73100
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x715ce6ab00
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x6e0] 0x715ce6ab80
	PlayerState* PlayerState;//[Offset: 0x6f0, Size: 0x8] 0x715ce6ac00

--------------------------------
Class: CameraModifier.Object // 71a4907900
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715d189000
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x715d189080
	byte Priority;//[Offset: 0x29, Size: 0x1] 0x715d189100
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8] 0x715d189180
	float AlphaInTime;//[Offset: 0x38, Size: 0x4] 0x715d189200
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4] 0x715d189280
	float Alpha;//[Offset: 0x40, Size: 0x4] 0x715d189300
	bool IsDisabled();// 0x612bed4 0x715d1951e0
	Actor* GetViewTarget();// 0x612be98 0x715d1952c0
	void EnableModifier();// 0x612bdc8 0x715d1953a0
	void DisableModifier(bool bImmediate);// 0x612bde4 0x715d195480
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x45c6aa0 0x715d195560
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x45c6aa0 0x715d195640

--------------------------------
Class: CameraShake.Object // 71a49dfb00
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715cb0e100
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4] 0x715cb0e180
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4] 0x715cb0e200
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4] 0x715cb0e280
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24] 0x715cb0e300
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24] 0x715cb0e380
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc] 0x715cb0e400
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4] 0x715cb0e480
	float AnimScale;//[Offset: 0x90, Size: 0x4] 0x715cb0e500
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4] 0x715cb0e580
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4] 0x715cb0e600
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4] 0x715cb0e680
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8] 0x715cb0e700
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x715cb0c680
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8] 0x715cb0c700
	float ShakeScale;//[Offset: 0x148, Size: 0x4] 0x715cb0c780
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4] 0x715cb0c800
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8] 0x715cb0c880
	void ReceiveStopShake(bool bImmediately);// 0x45c6aa0 0x715cb13180
	void ReceivePlayShake(float Scale);// 0x45c6aa0 0x715cb13260
	bool ReceiveIsFinished();// 0x612ceb0 0x715cb13340
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x45c6aa0 0x715cb13420

--------------------------------
Class: ROscillator // 715db17780
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc] 0x715db29b00
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc] 0x715db29b80
	FOscillator Roll;//[Offset: 0x18, Size: 0xc] 0x715db29c00

--------------------------------
Class: FOscillator // 715db17840
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x715db29d80
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x715db29e00
	byte InitialOffset;//[Offset: 0x8, Size: 0x1] 0x715db29e80
	enum Waveform;//[Offset: 0x9, Size: 0x1] 0x715dae9840

--------------------------------
Class: VOscillator // 715db17900
	FOscillator X;//[Offset: 0x0, Size: 0xc] 0x715db29c80
	FOscillator Y;//[Offset: 0xc, Size: 0xc] 0x715db29d00
	FOscillator Z;//[Offset: 0x18, Size: 0xc] 0x715db29f80

--------------------------------
Class: CameraAnim.Object // 71a49dab00
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8] 0x715cb0d280
	float AnimLength;//[Offset: 0x30, Size: 0x4] 0x715cb0d300
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c] 0x715cb0d380
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cb0d400
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x715cb0d480
	float BaseFOV;//[Offset: 0x54, Size: 0x4] 0x715cb0d500
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x650] 0x715cb0d580
	float BasePostProcessBlendWeight;//[Offset: 0x6b0, Size: 0x4] 0x715cb0d600

--------------------------------
Class: InterpGroup.Object // 71a4a2a380
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10] 0x715cb26640
	FName GroupName;//[Offset: 0x40, Size: 0x8] 0x715cb7ff80
	Color GroupColor;//[Offset: 0x48, Size: 0x4] 0x715cb7e780
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x715cb7e800
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1] 0x715cb7e880
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1] 0x715cb7e900
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1] 0x715cb7e980
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1] 0x715cb7ea00

--------------------------------
Class: InterpTrack.Object // 71a484ad80
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10] 0x715cf92180
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8] 0x715cf92220
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1] 0x715cfa9100
	FString TrackTitle;//[Offset: 0x58, Size: 0x10] 0x715cfa9180
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cfa9200
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x715cfa9280
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x715cfa9300
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x715cfa9380
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x715cfa9400
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x715cfa9480
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x715cfa7400
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x715cfa7480

--------------------------------
Class: CameraAnimInst.Object // 71a49da880
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8] 0x715cb0ce00
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8] 0x715cb0ce80
	float PlayRate;//[Offset: 0x50, Size: 0x4] 0x715cb0cf00
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8] 0x715cb0cf80
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8] 0x715cb0d000
	byte PlaySpace;//[Offset: 0x78, Size: 0x1] 0x715cb0d080
	void Stop(bool bImmediate);// 0x612a7cc 0x715cb13500
	void SetScale(float NewDuration);// 0x612a684 0x715cb135e0
	void SetDuration(float NewDuration);// 0x612a728 0x715cb136c0

--------------------------------
Class: InterpGroupInst.Object // 71a4a29c00
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8] 0x715cb7fc80
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8] 0x715cb7fd00
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10] 0x715cb265a0

--------------------------------
Class: InterpTrackMove.InterpTrack.Object // 71a4a2dd00
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18] 0x715cb81400
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18] 0x715cb81480
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10] 0x715cb81500
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8] 0x715cb81580
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4] 0x715cb81600
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4] 0x715cb81680
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x715cb81700
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x715cb81780
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x715cb81800
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x715cb81880
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x715cb81900
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x715cb81980
	byte RotMode;//[Offset: 0xc1, Size: 0x1] 0x715cb81a00

--------------------------------
Class: InterpCurveVector // 717dfc8bc0
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10] 0x7172ba6500
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x717df8b380
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x717df8b400

--------------------------------
Class: InterpCurvePointVector // 717dfc8c80
	float InVal;//[Offset: 0x0, Size: 0x4] 0x717df8b480
	Vector OutVal;//[Offset: 0x4, Size: 0xc] 0x717df8b500
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x717df8b580
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x717df89500
	byte InterpMode;//[Offset: 0x28, Size: 0x1] 0x717df89580

--------------------------------
Class: InterpLookupTrack // 715db1d3c0
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10] 0x715daec900

--------------------------------
Class: InterpLookupPoint // 715db1d300
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x715db49e00
	float Time;//[Offset: 0x8, Size: 0x4] 0x715db49e80

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object // 71a4a2f600
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc] 0x715cb80200
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc] 0x715cb80280

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object // 71a4a15100
	enum Attenuation;//[Offset: 0x1f0, Size: 0x1] 0x715cb20d80
	float InnerAttenuationRadius;//[Offset: 0x1f4, Size: 0x4] 0x715cb0dd80
	float OuterAttenuationRadius;//[Offset: 0x1f8, Size: 0x4] 0x715cb0de00
	class CameraShake* CameraShake;//[Offset: 0x200, Size: 0x8] 0x715cb20e20
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1] 0x715cb0de80
	void StopAllCameraShakes(bool bImmediately);// 0x6130ec0 0x715cb12e00
	void PlayCameraShake(class CameraShake InCameraShake);// 0x6130f6c 0x715cb12ee0
	void Play();// 0x6131010 0x715cb12fc0
	float GetAttenuationFactor(out const Vector Location);// 0x6130e08 0x715cb130a0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object // 71a4a1c680
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 0x8] 0x715cb51800
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 0x8] 0x715cb51880
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 0x8] 0x715cb51900
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30] 0x715cb51980
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4] 0x715cb51a00
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1] 0x715cb51a80
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1] 0x715cb51b00
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10] 0x715cb21b40
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4] 0x715cb51b80

--------------------------------
Class: Emitter.Actor.Object // 71a4a1c900
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 0x8] 0x715cb51c00
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x715cb51c80
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x715cb51d00
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x715cb51d80
	delegate OnParticleSpawn;//[Offset: 0x230, Size: 0x10] 0x715cb51e00
	delegate OnParticleBurst;//[Offset: 0x240, Size: 0x10] 0x715cb51e80
	delegate OnParticleDeath;//[Offset: 0x250, Size: 0x10] 0x715cb51f00
	delegate OnParticleCollide;//[Offset: 0x260, Size: 0x10] 0x715cb51f80
	void ToggleActive();// 0x6162f28 0x715cb1b060
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6162c78 0x715cb1b140
	void SetTemplate(ParticleSystem* NewTemplate);// 0x6162e44 0x715cb1b220
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x61629cc 0x715cb1b300
	void SetFloatParameter(FName ParameterName, float Param);// 0x6162d5c 0x715cb1b3e0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x6162b94 0x715cb1b4c0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x6162ab0 0x715cb1b5a0
	void OnRep_bCurrentlyActive();// 0x6162f64 0x715cb1b680
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x6162f80 0x715cb1b760
	bool IsActive();// 0x6162ef0 0x715cb1b840
	void Deactivate();// 0x6162f3c 0x715cb1b920
	void Activate();// 0x6162f50 0x715cb1ba00

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object // 71a49dfd80
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10] 0x715cb20f60
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50] 0x715cece440
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4] 0x715cb0cd80

--------------------------------
Class: ActiveCameraShakeInfo // 715db17a80
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8] 0x715db2a080
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8] 0x715db2a100

--------------------------------
Class: PooledCameraShakes // 715db179c0
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10] 0x715dae98e0

--------------------------------
Class: CameraActor.Actor.Object // 71a49c3f80
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 0x1] 0x715cac7a80
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 0x8] 0x715cac7b00
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8] 0x715cac7b80
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x715cac7c00
	float AspectRatio;//[Offset: 0x244, Size: 0x4] 0x715cac7c80
	float FOVAngle;//[Offset: 0x248, Size: 0x4] 0x715cac7d00
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 0x4] 0x715cac7d80
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 0x650] 0x715cac7e00
	int GetAutoActivatePlayerIndex();// 0x612a0a0 0x715cab3dc0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object // 71a4900100
	float FieldOfView;//[Offset: 0x1f0, Size: 0x4] 0x715d186280
	float OrthoWidth;//[Offset: 0x1f4, Size: 0x4] 0x715d186300
	float OrthoNearClipPlane;//[Offset: 0x1f8, Size: 0x4] 0x715d186380
	float OrthoFarClipPlane;//[Offset: 0x1fc, Size: 0x4] 0x715d184300
	float AspectRatio;//[Offset: 0x200, Size: 0x4] 0x715d184380
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1] 0x715d184400
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1] 0x715d184480
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1] 0x715d184500
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1] 0x715d184580
	byte ProjectionMode;//[Offset: 0x205, Size: 0x1] 0x715d184600
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 0x4] 0x715d184680
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 0x650] 0x715d184700
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x612b324 0x715d193340
	void SetProjectionMode(byte InProjectionMode);// 0x612b284 0x715d193420
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x612b1e4 0x715d193500
	void SetOrthoWidth(float InOrthoWidth);// 0x612b66c 0x715d1935e0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x612b5cc 0x715d1936c0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x612b52c 0x715d1937a0
	void SetFieldOfView(float InFieldOfView);// 0x612b70c 0x715d193880
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x612b3d8 0x715d193960
	void SetAspectRatio(float InAspectRatio);// 0x612b48c 0x715d190080
	void RemoveBlendable(interface classNone InBlendableObject);// 0x612addc 0x715d190160
	void OnCameraMeshHiddenChanged();// 0x612adc8 0x715d190240
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x612b078 0x715d190320
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x612af08 0x715d190400

--------------------------------
Class: CheatManager.Object // 71a4a14200
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8] 0x715cb32780
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8] 0x715cb20920
	void Walk();// 0x6140c0c 0x715cb16280
	void ViewSelf();// 0x61407fc 0x715cb16360
	void ViewPlayer(FString S);// 0x6140744 0x715cb16440
	void ViewClass(class Actor DesiredClass);// 0x61405ec 0x715cb16520
	void ViewActor(FName ActorName);// 0x6140698 0x715cb16600
	void UpdateSafeArea();// 0x613f9d4 0x715cb166e0
	void ToggleServerStatReplicatorUpdateStatNet();// 0x613f9e8 0x715cb167c0
	void ToggleServerStatReplicatorClientOverwrite();// 0x613f9fc 0x715cb168a0
	void ToggleDebugCamera();// 0x61403cc 0x715cb16980
	void ToggleAILogging();// 0x61403b0 0x715cb16a60
	void TestCollisionDistance();// 0x614007c 0x715cb16b40
	void Teleport();// 0x6140cf0 0x715cb16c20
	void Summon(FString ClassName);// 0x6140834 0x715cb16d00
	void StreamLevelOut(FName PackageName);// 0x61403e8 0x715cb16de0
	void StreamLevelIn(FName PackageName);// 0x6140540 0x715cb16ec0
	void SpawnServerStatReplicator();// 0x613fa24 0x715cb16fa0
	void Slomo(float NewTimeDilation);// 0x6140b28 0x715cb17080
	void SetWorldOrigin();// 0x613fb68 0x715cb17160
	void SetMouseSensitivityToDefault();// 0x613fb4c 0x715cb17240
	void ServerToggleAILogging();// 0x6140354 0x715cb17320
	void ReceiveInitCheatManager();// 0x45c6aa0 0x715cb13a40
	void ReceiveEndPlay();// 0x45c6aa0 0x715cb13b20
	void PlayersOnly();// 0x6140818 0x715cb13c00
	void OnlyLoadLevel(FName PackageName);// 0x6140494 0x715cb13ce0
	void LogLoc();// 0x613fb7c 0x715cb13dc0
	void InvertMouse();// 0x613fb30 0x715cb13ea0
	void God();// 0x6140bd4 0x715cb13f80
	void Ghost();// 0x6140bf0 0x715cb14060
	void FreezeFrame(float Delay);// 0x6140d0c 0x715cb14140
	void Fly();// 0x6140c28 0x715cb14220
	void FlushLog();// 0x613fb98 0x715cb14300
	void EnableDebugCamera();// 0x613f9b8 0x715cb143e0
	void DumpVoiceMutingState();// 0x614000c 0x715cb144c0
	void DumpPartyState();// 0x6140044 0x715cb145a0
	void DumpOnlineSessionState();// 0x6140060 0x715cb14680
	void DumpChatState();// 0x6140028 0x715cb14760
	void DisableDebugCamera();// 0x613f99c 0x715cb14840
	void DestroyTarget();// 0x6140a60 0x715cb14920
	void DestroyServerStatReplicator();// 0x613fa10 0x715cb14a00
	void DestroyPawns(class Pawn aClass);// 0x61408ec 0x715cb14ae0
	void DestroyAllPawnsExceptTarget();// 0x6140998 0x715cb14bc0
	void DestroyAll(class Actor aClass);// 0x61409b4 0x715cb14ca0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x614024c 0x715cb14d80
	void DebugCapsuleSweepPawn();// 0x61400b4 0x715cb14e60
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x61400ec 0x715cb14f40
	void DebugCapsuleSweepClear();// 0x6140098 0x715cb15020
	void DebugCapsuleSweepChannel(byte Channel);// 0x61401a0 0x715cb15100
	void DebugCapsuleSweepCapture();// 0x61400d0 0x715cb151e0
	void DebugCapsuleSweep();// 0x6140338 0x715cb152c0
	void DamageTarget(float DamageAmount);// 0x6140a7c 0x715cb153a0
	void CheatScript(FString ScriptName);// 0x613fa38 0x715cb15480
	void ChangeSize(float F);// 0x6140c44 0x715cb15560
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x613fbb4 0x715cb15640
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x613fe18 0x715cb11d60
	void BugIt(FString ScreenShotDescription);// 0x613fd60 0x715cb11e40

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object // 71a4a19c00
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 0x1] 0x715cb37b80
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56d, Size: 0x1] 0x715cb37c00
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56d, Size: 0x1] 0x715cb37c80
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56d, Size: 0x1] 0x715cb37d00
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56d, Size: 0x1] 0x715cb37d80
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56d, Size: 0x1] 0x715cb37e00
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56d, Size: 0x1] 0x715cb37e80
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56d, Size: 0x1] 0x715cb37f00
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x570, Size: 0x8] 0x715cb37f80
	Actor* SelectedActor;//[Offset: 0x578, Size: 0x8] 0x715cb38000
	PrimitiveComponent* SelectedComponent;//[Offset: 0x580, Size: 0x8] 0x715cb38080
	HitResult SelectedHitPoint;//[Offset: 0x588, Size: 0x88] 0x715cb38100
	PlayerController* OriginalControllerRef;//[Offset: 0x610, Size: 0x8] 0x715cb38180
	Player* OriginalPlayer;//[Offset: 0x618, Size: 0x8] 0x715cb38200
	float SpeedScale;//[Offset: 0x620, Size: 0x4] 0x715cb38280
	float InitialMaxSpeed;//[Offset: 0x624, Size: 0x4] 0x715cb38300
	float InitialAccel;//[Offset: 0x628, Size: 0x4] 0x715cb38380
	float InitialDecel;//[Offset: 0x62c, Size: 0x4] 0x715cb38400
	void ToggleDisplay();// 0x61524dc 0x715cb18660
	void ShowDebugSelectedInfo();// 0x61524f0 0x715cb18740
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x6152404 0x715cb18820
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x45c6aa0 0x715cb18900
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x45c6aa0 0x715cb189e0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x45c6aa0 0x715cb18ac0
	Actor* GetSelectedActor();// 0x61524a8 0x715cb18ba0

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4a1dd00
	Color FrustumColor;//[Offset: 0x418, Size: 0x4] 0x715cb3ff00
	float FrustumAngle;//[Offset: 0x41c, Size: 0x4] 0x715cb3ff80
	float FrustumAspectRatio;//[Offset: 0x420, Size: 0x4] 0x715cb3e780
	float FrustumStartDist;//[Offset: 0x424, Size: 0x4] 0x715cb3e800
	float FrustumEndDist;//[Offset: 0x428, Size: 0x4] 0x715cb3e880
	Texture* Texture;//[Offset: 0x430, Size: 0x8] 0x715cb3e900

--------------------------------
Class: ForceFeedbackParameters // 715db1bd40
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x715db45c80
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715db45d00
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x715db45d80
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x715db45e00

--------------------------------
Class: ActiveForceFeedbackEffect // 715db1be00
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8] 0x715db45e80

--------------------------------
Class: TouchInterface.Object // 71a4ae9e80
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10] 0x715cc80c40
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4] 0x715cc91500
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4] 0x715cc91580
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4] 0x715cc91600
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4] 0x715cc91680
	float ActivationDelay;//[Offset: 0x48, Size: 0x4] 0x715cc91700
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x715cc91780
	float StartupDelay;//[Offset: 0x50, Size: 0x4] 0x715cc91800

--------------------------------
Class: TouchInputControl // 715ce78680
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8] 0x715ce8f880
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8] 0x715ce8f900
	Vector2D Center;//[Offset: 0x10, Size: 0x8] 0x715ce8f980
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8] 0x715ce8fa00
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8] 0x715ce8fa80
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8] 0x715ce8fb00
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8] 0x715ce8fb80
	Key MainInputKey;//[Offset: 0x38, Size: 0x18] 0x715ce8fc00
	Key AltInputKey;//[Offset: 0x50, Size: 0x18] 0x715ce8fc80

--------------------------------
Class: Character.Pawn.Actor.Object // 71a4863080
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 0x8] 0x715cfe1000
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 0x8] 0x715cfe1080
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 0x8] 0x715cfaf800
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 0x30] 0x715cfaf880
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 0x30] 0x715cfaf900
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 0x4] 0x715cfaf980
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 0xc] 0x715cfafa00
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10] 0x715cfafa80
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4] 0x715cfafb00
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4] 0x715cfafb80
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1] 0x715cfafc00
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1] 0x715cfafc80
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4] 0x715cfafd00
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1] 0x715cfafd80
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1] 0x715cfafe00
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1] 0x715cfafe80
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1] 0x715cfaff00
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1] 0x715cfaff80
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1] 0x715cfae780
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1] 0x715cfae800
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1] 0x715cfae880
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1] 0x715cfae900
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1] 0x715cfae980
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1] 0x715cfaea00
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4] 0x715cfaea80
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4] 0x715cfaeb00
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4] 0x715cfaeb80
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4] 0x715cfaec00
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4] 0x715cfaec80
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4] 0x715cfaed00
	delegate OnReachedJumpApex;//[Offset: 0x350, Size: 0x10] 0x715cfaed80
	delegate MovementModeChangedDelegate;//[Offset: 0x370, Size: 0x10] 0x715cfaee00
	delegate OnCharacterMovementUpdated;//[Offset: 0x380, Size: 0x10] 0x715cfaee80
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x390, Size: 0x38] 0x715cfaef00
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40] 0x715cfaef80
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10] 0x715cf91f00
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98] 0x715cfaf080
	void UnCrouch(bool bClientSimulation);// 0x6135bf8 0x715cfd1c80
	void StopJumping();// 0x6136330 0x715cf7e780
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x6136090 0x715cf7e860
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x61372b4 0x715cf7e940
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x613802c 0x715cf7ea20
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x613784c 0x715cf7eb00
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6137410 0x715cf7ebe0
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6137bf0 0x715cf7ecc0
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x61382b0 0x715cf7eda0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x6135aac 0x715cf7ee80
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x613613c 0x715cf7ef60
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x6135d60 0x715cf7f040
	void OnRep_RootMotion();// 0x6135a98 0x715cf7f120
	void OnRep_ReplicatedBasedMovement();// 0x6136438 0x715cf7f200
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x6136424 0x715cf7f2e0
	void OnRep_IsCrouched();// 0x6136368 0x715cf7f3c0
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x45c6aa0 0x715cf7f4a0
	void OnLanded(out const HitResult Hit);// 0x45c6aa0 0x715cf7f580
	void OnJumped();// 0x6135ef8 0x715cf7f660
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6135f14 0x715cf7f740
	void K2_UpdateCustomMovement(float DeltaTime);// 0x45c6aa0 0x715cf7f820
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x45c6aa0 0x715cf7f900
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x45c6aa0 0x715cf7f9e0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x45c6aa0 0x715cf7fac0
	void Jump();// 0x613634c 0x715cf7fba0
	bool IsPlayingRootMotion();// 0x6135a60 0x715cf7fc80
	bool IsPlayingNetworkedRootMotionMontage();// 0x61359f0 0x715cf7fd60
	bool IsJumpProvidingForce();// 0x6136278 0x715cf7fe40
	bool HasAnyRootMotion();// 0x6135a28 0x715cf7ff20
	AnimMontage* GetCurrentMontage();// 0x613605c 0x715cf7caa0
	Vector GetBaseTranslationOffset();// 0x61363fc 0x715cf7cb80
	Rotator GetBaseRotationOffsetRotator();// 0x6136384 0x715cf7cc60
	float GetAnimRootMotionTranslationScale();// 0x61359bc 0x715cf7cd40
	void Crouch(bool bClientSimulation);// 0x6135cac 0x715cf7ce20
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6136d2c 0x715cf7cf00
	void ClientCheatWalk();// 0x6135b9c 0x715cf7cfe0
	void ClientCheatGhost();// 0x6135b64 0x715cf7d0c0
	void ClientCheatFly();// 0x6135b80 0x715cf7d1a0
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6136540 0x715cf7d280
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6136a10 0x715cf7d360
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6136f7c 0x715cf7d440
	void ClientAckGoodMove(float Timestamp);// 0x6137210 0x715cf7d520
	bool CanJumpInternal();// 0x61362b8 0x715cf7d600
	bool CanJump();// 0x61362f8 0x715cf7d6e0
	bool CanCrouch();// 0x6135bb8 0x715cf7d7c0
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x6136454 0x715cf7d8a0

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object // 71a48fbf00
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8] 0x715d15d480
	float GravityScale;//[Offset: 0x150, Size: 0x4] 0x715d15d500
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4] 0x715d15d580
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4] 0x715d15d600
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4] 0x715d15d680
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4] 0x715d15b600
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4] 0x715d15b680
	byte MovementMode;//[Offset: 0x168, Size: 0x1] 0x715d15b700
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1] 0x715d15b780
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1] 0x715d0b9ac0
	float GroundFriction;//[Offset: 0x16c, Size: 0x4] 0x715d15b880
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4] 0x715d15b900
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4] 0x715d15b980
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4] 0x715d15ba00
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4] 0x715d15ba80
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4] 0x715d15bb00
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4] 0x715d15bb80
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4] 0x715d15bc00
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4] 0x715d15bc80
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4] 0x715d15bd00
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4] 0x715d15bd80
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4] 0x715d15be00
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4] 0x715d15be80
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4] 0x715d15bf00
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4] 0x715d15bf80
	float AirControl;//[Offset: 0x1c4, Size: 0x4] 0x715d15c000
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4] 0x715d15c080
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4] 0x715d15c100
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4] 0x715d15c180
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4] 0x715d15c200
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4] 0x715d15c280
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4] 0x715d15c300
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4] 0x715d15c380
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc] 0x715d15c400
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x715d15c480
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1] 0x715d15c500
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1] 0x715d15c580
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1] 0x715d15c600
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1] 0x715d15a580
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1] 0x715d15a600
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1] 0x715d15a680
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1] 0x715d15a700
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1] 0x715d15a780
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1] 0x715d15a800
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1] 0x715d15a880
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1] 0x715d15a900
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1] 0x715d15a980
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1] 0x715d15aa00
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1] 0x715d15aa80
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1] 0x715d15ab00
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1] 0x715d15ab80
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1] 0x715d15ac00
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1] 0x715d15ac80
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1] 0x715d15ad00
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1] 0x715d15ad80
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1] 0x715d15ae00
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8] 0x715d15ae80
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4] 0x715d15af00
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4] 0x715d15af80
	float Mass;//[Offset: 0x208, Size: 0x4] 0x715d15b000
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4] 0x715d15b080
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4] 0x715d15b100
	float PushForceFactor;//[Offset: 0x214, Size: 0x4] 0x715d15b180
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4] 0x715d15b200
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4] 0x715d15b280
	float MinTouchForce;//[Offset: 0x220, Size: 0x4] 0x715d15b300
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4] 0x715d15b380
	float RepulsionForce;//[Offset: 0x228, Size: 0x4] 0x715d15b400
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc] 0x715d15b480
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10] 0x715d15b500
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc] 0x715d15b580
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc] 0x715d159500
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4] 0x715d159580
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4] 0x715d159600
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4] 0x715d159680
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc] 0x715d159700
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc] 0x715d159780
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4] 0x715d159800
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4] 0x715d159880
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4] 0x715d159900
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4] 0x715d159980
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4] 0x715d159a00
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4] 0x715d159a80
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4] 0x715d159b00
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4] 0x715d159b80
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4] 0x715d159c00
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4] 0x715d159c80
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4] 0x715d159d00
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4] 0x715d159d80
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4] 0x715d159e00
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4] 0x715d159e80
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4] 0x715d159f00
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4] 0x715d159f80
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 0x4] 0x715d15a000
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 0x4] 0x715d15a080
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 0x4] 0x715d15a100
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 0x4] 0x715d15a180
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 0x4] 0x715d15a200
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 0x4] 0x715d15a280
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 0x94] 0x715d15a300
	byte DefaultLandMovementMode;//[Offset: 0x384, Size: 0x1] 0x715d15a380
	byte DefaultWaterMovementMode;//[Offset: 0x385, Size: 0x1] 0x715d15a400
	byte GroundMovementMode;//[Offset: 0x386, Size: 0x1] 0x715d15a480
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x387, Size: 0x1] 0x715d15a500
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x387, Size: 0x1] 0x715d158480
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x387, Size: 0x1] 0x715d158500
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x387, Size: 0x1] 0x715d158580
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x387, Size: 0x1] 0x715d158600
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x387, Size: 0x1] 0x715d158680
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x387, Size: 0x1] 0x715d158700
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x387, Size: 0x1] 0x715d158780
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1] 0x715d158800
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 0x1] 0x715d158880
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x388, Size: 0x1] 0x715d158900
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x388, Size: 0x1] 0x715d158980
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x388, Size: 0x1] 0x715d158a00
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x388, Size: 0x1] 0x715d158a80
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x388, Size: 0x1] 0x715d158b00
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x388, Size: 0x1] 0x715d158b80
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x389, Size: 0x1] 0x715d158c00
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x389, Size: 0x1] 0x715d158c80
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x389, Size: 0x1] 0x715d158d00
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x389, Size: 0x1] 0x715d158d80
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x389, Size: 0x1] 0x715d158e00
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x389, Size: 0x1] 0x715d158e80
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x389, Size: 0x1] 0x715d158f00
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38a, Size: 0x1] 0x715d158f80
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38a, Size: 0x1] 0x715d159000
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38a, Size: 0x1] 0x715d159080
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38a, Size: 0x1] 0x715d159100
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38a, Size: 0x1] 0x715d159180
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38a, Size: 0x1] 0x715d159200
	float AvoidanceConsiderationRadius;//[Offset: 0x39c, Size: 0x4] 0x715d159280
	Vector RequestedVelocity;//[Offset: 0x3a0, Size: 0xc] 0x715d159300
	int AvoidanceUID;//[Offset: 0x3ac, Size: 0x4] 0x715d159380
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b0, Size: 0x4] 0x715d159400
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b4, Size: 0x4] 0x715d159480
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b8, Size: 0x4] 0x715d157400
	float AvoidanceWeight;//[Offset: 0x3bc, Size: 0x4] 0x715d157480
	Vector PendingLaunchVelocity;//[Offset: 0x3c0, Size: 0xc] 0x715d157500
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 0x4] 0x715d157580
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 0x4] 0x715d157600
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 0x4] 0x715d157680
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 0x4] 0x715d157700
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 0x4] 0x715d157780
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 0x4] 0x715d157800
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 0x30] 0x715d157880
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 0x4] 0x715d157900
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4d8, Size: 0x38] 0x715d157980
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5a0, Size: 0x40] 0x715d157a00
	Vector AnimRootMotionVelocity;//[Offset: 0x5e0, Size: 0xc] 0x715d157a80
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x613cfc8 0x715d161ba0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x613d0a0 0x715d161c80
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x613d8a8 0x715d13e780
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x613da60 0x715d13e860
	void SetGroupsToIgnore(int GroupFlags);// 0x613db10 0x715d13e940
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x613dbb4 0x715d13ea20
	void SetGroupsToAvoid(int GroupFlags);// 0x613dc64 0x715d13eb00
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x613dd08 0x715d13ebe0
	void SetAvoidanceGroup(int GroupFlags);// 0x613ddb8 0x715d13ecc0
	void SetAvoidanceEnabled(bool bEnable);// 0x613d9b4 0x715d13eda0
	float K2_GetWalkableFloorZ();// 0x613d06c 0x715d13ee80
	float K2_GetWalkableFloorAngle();// 0x613d144 0x715d13ef60
	float K2_GetModifiedMaxAcceleration();// 0x613d568 0x715d13f040
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x613ce9c 0x715d13f120
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x613cca8 0x715d13f200
	bool IsWalking();// 0x613d868 0x715d13f2e0
	bool IsWalkable(out const HitResult Hit);// 0x613d178 0x715d13f3c0
	float GetValidPerchRadius();// 0x613d25c 0x715d13f4a0
	float GetPerchRadiusThreshold();// 0x613d290 0x715d13f580
	PrimitiveComponent* GetMovementBase();// 0x613d818 0x715d13f660
	float GetMinAnalogSpeed();// 0x613d5a4 0x715d13f740
	float GetMaxJumpHeightWithJumpTime();// 0x613d5e0 0x715d13f820
	float GetMaxJumpHeight();// 0x613d61c 0x715d13f900
	float GetMaxBrakingDeceleration();// 0x613d4f0 0x715d13f9e0
	float GetMaxAcceleration();// 0x613d52c 0x715d13fac0
	Vector GetLastUpdateVelocity();// 0x613de5c 0x715d13fba0
	Rotator GetLastUpdateRotation();// 0x613de84 0x715d13fc80
	Vector GetLastUpdateLocation();// 0x613dec0 0x715d13fd60
	Vector GetImpartedMovementBaseVelocity();// 0x613d7d8 0x715d13fe40
	Vector GetCurrentAcceleration();// 0x613d4b8 0x715d13ff20
	Character* GetCharacterOwner();// 0x613d998 0x715d13caa0
	float GetAnalogInputModifier();// 0x613d484 0x715d13cb80
	void DisableMovement();// 0x613d84c 0x715d13cc60
	void ClearAccumulatedForces();// 0x613d468 0x715d13cd40
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x613ca80 0x715d13ce20
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x613d658 0x715d13cf00
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x613d370 0x715d13cfe0
	void AddForce(Vector Force);// 0x613d2c4 0x715d13d0c0

--------------------------------
Class: NavAvoidanceMask // 715db1fc40
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715ce64000
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715ce64080
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715ce64100
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715ce64180
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715ce64200
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715ce62180
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715ce62200
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x715ce62280
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x715ce62300
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x715ce62380
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x715ce62400
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x715ce62480
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x715ce62500
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x715ce62580
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x715ce62600
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x715ce62680
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x715ce62700
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x715ce62780
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x715ce62800
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x715ce62880
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x715ce62900
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x715ce62980
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x715ce62a00
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x715ce62a80
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x715ce62b00
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x715ce62b80
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x715ce62c00
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x715ce62c80
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x715ce62d00
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x715ce62d80
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x715ce62e00
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x715ce62e80

--------------------------------
Class: FindFloorResult // 715db16f40
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715db39480
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715db37400
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715db37480
	float FloorDist;//[Offset: 0x4, Size: 0x4] 0x715db37500
	float LineDist;//[Offset: 0x8, Size: 0x4] 0x715db37580
	HitResult HitResult;//[Offset: 0xc, Size: 0x88] 0x715db37600

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction // 715db17000

--------------------------------
Class: RootMotionSourceGroup // 715da93b80
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715da8b080
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x715da8b100
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x715da8b180
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x715da8b200
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1] 0x715da8b300
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc] 0x715da8b380

--------------------------------
Class: RootMotionSourceSettings // 715da93ac0
	byte Flags;//[Offset: 0x0, Size: 0x1] 0x715da8b280

--------------------------------
Class: Vector_NetQuantize10.Vector // 7149068140

--------------------------------
Class: RootMotionMovementParams // 715da952c0
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da8e480
	float BlendWeight;//[Offset: 0x4, Size: 0x4] 0x715da8e500
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30] 0x715da8e580

--------------------------------
Class: BasedMovementInfo // 715da93d00
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8] 0x715da89500
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x715da89580
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc] 0x715da89600
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc] 0x715da89680
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715da89700
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715da89780
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x715da89800

--------------------------------
Class: SimulatedRootMotionReplicatedMove // 715db170c0
	float Time;//[Offset: 0x0, Size: 0x4] 0x715db37680
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98] 0x715db37700

--------------------------------
Class: RepRootMotionMontage // 715da93c40
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da8ac00
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8] 0x715da8ac80
	float Position;//[Offset: 0x10, Size: 0x4] 0x715da8ad00
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc] 0x715da8ad80
	Rotator Rotation;//[Offset: 0x20, Size: 0xc] 0x715da8ae00
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8] 0x715da8ae80
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8] 0x715da8af00
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x715da8af80
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x715da8b000
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38] 0x715da8b400
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc] 0x715da8b480
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc] 0x715da8b500

--------------------------------
Class: SimpleMemberReference // 7149066e80
	Object* MemberParent;//[Offset: 0x0, Size: 0x8] 0x7148ca5980
	FName MemberName;//[Offset: 0x8, Size: 0x8] 0x7148ca5a00
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10] 0x7148ca5a80

--------------------------------
Class: MatineeActor.Actor.Object // 71a4aa2180
	InterpData* MatineeData;//[Offset: 0x220, Size: 0x8] 0x715cc1c480
	FName MatineeControllerName;//[Offset: 0x228, Size: 0x8] 0x715cc1c500
	float PlayRate;//[Offset: 0x230, Size: 0x4] 0x715cc1c580
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1] 0x715cc1c600
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1] 0x715cc1a580
	float ForceStartPosition;//[Offset: 0x238, Size: 0x4] 0x715cc1a600
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1] 0x715cc1a680
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1] 0x715cc1a700
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 0x1] 0x715cc1a780
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 0x1] 0x715cc1a800
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 0x1] 0x715cc1a880
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 0x1] 0x715cc1a900
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 0x1] 0x715cc1a980
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 0x1] 0x715cc1aa00
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 0x4] 0x715cc1aa80
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1] 0x715cc1ab00
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1] 0x715cc1ab80
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1] 0x715cc1ac00
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1] 0x715cc1ac80
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 0x10] 0x715cb295c0
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x715cc1ad80
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 0x10] 0x715cb29660
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 0x10] 0x715cb29700
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x715cc1af00
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1] 0x715cc1af80
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1] 0x715cc1b000
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 0x1] 0x715cc1b080
	float InterpPosition;//[Offset: 0x284, Size: 0x4] 0x715cc1b100
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 0x1] 0x715cc1b180
	delegate OnPlay;//[Offset: 0x290, Size: 0x10] 0x715cc1b200
	delegate OnStop;//[Offset: 0x2a0, Size: 0x10] 0x715cc1b280
	delegate OnPause;//[Offset: 0x2b0, Size: 0x10] 0x715cc1b300
	void Stop();// 0x6260ad0 0x715cbef820
	void SetPosition(float NewPosition, bool bJump);// 0x62609a8 0x715cbef900
	void SetLoopingState(bool bNewLooping);// 0x62608d8 0x715cbef9e0
	void Reverse();// 0x6260ab4 0x715cbefac0
	void Play();// 0x6260aec 0x715cbefba0
	void Pause();// 0x6260a98 0x715cbefc80
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x626078c 0x715cbefd60
	void ChangePlaybackDirection();// 0x626098c 0x715cbefe40

--------------------------------
Class: InterpData.Object // 71a4a20880
	float InterpLength;//[Offset: 0x28, Size: 0x4] 0x715cb7eb00
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4] 0x715cb7eb80
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10] 0x715cb266e0
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8] 0x715cb7ec80
	float EdSectionStart;//[Offset: 0x48, Size: 0x4] 0x715cb7ed00
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4] 0x715cb7ed80
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cb7ee00
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8] 0x715cb7ee80
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10] 0x715cb23e40

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object // 71a4a29e80

--------------------------------
Class: InterpGroupActorInfo // 715db1e2c0
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x715db4fc00
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10] 0x715daeba00

--------------------------------
Class: CameraCutInfo // 715db1e200
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715db4fb00
	float Timestamp;//[Offset: 0xc, Size: 0x4] 0x715db4fb80

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object // 71a4a13d00
	class Actor* ChildActorClass;//[Offset: 0x1f0, Size: 0x8] 0x715cb207e0
	Actor* ChildActor;//[Offset: 0x1f8, Size: 0x8] 0x715cb32600
	Actor* ChildActorTemplate;//[Offset: 0x200, Size: 0x8] 0x715cb32680
	void SetChildActorClass(class Actor InClass);// 0x61424e0 0x715cb161a0

--------------------------------
Class: ActorChannel.Channel.Object // 71a49d4c00
	Actor* Actor;//[Offset: 0x70, Size: 0x8] 0x715caf6c00
	Object*[] CreateSubObjects;//[Offset: 0x160, Size: 0x10] 0x715ca7ccc0

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object // 71a49d4200
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715caf6580
	float AnimLength;//[Offset: 0x8c, Size: 0x4] 0x715caf6600
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8] 0x715caf6680
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4] 0x715caf6700
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1] 0x715caf6780
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10] 0x715ca7c9a0
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4] 0x715caf6880
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10] 0x715ca7ca40
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10] 0x715ca7cae0
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20] 0x715caf6a00

--------------------------------
Class: InterpolationParameter // 715db15ec0
	float InterpolationTime;//[Offset: 0x0, Size: 0x4] 0x715db28100
	byte InterpolationType;//[Offset: 0x4, Size: 0x1] 0x715db28180

--------------------------------
Class: PerBoneInterpolation // 715db16280
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x715db26680
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4] 0x715db26700

--------------------------------
Class: BlendSample // 715db16040
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8] 0x715db28400
	Vector SampleValue;//[Offset: 0x8, Size: 0xc] 0x715db26380
	float RateScale;//[Offset: 0x14, Size: 0x4] 0x715db26400

--------------------------------
Class: EditorElement // 715db16100
	int Indices;//[Offset: 0x0, Size: 0x4] 0x715db26480
	float Weights;//[Offset: 0xc, Size: 0x4] 0x715db26500

--------------------------------
Class: BlendParameter // 715db15f80
	FString DisplayName;//[Offset: 0x0, Size: 0x10] 0x715db28200
	float Min;//[Offset: 0x10, Size: 0x4] 0x715db28280
	float Max;//[Offset: 0x14, Size: 0x4] 0x715db28300
	int GridNum;//[Offset: 0x18, Size: 0x4] 0x715db28380

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object // 71a49d4480
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1] 0x715caf6500

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object // 71a49d4700

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object // 71a49d3a80
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1] 0x715caf6480

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object // 71a49d3d00

--------------------------------
Class: AmbientSound.Actor.Object // 71a49d3580
	AudioComponent* AudioComponent;//[Offset: 0x220, Size: 0x8] 0x715caf8000
	void Stop();// 0x60d42b0 0x715cae7940
	void Play(float StartTime);// 0x60d42c4 0x715cae7a20
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0x60d444c 0x715cae7b00
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);// 0x60d4530 0x715cae7be0
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0x60d4368 0x715cae7cc0

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object // 71a4867680
	SoundBase* sound;//[Offset: 0x1f0, Size: 0x8] 0x715cff9c00
	AudioComponentParam[] InstanceParameters;//[Offset: 0x1f8, Size: 0x10] 0x715cf929a0
	SoundClass* SoundClassOverride;//[Offset: 0x208, Size: 0x8] 0x715cff9d00
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1] 0x715cff9d80
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1] 0x715cff9e00
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1] 0x715cff9e80
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1] 0x715cff9f00
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1] 0x715cff9f80
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x210, Size: 0x1] 0x715cffa000
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x210, Size: 0x1] 0x715cffa080
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1] 0x715cffa100
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1] 0x715cffa180
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1] 0x715cffa200
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 0x1] 0x715cffa280
	FName AudioComponentUserID;//[Offset: 0x218, Size: 0x8] 0x715cffa300
	float PitchModulationMin;//[Offset: 0x220, Size: 0x4] 0x715cffa380
	float PitchModulationMax;//[Offset: 0x224, Size: 0x4] 0x715cffa400
	float VolumeModulationMin;//[Offset: 0x228, Size: 0x4] 0x715cffa480
	float VolumeModulationMax;//[Offset: 0x22c, Size: 0x4] 0x715cffa500
	float VolumeMultiplier;//[Offset: 0x230, Size: 0x4] 0x715cff8480
	int EnvelopeFollowerAttackTime;//[Offset: 0x234, Size: 0x4] 0x715cff8500
	int EnvelopeFollowerReleaseTime;//[Offset: 0x238, Size: 0x4] 0x715cff8580
	float Priority;//[Offset: 0x23c, Size: 0x4] 0x715cff8600
	float SubtitlePriority;//[Offset: 0x240, Size: 0x4] 0x715cff8680
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x248, Size: 0x8] 0x715cff8700
	float PitchMultiplier;//[Offset: 0x250, Size: 0x4] 0x715cff8780
	float LowPassFilterFrequency;//[Offset: 0x254, Size: 0x4] 0x715cff8800
	SoundAttenuation* AttenuationSettings;//[Offset: 0x260, Size: 0x8] 0x715cff8880
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x268, Size: 0x3a0] 0x715cff8900
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x608, Size: 0x8] 0x715cff8980
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x610, Size: 0x50] 0x715cf92a40
	enum AutoAttachLocationRule;//[Offset: 0x66c, Size: 0x1] 0x715cf92ae0
	enum AutoAttachRotationRule;//[Offset: 0x66d, Size: 0x1] 0x715cf92b80
	enum AutoAttachScaleRule;//[Offset: 0x66e, Size: 0x1] 0x715cf92c20
	delegate OnAudioFinished;//[Offset: 0x670, Size: 0x10] 0x715cff8c00
	delegate OnAudioPlaybackPercent;//[Offset: 0x698, Size: 0x10] 0x715cff8c80
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x6c0, Size: 0x10] 0x715cff8d00
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x6e8, Size: 0x10] 0x715cff8d80
	SoundModulation Modulation;//[Offset: 0x710, Size: 0x10] 0x715cff8e00
	delegate OnQueueSubtitles;//[Offset: 0x720, Size: 0x10] 0x715cff8e80
	SceneComponent* AutoAttachParent;//[Offset: 0x730, Size: 0x8] 0x715cff8f00
	FName AutoAttachSocketName;//[Offset: 0x738, Size: 0x8] 0x715cff8f80
	void StopDelayed(float DelayTime);// 0x6108ac0 0x715cfdf820
	void Stop();// 0x6108b64 0x715cfdf900
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x61086ac 0x715cfdf9e0
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x6108430 0x715cfdfac0
	void SetUISound(bool bInUISound);// 0x61082e0 0x715cfdfba0
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x6108138 0x715cfdfc80
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x6108050 0x715cfdfd60
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x6107f68 0x715cfdfe40
	void SetSound(SoundBase* NewSound);// 0x6108ed0 0x715cfdff20
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x610838c 0x715cfdcaa0
	void SetPaused(bool bPause);// 0x6108a14 0x715cfdcb80
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x6107e18 0x715cfdcc60
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x6107ebc 0x715cfdcd40
	void SetIntParameter(FName InName, int inInt);// 0x61084d4 0x715cfdce20
	void SetFloatParameter(FName InName, float InFloat);// 0x6108790 0x715cfdcf00
	void SetBoolParameter(FName InName, bool InBool);// 0x61085bc 0x715cfdcfe0
	void Play(float StartTime);// 0x6108b80 0x715cfdd0c0
	bool IsPlaying();// 0x61089d4 0x715cfdd1a0
	bool HasCookedFFTData();// 0x6107de0 0x715cfdd280
	bool HasCookedAmplitudeEnvelopeData();// 0x6107da8 0x715cfdd360
	enum GetPlayState();// 0x61089a0 0x715cfdd440
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x6107b78 0x715cfdd520
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x6107c78 0x715cfdd600
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x61079ec 0x715cfdd6e0
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x6107ab8 0x715cfdd7c0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x6108c2c 0x715cfdd8a0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x6108d5c 0x715cfdd980
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x6107918 0x715cfdda60
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x6108878 0x715cfddb40
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x6108220 0x715cfddc20

--------------------------------
Class: AudioComponentParam // 715db14240
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x715db24600
	float FloatParam;//[Offset: 0x8, Size: 0x4] 0x715db24680
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715db24700
	int IntParam;//[Offset: 0x10, Size: 0x4] 0x715db24780
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8] 0x715db24800

--------------------------------
Class: SoundWaveSpectralDataPerSound // 715ce77b40
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10] 0x715daee520
	float PlaybackTime;//[Offset: 0x10, Size: 0x4] 0x715ce8a180
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x715ce8a200

--------------------------------
Class: SoundWaveSpectralData // 715ce77a80
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x715ce89f80
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x715ce8a000
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4] 0x715ce8a080

--------------------------------
Class: SoundWaveEnvelopeDataPerSound // 715ce74a80
	float Envelope;//[Offset: 0x0, Size: 0x4] 0x715ce8a280
	float PlaybackTime;//[Offset: 0x4, Size: 0x4] 0x715ce8a300
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8] 0x715ce8a380

--------------------------------
Class: DeveloperSettings.Object // 71a482dd00

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object // 71a49d3300
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4] 0x715caf7b00
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10] 0x715ca7c900
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715caf7c00
	bool bOnlyCheckForMissingSkeletalMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715caf7c80
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x715caf7d00
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x715caf7d80
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x715caf7e00
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x715caf7e80
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x715caf7f00
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1] 0x715caf7f80

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object // 71a49d3080
	Skeleton* TargetSkeleton;//[Offset: 0xa8, Size: 0x8] 0x715caf7900
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0x10] 0x715ca7c860
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x715caf7a00
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x715caf7a80

--------------------------------
Class: AnimGroupInfo // 715daddfc0
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715db0b780
	LinearColor Color;//[Offset: 0x8, Size: 0x10] 0x715db0b800

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object // 71a49bb000
	int NumReplicatedProperties;//[Offset: 0x260, Size: 0x4] 0x715cac2b00
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x715cac2b80
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x715cac2c00
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x268, Size: 0x10] 0x715ca75420
	ActorComponent*[] ComponentTemplates;//[Offset: 0x278, Size: 0x10] 0x715ca754c0
	TimelineTemplate*[] Timelines;//[Offset: 0x288, Size: 0x10] 0x715ca75560
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x298, Size: 0x10] 0x715ca75600
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x2a8, Size: 0x8] 0x715cac2e80
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x2b0, Size: 0x8] 0x715cac2f00
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x2b8, Size: 0x8] 0x715cac2f80
	Function* UberGraphFunction;//[Offset: 0x2c8, Size: 0x8] 0x715cac3000
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x2d0, Size: 0x50] 0x715cecf040

--------------------------------
Class: DynamicBlueprintBinding.Object // 71a49bba00

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object // 71a49d2e00
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x360, Size: 0x10] 0x715ca7c5e0
	Skeleton* TargetSkeleton;//[Offset: 0x370, Size: 0x8] 0x715caf7400
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x378, Size: 0x10] 0x715ca7c680
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x388, Size: 0x50] 0x715ceced40
	FName[] SyncGroupNames;//[Offset: 0x458, Size: 0x10] 0x715ca7c720
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x468, Size: 0x10] 0x715ca7c7c0
	<FName,GraphAssetPlayerInformation> GraphAssetPlayerInformation;//[Offset: 0x478, Size: 0x50] 0x715cecee00
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x4c8, Size: 0x50] 0x715ceceec0

--------------------------------
Class: BakedAnimationStateMachine // 715db12140
	FName MachineName;//[Offset: 0x0, Size: 0x8] 0x715db22300
	int InitialState;//[Offset: 0x8, Size: 0x4] 0x715db22380
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10] 0x715dae83a0
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10] 0x715dae84e0

--------------------------------
Class: BakedAnimationState // 715db11f00
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x715db22400
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10] 0x715dae81c0
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4] 0x715db22800
	int StartNotify;//[Offset: 0x1c, Size: 0x4] 0x715db22880
	int EndNotify;//[Offset: 0x20, Size: 0x4] 0x715db22900
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4] 0x715db22980
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715db22a00
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4] 0x715db22a80
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10] 0x715dae8260
	int[] LayerNodeIndices;//[Offset: 0x40, Size: 0x10] 0x715dae8300
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715db22c00

--------------------------------
Class: BakedStateExitTransition // 715db11e40
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4] 0x715db22480
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4] 0x715db22500
	int TransitionIndex;//[Offset: 0x8, Size: 0x4] 0x715db22580
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715db22600
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x715db22680
	int[] PoseEvaluatorLinks;//[Offset: 0x10, Size: 0x10] 0x715dae8120

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase // 715db11fc0
	int PreviousState;//[Offset: 0x8, Size: 0x4] 0x715db22d00
	int NextState;//[Offset: 0xc, Size: 0x4] 0x715db22d80
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4] 0x715db22e00
	int StartNotify;//[Offset: 0x14, Size: 0x4] 0x715db22e80
	int EndNotify;//[Offset: 0x18, Size: 0x4] 0x715db22f00
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4] 0x715db22f80
	enum BlendMode;//[Offset: 0x20, Size: 0x1] 0x715dae8440
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8] 0x715db23080
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8] 0x715db23100
	byte LogicType;//[Offset: 0x38, Size: 0x1] 0x715db23180

--------------------------------
Class: AnimationStateBase // 715db12080
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x715db21100

--------------------------------
Class: CachedPoseIndices // 715dadfac0
	int[] OrderedSavedPoseNodeIndices;//[Offset: 0x0, Size: 0x10] 0x715dae7360

--------------------------------
Class: ExposedValueHandler // 715db12ec0
	FName BoundFunction;//[Offset: 0x0, Size: 0x8] 0x715db21f00
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8, Size: 0x10] 0x715dae6820
	Function* Function;//[Offset: 0x18, Size: 0x8] 0x715db20480
	FieldPathProperty ValueHandlerNodeProperty;//[Offset: 0x20, Size: 0x20] 0x715db20500

--------------------------------
Class: ExposedValueCopyRecord // 715db12e00
	FName SourcePropertyName;//[Offset: 0x0, Size: 0x8] 0x715db21f80
	FName SourceSubPropertyName;//[Offset: 0x8, Size: 0x8] 0x715db22000
	int SourceArrayIndex;//[Offset: 0x10, Size: 0x4] 0x715db22080
	bool bInstanceIsTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x715db22100
	enum PostCopyOperation;//[Offset: 0x15, Size: 0x1] 0x715dae9020
	enum CopyType;//[Offset: 0x16, Size: 0x1] 0x715dae6780
	FieldPathProperty DestProperty;//[Offset: 0x18, Size: 0x20] 0x715db20180
	int DestArrayIndex;//[Offset: 0x38, Size: 0x4] 0x715db20200
	int Size;//[Offset: 0x3c, Size: 0x4] 0x715db20280
	FieldPathProperty CachedSourceProperty;//[Offset: 0x40, Size: 0x20] 0x715db20300
	FieldPathProperty CachedSourceStructSubProperty;//[Offset: 0x60, Size: 0x20] 0x715db20380

--------------------------------
Class: GraphAssetPlayerInformation // 715dadfb80
	int[] PlayerNodeIndices;//[Offset: 0x0, Size: 0x10] 0x715dae7400

--------------------------------
Class: AnimGraphBlendOptions // 715dadfc40
	float BlendInTime;//[Offset: 0x0, Size: 0x4] 0x715db0d600
	float BlendOutTime;//[Offset: 0x4, Size: 0x4] 0x715db0d680

--------------------------------
Class: AnimClassData.Object // 71a49d2680
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x30, Size: 0x10] 0x715ca7bd20
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8] 0x715caf8a00
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x48, Size: 0x10] 0x715ca7bdc0
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x58, Size: 0x50] 0x715ceceb00
	AnimBlueprintFunction[] AnimBlueprintFunctions;//[Offset: 0xa8, Size: 0x10] 0x715ca7be60
	AnimBlueprintFunctionData[] AnimBlueprintFunctionData;//[Offset: 0xb8, Size: 0x10] 0x715ca7bf00
	AnimNodeProperties(FieldPathProperty)[] AnimNodeProperties;//[Offset: 0xc8, Size: 0x10] 0x715ca7bfa0
	LinkedAnimGraphNodeProperties(FieldPathProperty)[] LinkedAnimGraphNodeProperties;//[Offset: 0xe8, Size: 0x10] 0x715ca7c040
	LinkedAnimLayerNodeProperties(FieldPathProperty)[] LinkedAnimLayerNodeProperties;//[Offset: 0x108, Size: 0x10] 0x715ca7c0e0
	PreUpdateNodeProperties(FieldPathProperty)[] PreUpdateNodeProperties;//[Offset: 0x128, Size: 0x10] 0x715ca7c180
	DynamicResetNodeProperties(FieldPathProperty)[] DynamicResetNodeProperties;//[Offset: 0x148, Size: 0x10] 0x715ca7c220
	StateMachineNodeProperties(FieldPathProperty)[] StateMachineNodeProperties;//[Offset: 0x168, Size: 0x10] 0x715ca7c2c0
	InitializationNodeProperties(FieldPathProperty)[] InitializationNodeProperties;//[Offset: 0x188, Size: 0x10] 0x715ca7c360
	<FName,GraphAssetPlayerInformation> GraphNameAssetPlayers;//[Offset: 0x1a8, Size: 0x50] 0x715cecebc0
	FName[] SyncGroupNames;//[Offset: 0x1f8, Size: 0x10] 0x715ca7c400
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x208, Size: 0x10] 0x715ca7c4a0
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x218, Size: 0x50] 0x715cecec80

--------------------------------
Class: AnimBlueprintFunction // 715dadfa00
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715db0d200
	FName Group;//[Offset: 0x8, Size: 0x8] 0x715db0d280
	int OutputPoseNodeIndex;//[Offset: 0x10, Size: 0x4] 0x715db0d300
	FName[] InputPoseNames;//[Offset: 0x18, Size: 0x10] 0x715dae7220
	int[] InputPoseNodeIndices;//[Offset: 0x28, Size: 0x10] 0x715dae72c0
	bool bImplemented;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715db0d480

--------------------------------
Class: AnimBlueprintFunctionData // 715dadfd00
	FieldPathProperty OutputPoseNodeProperty;//[Offset: 0x0, Size: 0x20] 0x715db0b600
	InputPoseNodeProperties(FieldPathProperty)[] InputPoseNodeProperties;//[Offset: 0x20, Size: 0x10] 0x715dae74a0
	InputProperties(FieldPathProperty)[] InputProperties;//[Offset: 0x30, Size: 0x10] 0x715dae7540

--------------------------------
Class: AnimClassInterface.Interface.Object // 71a49d2400

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object // 71a49d2180
	AnimTrack AnimationTrack;//[Offset: 0xa8, Size: 0x10] 0x715caf8680

--------------------------------
Class: AnimCompress.AnimBoneCompressionCodec.Object // 71a49d1a00
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715caf8480
	byte TranslationCompressionFormat;//[Offset: 0x39, Size: 0x1] 0x715caf8500
	byte RotationCompressionFormat;//[Offset: 0x3a, Size: 0x1] 0x715caf8580
	byte ScaleCompressionFormat;//[Offset: 0x3b, Size: 0x1] 0x715caf8600

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object // 71a49d1780

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object // 71a49d1500

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object // 71a49d1000
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x715cafa100
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x715cafa180
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x715cafa200
	float MaxEffectorDiff;//[Offset: 0x48, Size: 0x4] 0x715cafa280
	float MinEffectorDiff;//[Offset: 0x4c, Size: 0x4] 0x715cafa300
	float EffectorDiffSocket;//[Offset: 0x50, Size: 0x4] 0x715cafa380
	float ParentKeyScale;//[Offset: 0x54, Size: 0x4] 0x715cafa400
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x715cafa480
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x715cafa500

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object // 71a49d1280
	float MaxZeroingThreshold;//[Offset: 0x5c, Size: 0x4] 0x715caf9680
	float MaxPosDiffBitwise;//[Offset: 0x60, Size: 0x4] 0x715caf9700
	float MaxAngleDiffBitwise;//[Offset: 0x64, Size: 0x4] 0x715caf9780
	float MaxScaleDiffBitwise;//[Offset: 0x68, Size: 0x4] 0x715caf9800
	byte[] AllowedRotationFormats;//[Offset: 0x70, Size: 0x10] 0x715ca7baa0
	byte[] AllowedTranslationFormats;//[Offset: 0x80, Size: 0x10] 0x715ca7bb40
	byte[] AllowedScaleFormats;//[Offset: 0x90, Size: 0x10] 0x715ca7bbe0
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x715caf9a00
	float ResampledFramerate;//[Offset: 0xa4, Size: 0x4] 0x715caf9a80
	int MinKeysForResampling;//[Offset: 0xa8, Size: 0x4] 0x715caf9b00
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x715caf9b80
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x715caf9c00
	int TrackHeightBias;//[Offset: 0xb0, Size: 0x4] 0x715caf9c80
	float ParentingDivisor;//[Offset: 0xb4, Size: 0x4] 0x715caf9d00
	float ParentingDivisorExponent;//[Offset: 0xb8, Size: 0x4] 0x715caf9d80
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x715caf9e00
	float RotationErrorSourceRatio;//[Offset: 0xc0, Size: 0x4] 0x715caf9e80
	float TranslationErrorSourceRatio;//[Offset: 0xc4, Size: 0x4] 0x715caf9f00
	float ScaleErrorSourceRatio;//[Offset: 0xc8, Size: 0x4] 0x715caf9f80
	float MaxErrorPerTrackRatio;//[Offset: 0xcc, Size: 0x4] 0x715cafa000
	float PerturbationProbeSize;//[Offset: 0xd0, Size: 0x4] 0x715cafa080

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.AnimBoneCompressionCodec.Object // 71a49d0d80
	int MinKeys;//[Offset: 0x3c, Size: 0x4] 0x715caf9580
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x715caf9600

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object // 71a49d0b00
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x715cafb500
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x715cafb580
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x715caf9500

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object // 71a49d0600

--------------------------------
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object // 71a49d0380

--------------------------------
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object // 71a49d0100

--------------------------------
Class: AnimLayerInterface.Interface.Object // 71a49da100

--------------------------------
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object // 71a49d9c00

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object // 71a49d9980
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8] 0x715cafa580
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x715cafa600
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x715cafa680
	Vector Scale;//[Offset: 0x58, Size: 0xc] 0x715cafa700
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cafa780
	FName SocketName;//[Offset: 0x84, Size: 0x8] 0x715cafa800

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object // 71a49d9700
	SoundBase* sound;//[Offset: 0x38, Size: 0x8] 0x715cafc400
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4] 0x715cafc480
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4] 0x715cafc500
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715cafc580
	FName AttachName;//[Offset: 0x4c, Size: 0x8] 0x715cafc600

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object // 71a49d9480

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object // 71a49d9200

--------------------------------
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object // 71a49d8f80

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object // 71a49d8d00

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object // 71a49d8a80
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x715cafc180
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x715cafc200
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x715cafc280
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x715cafc300
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715cafc380

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object // 71a49d8800
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x715cafbd00
	FName FirstSocketName;//[Offset: 0x38, Size: 0x8] 0x715cafbd80
	FName SecondSocketName;//[Offset: 0x40, Size: 0x8] 0x715cafbe00
	byte WidthScaleMode;//[Offset: 0x48, Size: 0x1] 0x715cafbe80
	FName WidthScaleCurve;//[Offset: 0x4c, Size: 0x8] 0x715cafbf00
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x715cafbf80
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x45c6aa0 0x715cae74e0

--------------------------------
Class: AnimSet.Object // 71a49d8300
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715cafd100
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10] 0x715ca7db20
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10] 0x715ca7dbc0
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10] 0x715ca7dc60
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10] 0x715ca7dd00
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10] 0x715ca7dda0
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10] 0x715ca7de40
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8] 0x715cafd480
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8] 0x715cafd500

--------------------------------
Class: AnimSetMeshLinkup // 715db12380
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10] 0x715dae8580

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object // 71a49d8080
	AnimationAsset* CurrentAsset;//[Offset: 0x268, Size: 0x8] 0x715cafe680
	delegate PostEvaluateAnimEvent;//[Offset: 0x270, Size: 0x10] 0x715cafe700
	void StopAnim();// 0x60f6748 0x715caea340
	void SetReverse(bool bInReverse);// 0x60f6c40 0x715caea420
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0x60f648c 0x715caea500
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0x60f6a20 0x715caea5e0
	void SetPosition(float InPosition, bool bFireNotifies);// 0x60f6b50 0x715caea6c0
	void SetPlayRate(float InPlayRate);// 0x60f6cec 0x715caea7a0
	void SetPlaying(bool bIsPlaying);// 0x60f68c4 0x715caea880
	void SetLooping(bool bIsLooping);// 0x60f6d90 0x715caea960
	void SetBlendSpaceInput(out const Vector InBlendInput);// 0x60f6970 0x715caeaa40
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0x60f6608 0x715caeab20
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0x60f675c 0x715caeac00
	float GetLength();// 0x60f6890 0x715caeace0
	AnimationAsset* GetAnimationAsset();// 0x60f65cc 0x715cae7400

--------------------------------
Class: AnimStateMachineTypes.Object // 71a49d7e00

--------------------------------
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object // 71a49d7b80
	int NumFrames;//[Offset: 0xa8, Size: 0x4] 0x715cafe200
	enum Interpolation;//[Offset: 0xac, Size: 0x1] 0x715ca7da80
	FName RetargetSource;//[Offset: 0xb0, Size: 0x8] 0x715cafe300
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xc8, Size: 0x8] 0x715cafe380
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd0, Size: 0x8] 0x715cafe400
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x715cafe480
	byte RootMotionRootLock;//[Offset: 0xd9, Size: 0x1] 0x715cafe500
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x715cafe580
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1] 0x715cafe600

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object // 71a49d7900
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xb0, Size: 0x10] 0x7148ca6980
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc0, Size: 0x10] 0x7148ca6a00
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd0, Size: 0x10] 0x7148ca6a80
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe0, Size: 0x10] 0x7148ca6b00
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xf0, Size: 0x10] 0x7148ca6b80
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x100, Size: 0x10] 0x7148ca6c00
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x110, Size: 0x10] 0x7148ca6d00
	delegate OnTemperatureChangeDelegate;//[Offset: 0x120, Size: 0x10] 0x7148ca6e00
	delegate OnLowPowerModeDelegate;//[Offset: 0x130, Size: 0x10] 0x7148ca6f00

--------------------------------
Class: PhysicsSettings.DeveloperSettings.Object // 71a4acb780
	float DefaultGravityZ;//[Offset: 0x38, Size: 0x4] 0x715cc47680
	float DefaultTerminalVelocity;//[Offset: 0x3c, Size: 0x4] 0x715cc47700
	float DefaultFluidFriction;//[Offset: 0x40, Size: 0x4] 0x715cc47780
	int SimulateScratchMemorySize;//[Offset: 0x44, Size: 0x4] 0x715cc47800
	int RagdollAggregateThreshold;//[Offset: 0x48, Size: 0x4] 0x715cc47880
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x4c, Size: 0x4] 0x715cc47900
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715cc47980
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715cc47a00
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x715cc47a80
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x715cc47b00
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x715cc47b80
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x58, Size: 0x34] 0x715cc47c00
	byte LockedAxis;//[Offset: 0x8c, Size: 0x1] 0x715cc47c80
	byte DefaultDegreesOfFreedom;//[Offset: 0x8d, Size: 0x1] 0x715cc47d00
	float BounceThresholdVelocity;//[Offset: 0x90, Size: 0x4] 0x715cc47d80
	byte FrictionCombineMode;//[Offset: 0x94, Size: 0x1] 0x715cc47e00
	byte RestitutionCombineMode;//[Offset: 0x95, Size: 0x1] 0x715cc47e80
	float MaxAngularVelocity;//[Offset: 0x98, Size: 0x4] 0x715cc47f00
	float MaxDepenetrationVelocity;//[Offset: 0x9c, Size: 0x4] 0x715cc47f80
	float ContactOffsetMultiplier;//[Offset: 0xa0, Size: 0x4] 0x715cc48000
	float MinContactOffset;//[Offset: 0xa4, Size: 0x4] 0x715cc48080
	float MaxContactOffset;//[Offset: 0xa8, Size: 0x4] 0x715cc48100
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1] 0x715cc48180
	byte DefaultShapeComplexity;//[Offset: 0xad, Size: 0x1] 0x715cc48200
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1] 0x715cc48280
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1] 0x715cc48300
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715cc48380
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1] 0x715cc48400
	bool bDisableKinematicStaticPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1] 0x715cc46380
	bool bDisableKinematicKinematicPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1] 0x715cc46400
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1] 0x715cc46480
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1] 0x715cc46500
	float AnimPhysicsMinDeltaTime;//[Offset: 0xb8, Size: 0x4] 0x715cc46580
	bool bSimulateAnimPhysicsAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x715cc46600
	float MaxPhysicsDeltaTime;//[Offset: 0xc0, Size: 0x4] 0x715cc46680
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1] 0x715cc46700
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x715cc46780
	float MaxSubstepDeltaTime;//[Offset: 0xc8, Size: 0x4] 0x715cc46800
	int MaxSubsteps;//[Offset: 0xcc, Size: 0x4] 0x715cc46880
	float SyncSceneSmoothingFactor;//[Offset: 0xd0, Size: 0x4] 0x715cc46900
	float InitialAverageFrameRate;//[Offset: 0xd4, Size: 0x4] 0x715cc46980
	int PhysXTreeRebuildRate;//[Offset: 0xd8, Size: 0x4] 0x715cc46a00
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0xe0, Size: 0x10] 0x715cb2c400
	BroadphaseSettings DefaultBroadphaseSettings;//[Offset: 0xf0, Size: 0x40] 0x715cc46b00
	ChaosPhysicsSettings ChaosSettings;//[Offset: 0x130, Size: 0x3] 0x715cc46b80

--------------------------------
Class: RigidBodyErrorCorrection // 715db1c340
	float PingExtrapolation;//[Offset: 0x0, Size: 0x4] 0x715db43300
	float PingLimit;//[Offset: 0x4, Size: 0x4] 0x715db43380
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 0x4] 0x715db43400
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 0x4] 0x715db43480
	float MaxRestoredStateError;//[Offset: 0x10, Size: 0x4] 0x715db43500
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 0x4] 0x715db43580
	float PositionLerp;//[Offset: 0x18, Size: 0x4] 0x715db43600
	float AngleLerp;//[Offset: 0x1c, Size: 0x4] 0x715db43680
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 0x4] 0x715db43700
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 0x4] 0x715db43780
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 0x4] 0x715db43800
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 0x4] 0x715db43880
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 0x4] 0x715db43900

--------------------------------
Class: PhysicalSurfaceName // 715ce701c0
	byte Type;//[Offset: 0x0, Size: 0x1] 0x715ce6af00
	FName Name;//[Offset: 0x4, Size: 0x8] 0x715ce6af80

--------------------------------
Class: ChaosPhysicsSettings // 715ce70280
	enum DefaultThreadingModel;//[Offset: 0x0, Size: 0x1] 0x715daed620
	enum DedicatedThreadTickMode;//[Offset: 0x1, Size: 0x1] 0x715daed6c0
	enum DedicatedThreadBufferMode;//[Offset: 0x2, Size: 0x1] 0x715daed760

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object // 71a4a13300
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10] 0x715cb20380
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10] 0x715cb20420
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10] 0x715cb204c0
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10] 0x715cb20560
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10] 0x715cb20600

--------------------------------
Class: CollisionResponseTemplate // 715db16b80
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715db38c00
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1] 0x715db38c80
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x715db38d00
	FName ObjectTypeName;//[Offset: 0x2c, Size: 0x8] 0x715db38d80
	ResponseChannel[] CustomResponses;//[Offset: 0x38, Size: 0x10] 0x715dae9200

--------------------------------
Class: CustomChannelSetup // 715db16c40
	byte Channel;//[Offset: 0x0, Size: 0x1] 0x715db38e80
	byte DefaultResponse;//[Offset: 0x1, Size: 0x1] 0x715db38f00
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715db38f80
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715db39000
	FName Name;//[Offset: 0x4, Size: 0x8] 0x715db39080

--------------------------------
Class: CustomProfile // 715db16d00
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715db39100
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10] 0x715dae92a0

--------------------------------
Class: Redirector // 715db1a6c0
	FName OldName;//[Offset: 0x0, Size: 0x8] 0x715db3fc80
	FName NewName;//[Offset: 0x8, Size: 0x8] 0x715db3fd00

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a49d7680
	Color ArrowColor;//[Offset: 0x418, Size: 0x4] 0x715cafdf00
	float ArrowSize;//[Offset: 0x41c, Size: 0x4] 0x715cafdf80
	float ScreenSize;//[Offset: 0x420, Size: 0x4] 0x715cafe000
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1] 0x715cafe080
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x424, Size: 0x1] 0x715cafe100
	void SetArrowColor(LinearColor NewColor);// 0x60fe964 0x715caea260

--------------------------------
Class: AssetExportTask.Object // 71a49d7400
	Object* Object;//[Offset: 0x28, Size: 0x8] 0x715cafd900
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8] 0x715cafd980
	FString Filename;//[Offset: 0x38, Size: 0x10] 0x715cafda00
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cafda80
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x715cafdb00
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x715cafdb80
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x715cafdc00
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x715cafdc80
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x715cafdd00
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10] 0x715ca7d940
	Object* Options;//[Offset: 0x60, Size: 0x8] 0x715cafde00
	FString[] Errors;//[Offset: 0x68, Size: 0x10] 0x715ca7d9e0

--------------------------------
Class: Exporter.Object // 71a4a1b000
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8] 0x715cb21820
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8] 0x715cb53700
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10] 0x715cb218c0
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10] 0x715cb21960
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4] 0x715cb53880
	int TextIndent;//[Offset: 0x5c, Size: 0x4] 0x715cb53900
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x715cb53980
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x715cb53a00
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x715cb53a80
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8] 0x715cb53b00
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0x45c6aa0 0x715cb1d520
	static bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0x617985c 0x715cb1d600
	static bool RunAssetExportTask(AssetExportTask* Task);// 0x6179920 0x715cb1d6e0

--------------------------------
Class: AssetImportData.Object // 71a4866500

--------------------------------
Class: AssetManager.Object // 71a49d7180
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10] 0x715ca7d8a0
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x715caff400
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1] 0x715caff480
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1] 0x715caff500
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1] 0x715caff580
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1] 0x715caff600
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1] 0x715caff680
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1] 0x715caff700
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1] 0x715caff780
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x715cafd700
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1] 0x715cafd780
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1] 0x715cafd800
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4] 0x715cafd880

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object // 71a49d6f00
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x38, Size: 0x10] 0x715ca7d3a0
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x48, Size: 0x10] 0x715ca7d440
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x58, Size: 0x10] 0x715ca7d4e0
	PrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules;//[Offset: 0x68, Size: 0x10] 0x715ca7d580
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x715cafef80
	bool bShouldManagerDetermineTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x715caff000
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x715caff080
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x715caff100
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x80, Size: 0x10] 0x715ca7d620
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x90, Size: 0x10] 0x715ca7d6c0
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0xa0, Size: 0x10] 0x715ca7d760
	<FName> MetaDataTagsForAssetRegistry;//[Offset: 0xb0, Size: 0x50] 0x715ca7d800

--------------------------------
Class: PrimaryAssetTypeInfo // 715db14600
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x715db23200
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28] 0x715daea4c0
	class Object* AssetBaseClassLoaded;//[Offset: 0x30, Size: 0x8] 0x715dae7c20
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715db23280
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x715db23300
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 0x10] 0x715dae7cc0
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 0x10] 0x715dae7d60
	PrimaryAssetRules Rules;//[Offset: 0x60, Size: 0xc] 0x715db23480
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 0x10] 0x715dae7e00
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x715db23580
	int NumberOfAssets;//[Offset: 0x84, Size: 0x4] 0x715db23600

--------------------------------
Class: DirectoryPath // 715dadf280
	FString Path;//[Offset: 0x0, Size: 0x10] 0x715db09600

--------------------------------
Class: PrimaryAssetRules // 715db14840
	int Priority;//[Offset: 0x0, Size: 0x4] 0x715db23a00
	int ChunkId;//[Offset: 0x4, Size: 0x4] 0x715db23a80
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715db23b00
	enum CookRule;//[Offset: 0x9, Size: 0x1] 0x715dae7ea0

--------------------------------
Class: PrimaryAssetRulesOverride // 715db14780
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10] 0x715db23780
	PrimaryAssetRules Rules;//[Offset: 0x10, Size: 0xc] 0x715db23800

--------------------------------
Class: PrimaryAssetId // 717dfc7d80
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x717df8bd00
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8] 0x717df8bd80

--------------------------------
Class: PrimaryAssetType // 717dfc7e40
	FName Name;//[Offset: 0x0, Size: 0x8] 0x717df8be00

--------------------------------
Class: PrimaryAssetRulesCustomOverride // 715db14900
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x715db23880
	DirectoryPath FilterDirectory;//[Offset: 0x8, Size: 0x10] 0x715db23900
	FString FilterString;//[Offset: 0x18, Size: 0x10] 0x715db23980
	PrimaryAssetRules Rules;//[Offset: 0x28, Size: 0xc] 0x715db23c00

--------------------------------
Class: AssetManagerRedirect // 715db146c0
	FString Old;//[Offset: 0x0, Size: 0x10] 0x715db23680
	FString New;//[Offset: 0x10, Size: 0x10] 0x715db23700

--------------------------------
Class: AssetMappingTable.Object // 71a49d6c80
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10] 0x715ca7d300

--------------------------------
Class: AssetMapping // 715db14540
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8] 0x715db25200
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8] 0x715db25280

--------------------------------
Class: BlueprintAsyncActionBase.Object // 71a4833d00
	void Activate();// 0x61161c0 0x715cf4a6c0

--------------------------------
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object // 71a49d6a00
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x715cafe780
	SaveGame* SaveGameObject;//[Offset: 0x60, Size: 0x8] 0x715cafe800
	static AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x6100074 0x715caea0a0
	static AsyncActionHandleSaveGame* AsyncLoadGameFromSlot(Object* WorldContextObject, FString SlotName, const int UserIndex);// 0x60fff3c 0x715caea180

--------------------------------
Class: SaveGame.Object // 71a4ad9200

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object // 71a49d6780

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object // 71a49d6500
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x715caffd80
	static AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x610432c 0x715cae9fc0

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object // 71a49d6280
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x715caffb00
	static AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x610484c 0x715cae9ee0

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object // 71a49d6000
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x715caff880
	static AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x6104d6c 0x715cae9e00

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object // 71a49d5d80
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x715cb00f00
	static AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x61052a4 0x715cae9d20

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object // 71a49d5b00
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x715cb00a00
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0x61057dc 0x715cae9b60
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0x61059a4 0x715cae9c40

--------------------------------
Class: AtmosphericFog.Info.Actor.Object // 71a49d5880
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x220, Size: 0x8] 0x715cb00980

--------------------------------
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object // 71a49d5600
	float SunMultiplier;//[Offset: 0x1f0, Size: 0x4] 0x715cb01a00
	float FogMultiplier;//[Offset: 0x1f4, Size: 0x4] 0x715cb01a80
	float DensityMultiplier;//[Offset: 0x1f8, Size: 0x4] 0x715cb01b00
	float DensityOffset;//[Offset: 0x1fc, Size: 0x4] 0x715cb01b80
	float DistanceScale;//[Offset: 0x200, Size: 0x4] 0x715cb01c00
	float AltitudeScale;//[Offset: 0x204, Size: 0x4] 0x715cb01c80
	float DistanceOffset;//[Offset: 0x208, Size: 0x4] 0x715cb01d00
	float GroundOffset;//[Offset: 0x20c, Size: 0x4] 0x715cb01d80
	float StartDistance;//[Offset: 0x210, Size: 0x4] 0x715cb01e00
	float SunDiscScale;//[Offset: 0x214, Size: 0x4] 0x715cb01e80
	float DefaultBrightness;//[Offset: 0x218, Size: 0x4] 0x715cb01f00
	Color DefaultLightColor;//[Offset: 0x21c, Size: 0x4] 0x715cb01f80
	bool bDisableSunDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x715cb02000
	bool bAtmosphereAffectsSunIlluminance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1] 0x715cb02080
	bool bDisableGroundScattering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 0x1] 0x715cb02100
	AtmospherePrecomputeParameters PrecomputeParams;//[Offset: 0x224, Size: 0x2c] 0x715cb00080
	Texture2D* TransmittanceTexture;//[Offset: 0x250, Size: 0x8] 0x715cb00100
	Texture2D* IrradianceTexture;//[Offset: 0x258, Size: 0x8] 0x715cb00180
	void StartPrecompute();// 0x61062c0 0x715caec8e0
	void SetSunMultiplier(float NewSunMultiplier);// 0x61069d0 0x715caec9c0
	void SetStartDistance(float NewStartDistance);// 0x61065f8 0x715cae90e0
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0x61062d4 0x715cae91c0
	void SetFogMultiplier(float NewFogMultiplier);// 0x610692c 0x715cae92a0
	void SetDistanceScale(float NewDistanceScale);// 0x6106740 0x715cae9380
	void SetDistanceOffset(float NewDistanceOffset);// 0x6106554 0x715cae9460
	void SetDensityOffset(float NewDensityOffset);// 0x61067e4 0x715cae9540
	void SetDensityMultiplier(float NewDensityMultiplier);// 0x6106888 0x715cae9620
	void SetDefaultLightColor(LinearColor NewLightColor);// 0x6106a74 0x715cae9700
	void SetDefaultBrightness(float NewBrightness);// 0x6106b18 0x715cae97e0
	void SetAltitudeScale(float NewAltitudeScale);// 0x610669c 0x715cae98c0
	void DisableSunDisk(bool NewSunDisk);// 0x61064a8 0x715cae99a0
	void DisableGroundScattering(bool NewGroundScattering);// 0x61063fc 0x715cae9a80

--------------------------------
Class: AtmospherePrecomputeParameters // 715db143c0
	float DensityHeight;//[Offset: 0x0, Size: 0x4] 0x715db24c80
	float DecayHeight;//[Offset: 0x4, Size: 0x4] 0x715db24d00
	int MaxScatteringOrder;//[Offset: 0x8, Size: 0x4] 0x715db24d80
	int TransmittanceTexWidth;//[Offset: 0xc, Size: 0x4] 0x715db24e00
	int TransmittanceTexHeight;//[Offset: 0x10, Size: 0x4] 0x715db24e80
	int IrradianceTexWidth;//[Offset: 0x14, Size: 0x4] 0x715db24f00
	int IrradianceTexHeight;//[Offset: 0x18, Size: 0x4] 0x715db24f80
	int InscatterAltitudeSampleNum;//[Offset: 0x1c, Size: 0x4] 0x715db25000
	int InscatterMuNum;//[Offset: 0x20, Size: 0x4] 0x715db25080
	int InscatterMuSNum;//[Offset: 0x24, Size: 0x4] 0x715db25100
	int InscatterNuNum;//[Offset: 0x28, Size: 0x4] 0x715db25180

--------------------------------
Class: AudioSettings.DeveloperSettings.Object // 71a49d5380
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x38, Size: 0x18] 0x715cb03080
	SoftObjectPath DefaultMediaSoundClassName;//[Offset: 0x50, Size: 0x18] 0x715cb03100
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x68, Size: 0x18] 0x715cb03180
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x80, Size: 0x18] 0x715cb01100
	SoftObjectPath VoiPSoundClass;//[Offset: 0x98, Size: 0x18] 0x715cb01180
	SoftObjectPath MasterSubmix;//[Offset: 0xb0, Size: 0x18] 0x715cb01200
	SoftObjectPath ReverbSubmix;//[Offset: 0xc8, Size: 0x18] 0x715cb01280
	SoftObjectPath EQSubmix;//[Offset: 0xe0, Size: 0x18] 0x715cb01300
	enum VoiPSampleRate;//[Offset: 0xf8, Size: 0x4] 0x715ca7f2e0
	float DefaultReverbSendLevel;//[Offset: 0xfc, Size: 0x4] 0x715cb01400
	int MaximumConcurrentStreams;//[Offset: 0x100, Size: 0x4] 0x715cb01480
	float GlobalMinPitchScale;//[Offset: 0x104, Size: 0x4] 0x715cb01500
	float GlobalMaxPitchScale;//[Offset: 0x108, Size: 0x4] 0x715cb01580
	AudioQualitySettings[] QualityLevels;//[Offset: 0x110, Size: 0x10] 0x715ca7f380
	bool bAllowPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1] 0x715cb01680
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1] 0x715cb01700
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120, Size: 0x1] 0x715cb01780
	uint32 NumStoppingSources;//[Offset: 0x124, Size: 0x4] 0x715cb01800
	enum PanningMethod;//[Offset: 0x128, Size: 0x1] 0x715ca7f420
	enum MonoChannelUpmixMethod;//[Offset: 0x129, Size: 0x1] 0x715ca7f4c0
	FString DialogueFilenameFormat;//[Offset: 0x130, Size: 0x10] 0x715cb01980

--------------------------------
Class: AudioQualitySettings // 715db14000
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x715db24500
	int MaxChannels;//[Offset: 0x18, Size: 0x4] 0x715db24580

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object // 71a49df600
	float Priority;//[Offset: 0x258, Size: 0x4] 0x715cb02c80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 0x1] 0x715cb02d00
	ReverbSettings Settings;//[Offset: 0x260, Size: 0x20] 0x715cb02d80
	InteriorSettings AmbientZoneSettings;//[Offset: 0x280, Size: 0x24] 0x715cb02e00
	void SetReverbSettings(out const ReverbSettings NewReverbSettings);// 0x610bc70 0x715caec480
	void SetPriority(float NewPriority);// 0x610bde4 0x715caec560
	void SetInteriorSettings(out const InteriorSettings NewInteriorSettings);// 0x610bbb8 0x715caec640
	void SetEnabled(bool bNewEnabled);// 0x610bd38 0x715caec720
	void OnRep_bEnabled();// 0x610bb9c 0x715caec800

--------------------------------
Class: Subsystem.Object // 71a4836780

--------------------------------
Class: WorldSubsystem.Subsystem.Object // 71a48f6000

--------------------------------
Class: AutoDestroySubsystem.WorldSubsystem.Subsystem.Object // 71a49df380
	Actor*[] ActorsToPoll;//[Offset: 0x38, Size: 0x10] 0x715ca7f240
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x610c320 0x715caec3a0

--------------------------------
Class: AutomationTestSettings.Object // 71a49df100
	FString[] EngineTestModules;//[Offset: 0x28, Size: 0x10] 0x715ca7ed40
	FString[] EditorTestModules;//[Offset: 0x38, Size: 0x10] 0x715ca7ede0
	SoftObjectPath AutomationTestmap;//[Offset: 0x48, Size: 0x18] 0x715cb02500
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x60, Size: 0x10] 0x715ca7ee80
	SoftObjectPath[] AssetsToOpen;//[Offset: 0x70, Size: 0x10] 0x715ca7ef20
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x80, Size: 0x1f0] 0x715cb02680
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x270, Size: 0x30] 0x715cb02700
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x2a0, Size: 0x10] 0x715cb02780
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x2b0, Size: 0x30] 0x715cb02800
	FString[] TestLevelFolders;//[Offset: 0x2e0, Size: 0x10] 0x715ca7efc0
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x2f0, Size: 0x10] 0x715ca7f060
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x300, Size: 0x10] 0x715ca7f100
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x310, Size: 0x10] 0x715ca7f1a0
	IntPoint DefaultScreenshotResolution;//[Offset: 0x320, Size: 0x8] 0x715cb02a80

--------------------------------
Class: EditorMapPerformanceTestDefinition // 715db13d00
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18] 0x715db25f00
	int TestTimer;//[Offset: 0x18, Size: 0x4] 0x715db25f80

--------------------------------
Class: BuildPromotionTestSettings // 715db13c40
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0x10] 0x715db27200
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0x10, Size: 0x150] 0x715db25900
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x160, Size: 0x60] 0x715db25c80
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x1c0, Size: 0x20] 0x715db25e00
	FilePath SourceControlMaterial;//[Offset: 0x1e0, Size: 0x10] 0x715db25e80

--------------------------------
Class: FilePath // 715db13dc0
	FString FilePath;//[Offset: 0x0, Size: 0x10] 0x715db26000

--------------------------------
Class: BuildPromotionImportWorkflowSettings // 715db13a00
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x20] 0x715db27280
	EditorImportWorkflowDefinition Normal;//[Offset: 0x20, Size: 0x20] 0x715db27300
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x40, Size: 0x20] 0x715db27380
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x60, Size: 0x20] 0x715db25300
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x80, Size: 0x20] 0x715db25380
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0xa0, Size: 0x20] 0x715db25400
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0xc0, Size: 0x20] 0x715db25480
	EditorImportWorkflowDefinition Animation;//[Offset: 0xe0, Size: 0x20] 0x715db25500
	EditorImportWorkflowDefinition sound;//[Offset: 0x100, Size: 0x20] 0x715db25580
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0x120, Size: 0x20] 0x715db25600
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0x140, Size: 0x10] 0x715daea2e0

--------------------------------
Class: EditorImportWorkflowDefinition // 715db13940
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x715db25680
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x10, Size: 0x10] 0x715daea240

--------------------------------
Class: ImportFactorySettingValues // 715db13880
	FString SettingName;//[Offset: 0x0, Size: 0x10] 0x715db25700
	FString Value;//[Offset: 0x10, Size: 0x10] 0x715db25780

--------------------------------
Class: BuildPromotionOpenAssetSettings // 715db13ac0
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0x10] 0x715db25980
	FilePath MaterialAsset;//[Offset: 0x10, Size: 0x10] 0x715db25a00
	FilePath ParticleSystemAsset;//[Offset: 0x20, Size: 0x10] 0x715db25a80
	FilePath SkeletalMeshAsset;//[Offset: 0x30, Size: 0x10] 0x715db25b00
	FilePath StaticMeshAsset;//[Offset: 0x40, Size: 0x10] 0x715db25b80
	FilePath TextureAsset;//[Offset: 0x50, Size: 0x10] 0x715db25c00

--------------------------------
Class: BuildPromotionNewProjectSettings // 715db13b80
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0x10] 0x715db25d00
	FString NewProjectNameOverride;//[Offset: 0x10, Size: 0x10] 0x715db25d80

--------------------------------
Class: MaterialEditorPromotionSettings // 715db13640
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0x10] 0x715db26e80
	FilePath DefaultDiffuseTexture;//[Offset: 0x10, Size: 0x10] 0x715db26f00
	FilePath DefaultNormalTexture;//[Offset: 0x20, Size: 0x10] 0x715db26f80

--------------------------------
Class: ParticleEditorPromotionSettings // 715db13700
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0x10] 0x715db27000

--------------------------------
Class: BlueprintEditorPromotionSettings // 715db137c0
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0x10] 0x715db27080
	FilePath SecondMeshPath;//[Offset: 0x10, Size: 0x10] 0x715db27100
	FilePath DefaultParticleAsset;//[Offset: 0x20, Size: 0x10] 0x715db27180

--------------------------------
Class: ExternalToolDefinition // 715db134c0
	FString ToolName;//[Offset: 0x0, Size: 0x10] 0x715db26980
	FilePath ExecutablePath;//[Offset: 0x10, Size: 0x10] 0x715db26a00
	FString CommandLineOptions;//[Offset: 0x20, Size: 0x10] 0x715db26a80
	DirectoryPath WorkingDirectory;//[Offset: 0x30, Size: 0x10] 0x715db26b00
	FString ScriptExtension;//[Offset: 0x40, Size: 0x10] 0x715db26b80
	DirectoryPath ScriptDirectory;//[Offset: 0x50, Size: 0x10] 0x715db26c00

--------------------------------
Class: EditorImportExportTestDefinition // 715db13580
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x715db26c80
	FString ExportFileExtension;//[Offset: 0x10, Size: 0x10] 0x715db26d00
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715db26d80
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x28, Size: 0x10] 0x715daea1a0

--------------------------------
Class: LaunchOnTestSettings // 715db13e80
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0x10] 0x715db26080
	FString DeviceID;//[Offset: 0x10, Size: 0x10] 0x715db26100

--------------------------------
Class: BandwidthTestActor.Actor.Object // 71a49dec00
	BandwidthTestGenerator BandwidthGenerator;//[Offset: 0x220, Size: 0x20] 0x715cb03d80

--------------------------------
Class: BandwidthTestGenerator // 715db13340
	BandwidthTestItem[] ReplicatedBuffers;//[Offset: 0x0, Size: 0x10] 0x715daea100

--------------------------------
Class: BandwidthTestItem // 715db13280
	byte[] Kilobyte;//[Offset: 0x0, Size: 0x10] 0x715daea060

--------------------------------
Class: BlendableInterface.Interface.Object // 71a49de700

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object // 71a494b000

--------------------------------
Class: BlueprintExtension.Object // 71a49ddf80

--------------------------------
Class: BlueprintFunctionLibrary.Object // 719b178d00

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object // 71a49ddd00
	static void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0x6117cfc 0x715caeb5a0
	static void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0x6117bfc 0x715caeb680
	static bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0x6117a4c 0x715caeb760
	static int Map_Length(out const <int,int> TargetMap);// 0x61179ac 0x715caeb840
	static void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0x61178ac 0x715caeb920
	static bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0x61175e4 0x715caeba00
	static bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0x6117430 0x715caebae0
	static void Map_Clear(out const <int,int> TargetMap);// 0x611739c 0x715caebbc0
	static void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0x6117120 0x715caebca0

--------------------------------
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object // 71a49dda80
	static FString VideoCaptureDir();// 0x611abe8 0x715cb112e0
	static void ValidatePath(FString InPath, out bool bDidSucceed, out FText OutReason);// 0x61184e8 0x715cb113c0
	static void Split(FString InPath, out FString PathPart, out FString FilenamePart, out FString ExtensionPart);// 0x6118324 0x715cb114a0
	static FString SourceConfigDir();// 0x611b008 0x715cb11580
	static bool ShouldSaveToUserDir();// 0x611c0c0 0x715cb11660
	static FString ShaderWorkingDir();// 0x611b300 0x715cb11740
	static void SetProjectFilePath(FString NewGameProjectFilePath);// 0x611a01c 0x715cb11820
	static FString SetExtension(FString InPath, FString InNewExtension);// 0x611993c 0x715cb11900
	static FString ScreenShotDir();// 0x611ad48 0x715cb119e0
	static FString SandboxesDir();// 0x611aea8 0x715cb11ac0
	static FString RootDir();// 0x611b7d0 0x715cb11ba0
	static void RemoveDuplicateSlashes(FString InPath, out FString OutPath);// 0x6119144 0x715cb11c80
	static FString ProjectUserDir();// 0x611b670 0x715caee780
	static FString ProjectSavedDir();// 0x611b460 0x715caee860
	static FString ProjectPluginsDir();// 0x611b250 0x715caee940
	static FString ProjectPersistentDownloadDir();// 0x611b0b8 0x715caeea20
	static FString ProjectModsDir();// 0x611b1a0 0x715caeeb00
	static FString ProjectLogDir();// 0x611ab38 0x715caeebe0
	static FString ProjectIntermediateDir();// 0x611b3b0 0x715caeecc0
	static FString ProjectDir();// 0x611b720 0x715caeeda0
	static FString ProjectContentDir();// 0x611b5c0 0x715caeee80
	static FString ProjectConfigDir();// 0x611b510 0x715caeef60
	static FString ProfilingDir();// 0x611adf8 0x715caef040
	static void NormalizeFilename(FString InPath, out FString OutPath);// 0x6119568 0x715caef120
	static void NormalizeDirectoryName(FString InPath, out FString OutPath);// 0x6119360 0x715caef200
	static FString MakeValidFileName(FString inString, FString InReplacementChar);// 0x6118694 0x715caef2e0
	static void MakeStandardFilename(FString InPath, out FString OutPath);// 0x6119040 0x715caef3c0
	static void MakePlatformFilename(FString InPath, out FString OutPath);// 0x6118f3c 0x715caef4a0
	static bool MakePathRelativeTo(FString InPath, FString InRelativeTo, out FString OutPath);// 0x6118dd4 0x715caef580
	static FString LaunchDir();// 0x611c010 0x715caef660
	static bool IsSamePath(FString PathA, FString PathB);// 0x6119464 0x715caef740
	static bool IsRestrictedPath(FString InPath);// 0x611a464 0x715caef820
	static bool IsRelative(FString InPath);// 0x611966c 0x715caef900
	static bool IsProjectFilePathSet();// 0x611a16c 0x715caef9e0
	static bool IsDrive(FString InPath);// 0x6119720 0x715caefac0
	static bool HasProjectPersistentDownloadDir();// 0x611b168 0x715caefba0
	static FString[] GetToolTipLocalizationPaths();// 0x611a588 0x715caefc80
	static FString[] GetRestrictedFolderNames();// 0x611a518 0x715caefd60
	static FString GetRelativePathToRoot();// 0x61182a0 0x715caefe40
	static FString[] GetPropertyNameLocalizationPaths();// 0x611a5c0 0x715caeff20
	static FString GetProjectFilePath();// 0x611a0bc 0x715caecaa0
	static FString GetPath(FString InPath);// 0x6119bbc 0x715caecb80
	static FString GetInvalidFileSystemChars();// 0x61187d4 0x715caecc60
	static FString[] GetGameLocalizationPaths();// 0x611a550 0x715caecd40
	static FString GetExtension(FString InPath, bool bIncludeDot);// 0x6119edc 0x715caece20
	static FString[] GetEngineLocalizationPaths();// 0x611a630 0x715caecf00
	static FString[] GetEditorLocalizationPaths();// 0x611a5f8 0x715caecfe0
	static FString GetCleanFilename(FString InPath);// 0x6119dec 0x715caed0c0
	static FString GetBaseFilename(FString InPath, bool bRemovePath);// 0x6119cac 0x715caed1a0
	static FString GeneratedConfigDir();// 0x611af58 0x715caed280
	static FString GameUserDeveloperDir();// 0x611a718 0x715caed360
	static FString GameSourceDir();// 0x611a254 0x715caed440
	static FString GameDevelopersDir();// 0x611a7c8 0x715caed520
	static FString GameAgnosticSavedDir();// 0x611a3b4 0x715caed600
	static bool FileExists(FString InPath);// 0x6119888 0x715caed6e0
	static FString FeaturePackDir();// 0x611a1a4 0x715caed7c0
	static FString EnterprisePluginsDir();// 0x611b930 0x715caed8a0
	static FString EnterpriseFeaturePackDir();// 0x611b880 0x715caed980
	static FString EnterpriseDir();// 0x611b9e0 0x715caeda60
	static FString EngineVersionAgnosticUserDir();// 0x611be00 0x715caedb40
	static FString EngineUserDir();// 0x611beb0 0x715caedc20
	static FString EngineSourceDir();// 0x611a304 0x715caedd00
	static FString EngineSavedDir();// 0x611bb40 0x715caedde0
	static FString EnginePluginsDir();// 0x611ba90 0x715caedec0
	static FString EngineIntermediateDir();// 0x611bbf0 0x715caedfa0
	static FString EngineDir();// 0x611bf60 0x715caee080
	static FString EngineContentDir();// 0x611bd50 0x715caee160
	static FString EngineConfigDir();// 0x611bca0 0x715caee240
	static bool DirectoryExists(FString InPath);// 0x61197d4 0x715caee320
	static FString DiffDir();// 0x611a668 0x715caee400
	static FString CreateTempFilename(FString Path, FString Prefix, FString Extension);// 0x6118884 0x715caee4e0
	static FString ConvertToSandboxPath(FString InPath, FString InSandboxName);// 0x6118b54 0x715caee5c0
	static FString ConvertRelativePathToFull(FString InPath, FString InBasePath);// 0x6118c94 0x715caee6a0
	static FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);// 0x6118a14 0x715caeadc0
	static FString Combine(out const FString[] InPaths);// 0x6118164 0x715caeaea0
	static bool CollapseRelativeDirectories(FString InPath, out FString OutPath);// 0x6119248 0x715caeaf80
	static FString CloudDir();// 0x611a878 0x715caeb060
	static FString ChangeExtension(FString InPath, FString InNewExtension);// 0x6119a7c 0x715caeb140
	static FString BugItDir();// 0x611ac98 0x715caeb220
	static FString AutomationTransientDir();// 0x611a9d8 0x715caeb300
	static FString AutomationLogDir();// 0x611a928 0x715caeb3e0
	static FString AutomationDir();// 0x611aa88 0x715caeb4c0

--------------------------------
Class: PlatformGameInstance.GameInstance.Object // 71a49dd800
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x1a8, Size: 0x10] 0x7148cac880
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1b8, Size: 0x10] 0x7148cac900
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1c8, Size: 0x10] 0x7148cac980
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x7148caca00
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1e8, Size: 0x10] 0x7148caca80
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1f8, Size: 0x10] 0x7148cacb00
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x208, Size: 0x10] 0x7148cacc00
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x218, Size: 0x10] 0x7148cacd00
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x228, Size: 0x10] 0x7148cace00
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x238, Size: 0x10] 0x7148cacf00
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x248, Size: 0x10] 0x7148cad080
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x258, Size: 0x10] 0x7148cad280
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x268, Size: 0x10] 0x7148cad380

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object // 71a49dd580
	static int ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x61231d0 0x715cb10b00
	static void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0x6122f98 0x715cb10be0
	static int ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0x612307c 0x715cb10cc0
	static int ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x61234c8 0x715cb10da0
	static void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0x6122d0c 0x715cb10e80
	static byte GetDeviceOrientation();// 0x6122cd8 0x715cb10f60
	static void ClearAllLocalNotifications();// 0x612381c 0x715cb11040
	static void CancelLocalNotificationById(int NotificationId);// 0x6122e64 0x715cb11120
	static void CancelLocalNotification(FString ActivationEvent);// 0x6122ef8 0x715cb11200

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object // 71a49dd300
	static void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0x6124bbc 0x715cb10080
	static void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0x6124a50 0x715cb10160
	static void Set_ToArray(out const <int> A, out int[] Result);// 0x6124950 0x715cb10240
	static void Set_RemoveItems(out const <int> TargetSet, out const int[] Items);// 0x6124850 0x715cb10320
	static bool Set_Remove(out const <int> TargetSet, out const int Item);// 0x61246a0 0x715cb10400
	static int Set_Length(out const <int> TargetSet);// 0x6124600 0x715cb104e0
	static void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0x6124494 0x715cb105c0
	static void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0x6124328 0x715cb106a0
	static bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0x6124178 0x715cb10780
	static void Set_Clear(out const <int> TargetSet);// 0x61240e4 0x715cb10860
	static void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0x6123fe4 0x715cb10940
	static void Set_Add(out const <int> TargetSet, out const int NewItem);// 0x6123e48 0x715cb10a20

--------------------------------
Class: BoneMaskFilter.Object // 71a49dce00
	InputBlendPose[] BlendPoses;//[Offset: 0x28, Size: 0x10] 0x715cb21320

--------------------------------
Class: InputBlendPose // 715dad4000
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10] 0x715dae2860

--------------------------------
Class: BranchFilter // 715dad3f40
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x715dacfb00
	int BlendDepth;//[Offset: 0x8, Size: 0x4] 0x715dacfb80

--------------------------------
Class: BookMark.BookmarkBase.Object // 71a49dcb80
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x715cb0a680
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x715cb0a700
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10] 0x715cb21280

--------------------------------
Class: BookMark2D.BookmarkBase.Object // 71a49dc680
	float Zoom2D;//[Offset: 0x28, Size: 0x4] 0x715cb0a580
	IntPoint Location;//[Offset: 0x2c, Size: 0x8] 0x715cb0a600

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a49dc400
	Vector BoxExtent;//[Offset: 0x430, Size: 0xc] 0x715cb0c380
	float LineThickness;//[Offset: 0x43c, Size: 0x4] 0x715cb0c400
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x6126688 0x715cb137a0
	Vector GetUnscaledBoxExtent();// 0x612662c 0x715cb13880
	Vector GetScaledBoxExtent();// 0x6126650 0x715cb13960

--------------------------------
Class: ReflectionCapture.Actor.Object // 71a49dbf00
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x220, Size: 0x8] 0x715cb0c300

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object // 71a49dba00
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x1f0, Size: 0x8] 0x715cb0be80
	enum ReflectionSourceType;//[Offset: 0x1f8, Size: 0x1] 0x715cb211e0
	TextureCube* Cubemap;//[Offset: 0x200, Size: 0x8] 0x715cb0bf80
	float SourceCubemapAngle;//[Offset: 0x208, Size: 0x4] 0x715cb0c000
	float Brightness;//[Offset: 0x20c, Size: 0x4] 0x715cb0c080
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x715cb0c100
	float MaxValueRGBM;//[Offset: 0x214, Size: 0x4] 0x715cb0c180
	Vector CaptureOffset;//[Offset: 0x218, Size: 0xc] 0x715cb0c200
	Guid MapBuildDataId;//[Offset: 0x224, Size: 0x10] 0x715cb0c280

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object // 71a49dc180

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object // 71a49dbc80
	float BoxTransitionDistance;//[Offset: 0x270, Size: 0x4] 0x715cb0bd00
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x278, Size: 0x8] 0x715cb0bd80
	BoxComponent* PreviewCaptureBox;//[Offset: 0x280, Size: 0x8] 0x715cb0be00

--------------------------------
Class: Breakpoint.Object // 71a49db780
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715cb0ba80
	EdGraphNode* Node;//[Offset: 0x30, Size: 0x8] 0x715cb0bb00
	bool bStepOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cb0bb80
	bool bStepOnce_WasPreviouslyDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x715cb0bc00
	bool bStepOnce_RemoveAfterHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x715cb0bc80

--------------------------------
Class: EdGraphNode.Object // 71a4a1d300
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10] 0x715cb21d20
	int NodePosX;//[Offset: 0x48, Size: 0x4] 0x715cb50d00
	int NodePosY;//[Offset: 0x4c, Size: 0x4] 0x715cb50d80
	int NodeWidth;//[Offset: 0x50, Size: 0x4] 0x715cb50e00
	int NodeHeight;//[Offset: 0x54, Size: 0x4] 0x715cb50e80
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1] 0x715cb50f00
	enum EnabledState;//[Offset: 0x59, Size: 0x1] 0x715cb21dc0
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x715cb51000
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x715cb51080
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1] 0x715cb3f800
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1] 0x715cb3f880
	FString NodeComment;//[Offset: 0x60, Size: 0x10] 0x715cb3f900
	int ErrorType;//[Offset: 0x70, Size: 0x4] 0x715cb3f980
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10] 0x715cb3fa00
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10] 0x715cb3fa80

--------------------------------
Class: EdGraphPin_Deprecated.Object // 71a4a1ce00
	FString PinName;//[Offset: 0x28, Size: 0x10] 0x715cb50580
	FString PinToolTip;//[Offset: 0x38, Size: 0x10] 0x715cb50600
	byte Direction;//[Offset: 0x48, Size: 0x1] 0x715cb50680
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58] 0x715cb50700
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10] 0x715cb50780
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10] 0x715cb50800
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8] 0x715cb50880
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18] 0x715cb50900
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10] 0x715cb21be0
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10] 0x715cb21c80
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8] 0x715cb50a80
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8] 0x715cb50b00

--------------------------------
Class: EdGraphPinType // 715db15a40
	FName PinCategory;//[Offset: 0x0, Size: 0x8] 0x715db29180
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8] 0x715db29200
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x715db29280
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20] 0x715db29300
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c] 0x715db27500
	enum ContainerType;//[Offset: 0x54, Size: 0x1] 0x715dae9de0
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x715db27600
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x715db27680
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1] 0x715db27700
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1] 0x715db27780

--------------------------------
Class: EdGraphTerminalType // 715db15980
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8] 0x715db29380
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8] 0x715db29400
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x715db29480
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715db27400
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x715db27480

--------------------------------
Class: BrushBuilder.Object // 71a49db500
	FString BitmapFilename;//[Offset: 0x28, Size: 0x10] 0x715cb0b700
	FString ToolTip;//[Offset: 0x38, Size: 0x10] 0x715cb0b780
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715cb0b800
	Vector[] Vertices;//[Offset: 0x50, Size: 0x10] 0x715cb210a0
	BuilderPoly[] Polys;//[Offset: 0x60, Size: 0x10] 0x715cb21140
	FName Layer;//[Offset: 0x70, Size: 0x8] 0x715cb0b980
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715cb0ba00

--------------------------------
Class: BuilderPoly // 715db14d80
	int[] VertexIndices;//[Offset: 0x0, Size: 0x10] 0x715dae9a20
	int Direction;//[Offset: 0x10, Size: 0x4] 0x715db28600
	FName ItemName;//[Offset: 0x14, Size: 0x8] 0x715db28680
	int PolyFlags;//[Offset: 0x1c, Size: 0x4] 0x715db28700

--------------------------------
Class: BrushShape.Brush.Actor.Object // 71a49db000

--------------------------------
Class: ButtonStyleAsset.Object // 71a49dad80
	ButtonStyle ButtonStyle;//[Offset: 0x28, Size: 0x278] 0x715cb0d680

--------------------------------
Class: ButtonStyle.SlateWidgetStyle // 7149069640
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88] 0x715d7a1400
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88] 0x715d7a1480
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88] 0x715d7a1500
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88] 0x715d7a1580
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10] 0x715d7a1600
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10] 0x715d7a1680
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18] 0x715d7a1700
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18] 0x715d7a1780

--------------------------------
Class: SlateWidgetStyle // 7149069a00

--------------------------------
Class: SlateSound // 71490697c0
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8] 0x715d7a1c00

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object // 71a49da600

--------------------------------
Class: CameraShakeSourceActor.Actor.Object // 71a49df880
	CameraShakeSourceComponent* CameraShakeSourceComponent;//[Offset: 0x220, Size: 0x8] 0x715cb0e080

--------------------------------
Class: DeviceProfileManager.Object // 71a4a17900
	Object*[] Profiles;//[Offset: 0x28, Size: 0x10] 0x715cb220e0

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object // 71a4a17e00
	FString DeviceType;//[Offset: 0x38, Size: 0x10] 0x715cb38600
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10] 0x715cb38680
	Object* Parent;//[Offset: 0x58, Size: 0x8] 0x715cb38700
	FString[] CVars;//[Offset: 0x78, Size: 0x10] 0x715cb22180

--------------------------------
Class: TextureLODSettings.Object // 71a4a17b80
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10] 0x715cb22220

--------------------------------
Class: TextureLODGroup // 715ce79280
	byte Group;//[Offset: 0x0, Size: 0x1] 0x715ce8dc80
	int LODBias;//[Offset: 0xc, Size: 0x4] 0x715ce8dd00
	int LODBias_Smaller;//[Offset: 0x10, Size: 0x4] 0x715ce8dd80
	int LODBias_Smallest;//[Offset: 0x14, Size: 0x4] 0x715ce8de00
	int NumStreamedMips;//[Offset: 0x1c, Size: 0x4] 0x715ce8de80
	byte MipGenSettings;//[Offset: 0x20, Size: 0x1] 0x715ce8df00
	int MinLODSize;//[Offset: 0x24, Size: 0x4] 0x715ce8df80
	int MaxLODSize;//[Offset: 0x28, Size: 0x4] 0x715ce8e000
	int MaxLODSize_Smaller;//[Offset: 0x2c, Size: 0x4] 0x715ce8e080
	int MaxLODSize_Smallest;//[Offset: 0x30, Size: 0x4] 0x715ce8e100
	int OptionalLODBias;//[Offset: 0x34, Size: 0x4] 0x715ce8e180
	int OptionalMaxLODSize;//[Offset: 0x38, Size: 0x4] 0x715ce8e200
	FName MinMagFilter;//[Offset: 0x40, Size: 0x8] 0x715ce8e280
	FName MipFilter;//[Offset: 0x48, Size: 0x8] 0x715ce8e300
	enum MipLoadOptions;//[Offset: 0x50, Size: 0x1] 0x715daefa60
	bool DuplicateNonOptionalMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715ce8e400
	byte LossyCompressionAmount;//[Offset: 0x52, Size: 0x1] 0x715ce8e480

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object // 71a4a14700
	float TargetGamma;//[Offset: 0xb8, Size: 0x4] 0x715cb30380

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object // 71a4a14980
	int SizeX;//[Offset: 0xc0, Size: 0x4] 0x715cb31d80
	int SizeY;//[Offset: 0xc4, Size: 0x4] 0x715cb31e00
	LinearColor ClearColor;//[Offset: 0xc8, Size: 0x10] 0x715cb31e80
	byte AddressX;//[Offset: 0xd8, Size: 0x1] 0x715cb31f00
	byte AddressY;//[Offset: 0xd9, Size: 0x1] 0x715cb31f80
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xda, Size: 0x1] 0x715cb32000
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xda, Size: 0x1] 0x715cb32080
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xda, Size: 0x1] 0x715cb32100
	byte RenderTargetFormat;//[Offset: 0xdb, Size: 0x1] 0x715cb30080
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1] 0x715cb30100
	byte MipsSamplerFilter;//[Offset: 0xdd, Size: 0x1] 0x715cb30180
	byte MipsAddressU;//[Offset: 0xde, Size: 0x1] 0x715cb30200
	byte MipsAddressV;//[Offset: 0xdf, Size: 0x1] 0x715cb30280
	byte OverrideFormat;//[Offset: 0xe0, Size: 0x1] 0x715cb30300

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object // 71a4a14c00
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0xe8, Size: 0x10] 0x715cb31780
	World* World;//[Offset: 0xf8, Size: 0x8] 0x715cb31800
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x715cb31880
	void UpdateResource();// 0x6133ad8 0x715cb11f20
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0x45c6aa0 0x715cb12000
	void GetSize(out int Width, out int Height);// 0x613386c 0x715cb120e0
	static CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0x6133970 0x715cb121c0

--------------------------------
Class: ChaosPhysicalMaterial.Object // 71a4a14480
	float Friction;//[Offset: 0x28, Size: 0x4] 0x715cb31400
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x715cb31480
	float Restitution;//[Offset: 0x30, Size: 0x4] 0x715cb31500
	float LinearEtherDrag;//[Offset: 0x34, Size: 0x4] 0x715cb31580
	float AngularEtherDrag;//[Offset: 0x38, Size: 0x4] 0x715cb31600
	float SleepingLinearVelocityThreshold;//[Offset: 0x3c, Size: 0x4] 0x715cb31680
	float SleepingAngularVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x715cb31700

--------------------------------
Class: Engine.Object // 71a488dd00
	Font* TinyFont;//[Offset: 0x30, Size: 0x8] 0x715d05ab80
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18] 0x715d05ac00
	Font* SmallFont;//[Offset: 0x50, Size: 0x8] 0x715d05ac80
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18] 0x715d05ad00
	Font* MediumFont;//[Offset: 0x70, Size: 0x8] 0x715d05ad80
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18] 0x715d05ae00
	Font* LargeFont;//[Offset: 0x90, Size: 0x8] 0x715d05ae80
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18] 0x715d05af00
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8] 0x715d05af80
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18] 0x715d05b000
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10] 0x715cf9dd00
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10] 0x715cf9dda0
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8] 0x715cf9de40
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18] 0x715d05b180
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8] 0x715cf9dee0
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18] 0x715d05b200
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 0x8] 0x715cf9df80
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 0x18] 0x715d05b280
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 0x8] 0x715cf9e020
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 0x18] 0x715d05b300
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 0x18] 0x715d05b380
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 0x8] 0x715cf9e0c0
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 0x18] 0x715d05b400
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 0x8] 0x715cf9e160
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18] 0x715d05b480
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8] 0x715cf9e200
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8] 0x715cf9e2a0
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18] 0x715d05b500
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18] 0x715d05b580
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8] 0x715cf9ba00
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18] 0x715d059500
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8] 0x715d059580
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8] 0x715cf9baa0
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18] 0x715d059600
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18] 0x715d059680
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18] 0x715d059700
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8] 0x715d059780
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18] 0x715d059800
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8] 0x715d059880
	Texture2D* DefaultTexture;//[Offset: 0x2b0, Size: 0x8] 0x715d059900
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b8, Size: 0x18] 0x715d059980
	Texture* DefaultDiffuseTexture;//[Offset: 0x2d0, Size: 0x8] 0x715d059a00
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d8, Size: 0x18] 0x715d059a80
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2f0, Size: 0x8] 0x715d059b00
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f8, Size: 0x18] 0x715d059b80
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x310, Size: 0x8] 0x715d059c00
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x318, Size: 0x18] 0x715d059c80
	Texture2D* DefaultBokehTexture;//[Offset: 0x330, Size: 0x8] 0x715d059d00
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x338, Size: 0x18] 0x715d059d80
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x350, Size: 0x8] 0x715d059e00
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x358, Size: 0x18] 0x715d059e80
	Material* WireframeMaterial;//[Offset: 0x370, Size: 0x8] 0x715d059f00
	FString WireframeMaterialName;//[Offset: 0x378, Size: 0x10] 0x715d059f80
	Material* DebugMeshMaterial;//[Offset: 0x388, Size: 0x8] 0x715d05a000
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x390, Size: 0x18] 0x715d05a080
	Material* EmissiveMeshMaterial;//[Offset: 0x3a8, Size: 0x8] 0x715d05a100
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3b0, Size: 0x18] 0x715d05a180
	Material* LevelColorationLitMaterial;//[Offset: 0x3c8, Size: 0x8] 0x715d05a200
	FString LevelColorationLitMaterialName;//[Offset: 0x3d0, Size: 0x10] 0x715d05a280
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3e0, Size: 0x8] 0x715d05a300
	FString LevelColorationUnlitMaterialName;//[Offset: 0x3e8, Size: 0x10] 0x715d05a380
	Material* LightingTexelDensityMaterial;//[Offset: 0x3f8, Size: 0x8] 0x715d05a400
	FString LightingTexelDensityName;//[Offset: 0x400, Size: 0x10] 0x715d05a480
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x410, Size: 0x8] 0x715d05a500
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x418, Size: 0x10] 0x715d058480
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x428, Size: 0x8] 0x715d058500
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x430, Size: 0x10] 0x715d058580
	Material* RemoveSurfaceMaterial;//[Offset: 0x440, Size: 0x8] 0x715d058600
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x448, Size: 0x18] 0x715d058680
	Material* VertexColorMaterial;//[Offset: 0x460, Size: 0x8] 0x715d058700
	FString VertexColorMaterialName;//[Offset: 0x468, Size: 0x10] 0x715d058780
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x478, Size: 0x8] 0x715d058800
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x480, Size: 0x10] 0x715d058880
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x490, Size: 0x8] 0x715d058900
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x498, Size: 0x10] 0x715d058980
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4a8, Size: 0x8] 0x715d058a00
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4b0, Size: 0x10] 0x715d058a80
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4c0, Size: 0x8] 0x715d058b00
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4c8, Size: 0x10] 0x715d058b80
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4d8, Size: 0x8] 0x715d058c00
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4e0, Size: 0x10] 0x715d058c80
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x4f0, Size: 0x18] 0x715d058d00
	Material* ConstraintLimitMaterial;//[Offset: 0x508, Size: 0x8] 0x715d058d80
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x510, Size: 0x8] 0x715d058e00
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x518, Size: 0x8] 0x715d058e80
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x520, Size: 0x8] 0x715d058f00
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x528, Size: 0x8] 0x715d058f80
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x530, Size: 0x8] 0x715d059000
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x538, Size: 0x8] 0x715d059080
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x540, Size: 0x8] 0x715d059100
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x548, Size: 0x8] 0x715d059180
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x550, Size: 0x18] 0x715d059200
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x568, Size: 0x8] 0x715d059280
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x570, Size: 0x18] 0x715d059300
	Material* ArrowMaterial;//[Offset: 0x588, Size: 0x8] 0x715d059380
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x590, Size: 0x8] 0x715d059400
	SoftObjectPath ArrowMaterialName;//[Offset: 0x598, Size: 0x18] 0x715d059480
	LinearColor LightingOnlyBrightness;//[Offset: 0x5b0, Size: 0x10] 0x715d057400
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5c0, Size: 0x10] 0x715cf9bb40
	LinearColor[] QuadComplexityColors;//[Offset: 0x5d0, Size: 0x10] 0x715cf9bbe0
	LinearColor[] LightComplexityColors;//[Offset: 0x5e0, Size: 0x10] 0x715cf9bc80
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x5f0, Size: 0x10] 0x715cf9bd20
	LinearColor[] LODColorationColors;//[Offset: 0x600, Size: 0x10] 0x715cf9bdc0
	LinearColor[] HLODColorationColors;//[Offset: 0x610, Size: 0x10] 0x715cf9be60
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x620, Size: 0x10] 0x715cf9bf00
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x630, Size: 0x4] 0x715d057800
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x634, Size: 0x4] 0x715d057880
	float MinLightMapDensity;//[Offset: 0x638, Size: 0x4] 0x715d057900
	float IdealLightMapDensity;//[Offset: 0x63c, Size: 0x4] 0x715d057980
	float MaxLightMapDensity;//[Offset: 0x640, Size: 0x4] 0x715d057a00
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x644, Size: 0x1] 0x715d057a80
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x648, Size: 0x4] 0x715d057b00
	float RenderLightMapDensityColorScale;//[Offset: 0x64c, Size: 0x4] 0x715d057b80
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x650, Size: 0x10] 0x715d057c00
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x660, Size: 0x10] 0x715d057c80
	StatColorMapping[] StatColorMappings;//[Offset: 0x670, Size: 0x10] 0x715cf9bfa0
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x680, Size: 0x8] 0x715d057d80
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x688, Size: 0x18] 0x715d057e00
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6a0, Size: 0x10] 0x715cf9c040
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6b0, Size: 0x10] 0x715cf9c0e0
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6c0, Size: 0x10] 0x715cf9c180
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6d0, Size: 0x10] 0x715cf9c220
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x6e0, Size: 0x8] 0x715d058080
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x6e8, Size: 0x18] 0x715d058100
	Texture2D* BlueNoiseTexture;//[Offset: 0x700, Size: 0x8] 0x715d058180
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x708, Size: 0x18] 0x715d058200
	Texture2D* MiniFontTexture;//[Offset: 0x720, Size: 0x8] 0x715d058280
	SoftObjectPath MiniFontTextureName;//[Offset: 0x728, Size: 0x18] 0x715d058300
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x740, Size: 0x8] 0x715d058380
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x748, Size: 0x18] 0x715d058400
	Texture2D* LightMapDensityTexture;//[Offset: 0x760, Size: 0x8] 0x715d056380
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x768, Size: 0x18] 0x715d056400
	GameViewportClient* GameViewport;//[Offset: 0x788, Size: 0x8] 0x715d056480
	FString[] DeferredCommands;//[Offset: 0x790, Size: 0x10] 0x715cf9c2c0
	int TickCycles;//[Offset: 0x7a0, Size: 0x4] 0x715d056580
	int GameCycles;//[Offset: 0x7a4, Size: 0x4] 0x715d056600
	int ClientCycles;//[Offset: 0x7a8, Size: 0x4] 0x715d056680
	float NearClipPlane;//[Offset: 0x7ac, Size: 0x4] 0x715d056700
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b0, Size: 0x1] 0x715d056780
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b0, Size: 0x1] 0x715d056800
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7b0, Size: 0x1] 0x715d056880
	int MaximumLoopIterationCount;//[Offset: 0x7b4, Size: 0x4] 0x715d056900
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b8, Size: 0x1] 0x715d056980
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b8, Size: 0x1] 0x715d056a00
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7b8, Size: 0x1] 0x715d056a80
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7b8, Size: 0x1] 0x715d056b00
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7b8, Size: 0x1] 0x715d056b80
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7b8, Size: 0x1] 0x715d056c00
	float FixedFrameRate;//[Offset: 0x7bc, Size: 0x4] 0x715d056c80
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7c0, Size: 0x10] 0x715d056d00
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7d0, Size: 0x8] 0x715d056d80
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x7f8, Size: 0x18] 0x715d056e00
	TimecodeProvider* TimecodeProvider;//[Offset: 0x810, Size: 0x8] 0x715d056e80
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x838, Size: 0x18] 0x715d056f00
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 0x1] 0x715d056f80
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x854, Size: 0x8] 0x715d057000
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x85c, Size: 0x4] 0x715d057080
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x860, Size: 0x1] 0x715d057100
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x864, Size: 0x4] 0x715d057180
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x868, Size: 0x1] 0x715d057200
	Color C_WorldBox;//[Offset: 0x86c, Size: 0x4] 0x715d057280
	Color C_BrushWire;//[Offset: 0x870, Size: 0x4] 0x715d057300
	Color C_AddWire;//[Offset: 0x874, Size: 0x4] 0x715d057380
	Color C_SubtractWire;//[Offset: 0x878, Size: 0x4] 0x715d055300
	Color C_SemiSolidWire;//[Offset: 0x87c, Size: 0x4] 0x715d055380
	Color C_NonSolidWire;//[Offset: 0x880, Size: 0x4] 0x715d055400
	Color C_WireBackground;//[Offset: 0x884, Size: 0x4] 0x715d055480
	Color C_ScaleBoxHi;//[Offset: 0x888, Size: 0x4] 0x715d055500
	Color C_VolumeCollision;//[Offset: 0x88c, Size: 0x4] 0x715d055580
	Color C_BSPCollision;//[Offset: 0x890, Size: 0x4] 0x715d055600
	Color C_OrthoBackground;//[Offset: 0x894, Size: 0x4] 0x715d055680
	Color C_Volume;//[Offset: 0x898, Size: 0x4] 0x715d055700
	Color C_BrushShape;//[Offset: 0x89c, Size: 0x4] 0x715d055780
	float StreamingDistanceFactor;//[Offset: 0x8a0, Size: 0x4] 0x715d055800
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8a8, Size: 0x10] 0x715d055880
	enum TransitionType;//[Offset: 0x8b8, Size: 0x1] 0x715cf9c360
	FString TransitionDescription;//[Offset: 0x8c0, Size: 0x10] 0x715d055980
	FString TransitionGameMode;//[Offset: 0x8d0, Size: 0x10] 0x715d055a00
	float MeshLODRange;//[Offset: 0x8e0, Size: 0x4] 0x715d055a80
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e4, Size: 0x1] 0x715d055b00
	float CameraRotationThreshold;//[Offset: 0x8e8, Size: 0x4] 0x715d055b80
	float CameraTranslationThreshold;//[Offset: 0x8ec, Size: 0x4] 0x715d055c00
	float PrimitiveProbablyVisibleTime;//[Offset: 0x8f0, Size: 0x4] 0x715d055c80
	float MaxOcclusionPixelsFraction;//[Offset: 0x8f4, Size: 0x4] 0x715d055d00
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8f8, Size: 0x1] 0x715d055d80
	int MaxParticleResize;//[Offset: 0x8fc, Size: 0x4] 0x715d055e00
	int MaxParticleResizeWarn;//[Offset: 0x900, Size: 0x4] 0x715d055e80
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x908, Size: 0x10] 0x715cf9c400
	float NetClientTicksPerSecond;//[Offset: 0x918, Size: 0x4] 0x715d055f80
	float DisplayGamma;//[Offset: 0x91c, Size: 0x4] 0x715d056000
	float MinDesiredFrameRate;//[Offset: 0x920, Size: 0x4] 0x715d056080
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x924, Size: 0x10] 0x715d056100
	LinearColor SelectedMaterialColor;//[Offset: 0x934, Size: 0x10] 0x715d056180
	LinearColor SelectionOutlineColor;//[Offset: 0x944, Size: 0x10] 0x715d056200
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x954, Size: 0x10] 0x715d056280
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x964, Size: 0x10] 0x715d056300
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x974, Size: 0x1] 0x715d054280
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x975, Size: 0x1] 0x715d054300
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x975, Size: 0x1] 0x715d054380
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x975, Size: 0x1] 0x715d054400
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x975, Size: 0x1] 0x715d054480
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x978, Size: 0x4] 0x715d054500
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x980, Size: 0x4] 0x715d054580
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x984, Size: 0x1] 0x715d054600
	FString ParticleEventManagerClassPath;//[Offset: 0x988, Size: 0x10] 0x715d054680
	float SelectionHighlightIntensity;//[Offset: 0x998, Size: 0x4] 0x715d054700
	float BSPSelectionHighlightIntensity;//[Offset: 0x99c, Size: 0x4] 0x715d054780
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9a0, Size: 0x4] 0x715d054800
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xbf0, Size: 0x10] 0x715cf9c4a0
	FString[] ServerActors;//[Offset: 0xc00, Size: 0x10] 0x715cf9c540
	FString[] RuntimeServerActors;//[Offset: 0xc10, Size: 0x10] 0x715cf9c5e0
	float NetErrorLogInterval;//[Offset: 0xc20, Size: 0x4] 0x715d054a00
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc24, Size: 0x1] 0x715d054a80
	int NextWorldContextHandle;//[Offset: 0xc38, Size: 0x4] 0x715d054b00

--------------------------------
Class: GameUserSettings.Object // 71a4a24c00
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715cb7ac80
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715cb7ad00
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4] 0x715cb7ad80
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4] 0x715cb7ae00
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4] 0x715cb7ae80
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4] 0x715cb7af00
	int WindowPosX;//[Offset: 0x90, Size: 0x4] 0x715cb7af80
	int WindowPosY;//[Offset: 0x94, Size: 0x4] 0x715cb7b000
	int FullscreenMode;//[Offset: 0x98, Size: 0x4] 0x715cb7b080
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4] 0x715cb7b100
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4] 0x715cb7b180
	uint32 Version;//[Offset: 0xa4, Size: 0x4] 0x715cb7b200
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4] 0x715cb7b280
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4] 0x715cb7b300
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4] 0x715cb7b380
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4] 0x715cb7b400
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x715cb7b480
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4] 0x715cb7b500
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4] 0x715cb7b580
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4] 0x715cb79500
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4] 0x715cb79580
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4] 0x715cb79600
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4] 0x715cb79680
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4] 0x715cb79700
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10] 0x715cb25060
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10] 0x715cb25100
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4] 0x715cb79880
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1] 0x715cb79900
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4] 0x715cb79980
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10] 0x715cb79a00
	void ValidateSettings();// 0x6192640 0x715cb67da0
	bool SupportsHDRDisplayOutput();// 0x61921f4 0x715cb67e80
	void SetVSyncEnabled(bool bEnable);// 0x6193794 0x715cb67f60
	void SetVisualEffectQuality(int Value);// 0x6192958 0x715cb68040
	void SetViewDistanceQuality(int Value);// 0x6192cb8 0x715cb68120
	void SetToDefaults();// 0x6192538 0x715cb68200
	void SetTextureQuality(int Value);// 0x6192a30 0x715cb682e0
	void SetShadowQuality(int Value);// 0x6192be0 0x715cb683c0
	void SetShadingQuality(int Value);// 0x61926d0 0x715cb684a0
	void SetScreenResolution(IntPoint Resolution);// 0x6193980 0x715cb68580
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x6192e00 0x715cb68660
	void SetResolutionScaleValue(int NewScaleValue);// 0x6192ea4 0x715cb68740
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x6192d5c 0x715cb68820
	void SetPostProcessingQuality(int Value);// 0x6192880 0x715cb68900
	void SetOverallScalabilityLevel(int Value);// 0x6193310 0x715cb689e0
	void SetFullscreenMode(byte InFullscreenMode);// 0x6193874 0x715cb68ac0
	void SetFrameRateLimit(float NewLimit);// 0x61933f0 0x715cb68ba0
	void SetFoliageQuality(int Value);// 0x61927a8 0x715cb68c80
	void SetDynamicResolutionEnabled(bool bEnable);// 0x61936b0 0x715cb68d60
	void SetBenchmarkFallbackValues();// 0x6193554 0x715cb68e40
	void SetAudioQualityLevel(int QualityLevel);// 0x61934b0 0x715cb68f20
	void SetAntiAliasingQuality(int Value);// 0x6192b08 0x715cb69000
	void SaveSettings();// 0x6192570 0x715cb65720
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x6192250 0x715cb65800
	void RevertVideoMode();// 0x6193568 0x715cb658e0
	void ResetToCurrentSettings();// 0x6192554 0x715cb659c0
	void LoadSettings(bool bForceReload);// 0x619258c 0x715cb65aa0
	bool IsVSyncEnabled();// 0x619375c 0x715cb65b80
	bool IsVSyncDirty();// 0x61935d0 0x715cb65c60
	bool IsScreenResolutionDirty();// 0x6193640 0x715cb65d40
	bool IsHDREnabled();// 0x6192094 0x715cb65e20
	bool IsFullscreenModeDirty();// 0x6193608 0x715cb65f00
	bool IsDynamicResolutionEnabled();// 0x6193678 0x715cb65fe0
	bool IsDynamicResolutionDirty();// 0x6193598 0x715cb660c0
	bool IsDirty();// 0x619265c 0x715cb661a0
	int GetVisualEffectQuality();// 0x6192924 0x715cb66280
	int GetViewDistanceQuality();// 0x6192c84 0x715cb66360
	int GetTextureQuality();// 0x61929fc 0x715cb66440
	static int GetSyncInterval();// 0x61923e8 0x715cb66520
	int GetShadowQuality();// 0x6192bac 0x715cb66600
	int GetShadingQuality();// 0x619269c 0x715cb666e0
	IntPoint GetScreenResolution();// 0x6193a90 0x715cb667c0
	float GetResolutionScaleNormalized();// 0x6192f48 0x715cb668a0
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x6192f7c 0x715cb66980
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x6193128 0x715cb66a60
	float GetRecommendedResolutionScale();// 0x61924c0 0x715cb66b40
	byte GetPreferredFullscreenMode();// 0x6193840 0x715cb66c20
	int GetPostProcessingQuality();// 0x619284c 0x715cb66d00
	int GetOverallScalabilityLevel();// 0x61932d4 0x715cb66de0
	IntPoint GetLastConfirmedScreenResolution();// 0x6193a58 0x715cb66ec0
	byte GetLastConfirmedFullscreenMode();// 0x6193918 0x715cb66fa0
	static GameUserSettings* GetGameUserSettings();// 0x6192380 0x715cb67080
	byte GetFullscreenMode();// 0x619394c 0x715cb67160
	float GetFrameRateLimit();// 0x61933bc 0x715cb67240
	static int GetFramePace();// 0x61923b4 0x715cb67320
	int GetFoliageQuality();// 0x6192774 0x715cb63a40
	IntPoint GetDesktopResolution();// 0x6193a20 0x715cb63b20
	static IntPoint GetDefaultWindowPosition();// 0x6192450 0x715cb63c00
	static byte GetDefaultWindowMode();// 0x619241c 0x715cb63ce0
	float GetDefaultResolutionScale();// 0x61924fc 0x715cb63dc0
	static IntPoint GetDefaultResolution();// 0x6192488 0x715cb63ea0
	int GetCurrentHDRDisplayNits();// 0x61920cc 0x715cb63f80
	int GetAudioQualityLevel();// 0x6193494 0x715cb64060
	int GetAntiAliasingQuality();// 0x6192ad4 0x715cb64140
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x6192100 0x715cb64220
	void ConfirmVideoMode();// 0x619357c 0x715cb64300
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x6193b90 0x715cb643e0
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x6193ac8 0x715cb644c0
	void ApplyNonResolutionSettings();// 0x6193b74 0x715cb645a0
	void ApplyHardwareBenchmarkResults();// 0x6192234 0x715cb64680

--------------------------------
Class: StatColorMapping // 715db17f00
	FString StatName;//[Offset: 0x0, Size: 0x10] 0x715db3dc00
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10] 0x715daeb320
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x715db3de00

--------------------------------
Class: StatColorMapEntry // 715db17e40
	float In;//[Offset: 0x0, Size: 0x4] 0x715db3dc80
	Color Out;//[Offset: 0x4, Size: 0x4] 0x715db3dd00

--------------------------------
Class: GameNameRedirect // 715db18140
	FName OldGameName;//[Offset: 0x0, Size: 0x8] 0x715db3e300
	FName NewGameName;//[Offset: 0x8, Size: 0x8] 0x715db3e380

--------------------------------
Class: ClassRedirect // 715db18200
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x715db3e400
	FName OldClassName;//[Offset: 0x8, Size: 0x8] 0x715db3e480
	FName NewClassName;//[Offset: 0x10, Size: 0x8] 0x715db3e500
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8] 0x715db3e580
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8] 0x715db3e600
	FName NewClassClass;//[Offset: 0x28, Size: 0x8] 0x715db3e680
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8] 0x715db3e700
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715db3c680

--------------------------------
Class: PluginRedirect // 715db18380
	FString OldPluginName;//[Offset: 0x0, Size: 0x10] 0x715db3c800
	FString NewPluginName;//[Offset: 0x10, Size: 0x10] 0x715db3c880

--------------------------------
Class: StructRedirect // 715db182c0
	FName OldStructName;//[Offset: 0x0, Size: 0x8] 0x715db3c700
	FName NewStructName;//[Offset: 0x8, Size: 0x8] 0x715db3c780

--------------------------------
Class: FloatRange // 717dfcacc0
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x717df8bb80
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x717df8bc00

--------------------------------
Class: FloatRangeBound // 717dfcad80
	byte Type;//[Offset: 0x0, Size: 0x1] 0x717df8bc80
	float Value;//[Offset: 0x4, Size: 0x4] 0x717df88900

--------------------------------
Class: EngineCustomTimeStep.Object // 71a49a1f00

--------------------------------
Class: TimecodeProvider.Object // 71a4ae1c80
	float FrameDelay;//[Offset: 0x28, Size: 0x4] 0x715cc6f180
	Timecode GetTimecode();// 0x63308c8 0x715cc76d00
	enum GetSynchronizationState();// 0x63307e4 0x715cc76de0
	QualifiedFrameTime GetQualifiedFrameTime();// 0x6330968 0x715cc76ec0
	FrameRate GetFrameRate();// 0x6330820 0x715cc76fa0
	Timecode GetDelayedTimecode();// 0x633085c 0x715cc77080
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x6330934 0x715cc77160

--------------------------------
Class: Timecode // 717dfc8140
	int Hours;//[Offset: 0x0, Size: 0x4] 0x717df8bf80
	int Minutes;//[Offset: 0x4, Size: 0x4] 0x717df8c000
	int Seconds;//[Offset: 0x8, Size: 0x4] 0x717df8c080
	int Frames;//[Offset: 0xc, Size: 0x4] 0x717df8c100
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x717df8c180

--------------------------------
Class: QualifiedFrameTime // 717dfc8200
	FrameTime Time;//[Offset: 0x0, Size: 0x8] 0x717df8c200
	FrameRate Rate;//[Offset: 0x8, Size: 0x8] 0x717df8c280

--------------------------------
Class: DropNoteInfo // 715db17fc0
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715db3de80
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x715db3df00
	FString Comment;//[Offset: 0x18, Size: 0x10] 0x715db3df80

--------------------------------
Class: NetDriverDefinition // 715db1ab40
	FName DefName;//[Offset: 0x0, Size: 0x8] 0x715db3ee00
	FName DriverClassName;//[Offset: 0x8, Size: 0x8] 0x715db3ee80
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8] 0x715db3ef00

--------------------------------
Class: CheckBoxStyleAsset.Object // 71a4a13f80
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x28, Size: 0x580] 0x715cb32700

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle // 715da9c1c0
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1] 0x715dabaa00
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x88] 0x715dabaa80
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 0x88] 0x715dabab00
	SlateBrush UncheckedPressedImage;//[Offset: 0x120, Size: 0x88] 0x715dabab80
	SlateBrush CheckedImage;//[Offset: 0x1a8, Size: 0x88] 0x715dabac00
	SlateBrush CheckedHoveredImage;//[Offset: 0x230, Size: 0x88] 0x715dabac80
	SlateBrush CheckedPressedImage;//[Offset: 0x2b8, Size: 0x88] 0x715dabad00
	SlateBrush UndeterminedImage;//[Offset: 0x340, Size: 0x88] 0x715dabad80
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3c8, Size: 0x88] 0x715dabae00
	SlateBrush UndeterminedPressedImage;//[Offset: 0x450, Size: 0x88] 0x715dabae80
	Margin Padding;//[Offset: 0x4d8, Size: 0x10] 0x715dabaf00
	SlateColor ForegroundColor;//[Offset: 0x4e8, Size: 0x28] 0x715dabaf80
	SlateColor BorderBackgroundColor;//[Offset: 0x510, Size: 0x28] 0x715dabb000
	SlateSound CheckedSlateSound;//[Offset: 0x538, Size: 0x18] 0x715dabb080
	SlateSound UncheckedSlateSound;//[Offset: 0x550, Size: 0x18] 0x715dabb100
	SlateSound HoveredSlateSound;//[Offset: 0x568, Size: 0x18] 0x715dabb180

--------------------------------
Class: GameMapsSettings.Object // 71a4992680
	FString LocalMapOptions;//[Offset: 0x28, Size: 0x10] 0x715d256d80
	SoftObjectPath TransitionMap;//[Offset: 0x38, Size: 0x18] 0x715d256e00
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d256e80
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x51, Size: 0x1] 0x715d256f00
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x52, Size: 0x1] 0x715d256f80
	enum FourPlayerSplitscreenLayout;//[Offset: 0x53, Size: 0x1] 0x715d1bbdc0
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x715d257080
	SoftClassPath GameInstanceClass;//[Offset: 0x58, Size: 0x18] 0x715d257100
	SoftObjectPath GameDefaultMap;//[Offset: 0x70, Size: 0x18] 0x715d257180
	SoftObjectPath ServerDefaultMap;//[Offset: 0x88, Size: 0x18] 0x715d257200
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xa0, Size: 0x18] 0x715d257280
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xb8, Size: 0x18] 0x715d257300
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xd0, Size: 0x10] 0x715d1bbe60
	GameModeName[] GameModeClassAliases;//[Offset: 0xe0, Size: 0x10] 0x715d1bbf00
	void SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer);// 0x4a472d0 0x715d2420e0
	bool GetSkipAssigningGamepadToPlayer1();// 0x4a47298 0x715d2421c0
	static GameMapsSettings* GetGameMapsSettings();// 0x4a4737c 0x715d2422a0

--------------------------------
Class: GameModeName // 715da9b980
	FString Name;//[Offset: 0x0, Size: 0x10] 0x715dabbc80
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18] 0x715dabbd00

--------------------------------
Class: PlatformInterfaceBase.Object // 71a4a13580
	DelegateArray[] AllDelegates;//[Offset: 0x28, Size: 0x10] 0x715cb20740

--------------------------------
Class: DelegateArray // 715ce70100
	delegate[] Delegates;//[Offset: 0x0, Size: 0x10] 0x715daed580

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object // 71a4a13800
	FString[] LocalCloudFiles;//[Offset: 0x38, Size: 0x10] 0x715cb206a0
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715cb32480

--------------------------------
Class: Commandlet.Object // 71a4a13080
	FString HelpDescription;//[Offset: 0x28, Size: 0x10] 0x715cb33d00
	FString HelpUsage;//[Offset: 0x38, Size: 0x10] 0x715cb33d80
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10] 0x715cb33e00
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10] 0x715cb20240
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10] 0x715cb202e0
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715cb33f80
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x715cb34000
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x715cb34080
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1] 0x715cb34100
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1] 0x715cb34180
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1] 0x715cb34200

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object // 71a4a12e00
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x715cb201a0

--------------------------------
Class: BlueprintComponentDelegateBinding // 715db16ac0
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8] 0x715db38a80
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8] 0x715db38b00
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x715db38b80

--------------------------------
Class: CompositeCurveTable.CurveTable.Object // 71a4a12b80
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10] 0x715cb20060
	CurveTable*[] OldParentTables;//[Offset: 0xb0, Size: 0x10] 0x715cb20100

--------------------------------
Class: DataTable.Object // 71a4a12400
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8] 0x715cb33900
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cb33980
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x715cb33a00
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x715cb33a80
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10] 0x715cb33b00

--------------------------------
Class: CompositeDataTable.DataTable.Object // 71a4a12680
	DataTable*[] ParentTables;//[Offset: 0xc8, Size: 0x10] 0x715cb22860
	DataTable*[] OldParentTables;//[Offset: 0xd8, Size: 0x10] 0x715cb22900

--------------------------------
Class: ConsoleSettings.Object // 71a4992900
	int MaxScrollbackSize;//[Offset: 0x28, Size: 0x4] 0x715d255500
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x30, Size: 0x10] 0x715d1bbfa0
	FString[] AutoCompleteMapPaths;//[Offset: 0x40, Size: 0x10] 0x715d1bc040
	float BackgroundOpacityPercentage;//[Offset: 0x50, Size: 0x4] 0x715d255680
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x715d255700
	bool bDisplayHelpInAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x715d255780
	Color InputColor;//[Offset: 0x58, Size: 0x4] 0x715d255800
	Color HistoryColor;//[Offset: 0x5c, Size: 0x4] 0x715d255880
	Color AutoCompleteCommandColor;//[Offset: 0x60, Size: 0x4] 0x715d255900
	Color AutoCompleteCVarColor;//[Offset: 0x64, Size: 0x4] 0x715d255980
	Color AutoCompleteFadedColor;//[Offset: 0x68, Size: 0x4] 0x715d255a00

--------------------------------
Class: AutoCompleteCommand // 715da9ba40
	FString Command;//[Offset: 0x0, Size: 0x10] 0x715dabbd80
	FString Desc;//[Offset: 0x10, Size: 0x10] 0x715dabbe00

--------------------------------
Class: ControlChannel.Channel.Object // 71a4a11a00

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object // 71a4a11780
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cb34f00
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x715cb34f80
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4] 0x715cb35000
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4] 0x715cb35080
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4] 0x715cb35100
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715cb35180
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x715cb35200
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4] 0x715cb35280
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4] 0x715cb33200
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4] 0x715cb33280
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4] 0x715cb33300
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4] 0x715cb33380
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x60, Size: 0x4] 0x715cb33400
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x64, Size: 0x4] 0x715cb33480
	bool FlushStreamingOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cb33500
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x715cb33580

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object // 71a4a11500
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x38, Size: 0x4] 0x715cb34700
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x715cb34780
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x715cb34800
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x715cb34880
	bool MultithreadedDestructionEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x715cb34900
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x715cb34980
	bool AssetClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x715cb34a00
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x715cb34a80
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x715cb34b00
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x715cb34b80
	int MinGCClusterSize;//[Offset: 0x40, Size: 0x4] 0x715cb34c00
	int NumRetriesBeforeForcingGC;//[Offset: 0x44, Size: 0x4] 0x715cb34c80
	int MaxObjectsNotConsideredByGC;//[Offset: 0x48, Size: 0x4] 0x715cb34d00
	int SizeOfPermanentObjectPool;//[Offset: 0x4c, Size: 0x4] 0x715cb34d80
	int MaxObjectsInGame;//[Offset: 0x50, Size: 0x4] 0x715cb34e00
	int MaxObjectsInEditor;//[Offset: 0x54, Size: 0x4] 0x715cb34e80

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object // 71a4a11280
	CullDistanceSizePair[] CullDistances;//[Offset: 0x258, Size: 0x10] 0x715cb22720
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x715cb34680

--------------------------------
Class: CullDistanceSizePair // 715db19340
	float Size;//[Offset: 0x0, Size: 0x4] 0x715db3ac00
	float CullDistance;//[Offset: 0x4, Size: 0x4] 0x715db3ac80

--------------------------------
Class: CurveEdPresetCurve.Object // 71a4a10d80

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object // 71a4a10600
	uint32 TextureSize;//[Offset: 0xe8, Size: 0x4] 0x715cb35680
	CurveLinearColor*[] GradientCurves;//[Offset: 0xf0, Size: 0x10] 0x715cb22680
	bool GetCurvePosition(CurveLinearColor* InCurve, out float Position);// 0x614bb58 0x715cb15aa0

--------------------------------
Class: CurveSourceInterface.Interface.Object // 71a4a10100
	float GetCurveValue(FName CurveName);// 0x614c0ec 0x715cb15800
	void GetCurves(out NamedCurveValue[] OutValues);// 0x614c024 0x715cb158e0
	FName GetBindingName();// 0x614c1a0 0x715cb159c0

--------------------------------
Class: NamedCurveValue // 715db191c0
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715db3aa00
	float Value;//[Offset: 0x8, Size: 0x4] 0x715db3aa80

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object // 71a48ad580

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4a19e80
	static void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0x61517bc 0x715cb18c80
	static bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0x6151d24 0x715cb18d60
	static FString[] GetDataTableColumnAsString(const DataTable* DataTable, FName PropertyName);// 0x6151624 0x715cb18e40
	static void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0x615199c 0x715cb18f20
	static bool DoesDataTableRowExist(DataTable* Table, FName RowName);// 0x61518b4 0x715cb19000

--------------------------------
Class: TableRowBase // 714906fd00

--------------------------------
Class: DebugCameraControllerSettings.DeveloperSettings.Object // 71a4a19980
	DebugCameraControllerSettingsViewModeIndex[] CycleViewModes;//[Offset: 0x38, Size: 0x10] 0x715cb22400

--------------------------------
Class: DebugCameraControllerSettingsViewModeIndex // 715db18f80
	byte ViewModeIndex;//[Offset: 0x8, Size: 0x1] 0x715db3a700

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object // 71a4a19700

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object // 71a4a19480

--------------------------------
Class: DecalActor.Actor.Object // 71a4a19200
	DecalComponent* Decal;//[Offset: 0x220, Size: 0x8] 0x715cb37900
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x6153430 0x715cb183c0
	MaterialInterface* GetDecalMaterial();// 0x61533fc 0x715cb184a0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x61533c0 0x715cb18580

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object // 71a4a18f80
	MaterialInterface* DecalMaterial;//[Offset: 0x1f0, Size: 0x8] 0x715cb38c80
	int SortOrder;//[Offset: 0x1f8, Size: 0x4] 0x715cb38d00
	float FadeScreenSize;//[Offset: 0x1fc, Size: 0x4] 0x715cb38d80
	float FadeStartDelay;//[Offset: 0x200, Size: 0x4] 0x715cb38e00
	float FadeDuration;//[Offset: 0x204, Size: 0x4] 0x715cb38e80
	float FadeInDuration;//[Offset: 0x208, Size: 0x4] 0x715cb38f00
	float FadeInStartDelay;//[Offset: 0x20c, Size: 0x4] 0x715cb38f80
	bool bIsClusteredDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x715cb39000
	ClusteredDecalSettings ClusteredDecalSettings;//[Offset: 0x214, Size: 0x1c] 0x715cb39080
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1] 0x715cb39100
	Vector DecalSize;//[Offset: 0x234, Size: 0xc] 0x715cb39180
	void SetSortOrder(int Value);// 0x6153b68 0x715cb17860
	void SetIsClusteredDecal(bool bInMobileClusteredDecal);// 0x6153f94 0x715cb17940
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x6153c0c 0x715cb17a20
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x6153d94 0x715cb17b00
	void SetFadeIn(float StartDelay, float Duaration);// 0x6153cb0 0x715cb17be0
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x6153ac4 0x715cb17cc0
	bool GetIsClusteredDecal();// 0x6154040 0x715cb17da0
	float GetFadeStartDelay();// 0x6153f60 0x715cb17e80
	float GetFadeInStartDelay();// 0x6153ef8 0x715cb17f60
	float GetFadeInDuration();// 0x6153ec4 0x715cb18040
	float GetFadeDuration();// 0x6153f2c 0x715cb18120
	MaterialInterface* GetDecalMaterial();// 0x6153a90 0x715cb18200
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x6153a54 0x715cb182e0

--------------------------------
Class: ClusteredDecalSettings // 715db18d40
	Vector2D DecalUVOffset;//[Offset: 0x0, Size: 0x8] 0x715db3be80
	Vector2D DecalUVSize;//[Offset: 0x8, Size: 0x8] 0x715db3bf00
	float DecalMetallic;//[Offset: 0x10, Size: 0x4] 0x715db3bf80
	float DecalSpecular;//[Offset: 0x14, Size: 0x4] 0x715db3c000
	float DirectionalFadeIntensity;//[Offset: 0x18, Size: 0x4] 0x715db3c080

--------------------------------
Class: ClusteredDecalUVSource.Object // 71a4861c80

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object // 71a4909980
	float MaxSpeed;//[Offset: 0x138, Size: 0x4] 0x715d185c80
	float Acceleration;//[Offset: 0x13c, Size: 0x4] 0x715d185d00
	float Deceleration;//[Offset: 0x140, Size: 0x4] 0x715d185d80
	float TurningBoost;//[Offset: 0x144, Size: 0x4] 0x715d185e00
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x715d185e80

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object // 71a4a18a80

--------------------------------
Class: PendingNetGame.Object // 71a4a18300
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8] 0x715cb38880
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8] 0x715cb38900

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object // 71a4a18580

--------------------------------
Class: DestructibleInterface.Interface.Object // 71a4a18080

--------------------------------
Class: MaterialShaderQualitySettings.Object // 71a4992e00
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50] 0x715cecf4c0

--------------------------------
Class: ShaderPlatformQualitySettings.Object // 71a4992b80
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0x9] 0x715d255a80

--------------------------------
Class: MaterialQualityOverrides // 715da9bb00
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715dabbe80
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715dabbf00
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715dabbf80
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715dabc000
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715dabc080
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x715dabc100
	bool bForceDisablePreintegratedGF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x715dabc180
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1] 0x715dabc200
	enum MobileCSMQuality;//[Offset: 0x8, Size: 0x1] 0x715d89d9e0

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object // 71a4aa3d00
	FString Description;//[Offset: 0x40, Size: 0x10] 0x715cc18a80
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cc18b00
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x715cc18b80
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x715cc18c00

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object // 71a4a17680

--------------------------------
Class: DialogueVoice.Object // 71a4a17400
	byte Gender;//[Offset: 0x28, Size: 0x1] 0x715cb3a500
	byte Plurality;//[Offset: 0x29, Size: 0x1] 0x715cb38480
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10] 0x715cb38500

--------------------------------
Class: DialogueWave.Object // 71a4a17180
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715cb3a200
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x715cb3a280
	FString SpokenText;//[Offset: 0x30, Size: 0x10] 0x715cb3a300
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10] 0x715cb3a380
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10] 0x715cb22040
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10] 0x715cb3a480

--------------------------------
Class: DialogueContextMapping // 715db188c0
	DialogueContext Context;//[Offset: 0x0, Size: 0x18] 0x715db3b680
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x715db3b700
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10] 0x715db3b780
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8] 0x715db3b800

--------------------------------
Class: DialogueContext // 715db18980
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8] 0x715db3b900
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10] 0x715daeb8c0

--------------------------------
Class: Light.Actor.Object // 71a4a16c80
	LightComponent* LightComponent;//[Offset: 0x220, Size: 0x8] 0x715cb39b80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x715cb39c00
	void ToggleEnabled();// 0x622dda8 0x715cb1a6c0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x622daac 0x715cb1a7a0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x622db50 0x715cb1a880
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x622da08 0x715cb1a960
	void SetLightColor(LinearColor NewLightColor);// 0x622dc2c 0x715cb1aa40
	void SetEnabled(bool bSetEnabled);// 0x622ddf4 0x715cb1ab20
	void SetCastShadows(bool bNewValue);// 0x622d95c 0x715cb1ac00
	void SetBrightness(float NewBrightness);// 0x622dd04 0x715cb1ace0
	void SetAffectTranslucentLighting(bool bNewValue);// 0x622d8b0 0x715cb17400
	void OnRep_bEnabled();// 0x622dea0 0x715cb174e0
	bool IsEnabled();// 0x622ddbc 0x715cb175c0
	LinearColor GetLightColor();// 0x622dbf4 0x715cb176a0
	float GetBrightness();// 0x622dcd0 0x715cb17780

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object // 71a4a16780
	float Temperature;//[Offset: 0x21c, Size: 0x4] 0x715cb3d200
	float MaxDrawDistance;//[Offset: 0x220, Size: 0x4] 0x715cb3d280
	float MaxDistanceFadeRange;//[Offset: 0x224, Size: 0x4] 0x715cb3d300
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x715cb3d380
	int ShadowMapChannel;//[Offset: 0x22c, Size: 0x4] 0x715cb3d400
	float MinRoughness;//[Offset: 0x234, Size: 0x4] 0x715cb3d480
	float SpecularScale;//[Offset: 0x238, Size: 0x4] 0x715cb3d500
	float ShadowResolutionScale;//[Offset: 0x23c, Size: 0x4] 0x715cb3d580
	float ShadowBias;//[Offset: 0x240, Size: 0x4] 0x715cb3d600
	float ShadowSlopeBias;//[Offset: 0x244, Size: 0x4] 0x715cb3d680
	float ShadowSharpen;//[Offset: 0x248, Size: 0x4] 0x715cb3b600
	float ContactShadowLength;//[Offset: 0x24c, Size: 0x4] 0x715cb3b680
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1] 0x715cb3b700
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x250, Size: 0x1] 0x715cb3b780
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x250, Size: 0x1] 0x715cb3b800
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x250, Size: 0x1] 0x715cb3b880
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x250, Size: 0x1] 0x715cb3b900
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x250, Size: 0x1] 0x715cb3b980
	LightingChannels LightingChannels;//[Offset: 0x251, Size: 0x1] 0x715cb3ba00
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x258, Size: 0x8] 0x715cb3ba80
	Vector LightFunctionScale;//[Offset: 0x260, Size: 0xc] 0x715cb3bb00
	TextureLightProfile* IESTexture;//[Offset: 0x270, Size: 0x8] 0x715cb3bb80
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1] 0x715cb3bc00
	float IESBrightnessScale;//[Offset: 0x27c, Size: 0x4] 0x715cb3bc80
	float LightFunctionFadeDistance;//[Offset: 0x280, Size: 0x4] 0x715cb3bd00
	float DisabledBrightness;//[Offset: 0x284, Size: 0x4] 0x715cb3bd80
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1] 0x715cb3be00
	float BloomScale;//[Offset: 0x28c, Size: 0x4] 0x715cb3be80
	float BloomThreshold;//[Offset: 0x290, Size: 0x4] 0x715cb3bf00
	float BloomMaxBrightness;//[Offset: 0x294, Size: 0x4] 0x715cb3bf80
	Color BloomTint;//[Offset: 0x298, Size: 0x4] 0x715cb3c000
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x715cb3c080
	float RayStartOffsetDepthScale;//[Offset: 0x2a0, Size: 0x4] 0x715cb3c100
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x622f5f0 0x715cb1c3a0
	void SetUseIESBrightness(bool bNewValue);// 0x622eb40 0x715cb1c480
	void SetTransmission(bool bNewValue);// 0x622efc8 0x715cb1c560
	void SetTemperature(float NewTemperature);// 0x622f45c 0x715cb1c640
	void SetSpecularScale(float NewValue);// 0x622e8b0 0x715cb1c720
	void SetShadowSlopeBias(float NewValue);// 0x622e954 0x715cb1c800
	void SetShadowBias(float NewValue);// 0x622e9f8 0x715cb1c8e0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x622e6b0 0x715cb1c9c0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x622f314 0x715cb190e0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x622f3b8 0x715cb191c0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x622f270 0x715cb192a0
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x622f1cc 0x715cb19380
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x622f500 0x715cb19460
	void SetIntensity(float NewIntensity);// 0x622f738 0x715cb19540
	void SetIndirectLightingIntensity(float NewIntensity);// 0x622f694 0x715cb19620
	void SetIESTexture(TextureLightProfile* NewValue);// 0x622ebec 0x715cb19700
	void SetIESBrightnessScale(float NewValue);// 0x622ea9c 0x715cb197e0
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x622e804 0x715cb198c0
	void SetEnableLightShaftBloom(bool bNewValue);// 0x622ef1c 0x715cb199a0
	void SetBloomTint(Color NewValue);// 0x622ec90 0x715cb19a80
	void SetBloomThreshold(float NewValue);// 0x622edd4 0x715cb19b60
	void SetBloomScale(float NewValue);// 0x622ee78 0x715cb19c40
	void SetBloomMaxBrightness(float NewValue);// 0x622ed30 0x715cb19d20
	void SetAffectTranslucentLighting(bool bNewValue);// 0x622f074 0x715cb19e00
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x622f120 0x715cb19ee0

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object // 71a4a16500
	Guid LightGuid;//[Offset: 0x1f0, Size: 0x10] 0x715cb3af80
	float Brightness;//[Offset: 0x200, Size: 0x4] 0x715cb3b000
	float Intensity;//[Offset: 0x204, Size: 0x4] 0x715cb3b080
	Color LightColor;//[Offset: 0x208, Size: 0x4] 0x715cb3b100
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1] 0x715cb3b180
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 0x1] 0x715cb3b200
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 0x1] 0x715cb3b280
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 0x1] 0x715cb3b300
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20c, Size: 0x1] 0x715cb3b380
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20c, Size: 0x1] 0x715cb3b400
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20c, Size: 0x1] 0x715cb3b480
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20c, Size: 0x1] 0x715cb3b500
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 0x1] 0x715cb3b580
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 0x1] 0x715cb39500
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20d, Size: 0x1] 0x715cb39580
	float IndirectLightingIntensity;//[Offset: 0x210, Size: 0x4] 0x715cb39600
	float VolumetricScatteringIntensity;//[Offset: 0x214, Size: 0x4] 0x715cb39680
	int SamplesPerPixel;//[Offset: 0x218, Size: 0x4] 0x715cb39700
	void SetSamplesPerPixel(int NewValue);// 0x6230350 0x715cb19fc0
	void SetCastVolumetricShadow(bool bNewValue);// 0x62306a4 0x715cb1a0a0
	void SetCastShadows(bool bNewValue);// 0x6230788 0x715cb1a180
	void SetCastRaytracedShadow(bool bNewValue);// 0x62303f4 0x715cb1a260
	void SetCastDeepShadow(bool bNewValue);// 0x62305f8 0x715cb1a340
	void SetAffectReflection(bool bNewValue);// 0x623054c 0x715cb1a420
	void SetAffectGlobalIllumination(bool bNewValue);// 0x62304a0 0x715cb1a500
	LinearColor GetLightColor();// 0x6230750 0x715cb1a5e0

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object // 71a4ae0b00
	float Brightness;//[Offset: 0xe8, Size: 0x4] 0x715cc90f80
	float TextureMultiplier;//[Offset: 0xec, Size: 0x4] 0x715cc91000

--------------------------------
Class: DirectionalLight.Light.Actor.Object // 71a4a16f00

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object // 71a4a16a00
	float ShadowCascadeBiasDistribution;//[Offset: 0x314, Size: 0x4] 0x715cb3dc80
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1] 0x715cb3dd00
	float OcclusionMaskDarkness;//[Offset: 0x31c, Size: 0x4] 0x715cb3dd80
	float OcclusionDepthRange;//[Offset: 0x320, Size: 0x4] 0x715cb3de00
	Vector LightShaftOverrideDirection;//[Offset: 0x324, Size: 0xc] 0x715cb3de80
	float WholeSceneDynamicShadowRadius;//[Offset: 0x330, Size: 0x4] 0x715cb3df00
	float DynamicShadowDistanceMovableLight;//[Offset: 0x334, Size: 0x4] 0x715cb3df80
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x338, Size: 0x4] 0x715cb3e000
	int DynamicShadowCascades;//[Offset: 0x33c, Size: 0x4] 0x715cb3e080
	float CascadeDistributionExponent;//[Offset: 0x340, Size: 0x4] 0x715cb3e100
	float CascadeTransitionFraction;//[Offset: 0x344, Size: 0x4] 0x715cb3e180
	float ShadowDistanceFadeoutFraction;//[Offset: 0x348, Size: 0x4] 0x715cb3e200
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 0x1] 0x715cb3e280
	int FarShadowCascadeCount;//[Offset: 0x350, Size: 0x4] 0x715cb3e300
	float FarShadowDistance;//[Offset: 0x354, Size: 0x4] 0x715cb3e380
	float DistanceFieldShadowDistance;//[Offset: 0x358, Size: 0x4] 0x715cb3e400
	float LightSourceAngle;//[Offset: 0x35c, Size: 0x4] 0x715cb3e480
	float LightSourceSoftAngle;//[Offset: 0x360, Size: 0x4] 0x715cb3e500
	float TraceDistance;//[Offset: 0x364, Size: 0x4] 0x715cb3e580
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x368, Size: 0x10] 0x715cb3e600
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1] 0x715cb3e680
	Color ModulatedShadowColor;//[Offset: 0x37c, Size: 0x4] 0x715cb3e700
	float ShadowAmount;//[Offset: 0x380, Size: 0x4] 0x715cb3c680
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 0x1] 0x715cb3c700
	int AtmosphereSunLightIndex;//[Offset: 0x388, Size: 0x4] 0x715cb3c780
	Texture2D* DirectionalLightMaskTexture;//[Offset: 0x390, Size: 0x8] 0x715cb3c800
	Vector2D DirectionalLightMaskOffset;//[Offset: 0x398, Size: 0x8] 0x715cb3c880
	Vector2D DirectionalLightMaskScale;//[Offset: 0x3a0, Size: 0x8] 0x715cb3c900
	float DirectionalLightMaskGlobalIlluminationReduction;//[Offset: 0x3a8, Size: 0x4] 0x715cb3c980
	float DirectionalLightMaskAdditiveShadowColorReduction;//[Offset: 0x3ac, Size: 0x4] 0x715cb3ca00
	float ShadowStartPoint;//[Offset: 0x3b0, Size: 0x4] 0x715cb3ca80
	float ShadowFalloff;//[Offset: 0x3b4, Size: 0x4] 0x715cb3cb00
	float ShadowColorBlendPoint;//[Offset: 0x3b8, Size: 0x4] 0x715cb3cb80
	float ShadowColorFalloff;//[Offset: 0x3bc, Size: 0x4] 0x715cb3cc00
	ZoneMaterialSettings[] ZoneMaterialSettings;//[Offset: 0x3c0, Size: 0x10] 0x715cb21fa0
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x615a8d8 0x715cb1bae0
	void SetShadowAmount(float NewValue);// 0x615a640 0x715cb1bbc0
	void SetOcclusionMaskDarkness(float NewValue);// 0x615a788 0x715cb1bca0
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x615a6e4 0x715cb1bd80
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x615a82c 0x715cb1be60
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x615ab68 0x715cb1bf40
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x615ac0c 0x715cb1c020
	void SetDynamicShadowCascades(int NewValue);// 0x615aac4 0x715cb1c100
	void SetCascadeTransitionFraction(float NewValue);// 0x615a97c 0x715cb1c1e0
	void SetCascadeDistributionExponent(float NewValue);// 0x615aa20 0x715cb1c2c0

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings // 715db19640
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4] 0x715db44080

--------------------------------
Class: LightmassLightSettings // 715db19700
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4] 0x715db44100
	float ShadowExponent;//[Offset: 0x4, Size: 0x4] 0x715db44180
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715db44200

--------------------------------
Class: ZoneMaterialSettings // 715ce71a80
	FString Identifier;//[Offset: 0x0, Size: 0x10] 0x715ce6da00
	LinearColor ShadowBlendColor;//[Offset: 0x10, Size: 0x10] 0x715ce6da80
	float ShadowBlendColorIntensity;//[Offset: 0x20, Size: 0x4] 0x715ce6db00
	LinearColor ShadowCoreColor;//[Offset: 0x24, Size: 0x10] 0x715ce6db80
	float ShadowCoreColorIntensity;//[Offset: 0x34, Size: 0x4] 0x715ce6dc00

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object // 71a4a15d80
	float Constant;//[Offset: 0x34, Size: 0x4] 0x715cb3db00

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object // 71a4a15b00
	InterpCurveFloat ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x715cb3da80

--------------------------------
Class: InterpCurveFloat // 717dfc8ec0
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10] 0x7172ba6640
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x717df89a80
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x717df89b00

--------------------------------
Class: InterpCurvePointFloat // 717dfc8f80
	float InVal;//[Offset: 0x0, Size: 0x4] 0x717df89b80
	float OutVal;//[Offset: 0x4, Size: 0x4] 0x717df89c00
	float ArriveTangent;//[Offset: 0x8, Size: 0x4] 0x717df89c80
	float LeaveTangent;//[Offset: 0xc, Size: 0x4] 0x717df89d00
	byte InterpMode;//[Offset: 0x10, Size: 0x1] 0x717df89d80

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object // 71a4a15880
	FName ParameterName;//[Offset: 0x38, Size: 0x8] 0x715cb3d780
	float MinInput;//[Offset: 0x40, Size: 0x4] 0x715cb3d800
	float MaxInput;//[Offset: 0x44, Size: 0x4] 0x715cb3d880
	float MinOutput;//[Offset: 0x48, Size: 0x4] 0x715cb3d900
	float MaxOutput;//[Offset: 0x4c, Size: 0x4] 0x715cb3d980
	byte ParamMode;//[Offset: 0x50, Size: 0x1] 0x715cb3da00

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object // 71a4a15600

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object // 71a4a15380
	float Min;//[Offset: 0x34, Size: 0x4] 0x715cb3f780
	float Max;//[Offset: 0x38, Size: 0x4] 0x715cb3d700

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object // 71a4a1f600
	InterpCurveVector2D ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x715cb3f700

--------------------------------
Class: InterpCurveVector2D // 717dfc8d40
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0x10] 0x7172ba65a0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x717df89680
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x717df89700

--------------------------------
Class: InterpCurvePointVector2D // 717dfc8e00
	float InVal;//[Offset: 0x0, Size: 0x4] 0x717df89780
	Vector2D OutVal;//[Offset: 0x4, Size: 0x8] 0x717df89800
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 0x8] 0x717df89880
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 0x8] 0x717df89900
	byte InterpMode;//[Offset: 0x1c, Size: 0x1] 0x717df89980

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object // 71a4a1f100
	Vector Constant;//[Offset: 0x34, Size: 0xc] 0x715cb3f400
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x715cb3f480
	byte LockedAxes;//[Offset: 0x41, Size: 0x1] 0x715cb3f500

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object // 71a4a1ee80
	InterpCurveVector ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x715cb3f280
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cb3f300
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x715cb3f380

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object // 71a4a1ec00
	FName ParameterName;//[Offset: 0x44, Size: 0x8] 0x715cb3ef80
	Vector MinInput;//[Offset: 0x4c, Size: 0xc] 0x715cb3f000
	Vector MaxInput;//[Offset: 0x58, Size: 0xc] 0x715cb3f080
	Vector MinOutput;//[Offset: 0x64, Size: 0xc] 0x715cb3f100
	Vector MaxOutput;//[Offset: 0x70, Size: 0xc] 0x715cb3f180
	byte ParamModes;//[Offset: 0x7c, Size: 0x1] 0x715cb3f200

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object // 71a4a1e980

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object // 71a4a1e700
	Vector Max;//[Offset: 0x34, Size: 0xc] 0x715cb3ec80
	Vector Min;//[Offset: 0x40, Size: 0xc] 0x715cb3ed00
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x715cb3ed80
	byte LockedAxes;//[Offset: 0x4d, Size: 0x1] 0x715cb3ee00
	byte MirrorFlags;//[Offset: 0x4e, Size: 0x1] 0x715cb3ee80
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1] 0x715cb3ef00

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object // 71a4a1e480
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x715cb3e980
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cb3ea00
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x715cb3ea80
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x715cb3eb00
	byte MirrorFlags;//[Offset: 0x53, Size: 0x1] 0x715cb3eb80
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1] 0x715cb3ec00

--------------------------------
Class: InterpCurveTwoVectors // 717dfc88c0
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10] 0x7172ba63c0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x717df8ab80
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x717df8ac00

--------------------------------
Class: InterpCurvePointTwoVectors // 717dfc8980
	float InVal;//[Offset: 0x0, Size: 0x4] 0x717df8ac80
	TwoVectors OutVal;//[Offset: 0x4, Size: 0x18] 0x717df8ad00
	TwoVectors ArriveTangent;//[Offset: 0x1c, Size: 0x18] 0x717df8ad80
	TwoVectors LeaveTangent;//[Offset: 0x34, Size: 0x18] 0x717df8ae00
	byte InterpMode;//[Offset: 0x4c, Size: 0x1] 0x717df8ae80

--------------------------------
Class: TwoVectors // 717dfc6940
	Vector v1;//[Offset: 0x0, Size: 0xc] 0x717df87480
	Vector v2;//[Offset: 0xc, Size: 0xc] 0x717df87500

--------------------------------
Class: DocumentationActor.Actor.Object // 71a4a1e200

--------------------------------
Class: DPICustomScalingRule.Object // 71a4a1df80

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4a1da80

--------------------------------
Class: EdGraph.Object // 71a4a1d800
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8] 0x715cb21e60
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10] 0x715cb21f00
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x715cb3fd80
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x715cb3fe00
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1] 0x715cb3fe80

--------------------------------
Class: EdGraphSchema.Object // 71a4a1cb80

--------------------------------
Class: GraphNodeContextMenuContext.Object // 71a4a1d580
	Blueprint* Blueprint;//[Offset: 0x28, Size: 0x8] 0x715cb3fb00
	EdGraph* Graph;//[Offset: 0x30, Size: 0x8] 0x715cb3fb80
	EdGraphNode* Node;//[Offset: 0x38, Size: 0x8] 0x715cb3fc00
	bool bIsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cb3fc80

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object // 71a4a1d080
	FString Link;//[Offset: 0x98, Size: 0x10] 0x715cb50b80
	FString Excerpt;//[Offset: 0xa8, Size: 0x10] 0x715cb50c00

--------------------------------
Class: ViewModeUtils.Object // 71a4a1c400

--------------------------------
Class: EngineBaseTypes.Object // 71a4a1c180

--------------------------------
Class: HandlerComponentFactory.Object // 71a49c7b80

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object // 71a4a1bf00

--------------------------------
Class: EngineMessage.LocalMessage.Object // 71a4a1bc80
	FString FailedPlaceMessage;//[Offset: 0x28, Size: 0x10] 0x715cb51400
	FString MaxedOutMessage;//[Offset: 0x38, Size: 0x10] 0x715cb51480
	FString EnteredMessage;//[Offset: 0x48, Size: 0x10] 0x715cb51500
	FString LeftMessage;//[Offset: 0x58, Size: 0x10] 0x715cb51580
	FString GlobalNameChange;//[Offset: 0x68, Size: 0x10] 0x715cb51600
	FString SpecEnteredMessage;//[Offset: 0x78, Size: 0x10] 0x715cb51680
	FString NewPlayerMessage;//[Offset: 0x88, Size: 0x10] 0x715cb51700
	FString NewSpecMessage;//[Offset: 0x98, Size: 0x10] 0x715cb51780

--------------------------------
Class: DynamicSubsystem.Subsystem.Object // 71a4888580

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object // 71a4888800

--------------------------------
Class: EngineTypes.Object // 71a4a1b780

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object // 71a4a1b500
	ExponentialHeightFogComponent* Component;//[Offset: 0x220, Size: 0x8] 0x715cb51300
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x715cb51380
	void OnRep_bEnabled();// 0x6177dc8 0x715cb1af80

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object // 71a4a1b280
	float FogDensity;//[Offset: 0x1f0, Size: 0x4] 0x715cb53e80
	float FogHeightFalloff;//[Offset: 0x1f4, Size: 0x4] 0x715cb53f00
	ExponentialHeightFogData SecondFogData;//[Offset: 0x1f8, Size: 0xc] 0x715cb53f80
	LinearColor FogInscatteringColor;//[Offset: 0x204, Size: 0x10] 0x715cb54000
	TextureCube* InscatteringColorCubemap;//[Offset: 0x218, Size: 0x8] 0x715cb54080
	float InscatteringColorCubemapAngle;//[Offset: 0x220, Size: 0x4] 0x715cb54100
	LinearColor InscatteringTextureTint;//[Offset: 0x224, Size: 0x10] 0x715cb54180
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x234, Size: 0x4] 0x715cb54200
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x238, Size: 0x4] 0x715cb52180
	float DirectionalInscatteringExponent;//[Offset: 0x23c, Size: 0x4] 0x715cb52200
	float DirectionalInscatteringStartDistance;//[Offset: 0x240, Size: 0x4] 0x715cb52280
	LinearColor DirectionalInscatteringColor;//[Offset: 0x244, Size: 0x10] 0x715cb52300
	float FogMaxOpacity;//[Offset: 0x254, Size: 0x4] 0x715cb52380
	float StartDistance;//[Offset: 0x258, Size: 0x4] 0x715cb52400
	float FogCutoffDistance;//[Offset: 0x25c, Size: 0x4] 0x715cb52480
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x715cb52500
	float VolumetricFogScatteringDistribution;//[Offset: 0x264, Size: 0x4] 0x715cb52580
	Color VolumetricFogAlbedo;//[Offset: 0x268, Size: 0x4] 0x715cb52600
	LinearColor VolumetricFogEmissive;//[Offset: 0x26c, Size: 0x10] 0x715cb52680
	float VolumetricFogExtinctionScale;//[Offset: 0x27c, Size: 0x4] 0x715cb52700
	float VolumetricFogDistance;//[Offset: 0x280, Size: 0x4] 0x715cb52780
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x284, Size: 0x4] 0x715cb52800
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x715cb52880
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x6178564 0x715cb1d7c0
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x61784c0 0x715cb1d8a0
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x617837c 0x715cb1d980
	void SetVolumetricFogDistance(float NewValue);// 0x61782d8 0x715cb1da60
	void SetVolumetricFogAlbedo(Color NewValue);// 0x6178420 0x715cb1db40
	void SetVolumetricFog(bool bNewValue);// 0x6178608 0x715cb1dc20
	void SetStartDistance(float Value);// 0x6178758 0x715cb1dd00
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x6178bd4 0x715cb1dde0
	void SetInscatteringTextureTint(LinearColor Value);// 0x6178b30 0x715cb1dec0
	void SetInscatteringColorCubemapAngle(float Value);// 0x6178d1c 0x715cb1dfa0
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x6178dc0 0x715cb1e080
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x6178c78 0x715cb1e160
	void SetFogMaxOpacity(float Value);// 0x61787fc 0x715cb1e240
	void SetFogInscatteringColor(LinearColor Value);// 0x6178e64 0x715cb1e320
	void SetFogHeightFalloff(float Value);// 0x61788a0 0x715cb1e400
	void SetFogDensity(float Value);// 0x6178f08 0x715cb1e4e0
	void SetFogCutoffDistance(float Value);// 0x61786b4 0x715cb1e5c0
	void SetDirectionalInscatteringStartDistance(float Value);// 0x61789e8 0x715cb1e6a0
	void SetDirectionalInscatteringExponent(float Value);// 0x6178a8c 0x715cb1adc0
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x6178944 0x715cb1aea0

--------------------------------
Class: ExponentialHeightFogData // 715db1c100
	float FogDensity;//[Offset: 0x0, Size: 0x4] 0x715db44f80
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4] 0x715db45000
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4] 0x715db45080

--------------------------------
Class: FontFace.Object // 71a4a1ab00
	FString SourceFilename;//[Offset: 0x30, Size: 0x10] 0x715cb54e00
	enum Hinting;//[Offset: 0x40, Size: 0x1] 0x715cb23d00
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1] 0x715cb23da0
	enum LayoutMethod;//[Offset: 0x42, Size: 0x1] 0x715cb21500

--------------------------------
Class: FontImportOptions.Object // 71a4a1a880
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xa8] 0x715cb54d80

--------------------------------
Class: ForceFeedbackAttenuation.Object // 71a4a1a600
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xb0] 0x715cb54d00

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings // 715db1bec0

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object // 71a4a1fd80
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x1f0, Size: 0x8] 0x715cb54500
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1] 0x715cb54580
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1] 0x715cb54600
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1] 0x715cb54680
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1] 0x715cb54700
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1] 0x715cb54780
	float IntensityMultiplier;//[Offset: 0x1fc, Size: 0x4] 0x715cb54800
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x200, Size: 0x8] 0x715cb54880
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x208, Size: 0xb0] 0x715cb54900
	delegate OnForceFeedbackFinished;//[Offset: 0x2b8, Size: 0x10] 0x715cb54980
	void Stop();// 0x617af4c 0x715cb1cfe0
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x617aea8 0x715cb1d0c0
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x617b014 0x715cb1d1a0
	void Play(float StartTime);// 0x617af68 0x715cb1d280
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x617ac74 0x715cb1d360
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x617ad94 0x715cb1d440

--------------------------------
Class: GameEngine.Engine.Object // 71a488df80
	float MaxDeltaTime;//[Offset: 0xdd0, Size: 0x4] 0x715d05aa00
	float ServerFlushLogInterval;//[Offset: 0xdd4, Size: 0x4] 0x715d05aa80
	GameInstance* GameInstance;//[Offset: 0xdd8, Size: 0x8] 0x715d05ab00

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object // 71a4836a00

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object // 71a4963300
	FName MatchState;//[Offset: 0x2c0, Size: 0x8] 0x715d20a900
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1] 0x715d20a980
	int NumSpectators;//[Offset: 0x2cc, Size: 0x4] 0x715d20aa00
	int NumPlayers;//[Offset: 0x2d0, Size: 0x4] 0x715d20aa80
	int NumBots;//[Offset: 0x2d4, Size: 0x4] 0x715d20ab00
	float MinRespawnDelay;//[Offset: 0x2d8, Size: 0x4] 0x715d20ab80
	int NumTravellingPlayers;//[Offset: 0x2dc, Size: 0x4] 0x715d20ac00
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e0, Size: 0x8] 0x715d1b7400
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2e8, Size: 0x10] 0x715d1b74a0
	float InactivePlayerStateLifeSpan;//[Offset: 0x2f8, Size: 0x4] 0x715d20ad00
	int MaxInactivePlayers;//[Offset: 0x2fc, Size: 0x4] 0x715d20ad80
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1] 0x715d20ae00
	void StartMatch();// 0x617f530 0x715d213f80
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x617f2f8 0x715d214060
	void Say(FString Msg);// 0x617f3a4 0x715d214140
	void RestartGame();// 0x617f4f8 0x715d214220
	bool ReadyToStartMatch();// 0x617f49c 0x715d214300
	bool ReadyToEndMatch();// 0x617f45c 0x715d2143e0
	void K2_OnSetMatchState(FName NewState);// 0x45c6aa0 0x715d2144c0
	bool IsMatchInProgress();// 0x617f58c 0x715d2145a0
	bool HasMatchEnded();// 0x617f54c 0x715d214680
	FName GetMatchState();// 0x617f5cc 0x715d214760
	void EndMatch();// 0x617f514 0x715d214840
	void AbortMatch();// 0x617f4dc 0x715d214920

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object // 71a4a25100
	static void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x618be80 0x715cb64760
	static bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0x618353c 0x715cb64840
	static AudioComponent* SpawnSoundAttached(SoundBase* sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x618844c 0x715cb64920
	static AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x6188824 0x715cb64a00
	static AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x6189098 0x715cb64ae0
	static Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0x618d974 0x715cb64bc0
	static ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x6186fb4 0x715cb64ca0
	static ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x618735c 0x715cb64d80
	static ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivate);// 0x6189d74 0x715cb64e60
	static ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivateSystem);// 0x618a088 0x715cb64f40
	static AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x6187624 0x715cb65020
	static AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x6187a1c 0x715cb65100
	static AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);// 0x6188000 0x715cb651e0
	static DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0x6185e70 0x715cb652c0
	static DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0x61860ec 0x715cb653a0
	static void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0x61833bc 0x715cb65480
	static void SetViewportMouseCaptureMode(const Object* WorldContextObject, const enum MouseCaptureMode);// 0x618b054 0x715cb65560
	static void SetSubtitlesEnabled(bool bEnabled);// 0x6186f18 0x715cb65640
	static void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0x6186b4c 0x715cb61d60
	static void SetSoundClassDistanceScale(const Object* WorldContextObject, SoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);// 0x61897ec 0x715cb61e40
	static void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0x618c1c4 0x715cb61f20
	static void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0x6186384 0x715cb62000
	static void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0x618b67c 0x715cb620e0
	static void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0x6189944 0x715cb621c0
	static void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0x6189548 0x715cb622a0
	static bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0x618b588 0x715cb62380
	static void SetForceDisableSplitscreen(const Object* WorldContextObject, bool bDisable);// 0x618b400 0x715cb62460
	static void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0x618b278 0x715cb62540
	static void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0x6186e0c 0x715cb62620
	static bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x6184f90 0x715cb62700
	static void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0x618c340 0x715cb627e0
	static Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0x61831ec 0x715cb628c0
	static Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0x61832d4 0x715cb629a0
	static void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x618691c 0x715cb62a80
	static bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x6182d58 0x715cb62b60
	static void PrimeSound(SoundBase* InSound);// 0x6186d78 0x715cb62c40
	static void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x6186848 0x715cb62d20
	static void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShake Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0x618a314 0x715cb62e00
	static void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, Actor* OwningActor);// 0x6188b24 0x715cb62ee0
	static void PlaySound2D(const Object* WorldContextObject, SoundBase* sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, Actor* OwningActor);// 0x6189324 0x715cb62fc0
	static void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings);// 0x6187d38 0x715cb630a0
	static void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);// 0x6188250 0x715cb63180
	static FString ParseOption(FString Options, FString Key);// 0x61827ec 0x715cb63260
	static void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0x618bb20 0x715cb63340
	static HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, int HitItem, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0x61853a4 0x715cb63420
	static void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x618bff4 0x715cb63500
	static SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0x6184da4 0x715cb635e0
	static bool IsSplitscreenForceDisabled(const Object* WorldContextObject);// 0x618b358 0x715cb636c0
	static bool IsGamePaused(const Object* WorldContextObject);// 0x618b4e0 0x715cb637a0
	static bool HasOption(FString Options, FString InKey);// 0x61826a0 0x715cb63880
	static bool HasLaunchOption(FString OptionToCheck);// 0x61824a8 0x715cb63960
	static int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x6183084 0x715cb60080
	static IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0x6183490 0x715cb60160
	static float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0x6184c08 0x715cb60240
	static void GetViewProjectionMatrix(MinimalViewInfo DesiredView, out Matrix ViewMatrix, out Matrix ProjectionMatrix, out Matrix ViewProjectionMatrix);// 0x6182ae0 0x715cb60320
	static enum GetViewportMouseCaptureMode(const Object* WorldContextObject);// 0x618b12c 0x715cb60400
	static float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0x6184ac0 0x715cb604e0
	static float GetTimeSeconds(const Object* WorldContextObject);// 0x6184b64 0x715cb605c0
	static byte GetSurfaceType(out const HitResult Hit);// 0x61852d4 0x715cb606a0
	static LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0x618bd9c 0x715cb60780
	static float GetRealTimeSeconds(const Object* WorldContextObject);// 0x6184a1c 0x715cb60860
	static Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0x618c720 0x715cb60940
	static int GetPlayerControllerID(PlayerController* Player);// 0x618c29c 0x715cb60a20
	static PlayerController* GetPlayerControllerFromID(const Object* WorldContextObject, int ControllerId);// 0x618c808 0x715cb60b00
	static PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0x618c8f0 0x715cb60be0
	static Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0x618c638 0x715cb60cc0
	static PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0x618c550 0x715cb60da0
	static FString GetPlatformName();// 0x61846e8 0x715cb60e80
	static class Object GetObjectClass(const Object* Object);// 0x618b7f8 0x715cb60f60
	static int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0x61862e0 0x715cb61040
	static void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0x6182978 0x715cb61120
	static int GetIntOption(FString Options, FString Key, int DefaultValue);// 0x618255c 0x715cb61200
	static float GetGlobalTimeDilation(const Object* WorldContextObject);// 0x618b754 0x715cb612e0
	static GameStateBase* GetGameState(const Object* WorldContextObject);// 0x618b89c 0x715cb613c0
	static GameModeBase* GetGameMode(const Object* WorldContextObject);// 0x618b940 0x715cb614a0
	static GameInstance* GetGameInstance(const Object* WorldContextObject);// 0x618c9d8 0x715cb61580
	static bool GetEnableWorldRendering(const Object* WorldContextObject);// 0x618b1d0 0x715cb61660
	static ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0x618645c 0x715cb61740
	static FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0x618b9e4 0x715cb61820
	static bool GetClosestListenerLocation(const Object* WorldContextObject, out const Vector Location, float MaximumRange, const bool bAllowAttenuationOverride, out Vector ListenerPosition);// 0x6189a5c 0x715cb61900
	static float GetAudioTimeSeconds(const Object* WorldContextObject);// 0x6184978 0x715cb619e0
	static void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0x618cbf8 0x715cb61ac0
	static void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0x618cd30 0x715cb61ba0
	static void GetAllActorsOfClassWithTag(const Object* WorldContextObject, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0x618ca7c 0x715cb61c80
	static void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0x618ce68 0x715cb1e780
	static Actor* GetActorOfClass(const Object* WorldContextObject, class Actor ActorClass);// 0x618cfa0 0x715cb1e860
	static void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0x618d084 0x715cb1e940
	static Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0x618d22c 0x715cb1ea20
	static void GetAccurateRealTime(const Object* WorldContextObject, out int Seconds, out float PartialSeconds);// 0x6184834 0x715cb1eb00
	static void FlushLevelStreaming(const Object* WorldContextObject);// 0x618bd08 0x715cb1ebe0
	static Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0x618d2f0 0x715cb1ecc0
	static bool FindCollisionUV(out const HitResult Hit, int UVChannel, out Vector2D UV);// 0x6185170 0x715cb1eda0
	static void EnableLiveStreaming(bool Enable);// 0x6184798 0x715cb1ee80
	static bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0x6184e98 0x715cb1ef60
	static bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0x6182eec 0x715cb1f040
	static bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0x6184cac 0x715cb1f120
	static void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0x6186500 0x715cb1f200
	static AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x6188e0c 0x715cb1f2e0
	static SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0x61850cc 0x715cb1f3c0
	static PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0x618c420 0x715cb1f4a0
	static void ClearSoundMixModifiers(const Object* WorldContextObject);// 0x61867b4 0x715cb1f580
	static void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeoutTime);// 0x61869f0 0x715cb1f660
	static void CancelAsyncLoading();// 0x618bcf4 0x715cb1f740
	static void BreakHitResult(out const HitResult Hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out int HitItem, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0x6185898 0x715cb1f820
	static bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0x61843bc 0x715cb1f900
	static bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x6183948 0x715cb1f9e0
	static bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x6183e74 0x715cb1fac0
	static bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0x6183738 0x715cb1fba0
	static Actor* BeginSpawningActorFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, bool bNoCollisionFail, Actor* Owner);// 0x618d5e4 0x715cb1fc80
	static Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0x618d7d4 0x715cb1fd60
	static Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0x618d408 0x715cb1fe40
	static bool AreSubtitlesEnabled();// 0x6186ee0 0x715cb1ff20
	static bool AreAnyListenersWithinRange(const Object* WorldContextObject, out const Vector Location, float MaximumRange);// 0x6189c3c 0x715cb1caa0
	static bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0x618a960 0x715cb1cb80
	static bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0x618ad14 0x715cb1cc60
	static float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x618a6f0 0x715cb1cd40
	static float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x618a540 0x715cb1ce20
	static void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0x61865d4 0x715cb1cf00

--------------------------------
Class: PredictProjectilePathParams // 715db1ba40
	Vector StartLocation;//[Offset: 0x0, Size: 0xc] 0x715db47100
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc] 0x715db47180
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715db47200
	float ProjectileRadius;//[Offset: 0x1c, Size: 0x4] 0x715db47280
	float MaxSimTime;//[Offset: 0x20, Size: 0x4] 0x715db47300
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x715db47380
	byte TraceChannel;//[Offset: 0x25, Size: 0x1] 0x715db45300
	byte[] ObjectTypes;//[Offset: 0x28, Size: 0x10] 0x715daea880
	Actor*[] ActorsToIgnore;//[Offset: 0x38, Size: 0x10] 0x715daea920
	float SimFrequency;//[Offset: 0x48, Size: 0x4] 0x715db45480
	float OverrideGravityZ;//[Offset: 0x4c, Size: 0x4] 0x715db45500
	byte DrawDebugType;//[Offset: 0x50, Size: 0x1] 0x715db45580
	float DrawDebugTime;//[Offset: 0x54, Size: 0x4] 0x715db45600
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715db45680

--------------------------------
Class: PredictProjectilePathResult // 715db1bbc0
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10] 0x715daea9c0
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c] 0x715db45900
	HitResult HitResult;//[Offset: 0x2c, Size: 0x88] 0x715db45980

--------------------------------
Class: PredictProjectilePathPointData // 715db1bb00
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715db45780
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x715db45800
	float Time;//[Offset: 0x18, Size: 0x4] 0x715db45880

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object // 71a4999700
	FName MatchState;//[Offset: 0x26c, Size: 0x8] 0x715d25e000
	FName PreviousMatchState;//[Offset: 0x274, Size: 0x8] 0x715d25e080
	int ElapsedTime;//[Offset: 0x27c, Size: 0x4] 0x715d25e100
	void OnRep_MatchState();// 0x6191304 0x715d2476a0
	void OnRep_ElapsedTime();// 0x61912e8 0x715d247780

--------------------------------
Class: SpotLight.Light.Actor.Object // 71a4a24700
	SpotLightComponent* SpotLightComponent;//[Offset: 0x230, Size: 0x8] 0x715cb7a800
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x631cbdc 0x715cb67940
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x631cc80 0x715cb67a20

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object // 71a4ae4480
	float InnerConeAngle;//[Offset: 0x33c, Size: 0x4] 0x715cc6b500
	float OuterConeAngle;//[Offset: 0x340, Size: 0x4] 0x715cc6b580
	float LightShaftConeAngle;//[Offset: 0x344, Size: 0x4] 0x715cc69500
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x631d058 0x715cc72380
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x631d0fc 0x715cc72460

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object // 71a4ad3f80
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1] 0x715cc4c480
	float LightFalloffExponent;//[Offset: 0x32c, Size: 0x4] 0x715cc4c500
	float SourceRadius;//[Offset: 0x330, Size: 0x4] 0x715cc4c580
	float SoftSourceRadius;//[Offset: 0x334, Size: 0x4] 0x715cc4c600
	float SourceLength;//[Offset: 0x338, Size: 0x4] 0x715cc4a580
	void SetSourceRadius(float bNewValue);// 0x62b9470 0x715cc368a0
	void SetSourceLength(float NewValue);// 0x62b9328 0x715cc36980
	void SetSoftSourceRadius(float bNewValue);// 0x62b93cc 0x715cc36a60
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x62b9514 0x715cc36b40

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object // 71a4a82900
	enum IntensityUnits;//[Offset: 0x311, Size: 0x1] 0x715cb27e00
	float Radius;//[Offset: 0x314, Size: 0x4] 0x715cc07580
	float AttenuationRadius;//[Offset: 0x318, Size: 0x4] 0x715cc07600
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x31c, Size: 0xc] 0x715cc07680
	void SetIntensityUnits(enum NewIntensityUnits);// 0x6233380 0x715cbed980
	void SetAttenuationRadius(float NewRadius);// 0x6233424 0x715cbeda60
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x6233254 0x715cbedb40

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings // 715db19580

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object // 71a4a24980

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object // 71a4a24200
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10] 0x715cb24f20
	int SampleRate;//[Offset: 0x38, Size: 0x4] 0x715cb7a780

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object // 71a4a23f80
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x28, Size: 0x110] 0x715cb7a680

--------------------------------
Class: HapticFeedbackDetails_Curve // 715db1b8c0
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x88] 0x715db46f80
	RuntimeFloatCurve Amplitude;//[Offset: 0x88, Size: 0x88] 0x715db47000

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object // 71a4a23d00
	SoundWave* SoundWave;//[Offset: 0x28, Size: 0x8] 0x715cb7a600

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4a23a80
	static void StopPerformanceSnapshots();// 0x6197500 0x715cb676a0
	static void StartPerformanceSnapshots();// 0x6197514 0x715cb67780
	static void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0x61973c4 0x715cb67860

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a499e700
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x4a8, Size: 0x10] 0x715ca70a60
	int NumCustomDataFloats;//[Offset: 0x4b8, Size: 0x4] 0x715ca6a380
	float[] PerInstanceSMCustomData;//[Offset: 0x4c0, Size: 0x10] 0x715ca70b00
	int InstancingRandomSeed;//[Offset: 0x4d0, Size: 0x4] 0x715ca6a480
	int InstanceStartCullDistance;//[Offset: 0x4d4, Size: 0x4] 0x715ca6a500
	int InstanceEndCullDistance;//[Offset: 0x4d8, Size: 0x4] 0x715ca68480
	int[] InstanceReorderTable;//[Offset: 0x4e0, Size: 0x10] 0x715ca70ba0
	int NumPendingLightmaps;//[Offset: 0x538, Size: 0x4] 0x715ca68580
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x540, Size: 0x10] 0x715ca70c40
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x61a40b8 0x715d24ebe0
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x61a444c 0x715d24ecc0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x61a3a54 0x715d24eda0
	bool RemoveInstance(int InstanceIndex);// 0x61a3b88 0x715d24ee80
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x61a42dc 0x715d24ef60
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x61a38b4 0x715d24f040
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x61a3758 0x715d24f120
	int GetInstanceCount();// 0x61a3b38 0x715d24f200
	void ClearInstances();// 0x61a3b6c 0x715d24f2e0
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x61a3ea4 0x715d24f3c0
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x61a3c40 0x715d24f4a0
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x61a45d4 0x715d24f580
	int AddInstance(out const Transform InstanceTransform);// 0x61a46b8 0x715d24f660

--------------------------------
Class: InstancedStaticMeshInstanceData // 715db1ad80
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x715db47800

--------------------------------
Class: InstancedStaticMeshMappingInfo // 715db1dd80

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a499e980
	int[] SortedInstances;//[Offset: 0x560, Size: 0x10] 0x715ca70880
	int NumBuiltInstances;//[Offset: 0x570, Size: 0x4] 0x715ca69d80
	Box BuiltInstanceBounds;//[Offset: 0x578, Size: 0x1c] 0x715ca69e00
	Box UnbuiltInstanceBounds;//[Offset: 0x594, Size: 0x1c] 0x715ca69e80
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x5b0, Size: 0x10] 0x715ca70920
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 0x1] 0x715ca69f80
	int OcclusionLayerNumNodes;//[Offset: 0x5c8, Size: 0x4] 0x715ca6a000
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x5cc, Size: 0x1c] 0x715ca6a080
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1] 0x715ca6a100
	int InstanceCountToRender;//[Offset: 0x5ec, Size: 0x4] 0x715ca6a180
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x619799c 0x715d24eb00

--------------------------------
Class: HLODProxy.Object // 71a4a23800
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10] 0x715cb24e80

--------------------------------
Class: HLODProxyMesh // 715db1b680
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c] 0x715db46700
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8] 0x715db46780
	FName Key;//[Offset: 0x28, Size: 0x8] 0x715db46800

--------------------------------
Class: LODActor.Actor.Object // 71a4a82180
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 0x8] 0x715cc08f80
	<MaterialInterface*,InstancedStaticMeshComponent*> ImpostersStaticMeshComponents;//[Offset: 0x228, Size: 0x50] 0x715cece2c0
	HLODProxy* Proxy;//[Offset: 0x278, Size: 0x8] 0x715cc09100
	FName Key;//[Offset: 0x280, Size: 0x8] 0x715cc09180
	float LODDrawDistance;//[Offset: 0x288, Size: 0x4] 0x715cc09200
	int LODLevel;//[Offset: 0x28c, Size: 0x4] 0x715cc09280
	Actor*[] SubActors;//[Offset: 0x290, Size: 0x10] 0x715cb27cc0
	byte CachedNumHLODLevels;//[Offset: 0x2a0, Size: 0x1] 0x715cc09380

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object // 71a4a23580
	static float RandomSobolFloat(int Index, int Dimension, float Seed);// 0x619c3dc 0x715cb6a880
	static Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed);// 0x619bed0 0x715cb6a960
	static Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed);// 0x619c158 0x715cb6aa40
	static float NextSobolFloat(int Index, int Dimension, float PreviousValue);// 0x619c2b4 0x715cb6ab20
	static Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue);// 0x619bda8 0x715cb6ac00
	static Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue);// 0x619c038 0x715cb6ace0
	static ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0x619bc08 0x715cb67400
	static void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0x619b75c 0x715cb674e0
	static void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0x619ba70 0x715cb675c0

--------------------------------
Class: ImportanceTexture // 715db1b5c0
	IntPoint Size;//[Offset: 0x0, Size: 0x8] 0x715db46380
	int NumMips;//[Offset: 0x8, Size: 0x4] 0x715db46400
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10] 0x715daea6a0
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10] 0x715daea740
	Color[] TextureData;//[Offset: 0x30, Size: 0x10] 0x715daea7e0
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8] 0x715db46600
	byte Weighting;//[Offset: 0x48, Size: 0x1] 0x715db46680

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object // 71a4a23300

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object // 71a4a23080
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cb7d100
	delegate[] ClickedBannerDelegates;//[Offset: 0x40, Size: 0x10] 0x715cb24d40
	delegate[] ClosedAdDelegates;//[Offset: 0x50, Size: 0x10] 0x715cb24de0

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object // 71a4a22900

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object // 71a4a22b80
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x715cb24b60

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding // 715db1b2c0
	FName InputActionName;//[Offset: 0x4, Size: 0x8] 0x715db47f00
	byte InputKeyEvent;//[Offset: 0xc, Size: 0x1] 0x715db47f80
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x715db48000

--------------------------------
Class: BlueprintInputDelegateBinding // 715db1b380
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715db48080
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715db48100
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715db48180

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object // 71a4a22680
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x715cb24ac0

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding // 715db1b200
	FName InputAxisName;//[Offset: 0x4, Size: 0x8] 0x715db47e00
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x715db47e80

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object // 71a4a22400
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x715cb24a20

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding // 715db1b140
	Key AxisKey;//[Offset: 0x8, Size: 0x18] 0x715db47d00
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8] 0x715db47d80

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object // 71a4a21f00
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x715cb248e0

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding // 715db1afc0
	InputChord InputChord;//[Offset: 0x8, Size: 0x20] 0x715db47b00
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1] 0x715db47b80
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8] 0x715db47c00

--------------------------------
Class: InputChord // 714906c340
	Key Key;//[Offset: 0x0, Size: 0x18] 0x715d7a5c00
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x715d7a5c80
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x715d7a5d00
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x715d7a5d80
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x715d7a5e00

--------------------------------
Class: InputSettings.Object // 71a4a21c80
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x28, Size: 0x10] 0x715cb24020
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cb7f180
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x715cb7f200
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x715cb7f280
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x715cb7f300
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x715cb7f380
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x715cb7f400
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1] 0x715cb7f480
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1] 0x715cb7f500
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x715cb7f580
	bool bEnableGestureRecognizer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x715cb7f600
	bool bUseAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x715cb7f680
	FString[] ExcludedAutocorrectOS;//[Offset: 0x40, Size: 0x10] 0x715cb240c0
	FString[] ExcludedAutocorrectCultures;//[Offset: 0x50, Size: 0x10] 0x715cb24160
	FString[] ExcludedAutocorrectDeviceModels;//[Offset: 0x60, Size: 0x10] 0x715cb24200
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x70, Size: 0x1] 0x715cb242a0
	enum DefaultViewportMouseLockMode;//[Offset: 0x71, Size: 0x1] 0x715cb24340
	float FOVScale;//[Offset: 0x74, Size: 0x4] 0x715cb7d880
	float DoubleClickTime;//[Offset: 0x78, Size: 0x4] 0x715cb7d900
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x80, Size: 0x10] 0x715cb243e0
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x90, Size: 0x10] 0x715cb24480
	InputActionSpeechMapping[] SpeechMappings;//[Offset: 0xa0, Size: 0x10] 0x715cb24520
	SoftObjectPath DefaultTouchInterface;//[Offset: 0xb0, Size: 0x18] 0x715cb7db00
	Key ConsoleKey;//[Offset: 0xc8, Size: 0x18] 0x715cb7db80
	Key[] ConsoleKeys;//[Offset: 0xe0, Size: 0x10] 0x715cb245c0
	void SaveKeyMappings();// 0x61a1cb0 0x715cb69700
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x61a1cc4 0x715cb697e0
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x61a2244 0x715cb698c0
	static InputSettings* GetInputSettings();// 0x61a27dc 0x715cb699a0
	void GetAxisNames(out FName[] AxisNames);// 0x61a1b30 0x715cb69a80
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0x61a1ebc 0x715cb69b60
	void GetActionNames(out FName[] ActionNames);// 0x61a1bf0 0x715cb69c40
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0x61a2448 0x715cb69d20
	void ForceRebuildKeymaps();// 0x61a1b1c 0x715cb69e00
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x61a204c 0x715cb69ee0
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x61a25d8 0x715cb69fc0

--------------------------------
Class: InputAxisConfigEntry // 715ce72bc0
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8] 0x715ce6be80
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10] 0x715ce6c100

--------------------------------
Class: InputAxisProperties // 715ce72b00
	float DeadZone;//[Offset: 0x0, Size: 0x4] 0x715ce6bf00
	float Sensitivity;//[Offset: 0x4, Size: 0x4] 0x715ce6bf80
	float Exponent;//[Offset: 0x8, Size: 0x4] 0x715ce6c000
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715ce6c080

--------------------------------
Class: InputActionKeyMapping // 715ce72c80
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x715ce6c180
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715ce6c200
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x715ce6c280
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x715ce6c300
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x715ce6c380
	Key Key;//[Offset: 0x10, Size: 0x18] 0x715ce6c400

--------------------------------
Class: InputAxisKeyMapping // 715ce72d40
	FName AxisName;//[Offset: 0x0, Size: 0x8] 0x715ce6c480
	float Scale;//[Offset: 0x8, Size: 0x4] 0x715ce6c500
	Key Key;//[Offset: 0x10, Size: 0x18] 0x715ce6c580

--------------------------------
Class: InputActionSpeechMapping // 715ce72e00
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x715ce6c600
	FName SpeechKeyword;//[Offset: 0x8, Size: 0x8] 0x715ce6a580

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object // 71a4a21a00
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x715cb23f80

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding // 715db1af00
	byte InputKeyEvent;//[Offset: 0x1, Size: 0x1] 0x715db47a00
	FName FunctionNameToBind;//[Offset: 0x4, Size: 0x8] 0x715db47a80

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object // 71a4a21780

--------------------------------
Class: Interface_AssetUserData.Interface.Object // 71a4a21500

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object // 71a4a21280

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object // 71a4a21000

--------------------------------
Class: Interface_PreviewMeshProvider.Interface.Object // 71a4a20d80

--------------------------------
Class: InterpFilter.Object // 71a4a20600
	FString Caption;//[Offset: 0x28, Size: 0x10] 0x715cb7ea80

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object // 71a4a20380

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object // 71a4a20100

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object // 71a4a2a100
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8] 0x715cb7fe00
	float CompressTolerance;//[Offset: 0x58, Size: 0x4] 0x715cb7fe80

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object // 71a4a29980

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object // 71a4a29700

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object // 71a4a29480
	float Duration;//[Offset: 0xec, Size: 0x4] 0x7148ca9c80
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x7148ca9d00
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1] 0x7148ca9d80
	enum TeleportType;//[Offset: 0xf2, Size: 0x1] 0x7148cd2900
	enum BehaviourType;//[Offset: 0xf3, Size: 0x1] 0x7148cd0060
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1] 0x7148ca9f00
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1] 0x7148ca9f80
	delegate OnInterpToReverse;//[Offset: 0xf8, Size: 0x10] 0x7148caa000
	delegate OnInterpToStop;//[Offset: 0x108, Size: 0x10] 0x7148caa080
	delegate OnWaitBeginDelegate;//[Offset: 0x118, Size: 0x10] 0x7148caa100
	delegate OnWaitEndDelegate;//[Offset: 0x128, Size: 0x10] 0x7148caa180
	delegate OnResetDelegate;//[Offset: 0x138, Size: 0x10] 0x7148caa200
	float MaxSimulationTimeStep;//[Offset: 0x148, Size: 0x4] 0x7148caa280
	int MaxSimulationIterations;//[Offset: 0x14c, Size: 0x4] 0x7148caa300
	InterpControlPoint[] ControlPoints;//[Offset: 0x150, Size: 0x10] 0x7148cd0100
	void StopSimulating(out const HitResult HitResult);// 0x61aba78 0x71490483c0
	void RestartMovement(float InitialDirection);// 0x61ab9d4 0x71490484a0
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x45c6aa0 0x7149048580
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x45c6aa0 0x7149048660
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x45c6aa0 0x7149048740
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x45c6aa0 0x7149048820
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x45c6aa0 0x7149048900
	void FinaliseControlPoints();// 0x61ab9c0 0x71490489e0

--------------------------------
Class: InterpControlPoint // 7149066b80
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0xc] 0x7148caa380
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7148caa400

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object // 71a484a880
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18] 0x715cfa8d80
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x715cfa8e00

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object // 71a4a29200
	FName SlotName;//[Offset: 0x8c, Size: 0x8] 0x715cb7fb00
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x98, Size: 0x10] 0x715cb26500
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x715cb7fc00

--------------------------------
Class: AnimControlTrackKey // 715db1d6c0
	float StartTime;//[Offset: 0x0, Size: 0x4] 0x715db4a380
	AnimSequence* AnimSeq;//[Offset: 0x8, Size: 0x8] 0x715db4a400
	float AnimStartOffset;//[Offset: 0x10, Size: 0x4] 0x715db4a480
	float AnimEndOffset;//[Offset: 0x14, Size: 0x4] 0x715db4a500
	float AnimPlayRate;//[Offset: 0x18, Size: 0x4] 0x715db48480
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x715db48500
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x715db48580

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object // 71a484b000
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18] 0x715cfa8f80
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x715cfa9000

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object // 71a4a28f80

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object // 71a4a28d00
	BoolTrackKey[] BoolTrack;//[Offset: 0x70, Size: 0x10] 0x715cb26460
	FName PropertyName;//[Offset: 0x80, Size: 0x8] 0x715cb7fa80

--------------------------------
Class: BoolTrackKey // 715db1d600
	float Time;//[Offset: 0x0, Size: 0x4] 0x715db4a280
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x715db4a300

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object // 71a4a28a80
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x715cb7f980

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object // 71a4a28800

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object // 71a4a28580
	DirectorTrackCut[] CutTrack;//[Offset: 0x70, Size: 0x10] 0x715cb263c0
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cb7f900

--------------------------------
Class: DirectorTrackCut // 715db1d540
	float Time;//[Offset: 0x0, Size: 0x4] 0x715db4a080
	float TransitionTime;//[Offset: 0x4, Size: 0x4] 0x715db4a100
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8] 0x715db4a180
	int ShotNumber;//[Offset: 0x10, Size: 0x4] 0x715db4a200

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object // 71a4a28300
	EventTrackKey[] EventTrack;//[Offset: 0x70, Size: 0x10] 0x715cb26320
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cb80f80
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x715cb81000
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x715cb81080
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x715cb7f800

--------------------------------
Class: EventTrackKey // 715db1d480
	float Time;//[Offset: 0x0, Size: 0x4] 0x715db49f80
	FName EventName;//[Offset: 0x4, Size: 0x8] 0x715db4a000

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object // 71a4a28080
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x715cb80d80
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x715cb80e00
	LinearColor FadeColor;//[Offset: 0x90, Size: 0x10] 0x715cb80e80

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object // 71a4a27e00
	class Object* AnimBlueprintClass;//[Offset: 0x90, Size: 0x8] 0x715cb261e0
	class AnimInstance* AnimClass;//[Offset: 0x98, Size: 0x8] 0x715cb26280
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x715cb80d00

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object // 71a4a27b80
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x715cb26140
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x715cb80c80

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object // 71a4a27900
	FName ParamName;//[Offset: 0x8c, Size: 0x8] 0x715cb80b80

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object // 71a4a27680
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x715cb80b00

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object // 71a4a27400
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x715cb80a80

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object // 71a4a27180

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object // 71a4a26c80
	FieldPathProperty InterpProperty;//[Offset: 0x28, Size: 0x20] 0x715cb80980
	Object* PropertyOuterObjectInst;//[Offset: 0x48, Size: 0x8] 0x715cb80a00

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object // 71a4a26f00
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715cb80900

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object // 71a4a26a00
	Color ResetColor;//[Offset: 0x58, Size: 0x4] 0x715cb80880

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object // 71a4a26780

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object // 71a4a26280
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x715cb80780

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object // 71a4a26000

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object // 71a4a25d80
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8] 0x715cb80680
	float ResetFloat;//[Offset: 0x30, Size: 0x4] 0x715cb80700

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object // 71a4a25b00
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x715cb25f60
	float[] ResetFloats;//[Offset: 0x38, Size: 0x10] 0x715cb26000
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x715cb260a0
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x715cb80600

--------------------------------
Class: PrimitiveMaterialRef // 715db19a00
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x8] 0x715db42f80
	DecalComponent* Decal;//[Offset: 0x8, Size: 0x8] 0x715db43000
	int ElementIndex;//[Offset: 0x10, Size: 0x4] 0x715db43080

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object // 71a4a25880
	float ResetFloat;//[Offset: 0x28, Size: 0x4] 0x715cb80400

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object // 71a4a25600
	float ResetFloat;//[Offset: 0x58, Size: 0x4] 0x715cb80380

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object // 71a4a25380
	LinearColor ResetColor;//[Offset: 0x58, Size: 0x10] 0x715cb80300

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object // 71a4a2f380
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x715cb80180

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object // 71a4a2f100
	float OldTimeDilation;//[Offset: 0x28, Size: 0x4] 0x715cb80100

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object // 71a4a2ee80
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x715cb82100
	AudioComponent* PlayAudioComp;//[Offset: 0x30, Size: 0x8] 0x715cb80080

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object // 71a4a2ec00
	byte Action;//[Offset: 0x28, Size: 0x1] 0x715cb81f80
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x715cb82000
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x715cb82080

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object // 71a4a2e980
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x715cb25d80
	Vector[] ResetVectors;//[Offset: 0x38, Size: 0x10] 0x715cb25e20
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x715cb25ec0
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x715cb81f00

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object // 71a4a2ce00
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x715cb25b00
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x715cb82d00

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object // 71a4a2e700
	Vector ResetVector;//[Offset: 0x58, Size: 0xc] 0x715cb81d00

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object // 71a4a2e480
	byte Action;//[Offset: 0x28, Size: 0x1] 0x715cb81c00
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x715cb81c80

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object // 71a4a2e200
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x70, Size: 0x18] 0x715cb81b00
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x715cb81b80

--------------------------------
Class: InterpCurveLinearColor // 717dfc8740
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0x10] 0x7172ba6320
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x717df8a780
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x717df8a800

--------------------------------
Class: InterpCurvePointLinearColor // 717dfc8800
	float InVal;//[Offset: 0x0, Size: 0x4] 0x717df8a880
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10] 0x717df8a900
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10] 0x717df8a980
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10] 0x717df8aa00
	byte InterpMode;//[Offset: 0x34, Size: 0x1] 0x717df8aa80

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object // 71a4a2df80
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x715cb81a80

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object // 71a4a2da80
	byte MoveAxis;//[Offset: 0x8c, Size: 0x1] 0x715cb81300
	InterpLookupTrack LookupTrack;//[Offset: 0x90, Size: 0x10] 0x715cb81380

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object // 71a4a2d800
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x70, Size: 0x10] 0x715cb25ce0

--------------------------------
Class: ParticleReplayTrackKey // 715db1d240
	float Time;//[Offset: 0x0, Size: 0x4] 0x715db49c80
	float Duration;//[Offset: 0x4, Size: 0x4] 0x715db49d00
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4] 0x715db49d80

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object // 71a4a2d580

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object // 71a4a2d300
	SoundTrackKey[] Sounds;//[Offset: 0x90, Size: 0x10] 0x715cb25c40
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x715cb83100
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x715cb83180
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x715cb81100
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x715cb81180
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1] 0x715cb81200

--------------------------------
Class: SoundTrackKey // 715db1d180
	float Time;//[Offset: 0x0, Size: 0x4] 0x715db49a80
	float Volume;//[Offset: 0x4, Size: 0x4] 0x715db49b00
	float Pitch;//[Offset: 0x8, Size: 0x4] 0x715db49b80
	SoundBase* sound;//[Offset: 0x10, Size: 0x8] 0x715db49c00

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object // 71a4a2d080
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x70, Size: 0x10] 0x715cb25ba0
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cb82e00
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x715cb82e80
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x715cb82f00
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x715cb82f80
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1] 0x715cb83000

--------------------------------
Class: ToggleTrackKey // 715db1d0c0
	float Time;//[Offset: 0x0, Size: 0x4] 0x715db49980
	byte ToggleAction;//[Offset: 0x4, Size: 0x1] 0x715db49a00

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object // 71a4a2cb80
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x715cb82c00

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object // 71a4a2c900
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x70, Size: 0x10] 0x715cb25a60
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cb82a80
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x715cb82b00
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x715cb82b80

--------------------------------
Class: VisibilityTrackKey // 715db1d000
	float Time;//[Offset: 0x0, Size: 0x4] 0x715db49800
	byte Action;//[Offset: 0x4, Size: 0x1] 0x715db49880
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1] 0x715db49900

--------------------------------
Class: IntSerialization.Object // 71a4a2c680
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2] 0x715cb82600
	uint32 UnsignedInt32Variable;//[Offset: 0x2c, Size: 0x4] 0x715cb82680
	uint64 UnsignedInt64Variable;//[Offset: 0x30, Size: 0x8] 0x715cb82700
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1] 0x715cb82780
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2] 0x715cb82800
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8] 0x715cb82880
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1] 0x715cb82900
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4] 0x715cb82980

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object // 71a494ab00

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object // 71a4a2c400
	static void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0x61b84b8 0x715cb6bf40
	static void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0x61b6a34 0x715cb6c020
	static void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0x61b8368 0x715cb6c100
	static void Array_Shuffle(out const int[] TargetArray);// 0x61b82d4 0x715cb6c1e0
	static void Array_Set(out const int[] TargetArray, int Index, out const int Item, bool bSizeToFit);// 0x61b80a8 0x715cb6c2c0
	static void Array_Resize(out const int[] TargetArray, int Size);// 0x61b7f98 0x715cb6c3a0
	static bool Array_RemoveItem(out const int[] TargetArray, out const int Item);// 0x61b7ddc 0x715cb6c480
	static void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0x61b7ccc 0x715cb6c560
	static int Array_Length(out const int[] TargetArray);// 0x61b7c2c 0x715cb6c640
	static int Array_LastIndex(out const int[] TargetArray);// 0x61b7b8c 0x715cb6c720
	static bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0x61b7a68 0x715cb6c800
	static void Array_Insert(out const int[] TargetArray, out const int NewItem, int Index);// 0x61b7888 0x715cb6c8e0
	static bool Array_Identical(out const int[] ArrayA, out const int[] ArrayB);// 0x61b7778 0x715cb6c9c0
	static void Array_Get(out const int[] TargetArray, int Index, out int Item);// 0x61b7568 0x715cb690e0
	static int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0x61b73b0 0x715cb691c0
	static bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0x61b71f0 0x715cb692a0
	static void Array_Clear(out const int[] TargetArray);// 0x61b715c 0x715cb69380
	static void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0x61b705c 0x715cb69460
	static int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0x61b6eb0 0x715cb69540
	static int Array_Add(out const int[] TargetArray, out const int NewItem);// 0x61b6d04 0x715cb69620

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object // 71a4a2c180
	static void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool success);// 0x61bd588 0x715cb6b920
	static bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0x61bd968 0x715cb6ba00
	static Guid NewGuid();// 0x61bd7d8 0x715cb6bae0
	static bool IsValid_Guid(out const Guid InGuid);// 0x61bd8b0 0x715cb6bbc0
	static void Invalidate_Guid(out Guid InGuid);// 0x61bd80c 0x715cb6bca0
	static bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0x61bda70 0x715cb6bd80
	static FString Conv_GuidToString(out const Guid InGuid);// 0x61bd6d8 0x715cb6be60

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object // 71a4a2bf00
	static bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0x61be2e4 0x715cb6cc60
	static bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0x61bebf4 0x715cb6cd40
	static float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0x61be858 0x715cb6ce20
	static int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0x61be6fc 0x715cb6cf00
	static int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0x61be444 0x715cb6cfe0
	static Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0x61bf138 0x715cb6d0c0
	static int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0x61be5a0 0x715cb6d1a0
	static Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0x61befdc 0x715cb6d280
	static enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0x61be188 0x715cb6d360
	static Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0x61be02c 0x715cb6d440
	static Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0x61be9b4 0x715cb6d520
	static Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0x61bee80 0x715cb6d600
	static bool Key_IsVectorAxis(out const Key Key);// 0x61c0b04 0x715cb6d6e0
	static bool Key_IsValid(out const Key Key);// 0x61c09f0 0x715cb6d7c0
	static bool Key_IsMouseButton(out const Key Key);// 0x61c0e40 0x715cb6d8a0
	static bool Key_IsModifierKey(out const Key Key);// 0x61c1068 0x715cb6d980
	static bool Key_IsKeyboardKey(out const Key Key);// 0x61c0d2c 0x715cb6da60
	static bool Key_IsGamepadKey(out const Key Key);// 0x61c0f54 0x715cb6db40
	static bool Key_IsFloatAxis(out const Key Key);// 0x61c0c18 0x715cb6dc20
	static enum Key_GetNavigationDirectionFromKey(out const KeyEvent InKeyEvent);// 0x61c0668 0x715cb6dd00
	static enum Key_GetNavigationDirectionFromAnalog(out const AnalogInputEvent InAnalogEvent);// 0x61c0524 0x715cb6dde0
	static enum Key_GetNavigationActionFromKey(out const KeyEvent InKeyEvent);// 0x61c07a4 0x715cb6dec0
	static enum Key_GetNavigationAction(out const Key InKey);// 0x61c08e0 0x715cb6dfa0
	static FText Key_GetDisplayName(out const Key Key);// 0x61c03a8 0x715cb6e080
	static bool InputEvent_IsShiftDown(out const InputEvent Input);// 0x61c0200 0x715cb6e160
	static bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0x61c0058 0x715cb6e240
	static bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0x61bfddc 0x715cb6e320
	static bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0x61bf8e4 0x715cb6e400
	static bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0x61bfb60 0x715cb6e4e0
	static bool InputEvent_IsRepeat(out const InputEvent Input);// 0x61c02d4 0x715cb6e5c0
	static bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0x61c012c 0x715cb6e6a0
	static bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0x61bfeb0 0x715cb6adc0
	static bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0x61bf9b8 0x715cb6aea0
	static bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0x61bfc34 0x715cb6af80
	static bool InputEvent_IsControlDown(out const InputEvent Input);// 0x61bff84 0x715cb6b060
	static bool InputEvent_IsCommandDown(out const InputEvent Input);// 0x61bfa8c 0x715cb6b140
	static bool InputEvent_IsAltDown(out const InputEvent Input);// 0x61bfd08 0x715cb6b220
	static FText InputChord_GetDisplayName(out const InputChord Key);// 0x61bf734 0x715cb6b300
	static int GetUserIndex(out const KeyEvent Input);// 0x61bf3d8 0x715cb6b3e0
	static Key GetKey(out const KeyEvent Input);// 0x61bf514 0x715cb6b4c0
	static float GetAnalogValue(out const AnalogInputEvent Input);// 0x61bf294 0x715cb6b5a0
	static bool EqualEqual_KeyKey(Key A, Key B);// 0x61c1498 0x715cb6b680
	static bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0x61c117c 0x715cb6b760
	static void CalibrateTilt();// 0x61c1740 0x715cb6b840

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object // 71a4a2bc80
	static bool SetCurrentLocale(FString Culture, const bool SaveToConfig);// 0x61c3274 0x715cb6f580
	static bool SetCurrentLanguageAndLocale(FString Culture, const bool SaveToConfig);// 0x61c30c4 0x715cb6f660
	static bool SetCurrentLanguage(FString Culture, const bool SaveToConfig);// 0x61c3424 0x715cb6f740
	static bool SetCurrentCulture(FString Culture, const bool SaveToConfig);// 0x61c35d4 0x715cb6f820
	static bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString Culture, const bool SaveToConfig);// 0x61c2f80 0x715cb6f900
	static FString GetSuitableCulture(out const FString[] AvailableCultures, FString CultureToMatch, FString FallbackCulture);// 0x61c2898 0x715cb6f9e0
	static FString GetNativeCulture(const enum TextCategory);// 0x61c2cc0 0x715cb6fac0
	static FString[] GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);// 0x61c2a68 0x715cb6fba0
	static FString GetCurrentLocale();// 0x61c31c4 0x715cb6fc80
	static FString GetCurrentLanguage();// 0x61c3374 0x715cb6fd60
	static FString GetCurrentCulture();// 0x61c3524 0x715cb6fe40
	static FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0x61c2e90 0x715cb6ff20
	static FString GetCultureDisplayName(FString Culture, const bool Localized);// 0x61c2758 0x715cb6caa0
	static void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0x61c2db0 0x715cb6cb80

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object // 71a4a2ba00
	static void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0x61c4134 0x715cb6f120
	static void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0x61c429c 0x715cb6f200
	static LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x61c3ee0 0x715cb6f2e0
	static float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x61c400c 0x715cb6f3c0
	static MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent, FName OptionalName);// 0x61c3db8 0x715cb6f4a0

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object // 71a4a2b780
	static int Xor_IntInt(int A, int B);// 0x61ed1d8 0x715cbe4f40
	static int64 Xor_Int64Int64(int64 A, int64 B);// 0x61ebd54 0x715cbe5020
	static Vector WeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float Weight);// 0x61c58a4 0x715cbe5100
	static Rotator WeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float Weight);// 0x61c5778 0x715cbe51e0
	static float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);// 0x61c59d0 0x715cbe52c0
	static float VSizeXYSquared(Vector A);// 0x61e0098 0x715cbe53a0
	static float VSizeXY(Vector A);// 0x61e0140 0x715cbe5480
	static float VSizeSquared(Vector A);// 0x61e01ec 0x715cbe5560
	static float VSize2DSquared(Vector2D A);// 0x61e4168 0x715cbe5640
	static float VSize2D(Vector2D A);// 0x61e4210 0x715cbe1d60
	static float VSize(Vector A);// 0x61e02a0 0x715cbe1e40
	static Vector VLerp(Vector A, Vector B, float Alpha);// 0x61df4fc 0x715cbe1f20
	static Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x61deffc 0x715cbe2000
	static Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x61df180 0x715cbe20e0
	static Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x61deda0 0x715cbe21c0
	static Vector Vector_Zero();// 0x61e413c 0x715cbe22a0
	static Vector Vector_Up();// 0x61e408c 0x715cbe2380
	static void Vector_UnwindEuler(out Vector A);// 0x61e1e48 0x715cbe2460
	static Vector2D Vector_UnitCartesianToSpherical(Vector A);// 0x61e0cf0 0x715cbe2540
	static Vector Vector_ToRadians(Vector A);// 0x61e0ea0 0x715cbe2620
	static Vector Vector_ToDegrees(Vector A);// 0x61e0de4 0x715cbe2700
	static Vector Vector_SnappedToGrid(Vector InVect, float InGridSize);// 0x61de864 0x715cbe27e0
	static void Vector_Set(out Vector A, float X, float Y, float Z);// 0x61e3b4c 0x715cbe28c0
	static Vector Vector_Right();// 0x61e4034 0x715cbe29a0
	static Vector Vector_Reciprocal(out const Vector A);// 0x61decb4 0x715cbe2a80
	static Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal);// 0x61de37c 0x715cbe2b60
	static Vector Vector_One();// 0x61e4110 0x715cbe2c40
	static Vector Vector_NormalUnsafe(out const Vector A);// 0x61df760 0x715cbe2d20
	static void Vector_Normalize(out Vector A, float Tolerance);// 0x61df63c 0x715cbe2e00
	static Vector Vector_Normal2D(Vector A, float Tolerance);// 0x61df844 0x715cbe2ee0
	static Vector Vector_MirrorByPlane(Vector A, out const Plane InPlane);// 0x61de984 0x715cbe2fc0
	static Vector Vector_Left();// 0x61e4008 0x715cbe30a0
	static bool Vector_IsZero(out const Vector A);// 0x61dfea0 0x715cbe3180
	static bool Vector_IsUnit(out const Vector A, float SquaredLenthTolerance);// 0x61dfb8c 0x715cbe3260
	static bool Vector_IsUniform(out const Vector A, float Tolerance);// 0x61dfca0 0x715cbe3340
	static bool Vector_IsNormal(out const Vector A);// 0x61dfaa8 0x715cbe3420
	static bool Vector_IsNearlyZero(out const Vector A, float Tolerance);// 0x61dff78 0x715cbe3500
	static bool Vector_IsNAN(out const Vector A);// 0x61dfdbc 0x715cbe35e0
	static float Vector_HeadingAngle(Vector A);// 0x61e10d0 0x715cbe36c0
	static Vector Vector_GetSignVector(Vector A);// 0x61e129c 0x715cbe37a0
	static Vector Vector_GetProjection(Vector A);// 0x61e11e8 0x715cbe3880
	static float Vector_GetAbsMin(Vector A);// 0x61e15f4 0x715cbe3960
	static float Vector_GetAbsMax(Vector A);// 0x61e16b0 0x715cbe0080
	static Vector Vector_GetAbs(Vector A);// 0x61e1548 0x715cbe0160
	static Vector Vector_Forward();// 0x61e40e4 0x715cbe0240
	static Vector Vector_Down();// 0x61e4060 0x715cbe0320
	static float Vector_DistanceSquared(Vector v1, Vector v2);// 0x61e0534 0x715cbe0400
	static float Vector_Distance2DSquared(Vector v1, Vector v2);// 0x61e0358 0x715cbe04e0
	static float Vector_Distance2D(Vector v1, Vector v2);// 0x61e0444 0x715cbe05c0
	static float Vector_Distance(Vector v1, Vector v2);// 0x61e0634 0x715cbe06a0
	static float Vector_CosineAngle2D(Vector A, Vector B);// 0x61e0f5c 0x715cbe0780
	static Vector Vector_ComponentMin(Vector A, Vector B);// 0x61e1454 0x715cbe0860
	static Vector Vector_ComponentMax(Vector A, Vector B);// 0x61e1360 0x715cbe0940
	static Vector Vector_ClampSizeMax2D(Vector A, float Max);// 0x61e18cc 0x715cbe0a20
	static Vector Vector_ClampSizeMax(Vector A, float Max);// 0x61e1a00 0x715cbe0b00
	static Vector Vector_ClampSize2D(Vector A, float Min, float Max);// 0x61e1b44 0x715cbe0be0
	static Vector Vector_BoundedToCube(Vector InVect, float InRadius);// 0x61de74c 0x715cbe0cc0
	static Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax);// 0x61de480 0x715cbe0da0
	static Vector Vector_Backward();// 0x61e40b8 0x715cbe0e80
	static void Vector_Assign(out Vector A, out const Vector InVector);// 0x61e3cb8 0x715cbe0f60
	static void Vector_AddBounded(out Vector A, Vector InAddVect, float InRadius);// 0x61de5d4 0x715cbe1040
	static Vector4 Vector4_Zero();// 0x61dd2e8 0x715cbe1120
	static float Vector4_SizeSquared3(out const Vector4 A);// 0x61db524 0x715cbe1200
	static float Vector4_SizeSquared(out const Vector4 A);// 0x61db6d0 0x715cbe12e0
	static float Vector4_Size3(out const Vector4 A);// 0x61db5f8 0x715cbe13c0
	static float Vector4_Size(out const Vector4 A);// 0x61db7ac 0x715cbe14a0
	static void Vector4_Set(out Vector4 A, float X, float Y, float Z, float W);// 0x61dbf58 0x715cbe1580
	static Vector4 Vector4_NormalUnsafe3(out const Vector4 A);// 0x61db0d4 0x715cbe1660
	static void Vector4_Normalize3(out Vector4 A, float Tolerance);// 0x61daf8c 0x715cbe1740
	static Vector4 Vector4_Normal3(out const Vector4 A, float Tolerance);// 0x61db1c8 0x715cbe1820
	static Vector4 Vector4_Negated(out const Vector4 A);// 0x61dc21c 0x715cbe1900
	static Vector4 Vector4_MirrorByVector3(out const Vector4 Direction, out const Vector4 SurfaceNormal);// 0x61dae50 0x715cbe19e0
	static bool Vector4_IsZero(out const Vector4 A);// 0x61db88c 0x715cbe1ac0
	static bool Vector4_IsUnit3(out const Vector4 A, float SquaredLenthTolerance);// 0x61db404 0x715cbe1ba0
	static bool Vector4_IsNormal3(out const Vector4 A);// 0x61db314 0x715cbe1c80
	static bool Vector4_IsNearlyZero3(out const Vector4 A, float Tolerance);// 0x61db97c 0x715cbce780
	static bool Vector4_IsNAN(out const Vector4 A);// 0x61dbaa8 0x715cbce860
	static float Vector4_DotProduct3(out const Vector4 A, out const Vector4 B);// 0x61dbba8 0x715cbce940
	static float Vector4_DotProduct(out const Vector4 A, out const Vector4 B);// 0x61dbcd8 0x715cbcea20
	static Vector4 Vector4_CrossProduct3(out const Vector4 A, out const Vector4 B);// 0x61dbe10 0x715cbceb00
	static void Vector4_Assign(out Vector4 A, out const Vector4 InVector);// 0x61dc110 0x715cbcebe0
	static Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x61e498c 0x715cbcecc0
	static Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x61e4af4 0x715cbceda0
	static Vector2D Vector2D_Zero();// 0x61e6938 0x715cbcee80
	static Vector2D Vector2D_Unit45Deg();// 0x61e695c 0x715cbcef60
	static Vector2D Vector2D_One();// 0x61e6980 0x715cbcf040
	static Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x61df304 0x715cbcf120
	static DateTime UtcNow();// 0x61ce9d4 0x715cbcf200
	static Vector4 TransformVector4(out const Matrix Matrix, out const Vector4 Vec4);// 0x61dad28 0x715cbcf2e0
	static Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0x61c916c 0x715cbcf3c0
	static Vector TransformLocation(out const Transform T, Vector Location);// 0x61c9420 0x715cbcf4a0
	static Vector TransformDirection(out const Transform T, Vector Direction);// 0x61c928c 0x715cbcf580
	static float Transform_Determinant(out const Transform Transform);// 0x61c8118 0x715cbcf660
	static Vector2D ToSign2D(Vector2D A);// 0x61e42bc 0x715cbcf740
	static Vector2D ToRounded2D(Vector2D A);// 0x61e4370 0x715cbcf820
	static void ToDirectionAndLength2D(Vector2D A, out Vector2D OutDir, out float OutLength);// 0x61e4418 0x715cbcf900
	static DateTime Today();// 0x61cea08 0x715cbcf9e0
	static Transform TLerp(out const Transform A, out const Transform B, float Alpha, byte InterpMode);// 0x61c8648 0x715cbcfac0
	static Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0x61c81f4 0x715cbcfba0
	static Timespan TimespanZeroValue();// 0x61ce6bc 0x715cbcfc80
	static float TimespanRatio(Timespan A, Timespan B);// 0x61cc9b4 0x715cbcfd60
	static Timespan TimespanMinValue();// 0x61ce6d4 0x715cbcfe40
	static Timespan TimespanMaxValue();// 0x61ce6f0 0x715cbcff20
	static bool TimespanFromString(FString TimespanString, out Timespan Result);// 0x61cc85c 0x715cbccaa0
	static Transform TEase(out const Transform A, out const Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x61c83d8 0x715cbccb80
	static float Tan(float A);// 0x61ea200 0x715cbccc60
	static Vector Subtract_VectorVector(Vector A, Vector B);// 0x61e3174 0x715cbccd40
	static Vector Subtract_VectorInt(Vector A, int B);// 0x61e2f88 0x715cbcce20
	static Vector Subtract_VectorFloat(Vector A, float B);// 0x61e3080 0x715cbccf00
	static Vector4 Subtract_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x61dcb04 0x715cbccfe0
	static Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0x61e62f0 0x715cbcd0c0
	static Vector2D Subtract_Vector2DFloat(Vector2D A, float B);// 0x61e6208 0x715cbcd1a0
	static Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0x61cdd44 0x715cbcd280
	static Quat Subtract_QuatQuat(out const Quat A, out const Quat B);// 0x61d4ce0 0x715cbcd360
	static LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x61d0860 0x715cbcd440
	static IntPoint Subtract_IntPointIntPoint(IntPoint A, IntPoint B);// 0x61e704c 0x715cbcd520
	static IntPoint Subtract_IntPointInt(IntPoint A, int B);// 0x61e6f64 0x715cbcd600
	static int Subtract_IntInt(int A, int B);// 0x61edad8 0x715cbcd6e0
	static int64 Subtract_Int64Int64(int64 A, int64 B);// 0x61ec654 0x715cbcd7c0
	static float Subtract_FloatFloat(float A, float B);// 0x61eb04c 0x715cbcd8a0
	static DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0x61cfe24 0x715cbcd980
	static Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0x61cfc74 0x715cbcda60
	static byte Subtract_ByteByte(byte A, byte B);// 0x61ee6d8 0x715cbcdb40
	static float Square(float A);// 0x61e9cf0 0x715cbcdc20
	static float Sqrt(float A);// 0x61e9d94 0x715cbcdd00
	static Vector Spherical2DToUnitCartesian(Vector2D A);// 0x61e45a8 0x715cbcdde0
	static float Sin(float A);// 0x61ea4b8 0x715cbcdec0
	static int64 SignOfInteger64(int64 A);// 0x61ebb20 0x715cbcdfa0
	static int SignOfInteger(int A);// 0x61ecfa4 0x715cbce080
	static float SignOfFloat(float A);// 0x61e7d44 0x715cbce160
	static void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0x61c6de8 0x715cbce240
	static void Set2D(out Vector2D A, float X, float Y);// 0x61e5810 0x715cbce320
	static Vector SelectVector(Vector A, Vector B, bool bPickA);// 0x61cb080 0x715cbce400
	static Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0x61cac6c 0x715cbce4e0
	static FString SelectString(FString A, FString B, bool bPickA);// 0x61cb438 0x715cbce5c0
	static Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0x61caf30 0x715cbce6a0
	static Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0x61cab38 0x715cbcadc0
	static int SelectInt(int A, int B, bool bPickA);// 0x61cb304 0x715cbcaea0
	static float SelectFloat(float A, float B, bool bPickA);// 0x61cb1d0 0x715cbcaf80
	static LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0x61cae08 0x715cbcb060
	static class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0x61caa04 0x715cbcb140
	static void SeedRandomStream(out RandomStream Stream);// 0x61c6ed4 0x715cbcb220
	static float SafeDivide(float A, float B);// 0x61e8fa0 0x715cbcb300
	static int64 Round64(float A);// 0x61e8124 0x715cbcb3e0
	static int Round(float A);// 0x61e83c0 0x715cbcb4c0
	static Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0x61e35ec 0x715cbcb5a0
	static Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0x61e1fe8 0x715cbcb680
	static Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath);// 0x61d8ee0 0x715cbcb760
	static Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x61c7a54 0x715cbcb840
	static Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x61c7bd8 0x715cbcb920
	static void RGBToHSV_Vector(LinearColor RGB, out LinearColor HSV);// 0x61d1ac8 0x715cbcba00
	static void RGBToHSV(LinearColor InColor, out float H, out float S, out float V, out float A);// 0x61d1bc0 0x715cbcbae0
	static LinearColor RGBLinearToHSV(LinearColor RGB);// 0x61d1a1c 0x715cbcbbc0
	static void ResetVectorSpringState(out VectorSpringState SpringState);// 0x61c76b0 0x715cbcbca0
	static void ResetRandomStream(out const RandomStream Stream);// 0x61c6f78 0x715cbcbd80
	static void ResetFloatSpringState(out FloatSpringState SpringState);// 0x61c7770 0x715cbcbe60
	static Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0x61d8c98 0x715cbcbf40
	static Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0x61c69b4 0x715cbcc020
	static Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0x61dd440 0x715cbcc100
	static Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0x61c6814 0x715cbcc1e0
	static Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0x61dd300 0x715cbcc2c0
	static Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0x61c6c9c 0x715cbcc3a0
	static Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0x61dd674 0x715cbcc480
	static Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0x61c6b40 0x715cbcc560
	static Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0x61dd56c 0x715cbcc640
	static Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0x61c7118 0x715cbcc720
	static Vector RandomUnitVector();// 0x61dd884 0x715cbcc800
	static Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0x61c701c 0x715cbcc8e0
	static Rotator RandomRotator(bool bRoll);// 0x61d9058 0x715cbcc9c0
	static Vector RandomPointInBoundingBox(Vector Origin, Vector BoxExtent);// 0x61dd76c 0x715cbc90e0
	static int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0x61c7478 0x715cbc91c0
	static int RandomIntegerInRange(int Min, int Max);// 0x61ecda4 0x715cbc92a0
	static int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0x61c75b4 0x715cbc9380
	static int64 RandomInteger64InRange(int64 Min, int64 Max);// 0x61eb918 0x715cbc9460
	static int64 RandomInteger64(int64 Max);// 0x61eba44 0x715cbc9540
	static int RandomInteger(int Max);// 0x61ececc 0x715cbc9620
	static float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0x61c71d0 0x715cbc9700
	static float RandomFloatInRange(float Min, float Max);// 0x61e9ba4 0x715cbc97e0
	static float RandomFloatFromStream(out const RandomStream Stream);// 0x61c730c 0x715cbc98c0
	static float RandomFloat();// 0x61e9cac 0x715cbc99a0
	static bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0x61ef300 0x715cbc9a80
	static bool RandomBoolWithWeight(float Weight);// 0x61ef400 0x715cbc9b60
	static bool RandomBoolFromStream(out const RandomStream Stream);// 0x61c73c0 0x715cbc9c40
	static bool RandomBool();// 0x61ef4a8 0x715cbc9d20
	static float RadiansToDegrees(float A);// 0x61e9a04 0x715cbc9e00
	static Vector Quat_VectorUp(out const Quat Q);// 0x61d3b70 0x715cbc9ee0
	static Vector Quat_VectorRight(out const Quat Q);// 0x61d3ca0 0x715cbc9fc0
	static Vector Quat_VectorForward(out const Quat Q);// 0x61d3dd0 0x715cbca0a0
	static Vector Quat_UnrotateVector(out const Quat Q, out const Vector V);// 0x61d2dc0 0x715cbca180
	static float Quat_SizeSquared(out const Quat Q);// 0x61d30c0 0x715cbca260
	static float Quat_Size(out const Quat Q);// 0x61d3190 0x715cbca340
	static void Quat_SetFromEuler(out Quat Q, out const Vector Euler);// 0x61d33cc 0x715cbca420
	static void Quat_SetComponents(out Quat Q, float X, float Y, float Z, float W);// 0x61d34c4 0x715cbca500
	static Rotator Quat_Rotator(out const Quat Q);// 0x61d3264 0x715cbca5e0
	static Vector Quat_RotateVector(out const Quat Q, out const Vector V);// 0x61d2f44 0x715cbca6c0
	static Quat Quat_Normalized(out const Quat Q, float Tolerance);// 0x61d38f0 0x715cbca7a0
	static void Quat_Normalize(out Quat Q, float Tolerance);// 0x61d3a1c 0x715cbca880
	static Quat Quat_MakeFromEuler(out const Vector Euler);// 0x61d3318 0x715cbca960
	static Quat Quat_Log(out const Quat Q);// 0x61d3670 0x715cbcaa40
	static bool Quat_IsNormalized(out const Quat Q);// 0x61d490c 0x715cbcab20
	static bool Quat_IsNonFinite(out const Quat Q);// 0x61d4724 0x715cbcac00
	static bool Quat_IsIdentity(out const Quat Q, float Tolerance);// 0x61d49f8 0x715cbcace0
	static bool Quat_IsFinite(out const Quat Q);// 0x61d4818 0x715cbc7400
	static Quat Quat_Inversed(out const Quat Q);// 0x61d3724 0x715cbc74e0
	static Quat Quat_Identity();// 0x61d52c0 0x715cbc75c0
	static Vector Quat_GetRotationAxis(out const Quat Q);// 0x61d37ec 0x715cbc76a0
	static Vector Quat_GetAxisZ(out const Quat Q);// 0x61d3efc 0x715cbc7780
	static Vector Quat_GetAxisY(out const Quat Q);// 0x61d402c 0x715cbc7860
	static Vector Quat_GetAxisX(out const Quat Q);// 0x61d415c 0x715cbc7940
	static float Quat_GetAngle(out const Quat Q);// 0x61d4288 0x715cbc7a20
	static Quat Quat_Exp(out const Quat Q);// 0x61d4354 0x715cbc7b00
	static Vector Quat_Euler(out const Quat Q);// 0x61d4408 0x715cbc7be0
	static void Quat_EnforceShortestArcWith(out Quat A, out const Quat B);// 0x61d44bc 0x715cbc7cc0
	static float Quat_AngularDistance(out const Quat A, out const Quat B);// 0x61d45ec 0x715cbc7da0
	static Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0x61de23c 0x715cbc7e80
	static Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0x61ddfd0 0x715cbc7f60
	static Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0x61de0e0 0x715cbc8040
	static bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0x61c6390 0x715cbc8120
	static float PerlinNoise1D(const float Value);// 0x61c6770 0x715cbc8200
	static int Percent_IntInt(int A, int B);// 0x61edca0 0x715cbc82e0
	static float Percent_FloatFloat(float A, float B);// 0x61ef7e0 0x715cbc83c0
	static byte Percent_ByteByte(byte A, byte B);// 0x61ee8a8 0x715cbc84a0
	static int Or_IntInt(int A, int B);// 0x61ed0f4 0x715cbc8580
	static int64 Or_Int64Int64(int64 A, int64 B);// 0x61ebc70 0x715cbc8660
	static DateTime Now();// 0x61cea6c 0x715cbc8740
	static bool NotEqualExactly_VectorVector(Vector A, Vector B);// 0x61e2560 0x715cbc8820
	static bool NotEqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x61dc484 0x715cbc8900
	static bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x61e5b28 0x715cbc89e0
	static bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x61e240c 0x715cbc8ac0
	static bool NotEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x61dc2dc 0x715cbc8ba0
	static bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x61e59e8 0x715cbc8c80
	static bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0x61cd9ac 0x715cbc8d60
	static bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x61d99bc 0x715cbc8e40
	static bool NotEqual_QuatQuat(out const Quat A, out const Quat B, float ErrorTolerance);// 0x61d4ee0 0x715cbc8f20
	static bool NotEqual_ObjectObject(Object* A, Object* B);// 0x61ca834 0x715cbc9000
	static bool NotEqual_NameName(FName A, FName B);// 0x61ca3ac 0x715cbc5720
	static bool NotEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x61d81e8 0x715cbc5800
	static bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x61d0a10 0x715cbc58e0
	static bool NotEqual_IntPointIntPoint(IntPoint A, IntPoint B);// 0x61e69a4 0x715cbc59c0
	static bool NotEqual_IntInt(int A, int B);// 0x61ed568 0x715cbc5aa0
	static bool NotEqual_Int64Int64(int64 A, int64 B);// 0x61ec0e4 0x715cbc5b80
	static bool NotEqual_FloatFloat(float A, float B);// 0x61ea9ac 0x715cbc5c60
	static bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x61cfabc 0x715cbc5d40
	static bool NotEqual_ClassClass(class Object A, class Object B);// 0x61ca664 0x715cbc5e20
	static bool NotEqual_ByteByte(byte A, byte B);// 0x61edf78 0x715cbc5f00
	static bool NotEqual_BoolBool(bool A, bool B);// 0x61ef060 0x715cbc5fe0
	static bool Not_PreBool(bool A);// 0x61ef258 0x715cbc60c0
	static int64 Not_Int64(int64 A);// 0x61ebbcc 0x715cbc61a0
	static int Not_Int(int A);// 0x61ed050 0x715cbc6280
	static Vector2D NormalSafe2D(Vector2D A, float Tolerance);// 0x61e487c 0x715cbc6360
	static float NormalizeToRange(float Value, float RangeMin, float RangeMax);// 0x61e7c1c 0x715cbc6440
	static Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0x61d8bb0 0x715cbc6520
	static float NormalizeAxis(float Angle);// 0x61d8a68 0x715cbc6600
	static void Normalize2D(out Vector2D A, float Tolerance);// 0x61e4684 0x715cbc66e0
	static Vector2D Normal2D(Vector2D A);// 0x61e47a4 0x715cbc67c0
	static Vector Normal(Vector A, float Tolerance);// 0x61df978 0x715cbc68a0
	static Vector NegateVector(Vector A);// 0x61e28bc 0x715cbc6980
	static Rotator NegateRotator(Rotator A);// 0x61d963c 0x715cbc6a60
	static Vector2D Negated2D(out const Vector2D A);// 0x61e5934 0x715cbc6b40
	static bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0x61c9d00 0x715cbc6c20
	static bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);// 0x61eaa94 0x715cbc6d00
	static float MultiplyMultiply_FloatFloat(float Base, float Exp);// 0x61eb488 0x715cbc6de0
	static float MultiplyByPi(float Value);// 0x61e7814 0x715cbc6ec0
	static Vector Multiply_VectorVector(Vector A, Vector B);// 0x61e2e9c 0x715cbc6fa0
	static Vector Multiply_VectorInt(Vector A, int B);// 0x61e2cb8 0x715cbc7080
	static Vector Multiply_VectorFloat(Vector A, float B);// 0x61e2dac 0x715cbc7160
	static Vector4 Multiply_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x61dc9ec 0x715cbc7240
	static Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0x61e6130 0x715cbc7320
	static Vector2D Multiply_Vector2DFloat(Vector2D A, float B);// 0x61e604c 0x715cbc3a40
	static Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0x61cdc54 0x715cbc3b20
	static Rotator Multiply_RotatorInt(Rotator A, int B);// 0x61d97d8 0x715cbc3c00
	static Rotator Multiply_RotatorFloat(Rotator A, float B);// 0x61d98cc 0x715cbc3ce0
	static Quat Multiply_QuatQuat(out const Quat A, out const Quat B);// 0x61d4ba0 0x715cbc3dc0
	static Matrix Multiply_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x61d8698 0x715cbc3ea0
	static Matrix Multiply_MatrixFloat(out const Matrix A, float B);// 0x61d847c 0x715cbc3f80
	static LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x61d0788 0x715cbc4060
	static LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0x61d06a4 0x715cbc4140
	static IntPoint Multiply_IntPointIntPoint(IntPoint A, IntPoint B);// 0x61e6e7c 0x715cbc4220
	static IntPoint Multiply_IntPointInt(IntPoint A, int B);// 0x61e6d94 0x715cbc4300
	static int Multiply_IntInt(int A, int B);// 0x61ede94 0x715cbc43e0
	static float Multiply_IntFloat(int A, float B);// 0x61eb2bc 0x715cbc44c0
	static int64 Multiply_Int64Int64(int64 A, int64 B);// 0x61ec914 0x715cbc45a0
	static float Multiply_FloatFloat(float A, float B);// 0x61eb3a4 0x715cbc4680
	static byte Multiply_ByteByte(byte A, byte B);// 0x61eea9c 0x715cbc4760
	static Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0x61deab4 0x715cbc4840
	static void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0x61e8cf0 0x715cbc4920
	static void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0x61e8a40 0x715cbc4a00
	static void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0x61e8790 0x715cbc4ae0
	static int64 MinInt64(int64 A, int64 B);// 0x61eb830 0x715cbc4bc0
	static void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0x61c6494 0x715cbc4ca0
	static int Min(int A, int B);// 0x61eccbc 0x715cbc4d80
	static void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0x61e8e48 0x715cbc4e60
	static void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0x61e8b98 0x715cbc4f40
	static void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0x61e88e8 0x715cbc5020
	static int64 MaxInt64(int64 A, int64 B);// 0x61eb748 0x715cbc5100
	static int Max(int A, int B);// 0x61ecbd4 0x715cbc51e0
	static Vector4 Matrix_TransformVector4(out const Matrix M, Vector4 V);// 0x61d80d4 0x715cbc52c0
	static Vector4 Matrix_TransformVector(out const Matrix M, Vector V);// 0x61d7d7c 0x715cbc53a0
	static Vector4 Matrix_TransformPosition(out const Matrix M, Vector V);// 0x61d7fc8 0x715cbc5480
	static Quat Matrix_ToQuat(out const Matrix M);// 0x61d5db8 0x715cbc5560
	static void Matrix_SetOrigin(out Matrix M, Vector NewOrigin);// 0x61d614c 0x715cbc5640
	static void Matrix_SetColumn(out Matrix M, byte Column, Vector Value);// 0x61d5f20 0x715cbc1d60
	static void Matrix_SetAxis(out Matrix M, byte Axis, Vector AxisVector);// 0x61d6234 0x715cbc1e40
	static Matrix Matrix_ScaleTranslation(out const Matrix M, Vector Scale3D);// 0x61d6d20 0x715cbc1f20
	static Matrix Matrix_RemoveTranslation(out const Matrix M);// 0x61d70fc 0x715cbc2000
	static void Matrix_RemoveScaling(out Matrix M, float Tolerance);// 0x61d750c 0x715cbc20e0
	static Matrix Matrix_Mirror(out const Matrix M, byte MirrorAxis, byte FlipAxis);// 0x61d52e4 0x715cbc21c0
	static Vector Matrix_InverseTransformVector(out const Matrix M, Vector V);// 0x61d7c3c 0x715cbc22a0
	static Vector Matrix_InverseTransformPosition(out const Matrix M, Vector V);// 0x61d7e90 0x715cbc2380
	static Matrix Matrix_Identity();// 0x61d8810 0x715cbc2460
	static Vector Matrix_GetUnitAxis(out const Matrix M, byte Axis);// 0x61d6614 0x715cbc2540
	static void Matrix_GetUnitAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x61d6360 0x715cbc2620
	static Matrix Matrix_GetTransposed(out const Matrix M);// 0x61d7b54 0x715cbc2700
	static Matrix Matrix_GetTransposeAdjoint(out const Matrix M);// 0x61d76bc 0x715cbc27e0
	static Vector Matrix_GetScaleVector(out const Matrix M, float Tolerance);// 0x61d71c0 0x715cbc28c0
	static Vector Matrix_GetScaledAxis(out const Matrix M, byte Axis);// 0x61d6988 0x715cbc29a0
	static void Matrix_GetScaledAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x61d67bc 0x715cbc2a80
	static float Matrix_GetRotDeterminant(out const Matrix M);// 0x61d78d8 0x715cbc2b60
	static Rotator Matrix_GetRotator(out const Matrix M);// 0x61d5e6c 0x715cbc2c40
	static Vector Matrix_GetOrigin(out const Matrix InMatrix);// 0x61d883c 0x715cbc2d20
	static float Matrix_GetMaximumAxisScale(out const Matrix M);// 0x61d6c0c 0x715cbc2e00
	static Matrix Matrix_GetMatrixWithoutScale(out const Matrix M, float Tolerance);// 0x61d7328 0x715cbc2ee0
	static Matrix Matrix_GetInverse(out const Matrix M);// 0x61d7818 0x715cbc2fc0
	static bool Matrix_GetFrustumTopPlane(out const Matrix M, out Plane OutPlane);// 0x61d5688 0x715cbc30a0
	static bool Matrix_GetFrustumRightPlane(out const Matrix M, out Plane OutPlane);// 0x61d5804 0x715cbc3180
	static bool Matrix_GetFrustumNearPlane(out const Matrix M, out Plane OutPlane);// 0x61d5c58 0x715cbc3260
	static bool Matrix_GetFrustumLeftPlane(out const Matrix M, out Plane OutPlane);// 0x61d5978 0x715cbc3340
	static bool Matrix_GetFrustumFarPlane(out const Matrix M, out Plane OutPlane);// 0x61d5aec 0x715cbc3420
	static bool Matrix_GetFrustumBottomPlane(out const Matrix M, out Plane OutPlane);// 0x61d550c 0x715cbc3500
	static float Matrix_GetDeterminant(out const Matrix M);// 0x61d79d4 0x715cbc35e0
	static Vector Matrix_GetColumn(out const Matrix M, byte Column);// 0x61d6050 0x715cbc36c0
	static bool Matrix_ContainsNaN(out const Matrix M);// 0x61d6e34 0x715cbc37a0
	static Matrix Matrix_ConcatenateTranslation(out const Matrix M, Vector Translation);// 0x61d6fe8 0x715cbc3880
	static Matrix Matrix_ApplyScale(out const Matrix M, float Scale);// 0x61d6acc 0x715cbc3960
	static float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x61e7a70 0x715cbc0080
	static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x61e78c4 0x715cbc0160
	static Vector4 MakeVector4(float X, float Y, float Z, float W);// 0x61dd180 0x715cbc0240
	static Vector2D MakeVector2D(float X, float Y);// 0x61e6858 0x715cbc0320
	static Vector MakeVector(float X, float Y, float Z);// 0x61e3ee0 0x715cbc0400
	static Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0x61ca260 0x715cbc04e0
	static Timespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);// 0x61ce364 0x715cbc05c0
	static Timespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);// 0x61ce510 0x715cbc06a0
	static Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0x61da378 0x715cbc0780
	static Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0x61da484 0x715cbc0860
	static Rotator MakeRotFromZ(out const Vector Z);// 0x61da9c0 0x715cbc0940
	static Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0x61da590 0x715cbc0a20
	static Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0x61da69c 0x715cbc0b00
	static Rotator MakeRotFromY(out const Vector Y);// 0x61daa80 0x715cbc0be0
	static Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0x61da7a8 0x715cbc0cc0
	static Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0x61da8b4 0x715cbc0da0
	static Rotator MakeRotFromX(out const Vector X);// 0x61dab40 0x715cbc0e80
	static Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0x61dac00 0x715cbc0f60
	static Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0x61da248 0x715cbc1040
	static Transform MakeRelativeTransform(out const Transform A, out const Transform RelativeTo);// 0x61c8b5c 0x715cbc1120
	static RandomStream MakeRandomStream(int InitialSeed);// 0x61cb700 0x715cbc1200
	static QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame);// 0x61cc730 0x715cbc12e0
	static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0x61e7584 0x715cbc13c0
	static Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0x61d04e4 0x715cbc14a0
	static FrameRate MakeFrameRate(int Numerator, int Denominator);// 0x61cc494 0x715cbc1580
	static DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);// 0x61d02b4 0x715cbc1660
	static LinearColor MakeColor(float R, float G, float B, float A);// 0x61d2b38 0x715cbc1740
	static Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0x61cb7a4 0x715cbc1820
	static Box MakeBox(Vector Min, Vector Max);// 0x61cb880 0x715cbc1900
	static float Loge(float A);// 0x61e9e4c 0x715cbc19e0
	static float Log(float A, float Base);// 0x61e9ef0 0x715cbc1ac0
	static bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0x61c5af8 0x715cbc1ba0
	static bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0x61c5d24 0x715cbc1c80
	static LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha);// 0x61d0da0 0x715cb9e780
	static LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha);// 0x61d0ecc 0x715cb9e860
	static LinearColor LinearColor_Yellow();// 0x61d2cc4 0x715cb9e940
	static LinearColor LinearColor_White();// 0x61d2d9c 0x715cb9ea20
	static LinearColor LinearColor_Transparent();// 0x61d2ca0 0x715cb9eb00
	static Color LinearColor_ToRGBE(LinearColor InLinearColor);// 0x61d18d0 0x715cb9ebe0
	static LinearColor LinearColor_ToNewOpacity(LinearColor InColor, float InOpacity);// 0x61d13a4 0x715cb9ecc0
	static void LinearColor_SetTemperature(out LinearColor InOutColor, float InTemperature);// 0x61d2228 0x715cb9eda0
	static void LinearColor_SetRGBA(out LinearColor InOutColor, float R, float G, float B, float A);// 0x61d26c0 0x715cb9ee80
	static void LinearColor_SetRandomHue(out LinearColor InOutColor);// 0x61d2178 0x715cb9ef60
	static void LinearColor_SetFromSRGB(out LinearColor InOutColor, out const Color InSRGB);// 0x61d240c 0x715cb9f040
	static void LinearColor_SetFromPow22(out LinearColor InOutColor, out const Color InColor);// 0x61d2314 0x715cb9f120
	static void LinearColor_SetFromHSV(out LinearColor InOutColor, float H, float S, float V, float A);// 0x61d2504 0x715cb9f200
	static void LinearColor_Set(out LinearColor InOutColor, LinearColor InColor);// 0x61d286c 0x715cb9f2e0
	static LinearColor LinearColor_Red();// 0x61d2d30 0x715cb9f3c0
	static Color LinearColor_QuantizeRound(LinearColor InColor);// 0x61d168c 0x715cb9f4a0
	static Color LinearColor_Quantize(LinearColor InColor);// 0x61d1734 0x715cb9f580
	static bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance);// 0x61d0c38 0x715cb9f660
	static LinearColor LinearColor_Green();// 0x61d2d0c 0x715cb9f740
	static LinearColor LinearColor_Gray();// 0x61d2d78 0x715cb9f820
	static float LinearColor_GetMin(LinearColor InColor);// 0x61d115c 0x715cb9f900
	static float LinearColor_GetMax(LinearColor InColor);// 0x61d1214 0x715cb9f9e0
	static float LinearColor_GetLuminance(LinearColor InColor);// 0x61d12cc 0x715cb9fac0
	static float LinearColor_Distance(LinearColor C1, LinearColor C2);// 0x61d148c 0x715cb9fba0
	static LinearColor LinearColor_Desaturated(LinearColor InColor, float InDesaturation);// 0x61d159c 0x715cb9fc80
	static LinearColor LinearColor_Blue();// 0x61d2ce8 0x715cb9fd60
	static LinearColor LinearColor_Black();// 0x61d2d54 0x715cb9fe40
	static Vector LessLess_VectorRotator(Vector A, Rotator B);// 0x61e1ee8 0x715cb9ff20
	static bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0x61cd63c 0x715cb9caa0
	static bool LessEqual_IntInt(int A, int B);// 0x61ed820 0x715cb9cb80
	static bool LessEqual_Int64Int64(int64 A, int64 B);// 0x61ec39c 0x715cb9cc60
	static bool LessEqual_FloatFloat(float A, float B);// 0x61ead94 0x715cb9cd40
	static bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x61cf74c 0x715cb9ce20
	static bool LessEqual_ByteByte(byte A, byte B);// 0x61ee23c 0x715cb9cf00
	static bool Less_TimespanTimespan(Timespan A, Timespan B);// 0x61cd718 0x715cb9cfe0
	static bool Less_IntInt(int A, int B);// 0x61ed9f0 0x715cb9d0c0
	static bool Less_Int64Int64(int64 A, int64 B);// 0x61ec56c 0x715cb9d1a0
	static bool Less_FloatFloat(float A, float B);// 0x61eaf64 0x715cb9d280
	static bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0x61cf828 0x715cb9d360
	static bool Less_ByteByte(byte A, byte B);// 0x61ee414 0x715cb9d440
	static float Lerp(float A, float B, float Alpha);// 0x61e8660 0x715cb9d520
	static bool IsZero2D(out const Vector2D A);// 0x61e4c5c 0x715cb9d600
	static bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0x61c6104 0x715cb9d6e0
	static bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0x61c6260 0x715cb9d7c0
	static bool IsNearlyZero2D(out const Vector2D A, float Tolerance);// 0x61e4d20 0x715cb9d8a0
	static bool IsMorning(DateTime A);// 0x61ced2c 0x715cb9d980
	static bool IsLeapYear(int Year);// 0x61ceae0 0x715cb9da60
	static bool IsAfternoon(DateTime A);// 0x61cee10 0x715cb9db40
	static Transform InvertTransform(out const Transform T);// 0x61c8830 0x715cb9dc20
	static Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0x61c8cb8 0x715cb9dd00
	static Vector InverseTransformLocation(out const Transform T, Vector Location);// 0x61c8f74 0x715cb9dde0
	static Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0x61c8dd8 0x715cb9dec0
	static IntPoint IntPoint_Zero();// 0x61e7434 0x715cb9dfa0
	static IntPoint IntPoint_Up();// 0x61e73fc 0x715cb9e080
	static IntPoint IntPoint_Right();// 0x61e73c0 0x715cb9e160
	static IntPoint IntPoint_One();// 0x61e7418 0x715cb9e240
	static IntPoint IntPoint_Left();// 0x61e73e0 0x715cb9e320
	static IntPoint IntPoint_Down();// 0x61e73a0 0x715cb9e400
	static bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0x61ed3a0 0x715cb9e4e0
	static bool InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax);// 0x61ebf1c 0x715cb9e5c0
	static bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);// 0x61ea7e4 0x715cb9e6a0
	static float Hypotenuse(float Width, float Height);// 0x61ea700 0x715cb9adc0
	static LinearColor HSVToRGBLinear(LinearColor HSV);// 0x61d1db4 0x715cb9aea0
	static void HSVToRGB_Vector(LinearColor HSV, out LinearColor RGB);// 0x61d1e60 0x715cb9af80
	static LinearColor HSVToRGB(float H, float S, float V, float A);// 0x61d1f58 0x715cb9b060
	static float GridSnap_Float(float Location, float GridSize);// 0x61ea600 0x715cb9b140
	static Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0x61e2110 0x715cb9b220
	static bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0x61cd7f4 0x715cb9b300
	static bool GreaterEqual_IntInt(int A, int B);// 0x61ed738 0x715cb9b3e0
	static bool GreaterEqual_Int64Int64(int64 A, int64 B);// 0x61ec2b4 0x715cb9b4c0
	static bool GreaterEqual_FloatFloat(float A, float B);// 0x61eacac 0x715cb9b5a0
	static bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x61cf904 0x715cb9b680
	static bool GreaterEqual_ByteByte(byte A, byte B);// 0x61ee150 0x715cb9b760
	static bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0x61cd8d0 0x715cb9b840
	static bool Greater_IntInt(int A, int B);// 0x61ed908 0x715cb9b920
	static bool Greater_Int64Int64(int64 A, int64 B);// 0x61ec484 0x715cb9ba00
	static bool Greater_FloatFloat(float A, float B);// 0x61eae7c 0x715cb9bae0
	static bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0x61cf9e0 0x715cb9bbc0
	static bool Greater_ByteByte(byte A, byte B);// 0x61ee328 0x715cb9bca0
	static int GetYear(DateTime A);// 0x61ceef4 0x715cb9bd80
	static void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0x61e0a6c 0x715cb9be60
	static Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0x61e07f8 0x715cb9bf40
	static Vector GetUpVector(Rotator InRot);// 0x61d9444 0x715cb9c020
	static float GetTotalSeconds(Timespan A);// 0x61ccddc 0x715cb9c100
	static float GetTotalMinutes(Timespan A);// 0x61cce90 0x715cb9c1e0
	static float GetTotalMilliseconds(Timespan A);// 0x61ccf44 0x715cb9c2c0
	static float GetTotalHours(Timespan A);// 0x61ccff8 0x715cb9c3a0
	static float GetTotalDays(Timespan A);// 0x61cd0a8 0x715cb9c480
	static Timespan GetTimeOfDay(DateTime A);// 0x61cef9c 0x715cb9c560
	static float GetTAU();// 0x61e9b64 0x715cb9c640
	static void GetSlopeDegreeAngles(out const Vector MyRightYAxis, out const Vector FloorNormal, out const Vector UpVector, out float OutSlopePitchDegreeAngle, out float OutSlopeRollDegreeAngle);// 0x61c5f1c 0x715cb9c720
	static int GetSeconds(Timespan A);// 0x61cd158 0x715cb9c800
	static int GetSecond(DateTime A);// 0x61cf068 0x715cb9c8e0
	static Vector2D GetRotated2D(Vector2D A, float AngleDeg);// 0x61e4e30 0x715cb9c9c0
	static Vector GetRightVector(Rotator InRot);// 0x61d94ec 0x715cb990e0
	static Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0x61debb4 0x715cb991c0
	static float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x61dda04 0x715cb992a0
	static float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x61dd8bc 0x715cb99380
	static float GetPI();// 0x61e9b84 0x715cb99460
	static int GetMonth(DateTime A);// 0x61cf148 0x715cb99540
	static int GetMinutes(Timespan A);// 0x61cd238 0x715cb99620
	static int GetMinute(DateTime A);// 0x61cf1f0 0x715cb99700
	static float GetMinElement(Vector A);// 0x61e181c 0x715cb997e0
	static float GetMin2D(Vector2D A);// 0x61e5094 0x715cb998c0
	static int GetMilliseconds(Timespan A);// 0x61cd314 0x715cb999a0
	static int GetMillisecond(DateTime A);// 0x61cf2cc 0x715cb99a80
	static float GetMaxElement(Vector A);// 0x61e176c 0x715cb99b60
	static float GetMax2D(Vector2D A);// 0x61e5138 0x715cb99c40
	static int GetHours(Timespan A);// 0x61cd3fc 0x715cb99d20
	static int GetHour12(DateTime A);// 0x61cf3ac 0x715cb99e00
	static int GetHour(DateTime A);// 0x61cf454 0x715cb99ee0
	static Vector GetForwardVector(Rotator InRot);// 0x61d9594 0x715cb99fc0
	static Timespan GetDuration(Timespan A);// 0x61cd4d8 0x715cb9a0a0
	static Vector GetDirectionUnitVector(Vector From, Vector To);// 0x61e0bb0 0x715cb9a180
	static int GetDays(Timespan A);// 0x61cd57c 0x715cb9a260
	static int GetDayOfYear(DateTime A);// 0x61cf530 0x715cb9a340
	static int GetDay(DateTime A);// 0x61cf5d8 0x715cb9a420
	static DateTime GetDate(DateTime A);// 0x61cf680 0x715cb9a500
	static void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0x61e08bc 0x715cb9a5e0
	static void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0x61d9108 0x715cb9a6c0
	static float GetAbsMax2D(Vector2D A);// 0x61e51dc 0x715cb9a7a0
	static Vector2D GetAbs2D(Vector2D A);// 0x61e5288 0x715cb9a880
	static IntVector FTruncVector(out const Vector InVector);// 0x61e0738 0x715cb9a960
	static int64 FTrunc64(float A);// 0x61e7fdc 0x715cb9aa40
	static int FTrunc(float A);// 0x61e8278 0x715cb9ab20
	static Timespan FromSeconds(float Seconds);// 0x61ccaa8 0x715cb9ac00
	static Timespan FromMinutes(float Minutes);// 0x61ccb4c 0x715cb9ace0
	static Timespan FromMilliseconds(float Milliseconds);// 0x61ccbf0 0x715cb97400
	static Timespan FromHours(float Hours);// 0x61ccc94 0x715cb974e0
	static Timespan FromDays(float Days);// 0x61ccd38 0x715cb975c0
	static float Fraction(float A);// 0x61eb214 0x715cb976a0
	static int FMod(float Dividend, float Divisor, out float Remainder);// 0x61e7dfc 0x715cb97780
	static float FMin(float A, float B);// 0x61e92a0 0x715cb97860
	static float FMax(float A, float B);// 0x61e91b8 0x715cb97940
	static float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x61c7814 0x715cb97a20
	static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0x61e745c 0x715cb97b00
	static float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x61c7d5c 0x715cb97be0
	static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x61c7ec4 0x715cb97cc0
	static float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);// 0x61e76ac 0x715cb97da0
	static void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0x61dddc8 0x715cb97e80
	static Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0x61da11c 0x715cb97f60
	static Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x61ddc7c 0x715cb98040
	static Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x61ddb4c 0x715cb98120
	static int64 FFloor64(float A);// 0x61e8080 0x715cb98200
	static int FFloor(float A);// 0x61e831c 0x715cb982e0
	static float FClamp(float Value, float Min, float Max);// 0x61e9084 0x715cb983c0
	static int64 FCeil64(float A);// 0x61e7f38 0x715cb984a0
	static int FCeil(float A);// 0x61e81d4 0x715cb98580
	static float Exp(float A);// 0x61e9fd4 0x715cb98660
	static bool EqualExactly_VectorVector(Vector A, Vector B);// 0x61e27b8 0x715cb98740
	static bool EqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x61dc780 0x715cb98820
	static bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x61e5d54 0x715cb98900
	static bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x61e2664 0x715cb989e0
	static bool EqualEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x61dc5d8 0x715cb98ac0
	static bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x61e5c14 0x715cb98ba0
	static bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0x61c9f1c 0x715cb98c80
	static bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0x61cda88 0x715cb98d60
	static bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x61d9bd8 0x715cb98e40
	static bool EqualEqual_QuatQuat(out const Quat A, out const Quat B, float Tolerance);// 0x61d50d0 0x715cb98f20
	static bool EqualEqual_ObjectObject(Object* A, Object* B);// 0x61ca91c 0x715cb99000
	static bool EqualEqual_NameName(FName A, FName B);// 0x61ca494 0x715cb95720
	static bool EqualEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x61d8334 0x715cb95800
	static bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x61d0b24 0x715cb958e0
	static bool EqualEqual_IntInt(int A, int B);// 0x61ed650 0x715cb959c0
	static bool EqualEqual_Int64Int64(int64 A, int64 B);// 0x61ec1cc 0x715cb95aa0
	static bool EqualEqual_FloatFloat(float A, float B);// 0x61eabc4 0x715cb95b80
	static bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x61cfb98 0x715cb95c60
	static bool EqualEqual_ClassClass(class Object A, class Object B);// 0x61ca74c 0x715cb95d40
	static bool EqualEqual_ByteByte(byte A, byte B);// 0x61ee064 0x715cb95e20
	static bool EqualEqual_BoolBool(bool A, bool B);// 0x61ef15c 0x715cb95f00
	static bool Equal_IntPointIntPoint(IntPoint A, IntPoint B);// 0x61e6a90 0x715cb95fe0
	static float Ease(float A, float B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x61e846c 0x715cb960c0
	static Vector DynamicWeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x61c5418 0x715cb961a0
	static Rotator DynamicWeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x61c5264 0x715cb96280
	static float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x61c55cc 0x715cb96360
	static float DotProduct2D(Vector2D A, Vector2D B);// 0x61e5328 0x715cb96440
	static float Dot_VectorVector(Vector A, Vector B);// 0x61e2318 0x715cb96520
	static Vector Divide_VectorVector(Vector A, Vector B);// 0x61e2b98 0x715cb96600
	static Vector Divide_VectorInt(Vector A, int B);// 0x61e2968 0x715cb966e0
	static Vector Divide_VectorFloat(Vector A, float B);// 0x61e2a80 0x715cb967c0
	static Vector4 Divide_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x61dc8d4 0x715cb968a0
	static Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0x61e5f48 0x715cb96980
	static Vector2D Divide_Vector2DFloat(Vector2D A, float B);// 0x61e5e40 0x715cb96a60
	static Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0x61cdb64 0x715cb96b40
	static LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x61d05cc 0x715cb96c20
	static IntPoint Divide_IntPointIntPoint(IntPoint A, IntPoint B);// 0x61e6c88 0x715cb96d00
	static IntPoint Divide_IntPointInt(IntPoint A, int B);// 0x61e6b7c 0x715cb96de0
	static int Divide_IntInt(int A, int B);// 0x61edd9c 0x715cb96ec0
	static int64 Divide_Int64Int64(int64 A, int64 B);// 0x61ec81c 0x715cb96fa0
	static float Divide_FloatFloat(float A, float B);// 0x61ef670 0x715cb97080
	static byte Divide_ByteByte(byte A, byte B);// 0x61ee9a4 0x715cb97160
	static float DistanceSquared2D(Vector2D v1, Vector2D v2);// 0x61e540c 0x715cb97240
	static float Distance2D(Vector2D v1, Vector2D v2);// 0x61e54f8 0x715cb97320
	static float DegTan(float A);// 0x61e9658 0x715cb93a40
	static float DegSin(float A);// 0x61e9950 0x715cb93b20
	static float DegreesToRadians(float A);// 0x61e9ab4 0x715cb93c00
	static float DegCos(float A);// 0x61e97d4 0x715cb93ce0
	static float DegAtan2(float Y, float X);// 0x61e94b0 0x715cb93dc0
	static float DegAtan(float A);// 0x61e95a4 0x715cb93ea0
	static float DegAsin(float A);// 0x61e9888 0x715cb93f80
	static float DegAcos(float A);// 0x61e970c 0x715cb94060
	static int DaysInYear(int Year);// 0x61ceb88 0x715cb94140
	static int DaysInMonth(int Year, int Month);// 0x61cec2c 0x715cb94220
	static DateTime DateTimeMinValue();// 0x61ceaa0 0x715cb94300
	static DateTime DateTimeMaxValue();// 0x61ceab8 0x715cb943e0
	static bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0x61ce70c 0x715cb944c0
	static bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0x61ce864 0x715cb945a0
	static float CrossProduct2D(Vector2D A, Vector2D B);// 0x61e55e8 0x715cb94680
	static Vector Cross_VectorVector(Vector A, Vector B);// 0x61e2210 0x715cb94760
	static Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0x61e3db4 0x715cb94840
	static float Cos(float A);// 0x61ea35c 0x715cb94920
	static Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0x61c8a00 0x715cb94a00
	static Vector2D Conv_VectorToVector2D(Vector InVector);// 0x61e378c 0x715cb94ae0
	static Transform Conv_VectorToTransform(Vector InLocation);// 0x61e3828 0x715cb94bc0
	static Rotator Conv_VectorToRotator(Vector InVec);// 0x61e36d8 0x715cb94ca0
	static Quat Conv_VectorToQuaterion(Vector InVec);// 0x61e3538 0x715cb94d80
	static LinearColor Conv_VectorToLinearColor(Vector InVec);// 0x61e3900 0x715cb94e60
	static Vector Conv_Vector4ToVector(out const Vector4 InVector4);// 0x61dceb4 0x715cb94f40
	static Rotator Conv_Vector4ToRotator(out const Vector4 InVec);// 0x61dcdf4 0x715cb95020
	static Quat Conv_Vector4ToQuaterion(out const Vector4 InVec);// 0x61dcd34 0x715cb95100
	static Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0x61e6634 0x715cb951e0
	static IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D);// 0x61e6588 0x715cb952c0
	static Matrix Conv_TransformToMatrix(out const Transform Transform);// 0x61c802c 0x715cb953a0
	static Vector Conv_RotatorToVector(Rotator InRot);// 0x61d9390 0x715cb95480
	static Transform Conv_RotatorToTransform(out const Rotator InRotator);// 0x61d928c 0x715cb95560
	static Transform Conv_MatrixToTransform(out const Matrix InMatrix);// 0x61d89a8 0x715cb95640
	static Rotator Conv_MatrixToRotator(out const Matrix InMatrix);// 0x61d88f4 0x715cb91d60
	static Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0x61d1978 0x715cb91e40
	static Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB);// 0x61d17dc 0x715cb91f20
	static Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0x61cba18 0x715cb92000
	static IntVector Conv_IntToIntVector(int inInt);// 0x61cbed4 0x715cb920e0
	static int64 Conv_IntToInt64(int inInt);// 0x61cc158 0x715cb921c0
	static float Conv_IntToFloat(int inInt);// 0x61cc1f8 0x715cb922a0
	static byte Conv_IntToByte(int inInt);// 0x61cc0b8 0x715cb92380
	static bool Conv_IntToBool(int inInt);// 0x61cbe2c 0x715cb92460
	static Vector2D Conv_IntPointToVector2D(IntPoint InIntPoint);// 0x61e72fc 0x715cb92540
	static int Conv_Int64ToInt(int64 inInt);// 0x61cc018 0x715cb92620
	static byte Conv_Int64ToByte(int64 inInt);// 0x61cbf78 0x715cb92700
	static Vector Conv_FloatToVector(float InFloat);// 0x61cb974 0x715cb927e0
	static LinearColor Conv_FloatToLinearColor(float InFloat);// 0x61d20d0 0x715cb928c0
	static LinearColor Conv_ColorToLinearColor(Color InColor);// 0x61cbadc 0x715cb929a0
	static int Conv_ByteToInt(byte InByte);// 0x61cbb8c 0x715cb92a80
	static float Conv_ByteToFloat(byte InByte);// 0x61cc29c 0x715cb92b60
	static int Conv_BoolToInt(bool InBool);// 0x61cbd84 0x715cb92c40
	static float Conv_BoolToFloat(bool InBool);// 0x61cbcd4 0x715cb92d20
	static byte Conv_BoolToByte(bool InBool);// 0x61cbc2c 0x715cb92e00
	static Transform ComposeTransforms(out const Transform A, out const Transform B);// 0x61c95dc 0x715cb92ee0
	static Rotator ComposeRotators(Rotator A, Rotator B);// 0x61d96f0 0x715cb92fc0
	static bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0x61ca57c 0x715cb930a0
	static Vector ClampVectorSize(Vector A, float Min, float Max);// 0x61e1cbc 0x715cb93180
	static int64 ClampInt64(int64 Value, int64 Min, int64 Max);// 0x61eb614 0x715cb93260
	static float ClampAxis(float Angle);// 0x61d8b0c 0x715cb93340
	static Vector2D ClampAxes2D(Vector2D A, float MinAxisVal, float MaxAxisVal);// 0x61e56cc 0x715cb93420
	static float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);// 0x61e9388 0x715cb93500
	static int Clamp(int Value, int Min, int Max);// 0x61ecaa0 0x715cb935e0
	static LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0x61d0ff0 0x715cb936c0
	static void BreakVector4(out const Vector4 InVec, out float X, out float Y, out float Z, out float W);// 0x61dcf78 0x715cb937a0
	static void BreakVector2D(Vector2D InVec, out float X, out float Y);// 0x61e6718 0x715cb93880
	static void BreakVector(Vector InVec, out float X, out float Y, out float Z);// 0x61e39b8 0x715cb93960
	static void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0x61ca080 0x715cb90080
	static void BreakTimespan2(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int FractionNano);// 0x61cdef4 0x715cb90160
	static void BreakTimespan(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int Milliseconds);// 0x61ce12c 0x715cb90240
	static void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0x61d9df4 0x715cb90320
	static void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0x61d9f88 0x715cb90400
	static void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0x61cb604 0x715cb904e0
	static void BreakQualifiedFrameTime(out const QualifiedFrameTime InFrameTime, out FrameNumber Frame, out FrameRate FrameRate, out float SubFrame);// 0x61cc578 0x715cb905c0
	static void BreakFrameRate(out const FrameRate InFrameRate, out int Numerator, out int Denominator);// 0x61cc340 0x715cb906a0
	static void BreakDateTime(DateTime InDateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int Second, out int Millisecond);// 0x61cffd4 0x715cb90780
	static void BreakColor(LinearColor InColor, out float R, out float G, out float B, out float A);// 0x61d294c 0x715cb90860
	static bool BooleanXOR(bool A, bool B);// 0x61eec78 0x715cb90940
	static bool BooleanOR(bool A, bool B);// 0x61eed74 0x715cb90a20
	static bool BooleanNOR(bool A, bool B);// 0x61eeb84 0x715cb90b00
	static bool BooleanNAND(bool A, bool B);// 0x61eee68 0x715cb90be0
	static bool BooleanAND(bool A, bool B);// 0x61eef64 0x715cb90cc0
	static byte BMin(byte A, byte B);// 0x61ee5ec 0x715cb90da0
	static byte BMax(byte A, byte B);// 0x61ee500 0x715cb90e80
	static float Atan2(float Y, float X);// 0x61ea078 0x715cb90f60
	static float Atan(float A);// 0x61ea15c 0x715cb91040
	static float Asin(float A);// 0x61ea400 0x715cb91120
	static int And_IntInt(int A, int B);// 0x61ed2bc 0x715cb91200
	static int64 And_Int64Int64(int64 A, int64 B);// 0x61ebe38 0x715cb912e0
	static Vector Add_VectorVector(Vector A, Vector B);// 0x61e344c 0x715cb913c0
	static Vector Add_VectorInt(Vector A, int B);// 0x61e3260 0x715cb914a0
	static Vector Add_VectorFloat(Vector A, float B);// 0x61e3358 0x715cb91580
	static Vector4 Add_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x61dcc1c 0x715cb91660
	static Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0x61e64b0 0x715cb91740
	static Vector2D Add_Vector2DFloat(Vector2D A, float B);// 0x61e63c8 0x715cb91820
	static Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0x61cde1c 0x715cb91900
	static Quat Add_QuatQuat(out const Quat A, out const Quat B);// 0x61d4de0 0x715cb919e0
	static Matrix Add_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x61d8580 0x715cb91ac0
	static LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x61d0938 0x715cb91ba0
	static IntPoint Add_IntPointIntPoint(IntPoint A, IntPoint B);// 0x61e7218 0x715cb91c80
	static IntPoint Add_IntPointInt(IntPoint A, int B);// 0x61e7130 0x715cb6e780
	static int Add_IntInt(int A, int B);// 0x61edbbc 0x715cb6e860
	static int64 Add_Int64Int64(int64 A, int64 B);// 0x61ec738 0x715cb6e940
	static float Add_FloatFloat(float A, float B);// 0x61eb130 0x715cb6ea20
	static DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0x61cfefc 0x715cb6eb00
	static DateTime Add_DateTimeDateTime(DateTime A, DateTime B);// 0x61cfd4c 0x715cb6ebe0
	static byte Add_ByteByte(byte A, byte B);// 0x61ee7c0 0x715cb6ecc0
	static float Acos(float A);// 0x61ea2a4 0x715cb6eda0
	static int64 Abs_Int64(int64 A);// 0x61eb56c 0x715cb6ee80
	static int Abs_Int(int A);// 0x61ec9f8 0x715cb6ef60
	static float Abs(float A);// 0x61ea55c 0x715cb6f040

--------------------------------
Class: VectorSpringState // 715db1cf40

--------------------------------
Class: Timespan // 717dfc8080

--------------------------------
Class: RandomStream // 717dfc85c0
	int InitialSeed;//[Offset: 0x0, Size: 0x4] 0x717df8c580
	int Seed;//[Offset: 0x4, Size: 0x4] 0x717df8c600

--------------------------------
Class: FloatSpringState // 715db1ce80

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object // 71a4a2b500
	static void MarkBit(out int Data, int Index);// 0x61fdb80 0x715cbe43e0
	static bool HasUnmarkedBit(int Data, int NumBits);// 0x61fd908 0x715cbe44c0
	static bool HasMarkedBit(int Data, int NumBits);// 0x61fd820 0x715cbe45a0
	static byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0x61fd15c 0x715cbe4680
	static int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0x61fd6b0 0x715cbe4760
	static int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x61fd588 0x715cbe4840
	static int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x61fd460 0x715cbe4920
	static byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0x61fd074 0x715cbe4a00
	static FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0x61fd244 0x715cbe4ae0
	static FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0x61fd378 0x715cbe4bc0
	static void ClearBit(out int Data, int Index);// 0x61fda94 0x715cbe4ca0
	static void ClearAllBits(out int Data);// 0x61fd9f0 0x715cbe4d80
	static bool BitIsMarked(int Data, int Index);// 0x61fdc6c 0x715cbe4e60

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object // 71a4a2b280
	static void SetCastInsetShadowForAllAttachments(PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);// 0x61fe40c 0x715cbe6d00
	static Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0x61ff9a4 0x715cbe6de0
	static void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0x61ffc8c 0x715cbe6ec0
	static Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x61ff444 0x715cbe6fa0
	static LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x61ff16c 0x715cbe7080
	static LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x61ff2d8 0x715cbe7160
	static Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x61ff5ac 0x715cbe7240
	static SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0x61fe8a0 0x715cbe7320
	static Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0x61fef00 0x715cbe3a40
	static Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0x61fedf8 0x715cbe3b20
	static void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0x61feff4 0x715cbe3c00
	static void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0x61ff714 0x715cbe3ce0
	static void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0x61feb3c 0x715cbe3dc0
	static void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0x61ffb74 0x715cbe3ea0
	static TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x61ffd20 0x715cbe3f80
	static void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0x61ff88c 0x715cbe4060
	static void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0x61fff18 0x715cbe4140
	static void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0x61fe544 0x715cbe4220
	static void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0x61fec28 0x715cbe4300

--------------------------------
Class: DrawToRenderTargetContext // 715db1cdc0
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8] 0x715db49780

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object // 71a4a2b000
	static FString TrimTrailing(FString SourceString);// 0x6201710 0x715cbea6c0
	static FString Trim(FString SourceString);// 0x6201800 0x715cbea7a0
	static FString ToUpper(FString SourceString);// 0x62020dc 0x715cbea880
	static FString ToLower(FString SourceString);// 0x6201fec 0x715cbea960
	static FString TimeSecondsToString(float InSeconds);// 0x62007c8 0x715cbeaa40
	static bool StartsWith(FString SourceString, FString InPrefix, byte SearchCase);// 0x6201b80 0x715cbeab20
	static bool Split(FString SourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0x6200f10 0x715cbeac00
	static FString RightPad(FString SourceString, int ChCount);// 0x6201d7c 0x715cbeace0
	static FString RightChop(FString SourceString, int Count);// 0x6200a30 0x715cbe7400
	static FString Right(FString SourceString, int Count);// 0x6200b68 0x715cbe74e0
	static FString Reverse(FString SourceString);// 0x62014d8 0x715cbe75c0
	static int ReplaceInline(out FString SourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0x6201160 0x715cbe76a0
	static FString Replace(FString SourceString, FString From, FString To, byte SearchCase);// 0x6201300 0x715cbe7780
	static FString[] ParseIntoArray(FString SourceString, FString Delimiter, const bool CullEmptyStrings);// 0x62024a4 0x715cbe7860
	static bool NotEqual_StrStr(FString A, FString B);// 0x6202efc 0x715cbe7940
	static bool NotEqual_StriStri(FString A, FString B);// 0x6202df8 0x715cbe7a20
	static FString Mid(FString SourceString, int Start, int Count);// 0x62008b8 0x715cbe7b00
	static bool MatchesWildcard(FString SourceString, FString Wildcard, byte SearchCase);// 0x62018f0 0x715cbe7be0
	static int Len(FString S);// 0x6202d48 0x715cbe7cc0
	static FString LeftPad(FString SourceString, int ChCount);// 0x6201eb4 0x715cbe7da0
	static FString LeftChop(FString SourceString, int Count);// 0x6200ca0 0x715cbe7e80
	static FString Left(FString SourceString, int Count);// 0x6200dd8 0x715cbe7f60
	static FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0x6202324 0x715cbe8040
	static bool IsNumeric(FString SourceString);// 0x6201cc8 0x715cbe8120
	static bool IsEmpty(FString inString);// 0x6202c94 0x715cbe8200
	static FString GetSubstring(FString SourceString, int StartIndex, int Length);// 0x6202b1c 0x715cbe82e0
	static int GetCharacterAsNumber(FString SourceString, int Index);// 0x620269c 0x715cbe83c0
	static FString[] GetCharacterArrayFromString(FString SourceString);// 0x62021cc 0x715cbe84a0
	static int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0x6202930 0x715cbe8580
	static bool EqualEqual_StrStr(FString A, FString B);// 0x6203104 0x715cbe8660
	static bool EqualEqual_StriStri(FString A, FString B);// 0x6203000 0x715cbe8740
	static bool EndsWith(FString SourceString, FString InSuffix, byte SearchCase);// 0x6201a38 0x715cbe8820
	static int CullArray(FString SourceString, out FString[] inArray);// 0x62015c8 0x715cbe8900
	static FString Conv_VectorToString(Vector InVec);// 0x6205560 0x715cbe89e0
	static FString Conv_Vector2dToString(Vector2D InVec);// 0x6205298 0x715cbe8ac0
	static FString Conv_TransformToString(out const Transform InTrans);// 0x6205080 0x715cbe8ba0
	static void Conv_StringToVector2D(FString inString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0x6204814 0x715cbe8c80
	static void Conv_StringToVector(FString inString, out Vector OutConvertedVector, out bool OutIsValid);// 0x620495c 0x715cbe8d60
	static void Conv_StringToRotator(FString inString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0x62046cc 0x715cbe8e40
	static FName Conv_StringToName(FString inString);// 0x6204c04 0x715cbe8f20
	static int Conv_StringToInt(FString inString);// 0x6204b54 0x715cbe9000
	static float Conv_StringToFloat(FString inString);// 0x6204aa4 0x715cbe5720
	static void Conv_StringToColor(FString inString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0x6204584 0x715cbe5800
	static FString Conv_RotatorToString(Rotator InRot);// 0x62051a8 0x715cbe58e0
	static FString Conv_ObjectToString(Object* InObj);// 0x6204f90 0x715cbe59c0
	static FString Conv_NameToString(FName InName);// 0x6204db0 0x715cbe5aa0
	static FString Conv_MatrixToString(out const Matrix InMatrix);// 0x6204cb4 0x715cbe5b80
	static FString Conv_IntVectorToString(IntVector InIntVec);// 0x6205470 0x715cbe5c60
	static FString Conv_IntToString(int inInt);// 0x6205838 0x715cbe5d40
	static FString Conv_IntPointToString(IntPoint InIntPoint);// 0x6205384 0x715cbe5e20
	static FString Conv_FloatToString(float InFloat);// 0x6205928 0x715cbe5f00
	static FString Conv_ColorToString(LinearColor InColor);// 0x6204ea0 0x715cbe5fe0
	static FString Conv_ByteToString(byte InByte);// 0x6205748 0x715cbe60c0
	static FString Conv_BoolToString(bool InBool);// 0x6205650 0x715cbe61a0
	static bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0x6202790 0x715cbe6280
	static FString Concat_StrStr(FString A, FString B);// 0x6203208 0x715cbe6360
	static FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString Suffix);// 0x6203a90 0x715cbe6440
	static FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString Suffix);// 0x6203e2c 0x715cbe6520
	static FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString Suffix);// 0x62038c0 0x715cbe6600
	static FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString Suffix);// 0x62036ec 0x715cbe66e0
	static FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);// 0x6203348 0x715cbe67c0
	static FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString Suffix);// 0x6203c5c 0x715cbe68a0
	static FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix);// 0x62041dc 0x715cbe6980
	static FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);// 0x62043b0 0x715cbe6a60
	static FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString Suffix);// 0x620351c 0x715cbe6b40
	static FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);// 0x6203ffc 0x715cbe6c20

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object // 71a4a2ad80
	static bool IsRegisteredTableId(const FName TableId);// 0x6208074 0x715cbe9fc0
	static bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0x6207f7c 0x715cbea0a0
	static FString GetTableNamespace(const FName TableId);// 0x6207e8c 0x715cbea180
	static FString GetTableEntrySourceString(const FName TableId, FString Key);// 0x6207d58 0x715cbea260
	static FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0x6207bdc 0x715cbea340
	static FName[] GetRegisteredStringTables();// 0x6207b2c 0x715cbea420
	static FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0x62078a0 0x715cbea500
	static FString[] GetKeysFromStringTable(const FName TableId);// 0x62079d4 0x715cbea5e0

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object // 71a4a2ab00
	static void UnregisterForRemoteNotifications();// 0x620a218 0x715d768660
	static void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0x6208c58 0x715d768740
	static void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0x6208d08 0x715d768820
	static void TransactObject(Object* Object);// 0x6209d08 0x715d768900
	static void StackTrace();// 0x621d898 0x715d7689e0
	static bool SphereTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x62118e0 0x715d768ac0
	static bool SphereTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x620f5f4 0x715d768ba0
	static bool SphereTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x6213b98 0x715d768c80
	static bool SphereTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x621148c 0x715d768d60
	static bool SphereTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x620f1bc 0x715d768e40
	static bool SphereTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x6213760 0x715d768f20
	static bool SphereOverlapComponents(Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x621578c 0x715d769000
	static bool SphereOverlapActors(Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x6215a24 0x715d765720
	static void SnapshotObject(Object* Object);// 0x6209c74 0x715d765800
	static void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0x620acb8 0x715d7658e0
	static void ShowPlatformSpecificAchievementsScreen(PlayerController* SpecificPlayer);// 0x620ac24 0x715d7659c0
	static void ShowInterstitialAd();// 0x620ad58 0x715d765aa0
	static void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0x620aecc 0x715d765b80
	static void SetWindowTitle(out const FText Title);// 0x62198d4 0x715d765c60
	static void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0x620aa0c 0x715d765d40
	static void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0x6216190 0x715d765e20
	static void SetUserActivity(out const UserActivity UserActivity);// 0x620a164 0x715d765f00
	static void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0x6215e00 0x715d765fe0
	static void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0x62162b4 0x715d7660c0
	static void SetSuppressViewportTransitionMessage(Object* WorldContextObject, bool bState);// 0x620a618 0x715d7661a0
	static void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0x621d788 0x715d766280
	static void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0x6216438 0x715d766360
	static void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0x621669c 0x715d766440
	static void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0x621655c 0x715d766520
	static void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0x621606c 0x715d766600
	static void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0x6216b4c 0x715d7666e0
	static void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0x62167dc 0x715d7667c0
	static void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0x6215f48 0x715d7668a0
	static void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0x62170cc 0x715d766980
	static void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0x6216908 0x715d766a60
	static void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0x6216fb4 0x715d766b40
	static void SetGamepadsBlockDeviceFeedback(bool bBlock);// 0x620a938 0x715d766c20
	static void SetFloatPropertyByName(Object* Object, FName PropertyName, float Value);// 0x6216d84 0x715d766d00
	static void SetFieldPathPropertyByName(Object* Object, FName PropertyName, out const Value(FieldPathProperty) Value);// 0x6215cbc 0x715d766de0
	static void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0x621d678 0x715d766ec0
	static void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0x6216a34 0x715d766fa0
	static void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0x6216e9c 0x715d767080
	static void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0x6216c64 0x715d767160
	static void RetriggerableDelay(Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x62191dc 0x715d767240
	static void ResetGamepadAssignmentToController(int ControllerId);// 0x620a890 0x715d767320
	static void ResetGamepadAssignments();// 0x620a924 0x715d763a40
	static void RegisterForRemoteNotifications();// 0x620a22c 0x715d763b20
	static void QuitGame(Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0x6219434 0x715d763c00
	static void PrintWarning(FString inString);// 0x62199dc 0x715d763ce0
	static void PrintText(Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x6219a7c 0x715d763dc0
	static void PrintString(Object* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x6219d60 0x715d763ea0
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0x45c6aa0 0x715d765100
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0x45c6aa0 0x715d764e60
	static bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x621b41c 0x715d763f80
	static bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x621ae94 0x715d764060
	static bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x6208d9c 0x715d764140
	static bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x6209104 0x715d764220
	static FString NormalizeFilename(FString InFilename);// 0x621c890 0x715d764300
	static void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0x6218eec 0x715d7643e0
	static SoftObjectPath MakeSoftObjectPath(FString PathString);// 0x621bedc 0x715d7644c0
	static SoftClassPath MakeSoftClassPath(FString PathString);// 0x621bb20 0x715d7645a0
	static FText MakeLiteralText(FText Value);// 0x6219f70 0x715d764680
	static FString MakeLiteralString(FString Value);// 0x621a160 0x715d764760
	static FName MakeLiteralName(FName Value);// 0x621a314 0x715d764840
	static int MakeLiteralInt(int Value);// 0x621a4fc 0x715d764920
	static float MakeLiteralFloat(float Value);// 0x621a45c 0x715d764a00
	static byte MakeLiteralByte(byte Value);// 0x621a274 0x715d764ae0
	static bool MakeLiteralBool(bool Value);// 0x621a3b4 0x715d764bc0
	static void LoadInterstitialAd(int AdIdIndex);// 0x620addc 0x715d764ca0
	static class Object LoadClassAsset_Blocking(class Object AssetClass);// 0x621ad74 0x715d764d80
	static void LoadAssetClass(Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x621a59c 0x715d764f40
	static Object* LoadAsset_Blocking(Object* Asset);// 0x621b2fc 0x715d765020
	static void LoadAsset(Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x621a794 0x715d7651e0
	static bool LineTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x6212148 0x715d7652c0
	static bool LineTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x620fe24 0x715d7653a0
	static bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x62143bc 0x715d765480
	static bool LineTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x6211d38 0x715d765560
	static bool LineTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x620fa30 0x715d765640
	static bool LineTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x6213fd4 0x715d761d60
	static void LaunchURL(FString URL);// 0x620b070 0x715d761e40
	static void K2_UnPauseTimerHandle(Object* WorldContextObject, TimerHandle Handle);// 0x62182e0 0x715d761f20
	static void K2_UnPauseTimerDelegate(delegate Delegate);// 0x6218b34 0x715d762000
	static void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0x6217858 0x715d7620e0
	static bool K2_TimerExistsHandle(Object* WorldContextObject, TimerHandle Handle);// 0x6218028 0x715d7621c0
	static bool K2_TimerExistsDelegate(delegate Delegate);// 0x621890c 0x715d7622a0
	static bool K2_TimerExists(Object* Object, FString FunctionName);// 0x6217474 0x715d762380
	static TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x6218d20 0x715d762460
	static TimerHandle K2_SetTimer(Object* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x6217c00 0x715d762540
	static void K2_PauseTimerHandle(Object* WorldContextObject, TimerHandle Handle);// 0x62183b4 0x715d762620
	static void K2_PauseTimerDelegate(delegate Delegate);// 0x6218bd8 0x715d762700
	static void K2_PauseTimer(Object* Object, FString FunctionName);// 0x6217990 0x715d7627e0
	static bool K2_IsValidTimerHandle(TimerHandle Handle);// 0x62186fc 0x715d7628c0
	static bool K2_IsTimerPausedHandle(Object* WorldContextObject, TimerHandle Handle);// 0x6218110 0x715d7629a0
	static bool K2_IsTimerPausedDelegate(delegate Delegate);// 0x62189c4 0x715d762a80
	static bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0x62175c0 0x715d762b60
	static bool K2_IsTimerActiveHandle(Object* WorldContextObject, TimerHandle Handle);// 0x62181f8 0x715d762c40
	static bool K2_IsTimerActiveDelegate(delegate Delegate);// 0x6218a7c 0x715d762d20
	static bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0x621770c 0x715d762e00
	static TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0x6218648 0x715d762ee0
	static float K2_GetTimerRemainingTimeHandle(Object* WorldContextObject, TimerHandle Handle);// 0x6217e60 0x715d762fc0
	static float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0x62187a4 0x715d7630a0
	static float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0x62171e4 0x715d763180
	static float K2_GetTimerElapsedTimeHandle(Object* WorldContextObject, TimerHandle Handle);// 0x6217f44 0x715d763260
	static float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0x6218858 0x715d763340
	static float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0x621732c 0x715d763420
	static void K2_ClearTimerHandle(Object* WorldContextObject, TimerHandle Handle);// 0x6218574 0x715d763500
	static void K2_ClearTimerDelegate(delegate Delegate);// 0x6218c7c 0x715d7635e0
	static void K2_ClearTimer(Object* Object, FString FunctionName);// 0x6217ac8 0x715d7636c0
	static void K2_ClearAndInvalidateTimerHandle(Object* WorldContextObject, out TimerHandle Handle);// 0x6218488 0x715d7637a0
	static bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0x621b7b0 0x715d763880
	static bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0x621b228 0x715d763960
	static bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0x620905c 0x715d760080
	static bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x62093cc 0x715d760160
	static bool IsValidClass(class Object Class);// 0x621d334 0x715d760240
	static bool IsValid(const Object* Object);// 0x621d41c 0x715d760320
	static bool IsUnattended();// 0x620a07c 0x715d760400
	static bool IsStandalone(Object* WorldContextObject);// 0x621c2c8 0x715d7604e0
	static bool IsSplitScreen(Object* WorldContextObject);// 0x621c220 0x715d7605c0
	static bool IsServer(Object* WorldContextObject);// 0x621c418 0x715d7606a0
	static bool IsScreensaverEnabled();// 0x620ab44 0x715d760780
	static bool IsPackagedForDistribution();// 0x621c1e8 0x715d760860
	static bool IsLoggedIn(PlayerController* SpecificPlayer);// 0x620ab7c 0x715d760940
	static bool IsInterstitialAdRequested();// 0x620ad6c 0x715d760a20
	static bool IsInterstitialAdAvailable();// 0x620ada4 0x715d760b00
	static bool IsDedicatedServer(Object* WorldContextObject);// 0x621c370 0x715d760be0
	static bool IsControllerAssignedToGamepad(int ControllerId);// 0x620a7e8 0x715d760cc0
	static void HideAdBanner();// 0x620ae84 0x715d760da0
	static bool GetVolumeButtonsHandledBySystem();// 0x620a9d4 0x715d760e80
	static FString GetUniqueDeviceId();// 0x621c138 0x715d760f60
	static bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0x620b23c 0x715d761040
	static Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x6209a10 0x715d761120
	static class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x62098f4 0x715d761200
	static int GetRenderingMaterialQualityLevel();// 0x620b300 0x715d7612e0
	static int GetRenderingDetailMode();// 0x620b334 0x715d7613c0
	static FString GetProjectSavedDirectory();// 0x621cb60 0x715d7614a0
	static FString GetProjectDirectory();// 0x621ccc0 0x715d761580
	static FString GetProjectContentDirectory();// 0x621cc10 0x715d761660
	static void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x62088f4 0x715d761740
	static void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x6209474 0x715d761820
	static PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0x620968c 0x715d761900
	static PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0x620956c 0x715d7619e0
	static PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0x6209850 0x715d761ac0
	static PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0x62097ac 0x715d761ba0
	static FString[] GetPreferredLanguages();// 0x620a500 0x715d761c80
	static FString GetPlatformUserName();// 0x621c730 0x714904e780
	static FString GetPlatformUserDir();// 0x621c680 0x714904e860
	static FString GetPathName(const Object* Object);// 0x621d154 0x714904e940
	static Object* GetOuterObject(const Object* Object);// 0x621ced0 0x714904ea20
	static FString GetObjectName(const Object* Object);// 0x621d244 0x714904eb00
	static Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x6209bd0 0x714904ebe0
	static int GetMinYResolutionForUI();// 0x620b144 0x714904ecc0
	static int GetMinYResolutionFor3DView();// 0x620b110 0x714904eda0
	static FString GetLocalCurrencySymbol();// 0x620a240 0x714904ee80
	static FString GetLocalCurrencyCode();// 0x620a2f0 0x714904ef60
	static float GetGameTimeInSeconds(Object* WorldContextObject);// 0x621c4f4 0x714904f040
	static FString GetGamepadControllerName(int ControllerId);// 0x620a6f8 0x714904f120
	static FString GetGameName();// 0x621cd70 0x714904f200
	static FString GetGameBundleId();// 0x621c7e0 0x714904f2e0
	static int64 GetFrameCount();// 0x621c4c0 0x714904f3c0
	static FString GetEngineVersion();// 0x621ce20 0x714904f4a0
	static FString GetDisplayName(const Object* Object);// 0x621d064 0x714904f580
	static FString GetDeviceId();// 0x621c088 0x714904f660
	static FString GetDefaultLocale();// 0x620a3a0 0x714904f740
	static FString GetDefaultLanguage();// 0x620a450 0x714904f820
	static bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0x6208b0c 0x714904f900
	static bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0x620b178 0x714904f9e0
	static int GetConsoleVariableIntValue(FString VariableName);// 0x621964c 0x714904fac0
	static float GetConsoleVariableFloatValue(FString VariableName);// 0x62196fc 0x714904fba0
	static bool GetConsoleVariableBoolValue(FString VariableName);// 0x6219598 0x714904fc80
	static void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0x620b4a0 0x714904fd60
	static FString GetCommandLine();// 0x620a0b4 0x714904fe40
	static class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x6209b2c 0x714904ff20
	static FString GetClassDisplayName(class Object Class);// 0x621cf74 0x714904caa0
	static int GetAdIDCount();// 0x620ae98 0x714904cb80
	static void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0x620de64 0x714904cc60
	static void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0x620b368 0x714904cd40
	static void ForceCloseAdBanner();// 0x620ae70 0x714904ce20
	static void FlushPersistentDebugLines(Object* WorldContextObject);// 0x620bf78 0x714904cf00
	static void FlushDebugStrings(Object* WorldContextObject);// 0x620c204 0x714904cfe0
	static void ExecuteConsoleCommand(Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0x62197ac 0x714904d0c0
	static bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x621b55c 0x714904d1a0
	static bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x621afd4 0x714904d280
	static bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x6208e84 0x714904d360
	static bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x62091f0 0x714904d440
	static int EndTransaction();// 0x6209e30 0x714904d520
	static void DrawDebugString(Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0x620c298 0x714904d600
	static void DrawDebugSphere(Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x620cf60 0x714904d6e0
	static void DrawDebugPoint(Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0x620d7d0 0x714904d7c0
	static void DrawDebugPlane(Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0x620c00c 0x714904d8a0
	static void DrawDebugLine(Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0x620dc78 0x714904d980
	static void DrawDebugFrustum(Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0x620bda4 0x714904da60
	static void DrawDebugFloatHistoryTransform(Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x620ba48 0x714904db40
	static void DrawDebugFloatHistoryLocation(Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x620b830 0x714904dc20
	static void DrawDebugCylinder(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x620ccec 0x714904dd00
	static void DrawDebugCoordinateSystem(Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0x620d188 0x714904dde0
	static void DrawDebugConeInDegrees(Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x620c6f4 0x714904dec0
	static void DrawDebugCone(Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x620c9f0 0x714904dfa0
	static void DrawDebugCircle(Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0x620d970 0x714904e080
	static void DrawDebugCapsule(Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0x620c484 0x714904e160
	static void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0x620bc8c 0x714904e240
	static void DrawDebugBox(Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0x620d368 0x714904e320
	static void DrawDebugArrow(Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0x620d5a0 0x714904e400
	static bool DoesImplementInterface(Object* TestObject, class Interface Interface);// 0x621c598 0x714904e4e0
	static void Delay(Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x6219308 0x714904e5c0
	static void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0x620b628 0x714904e6a0
	static FString ConvertToRelativePath(FString Filename);// 0x621ca70 0x714904adc0
	static FString ConvertToAbsolutePath(FString Filename);// 0x621c980 0x714904aea0
	static Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0x621bc40 0x714904af80
	static FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0x621b69c 0x714904b060
	static Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0x621aca4 0x714904b140
	static FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0x621b114 0x714904b220
	static class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0x621abd4 0x714904b300
	static class Object Conv_SoftClassPathToSoftClassRef(out const SoftClassPath SoftClassPath);// 0x621b884 0x714904b3e0
	static FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0x6208f6c 0x714904b4c0
	static FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0x62092dc 0x714904b5a0
	static Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0x621aab8 0x714904b680
	static Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0x621bfd4 0x714904b760
	static class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0x621a98c 0x714904b840
	static void ControlScreensaver(bool bAllowScreenSaver);// 0x620aaa8 0x714904b920
	static bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x62147b4 0x714904ba00
	static bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x6214a34 0x714904bae0
	static void CollectGarbage();// 0x620afa8 0x714904bbc0
	static bool CapsuleTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x62106b0 0x714904bca0
	static bool CapsuleTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x620e438 0x714904bd80
	static bool CapsuleTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x62129d8 0x714904be60
	static bool CapsuleTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x621021c 0x714904bf40
	static bool CapsuleTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x620dfc0 0x714904c020
	static bool CapsuleTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x621255c 0x714904c100
	static bool CapsuleOverlapComponents(Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x6214cb4 0x714904c1e0
	static bool CapsuleOverlapActors(Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x6214f8c 0x714904c2c0
	static bool CanLaunchURL(FString URL);// 0x620afbc 0x714904c3a0
	static void CancelTransaction(const int Index);// 0x6209d9c 0x714904c480
	static void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0x621bd7c 0x714904c560
	static void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0x621b9c0 0x714904c640
	static bool BoxTraceSingleForObjects(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x6210fe8 0x714904c720
	static bool BoxTraceSingleByProfile(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x620ed38 0x714904c800
	static bool BoxTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x62132d8 0x714904c8e0
	static bool BoxTraceMultiForObjects(Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x6210b48 0x714904c9c0
	static bool BoxTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x620e8b4 0x71490490e0
	static bool BoxTraceMulti(Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x6212e54 0x71490491c0
	static bool BoxOverlapComponents(Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x6215264 0x71490492a0
	static bool BoxOverlapActors(Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x62154f8 0x7149049380
	static int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0x6209e64 0x7149049460
	static DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0x620b6bc 0x7149049540

--------------------------------
Class: UserActivity // 7149066580
	FString ActionName;//[Offset: 0x0, Size: 0x10] 0x715d777380

--------------------------------
Class: GenericStruct // 7149066640
	int Data;//[Offset: 0x0, Size: 0x4] 0x715d775880

--------------------------------
Class: CollisionProfileName // 7149066700
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715d774b80

--------------------------------
Class: TimerHandle // 717dfc6dc0
	uint64 Handle;//[Offset: 0x0, Size: 0x8] 0x715d75c880

--------------------------------
Class: DebugFloatHistory // 7149066940
	float[] Samples;//[Offset: 0x0, Size: 0x10] 0x7148cd25e0
	float MaxSamples;//[Offset: 0x10, Size: 0x4] 0x7148cae700
	float MinValue;//[Offset: 0x14, Size: 0x4] 0x7148cac680
	float MaxValue;//[Offset: 0x18, Size: 0x4] 0x7148cac700
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7148cac780

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object // 71a4a2a880
	static FText TextTrimTrailing(out const FText InText);// 0x6226478 0x715cbeb220
	static FText TextTrimPrecedingAndTrailing(out const FText InText);// 0x62262fc 0x715cbeb300
	static FText TextTrimPreceding(out const FText InText);// 0x62265f4 0x715cbeb3e0
	static FText TextToUpper(out const FText InText);// 0x6226770 0x715cbeb4c0
	static FText TextToLower(out const FText InText);// 0x62268ec 0x715cbeb5a0
	static bool TextIsTransient(out const FText InText);// 0x6226b7c 0x715cbeb680
	static bool TextIsFromStringTable(out const FText Text);// 0x622378c 0x715cbeb760
	static bool TextIsEmpty(out const FText InText);// 0x6226c90 0x715cbeb840
	static bool TextIsCultureInvariant(out const FText InText);// 0x6226a68 0x715cbeb920
	static FText TextFromStringTable(const FName TableId, FString Key);// 0x622362c 0x715cbeba00
	static bool StringTableIdAndKeyFromText(FText Text, out FName OutTableId, out FString OutKey);// 0x62233f4 0x715cbebae0
	static FText PolyglotDataToText(out const PolyglotTextData PolyglotData);// 0x6223094 0x715cbebbc0
	static bool NotEqual_TextText(out const FText A, out const FText B);// 0x6225b40 0x715cbebca0
	static bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x6225980 0x715cbebd80
	static void IsPolyglotDataValid(out const PolyglotTextData PolyglotData, out bool IsValid, out FText ErrorMessage);// 0x62231fc 0x715cbebe60
	static FText GetEmptyText();// 0x622622c 0x715cbebf40
	static FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0x62238a0 0x715cbec020
	static bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0x6226080 0x715cbec100
	static bool EqualEqual_TextText(out const FText A, out const FText B);// 0x6225ec0 0x715cbec1e0
	static bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x6225d00 0x715cbec2c0
	static FText Conv_VectorToText(Vector InVec);// 0x62276a8 0x715cbec3a0
	static FText Conv_Vector2dToText(Vector2D InVec);// 0x622759c 0x715cbec480
	static FText Conv_TransformToText(out const Transform InTrans);// 0x6227344 0x715cbec560
	static FString Conv_TextToString(out const FText InText);// 0x6226fd0 0x715cbec640
	static FText Conv_StringToText(FString inString);// 0x6226eb4 0x715cbec720
	static FText Conv_RotatorToText(Rotator InRot);// 0x622748c 0x715cbec800
	static FText Conv_ObjectToText(Object* InObj);// 0x6227234 0x715cbec8e0
	static FText Conv_NameToText(FName InName);// 0x6226da4 0x715cbec9c0
	static FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x622551c 0x715cbe90e0
	static FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x62252e0 0x715cbe91c0
	static FText Conv_FloatToText(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x6224fdc 0x715cbe92a0
	static FText Conv_ColorToText(LinearColor InColor);// 0x6227124 0x715cbe9380
	static FText Conv_ByteToText(byte Value);// 0x6225758 0x715cbe9460
	static FText Conv_BoolToText(bool InBool);// 0x6225868 0x715cbe9540
	static FText AsTimeZoneTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x6223d40 0x715cbe9620
	static FText AsTimeZoneDateTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x6223fc4 0x715cbe9700
	static FText AsTimeZoneDate_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x6224248 0x715cbe97e0
	static FText AsTimespan_Timespan(out const Timespan InTimespan);// 0x6223c24 0x715cbe98c0
	static FText AsTime_DateTime(out const DateTime In);// 0x6223ea8 0x715cbe99a0
	static FText AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x62244cc 0x715cbe9a80
	static FText AsDateTime_DateTime(out const DateTime In);// 0x622412c 0x715cbe9b60
	static FText AsDate_DateTime(out const DateTime InDateTime);// 0x62243b0 0x715cbe9c40
	static FText AsCurrencyBase(int BaseValue, FString currencyCode);// 0x6224e7c 0x715cbe9d20
	static FText AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString currencyCode);// 0x6224b24 0x715cbe9e00
	static FText AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString currencyCode);// 0x62247d0 0x715cbe9ee0

--------------------------------
Class: PolyglotTextData // 717dfca900
	enum Category;//[Offset: 0x0, Size: 0x1] 0x7172ba6280
	FString NativeCulture;//[Offset: 0x8, Size: 0x10] 0x717df8d480
	FString Namespace;//[Offset: 0x18, Size: 0x10] 0x717df8d500
	FString Key;//[Offset: 0x28, Size: 0x10] 0x717df8d580
	FString NativeString;//[Offset: 0x38, Size: 0x10] 0x717df8d600
	<FString,FString> LocalizedStrings;//[Offset: 0x48, Size: 0x50] 0x717dfca840
	bool bIsMinimalPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x717df8b680
	FText CachedText;//[Offset: 0xa0, Size: 0x18] 0x717df8b700

--------------------------------
Class: FormatArgumentData // 71490679c0
	FString ArgumentName;//[Offset: 0x0, Size: 0x10] 0x7148ca2100
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1] 0x7148ca0080
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18] 0x7148ca0100
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4] 0x7148ca0180
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4] 0x7148ca0200
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1] 0x7148cd0920

--------------------------------
Class: Layer.Object // 71a4a2a600
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x715cc04700
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x715cc04780
	LayerActorStats[] ActorStats;//[Offset: 0x38, Size: 0x10] 0x715cb28760

--------------------------------
Class: LayerActorStats // 715db1cc40
	class Object* Type;//[Offset: 0x0, Size: 0x8] 0x715daec860
	int Total;//[Offset: 0x8, Size: 0x4] 0x715db49700

--------------------------------
Class: LevelPartitionInterface.Interface.Object // 71a4a2fd80

--------------------------------
Class: LevelBounds.Actor.Object // 71a4a85100
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 0x8] 0x715cc05a80
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x715cc05b00

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object // 71a4a84c00

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object // 71a4a84700

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object // 71a4a84480
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x715cc07e80
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1] 0x715cc07f00
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x622cc68 0x715cbedc20
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x622ceac 0x715cbedd00

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object // 71a4a84200

--------------------------------
Class: LightmappedSurfaceCollection.Object // 71a4a83d00
	Model* SourceModel;//[Offset: 0x28, Size: 0x8] 0x715cc07b80
	int[] Surfaces;//[Offset: 0x30, Size: 0x10] 0x715cb28080

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object // 71a4a83a80

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object // 71a4a83800

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object // 71a4a83580

--------------------------------
Class: LightmassPortal.Actor.Object // 71a4a83300
	LightmassPortalComponent* PortalComponent;//[Offset: 0x220, Size: 0x8] 0x715cc07b00

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object // 71a4a83080
	BoxComponent* PreviewBox;//[Offset: 0x1f0, Size: 0x8] 0x715cc07a80

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object // 71a4a82e00
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18] 0x715cc07a00

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object // 71a4a82400

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4a81a00
	MaterialSpriteElement[] Elements;//[Offset: 0x418, Size: 0x10] 0x715cb2a4c0
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x6237974 0x715cbed7c0
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x6237778 0x715cbed8a0

--------------------------------
Class: MaterialSpriteElement // 715db1f580
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x715db4d100
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8] 0x715db4d180
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x715db4d200
	float BaseSizeX;//[Offset: 0x14, Size: 0x4] 0x715db4d280
	float BaseSizeY;//[Offset: 0x18, Size: 0x4] 0x715db4d300
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8] 0x715db4d380

--------------------------------
Class: MaterialExpression.Object // 71a4863580
	Material* Material;//[Offset: 0x28, Size: 0x8] 0x715cfa9a80
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8] 0x715cfa9b00
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cfa9b80

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object // 71a4a81780
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0d680

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object // 71a4a81500

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object // 71a4a81280
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc0d480
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc0d500
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x715cc0d580
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x715cc0d600

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object // 71a49a3300

--------------------------------
Class: MaterialExpressionAnisotropicShadingOutput.MaterialExpressionCustomOutput.MaterialExpression.Object // 71a4a81000
	ExpressionInput Inputs;//[Offset: 0x3c, Size: 0xc] 0x715cc0d400

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object // 71a4863800
	Texture* Texture;//[Offset: 0x40, Size: 0x8] 0x715cfa9900
	byte SamplerType;//[Offset: 0x48, Size: 0x1] 0x715cfa9980
	bool IsDefaultMeshpaintTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1] 0x715cfa9a00

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4863a80
	ExpressionInput Coordinates;//[Offset: 0x4c, Size: 0xc] 0x715cfab480
	ExpressionInput TextureObject;//[Offset: 0x60, Size: 0xc] 0x715cfab500
	ExpressionInput MipValue;//[Offset: 0x74, Size: 0xc] 0x715cfab580
	ExpressionInput CoordinatesDX;//[Offset: 0x88, Size: 0xc] 0x715cfa9500
	ExpressionInput CoordinatesDY;//[Offset: 0x9c, Size: 0xc] 0x715cfa9580
	ExpressionInput AutomaticViewMipBiasValue;//[Offset: 0xb0, Size: 0xc] 0x715cfa9600
	byte MipValueMode;//[Offset: 0xc4, Size: 0x1] 0x715cfa9680
	byte SamplerSource;//[Offset: 0xc5, Size: 0x1] 0x715cfa9700
	bool AutomaticViewMipBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc6, Size: 0x1] 0x715cfa9780
	byte ConstCoordinate;//[Offset: 0xc7, Size: 0x1] 0x715cfa9800
	int ConstMipValue;//[Offset: 0xc8, Size: 0x4] 0x715cfa9880

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4863d00
	FName ParameterName;//[Offset: 0xcc, Size: 0x8] 0x715cfab300
	Guid ExpressionGUID;//[Offset: 0xd4, Size: 0x10] 0x715cfab380
	FName Group;//[Offset: 0xe4, Size: 0x8] 0x715cfab400

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4863f80

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4a80d80
	float Threshold;//[Offset: 0xec, Size: 0x4] 0x715cc0d300
	byte Channel;//[Offset: 0xf0, Size: 0x1] 0x715cc0d380

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object // 71a4a80b00
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc0d200
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc0d280

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object // 71a4a80880
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0d180

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object // 71a4a80600
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0d100

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object // 71a4a80380
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0d080

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object // 71a4a80100
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0d000

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object // 71a4a8a380
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0cf80

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object // 71a4a8a100
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x715cc0ce80
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x715cc0cf00

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object // 71a4a89e80
	ExpressionInput Y;//[Offset: 0x3c, Size: 0xc] 0x715cc0cd80
	ExpressionInput X;//[Offset: 0x50, Size: 0xc] 0x715cc0ce00

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object // 71a4a89c00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0cd00

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object // 71a4a89980
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0xc] 0x715cc0cc80

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object // 71a4a89700

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object // 71a4a89480

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object // 71a4a89200
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0cc00

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object // 71a4a88f80
	ExpressionInput Temp;//[Offset: 0x3c, Size: 0xc] 0x715cc0cb80

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object // 71a4a88d00
	MaterialAttributesInput A;//[Offset: 0x3c, Size: 0x10] 0x715cc0c900
	MaterialAttributesInput B;//[Offset: 0x54, Size: 0x10] 0x715cc0c980
	ExpressionInput Alpha;//[Offset: 0x6c, Size: 0xc] 0x715cc0ca00
	byte PixelAttributeBlendType;//[Offset: 0x80, Size: 0x1] 0x715cc0ca80
	byte VertexAttributeBlendType;//[Offset: 0x81, Size: 0x1] 0x715cc0cb00

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object // 71a4a88a80
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x10] 0x715cc0c880

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object // 71a4a88800
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x715cc0e680
	ExpressionInput Height;//[Offset: 0x50, Size: 0xc] 0x715cc0e700
	ExpressionInput HeightRatioInput;//[Offset: 0x64, Size: 0xc] 0x715cc0c680
	float HeightRatio;//[Offset: 0x78, Size: 0x4] 0x715cc0c700
	float ReferencePlane;//[Offset: 0x7c, Size: 0x4] 0x715cc0c780
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x715cc0c800

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object // 71a4a88580

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object // 71a4a88300

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object // 71a4a88080
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0e600

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object // 71a4a87900
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x715cc0e500
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x715cc0e580

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object // 71a4a87b80
	LinearColor DefaultValue;//[Offset: 0x54, Size: 0x10] 0x715cc0e380
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x715cc0e400
	byte PrimitiveDataIndex;//[Offset: 0x65, Size: 0x1] 0x715cc0e480

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object // 71a4a87e00
	byte MaskChannel;//[Offset: 0x66, Size: 0x1] 0x715cc0e280
	ExpressionInput Input;//[Offset: 0x68, Size: 0xc] 0x715cc0e300

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object // 71a4a87680
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0df80
	ExpressionInput Min;//[Offset: 0x50, Size: 0xc] 0x715cc0e000
	ExpressionInput Max;//[Offset: 0x64, Size: 0xc] 0x715cc0e080
	byte ClampMode;//[Offset: 0x78, Size: 0x1] 0x715cc0e100
	float MinDefault;//[Offset: 0x7c, Size: 0x4] 0x715cc0e180
	float MaxDefault;//[Offset: 0x80, Size: 0x4] 0x715cc0e200

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object // 71a4a87400
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0df00

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object // 71a4a87180
	MaterialParameterCollection* Collection;//[Offset: 0x40, Size: 0x8] 0x715cc0dd80
	FName ParameterName;//[Offset: 0x48, Size: 0x8] 0x715cc0de00
	Guid ParameterId;//[Offset: 0x50, Size: 0x10] 0x715cc0de80

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object // 71a4a86f00
	int SizeX;//[Offset: 0x3c, Size: 0x4] 0x715cc0db00
	int SizeY;//[Offset: 0x40, Size: 0x4] 0x715cc0db80
	FString Text;//[Offset: 0x48, Size: 0x10] 0x715cc0dc00
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10] 0x715cc0dc80
	int FontSize;//[Offset: 0x68, Size: 0x4] 0x715cc0dd00

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object // 71a4a86c80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0d880
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cc0d900
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x715cc0d980
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x715cc0da00
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x715cc0da80

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object // 71a4a86a00
	float R;//[Offset: 0x3c, Size: 0x4] 0x715cc0d800

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object // 71a4a86780
	float R;//[Offset: 0x3c, Size: 0x4] 0x715cc0d700
	float G;//[Offset: 0x40, Size: 0x4] 0x715cc0d780

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object // 71a4a86500
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x715cc0f780

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object // 71a4a86280
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x715cc0f700

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object // 71a4a86000
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0f580
	float Bias;//[Offset: 0x50, Size: 0x4] 0x715cc0f600
	float Scale;//[Offset: 0x54, Size: 0x4] 0x715cc0f680

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object // 71a4a85d80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0f480
	float Period;//[Offset: 0x50, Size: 0x4] 0x715cc0f500

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object // 71a4a85b00
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc0f380
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc0f400

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object // 71a4a85600
	float DefaultValue;//[Offset: 0x54, Size: 0x4] 0x715cc0f200
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715cc0f280
	byte PrimitiveDataIndex;//[Offset: 0x59, Size: 0x1] 0x715cc0f300

--------------------------------
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object // 71a4a85880
	CurveLinearColor* Curve;//[Offset: 0x60, Size: 0x8] 0x715cc0f080
	CurveLinearColorAtlas* Atlas;//[Offset: 0x68, Size: 0x8] 0x715cc0f100
	ExpressionInput InputTime;//[Offset: 0x70, Size: 0xc] 0x715cc0f180

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object // 71a4a85380
	FString Code;//[Offset: 0x40, Size: 0x10] 0x715cc0ed80
	byte OutputType;//[Offset: 0x50, Size: 0x1] 0x715cc0ee00
	FString Description;//[Offset: 0x58, Size: 0x10] 0x715cc0ee80
	CustomInput[] Inputs;//[Offset: 0x68, Size: 0x10] 0x715cb2a2e0
	CustomDefine[] AdditionalDefines;//[Offset: 0x78, Size: 0x10] 0x715cb2a380
	FString[] IncludeFilePaths;//[Offset: 0x88, Size: 0x10] 0x715cb2a420

--------------------------------
Class: CustomInput // 715db1eec0
	FName InputName;//[Offset: 0x0, Size: 0x8] 0x715db4df80
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc] 0x715db4e000

--------------------------------
Class: CustomDefine // 715db1ef80
	FString DefineName;//[Offset: 0x0, Size: 0x10] 0x715db4e080
	FString DefineValue;//[Offset: 0x10, Size: 0x10] 0x715db4e100

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object // 71a4a8f600
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc] 0x715cc0ed00

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object // 71a4a8f380
	ExpressionInput Value;//[Offset: 0x3c, Size: 0xc] 0x715cc0ec80

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object // 71a4a8f100

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object // 71a4a8ee80

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object // 71a4a8ec00
	ExpressionInput TextureSize;//[Offset: 0x3c, Size: 0xc] 0x715cc0eb00
	float ConstWidth;//[Offset: 0x50, Size: 0x4] 0x715cc0eb80
	float ConstHeight;//[Offset: 0x54, Size: 0x4] 0x715cc0ec00

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object // 71a4a8e980

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object // 71a4a8e700
	ExpressionInput InOpacity;//[Offset: 0x3c, Size: 0xc] 0x715cc0e900
	ExpressionInput FadeDistance;//[Offset: 0x50, Size: 0xc] 0x715cc0e980
	float OpacityDefault;//[Offset: 0x64, Size: 0x4] 0x715cc0ea00
	float FadeDistanceDefault;//[Offset: 0x68, Size: 0x4] 0x715cc0ea80

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object // 71a4a8e480
	byte FunctionValue;//[Offset: 0x39, Size: 0x1] 0x715cc0e800
	ExpressionInput Depth;//[Offset: 0x3c, Size: 0xc] 0x715cc0e880

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object // 71a4a8e200
	ExpressionInput InXY;//[Offset: 0x3c, Size: 0xc] 0x715cc0e780

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object // 71a4a8df80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc0fe80
	ExpressionInput Fraction;//[Offset: 0x50, Size: 0xc] 0x715cc0ff00
	LinearColor LuminanceFactors;//[Offset: 0x64, Size: 0x10] 0x715cc0ff80

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object // 71a4a8dd00
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc0fd80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc0fe00

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object // 71a4a8da80

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object // 71a4a8d800
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x715cc0fd00

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object // 71a4a8d580
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x715cc0fc80

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object // 71a4a8d300
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc0fa80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc0fb00
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x715cc0fb80
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x715cc0fc00

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object // 71a4a8d080
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc0f980
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc0fa00

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object // 71a4a8ce00
	FString[] ParamNames;//[Offset: 0x40, Size: 0x10] 0x715cb2a240
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10] 0x715cc0f880
	uint32 ParameterIndex;//[Offset: 0x60, Size: 0x4] 0x715cc0f900

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object // 71a4a8cb80

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object // 71a4a8c900
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x715cc11000
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x715cc11080

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object // 71a4a8c680
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc10f80

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object // 71a4a8c400
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc10e80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc10f00

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object // 71a4a8c180
	Font* Font;//[Offset: 0x40, Size: 0x8] 0x715cc10d80
	int FontTexturePage;//[Offset: 0x48, Size: 0x4] 0x715cc10e00

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object // 71a4a8bf00
	FName ParameterName;//[Offset: 0x4c, Size: 0x8] 0x715cc10c00
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10] 0x715cc10c80
	FName Group;//[Offset: 0x64, Size: 0x8] 0x715cc10d00

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object // 71a4a8bc80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc10b80

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object // 71a4a8ba00
	ExpressionInput ExponentIn;//[Offset: 0x3c, Size: 0xc] 0x715cc10900
	float Exponent;//[Offset: 0x50, Size: 0x4] 0x715cc10980
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x54, Size: 0xc] 0x715cc10a00
	float BaseReflectFraction;//[Offset: 0x68, Size: 0x4] 0x715cc10a80
	ExpressionInput Normal;//[Offset: 0x6c, Size: 0xc] 0x715cc10b00

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object // 71a4a8b780
	ExpressionInput Preview;//[Offset: 0x3c, Size: 0xc] 0x715cc10480
	FName InputName;//[Offset: 0x50, Size: 0x8] 0x715cc10500
	FString Description;//[Offset: 0x58, Size: 0x10] 0x715cc10580
	Guid ID;//[Offset: 0x68, Size: 0x10] 0x715cc10600
	byte InputType;//[Offset: 0x78, Size: 0x1] 0x715cc10680
	Vector4 PreviewValue;//[Offset: 0x80, Size: 0x10] 0x715cc10700
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x715cc10780
	int SortPriority;//[Offset: 0x94, Size: 0x4] 0x715cc10800
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x715cc10880

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object // 71a4a8b500
	FName OutputName;//[Offset: 0x3c, Size: 0x8] 0x715cc10180
	FString Description;//[Offset: 0x48, Size: 0x10] 0x715cc10200
	int SortPriority;//[Offset: 0x58, Size: 0x4] 0x715cc10280
	ExpressionInput A;//[Offset: 0x5c, Size: 0xc] 0x715cc10300
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x715cc10380
	Guid ID;//[Offset: 0x74, Size: 0x10] 0x715cc10400

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object // 71a4a8b280
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x10] 0x715cc10080
	Guid[] AttributeGetTypes;//[Offset: 0x58, Size: 0x10] 0x715cb2a1a0

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object // 71a4a8b000
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x715cc12000
	ExpressionInput StaticIndirect;//[Offset: 0x50, Size: 0xc] 0x715cc12080
	ExpressionInput DynamicIndirect;//[Offset: 0x64, Size: 0xc] 0x715cc12100

--------------------------------
Class: MaterialExpressionHairAttributes.MaterialExpression.Object // 71a4a8ad80

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object // 71a4a8ab00
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc11c00
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc11c80
	ExpressionInput AGreaterThanB;//[Offset: 0x64, Size: 0xc] 0x715cc11d00
	ExpressionInput AEqualsB;//[Offset: 0x78, Size: 0xc] 0x715cc11d80
	ExpressionInput ALessThanB;//[Offset: 0x8c, Size: 0xc] 0x715cc11e00
	float EqualsThreshold;//[Offset: 0xa0, Size: 0x4] 0x715cc11e80
	float ConstB;//[Offset: 0xa4, Size: 0x4] 0x715cc11f00
	float ConstAEqualsB;//[Offset: 0xa8, Size: 0x4] 0x715cc11f80

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object // 71a4a8a880

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object // 71a4a8a600
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc] 0x715cc11b00
	ExpressionInput Lightmass;//[Offset: 0x50, Size: 0xc] 0x715cc11b80

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object // 71a4a8fd80

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object // 71a4a8fb00
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc11800
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc11880
	ExpressionInput Alpha;//[Offset: 0x64, Size: 0xc] 0x715cc11900
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x715cc11980
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x715cc11a00
	float ConstAlpha;//[Offset: 0x80, Size: 0x4] 0x715cc11a80

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object // 71a4a8f880
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc] 0x715cc11780

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object // 71a4a95100
	ExpressionInput X;//[Offset: 0x3c, Size: 0xc] 0x715cc11700

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object // 71a4a94e80
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0xc] 0x715cc12d80
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0xc] 0x715cc12e00
	ExpressionInput Specular;//[Offset: 0x64, Size: 0xc] 0x715cc12e80
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0xc] 0x715cc12f00
	ExpressionInput Anisotropy;//[Offset: 0x8c, Size: 0xc] 0x715cc12f80
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0xc] 0x715cc13000
	ExpressionInput Opacity;//[Offset: 0xb4, Size: 0xc] 0x715cc13080
	ExpressionInput OpacityMask;//[Offset: 0xc8, Size: 0xc] 0x715cc13100
	ExpressionInput Normal;//[Offset: 0xdc, Size: 0xc] 0x715cc13180
	ExpressionInput Tangent;//[Offset: 0xf0, Size: 0xc] 0x715cc11100
	ExpressionInput WorldPositionOffset;//[Offset: 0x104, Size: 0xc] 0x715cc11180
	ExpressionInput WorldDisplacement;//[Offset: 0x118, Size: 0xc] 0x715cc11200
	ExpressionInput TessellationMultiplier;//[Offset: 0x12c, Size: 0xc] 0x715cc11280
	ExpressionInput SubsurfaceColor;//[Offset: 0x140, Size: 0xc] 0x715cc11300
	ExpressionInput ClearCoat;//[Offset: 0x154, Size: 0xc] 0x715cc11380
	ExpressionInput ClearCoatRoughness;//[Offset: 0x168, Size: 0xc] 0x715cc11400
	ExpressionInput AmbientOcclusion;//[Offset: 0x17c, Size: 0xc] 0x715cc11480
	ExpressionInput Refraction;//[Offset: 0x190, Size: 0xc] 0x715cc11500
	ExpressionInput CustomizedUVs;//[Offset: 0x1a4, Size: 0xc] 0x715cc11580
	ExpressionInput PixelDepthOffset;//[Offset: 0x244, Size: 0xc] 0x715cc11600
	ExpressionInput ShadingModel;//[Offset: 0x258, Size: 0xc] 0x715cc11680

--------------------------------
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object // 71a4a94c00
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x715cc12d00

--------------------------------
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object // 71a4a94980
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x715cc12880
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x715cc12900
	MaterialAttributesInput Input;//[Offset: 0x54, Size: 0x10] 0x715cc12980
	MaterialLayersFunctions DefaultLayers;//[Offset: 0x70, Size: 0x40] 0x715cc12a00
	MaterialExpressionMaterialFunctionCall*[] LayerCallers;//[Offset: 0xb0, Size: 0x10] 0x715cb2a060
	int NumActiveLayerCallers;//[Offset: 0xc0, Size: 0x4] 0x715cc12b00
	MaterialExpressionMaterialFunctionCall*[] BlendCallers;//[Offset: 0xc8, Size: 0x10] 0x715cb2a100
	int NumActiveBlendCallers;//[Offset: 0xd8, Size: 0x4] 0x715cc12c00
	bool bIsLayerGraphBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1] 0x715cc12c80

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object // 71a4a94700
	MaterialFunctionInterface* MaterialFunction;//[Offset: 0x40, Size: 0x8] 0x715cc12780
	MaterialParameterInfo FunctionParameterInfo;//[Offset: 0x48, Size: 0x10] 0x715cc12800

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object // 71a4a94480

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object // 71a4a94200
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0xc] 0x715cc12680
	ExpressionInput MaterialProxy;//[Offset: 0x50, Size: 0xc] 0x715cc12700

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object // 71a4a93f80
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc12480
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc12500
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x715cc12580
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x715cc12600

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object // 71a4a93d00
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc12280
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc12300
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x715cc12380
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x715cc12400

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object // 71a4a93a80
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc14180
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc14200
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x715cc12180
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x715cc12200

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object // 71a4a93800
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x715cc13b80
	ExpressionInput FilterWidth;//[Offset: 0x50, Size: 0xc] 0x715cc13c00
	float Scale;//[Offset: 0x64, Size: 0x4] 0x715cc13c80
	int Quality;//[Offset: 0x68, Size: 0x4] 0x715cc13d00
	byte NoiseFunction;//[Offset: 0x6c, Size: 0x1] 0x715cc13d80
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1] 0x715cc13e00
	int Levels;//[Offset: 0x70, Size: 0x4] 0x715cc13e80
	float OutputMin;//[Offset: 0x74, Size: 0x4] 0x715cc13f00
	float OutputMax;//[Offset: 0x78, Size: 0x4] 0x715cc13f80
	float LevelScale;//[Offset: 0x7c, Size: 0x4] 0x715cc14000
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cc14080
	uint32 RepeatSize;//[Offset: 0x84, Size: 0x4] 0x715cc14100

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object // 71a4a93580
	ExpressionInput VectorInput;//[Offset: 0x3c, Size: 0xc] 0x715cc13b00

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object // 71a4a93300

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object // 71a4a93080

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object // 71a4a92e00

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object // 71a4a92b80

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object // 71a4a92900
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc13a80

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object // 71a4a92680
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x715cc13700
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc] 0x715cc13780
	ExpressionInput Speed;//[Offset: 0x64, Size: 0xc] 0x715cc13800
	float SpeedX;//[Offset: 0x78, Size: 0x4] 0x715cc13880
	float SpeedY;//[Offset: 0x7c, Size: 0x4] 0x715cc13900
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x715cc13980
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x715cc13a00

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object // 71a4a92400

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object // 71a4a92180

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object // 71a4a91f00

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object // 71a4a91c80

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object // 71a4a91a00

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object // 71a4a91780

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object // 71a4a91500

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object // 71a4a91280

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object // 71a4a91000

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object // 71a4a90d80

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4a90b00
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1] 0x715cc13680

--------------------------------
Class: MaterialExpressionParticleSubUVProperties.MaterialExpression.Object // 71a4a90880

--------------------------------
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object // 71a4a90600
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0xc] 0x715cc13500
	float ConstDefaultValue;//[Offset: 0x50, Size: 0x4] 0x715cc13580
	uint32 DataIndex;//[Offset: 0x54, Size: 0x4] 0x715cc13600

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object // 71a4a90380

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object // 71a4a90100

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object // 71a4a9a380

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object // 71a4a9a100

--------------------------------
Class: MaterialExpressionPlatformSwitch.MaterialExpression.Object // 71a4a99e80
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x715cc13400
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x715cc13480

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object // 71a4a99c00
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc] 0x715cc13280
	ExpressionInput Exponent;//[Offset: 0x50, Size: 0xc] 0x715cc13300
	float ConstExponent;//[Offset: 0x64, Size: 0x4] 0x715cc13380

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object // 71a4a99980

--------------------------------
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object // 71a4a99700

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object // 71a4a99480

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object // 71a4a99200

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object // 71a4a98f80
	ExpressionInput CurrentFrame;//[Offset: 0x3c, Size: 0xc] 0x715cc15280
	ExpressionInput PreviousFrame;//[Offset: 0x50, Size: 0xc] 0x715cc13200

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object // 71a4a98d00
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x715cc15180
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x715cc15200

--------------------------------
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object // 71a4a98a80
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0xc] 0x715cc15080
	ExpressionInput RayTraced;//[Offset: 0x50, Size: 0xc] 0x715cc15100

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object // 71a4a98800
	ExpressionInput CustomWorldNormal;//[Offset: 0x3c, Size: 0xc] 0x715cc14f80
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cc15000

--------------------------------
Class: MaterialExpressionReroute.MaterialExpression.Object // 71a4a98580
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc14f00

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object // 71a4a98300
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x3c, Size: 0xc] 0x715cc14c80
	ExpressionInput RotationAngle;//[Offset: 0x50, Size: 0xc] 0x715cc14d00
	ExpressionInput PivotPoint;//[Offset: 0x64, Size: 0xc] 0x715cc14d80
	ExpressionInput Position;//[Offset: 0x78, Size: 0xc] 0x715cc14e00
	float Period;//[Offset: 0x8c, Size: 0x4] 0x715cc14e80

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object // 71a4a98080
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0xc] 0x715cc14980
	ExpressionInput Time;//[Offset: 0x50, Size: 0xc] 0x715cc14a00
	float CenterX;//[Offset: 0x64, Size: 0x4] 0x715cc14a80
	float CenterY;//[Offset: 0x68, Size: 0x4] 0x715cc14b00
	float Speed;//[Offset: 0x6c, Size: 0x4] 0x715cc14b80
	uint32 ConstCoordinate;//[Offset: 0x70, Size: 0x4] 0x715cc14c00

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object // 71a4a97e00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc14900

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object // 71a4a97b80
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0xc] 0x715cc14580
	ExpressionInput Specular;//[Offset: 0x50, Size: 0xc] 0x715cc14600
	ExpressionInput Roughness;//[Offset: 0x64, Size: 0xc] 0x715cc14680
	ExpressionInput Normal;//[Offset: 0x78, Size: 0xc] 0x715cc14700
	ExpressionInput WorldHeight;//[Offset: 0x8c, Size: 0xc] 0x715cc14780
	ExpressionInput Opacity;//[Offset: 0xa0, Size: 0xc] 0x715cc14800
	ExpressionInput Mask;//[Offset: 0xb4, Size: 0xc] 0x715cc14880

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureReplace.MaterialExpression.Object // 71a4a97900
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x715cc14480
	ExpressionInput VirtualTextureOutput;//[Offset: 0x50, Size: 0xc] 0x715cc14500

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object // 71a4a97680
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x715cc16200
	ExpressionInput WorldPosition;//[Offset: 0x50, Size: 0xc] 0x715cc16280
	ExpressionInput MipValue;//[Offset: 0x64, Size: 0xc] 0x715cc16300
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x78, Size: 0x8] 0x715cc14280
	enum MaterialType;//[Offset: 0x80, Size: 0x1] 0x715cb29fc0
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x715cc14380
	byte MipValueMode;//[Offset: 0x82, Size: 0x1] 0x715cc14400

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object // 71a4a97400
	FName ParameterName;//[Offset: 0x84, Size: 0x8] 0x715cc16080
	Guid ExpressionGUID;//[Offset: 0x8c, Size: 0x10] 0x715cc16100
	FName Group;//[Offset: 0x9c, Size: 0x8] 0x715cc16180

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object // 71a4a97180
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc16000

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object // 71a4a96f00
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x715cc15e00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc15e80
	ExpressionInput OffsetFraction;//[Offset: 0x50, Size: 0xc] 0x715cc15f00
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x715cc15f80

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object // 71a4a96c80
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x715cc15c00
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc15c80
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0xc] 0x715cc15d00
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x715cc15d80

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object // 71a4a96a00

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object // 71a4a96780
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0xc] 0x715cc15a80
	byte SceneTextureId;//[Offset: 0x50, Size: 0x1] 0x715cc15b00
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715cc15b80

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object // 71a4a96500

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object // 71a4a96280
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x715cb29e80
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10] 0x715cb29f20

--------------------------------
Class: MaterialExpressionShaderStageSwitch.MaterialExpression.Object // 71a4a96000
	ExpressionInput PixelShader;//[Offset: 0x3c, Size: 0xc] 0x715cc15880
	ExpressionInput VertexShader;//[Offset: 0x50, Size: 0xc] 0x715cc15900

--------------------------------
Class: MaterialExpressionShadingModel.MaterialExpression.Object // 71a4a95d80
	byte ShadingModel;//[Offset: 0x39, Size: 0x1] 0x715cc15800

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object // 71a4a95b00
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x715cc15700
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0xc] 0x715cc15780

--------------------------------
Class: MaterialExpressionShadowReplace.MaterialExpression.Object // 71a4a95880
	ExpressionInput Default;//[Offset: 0x3c, Size: 0xc] 0x715cc15600
	ExpressionInput Shadow;//[Offset: 0x50, Size: 0xc] 0x715cc15680

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object // 71a4a95600
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc15580

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object // 71a4a95380
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc15480
	float Period;//[Offset: 0x50, Size: 0x4] 0x715cc15500

--------------------------------
Class: MaterialExpressionSingleLayerWaterMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object // 71a4a9f600
	ExpressionInput ScatteringCoefficients;//[Offset: 0x3c, Size: 0xc] 0x715cc15300
	ExpressionInput AbsorptionCoefficients;//[Offset: 0x50, Size: 0xc] 0x715cc15380
	ExpressionInput PhaseG;//[Offset: 0x64, Size: 0xc] 0x715cc15400

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDirection.MaterialExpression.Object // 71a4a9f380
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x715cc17380

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object // 71a4a9f100
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x715cc17280
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0xc] 0x715cc17300

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDiskLuminance.MaterialExpression.Object // 71a4a9ee80
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x715cc17200

--------------------------------
Class: MaterialExpressionSkyAtmosphereAerialPerspective.MaterialExpression.Object // 71a4a9ec00
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0xc] 0x715cc17180

--------------------------------
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object // 71a4a9e980

--------------------------------
Class: MaterialExpressionSkyAtmosphereViewLuminance.MaterialExpression.Object // 71a4a9e700

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object // 71a4a9e480
	ExpressionInput Cell;//[Offset: 0x3c, Size: 0xc] 0x715cc16f00
	ExpressionInput Index;//[Offset: 0x50, Size: 0xc] 0x715cc16f80
	ExpressionInput Seed;//[Offset: 0x64, Size: 0xc] 0x715cc17000
	uint32 ConstIndex;//[Offset: 0x78, Size: 0x4] 0x715cc17080
	Vector2D ConstSeed;//[Offset: 0x7c, Size: 0x8] 0x715cc17100

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object // 71a4a9e200
	ExpressionInput GeometryInput;//[Offset: 0x3c, Size: 0xc] 0x715cc16a80
	ExpressionInput WindInput;//[Offset: 0x50, Size: 0xc] 0x715cc16b00
	ExpressionInput LODInput;//[Offset: 0x64, Size: 0xc] 0x715cc16b80
	ExpressionInput ExtraBendWS;//[Offset: 0x78, Size: 0xc] 0x715cc16c00
	byte GeometryType;//[Offset: 0x8c, Size: 0x1] 0x715cc16c80
	byte WindType;//[Offset: 0x8d, Size: 0x1] 0x715cc16d00
	byte LODType;//[Offset: 0x8e, Size: 0x1] 0x715cc16d80
	float BillboardThreshold;//[Offset: 0x90, Size: 0x4] 0x715cc16e00
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x715cc16e80

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object // 71a4a9df80
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc16780
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc16800
	ExpressionInput Radius;//[Offset: 0x64, Size: 0xc] 0x715cc16880
	ExpressionInput Hardness;//[Offset: 0x78, Size: 0xc] 0x715cc16900
	float AttenuationRadius;//[Offset: 0x8c, Size: 0x4] 0x715cc16980
	float HardnessPercent;//[Offset: 0x90, Size: 0x4] 0x715cc16a00

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object // 71a4a9dd00
	ExpressionInput Density;//[Offset: 0x3c, Size: 0xc] 0x715cc16680
	float ConstantDensity;//[Offset: 0x50, Size: 0x4] 0x715cc16700

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object // 71a4a9da80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc16600

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object // 71a4a9d800
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x715cc16580

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object // 71a4a9d580
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x715cc16500

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object // 71a4a9d300
	ExpressionInput Input;//[Offset: 0x54, Size: 0xc] 0x715cc18380
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cc18400
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x715cc16380
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x715cc16400
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x715cc16480

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object // 71a4a9d080
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x715cc18180
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc18200
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc18280
	ExpressionInput Value;//[Offset: 0x64, Size: 0xc] 0x715cc18300

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object // 71a4a9ce00
	ExpressionInput A;//[Offset: 0x58, Size: 0xc] 0x715cc18080
	ExpressionInput B;//[Offset: 0x6c, Size: 0xc] 0x715cc18100

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object // 71a4a9cb80
	ExpressionInput A;//[Offset: 0x3c, Size: 0xc] 0x715cc17e80
	ExpressionInput B;//[Offset: 0x50, Size: 0xc] 0x715cc17f00
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x715cc17f80
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x715cc18000

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object // 71a4a9c900
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc17d80
	float Period;//[Offset: 0x50, Size: 0x4] 0x715cc17e00

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object // 71a4a9c680
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc17d00

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object // 71a4a9c400
	ExpressionInput Index;//[Offset: 0x3c, Size: 0xc] 0x715cc17b00
	ExpressionInput Seed;//[Offset: 0x50, Size: 0xc] 0x715cc17b80
	uint32 ConstIndex;//[Offset: 0x64, Size: 0x4] 0x715cc17c00
	Vector2D ConstSeed;//[Offset: 0x68, Size: 0x8] 0x715cc17c80

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object // 71a4a9c180
	int CoordinateIndex;//[Offset: 0x3c, Size: 0x4] 0x715cc17880
	float UTiling;//[Offset: 0x40, Size: 0x4] 0x715cc17900
	float VTiling;//[Offset: 0x44, Size: 0x4] 0x715cc17980
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715cc17a00
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x715cc17a80

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4a9bf00

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4a9bc80

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object // 71a4a9ba00
	ExpressionInput TextureObject;//[Offset: 0x3c, Size: 0xc] 0x715cc17780
	byte Property;//[Offset: 0x50, Size: 0x1] 0x715cc17800

--------------------------------
Class: MaterialExpressionTextureSampleParameter2DArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4a9b780

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4a9b500

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4a9b280
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xec, Size: 0x1] 0x715cc17700

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4a9b000

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object // 71a4ae6000

--------------------------------
Class: MaterialExpressionThinTranslucentMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object // 71a4a9ad80
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0xc] 0x715cc17680

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object // 71a4a9ab00
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x715cc17500
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x715cc17580
	float Period;//[Offset: 0x3c, Size: 0x4] 0x715cc17600

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object // 71a4a9a880
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc19480
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x715cc17400
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x715cc17480

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object // 71a4a9a600
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc19300
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x715cc19380
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x715cc19400

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object // 71a4a9fd80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc19280

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object // 71a4a9fb00

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object // 71a4a9f880
	ExpressionInput Position;//[Offset: 0x3c, Size: 0xc] 0x715cc19000
	byte NoiseFunction;//[Offset: 0x50, Size: 0x1] 0x715cc19080
	int Quality;//[Offset: 0x54, Size: 0x4] 0x715cc19100
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x715cc19180
	uint32 TileSize;//[Offset: 0x5c, Size: 0x4] 0x715cc19200

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object // 71a4aa5100

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object // 71a4aa4e80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0xc] 0x715cc18f80

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object // 71a4aa4c00

--------------------------------
Class: MaterialExpressionVertexTangentWS.MaterialExpression.Object // 71a4aa4980

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object // 71a4aa4700
	byte Property;//[Offset: 0x39, Size: 0x1] 0x715cc18f00

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object // 71a4aa4480

--------------------------------
Class: MaterialExpressionVirtualTextureFeatureSwitch.MaterialExpression.Object // 71a4aa4200
	ExpressionInput No;//[Offset: 0x3c, Size: 0xc] 0x715cc18e00
	ExpressionInput Yes;//[Offset: 0x50, Size: 0xc] 0x715cc18e80

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object // 71a4aa3f80
	byte WorldPositionShaderOffset;//[Offset: 0x39, Size: 0x1] 0x715cc18d80

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object // 71a4aa3800
	MaterialFunctionInterface* Parent;//[Offset: 0x40, Size: 0x8] 0x715cc18600
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8] 0x715cc18680
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10] 0x715cb29980
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10] 0x715cb29a20
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70, Size: 0x10] 0x715cb29ac0
	FontParameterValue[] FontParameterValues;//[Offset: 0x80, Size: 0x10] 0x715cb29b60
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0x90, Size: 0x10] 0x715cb29c00
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xa0, Size: 0x10] 0x715cb29ca0
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0xb0, Size: 0x10] 0x715cb29d40

--------------------------------
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object // 71a4aa3580

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object // 71a4aa3300

--------------------------------
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object // 71a4aa3080

--------------------------------
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object // 71a4aa2e00

--------------------------------
Class: MaterialInstanceActor.Actor.Object // 71a4aa2b80
	Actor*[] TargetActors;//[Offset: 0x220, Size: 0x10] 0x715cb298e0

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object // 71a499fb00
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x408, Size: 0x8] 0x715ca94b80
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x6259f8c 0x715ca805c0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x625a03c 0x715ca806a0
	float K2_GetScalarParameterValue(FName ParameterName);// 0x625a0e8 0x715ca80780

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object // 71a4aa1f00
	CameraAnim* CameraAnim;//[Offset: 0x2c8, Size: 0x8] 0x715cc1c400

--------------------------------
Class: MatineeAnimInterface.Interface.Object // 71a4aa1c80

--------------------------------
Class: MatineeInterface.Interface.Object // 71a4aa1a00

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object // 71a4aa1780

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object // 71a4aa1500
	FName MeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x715cc1c380

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object // 71a4aa1280
	static void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0x62661e4 0x715cbef580
	static void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0x626643c 0x715cbef660
	static void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0x6266278 0x715cbef740

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object // 71a4aa1000
	PurchaseInfo[] AvailableProducts;//[Offset: 0x38, Size: 0x10] 0x715cb29480
	FString LastError;//[Offset: 0x48, Size: 0x10] 0x715cc1be00
	FString LastErrorSolution;//[Offset: 0x58, Size: 0x10] 0x715cc1be80

--------------------------------
Class: PurchaseInfo // 715db1fe80
	FString Identifier;//[Offset: 0x0, Size: 0x10] 0x715ce63080
	FString DisplayName;//[Offset: 0x10, Size: 0x10] 0x715ce63100
	FString DisplayDescription;//[Offset: 0x20, Size: 0x10] 0x715ce63180
	FString DisplayPrice;//[Offset: 0x30, Size: 0x10] 0x715ce61100

--------------------------------
Class: NavAgentInterface.Interface.Object // 71a4aa0880

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object // 71a4aa0380

--------------------------------
Class: NavigationDataInterface.Interface.Object // 71a4aaa380

--------------------------------
Class: NullNavSysConfig.NavigationSystemConfig.Object // 71a4aa9980

--------------------------------
Class: NavLinkDefinition.Object // 71a4aa9700
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10] 0x715cb29340
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10] 0x715cb293e0

--------------------------------
Class: NavigationLink.NavigationLinkBase // 715ce71840
	Vector Left;//[Offset: 0x30, Size: 0xc] 0x715ce66080
	Vector Right;//[Offset: 0x3c, Size: 0xc] 0x715ce66100

--------------------------------
Class: NavigationLinkBase // 715db1f880
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4] 0x715ce64280
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4] 0x715ce64300
	float SnapRadius;//[Offset: 0xc, Size: 0x4] 0x715ce64380
	float SnapHeight;//[Offset: 0x10, Size: 0x4] 0x715ce64400
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4] 0x715ce64480
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x715ce64500
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x715ce64580
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x715ce64600
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x715ce64680
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1] 0x715ce64700
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1] 0x715ce64780
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1] 0x715ce64800
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1] 0x715ce64880
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x715ce64900
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x715ce64980
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x715ce64a00
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1] 0x715ce64a80
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1] 0x715ce64b00
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1] 0x715ce64b80
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1] 0x715ce64c00
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1] 0x715ce64c80
	byte Direction;//[Offset: 0x1c, Size: 0x1] 0x715ce64d00
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x715ce64d80
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x715ce64e00
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1] 0x715ce64e80
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1] 0x715ce64f00
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1] 0x715ce64f80
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1] 0x715ce65000
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1] 0x715ce65080
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1] 0x715ce65100
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1] 0x715ce65180
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1] 0x715ce65200
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8] 0x715daedd00

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase // 715db1f7c0
	Vector LeftStart;//[Offset: 0x30, Size: 0xc] 0x715ce66180
	Vector LeftEnd;//[Offset: 0x3c, Size: 0xc] 0x715ce66200
	Vector RightStart;//[Offset: 0x48, Size: 0xc] 0x715ce66280
	Vector RightEnd;//[Offset: 0x54, Size: 0xc] 0x715ce66300

--------------------------------
Class: NavPathObserverInterface.Interface.Object // 71a4aa9480

--------------------------------
Class: NavRelevantInterface.Interface.Object // 71a4aa9200

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object // 71a4aa8f80

--------------------------------
Class: NetPushModelHelpers.BlueprintFunctionLibrary.Object // 71a4aa8d00
	static void MarkPropertyDirtyFromRepIndex(Object* Object, int RepIndex, FName PropertyName);// 0x626ff74 0x715cbef3c0
	static void MarkPropertyDirty(Object* Object, FName PropertyName);// 0x6270090 0x715cbef4a0

--------------------------------
Class: NetworkPredictionInterface.Interface.Object // 71a4aa8a80

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object // 71a4aa8800
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cc1d280
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x715cc1d300
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4] 0x715cc1d380
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4] 0x715cc1d400
	NetworkEmulationProfileDescription[] NetworkEmulationProfiles;//[Offset: 0x48, Size: 0x10] 0x715cb292a0

--------------------------------
Class: NetworkEmulationProfileDescription // 715ce71600
	FString ProfileName;//[Offset: 0x0, Size: 0x10] 0x715ce65500
	FString ToolTip;//[Offset: 0x10, Size: 0x10] 0x715ce65580

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object // 71a4aa8300

--------------------------------
Class: Note.Actor.Object // 71a4aa8080

--------------------------------
Class: ObjectLibrary.Object // 71a4aa7e00
	class Object* ObjectBaseClass;//[Offset: 0x28, Size: 0x8] 0x715cb290c0
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715cc1cc00
	Object*[] Objects;//[Offset: 0x38, Size: 0x10] 0x715cb29160
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10] 0x715cb29200
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715cc1cd80
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x715cc1ce00

--------------------------------
Class: ObjectReferencer.Object // 71a4aa7b80
	Object*[] ReferencedObjects;//[Offset: 0x28, Size: 0x10] 0x715cb2b960

--------------------------------
Class: ObjectTraceWorldSubsystem.WorldSubsystem.Subsystem.Object // 71a4aa7900

--------------------------------
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4833f80

--------------------------------
Class: OnlineEngineInterface.Object // 71a4839700

--------------------------------
Class: PackageMapClient.PackageMap.Object // 71a4aa7680

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object // 71a4aa7400
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x265, Size: 0x1] 0x715cc1c880
	float DamagePerSec;//[Offset: 0x268, Size: 0x4] 0x715cc1c900
	class DamageType* DamageType;//[Offset: 0x270, Size: 0x8] 0x715cb2b8c0
	float PainInterval;//[Offset: 0x278, Size: 0x4] 0x715cc1c980
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1] 0x715cc1ca00
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 0x1] 0x715cc1ca80
	Controller* DamageInstigator;//[Offset: 0x280, Size: 0x8] 0x715cc1cb00

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object // 71a4aa6500
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x715cc1f500

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object // 71a4aa6780
	RawDistributionVector Acceleration;//[Offset: 0x30, Size: 0x48] 0x715cc1f400
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715cc1f480

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object // 71a4aa6280
	Vector Acceleration;//[Offset: 0x2c, Size: 0xc] 0x715cc1f380

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object // 71a4aa6000
	DistributionFloat* DragCoefficient;//[Offset: 0x30, Size: 0x8] 0x715cc1f280
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x38, Size: 0x30] 0x715cc1f300

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object // 71a4aa5d80
	DistributionFloat* DragScale;//[Offset: 0x30, Size: 0x8] 0x715cc1f180
	RawDistributionFloat DragScaleRaw;//[Offset: 0x38, Size: 0x30] 0x715cc1f200

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object // 71a4aa5b00
	RawDistributionVector AccelOverLife;//[Offset: 0x30, Size: 0x48] 0x715cc1f100

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object // 71a4aa5880

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object // 71a4aa5600
	Vector EndPoint0;//[Offset: 0x2c, Size: 0xc] 0x715cc1ef00
	Vector EndPoint1;//[Offset: 0x38, Size: 0xc] 0x715cc1ef80
	RawDistributionFloat Range;//[Offset: 0x48, Size: 0x30] 0x715cc1f000
	RawDistributionFloat Strength;//[Offset: 0x78, Size: 0x30] 0x715cc1f080

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object // 71a4aa5380
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x715cc1ea80
	RawDistributionFloat Range;//[Offset: 0x38, Size: 0x30] 0x715cc1eb00
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cc1eb80
	RawDistributionFloat Strength;//[Offset: 0x70, Size: 0x30] 0x715cc1ec00
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x715cc1ec80
	byte SelectionMethod;//[Offset: 0xa1, Size: 0x1] 0x715cc1ed00
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1] 0x715cc1ed80
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1] 0x715cc1ee00
	int LastSelIndex;//[Offset: 0xa4, Size: 0x4] 0x715cc1ee80

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object // 71a4aaf600
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x48] 0x715cc1fc80
	RawDistributionFloat Range;//[Offset: 0x78, Size: 0x30] 0x715cc1fd00
	RawDistributionFloat Strength;//[Offset: 0xa8, Size: 0x30] 0x715cc1fd80
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x715cc1fe00
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x715cc1fe80
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1] 0x715cc1ff00
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1] 0x715cc1ff80
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd8, Size: 0x1] 0x715cc1e780
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd8, Size: 0x1] 0x715cc1e800
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd8, Size: 0x1] 0x715cc1e880
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd8, Size: 0x1] 0x715cc1e900
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1] 0x715cc1e980
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9, Size: 0x1] 0x715cc1ea00

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object // 71a4aaf380
	Vector Position;//[Offset: 0x2c, Size: 0xc] 0x715cc1fa80
	float Radius;//[Offset: 0x38, Size: 0x4] 0x715cc1fb00
	DistributionFloat* Strength;//[Offset: 0x40, Size: 0x8] 0x715cc1fb80
	RawDistributionFloat StrengthRaw;//[Offset: 0x48, Size: 0x30] 0x715cc1fc00

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object // 71a4aaf100

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object // 71a4aaee80
	byte ModifierType;//[Offset: 0x2b, Size: 0x1] 0x715cc20f80
	BeamModifierOptions PositionOptions;//[Offset: 0x2c, Size: 0x4] 0x715cc21000
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x48] 0x715cc21080
	BeamModifierOptions TangentOptions;//[Offset: 0x78, Size: 0x4] 0x715cc1f800
	RawDistributionVector Tangent;//[Offset: 0x80, Size: 0x48] 0x715cc1f880
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x715cc1f900
	BeamModifierOptions StrengthOptions;//[Offset: 0xcc, Size: 0x4] 0x715cc1f980
	RawDistributionFloat Strength;//[Offset: 0xd0, Size: 0x30] 0x715cc1fa00

--------------------------------
Class: BeamModifierOptions // 715ce71240
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715ce66e00
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715ce66e80
	bool bLock;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715ce66f00

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object // 71a4aaec00
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x715cc20580
	int Frequency;//[Offset: 0x2c, Size: 0x4] 0x715cc20600
	int Frequency_LowRange;//[Offset: 0x30, Size: 0x4] 0x715cc20680
	RawDistributionVector NoiseRange;//[Offset: 0x38, Size: 0x48] 0x715cc20700
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x80, Size: 0x30] 0x715cc20780
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715cc20800
	RawDistributionVector NoiseSpeed;//[Offset: 0xb8, Size: 0x48] 0x715cc20880
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x715cc20900
	float NoiseLockRadius;//[Offset: 0x104, Size: 0x4] 0x715cc20980
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x715cc20a00
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x715cc20a80
	float NoiseLockTime;//[Offset: 0x10c, Size: 0x4] 0x715cc20b00
	float NoiseTension;//[Offset: 0x110, Size: 0x4] 0x715cc20b80
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1] 0x715cc20c00
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0x118, Size: 0x30] 0x715cc20c80
	int NoiseTessellation;//[Offset: 0x148, Size: 0x4] 0x715cc20d00
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x715cc20d80
	float FrequencyDistance;//[Offset: 0x150, Size: 0x4] 0x715cc20e00
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1] 0x715cc20e80
	RawDistributionFloat NoiseScale;//[Offset: 0x158, Size: 0x30] 0x715cc20f00

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object // 71a4aae980
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x715cc20080
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x715cc20100
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x715cc20180
	RawDistributionVector Source;//[Offset: 0x38, Size: 0x48] 0x715cc20200
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cc20280
	byte SourceTangentMethod;//[Offset: 0x81, Size: 0x1] 0x715cc20300
	RawDistributionVector SourceTangent;//[Offset: 0x88, Size: 0x48] 0x715cc20380
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x715cc20400
	RawDistributionFloat SourceStrength;//[Offset: 0xd8, Size: 0x30] 0x715cc20480
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x715cc20500

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object // 71a4aae700
	byte TargetMethod;//[Offset: 0x2b, Size: 0x1] 0x715cc21c00
	FName TargetName;//[Offset: 0x2c, Size: 0x8] 0x715cc21c80
	RawDistributionVector Target;//[Offset: 0x38, Size: 0x48] 0x715cc21d00
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cc21d80
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x715cc21e00
	byte TargetTangentMethod;//[Offset: 0x81, Size: 0x1] 0x715cc21e80
	RawDistributionVector TargetTangent;//[Offset: 0x88, Size: 0x48] 0x715cc21f00
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x715cc21f80
	RawDistributionFloat TargetStrength;//[Offset: 0xd8, Size: 0x30] 0x715cc22000
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x715cc22080
	float LockRadius;//[Offset: 0x10c, Size: 0x4] 0x715cc22100

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object // 71a4aae480

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object // 71a4aae200
	RawDistributionFloat CameraOffset;//[Offset: 0x30, Size: 0x30] 0x715cc21a80
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x715cc21b00
	byte UpdateMethod;//[Offset: 0x61, Size: 0x1] 0x715cc21b80

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object // 71a4aadd00

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object // 71a4aadf80
	RawDistributionVector DampingFactor;//[Offset: 0x30, Size: 0x48] 0x715cc21200
	RawDistributionVector DampingFactorRotation;//[Offset: 0x78, Size: 0x48] 0x715cc21280
	RawDistributionFloat MaxCollisions;//[Offset: 0xc0, Size: 0x30] 0x715cc21300
	byte CollisionCompletionOption;//[Offset: 0xf0, Size: 0x1] 0x715cc21380
	byte[] CollisionTypes;//[Offset: 0xf8, Size: 0x10] 0x715cb2b320
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1] 0x715cc21480
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1] 0x715cc21500
	RawDistributionFloat ParticleMass;//[Offset: 0x118, Size: 0x30] 0x715cc21580
	float DirScalar;//[Offset: 0x148, Size: 0x4] 0x715cc21600
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x715cc21680
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1] 0x715cc21700
	float VerticalFudgeFactor;//[Offset: 0x150, Size: 0x4] 0x715cc21780
	RawDistributionFloat DelayAmount;//[Offset: 0x158, Size: 0x30] 0x715cc21800
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1] 0x715cc21880
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 0x1] 0x715cc21900
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x188, Size: 0x1] 0x715cc21980
	float MaxCollisionDistance;//[Offset: 0x18c, Size: 0x4] 0x715cc21a00

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object // 71a4aada80
	RawDistributionFloat Resilience;//[Offset: 0x30, Size: 0x30] 0x715cc22e80
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x60, Size: 0x30] 0x715cc22f00
	float Friction;//[Offset: 0x90, Size: 0x4] 0x715cc22f80
	float RandomSpread;//[Offset: 0x94, Size: 0x4] 0x715cc23000
	float RandomDistribution;//[Offset: 0x98, Size: 0x4] 0x715cc23080
	float RadiusScale;//[Offset: 0x9c, Size: 0x4] 0x715cc23100
	float RadiusBias;//[Offset: 0xa0, Size: 0x4] 0x715cc23180
	byte Response;//[Offset: 0xa4, Size: 0x1] 0x715cc21100
	byte CollisionMode;//[Offset: 0xa5, Size: 0x1] 0x715cc21180

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object // 71a4aad580

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object // 71a4aad800
	RawDistributionVector StartColor;//[Offset: 0x30, Size: 0x48] 0x715cc22d00
	RawDistributionFloat StartAlpha;//[Offset: 0x78, Size: 0x30] 0x715cc22d80
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x715cc22e00

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object // 71a4aad300
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xb0, Size: 0x20] 0x715cc22c80

--------------------------------
Class: ParticleRandomSeedInfo // 715ce713c0
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x715ce67080
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715ce67100
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x715ce67180
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x715ce67200
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x715ce67280
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10] 0x715daedbc0

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object // 71a4aad080
	RawDistributionVector ColorOverLife;//[Offset: 0x30, Size: 0x48] 0x715cc22b00
	RawDistributionFloat AlphaOverLife;//[Offset: 0x78, Size: 0x30] 0x715cc22b80
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x715cc22c00

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object // 71a4aace00
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x48] 0x715cc22980
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x78, Size: 0x30] 0x715cc22a00
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x715cc22a80

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object // 71a4aac400
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x715cc22780

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object // 71a4aac180
	RawDistributionFloat SpawnCount;//[Offset: 0x38, Size: 0x30] 0x715cc22400
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cc22480
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x715cc22500
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x715cc22580
	RawDistributionVector InheritVelocityScale;//[Offset: 0x70, Size: 0x48] 0x715cc22600
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xb8, Size: 0x10] 0x715cb2b1e0
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x715cc22700

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object // 71a4aabc80

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object // 71a4aaba00
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x48] 0x715cc22180
	RawDistributionVector UpperRightCorner;//[Offset: 0x78, Size: 0x48] 0x715cc22200
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x715cc22280
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x715cc22300
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x715cc22380

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object // 71a4aab780
	RawDistributionFloat Height;//[Offset: 0x30, Size: 0x30] 0x715cc24080
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x715cc24100
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x715cc24180
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x715cc24200

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object // 71a4aab280

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object // 71a4aab500
	RawDistributionFloat LifeTime;//[Offset: 0x30, Size: 0x30] 0x715cc24000

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object // 71a4aab000
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x715cc23f80

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object // 71a4aaab00

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object // 71a4aaad80
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x715cc23980
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x715cc23a00
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x715cc23a80
	float SpawnFraction;//[Offset: 0x30, Size: 0x4] 0x715cc23b00
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x48] 0x715cc23b80
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x80, Size: 0x30] 0x715cc23c00
	RawDistributionFloat RadiusScale;//[Offset: 0xb0, Size: 0x30] 0x715cc23c80
	RawDistributionFloat LightExponent;//[Offset: 0xe0, Size: 0x30] 0x715cc23d00
	LightingChannels LightingChannels;//[Offset: 0x110, Size: 0x1] 0x715cc23d80
	float VolumetricScatteringIntensity;//[Offset: 0x114, Size: 0x4] 0x715cc23e00
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x715cc23e80
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x715cc23f00

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object // 71a4aaa880
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x120, Size: 0x20] 0x715cc23900

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object // 71a4aafd80

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object // 71a4aaa600
	RawDistributionVector StartLocation;//[Offset: 0x30, Size: 0x48] 0x715cc23780
	float DistributeOverNPoints;//[Offset: 0x78, Size: 0x4] 0x715cc23800
	float DistributeThreshold;//[Offset: 0x7c, Size: 0x4] 0x715cc23880

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object // 71a4aafb00
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x715cc23700

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object // 71a4aaf880
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x715cc23200
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x715cc23280
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x38, Size: 0x10] 0x715cb2b140
	byte SelectionMethod;//[Offset: 0x48, Size: 0x1] 0x715cc23380
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1] 0x715cc23400
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1] 0x715cc23480
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49, Size: 0x1] 0x715cc23500
	float InheritVelocityScale;//[Offset: 0x4c, Size: 0x4] 0x715cc23580
	FName SkelMeshActorParamName;//[Offset: 0x50, Size: 0x8] 0x715cc23600
	int NumPreSelectedIndices;//[Offset: 0x58, Size: 0x4] 0x715cc23680

--------------------------------
Class: LocationBoneSocketInfo // 715ce710c0
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8] 0x715ce66880
	Vector Offset;//[Offset: 0x8, Size: 0xc] 0x715ce66900

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac5100
	RawDistributionVector Location;//[Offset: 0x30, Size: 0x48] 0x715cc25100
	RawDistributionVector LocationOffset;//[Offset: 0x78, Size: 0x48] 0x715cc25180
	RawDistributionVector ScaleFactor;//[Offset: 0xc0, Size: 0x48] 0x715cc25200
	RawDistributionVector Direction;//[Offset: 0x108, Size: 0x48] 0x715cc25280

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac4e80
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x715cc24e00
	byte SelectionMethod;//[Offset: 0x34, Size: 0x1] 0x715cc24e80
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1] 0x715cc24f00
	float InheritSourceVelocityScale;//[Offset: 0x38, Size: 0x4] 0x715cc24f80
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x715cc25000
	float InheritSourceRotationScale;//[Offset: 0x40, Size: 0x4] 0x715cc25080

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac4c00
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x715cc24d80

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac4980
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x715cc24880
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x715cc24900
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x715cc24980
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x715cc24a00
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x715cc24a80
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x715cc24b00
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x715cc24b80
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x715cc24c00
	RawDistributionFloat VelocityScale;//[Offset: 0x30, Size: 0x30] 0x715cc24c80
	RawDistributionVector StartLocation;//[Offset: 0x60, Size: 0x48] 0x715cc24d00

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac4700
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x715cc24680
	RawDistributionFloat StartRadius;//[Offset: 0xb0, Size: 0x30] 0x715cc24700
	RawDistributionFloat StartHeight;//[Offset: 0xe0, Size: 0x30] 0x715cc24780
	byte HeightAxis;//[Offset: 0x110, Size: 0x1] 0x715cc24800

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac4480
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x118, Size: 0x20] 0x715cc24600

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac4200
	RawDistributionFloat StartRadius;//[Offset: 0xa8, Size: 0x30] 0x715cc24580

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac3f80
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xd8, Size: 0x20] 0x715cc24500

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac3d00
	RawDistributionVector StartOffset;//[Offset: 0x30, Size: 0x48] 0x715cc24300
	RawDistributionFloat Height;//[Offset: 0x78, Size: 0x30] 0x715cc24380
	RawDistributionFloat Angle;//[Offset: 0xa8, Size: 0x30] 0x715cc24400
	RawDistributionFloat Thickness;//[Offset: 0xd8, Size: 0x30] 0x715cc24480

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac3a80
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x715cc25c00
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x715cc25c80
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cc25d00
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x715cc25d80
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x715cc25e00
	float InheritVelocityScale;//[Offset: 0x3c, Size: 0x4] 0x715cc25e80
	FName SkelMeshActorParamName;//[Offset: 0x40, Size: 0x8] 0x715cc25f00
	FName[] ValidAssociatedBones;//[Offset: 0x48, Size: 0x10] 0x715cb2b000
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x715cc26000
	Vector NormalToCompare;//[Offset: 0x5c, Size: 0xc] 0x715cc26080
	float NormalCheckToleranceDegrees;//[Offset: 0x68, Size: 0x4] 0x715cc26100
	float NormalCheckTolerance;//[Offset: 0x6c, Size: 0x4] 0x715cc26180
	int[] ValidMaterialIndices;//[Offset: 0x70, Size: 0x10] 0x715cb2b0a0
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715cc26280
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x715cc26300
	uint32 InheritUVChannel;//[Offset: 0x84, Size: 0x4] 0x715cc24280

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac3800

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac3580
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x715cc25b80

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object // 71a4ac3300

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object // 71a4ac3080
	MaterialInterface*[] MeshMaterials;//[Offset: 0x30, Size: 0x10] 0x715cb2af60

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object // 71a4ac2b80

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object // 71a4ac2e00
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x48] 0x715cc25a00
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715cc25a80

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object // 71a4ac2900
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x715cc25980

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object // 71a4ac2400

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object // 71a4ac2680
	RawDistributionVector StartRotationRate;//[Offset: 0x30, Size: 0x48] 0x715cc25900

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object // 71a4ac2180
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20] 0x715cc25880

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object // 71a4ac1f00
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48] 0x715cc25800

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object // 71a4ac1c80
	RawDistributionVector RotRate;//[Offset: 0x30, Size: 0x48] 0x715cc25700
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715cc25780

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object // 71a4ac1280

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object // 71a4ac1500
	byte LockAxisFlags;//[Offset: 0x2b, Size: 0x1] 0x715cc27380

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object // 71a4ac1000

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object // 71a4ac0d80
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10] 0x715cb2aec0
	int UpdateFlags;//[Offset: 0x40, Size: 0x4] 0x715cc27280
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x715cc27300

--------------------------------
Class: EmitterDynamicParameter // 715ce70f40
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x715ce66400
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715ce66480
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x715ce66500
	byte ValueMethod;//[Offset: 0x9, Size: 0x1] 0x715ce66580
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x715ce66600
	RawDistributionFloat ParamValue;//[Offset: 0x10, Size: 0x30] 0x715ce66680

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object // 71a4ac0b00
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48, Size: 0x20] 0x715cc27180

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac0880
	Vector2D PivotOffset;//[Offset: 0x2c, Size: 0x8] 0x715cc27100

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object // 71a4ac0380
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x30] 0x715cc27b00

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object // 71a4ac0100
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x715cc27a80

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object // 71a4aca380
	RawDistributionFloat RotationOverLife;//[Offset: 0x30, Size: 0x30] 0x715cc27980
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x715cc27a00

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object // 71a4aca100
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x30] 0x715cc27900

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object // 71a4ac9e80
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x715cc27880

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object // 71a4ac9c00
	RawDistributionFloat LifeMultiplier;//[Offset: 0x30, Size: 0x30] 0x715cc27800

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object // 71a4ac9700

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object // 71a4ac9980
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x48] 0x715cc27780

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object // 71a4ac9480
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20] 0x715cc27700

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object // 71a4ac9200
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48] 0x715cc27500
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715cc27580
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x715cc27600
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x715cc27680

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object // 71a4ac8f80
	RawDistributionVector SizeScale;//[Offset: 0x30, Size: 0x48] 0x715cc29400
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715cc29480
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x715cc27400
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x715cc27480

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object // 71a4ac8d00
	Vector2D SpeedScale;//[Offset: 0x2c, Size: 0x8] 0x715cc29300
	Vector2D MaxScale;//[Offset: 0x34, Size: 0x8] 0x715cc29380

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object // 71a4ac8a80
	RawDistributionVector SourceMovementScale;//[Offset: 0x30, Size: 0x48] 0x715cc29280

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object // 71a4ac8300
	float UnitScalar;//[Offset: 0x2c, Size: 0x4] 0x715cc28a80
	float MovementTolerance;//[Offset: 0x30, Size: 0x4] 0x715cc28b00
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x38, Size: 0x30] 0x715cc28b80
	float MaxFrameDistance;//[Offset: 0x68, Size: 0x4] 0x715cc28c00
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x715cc28c80
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x715cc28d00
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x715cc28d80
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x715cc28e00

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object // 71a4ac7e00

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object // 71a4ac8080
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8] 0x715cc28900
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x30] 0x715cc28980
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cc28a00

--------------------------------
Class: SubUVAnimation.Object // 71a4ae2180
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8] 0x715cc6f500
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4] 0x715cc6f580
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4] 0x715cc6f600
	byte BoundingMode;//[Offset: 0x38, Size: 0x1] 0x715cc6f680
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1] 0x715cc6f700
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4] 0x715cc6f780

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object // 71a4ac7b80
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x715cc28780
	RawDistributionFloat FrameRate;//[Offset: 0x70, Size: 0x30] 0x715cc28800
	int StartingFrame;//[Offset: 0xa0, Size: 0x4] 0x715cc28880

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object // 71a4ac7900

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object // 71a4ac7680
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x715cc2a480
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x715cc2a500
	RawDistributionFloat SourceStrength;//[Offset: 0x38, Size: 0x30] 0x715cc28480
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cc28500
	int SourceOffsetCount;//[Offset: 0x6c, Size: 0x4] 0x715cc28580
	Vector[] SourceOffsetDefaults;//[Offset: 0x70, Size: 0x10] 0x715cb2aba0
	byte SelectionMethod;//[Offset: 0x80, Size: 0x1] 0x715cc28680
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x715cc28700

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object // 71a4ac7400
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x715cc2a100
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x715cc2a180
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x715cc2a200
	float TilingDistance;//[Offset: 0x2c, Size: 0x4] 0x715cc2a280
	float DistanceTessellationStepSize;//[Offset: 0x30, Size: 0x4] 0x715cc2a300
	float TangentTessellationStepSize;//[Offset: 0x34, Size: 0x4] 0x715cc2a380
	float WidthTessellationStepSize;//[Offset: 0x38, Size: 0x4] 0x715cc2a400

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object // 71a4ac6f00
	byte BeamMethod;//[Offset: 0x2b, Size: 0x1] 0x715cc29800
	int TextureTile;//[Offset: 0x2c, Size: 0x4] 0x715cc29880
	float TextureTileDistance;//[Offset: 0x30, Size: 0x4] 0x715cc29900
	int Sheets;//[Offset: 0x34, Size: 0x4] 0x715cc29980
	int MaxBeamCount;//[Offset: 0x38, Size: 0x4] 0x715cc29a00
	float Speed;//[Offset: 0x3c, Size: 0x4] 0x715cc29a80
	int InterpolationPoints;//[Offset: 0x40, Size: 0x4] 0x715cc29b00
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x715cc29b80
	int UpVectorStepSize;//[Offset: 0x48, Size: 0x4] 0x715cc29c00
	FName BranchParentName;//[Offset: 0x4c, Size: 0x8] 0x715cc29c80
	RawDistributionFloat Distance;//[Offset: 0x58, Size: 0x30] 0x715cc29d00
	byte TaperMethod;//[Offset: 0x88, Size: 0x1] 0x715cc29d80
	RawDistributionFloat TaperFactor;//[Offset: 0x90, Size: 0x30] 0x715cc29e00
	RawDistributionFloat TaperScale;//[Offset: 0xc0, Size: 0x30] 0x715cc29e80
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x715cc29f00
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x715cc29f80
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x715cc2a000
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x715cc2a080

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object // 71a4ac6c80
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x30, Size: 0x270] 0x715cc29600
	GPUSpriteResourceData ResourceData;//[Offset: 0x2a0, Size: 0x160] 0x715cc29680
	float CameraMotionBlurAmount;//[Offset: 0x400, Size: 0x4] 0x715cc29700
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 0x1] 0x715cc29780

--------------------------------
Class: GPUSpriteEmitterInfo // 715ce70d00
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x8] 0x715ce69d80
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x8, Size: 0x8] 0x715ce69e00
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x10, Size: 0x8] 0x715ce69e80
	ParticleModule*[] SpawnModules;//[Offset: 0x18, Size: 0x10] 0x715daed8a0
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x30, Size: 0x70] 0x715ce68480
	FloatDistribution VectorFieldScale;//[Offset: 0xa0, Size: 0x20] 0x715ce68500
	FloatDistribution DragCoefficient;//[Offset: 0xc0, Size: 0x20] 0x715ce68580
	FloatDistribution PointAttractorStrength;//[Offset: 0xe0, Size: 0x20] 0x715ce68600
	FloatDistribution Resilience;//[Offset: 0x100, Size: 0x20] 0x715ce68680
	Vector ConstantAcceleration;//[Offset: 0x120, Size: 0xc] 0x715ce68700
	Vector PointAttractorPosition;//[Offset: 0x12c, Size: 0xc] 0x715ce68780
	float PointAttractorRadiusSq;//[Offset: 0x138, Size: 0x4] 0x715ce68800
	Vector OrbitOffsetBase;//[Offset: 0x13c, Size: 0xc] 0x715ce68880
	Vector OrbitOffsetRange;//[Offset: 0x148, Size: 0xc] 0x715ce68900
	Vector2D InvMaxSize;//[Offset: 0x154, Size: 0x8] 0x715ce68980
	float InvRotationRateScale;//[Offset: 0x15c, Size: 0x4] 0x715ce68a00
	float MaxLifetime;//[Offset: 0x160, Size: 0x4] 0x715ce68a80
	int MaxParticleCount;//[Offset: 0x164, Size: 0x4] 0x715ce68b00
	byte ScreenAlignment;//[Offset: 0x168, Size: 0x1] 0x715ce68b80
	byte LockAxisFlag;//[Offset: 0x169, Size: 0x1] 0x715ce68c00
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16a, Size: 0x1] 0x715ce68c80
	byte CollisionMode;//[Offset: 0x16b, Size: 0x1] 0x715ce68d00
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1] 0x715ce68d80
	float MinFacingCameraBlendDistance;//[Offset: 0x170, Size: 0x4] 0x715ce68e00
	float MaxFacingCameraBlendDistance;//[Offset: 0x174, Size: 0x4] 0x715ce68e80
	RawDistributionVector DynamicColor;//[Offset: 0x178, Size: 0x48] 0x715ce68f00
	RawDistributionFloat DynamicAlpha;//[Offset: 0x1c0, Size: 0x30] 0x715ce68f80
	RawDistributionVector DynamicColorScale;//[Offset: 0x1f0, Size: 0x48] 0x715ce69000
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x238, Size: 0x30] 0x715ce69080

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo // 715ce70c40
	VectorField* Field;//[Offset: 0x0, Size: 0x8] 0x715ce69f80
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x715ce6a000
	Rotator MinInitialRotation;//[Offset: 0x40, Size: 0xc] 0x715ce6a080
	Rotator MaxInitialRotation;//[Offset: 0x4c, Size: 0xc] 0x715ce6a100
	Rotator RotationRate;//[Offset: 0x58, Size: 0xc] 0x715ce6a180
	float Intensity;//[Offset: 0x64, Size: 0x4] 0x715ce6a200
	float Tightness;//[Offset: 0x68, Size: 0x4] 0x715ce6a280
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x715ce6a300
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x715ce6a380
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x715ce6a400
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x715ce6a480
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1] 0x715ce6a500

--------------------------------
Class: VectorField.Object // 71a4ae8580
	Box Bounds;//[Offset: 0x28, Size: 0x1c] 0x715cc94200
	float Intensity;//[Offset: 0x44, Size: 0x4] 0x715cc92180

--------------------------------
Class: FloatDistribution // 7149064c00
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x7148ca0600

--------------------------------
Class: GPUSpriteResourceData // 715ce70dc0
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0x10] 0x715daed940
	Color[] QuantizedMiscSamples;//[Offset: 0x10, Size: 0x10] 0x715daed9e0
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x20, Size: 0x10] 0x715daeda80
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x10] 0x715ce69280
	Vector4 ColorBias;//[Offset: 0x40, Size: 0x10] 0x715ce69300
	Vector4 MiscScale;//[Offset: 0x50, Size: 0x10] 0x715ce69380
	Vector4 MiscBias;//[Offset: 0x60, Size: 0x10] 0x715ce69400
	Vector4 SimulationAttrCurveScale;//[Offset: 0x70, Size: 0x10] 0x715ce69480
	Vector4 SimulationAttrCurveBias;//[Offset: 0x80, Size: 0x10] 0x715ce67400
	Vector4 SubImageSize;//[Offset: 0x90, Size: 0x10] 0x715ce67480
	Vector4 SizeBySpeed;//[Offset: 0xa0, Size: 0x10] 0x715ce67500
	Vector ConstantAcceleration;//[Offset: 0xb0, Size: 0xc] 0x715ce67580
	Vector OrbitOffsetBase;//[Offset: 0xbc, Size: 0xc] 0x715ce67600
	Vector OrbitOffsetRange;//[Offset: 0xc8, Size: 0xc] 0x715ce67680
	Vector OrbitFrequencyBase;//[Offset: 0xd4, Size: 0xc] 0x715ce67700
	Vector OrbitFrequencyRange;//[Offset: 0xe0, Size: 0xc] 0x715ce67780
	Vector OrbitPhaseBase;//[Offset: 0xec, Size: 0xc] 0x715ce67800
	Vector OrbitPhaseRange;//[Offset: 0xf8, Size: 0xc] 0x715ce67880
	float GlobalVectorFieldScale;//[Offset: 0x104, Size: 0x4] 0x715ce67900
	float GlobalVectorFieldTightness;//[Offset: 0x108, Size: 0x4] 0x715ce67980
	float PerParticleVectorFieldScale;//[Offset: 0x10c, Size: 0x4] 0x715ce67a00
	float PerParticleVectorFieldBias;//[Offset: 0x110, Size: 0x4] 0x715ce67a80
	float DragCoefficientScale;//[Offset: 0x114, Size: 0x4] 0x715ce67b00
	float DragCoefficientBias;//[Offset: 0x118, Size: 0x4] 0x715ce67b80
	float ResilienceScale;//[Offset: 0x11c, Size: 0x4] 0x715ce67c00
	float ResilienceBias;//[Offset: 0x120, Size: 0x4] 0x715ce67c80
	float CollisionRadiusScale;//[Offset: 0x124, Size: 0x4] 0x715ce67d00
	float CollisionRadiusBias;//[Offset: 0x128, Size: 0x4] 0x715ce67d80
	float CollisionTimeBias;//[Offset: 0x12c, Size: 0x4] 0x715ce67e00
	float CollisionRandomSpread;//[Offset: 0x130, Size: 0x4] 0x715ce67e80
	float CollisionRandomDistribution;//[Offset: 0x134, Size: 0x4] 0x715ce67f00
	float OneMinusFriction;//[Offset: 0x138, Size: 0x4] 0x715ce67f80
	float RotationRateScale;//[Offset: 0x13c, Size: 0x4] 0x715ce68000
	float CameraMotionBlurAmount;//[Offset: 0x140, Size: 0x4] 0x715ce68080
	byte ScreenAlignment;//[Offset: 0x144, Size: 0x1] 0x715ce68100
	byte LockAxisFlag;//[Offset: 0x145, Size: 0x1] 0x715ce68180
	Vector2D PivotOffset;//[Offset: 0x148, Size: 0x8] 0x715ce68200
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x715ce68280
	float MinFacingCameraBlendDistance;//[Offset: 0x154, Size: 0x4] 0x715ce68300
	float MaxFacingCameraBlendDistance;//[Offset: 0x158, Size: 0x4] 0x715ce68380

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object // 71a4ac6a00
	StaticMesh* Mesh;//[Offset: 0x30, Size: 0x8] 0x715cc2ae80
	float LODSizeScale;//[Offset: 0x40, Size: 0x4] 0x715cc2af00
	bool bUseStaticMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x715cc2af80
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x715cc2b000
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x715cc2b080
	byte MeshAlignment;//[Offset: 0x45, Size: 0x1] 0x715cc2b100
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46, Size: 0x1] 0x715cc2b180
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46, Size: 0x1] 0x715cc2b200
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46, Size: 0x1] 0x715cc2b280
	RawDistributionVector RollPitchYawRange;//[Offset: 0x48, Size: 0x48] 0x715cc2b300
	byte AxisLockOption;//[Offset: 0x90, Size: 0x1] 0x715cc2b380
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x715cc2b400
	byte CameraFacingUpAxisOption;//[Offset: 0x92, Size: 0x1] 0x715cc2b480
	byte CameraFacingOption;//[Offset: 0x93, Size: 0x1] 0x715cc2b500
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1] 0x715cc2b580
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1] 0x715cc29500
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1] 0x715cc29580

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object // 71a4ac6780
	int MaxTessellationBetweenParticles;//[Offset: 0x2c, Size: 0x4] 0x715cc2c580
	int SheetsPerTrail;//[Offset: 0x30, Size: 0x4] 0x715cc2c600
	int MaxTrailCount;//[Offset: 0x34, Size: 0x4] 0x715cc2a580
	int MaxParticleInTrailCount;//[Offset: 0x38, Size: 0x4] 0x715cc2a600
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x715cc2a680
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x715cc2a700
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x715cc2a780
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x715cc2a800
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x715cc2a880
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x715cc2a900
	byte RenderAxis;//[Offset: 0x3d, Size: 0x1] 0x715cc2a980
	float TangentSpawningScalar;//[Offset: 0x40, Size: 0x4] 0x715cc2aa00
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x715cc2aa80
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x715cc2ab00
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x715cc2ab80
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1] 0x715cc2ac00
	float TilingDistance;//[Offset: 0x48, Size: 0x4] 0x715cc2ac80
	float DistanceTessellationStepSize;//[Offset: 0x4c, Size: 0x4] 0x715cc2ad00
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cc2ad80
	float TangentTessellationScalar;//[Offset: 0x54, Size: 0x4] 0x715cc2ae00

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object // 71a4ac6500

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object // 71a4ac6280
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x715cc2c400
	float GlobalVectorFieldScale;//[Offset: 0x2c, Size: 0x4] 0x715cc2c480
	float GlobalVectorFieldTightness;//[Offset: 0x30, Size: 0x4] 0x715cc2c500

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object // 71a4ac6000
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8] 0x715cc2be80
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0xc] 0x715cc2bf00
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x715cc2bf80
	Vector RelativeScale3D;//[Offset: 0x50, Size: 0xc] 0x715cc2c000
	float Intensity;//[Offset: 0x5c, Size: 0x4] 0x715cc2c080
	float Tightness;//[Offset: 0x60, Size: 0x4] 0x715cc2c100
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1] 0x715cc2c180
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1] 0x715cc2c200
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1] 0x715cc2c280
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 0x1] 0x715cc2c300
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64, Size: 0x1] 0x715cc2c380

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object // 71a4ac5d80
	Vector MinInitialRotation;//[Offset: 0x2c, Size: 0xc] 0x715cc2bd80
	Vector MaxInitialRotation;//[Offset: 0x38, Size: 0xc] 0x715cc2be00

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object // 71a4ac5b00
	Vector RotationRate;//[Offset: 0x2c, Size: 0xc] 0x715cc2bd00

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object // 71a4ac5880
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8] 0x715cc2bc00
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x30] 0x715cc2bc80

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object // 71a4ac5600
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x30, Size: 0x8] 0x715cc2bb00
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x38, Size: 0x30] 0x715cc2bb80

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object // 71a4acf600
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x715cc2ba00
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x715cc2ba80

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object // 71a4ac5380
	RawDistributionVector StartVelocity;//[Offset: 0x30, Size: 0x48] 0x715cc2b900
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x78, Size: 0x30] 0x715cc2b980

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object // 71a4acf380
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xa8, Size: 0x20] 0x715cc2b880

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object // 71a4acf100
	RawDistributionFloat Angle;//[Offset: 0x30, Size: 0x30] 0x715cc2b700
	RawDistributionFloat Velocity;//[Offset: 0x60, Size: 0x30] 0x715cc2b780
	Vector Direction;//[Offset: 0x90, Size: 0xc] 0x715cc2b800

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object // 71a4acee80
	RawDistributionVector Scale;//[Offset: 0x30, Size: 0x48] 0x715cc2b680

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object // 71a4acec00
	RawDistributionVector VelOverLife;//[Offset: 0x30, Size: 0x48] 0x715cc2d680
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715cc2b600

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object // 71a4ace980

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object // 71a4acda80

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object // 71a4acd800
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715cc41380
	Vector LastRemoteNoisePosition;//[Offset: 0xb4, Size: 0xc] 0x715cc41400
	float NoiseLifetime;//[Offset: 0xc0, Size: 0x4] 0x715cc41480
	float LastRemoteNoiseVolume;//[Offset: 0xc4, Size: 0x4] 0x715cc41500
	float LastRemoteNoiseTime;//[Offset: 0xc8, Size: 0x4] 0x715cc41580
	float LastLocalNoiseVolume;//[Offset: 0xcc, Size: 0x4] 0x715cc41600
	float LastLocalNoiseTime;//[Offset: 0xd0, Size: 0x4] 0x715cc41680
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0x6298350 0x715cc30a20

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object // 71a4acd580
	float StrengthMultiplyer;//[Offset: 0xb0, Size: 0x4] 0x715cc42d00
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xb8, Size: 0x8] 0x715cc42d80
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0x6298fe8 0x715cc304e0
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0x62992e4 0x715cc305c0
	Transform GetBodyTargetTransform(FName BodyName);// 0x6298dac 0x715cc306a0
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0x629908c 0x715cc30780
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0x62991dc 0x715cc30860
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0x6298e68 0x715cc30940

--------------------------------
Class: RigidBodyBase.Actor.Object // 71a4acc180

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object // 71a4acc400
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x220, Size: 0x8] 0x715cc43d80
	Actor* ConstraintActor1;//[Offset: 0x228, Size: 0x8] 0x715cc43e00
	Actor* ConstraintActor2;//[Offset: 0x230, Size: 0x8] 0x715cc43e80
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1] 0x715cc43f00

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object // 71a4acbf00
	Actor* ConstraintActor1;//[Offset: 0x1f0, Size: 0x8] 0x715cc45c80
	ConstrainComponentPropName ComponentName1;//[Offset: 0x1f8, Size: 0x8] 0x715cc45d00
	Actor* ConstraintActor2;//[Offset: 0x200, Size: 0x8] 0x715cc45d80
	ConstrainComponentPropName ComponentName2;//[Offset: 0x208, Size: 0x8] 0x715cc45e00
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x220, Size: 0x8] 0x715cc45e80
	delegate OnConstraintBroken;//[Offset: 0x228, Size: 0x10] 0x715cc45f00
	ConstraintInstance ConstraintInstance;//[Offset: 0x238, Size: 0x1b8] 0x715cc45f80
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x629c02c 0x715cc320e0
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x629bf80 0x715cc321c0
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x629b470 0x715cc322a0
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x629b558 0x715cc32380
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x629b640 0x715cc32460
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x629bad8 0x715cc32540
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x629c224 0x715cc32620
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x629bb88 0x715cc32700
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x629c378 0x715cc327e0
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x629b9b0 0x715cc328c0
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x629b0c4 0x715cc329a0
	void SetDisableCollision(bool bDisableCollision);// 0x629ab3c 0x715cc32a80
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x629ad28 0x715cc32b60
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x629abe8 0x715cc32c40
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x629ae1c 0x715cc32d20
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x629c4e0 0x715cc32e00
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x629b850 0x715cc32ee0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x629bd88 0x715cc32fc0
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x629bcdc 0x715cc330a0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x629be84 0x715cc33180
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x629b1b8 0x715cc33260
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x629b2a0 0x715cc33340
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x629b388 0x715cc33420
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x629b900 0x715cc33500
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x629c128 0x715cc335e0
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x629b728 0x715cc336c0
	void SetAngularDriveMode(byte DriveMode);// 0x629bc38 0x715cc337a0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x629afd0 0x715cc33880
	bool IsBroken();// 0x629aa08 0x715cc33960
	float GetCurrentTwist();// 0x629af9c 0x715cc30080
	float GetCurrentSwing2();// 0x629af34 0x715cc30160
	float GetCurrentSwing1();// 0x629af68 0x715cc30240
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x629aa40 0x715cc30320
	void BreakConstraint();// 0x629c4cc 0x715cc30400

--------------------------------
Class: ConstrainComponentPropName // 715db1a480
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x715db3fa00

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object // 71a4acba00
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xb0, Size: 0x8] 0x715cc46c00
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x715cc46c80
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x715cc46d00
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x715cc46d80
	float LinearDamping;//[Offset: 0xc4, Size: 0x4] 0x715cc46e00
	float LinearStiffness;//[Offset: 0xc8, Size: 0x4] 0x715cc46e80
	float AngularDamping;//[Offset: 0xcc, Size: 0x4] 0x715cc46f00
	float AngularStiffness;//[Offset: 0xd0, Size: 0x4] 0x715cc46f80
	float InterpolationSpeed;//[Offset: 0x140, Size: 0x4] 0x715cc47000
	void SetTargetRotation(Rotator NewRotation);// 0x62a04d0 0x715cc34e60
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0x62a03ec 0x715cc34f40
	void SetTargetLocation(Vector NewLocation);// 0x62a0574 0x715cc35020
	void SetLinearStiffness(float NewLinearStiffness);// 0x62a01a8 0x715cc35100
	void SetLinearDamping(float NewLinearDamping);// 0x62a024c 0x715cc351e0
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0x629ffbc 0x715cc352c0
	void SetAngularStiffness(float NewAngularStiffness);// 0x62a0060 0x715cc353a0
	void SetAngularDamping(float NewAngularDamping);// 0x62a0104 0x715cc35480
	void ReleaseComponent();// 0x62a064c 0x715cc35560
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0x62a0668 0x715cc35640
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0x62a07cc 0x715cc31d60
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0x62a08f0 0x715cc31e40
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0x62a02f0 0x715cc31f20
	PrimitiveComponent* GetGrabbedComponent();// 0x62a0618 0x715cc32000

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object // 71a4acb500
	float SpringStiffness;//[Offset: 0x1f0, Size: 0x4] 0x715cc49200
	float SpringDamping;//[Offset: 0x1f4, Size: 0x4] 0x715cc49280
	float SpringLengthAtRest;//[Offset: 0x1f8, Size: 0x4] 0x715cc49300
	float SpringRadius;//[Offset: 0x1fc, Size: 0x4] 0x715cc49380
	byte SpringChannel;//[Offset: 0x200, Size: 0x1] 0x715cc49400
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1] 0x715cc49480
	float SpringCompression;//[Offset: 0x204, Size: 0x4] 0x715cc47400
	Vector GetSpringRestingPoint();// 0x62a174c 0x715cc34ae0
	Vector GetSpringDirection();// 0x62a16dc 0x715cc34bc0
	Vector GetSpringCurrentEndPoint();// 0x62a1714 0x715cc34ca0
	float GetNormalizedCompressionScalar();// 0x62a1784 0x715cc34d80

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object // 71a4acb280
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x220, Size: 0x8] 0x715cc49180

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object // 71a4acb000
	float ThrustStrength;//[Offset: 0x1f0, Size: 0x4] 0x715cc49100

--------------------------------
Class: SceneCapture.Actor.Object // 71a4acab00
	StaticMeshComponent* MeshComp;//[Offset: 0x220, Size: 0x8] 0x715cc49000
	SceneComponent* SceneComponent;//[Offset: 0x228, Size: 0x8] 0x715cc49080

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object // 71a4acad80
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x230, Size: 0x8] 0x715cc48e80
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x715cc48f00
	void OnInterpToggle(bool bEnable);// 0x62a209c 0x715cc34a00

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object // 71a4aca880
	BoxComponent* PreviewBox;//[Offset: 0x288, Size: 0x8] 0x715cc49c00
	float NormalDistortionStrength;//[Offset: 0x290, Size: 0x4] 0x715cc49c80
	float PrefilterRoughness;//[Offset: 0x294, Size: 0x4] 0x715cc49d00
	float PrefilterRoughnessDistance;//[Offset: 0x298, Size: 0x4] 0x715cc49d80
	int ScreenPercentage;//[Offset: 0x29c, Size: 0x4] 0x715cc49e00
	float ExtraFOV;//[Offset: 0x2a0, Size: 0x4] 0x715cc49e80
	float DistanceFromPlaneFadeStart;//[Offset: 0x2a4, Size: 0x4] 0x715cc49f00
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2a8, Size: 0x4] 0x715cc49f80
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2ac, Size: 0x4] 0x715cc4a000
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2b0, Size: 0x4] 0x715cc4a080
	float AngleFromPlaneFadeStart;//[Offset: 0x2b4, Size: 0x4] 0x715cc4a100
	float AngleFromPlaneFadeEnd;//[Offset: 0x2b8, Size: 0x4] 0x715cc4a180
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1] 0x715cc4a200
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1] 0x715cc4a280

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object // 71a4aca600
	enum PrimitiveRenderMode;//[Offset: 0x1f0, Size: 0x1] 0x715cb2c040
	byte CaptureSource;//[Offset: 0x1f1, Size: 0x1] 0x715cc4a380
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f2, Size: 0x1] 0x715cc4a400
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1] 0x715cc4a480
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1] 0x715cc4a500
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x1f8, Size: 0x10] 0x715cb2c0e0
	Actor*[] HiddenActors;//[Offset: 0x208, Size: 0x10] 0x715cb2c180
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x218, Size: 0x10] 0x715cb2c220
	Actor*[] ShowOnlyActors;//[Offset: 0x228, Size: 0x10] 0x715cb2c2c0
	float LODDistanceFactor;//[Offset: 0x238, Size: 0x4] 0x715cc48680
	float MaxViewDistanceOverride;//[Offset: 0x23c, Size: 0x4] 0x715cc48700
	int CaptureSortPriority;//[Offset: 0x240, Size: 0x4] 0x715cc48780
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1] 0x715cc48800
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x248, Size: 0x10] 0x715cb2c360
	FString ProfilingEventName;//[Offset: 0x268, Size: 0x10] 0x715cc48900
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x62dc39c 0x715cc34220
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x62dc2ac 0x715cc34300
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x62dc04c 0x715cc343e0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x62dc208 0x715cc344c0
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x62dc118 0x715cc345a0
	void HideComponent(PrimitiveComponent* InComponent);// 0x62dc530 0x715cc34680
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x62dc440 0x715cc34760
	void ClearShowOnlyComponents();// 0x62dc104 0x715cc34840
	void ClearHiddenComponents();// 0x62dc0f0 0x715cc34920

--------------------------------
Class: EngineShowFlagsSetting // 715ce74480
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10] 0x715ce80d00
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715ce80d80

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object // 71a4acfd80

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object // 71a4acfb00
	float InfluenceRadiusScale;//[Offset: 0x270, Size: 0x4] 0x715cc49a80
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x278, Size: 0x8] 0x715cc49b00
	BoxComponent* PreviewCaptureBox;//[Offset: 0x280, Size: 0x8] 0x715cc49b80

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object // 71a4acf880
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xb0, Size: 0x10] 0x7148ca9a00
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc0, Size: 0x10] 0x7148ca9a80
	bool SupportsConvertibleLaptops();// 0x62a29f8 0x7149048040
	void PlatformEventDelegate__DelegateSignature();// 0x45c6aa0 0x7149048120
	bool IsInTabletMode();// 0x62a2a30 0x7149048200
	bool IsInLaptopMode();// 0x62a2a68 0x71490482e0

--------------------------------
Class: PlatformInterfaceWebResponse.Object // 71a4ad5100
	FString OriginalURL;//[Offset: 0x28, Size: 0x10] 0x715cc49500
	int ResponseCode;//[Offset: 0x38, Size: 0x4] 0x715cc49580
	int Tag;//[Offset: 0x3c, Size: 0x4] 0x715cc49600
	FString StringResponse;//[Offset: 0x40, Size: 0x10] 0x715cc49680
	byte[] BinaryResponse;//[Offset: 0x50, Size: 0x10] 0x715cb2bfa0
	int GetNumHeaders();// 0x62a5708 0x715cc33f80
	FString GetHeaderValue(FString HeaderName);// 0x62a549c 0x715cc34060
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0x62a559c 0x715cc34140

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object // 71a4ad4c00
	FName PlayerStartTag;//[Offset: 0x244, Size: 0x8] 0x715cc4b200

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object // 71a4ad4980

--------------------------------
Class: PluginCommandlet.Commandlet.Object // 71a4ad4480

--------------------------------
Class: PointLight.Light.Actor.Object // 71a4ad4200
	PointLightComponent* PointLightComponent;//[Offset: 0x230, Size: 0x8] 0x715cc4a800
	void SetRadius(float NewRadius);// 0x62b8f50 0x715cc36c20
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x62b8eac 0x715cc36d00

--------------------------------
Class: Polys.Object // 71a4ad3d00

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4ad3a80
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0x62ba38c 0x715cc37860
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0x62ba014 0x715cc37940
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0x62ba13c 0x715cc37a20
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0x62ba264 0x715cc37b00
	void ResetBoneTransformByName(FName BoneName);// 0x62b9b94 0x715cc37be0
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0x62b9f14 0x715cc37cc0
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0x62b9c38 0x715cc37da0
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0x62b9d2c 0x715cc37e80
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0x62b9e20 0x715cc37f60
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0x62b9af0 0x715cc38040

--------------------------------
Class: PoseAsset.AnimationAsset.Object // 71a4ad3800
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 0x90] 0x715cc4fa80
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x715cc4fb00
	int BasePoseIndex;//[Offset: 0x114, Size: 0x4] 0x715cc4fb80
	FName RetargetSource;//[Offset: 0x118, Size: 0x8] 0x715cc4fc00

--------------------------------
Class: PoseDataContainer // 715ce728c0
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0x10] 0x715daed1c0
	FName[] Tracks;//[Offset: 0x10, Size: 0x10] 0x715daed260
	<FName,int> TrackMap;//[Offset: 0x20, Size: 0x50] 0x715ce72680
	PoseData[] Poses;//[Offset: 0x70, Size: 0x10] 0x715daed440
	AnimCurveBase[] Curves;//[Offset: 0x80, Size: 0x10] 0x715daed4e0

--------------------------------
Class: PoseData // 715ce72800
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0x10] 0x715daed300
	<int,int> TrackToBufferIndex;//[Offset: 0x10, Size: 0x50] 0x715ce72740
	float[] CurveData;//[Offset: 0x60, Size: 0x10] 0x715daed3a0

--------------------------------
Class: PoseWatch.Object // 71a4ad3580
	EdGraphNode* Node;//[Offset: 0x28, Size: 0x8] 0x715cc4f980
	Color PoseWatchColour;//[Offset: 0x30, Size: 0x4] 0x715cc4fa00

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object // 71a4ad3300
	PostProcessSettings Settings;//[Offset: 0x200, Size: 0x650] 0x715cc50e80
	float Priority;//[Offset: 0x850, Size: 0x4] 0x715cc50f00
	float BlendRadius;//[Offset: 0x854, Size: 0x4] 0x715cc50f80
	float BlendWeight;//[Offset: 0x858, Size: 0x4] 0x715cc51000
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85c, Size: 0x1] 0x715cc51080
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85c, Size: 0x1] 0x715cc4f800
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x62bb018 0x715cc37780

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object // 71a4ad3080
	PostProcessSettings Settings;//[Offset: 0x260, Size: 0x650] 0x715cc50a80
	float Priority;//[Offset: 0x8b0, Size: 0x4] 0x715cc50b00
	float BlendRadius;//[Offset: 0x8b4, Size: 0x4] 0x715cc50b80
	float BlendWeight;//[Offset: 0x8b8, Size: 0x4] 0x715cc50c00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8bc, Size: 0x1] 0x715cc50c80
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8bc, Size: 0x1] 0x715cc50d00
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x62bb55c 0x715cc376a0

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object // 71a4ad2e00
	Actor*[] OverrideVisibleActors;//[Offset: 0x258, Size: 0x10] 0x715cb2e160
	Actor*[] OverrideInvisibleActors;//[Offset: 0x268, Size: 0x10] 0x715cb2e200
	FName[] OverrideInvisibleLevels;//[Offset: 0x278, Size: 0x10] 0x715cb2e2a0

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object // 71a4ad2b80

--------------------------------
Class: PreviewCollectionInterface.Interface.Object // 71a4ad2900

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object // 71a4ad2680
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x715cc50800
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10] 0x715cb2e0c0

--------------------------------
Class: PreviewMeshCollectionEntry // 715ce72440
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28] 0x715ce6d180

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object // 71a4ad2400
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 0xc] 0x715cc50580
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x715cc50600
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x715cc50680
	Object*[] ExplicitAssets;//[Offset: 0x40, Size: 0x10] 0x715cb2dee0
	class Object[] ExplicitBlueprints;//[Offset: 0x50, Size: 0x10] 0x715cb2e020
	CollectionReference AssetCollection;//[Offset: 0x60, Size: 0x8] 0x715cc50780

--------------------------------
Class: CollectionReference // 715db1a600
	FName CollectionName;//[Offset: 0x0, Size: 0x8] 0x715db3fc00

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object // 71a4ad2180
	float InitialSpeed;//[Offset: 0xec, Size: 0x4] 0x7148cab700
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4] 0x7148cab780
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1] 0x7148cab800
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1] 0x7148cab880
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 0x1] 0x7148cab900
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 0x1] 0x7148cab980
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 0x1] 0x7148caba00
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 0x1] 0x7148caba80
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 0x1] 0x7148cabb00
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 0x1] 0x7148cabb80
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1] 0x7148cabc00
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1] 0x7148cabc80
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 0x1] 0x7148cabd00
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 0x1] 0x7148cabd80
	float PreviousHitTime;//[Offset: 0xf8, Size: 0x4] 0x7148cabe00
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 0xc] 0x7148cabe80
	float ProjectileGravityScale;//[Offset: 0x108, Size: 0x4] 0x7148cabf00
	float Buoyancy;//[Offset: 0x10c, Size: 0x4] 0x7148cabf80
	float Bounciness;//[Offset: 0x110, Size: 0x4] 0x7148cac000
	float Friction;//[Offset: 0x114, Size: 0x4] 0x7148cac080
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 0x4] 0x7148cac100
	float MinFrictionFraction;//[Offset: 0x11c, Size: 0x4] 0x7148cac180
	delegate OnProjectileBounce;//[Offset: 0x120, Size: 0x10] 0x7148cac200
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0x10] 0x7148cac280
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 0x4] 0x7148cac300
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 0x8] 0x7148cac380
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 0x4] 0x7148cac400
	int MaxSimulationIterations;//[Offset: 0x150, Size: 0x4] 0x7148cac480
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 0x4] 0x7148cac500
	float InterpLocationTime;//[Offset: 0x158, Size: 0x4] 0x7148cac580
	float InterpRotationTime;//[Offset: 0x15c, Size: 0x4] 0x7148cac600
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 0x4] 0x7148caa580
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 0x4] 0x7148caa600
	void StopSimulating(out const HitResult HitResult);// 0x62cbc20 0x714904a260
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x62cbcf8 0x714904a340
	void SetInterpolatedComponent(SceneComponent* Component);// 0x62cbb74 0x714904a420
	void ResetInterpolation();// 0x62cba54 0x714904a500
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x45c6aa0 0x714904a5e0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x45c6aa0 0x714904a6c0
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x62cba70 0x714904a7a0
	Vector LimitVelocity(Vector NewVelocity);// 0x62cb978 0x714904a880
	bool IsVelocityUnderSimulationThreshold();// 0x62cbda4 0x714904a960
	bool IsInterpolationComplete();// 0x62cba28 0x714904aa40

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object // 71a4ad1f00
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x715cc50500

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object // 71a4ad1c80
	RadialForceComponent* ForceComponent;//[Offset: 0x220, Size: 0x8] 0x715cc50480
	void ToggleForce();// 0x62cc554 0x715cc3ace0
	void FireImpulse();// 0x62cc5a8 0x715cc37400
	void EnableForce();// 0x62cc58c 0x715cc374e0
	void DisableForce();// 0x62cc570 0x715cc375c0

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object // 71a4ad1a00
	float Radius;//[Offset: 0x1f0, Size: 0x4] 0x715cc52080
	byte Falloff;//[Offset: 0x1f4, Size: 0x1] 0x715cc52100
	float ImpulseStrength;//[Offset: 0x1f8, Size: 0x4] 0x715cc50080
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1] 0x715cc50100
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1] 0x715cc50180
	float ForceStrength;//[Offset: 0x200, Size: 0x4] 0x715cc50200
	float DestructibleDamage;//[Offset: 0x204, Size: 0x4] 0x715cc50280
	byte[] ObjectTypesToAffect;//[Offset: 0x208, Size: 0x10] 0x715cb2de40
	void RemoveObjectTypeToAffect(byte ObjectType);// 0x62cc990 0x715cc3aa40
	void FireImpulse();// 0x62ccae8 0x715cc3ab20
	void AddObjectTypeToAffect(byte ObjectType);// 0x62cca3c 0x715cc3ac00

--------------------------------
Class: RectLight.Light.Actor.Object // 71a4ad1780
	RectLightComponent* RectLightComponent;//[Offset: 0x230, Size: 0x8] 0x715cc52000

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object // 71a4ad1500
	float SourceWidth;//[Offset: 0x328, Size: 0x4] 0x715cc51b00
	float SourceHeight;//[Offset: 0x32c, Size: 0x4] 0x715cc51b80
	float BarnDoorAngle;//[Offset: 0x330, Size: 0x4] 0x715cc51c00
	float BarnDoorLength;//[Offset: 0x334, Size: 0x4] 0x715cc51c80
	Texture* SourceTexture;//[Offset: 0x338, Size: 0x8] 0x715cc51d00
	void SetSourceWidth(float bNewValue);// 0x62cd484 0x715cc3a5e0
	void SetSourceTexture(Texture* bNewValue);// 0x62cd528 0x715cc3a6c0
	void SetSourceHeight(float NewValue);// 0x62cd3e0 0x715cc3a7a0
	void SetBarnDoorLength(float NewValue);// 0x62cd298 0x715cc3a880
	void SetBarnDoorAngle(float NewValue);// 0x62cd33c 0x715cc3a960

--------------------------------
Class: RendererSettings.DeveloperSettings.Object // 71a4ad1280
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cc54600
	int MaxMobileCascades;//[Offset: 0x3c, Size: 0x4] 0x715cc54680
	byte MobileMSAASampleCount;//[Offset: 0x40, Size: 0x1] 0x715cc54700
	bool bMobileUseLegacyShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x715cc54780
	bool bMobileAllowDitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x715cc54800
	bool bMobileAllowSoftwareOcclusionCulling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1] 0x715cc54880
	bool bMobileVirtualTextures;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1] 0x715cc54900
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 0x1] 0x715cc54980
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 0x1] 0x715cc54a00
	float MinScreenRadiusForLights;//[Offset: 0x44, Size: 0x4] 0x715cc54a80
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x48, Size: 0x4] 0x715cc54b00
	float MinScreenRadiusForCSMdepth;//[Offset: 0x4c, Size: 0x4] 0x715cc54b80
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cc54c00
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x715cc54c80
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x715cc54d00
	bool bVirtualTextures;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x715cc54d80
	bool bVirtualTexturedLightmaps;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x50, Size: 0x1] 0x715cc54e00
	uint32 VirtualTextureTileSize;//[Offset: 0x54, Size: 0x4] 0x715cc54e80
	uint32 VirtualTextureTileBorderSize;//[Offset: 0x58, Size: 0x4] 0x715cc54f00
	uint32 VirtualTextureFeedbackFactor;//[Offset: 0x5c, Size: 0x4] 0x715cc54f80
	bool bVirtualTextureEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x715cc55000
	bool bVirtualTextureEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x715cc55080
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x715cc55100
	bool bAnisotropicBRDF;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1] 0x715cc55180
	int ReflectionCaptureResolution;//[Offset: 0x64, Size: 0x4] 0x715cc55200
	bool bReflectionCaptureCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cc55280
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x715cc53200
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x715cc53280
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x715cc53300
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x715cc53380
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x715cc53400
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x715cc53480
	bool bEightBitMeshDistanceFields;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x715cc53500
	bool bGenerateLandscapeGIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x715cc53580
	bool bCompressMeshDistanceFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1] 0x715cc53600
	float TessellationAdaptivePixelsPerTriangle;//[Offset: 0x6c, Size: 0x4] 0x715cc53680
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x715cc53700
	byte TranslucentSortPolicy;//[Offset: 0x71, Size: 0x1] 0x715cc53780
	Vector TranslucentSortAxis;//[Offset: 0x74, Size: 0xc] 0x715cc53800
	byte CustomDepthStencil;//[Offset: 0x80, Size: 0x1] 0x715cc53880
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x715cc53900
	byte bEnableAlphaChannelInPostProcessing;//[Offset: 0x82, Size: 0x1] 0x715cc53980
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 0x1] 0x715cc53a00
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 0x1] 0x715cc53a80
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 0x1] 0x715cc53b00
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83, Size: 0x1] 0x715cc53b80
	byte DefaultFeatureAutoExposure;//[Offset: 0x84, Size: 0x1] 0x715cc53c00
	float DefaultFeatureAutoExposureBias;//[Offset: 0x88, Size: 0x4] 0x715cc53c80
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x715cc53d00
	bool bUsePreExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x715cc53d80
	bool bEnablePreExposureOnlyInTheEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c, Size: 0x1] 0x715cc53e00
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c, Size: 0x1] 0x715cc53e80
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c, Size: 0x1] 0x715cc53f00
	bool bTemporalUpsampling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c, Size: 0x1] 0x715cc53f80
	bool bSSGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c, Size: 0x1] 0x715cc54000
	byte DefaultFeatureAntiAliasing;//[Offset: 0x8d, Size: 0x1] 0x715cc54080
	enum DefaultLightUnits;//[Offset: 0x8e, Size: 0x1] 0x715cb2dd00
	byte DefaultBackBufferPixelFormat;//[Offset: 0x8f, Size: 0x1] 0x715cc54180
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x715cc54200
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x715cc52180
	byte EarlyZPass;//[Offset: 0x91, Size: 0x1] 0x715cc52200
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1] 0x715cc52280
	byte MobileEarlyZPass;//[Offset: 0x93, Size: 0x1] 0x715cc52300
	bool bMobileEarlyZPassOnlyMaterialMaskingVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1] 0x715cc52380
	bool bMobileEarlyZPassOnlyMaterialMaskingOpenGLES;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1] 0x715cc52400
	bool bMobileEarlyZPassOnlyMaterialMaskingMetal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1] 0x715cc52480
	bool bMobileEarlyZPassOnlyMaterialMaskingD3D;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 0x1] 0x715cc52500
	bool bMobileEarlyZPassOnlyMaterialMaskingOther;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x94, Size: 0x1] 0x715cc52580
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x94, Size: 0x1] 0x715cc52600
	byte ClearSceneMethod;//[Offset: 0x95, Size: 0x1] 0x715cc52680
	bool bBasePassOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x96, Size: 0x1] 0x715cc52700
	bool bVertexDeformationOutputsVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x96, Size: 0x1] 0x715cc52780
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x96, Size: 0x1] 0x715cc52800
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x96, Size: 0x1] 0x715cc52880
	int GPUSimulationTextureSizeX;//[Offset: 0x98, Size: 0x4] 0x715cc52900
	int GPUSimulationTextureSizeY;//[Offset: 0x9c, Size: 0x4] 0x715cc52980
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x715cc52a00
	byte GBufferFormat;//[Offset: 0xa1, Size: 0x1] 0x715cc52a80
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1] 0x715cc52b00
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1] 0x715cc52b80
	bool bMultiView;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa2, Size: 0x1] 0x715cc52c00
	bool bMobilePostProcessing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa2, Size: 0x1] 0x715cc52c80
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa2, Size: 0x1] 0x715cc52d00
	bool bMobileUseHWsRGBEncoding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa2, Size: 0x1] 0x715cc52d80
	bool bRoundRobinOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa2, Size: 0x1] 0x715cc52e00
	bool bODSCapture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa2, Size: 0x1] 0x715cc52e80
	bool bMeshStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa3, Size: 0x1] 0x715cc52f00
	float WireframeCullThreshold;//[Offset: 0xa4, Size: 0x4] 0x715cc52f80
	bool bEnableRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x715cc53000
	bool bEnableRayTracingTextureLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x715cc53080
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 0x1] 0x715cc53100
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1] 0x715cc53180
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1] 0x715cc51100
	bool bSupportAtmosphericFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 0x1] 0x715cc51180
	bool bSupportSkyAtmosphere;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 0x1] 0x715cc51200
	bool bSupportSkyAtmosphereAffectsHeightFog;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 0x1] 0x715cc51280
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x715cc51300
	enum DefaultSkinCacheBehavior;//[Offset: 0xaa, Size: 0x1] 0x715cb2dda0
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0xac, Size: 0x4] 0x715cc51400
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715cc51480
	bool bMobileEnableMovableLightCSMShaderCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x715cc51500
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x715cc51580
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x715cc51600
	uint32 MobileNumDynamicPointLights;//[Offset: 0xb4, Size: 0x4] 0x715cc51680
	bool bMobileDynamicPointLightsUseStaticBranch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x715cc51700
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x715cc51780
	bool bSupport16BitBoneIndex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1] 0x715cc51800
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1] 0x715cc51880
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1] 0x715cc51900
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1] 0x715cc51980
	bool bSupportMaterialLayers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1] 0x715cc51a00
	bool bLPV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb8, Size: 0x1] 0x715cc51a80

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object // 71a4ad1000
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715cc54500
	bool bForceRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x715cc54580

--------------------------------
Class: ReplicationConnectionDriver.Object // 71a4ad0b00

--------------------------------
Class: Rig.Object // 71a4ad0100
	TransformBase[] TransformBases;//[Offset: 0x30, Size: 0x10] 0x715cb2dbc0
	Node[] Nodes;//[Offset: 0x40, Size: 0x10] 0x715cb2dc60

--------------------------------
Class: TransformBase // 715ce72080
	FName Node;//[Offset: 0x0, Size: 0x8] 0x715ce6c900
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0x10] 0x715ce6cb80

--------------------------------
Class: TransformBaseConstraint // 715ce71fc0
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0x10] 0x715daed080

--------------------------------
Class: RigTransformConstraint // 715ce71f00
	byte TranformType;//[Offset: 0x0, Size: 0x1] 0x715ce6c980
	FName ParentSpace;//[Offset: 0x4, Size: 0x8] 0x715ce6ca00
	float Weight;//[Offset: 0xc, Size: 0x4] 0x715ce6ca80

--------------------------------
Class: Node // 715ce71e40
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715ce6c680
	FName ParentName;//[Offset: 0x8, Size: 0x8] 0x715ce6c700
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x715ce6c780
	FString DisplayName;//[Offset: 0x40, Size: 0x10] 0x715ce6c800
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715ce6c880

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object // 71a4ada380
	Rotator RotationRate;//[Offset: 0xec, Size: 0xc] 0x715cc55d80
	Vector PivotTranslation;//[Offset: 0xf8, Size: 0xc] 0x715cc55e00
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x715cc55e80

--------------------------------
Class: RuntimeOptionsBase.Object // 71a4ada100

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object // 71a4ad9c00
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x1f0, Size: 0x8] 0x715cc57300
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1] 0x715cc57380
	Actor* BoundsSourceActor;//[Offset: 0x200, Size: 0x8] 0x715cc55300
	Transform GetVirtualTextureTransform();// 0x62d2e60 0x715cc3a180

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object // 71a4ad9700
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x220, Size: 0x8] 0x715cc57100

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object // 71a4ad9480

--------------------------------
Class: Scene.Object // 71a4ad8f80

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object // 71a4ad8d00
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x230, Size: 0x8] 0x715cc57000
	void OnInterpToggle(bool bEnable);// 0x62dba6c 0x715cc3a0a0

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object // 71a4ad8a80
	byte ProjectionType;//[Offset: 0x288, Size: 0x1] 0x715cc56680
	float FOVAngle;//[Offset: 0x28c, Size: 0x4] 0x715cc56700
	float OrthoWidth;//[Offset: 0x290, Size: 0x4] 0x715cc56780
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x298, Size: 0x8] 0x715cc56800
	byte CompositeMode;//[Offset: 0x2a0, Size: 0x1] 0x715cc56880
	PostProcessSettings PostProcessSettings;//[Offset: 0x2b0, Size: 0x650] 0x715cc56900
	float PostProcessBlendWeight;//[Offset: 0x900, Size: 0x4] 0x715cc56980
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x904, Size: 0x1] 0x715cc56a00
	float CustomNearClippingPlane;//[Offset: 0x908, Size: 0x4] 0x715cc56a80
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90c, Size: 0x1] 0x715cc56b00
	Matrix CustomProjectionMatrix;//[Offset: 0x910, Size: 0x40] 0x715cc56b80
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 0x1] 0x715cc56c00
	Vector ClipPlaneBase;//[Offset: 0x954, Size: 0xc] 0x715cc56c80
	Vector ClipPlaneNormal;//[Offset: 0x960, Size: 0xc] 0x715cc56d00
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x96c, Size: 0x1] 0x715cc56d80
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x96c, Size: 0x1] 0x715cc56e00
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96d, Size: 0x1] 0x715cc56e80
	void CaptureScene();// 0x62dcb10 0x715cc39ee0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x62dcb24 0x715cc39fc0

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object // 71a4ad8800
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x288, Size: 0x8] 0x715cc56380
	bool bCaptureRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x715cc56400
	TextureRenderTargetCube* TextureTargetLeft;//[Offset: 0x298, Size: 0x8] 0x715cc56480
	TextureRenderTargetCube* TextureTargetRight;//[Offset: 0x2a0, Size: 0x8] 0x715cc56500
	TextureRenderTarget2D* TextureTargetODS;//[Offset: 0x2a8, Size: 0x8] 0x715cc56580
	float IPD;//[Offset: 0x2b0, Size: 0x4] 0x715cc56600
	void CaptureScene();// 0x62dd028 0x715cc39e00

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object // 71a4ae0600
	int SizeX;//[Offset: 0xc0, Size: 0x4] 0x715cc90d00
	LinearColor ClearColor;//[Offset: 0xc4, Size: 0x10] 0x715cc90d80
	byte OverrideFormat;//[Offset: 0xd4, Size: 0x1] 0x715cc90e00
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd5, Size: 0x1] 0x715cc90e80
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd5, Size: 0x1] 0x715cc90f00

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object // 71a4ad8580
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x230, Size: 0x8] 0x715cc58380
	void OnInterpToggle(bool bEnable);// 0x62dd3f0 0x715cc39d20

--------------------------------
Class: Selection.Object // 71a4ad8080

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object // 71a4ad7b80
	byte ShadowmapFlags;//[Offset: 0xe8, Size: 0x1] 0x715cc58680

--------------------------------
Class: SkeletalMeshActor.Actor.Object // 71a4ad7400
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x715cc5ab00
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x715cc5ab80
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x230, Size: 0x8] 0x715cc5ac00
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x238, Size: 0x8] 0x715cc5ac80
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x240, Size: 0x8] 0x715cc5ad00
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x248, Size: 0x8] 0x715cc5ad80
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x250, Size: 0x8] 0x715cc5ae00
	void OnRep_ReplicatedPhysAsset();// 0x62eb024 0x715cc3c9c0
	void OnRep_ReplicatedMesh();// 0x62eb040 0x715cc390e0
	void OnRep_ReplicatedMaterial1();// 0x62eafec 0x715cc391c0
	void OnRep_ReplicatedMaterial0();// 0x62eb008 0x715cc392a0

--------------------------------
Class: SkeletalMeshEditorData.Object // 71a4ad7180

--------------------------------
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object // 71a4ad6c80
	FName SkeletalMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x715cc61900

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object // 71a4ad6780
	enum TransformMode;//[Offset: 0x1f0, Size: 0x1] 0x715cb2ea20
	float BottomRadius;//[Offset: 0x1f4, Size: 0x4] 0x715cc63e80
	Color GroundAlbedo;//[Offset: 0x1f8, Size: 0x4] 0x715cc63f00
	float AtmosphereHeight;//[Offset: 0x1fc, Size: 0x4] 0x715cc63f80
	float MultiScatteringFactor;//[Offset: 0x200, Size: 0x4] 0x715cc64000
	float RayleighScatteringScale;//[Offset: 0x204, Size: 0x4] 0x715cc64080
	LinearColor RayleighScattering;//[Offset: 0x208, Size: 0x10] 0x715cc64100
	float RayleighExponentialDistribution;//[Offset: 0x218, Size: 0x4] 0x715cc64180
	float MieScatteringScale;//[Offset: 0x21c, Size: 0x4] 0x715cc64200
	LinearColor MieScattering;//[Offset: 0x220, Size: 0x10] 0x715cc62180
	float MieAbsorptionScale;//[Offset: 0x230, Size: 0x4] 0x715cc62200
	LinearColor MieAbsorption;//[Offset: 0x234, Size: 0x10] 0x715cc62280
	float MieAnisotropy;//[Offset: 0x244, Size: 0x4] 0x715cc62300
	float MieExponentialDistribution;//[Offset: 0x248, Size: 0x4] 0x715cc62380
	float OtherAbsorptionScale;//[Offset: 0x24c, Size: 0x4] 0x715cc62400
	LinearColor OtherAbsorption;//[Offset: 0x250, Size: 0x10] 0x715cc62480
	TentDistribution OtherTentDistribution;//[Offset: 0x260, Size: 0xc] 0x715cc62500
	LinearColor SkyLuminanceFactor;//[Offset: 0x26c, Size: 0x10] 0x715cc62580
	float AerialPespectiveViewDistanceScale;//[Offset: 0x27c, Size: 0x4] 0x715cc62600
	float HeightFogContribution;//[Offset: 0x280, Size: 0x4] 0x715cc62680
	float TransmittanceMinLightElevationAngle;//[Offset: 0x284, Size: 0x4] 0x715cc62700
	Guid bStaticLightingBuiltGUID;//[Offset: 0x2ac, Size: 0x10] 0x715cc62780
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0x62fc5ac 0x715cc71580
	void SetRayleighScatteringScale(float NewValue);// 0x62fccb8 0x715cc71660
	void SetRayleighScattering(LinearColor NewValue);// 0x62fcc14 0x715cc71740
	void SetRayleighExponentialDistribution(float NewValue);// 0x62fcb70 0x715cc71820
	void SetOtherAbsorptionScale(float NewValue);// 0x62fc6f4 0x715cc71900
	void SetOtherAbsorption(LinearColor NewValue);// 0x62fc650 0x715cc719e0
	void SetMieScatteringScale(float NewValue);// 0x62fcacc 0x715cc71ac0
	void SetMieScattering(LinearColor NewValue);// 0x62fca28 0x715cc71ba0
	void SetMieExponentialDistribution(float NewValue);// 0x62fc798 0x715cc71c80
	void SetMieAnisotropy(float NewValue);// 0x62fc83c 0x715cc3e780
	void SetMieAbsorptionScale(float NewValue);// 0x62fc984 0x715cc3e860
	void SetMieAbsorption(LinearColor NewValue);// 0x62fc8e0 0x715cc3e940
	void SetHeightFogContribution(float NewValue);// 0x62fc464 0x715cc3ea20
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0x62fc508 0x715cc3eb00
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0x62fcd5c 0x715cc3ebe0

--------------------------------
Class: TentDistribution // 715ce75c80
	float TipAltitude;//[Offset: 0x0, Size: 0x4] 0x715ce84d80
	float TipValue;//[Offset: 0x4, Size: 0x4] 0x715ce84e00
	float Width;//[Offset: 0x8, Size: 0x4] 0x715ce84e80

--------------------------------
Class: SkyAtmosphere.Info.Actor.Object // 71a4ad6500
	SkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x220, Size: 0x8] 0x715cc63d80

--------------------------------
Class: SkyLight.Info.Actor.Object // 71a4998f80
	SkyLightComponent* LightComponent;//[Offset: 0x220, Size: 0x8] 0x715d25d900
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x715d25d980
	void OnRep_bEnabled();// 0x62fd750 0x715d24ab20

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object // 71a4ad6280
	byte SourceType;//[Offset: 0x21c, Size: 0x1] 0x715cc65080
	TextureCube* Cubemap;//[Offset: 0x220, Size: 0x8] 0x715cc65100
	float SourceCubemapAngle;//[Offset: 0x228, Size: 0x4] 0x715cc65180
	int CubemapResolution;//[Offset: 0x22c, Size: 0x4] 0x715cc65200
	float SkyDistanceThreshold;//[Offset: 0x230, Size: 0x4] 0x715cc65280
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1] 0x715cc63200
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1] 0x715cc63280
	LinearColor LowerHemisphereColor;//[Offset: 0x238, Size: 0x10] 0x715cc63300
	float OcclusionMaxDistance;//[Offset: 0x248, Size: 0x4] 0x715cc63380
	float Contrast;//[Offset: 0x24c, Size: 0x4] 0x715cc63400
	float OcclusionExponent;//[Offset: 0x250, Size: 0x4] 0x715cc63480
	float MinOcclusion;//[Offset: 0x254, Size: 0x4] 0x715cc63500
	Color OcclusionTint;//[Offset: 0x258, Size: 0x4] 0x715cc63580
	byte OcclusionCombineMode;//[Offset: 0x25c, Size: 0x1] 0x715cc63600
	TextureCube* BlendDestinationCubemap;//[Offset: 0x308, Size: 0x8] 0x715cc63680
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x62fe20c 0x715cc70b00
	void SetOcclusionTint(out const Color InTint);// 0x62fde3c 0x715cc70be0
	void SetOcclusionExponent(float InOcclusionExponent);// 0x62fdcf4 0x715cc70cc0
	void SetOcclusionContrast(float InOcclusionContrast);// 0x62fdd98 0x715cc70da0
	void SetMinOcclusion(float InMinOcclusion);// 0x62fdc50 0x715cc70e80
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x62fdeec 0x715cc70f60
	void SetLightColor(LinearColor NewLightColor);// 0x62fe168 0x715cc71040
	void SetIntensity(float NewIntensity);// 0x62fe354 0x715cc71120
	void SetIndirectLightingIntensity(float NewIntensity);// 0x62fe2b0 0x715cc71200
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x62fdf9c 0x715cc712e0
	void SetCubemap(TextureCube* NewCubemap);// 0x62fe0c4 0x715cc713c0
	void RecaptureSky();// 0x62fdc3c 0x715cc714a0

--------------------------------
Class: SlateBrushAsset.Object // 71a4ad6000
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88] 0x715cc65000

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object // 71a4ad5d80

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object // 71a4ad5b00

--------------------------------
Class: SoundCue.SoundBase.Object // 71a4adf600
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x160, Size: 0x1] 0x715cc64780
	SoundNode* FirstNode;//[Offset: 0x168, Size: 0x8] 0x715cc64800
	float VolumeMultiplier;//[Offset: 0x170, Size: 0x4] 0x715cc64880
	float PitchMultiplier;//[Offset: 0x174, Size: 0x4] 0x715cc64900
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x178, Size: 0x3a0] 0x715cc64980
	float SubtitlePriority;//[Offset: 0x518, Size: 0x4] 0x715cc64a00
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 0x1] 0x715cc64a80
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 0x1] 0x715cc64b00
	int CookedQualityIndex;//[Offset: 0x524, Size: 0x4] 0x715cc64b80
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 0x1] 0x715cc64c00

--------------------------------
Class: SoundNode.Object // 71a4ade980
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10] 0x715cb2e660

--------------------------------
Class: SoundGroups.Object // 71a4adee80
	SoundGroup[] SoundGroupProfiles;//[Offset: 0x28, Size: 0x10] 0x715cb2e7a0

--------------------------------
Class: SoundGroup // 715ce75200
	byte SoundGroup;//[Offset: 0x0, Size: 0x1] 0x715ce87c00
	FString DisplayName;//[Offset: 0x8, Size: 0x10] 0x715ce87c80
	bool bAlwaysDecompressOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x715ce87d00
	float DecompressedDuration;//[Offset: 0x1c, Size: 0x4] 0x715ce87d80

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object // 71a4ade700

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object // 71a4ade480
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x8] 0x715cc66100
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x50, Size: 0x3a0] 0x715cc66180
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1] 0x715cc66200

--------------------------------
Class: SoundNodeBranch.SoundNode.Object // 71a4ade200
	FName BoolParameterName;//[Offset: 0x44, Size: 0x8] 0x715cc66080

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object // 71a4addf80
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x715cb2e5c0

--------------------------------
Class: SoundNodeDelay.SoundNode.Object // 71a4addd00
	float DelayMin;//[Offset: 0x44, Size: 0x4] 0x715cc65f00
	float DelayMax;//[Offset: 0x48, Size: 0x4] 0x715cc65f80

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object // 71a4adda80
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x48, Size: 0x20] 0x715cc65e00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cc65e80

--------------------------------
Class: DialogueWaveParameter // 715db18a40
	DialogueWave* DialogueWave;//[Offset: 0x0, Size: 0x8] 0x715db3b880
	DialogueContext Context;//[Offset: 0x8, Size: 0x18] 0x715db3ba00

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object // 71a4add800
	DistanceDatum[] CrossFadeInput;//[Offset: 0x48, Size: 0x10] 0x715cb2e520

--------------------------------
Class: DistanceDatum // 715ce74fc0
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4] 0x715ce89180
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4] 0x715ce89200
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4] 0x715ce89280
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4] 0x715ce89300
	float Volume;//[Offset: 0x10, Size: 0x4] 0x715ce89380

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object // 71a4add580
	float DopplerIntensity;//[Offset: 0x44, Size: 0x4] 0x715cc65c00
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cc65c80
	float SmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x715cc65d00

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object // 71a4add300
	float LoopStart;//[Offset: 0x44, Size: 0x4] 0x715cc65500
	float LoopEnd;//[Offset: 0x48, Size: 0x4] 0x715cc65580
	float DurationAfterLoop;//[Offset: 0x4c, Size: 0x4] 0x715cc65600
	int LoopCount;//[Offset: 0x50, Size: 0x4] 0x715cc65680
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x715cc65700
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x715cc65780
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x58, Size: 0x8] 0x715cc65800
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x60, Size: 0x8] 0x715cc65880
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x68, Size: 0x88] 0x715cc65900
	RuntimeFloatCurve PitchCurve;//[Offset: 0xf0, Size: 0x88] 0x715cc65980
	float PitchMin;//[Offset: 0x178, Size: 0x4] 0x715cc65a00
	float PitchMax;//[Offset: 0x17c, Size: 0x4] 0x715cc65a80
	float VolumeMin;//[Offset: 0x180, Size: 0x4] 0x715cc65b00
	float VolumeMax;//[Offset: 0x184, Size: 0x4] 0x715cc65b80

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object // 71a4add080
	int[] GroupSizes;//[Offset: 0x48, Size: 0x10] 0x715cb2e480

--------------------------------
Class: SoundNodeLooping.SoundNode.Object // 71a4adce00
	int LoopCount;//[Offset: 0x44, Size: 0x4] 0x715cc65380
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715cc65400

--------------------------------
Class: SoundNodeMature.SoundNode.Object // 71a4adcb80

--------------------------------
Class: SoundNodeMixer.SoundNode.Object // 71a4adc900
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x715cb2e3e0

--------------------------------
Class: SoundNodeModulator.SoundNode.Object // 71a4adc680
	float PitchMin;//[Offset: 0x44, Size: 0x4] 0x715cc67200
	float PitchMax;//[Offset: 0x48, Size: 0x4] 0x715cc67280
	float VolumeMin;//[Offset: 0x4c, Size: 0x4] 0x715cc67300
	float VolumeMax;//[Offset: 0x50, Size: 0x4] 0x715cc67380

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object // 71a4adc400
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x44, Size: 0x20] 0x715cc67100
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x64, Size: 0x20] 0x715cc67180

--------------------------------
Class: ModulatorContinuousParams // 715ce74f00
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x715ce88e00
	float Default;//[Offset: 0x8, Size: 0x4] 0x715ce88e80
	float MinInput;//[Offset: 0xc, Size: 0x4] 0x715ce88f00
	float MaxInput;//[Offset: 0x10, Size: 0x4] 0x715ce88f80
	float MinOutput;//[Offset: 0x14, Size: 0x4] 0x715ce89000
	float MaxOutput;//[Offset: 0x18, Size: 0x4] 0x715ce89080
	byte ParamMode;//[Offset: 0x1c, Size: 0x1] 0x715ce89100

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object // 71a4adc180
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x715cc66c00
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x715cc66c80
	float AmplitudeMin;//[Offset: 0x44, Size: 0x4] 0x715cc66d00
	float AmplitudeMax;//[Offset: 0x48, Size: 0x4] 0x715cc66d80
	float FrequencyMin;//[Offset: 0x4c, Size: 0x4] 0x715cc66e00
	float FrequencyMax;//[Offset: 0x50, Size: 0x4] 0x715cc66e80
	float OffsetMin;//[Offset: 0x54, Size: 0x4] 0x715cc66f00
	float OffsetMax;//[Offset: 0x58, Size: 0x4] 0x715cc66f80
	float CenterMin;//[Offset: 0x5c, Size: 0x4] 0x715cc67000
	float CenterMax;//[Offset: 0x60, Size: 0x4] 0x715cc67080

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object // 71a4adbf00
	FName ParamName;//[Offset: 0x58, Size: 0x8] 0x715cc66b80

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object // 71a4adbc80

--------------------------------
Class: SoundNodeRandom.SoundNode.Object // 71a4adba00
	float[] Weights;//[Offset: 0x48, Size: 0x10] 0x715cb2ff60
	bool[] HasBeenUsed;//[Offset: 0x58, Size: 0x10] 0x715cb2e340
	int NumRandomUsed;//[Offset: 0x68, Size: 0x4] 0x715cc66900
	int PreselectAtLevelLoad;//[Offset: 0x6c, Size: 0x4] 0x715cc66980
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x715cc66a00
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x715cc66a80
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x715cc66b00

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object // 71a4adb780
	SoundClass* SoundClassOverride;//[Offset: 0x48, Size: 0x8] 0x715cc66780

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object // 71a4adb500
	FName IntParameterName;//[Offset: 0x44, Size: 0x8] 0x715cc66700

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object // 71a4adb280
	FName WaveParameterName;//[Offset: 0x44, Size: 0x8] 0x715cc66680

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object // 71a4adb000
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x48, Size: 0x28] 0x715cc66500
	SoundWave* SoundWave;//[Offset: 0x70, Size: 0x8] 0x715cc66580
	bool bLooping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x715cc66600

--------------------------------
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object // 71a4adfd80
	FName SoundfieldEncodingFormat;//[Offset: 0x40, Size: 0x8] 0x715cc67800
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x48, Size: 0x8] 0x715cc67880
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x50, Size: 0x10] 0x715cb2fba0
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x60, Size: 0x8] 0x715cb2fc40

--------------------------------
Class: SoundfieldEffectBase.Object // 71a49c2900
	SoundfieldEffectSettingsBase* Settings;//[Offset: 0x28, Size: 0x8] 0x715cac8e80

--------------------------------
Class: SoundfieldEffectSettingsBase.Object // 71a49c2b80

--------------------------------
Class: EndpointSubmix.SoundSubmixBase.Object // 71a4adfb00
	FName EndpointType;//[Offset: 0x38, Size: 0x8] 0x715cc67700
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8] 0x715cb2fb00
	AudioEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8] 0x715cc67780

--------------------------------
Class: AudioEndpointSettingsBase.Object // 71a49c3a80

--------------------------------
Class: SoundfieldEndpointSubmix.SoundSubmixBase.Object // 71a4adf880
	FName SoundfieldEndpointType;//[Offset: 0x38, Size: 0x8] 0x715cc67500
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8] 0x715cb2f920
	SoundfieldEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8] 0x715cc67580
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x50, Size: 0x8] 0x715cb2f9c0
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x58, Size: 0x8] 0x715cc67600
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x60, Size: 0x10] 0x715cb2fa60

--------------------------------
Class: SoundfieldEndpointSettingsBase.Object // 71a49c2e00

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object // 71a49c1000

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object // 71a4909c00
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 0x1] 0x715d185c00

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object // 71a4ae5100
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x228, Size: 0x8] 0x715cc67480

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object // 71a4ae4e80
	float InfluenceRadius;//[Offset: 0x270, Size: 0x4] 0x715cc69400
	float CaptureDistanceScale;//[Offset: 0x274, Size: 0x4] 0x715cc69480
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x278, Size: 0x8] 0x715cc67400

--------------------------------
Class: SplineMetadata.Object // 71a4ae4c00

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4860600
	SplineCurves SplineCurves;//[Offset: 0x418, Size: 0x68] 0x715cfed680
	InterpCurveVector SplineInfo;//[Offset: 0x480, Size: 0x18] 0x715cfeb600
	InterpCurveQuat SplineRotInfo;//[Offset: 0x498, Size: 0x18] 0x715cfeb680
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4b0, Size: 0x18] 0x715cfeb700
	InterpCurveFloat SplineReparamTable;//[Offset: 0x4c8, Size: 0x18] 0x715cfeb780
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1] 0x715cfeb800
	int ReparamStepsPerSegment;//[Offset: 0x4e4, Size: 0x4] 0x715cfeb880
	float Duration;//[Offset: 0x4e8, Size: 0x4] 0x715cfeb900
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 0x1] 0x715cfeb980
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 0x1] 0x715cfeba00
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ee, Size: 0x1] 0x715cfeba80
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ef, Size: 0x1] 0x715cfebb00
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1] 0x715cfebb80
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 0x1] 0x715cfebc00
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f2, Size: 0x1] 0x715cfebc80
	float LoopPosition;//[Offset: 0x4f4, Size: 0x4] 0x715cfebd00
	Vector DefaultUpVector;//[Offset: 0x4f8, Size: 0xc] 0x715cfebd80
	void UpdateSpline();// 0x63149d8 0x715cfd8ba0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x6312d8c 0x715cfd8c80
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x63128b8 0x715cfd8d60
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x6313ea0 0x715cfd8e40
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x6312a38 0x715cfd8f20
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x6312c0c 0x715cfd9000
	void SetSplineWorldPoints(out const Vector[] Points);// 0x63130d0 0x715cfd5720
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x63126d8 0x715cfd5800
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x6313198 0x715cfd58e0
	void SetSplineLocalPoints(out const Vector[] Points);// 0x6313008 0x715cfd59c0
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x6313df0 0x715cfd5aa0
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x6312e88 0x715cfd5b80
	void SetDrawDebug(bool bShow);// 0x6313d44 0x715cfd5c60
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x63114b0 0x715cfd5d40
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x6313b08 0x715cfd5e20
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x6313c48 0x715cfd5f00
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x6313454 0x715cfd5fe0
	bool IsClosedLoop();// 0x6313ad0 0x715cfd60c0
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x6310e5c 0x715cfd61a0
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x630ffe0 0x715cfd6280
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x6310cb4 0x715cfd6360
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x63105a0 0x715cfd6440
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x63124c8 0x715cfd6520
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x63111ac 0x715cfd6600
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x6310360 0x715cfd66e0
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x6311004 0x715cfd67c0
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x63115d4 0x715cfd68a0
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x6313f50 0x715cfd6980
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x630fea0 0x715cfd6a60
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6311f10 0x715cfd6b40
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6314514 0x715cfd6c20
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6310bc0 0x715cfd6d00
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x630fbbc 0x715cfd6de0
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x6311b30 0x715cfd6ec0
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x63142d4 0x715cfd6fa0
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x63107e0 0x715cfd7080
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6310220 0x715cfd7160
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x63122e0 0x715cfd7240
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x63147f0 0x715cfd7320
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6310f10 0x715cfd3a40
	byte GetSplinePointType(int PointIndex);// 0x631280c 0x715cfd3b20
	float GetSplineLength();// 0x63115a0 0x715cfd3c00
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x630f984 0x715cfd3ce0
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x6311c7c 0x715cfd3dc0
	Vector GetScaleAtSplineInputKey(float InKey);// 0x6314134 0x715cfd3ea0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x631092c 0x715cfd3f80
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x63100e0 0x715cfd4060
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6312004 0x715cfd4140
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6314608 0x715cfd4220
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6310d68 0x715cfd4300
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x630fa80 0x715cfd43e0
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6311d2c 0x715cfd44c0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x63141e4 0x715cfd45a0
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x63109dc 0x715cfd4680
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x630fd60 0x715cfd4760
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6311e1c 0x715cfd4840
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6314420 0x715cfd4920
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6310acc 0x715cfd4a00
	int GetNumberOfSplineSegments();// 0x6312670 0x715cfd4ae0
	int GetNumberOfSplinePoints();// 0x63126a4 0x715cfd4bc0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x63106a0 0x715cfd4ca0
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x631257c 0x715cfd4d80
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x63148e4 0x715cfd4e60
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6311260 0x715cfd4f40
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x63119a8 0x715cfd5020
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x6311864 0x715cfd5100
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x63120f8 0x715cfd51e0
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x6311354 0x715cfd52c0
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x63116c8 0x715cfd53a0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x6314044 0x715cfd5480
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x63117b8 0x715cfd5560
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6310460 0x715cfd5640
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x63123d4 0x715cfd1d60
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x63146fc 0x715cfd1e40
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x63110b8 0x715cfd1f20
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x6311400 0x715cfd2000
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x63121ec 0x715cfd20e0
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x630f3b8 0x715cfd21c0
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x630ef9c 0x715cfd22a0
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x630f5c0 0x715cfd2380
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x630f0f8 0x715cfd2460
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x630f4bc 0x715cfd2540
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x630f1b4 0x715cfd2620
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x630f2b4 0x715cfd2700
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x630f7c8 0x715cfd27e0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x630f8cc 0x715cfd28c0
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x630f6c4 0x715cfd29a0
	void ClearSplinePoints(bool bUpdateSpline);// 0x6313a24 0x715cfd2a80
	void AddSplineWorldPoint(out const Vector Position);// 0x631339c 0x715cfd2b60
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x6313540 0x715cfd2c40
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x63136c0 0x715cfd2d20
	void AddSplineLocalPoint(out const Vector Position);// 0x63132e4 0x715cfd2e00
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x63137fc 0x715cfd2ee0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x6313904 0x715cfd2fc0

--------------------------------
Class: SplineCurves // 715ce77840
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18] 0x715ce89c80
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18] 0x715ce89d00
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18] 0x715ce89d80
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18] 0x715ce89e00
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8] 0x715ce89e80

--------------------------------
Class: InterpCurveQuat // 717dfc8a40
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10] 0x7172ba6460
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x717df8af80
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x717df8b000

--------------------------------
Class: InterpCurvePointQuat // 717dfc8b00
	float InVal;//[Offset: 0x0, Size: 0x4] 0x717df8b080
	Quat OutVal;//[Offset: 0x10, Size: 0x10] 0x717df8b100
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10] 0x717df8b180
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10] 0x717df8b200
	byte InterpMode;//[Offset: 0x40, Size: 0x1] 0x717df8b280

--------------------------------
Class: SplinePoint // 715ce77780
	float InputKey;//[Offset: 0x0, Size: 0x4] 0x715ce89800
	Vector Position;//[Offset: 0x4, Size: 0xc] 0x715ce89880
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x715ce89900
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x715ce89980
	Rotator Rotation;//[Offset: 0x28, Size: 0xc] 0x715ce89a00
	Vector Scale;//[Offset: 0x34, Size: 0xc] 0x715ce89a80
	byte Type;//[Offset: 0x40, Size: 0x1] 0x715ce89b00

--------------------------------
Class: SplineMeshActor.Actor.Object // 71a4ae4980
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x220, Size: 0x8] 0x715cc69380

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4ae4700
	SplineMeshParams SplineParams;//[Offset: 0x4b0, Size: 0x58] 0x715cc69680
	Vector SplineUpDir;//[Offset: 0x508, Size: 0xc] 0x715cc69700
	float SplineBoundaryMin;//[Offset: 0x514, Size: 0x4] 0x715cc69780
	Guid CachedMeshBodySetupGuid;//[Offset: 0x518, Size: 0x10] 0x715cc69800
	BodySetup* BodySetup;//[Offset: 0x528, Size: 0x8] 0x715cc69880
	float SplineBoundaryMax;//[Offset: 0x530, Size: 0x4] 0x715cc69900
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 0x1] 0x715cc69980
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x534, Size: 0x1] 0x715cc69a00
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x534, Size: 0x1] 0x715cc69a80
	byte ForwardAxis;//[Offset: 0x535, Size: 0x1] 0x715cc69b00
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x538, Size: 0x4] 0x715cc69b80
	void UpdateMesh();// 0x631bf54 0x715cc72540
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x631bd04 0x715cc72620
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x631b7d4 0x715cc72700
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x631b6b0 0x715cc727e0
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x631be2c 0x715cc728c0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x631b590 0x715cc729a0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x631b8f4 0x715cc72a80
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x631afd8 0x715cc72b60
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x631b108 0x715cc72c40
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x631bab4 0x715cc72d20
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x631b470 0x715cc72e00
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x631b34c 0x715cc72ee0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x631bbdc 0x715cc72fc0
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x631b22c 0x715cc730a0
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x631aeb4 0x715cc73180
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x631ad90 0x715cc73260
	Vector GetStartTangent();// 0x631bdf4 0x715cc73340
	Vector2D GetStartScale();// 0x631b8c0 0x715cc73420
	float GetStartRoll();// 0x631b7a0 0x715cc73500
	Vector GetStartPosition();// 0x631bf1c 0x715cc735e0
	Vector2D GetStartOffset();// 0x631b67c 0x715cc736c0
	Vector GetSplineUpDir();// 0x631b0d0 0x715cc737a0
	byte GetForwardAxis();// 0x631b1f8 0x715cc73880
	Vector GetEndTangent();// 0x631bba4 0x715cc73960
	Vector2D GetEndScale();// 0x631b55c 0x715cc70080
	float GetEndRoll();// 0x631b43c 0x715cc70160
	Vector GetEndPosition();// 0x631bccc 0x715cc70240
	Vector2D GetEndOffset();// 0x631b318 0x715cc70320
	float GetBoundaryMin();// 0x631afa4 0x715cc70400
	float GetBoundaryMax();// 0x631ae80 0x715cc704e0

--------------------------------
Class: SplineMeshParams // 715ce77600
	Vector StartPos;//[Offset: 0x0, Size: 0xc] 0x715ce8b200
	Vector StartTangent;//[Offset: 0xc, Size: 0xc] 0x715ce8b280
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8] 0x715ce8b300
	float StartRoll;//[Offset: 0x20, Size: 0x4] 0x715ce8b380
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8] 0x715ce8b400
	Vector EndPos;//[Offset: 0x2c, Size: 0xc] 0x715ce8b480
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8] 0x715ce8b500
	Vector EndTangent;//[Offset: 0x40, Size: 0xc] 0x715ce8b580
	float EndRoll;//[Offset: 0x4c, Size: 0x4] 0x715ce89500
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8] 0x715ce89580

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object // 71a4ae4200
	float TargetArmLength;//[Offset: 0x1f0, Size: 0x4] 0x715cc6aa80
	Vector SocketOffset;//[Offset: 0x1f4, Size: 0xc] 0x715cc6ab00
	Vector TargetOffset;//[Offset: 0x200, Size: 0xc] 0x715cc6ab80
	float ProbeSize;//[Offset: 0x20c, Size: 0x4] 0x715cc6ac00
	byte ProbeChannel;//[Offset: 0x210, Size: 0x1] 0x715cc6ac80
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1] 0x715cc6ad00
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1] 0x715cc6ad80
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 0x1] 0x715cc6ae00
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 0x1] 0x715cc6ae80
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 0x1] 0x715cc6af00
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 0x1] 0x715cc6af80
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 0x1] 0x715cc6b000
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 0x1] 0x715cc6b080
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 0x1] 0x715cc6b100
	float CameraLagSpeed;//[Offset: 0x214, Size: 0x4] 0x715cc6b180
	float CameraRotationLagSpeed;//[Offset: 0x218, Size: 0x4] 0x715cc6b200
	float CameraLagMaxTimeStep;//[Offset: 0x21c, Size: 0x4] 0x715cc6b280
	float CameraLagMaxDistance;//[Offset: 0x220, Size: 0x4] 0x715cc6b300
	bool IsCollisionFixApplied();// 0x631d4d4 0x715cc720e0
	Vector GetUnfixedCameraPosition();// 0x631d50c 0x715cc721c0
	Rotator GetTargetRotation();// 0x631d544 0x715cc722a0

--------------------------------
Class: StaticMeshActor.Actor.Object // 71a48e7900
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 0x8] 0x715d10a500
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x715d108480
	enum NavigationGeometryGatheringMode;//[Offset: 0x229, Size: 0x1] 0x715d0b4700
	void SetMobility(byte InMobility);// 0x63215d8 0x715d1152c0

--------------------------------
Class: StereoLayerShape.Object // 71a4ae3a80

--------------------------------
Class: StereoLayerShapeQuad.StereoLayerShape.Object // 71a4ae3580

--------------------------------
Class: StereoLayerShapeCylinder.StereoLayerShape.Object // 71a4ae3300
	float Radius;//[Offset: 0x28, Size: 0x4] 0x715cc6cf00
	float OverlayArc;//[Offset: 0x2c, Size: 0x4] 0x715cc6cf80
	int Height;//[Offset: 0x30, Size: 0x4] 0x715cc6d000
	void SetRadius(float InRadius);// 0x6323590 0x715cc74bc0
	void SetOverlayArc(float InOverlayArc);// 0x63234ec 0x715cc74ca0
	void SetHeight(int InHeight);// 0x6323448 0x715cc74d80

--------------------------------
Class: StereoLayerShapeCubemap.StereoLayerShape.Object // 71a4ae3080

--------------------------------
Class: StereoLayerShapeEquirect.StereoLayerShape.Object // 71a4ae2e00
	Box2D LeftUVRect;//[Offset: 0x28, Size: 0x14] 0x715cc6cb80
	Box2D RightUVRect;//[Offset: 0x3c, Size: 0x14] 0x715cc6cc00
	Vector2D LeftScale;//[Offset: 0x50, Size: 0x8] 0x715cc6cc80
	Vector2D RightScale;//[Offset: 0x58, Size: 0x8] 0x715cc6cd00
	Vector2D LeftBias;//[Offset: 0x60, Size: 0x8] 0x715cc6cd80
	Vector2D RightBias;//[Offset: 0x68, Size: 0x8] 0x715cc6ce00
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x6323bf4 0x715cc74ae0

--------------------------------
Class: EquirectProps // 715ce76700
	Box2D LeftUVRect;//[Offset: 0x0, Size: 0x14] 0x715ce8d400
	Box2D RightUVRect;//[Offset: 0x14, Size: 0x14] 0x715ce8d480
	Vector2D LeftScale;//[Offset: 0x28, Size: 0x8] 0x715ce8d500
	Vector2D RightScale;//[Offset: 0x30, Size: 0x8] 0x715ce8d580
	Vector2D LeftBias;//[Offset: 0x38, Size: 0x8] 0x715ce8d600
	Vector2D RightBias;//[Offset: 0x40, Size: 0x8] 0x715ce8d680

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object // 71a4ae3800
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x715cc6df00
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1] 0x715cc6df80
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1] 0x715cc6e000
	Texture* Texture;//[Offset: 0x1f8, Size: 0x8] 0x715cc6e080
	Texture* LeftTexture;//[Offset: 0x200, Size: 0x8] 0x715cc6e100
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x715cc6e180
	Vector2D QuadSize;//[Offset: 0x20c, Size: 0x8] 0x715cc6e200
	Box2D UVRect;//[Offset: 0x214, Size: 0x14] 0x715cc6e280
	float CylinderRadius;//[Offset: 0x228, Size: 0x4] 0x715cc6e300
	float CylinderOverlayArc;//[Offset: 0x22c, Size: 0x4] 0x715cc6e380
	int CylinderHeight;//[Offset: 0x230, Size: 0x4] 0x715cc6e400
	EquirectProps EquirectProps;//[Offset: 0x234, Size: 0x48] 0x715cc6e480
	byte StereoLayerType;//[Offset: 0x27c, Size: 0x1] 0x715cc6e500
	byte StereoLayerShape;//[Offset: 0x27d, Size: 0x1] 0x715cc6e580
	StereoLayerShape* Shape;//[Offset: 0x280, Size: 0x8] 0x715cc6e600
	int Priority;//[Offset: 0x288, Size: 0x4] 0x715cc6e680
	void SetUVRect(Box2D InUVRect);// 0x63241e4 0x715cc74060
	void SetTexture(Texture* InTexture);// 0x6324430 0x715cc74140
	void SetQuadSize(Vector2D InQuadSize);// 0x63242b4 0x715cc74220
	void SetPriority(int InPriority);// 0x6324038 0x715cc74300
	void SetLeftTexture(Texture* InTexture);// 0x632438c 0x715cc743e0
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x63240dc 0x715cc744c0
	void MarkTextureForUpdate();// 0x6324008 0x715cc745a0
	Box2D GetUVRect();// 0x63241bc 0x715cc74680
	Texture* GetTexture();// 0x6324370 0x715cc74760
	Vector2D GetQuadSize();// 0x6324294 0x715cc74840
	int GetPriority();// 0x632401c 0x715cc74920
	Texture* GetLeftTexture();// 0x6324354 0x715cc74a00

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4ae2b80
	static void ShowSplashScreen();// 0x6324b3c 0x715cc73ce0
	static void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x6324b50 0x715cc73dc0
	static void HideSplashScreen();// 0x6324b28 0x715cc73ea0
	static void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0x6324a8c 0x715cc73f80

--------------------------------
Class: StringTable.Object // 71a4ae2900

--------------------------------
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4ae2400
	static WorldSubsystem* GetWorldSubsystem(Object* ContextObject, class WorldSubsystem Class);// 0x6329634 0x715cc77240
	static LocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0x6329550 0x715cc77320
	static LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* ContextObject, class LocalPlayerSubsystem Class);// 0x6329718 0x715cc73a40
	static GameInstanceSubsystem* GetGameInstanceSubsystem(Object* ContextObject, class GameInstanceSubsystem Class);// 0x63297fc 0x715cc73b20
	static EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0x63298e0 0x715cc73c00

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object // 71a4ae1f00
	FrameRate FrameRate;//[Offset: 0x2c, Size: 0x8] 0x715cc6f000
	bool bGenerateFullFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x715cc6f080
	bool bUseHighPerformanceClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x715cc6f100

--------------------------------
Class: TargetPoint.Actor.Object // 71a4ae1a00

--------------------------------
Class: TextPropertyTestObject.Object // 71a4ae1780
	FText DefaultedText;//[Offset: 0x28, Size: 0x18] 0x715cc6ee80
	FText UndefaultedText;//[Offset: 0x40, Size: 0x18] 0x715cc6ef00
	FText TransientText;//[Offset: 0x58, Size: 0x18] 0x715cc6ef80

--------------------------------
Class: TextRenderActor.Actor.Object // 71a4ae1500
	TextRenderComponent* TextRender;//[Offset: 0x220, Size: 0x8] 0x715cc6ee00

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4ae1280
	FText Text;//[Offset: 0x418, Size: 0x18] 0x715cc6f800
	MaterialInterface* TextMaterial;//[Offset: 0x430, Size: 0x8] 0x715cc6f880
	Font* Font;//[Offset: 0x438, Size: 0x8] 0x715cc6f900
	byte HorizontalAlignment;//[Offset: 0x440, Size: 0x1] 0x715cc6f980
	byte VerticalAlignment;//[Offset: 0x441, Size: 0x1] 0x715cc6fa00
	Color TextRenderColor;//[Offset: 0x444, Size: 0x4] 0x715cc6fa80
	float XScale;//[Offset: 0x448, Size: 0x4] 0x715cc6fb00
	float YScale;//[Offset: 0x44c, Size: 0x4] 0x715cc6fb80
	float WorldSize;//[Offset: 0x450, Size: 0x4] 0x715cc6fc00
	float InvDefaultSize;//[Offset: 0x454, Size: 0x4] 0x715cc6fc80
	float HorizSpacingAdjust;//[Offset: 0x458, Size: 0x4] 0x715cc6fd00
	float VertSpacingAdjust;//[Offset: 0x45c, Size: 0x4] 0x715cc6fd80
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1] 0x715cc6fe00
	void SetYScale(float Value);// 0x632abac 0x715cc760c0
	void SetXScale(float Value);// 0x632ac50 0x715cc761a0
	void SetWorldSize(float Value);// 0x632a9c0 0x715cc76280
	void SetVertSpacingAdjust(float Value);// 0x632aa64 0x715cc76360
	void SetVerticalAlignment(byte Value);// 0x632ad94 0x715cc76440
	void SetTextRenderColor(Color Value);// 0x632acf4 0x715cc76520
	void SetTextMaterial(MaterialInterface* Material);// 0x632af80 0x715cc76600
	void SetText(FString Value);// 0x632b134 0x715cc766e0
	void SetHorizSpacingAdjust(float Value);// 0x632ab08 0x715cc767c0
	void SetHorizontalAlignment(byte Value);// 0x632ae38 0x715cc768a0
	void SetFont(Font* Value);// 0x632aedc 0x715cc76980
	void K2_SetText(out const FText Value);// 0x632b024 0x715cc76a60
	Vector GetTextWorldSize();// 0x632a950 0x715cc76b40
	Vector GetTextLocalSize();// 0x632a988 0x715cc76c20

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object // 71a4ae1000

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object // 71a4ae0d80
	byte Format;//[Offset: 0xc0, Size: 0x1] 0x715cc91080

--------------------------------
Class: TextureMipDataProviderFactory.AssetUserData.Object // 71a4ae0880

--------------------------------
Class: TimelineComponent.ActorComponent.Object // 71a4ae0100
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98] 0x715cc92100
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x715cc90080
	void Stop();// 0x6331e50 0x715cc78660
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x63315e4 0x715cc78740
	void SetTimelineLengthMode(byte NewLengthMode);// 0x6331890 0x715cc78820
	void SetTimelineLength(float NewLength);// 0x6331934 0x715cc78900
	void SetPlayRate(float NewRate);// 0x6331ae4 0x715cc789e0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x6331ca0 0x715cc78ac0
	void SetNewTime(float NewTime);// 0x6331a0c 0x715cc78ba0
	void SetLooping(bool bNewLooping);// 0x6331bc0 0x715cc78c80
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x6331500 0x715cc78d60
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x63317e4 0x715cc78e40
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x63316c8 0x715cc78f20
	void ReverseFromEnd();// 0x6331e64 0x715cc79000
	void Reverse();// 0x6331e78 0x715cc75720
	void PlayFromStart();// 0x6331e8c 0x715cc75800
	void Play();// 0x6331ea0 0x715cc758e0
	void OnRep_Timeline();// 0x63314ec 0x715cc759c0
	bool IsReversing();// 0x6331de0 0x715cc75aa0
	bool IsPlaying();// 0x6331e18 0x715cc75b80
	bool IsLooping();// 0x6331b88 0x715cc75c60
	float GetTimelineLength();// 0x63319d8 0x715cc75d40
	float GetPlayRate();// 0x6331ab0 0x715cc75e20
	float GetPlaybackPosition();// 0x6331c6c 0x715cc75f00
	bool GetIgnoreTimeDilation();// 0x63317ac 0x715cc75fe0

--------------------------------
Class: Timeline // 715ce79100
	byte LengthMode;//[Offset: 0x0, Size: 0x1] 0x715ce8ec80
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x715ce8ed00
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x715ce8ed80
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x715ce8ee00
	float Length;//[Offset: 0x4, Size: 0x4] 0x715ce8ee80
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x715ce8ef00
	float Position;//[Offset: 0xc, Size: 0x4] 0x715ce8ef80
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10] 0x715daef7e0
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10] 0x715daef880
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10] 0x715daef920
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10] 0x715daef9c0
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10] 0x715ce8d800
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10] 0x715ce8d880
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8] 0x715ce8d900
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8] 0x715ce8d980

--------------------------------
Class: TimelineEventEntry // 715ce78e00
	float Time;//[Offset: 0x0, Size: 0x4] 0x715ce8f000
	delegate EventFunc;//[Offset: 0x4, Size: 0x10] 0x715ce8f080

--------------------------------
Class: TimelineVectorTrack // 715ce78ec0
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8] 0x715ce8f180
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x715ce8f200
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x715ce8f280
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8] 0x715ce8f300

--------------------------------
Class: TimelineFloatTrack // 715ce78f80
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8] 0x715ce8f400
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x715ce8f480
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x715ce8f500
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8] 0x715ce8f580

--------------------------------
Class: TimelineLinearColorTrack // 715ce79040
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8] 0x715ce8f680
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x715ce8f700
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x715ce8f780
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8] 0x715ce8d700

--------------------------------
Class: TriggerBase.Actor.Object // 71a4ae9c00
	ShapeComponent* CollisionComponent;//[Offset: 0x220, Size: 0x8] 0x715cc91400

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object // 71a4ae9980

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object // 71a4ae9700

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object // 71a4ae9480

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object // 71a4ae9200

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object // 71a4ae8f80
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0x63380d0 0x715cc78040
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0x6338434 0x715cc78120
	void Init();// 0x63385d8 0x715cc78200
	int GetNumAccounts();// 0x63383b8 0x715cc782e0
	FString GetAccountName(int AccountIndex);// 0x63382b8 0x715cc783c0
	bool CanShowTweetUI();// 0x6338598 0x715cc784a0
	bool AuthorizeAccounts();// 0x63383f4 0x715cc78580

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object // 71a4ae8d00
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50] 0x715cecdf00

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object // 71a4ae8a80
	byte Status;//[Offset: 0xc0, Size: 0x1] 0x715cc92c00
	Guid Guid;//[Offset: 0xc4, Size: 0x10] 0x715cc92c80

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object // 71a4ae8800
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1] 0x715cc80920
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50] 0x715cecfe80
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50] 0x715cecff40
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18] 0x715cc92480
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18] 0x715cc92500
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18] 0x715cc92580
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18] 0x715cc92600
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18] 0x715cc92680
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18] 0x715cc92700
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18] 0x715cc92780
	float ApplicationScale;//[Offset: 0x188, Size: 0x4] 0x715cc92800
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1] 0x715cc809c0
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18] 0x715cc92900
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88] 0x715cc92980
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x715cc92a00
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1] 0x715cc92a80
	Object*[] CursorClasses;//[Offset: 0x238, Size: 0x10] 0x715cc80a60
	class Object* CustomScalingRuleClassInstance;//[Offset: 0x248, Size: 0x8] 0x715cc80b00
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x250, Size: 0x8] 0x715cc92b80

--------------------------------
Class: HardwareCursorReference // 715ce785c0
	FName CursorPath;//[Offset: 0x0, Size: 0x8] 0x715cea1080
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x8] 0x715ce8f800

--------------------------------
Class: VectorFieldAnimated.VectorField.Object // 71a4ae8300
	Texture2D* Texture;//[Offset: 0x48, Size: 0x8] 0x715cc93b80
	byte ConstructionOp;//[Offset: 0x50, Size: 0x1] 0x715cc93c00
	int VolumeSizeX;//[Offset: 0x54, Size: 0x4] 0x715cc93c80
	int VolumeSizeY;//[Offset: 0x58, Size: 0x4] 0x715cc93d00
	int VolumeSizeZ;//[Offset: 0x5c, Size: 0x4] 0x715cc93d80
	int SubImagesX;//[Offset: 0x60, Size: 0x4] 0x715cc93e00
	int SubImagesY;//[Offset: 0x64, Size: 0x4] 0x715cc93e80
	int FrameCount;//[Offset: 0x68, Size: 0x4] 0x715cc93f00
	float FramesPerSecond;//[Offset: 0x6c, Size: 0x4] 0x715cc93f80
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x715cc94000
	VectorFieldStatic* NoiseField;//[Offset: 0x78, Size: 0x8] 0x715cc94080
	float NoiseScale;//[Offset: 0x80, Size: 0x4] 0x715cc94100
	float NoiseMax;//[Offset: 0x84, Size: 0x4] 0x715cc94180

--------------------------------
Class: VectorFieldStatic.VectorField.Object // 71a4ae7e00
	int SizeX;//[Offset: 0x48, Size: 0x4] 0x715cc93680
	int SizeY;//[Offset: 0x4c, Size: 0x4] 0x715cc93700
	int SizeZ;//[Offset: 0x50, Size: 0x4] 0x715cc93780
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x715cc93800
	Vector4[] CPUData;//[Offset: 0x80, Size: 0x10] 0x715cc80880

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4ae8080
	VectorField* VectorField;//[Offset: 0x418, Size: 0x8] 0x715cc93900
	float Intensity;//[Offset: 0x420, Size: 0x4] 0x715cc93980
	float Tightness;//[Offset: 0x424, Size: 0x4] 0x715cc93a00
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x428, Size: 0x1] 0x715cc93a80
	void SetIntensity(float NewIntensity);// 0x6339744 0x715cc77f60

--------------------------------
Class: VectorFieldVolume.Actor.Object // 71a4ae7b80
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x220, Size: 0x8] 0x715cc93600

--------------------------------
Class: VirtualTexture.Object // 71a4ae7900

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object // 71a4ae7680

--------------------------------
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object // 71a4ae7400
	int8[] TypeToLayer;//[Offset: 0xe8, Size: 0x10] 0x715cc807e0

--------------------------------
Class: VirtualTexturePoolConfig.Object // 71a4ae7180
	int DefaultSizeInMegabyte;//[Offset: 0x28, Size: 0x4] 0x715cc93480
	VirtualTextureSpacePoolConfig[] Pools;//[Offset: 0x30, Size: 0x10] 0x715cc80740

--------------------------------
Class: VirtualTextureSpacePoolConfig // 715ce78440
	int MinTileSize;//[Offset: 0x0, Size: 0x4] 0x715cea0c00
	int MaxTileSize;//[Offset: 0x4, Size: 0x4] 0x715cea0c80
	byte[] Formats;//[Offset: 0x8, Size: 0x10] 0x715ce913c0
	int SizeInMegabyte;//[Offset: 0x18, Size: 0x4] 0x715cea0d80
	bool bAllowSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x715cea0e00

--------------------------------
Class: VisualLoggerAutomationTests.Object // 71a4ae6f00

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object // 71a4ae6c80

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object // 71a4ae6a00
	static void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0x633b1fc 0x715cc77a20
	static void LogText(Object* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);// 0x633b02c 0x715cc77b00
	static void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString Text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0x633a810 0x715cc77be0
	static void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0x633ad7c 0x715cc77cc0
	static void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0x633ab20 0x715cc77da0
	static void EnableRecording(bool bEnabled);// 0x633b2d0 0x715cc77e80

--------------------------------
Class: VoiceChannel.Channel.Object // 71a4ae6780

--------------------------------
Class: VOIPTalker.ActorComponent.Object // 71a4ae6500
	VoiceSettings Settings;//[Offset: 0xb0, Size: 0x18] 0x715cc94480
	void RegisterWithPlayerState(PlayerState* OwningState);// 0x633bb44 0x715cc775c0
	float GetVoiceLevel();// 0x633bb10 0x715cc776a0
	static VOIPTalker* CreateTalkerForPlayer(PlayerState* OwningState);// 0x633bbe8 0x715cc77780
	void BPOnTalkingEnd();// 0x633ba48 0x715cc77860
	void BPOnTalkingBegin(AudioComponent* AudioComponent);// 0x633ba64 0x715cc77940

--------------------------------
Class: VoiceSettings // 715ce78380
	SceneComponent* ComponentToAttachTo;//[Offset: 0x0, Size: 0x8] 0x715cea0a80
	SoundAttenuation* AttenuationSettings;//[Offset: 0x8, Size: 0x8] 0x715cea0b00
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x10, Size: 0x8] 0x715cea0b80

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object // 71a4ae6280
	static void SetMicThreshold(float InThreshold);// 0x633c210 0x715cc774e0

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object // 71a4ae5d80
	Int32Interval AllowedMipLevelRange;//[Offset: 0x258, Size: 0x8] 0x715cc94380

--------------------------------
Class: Int32Interval // 717dfca9c0
	int Min;//[Offset: 0x0, Size: 0x4] 0x717df8b780
	int Max;//[Offset: 0x4, Size: 0x4] 0x717df8b800

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object // 71a4ae5b00
	WindDirectionalSourceComponent* Component;//[Offset: 0x220, Size: 0x8] 0x715cc94300

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object // 71a4ae5880
	float Strength;//[Offset: 0x1f0, Size: 0x4] 0x715cc95e00
	float Speed;//[Offset: 0x1f4, Size: 0x4] 0x715cc95e80
	float MinGustAmount;//[Offset: 0x1f8, Size: 0x4] 0x715cc95f00
	float MaxGustAmount;//[Offset: 0x1fc, Size: 0x4] 0x715cc95f80
	float Radius;//[Offset: 0x200, Size: 0x4] 0x715cc96000
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1] 0x715cc96080
	void SetWindType(enum InNewType);// 0x633cccc 0x715cc7a960
	void SetStrength(float InNewStrength);// 0x633d000 0x715cc7aa40
	void SetSpeed(float InNewSpeed);// 0x633cf5c 0x715cc7ab20
	void SetRadius(float InNewRadius);// 0x633cd70 0x715cc7ac00
	void SetMinimumGustAmount(float InNewMinGust);// 0x633ceb8 0x715cc7ace0
	void SetMaximumGustAmount(float InNewMaxGust);// 0x633ce14 0x715cc77400

--------------------------------
Class: LandscapeInfoMap.Object // 71a499a880

--------------------------------
Class: HierarchicalLODSetup.Object // 71a4ae5380
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10] 0x715cc82900
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28] 0x715cc96a80

--------------------------------
Class: HierarchicalSimplification // 715ce7ab40
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4] 0x715cea1900
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4] 0x715cea1980
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715cea1a00
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x715cea1a80
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x715cea1b00
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x715cea1b80
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x715cea1c00
	MeshProxySettings ProxySetting;//[Offset: 0xc, Size: 0xa8] 0x715cea1c80
	MeshMergingSettings MergeSetting;//[Offset: 0xb4, Size: 0xa0] 0x715cea1d00
	float DesiredBoundRadius;//[Offset: 0x154, Size: 0x4] 0x715cea1d80
	float DesiredFillingPercentage;//[Offset: 0x158, Size: 0x4] 0x715cea1e00
	int MinNumberOfActorsToBuild;//[Offset: 0x15c, Size: 0x4] 0x715cea1e80

--------------------------------
Class: MeshProxySettings // 715db1df00
	int ScreenSize;//[Offset: 0x0, Size: 0x4] 0x715ce61a80
	float VoxelSize;//[Offset: 0x4, Size: 0x4] 0x715ce61b00
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x88] 0x715ce61b80
	float MergeDistance;//[Offset: 0x90, Size: 0x4] 0x715ce61c00
	Color UnresolvedGeometryColor;//[Offset: 0x94, Size: 0x4] 0x715ce61c80
	float MaxRayCastDist;//[Offset: 0x98, Size: 0x4] 0x715ce61d00
	float HardAngleThreshold;//[Offset: 0x9c, Size: 0x4] 0x715ce61d80
	int LightMapResolution;//[Offset: 0xa0, Size: 0x4] 0x715ce61e00
	byte NormalCalculationMethod;//[Offset: 0xa4, Size: 0x1] 0x715ce61e80
	byte LandscapeCullingPrecision;//[Offset: 0xa5, Size: 0x1] 0x715ce61f00
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa6, Size: 0x1] 0x715ce61f80
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa6, Size: 0x1] 0x715ce62000
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa6, Size: 0x1] 0x715ce62080
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa6, Size: 0x1] 0x715ce62100
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa6, Size: 0x1] 0x715ce60080
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa6, Size: 0x1] 0x715ce60100
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa6, Size: 0x1] 0x715ce60180
	bool bAllowAdjacency;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa6, Size: 0x1] 0x715ce60200
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa7, Size: 0x1] 0x715ce60280
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa7, Size: 0x1] 0x715ce60300
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa7, Size: 0x1] 0x715ce60380
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa7, Size: 0x1] 0x715ce60400
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa7, Size: 0x1] 0x715ce60480

--------------------------------
Class: MaterialProxySettings // 715db1ca00
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8] 0x715db4c280
	float GutterSpace;//[Offset: 0x8, Size: 0x4] 0x715db4c300
	float MetallicConstant;//[Offset: 0xc, Size: 0x4] 0x715db4c380
	float RoughnessConstant;//[Offset: 0x10, Size: 0x4] 0x715db4c400
	float AnisotropyConstant;//[Offset: 0x14, Size: 0x4] 0x715db4c480
	float SpecularConstant;//[Offset: 0x18, Size: 0x4] 0x715db4c500
	float OpacityConstant;//[Offset: 0x1c, Size: 0x4] 0x715db4c580
	float OpacityMaskConstant;//[Offset: 0x20, Size: 0x4] 0x715db4c600
	float AmbientOcclusionConstant;//[Offset: 0x24, Size: 0x4] 0x715db4a580
	byte TextureSizingType;//[Offset: 0x28, Size: 0x1] 0x715db4a600
	byte MaterialMergeType;//[Offset: 0x29, Size: 0x1] 0x715db4a680
	byte BlendMode;//[Offset: 0x2a, Size: 0x1] 0x715db4a700
	bool bAllowTwoSidedMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x715db4a780
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x715db4a800
	bool bTangentMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x715db4a880
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x715db4a900
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x715db4a980
	bool bAnisotropyMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x715db4aa00
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x715db4aa80
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x715db4ab00
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x715db4ab80
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x715db4ac00
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1] 0x715db4ac80
	IntPoint DiffuseTextureSize;//[Offset: 0x30, Size: 0x8] 0x715db4ad00
	IntPoint NormalTextureSize;//[Offset: 0x38, Size: 0x8] 0x715db4ad80
	IntPoint TangentTextureSize;//[Offset: 0x40, Size: 0x8] 0x715db4ae00
	IntPoint MetallicTextureSize;//[Offset: 0x48, Size: 0x8] 0x715db4ae80
	IntPoint RoughnessTextureSize;//[Offset: 0x50, Size: 0x8] 0x715db4af00
	IntPoint AnisotropyTextureSize;//[Offset: 0x58, Size: 0x8] 0x715db4af80
	IntPoint SpecularTextureSize;//[Offset: 0x60, Size: 0x8] 0x715db4b000
	IntPoint EmissiveTextureSize;//[Offset: 0x68, Size: 0x8] 0x715db4b080
	IntPoint OpacityTextureSize;//[Offset: 0x70, Size: 0x8] 0x715db4b100
	IntPoint OpacityMaskTextureSize;//[Offset: 0x78, Size: 0x8] 0x715db4b180
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x80, Size: 0x8] 0x715db4b200

--------------------------------
Class: MeshMergingSettings // 715db1dfc0
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4] 0x715ce60500
	enum OutputUVs;//[Offset: 0x4, Size: 0x1] 0x715daee020
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x88] 0x715ce60600
	int GutterSize;//[Offset: 0x94, Size: 0x4] 0x715ce60680
	int SpecificLOD;//[Offset: 0x98, Size: 0x4] 0x715ce60700
	enum LODSelectionType;//[Offset: 0x9c, Size: 0x1] 0x715daee0c0
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d, Size: 0x1] 0x715ce60800
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d, Size: 0x1] 0x715ce60880
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d, Size: 0x1] 0x715ce60900
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9d, Size: 0x1] 0x715ce60980
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9d, Size: 0x1] 0x715ce60a00
	bool bCreateMergedMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9d, Size: 0x1] 0x715ce60a80
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9d, Size: 0x1] 0x715ce60b00
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9d, Size: 0x1] 0x715ce60b80
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e, Size: 0x1] 0x715ce60c00
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e, Size: 0x1] 0x715ce60c80
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9e, Size: 0x1] 0x715ce60d00
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9e, Size: 0x1] 0x715ce60d80
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9e, Size: 0x1] 0x715ce60e00
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9e, Size: 0x1] 0x715ce60e80

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object // 715ce02000

--------------------------------
Class: AbilitySystemBlueprintLibrary.BlueprintFunctionLibrary.Object // 719b178f80
	static bool TargetDataHasOrigin(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x31c9bcc 0x715da1e160
	static bool TargetDataHasHitResult(out const GameplayAbilityTargetDataHandle HitResult, int Index);// 0x31c9f58 0x715da1e240
	static bool TargetDataHasEndPoint(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x31c9860 0x715da1e320
	static bool TargetDataHasActor(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x31ca108 0x715da1e400
	static GameplayEffectSpecHandle SetStackCountToMax(GameplayEffectSpecHandle SpecHandle);// 0x31c30ac 0x715da1e4e0
	static GameplayEffectSpecHandle SetStackCount(GameplayEffectSpecHandle SpecHandle, int StackCount);// 0x31c3300 0x715da1e5c0
	static GameplayEffectSpecHandle SetDuration(GameplayEffectSpecHandle SpecHandle, float Duration);// 0x31c4698 0x715da1e6a0
	static void SendGameplayEventToActor(Actor* Actor, GameplayTag EventTag, GameplayEventData Payload);// 0x31cd0a0 0x715da1adc0
	static bool NotEqual_GameplayAttributeGameplayAttribute(GameplayAttribute AttributeA, GameplayAttribute AttributeB);// 0x31cc0c8 0x715da1aea0
	static GameplayEffectSpecHandle MakeSpecHandle(GameplayEffect* InGameplayEffect, Actor* InInstigator, Actor* InEffectCauser, float InLevel);// 0x31cace0 0x715da1af80
	static GameplayCueParameters MakeGameplayCueParameters(float NormalizedMagnitude, float RawMagnitude, GameplayEffectContextHandle EffectContext, GameplayTag MatchedTagName, GameplayTag OriginalTag, GameplayTagContainer AggregatedSourceTags, GameplayTagContainer AggregatedTargetTags, Vector Location, Vector Normal, Actor* Instigator, Actor* EffectCauser, Object* SourceObject, PhysicalMaterial* PhysicalMaterial, int GameplayEffectLevel, int AbilityLevel, SceneComponent* TargetAttachComponent);// 0x31c5610 0x715da1b060
	static GameplayTargetDataFilterHandle MakeFilterHandle(GameplayTargetDataFilter Filter, Actor* FilterActor);// 0x31caf28 0x715da1b140
	static bool IsValid(GameplayAttribute Attribute);// 0x31ccfa0 0x715da1b220
	static bool IsInstigatorLocallyControlledPlayer(GameplayCueParameters Parameters);// 0x31c7d70 0x715da1b300
	static bool IsInstigatorLocallyControlled(GameplayCueParameters Parameters);// 0x31c8004 0x715da1b3e0
	static bool HasHitResult(GameplayCueParameters Parameters);// 0x31c72d0 0x715da1b4c0
	static Transform GetTargetDataOrigin(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x31c9a10 0x715da1b5a0
	static Transform GetTargetDataEndPointTransform(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x31c94f4 0x715da1b680
	static Vector GetTargetDataEndPoint(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x31c96b0 0x715da1b760
	static Vector GetOrigin(GameplayCueParameters Parameters);// 0x31c67fc 0x715da1b840
	static float GetModifiedAttributeMagnitude(GameplayEffectSpecHandle SpecHandle, GameplayAttribute Attribute);// 0x31c297c 0x715da1b920
	static Transform GetInstigatorTransform(GameplayCueParameters Parameters);// 0x31c6a90 0x715da1ba00
	static Actor* GetInstigatorActor(GameplayCueParameters Parameters);// 0x31c6d20 0x715da1bae0
	static HitResult GetHitResultFromTargetData(out const GameplayAbilityTargetDataHandle HitResult, int Index);// 0x31c9d7c 0x715da1bbc0
	static HitResult GetHitResult(GameplayCueParameters Parameters);// 0x31c7564 0x715da1bca0
	static bool GetGameplayCueEndLocationAndNormal(Actor* TargetActor, GameplayCueParameters Parameters, out Vector Location, out Vector Normal);// 0x31c6480 0x715da1bd80
	static bool GetGameplayCueDirection(Actor* TargetActor, GameplayCueParameters Parameters, out Vector Direction);// 0x31c6160 0x715da1be60
	static float GetFloatAttributeFromAbilitySystemComponent(const AbilitySystemComponent* AbilitySystem, GameplayAttribute Attribute, out bool bSuccessfullyFoundAttribute);// 0x31ccc70 0x715da1bf40
	static float GetFloatAttributeBaseFromAbilitySystemComponent(const AbilitySystemComponent* AbilitySystemComponent, GameplayAttribute Attribute, out bool bSuccessfullyFoundAttribute);// 0x31cc940 0x715da1c020
	static float GetFloatAttributeBase(const Actor* Actor, GameplayAttribute Attribute, out bool bSuccessfullyFoundAttribute);// 0x31ccad8 0x715da1c100
	static float GetFloatAttribute(const Actor* Actor, GameplayAttribute Attribute, out bool bSuccessfullyFoundAttribute);// 0x31cce08 0x715da1c1e0
	static Actor* GetFirstActorFromTargetData(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x31ca854 0x715da1c2c0
	static GameplayEffectContextHandle GetEffectContext(GameplayEffectSpecHandle SpecHandle);// 0x31c2e4c 0x715da1c3a0
	static int GetDataCountFromTargetData(out const GameplayAbilityTargetDataHandle TargetData);// 0x31cb760 0x715da1c480
	static GameplayEffectSpecHandle[] GetAllLinkedGameplayEffectSpecHandles(GameplayEffectSpecHandle SpecHandle);// 0x31c2b88 0x715da1c560
	static Actor*[] GetAllActorsFromTargetData(out const GameplayAbilityTargetDataHandle TargetData);// 0x31ca4ac 0x715da1c640
	static Actor*[] GetActorsFromTargetData(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x31ca660 0x715da1c720
	static int GetActorCount(GameplayCueParameters Parameters);// 0x31c7ae0 0x715da1c800
	static Actor* GetActorByIndex(GameplayCueParameters Parameters, int Index);// 0x31c7820 0x715da1c8e0
	static float GetActiveGameplayEffectTotalDuration(ActiveGameplayEffectHandle ActiveHandle);// 0x31c2620 0x715da1c9c0
	static float GetActiveGameplayEffectStartTime(ActiveGameplayEffectHandle ActiveHandle);// 0x31c2778 0x715da190e0
	static int GetActiveGameplayEffectStackLimitCount(ActiveGameplayEffectHandle ActiveHandle);// 0x31c2824 0x715da191c0
	static int GetActiveGameplayEffectStackCount(ActiveGameplayEffectHandle ActiveHandle);// 0x31c28d0 0x715da192a0
	static float GetActiveGameplayEffectRemainingDuration(Object* WorldContextObject, ActiveGameplayEffectHandle ActiveHandle);// 0x31c253c 0x715da19380
	static float GetActiveGameplayEffectExpectedEndTime(ActiveGameplayEffectHandle ActiveHandle);// 0x31c26cc 0x715da19460
	static FString GetActiveGameplayEffectDebugString(ActiveGameplayEffectHandle ActiveHandle);// 0x31c2444 0x715da19540
	static AbilitySystemComponent* GetAbilitySystemComponent(Actor* Actor);// 0x31cd304 0x715da19620
	static void ForwardGameplayCueToTarget(interface classNone TargetCueInterface, byte EventType, GameplayCueParameters Parameters);// 0x31c6fb0 0x715da19700
	static GameplayAbilityTargetDataHandle FilterTargetData(out const GameplayAbilityTargetDataHandle TargetDataHandle, GameplayTargetDataFilterHandle ActorFilterClass);// 0x31cb10c 0x715da197e0
	static float EvaluateAttributeValueWithTagsAndBase(AbilitySystemComponent* AbilitySystem, GameplayAttribute Attribute, out const GameplayTagContainer SourceTags, out const GameplayTagContainer TargetTags, float BaseValue, out bool bSuccess);// 0x31cc408 0x715da198c0
	static float EvaluateAttributeValueWithTags(AbilitySystemComponent* AbilitySystem, GameplayAttribute Attribute, out const GameplayTagContainer SourceTags, out const GameplayTagContainer TargetTags, out bool bSuccess);// 0x31cc6c8 0x715da199a0
	static bool EqualEqual_GameplayAttributeGameplayAttribute(GameplayAttribute AttributeA, GameplayAttribute AttributeB);// 0x31cc268 0x715da19a80
	static void EffectContextSetOrigin(GameplayEffectContextHandle EffectContext, Vector Origin);// 0x31c88c8 0x715da19b60
	static bool EffectContextIsValid(GameplayEffectContextHandle EffectContext);// 0x31c9364 0x715da19c40
	static bool EffectContextIsInstigatorLocallyControlled(GameplayEffectContextHandle EffectContext);// 0x31c91d4 0x715da19d20
	static bool EffectContextHasHitResult(GameplayEffectContextHandle EffectContext);// 0x31c8e7c 0x715da19e00
	static Object* EffectContextGetSourceObject(GameplayEffectContextHandle EffectContext);// 0x31c8298 0x715da19ee0
	static Actor* EffectContextGetOriginalInstigatorActor(GameplayEffectContextHandle EffectContext);// 0x31c85b0 0x715da19fc0
	static Vector EffectContextGetOrigin(GameplayEffectContextHandle EffectContext);// 0x31c8a8c 0x715da1a0a0
	static Actor* EffectContextGetInstigatorActor(GameplayEffectContextHandle EffectContext);// 0x31c873c 0x715da1a180
	static HitResult EffectContextGetHitResult(GameplayEffectContextHandle EffectContext);// 0x31c900c 0x715da1a260
	static Actor* EffectContextGetEffectCauser(GameplayEffectContextHandle EffectContext);// 0x31c8424 0x715da1a340
	static void EffectContextAddHitResult(GameplayEffectContextHandle EffectContext, HitResult HitResult, bool bReset);// 0x31c8c1c 0x715da1a420
	static bool DoesTargetDataContainActor(out const GameplayAbilityTargetDataHandle TargetData, int Index, Actor* Actor);// 0x31ca2b8 0x715da1a500
	static bool DoesGameplayCueMeetTagRequirements(GameplayCueParameters Parameters, out const GameplayTagRequirements SourceTagReqs, out const GameplayTagRequirements TargetTagReqs);// 0x31c5db0 0x715da1a5e0
	static GameplayEffectSpecHandle CloneSpecHandle(Actor* InNewInstigator, Actor* InEffectCauser, GameplayEffectSpecHandle GameplayEffectSpecHandle_Clone);// 0x31caa00 0x715da1a6c0
	static void BreakGameplayCueParameters(out const GameplayCueParameters Parameters, out float NormalizedMagnitude, out float RawMagnitude, out GameplayEffectContextHandle EffectContext, out GameplayTag MatchedTagName, out GameplayTag OriginalTag, out GameplayTagContainer AggregatedSourceTags, out GameplayTagContainer AggregatedTargetTags, out Vector Location, out Vector Normal, out Actor* Instigator, out Actor* EffectCauser, out Object* SourceObject, out PhysicalMaterial* PhysicalMaterial, out int GameplayEffectLevel, out int AbilityLevel, out SceneComponent* TargetAttachComponent);// 0x31c4ee8 0x715da1a7a0
	static GameplayEffectSpecHandle AssignTagSetByCallerMagnitude(GameplayEffectSpecHandle SpecHandle, GameplayTag DataTag, float Magnitude);// 0x31c4930 0x715da1a880
	static GameplayEffectSpecHandle AssignSetByCallerMagnitude(GameplayEffectSpecHandle SpecHandle, FName DataName, float Magnitude);// 0x31c4c0c 0x715da1a960
	static GameplayAbilityTargetDataHandle AppendTargetDataHandle(GameplayAbilityTargetDataHandle TargetHandle, out const GameplayAbilityTargetDataHandle HandleToAdd);// 0x31cbc88 0x715da1aa40
	static GameplayEffectSpecHandle AddLinkedGameplayEffectSpec(GameplayEffectSpecHandle SpecHandle, GameplayEffectSpecHandle LinkedGameplayEffectSpec);// 0x31c3830 0x715da1ab20
	static GameplayEffectSpecHandle AddLinkedGameplayEffect(GameplayEffectSpecHandle SpecHandle, class GameplayEffect LinkedGameplayEffect);// 0x31c3598 0x715da1ac00
	static GameplayEffectSpecHandle AddGrantedTags(GameplayEffectSpecHandle SpecHandle, GameplayTagContainer NewGameplayTags);// 0x31c411c 0x715da1ace0
	static GameplayEffectSpecHandle AddGrantedTag(GameplayEffectSpecHandle SpecHandle, GameplayTag NewGameplayTag);// 0x31c4400 0x715da17400
	static GameplayEffectSpecHandle AddAssetTags(GameplayEffectSpecHandle SpecHandle, GameplayTagContainer NewGameplayTags);// 0x31c3ba0 0x715da174e0
	static GameplayEffectSpecHandle AddAssetTag(GameplayEffectSpecHandle SpecHandle, GameplayTag NewGameplayTag);// 0x31c3e84 0x715da175c0
	static GameplayAbilityTargetDataHandle AbilityTargetDataFromLocations(out const GameplayAbilityTargetingLocationInfo SourceLocation, out const GameplayAbilityTargetingLocationInfo TargetLocation);// 0x31cba54 0x715da176a0
	static GameplayAbilityTargetDataHandle AbilityTargetDataFromHitResult(out const HitResult HitResult);// 0x31cb8c8 0x715da17780
	static GameplayAbilityTargetDataHandle AbilityTargetDataFromActorArray(out const Actor*[] ActorArray, bool OneTargetPerHandle);// 0x31cb43c 0x717df97b00
	static GameplayAbilityTargetDataHandle AbilityTargetDataFromActor(Actor* Actor);// 0x31cb600 0x715da189e0

--------------------------------
Class: GameplayAbilityTargetDataHandle // 71490685c0

--------------------------------
Class: GameplayEffectSpecHandle // 7149068800

--------------------------------
Class: GameplayTag // 7149068e00
	FName TagName;//[Offset: 0x0, Size: 0x8] 0x715d77c180

--------------------------------
Class: GameplayEventData // 7149068680
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8] 0x715d77e380
	Actor* Instigator;//[Offset: 0x8, Size: 0x8] 0x715d77e400
	Actor* Target;//[Offset: 0x10, Size: 0x8] 0x715d77e480
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8] 0x715d77e500
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8] 0x715d77e580
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18] 0x715d77e600
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20] 0x715d77e680
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20] 0x715d77e700
	float EventMagnitude;//[Offset: 0x80, Size: 0x4] 0x715d77c680
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28] 0x715d77c700

--------------------------------
Class: GameplayEffectContextHandle // 7149069340

--------------------------------
Class: GameplayTagContainer // 7149068ec0
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10] 0x7148cd5420
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10] 0x7148cd54c0

--------------------------------
Class: GameplayAttribute // 7149068a40
	FString AttributeName;//[Offset: 0x0, Size: 0x10] 0x715d77b780
	FieldPathProperty Attribute;//[Offset: 0x10, Size: 0x20] 0x715d77b800
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8] 0x715d77b880

--------------------------------
Class: GameplayEffect.Object // 71a4823a80
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1] 0x715ce9b320
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8] 0x715cf1d080
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20] 0x715cf1d100
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1] 0x715cf1d180
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 0x1] 0x715ce9b3c0
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10] 0x715ce9b460
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10] 0x715ce9b500
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20] 0x715cf1d380
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10] 0x715ce9b640
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10] 0x715ce9b780
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10] 0x715ce9b820
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10] 0x715ce9b960
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x715cf1d480
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1] 0x715cf1d500
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10] 0x715ce99160
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10] 0x715ce992a0
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x715cf1d580
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1] 0x715cf1d600
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10] 0x715ce99340
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8] 0x715cf1b600
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 0x60] 0x715cf1b680
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 0x60] 0x715cf1b700
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 0x40] 0x715cf1b780
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3d0, Size: 0x40] 0x715cf1b800
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x410, Size: 0x40] 0x715cf1b880
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x450, Size: 0x60] 0x715cf1b900
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x4b0, Size: 0x40] 0x715cf1b980
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x4f0, Size: 0x150] 0x715cf1ba00
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x648, Size: 0x150] 0x715cf1ba80
	enum StackingType;//[Offset: 0x799, Size: 0x1] 0x715ce993e0
	int StackLimitCount;//[Offset: 0x79c, Size: 0x4] 0x715cf1bb80
	enum StackDurationRefreshPolicy;//[Offset: 0x7a0, Size: 0x1] 0x715ce99480
	enum StackPeriodResetPolicy;//[Offset: 0x7a1, Size: 0x1] 0x715ce99520
	enum StackExpirationPolicy;//[Offset: 0x7a2, Size: 0x1] 0x715ce995c0
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x7a8, Size: 0x10] 0x715ce99660

--------------------------------
Class: GameplayEffectModifierMagnitude // 715da304c0
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1] 0x715d8965a0
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20] 0x715da41d80
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8] 0x715da40180
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78] 0x715da40400
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10] 0x715da40580

--------------------------------
Class: ScalableFloat // 7149069100
	float Value;//[Offset: 0x0, Size: 0x4] 0x715d77c600
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10] 0x715d77a680

--------------------------------
Class: CurveTableRowHandle // 7149068f80
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8] 0x715d77a580
	FName RowName;//[Offset: 0x8, Size: 0x8] 0x715d77a600

--------------------------------
Class: AttributeBasedFloat // 715da30280
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20] 0x715da41e00
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20] 0x715da41e80
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20] 0x715da41f00
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40] 0x715da41f80
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10] 0x715da42000
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1] 0x715d896640
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1] 0x715d8966e0
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20] 0x715da40080
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20] 0x715da40100

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition // 7149068b00
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38] 0x715d77b900
	enum AttributeSource;//[Offset: 0x38, Size: 0x1] 0x7148cd52e0
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x715d77ba00

--------------------------------
Class: CustomCalculationBasedFloat // 715da30340
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8] 0x715d896780
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20] 0x715da40200
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20] 0x715da40280
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20] 0x715da40300
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10] 0x715da40380

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object // 71a4822b80
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cf1ca00
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x3218b3c 0x715cedaa40

--------------------------------
Class: GameplayEffectCalculation.Object // 71a4823800
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10] 0x715ce9b280

--------------------------------
Class: GameplayEffectSpec // 7149069400
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8] 0x715d77d600
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10] 0x7148cd7ae0
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28] 0x715d77bc00
	float Duration;//[Offset: 0x50, Size: 0x4] 0x715d77bc80
	float Period;//[Offset: 0x54, Size: 0x4] 0x715d77bd00
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4] 0x715d77bd80
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88] 0x715d77be00
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88] 0x715d77c000
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20] 0x715d77c080
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20] 0x715d77c280
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10] 0x7148cd5560
	int StackCount;//[Offset: 0x1c0, Size: 0x4] 0x715d77c400
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1] 0x715d77c480
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1] 0x715d77c500
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1] 0x715d77c580
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10] 0x7148cd5740
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18] 0x715d77aa80
	float Level;//[Offset: 0x290, Size: 0x4] 0x715d77ab00

--------------------------------
Class: GameplayEffectModifiedAttribute // 71490688c0
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38] 0x715d77d680
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4] 0x715d77b600

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer // 7149068c80
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10] 0x7148cd7b80
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10] 0x7148cd5380
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715d77bb80

--------------------------------
Class: GameplayEffectAttributeCaptureSpec // 7149068bc0
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40] 0x715d77ba80

--------------------------------
Class: TagContainerAggregator // 7149068d40
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20] 0x715d77be80
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20] 0x715d77bf00
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20] 0x715d77bf80

--------------------------------
Class: ModifierSpec // 7149069040
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4] 0x715d77c300

--------------------------------
Class: GameplayAbilitySpecDef // 7149069280
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8] 0x7148cd5600
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20] 0x715d77a700
	int InputID;//[Offset: 0x28, Size: 0x4] 0x715d77a780
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1] 0x7148cd56a0
	Object* SourceObject;//[Offset: 0x30, Size: 0x8] 0x715d77a880
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4] 0x715d77a980

--------------------------------
Class: GameplayAbility.Object // 719b17a380
	GameplayTagContainer AbilityTags;//[Offset: 0x108, Size: 0x20] 0x715cf19200
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x715cf19280
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1] 0x715cf19300
	byte ReplicationPolicy;//[Offset: 0x12e, Size: 0x1] 0x715cf19380
	byte InstancingPolicy;//[Offset: 0x12f, Size: 0x1] 0x715cf19400
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x715cf19480
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1] 0x715cf17400
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0x138, Size: 0x20] 0x715cf17480
	GameplayEventData CurrentEventData;//[Offset: 0x158, Size: 0xb0] 0x715cf17500
	byte NetExecutionPolicy;//[Offset: 0x208, Size: 0x1] 0x715cf17580
	byte NetSecurityPolicy;//[Offset: 0x209, Size: 0x1] 0x715cf17600
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x210, Size: 0x8] 0x715ce9a380
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x218, Size: 0x10] 0x715ce9a420
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x228, Size: 0x8] 0x715ce9a4c0
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x230, Size: 0x48] 0x715cf17700
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x278, Size: 0x20] 0x715cf17780
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x298, Size: 0x20] 0x715cf17800
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x2b8, Size: 0x20] 0x715cf17880
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x2d8, Size: 0x20] 0x715cf17900
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x2f8, Size: 0x20] 0x715cf17980
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x318, Size: 0x20] 0x715cf17a00
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x338, Size: 0x20] 0x715cf17a80
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x358, Size: 0x20] 0x715cf17b00
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x378, Size: 0x20] 0x715cf17b80
	GameplayTask*[] ActiveTasks;//[Offset: 0x3b8, Size: 0x10] 0x715ce97c20
	AnimMontage* CurrentMontage;//[Offset: 0x3d8, Size: 0x8] 0x715cf17c80
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1] 0x715cf17d00
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1] 0x715cf17d80
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 0x1] 0x715cf17e00
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1] 0x715cf17e80
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x31f6d78 0x715ced8820
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x31f6cb0 0x715ced8900
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x31f6718 0x715ced89e0
	void RemoveGrantedByEffect();// 0x31f694c 0x715ced8ac0
	void MontageStop(float OverrideBlendOutTime);// 0x31f4b78 0x715ced8ba0
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x31f4c1c 0x715ced8c80
	void MontageJumpToSection(FName SectionName, bool bSendServerRPC);// 0x31f4d00 0x715ced8d60
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x31f4a20 0x715ced8e40
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x31f4af4 0x715ced8f20
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x31f6e60 0x715ced9000
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x45c6aa0 0x715ced5720
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x31f50cc 0x715ced5800
	void K2_OnEndAbility(bool bWasCancelled);// 0x45c6aa0 0x715ced58e0
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x31f55b8 0x715ced59c0
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x31f578c 0x715ced5aa0
	void K2_EndAbility();// 0x31f66fc 0x715ced5b80
	void K2_CommitExecute();// 0x45c6aa0 0x715ced5c60
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x31f6a98 0x715ced5d40
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x31f6b58 0x715ced5e20
	bool K2_CommitAbility();// 0x31f6c70 0x715ced5f00
	bool K2_CheckAbilityCost();// 0x31f6a18 0x715ced5fe0
	bool K2_CheckAbilityCooldown();// 0x31f6a58 0x715ced60c0
	void K2_CancelAbility();// 0x31f6d64 0x715ced61a0
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x45c6aa0 0x715ced6280
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x31f5cac 0x715ced6360
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x31f643c 0x715ced6440
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x31f5178 0x715ced6520
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x31f539c 0x715ced6600
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x45c6aa0 0x715ced66e0
	void K2_ActivateAbility();// 0x45c6aa0 0x715ced67c0
	void InvalidateClientPredictionKey();// 0x31f6968 0x715ced68a0
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x31f7530 0x715ced6980
	Actor* GetOwningActorFromActorInfo();// 0x31f7598 0x715ced6a60
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x31f73b0 0x715ced6b40
	Object* GetCurrentSourceObject();// 0x31f697c 0x715ced6c20
	AnimMontage* GetCurrentMontage();// 0x31f69e4 0x715ced6d00
	float GetCooldownTimeRemaining();// 0x31f6e2c 0x715ced6de0
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x31f702c 0x715ced6ec0
	Actor* GetAvatarActorFromActorInfo();// 0x31f7564 0x715ced6fa0
	GameplayAbilityActorInfo GetActorInfo();// 0x31f75cc 0x715ced7080
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x31f74fc 0x715ced7160
	int GetAbilityLevel();// 0x31f69b0 0x715ced7240
	void EndTaskByInstanceName(FName InstanceName);// 0x31f4f38 0x715ced7320
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x31f4df0 0x715ced3a40
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x31f4fdc 0x715ced3b20
	void CancelTaskByInstanceName(FName InstanceName);// 0x31f4e94 0x715ced3c00
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x31f595c 0x715ced3ce0
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x31f5a4c 0x715ced3dc0
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x31f5b7c 0x715ced3ea0
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x31f6098 0x715ced3f80
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x31f65c4 0x715ced4060

--------------------------------
Class: GameplayAbilityActivationInfo // 7149068440
	byte ActivationMode;//[Offset: 0x0, Size: 0x1] 0x715d77ea00
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x715d77ea80
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x18] 0x715d77eb00

--------------------------------
Class: PredictionKey // 7149066340
	int16 Current;//[Offset: 0x0, Size: 0x2] 0x715d77ac00
	int16 Base;//[Offset: 0x2, Size: 0x2] 0x715d77ac80
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 0x8] 0x715d77ad00
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715d77ad80
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x715d77ae00

--------------------------------
Class: GameplayAbilityTargetingLocationInfo // 715da316c0
	byte LocationType;//[Offset: 0x8, Size: 0x1] 0x715d93f280
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30] 0x715d93f300
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8] 0x715d93f380
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8] 0x715d93f400
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8] 0x715d93f480
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8] 0x715d93f500

--------------------------------
Class: AbilityTriggerData // 714906fac0
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8] 0x715d93d880
	byte TriggerSource;//[Offset: 0x8, Size: 0x1] 0x715d93d900

--------------------------------
Class: GameplayTagQuery // 71490682c0
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4] 0x715d77f880
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10] 0x7148cd7040
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10] 0x7148cd70e0
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x715d77fa00
	FString AutoDescription;//[Offset: 0x38, Size: 0x10] 0x715d77fa80

--------------------------------
Class: GameplayTask.Object // 719b176280
	FName InstanceName;//[Offset: 0x30, Size: 0x8] 0x715d77de80
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1] 0x7148cd7a40
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8] 0x715d77e000
	void ReadyForActivation();// 0x64d608c 0x715d769460
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x45c6aa0 0x715d769540
	void EndTask();// 0x64d6078 0x715d769620

--------------------------------
Class: GameplayAbilityActorInfo // 715da31300
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8] 0x715d93e980
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8] 0x715d93ea00
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8] 0x715d93ea80
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8] 0x715d93eb00
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8] 0x715d93eb80
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8] 0x715d93ec00
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8] 0x715d93ec80
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8] 0x715d93ed00

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object // 719b178a80
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x130, Size: 0x10] 0x7148cd8b20
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x140, Size: 0x10] 0x7148cd8bc0
	FName AffectedAnimInstanceTag;//[Offset: 0x150, Size: 0x8] 0x715d786c80
	float OutgoingDuration;//[Offset: 0x2f8, Size: 0x4] 0x715d786d00
	float IncomingDuration;//[Offset: 0x2fc, Size: 0x4] 0x715d786d80
	FString[] ClientDebugStrings;//[Offset: 0x320, Size: 0x10] 0x7148cd8c60
	FString[] ServerDebugStrings;//[Offset: 0x330, Size: 0x10] 0x7148cd8d00
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1] 0x715d786f00
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1] 0x715d786f80
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1] 0x715d787000
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 0x1] 0x715d787080
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3a8, Size: 0x10] 0x7148cd8da0
	Actor* OwnerActor;//[Offset: 0x3e0, Size: 0x8] 0x715d787180
	Actor* AvatarActor;//[Offset: 0x3e8, Size: 0x8] 0x715d787200
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x400, Size: 0x120] 0x715d785980
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x550, Size: 0x10] 0x7148cd9020
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x730, Size: 0x38] 0x715d786080
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1] 0x715d786100
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 0x1] 0x715d786180
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x770, Size: 0x30] 0x715d784300
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x840, Size: 0x480] 0x715d784480
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc0, Size: 0x128] 0x715d784500
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xde8, Size: 0x128] 0x715d784880
	byte[] BlockedAbilityBindings;//[Offset: 0x1038, Size: 0x10] 0x7148cd68c0
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1170, Size: 0x60] 0x715d784a00
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11e0, Size: 0x118] 0x715d784c80
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x31d1f44 0x715d76fac0
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x31d2040 0x715d76fba0
	void TargetConfirm();// 0x31d16e8 0x715d76fc80
	void TargetCancel();// 0x31d16cc 0x715d76fd60
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x31d1704 0x715d76fe40
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x31d4870 0x715d76ff20
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x31d4980 0x715d76caa0
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x31d0230 0x715d76cb80
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x31d0678 0x715d76cc60
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x31d0a08 0x715d76cd40
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x31d0bc4 0x715d76ce20
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x31d125c 0x715d76cf00
	void ServerSetReplicatedEventWithActorPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Actor* ActorPayload);// 0x31d1008 0x715d76cfe0
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x31d14b0 0x715d76d0c0
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x31d0838 0x715d76d1a0
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x31d0920 0x715d76d280
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x31d1dcc 0x715d76d360
	void ServerPrintDebug_Request();// 0x31d1ee8 0x715d76d440
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x31cffbc 0x715d76d520
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x31cf39c 0x715d76d600
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x31cf5ec 0x715d76d6e0
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x31cf4c8 0x715d76d7c0
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x31cfd54 0x715d76d8a0
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x31d17f0 0x715d76d980
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x31d5004 0x715d76da60
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x31d5134 0x715d76db40
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x31d3f64 0x715d76dc20
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x31d3e70 0x715d76dd00
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x31d3c88 0x715d76dde0
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x31d3d7c 0x715d76dec0
	void OnRep_ServerDebugString();// 0x31d1c64 0x715d76dfa0
	void OnRep_ReplicatedAnimMontage();// 0x31cf7a0 0x715d76e080
	void OnRep_OwningActor();// 0x31d16b8 0x715d76e160
	void OnRep_ClientDebugString();// 0x31d1c80 0x715d76e240
	void OnRep_ActivateAbilities();// 0x31d081c 0x715d76e320
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x31d2f50 0x715d76e400
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x31d3620 0x715d76e4e0
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x31d2224 0x715d76e5c0
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x31d32f4 0x715d76e6a0
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x31d3ab0 0x715d76adc0
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x31d388c 0x715d76aea0
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x31d25c8 0x715d76af80
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x31d28f4 0x715d76b060
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x31d2a00 0x715d76b140
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x31d2d2c 0x715d76b220
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x31d4d04 0x715d76b300
	GameplayEffectContextHandle MakeEffectContext();// 0x31d4bb0 0x715d76b3e0
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x31d54c0 0x715d76b4c0
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x31d216c 0x715d76b5a0
	bool GetUserAbilityActivationInhibited();// 0x31d17b8 0x715d76b680
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x31d4724 0x715d76b760
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x31d4a78 0x715d76b840
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x31d4058 0x715d76b920
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x31d4190 0x715d76ba00
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x31d0180 0x715d76bbc0
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x31d0ebc 0x715d76bca0
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x31d1c9c 0x715d76bd80
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x31cfeac 0x715d76be60
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x31cfc44 0x715d76bf40
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x31cf7bc 0x715d76c020
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x31cfa4c 0x715d76c100
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x31cfb50 0x715d76c1e0
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x31d44c0 0x715d76c2c0
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x31d429c 0x715d76c3a0
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x31d5358 0x715d76c480
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x31d5238 0x715d76c560
	void AbilityConfirmOrCancel__DelegateSignature();// 0x45c6aa0 0x715d76c640
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x45c6aa0 0x715d76c720

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object // 719b178800
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1] 0x715d77f600
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10] 0x7148cd74a0
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10] 0x7148cd7540
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10] 0x7148cd75e0
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10] 0x7148cd7680
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10] 0x715d77d780
	void OnRep_SimulatedTasks();// 0x64d8278 0x715d76c800
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x64d7fec 0x715d76c8e0

--------------------------------
Class: AttributeDefaults // 714906a780
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8] 0x7148cd8a80
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8] 0x715d786b00

--------------------------------
Class: AttributeSet.Object // 719b176f00

--------------------------------
Class: GameplayEffectQuery // 7149068380
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10] 0x715d781000
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48] 0x715d781080
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48] 0x715d77f800
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48] 0x715d77fb80
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38] 0x715d77fc00
	Object* EffectSource;//[Offset: 0x130, Size: 0x8] 0x715d77fc80
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8] 0x7148cd7220

--------------------------------
Class: ActiveGameplayEffectHandle // 7149068980
	int Handle;//[Offset: 0x0, Size: 0x4] 0x715d77cf00
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715d77cf80

--------------------------------
Class: GameplayAbilitySpecHandle // 71490691c0
	int Handle;//[Offset: 0x0, Size: 0x4] 0x715d77a900

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object // 719b17f880
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x715cf1a500
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x230, Size: 0x60] 0x715cf18480
	PlayerController* MasterPC;//[Offset: 0x2c0, Size: 0x8] 0x715cf18500
	GameplayAbility* OwningAbility;//[Offset: 0x2c8, Size: 0x8] 0x715cf18580
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x715cf18600
	Actor* SourceActor;//[Offset: 0x2d8, Size: 0x8] 0x715cf18680
	WorldReticleParameters ReticleParams;//[Offset: 0x2e0, Size: 0xc] 0x715cf18700
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x2f0, Size: 0x8] 0x715ce99ca0
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x2f8, Size: 0x10] 0x715cf18780
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x715cf18800
	void ConfirmTargetingRemote();// 0x31f9d5c 0x715ced84a0
	void ConfirmTargeting(GameplayAbility* Ability);// 0x31f9cb0 0x715ced8580
	void CancelTargetingRemote();// 0x31f9c9c 0x715ced8660
	void CancelTargeting(GameplayAbility* Ability);// 0x31f9bf0 0x715ced8740

--------------------------------
Class: WorldReticleParameters // 715da31240
	Vector AOEScale;//[Offset: 0x0, Size: 0xc] 0x715d93e900

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object // 719b17e980
	WorldReticleParameters Parameters;//[Offset: 0x220, Size: 0xc] 0x715cf19a80
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1] 0x715cf19b00
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1] 0x715cf19b80
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 0x1] 0x715cf19c00
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 0x1] 0x715cf19c80
	PlayerController* MasterPC;//[Offset: 0x230, Size: 0x8] 0x715cf19d00
	Actor* TargetingActor;//[Offset: 0x238, Size: 0x8] 0x715cf19d80
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x45c6aa0 0x715ced7f60
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x45c6aa0 0x715ced8040
	void OnValidTargetChanged(bool bNewValue);// 0x45c6aa0 0x715ced8120
	void OnTargetingAnActor(bool bNewValue);// 0x45c6aa0 0x715ced8200
	void OnParametersInitialized();// 0x45c6aa0 0x715ced82e0
	void FaceTowardSource(bool bFaceIn2D);// 0x3203fa0 0x715ced83c0

--------------------------------
Class: GameplayTargetDataFilterHandle // 714906f940

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer // 714906a900
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10] 0x7148cd8f80
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8] 0x715d785900

--------------------------------
Class: FastArraySerializer // 7149067e40
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4] 0x715d784b80
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1] 0x7148cd6aa0

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem // 714906a840
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4] 0x715d787280
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8] 0x715d787300
	int Level;//[Offset: 0x18, Size: 0x4] 0x715d787380
	int InputID;//[Offset: 0x1c, Size: 0x4] 0x715d785300
	Object* SourceObject;//[Offset: 0x20, Size: 0x8] 0x715d785380
	byte ActiveCount;//[Offset: 0x28, Size: 0x1] 0x715d785400
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x715d785480
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x715d785500
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x715d785580
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x715d785600
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x20] 0x715d785680
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 0x10] 0x7148cd8e40
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 0x10] 0x7148cd8ee0
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 0x8] 0x715d785800

--------------------------------
Class: FastArraySerializerItem // 71490664c0
	int ReplicationID;//[Offset: 0x0, Size: 0x4] 0x715d77b100
	int ReplicationKey;//[Offset: 0x4, Size: 0x4] 0x715d77b180
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4] 0x715d77b200

--------------------------------
Class: GameplayAbilityRepAnimMontage // 714906a9c0
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8] 0x715d785a80
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x715d785b00
	float Position;//[Offset: 0xc, Size: 0x4] 0x715d785b80
	float BlendTime;//[Offset: 0x10, Size: 0x4] 0x715d785c00
	byte NextSectionID;//[Offset: 0x14, Size: 0x1] 0x715d785c80
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1] 0x715d785d00
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1] 0x715d785d80
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1] 0x715d785e00
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1] 0x715d785e80
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1] 0x715d785f00
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18] 0x715d785f80
	byte SectionIdToPlay;//[Offset: 0x30, Size: 0x1] 0x715d786000

--------------------------------
Class: GameplayAbilityLocalAnimMontage // 714906aa80
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8] 0x715d786200
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715d786280
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18] 0x715d786300
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 0x8] 0x715d784280

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer // 714906ab40
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 0x10] 0x7148cd6780
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 0x10] 0x7148cd6820

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem // 7149066400
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298] 0x715d77ab80
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x18] 0x715d77ae80
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 0x4] 0x715d77af00
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 0x4] 0x715d77af80
	float StartWorldTime;//[Offset: 0x2d0, Size: 0x4] 0x715d77b000
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1] 0x715d77b080

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer // 714906acc0
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10] 0x7148cd6960
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8] 0x715d784800

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem // 714906ac00
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8] 0x715d784580
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18] 0x715d784600
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 0xb8] 0x715d784680
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x715d784700

--------------------------------
Class: GameplayCueParameters // 7149068200
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4] 0x715d781e00
	float RawMagnitude;//[Offset: 0x4, Size: 0x4] 0x715d781e80
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18] 0x715d781f00
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8] 0x715d781f80
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8] 0x715d782000
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20] 0x715d782080
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20] 0x715d782100
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc] 0x715d780080
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc] 0x715d780100
	Actor* Instigator;//[Offset: 0x88, Size: 0x8] 0x715d780180
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8] 0x715d780200
	Object* SourceObject;//[Offset: 0x98, Size: 0x8] 0x715d780280
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8] 0x715d780300
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4] 0x715d780380
	int AbilityLevel;//[Offset: 0xac, Size: 0x4] 0x715d780400
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8] 0x715d780480

--------------------------------
Class: MinimalReplicationTagCountMap // 7149067c00
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8] 0x715d784980

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer // 7149067d80
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10] 0x7148cd6a00

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem // 7149067cc0
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18] 0x715d784a80

--------------------------------
Class: ServerAbilityRPCBatch // 7149067fc0
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4] 0x715d782580
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x18] 0x715d782600
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 0x28] 0x715d782680
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715d782700
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x715d782780
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x715d782800

--------------------------------
Class: GameplayEffectSpecForRPC // 7149068080
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8] 0x715d781880
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10] 0x7148cd6d20
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18] 0x715d781980
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20] 0x715d781a00
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20] 0x715d781a80
	float Level;//[Offset: 0x70, Size: 0x4] 0x715d781b00
	float AbilityLevel;//[Offset: 0x74, Size: 0x4] 0x715d781b80

--------------------------------
Class: GameplayTaskResource.Object // 71a4aec680
	int ManualResourceID;//[Offset: 0x28, Size: 0x4] 0x715cc9a700
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1] 0x715cc9a780
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x715cc9a800

--------------------------------
Class: SetByCallerFloat // 715da30400
	FName DataName;//[Offset: 0x0, Size: 0x8] 0x715da40480
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8] 0x715da40500

--------------------------------
Class: GameplayModifierInfo // 715da30700
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38] 0x715da41b80
	byte ModifierOp;//[Offset: 0x38, Size: 0x1] 0x715da41c00
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20] 0x715da41c80
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8] 0x715da40600
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1] 0x715da40700
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x40] 0x715da40780
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x40] 0x715da40900

--------------------------------
Class: GameplayModEvaluationChannelSettings // 715da30580
	enum Channel;//[Offset: 0x0, Size: 0x1] 0x715d893ee0

--------------------------------
Class: GameplayTagRequirements // 715da30640
	GameplayTagContainer RequireTags;//[Offset: 0x0, Size: 0x20] 0x715da40800
	GameplayTagContainer IgnoreTags;//[Offset: 0x20, Size: 0x20] 0x715da40880

--------------------------------
Class: GameplayEffectExecutionDefinition // 715da301c0
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8] 0x715d896140
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20] 0x715da41580
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10] 0x715d896280
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10] 0x715d8963c0
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10] 0x715d896500

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object // 71a4823300
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cf1cc00
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x32170dc 0x715cedab20

--------------------------------
Class: GameplayEffectCustomExecutionParameters // 715da32f80

--------------------------------
Class: GameplayEffectCustomExecutionOutput // 715da33100
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10] 0x715d8960a0
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x715da41400
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x715da41480
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x715da41500

--------------------------------
Class: GameplayModifierEvaluatedData // 715da33040
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38] 0x715da41100
	byte ModifierOp;//[Offset: 0x38, Size: 0x1] 0x715da41180
	float Magnitude;//[Offset: 0x3c, Size: 0x4] 0x715da41200
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8] 0x715da41280
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715da41300

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo // 715da30040
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40] 0x715da41600
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8] 0x715da41680
	enum AggregatorType;//[Offset: 0x48, Size: 0x1] 0x715d8961e0
	byte ModifierOp;//[Offset: 0x49, Size: 0x1] 0x715da41780
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8] 0x715da41800
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1] 0x715da41880
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x40] 0x715da41900
	GameplayTagRequirements TargetTags;//[Offset: 0x240, Size: 0x40] 0x715da41980

--------------------------------
Class: ConditionalGameplayEffect // 715da30100
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8] 0x715d896460
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20] 0x715da41a80

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object // 71a4823580
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x32168cc 0x715cedac00

--------------------------------
Class: GameplayEffectCue // 715da307c0
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38] 0x715da40980
	float MinLevel;//[Offset: 0x38, Size: 0x4] 0x715da40a00
	float MaxLevel;//[Offset: 0x3c, Size: 0x4] 0x715da40a80
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20] 0x715da40b00

--------------------------------
Class: GameplayEffectUIData.Object // 71a4823080

--------------------------------
Class: InheritedTagContainer // 715da30880
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20] 0x715da40b80
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20] 0x715da40c00
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20] 0x715da40c80

--------------------------------
Class: GameplayTargetDataFilter // 714906f880
	Actor* SelfActor;//[Offset: 0x8, Size: 0x8] 0x715d93f780
	byte SelfFilter;//[Offset: 0x10, Size: 0x1] 0x715d93d700
	class Actor* RequiredActorClass;//[Offset: 0x18, Size: 0x8] 0x715d894480
	bool bReverseFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715d93d780

--------------------------------
Class: AbilitySystemDebugHUD.HUD.Actor.Object // 719b178300

--------------------------------
Class: AbilitySystemGlobals.Object // 719b177b80
	SoftClassPath AbilitySystemGlobalsClassName;//[Offset: 0x28, Size: 0x18] 0x715cee4f00
	GameplayTag ActivateFailIsDeadTag;//[Offset: 0x68, Size: 0x8] 0x715cee4f80
	FName ActivateFailIsDeadName;//[Offset: 0x70, Size: 0x8] 0x715cee5000
	GameplayTag ActivateFailCooldownTag;//[Offset: 0x78, Size: 0x8] 0x715cee5080
	FName ActivateFailCooldownName;//[Offset: 0x80, Size: 0x8] 0x715cee5100
	GameplayTag ActivateFailCostTag;//[Offset: 0x88, Size: 0x8] 0x715cee5180
	FName ActivateFailCostName;//[Offset: 0x90, Size: 0x8] 0x715cee5200
	GameplayTag ActivateFailTagsBlockedTag;//[Offset: 0x98, Size: 0x8] 0x715cee5280
	FName ActivateFailTagsBlockedName;//[Offset: 0xa0, Size: 0x8] 0x715cee3200
	GameplayTag ActivateFailTagsMissingTag;//[Offset: 0xa8, Size: 0x8] 0x715cee3280
	FName ActivateFailTagsMissingName;//[Offset: 0xb0, Size: 0x8] 0x715cee3300
	GameplayTag ActivateFailNetworkingTag;//[Offset: 0xb8, Size: 0x8] 0x715cee3380
	FName ActivateFailNetworkingName;//[Offset: 0xc0, Size: 0x8] 0x715cee3400
	int MinimalReplicationTagCountBits;//[Offset: 0xc8, Size: 0x4] 0x715cee3480
	NetSerializeScriptStructCache TargetDataStructCache;//[Offset: 0xd0, Size: 0x10] 0x715cee3500
	bool bAllowGameplayModEvaluationChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x715cee3580
	enum DefaultGameplayModEvaluationChannel;//[Offset: 0xe1, Size: 0x1] 0x715ce98c60
	FName GameplayModEvaluationChannelAliases;//[Offset: 0xe4, Size: 0x8] 0x715cee3680
	SoftObjectPath GlobalCurveTableName;//[Offset: 0x138, Size: 0x18] 0x715cee3700
	CurveTable* GlobalCurveTable;//[Offset: 0x150, Size: 0x8] 0x715cee3780
	SoftObjectPath GlobalAttributeMetaDataTableName;//[Offset: 0x158, Size: 0x18] 0x715cee3800
	DataTable* GlobalAttributeMetaDataTable;//[Offset: 0x170, Size: 0x8] 0x715cee3880
	SoftObjectPath GlobalAttributeSetDefaultsTableName;//[Offset: 0x178, Size: 0x18] 0x715cee3900
	SoftObjectPath[] GlobalAttributeSetDefaultsTableNames;//[Offset: 0x190, Size: 0x10] 0x715ce98d00
	CurveTable*[] GlobalAttributeDefaultsTables;//[Offset: 0x1a0, Size: 0x10] 0x715ce98da0
	SoftObjectPath GlobalGameplayCueManagerClass;//[Offset: 0x1b0, Size: 0x18] 0x715cee3a80
	SoftObjectPath GlobalGameplayCueManagerName;//[Offset: 0x1c8, Size: 0x18] 0x715cee3b00
	FString[] GameplayCueNotifyPaths;//[Offset: 0x1e0, Size: 0x10] 0x715ce98e40
	SoftObjectPath GameplayTagResponseTableName;//[Offset: 0x1f0, Size: 0x18] 0x715cee3c00
	GameplayTagReponseTable* GameplayTagResponseTable;//[Offset: 0x208, Size: 0x8] 0x715cee3c80
	bool PredictTargetGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x715cee3d00
	GameplayCueManager* GlobalGameplayCueManager;//[Offset: 0x218, Size: 0x8] 0x715cee3d80
	void ToggleIgnoreAbilitySystemCosts();// 0x31da0c4 0x715da1fba0
	void ToggleIgnoreAbilitySystemCooldowns();// 0x31da0e0 0x715da1fc80

--------------------------------
Class: NetSerializeScriptStructCache // 714906fdc0
	ScriptStruct*[] ScriptStructs;//[Offset: 0x0, Size: 0x10] 0x715d8945c0

--------------------------------
Class: GameplayTagReponseTable.DataAsset.Object // 71a4822900
	GameplayTagResponseTableEntry[] Entries;//[Offset: 0x30, Size: 0x10] 0x715ce9b1e0
	void TagResponseEvent(const GameplayTag Tag, int NewCount, AbilitySystemComponent* ASC, int idx);// 0x32194c0 0x715ceda960

--------------------------------
Class: GameplayTagResponseTableEntry // 715da32c80
	GameplayTagReponsePair Positive;//[Offset: 0x0, Size: 0x28] 0x715da42800
	GameplayTagReponsePair Negative;//[Offset: 0x28, Size: 0x28] 0x715da42980

--------------------------------
Class: GameplayTagReponsePair // 715da32bc0
	GameplayTag Tag;//[Offset: 0x0, Size: 0x8] 0x715da42880
	class GameplayEffect* ResponseGameplayEffect;//[Offset: 0x8, Size: 0x8] 0x715d895d80
	class GameplayEffect[] ResponseGameplayEffects;//[Offset: 0x10, Size: 0x10] 0x715d895ec0
	int SoftCountCap;//[Offset: 0x20, Size: 0x4] 0x715da42900

--------------------------------
Class: GameplayCueManager.DataAsset.Object // 71a4824c00
	GameplayCueObjectLibrary RuntimeGameplayCueObjectLibrary;//[Offset: 0x48, Size: 0x50] 0x715cf19600
	GameplayCueObjectLibrary EditorGameplayCueObjectLibrary;//[Offset: 0x98, Size: 0x50] 0x715cf19680
	class Object[] LoadedGameplayCueNotifyClasses;//[Offset: 0x2b0, Size: 0x10] 0x715ce99840
	class GameplayCueNotify_Actor[] GameplayCueClassesForPreallocation;//[Offset: 0x2c0, Size: 0x10] 0x715ce99980
	GameplayCuePendingExecute[] PendingExecuteCues;//[Offset: 0x2d0, Size: 0x10] 0x715ce99a20
	int GameplayCueSendContextCount;//[Offset: 0x2e0, Size: 0x4] 0x715cf19780
	PreallocationInfo[] PreallocationInfoList_Internal;//[Offset: 0x2e8, Size: 0x10] 0x715ce99ac0

--------------------------------
Class: GameplayCueObjectLibrary // 715da30e80
	FString[] Paths;//[Offset: 0x0, Size: 0x10] 0x715d894160
	ObjectLibrary* ActorObjectLibrary;//[Offset: 0x30, Size: 0x8] 0x715d93fa80
	ObjectLibrary* StaticObjectLibrary;//[Offset: 0x38, Size: 0x8] 0x715d93fb00
	GameplayCueSet* CueSet;//[Offset: 0x40, Size: 0x8] 0x715d93fb80
	bool bShouldSyncScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x715d93fc00
	bool bShouldAsyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x715d93fc80
	bool bShouldSyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1] 0x715d93fd00
	bool bHasBeenInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1] 0x715d93fd80

--------------------------------
Class: GameplayCueSet.DataAsset.Object // 71a4824200
	GameplayCueNotifyData[] GameplayCueData;//[Offset: 0x30, Size: 0x10] 0x715ce99700

--------------------------------
Class: GameplayCueNotifyData // 715da30dc0
	GameplayTag GameplayCueTag;//[Offset: 0x0, Size: 0x8] 0x715d93f900
	SoftObjectPath GameplayCueNotifyObj;//[Offset: 0x8, Size: 0x18] 0x715d93f980
	class Object* LoadedGameplayCueClass;//[Offset: 0x20, Size: 0x8] 0x715d8940c0

--------------------------------
Class: GameplayCueNotify_Actor.Actor.Object // 71a4824980
	bool bAutoDestroyOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x715cf1a800
	float AutoDestroyDelay;//[Offset: 0x224, Size: 0x4] 0x715cf1a880
	bool WarnIfTimelineIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x715cf1a900
	bool WarnIfLatentActionIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1] 0x715cf1a980
	GameplayTag GameplayCueTag;//[Offset: 0x22c, Size: 0x8] 0x715cf1aa00
	GameplayTagReferenceHelper ReferenceHelper;//[Offset: 0x238, Size: 0x10] 0x715cf1aa80
	FName GameplayCueName;//[Offset: 0x248, Size: 0x8] 0x715cf1ab00
	bool bAutoAttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x715cf1ab80
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1] 0x715cf1ac00
	bool bUniqueInstancePerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1] 0x715cf1ac80
	bool bUniqueInstancePerSourceObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 0x1] 0x715cf1ad00
	bool bAllowMultipleOnActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1] 0x715cf1ad80
	bool bAllowMultipleWhileActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1] 0x715cf1ae00
	int NumPreallocatedInstances;//[Offset: 0x258, Size: 0x4] 0x715cf1ae80
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x320b000 0x715ced7780
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x320ae18 0x715ced7860
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x320b5d4 0x715ced7940
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x320b3d0 0x715ced7a20
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x320b1e8 0x715ced7b00
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0x45c6aa0 0x715ced7be0
	void K2_EndGameplayCue();// 0x320b5b8 0x715ced7cc0

--------------------------------
Class: GameplayTagReferenceHelper // 715dadb140

--------------------------------
Class: GameplayCuePendingExecute // 715da310c0
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18] 0x715d93ff00
	enum PayloadType;//[Offset: 0x30, Size: 0x1] 0x715d894200
	AbilitySystemComponent* OwningComponent;//[Offset: 0x38, Size: 0x8] 0x715d93e780
	GameplayEffectSpecForRPC FromSpec;//[Offset: 0x40, Size: 0x78] 0x715d93e800
	GameplayCueParameters CueParameters;//[Offset: 0xb8, Size: 0xb8] 0x715d93e880

--------------------------------
Class: PreallocationInfo // 715da31180
	class GameplayCueNotify_Actor[] ClassesNeedingPreallocation;//[Offset: 0x50, Size: 0x10] 0x715d894340

--------------------------------
Class: AbilitySystemInterface.Interface.Object // 719b177900

--------------------------------
Class: AbilitySystemReplicationProxyInterface.Interface.Object // 719b177400

--------------------------------
Class: AbilitySystemTestAttributeSet.AttributeSet.Object // 719b177180
	float MaxHealth;//[Offset: 0x2c, Size: 0x4] 0x715cee4700
	float Health;//[Offset: 0x30, Size: 0x4] 0x715cee4780
	float Mana;//[Offset: 0x34, Size: 0x4] 0x715cee4800
	float MaxMana;//[Offset: 0x38, Size: 0x4] 0x715cee4880
	float Damage;//[Offset: 0x3c, Size: 0x4] 0x715cee4900
	float SpellDamage;//[Offset: 0x40, Size: 0x4] 0x715cee4980
	float PhysicalDamage;//[Offset: 0x44, Size: 0x4] 0x715cee4a00
	float CritChance;//[Offset: 0x48, Size: 0x4] 0x715cee4a80
	float CritMultiplier;//[Offset: 0x4c, Size: 0x4] 0x715cee4b00
	float ArmorDamageReduction;//[Offset: 0x50, Size: 0x4] 0x715cee4b80
	float DodgeChance;//[Offset: 0x54, Size: 0x4] 0x715cee4c00
	float LifeSteal;//[Offset: 0x58, Size: 0x4] 0x715cee4c80
	float Strength;//[Offset: 0x5c, Size: 0x4] 0x715cee4d00
	float StackingAttribute1;//[Offset: 0x60, Size: 0x4] 0x715cee4d80
	float StackingAttribute2;//[Offset: 0x64, Size: 0x4] 0x715cee4e00
	float NoStackAttribute;//[Offset: 0x68, Size: 0x4] 0x715cee4e80

--------------------------------
Class: AbilitySystemTestPawn.DefaultPawn.Pawn.Actor.Object // 719b176c80
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x2c0, Size: 0x8] 0x715cee6a80

--------------------------------
Class: AbilityTask.GameplayTask.Object // 719b176500
	GameplayAbility* Ability;//[Offset: 0x60, Size: 0x8] 0x715d827480
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x68, Size: 0x8] 0x715d827500

--------------------------------
Class: AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 719b176000
	FName ForceName;//[Offset: 0x74, Size: 0x8] 0x715cee6800
	enum FinishVelocityMode;//[Offset: 0x7c, Size: 0x1] 0x715ce98a80
	Vector FinishSetVelocity;//[Offset: 0x80, Size: 0xc] 0x715cee6900
	float FinishClampVelocity;//[Offset: 0x8c, Size: 0x4] 0x715cee6980
	CharacterMovementComponent* MovementComponent;//[Offset: 0x90, Size: 0x8] 0x715cee6a00

--------------------------------
Class: AbilityTask_ApplyRootMotionConstantForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 719b175d80
	delegate OnFinish;//[Offset: 0xa8, Size: 0x10] 0x715cee8080
	Vector WorldDirection;//[Offset: 0xb8, Size: 0xc] 0x715cee8100
	float Strength;//[Offset: 0xc4, Size: 0x4] 0x715cee8180
	float Duration;//[Offset: 0xc8, Size: 0x4] 0x715cee8200
	bool bIsAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1] 0x715cee8280
	CurveFloat* StrengthOverTime;//[Offset: 0xd0, Size: 0x8] 0x715cee8300
	static AbilityTask_ApplyRootMotionConstantForce* ApplyRootMotionConstantForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector WorldDirection, float Strength, float Duration, bool bIsAdditive, CurveFloat* StrengthOverTime, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish);// 0x31db7ec 0x715ced12e0

--------------------------------
Class: AbilityTask_ApplyRootMotionJumpForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 719b175b00
	delegate OnFinish;//[Offset: 0xa8, Size: 0x10] 0x715cee9400
	delegate OnLanded;//[Offset: 0xb8, Size: 0x10] 0x715cee9480
	Rotator Rotation;//[Offset: 0xc8, Size: 0xc] 0x715cee7400
	float Distance;//[Offset: 0xd4, Size: 0x4] 0x715cee7480
	float Height;//[Offset: 0xd8, Size: 0x4] 0x715cee7500
	float Duration;//[Offset: 0xdc, Size: 0x4] 0x715cee7580
	float MinimumLandedTriggerTime;//[Offset: 0xe0, Size: 0x4] 0x715cee7600
	bool bFinishOnLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1] 0x715cee7680
	CurveVector* PathOffsetCurve;//[Offset: 0xe8, Size: 0x8] 0x715cee7700
	CurveFloat* TimeMappingCurve;//[Offset: 0xf0, Size: 0x8] 0x715cee7780
	bool bIsAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x715cee7800
	void OnLandedCallback(out const HitResult Hit);// 0x31dc4d8 0x715ced1040
	void Finish();// 0x31dc5a8 0x715ced1120
	static AbilityTask_ApplyRootMotionJumpForce* ApplyRootMotionJumpForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Rotator Rotation, float Distance, float Height, float Duration, float MinimumLandedTriggerTime, bool bFinishOnLanded, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish, CurveVector* PathOffsetCurve, CurveFloat* TimeMappingCurve, bool bIsAdditive);// 0x31dc0b4 0x715ced1200

--------------------------------
Class: AbilityTask_ApplyRootMotionMoveToActorForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 719b175880
	delegate OnFinished;//[Offset: 0xa8, Size: 0x10] 0x715cee9980
	Vector StartLocation;//[Offset: 0xc0, Size: 0xc] 0x715cee9a00
	Vector TargetLocation;//[Offset: 0xcc, Size: 0xc] 0x715cee9a80
	Actor* TargetActor;//[Offset: 0xd8, Size: 0x8] 0x715cee9b00
	Vector TargetLocationOffset;//[Offset: 0xe0, Size: 0xc] 0x715cee9b80
	enum OffsetAlignment;//[Offset: 0xec, Size: 0x1] 0x715ce98620
	float Duration;//[Offset: 0xf0, Size: 0x4] 0x715cee9c80
	bool bDisableDestinationReachedInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1] 0x715cee9d00
	bool bSetNewMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1] 0x715cee9d80
	byte NewMovementMode;//[Offset: 0xf6, Size: 0x1] 0x715cee9e00
	bool bRestrictSpeedToExpected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 0x1] 0x715cee9e80
	CurveVector* PathOffsetCurve;//[Offset: 0xf8, Size: 0x8] 0x715cee9f00
	CurveFloat* TimeMappingCurve;//[Offset: 0x100, Size: 0x8] 0x715cee9f80
	CurveFloat* TargetLerpSpeedHorizontalCurve;//[Offset: 0x108, Size: 0x8] 0x715ceea000
	CurveFloat* TargetLerpSpeedVerticalCurve;//[Offset: 0x110, Size: 0x8] 0x715ceea080
	void OnTargetActorSwapped(Actor* OriginalTarget, Actor* NewTarget);// 0x31dcee4 0x715ced0cc0
	void OnRep_TargetLocation();// 0x31dced0 0x715ced0da0
	static AbilityTask_ApplyRootMotionMoveToActorForce* ApplyRootMotionMoveToTargetDataActorForce(GameplayAbility* OwningAbility, FName TaskInstanceName, GameplayAbilityTargetDataHandle TargetDataHandle, int TargetDataIndex, int TargetActorIndex, Vector TargetLocationOffset, enum OffsetAlignment, float Duration, CurveFloat* TargetLerpSpeedHorizontal, CurveFloat* TargetLerpSpeedVertical, bool bSetNewMovementMode, byte MovementMode, bool bRestrictSpeedToExpected, CurveVector* PathOffsetCurve, CurveFloat* TimeMappingCurve, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish, bool bDisableDestinationReachedInterrupt);// 0x31dcfc8 0x715ced0e80
	static AbilityTask_ApplyRootMotionMoveToActorForce* ApplyRootMotionMoveToActorForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* TargetActor, Vector TargetLocationOffset, enum OffsetAlignment, float Duration, CurveFloat* TargetLerpSpeedHorizontal, CurveFloat* TargetLerpSpeedVertical, bool bSetNewMovementMode, byte MovementMode, bool bRestrictSpeedToExpected, CurveVector* PathOffsetCurve, CurveFloat* TimeMappingCurve, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish, bool bDisableDestinationReachedInterrupt);// 0x31dd750 0x715ced0f60

--------------------------------
Class: AbilityTask_ApplyRootMotionMoveToForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 719b175600
	delegate OnTimedOut;//[Offset: 0xa8, Size: 0x10] 0x715ceeb000
	delegate OnTimedOutAndDestinationReached;//[Offset: 0xb8, Size: 0x10] 0x715ceeb080
	Vector StartLocation;//[Offset: 0xc8, Size: 0xc] 0x715ceeb100
	Vector TargetLocation;//[Offset: 0xd4, Size: 0xc] 0x715ceeb180
	float Duration;//[Offset: 0xe0, Size: 0x4] 0x715ceeb200
	bool bSetNewMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1] 0x715ceeb280
	byte NewMovementMode;//[Offset: 0xe5, Size: 0x1] 0x715ceeb300
	bool bRestrictSpeedToExpected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 0x1] 0x715ceeb380
	CurveVector* PathOffsetCurve;//[Offset: 0xe8, Size: 0x8] 0x715ceeb400
	static AbilityTask_ApplyRootMotionMoveToForce* ApplyRootMotionMoveToForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector TargetLocation, float Duration, bool bSetNewMovementMode, byte MovementMode, bool bRestrictSpeedToExpected, CurveVector* PathOffsetCurve, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish);// 0x31de810 0x715ced0be0

--------------------------------
Class: AbilityTask_ApplyRootMotionRadialForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 719b175380
	delegate OnFinish;//[Offset: 0xa8, Size: 0x10] 0x715ceec180
	Vector Location;//[Offset: 0xb8, Size: 0xc] 0x715ceec200
	Actor* LocationActor;//[Offset: 0xc8, Size: 0x8] 0x715ceec280
	float Strength;//[Offset: 0xd0, Size: 0x4] 0x715ceec300
	float Duration;//[Offset: 0xd4, Size: 0x4] 0x715ceec380
	float Radius;//[Offset: 0xd8, Size: 0x4] 0x715ceec400
	bool bIsPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1] 0x715ceec480
	bool bIsAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1] 0x715ceec500
	bool bNoZForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1] 0x715ceec580
	CurveFloat* StrengthDistanceFalloff;//[Offset: 0xe0, Size: 0x8] 0x715ceec600
	CurveFloat* StrengthOverTime;//[Offset: 0xe8, Size: 0x8] 0x715ceea580
	bool bUseFixedWorldDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x715ceea600
	Rotator FixedWorldDirection;//[Offset: 0xf4, Size: 0xc] 0x715ceea680
	static AbilityTask_ApplyRootMotionRadialForce* ApplyRootMotionRadialForce(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector Location, Actor* LocationActor, float Strength, float Duration, float Radius, bool bIsPush, bool bIsAdditive, bool bNoZForce, CurveFloat* StrengthDistanceFalloff, CurveFloat* StrengthOverTime, bool bUseFixedWorldDirection, Rotator FixedWorldDirection, enum VelocityOnFinishMode, Vector SetVelocityOnFinish, float ClampVelocityOnFinish);// 0x31df1f8 0x715ced0b00

--------------------------------
Class: AbilityTask_MoveToLocation.AbilityTask.GameplayTask.Object // 719b175100
	delegate OnTargetLocationReached;//[Offset: 0x78, Size: 0x10] 0x715ceebb00
	Vector StartLocation;//[Offset: 0x8c, Size: 0xc] 0x715ceebb80
	Vector TargetLocation;//[Offset: 0x98, Size: 0xc] 0x715ceebc00
	float DurationOfMovement;//[Offset: 0xa4, Size: 0x4] 0x715ceebc80
	CurveFloat* LerpCurve;//[Offset: 0xb0, Size: 0x8] 0x715ceebd00
	CurveVector* LerpCurveVector;//[Offset: 0xb8, Size: 0x8] 0x715ceebd80
	static AbilityTask_MoveToLocation* MoveToLocation(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector Location, float Duration, CurveFloat* OptionalInterpolationCurve, CurveVector* OptionalVectorInterpolationCurve);// 0x31e1674 0x715ced0a20

--------------------------------
Class: AbilityTask_NetworkSyncPoint.AbilityTask.GameplayTask.Object // 719b174e80
	delegate OnSync;//[Offset: 0x78, Size: 0x10] 0x715ceeb900
	static AbilityTask_NetworkSyncPoint* WaitNetSync(GameplayAbility* OwningAbility, enum SyncType);// 0x31e1ea4 0x715ced0860
	void OnSignalCallback();// 0x31e1f8c 0x715ced0940

--------------------------------
Class: AbilityTask_PlayMontageAndWait.AbilityTask.GameplayTask.Object // 719b174c00
	delegate OnCompleted;//[Offset: 0x78, Size: 0x10] 0x715ceecf80
	delegate OnBlendOut;//[Offset: 0x88, Size: 0x10] 0x715ceed000
	delegate OnInterrupted;//[Offset: 0x98, Size: 0x10] 0x715ceed080
	delegate OnCancelled;//[Offset: 0xa8, Size: 0x10] 0x715ceed100
	AnimMontage* MontageToPlay;//[Offset: 0xe0, Size: 0x8] 0x715ceed180
	float Rate;//[Offset: 0xe8, Size: 0x4] 0x715ceed200
	FName StartSection;//[Offset: 0xec, Size: 0x8] 0x715ceed280
	float AnimRootMotionTranslationScale;//[Offset: 0xf4, Size: 0x4] 0x715ceed300
	bool bStopWhenAbilityEnds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x715ceed380
	void OnMontageInterrupted();// 0x31e2714 0x715ced04e0
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x31e2624 0x715ced05c0
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x31e2728 0x715ced06a0
	static AbilityTask_PlayMontageAndWait* CreatePlayMontageAndWaitProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, AnimMontage* MontageToPlay, float Rate, FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale);// 0x31e23e0 0x715ced0780

--------------------------------
Class: AbilityTask_Repeat.AbilityTask.GameplayTask.Object // 719b174980
	delegate OnPerformAction;//[Offset: 0x78, Size: 0x10] 0x715ceecc80
	delegate OnFinished;//[Offset: 0x88, Size: 0x10] 0x715ceecd00
	static AbilityTask_Repeat* RepeatAction(GameplayAbility* OwningAbility, float TimeBetweenActions, int TotalActionCount);// 0x31e2d20 0x715ced0400

--------------------------------
Class: AbilityTask_SpawnActor.AbilityTask.GameplayTask.Object // 719b174700
	delegate success;//[Offset: 0x78, Size: 0x10] 0x715ceec680
	delegate DidNotSpawn;//[Offset: 0x88, Size: 0x10] 0x715ceec700
	static AbilityTask_SpawnActor* SpawnActor(GameplayAbility* OwningAbility, GameplayAbilityTargetDataHandle TargetData, class Actor Class);// 0x31e38d0 0x715ced0160
	void FinishSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetDataHandle TargetData, Actor* SpawnedActor);// 0x31e3240 0x715ced0240
	bool BeginSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetDataHandle TargetData, class Actor Class, out Actor* SpawnedActor);// 0x31e3550 0x715ced0320

--------------------------------
Class: AbilityTask_StartAbilityState.AbilityTask.GameplayTask.Object // 719b174480
	delegate OnStateEnded;//[Offset: 0x78, Size: 0x10] 0x715ceee480
	delegate OnStateInterrupted;//[Offset: 0x88, Size: 0x10] 0x715ceee500
	static AbilityTask_StartAbilityState* StartAbilityState(GameplayAbility* OwningAbility, FName StateName, bool bEndCurrentState);// 0x31e4078 0x715ced0080

--------------------------------
Class: AbilityTask_VisualizeTargeting.AbilityTask.GameplayTask.Object // 719b17e700
	delegate TimeElapsed;//[Offset: 0x78, Size: 0x10] 0x715ceedd00
	static AbilityTask_VisualizeTargeting* VisualizeTargetingUsingActor(GameplayAbility* OwningAbility, GameplayAbilityTargetActor* TargetActor, FName TaskInstanceName, float Duration);// 0x31e47d4 0x715ced36c0
	static AbilityTask_VisualizeTargeting* VisualizeTargeting(GameplayAbility* OwningAbility, class GameplayAbilityTargetActor Class, FName TaskInstanceName, float Duration);// 0x31e4940 0x715ced37a0
	void FinishSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetActor* SpawnedActor);// 0x31e45a8 0x715ced3880
	bool BeginSpawningActor(GameplayAbility* OwningAbility, class GameplayAbilityTargetActor Class, out GameplayAbilityTargetActor* SpawnedActor);// 0x31e468c 0x715ced3960

--------------------------------
Class: AbilityTask_WaitAbilityActivate.AbilityTask.GameplayTask.Object // 719b17e480
	delegate OnActivate;//[Offset: 0x78, Size: 0x10] 0x715ceef500
	static AbilityTask_WaitAbilityActivate* WaitForAbilityActivateWithTagRequirements(GameplayAbility* OwningAbility, GameplayTagRequirements TagRequirements, bool IncludeTriggeredAbilities, bool TriggerOnce);// 0x31e519c 0x715ced3340
	static AbilityTask_WaitAbilityActivate* WaitForAbilityActivate_Query(GameplayAbility* OwningAbility, GameplayTagQuery Query, bool IncludeTriggeredAbilities, bool TriggerOnce);// 0x31e4f90 0x715ced3420
	static AbilityTask_WaitAbilityActivate* WaitForAbilityActivate(GameplayAbility* OwningAbility, GameplayTag WithTag, GameplayTag WithoutTag, bool IncludeTriggeredAbilities, bool TriggerOnce);// 0x31e53cc 0x715ced3500
	void OnAbilityActivate(GameplayAbility* ActivatedAbility);// 0x31e5590 0x715ced35e0

--------------------------------
Class: AbilityTask_WaitAbilityCommit.AbilityTask.GameplayTask.Object // 719b17e200
	delegate OnCommit;//[Offset: 0x78, Size: 0x10] 0x715ceeef80
	static AbilityTask_WaitAbilityCommit* WaitForAbilityCommit_Query(GameplayAbility* OwningAbility, GameplayTagQuery Query, bool TriggerOnce);// 0x31e5b54 0x715ced30a0
	static AbilityTask_WaitAbilityCommit* WaitForAbilityCommit(GameplayAbility* OwningAbility, GameplayTag WithTag, GameplayTag WithoutTage, bool TriggerOnce);// 0x31e5d04 0x715ced3180
	void OnAbilityCommit(GameplayAbility* ActivatedAbility);// 0x31e5e78 0x715ced3260

--------------------------------
Class: AbilityTask_WaitAttributeChange.AbilityTask.GameplayTask.Object // 719b17df80
	delegate OnChange;//[Offset: 0x78, Size: 0x10] 0x715ceeff00
	AbilitySystemComponent* ExternalOwner;//[Offset: 0xe8, Size: 0x8] 0x715ceeff80
	static AbilityTask_WaitAttributeChange* WaitForAttributeChangeWithComparison(GameplayAbility* OwningAbility, GameplayAttribute InAttribute, GameplayTag InWithTag, GameplayTag InWithoutTag, byte InComparisonType, float InComparisonValue, bool TriggerOnce, Actor* OptionalExternalOwner);// 0x31e645c 0x715ced2ee0
	static AbilityTask_WaitAttributeChange* WaitForAttributeChange(GameplayAbility* OwningAbility, GameplayAttribute Attribute, GameplayTag WithSrcTag, GameplayTag WithoutSrcTag, bool TriggerOnce, Actor* OptionalExternalOwner);// 0x31e6740 0x715ced2fc0

--------------------------------
Class: AbilityTask_WaitAttributeChangeRatioThreshold.AbilityTask.GameplayTask.Object // 719b17dd00
	delegate OnChange;//[Offset: 0x78, Size: 0x10] 0x715ceefa00
	AbilitySystemComponent* ExternalOwner;//[Offset: 0x130, Size: 0x8] 0x715ceefa80
	static AbilityTask_WaitAttributeChangeRatioThreshold* WaitForAttributeChangeRatioThreshold(GameplayAbility* OwningAbility, GameplayAttribute AttributeNumerator, GameplayAttribute AttributeDenominator, byte ComparisonType, float ComparisonValue, bool bTriggerOnce, Actor* OptionalExternalOwner);// 0x31e6dfc 0x715ced2e00

--------------------------------
Class: AbilityTask_WaitAttributeChangeThreshold.AbilityTask.GameplayTask.Object // 719b17da80
	delegate OnChange;//[Offset: 0x78, Size: 0x10] 0x715cf10e80
	AbilitySystemComponent* ExternalOwner;//[Offset: 0xe0, Size: 0x8] 0x715cf10f00
	static AbilityTask_WaitAttributeChangeThreshold* WaitForAttributeChangeThreshold(GameplayAbility* OwningAbility, GameplayAttribute Attribute, byte ComparisonType, float ComparisonValue, bool bTriggerOnce, Actor* OptionalExternalOwner);// 0x31e7504 0x715ced2d20

--------------------------------
Class: AbilityTask_WaitCancel.AbilityTask.GameplayTask.Object // 719b17d800
	delegate OnCancel;//[Offset: 0x78, Size: 0x10] 0x715cf10c80
	static AbilityTask_WaitCancel* WaitCancel(GameplayAbility* OwningAbility);// 0x31e7b60 0x715ced2a80
	void OnLocalCancelCallback(GameplayAbility* InAbility);// 0x31e7c04 0x715ced2b60
	void OnCancelCallback();// 0x31e7ca8 0x715ced2c40

--------------------------------
Class: AbilityTask_WaitConfirm.AbilityTask.GameplayTask.Object // 719b17d580
	delegate OnConfirm;//[Offset: 0x78, Size: 0x10] 0x715cf10a80
	static AbilityTask_WaitConfirm* WaitConfirm(GameplayAbility* OwningAbility);// 0x31e80fc 0x715ced28c0
	void OnConfirmCallback(GameplayAbility* InAbility);// 0x31e81a0 0x715ced29a0

--------------------------------
Class: AbilityTask_WaitConfirmCancel.AbilityTask.GameplayTask.Object // 719b17d300
	delegate OnConfirm;//[Offset: 0x78, Size: 0x10] 0x715cf10780
	delegate OnCancel;//[Offset: 0x88, Size: 0x10] 0x715cf10800
	static AbilityTask_WaitConfirmCancel* WaitConfirmCancel(GameplayAbility* OwningAbility);// 0x31e8684 0x715ced2460
	void OnLocalConfirmCallback(GameplayAbility* InAbility);// 0x31e87cc 0x715ced2540
	void OnLocalCancelCallback(GameplayAbility* InAbility);// 0x31e8728 0x715ced2620
	void OnConfirmCallback();// 0x31e8884 0x715ced2700
	void OnCancelCallback();// 0x31e8870 0x715ced27e0

--------------------------------
Class: AbilityTask_WaitDelay.AbilityTask.GameplayTask.Object // 719b17d080
	delegate OnFinish;//[Offset: 0x78, Size: 0x10] 0x715cf10580
	static AbilityTask_WaitDelay* WaitDelay(GameplayAbility* OwningAbility, float Time);// 0x31e8dbc 0x715ced2380

--------------------------------
Class: AbilityTask_WaitGameplayEffectApplied.AbilityTask.GameplayTask.Object // 719b17ce00
	AbilitySystemComponent* ExternalOwner;//[Offset: 0x1a0, Size: 0x8] 0x715cf10380
	void OnApplyGameplayEffectCallback(AbilitySystemComponent* Target, out const GameplayEffectSpec SpecApplied, ActiveGameplayEffectHandle ActiveHandle);// 0x31ea894 0x715ced22a0

--------------------------------
Class: AbilityTask_WaitGameplayEffectApplied_Self.AbilityTask_WaitGameplayEffectApplied.AbilityTask.GameplayTask.Object // 719b17cb80
	delegate OnApplied;//[Offset: 0x1b0, Size: 0x10] 0x715cf11c00
	static AbilityTask_WaitGameplayEffectApplied_Self* WaitGameplayEffectAppliedToSelf_Query(GameplayAbility* OwningAbility, const GameplayTargetDataFilterHandle SourceFilter, GameplayTagQuery SourceTagQuery, GameplayTagQuery TargetTagQuery, bool TriggerOnce, Actor* OptionalExternalOwner, bool ListenForPeriodicEffect);// 0x31eac50 0x715ced20e0
	static AbilityTask_WaitGameplayEffectApplied_Self* WaitGameplayEffectAppliedToSelf(GameplayAbility* OwningAbility, const GameplayTargetDataFilterHandle SourceFilter, GameplayTagRequirements SourceTagRequirements, GameplayTagRequirements TargetTagRequirements, bool TriggerOnce, Actor* OptionalExternalOwner, bool ListenForPeriodicEffect);// 0x31eb06c 0x715ced21c0

--------------------------------
Class: AbilityTask_WaitGameplayEffectApplied_Target.AbilityTask_WaitGameplayEffectApplied.AbilityTask.GameplayTask.Object // 719b17c900
	delegate OnApplied;//[Offset: 0x1b0, Size: 0x10] 0x715cf11380
	static AbilityTask_WaitGameplayEffectApplied_Target* WaitGameplayEffectAppliedToTarget_Query(GameplayAbility* OwningAbility, const GameplayTargetDataFilterHandle SourceFilter, GameplayTagQuery SourceTagQuery, GameplayTagQuery TargetTagQuery, bool TriggerOnce, Actor* OptionalExternalOwner, bool ListenForPeriodicEffect);// 0x31eb938 0x715ced1f20
	static AbilityTask_WaitGameplayEffectApplied_Target* WaitGameplayEffectAppliedToTarget(GameplayAbility* OwningAbility, const GameplayTargetDataFilterHandle TargetFilter, GameplayTagRequirements SourceTagRequirements, GameplayTagRequirements TargetTagRequirements, bool TriggerOnce, Actor* OptionalExternalOwner, bool ListenForPeriodicEffects);// 0x31ebd54 0x715ced2000

--------------------------------
Class: AbilityTask_WaitGameplayEffectBlockedImmunity.AbilityTask.GameplayTask.Object // 719b17c680
	delegate bLocked;//[Offset: 0x78, Size: 0x10] 0x715cf13080
	AbilitySystemComponent* ExternalOwner;//[Offset: 0x110, Size: 0x8] 0x715cf13100
	static AbilityTask_WaitGameplayEffectBlockedImmunity* WaitGameplayEffectBlockedByImmunity(GameplayAbility* OwningAbility, GameplayTagRequirements SourceTagRequirements, GameplayTagRequirements TargetTagRequirements, Actor* OptionalExternalTarget, bool OnlyTriggerOnce);// 0x31ec620 0x715ced1e40

--------------------------------
Class: AbilityTask_WaitGameplayEffectRemoved.AbilityTask.GameplayTask.Object // 719b17c400
	delegate OnRemoved;//[Offset: 0x78, Size: 0x10] 0x715cf12d80
	delegate InvalidHandle;//[Offset: 0x88, Size: 0x10] 0x715cf12e00
	static AbilityTask_WaitGameplayEffectRemoved* WaitForGameplayEffectRemoved(GameplayAbility* OwningAbility, ActiveGameplayEffectHandle Handle);// 0x31ecd14 0x715ced5640
	void OnGameplayEffectRemoved(out const GameplayEffectRemovalInfo InGameplayEffectRemovalInfo);// 0x31ecdf8 0x715ced1d60

--------------------------------
Class: GameplayEffectRemovalInfo // 7149068740
	bool bPrematureRemoval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715d77c980
	int StackCount;//[Offset: 0x4, Size: 0x4] 0x715d77ca00
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18] 0x715d77ca80

--------------------------------
Class: AbilityTask_WaitGameplayEffectStackChange.AbilityTask.GameplayTask.Object // 719b17c180
	delegate OnChange;//[Offset: 0x78, Size: 0x10] 0x715cf12980
	delegate InvalidHandle;//[Offset: 0x88, Size: 0x10] 0x715cf12a00
	static AbilityTask_WaitGameplayEffectStackChange* WaitForGameplayEffectStackChange(GameplayAbility* OwningAbility, ActiveGameplayEffectHandle Handle);// 0x31ed354 0x715ced5480
	void OnGameplayEffectStackChange(ActiveGameplayEffectHandle Handle, int NewCount, int OldCount);// 0x31ed438 0x715ced5560

--------------------------------
Class: AbilityTask_WaitGameplayEvent.AbilityTask.GameplayTask.Object // 719b17bf00
	delegate EventReceived;//[Offset: 0x78, Size: 0x10] 0x715cf12580
	AbilitySystemComponent* OptionalExternalTarget;//[Offset: 0x90, Size: 0x8] 0x715cf12600
	static AbilityTask_WaitGameplayEvent* WaitGameplayEvent(GameplayAbility* OwningAbility, GameplayTag EventTag, Actor* OptionalExternalTarget, bool OnlyTriggerOnce, bool OnlyMatchExact);// 0x31ed9a8 0x715ced53a0

--------------------------------
Class: AbilityTask_WaitGameplayTag.AbilityTask.GameplayTask.Object // 719b17ba00
	AbilitySystemComponent* OptionalExternalTarget;//[Offset: 0x80, Size: 0x8] 0x715cf12400
	void GameplayTagCallback(const GameplayTag Tag, int NewCount);// 0x31ef054 0x715ced52c0

--------------------------------
Class: AbilityTask_WaitGameplayTagAdded.AbilityTask_WaitGameplayTag.AbilityTask.GameplayTask.Object // 719b17bc80
	delegate Added;//[Offset: 0x98, Size: 0x10] 0x715cf14200
	static AbilityTask_WaitGameplayTagAdded* WaitGameplayTagAdd(GameplayAbility* OwningAbility, GameplayTag Tag, Actor* InOptionalExternalTarget, bool OnlyTriggerOnce);// 0x31edf78 0x715ced51e0

--------------------------------
Class: AbilityTask_WaitGameplayTagRemoved.AbilityTask_WaitGameplayTag.AbilityTask.GameplayTask.Object // 719b17b780
	delegate Removed;//[Offset: 0x98, Size: 0x10] 0x715cf13f00
	static AbilityTask_WaitGameplayTagRemoved* WaitGameplayTagRemove(GameplayAbility* OwningAbility, GameplayTag Tag, Actor* InOptionalExternalTarget, bool OnlyTriggerOnce);// 0x31ee5ac 0x715ced5100

--------------------------------
Class: AbilityTask_WaitAnyGameplayTagAdded.AbilityTask_WaitGameplayTag.AbilityTask.GameplayTask.Object // 719b17b500
	delegate Added;//[Offset: 0x98, Size: 0x10] 0x715cf13c00
	static AbilityTask_WaitAnyGameplayTagAdded* WaitAnyGameplayTagAdded(GameplayAbility* OwningAbility, GameplayTagContainer InTags, Actor* InOptionalExternalTarget, bool OnlyTriggerOnce);// 0x31eead4 0x715ced5020

--------------------------------
Class: AbilityTask_WaitInputPress.AbilityTask.GameplayTask.Object // 719b17b280
	delegate OnPress;//[Offset: 0x78, Size: 0x10] 0x715cf13a00
	static AbilityTask_WaitInputPress* WaitInputPress(GameplayAbility* OwningAbility, bool bTestAlreadyPressed);// 0x31ef2ac 0x715ced4e60
	void OnPressCallback();// 0x31ef39c 0x715ced4f40

--------------------------------
Class: AbilityTask_WaitInputRelease.AbilityTask.GameplayTask.Object // 719b17b000
	delegate OnRelease;//[Offset: 0x78, Size: 0x10] 0x715cf13800
	static AbilityTask_WaitInputRelease* WaitInputRelease(GameplayAbility* OwningAbility, bool bTestAlreadyReleased);// 0x31ef7fc 0x715ced4ca0
	void OnReleaseCallback();// 0x31ef8ec 0x715ced4d80

--------------------------------
Class: AbilityTask_WaitMovementModeChange.AbilityTask.GameplayTask.Object // 719b17ad80
	delegate OnChange;//[Offset: 0x78, Size: 0x10] 0x715cf13480
	void OnMovementModeChange(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x31efe34 0x715ced4ae0
	static AbilityTask_WaitMovementModeChange* CreateWaitMovementModeChange(GameplayAbility* OwningAbility, byte NewMode);// 0x31efd4c 0x715ced4bc0

--------------------------------
Class: AbilityTask_WaitOverlap.AbilityTask.GameplayTask.Object // 719b17ab00
	delegate OnOverlap;//[Offset: 0x78, Size: 0x10] 0x715cf15180
	static AbilityTask_WaitOverlap* WaitForOverlap(GameplayAbility* OwningAbility);// 0x31f03a0 0x715ced4920
	void OnHitCallback(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x31f0444 0x715ced4a00

--------------------------------
Class: AbilityTask_WaitTargetData.AbilityTask.GameplayTask.Object // 719b17a880
	delegate ValidData;//[Offset: 0x78, Size: 0x10] 0x715cf14500
	delegate Cancelled;//[Offset: 0x88, Size: 0x10] 0x715cf14580
	class GameplayAbilityTargetActor* TargetClass;//[Offset: 0x98, Size: 0x8] 0x715ce97fe0
	GameplayAbilityTargetActor* TargetActor;//[Offset: 0xa0, Size: 0x8] 0x715cf14600
	static AbilityTask_WaitTargetData* WaitTargetDataUsingActor(GameplayAbility* OwningAbility, FName TaskInstanceName, byte ConfirmationType, GameplayAbilityTargetActor* TargetActor, bool AllowServerControlOnClientTimeout, float ServerTimeoutLength);// 0x31f0c80 0x715ced4220
	static AbilityTask_WaitTargetData* WaitTargetData(GameplayAbility* OwningAbility, FName TaskInstanceName, byte ConfirmationType, class GameplayAbilityTargetActor Class, bool AllowServerControlOnClientTimeout, float ServerTimeoutLength);// 0x31f0e80 0x715ced4300
	void OnTargetDataReplicatedCancelledCallback();// 0x31f1350 0x715ced43e0
	void OnTargetDataReplicatedCallback(out const GameplayAbilityTargetDataHandle Data, GameplayTag ActivationTag);// 0x31f1364 0x715ced44c0
	void OnTargetDataReadyCallback(out const GameplayAbilityTargetDataHandle Data);// 0x31f11e8 0x715ced45a0
	void OnTargetDataCancelledCallback(out const GameplayAbilityTargetDataHandle Data);// 0x31f1080 0x715ced4680
	void FinishSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetActor* SpawnedActor);// 0x31f0a54 0x715ced4760
	bool BeginSpawningActor(GameplayAbility* OwningAbility, class GameplayAbilityTargetActor Class, out GameplayAbilityTargetActor* SpawnedActor);// 0x31f0b38 0x715ced4840

--------------------------------
Class: AbilityTask_WaitVelocityChange.AbilityTask.GameplayTask.Object // 719b17a600
	delegate OnVelocityChage;//[Offset: 0x78, Size: 0x10] 0x715cf16300
	MovementComponent* CachedMovementComponent;//[Offset: 0x88, Size: 0x8] 0x715cf14280
	static AbilityTask_WaitVelocityChange* CreateWaitVelocityChange(GameplayAbility* OwningAbility, Vector Direction, float MinimumMagnitude);// 0x31f1b3c 0x715ced4140

--------------------------------
Class: GameplayAbility_CharacterJump.GameplayAbility.Object // 719b17a100

--------------------------------
Class: GameplayAbility_Montage.GameplayAbility.Object // 719b179e80
	AnimMontage* MontageToPlay;//[Offset: 0x460, Size: 0x8] 0x715cf19000
	float PlayRate;//[Offset: 0x468, Size: 0x4] 0x715cf19080
	FName SectionName;//[Offset: 0x46c, Size: 0x8] 0x715cf19100
	class GameplayEffect[] GameplayEffectClassesWhileAnimating;//[Offset: 0x478, Size: 0x10] 0x715ce9a240
	GameplayEffect*[] GameplayEffectsWhileAnimating;//[Offset: 0x488, Size: 0x10] 0x715ce9a2e0

--------------------------------
Class: GameplayAbilityBlueprint.Blueprint.BlueprintCore.Object // 719b179c00

--------------------------------
Class: GameplayAbilitySet.DataAsset.Object // 719b17fd80
	GameplayAbilityBindInfo[] Abilities;//[Offset: 0x30, Size: 0x10] 0x715ce99d40

--------------------------------
Class: GameplayAbilityBindInfo // 714906fa00
	byte Command;//[Offset: 0x0, Size: 0x1] 0x715d93d800
	class GameplayAbility* GameplayAbilityClass;//[Offset: 0x8, Size: 0x8] 0x715d894520

--------------------------------
Class: GameplayAbilityTargetActor_Trace.GameplayAbilityTargetActor.Actor.Object // 719b17f100
	float MaxRange;//[Offset: 0x320, Size: 0x4] 0x715cf1a380
	CollisionProfileName TraceProfile;//[Offset: 0x324, Size: 0x8] 0x715cf1a400
	bool bTraceAffectsAimPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1] 0x715cf1a480

--------------------------------
Class: GameplayAbilityTargetActor_GroundTrace.GameplayAbilityTargetActor_Trace.GameplayAbilityTargetActor.Actor.Object // 719b17f380
	float CollisionRadius;//[Offset: 0x338, Size: 0x4] 0x715cf1a280
	float CollisionHeight;//[Offset: 0x33c, Size: 0x4] 0x715cf1a300

--------------------------------
Class: GameplayAbilityTargetActor_ActorPlacement.GameplayAbilityTargetActor_GroundTrace.GameplayAbilityTargetActor_Trace.GameplayAbilityTargetActor.Actor.Object // 719b17f600
	class Object* PlacedActorClass;//[Offset: 0x358, Size: 0x8] 0x715ce99c00
	MaterialInterface* PlacedActorMaterial;//[Offset: 0x360, Size: 0x8] 0x715cf1a200

--------------------------------
Class: GameplayAbilityTargetActor_Radius.GameplayAbilityTargetActor.Actor.Object // 719b17ee80
	float Radius;//[Offset: 0x320, Size: 0x4] 0x715cf1a180

--------------------------------
Class: GameplayAbilityTargetActor_SingleLineTrace.GameplayAbilityTargetActor_Trace.GameplayAbilityTargetActor.Actor.Object // 719b17ec00

--------------------------------
Class: GameplayAbilityWorldReticle_ActorVisualization.GameplayAbilityWorldReticle.Actor.Object // 71a4825100
	CapsuleComponent* CollisionComponent;//[Offset: 0x240, Size: 0x8] 0x715cf19980
	ActorComponent*[] VisualizationComponents;//[Offset: 0x248, Size: 0x10] 0x715ce99b60

--------------------------------
Class: GameplayCueInterface.Interface.Object // 71a4824e80
	void ForwardGameplayCueToParent();// 0x3204e84 0x715ced7da0
	void BlueprintCustomHandler(byte EventType, GameplayCueParameters Parameters);// 0x45c6aa0 0x715ced7e80

--------------------------------
Class: GameplayCueNotify_Static.Object // 71a4824480
	GameplayTag GameplayCueTag;//[Offset: 0x28, Size: 0x8] 0x715cf1bf80
	GameplayTagReferenceHelper ReferenceHelper;//[Offset: 0x30, Size: 0x10] 0x715cf1c000
	FName GameplayCueName;//[Offset: 0x40, Size: 0x8] 0x715cf1c080
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cf1c100
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x320cc38 0x715cedace0
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x320ca50 0x715ced7400
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x320d008 0x715ced74e0
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x320ce20 0x715ced75c0
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0x45c6aa0 0x715ced76a0

--------------------------------
Class: GameplayCueNotify_HitImpact.GameplayCueNotify_Static.Object // 71a4824700
	SoundBase* sound;//[Offset: 0x50, Size: 0x8] 0x715cf1be80
	ParticleSystem* ParticleSystem;//[Offset: 0x58, Size: 0x8] 0x715cf1bf00

--------------------------------
Class: GameplayCueTranslator.Object // 71a4823f80

--------------------------------
Class: GameplayCueTranslator_Test.GameplayCueTranslator.Object // 71a4823d00

--------------------------------
Class: GameplayEffectUIData_TextOnly.GameplayEffectUIData.Object // 71a4822e00
	FText Description;//[Offset: 0x28, Size: 0x18] 0x715cf1cb80

--------------------------------
Class: TickableAttributeSetInterface.Interface.Object // 71a4822680

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object // 71a4822400
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8] 0x715cf1e300
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x20] 0x715cf1e380

--------------------------------
Class: ActorSequenceObjectReferenceMap // 715da32b00
	Guid[] BindingIds;//[Offset: 0x0, Size: 0x10] 0x715d895b00
	ActorSequenceObjectReferences[] References;//[Offset: 0x10, Size: 0x10] 0x715d895ce0

--------------------------------
Class: ActorSequenceObjectReferences // 715da32a40
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0x10] 0x715d895c40

--------------------------------
Class: ActorSequenceObjectReference // 715da32980
	enum Type;//[Offset: 0x0, Size: 0x1] 0x715d895ba0
	Guid ActorId;//[Offset: 0x4, Size: 0x10] 0x715da42600
	FString PathToComponent;//[Offset: 0x18, Size: 0x10] 0x715da42680

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object // 71a4821c80
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xb0, Size: 0x14] 0x715cf1e180
	ActorSequence* Sequence;//[Offset: 0xc8, Size: 0x8] 0x715cf1e200
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xd0, Size: 0x8] 0x715cf1e280

--------------------------------
Class: MovieSceneSequencePlaybackSettings // 715dad0a00
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715dac6c80
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4] 0x715dac6d80
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x715dac6e00
	float StartTime;//[Offset: 0xc, Size: 0x4] 0x715dac6e80
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x715dac6f00
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x715dac6f80
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x715dac7000
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x715dac7080
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x715dac7100
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x715dac7180
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x715dac7200
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x715dac7280

--------------------------------
Class: MovieSceneSequenceLoopCount // 715dad0940
	int Value;//[Offset: 0x0, Size: 0x4] 0x715dac6d00

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object // 71a4821a00

--------------------------------
Class: MovieSceneSequencePlayer.Object // 71a4821780
	delegate OnPlay;//[Offset: 0x408, Size: 0x10] 0x715cf1fb80
	delegate OnPlayReverse;//[Offset: 0x418, Size: 0x10] 0x715cf1fc00
	delegate OnStop;//[Offset: 0x428, Size: 0x10] 0x715cf1fc80
	delegate OnPause;//[Offset: 0x438, Size: 0x10] 0x715cf1fd00
	delegate OnFinished;//[Offset: 0x448, Size: 0x10] 0x715cf1fd80
	byte Status;//[Offset: 0x458, Size: 0x1] 0x715cf1fe00
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 0x1] 0x715cf1fe80
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 0x8] 0x715cf1ff00
	FrameNumber StartTime;//[Offset: 0x468, Size: 0x4] 0x715cf1ff80
	int DurationFrames;//[Offset: 0x46c, Size: 0x4] 0x715cf1e780
	int CurrentNumLoops;//[Offset: 0x470, Size: 0x4] 0x715cf1e800
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 0x14] 0x715cf1e880
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 0x320] 0x715cf1e900
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 0x10] 0x715cf1e980
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 0x10] 0x715cf1ea00
	void StopAtCurrentTime();// 0x538c428 0x715cedba00
	void Stop();// 0x538c43c 0x715cedbae0
	void SetTimeRange(float StartTime, float Duration);// 0x538bc88 0x715cedbbc0
	void SetPlayRate(float PlayRate);// 0x538b4fc 0x715cedbca0
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x538c0a0 0x715cedbd80
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x538c184 0x715cedbe60
	void SetFrameRate(FrameRate FrameRate);// 0x538be98 0x715cedbf40
	void SetFrameRange(int StartFrame, int Duration);// 0x538bd6c 0x715cedc020
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x538b448 0x715cedc100
	void ScrubToSeconds(float TimeInSeconds);// 0x538b954 0x715cedc1e0
	bool ScrubToMarkedFrame(FString InLabel);// 0x538b738 0x715cedc2c0
	void ScrubToFrame(FrameTime NewPosition);// 0x538bb40 0x715cedc3a0
	void Scrub();// 0x538c450 0x715cedc480
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x538b078 0x715cedc560
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x538b124 0x715cedc640
	void PlayToSeconds(float TimeInSeconds);// 0x538b9f8 0x715cedc720
	bool PlayToMarkedFrame(FString InLabel);// 0x538b7f4 0x715cedc800
	void PlayToFrame(FrameTime NewPosition);// 0x538bbe4 0x715cedc8e0
	void PlayReverse();// 0x538c530 0x715cedc9c0
	void PlayLooping(int NumLoops);// 0x538c478 0x715ced90e0
	void Play();// 0x538c544 0x715ced91c0
	void Pause();// 0x538c464 0x715ced92a0
	void JumpToSeconds(float TimeInSeconds);// 0x538b8b0 0x715ced9380
	void JumpToPosition(float NewPlaybackPosition);// 0x538bffc 0x715ced9460
	bool JumpToMarkedFrame(FString InLabel);// 0x538b67c 0x715ced9540
	void JumpToFrame(FrameTime NewPosition);// 0x538ba9c 0x715ced9620
	bool IsReversed();// 0x538b5d4 0x715ced9700
	bool IsPlaying();// 0x538b644 0x715ced97e0
	bool IsPaused();// 0x538b60c 0x715ced98c0
	void GoToEndAndStop();// 0x538c414 0x715ced99a0
	QualifiedFrameTime GetStartTime();// 0x538be78 0x715ced9a80
	float GetPlayRate();// 0x538b5a0 0x715ced9b60
	float GetPlaybackStart();// 0x538c2e8 0x715ced9c40
	float GetPlaybackPosition();// 0x538c36c 0x715ced9d20
	float GetPlaybackEnd();// 0x538c28c 0x715ced9e00
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x538b214 0x715ced9ee0
	float GetLength();// 0x538c338 0x715ced9fc0
	FrameRate GetFrameRate();// 0x538bf44 0x715ceda0a0
	int GetFrameDuration();// 0x538bf60 0x715ceda180
	QualifiedFrameTime GetEndTime();// 0x538be50 0x715ceda260
	QualifiedFrameTime GetDuration();// 0x538bf94 0x715ceda340
	bool GetDisableCameraCuts();// 0x538b428 0x715ceda420
	QualifiedFrameTime GetCurrentTime();// 0x538bfc8 0x715ceda500
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x538b30c 0x715ceda5e0
	void ChangePlaybackDirection();// 0x538c51c 0x715ceda6c0

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance // 715dad1600
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50] 0x715dad1540

--------------------------------
Class: MovieSceneSequenceReplProperties // 715dad0880
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8] 0x715dac6b00
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1] 0x715dac6b80
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4] 0x715dac6c00

--------------------------------
Class: MediaOutput.Object // 71a4821280
	int NumberOfTextureBuffers;//[Offset: 0x28, Size: 0x4] 0x715cf1f980
	bool Validate(out FString OutFailureReason);// 0x32647d0 0x715cedb840
	MediaCapture* CreateMediaCapture();// 0x32648a4 0x715cedb920

--------------------------------
Class: MediaCapture.Object // 71a4820d80
	delegate OnStateChanged;//[Offset: 0x28, Size: 0x10] 0x715cf30b00
	MediaOutput* MediaOutput;//[Offset: 0x50, Size: 0x8] 0x715cf30b80
	TextureRenderTarget2D* CapturingRenderTarget;//[Offset: 0x78, Size: 0x8] 0x715cf30c00
	bool UpdateTextureRenderTarget2D(TextureRenderTarget2D* RenderTarget);// 0x32634f0 0x715cedb140
	void StopCapture(bool bAllowPendingFrameToBeProcess);// 0x3263444 0x715cedb220
	void SetMediaOutput(MediaOutput* InMediaOutput);// 0x3263364 0x715cedb300
	enum GetState();// 0x3263408 0x715cedb3e0
	IntPoint GetDesiredSize();// 0x3263344 0x715cedb4c0
	byte GetDesiredPixelFormat();// 0x3263328 0x715cedb5a0
	bool CaptureTextureRenderTarget2D(TextureRenderTarget2D* RenderTarget, MediaCaptureOptions CaptureOptions);// 0x32635a0 0x715cedb680
	bool CaptureActiveSceneViewport(MediaCaptureOptions CaptureOptions);// 0x326369c 0x715cedb760

--------------------------------
Class: MediaCaptureOptions // 715da328c0
	enum Crop;//[Offset: 0x0, Size: 0x1] 0x715d895a60
	IntPoint CustomCapturePoint;//[Offset: 0x4, Size: 0x8] 0x715da42380
	bool bResizeSourceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715da42400
	bool bSkipFrameWhenRunningExpensiveTasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x715da42480

--------------------------------
Class: RemoteSessionMediaOutput.MediaOutput.Object // 71a4821500

--------------------------------
Class: RemoteSessionMediaCapture.MediaCapture.Object // 71a4821000

--------------------------------
Class: AppleImageUtilsBaseAsyncTaskBlueprintProxy.Object // 71a4820b00
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf31d80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf31e00
	AppleImageUtilsImageConversionResult ConversionResult;//[Offset: 0x60, Size: 0x20] 0x715cf31e80
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToTIFF(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x32565c8 0x715cedadc0
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToPNG(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x32563f4 0x715cedaea0
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToJPEG(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x32569b4 0x715cedaf80
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToHEIF(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x325679c 0x715cedb060

--------------------------------
Class: AppleImageUtilsImageConversionResult // 714906a6c0
	FString Error;//[Offset: 0x0, Size: 0x10] 0x715d786900
	byte[] ImageData;//[Offset: 0x10, Size: 0x10] 0x7148cd89e0

--------------------------------
Class: AppleImageInterface.Interface.Object // 71a4820880

--------------------------------
Class: FileMediaCapture.MediaCapture.Object // 71a4820600

--------------------------------
Class: FileMediaOutput.MediaOutput.Object // 71a4820380
	ImageWriteOptions WriteOptions;//[Offset: 0x30, Size: 0x60] 0x715cf31a00
	DirectoryPath FilePath;//[Offset: 0x90, Size: 0x10] 0x715cf31a80
	FString BaseFileName;//[Offset: 0xa0, Size: 0x10] 0x715cf31b00
	bool bOverrideDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715cf31b80
	IntPoint DesiredSize;//[Offset: 0xb4, Size: 0x8] 0x715cf31c00
	bool bOverridePixelFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x715cf31c80
	enum DesiredPixelFormat;//[Offset: 0xc0, Size: 0x4] 0x715ce9ab00

--------------------------------
Class: ImageWriteOptions // 715da9bbc0
	enum Format;//[Offset: 0x0, Size: 0x1] 0x715d89da80
	delegate OnComplete;//[Offset: 0x4, Size: 0x10] 0x715dabc380
	int CompressionQuality;//[Offset: 0x14, Size: 0x4] 0x715dabc400
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715dabc480
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x715dabc500

--------------------------------
Class: SDUserWidget.UserWidget.Widget.Visual.Object // 71a4829e80
	SDUIConfigMain* SDUIConfig;//[Offset: 0x238, Size: 0x8] 0x715d7d1d80
	SDWidgetAnimationsManager* AnimationsManager;//[Offset: 0x240, Size: 0x8] 0x715d7d1e00
	SDViewModel* ViewModel;//[Offset: 0x248, Size: 0x8] 0x715d7d1e80
	void OnContextChanged();// 0x45c6aa0 0x715d7c36c0
	SDWidgetAnimationsManager* GetWidgetAnimationsManager();// 0x32bf104 0x715d7c37a0
	Widget* GetInitialFocusedWidget();// 0x32bf0c8 0x715d7c3880

--------------------------------
Class: SDWidgetAnimationsManager.Object // 71a482c680
	WidgetAnimation* GetPredefinedAnimationWithRenamedTracks(const FName AnimationName, const FName[] WidgetsNames);// 0x32c3920 0x715cf44ae0
	WidgetAnimation* GetPredefinedAnimationWithRenamedTrack(const FName AnimationName, const FName WidgetName);// 0x32c3a70 0x715cf44bc0
	WidgetAnimation* GetPredefinedAnimationWithRemappedTracks(const FName AnimationName, const <FName,FName> OldToNewWidgetNames);// 0x32c3780 0x715cf44ca0
	WidgetAnimation* GetPredefinedAnimationByName(const FName AnimationName);// 0x32c3b5c 0x715cf44d80
	WidgetAnimation* GetAnimationByName(FName AnimationName);// 0x32c3c08 0x715cf44e60

--------------------------------
Class: SDUIConfigMain.SDUIConfig.DataAsset.Object // 71a482e200
	<FName,ConfigurableText> TextStyles;//[Offset: 0x40, Size: 0x50] 0x715cec94c0
	ConfigurableText DefaultTextStyle;//[Offset: 0x90, Size: 0x80] 0x715cf38a80
	<FName,LinearColor> ColorThemes;//[Offset: 0x110, Size: 0x50] 0x715cec9580
	LinearColor DefaultThemeColor;//[Offset: 0x160, Size: 0x10] 0x715cf38c00
	FName[] EditorConfigNames;//[Offset: 0x170, Size: 0x10] 0x715ce9a740

--------------------------------
Class: SDUIConfig.DataAsset.Object // 71a482e480
	delegate OnConfigDataChanged;//[Offset: 0x30, Size: 0x10] 0x715d786880

--------------------------------
Class: ConfigurableText // 715da32140
	SlateColor ColorAndOpacity;//[Offset: 0x0, Size: 0x28] 0x715da43400
	SlateFontInfo Font;//[Offset: 0x28, Size: 0x50] 0x715da43480
	float LineHeightPercentage;//[Offset: 0x78, Size: 0x4] 0x715da43500

--------------------------------
Class: SlateFontInfo // 7149069b80
	Object* FontObject;//[Offset: 0x0, Size: 0x8] 0x715d7a0700
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8] 0x715d7a0780
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20] 0x715d7a0a80
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8] 0x715d7a0b00
	int Size;//[Offset: 0x48, Size: 0x4] 0x715d7a0b80

--------------------------------
Class: FontOutlineSettings // 7149069ac0
	int OutlineSize;//[Offset: 0x0, Size: 0x4] 0x715d7a0800
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715d7a0880
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x715d7a0900
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8] 0x715d7a0980
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10] 0x715d7a0a00

--------------------------------
Class: SDViewModel.Object // 71a4825b00

--------------------------------
Class: SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a482a100
	bool UseWideScreenContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1] 0x715cf31900
	bool bModalLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x715cf31980
	void OnExitEvent();// 0x45c6aa0 0x715cede5c0
	void OnEnterEvent();// 0x45c6aa0 0x715cede6a0

--------------------------------
Class: SDUILayer.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a482a380

--------------------------------
Class: SDBuildVersionWidget.SDUILayer.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4820100
	SDConfigurableTextBlock* VersionTextBlock;//[Offset: 0x268, Size: 0x8] 0x715cf31880

--------------------------------
Class: SDConfigurableTextBlock.TextBlock.TextLayoutWidget.Widget.Visual.Object // 71a4827900
	FName ConfigPropertyName;//[Offset: 0x2a8, Size: 0x8] 0x715cf36700
	FName ColorThemeName;//[Offset: 0x2b0, Size: 0x8] 0x715cf36780
	FName ShadowColorThemeName;//[Offset: 0x2b8, Size: 0x8] 0x715cf36800
	bool bUseForegroundColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x715cf36880
	enum TextType;//[Offset: 0x2c1, Size: 0x1] 0x715ce9a920
	void SetWrapTextAt(float InWrapTextAt);// 0x32aeae8 0x715cf40cc0
	void SetShadowColorThemeName(FName InName);// 0x32ae968 0x715cf40da0
	void SetConfigPropertyName(FName InName);// 0x32aea28 0x715cf40e80
	void SetColorThemeName(FName InName);// 0x32aeb8c 0x715cf40f60
	FName GetShadowColorThemeName();// 0x32aea0c 0x715cf41040
	FName GetConfigPropertyName();// 0x32aeacc 0x715cf41120
	FName GetColorThemeName();// 0x32aec30 0x715cf41200

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object // 71a4827680
	FText Text;//[Offset: 0x128, Size: 0x18] 0x715cf36d00
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10] 0x715cf36d80
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 0x28] 0x715cf36e00
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 0x10] 0x715cf36e80
	SlateFontInfo Font;//[Offset: 0x188, Size: 0x50] 0x715cf36f00
	SlateBrush StrikeBrush;//[Offset: 0x1d8, Size: 0x88] 0x715cf36f80
	Vector2D ShadowOffset;//[Offset: 0x260, Size: 0x8] 0x715cf37000
	LinearColor ShadowColorAndOpacity;//[Offset: 0x268, Size: 0x10] 0x715cf37080
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x278, Size: 0x10] 0x715cf37100
	float MinDesiredWidth;//[Offset: 0x288, Size: 0x4] 0x715cf37180
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1] 0x715cf37200
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 0x1] 0x715cf37280
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e, Size: 0x1] 0x715cf37300
	void SetText(FText InText);// 0x55dbf7c 0x715cf412e0
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x55dc38c 0x715cf413c0
	void SetShadowOffset(Vector2D InShadowOffset);// 0x55dc828 0x715cf414a0
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x55dc8c8 0x715cf41580
	void SetOpacity(float InOpacity);// 0x55dc96c 0x715cf41660
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x55dc2e8 0x715cf41740
	void SetFont(SlateFontInfo InFontInfo);// 0x55dc68c 0x715cf41820
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x55dca10 0x715cf41900
	void SetAutoWrapText(bool InAutoTextWrap);// 0x55dc23c 0x715cf419e0
	FText GetText();// 0x55dc104 0x715cf41ac0
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x55dc1d4 0x715cf41ba0
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x55dc208 0x715cf41c80

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object // 71a4827400
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 0x3] 0x715d7a6480
	byte Justification;//[Offset: 0x10b, Size: 0x1] 0x715d7a6500
	enum WrappingPolicy;//[Offset: 0x10c, Size: 0x1] 0x7148cd9660
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1] 0x715d7a6600
	float WrapTextAt;//[Offset: 0x110, Size: 0x4] 0x715d7a6680
	Margin Margin;//[Offset: 0x114, Size: 0x10] 0x715d7a6700
	float LineHeightPercentage;//[Offset: 0x124, Size: 0x4] 0x715d7a6780
	void SetJustification(byte InJustification);// 0x55dd338 0x715d79a0a0

--------------------------------
Class: ShapedTextOptions // 7149069580
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715d7a2b80
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715d7a2c00
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1] 0x7148cd9b60
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1] 0x7148cd9c00

--------------------------------
Class: SDWidget.PanelWidget.Widget.Visual.Object // 71a4828f80
	ButtonStyle WidgetStyle;//[Offset: 0x120, Size: 0x278] 0x715cf32300
	byte ClickMethod;//[Offset: 0x398, Size: 0x1] 0x715cf32380
	byte TouchMethod;//[Offset: 0x399, Size: 0x1] 0x715cf32400
	byte PressMethod;//[Offset: 0x39a, Size: 0x1] 0x715cf32480
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 0x1] 0x715cf32500
	delegate OnClicked;//[Offset: 0x3a0, Size: 0x10] 0x715cf32580
	delegate OnPressed;//[Offset: 0x3b0, Size: 0x10] 0x715cf32600
	delegate OnReleased;//[Offset: 0x3c0, Size: 0x10] 0x715cf32680
	delegate OnHovered;//[Offset: 0x3d0, Size: 0x10] 0x715cf32700
	delegate OnUnhovered;//[Offset: 0x3e0, Size: 0x10] 0x715cf32780
	delegate OnFocusReceived;//[Offset: 0x3f0, Size: 0x10] 0x715cf32800
	delegate OnFocusLost;//[Offset: 0x400, Size: 0x10] 0x715cf32880
	bool Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1] 0x715cf32900
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1] 0x715cf32980
	bool Pressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 0x1] 0x715cf32a00
	bool Hovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 0x1] 0x715cf32a80
	bool UsePreviewValuesToShowFinalWidgetState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1] 0x715cf32b00
	byte EditorPreviewStates;//[Offset: 0x415, Size: 0x1] 0x715cf32b80
	void SetTouchMethod(byte InTouchMethod);// 0x32c0174 0x715cedd360
	void SetSelected(const bool InSelected);// 0x32c0418 0x715cedd440
	void SetPressMethod(byte InPressMethod);// 0x32c00d0 0x715cedd520
	void SetPressed(const bool InPressed);// 0x32c0570 0x715cedd600
	void SetIsFocusable(bool InIsFocusable);// 0x32c0024 0x715cedd6e0
	void SetHovered(const bool InHovered);// 0x32c04c4 0x715cedd7c0
	void SetClickMethod(byte InClickMethod);// 0x32c0218 0x715cedd8a0
	void SetActive(bool Inactive);// 0x32c0364 0x715cedd980
	bool IsSelected();// 0x32c02f4 0x715cedda60
	bool IsPressed();// 0x32c02bc 0x715ceddb40
	bool IsActive();// 0x32c032c 0x715ceddc20

--------------------------------
Class: SDTile.SDWidget.PanelWidget.Widget.Visual.Object // 71a4829200
	SlateBrush OutlineBrush;//[Offset: 0x438, Size: 0x88] 0x715cf34000
	SlateBrush GlowBrush;//[Offset: 0x4c0, Size: 0x88] 0x715cf34080
	SlateBrush FillBrush;//[Offset: 0x548, Size: 0x88] 0x715cf34100
	LinearColor ColorAndOpacity;//[Offset: 0x5d0, Size: 0x10] 0x715cf34180
	LinearColor BackgroundColor;//[Offset: 0x5e0, Size: 0x10] 0x715cf34200
	void SetStyle(out const ButtonStyle InStyle);// 0x32b82e8 0x715cedd0c0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x32b8244 0x715cedd1a0
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x32b81a0 0x715cedd280

--------------------------------
Class: SDButton.SDTile.SDWidget.PanelWidget.Widget.Visual.Object // 71a4829480
	FText Text;//[Offset: 0x620, Size: 0x18] 0x715cf33c00
	SlateColor TextColorAndOpacity;//[Offset: 0x638, Size: 0x28] 0x715cf33c80
	SlateFontInfo TextFont;//[Offset: 0x660, Size: 0x50] 0x715cf33d00
	Vector2D TextShadowOffset;//[Offset: 0x6b0, Size: 0x8] 0x715cf33d80
	LinearColor TextShadowColorAndOpacity;//[Offset: 0x6b8, Size: 0x10] 0x715cf33e00
	Margin TextMargin;//[Offset: 0x6c8, Size: 0x10] 0x715cf33e80
	void SetTextColorAndOpacity(SlateColor InColorAndOpacity);// 0x32adbdc 0x715cedcf00
	void SetText(FText InText);// 0x32add70 0x715cedcfe0

--------------------------------
Class: SDToggle.SDWidget.PanelWidget.Widget.Visual.Object // 71a4828800
	FText Text;//[Offset: 0x438, Size: 0x18] 0x715cf33380
	SlateColor TextColorAndOpacity;//[Offset: 0x450, Size: 0x28] 0x715cf33400
	SlateFontInfo TextFont;//[Offset: 0x478, Size: 0x50] 0x715cf33480
	Vector2D TextShadowOffset;//[Offset: 0x4c8, Size: 0x8] 0x715cf33500
	LinearColor TextShadowColorAndOpacity;//[Offset: 0x4d0, Size: 0x10] 0x715cf33580
	SlateBrush OutlineBrush;//[Offset: 0x4e0, Size: 0x88] 0x715cf33600
	SlateBrush GlowBrush;//[Offset: 0x568, Size: 0x88] 0x715cf33680
	SlateBrush FillBrush;//[Offset: 0x5f0, Size: 0x88] 0x715cf33700
	Margin TextMargin;//[Offset: 0x678, Size: 0x10] 0x715cf33780
	LinearColor ColorAndOpacity;//[Offset: 0x688, Size: 0x10] 0x715cf33800
	LinearColor BackgroundColor;//[Offset: 0x698, Size: 0x10] 0x715cf33880
	delegate OnToggleStateChanged;//[Offset: 0x6a8, Size: 0x10] 0x715cf33900
	void SetToggled(bool bIsToggled);// 0x32b8704 0x715cedcaa0
	void SetTextColorAndOpacity(SlateColor InColorAndOpacity);// 0x32b88f8 0x715cedcb80
	void SetText(FText InText);// 0x32b8a8c 0x715cedcc60
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x32b8854 0x715cedcd40
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x32b87b0 0x715cedce20

--------------------------------
Class: SDCheckBox.SDToggle.SDWidget.PanelWidget.Widget.Visual.Object // 71a4828a80
	SlateBrush CheckedBrush;//[Offset: 0x728, Size: 0x88] 0x715cf33300

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object // 71a4828080
	PanelSlot* SetContent(Widget* Content);// 0x55b9320 0x715cedfd60
	PanelSlot* GetContentSlot();// 0x55b93cc 0x715cedfe40
	Widget* GetContent();// 0x55b92ec 0x715cedff20

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object // 71a4828300
	byte HorizontalAlignment;//[Offset: 0x119, Size: 0x1] 0x715cf34480
	byte VerticalAlignment;//[Offset: 0x11a, Size: 0x1] 0x715cf34500
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11b, Size: 0x1] 0x715cf34580
	LinearColor ContentColorAndOpacity;//[Offset: 0x11c, Size: 0x10] 0x715cf34600
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x12c, Size: 0x10] 0x715cf34680
	Margin Padding;//[Offset: 0x13c, Size: 0x10] 0x715cf34700
	SlateBrush Background;//[Offset: 0x150, Size: 0x88] 0x715cf34780
	delegate BackgroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x715cf34800
	LinearColor BrushColor;//[Offset: 0x1e8, Size: 0x10] 0x715cf34880
	delegate BrushColorDelegate;//[Offset: 0x1f8, Size: 0x10] 0x715cf34900
	Vector2D DesiredSizeScale;//[Offset: 0x208, Size: 0x8] 0x715cf34980
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x715cf34a00
	delegate OnMouseButtonDownEvent;//[Offset: 0x214, Size: 0x10] 0x715cf34a80
	delegate OnMouseButtonUpEvent;//[Offset: 0x224, Size: 0x10] 0x715cf34b00
	delegate OnMouseMoveEvent;//[Offset: 0x234, Size: 0x10] 0x715cf34b80
	delegate OnMouseDoubleClickEvent;//[Offset: 0x244, Size: 0x10] 0x715cf34c00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55b20bc 0x715cedf3c0
	void SetPadding(Margin InPadding);// 0x55b2204 0x715cedf4a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55b2160 0x715cedf580
	void SetDesiredSizeScale(Vector2D InScale);// 0x55b1b94 0x715cedf660
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x55b22ac 0x715cedf740
	void SetBrushFromTexture(Texture2D* Texture);// 0x55b1d0c 0x715cedf820
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x55b1c68 0x715cedf900
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x55b1db0 0x715cedf9e0
	void SetBrushColor(LinearColor InBrushColor);// 0x55b2018 0x715cedfac0
	void SetBrush(out const SlateBrush InBrush);// 0x55b1e54 0x715cedfba0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x55b1c34 0x715cedfc80

--------------------------------
Class: SDConfigurableBorder.Border.ContentWidget.PanelWidget.Widget.Visual.Object // 71a4828580
	FName ConfigPropertyName;//[Offset: 0x270, Size: 0x8] 0x715cf34400

--------------------------------
Class: Image.Widget.Visual.Object // 71a4827b80
	SlateBrush Brush;//[Offset: 0x108, Size: 0x88] 0x715cf35900
	delegate BrushDelegate;//[Offset: 0x190, Size: 0x10] 0x715cf35980
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 0x10] 0x715cf35a00
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10] 0x715cf35a80
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x715cf35b00
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 0x10] 0x715cf35b80
	void SetOpacity(float InOpacity);// 0x55c1024 0x715cede780
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x55c10c8 0x715cede860
	void SetBrushTintColor(SlateColor TintColor);// 0x55c0df0 0x715cede940
	void SetBrushSize(Vector2D DesiredSize);// 0x55c0f84 0x715cedea20
	void SetBrushResourceObject(Object* ResourceObject);// 0x55c0d4c 0x715cedeb00
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x55c07cc 0x715cedebe0
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x55c09dc 0x715cedecc0
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x55c05a4 0x715cededa0
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x55c047c 0x715cedee80
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x55c0720 0x715cedef60
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x55c08c4 0x715cedf040
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x55c0ad4 0x715cedf120
	void SetBrush(out const SlateBrush InBrush);// 0x55c0b80 0x715cedf200
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x55c0448 0x715cedf2e0

--------------------------------
Class: SDConfigurableImage.Image.Widget.Visual.Object // 71a4827e00
	FName ConfigPropertyName;//[Offset: 0x218, Size: 0x8] 0x715cf35880

--------------------------------
Class: SDFillBar.Widget.Visual.Object // 71a4827180
	float Percent;//[Offset: 0x108, Size: 0x4] 0x715cf38200
	float ExtraPercent;//[Offset: 0x10c, Size: 0x4] 0x715cf38280
	bool IsPositive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x715cf38300
	SlateBrush BackgroundImageBrush;//[Offset: 0x118, Size: 0x88] 0x715cf38380
	SlateBrush FillImageMainBrush;//[Offset: 0x1a0, Size: 0x88] 0x715cf38400
	SlateBrush FillImageExtraBrush;//[Offset: 0x228, Size: 0x88] 0x715cf36380
	LinearColor BarFillNormalColor;//[Offset: 0x2b0, Size: 0x10] 0x715cf36400
	LinearColor BarBackgroundColor;//[Offset: 0x2c0, Size: 0x10] 0x715cf36480
	LinearColor BarFillPositiveColor;//[Offset: 0x2d0, Size: 0x10] 0x715cf36500
	LinearColor BarFillNegativeColor;//[Offset: 0x2e0, Size: 0x10] 0x715cf36580
	void SetPercent(float InPercent);// 0x32af318 0x715cf40b00
	void SetBarCharacter(bool IsPositiveIn);// 0x32af26c 0x715cf40be0

--------------------------------
Class: SDUserWidgetFocusable.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4826c80
	SDInteractiveArea* InteractiveArea;//[Offset: 0x258, Size: 0x8] 0x715d7d1d00

--------------------------------
Class: SDInteractiveArea.Widget.Visual.Object // 71a4826280
	delegate OnAreaClicked;//[Offset: 0x108, Size: 0x10] 0x715d7aac00
	delegate OnAreaHovered;//[Offset: 0x118, Size: 0x10] 0x715d7aac80
	delegate OnAreaUnhovered;//[Offset: 0x128, Size: 0x10] 0x715d7aad00
	void SetFocusable(const bool InIsFocusable);// 0x32b0ea0 0x715d79e320
	void OnAreaHoverEvent__DelegateSignature();// 0x45c6aa0 0x715d79e400
	void OnAreaClickedEvent__DelegateSignature();// 0x45c6aa0 0x715d79e4e0
	bool GetFocusable();// 0x32b0e68 0x715d79e5c0

--------------------------------
Class: SDGridSlotWidget.SDUserWidgetFocusable.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4826f00
	delegate OnSlotClicked;//[Offset: 0x268, Size: 0x10] 0x715d7d1a00
	int SlotIndex;//[Offset: 0x278, Size: 0x4] 0x715d7d1a80
	bool IsSlotEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x715d7d1b00
	bool IsSlotActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 0x1] 0x715d7d1b80
	Border* FocusBorder;//[Offset: 0x280, Size: 0x8] 0x715d7d1c00
	SDGridWidget* GridReference;//[Offset: 0x288, Size: 0x8] 0x715d7d1c80
	void OnSlotClicked__DelegateSignature();// 0x45c6aa0 0x715d7c3180
	void HoverFocus();// 0x32af828 0x715d7c3260
	void HoverActivation();// 0x32af814 0x715d7c3340
	void HandleAreaUnhovered();// 0x32af83c 0x715d7c3420
	void HandleAreaHovered();// 0x32af850 0x715d7c3500
	void HandleAreaClicked();// 0x32af864 0x715d7c35e0

--------------------------------
Class: SDGridWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4826a00
	delegate OnSlotActivated;//[Offset: 0x258, Size: 0x10] 0x715d7d2a80
	SDUniformGridPanel* GridPanel;//[Offset: 0x268, Size: 0x8] 0x715d7d2b00
	SizeBox* GridSizeBox;//[Offset: 0x270, Size: 0x8] 0x715d7d2b80
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8] 0x715d7d2c00
	ScrollBox* ScrollBox;//[Offset: 0x280, Size: 0x8] 0x715d7d2c80
	byte SlotHorizontalAlignment;//[Offset: 0x288, Size: 0x1] 0x715d7d2d00
	byte SlotVerticalAlignment;//[Offset: 0x289, Size: 0x1] 0x715d7d2d80
	int StartingSlotIndex;//[Offset: 0x28c, Size: 0x4] 0x715d7d2e00
	int Columns;//[Offset: 0x290, Size: 0x4] 0x715d7d2e80
	Margin SlotPadding;//[Offset: 0x294, Size: 0x10] 0x715d7d2f00
	SDGridWidgetScroll SDGridWidgetScroll;//[Offset: 0x2a4, Size: 0xc] 0x715d7d1180
	SDGridWidgetFocus SDGridWidgetFocus;//[Offset: 0x2b0, Size: 0x10] 0x715d7d1400
	int NumberOfPreviewSlot;//[Offset: 0x2c0, Size: 0x4] 0x715d7d1480
	SDGridSlotWidget*[] Slots;//[Offset: 0x2c8, Size: 0x10] 0x7148cdb780
	class SDGridSlotWidget* SDGridSlotWidgetTemplate;//[Offset: 0x2d8, Size: 0x8] 0x7148cdb820
	class SDInvisibleSlotWidget* SDInvisibleSlotWidgetTemplate;//[Offset: 0x2e0, Size: 0x8] 0x7148cdb8c0
	void RemoveSlot(const int SlotIndex);// 0x32b03ec 0x715d7c29a0
	void OnSlotActivated__DelegateSignature(int ActivatedSlotIndex);// 0x45c6aa0 0x715d7c2a80
	void InsertSlot(const int SlotIndex);// 0x32b0490 0x715d7c2b60
	void HandleUserScrolled(float CurrentOffset);// 0x32b00b8 0x715d7c2c40
	void EnableSlot(const int SlotIndex);// 0x32b0348 0x715d7c2d20
	void DisableSlot(const int SlotIndex);// 0x32b02a4 0x715d7c2e00
	void DeactivateSlot(const int SlotIndex);// 0x32b015c 0x715d7c2ee0
	SDGridSlotWidget* AddSlot();// 0x32b0534 0x715d7c2fc0
	void ActivateSlot(const int SlotIndex);// 0x32b0200 0x715d7c30a0

--------------------------------
Class: SDUniformGridPanel.UniformGridPanel.PanelWidget.Widget.Visual.Object // 71a482d300

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object // 71a482d080
	Margin SlotPadding;//[Offset: 0x11c, Size: 0x10] 0x715cf3bb80
	float MinDesiredSlotWidth;//[Offset: 0x12c, Size: 0x4] 0x715cf3bc00
	float MinDesiredSlotHeight;//[Offset: 0x130, Size: 0x4] 0x715cf3bc80
	void SetSlotPadding(Margin InSlotPadding);// 0x55e05b8 0x715cf44f40
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0x55e0514 0x715cf45020
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0x55e0470 0x715cf45100
	UniformGridSlot* AddChildToUniformGrid(Widget* Content, int InRow, int InColumn);// 0x55e0340 0x715cf451e0

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object // 71a49bcb80
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1] 0x715cac0a80
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1] 0x715cac0b00
	int Row;//[Offset: 0x3c, Size: 0x4] 0x715cac0b80
	int Column;//[Offset: 0x40, Size: 0x4] 0x715cac0c00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55e0a20 0x715cab13c0
	void SetRow(int InRow);// 0x55e0c0c 0x715cab14a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55e0ac4 0x715cab1580
	void SetColumn(int InColumn);// 0x55e0b68 0x715cab1660

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49bec00
	float WidthOverride;//[Offset: 0x130, Size: 0x4] 0x715caad600
	float HeightOverride;//[Offset: 0x134, Size: 0x4] 0x715caad680
	float MinDesiredWidth;//[Offset: 0x138, Size: 0x4] 0x715caab600
	float MinDesiredHeight;//[Offset: 0x13c, Size: 0x4] 0x715caab680
	float MaxDesiredWidth;//[Offset: 0x140, Size: 0x4] 0x715caab700
	float MaxDesiredHeight;//[Offset: 0x144, Size: 0x4] 0x715caab780
	float MinAspectRatio;//[Offset: 0x148, Size: 0x4] 0x715caab800
	float MaxAspectRatio;//[Offset: 0x14c, Size: 0x4] 0x715caab880
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x715caab900
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1] 0x715caab980
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1] 0x715caaba00
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1] 0x715caaba80
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1] 0x715caabb00
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1] 0x715caabb80
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1] 0x715caabc00
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1] 0x715caabc80
	void SetWidthOverride(float InWidthOverride);// 0x55d4720 0x715ca8d1a0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x55d45b0 0x715ca8d280
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x55d44f8 0x715ca8d360
	void SetMinAspectRatio(float InMinAspectRatio);// 0x55d42d0 0x715ca8d440
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x55d4440 0x715ca8d520
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x55d4388 0x715ca8d600
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x55d422c 0x715ca8d6e0
	void SetHeightOverride(float InHeightOverride);// 0x55d4668 0x715ca8d7c0
	void ClearWidthOverride();// 0x55d470c 0x715ca8d8a0
	void ClearMinDesiredWidth();// 0x55d459c 0x715ca8d980
	void ClearMinDesiredHeight();// 0x55d44e4 0x715ca8da60
	void ClearMinAspectRatio();// 0x55d4218 0x715ca8db40
	void ClearMaxDesiredWidth();// 0x55d442c 0x715ca8dc20
	void ClearMaxDesiredHeight();// 0x55d4374 0x715ca8dd00
	void ClearMaxAspectRatio();// 0x55d4204 0x715ca8dde0
	void ClearHeightOverride();// 0x55d4654 0x715ca8dec0

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object // 71a49bf100
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x228] 0x715caac400
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 0x4d0] 0x715caac480
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 0x8] 0x715caac500
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 0x8] 0x715caac580
	byte Orientation;//[Offset: 0x828, Size: 0x1] 0x715caac600
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 0x1] 0x715ca75b00
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 0x1] 0x715ca75ba0
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 0x8] 0x715caaa680
	Margin ScrollbarPadding;//[Offset: 0x834, Size: 0x10] 0x715caaa700
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1] 0x715caaa780
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 0x1] 0x715caaa800
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 0x1] 0x715caaa880
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 0x1] 0x715caaa900
	enum NavigationDestination;//[Offset: 0x848, Size: 0x1] 0x715ca75c40
	float NavigationScrollPadding;//[Offset: 0x84c, Size: 0x4] 0x715caaaa00
	enum ScrollWhenFocusChanges;//[Offset: 0x850, Size: 0x1] 0x715ca75ce0
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 0x1] 0x715caaab00
	float WheelScrollMultiplier;//[Offset: 0x854, Size: 0x4] 0x715caaab80
	delegate OnUserScrolled;//[Offset: 0x858, Size: 0x10] 0x715caaac00
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x55d2d28 0x715ca8e240
	void SetScrollOffset(float NewScrollOffset);// 0x55d2c70 0x715ca8e320
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0x55d3134 0x715ca8e400
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x55d3084 0x715ca8e4e0
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x55d2fd0 0x715ca8e5c0
	void SetOrientation(byte NewOrientation);// 0x55d31d8 0x715ca8e6a0
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x55d327c 0x715ca8adc0
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x55d2dcc 0x715ca8aea0
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x55d2f24 0x715ca8af80
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x55d2e78 0x715ca8b060
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x55d2a30 0x715ca8b140
	void ScrollToStart();// 0x55d2bc0 0x715ca8b220
	void ScrollToEnd();// 0x55d2bac 0x715ca8b300
	float GetViewOffsetFraction();// 0x55d2bd4 0x715ca8b3e0
	float GetScrollOffsetOfEnd();// 0x55d2c08 0x715ca8b4c0
	float GetScrollOffset();// 0x55d2c3c 0x715ca8b5a0
	void EndInertialScrolling();// 0x55d2d14 0x715ca8b680

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle // 715da99a00
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x88] 0x715dab8f00
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 0x88] 0x715dab8f80
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 0x88] 0x715dab9000
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 0x88] 0x715dab9080

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle // 714906c400
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x88] 0x715d7a4600
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 0x88] 0x715d7a4680
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 0x88] 0x715d7a4700
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 0x88] 0x715d7a4780
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 0x88] 0x715d7a4800
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 0x88] 0x715d7a4880
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 0x88] 0x715d7a4900
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 0x88] 0x715d7a4980
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 0x88] 0x715d7a4a00

--------------------------------
Class: SlateWidgetStyleAsset.Object // 71a498fd80
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8] 0x715d254280

--------------------------------
Class: SlateWidgetStyleContainerBase.Object // 71a498fb00

--------------------------------
Class: SDGridWidgetScroll // 714906bc80
	bool IsScrollSupported;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715d7d2f80
	byte ScrollOrientation;//[Offset: 0x1, Size: 0x1] 0x715d7d3000
	bool ShouldScrollAnimate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715d7d3080
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715d7d3100
	int ScrollVisibleRows;//[Offset: 0x4, Size: 0x4] 0x715d7d3180
	int ScrollVisibleRowsBuffer;//[Offset: 0x8, Size: 0x4] 0x715d7d1100

--------------------------------
Class: SDGridWidgetFocus // 714906bd40
	bool UseCustomCellWhenEnteringGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715d7d1200
	int CustomCellGridIndex;//[Offset: 0x4, Size: 0x4] 0x715d7d1280
	float HoveringTimeToFocus;//[Offset: 0x8, Size: 0x4] 0x715d7d1300
	float HoveringTimeToActivate;//[Offset: 0xc, Size: 0x4] 0x715d7d1380

--------------------------------
Class: SDInvisibleSlotWidget.SDUserWidgetFocusable.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4826000
	int SlotIndex;//[Offset: 0x264, Size: 0x4] 0x715cf37e00
	SDGridWidget* GridReference;//[Offset: 0x268, Size: 0x8] 0x715cf37e80

--------------------------------
Class: SDPanelWrapper.SDWidget.PanelWidget.Widget.Visual.Object // 71a4826500
	byte ChildHorizontalAlignment;//[Offset: 0x438, Size: 0x1] 0x715cf37f00
	byte ChildVerticalAlignment;//[Offset: 0x439, Size: 0x1] 0x715cf37f80
	SlateChildSize ChildSize;//[Offset: 0x43c, Size: 0x8] 0x715cf38000
	Margin ChildPadding;//[Offset: 0x444, Size: 0x10] 0x715cf38080
	class SDUserWidget* ItemWidgetClass;//[Offset: 0x458, Size: 0x8] 0x715ce9a7e0
	byte PreviewItemsNumber;//[Offset: 0x460, Size: 0x1] 0x715cf38100
	SDUserWidget*[] GetChildren();// 0x32b1ac4 0x715cf40a20

--------------------------------
Class: SlateChildSize // 715dada0c0
	float Value;//[Offset: 0x0, Size: 0x4] 0x715daff480
	byte SizeRule;//[Offset: 0x4, Size: 0x1] 0x715daff500

--------------------------------
Class: SDHorizontalBoxWrapper.SDPanelWrapper.SDWidget.PanelWidget.Widget.Visual.Object // 71a4826780

--------------------------------
Class: SDListenerViewModel.SDViewModel.Object // 71a4825d80

--------------------------------
Class: SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4825880
	bool ShouldPropagateInitToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1] 0x715cf37d80

--------------------------------
Class: SDPopupViewModel.SDViewModel.Object // 71a4825600
	TextBindable TitleText;//[Offset: 0x48, Size: 0x98] 0x715cf37c80
	TextBindable DescriptionText;//[Offset: 0xe0, Size: 0x98] 0x715cf37d00

--------------------------------
Class: TextBindable.Bindable // 714906af00
	FText Value;//[Offset: 0x80, Size: 0x18] 0x715d7d5a80

--------------------------------
Class: Bindable // 714906b080

--------------------------------
Class: SDRadialPanel.PanelWidget.Widget.Visual.Object // 71a4825380
	LinearColor PreviewColor;//[Offset: 0x11c, Size: 0x10] 0x715cf37880
	float PreviewThickness;//[Offset: 0x12c, Size: 0x4] 0x715cf37900
	int NumberOfPreviewSegments;//[Offset: 0x130, Size: 0x4] 0x715cf37980
	bool ShowPreviewInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1] 0x715cf37a00
	float EllipseToRectangleLerpStrength;//[Offset: 0x138, Size: 0x4] 0x715cf37a80
	Vector2D CanvasPadding;//[Offset: 0x13c, Size: 0x8] 0x715cf37b00
	SDRadialPanelSlot* AddChildToCanvas(Widget* Content);// 0x32b2044 0x715cf40940

--------------------------------
Class: SDRadialPanelSlot.PanelSlot.Visual.Object // 71a482f600
	float RadialPosition;//[Offset: 0x38, Size: 0x4] 0x715cf38f80
	Vector2D SlotOffset;//[Offset: 0x3c, Size: 0x8] 0x715cf39000
	Vector2D Alignment;//[Offset: 0x44, Size: 0x8] 0x715cf39080
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x715cf39100
	Vector2D SlotSize;//[Offset: 0x50, Size: 0x8] 0x715cf39180
	int ZOrder;//[Offset: 0x58, Size: 0x4] 0x715cf39200
	void SetZOrder(int InZOrder);// 0x32b2794 0x715cf43960
	void SetSlotSize(out const Vector2D InSlotSize);// 0x32b24f4 0x715d7ce4e0
	void SetSlotOffset(out const Vector2D InSlotOffset);// 0x32b25d8 0x715cf40080
	void SetRadialPosition(float InRadialPosition);// 0x32b26f0 0x715cf40160
	void SetAutoSize(bool InbAutoSize);// 0x32b2870 0x715cf40240
	void SetAlignment(out const Vector2D InAlignment);// 0x32b2410 0x715cf40320
	int GetZOrder();// 0x32b26bc 0x715cf40400
	Vector2D GetSlotSize();// 0x32b24c0 0x715cf404e0
	Vector2D GetSlotOffset();// 0x32b25a4 0x715cf405c0
	float GetRadialPosition();// 0x32b2688 0x715cf406a0
	bool GetAutoSize();// 0x32b2838 0x715cf40780
	Vector2D GetAlignment();// 0x32b23dc 0x715cf40860

--------------------------------
Class: SDRadioButton.SDToggle.SDWidget.PanelWidget.Widget.Visual.Object // 71a482f100

--------------------------------
Class: SDTextBlock.TextBlock.TextLayoutWidget.Widget.Visual.Object // 71a482ee80

--------------------------------
Class: SDToggleButton.SDToggle.SDWidget.PanelWidget.Widget.Visual.Object // 71a482ec00
	SlateBrush HandleBrush;//[Offset: 0x728, Size: 0x88] 0x715cf38f00

--------------------------------
Class: SDUIAnim.Object // 71a482e980
	void Play();// 0x32b9044 0x715cf43880

--------------------------------
Class: SDUIAnimShake.SDUIAnim.Object // 71a482e700
	void SetConfig(out const SDShakeAnimationConfig Config);// 0x32b9414 0x715cf436c0
	static SDUIAnimShake* RegisterNewAnimation(SDUserWidget* Outer, out const SDShakeAnimationConfig Config);// 0x32b94e4 0x715cf437a0

--------------------------------
Class: SDShakeAnimationConfig // 715da32080
	int MinShakeOffset;//[Offset: 0x0, Size: 0x4] 0x715da45280
	int MaxShakeOffset;//[Offset: 0x4, Size: 0x4] 0x715da43200
	float ShakeIntensity;//[Offset: 0x8, Size: 0x4] 0x715da43280
	int ShakesPerSecond;//[Offset: 0xc, Size: 0x4] 0x715da43300
	int ShakeCount;//[Offset: 0x10, Size: 0x4] 0x715da43380

--------------------------------
Class: SDUIConfigSettings.DeveloperSettings.Object // 71a482df80
	SDUIConfigMain* MainConfiguration;//[Offset: 0x38, Size: 0x28] 0x715cf38900

--------------------------------
Class: SDUIFunctionLibrary.BlueprintFunctionLibrary.Object // 71a482da80
	static void Visibility_BindWidgetVisibility(out VisibilityBindable VisibilityBindable, Widget* Widget);// 0x32ba868 0x715cf452c0
	static void Visibility_BindMultipleWidgetVisibility(out VisibilityBindable VisibilityBindable, out Widget*[] Widgets);// 0x32ba6f0 0x715cf453a0
	static void Vector2D_BindWidgetRenderShear(out Vector2DBindable Vector2DBindable, Widget* Widget);// 0x32bac7c 0x715cf45480
	static void Vector2D_BindRenderTranslation(out Vector2DBindable Vector2DBindable, Widget* Widget);// 0x32ba9c4 0x715cf45560
	static void Vector2D_BindRenderTransformPivot(out Vector2DBindable Vector2DBindable, Widget* Widget);// 0x32bab20 0x715cf45640
	static void Texture2D_BindImage(out Texture2DBindable Texture2DBindable, Image* Image, bool MatchSize);// 0x32badd8 0x715cf41d60
	static void Text_BindTextBlockText(out TextBindable TextBindable, TextBlock* TextBlock, const bool bForceUntranslated);// 0x32bb9d8 0x715cf41e40
	static void Text_BindRichTextBlockText(out TextBindable TextBindable, RichTextBlock* TextBlock, const bool bForceUntranslated);// 0x32bb83c 0x715cf41f20
	static void Text_BindEditableTextBoxText(out TextBindable TextBindable, EditableText* TextBox);// 0x32bb6ec 0x715cf42000
	static void Text_BindDelegate(out TextBindable TextBindable, delegate Delegate);// 0x32bb58c 0x715cf420e0
	static void String_BindComboBoxStringOption(out StringBindable StringBindable, ComboBoxString* ComboBoxString);// 0x32ba584 0x715cf421c0
	static void Name_BindConfigurableTextBoxColor(out NameBindable NameBindable, SDConfigurableTextBlock* TextBox);// 0x32ba428 0x715cf422a0
	static bool IsColorThemeDefined(Object* WorldContextObject, FName ThemeName);// 0x32ba214 0x715cf42380
	static void Int32_BindActiveWidgetIndex(out Int32Bindable Int32Bindable, WidgetSwitcher* WidgetSwitcher);// 0x32bbb74 0x715cf42460
	static LinearColor GetColorByThemeName(Object* WorldContextObject, FName ThemeName, const Object* Requester);// 0x32ba2fc 0x715cf42540
	static void Float_BindTextBlock(out FloatBindable FloatBindable, TextBlock* TextBlock);// 0x32bbccc 0x715cf42620
	static void Float_BindSliderValue(out FloatBindable FloatBindable, Slider* Slider);// 0x32bc0e4 0x715cf42700
	static void Float_BindRenderOpacity(out FloatBindable FloatBindable, Widget* Widget);// 0x32bc394 0x715cf427e0
	static void Float_BindRenderAngle(out FloatBindable FloatBindable, Widget* Widget);// 0x32bc23c 0x715cf428c0
	static void Float_BindProgressBarValue(out FloatBindable FloatBindable, ProgressBar* ProgressBar);// 0x32bbe24 0x715cf429a0
	static void Float_BindDelegate(out FloatBindable FloatBindable, delegate Delegate);// 0x32bbf7c 0x715cf42a80
	static void Color_BindForegroundColor(out ColorBindable ColorBindable, out UserWidget*[] Widgets);// 0x32bc4ec 0x715cf42b60
	static void Color_BindColorAndOpacity_TextBlock(out ColorBindable ColorBindable, TextBlock* TextBlock);// 0x32bc664 0x715cf42c40
	static void Color_BindColorAndOpacity_Image(out ColorBindable ColorBindable, Image* Image);// 0x32bc7c0 0x715cf42d20
	static void Color_BindColorAndOpacity(out ColorBindable ColorBindable, UserWidget* UserWidget);// 0x32bc91c 0x715cf42e00
	static void Brush_BindImageAndVisibility(out BrushAndVisibilityBindable BrushAndVisibleBindable, Image* Image, enum SetVisibility, enum EmptyVisibility);// 0x32baf84 0x715cf42ee0
	static void Brush_BindImage(out BrushBindable BrushBindable, Image* Image);// 0x32bb2cc 0x715cf42fc0
	static bool Bool_GetValue(out const BoolBindable BoolBindable);// 0x32bca78 0x715cf430a0
	static void Bool_BindVisibility(out BoolBindable BoolBindable, Widget* Widget, enum TrueVisibility, enum FalseVisibility);// 0x32bd4c8 0x715cf43180
	static void Bool_BindText(out BoolBindable BoolBindable, TextBlock* Widget, FText TrueText, FText FalseText);// 0x32bcba0 0x715cf43260
	static void Bool_BindRenderOpacity(out BoolBindable BoolBindable, Widget* Widget, float TrueOpacity, float FalseOpacity);// 0x32bd2e4 0x715cf43340
	static void Bool_BindMultipleWidgetVisibility(out BoolBindable BoolBindable, out Widget*[] Widgets, enum TrueVisibility, enum FalseVisibility);// 0x32bd0a0 0x715cf43420
	static void Bool_BindIsEnabled(out BoolBindable BoolBindable, Widget* Widget);// 0x32bd6b0 0x715cf43500
	static void Bool_BindActiveWidgetIndex(out BoolBindable BoolBindable, WidgetSwitcher* WidgetSwitcher);// 0x32bcf44 0x715cf435e0

--------------------------------
Class: VisibilityBindable.Bindable // 714906d780
	enum Value;//[Offset: 0x68, Size: 0x1] 0x7148cdc7c0

--------------------------------
Class: Vector2DBindable.Bindable // 715da31e40
	Vector2D Value;//[Offset: 0x70, Size: 0x8] 0x715da45100

--------------------------------
Class: Texture2DBindable.Bindable // 714906d240
	Texture2D* Value;//[Offset: 0x70, Size: 0x8] 0x715d825f00

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object // 71a49b5d80
	FText Text;//[Offset: 0x128, Size: 0x18] 0x715caa8580
	DataTable* TextStyleSet;//[Offset: 0x140, Size: 0x8] 0x715caa8600
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x148, Size: 0x10] 0x715ca76000
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1] 0x715caa8680
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x160, Size: 0x268] 0x715caa8700
	float MinDesiredWidth;//[Offset: 0x3c8, Size: 0x4] 0x715caa8780
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x638, Size: 0x10] 0x715ca760a0
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x55cfe30 0x715ca8bf40
	void SetText(out const FText InText);// 0x55cfed4 0x715ca8c020
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x55d023c 0x715ca8c100
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x55d00d0 0x715ca8c1e0
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x55d02e0 0x715ca8c2c0
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x55d0640 0x715ca8c3a0
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x55d06e0 0x715ca8c480
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x55d04a4 0x715ca8c560
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x55d0784 0x715ca8c640
	void SetAutoWrapText(bool InAutoTextWrap);// 0x55d0190 0x715ca8c720
	FText GetText();// 0x55cffec 0x715ca8c800
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x55cfd84 0x715ca8c8e0
	void ClearAllDefaultStyleOverrides();// 0x55d00bc 0x715ca8c9c0

--------------------------------
Class: RichTextBlockDecorator.Object // 71a4943580

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle // 714906c280
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x50] 0x715d7a6f00
	SlateColor ColorAndOpacity;//[Offset: 0x58, Size: 0x28] 0x715d7a6f80
	Vector2D ShadowOffset;//[Offset: 0x80, Size: 0x8] 0x715d7a7000
	LinearColor ShadowColorAndOpacity;//[Offset: 0x88, Size: 0x10] 0x715d7a7080
	SlateColor SelectedBackgroundColor;//[Offset: 0x98, Size: 0x28] 0x715d7a7100
	LinearColor HighlightColor;//[Offset: 0xc0, Size: 0x10] 0x715d7a7180
	SlateBrush HighlightShape;//[Offset: 0xd0, Size: 0x88] 0x715d7a7200
	SlateBrush StrikeBrush;//[Offset: 0x158, Size: 0x88] 0x715d7a7280
	SlateBrush UnderlineBrush;//[Offset: 0x1e0, Size: 0x88] 0x715d7a7300

--------------------------------
Class: EditableText.Widget.Visual.Object // 71a49b0880
	FText Text;//[Offset: 0x108, Size: 0x18] 0x715d7a3c80
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x715d7a3d00
	FText HintText;//[Offset: 0x130, Size: 0x18] 0x715d7a3d80
	delegate HintTextDelegate;//[Offset: 0x148, Size: 0x10] 0x715d7a3e00
	EditableTextStyle WidgetStyle;//[Offset: 0x158, Size: 0x218] 0x715d7a4100
	SlateWidgetStyleAsset* Style;//[Offset: 0x370, Size: 0x8] 0x715d7a4180
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x378, Size: 0x8] 0x715d7a4200
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x380, Size: 0x8] 0x715d7a2180
	SlateBrushAsset* CaretImage;//[Offset: 0x388, Size: 0x8] 0x715d7a2200
	SlateFontInfo Font;//[Offset: 0x390, Size: 0x50] 0x715d7a2280
	SlateColor ColorAndOpacity;//[Offset: 0x3e0, Size: 0x28] 0x715d7a2300
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1] 0x715d7a2380
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1] 0x715d7a2400
	float MinimumDesiredWidth;//[Offset: 0x40c, Size: 0x4] 0x715d7a2480
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1] 0x715d7a2500
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1] 0x715d7a2580
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 0x1] 0x715d7a2600
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 0x1] 0x715d7a2680
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1] 0x715d7a2700
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1] 0x715d7a2780
	byte KeyboardType;//[Offset: 0x416, Size: 0x1] 0x715d7a2800
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x417, Size: 0x1] 0x715d7a2900
	enum VirtualKeyboardTrigger;//[Offset: 0x418, Size: 0x1] 0x7148cd9a20
	enum VirtualKeyboardDismissAction;//[Offset: 0x419, Size: 0x1] 0x7148cd9ac0
	byte Justification;//[Offset: 0x41a, Size: 0x1] 0x715d7a2b00
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x41b, Size: 0x3] 0x715d7a2d80
	delegate OnTextChanged;//[Offset: 0x420, Size: 0x10] 0x715d7a2e00
	delegate OnTextCommitted;//[Offset: 0x430, Size: 0x10] 0x715d7a2e80
	void SetVirtualKeyboardTrigger(enum TriggerType);// 0x55baff0 0x715d798200
	void SetText(FText InText);// 0x55bb36c 0x715d7982e0
	void SetJustification(byte InJustification);// 0x55baf4c 0x715d7983c0
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x55bb094 0x715d7984a0
	void SetIsPassword(bool InbIsPassword);// 0x55bb2c0 0x715d798580
	void SetHintText(FText InHintText);// 0x55bb140 0x715d798660
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x45c6aa0 0x715d798740
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x45c6aa0 0x715d798820
	FText GetText();// 0x55bb4ec 0x715d798900

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle // 714906c580
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x50] 0x715d7a3e80
	SlateColor ColorAndOpacity;//[Offset: 0x58, Size: 0x28] 0x715d7a3f00
	SlateBrush BackgroundImageSelected;//[Offset: 0x80, Size: 0x88] 0x715d7a3f80
	SlateBrush BackgroundImageComposing;//[Offset: 0x108, Size: 0x88] 0x715d7a4000
	SlateBrush CaretImage;//[Offset: 0x190, Size: 0x88] 0x715d7a4080

--------------------------------
Class: VirtualKeyboardOptions // 71490694c0
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715d7a2880

--------------------------------
Class: StringBindable.Bindable // 715da31f00
	FString Value;//[Offset: 0x78, Size: 0x10] 0x715da45180

--------------------------------
Class: ComboBoxString.Widget.Visual.Object // 71a49b1000
	FString[] DefaultOptions;//[Offset: 0x108, Size: 0x10] 0x7148cd9d40
	FString SelectedOption;//[Offset: 0x118, Size: 0x10] 0x715d7a1380
	ComboBoxStyle WidgetStyle;//[Offset: 0x128, Size: 0x3f0] 0x715d7a1d00
	TableRowStyle ItemStyle;//[Offset: 0x518, Size: 0x7c8] 0x715d7a0480
	Margin ContentPadding;//[Offset: 0xce0, Size: 0x10] 0x715d7a0500
	float MaxListHeight;//[Offset: 0xcf0, Size: 0x4] 0x715d7a0580
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1] 0x715d7a0600
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 0x1] 0x715d7a0680
	SlateFontInfo Font;//[Offset: 0xcf8, Size: 0x50] 0x715d7a0c00
	SlateColor ForegroundColor;//[Offset: 0xd48, Size: 0x28] 0x715d7a0c80
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd70, Size: 0x1] 0x715d7a0d00
	delegate OnGenerateWidgetEvent;//[Offset: 0xd74, Size: 0x10] 0x715d7a0d80
	delegate OnSelectionChanged;//[Offset: 0xd88, Size: 0x10] 0x715d7a0e00
	delegate OnOpening;//[Offset: 0xd98, Size: 0x10] 0x715d7a0e80
	void SetSelectedOption(FString Option);// 0x55b8834 0x715d7989e0
	void SetSelectedIndex(const int Index);// 0x55b8790 0x715d798ac0
	bool RemoveOption(FString Option);// 0x55b8b18 0x715d798ba0
	void RefreshOptions();// 0x55b892c 0x715d798c80
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x45c6aa0 0x715d798d60
	void OnOpeningEvent__DelegateSignature();// 0x45c6aa0 0x715d798e40
	bool IsOpen();// 0x55b8640 0x715d798f20
	FString GetSelectedOption();// 0x55b86e0 0x715d799000
	int GetSelectedIndex();// 0x55b86ac 0x715d795720
	int GetOptionCount();// 0x55b8678 0x715d795800
	FString GetOptionAtIndex(int Index);// 0x55b8968 0x715d7958e0
	int FindOptionIndex(FString Option);// 0x55b8a60 0x715d7959c0
	void ClearSelection();// 0x55b8940 0x715d795aa0
	void ClearOptions();// 0x55b8954 0x715d795b80
	void AddOption(FString Option);// 0x55b8bd4 0x715d795c60

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle // 7149069880
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3b8] 0x715d7a1b00
	SlateSound PressedSlateSound;//[Offset: 0x3c0, Size: 0x18] 0x715d7a1b80
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3d8, Size: 0x18] 0x715d7a1c80

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle // 7149069700
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x278] 0x715d7a1800
	SlateBrush DownArrowImage;//[Offset: 0x280, Size: 0x88] 0x715d7a1880
	Vector2D ShadowOffset;//[Offset: 0x308, Size: 0x8] 0x715d7a1900
	LinearColor ShadowColorAndOpacity;//[Offset: 0x310, Size: 0x10] 0x715d7a1980
	SlateBrush MenuBorderBrush;//[Offset: 0x320, Size: 0x88] 0x715d7a1a00
	Margin MenuBorderPadding;//[Offset: 0x3a8, Size: 0x10] 0x715d7a1a80

--------------------------------
Class: TableRowStyle.SlateWidgetStyle // 7149069940
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x88] 0x715d7a1d80
	SlateBrush ActiveHoveredBrush;//[Offset: 0x90, Size: 0x88] 0x715d7a1e00
	SlateBrush ActiveBrush;//[Offset: 0x118, Size: 0x88] 0x715d7a1e80
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1a0, Size: 0x88] 0x715d7a1f00
	SlateBrush InactiveBrush;//[Offset: 0x228, Size: 0x88] 0x715d7a1f80
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2b0, Size: 0x88] 0x715d7a2000
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x338, Size: 0x88] 0x715d7a2080
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3c0, Size: 0x88] 0x715d7a2100
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x448, Size: 0x88] 0x715d7a0080
	SlateColor TextColor;//[Offset: 0x4d0, Size: 0x28] 0x715d7a0100
	SlateColor SelectedTextColor;//[Offset: 0x4f8, Size: 0x28] 0x715d7a0180
	SlateBrush DropIndicator_Above;//[Offset: 0x520, Size: 0x88] 0x715d7a0200
	SlateBrush DropIndicator_Onto;//[Offset: 0x5a8, Size: 0x88] 0x715d7a0280
	SlateBrush DropIndicator_Below;//[Offset: 0x630, Size: 0x88] 0x715d7a0300
	SlateBrush ActiveHighlightedBrush;//[Offset: 0x6b8, Size: 0x88] 0x715d7a0380
	SlateBrush InactiveHighlightedBrush;//[Offset: 0x740, Size: 0x88] 0x715d7a0400

--------------------------------
Class: NameBindable.Bindable // 715da32380
	FName Value;//[Offset: 0x70, Size: 0x8] 0x715da43800

--------------------------------
Class: Int32Bindable.Bindable // 714906db40
	int Value;//[Offset: 0x68, Size: 0x4] 0x715d7dce80

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object // 71a49bfd80
	int ActiveWidgetIndex;//[Offset: 0x11c, Size: 0x4] 0x715cac5580
	void SetActiveWidgetIndex(int Index);// 0x55ff474 0x715cab4d80
	void SetActiveWidget(Widget* Widget);// 0x55ff3c8 0x715cab4e60
	Widget* GetWidgetAtIndex(int Index);// 0x55ff31c 0x715cab4f40
	int GetNumWidgets();// 0x55ff554 0x715cab5020
	int GetActiveWidgetIndex();// 0x55ff520 0x715cab5100
	Widget* GetActiveWidget();// 0x55ff2e8 0x715cab51e0

--------------------------------
Class: FloatBindable.Bindable // 714906ae40
	float Value;//[Offset: 0x68, Size: 0x4] 0x715d7d5900

--------------------------------
Class: Slider.Widget.Visual.Object // 71a49bdf80
	float Value;//[Offset: 0x108, Size: 0x4] 0x715caaea80
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x715caaeb00
	float MinValue;//[Offset: 0x11c, Size: 0x4] 0x715caaeb80
	float MaxValue;//[Offset: 0x120, Size: 0x4] 0x715caaec00
	SliderStyle WidgetStyle;//[Offset: 0x128, Size: 0x340] 0x715caaec80
	byte Orientation;//[Offset: 0x468, Size: 0x1] 0x715caaed00
	LinearColor SliderBarColor;//[Offset: 0x46c, Size: 0x10] 0x715caaed80
	LinearColor SliderHandleColor;//[Offset: 0x47c, Size: 0x10] 0x715caaee00
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1] 0x715caaee80
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1] 0x715caaef00
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 0x1] 0x715caaef80
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 0x1] 0x715caaf000
	float StepSize;//[Offset: 0x490, Size: 0x4] 0x715caaf080
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1] 0x715caaf100
	delegate OnMouseCaptureBegin;//[Offset: 0x498, Size: 0x10] 0x715caaf180
	delegate OnMouseCaptureEnd;//[Offset: 0x4a8, Size: 0x10] 0x715caaf200
	delegate OnControllerCaptureBegin;//[Offset: 0x4b8, Size: 0x10] 0x715caaf280
	delegate OnControllerCaptureEnd;//[Offset: 0x4c8, Size: 0x10] 0x715caaf300
	delegate OnValueChanged;//[Offset: 0x4d8, Size: 0x10] 0x715caaf380
	void SetValue(float InValue);// 0x55d9bf8 0x715ca8eda0
	void SetStepSize(float InValue);// 0x55d98b4 0x715ca8ee80
	void SetSliderHandleColor(LinearColor InValue);// 0x55d976c 0x715ca8ef60
	void SetSliderBarColor(LinearColor InValue);// 0x55d9810 0x715ca8f040
	void SetMinValue(float InValue);// 0x55d9b54 0x715ca8f120
	void SetMaxValue(float InValue);// 0x55d9ab0 0x715ca8f200
	void SetLocked(bool InValue);// 0x55d9958 0x715ca8f2e0
	void SetIndentHandle(bool InValue);// 0x55d9a04 0x715ca8f3c0
	float GetValue();// 0x55d9cd0 0x715ca8f4a0
	float GetNormalizedValue();// 0x55d9c9c 0x715ca8f580

--------------------------------
Class: SliderStyle.SlateWidgetStyle // 715da994c0
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x88] 0x715dab9a80
	SlateBrush HoveredBarImage;//[Offset: 0x90, Size: 0x88] 0x715dab9b00
	SlateBrush DisabledBarImage;//[Offset: 0x118, Size: 0x88] 0x715dab9b80
	SlateBrush NormalThumbImage;//[Offset: 0x1a0, Size: 0x88] 0x715dab9c00
	SlateBrush HoveredThumbImage;//[Offset: 0x228, Size: 0x88] 0x715dab9c80
	SlateBrush DisabledThumbImage;//[Offset: 0x2b0, Size: 0x88] 0x715dab9d00
	float BarThickness;//[Offset: 0x338, Size: 0x4] 0x715dab9d80

--------------------------------
Class: ProgressBar.Widget.Visual.Object // 71a49b6280
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x1a0] 0x715caa9480
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 0x8] 0x715caa7400
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 0x8] 0x715caa7480
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 0x8] 0x715caa7500
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 0x8] 0x715caa7580
	float Percent;//[Offset: 0x2c8, Size: 0x4] 0x715caa7600
	byte BarFillType;//[Offset: 0x2cc, Size: 0x1] 0x715caa7680
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1] 0x715caa7700
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 0x8] 0x715caa7780
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 0x10] 0x715caa7800
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 0x10] 0x715caa7880
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 0x10] 0x715caa7900
	void SetPercent(float InPercent);// 0x55cbffc 0x715ca89540
	void SetIsMarquee(bool InbIsMarquee);// 0x55cbeac 0x715ca89620
	void SetFillColorAndOpacity(LinearColor InColor);// 0x55cbf58 0x715ca89700

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle // 715da9c400
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88] 0x715dabb480
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88] 0x715dabb500
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88] 0x715dabb580

--------------------------------
Class: ColorBindable.Bindable // 714906d300
	LinearColor Value;//[Offset: 0x78, Size: 0x10] 0x715d824480

--------------------------------
Class: BrushAndVisibilityBindable.Bindable // 714906da80
	SlateBrush Value;//[Offset: 0xf0, Size: 0x88] 0x715d7dcb80

--------------------------------
Class: BrushBindable.Bindable // 714906d900
	SlateBrush Value;//[Offset: 0xf0, Size: 0x88] 0x715d7dd980

--------------------------------
Class: BoolBindable.Bindable // 714906afc0
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715d7d5d80

--------------------------------
Class: SDUIPopup.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a482d800
	SDPopupViewModel* PopupViewModel;//[Offset: 0x280, Size: 0x8] 0x715cf3c080

--------------------------------
Class: SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a482d580

--------------------------------
Class: SDUserWidgetNavigable.SDUserWidget.UserWidget.Widget.Visual.Object // 71a482ce00

--------------------------------
Class: SDVerticalBoxWrapper.SDPanelWrapper.SDWidget.PanelWidget.Widget.Visual.Object // 71a482cb80

--------------------------------
Class: SDWideScreenLayoutContainer.SDWidget.PanelWidget.Widget.Visual.Object // 71a482c900
	float MaxDesiredWidth;//[Offset: 0x438, Size: 0x4] 0x715cf3bb00

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a482c180
	enum Space;//[Offset: 0x439, Size: 0x1] 0x715ce9c2c0
	enum TimingPolicy;//[Offset: 0x43a, Size: 0x1] 0x715ce9c360
	class UserWidget* WidgetClass;//[Offset: 0x440, Size: 0x8] 0x715ce9c400
	IntPoint DrawSize;//[Offset: 0x448, Size: 0x8] 0x715cf3f480
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1] 0x715cf3f500
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1] 0x715cf3f580
	float RedrawTime;//[Offset: 0x454, Size: 0x4] 0x715cf3f600
	IntPoint CurrentDrawSize;//[Offset: 0x460, Size: 0x8] 0x715cf3f680
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1] 0x715cf3f700
	Vector2D Pivot;//[Offset: 0x46c, Size: 0x8] 0x715cf3f780
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 0x1] 0x715cf3d700
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 0x1] 0x715cf3d780
	enum WindowVisibility;//[Offset: 0x476, Size: 0x1] 0x715ce9c4a0
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x477, Size: 0x1] 0x715cf3d880
	LocalPlayer* OwnerPlayer;//[Offset: 0x478, Size: 0x8] 0x715cf3d900
	LinearColor BackgroundColor;//[Offset: 0x480, Size: 0x10] 0x715cf3d980
	LinearColor TintColorAndOpacity;//[Offset: 0x490, Size: 0x10] 0x715cf3da00
	float OpacityFromTexture;//[Offset: 0x4a0, Size: 0x4] 0x715cf3da80
	enum BlendMode;//[Offset: 0x4a4, Size: 0x1] 0x715ce9c540
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 0x1] 0x715cf3db80
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a6, Size: 0x1] 0x715cf3dc00
	UserWidget* Widget;//[Offset: 0x4a8, Size: 0x8] 0x715cf3dc80
	BodySetup* BodySetup;//[Offset: 0x4d0, Size: 0x8] 0x715cf3dd00
	MaterialInterface* TranslucentMaterial;//[Offset: 0x4d8, Size: 0x8] 0x715cf3dd80
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x4e0, Size: 0x8] 0x715cf3de00
	MaterialInterface* OpaqueMaterial;//[Offset: 0x4e8, Size: 0x8] 0x715cf3de80
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x4f0, Size: 0x8] 0x715cf3df00
	MaterialInterface* MaskedMaterial;//[Offset: 0x4f8, Size: 0x8] 0x715cf3df80
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x500, Size: 0x8] 0x715cf3e000
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x508, Size: 0x8] 0x715cf3e080
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x510, Size: 0x8] 0x715cf3e100
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1] 0x715cf3e180
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 0x1] 0x715cf3e200
	FName SharedLayerName;//[Offset: 0x51c, Size: 0x8] 0x715cf3e280
	int LayerZOrder;//[Offset: 0x524, Size: 0x4] 0x715cf3e300
	enum GeometryMode;//[Offset: 0x528, Size: 0x1] 0x715ce9c5e0
	float CylinderArcAngle;//[Offset: 0x52c, Size: 0x4] 0x715cf3e400
	void SetWindowVisibility(enum InVisibility);// 0x55f99d4 0x715cf466e0
	void SetWindowFocusable(bool bInWindowFocusable);// 0x55f9a94 0x715cf467c0
	void SetWidgetSpace(enum NewSpace);// 0x55f9cd4 0x715cf468a0
	void SetWidget(UserWidget* Widget);// 0x55fa57c 0x715cf46980
	void SetTwoSided(const bool bWantTwoSided);// 0x55fa1f0 0x715cf46a60
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x55f9fe4 0x715cf46b40
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x55fa12c 0x715cf46c20
	void SetRedrawTime(float InRedrawTime);// 0x55f9d90 0x715cf46d00
	void SetPivot(out const Vector2D InPivot);// 0x55f9f10 0x715cf46de0
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x55fa4d8 0x715cf46ec0
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x55fa410 0x715cf46fa0
	void SetGeometryMode(enum InGeometryMode);// 0x55f9c18 0x715cf47080
	void SetDrawSize(Vector2D Size);// 0x55fa2d4 0x715cf47160
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x55f9e4c 0x715cf47240
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x55f9b5c 0x715cf47320
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x55fa088 0x715cf43a40
	void RequestRedraw();// 0x55fa2b8 0x715cf43b20
	enum GetWindowVisiblility();// 0x55f9a78 0x715cf43c00
	bool GetWindowFocusable();// 0x55f9b40 0x715cf43ce0
	enum GetWidgetSpace();// 0x55f9d74 0x715cf43dc0
	UserWidget* GetUserWidgetObject();// 0x55fa690 0x715cf43ea0
	bool GetTwoSided();// 0x55fa29c 0x715cf43f80
	bool GetTickWhenOffscreen();// 0x55fa1d4 0x715cf44060
	TextureRenderTarget2D* GetRenderTarget();// 0x55fa65c 0x715cf44140
	float GetRedrawTime();// 0x55f9e30 0x715cf44220
	Vector2D GetPivot();// 0x55f9fc4 0x715cf44300
	LocalPlayer* GetOwnerPlayer();// 0x55fa3dc 0x715cf443e0
	MaterialInstanceDynamic* GetMaterialInstance();// 0x55fa628 0x715cf444c0
	bool GetManuallyRedraw();// 0x55fa4bc 0x715cf445a0
	enum GetGeometryMode();// 0x55f9cb8 0x715cf44680
	Vector2D GetDrawSize();// 0x55fa3a8 0x715cf44760
	bool GetDrawAtDesiredSize();// 0x55f9ef4 0x715cf44840
	float GetCylinderArcAngle();// 0x55f9bfc 0x715cf44920
	Vector2D GetCurrentDrawSize();// 0x55fa374 0x715cf44a00

--------------------------------
Class: SDWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a482c400

--------------------------------
Class: SDWidgetPoolingManager.ActorComponent.Object // 71a482b780
	<class SDUserWidget,WidgetPool> WidgetPoolMap;//[Offset: 0xb0, Size: 0x50] 0x715cecc4c0

--------------------------------
Class: WidgetPool // 715da31fc0
	SDUserWidget*[] UserWidgets;//[Offset: 0x0, Size: 0x10] 0x715d895600

--------------------------------
Class: SDWidgetPredefinedAnimationsComponent.ActorComponent.Object // 71a482b500
	class UserWidget* PredefinedAnimationsMasterWidgetTemplate;//[Offset: 0xb0, Size: 0x8] 0x715ce9c180
	<FName,WidgetAnimation*> PredefinedAnimations;//[Offset: 0xb8, Size: 0x50] 0x715cecc400

--------------------------------
Class: ConfigurableUIInterface.Interface.Object // 71a482b280

--------------------------------
Class: SDIWidgetPoolable.Interface.Object // 71a482b000

--------------------------------
Class: SDIWidgetValidation.Interface.Object // 71a482ad80

--------------------------------
Class: SDEventListener.Object // 71a482ab00

--------------------------------
Class: SDEventListenerComponent.ActorComponent.Object // 71a482a880
	SDEventListener*[] EventListenerArray;//[Offset: 0xb0, Size: 0x10] 0x715ce9c040
	SDEventListener* Register(class SDEventListener EventListenerClass, const Actor* FilteredActor);// 0x32cc3d4 0x715cf46520
	void ManuallyUnregister(SDEventListener* EventListener);// 0x32cc330 0x715cf46600

--------------------------------
Class: SDEventStreamComponent.ActorComponent.Object // 71a482a600

--------------------------------
Class: SDEventStreamOwner.Interface.Object // 71a482fd80

--------------------------------
Class: AnalyticsBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a482fb00
	static bool StartSessionWithAttributes(out const AnalyticsEventAttr[] Attributes);// 0x32d28e0 0x715cf48580
	static bool StartSession();// 0x32d29e8 0x715cf48660
	static void SetUserId(FString UserId);// 0x32d16d4 0x715cf48740
	static void SetSessionId(FString SessionId);// 0x32d1824 0x715cf48820
	static void SetLocation(FString Location);// 0x32d15a0 0x715cf48900
	static void SetGender(FString Gender);// 0x32d1500 0x715cf489e0
	static void SetBuildInfo(FString BuildInfo);// 0x32d1460 0x715cf48ac0
	static void SetAge(int Age);// 0x32d1640 0x715cf48ba0
	static void RecordSimpleItemPurchaseWithAttributes(FString ItemId, int ItemQuantity, out const AnalyticsEventAttr[] Attributes);// 0x32d219c 0x715cf48c80
	static void RecordSimpleItemPurchase(FString ItemId, int ItemQuantity);// 0x32d2330 0x715cf48d60
	static void RecordSimpleCurrencyPurchaseWithAttributes(FString GameCurrencyType, int GameCurrencyAmount, out const AnalyticsEventAttr[] Attributes);// 0x32d1f24 0x715cf48e40
	static void RecordSimpleCurrencyPurchase(FString GameCurrencyType, int GameCurrencyAmount);// 0x32d20b8 0x715cf48f20
	static void RecordProgressWithFullHierarchyAndAttributes(FString ProgressType, out const FString[] ProgressNames, out const AnalyticsEventAttr[] Attributes);// 0x32d1090 0x715cf49000
	static void RecordProgressWithAttributes(FString ProgressType, FString ProgressName, out const AnalyticsEventAttr[] Attributes);// 0x32d0ef0 0x715cf45720
	static void RecordProgress(FString ProgressType, FString ProgressName);// 0x32d0e00 0x715cf45800
	static void RecordItemPurchase(FString ItemId, FString Currency, int PerItemCost, int ItemQuantity);// 0x32d2414 0x715cf458e0
	static void RecordEventWithAttributes(FString EventName, out const AnalyticsEventAttr[] Attributes);// 0x32d2588 0x715cf459c0
	static void RecordEventWithAttribute(FString EventName, FString AttributeName, FString AttributeValue);// 0x32d26d8 0x715cf45aa0
	static void RecordEvent(FString EventName);// 0x32d2818 0x715cf45b80
	static void RecordErrorWithAttributes(FString Error, out const AnalyticsEventAttr[] Attributes);// 0x32d1310 0x715cf45c60
	static void RecordError(FString Error);// 0x32d1270 0x715cf45d40
	static void RecordCurrencyPurchase(FString GameCurrencyType, int GameCurrencyAmount, FString RealCurrencyType, float RealMoneyCost, FString PaymentProvider);// 0x32d1d5c 0x715cf45e20
	static void RecordCurrencyGivenWithAttributes(FString GameCurrencyType, int GameCurrencyAmount, out const AnalyticsEventAttr[] Attributes);// 0x32d1ae4 0x715cf45f00
	static void RecordCurrencyGiven(FString GameCurrencyType, int GameCurrencyAmount);// 0x32d1c78 0x715cf45fe0
	static AnalyticsEventAttr MakeEventAttribute(FString AttributeName, FString AttributeValue);// 0x32d1974 0x715cf460c0
	static FString GetUserId();// 0x32d1774 0x715cf461a0
	static FString GetSessionId();// 0x32d18c4 0x715cf46280
	static void FlushEvents();// 0x32d28b8 0x715cf46360
	static void EndSession();// 0x32d28cc 0x715cf46440

--------------------------------
Class: AnalyticsEventAttr // 715da31d80
	FString Name;//[Offset: 0x0, Size: 0x10] 0x715da45000
	FString Value;//[Offset: 0x10, Size: 0x10] 0x715da45080

--------------------------------
Class: BugsnagFunctionLibrary.BlueprintFunctionLibrary.Object // 71a482f880
	static void StartSession();// 0x32f8e64 0x715cf47da0
	static void Start(FString APIKey);// 0x32f928c 0x715cf47e80
	static void SetUser(FString ID, FString Email, FString Name);// 0x32f8f70 0x715cf47f60
	static void SetContext(FString Context);// 0x32f90b0 0x715cf48040
	static bool ResumeSession();// 0x32f8e18 0x715cf48120
	static void PauseSession();// 0x32f8e50 0x715cf48200
	static void Notify(FString ErrorClass, FString Message);// 0x32f9150 0x715cf482e0
	static void MarkLaunchCompleted();// 0x32f8e78 0x715cf483c0
	static void LeaveBreadcrumb(FString Message, enum Type);// 0x32f8e8c 0x715cf484a0

--------------------------------
Class: BugsnagSettings.Object // 71a4835100
	FString APIKey;//[Offset: 0x28, Size: 0x10] 0x715cf51380
	bool bStartAutomaticallyAtLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cf51400
	bool bAutoDetectErrors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x715cf51480
	bool bAutoTrackSessions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x715cf51500
	bool bAutoUploadSymbolFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1] 0x715cf51580
	FString Context;//[Offset: 0x40, Size: 0x10] 0x715cf51600
	FString[] DiscardClasses;//[Offset: 0x50, Size: 0x10] 0x715ce9e0c0
	BugsnagEnabledBreadcrumbTypes EnabledBreadcrumbTypes;//[Offset: 0x60, Size: 0x7] 0x715cf51700
	BugsnagErrorTypes EnabledErrorTypes;//[Offset: 0x67, Size: 0x5] 0x715cf51780
	FString[] EnabledReleaseStages;//[Offset: 0x70, Size: 0x10] 0x715ce9e160
	FString[] RedactedKeys;//[Offset: 0x80, Size: 0x10] 0x715ce9e200
	enum SendThreads;//[Offset: 0x90, Size: 0x1] 0x715ce9e2a0
	uint64 LaunchDurationMillis;//[Offset: 0x98, Size: 0x8] 0x715cf51980
	bool bSendLaunchCrashesSynchronously;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x715cf51a00
	uint32 MaxBreadcrumbs;//[Offset: 0xa4, Size: 0x4] 0x715cf51a80
	uint32 MaxPersistedEvents;//[Offset: 0xa8, Size: 0x4] 0x715cf51b00
	uint32 MaxPersistedSessions;//[Offset: 0xac, Size: 0x4] 0x715cf51b80
	bool bPersistUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715cf51c00
	FString ReleaseStage;//[Offset: 0xb8, Size: 0x10] 0x715cf51c80
	FString AppType;//[Offset: 0xc8, Size: 0x10] 0x715cf51d00
	FString AppVersion;//[Offset: 0xd8, Size: 0x10] 0x715cf51d80
	FString BundleVersion;//[Offset: 0xe8, Size: 0x10] 0x715cf51e00
	int VersionCode;//[Offset: 0xf8, Size: 0x4] 0x715cf51e80
	FString NotifyEndpoint;//[Offset: 0x100, Size: 0x10] 0x715cf51f00
	FString SessionsEndpoint;//[Offset: 0x110, Size: 0x10] 0x715cf51f80
	FString ReleasesEndpoint;//[Offset: 0x120, Size: 0x10] 0x715cf52000
	FString SymbolUploadEndpoint;//[Offset: 0x130, Size: 0x10] 0x715cf52080

--------------------------------
Class: BugsnagEnabledBreadcrumbTypes // 715da31c00
	bool bError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da44a00
	bool bLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715da44a80
	bool bNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715da44b00
	bool bProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715da44b80
	bool bRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715da44c00
	bool bState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x715da44c80
	bool bUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x715da44d00

--------------------------------
Class: BugsnagErrorTypes // 715da31cc0
	bool bANRs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da44d80
	bool bAppHangs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715da44e00
	bool bCrashes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715da44e80
	bool bOOMs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715da44f00
	bool bThermalKills;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715da44f80

--------------------------------
Class: OptionalMobileFeaturesBPLibrary.BlueprintFunctionLibrary.Object // 71a4834e80
	static int GetVolumeState();// 0x32fadfc 0x715cf47a20
	static float GetBatteryTemperature();// 0x32fad94 0x715cf47b00
	static int GetBatteryLevel();// 0x32fadc8 0x715cf47be0
	static bool AreHeadphonesPluggedIn();// 0x32fad5c 0x715cf47cc0

--------------------------------
Class: NamedInterfaces.Object // 71a4834980
	NamedInterface[] NamedInterfaces;//[Offset: 0x28, Size: 0x10] 0x715ce9df80
	NamedInterfaceDef[] NamedInterfaceDefs;//[Offset: 0x38, Size: 0x10] 0x715ce9e020

--------------------------------
Class: NamedInterface // 715da31a80
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x715da44800
	Object* InterfaceObject;//[Offset: 0x8, Size: 0x8] 0x715da44880

--------------------------------
Class: NamedInterfaceDef // 715da31b40
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x715da44900
	FString InterfaceClassName;//[Offset: 0x8, Size: 0x10] 0x715da44980

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object // 71a4834700
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0x45c6aa0 0x715cf4a960
	void OnMatchEnded(FString Match);// 0x45c6aa0 0x715cf4aa40

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4834480
	static void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out float Progress);// 0x33bbad4 0x715cf4a7a0
	static void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out FText Title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0x33bb700 0x715cf4a880

--------------------------------
Class: AchievementQueryCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4834200
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf54180
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf54200
	static AchievementQueryCallbackProxy* CacheAchievements(Object* WorldContextObject, PlayerController* PlayerController);// 0x33bc010 0x715cf4a500
	static AchievementQueryCallbackProxy* CacheAchievementDescriptions(Object* WorldContextObject, PlayerController* PlayerController);// 0x33bbf2c 0x715cf4a5e0

--------------------------------
Class: AchievementWriteCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4833a80
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf53d80
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf53e00
	static AchievementWriteCallbackProxy* WriteAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementName, float Progress, int UserTag);// 0x33bc528 0x715cf4a420

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4833800
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf53b00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf53b80
	static ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0x33bcabc 0x715cf4a340

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4833580
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf53780
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf53800
	static CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0x33bcf38 0x715cf4a260

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4833300
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf53500
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf53580
	static DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0x33bd44c 0x715cf4a180

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4833080
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf55180
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf55200
	static EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0x33bd8c8 0x715cf4a0a0

--------------------------------
Class: EndTurnCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4832e00
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf54e00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf54e80
	static EndTurnCallbackProxy* EndTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, interface classNone TurnBasedMatchInterface);// 0x33bdedc 0x715cf49fc0

--------------------------------
Class: FindSessionsCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4832b80
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf54680
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf54700
	static FString GetServerName(out const BlueprintSessionResult Result);// 0x33be7d0 0x715cf49b60
	static int GetPingInMs(out const BlueprintSessionResult Result);// 0x33be928 0x715cf49c40
	static int GetMaxPlayers(out const BlueprintSessionResult Result);// 0x33be598 0x715cf49d20
	static int GetCurrentPlayers(out const BlueprintSessionResult Result);// 0x33be6b4 0x715cf49e00
	static FindSessionsCallbackProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0x33bea44 0x715cf49ee0

--------------------------------
Class: BlueprintSessionResult // 714906bbc0

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4832900
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf56280
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf56300
	static FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0x33bf0d4 0x715cf49a80

--------------------------------
Class: InAppPurchaseCallbackProxy.Object // 71a4832680
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf56000
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf56080
	static InAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest ProductRequest);// 0x33bf7fc 0x715cf499a0

--------------------------------
Class: InAppPurchaseProductRequest // 715da319c0
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x715da44700
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715da44780

--------------------------------
Class: InAppPurchaseCallbackProxy2.Object // 71a4832400
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf55b80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf55c00
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseUnprocessedPurchases(PlayerController* PlayerController);// 0x33c009c 0x715cf49700
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseQueryOwned(PlayerController* PlayerController);// 0x33bfff8 0x715cf497e0
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest2 ProductRequest);// 0x33c0140 0x715cf498c0

--------------------------------
Class: InAppPurchaseProductRequest2 // 715da34840
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x715da45f00
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715da45f80

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object // 71a4832180
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf55900
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf55980
	static InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x33c06a4 0x715cf49620

--------------------------------
Class: InAppPurchaseQueryCallbackProxy2.Object // 71a4831f00
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf55680
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf55700
	static InAppPurchaseQueryCallbackProxy2* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x33c0d18 0x715cf49540

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy.Object // 71a4831c80
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf55400
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf55480
	static InAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest[] ConsumableProductFlags, PlayerController* PlayerController);// 0x33c1218 0x715cf49460

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy2.Object // 71a4831a00
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf57280
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf57300
	static InAppPurchaseRestoreCallbackProxy2* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest2[] ConsumableProductFlags, PlayerController* PlayerController);// 0x33c17e8 0x715cf49380

--------------------------------
Class: IpConnection.NetConnection.Player.Object // 71a4831780
	float SocketErrorDisconnectDelay;//[Offset: 0x1a98, Size: 0x4] 0x715cf56a00

--------------------------------
Class: IpNetDriver.NetDriver.Object // 71a4831000
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x745, Size: 0x1] 0x715cf57780
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x745, Size: 0x1] 0x715cf57800
	uint32 MaxPortCountToTry;//[Offset: 0x748, Size: 0x4] 0x715cf57880
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x75c, Size: 0x4] 0x715cf57900
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x760, Size: 0x4] 0x715cf57980
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x764, Size: 0x4] 0x715cf57a00
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x768, Size: 0x4] 0x715cf57a80
	double MaxSecondsInReceive;//[Offset: 0x770, Size: 0x8] 0x715cf57b00
	int NbPacketsBetweenReceiveTimeTest;//[Offset: 0x778, Size: 0x4] 0x715cf57b80
	float ResolutionConnectionTimeout;//[Offset: 0x77c, Size: 0x4] 0x715cf57c00

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4830b00
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf57480
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf57500
	static JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0x33c534c 0x715cf492a0

--------------------------------
Class: LeaderboardBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4830880
	static bool WriteLeaderboardInteger(PlayerController* PlayerController, FName StatName, int StatValue);// 0x33c587c 0x715cf491c0

--------------------------------
Class: LeaderboardFlushCallbackProxy.Object // 71a4830600
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf59100
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf59180
	static LeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(PlayerController* PlayerController, FName SessionName);// 0x33c5c20 0x715cf490e0

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object // 71a4830380
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf58e80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf58f00
	static LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0x33c60c8 0x715cf4c9c0

--------------------------------
Class: LogoutCallbackProxy.BlueprintAsyncActionBase.Object // 71a4830100
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf58c00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf58c80
	static LogoutCallbackProxy* Logout(Object* WorldContextObject, PlayerController* PlayerController);// 0x33c6570 0x715cf4c8e0

--------------------------------
Class: OnlineBeacon.Actor.Object // 71a483a380
	float BeaconConnectionInitialTimeout;//[Offset: 0x228, Size: 0x4] 0x715cf58a80
	float BeaconConnectionTimeout;//[Offset: 0x22c, Size: 0x4] 0x715cf58b00
	NetDriver* NetDriver;//[Offset: 0x230, Size: 0x8] 0x715cf58b80

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object // 71a483a100
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x250, Size: 0x8] 0x715cf58900
	NetConnection* BeaconConnection;//[Offset: 0x258, Size: 0x8] 0x715cf58980
	enum ConnectionState;//[Offset: 0x260, Size: 0x1] 0x715ce9d620
	void ClientOnConnected();// 0x33c6bd0 0x715cf4c800

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object // 71a4839c00
	FString BeaconTypeName;//[Offset: 0x220, Size: 0x10] 0x715cf58700
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x230, Size: 0x8] 0x715ce9d440
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x238, Size: 0x10] 0x715ce9d4e0

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object // 71a4839e80
	int ListenPort;//[Offset: 0x250, Size: 0x4] 0x715cf58800
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x258, Size: 0x10] 0x715ce9d580

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object // 71a4839980
	FName VoiceSubsystemNameOverride;//[Offset: 0x28, Size: 0x8] 0x715cf58680

--------------------------------
Class: OnlinePIESettings.DeveloperSettings.Object // 71a4839480
	bool bOnlinePIEEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cf58580
	PIELoginSettingsInternal[] Logins;//[Offset: 0x40, Size: 0x10] 0x715ce9d3a0

--------------------------------
Class: PIELoginSettingsInternal // 715da34600
	FString ID;//[Offset: 0x0, Size: 0x10] 0x715da45a00
	FString Token;//[Offset: 0x10, Size: 0x10] 0x715da45a80
	FString Type;//[Offset: 0x20, Size: 0x10] 0x715da45b00
	byte[] TokenBytes;//[Offset: 0x30, Size: 0x10] 0x715d8954c0

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object // 71a4839200
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1] 0x715cf58480
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1] 0x715cf58500

--------------------------------
Class: PartyBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object // 71a4838d00
	FString DestSessionId;//[Offset: 0x2e0, Size: 0x10] 0x715cf59e00
	PartyReservation PendingReservation;//[Offset: 0x2f0, Size: 0x50] 0x715cf59e80
	enum RequestType;//[Offset: 0x340, Size: 0x1] 0x715ce9d300
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x715cf59f80
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1] 0x715cf5a000
	void ServerUpdateReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x33c7e20 0x715cf4c100
	void ServerReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x33c7fec 0x715cf4c1e0
	void ServerRemoveMemberFromReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x33c7c54 0x715cf4c2c0
	void ServerCancelReservationRequest(const UniqueNetIdRepl PartyLeader);// 0x33c7af0 0x715cf4c3a0
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x33c81d4 0x715cf4c480
	void ClientSendReservationFull();// 0x33c81b8 0x715cf4c560
	void ClientReservationResponse(byte ReservationResponse);// 0x33c832c 0x715cf4c640
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x33c8280 0x715cf4c720

--------------------------------
Class: PartyReservation // 715da34540
	int TeamNum;//[Offset: 0x0, Size: 0x4] 0x715da45800
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 0x28] 0x715da45880
	PlayerReservation[] PartyMembers;//[Offset: 0x30, Size: 0x10] 0x715d895380
	PlayerReservation[] RemovedPartyMembers;//[Offset: 0x40, Size: 0x10] 0x715d895420

--------------------------------
Class: PlayerReservation // 715da34780
	UniqueNetIdRepl UniqueId;//[Offset: 0x0, Size: 0x28] 0x715da45c80
	FString ValidationStr;//[Offset: 0x28, Size: 0x10] 0x715da45d00
	FString Platform;//[Offset: 0x38, Size: 0x10] 0x715da45d80
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715da45e00
	float ElapsedTime;//[Offset: 0x4c, Size: 0x4] 0x715da45e80

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object // 71a4838a80
	PartyBeaconState* State;//[Offset: 0x248, Size: 0x8] 0x715cf59c00
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x715cf59c80
	float SessionTimeoutSecs;//[Offset: 0x2b4, Size: 0x4] 0x715cf59d00
	float TravelSessionTimeoutSecs;//[Offset: 0x2b8, Size: 0x4] 0x715cf59d80

--------------------------------
Class: PartyBeaconState.Object // 71a4838800
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x715cf59680
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x715cf59700
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x715cf59780
	int NumTeams;//[Offset: 0x38, Size: 0x4] 0x715cf59800
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 0x4] 0x715cf59880
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 0x8] 0x715cf59900
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 0x4] 0x715cf59980
	int ForceTeamNum;//[Offset: 0x4c, Size: 0x4] 0x715cf59a00
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715cf59a80
	bool bEnableRemovalRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715cf59b00
	PartyReservation[] Reservations;//[Offset: 0x58, Size: 0x10] 0x715ce9d260

--------------------------------
Class: QuitMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object // 71a4838580
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf5b380
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf5b400
	static QuitMatchCallbackProxy* QuitMatch(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, byte Outcome, int TurnTimeoutInSeconds);// 0x33c9704 0x715cf4c020

--------------------------------
Class: ShowLoginUICallbackProxy.BlueprintAsyncActionBase.Object // 71a4838300
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715cf5b100
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x715cf5b180
	static ShowLoginUICallbackProxy* ShowExternalLoginUI(Object* WorldContextObject, PlayerController* InPlayerController);// 0x33c9cb0 0x715cf4bf40

--------------------------------
Class: SpectatorBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object // 71a4838080
	FString DestSessionId;//[Offset: 0x2e0, Size: 0x10] 0x715cf5ab80
	SpectatorReservation PendingReservation;//[Offset: 0x2f0, Size: 0x78] 0x715cf5ac00
	enum RequestType;//[Offset: 0x368, Size: 0x1] 0x715ce9d1c0
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1] 0x715cf5ad00
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 0x1] 0x715cf5ad80
	void ServerReservationRequest(FString SessionId, const SpectatorReservation Reservation);// 0x33ca34c 0x715cf4ba00
	void ServerCancelReservationRequest(const UniqueNetIdRepl Spectator);// 0x33ca1e8 0x715cf4bae0
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x33ca5b8 0x715cf4bbc0
	void ClientSendReservationFull();// 0x33ca59c 0x715cf4bca0
	void ClientReservationResponse(byte ReservationResponse);// 0x33ca710 0x715cf4bd80
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x33ca664 0x715cf4be60

--------------------------------
Class: SpectatorReservation // 715da34480
	UniqueNetIdRepl SpectatorId;//[Offset: 0x0, Size: 0x28] 0x715da45700
	PlayerReservation Spectator;//[Offset: 0x28, Size: 0x50] 0x715da45780

--------------------------------
Class: SpectatorBeaconHost.OnlineBeaconHostObject.Actor.Object // 71a4837e00
	SpectatorBeaconState* State;//[Offset: 0x248, Size: 0x8] 0x715cf5a980
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x715cf5aa00
	float SessionTimeoutSecs;//[Offset: 0x2b4, Size: 0x4] 0x715cf5aa80
	float TravelSessionTimeoutSecs;//[Offset: 0x2b8, Size: 0x4] 0x715cf5ab00

--------------------------------
Class: SpectatorBeaconState.Object // 71a4837b80
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x715cf5a700
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x715cf5a780
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x715cf5a800
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cf5a880
	SpectatorReservation[] Reservations;//[Offset: 0x40, Size: 0x10] 0x715ce9d120

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object // 71a4837900
	void ServerPong();// 0x33cb71c 0x715cf4b840
	void ClientPing();// 0x33cb778 0x715cf4b920

--------------------------------
Class: TestBeaconHost.OnlineBeaconHostObject.Actor.Object // 71a4837680

--------------------------------
Class: TurnBasedBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4837400
	static void RegisterTurnBasedMatchInterfaceObject(Object* WorldContextObject, PlayerController* PlayerController, Object* Object);// 0x33ceacc 0x715cf4b4c0
	static void GetPlayerDisplayName(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, int PlayerIndex, out FString PlayerDisplayName);// 0x33ce89c 0x715cf4b5a0
	static void GetMyPlayerIndex(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out int PlayerIndex);// 0x33cebe4 0x715cf4b680
	static void GetIsMyTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out bool bIsMyTurn);// 0x33cedc4 0x715cf4b760

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object // 71a4836f00
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x715cf5d380
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1] 0x715cf5d400
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1] 0x715cf5d480
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1] 0x715cf5d500
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1] 0x715cf5d580
	SoundAttenuation* AttenuationSettings;//[Offset: 0x1f8, Size: 0x8] 0x715cf5d600
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x200, Size: 0x3a0] 0x715cf5d680
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x5a0, Size: 0x8] 0x715cf5b600
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x5a8, Size: 0x50] 0x715ce9cea0
	SoundClass* SoundClass;//[Offset: 0x5f8, Size: 0x8] 0x715cf5b700
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x600, Size: 0x8] 0x715cf5b780
	SoundSubmixBase* SoundSubmix;//[Offset: 0x608, Size: 0x8] 0x715cf5b800
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x610, Size: 0x10] 0x715ce9cf40
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x620, Size: 0x10] 0x715ce9cfe0
	SoundModulation Modulation;//[Offset: 0x630, Size: 0x10] 0x715cf5b980
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x640, Size: 0x10] 0x715ce9d080
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x650, Size: 0x1] 0x715cf5ba80
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x650, Size: 0x1] 0x715cf5bb00
	int EnvelopeFollowerAttackTime;//[Offset: 0x654, Size: 0x4] 0x715cf5bb80
	int EnvelopeFollowerReleaseTime;//[Offset: 0x658, Size: 0x4] 0x715cf5bc00
	delegate OnAudioEnvelopeValue;//[Offset: 0x660, Size: 0x10] 0x715cf5bc80
	SynthSound* Synth;//[Offset: 0x690, Size: 0x8] 0x715cf5bd00
	AudioComponent* AudioComponent;//[Offset: 0x698, Size: 0x8] 0x715cf5bd80
	void Stop();// 0x566a1a4 0x715cf4b060
	void Start();// 0x566a1b8 0x715cf4b140
	void SetVolumeMultiplier(float VolumeMultiplier);// 0x566a0c8 0x715cf4b220
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x5669fe0 0x715cf4b300
	bool IsPlaying();// 0x566a16c 0x715cf4b3e0

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object // 71a49c1280
	SynthComponent* OwningSynthComponent;//[Offset: 0x360, Size: 0x8] 0x715cacd000

--------------------------------
Class: VoipListenerSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object // 71a4837180
	bool IsIdling();// 0x33cf2b4 0x715cf4af80

--------------------------------
Class: AuthenticationTestCommands.GameInstanceSubsystem.Subsystem.Object // 71a4836c80
	void VerifyAccount();// 0x350ac80 0x715cf4d360
	void SubmitIdentifier(FString Email);// 0x350b44c 0x715cf4d440
	void SubmitAuthCode(FString Code);// 0x350b388 0x715cf4d520
	void ResendAuthCode();// 0x350b374 0x715cf4d600
	void OnVerificationLinkSent(ZyngaVerificationLinkSentFlow* VerificationLinkSentFlow);// 0x350aeec 0x715cf4d6e0
	void OnPromptUserAccountLogin(ZyngaAccountLoginFlow* AccountLoginFlow);// 0x350b17c 0x715cf4d7c0
	void OnPromptEmailChange(ZyngaAccountLoginFlow* AccountLoginFlow);// 0x350ae48 0x715cf4d8a0
	void OnPromptConfirmCreateAccount(ZyngaConfirmCreateAccountFlow* ConfirmCreateAccountFlow);// 0x350af90 0x715cf4d980
	void OnPromptConfirmAccountLogin(ZyngaConfirmAccountLoginFlow* ConfirmAccountLoginFlow);// 0x350ada4 0x715cf4da60
	void OnPromptAuthCode(ZyngaAccountAuthCodeFlow* AccountAuthCodeFlow);// 0x350b0d8 0x715cf4db40
	void OnHandleSecurityChallenge(ZyngaHandleSecurityChallengeFlow* HandleSecurityChallengeFlow);// 0x350b034 0x715cf4dc20
	void LoginLastSsoToken(bool bCreateGameAccountIfNotFound);// 0x350acbc 0x715cf4dd00
	void GetLastSsoTokenInfo();// 0x350ad7c 0x715cf4dde0
	void EnsureDelegatesAreSubscribed();// 0x350ad90 0x715cf4dec0
	void DeleteLastSsoToken();// 0x350ad68 0x715cf4dfa0
	void ConfirmCreateAccount(bool bConfirm, bool bMarketingOptInValid, bool bMarketingOptInDecision);// 0x350b220 0x715cf4e080
	void CancelEmailLoginFlow();// 0x350b438 0x715cf4e160
	void AuthenticationUpdateEmail();// 0x350ac94 0x715cf4e240
	void AuthenticationLogout();// 0x350b4fc 0x715cf4e320
	void AuthenticationLoginWithMethod(enum AuthMethod, bool bCreateGameAccountIfNotFound);// 0x350b678 0x715cf4e400
	void AuthenticationLoginWithCredentials(FString Email);// 0x350b5c8 0x715cf4e4e0
	void AuthenticationLoginNew();// 0x350b5b4 0x715cf4e5c0
	void AuthenticationLogin();// 0x350b768 0x715cf4e6a0
	void AuthenticationAttach(enum AuthMethod);// 0x350b510 0x715cf4adc0
	void AttachLastSsoToken();// 0x350aca8 0x715cf4aea0

--------------------------------
Class: LoginEventsManagerTest.Object // 71a4836000
	void OnVerificationLinkSent(ZyngaVerificationLinkSentFlow* VerificationLinkSentFlow);// 0x35253b0 0x715cf4ce20
	void OnPromptUserAccountLogin(ZyngaAccountLoginFlow* AccountLoginFlow);// 0x3525640 0x715cf4cf00
	void OnPromptConfirmCreateAccount(ZyngaConfirmCreateAccountFlow* ConfirmCreateAccountFlow);// 0x3525454 0x715cf4cfe0
	void OnPromptAuthCode(ZyngaAccountAuthCodeFlow* AccountAuthCodeFlow);// 0x352559c 0x715cf4d0c0
	void OnHandleSecurityChallenge(ZyngaHandleSecurityChallengeFlow* HandleSecurityChallengeFlow);// 0x35254f8 0x715cf4d1a0

--------------------------------
Class: ZDKAuthenticationBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4835d80

--------------------------------
Class: ZDKLoginCallbackProxy.Object // 71a4835b00
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf5e280
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf5e300
	static ZDKLoginCallbackProxy* CreateProxyObjectForLogin(PlayerController* PlayerController, bool bFrictionlessRecover);// 0x3526164 0x715cf4cd40

--------------------------------
Class: ZDKLogoutCallbackProxy.Object // 71a4835880
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715cf5e080
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x715cf5e100
	static ZDKLogoutCallbackProxy* CreateProxyObjectForLogout(PlayerController* PlayerController);// 0x352660c 0x715cf4cc60

--------------------------------
Class: ZDKSubsystem.GameInstanceSubsystem.Subsystem.Object // 71a4835600

--------------------------------
Class: ZDKTestManager.GameInstanceSubsystem.Subsystem.Object // 71a4835380
	delegate OnIntegrationTestsComplete;//[Offset: 0x30, Size: 0x10] 0x715cf5f380
	void TransactionHistory(uint32 Page, uint32 PerPage);// 0x3528a6c 0x715cf4ea20
	void SubsReclaim();// 0x3528c00 0x715cf4eb00
	void SetEnvironment(FString Environment);// 0x3528c28 0x715cf4ebe0
	void SendPn();// 0x3529474 0x715cf4ecc0
	void SendEmail();// 0x3529460 0x715cf4eda0
	void SendA2U(int64 Zid);// 0x35292c4 0x715cf4ee80
	void SavePnContact();// 0x3529488 0x715cf4ef60
	void SaveEmailContact(FString Email);// 0x3529368 0x715cf4f040
	void RunUnitTests();// 0x35295bc 0x715cf4f120
	void RunIntegrationTests(FString Tag);// 0x3529028 0x715cf4f200
	void PurchasableItem(FString OfferId);// 0x3528b50 0x715cf4f2e0
	void LogMessage(FString LogMessage);// 0x3528f1c 0x715cf4f3c0
	void LoginRequestAuthCode(FString Email);// 0x352949c 0x715cf4f4a0
	void LoginLastAccount();// 0x35295a8 0x715cf4f580
	void LoginEmailAuthCode(FString Email, FString AuthCode);// 0x3529120 0x715cf4f660
	void LoginAnonymous();// 0x3529594 0x715cf4f740
	void HTTPFail(FString RequestType, int failureCount);// 0x3528378 0x715cf4f820
	void GetSubscriptions();// 0x3528c14 0x715cf4f900
	void FlushLogServiceOutputDevice();// 0x3528f08 0x715cf4f9e0
	void EnableSimulatorStore(bool Enable, FString PurchaseStatus, FString TestType);// 0x3528d20 0x715cf4fac0
	void DeleteEmailContact();// 0x35292b0 0x715cf4fba0
	void CrashReport();// 0x3528364 0x715cf4fc80
	void CloudWrite(uint64 PlayerId, FString Filename, FString Data);// 0x3528744 0x715cf4fd60
	void CloudRead(uint64 PlayerId, FString Filename);// 0x3528924 0x715cf4fe40
	void CloudFileContent(uint64 PlayerId, FString Filename);// 0x35285fc 0x715cf4ff20
	void CloudFileClear(uint64 PlayerId, FString Filename);// 0x35284b4 0x715cf4caa0
	void AddLogServiceOutputDevice();// 0x3529014 0x715cf4cb80

--------------------------------
Class: ZyngaAuthenticationUtilitiesBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a483ee80
	static void StoreLoggedOutFlag(ZDKSubsystem* ZDKSubsystem, bool IsLoggedOut);// 0x352d68c 0x715cf71ac0
	static bool IsEmailValid(FString Email);// 0x352d530 0x715cf71ba0
	static bool GetAccountLoggedOutStateFlag(ZDKSubsystem* ZDKSubsystem);// 0x352d5e4 0x715cf71c80

--------------------------------
Class: AadcSettings.DeveloperSettings.Object // 71a483dd00
	bool bShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cf5ed00
	bool bMinor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x715cf5ed80
	int64 BirthdateRangeEarly;//[Offset: 0x40, Size: 0x8] 0x715cf5ee00
	int64 BirthdateRangeLate;//[Offset: 0x48, Size: 0x8] 0x715cf5ee80

--------------------------------
Class: GooglePADFunctionLibrary.BlueprintFunctionLibrary.Object // 71a483da80
	static enum ShowCellularDataConfirmation();// 0x35e3e54 0x715cf70da0
	static enum RequestRemoval(FString Name);// 0x35e3e88 0x715cf70e80
	static enum RequestInfo(const FString[] AssetPacks);// 0x35e4620 0x715cf70f60
	static enum RequestDownload(const FString[] AssetPacks);// 0x35e4470 0x715cf71040
	static void ReleaseDownloadState(const int State);// 0x35e4124 0x715cf71120
	static void ReleaseAssetPackLocation(const int Location);// 0x35e3c04 0x715cf71200
	static int GetTotalBytesToDownload(const int State);// 0x35e3f38 0x715cf712e0
	static enum GetStorageMethod(const int Location);// 0x35e3b60 0x715cf713c0
	static enum GetShowCellularDataConfirmationStatus(out enum Status);// 0x35e3da0 0x715cf714a0
	static enum GetDownloadStatus(const int State);// 0x35e4080 0x715cf71580
	static enum GetDownloadState(FString Name, out int State);// 0x35e41b8 0x715cf71660
	static int GetBytesDownloaded(const int State);// 0x35e3fdc 0x715cf71740
	static FString GetAssetsPath(const int Location);// 0x35e3a70 0x715cf71820
	static enum GetAssetPackLocation(FString Name, out int Location);// 0x35e3c98 0x715cf71900
	static enum CancelDownload(const FString[] AssetPacks);// 0x35e42c0 0x715cf719e0

--------------------------------
Class: ImagePlate.Actor.Object // 71a483d800
	ImagePlateComponent* ImagePlate;//[Offset: 0x220, Size: 0x8] 0x715cf80f80

--------------------------------
Class: ImagePlateComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a483d580
	ImagePlateParameters Plate;//[Offset: 0x418, Size: 0x38] 0x715cf80e00
	void SetImagePlate(ImagePlateParameters Plate);// 0x35f2e94 0x715cf70b00
	void OnRenderTextureChanged();// 0x35f2e44 0x715cf70be0
	ImagePlateParameters GetPlate();// 0x35f2e58 0x715cf70cc0

--------------------------------
Class: ImagePlateParameters // 715da38bc0
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x715da51800
	FName TextureParameterName;//[Offset: 0x8, Size: 0x8] 0x715da51880
	bool bFillScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715da51900
	Vector2D FillScreenAmount;//[Offset: 0x14, Size: 0x8] 0x715da51980
	Vector2D FixedSize;//[Offset: 0x1c, Size: 0x8] 0x715da51a00
	Texture* RenderTexture;//[Offset: 0x28, Size: 0x8] 0x715da51a80
	MaterialInstanceDynamic* DynamicMaterial;//[Offset: 0x30, Size: 0x8] 0x715da51b00

--------------------------------
Class: ImagePlateSettings.Object // 71a483d300
	FString ProxyName;//[Offset: 0x28, Size: 0x10] 0x715cf80d80

--------------------------------
Class: ImagePlateFileSequence.Object // 71a483d080
	DirectoryPath SequencePath;//[Offset: 0x28, Size: 0x10] 0x715cf80c00
	FString FileWildcard;//[Offset: 0x38, Size: 0x10] 0x715cf80c80
	float FrameRate;//[Offset: 0x48, Size: 0x4] 0x715cf80d00

--------------------------------
Class: ImagePlateFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a483ce00

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object // 71a483c900
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2] 0x715cf81d00
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38] 0x715cf81d80
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10] 0x715cf81e00
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4] 0x715cf81e80
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4] 0x715cf81f00
	int RowIndex;//[Offset: 0xa8, Size: 0x4] 0x715cf81f80
	int OverlapPriority;//[Offset: 0xac, Size: 0x4] 0x715cf82000
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715cf82080
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x715cf82100
	float StartTime;//[Offset: 0xb4, Size: 0x4] 0x715cf80080
	float EndTime;//[Offset: 0xb8, Size: 0x4] 0x715cf80100
	float PrerollTime;//[Offset: 0xbc, Size: 0x4] 0x715cf80180
	float PostrollTime;//[Offset: 0xc0, Size: 0x4] 0x715cf80200
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x715cf80280
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x715cf80300
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2] 0x715cf80380
	void SetRowIndex(int NewRowIndex);// 0x5382e98 0x715cf736c0
	void SetPreRollFrames(int InPreRollFrames);// 0x5382b68 0x715cf737a0
	void SetPostRollFrames(int InPostRollFrames);// 0x5382a9c 0x715cf73880
	void SetOverlapPriority(int NewPriority);// 0x5382ddc 0x715cf73960
	void SetIsLocked(bool bInIsLocked);// 0x5382c38 0x715cf70080
	void SetIsActive(bool bInIsActive);// 0x5382d0c 0x715cf70160
	void SetCompletionMode(enum InCompletionMode);// 0x5383000 0x715cf70240
	void SetBlendType(enum InBlendType);// 0x5382f38 0x715cf70320
	bool IsLocked();// 0x5382c18 0x715cf70400
	bool IsActive();// 0x5382cec 0x715cf704e0
	int GetRowIndex();// 0x5382e7c 0x715cf705c0
	int GetPreRollFrames();// 0x5382b4c 0x715cf706a0
	int GetPostRollFrames();// 0x5382a80 0x715cf70780
	int GetOverlapPriority();// 0x5382dc0 0x715cf70860
	enum GetCompletionMode();// 0x53830a0 0x715cf70940
	OptionalMovieSceneBlendType GetBlendType();// 0x5382fe4 0x715cf70a20

--------------------------------
Class: OptionalMovieSceneBlendType // 715da9f4c0
	enum BlendType;//[Offset: 0x0, Size: 0x1] 0x715d89f420
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715dac1800

--------------------------------
Class: MovieSceneSectionEvalOptions // 715dad0c40
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715dac5800
	enum CompletionMode;//[Offset: 0x1, Size: 0x1] 0x715d89fec0

--------------------------------
Class: MovieSceneEasingSettings // 715dad0d00
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4] 0x715dac5900
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4] 0x715dac5980
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10] 0x715dac5a00
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715dac5a80
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4] 0x715dac5b00
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10] 0x715dac5b80
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715dac5c00
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4] 0x715dac5c80

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object // 71a49a0b00
	enum Type;//[Offset: 0x30, Size: 0x1] 0x715ca733a0

--------------------------------
Class: MovieSceneImagePlateSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a483cb80
	ImagePlateFileSequence* FileSequence;//[Offset: 0xd8, Size: 0x8] 0x715cf81c00
	bool bReuseExistingTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x715cf81c80

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a483c180

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a483c400
	MovieSceneSection* SectionToKey;//[Offset: 0x58, Size: 0x8] 0x715cf81900
	FName PropertyName;//[Offset: 0x60, Size: 0x8] 0x715cf81980
	FString PropertyPath;//[Offset: 0x68, Size: 0x10] 0x715cf81a00
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10] 0x715ce9eb60

--------------------------------
Class: MovieSceneImagePlateTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a483c680

--------------------------------
Class: GauntletTestController.Object // 71a483bc80

--------------------------------
Class: GauntletTestControllerBootTest.GauntletTestController.Object // 71a483ba00

--------------------------------
Class: GauntletTestControllerErrorTest.GauntletTestController.Object // 71a483b780

--------------------------------
Class: AnimNotifyState_HDRumble.AnimNotifyState.Object // 71a483b500
	enum DirectionSpace;//[Offset: 0x29, Size: 0x1] 0x715ce9eac0
	FName SocketName;//[Offset: 0x2c, Size: 0x8] 0x715cf82800
	bool bOnlyLocalControlledCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x715cf82880
	SwitchHDRumbleAsset* HDRumbleEffect;//[Offset: 0x38, Size: 0x8] 0x715cf82900
	float Strength;//[Offset: 0x40, Size: 0x4] 0x715cf82980
	FName OverrideCategory;//[Offset: 0x44, Size: 0x8] 0x715cf82a00
	float PlaySpeed;//[Offset: 0x4c, Size: 0x4] 0x715cf82a80
	bool bOverride_bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x715cf82b00
	bool bPlayLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715cf82b80
	int OverridePriority;//[Offset: 0x54, Size: 0x4] 0x715cf82c00
	FName AnimCurveStrength;//[Offset: 0x58, Size: 0x8] 0x715cf82c80
	bool bAutoStrengthByVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715cf82d00
	float VelocityToStrength;//[Offset: 0x64, Size: 0x4] 0x715cf82d80
	float StrengthSpeed;//[Offset: 0x68, Size: 0x4] 0x715cf82e00
	float MaxStrength;//[Offset: 0x6c, Size: 0x4] 0x715cf82e80
	float VelocityThreshold;//[Offset: 0x70, Size: 0x4] 0x715cf82f00
	FName AnimCurveBalance;//[Offset: 0x74, Size: 0x8] 0x715cf82f80
	SwitchHDRumbleAsset* OverrideHDRumbleEffect(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x45c6aa0 0x715cf730a0
	bool IsLocalControlledCharacter(SkeletalMeshComponent* MeshComp);// 0x35fe32c 0x715cf73180
	void GetCameraViewPoint(SkeletalMeshComponent* MeshComp, out Vector OutLocation, out Rotator OutRotation);// 0x35fe3e4 0x715cf73260

--------------------------------
Class: SwitchHDRumbleAsset.Object // 71a483b000
	bool bOverride_Modulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715cf84080
	bool bHasBinaryData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x715cf84100
	bool bStereoRawEffect;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x715cf84180
	FName Category;//[Offset: 0x2c, Size: 0x8] 0x715cf84200
	int DefaultPriority;//[Offset: 0x34, Size: 0x4] 0x715cf82180
	bool bIsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cf82200
	float Duration;//[Offset: 0x3c, Size: 0x4] 0x715cf82280
	float Gain;//[Offset: 0x40, Size: 0x4] 0x715cf82300
	SwitchHDRumbleModulation Modulation;//[Offset: 0x44, Size: 0x10] 0x715cf82380
	SwitchHDRumbleRawEffect EffectData;//[Offset: 0x58, Size: 0x220] 0x715cf82400
	SwitchHDRumbleStereoRawEffect StereoEffectData;//[Offset: 0x278, Size: 0x440] 0x715cf82480
	byte[] BinaryVibrationFile;//[Offset: 0x6b8, Size: 0x10] 0x715ce9ea20
	bool IsLoop();// 0x35fec10 0x715cf72d20
	SwitchHDRumbleBPPlayParameters GetPlayParametersBP();// 0x35feb48 0x715cf72e00
	SwitchHDRumbleModulation GetModulation();// 0x35febbc 0x715cf72ee0
	float GetDuration();// 0x35febf4 0x715cf72fc0

--------------------------------
Class: SwitchHDRumbleModulation // 715da385c0
	SwitchHDRumbleModulationModifiers Low;//[Offset: 0x0, Size: 0x8] 0x715da52f80
	SwitchHDRumbleModulationModifiers High;//[Offset: 0x8, Size: 0x8] 0x715da53100

--------------------------------
Class: SwitchHDRumbleModulationModifiers // 715da38500
	float Gain;//[Offset: 0x0, Size: 0x4] 0x715da53000
	float Pitch;//[Offset: 0x4, Size: 0x4] 0x715da53080

--------------------------------
Class: SwitchHDRumbleRawEffect // 715da38380
	RuntimeFloatCurve AmplitudeLow;//[Offset: 0x0, Size: 0x88] 0x715da54100
	RuntimeFloatCurve FrequencyLow;//[Offset: 0x88, Size: 0x88] 0x715da54180
	RuntimeFloatCurve AmplitudeHigh;//[Offset: 0x110, Size: 0x88] 0x715da54200
	RuntimeFloatCurve FrequencyHigh;//[Offset: 0x198, Size: 0x88] 0x715da52980

--------------------------------
Class: SwitchHDRumbleStereoRawEffect // 715da38440
	SwitchHDRumbleRawEffect Left;//[Offset: 0x0, Size: 0x220] 0x715da54080
	SwitchHDRumbleRawEffect Right;//[Offset: 0x220, Size: 0x220] 0x715da52a80

--------------------------------
Class: SwitchHDRumbleBPPlayParameters // 715da38740
	bool bOverrideLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715da52b00
	bool bOverrideCategory;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715da52b80
	bool bOverrideModulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715da52c00
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715da52c80
	bool bLooping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715da52d00
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715da52d80
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715da52e00
	FName Category;//[Offset: 0x4, Size: 0x8] 0x715da52e80
	SwitchHDRumbleStereoModulation Modulation;//[Offset: 0xc, Size: 0x20] 0x715da51100
	int Priority;//[Offset: 0x2c, Size: 0x4] 0x715da51180
	float PlaySpeed;//[Offset: 0x30, Size: 0x4] 0x715da51200

--------------------------------
Class: SwitchHDRumbleStereoModulation // 715da38680
	SwitchHDRumbleModulation Left;//[Offset: 0x0, Size: 0x10] 0x715da52f00
	SwitchHDRumbleModulation Right;//[Offset: 0x10, Size: 0x10] 0x715da53180

--------------------------------
Class: SwitchHDRumbleHelpers.BlueprintFunctionLibrary.Object // 71a483ad80
	static void UpdateSettings();// 0x35ff8bc 0x715cf72460
	static void StopAllHDRumbleEffects();// 0x35ff324 0x715cf72540
	static SwitchHDRumbleEffectBPHandle* PlayHDRumbleEffectWithParams(SwitchHDRumbleAsset* InAsset, out const SwitchHDRumbleBPPlayParameters InParameters);// 0x35ff70c 0x715cf72620
	static SwitchHDRumbleEffectBPHandle* PlayHDRumbleEffectWithOverrides(SwitchHDRumbleAsset* InAsset, FName OverrideCategory, out const SwitchHDRumbleStereoModulation OverrideModulation, int OverridePriority);// 0x35ff41c 0x715cf72700
	static SwitchHDRumbleEffectBPHandle* PlayHDRumbleEffectWithModulation(SwitchHDRumbleAsset* InAsset, out const SwitchHDRumbleStereoModulation MulModulation, FName OverrideCategory, int OverridePriority);// 0x35ff594 0x715cf727e0
	static void PlayHDRumbleEffectWithDirection(SwitchHDRumbleAsset* InAsset, out const Vector DirectionToSource);// 0x35ff338 0x715cf728c0
	static SwitchHDRumbleEffectBPHandle* PlayHDRumbleEffectBP(SwitchHDRumbleAsset* InAsset);// 0x35ff818 0x715cf729a0
	static SwitchHDRumbleStereoModulation MakeHDRumbleStrengthModulations(float InStrength);// 0x35ff278 0x715cf72a80
	static SwitchHDRumbleStereoModulation GetHDRumbleModulationForDirection(out const Vector DirectionToSource);// 0x35ff0a4 0x715cf72b60
	static SwitchHDRumbleStereoModulation CombineHDRumbleModulations(out const SwitchHDRumbleStereoModulation A, out const SwitchHDRumbleStereoModulation B);// 0x35ff160 0x715cf72c40

--------------------------------
Class: SwitchHDRumbleEffectBPHandle.Object // 71a483a880
	SwitchHDRumbleAsset* Asset;//[Offset: 0x28, Size: 0x8] 0x715cf85080
	delegate OnStarted;//[Offset: 0x30, Size: 0x10] 0x715cf85100
	delegate OnFinished;//[Offset: 0x40, Size: 0x10] 0x715cf85180
	void Stop();// 0x3600c08 0x715cf721c0
	void OverrideModulation(out const SwitchHDRumbleStereoModulation InModulation);// 0x3600c1c 0x715cf722a0
	bool IsPlaying();// 0x3600bd0 0x715cf72380

--------------------------------
Class: SwitchHDRumbleSettings.Object // 71a483ab00
	float GlobalGain;//[Offset: 0x28, Size: 0x4] 0x715cf83200
	SwitchHDRumbleDirectionSettings DirectionsModulation;//[Offset: 0x30, Size: 0x198] 0x715cf83280
	Enum* Enum;//[Offset: 0x1c8, Size: 0x28] 0x715cf83300
	enum MixMode;//[Offset: 0x1f0, Size: 0x1] 0x715ce9e8e0
	SwitchHDRumbleCategorySettings[] Categories;//[Offset: 0x1f8, Size: 0x10] 0x715ce9e980

--------------------------------
Class: SwitchHDRumbleDirectionSettings // 715da37d80
	RuntimeFloatCurve LeftRightBalance;//[Offset: 0x0, Size: 0x88] 0x715da53b80
	RuntimeFloatCurve BackFrontGain;//[Offset: 0x88, Size: 0x88] 0x715da53c00
	RuntimeFloatCurve BackFrontPitch;//[Offset: 0x110, Size: 0x88] 0x715da53c80

--------------------------------
Class: SwitchHDRumbleCategorySettings // 715da37e40
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715da53d00
	bool bOverride_Modulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715da53d80
	bool bEnable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x715da53e00
	int Priority;//[Offset: 0xc, Size: 0x4] 0x715da53e80
	enum MixMode;//[Offset: 0x10, Size: 0x1] 0x715d896aa0
	float Gain;//[Offset: 0x14, Size: 0x4] 0x715da53f80
	SwitchHDRumbleModulation Modulation;//[Offset: 0x18, Size: 0x10] 0x715da54000

--------------------------------
Class: WebBrowser.Widget.Visual.Object // 71a483a600
	delegate OnUrlChanged;//[Offset: 0x108, Size: 0x10] 0x715cf84a00
	delegate OnBeforePopup;//[Offset: 0x118, Size: 0x10] 0x715cf84a80
	FString InitialURL;//[Offset: 0x128, Size: 0x10] 0x715cf84b00
	bool bSupportsTransparency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x715cf84b80
	void OnUrlChanged__DelegateSignature(out const FText Text);// 0x45c6aa0 0x715cf75560
	void OnBeforePopup__DelegateSignature(FString URL, FString Frame);// 0x45c6aa0 0x715cf75640
	void LoadURL(FString NewURL);// 0x3606e64 0x715cf71d60
	void LoadString(FString Contents, FString DummyURL);// 0x3606cd4 0x715cf71e40
	FString GetUrl();// 0x3606aa4 0x715cf71f20
	FText GetTitleText();// 0x3606b54 0x715cf72000
	void ExecuteJavascript(FString ScriptText);// 0x3606c24 0x715cf720e0

--------------------------------
Class: WebBrowserAssetManager.Object // 71a483fd80
	Material* DefaultMaterial;//[Offset: 0x28, Size: 0x28] 0x715cf84980

--------------------------------
Class: KawaiiPhysicsLimitsDataAsset.DataAsset.Object // 71a483fb00
	SphericalLimit[] SphericalLimits;//[Offset: 0x30, Size: 0x10] 0x715ce9e700
	CapsuleLimit[] CapsuleLimits;//[Offset: 0x40, Size: 0x10] 0x715ce9e7a0
	PlanarLimit[] PlanarLimits;//[Offset: 0x50, Size: 0x10] 0x715ce9e840

--------------------------------
Class: SphericalLimit.CollisionLimitBase // 715da3a180
	float Radius;//[Offset: 0x50, Size: 0x4] 0x715da55580
	enum LimitType;//[Offset: 0x54, Size: 0x1] 0x715d898e40

--------------------------------
Class: CollisionLimitBase // 715da3a3c0
	BoneReference DrivingBone;//[Offset: 0x0, Size: 0x10] 0x715da55900
	Vector OffsetLocation;//[Offset: 0x10, Size: 0xc] 0x715da55980
	Rotator OffsetRotation;//[Offset: 0x1c, Size: 0xc] 0x715da55a00
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x715da55a80
	Quat Rotation;//[Offset: 0x40, Size: 0x10] 0x715da55b00

--------------------------------
Class: CapsuleLimit.CollisionLimitBase // 715da3a240
	float Radius;//[Offset: 0x50, Size: 0x4] 0x715da55700
	float Length;//[Offset: 0x54, Size: 0x4] 0x715da55780

--------------------------------
Class: PlanarLimit.CollisionLimitBase // 715da3a300
	Plane Plane;//[Offset: 0x50, Size: 0x10] 0x715da55880

--------------------------------
Class: NamedInterfaceBase.Object // 71a4844e80

--------------------------------
Class: OnlineCoreServices.NamedInterfaceBase.Object // 71a4845100

--------------------------------
Class: OnlineCoreServicesNakama.OnlineCoreServices.NamedInterfaceBase.Object // 71a483f880

--------------------------------
Class: OnlineFeatureFlags.NamedInterfaceBase.Object // 71a4844980

--------------------------------
Class: OnlineFeatureFlagsNakama.OnlineFeatureFlags.NamedInterfaceBase.Object // 71a4844c00

--------------------------------
Class: OnlineMatchData.Object // 71a4844480

--------------------------------
Class: OnlineMatchDataNakama.OnlineMatchData.Object // 71a4844700

--------------------------------
Class: OnlineSessionTime.NamedInterfaceBase.Object // 71a4843f80

--------------------------------
Class: OnlineSessionTimeNakama.OnlineSessionTime.NamedInterfaceBase.Object // 71a4844200

--------------------------------
Class: AkAcousticPortal.Volume.Brush.Actor.Object // 71a4843d00
	enum InitialState;//[Offset: 0x258, Size: 0x1] 0x715ce9e520
	float ObstructionRefreshInterval;//[Offset: 0x25c, Size: 0x4] 0x715cf86200
	byte ObstructionCollisionChannel;//[Offset: 0x260, Size: 0x1] 0x715cf86280
	void OpenPortal();// 0x3805468 0x715cf752c0
	enum GetCurrentState();// 0x3805420 0x715cf753a0
	void ClosePortal();// 0x3805454 0x715cf75480

--------------------------------
Class: AkPortalComponent.SceneComponent.ActorComponent.Object // 71a4843580

--------------------------------
Class: AkAudioType.Object // 71a4843080
	uint32 ShortID;//[Offset: 0x28, Size: 0x4] 0x715cf86080
	Object*[] UserData;//[Offset: 0x30, Size: 0x10] 0x715ce9e480

--------------------------------
Class: AkAcousticTexture.AkAudioType.Object // 71a4843300

--------------------------------
Class: AkAmbientSound.Actor.Object // 71a4842e00
	AkAudioEvent* AkAudioEvent;//[Offset: 0x220, Size: 0x8] 0x715cf85e80
	AkComponent* AkComponent;//[Offset: 0x228, Size: 0x8] 0x715cf85f00
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x715cf85f80
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1] 0x715cf86000
	void StopAmbientSound();// 0x3805e38 0x715cf75100
	void StartAmbientSound();// 0x3805e4c 0x715cf751e0

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object // 71a4841000
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x58, Size: 0x50] 0x715cecc100
	AkAudioBank* RequiredBank;//[Offset: 0xa8, Size: 0x8] 0x715cf86c00
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb8, Size: 0x8] 0x715cf86c80
	float MaxAttenuationRadius;//[Offset: 0xc0, Size: 0x4] 0x715cf86d00
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1] 0x715cf86d80
	float MinimumDuration;//[Offset: 0xc8, Size: 0x4] 0x715cf86e00
	float MaximumDuration;//[Offset: 0xcc, Size: 0x4] 0x715cf86e80
	float GetMinimumDuration();// 0x3807de4 0x715cf74ca0
	float GetMaximumDuration();// 0x3807db0 0x715cf74d80
	float GetMaxAttenuationRadius();// 0x3807e50 0x715cf74e60
	bool GetIsInfinite();// 0x3807e18 0x715cf74f40

--------------------------------
Class: AkAssetBase.AkAudioType.Object // 71a4841c80
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8] 0x715cf85a80

--------------------------------
Class: AkAssetPlatformData.Object // 71a4841f00
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8] 0x715cf85b00

--------------------------------
Class: AkAssetData.Object // 71a4842400
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4] 0x715cf85c00

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object // 71a4841a00
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715cf85800
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x58, Size: 0x50] 0x715cecc280
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa8, Size: 0x50] 0x715ce9e340
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf8, Size: 0x8] 0x715cf85a00

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object // 71a4840b00
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a, Size: 0x1] 0x715cf89f00
	byte OcclusionCollisionChannel;//[Offset: 0x210, Size: 0x1] 0x715cf89f80
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1] 0x715cf8a000
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x218, Size: 0x8] 0x715cf8a080
	FString EarlyReflectionAuxBusName;//[Offset: 0x220, Size: 0x10] 0x715cf8a100
	int EarlyReflectionOrder;//[Offset: 0x230, Size: 0x4] 0x715cf8a180
	float EarlyReflectionBusSendGain;//[Offset: 0x234, Size: 0x4] 0x715cf8a200
	float EarlyReflectionMaxPathLength;//[Offset: 0x238, Size: 0x4] 0x715cf8a280
	float roomReverbAuxBusGain;//[Offset: 0x23c, Size: 0x4] 0x715cf8a300
	int diffractionMaxEdges;//[Offset: 0x240, Size: 0x4] 0x715cf8a380
	int diffractionMaxPaths;//[Offset: 0x244, Size: 0x4] 0x715cf8a400
	float diffractionMaxPathLength;//[Offset: 0x248, Size: 0x4] 0x715cf8a480
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1] 0x715cf8a500
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1] 0x715cf88480
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1] 0x715cf88500
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1] 0x715cf88580
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1] 0x715cf88600
	float AttenuationScalingFactor;//[Offset: 0x250, Size: 0x4] 0x715cf88680
	float OcclusionRefreshInterval;//[Offset: 0x254, Size: 0x4] 0x715cf88700
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x715cf88780
	bool bTickOnlyActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 0x1] 0x715cf88800
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x3809a60 0x715cf77240
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x3809854 0x715cf77320
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x3809c78 0x715cf73a40
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x3809bcc 0x715cf73b20
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x380a220 0x715cf73c00
	void SetOutputBusVolume(float BusVolume);// 0x380965c 0x715cf73ce0
	void SetListeners(out const AkComponent*[] Listeners);// 0x3809b0c 0x715cf73dc0
	void SetEarlyReflectionsVolume(float SendVolume);// 0x3809700 0x715cf73ea0
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x38097a4 0x715cf73f80
	void SetAttenuationScalingFactor(float Value);// 0x38095b8 0x715cf74060
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x3809e58 0x715cf74140
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x380a8b0 0x715cf74220
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x380aa60 0x715cf74300
	int PostAkEventByName(FString in_EventName);// 0x380a400 0x715cf743e0
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x380a4b8 0x715cf744c0
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x380a6b0 0x715cf745a0
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x3809fa0 0x715cf74680
	float GetAttenuationRadius();// 0x3809584 0x715cf74760

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object // 71a4840880
	AkAudioEvent* AkAudioEvent;//[Offset: 0x1f0, Size: 0x8] 0x715cf87f80
	FString EventName;//[Offset: 0x1f8, Size: 0x10] 0x715cf88000
	void Stop();// 0x380daec 0x715cf74840
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x380e030 0x715cf74920
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x380e2d8 0x715cf74a00
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x380db00 0x715cf74ae0
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x380dde4 0x715cf74bc0

--------------------------------
Class: AkExternalSourceInfo // 715da3bbc0
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10] 0x715da5a200
	enum CodecID;//[Offset: 0x10, Size: 0x1] 0x715d898440
	FString Filename;//[Offset: 0x18, Size: 0x10] 0x715da5a300
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8] 0x715da5a380
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715da5a400

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object // 71a4845d80

--------------------------------
Class: AkMediaAsset.Object // 71a4846280
	uint32 ID;//[Offset: 0x28, Size: 0x4] 0x715cfa2c80
	Object*[] UserData;//[Offset: 0x30, Size: 0x10] 0x715cf92540
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8] 0x715cfa2d80

--------------------------------
Class: AkMediaAssetData.Object // 71a4846500
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715cfa2e00
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715cfa2e80

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object // 71a4840600
	AkAudioBank* RequiredBank;//[Offset: 0x58, Size: 0x8] 0x715cf89e00

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object // 71a484dd00

--------------------------------
Class: AkGroupValue.AkAudioType.Object // 71a4849200
	uint32 GroupShortID;//[Offset: 0x40, Size: 0x4] 0x715cfa0500

--------------------------------
Class: AkRtpc.AkAudioType.Object // 71a484f600

--------------------------------
Class: AkTrigger.AkAudioType.Object // 71a484da80

--------------------------------
Class: AkSettings.Object // 71a484f380
	byte MaxSimultaneousReverbVolumes;//[Offset: 0x28, Size: 0x1] 0x715cfa3b80
	FilePath WwiseProjectPath;//[Offset: 0x30, Size: 0x10] 0x715cfa3c00
	DirectoryPath WwiseSoundDataFolder;//[Offset: 0x40, Size: 0x10] 0x715cfa3c80
	bool bAutoConnectToWAAPI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715cfa3d00
	byte DefaultOcclusionCollisionChannel;//[Offset: 0x51, Size: 0x1] 0x715cfa3d80
	<PhysicalMaterial*,AkGeometrySurfacePropertiesToMap> AkGeometryMap;//[Offset: 0x58, Size: 0x50] 0x715cecbec0
	bool SplitSwitchContainerMedia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1] 0x715cfa3f00
	bool UseEventBasedPackaging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1] 0x715cfa3f80
	bool EnableAutomaticAssetSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1] 0x715cfa4000
	FString CommandletCommitMessage;//[Offset: 0xb0, Size: 0x10] 0x715cfa4080
	<FString,FString> UnrealCultureToWwiseCulture;//[Offset: 0xc0, Size: 0x50] 0x715cecbf80
	bool AskedToUseNewAssetManagement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x715cfa4200
	bool bEnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1] 0x715cfa2180
	bool MigratedEnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1] 0x715cfa2200
	bool FixupRedirectorsDuringMigration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113, Size: 0x1] 0x715cfa2280
	DirectoryPath WwiseWindowsInstallationPath;//[Offset: 0x118, Size: 0x10] 0x715cfa2300
	FilePath WwiseMacInstallationPath;//[Offset: 0x128, Size: 0x10] 0x715cfa2380

--------------------------------
Class: AkGeometrySurfacePropertiesToMap // 715da3d900
	AkAcousticTexture* AcousticTexture;//[Offset: 0x0, Size: 0x28] 0x715da5ba80
	float OcclusionValue;//[Offset: 0x28, Size: 0x4] 0x715da5bb00

--------------------------------
Class: AkAndroidInitializationSettings.Object // 71a4842b80
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x715cf85c80
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x715cf85d00
	AkAndroidAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x40] 0x715cf85d80
	void MigrateMultiCoreRendering(bool NewValue);// 0x38064e8 0x715cf75020

--------------------------------
Class: AkCommonInitializationSettingsWithSampleRate.AkCommonInitializationSettings // 715da3de40
	uint32 SampleRate;//[Offset: 0x60, Size: 0x4] 0x715da5c100

--------------------------------
Class: AkCommonInitializationSettings // 715da3af00
	uint32 MaximumNumberOfMemoryPools;//[Offset: 0x0, Size: 0x4] 0x715da5c180
	uint32 MaximumNumberOfPositioningPaths;//[Offset: 0x4, Size: 0x4] 0x715da5c200
	uint32 CommandQueueSize;//[Offset: 0x8, Size: 0x4] 0x715da5c280
	uint32 SamplesPerFrame;//[Offset: 0xc, Size: 0x4] 0x715da5c300
	AkMainOutputSettings MainOutputSettings;//[Offset: 0x10, Size: 0x28] 0x715da5a580
	float StreamingLookAheadRatio;//[Offset: 0x38, Size: 0x4] 0x715da5a600
	uint16 NumberOfRefillsInVoice;//[Offset: 0x3c, Size: 0x2] 0x715da5a680
	AkSpatialAudioSettings SpatialAudioSettings;//[Offset: 0x40, Size: 0x20] 0x715da5ab80

--------------------------------
Class: AkMainOutputSettings // 715da3ad80
	FString AudioDeviceShareset;//[Offset: 0x0, Size: 0x10] 0x715da5c380
	uint32 DeviceID;//[Offset: 0x10, Size: 0x4] 0x715da5c400
	enum PanningRule;//[Offset: 0x14, Size: 0x4] 0x715d897ea0
	enum ChannelConfigType;//[Offset: 0x18, Size: 0x4] 0x715d897f40
	uint32 ChannelMask;//[Offset: 0x1c, Size: 0x4] 0x715da5c580
	uint32 NumberOfChannels;//[Offset: 0x20, Size: 0x4] 0x715da5c600

--------------------------------
Class: AkSpatialAudioSettings // 715da3ae40
	uint32 MaxSoundPropagationDepth;//[Offset: 0x0, Size: 0x4] 0x715da5a700
	uint32 DiffractionFlags;//[Offset: 0x4, Size: 0x4] 0x715da5a780
	float MovementThreshold;//[Offset: 0x8, Size: 0x4] 0x715da5a800
	uint32 NumberOfPrimaryRays;//[Offset: 0xc, Size: 0x4] 0x715da5a880
	uint32 ReflectionOrder;//[Offset: 0x10, Size: 0x4] 0x715da5a900
	bool EnableDiffractionOnReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x715da5a980
	bool EnableDirectPathDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x715da5aa00
	float MaximumPathLength;//[Offset: 0x18, Size: 0x4] 0x715da5aa80
	bool EnableTransmission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x715da5ab00

--------------------------------
Class: AkCommunicationSettingsWithSystemInitialization.AkCommunicationSettings // 715da3dc00
	bool InitializeSystemComms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715da5bd80

--------------------------------
Class: AkCommunicationSettings // 715da3dd80
	uint32 PoolSize;//[Offset: 0x0, Size: 0x4] 0x715da5be80
	uint16 DiscoveryBroadcastPort;//[Offset: 0x4, Size: 0x2] 0x715da5bf00
	uint16 CommandPort;//[Offset: 0x6, Size: 0x2] 0x715da5bf80
	uint16 NotificationPort;//[Offset: 0x8, Size: 0x2] 0x715da5c000
	FString NetworkName;//[Offset: 0x10, Size: 0x10] 0x715da5c080

--------------------------------
Class: AkAndroidAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings // 715da3bd40
	uint32 AudioAPI;//[Offset: 0x38, Size: 0x4] 0x715da58500
	bool RoundFrameSizeToHardwareSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715da58580

--------------------------------
Class: AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings // 715da3be00
	bool EnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x715da58600

--------------------------------
Class: AkAdvancedInitializationSettings // 715da3bf80
	uint32 IO_MemorySize;//[Offset: 0x0, Size: 0x4] 0x715da58680
	uint32 IO_Granularity;//[Offset: 0x4, Size: 0x4] 0x715da58700
	float TargetAutoStreamBufferLength;//[Offset: 0x8, Size: 0x4] 0x715da58780
	bool UseStreamCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715da58800
	uint32 MaximumPinnedBytesInCache;//[Offset: 0x10, Size: 0x4] 0x715da58880
	bool EnableGameSyncPreparation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x715da58900
	uint32 ContinuousPlaybackLookAhead;//[Offset: 0x18, Size: 0x4] 0x715da58980
	uint32 MonitorQueuePoolSize;//[Offset: 0x1c, Size: 0x4] 0x715da58a00
	uint32 MaximumHardwareTimeoutMs;//[Offset: 0x20, Size: 0x4] 0x715da58a80
	bool DebugOutOfRangeCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x715da58b00
	float DebugOutOfRangeLimit;//[Offset: 0x28, Size: 0x4] 0x715da58b80
	AkAdvancedSpatialAudioSettings SpatialAudioSettings;//[Offset: 0x2c, Size: 0x8] 0x715da58d00

--------------------------------
Class: AkAdvancedSpatialAudioSettings // 715da3bec0
	float DiffractionShadowAttenuationFactor;//[Offset: 0x0, Size: 0x4] 0x715da58c00
	float DiffractionShadowDegrees;//[Offset: 0x4, Size: 0x4] 0x715da58c80

--------------------------------
Class: AkPlatformInfo.Object // 71a4842680

--------------------------------
Class: AkAndroidPlatformInfo.AkPlatformInfo.Object // 71a4842900

--------------------------------
Class: AkAssetDataWithMedia.AkAssetData.Object // 71a4842180
	AkMediaAsset*[] MediaList;//[Offset: 0x68, Size: 0x10] 0x715ce9e3e0

--------------------------------
Class: AkAssetDataSwitchContainerData.Object // 71a4841780
	AkGroupValue* GroupValue;//[Offset: 0x28, Size: 0x28] 0x715cf85600
	AkGroupValue* DefaultGroupValue;//[Offset: 0x50, Size: 0x8] 0x715cf85680
	AkMediaAsset*[] MediaList;//[Offset: 0x58, Size: 0x10] 0x715ce9fec0
	AkAssetDataSwitchContainerData*[] Children;//[Offset: 0x68, Size: 0x10] 0x715ce9ff60

--------------------------------
Class: AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object // 71a4841500
	AkAssetDataSwitchContainerData*[] SwitchContainers;//[Offset: 0x88, Size: 0x10] 0x715ce9fe20
	AkGroupValue* DefaultGroupValue;//[Offset: 0x98, Size: 0x8] 0x715cf85580

--------------------------------
Class: AkAudioEventData.AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object // 71a4841280
	float MaxAttenuationRadius;//[Offset: 0xb0, Size: 0x4] 0x715cf87100
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1] 0x715cf87180
	float MinimumDuration;//[Offset: 0xb8, Size: 0x4] 0x715cf87200
	float MaximumDuration;//[Offset: 0xbc, Size: 0x4] 0x715cf87280
	<FString,AkAssetDataSwitchContainer*> LocalizedMedia;//[Offset: 0xc0, Size: 0x50] 0x715cecc1c0
	<AkAudioEvent*> PostedEvents;//[Offset: 0x110, Size: 0x50] 0x715ce9fba0
	<AkAuxBus*> UserDefinedSends;//[Offset: 0x160, Size: 0x50] 0x715ce9fc40
	<AkTrigger*> PostedTriggers;//[Offset: 0x1b0, Size: 0x50] 0x715ce9fce0
	<AkGroupValue*> GroupValues;//[Offset: 0x200, Size: 0x50] 0x715ce9fd80

--------------------------------
Class: AkAudioInputComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object // 71a4840d80
	int PostAssociatedAudioInputEvent();// 0x38082c8 0x715cf77160

--------------------------------
Class: AkCheckBox.ContentWidget.PanelWidget.Widget.Visual.Object // 71a4840380
	enum CheckedState;//[Offset: 0x4b0, Size: 0x1] 0x715cf91000
	delegate CheckedStateDelegate;//[Offset: 0x4b4, Size: 0x10] 0x715cf89500
	CheckBoxStyle WidgetStyle;//[Offset: 0x4c8, Size: 0x580] 0x715cf89580
	byte HorizontalAlignment;//[Offset: 0xa48, Size: 0x1] 0x715cf89600
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa49, Size: 0x1] 0x715cf89680
	AkBoolPropertyToControl ThePropertyToControl;//[Offset: 0xa50, Size: 0x10] 0x715cf89700
	AkWwiseItemToControl ItemToControl;//[Offset: 0xa60, Size: 0x40] 0x715cf89780
	delegate AkOnCheckStateChanged;//[Offset: 0xaa0, Size: 0x10] 0x715cf89800
	delegate OnItemDropped;//[Offset: 0xab0, Size: 0x10] 0x715cf89880
	delegate OnPropertyDropped;//[Offset: 0xac0, Size: 0x10] 0x715cf89900
	void SetIsChecked(bool InIsChecked);// 0x3808ebc 0x715cf76980
	void SetCheckedState(enum InCheckedState);// 0x3808e18 0x715cf76a60
	void SetAkItemId(out const Guid ItemId);// 0x3808d64 0x715cf76b40
	void SetAkBoolProperty(FString ItemProperty);// 0x3808c80 0x715cf76c20
	bool IsPressed();// 0x3808fd4 0x715cf76d00
	bool IsChecked();// 0x3808f9c 0x715cf76de0
	enum GetCheckedState();// 0x3808f68 0x715cf76ec0
	FString GetAkProperty();// 0x3808bc0 0x715cf76fa0
	Guid GetAkItemId();// 0x3808d30 0x715cf77080

--------------------------------
Class: AkBoolPropertyToControl // 715da3db40
	FString ItemProperty;//[Offset: 0x0, Size: 0x10] 0x715da5bd00

--------------------------------
Class: AkWwiseItemToControl // 715da3d840
	AkWwiseObjectDetails ItemPicked;//[Offset: 0x0, Size: 0x30] 0x715da5b980
	FString ItemPath;//[Offset: 0x30, Size: 0x10] 0x715da5ba00

--------------------------------
Class: AkWwiseObjectDetails // 715da3d780
	FString ItemName;//[Offset: 0x0, Size: 0x10] 0x715da5b800
	FString ItemPath;//[Offset: 0x10, Size: 0x10] 0x715da5b880
	FString ItemId;//[Offset: 0x20, Size: 0x10] 0x715da5b900

--------------------------------
Class: AkGameplayStatics.BlueprintFunctionLibrary.Object // 71a4840100
	static void UseReverbVolumes(bool inUseReverbVolumes, Actor* Actor);// 0x38103e8 0x715cf7ab20
	static void UseEarlyReflections(Actor* Actor, AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x38101a4 0x715cf7ac00
	static void UnloadBankByName(FString BankName);// 0x380f11c 0x715cf7ace0
	static void UnloadBankAsync(AkAudioBank* Bank, out const delegate BankUnloadedCallback);// 0x380f1bc 0x715cf77400
	static void UnloadBank(AkAudioBank* Bank, FString BankName, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x380f2b8 0x715cf774e0
	static void StopProfilerCapture();// 0x380ef14 0x715cf775c0
	static void StopOutputCapture();// 0x380efc8 0x715cf776a0
	static void StopAllAmbientSounds(Object* WorldContextObject);// 0x380f874 0x715cf77780
	static void StopAll();// 0x380fa5c 0x715cf77860
	static void StopActor(Actor* Actor);// 0x380fa70 0x715cf77940
	static void StartProfilerCapture(FString Filename);// 0x380ef28 0x715cf77a20
	static void StartOutputCapture(FString Filename);// 0x380f07c 0x715cf77b00
	static void StartAllAmbientSounds(Object* WorldContextObject);// 0x380f908 0x715cf77be0
	static AkComponent* SpawnAkComponentAtLocation(Object* WorldContextObject, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, bool AutoPost, FString EventName, bool AutoDestroy);// 0x38111f8 0x715cf77cc0
	static void SetSwitch(AkSwitchValue* SwitchValue, Actor* Actor, FName SwitchGroup, FName SwitchState);// 0x3810a84 0x715cf77da0
	static void SetState(AkStateValue* StateValue, FName StateGroup, FName State);// 0x3810cf4 0x715cf77e80
	static void SetSpeakerAngles(out const float[] SpeakerAngles, float HeightAngle, FString DeviceShareset);// 0x380fbdc 0x715cf77f60
	static void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, Actor* Actor, FName RTPC);// 0x3811058 0x715cf78040
	static void SetReflectionsOrder(int Order, bool RefreshPaths);// 0x38100c8 0x715cf78120
	static void SetPanningRule(enum PanRule);// 0x380fe78 0x715cf78200
	static void SetOutputBusVolume(float BusVolume, Actor* Actor);// 0x380fff0 0x715cf782e0
	static void SetOcclusionScalingFactor(float ScalingFactor);// 0x380ee78 0x715cf783c0
	static void SetOcclusionRefreshInterval(float RefreshInterval, Actor* Actor);// 0x380fb04 0x715cf784a0
	static void SetMultiplePositions(AkComponent* GameObjectAkComponent, Transform[] Positions, enum MultiPositionType);// 0x3810904 0x715cf78580
	static void SetMultipleChannelMaskEmitterPositions(AkComponent* GameObjectAkComponent, AkChannelMask[] ChannelMasks, Transform[] Positions, enum MultiPositionType);// 0x38104d4 0x715cf78660
	static void SetMultipleChannelEmitterPositions(AkComponent* GameObjectAkComponent, enum[] ChannelMasks, Transform[] Positions, enum MultiPositionType);// 0x38106ec 0x715cf78740
	static void SetCurrentAudioCultureAsync(FString AudioCulture, out const delegate Completed);// 0x380ea4c 0x715cf78820
	static void SetCurrentAudioCulture(FString AudioCulture, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x380eb54 0x715cf78900
	static void SetBusConfig(FString BusName, enum ChannelConfiguration);// 0x380ff0c 0x715cf789e0
	static void PostTrigger(AkTrigger* TriggerValue, Actor* Actor, FName Trigger);// 0x3810bdc 0x715cf78ac0
	static void PostEventByName(FString EventName, Actor* Actor, bool bStopWhenAttachedToDestroyed);// 0x3811aa8 0x715cf78ba0
	static int PostEventAttached(AkAudioEvent* AkEvent, Actor* Actor, FName AttachPointName, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x3812448 0x715cf78c80
	static void PostEventAtLocationByName(FString EventName, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x381178c 0x715cf78d60
	static int PostEventAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, FString EventName, Object* WorldContextObject);// 0x38118f0 0x715cf78e40
	static int PostEvent(AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x3812118 0x715cf78f20
	static void PostAndWaitForEndOfEventAsync(AkAudioEvent* AkEvent, Actor* Actor, out int PlayingID, bool bStopWhenAttachedToDestroyed, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3811bd8 0x715cf79000
	static int PostAndWaitForEndOfEvent(AkAudioEvent* AkEvent, Actor* Actor, bool bStopWhenAttachedToDestroyed, out const AkExternalSourceInfo[] ExternalSources, FString EventName, LatentActionInfo LatentInfo);// 0x3811e50 0x715cf75720
	static void LoadInitBank();// 0x380f434 0x715cf75800
	static void LoadBanks(out const AkAudioBank*[] SoundBanks, bool SynchronizeSoundBanks);// 0x380f448 0x715cf758e0
	static void LoadBankByName(FString BankName);// 0x380f548 0x715cf759c0
	static void LoadBankAsync(AkAudioBank* Bank, out const delegate BankLoadedCallback);// 0x380f5e8 0x715cf75aa0
	static void LoadBank(AkAudioBank* Bank, FString BankName, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x380f6e4 0x715cf75b80
	static bool IsGame(Object* WorldContextObject);// 0x3812674 0x715cf75c60
	static bool IsEditor();// 0x381271c 0x715cf75d40
	static void GetSpeakerAngles(out float[] SpeakerAngles, out float HeightAngle, FString DeviceShareset);// 0x380fd24 0x715cf75e20
	static void GetRTPCValue(AkRtpc* RTPCValue, int PlayingID, enum InputValueType, out float Value, out enum OutputValueType, Actor* Actor, FName RTPC);// 0x3810e0c 0x715cf75f00
	static float GetOcclusionScalingFactor();// 0x380ee54 0x715cf75fe0
	static FString GetCurrentAudioCulture();// 0x380eda4 0x715cf760c0
	static FString[] GetAvailableAudioCultures();// 0x380ec8c 0x715cf761a0
	static Object* GetAkMediaAssetUserData(const AkMediaAsset* Instance, const class Object Type);// 0x380e884 0x715cf76280
	static AkComponent* GetAkComponent(SceneComponent* AttachToComponent, out bool ComponentCreated, FName AttachPointName, Vector Location, byte LocationType);// 0x3812754 0x715cf76360
	static Object* GetAkAudioTypeUserData(const AkAudioType* Instance, const class Object Type);// 0x380e968 0x715cf76440
	static void ExecuteActionOnPlayingID(enum ActionType, int PlayingID, int TransitionDuration, enum FadeCurve);// 0x3811448 0x715cf76520
	static void ExecuteActionOnEvent(AkAudioEvent* AkEvent, enum ActionType, Actor* Actor, int TransitionDuration, enum FadeCurve, int PlayingID);// 0x38115a4 0x715cf76600
	static void ClearBanks();// 0x380f860 0x715cf766e0
	static void CancelEventCallback(out const delegate PostEventCallback);// 0x380f99c 0x715cf767c0
	static void AddOutputCaptureMarker(FString MarkerText);// 0x380efdc 0x715cf768a0

--------------------------------
Class: AkStateValue.AkGroupValue.AkAudioType.Object // 71a484e700

--------------------------------
Class: AkChannelMask // 715da3b440
	int ChannelMask;//[Offset: 0x0, Size: 0x4] 0x715da59580

--------------------------------
Class: AkCallbackInfo.Object // 71a484a380
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8] 0x715cf8e900

--------------------------------
Class: AkEventCallbackInfo.AkCallbackInfo.Object // 71a484a100
	int PlayingID;//[Offset: 0x30, Size: 0x4] 0x715cf8e800
	int EventId;//[Offset: 0x34, Size: 0x4] 0x715cf8e880

--------------------------------
Class: AkMIDIEventCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object // 71a4849e80
	enum GetType();// 0x38157f4 0x715cf7a260
	bool GetProgramChange(out AkMidiProgramChange AsProgramChange);// 0x38151b8 0x715cf7a340
	bool GetPitchBend(out AkMidiPitchBend AsPitchBend);// 0x3815400 0x715cf7a420
	bool GetNoteOn(out AkMidiNoteOnOff AsNoteOn);// 0x3815640 0x715cf7a500
	bool GetNoteOff(out AkMidiNoteOnOff AsNoteOff);// 0x3815580 0x715cf7a5e0
	bool GetNoteAftertouch(out AkMidiNoteAftertouch AsNoteAftertouch);// 0x3815340 0x715cf7a6c0
	bool GetGeneric(out AkMidiGeneric AsGeneric);// 0x3815700 0x715cf7a7a0
	bool GetChannelAftertouch(out AkMidiChannelAftertouch AsChannelAftertouch);// 0x381527c 0x715cf7a880
	byte GetChannel();// 0x38157c0 0x715cf7a960
	bool GetCc(out AkMidiCc AsCc);// 0x38154c0 0x715cf7aa40

--------------------------------
Class: AkMidiProgramChange.AkMidiEventBase // 715da3b980
	byte ProgramNum;//[Offset: 0x2, Size: 0x1] 0x715da59c00

--------------------------------
Class: AkMidiEventBase // 715da3ba40
	enum Type;//[Offset: 0x0, Size: 0x1] 0x715d8983a0
	byte Chan;//[Offset: 0x1, Size: 0x1] 0x715da59d00

--------------------------------
Class: AkMidiPitchBend.AkMidiEventBase // 715da3b740
	byte ValueLsb;//[Offset: 0x2, Size: 0x1] 0x715da59900
	byte ValueMsb;//[Offset: 0x3, Size: 0x1] 0x715da59980
	int FullValue;//[Offset: 0x4, Size: 0x4] 0x715da59a00

--------------------------------
Class: AkMidiNoteOnOff.AkMidiEventBase // 715da3b5c0
	byte Note;//[Offset: 0x2, Size: 0x1] 0x715da59700
	byte Velocity;//[Offset: 0x3, Size: 0x1] 0x715da59780

--------------------------------
Class: AkMidiNoteAftertouch.AkMidiEventBase // 715da3b800
	byte Note;//[Offset: 0x2, Size: 0x1] 0x715da59a80
	byte Value;//[Offset: 0x3, Size: 0x1] 0x715da59b00

--------------------------------
Class: AkMidiGeneric.AkMidiEventBase // 715da3b500
	byte Param1;//[Offset: 0x2, Size: 0x1] 0x715da59600
	byte Param2;//[Offset: 0x3, Size: 0x1] 0x715da59680

--------------------------------
Class: AkMidiChannelAftertouch.AkMidiEventBase // 715da3b8c0
	byte Value;//[Offset: 0x2, Size: 0x1] 0x715da59b80

--------------------------------
Class: AkMidiCc.AkMidiEventBase // 715da3b680
	enum Cc;//[Offset: 0x2, Size: 0x1] 0x715d898300
	byte Value;//[Offset: 0x3, Size: 0x1] 0x715da59880

--------------------------------
Class: AkMarkerCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object // 71a4849c00
	int Identifier;//[Offset: 0x38, Size: 0x4] 0x715cfa0f00
	int Position;//[Offset: 0x3c, Size: 0x4] 0x715cfa0f80
	FString Label;//[Offset: 0x40, Size: 0x10] 0x715cfa1000

--------------------------------
Class: AkDurationCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object // 71a4849980
	float Duration;//[Offset: 0x38, Size: 0x4] 0x715cfa0c80
	float EstimatedDuration;//[Offset: 0x3c, Size: 0x4] 0x715cfa0d00
	int AudioNodeID;//[Offset: 0x40, Size: 0x4] 0x715cfa0d80
	int MediaID;//[Offset: 0x44, Size: 0x4] 0x715cfa0e00
	bool bStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cfa0e80

--------------------------------
Class: AkMusicSyncCallbackInfo.AkCallbackInfo.Object // 71a4849700
	int PlayingID;//[Offset: 0x30, Size: 0x4] 0x715cfa0a80
	AkSegmentInfo SegmentInfo;//[Offset: 0x34, Size: 0x24] 0x715cfa0b00
	enum MusicSyncType;//[Offset: 0x58, Size: 0x1] 0x715cf927c0
	FString UserCueName;//[Offset: 0x60, Size: 0x10] 0x715cfa0c00

--------------------------------
Class: AkSegmentInfo // 715da3bb00
	int CurrentPosition;//[Offset: 0x0, Size: 0x4] 0x715da59d80
	int PreEntryDuration;//[Offset: 0x4, Size: 0x4] 0x715da59e00
	int ActiveDuration;//[Offset: 0x8, Size: 0x4] 0x715da59e80
	int PostExitDuration;//[Offset: 0xc, Size: 0x4] 0x715da59f00
	int RemainingLookAheadTime;//[Offset: 0x10, Size: 0x4] 0x715da59f80
	float BeatDuration;//[Offset: 0x14, Size: 0x4] 0x715da5a000
	float BarDuration;//[Offset: 0x18, Size: 0x4] 0x715da5a080
	float GridDuration;//[Offset: 0x1c, Size: 0x4] 0x715da5a100
	float GridOffset;//[Offset: 0x20, Size: 0x4] 0x715da5a180

--------------------------------
Class: AkGeometryComponent.SceneComponent.ActorComponent.Object // 71a4849480
	enum MeshType;//[Offset: 0x1f0, Size: 0x1] 0x715cf92720
	int LOD;//[Offset: 0x1f4, Size: 0x4] 0x715cfa0600
	float WeldingThreshold;//[Offset: 0x1f8, Size: 0x4] 0x715cfa0680
	<MaterialInterface*,AkGeometrySurfaceOverride> StaticMeshSurfaceOverride;//[Offset: 0x200, Size: 0x50] 0x715cecc040
	AkGeometrySurfaceOverride CollisionMeshSurfaceOverride;//[Offset: 0x250, Size: 0x10] 0x715cfa0800
	bool bEnableDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1] 0x715cfa0880
	bool bEnableDiffractionOnBoundaryEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 0x1] 0x715cfa0900
	Actor* AssociatedRoom;//[Offset: 0x268, Size: 0x8] 0x715cfa0980
	AkGeometryData GeometryData;//[Offset: 0x280, Size: 0x50] 0x715cfa0a00
	void UpdateGeometry();// 0x3818da8 0x715cf79fc0
	void RemoveGeometry();// 0x3818dbc 0x715cf7a0a0
	void ConvertMesh();// 0x3818dd0 0x715cf7a180

--------------------------------
Class: AkGeometrySurfaceOverride // 715da3b380
	AkAcousticTexture* AcousticTexture;//[Offset: 0x0, Size: 0x8] 0x715da5b500
	bool bEnableOcclusionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715da5b580
	float OcclusionValue;//[Offset: 0xc, Size: 0x4] 0x715da59500

--------------------------------
Class: AkGeometryData // 715da3b2c0
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10] 0x715d897fe0
	AkAcousticSurface[] Surfaces;//[Offset: 0x10, Size: 0x10] 0x715d898080
	AkTriangle[] Triangles;//[Offset: 0x20, Size: 0x10] 0x715d898120
	PhysicalMaterial*[] ToOverrideAcousticTexture;//[Offset: 0x30, Size: 0x10] 0x715d8981c0
	PhysicalMaterial*[] ToOverrideOcclusion;//[Offset: 0x40, Size: 0x10] 0x715d898260

--------------------------------
Class: AkAcousticSurface // 715da3b140
	uint32 Texture;//[Offset: 0x0, Size: 0x4] 0x715da5af80
	float Occlusion;//[Offset: 0x4, Size: 0x4] 0x715da5b000
	FString Name;//[Offset: 0x8, Size: 0x10] 0x715da5b080

--------------------------------
Class: AkTriangle // 715da3b200
	uint16 Point0;//[Offset: 0x0, Size: 0x2] 0x715da5b180
	uint16 Point1;//[Offset: 0x2, Size: 0x2] 0x715da5b200
	uint16 Point2;//[Offset: 0x4, Size: 0x2] 0x715da5b280
	uint16 Surface;//[Offset: 0x6, Size: 0x2] 0x715da5b300

--------------------------------
Class: AkHololensInitializationSettings.Object // 71a4848f80
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x715cfa0300
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x715cfa0380
	AkHololensAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x40] 0x715cfa0400
	void MigrateMultiCoreRendering(bool NewValue);// 0x3819574 0x715cf79ee0

--------------------------------
Class: AkHololensAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings // 715da3b080
	uint32 AudioAPI;//[Offset: 0x38, Size: 0x4] 0x715da5ad80
	bool GlobalFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715da5ae00
	bool UseHeadMountedDisplayAudioDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x715da5ae80

--------------------------------
Class: AkHololensPlatformInfo.AkPlatformInfo.Object // 71a4848d00

--------------------------------
Class: AkInitBankAssetData.AkAssetDataWithMedia.AkAssetData.Object // 71a4848a80
	AkPluginInfo[] PluginInfos;//[Offset: 0x88, Size: 0x10] 0x715cf92680

--------------------------------
Class: AkPluginInfo // 715da3afc0
	FString Name;//[Offset: 0x0, Size: 0x10] 0x715da5ac00
	uint32 PluginID;//[Offset: 0x10, Size: 0x4] 0x715da5ac80
	FString DLL;//[Offset: 0x18, Size: 0x10] 0x715da5ad00

--------------------------------
Class: AkInitBank.AkAssetBase.AkAudioType.Object // 71a4848800
	FString[] AvailableAudioCultures;//[Offset: 0x58, Size: 0x10] 0x715cf925e0
	FString DefaultLanguage;//[Offset: 0x68, Size: 0x10] 0x715cfa0200

--------------------------------
Class: AkIOSInitializationSettings.Object // 71a4848580
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x715cfa2080
	AkAudioSession AudioSession;//[Offset: 0x90, Size: 0xc] 0x715cfa2100
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0xa0, Size: 0x28] 0x715cfa0080
	AkAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xc8, Size: 0x34] 0x715cfa0100

--------------------------------
Class: AkAudioSession // 715da3bc80
	enum AudioSessionCategory;//[Offset: 0x0, Size: 0x4] 0x715d8984e0
	uint32 AudioSessionCategoryOptions;//[Offset: 0x4, Size: 0x4] 0x715da5a500
	enum AudioSessionMode;//[Offset: 0x8, Size: 0x4] 0x715d898580

--------------------------------
Class: AkIOSPlatformInfo.AkPlatformInfo.Object // 71a4848300

--------------------------------
Class: AkItemBoolPropertiesConv.BlueprintFunctionLibrary.Object // 71a4848080
	static FText Conv_FAkBoolPropertyToControlToText(out const AkBoolPropertyToControl INAkBoolPropertyToControl);// 0x381ad78 0x715cf79d20
	static FString Conv_FAkBoolPropertyToControlToString(out const AkBoolPropertyToControl INAkBoolPropertyToControl);// 0x381aea4 0x715cf79e00

--------------------------------
Class: AkItemBoolProperties.Widget.Visual.Object // 71a4847e00
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10] 0x715cfa1c00
	delegate OnPropertyDragged;//[Offset: 0x118, Size: 0x10] 0x715cfa1c80
	void SetSearchText(FString newText);// 0x381b210 0x715cf79a80
	FString GetSelectedProperty();// 0x381b370 0x715cf79b60
	FString GetSearchText();// 0x381b2c0 0x715cf79c40

--------------------------------
Class: AkItemPropertiesConv.BlueprintFunctionLibrary.Object // 71a4847b80
	static FText Conv_FAkPropertyToControlToText(out const AkPropertyToControl INAkPropertyToControl);// 0x381b850 0x715cf798c0
	static FString Conv_FAkPropertyToControlToString(out const AkPropertyToControl INAkPropertyToControl);// 0x381b97c 0x715cf799a0

--------------------------------
Class: AkPropertyToControl // 715da3da80
	FString ItemProperty;//[Offset: 0x0, Size: 0x10] 0x715da5bc80

--------------------------------
Class: AkItemProperties.Widget.Visual.Object // 71a4847900
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10] 0x715cfa1780
	delegate OnPropertyDragged;//[Offset: 0x118, Size: 0x10] 0x715cfa1800
	void SetSearchText(FString newText);// 0x381bce8 0x715cf79620
	FString GetSelectedProperty();// 0x381be48 0x715cf79700
	FString GetSearchText();// 0x381bd98 0x715cf797e0

--------------------------------
Class: AkLateReverbComponent.SceneComponent.ActorComponent.Object // 71a4847680
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x715cfa1400
	AkAuxBus* AuxBus;//[Offset: 0x1f8, Size: 0x8] 0x715cfa1480
	FString AuxBusName;//[Offset: 0x200, Size: 0x10] 0x715cfa1500
	float SendLevel;//[Offset: 0x210, Size: 0x4] 0x715cfa1580
	float FadeRate;//[Offset: 0x214, Size: 0x4] 0x715cfa1600
	float Priority;//[Offset: 0x218, Size: 0x4] 0x715cfa1680
	AkLateReverbComponent* NextLowerPriorityComponent;//[Offset: 0x220, Size: 0x8] 0x715cfa1700

--------------------------------
Class: AkLinuxInitializationSettings.Object // 71a4847400
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x715cfa1200
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x715cfa1280
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x38] 0x715cfa1300
	void MigrateMultiCoreRendering(bool NewValue);// 0x381c46c 0x715cf79540

--------------------------------
Class: AkLinuxPlatformInfo.AkPlatformInfo.Object // 71a4847180

--------------------------------
Class: AkLuminInitializationSettings.Object // 71a4846f00
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x715cfa3100
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x715cfa3180
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x38] 0x715cfa1100
	void MigrateMultiCoreRendering(bool NewValue);// 0x381c854 0x715cf79460

--------------------------------
Class: AkLuminPlatformInfo.AkPlatformInfo.Object // 71a4846c80

--------------------------------
Class: AkMacInitializationSettings.Object // 71a4846a00
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x715cfa2f00
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x715cfa2f80
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x38] 0x715cfa3000
	void MigrateMultiCoreRendering(bool NewValue);// 0x381cc3c 0x715cf79380

--------------------------------
Class: AkMacPlatformInfo.AkPlatformInfo.Object // 71a4846780

--------------------------------
Class: AkLocalizedMediaAsset.AkMediaAsset.Object // 71a4846000

--------------------------------
Class: AkPS4InitializationSettings.Object // 71a4845b00
	AkCommonInitializationSettings CommonSettings;//[Offset: 0x28, Size: 0x60] 0x715cfa2a80
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x88, Size: 0x28] 0x715cfa2b00
	AkPS4AdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb0, Size: 0x40] 0x715cfa2b80
	void MigrateMultiCoreRendering(bool NewValue);// 0x3823644 0x715cf792a0

--------------------------------
Class: AkPS4AdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings // 715da3d9c0
	uint32 ACPBatchBufferSize;//[Offset: 0x38, Size: 0x4] 0x715da5bb80
	bool UseHardwareCodecLowLatencyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715da5bc00

--------------------------------
Class: AkPS4PlatformInfo.AkPlatformInfo.Object // 71a4845880

--------------------------------
Class: AkReverbVolume.Volume.Brush.Actor.Object // 71a4845600
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x715cfa2700
	AkAuxBus* AuxBus;//[Offset: 0x260, Size: 0x8] 0x715cfa2780
	FString AuxBusName;//[Offset: 0x268, Size: 0x10] 0x715cfa2800
	float SendLevel;//[Offset: 0x278, Size: 0x4] 0x715cfa2880
	float FadeRate;//[Offset: 0x27c, Size: 0x4] 0x715cfa2900
	float Priority;//[Offset: 0x280, Size: 0x4] 0x715cfa2980
	AkLateReverbComponent* LateReverbComponent;//[Offset: 0x288, Size: 0x8] 0x715cfa2a00

--------------------------------
Class: AkRoomComponent.AkGameObject.SceneComponent.ActorComponent.Object // 71a4845380
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20a, Size: 0x1] 0x715cfa2400
	AkRoomComponent* NextLowerPriorityComponent;//[Offset: 0x210, Size: 0x8] 0x715cfa2480
	float Priority;//[Offset: 0x218, Size: 0x4] 0x715cfa2500
	float WallOcclusion;//[Offset: 0x21c, Size: 0x4] 0x715cfa2580
	float AuxSendLevel;//[Offset: 0x220, Size: 0x4] 0x715cfa2600
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1] 0x715cfa2680

--------------------------------
Class: AkSettingsPerUser.Object // 71a484f100
	DirectoryPath WwiseWindowsInstallationPath;//[Offset: 0x28, Size: 0x10] 0x715cfa3800
	FilePath WwiseMacInstallationPath;//[Offset: 0x38, Size: 0x10] 0x715cfa3880
	FString WaapiIPAddress;//[Offset: 0x48, Size: 0x10] 0x715cfa3900
	uint32 WaapiPort;//[Offset: 0x58, Size: 0x4] 0x715cfa3980
	bool AutoSyncSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x715cfa3a00
	bool SuppressWwiseProjectPathWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1] 0x715cfa3a80
	bool SoundDataGenerationSkipLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1] 0x715cfa3b00

--------------------------------
Class: AkSlider.Widget.Visual.Object // 71a484ee80
	float Value;//[Offset: 0x108, Size: 0x4] 0x715cfa4c00
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x715cfa4c80
	SliderStyle WidgetStyle;//[Offset: 0x120, Size: 0x340] 0x715cfa4d00
	byte Orientation;//[Offset: 0x460, Size: 0x1] 0x715cfa4d80
	LinearColor SliderBarColor;//[Offset: 0x464, Size: 0x10] 0x715cfa4e00
	LinearColor SliderHandleColor;//[Offset: 0x474, Size: 0x10] 0x715cfa4e80
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1] 0x715cfa4f00
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x485, Size: 0x1] 0x715cfa4f80
	float StepSize;//[Offset: 0x488, Size: 0x4] 0x715cfa5000
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1] 0x715cfa5080
	AkPropertyToControl ThePropertyToControl;//[Offset: 0x490, Size: 0x10] 0x715cfa5100
	AkWwiseItemToControl ItemToControl;//[Offset: 0x4a0, Size: 0x40] 0x715cfa5180
	delegate OnValueChanged;//[Offset: 0x4e0, Size: 0x10] 0x715cfa5200
	delegate OnItemDropped;//[Offset: 0x4f0, Size: 0x10] 0x715cfa5280
	delegate OnPropertyDropped;//[Offset: 0x500, Size: 0x10] 0x715cfa3200
	void SetValue(float InValue);// 0x3824d68 0x715cf7c2c0
	void SetStepSize(float InValue);// 0x3824b6c 0x715cf7c3a0
	void SetSliderHandleColor(LinearColor InValue);// 0x3824a24 0x715cf7c480
	void SetSliderBarColor(LinearColor InValue);// 0x3824ac8 0x715cf7c560
	void SetLocked(bool InValue);// 0x3824c10 0x715cf7c640
	void SetIndentHandle(bool InValue);// 0x3824cbc 0x715cf7c720
	void SetAkSliderItemProperty(FString ItemProperty);// 0x382488c 0x715cf7c800
	void SetAkSliderItemId(out const Guid ItemId);// 0x3824970 0x715cf7c8e0
	float GetValue();// 0x3824e0c 0x715cf7c9c0
	FString GetAkSliderItemProperty();// 0x38247cc 0x715cf790e0
	Guid GetAkSliderItemId();// 0x382493c 0x715cf791c0

--------------------------------
Class: AkSpatialAudioVolume.Volume.Brush.Actor.Object // 71a484ec00
	AkSurfaceReflectorSetComponent* SurfaceReflectorSet;//[Offset: 0x258, Size: 0x8] 0x715cfa4a80
	AkLateReverbComponent* LateReverb;//[Offset: 0x260, Size: 0x8] 0x715cfa4b00
	AkRoomComponent* Room;//[Offset: 0x268, Size: 0x8] 0x715cfa4b80

--------------------------------
Class: AkSurfaceReflectorSetComponent.SceneComponent.ActorComponent.Object // 71a484e480
	bool bEnableSurfaceReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x715cfa4580
	AkPoly[] AcousticPolys;//[Offset: 0x1f8, Size: 0x10] 0x715cf924a0
	bool bEnableDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x715cfa4680
	bool bEnableDiffractionOnBoundaryEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1] 0x715cfa4700
	Actor* AssociatedRoom;//[Offset: 0x210, Size: 0x8] 0x715cfa4780
	void UpdateSurfaceReflectorSet();// 0x3825994 0x715cf7c020
	void SendSurfaceReflectorSet();// 0x38259bc 0x715cf7c100
	void RemoveSurfaceReflectorSet();// 0x38259a8 0x715cf7c1e0

--------------------------------
Class: AkPoly // 715da3d6c0
	AkAcousticTexture* Texture;//[Offset: 0x0, Size: 0x8] 0x715da5b680
	float Occlusion;//[Offset: 0x8, Size: 0x4] 0x715da5b700
	bool EnableSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715da5b780

--------------------------------
Class: AkSpotReflector.Actor.Object // 71a484e980
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x220, Size: 0x8] 0x715cfa4800
	FString EarlyReflectionAuxBusName;//[Offset: 0x228, Size: 0x10] 0x715cfa4880
	AkAcousticTexture* AcousticTexture;//[Offset: 0x238, Size: 0x8] 0x715cfa4900
	float DistanceScalingFactor;//[Offset: 0x240, Size: 0x4] 0x715cfa4980
	float Level;//[Offset: 0x244, Size: 0x4] 0x715cfa4a00

--------------------------------
Class: AkSwitchInitializationSettings.Object // 71a484e200
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x715cfa4380
	AkCommunicationSettingsWithCommSelection CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x715cfa4400
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x38] 0x715cfa4480
	void MigrateMultiCoreRendering(bool NewValue);// 0x3825d80 0x715cf7bf40

--------------------------------
Class: AkCommunicationSettingsWithCommSelection.AkCommunicationSettings // 715da3dcc0
	enum CommunicationSystem;//[Offset: 0x20, Size: 0x4] 0x715d897e00

--------------------------------
Class: AkSwitchPlatformInfo.AkPlatformInfo.Object // 71a484df80

--------------------------------
Class: AkTVOSInitializationSettings.Object // 71a484d800
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x715cfa6280
	AkAudioSession AudioSession;//[Offset: 0x90, Size: 0xc] 0x715cfa6300
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0xa0, Size: 0x28] 0x715cfa4280
	AkAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xc8, Size: 0x34] 0x715cfa4300

--------------------------------
Class: AkTVOSPlatformInfo.AkPlatformInfo.Object // 71a484d580

--------------------------------
Class: AkWaapiCalls.BlueprintFunctionLibrary.Object // 71a484d300
	static AKWaapiJsonObject Unsubscribe(out const AkWaapiSubscriptionId SubscriptionId, out bool UnsubscriptionDone);// 0x3826b8c 0x715cf7b760
	static AKWaapiJsonObject SubscribeToWaapi(out const AkWaapiUri WaapiUri, out const AKWaapiJsonObject WaapiOptions, out const delegate Callback, out AkWaapiSubscriptionId SubscriptionId, out bool SubscriptionDone);// 0x3826d6c 0x715cf7b840
	static void SetSubscriptionID(out const AkWaapiSubscriptionId Subscription, int ID);// 0x3827720 0x715cf7b920
	static bool RegisterWaapiProjectLoadedCallback(out const delegate Callback);// 0x3827598 0x715cf7ba00
	static bool RegisterWaapiConnectionLostCallback(out const delegate Callback);// 0x38274c4 0x715cf7bae0
	static int GetSubscriptionID(out const AkWaapiSubscriptionId Subscription);// 0x382766c 0x715cf7bbc0
	static FText Conv_FAkWaapiSubscriptionIdToText(out const AkWaapiSubscriptionId INAkWaapiSubscriptionId);// 0x382696c 0x715cf7bca0
	static FString Conv_FAkWaapiSubscriptionIdToString(out const AkWaapiSubscriptionId INAkWaapiSubscriptionId);// 0x3826a8c 0x715cf7bd80
	static AKWaapiJsonObject CallWaapi(out const AkWaapiUri WaapiUri, out const AKWaapiJsonObject WaapiArgs, out const AKWaapiJsonObject WaapiOptions);// 0x3827120 0x715cf7be60

--------------------------------
Class: AkWaapiSubscriptionId // 714906b380

--------------------------------
Class: AKWaapiJsonObject // 714906b5c0

--------------------------------
Class: AkWaapiUri // 715da3d540
	FString Uri;//[Offset: 0x0, Size: 0x10] 0x715da5d680

--------------------------------
Class: SAkWaapiFieldNamesConv.BlueprintFunctionLibrary.Object // 71a484ce00
	static FText Conv_FAkWaapiFieldNamesToText(out const AkWaapiFieldNames INAkWaapiFieldNames);// 0x3827da0 0x715cf7b5a0
	static FString Conv_FAkWaapiFieldNamesToString(out const AkWaapiFieldNames INAkWaapiFieldNames);// 0x3827ecc 0x715cf7b680

--------------------------------
Class: AkWaapiFieldNames // 715da3d600
	FString FieldName;//[Offset: 0x0, Size: 0x10] 0x715da5b600

--------------------------------
Class: AkWaapiJsonManager.BlueprintFunctionLibrary.Object // 71a484cb80
	static AKWaapiJsonObject SetStringField(out const AkWaapiFieldNames FieldName, FString FieldValue, AKWaapiJsonObject Target);// 0x382f114 0x715cf7e320
	static AKWaapiJsonObject SetObjectField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject FieldValue, AKWaapiJsonObject Target);// 0x382e614 0x715cf7e400
	static AKWaapiJsonObject SetNumberField(out const AkWaapiFieldNames FieldName, float FieldValue, AKWaapiJsonObject Target);// 0x382ea7c 0x715cf7e4e0
	static AKWaapiJsonObject SetBoolField(out const AkWaapiFieldNames FieldName, bool FieldValue, AKWaapiJsonObject Target);// 0x382edc4 0x715cf7e5c0
	static AKWaapiJsonObject SetArrayStringFields(out const AkWaapiFieldNames FieldName, out const FString[] FieldStringValues, AKWaapiJsonObject Target);// 0x382e278 0x715cf7e6a0
	static AKWaapiJsonObject SetArrayObjectFields(out const AkWaapiFieldNames FieldName, out const AKWaapiJsonObject[] FieldObjectValues, AKWaapiJsonObject Target);// 0x382de90 0x715cf7adc0
	static FString GetStringField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x382dc1c 0x715cf7aea0
	static AKWaapiJsonObject GetObjectField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x382d27c 0x715cf7af80
	static float GetNumberField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x382d7b8 0x715cf7b060
	static int GetIntegerField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x382d588 0x715cf7b140
	static bool GetBoolField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x382d9e8 0x715cf7b220
	static AKWaapiJsonObject[] GetArrayField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x382cec0 0x715cf7b300
	static FText Conv_FAKWaapiJsonObjectToText(AKWaapiJsonObject INAKWaapiJsonObject);// 0x382ca78 0x715cf7b3e0
	static FString Conv_FAKWaapiJsonObjectToString(AKWaapiJsonObject INAKWaapiJsonObject);// 0x382ccb0 0x715cf7b4c0

--------------------------------
Class: AkWaapiUriConv.BlueprintFunctionLibrary.Object // 71a484c900
	static FText Conv_FAkWaapiUriToText(out const AkWaapiUri INAkWaapiUri);// 0x382fb54 0x715cf7e160
	static FString Conv_FAkWaapiUriToString(out const AkWaapiUri INAkWaapiUri);// 0x382fc80 0x715cf7e240

--------------------------------
Class: AkWindowsInitializationSettings.Object // 71a484c680
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68] 0x715cfa7b00
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x715cfa7b80
	AkWindowsAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x40] 0x715cfa7c00
	void MigrateMultiCoreRendering(bool NewValue);// 0x3830178 0x715cf7e080

--------------------------------
Class: AkWindowsAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings // 715da3d480
	uint32 AudioAPI;//[Offset: 0x38, Size: 0x4] 0x715da5d500
	bool GlobalFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715da5d580
	bool UseHeadMountedDisplayAudioDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x715da5d600

--------------------------------
Class: AkWin32PlatformInfo.AkPlatformInfo.Object // 71a484c400

--------------------------------
Class: AkWin64PlatformInfo.AkPlatformInfo.Object // 71a484c180

--------------------------------
Class: AkWindowsPlatformInfo.AkWin64PlatformInfo.AkPlatformInfo.Object // 71a484bf00

--------------------------------
Class: AkWwiseTree.Widget.Visual.Object // 71a484bc80
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10] 0x715cfa7880
	delegate OnItemDragged;//[Offset: 0x118, Size: 0x10] 0x715cfa7900
	void SetSearchText(FString newText);// 0x38325b4 0x715cf7dde0
	AkWwiseObjectDetails GetSelectedItem();// 0x3832714 0x715cf7dec0
	FString GetSearchText();// 0x3832664 0x715cf7dfa0

--------------------------------
Class: AkWwiseTreeSelector.Widget.Visual.Object // 71a484ba00
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10] 0x715cfa7780
	delegate OnItemDragged;//[Offset: 0x118, Size: 0x10] 0x715cfa7800

--------------------------------
Class: AkXboxOneInitializationSettings.Object // 71a484b780
	AkCommonInitializationSettings CommonSettings;//[Offset: 0x28, Size: 0x60] 0x715cfa7500
	AkXboxOneApuHeapInitializationSettings ApuHeapSettings;//[Offset: 0x88, Size: 0x8] 0x715cfa7580
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28] 0x715cfa7600
	AkXboxOneAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x3c] 0x715cfa7680
	void MigrateMultiCoreRendering(bool NewValue);// 0x3832db4 0x715cf7dd00

--------------------------------
Class: AkXboxOneApuHeapInitializationSettings // 715da3d3c0
	uint32 CachedSize;//[Offset: 0x0, Size: 0x4] 0x715da5d400
	uint32 NonCachedSize;//[Offset: 0x4, Size: 0x4] 0x715da5d480

--------------------------------
Class: AkXboxOneAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings // 715da3d300
	uint16 MaximumNumberOfXMAVoices;//[Offset: 0x36, Size: 0x2] 0x715da5d300
	bool UseHardwareCodecLowLatencyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715da5d380

--------------------------------
Class: AkXboxOnePlatformInfo.AkPlatformInfo.Object // 71a484b500

--------------------------------
Class: InterpTrackAkAudioEvent.InterpTrackVectorBase.InterpTrack.Object // 71a484b280
	AkAudioEventTrackKey[] Events;//[Offset: 0x90, Size: 0x10] 0x715cf920e0
	bool bContinueEventOnMatineeEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x715cfa8f00

--------------------------------
Class: AkAudioEventTrackKey // 715da3d240
	float Time;//[Offset: 0x0, Size: 0x4] 0x715da5d180
	AkAudioEvent* AkAudioEvent;//[Offset: 0x8, Size: 0x8] 0x715da5d200
	FString EventName;//[Offset: 0x10, Size: 0x10] 0x715da5d280

--------------------------------
Class: InterpTrackAkAudioRTPC.InterpTrackFloatBase.InterpTrack.Object // 71a484ab00
	FString Param;//[Offset: 0x90, Size: 0x10] 0x715cfa8c00
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x715cfa8c80
	bool bContinueRTPCOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x715cfa8d00

--------------------------------
Class: InterpTrackInstAkAudioEvent.InterpTrackInst.Object // 71a484a600
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x715cfa8b80

--------------------------------
Class: InterpTrackInstAkAudioRTPC.InterpTrackInst.Object // 71a484fb00
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x715cfa8b00

--------------------------------
Class: MovieSceneAkAudioEventSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a484f880
	AkAudioEvent* Event;//[Offset: 0x118, Size: 0x8] 0x715cfa8600
	bool RetriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x715cfa8680
	int ScrubTailLengthMs;//[Offset: 0x124, Size: 0x4] 0x715cfa8700
	bool StopAtSectionEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x715cfa8780
	FString EventName;//[Offset: 0x130, Size: 0x10] 0x715cfa8800
	bool bPostAtLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1] 0x715cfa8880
	Vector EventLocation;//[Offset: 0x144, Size: 0xc] 0x715cfa8900
	Rotator EventOrientation;//[Offset: 0x150, Size: 0xc] 0x715cfa8980
	float MaxSourceDuration;//[Offset: 0x180, Size: 0x4] 0x715cfa8a00
	FString MaxDurationSourceID;//[Offset: 0x188, Size: 0x10] 0x715cfa8a80

--------------------------------
Class: MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a4864e80
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x715cf92040
	bool bIsAMasterTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715cfa8580

--------------------------------
Class: MovieSceneAkAudioEventTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a4865100

--------------------------------
Class: MovieSceneAkAudioRTPCSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a4864c00
	AkRtpc* RTPC;//[Offset: 0xd8, Size: 0x8] 0x715cfaa380
	FString Name;//[Offset: 0xe0, Size: 0x10] 0x715cfaa400
	RichCurve FloatCurve;//[Offset: 0xf0, Size: 0x80] 0x715cfaa480
	MovieSceneFloatChannelSerializationHelper FloatChannelSerializationHelper;//[Offset: 0x170, Size: 0x30] 0x715cfaa500
	MovieSceneFloatChannel RTPCChannel;//[Offset: 0x1a0, Size: 0xa0] 0x715cfa8480

--------------------------------
Class: MovieSceneFloatChannelSerializationHelper // 715da3d000
	byte PreInfinityExtrap;//[Offset: 0x0, Size: 0x1] 0x715da5c900
	byte PostInfinityExtrap;//[Offset: 0x1, Size: 0x1] 0x715da5c980
	int[] Times;//[Offset: 0x8, Size: 0x10] 0x715d897cc0
	MovieSceneFloatValueSerializationHelper[] Values;//[Offset: 0x18, Size: 0x10] 0x715d897d60
	float DefaultValue;//[Offset: 0x28, Size: 0x4] 0x715da5cf80
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x715da5d000

--------------------------------
Class: MovieSceneFloatValueSerializationHelper // 715da3cf40
	float Value;//[Offset: 0x0, Size: 0x4] 0x715da5ca80
	byte InterpMode;//[Offset: 0x4, Size: 0x1] 0x715da5cb00
	byte TangentMode;//[Offset: 0x5, Size: 0x1] 0x715da5cb80
	MovieSceneTangentDataSerializationHelper Tangent;//[Offset: 0x8, Size: 0x14] 0x715da5ce80

--------------------------------
Class: MovieSceneTangentDataSerializationHelper // 715da3ce80
	float ArriveTangent;//[Offset: 0x0, Size: 0x4] 0x715da5cc00
	float LeaveTangent;//[Offset: 0x4, Size: 0x4] 0x715da5cc80
	byte TangentWeightMode;//[Offset: 0x8, Size: 0x1] 0x715da5cd00
	float ArriveTangentWeight;//[Offset: 0xc, Size: 0x4] 0x715da5cd80
	float LeaveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x715da5ce00

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel // 715dad1480
	byte PreInfinityExtrap;//[Offset: 0x8, Size: 0x1] 0x715dac4300
	byte PostInfinityExtrap;//[Offset: 0x9, Size: 0x1] 0x715dac4380
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x715d89e7a0
	MovieSceneFloatValue[] Values;//[Offset: 0x20, Size: 0x10] 0x715d89e840
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x715dac4a00
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x715dac4a80
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x38, Size: 0x60] 0x715dac4b00
	FrameRate TickResolution;//[Offset: 0x98, Size: 0x8] 0x715dac4b80

--------------------------------
Class: MovieSceneChannel // 715da9f400

--------------------------------
Class: MovieSceneFloatValue // 715dad13c0
	float Value;//[Offset: 0x0, Size: 0x4] 0x715dac4480
	MovieSceneTangentData Tangent;//[Offset: 0x4, Size: 0x14] 0x715dac4780
	byte InterpMode;//[Offset: 0x18, Size: 0x1] 0x715dac4800
	byte TangentMode;//[Offset: 0x19, Size: 0x1] 0x715dac4880
	byte PaddingByte;//[Offset: 0x1a, Size: 0x1] 0x715dac4900

--------------------------------
Class: MovieSceneTangentData // 715dad1300
	float ArriveTangent;//[Offset: 0x0, Size: 0x4] 0x715dac4500
	float LeaveTangent;//[Offset: 0x4, Size: 0x4] 0x715dac4580
	float ArriveTangentWeight;//[Offset: 0x8, Size: 0x4] 0x715dac4600
	float LeaveTangentWeight;//[Offset: 0xc, Size: 0x4] 0x715dac4680
	byte TangentWeightMode;//[Offset: 0x10, Size: 0x1] 0x715dac4700

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable // 715da9f100

--------------------------------
Class: KeyHandleLookupTable // 715da9f1c0

--------------------------------
Class: MovieSceneAkAudioRTPCTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a4864980

--------------------------------
Class: PostEventAsync.BlueprintAsyncActionBase.Object // 71a4864700
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x715cfa9f00
	static PostEventAsync* PostEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed);// 0x38345fc 0x715cf7db40
	void PollPostEventFuture();// 0x38345e8 0x715cf7dc20

--------------------------------
Class: PostEventAtLocationAsync.BlueprintAsyncActionBase.Object // 71a4864480
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x715cfa9c00
	static PostEventAtLocationAsync* PostEventAtLocationAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation);// 0x3834d60 0x715cf7d980
	void PollPostEventFuture();// 0x3834d4c 0x715cf7da60

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object // 71a4864200
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1] 0x715cfab180
	int AdditionalSlotIndex;//[Offset: 0xf0, Size: 0x4] 0x715cfab200
	FText SlotDisplayName;//[Offset: 0xf8, Size: 0x18] 0x715cfab280

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object // 71a4863300
	PaperFlipbookComponent* Sprite;//[Offset: 0x4b8, Size: 0x8] 0x715cfe0f80

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4862900
	PaperFlipbook* SourceFlipbook;//[Offset: 0x440, Size: 0x8] 0x715cfe1680
	MaterialInterface* Material;//[Offset: 0x448, Size: 0x8] 0x715cfe1700
	float PlayRate;//[Offset: 0x450, Size: 0x4] 0x715cfe1780
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x454, Size: 0x1] 0x715cfe1800
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x454, Size: 0x1] 0x715cfe1880
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x454, Size: 0x1] 0x715cfe1900
	float AccumulatedTime;//[Offset: 0x458, Size: 0x4] 0x715cfe1980
	int CachedFrameIndex;//[Offset: 0x45c, Size: 0x4] 0x715cfe1a00
	LinearColor SpriteColor;//[Offset: 0x460, Size: 0x10] 0x715cfe1a80
	BodySetup* CachedBodySetup;//[Offset: 0x470, Size: 0x8] 0x715cfe1b00
	delegate OnFinishedPlaying;//[Offset: 0x478, Size: 0x10] 0x715cfe1b80
	void Stop();// 0x3857fa0 0x715cfd0240
	void SetSpriteColor(LinearColor NewColor);// 0x3858004 0x715cfd0320
	void SetPlayRate(float NewRate);// 0x3857b64 0x715cfd0400
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0x3857e44 0x715cfd04e0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0x3857d20 0x715cfd05c0
	void SetNewTime(float NewTime);// 0x3857a8c 0x715cfd06a0
	void SetLooping(bool bNewLooping);// 0x3857c40 0x715cfd0780
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0x38580e4 0x715cfd0860
	void ReverseFromEnd();// 0x3857fb4 0x715cfd0940
	void Reverse();// 0x3857fc8 0x715cfd0a20
	void PlayFromStart();// 0x3857fdc 0x715cfd0b00
	void Play();// 0x3857ff0 0x715cfd0be0
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0x385794c 0x715cfd0cc0
	bool IsReversing();// 0x3857f30 0x715cfd0da0
	bool IsPlaying();// 0x3857f68 0x715cfd0e80
	bool IsLooping();// 0x3857c08 0x715cfd0f60
	float GetPlayRate();// 0x3857b30 0x715cfd1040
	int GetPlaybackPositionInFrames();// 0x3857e10 0x715cfd1120
	float GetPlaybackPosition();// 0x3857cec 0x715cfd1200
	int GetFlipbookLengthInFrames();// 0x3857a24 0x715cfd12e0
	float GetFlipbookLength();// 0x3857a58 0x715cfd13c0
	float GetFlipbookFramerate();// 0x38579f0 0x715cfd14a0
	PaperFlipbook* GetFlipbook();// 0x38580a8 0x715cfd1580

--------------------------------
Class: PaperFlipbook.Object // 71a4862e00
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4] 0x715cfe0700
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10] 0x715cf91e60
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8] 0x715cfe0800
	byte CollisionSource;//[Offset: 0x48, Size: 0x1] 0x715cfe0880
	bool IsValidKeyFrameIndex(int Index);// 0x3856f90 0x715cfd1660
	float GetTotalDuration();// 0x3857304 0x715cfd1740
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0x3857114 0x715cfd1820
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0x3857068 0x715cfd1900
	int GetNumKeyFrames();// 0x385704c 0x715cfd19e0
	int GetNumFrames();// 0x3857338 0x715cfd1ac0
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0x385720c 0x715cfd1ba0

--------------------------------
Class: PaperFlipbookKeyFrame // 715da3cd00
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8] 0x715da5e700
	int FrameRun;//[Offset: 0x8, Size: 0x4] 0x715da5c680

--------------------------------
Class: PaperSprite.ClusteredDecalUVSource.Object // 71a4861f00
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x715cf91b40
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8] 0x715cfe2380
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8] 0x715cfe2400
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8] 0x715cfe2480
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8] 0x715cfe2500
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8] 0x715cfe2580
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10] 0x715cf91be0
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1] 0x715cfe2680
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4] 0x715cfe2700
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8] 0x715cfe2780
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4] 0x715cfe2800
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10] 0x715cf91c80

--------------------------------
Class: PaperSpriteSocket // 715da3cb80
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30] 0x715da5e400
	FName SocketName;//[Offset: 0x30, Size: 0x8] 0x715da5e480

--------------------------------
Class: PaperFlipbookActor.Actor.Object // 71a4862b80
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x715cfe0680

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object // 71a4862680
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x715cfe1600

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4862400
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x440, Size: 0x10] 0x715cf91d20
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x450, Size: 0x10] 0x715cf91dc0
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x38591d0 0x715cfd3500
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0x385908c 0x715cfd35e0
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0x3858ee0 0x715cfd36c0
	bool RemoveInstance(int InstanceIndex);// 0x3858fd4 0x715cfd37a0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x38593f4 0x715cfd3880
	int GetInstanceCount();// 0x3858f84 0x715cfd3960
	void ClearInstances();// 0x3858fb8 0x715cfd0080
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0x3859564 0x715cfd0160

--------------------------------
Class: SpriteInstanceData // 715da3cc40
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x715da5e500
	PaperSprite* SourceSprite;//[Offset: 0x40, Size: 0x8] 0x715da5e580
	Color VertexColor;//[Offset: 0x48, Size: 0x4] 0x715da5e600
	int MaterialIndex;//[Offset: 0x4c, Size: 0x4] 0x715da5e680

--------------------------------
Class: PaperRuntimeSettings.Object // 71a4862180
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715cfe2900
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715cfe2980
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x715cfe2a00

--------------------------------
Class: PaperSpriteActor.Actor.Object // 71a4861a00
	PaperSpriteComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x715cfe2280

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4861280
	PaperSprite* SourceSprite;//[Offset: 0x440, Size: 0x8] 0x715cfe3e00
	MaterialInterface* MaterialOverride;//[Offset: 0x448, Size: 0x8] 0x715cfe3e80
	LinearColor SpriteColor;//[Offset: 0x450, Size: 0x10] 0x715cfe3f00
	void SetSpriteColor(LinearColor NewColor);// 0x385a930 0x715cfd3180
	bool SetSprite(PaperSprite* NewSprite);// 0x385aa10 0x715cfd3260
	PaperSprite* GetSprite();// 0x385a9d4 0x715cfd3340

--------------------------------
Class: PaperSpriteAtlas.Object // 71a4861780

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4861500
	static SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0x385a4f8 0x715cfd3420

--------------------------------
Class: PaperTerrainActor.Actor.Object // 71a4861000
	SceneComponent* DummyRoot;//[Offset: 0x220, Size: 0x8] 0x715cfe3c80
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x228, Size: 0x8] 0x715cfe3d00
	PaperTerrainComponent* RenderComponent;//[Offset: 0x230, Size: 0x8] 0x715cfe3d80

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4860880

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4860d80
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x418, Size: 0x8] 0x715cfe3680
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1] 0x715cfe3700
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1] 0x715cfe3780
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x428, Size: 0x8] 0x715cfe3800
	int RandomSeed;//[Offset: 0x430, Size: 0x4] 0x715cfe3880
	float SegmentOverlapAmount;//[Offset: 0x434, Size: 0x4] 0x715cfe3900
	LinearColor TerrainColor;//[Offset: 0x438, Size: 0x10] 0x715cfe3980
	int ReparamStepsPerSegment;//[Offset: 0x448, Size: 0x4] 0x715cfe3a00
	byte SpriteCollisionDomain;//[Offset: 0x44c, Size: 0x1] 0x715cfe3a80
	float CollisionThickness;//[Offset: 0x450, Size: 0x4] 0x715cfe3b00
	BodySetup* CachedBodySetup;//[Offset: 0x458, Size: 0x8] 0x715cfe3b80
	void SetTerrainColor(LinearColor NewColor);// 0x385b104 0x715cfd30a0

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object // 71a4860b00
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x30, Size: 0x10] 0x715cf91aa0
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8] 0x715cfe3600

--------------------------------
Class: PaperTerrainMaterialRule // 715da3ca00
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8] 0x715da5dd00
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10] 0x715d89a560
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8] 0x715da5de00
	float MinimumAngle;//[Offset: 0x20, Size: 0x4] 0x715da5de80
	float MaximumAngle;//[Offset: 0x24, Size: 0x4] 0x715da5df00
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715da5df80
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4] 0x715da5e000
	int DrawOrder;//[Offset: 0x30, Size: 0x4] 0x715da5e080

--------------------------------
Class: PaperTileLayer.Object // 71a4860380
	FText LayerName;//[Offset: 0x28, Size: 0x18] 0x715cfecf00
	int LayerWidth;//[Offset: 0x40, Size: 0x4] 0x715cfecf80
	int LayerHeight;//[Offset: 0x44, Size: 0x4] 0x715cfed000
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715cfed080
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x715cfed100
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1] 0x715cfed180
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1] 0x715cfed200
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4] 0x715cfed280
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4] 0x715cfed300
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10] 0x715cfed380
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4] 0x715cfed400
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4] 0x715cfed480
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10] 0x715cf916e0
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8] 0x715cfed580
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10] 0x715cf91780

--------------------------------
Class: PaperTileInfo // 715da3c940
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8] 0x715da5dc00
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4] 0x715da5dc80

--------------------------------
Class: PaperTileSet.Object // 71a4869e80
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8] 0x715cff1080
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8] 0x715cfef800
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x715cf93c60
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10] 0x715cfef900
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8] 0x715cfef980
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8] 0x715cfefa00
	int WidthInTiles;//[Offset: 0x68, Size: 0x4] 0x715cfefa80
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4] 0x715cfefb00
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4] 0x715cfefb80
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4] 0x715cfefc00
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10] 0x715cf93d00
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10] 0x715cf93da0
	int TileWidth;//[Offset: 0x98, Size: 0x4] 0x715cfefd80
	int TileHeight;//[Offset: 0x9c, Size: 0x4] 0x715cfefe00
	int Margin;//[Offset: 0xa0, Size: 0x4] 0x715cfefe80
	int Spacing;//[Offset: 0xa4, Size: 0x4] 0x715cfeff00

--------------------------------
Class: IntMargin // 715da3cdc0
	int Left;//[Offset: 0x0, Size: 0x4] 0x715da5c700
	int Top;//[Offset: 0x4, Size: 0x4] 0x715da5c780
	int Right;//[Offset: 0x8, Size: 0x4] 0x715da5c800
	int Bottom;//[Offset: 0xc, Size: 0x4] 0x715da5c880

--------------------------------
Class: PaperTileMetadata // 715da3c7c0
	FName UserDataName;//[Offset: 0x0, Size: 0x8] 0x715da5f380
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30] 0x715da5da00
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1] 0x715da5da80

--------------------------------
Class: SpriteGeometryCollection // 715da3c700
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10] 0x715d89a4c0
	byte GeometryType;//[Offset: 0x10, Size: 0x1] 0x715da5f780
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4] 0x715da5d700
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4] 0x715da5d780
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x715da5d800
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4] 0x715da5d880
	float DetailAmount;//[Offset: 0x24, Size: 0x4] 0x715da5d900
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4] 0x715da5d980

--------------------------------
Class: SpriteGeometryShape // 715da3c640
	enum ShapeType;//[Offset: 0x0, Size: 0x1] 0x715d89a380
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10] 0x715d89a420
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x8] 0x715da5f500
	Vector2D BoxPosition;//[Offset: 0x20, Size: 0x8] 0x715da5f580
	float Rotation;//[Offset: 0x28, Size: 0x4] 0x715da5f600
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x715da5f680

--------------------------------
Class: PaperTileSetTerrain // 715da3c880
	FString TerrainName;//[Offset: 0x0, Size: 0x10] 0x715da5db00
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4] 0x715da5db80

--------------------------------
Class: PaperTileMap.Object // 71a4860100
	int MapWidth;//[Offset: 0x28, Size: 0x4] 0x715cfec680
	int MapHeight;//[Offset: 0x2c, Size: 0x4] 0x715cfec700
	int TileWidth;//[Offset: 0x30, Size: 0x4] 0x715cfec780
	int TileHeight;//[Offset: 0x34, Size: 0x4] 0x715cfec800
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4] 0x715cfec880
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4] 0x715cfec900
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4] 0x715cfec980
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4] 0x715cfeca00
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28] 0x715cfeca80
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8] 0x715cfecb00
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10] 0x715cf91640
	float CollisionThickness;//[Offset: 0x88, Size: 0x4] 0x715cfecc00
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1] 0x715cfecc80
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1] 0x715cfecd00
	int HexSideLength;//[Offset: 0x90, Size: 0x4] 0x715cfecd80
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8] 0x715cfece00
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4] 0x715cfece80

--------------------------------
Class: PaperTileMapActor.Actor.Object // 71a486a380
	PaperTileMapComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x715cfee700

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a486a100
	int MapWidth;//[Offset: 0x43c, Size: 0x4] 0x715cfeff80
	int MapHeight;//[Offset: 0x440, Size: 0x4] 0x715cfee780
	int TileWidth;//[Offset: 0x444, Size: 0x4] 0x715cfee800
	int TileHeight;//[Offset: 0x448, Size: 0x4] 0x715cfee880
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x450, Size: 0x8] 0x715cfee900
	MaterialInterface* Material;//[Offset: 0x458, Size: 0x8] 0x715cfee980
	PaperTileLayer*[] TileLayers;//[Offset: 0x460, Size: 0x10] 0x715cf91500
	LinearColor TileMapColor;//[Offset: 0x470, Size: 0x10] 0x715cfeea80
	int UseSingleLayerIndex;//[Offset: 0x480, Size: 0x4] 0x715cfeeb00
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1] 0x715cfeeb80
	PaperTileMap* TileMap;//[Offset: 0x488, Size: 0x8] 0x715cfeec00
	void SetTileMapColor(LinearColor NewColor);// 0x385cdb8 0x715cfd7b00
	bool SetTileMap(PaperTileMap* NewTileMap);// 0x385d3a8 0x715cfd7be0
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0x385cfac 0x715cfd7cc0
	void SetLayerColor(LinearColor NewColor, int Layer);// 0x385cc20 0x715cfd7da0
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0x385c3e4 0x715cfd7e80
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0x385c654 0x715cfd7f60
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0x385cec8 0x715cfd8040
	void RebuildCollision();// 0x385c3d0 0x715cfd8120
	bool OwnsTileMap();// 0x385d460 0x715cfd8200
	void MakeTileMapEditable();// 0x385cc0c 0x715cfd82e0
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0x385c744 0x715cfd83c0
	LinearColor GetTileMapColor();// 0x385ce5c 0x715cfd84a0
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x385ca90 0x715cfd8580
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x385c914 0x715cfd8660
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0x385d118 0x715cfd8740
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0x385d24c 0x715cfd8820
	LinearColor GetLayerColor(int Layer);// 0x385cd08 0x715cfd8900
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0x385d498 0x715cfd89e0
	PaperTileLayer* AddNewLayer();// 0x385ce94 0x715cfd8ac0

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4869c00
	static PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0x385e91c 0x715cfd7780
	static FName GetTileUserData(PaperTileInfo Tile);// 0x385edfc 0x715cfd7860
	static Transform GetTileTransform(PaperTileInfo Tile);// 0x385ed40 0x715cfd7940
	static void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0x385eafc 0x715cfd7a20

--------------------------------
Class: LightPropagationVolumeBlendable.Object // 71a4869980
	LightPropagationVolumeSettings Settings;//[Offset: 0x30, Size: 0x40] 0x715cff0780
	float BlendWeight;//[Offset: 0x70, Size: 0x4] 0x715cff0800

--------------------------------
Class: LightPropagationVolumeSettings // 715da9b200
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715dabe500
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715dabe580
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715dabe600
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715dabe680
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715dabe700
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715dabc680
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715dabc700
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x715dabc780
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x715dabc800
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x715dabc880
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x715dabc900
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x715dabc980
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x715dabca00
	float LPVIntensity;//[Offset: 0x4, Size: 0x4] 0x715dabca80
	float LPVVplInjectionBias;//[Offset: 0x8, Size: 0x4] 0x715dabcb00
	float LPVSize;//[Offset: 0xc, Size: 0x4] 0x715dabcb80
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x10, Size: 0x4] 0x715dabcc00
	float LPVSecondaryBounceIntensity;//[Offset: 0x14, Size: 0x4] 0x715dabcc80
	float LPVGeometryVolumeBias;//[Offset: 0x18, Size: 0x4] 0x715dabcd00
	float LPVEmissiveInjectionIntensity;//[Offset: 0x1c, Size: 0x4] 0x715dabcd80
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x20, Size: 0x4] 0x715dabce00
	float LPVDirectionalOcclusionRadius;//[Offset: 0x24, Size: 0x4] 0x715dabce80
	float LPVDiffuseOcclusionExponent;//[Offset: 0x28, Size: 0x4] 0x715dabcf00
	float LPVSpecularOcclusionExponent;//[Offset: 0x2c, Size: 0x4] 0x715dabcf80
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x30, Size: 0x4] 0x715dabd000
	float LPVSpecularOcclusionIntensity;//[Offset: 0x34, Size: 0x4] 0x715dabd080
	float LPVFadeRange;//[Offset: 0x38, Size: 0x4] 0x715dabd100
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x3c, Size: 0x4] 0x715dabd180

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object // 71a4869700
	AnimSequence* AnimationToPlay;//[Offset: 0x268, Size: 0x8] 0x715cff5780
	float PermutationTimeOffset;//[Offset: 0x270, Size: 0x4] 0x715cff5800
	float PlayRate;//[Offset: 0x274, Size: 0x4] 0x715cff5880
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x715cff5900
	AnimSharingInstance* Instance;//[Offset: 0x280, Size: 0x8] 0x715cff5980
	void GetInstancedActors(out Actor*[] Actors);// 0x38713a0 0x715cfde240

--------------------------------
Class: AnimSharingInstance.Object // 71a4868800
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 0x10] 0x715cf933a0
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0xa8, Size: 0x8] 0x715cff7280
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xe8, Size: 0x10] 0x715cf93440
	Enum* StateEnum;//[Offset: 0x108, Size: 0x8] 0x715cff7380
	Actor* SharingActor;//[Offset: 0x110, Size: 0x8] 0x715cff5300

--------------------------------
Class: AnimationSharingStateProcessor.Object // 71a4868080
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 0x28] 0x715cff6880
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0x3872fc8 0x715cfddd00
	Enum* GetAnimationStateEnum();// 0x3872f8c 0x715cfddde0

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object // 71a4868d00
	SkeletalMeshComponent* FromComponent;//[Offset: 0x268, Size: 0x8] 0x715cff5580
	SkeletalMeshComponent* ToComponent;//[Offset: 0x270, Size: 0x8] 0x715cff5600
	float BlendTime;//[Offset: 0x278, Size: 0x4] 0x715cff5680
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x715cff5700

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object // 71a4868a80
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x268, Size: 0x8] 0x715cff5380
	AnimSequence* AdditiveAnimation;//[Offset: 0x270, Size: 0x8] 0x715cff5400
	float Alpha;//[Offset: 0x278, Size: 0x4] 0x715cff5480
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x715cff5500

--------------------------------
Class: AnimationSharingManager.Object // 71a4868580
	Skeleton*[] Skeletons;//[Offset: 0x28, Size: 0x10] 0x715cf93260
	AnimSharingInstance*[] PerSkeletonData;//[Offset: 0x38, Size: 0x10] 0x715cf93300
	void RegisterActorWithSkeletonBP(Actor* InActor, const Skeleton* SharingSkeleton);// 0x3872240 0x715cfddec0
	static AnimationSharingManager* GetAnimationSharingManager(Object* WorldContextObject);// 0x387240c 0x715cfddfa0
	static bool CreateAnimationSharingManager(Object* WorldContextObject, const AnimationSharingSetup* Setup);// 0x3872324 0x715cfde080
	static bool AnimationSharingEnabled();// 0x3872208 0x715cfde160

--------------------------------
Class: AnimationSharingSetup.Object // 71a4868300
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 0x10] 0x715cf931c0
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 0x10] 0x715cff6c80

--------------------------------
Class: PerSkeletonAnimationSharingSetup // 715da3f1c0
	Skeleton* Skeleton;//[Offset: 0x0, Size: 0x8] 0x715da5fe80
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 0x8] 0x715da5ff00
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x10, Size: 0x8] 0x715d899fc0
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x18, Size: 0x8] 0x715d89a060
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x20, Size: 0x8] 0x715d89a100
	AnimationStateEntry[] AnimationStates;//[Offset: 0x28, Size: 0x10] 0x715d89a2e0

--------------------------------
Class: AnimationStateEntry // 715da3f100
	byte State;//[Offset: 0x0, Size: 0x1] 0x715da5ff80
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 0x10] 0x715d89a240
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715da5e980
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x715da5ea00
	float BlendTime;//[Offset: 0x1c, Size: 0x4] 0x715da5ea80
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715da5eb00
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x715da5eb80
	byte NextState;//[Offset: 0x22, Size: 0x1] 0x715da5ec00
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 0x4] 0x715da5ec80
	float WiggleTimePercentage;//[Offset: 0x28, Size: 0x4] 0x715da5ed00
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x715da5ed80

--------------------------------
Class: AnimationSetup // 715da3f040
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8] 0x715da5e780
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x8, Size: 0x8] 0x715d89a1a0
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x10, Size: 0x4] 0x715da5e800
	PerPlatformBool Enabled;//[Offset: 0x14, Size: 0x1] 0x715da5e880

--------------------------------
Class: AnimationSharingScalability // 715da3f4c0
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 0x1] 0x715da5ef00
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 0x4] 0x715da5ef80
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 0x4] 0x715da5f080
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 0x4] 0x715da5f180

--------------------------------
Class: SignificanceManager.Object // 71a4867e00
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 0x18] 0x715cff6800

--------------------------------
Class: MyPluginObject.Object // 71a4867b80
	MyPluginStruct MyStruct;//[Offset: 0x28, Size: 0x10] 0x715cff6780

--------------------------------
Class: MyPluginStruct // 715da3ef80
	FString TestString;//[Offset: 0x0, Size: 0x10] 0x715da5fe00

--------------------------------
Class: AudioCurveSourceComponent.AudioComponent.SceneComponent.ActorComponent.Object // 71a4867900
	FName CurveSourceBindingName;//[Offset: 0x7d8, Size: 0x8] 0x715cff9b00
	float CurveSyncOffset;//[Offset: 0x7e0, Size: 0x4] 0x715cff9b80

--------------------------------
Class: DatasmithObjectTemplate.Object // 71a4867180

--------------------------------
Class: DatasmithActorTemplate.DatasmithObjectTemplate.Object // 71a4867400
	<FName> Layers;//[Offset: 0x30, Size: 0x50] 0x715cf951a0
	<FName> Tags;//[Offset: 0x80, Size: 0x50] 0x715cf95240

--------------------------------
Class: DatasmithAdditionalData.Object // 71a4866f00

--------------------------------
Class: DatasmithAreaLightActor.Actor.Object // 71a4866c80
	enum LightType;//[Offset: 0x220, Size: 0x1] 0x715cf94fc0
	enum LightShape;//[Offset: 0x221, Size: 0x1] 0x715cf95060
	Vector2D Dimensions;//[Offset: 0x224, Size: 0x8] 0x715cffb400
	float Intensity;//[Offset: 0x22c, Size: 0x4] 0x715cffb480
	enum IntensityUnits;//[Offset: 0x230, Size: 0x1] 0x715cf95100
	LinearColor Color;//[Offset: 0x234, Size: 0x10] 0x715cffb580
	float Temperature;//[Offset: 0x244, Size: 0x4] 0x715cff9500
	TextureLightProfile* IESTexture;//[Offset: 0x248, Size: 0x8] 0x715cff9580
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x715cff9600
	float IESBrightnessScale;//[Offset: 0x254, Size: 0x4] 0x715cff9680
	Rotator Rotation;//[Offset: 0x258, Size: 0xc] 0x715cff9700
	float SourceRadius;//[Offset: 0x264, Size: 0x4] 0x715cff9780
	float SourceLength;//[Offset: 0x268, Size: 0x4] 0x715cff9800
	float AttenuationRadius;//[Offset: 0x26c, Size: 0x4] 0x715cff9880
	float SpotlightInnerAngle;//[Offset: 0x270, Size: 0x4] 0x715cff9900
	float SpotlightOuterAngle;//[Offset: 0x274, Size: 0x4] 0x715cff9980

--------------------------------
Class: DatasmithAreaLightActorTemplate.DatasmithObjectTemplate.Object // 71a4866a00
	enum LightType;//[Offset: 0x29, Size: 0x1] 0x715cf94de0
	enum LightShape;//[Offset: 0x2a, Size: 0x1] 0x715cf94e80
	Vector2D Dimensions;//[Offset: 0x2c, Size: 0x8] 0x715cffad00
	LinearColor Color;//[Offset: 0x34, Size: 0x10] 0x715cffad80
	float Intensity;//[Offset: 0x44, Size: 0x4] 0x715cffae00
	enum IntensityUnits;//[Offset: 0x48, Size: 0x1] 0x715cf94f20
	float Temperature;//[Offset: 0x4c, Size: 0x4] 0x715cffaf00
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x28] 0x715cffaf80
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x715cffb000
	float IESBrightnessScale;//[Offset: 0x7c, Size: 0x4] 0x715cffb080
	Rotator Rotation;//[Offset: 0x80, Size: 0xc] 0x715cffb100
	float SourceRadius;//[Offset: 0x8c, Size: 0x4] 0x715cffb180
	float SourceLength;//[Offset: 0x90, Size: 0x4] 0x715cffb200
	float AttenuationRadius;//[Offset: 0x94, Size: 0x4] 0x715cffb280

--------------------------------
Class: DatasmithAssetImportData.AssetImportData.Object // 71a4866780

--------------------------------
Class: DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object // 71a4866280

--------------------------------
Class: DatasmithStaticMeshCADImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object // 71a4866000

--------------------------------
Class: DatasmithSceneImportData.AssetImportData.Object // 71a4865d80

--------------------------------
Class: DatasmithTranslatedSceneImportData.DatasmithSceneImportData.AssetImportData.Object // 71a4865b00

--------------------------------
Class: DatasmithCADImportSceneData.DatasmithSceneImportData.AssetImportData.Object // 71a4865880

--------------------------------
Class: DatasmithMDLSceneImportData.DatasmithSceneImportData.AssetImportData.Object // 71a4865600

--------------------------------
Class: DatasmithGLTFSceneImportData.DatasmithSceneImportData.AssetImportData.Object // 71a4865380
	FString Generator;//[Offset: 0x28, Size: 0x10] 0x715cffa980
	float Version;//[Offset: 0x38, Size: 0x4] 0x715cffaa00
	FString Author;//[Offset: 0x40, Size: 0x10] 0x715cffaa80
	FString License;//[Offset: 0x50, Size: 0x10] 0x715cffab00
	FString Source;//[Offset: 0x60, Size: 0x10] 0x715cffab80

--------------------------------
Class: DatasmithStaticMeshGLTFImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object // 71a486f600
	FString SourceMeshName;//[Offset: 0x28, Size: 0x10] 0x715cffa900

--------------------------------
Class: DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object // 71a486f380
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715cffa700
	FString TexturesDir;//[Offset: 0x30, Size: 0x10] 0x715cffa780
	byte IntermediateSerialization;//[Offset: 0x40, Size: 0x1] 0x715cffa800
	bool bColorizeMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x715cffa880

--------------------------------
Class: DatasmithDeltaGenAssetImportData.DatasmithAssetImportData.AssetImportData.Object // 71a486f100

--------------------------------
Class: DatasmithDeltaGenSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object // 71a486ee80
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x715cffc300
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x715cffc380
	bool bRemoveInvisibleNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x715cffc400
	bool bSimplifyNodeHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x715cffc480
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1] 0x715cffc500
	FString VarPath;//[Offset: 0x48, Size: 0x10] 0x715cffc580
	bool bImportPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715cffc600
	FString PosPath;//[Offset: 0x60, Size: 0x10] 0x715cffa580
	bool bImportTml;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x715cffa600
	FString TmlPath;//[Offset: 0x78, Size: 0x10] 0x715cffa680

--------------------------------
Class: DatasmithVREDAssetImportData.DatasmithAssetImportData.AssetImportData.Object // 71a486ec00

--------------------------------
Class: DatasmithVREDSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object // 71a486e980
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x715cffbd80
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x715cffbe00
	bool bImportMats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x715cffbe80
	FString MatsPath;//[Offset: 0x48, Size: 0x10] 0x715cffbf00
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715cffbf80
	bool bCleanVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x715cffc000
	FString VarPath;//[Offset: 0x60, Size: 0x10] 0x715cffc080
	bool bImportLightInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x715cffc100
	FString LightInfoPath;//[Offset: 0x78, Size: 0x10] 0x715cffc180
	bool bImportClipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715cffc200
	FString ClipInfoPath;//[Offset: 0x90, Size: 0x10] 0x715cffc280

--------------------------------
Class: DatasmithIFCSceneImportData.DatasmithSceneImportData.AssetImportData.Object // 71a486e700

--------------------------------
Class: DatasmithStaticMeshIFCImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object // 71a486e480
	FString SourceGlobalId;//[Offset: 0x28, Size: 0x10] 0x715cffbd00

--------------------------------
Class: DatasmithAssetUserData.AssetUserData.Object // 71a486e200
	<FName,FString> MetaData;//[Offset: 0x28, Size: 0x50] 0x715cecbe00

--------------------------------
Class: DatasmithCineCameraActorTemplate.DatasmithObjectTemplate.Object // 71a486dd00
	DatasmithCameraLookatTrackingSettingsTemplate LookatTrackingSettings;//[Offset: 0x30, Size: 0x30] 0x715cffbb80

--------------------------------
Class: DatasmithCameraLookatTrackingSettingsTemplate // 715da3eec0
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715da5fc80
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715da5fd00
	Actor* ActorToTrack;//[Offset: 0x8, Size: 0x28] 0x715da5fd80

--------------------------------
Class: DatasmithCineCameraComponentTemplate.DatasmithObjectTemplate.Object // 71a486da80
	DatasmithCameraFilmbackSettingsTemplate FilmbackSettings;//[Offset: 0x2c, Size: 0x8] 0x715cffb880
	DatasmithCameraLensSettingsTemplate LensSettings;//[Offset: 0x34, Size: 0x4] 0x715cffb900
	DatasmithCameraFocusSettingsTemplate FocusSettings;//[Offset: 0x38, Size: 0x8] 0x715cffb980
	float CurrentFocalLength;//[Offset: 0x40, Size: 0x4] 0x715cffba00
	float CurrentAperture;//[Offset: 0x44, Size: 0x4] 0x715cffba80
	DatasmithPostProcessSettingsTemplate PostProcessSettings;//[Offset: 0x50, Size: 0x40] 0x715cffbb00

--------------------------------
Class: DatasmithCameraFilmbackSettingsTemplate // 715da3ebc0
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x715da80b00
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x715da80b80

--------------------------------
Class: DatasmithCameraLensSettingsTemplate // 715da3ec80
	float MaxFStop;//[Offset: 0x0, Size: 0x4] 0x715da80c00

--------------------------------
Class: DatasmithCameraFocusSettingsTemplate // 715da3ed40
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x715d899f20
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x715da80d00

--------------------------------
Class: DatasmithPostProcessSettingsTemplate // 715da3ee00
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715da80d80
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715da80e00
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715da80e80
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715da80f00
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715da80f80
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715da81000
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715da81080
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x715da5f800
	float WhiteTemp;//[Offset: 0x4, Size: 0x4] 0x715da5f880
	float VignetteIntensity;//[Offset: 0x8, Size: 0x4] 0x715da5f900
	LinearColor FilmWhitePoint;//[Offset: 0xc, Size: 0x10] 0x715da5f980
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10] 0x715da5fa00
	byte AutoExposureMethod;//[Offset: 0x30, Size: 0x1] 0x715da5fa80
	float CameraISO;//[Offset: 0x34, Size: 0x4] 0x715da5fb00
	float CameraShutterSpeed;//[Offset: 0x38, Size: 0x4] 0x715da5fb80
	float DepthOfFieldFstop;//[Offset: 0x3c, Size: 0x4] 0x715da5fc00

--------------------------------
Class: DatasmithContentBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a486d800
	static FString GetDatasmithUserDataValueForKey(Object* Object, FName Key);// 0x38880e0 0x715cfdf580
	static void GetDatasmithUserDataKeysAndValuesForValue(Object* Object, FString StringToMatch, out FName[] OutKeys, out FString[] OutValues);// 0x3887f00 0x715cfdf660
	static DatasmithAssetUserData* GetDatasmithUserData(Object* Object);// 0x3888210 0x715cfdf740

--------------------------------
Class: DatasmithCustomActionBase.Object // 71a486d580

--------------------------------
Class: DatasmithImportedSequencesActor.Actor.Object // 71a486d300
	LevelSequence*[] ImportedSequences;//[Offset: 0x220, Size: 0x10] 0x715cf94c00
	void PlayLevelSequence(LevelSequence* SequenceToPlay);// 0x38886e0 0x715cfdf4a0

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object // 71a4901c80
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8] 0x715d177e00
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50] 0x715d177e80
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0] 0x715d177f00
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50] 0x715cecd180
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8] 0x715d0ba600
	void RemoveMetaDataByClass(class Object InClass);// 0x57e491c 0x715d166360
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x57e4a44 0x715d166440
	Object* FindMetaDataByClass(class Object InClass);// 0x57e4ae0 0x715d166520
	Object* CopyMetaData(Object* InMetaData);// 0x57e49a8 0x715d166600

--------------------------------
Class: LevelSequenceObjectReferenceMap // 715dadc7c0

--------------------------------
Class: LevelSequenceBindingReferences // 715dadcac0
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50] 0x715dadca00
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50] 0x715dae5560

--------------------------------
Class: LevelSequenceBindingReferenceArray // 715dadc940
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10] 0x715dae54c0

--------------------------------
Class: LevelSequenceBindingReference // 715dadc880
	FString PackageName;//[Offset: 0x0, Size: 0x10] 0x715db08b80
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18] 0x715db08c00
	FString ObjectPath;//[Offset: 0x28, Size: 0x10] 0x715db08c80

--------------------------------
Class: LevelSequenceObject // 715dadc640
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c] 0x715db08980
	FString ComponentName;//[Offset: 0x20, Size: 0x10] 0x715db08a00
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8] 0x715db08a80

--------------------------------
Class: DatasmithOptionsBase.Object // 71a486d080

--------------------------------
Class: DatasmithCommonTessellationOptions.DatasmithOptionsBase.Object // 71a486ce00
	DatasmithTessellationOptions Options;//[Offset: 0x28, Size: 0x10] 0x715cffd380

--------------------------------
Class: DatasmithTessellationOptions // 715da3eb00
	float ChordTolerance;//[Offset: 0x0, Size: 0x4] 0x715da80900
	float MaxEdgeLength;//[Offset: 0x4, Size: 0x4] 0x715da80980
	float NormalTolerance;//[Offset: 0x8, Size: 0x4] 0x715da80a00
	enum StitchingTechnique;//[Offset: 0xc, Size: 0x1] 0x715d899e80

--------------------------------
Class: DatasmithImportOptions.DatasmithOptionsBase.Object // 71a486cb80
	enum SearchPackagePolicy;//[Offset: 0x28, Size: 0x1] 0x715cf94700
	enum MaterialConflictPolicy;//[Offset: 0x29, Size: 0x1] 0x715cf947a0
	enum TextureConflictPolicy;//[Offset: 0x2a, Size: 0x1] 0x715cf94840
	enum StaticMeshActorImportPolicy;//[Offset: 0x2b, Size: 0x1] 0x715cf948e0
	enum LightImportPolicy;//[Offset: 0x2c, Size: 0x1] 0x715cf94980
	enum CameraImportPolicy;//[Offset: 0x2d, Size: 0x1] 0x715cf94a20
	enum OtherActorImportPolicy;//[Offset: 0x2e, Size: 0x1] 0x715cf94ac0
	enum MaterialQuality;//[Offset: 0x2f, Size: 0x1] 0x715cf94b60
	DatasmithImportBaseOptions BaseOptions;//[Offset: 0x34, Size: 0x14] 0x715cffd180
	DatasmithReimportOptions ReimportOptions;//[Offset: 0x48, Size: 0x2] 0x715cffd200
	FString Filename;//[Offset: 0x50, Size: 0x10] 0x715cffd280
	FString FilePath;//[Offset: 0x60, Size: 0x10] 0x715cffd300

--------------------------------
Class: DatasmithImportBaseOptions // 715da3ea40
	enum SceneHandling;//[Offset: 0x0, Size: 0x1] 0x715d899ca0
	bool bIncludeGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715da80300
	bool bIncludeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715da80380
	bool bIncludeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715da80400
	bool bIncludeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715da80480
	bool bIncludeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x715da80500
	DatasmithAssetImportOptions AssetOptions;//[Offset: 0x8, Size: 0x8] 0x715da80600
	DatasmithStaticMeshImportOptions StaticMeshOptions;//[Offset: 0x10, Size: 0x4] 0x715da80880

--------------------------------
Class: DatasmithAssetImportOptions // 715da3e8c0
	FName PackagePath;//[Offset: 0x0, Size: 0x8] 0x715da80580

--------------------------------
Class: DatasmithStaticMeshImportOptions // 715da3e980
	enum MinLightmapResolution;//[Offset: 0x0, Size: 0x1] 0x715d899d40
	enum MaxLightmapResolution;//[Offset: 0x1, Size: 0x1] 0x715d899de0
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715da80780
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715da80800

--------------------------------
Class: DatasmithReimportOptions // 715da3e800
	bool bUpdateActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da80180
	bool bRespawnDeletedActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715da80200

--------------------------------
Class: DatasmithLandscapeTemplate.DatasmithObjectTemplate.Object // 71a486c900
	MaterialInterface* LandscapeMaterial;//[Offset: 0x30, Size: 0x8] 0x715cffcc80
	int StaticLightingLOD;//[Offset: 0x38, Size: 0x4] 0x715cffcd00

--------------------------------
Class: DatasmithLightComponentTemplate.DatasmithObjectTemplate.Object // 71a486c680
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x715cffc780
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x715cffc800
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x715cffc880
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x715cffc900
	float Intensity;//[Offset: 0x2c, Size: 0x4] 0x715cffc980
	float Temperature;//[Offset: 0x30, Size: 0x4] 0x715cffca00
	float IESBrightnessScale;//[Offset: 0x34, Size: 0x4] 0x715cffca80
	LinearColor LightColor;//[Offset: 0x38, Size: 0x10] 0x715cffcb00
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x48, Size: 0x8] 0x715cffcb80
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x8] 0x715cffcc00

--------------------------------
Class: DatasmithMaterialInstanceTemplate.DatasmithObjectTemplate.Object // 71a486c400
	MaterialInterface* ParentMaterial;//[Offset: 0x30, Size: 0x28] 0x715cffe480
	<FName,float> ScalarParameterValues;//[Offset: 0x58, Size: 0x50] 0x715cecbbc0
	<FName,LinearColor> VectorParameterValues;//[Offset: 0xa8, Size: 0x50] 0x715cecbc80
	<FName,Texture*> TextureParameterValues;//[Offset: 0xf8, Size: 0x50] 0x715cecbd40
	DatasmithStaticParameterSetTemplate StaticParameters;//[Offset: 0x148, Size: 0x50] 0x715cffc700

--------------------------------
Class: DatasmithStaticParameterSetTemplate // 715da3e740
	<FName,bool> StaticSwitchParameters;//[Offset: 0x0, Size: 0x50] 0x715da3e680

--------------------------------
Class: DatasmithPointLightComponentTemplate.DatasmithObjectTemplate.Object // 71a486c180
	enum IntensityUnits;//[Offset: 0x29, Size: 0x1] 0x715cf94660
	float SourceRadius;//[Offset: 0x2c, Size: 0x4] 0x715cffe300
	float SourceLength;//[Offset: 0x30, Size: 0x4] 0x715cffe380
	float AttenuationRadius;//[Offset: 0x34, Size: 0x4] 0x715cffe400

--------------------------------
Class: DatasmithPostProcessVolumeTemplate.DatasmithObjectTemplate.Object // 71a486bf00
	DatasmithPostProcessSettingsTemplate Settings;//[Offset: 0x30, Size: 0x40] 0x715cffe100
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x715cffe180
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x715cffe200

--------------------------------
Class: DatasmithScene.Object // 71a486bc80

--------------------------------
Class: DatasmithSceneActor.Actor.Object // 71a486ba00
	DatasmithScene* Scene;//[Offset: 0x220, Size: 0x8] 0x715cffdf80
	<FName,Actor*> RelatedActors;//[Offset: 0x228, Size: 0x50] 0x715cecbb00

--------------------------------
Class: DatasmithSceneComponentTemplate.DatasmithObjectTemplate.Object // 71a486b780
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30] 0x715cffdd80
	byte Mobility;//[Offset: 0x60, Size: 0x1] 0x715cffde00
	SceneComponent* AttachParent;//[Offset: 0x68, Size: 0x28] 0x715cffde80
	<FName> Tags;//[Offset: 0x90, Size: 0x50] 0x715cf945c0

--------------------------------
Class: DatasmithSkyLightComponentTemplate.DatasmithObjectTemplate.Object // 71a486b500
	byte SourceType;//[Offset: 0x29, Size: 0x1] 0x715cffdc00
	int CubemapResolution;//[Offset: 0x2c, Size: 0x4] 0x715cffdc80
	TextureCube* Cubemap;//[Offset: 0x30, Size: 0x8] 0x715cffdd00

--------------------------------
Class: DatasmithSpotLightComponentTemplate.DatasmithObjectTemplate.Object // 71a486b280
	float InnerConeAngle;//[Offset: 0x2c, Size: 0x4] 0x715cffdb00
	float OuterConeAngle;//[Offset: 0x30, Size: 0x4] 0x715cffdb80

--------------------------------
Class: DatasmithStaticMeshComponentTemplate.DatasmithObjectTemplate.Object // 71a486b000
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 0x8] 0x715cffda00
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x38, Size: 0x10] 0x715cf94520

--------------------------------
Class: DatasmithStaticMeshTemplate.DatasmithObjectTemplate.Object // 71a486ad80
	DatasmithMeshSectionInfoMapTemplate SectionInfoMap;//[Offset: 0x30, Size: 0x50] 0x715cffd780
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 0x4] 0x715cffd800
	int LightMapResolution;//[Offset: 0x84, Size: 0x4] 0x715cffd880
	DatasmithMeshBuildSettingsTemplate[] BuildSettings;//[Offset: 0x88, Size: 0x10] 0x715cf943e0
	DatasmithStaticMaterialTemplate[] StaticMaterials;//[Offset: 0x98, Size: 0x10] 0x715cf94480

--------------------------------
Class: DatasmithMeshSectionInfoMapTemplate // 715da3e5c0
	<uint32,DatasmithMeshSectionInfoTemplate> Map;//[Offset: 0x0, Size: 0x50] 0x715da3e500

--------------------------------
Class: DatasmithMeshSectionInfoTemplate // 715da3e440
	int MaterialIndex;//[Offset: 0x0, Size: 0x4] 0x715da82000

--------------------------------
Class: DatasmithMeshBuildSettingsTemplate // 715da3e2c0
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715da81980
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715da81a00
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715da81a80
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715da81b00
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715da81b80
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715da81c00
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715da81c80
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x715da81d00
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4] 0x715da81d80
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4] 0x715da81e00
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4] 0x715da81e80

--------------------------------
Class: DatasmithStaticMaterialTemplate // 715da3e380
	FName MaterialSlotName;//[Offset: 0x0, Size: 0x8] 0x715da81f00
	MaterialInterface* MaterialInterface;//[Offset: 0x8, Size: 0x8] 0x715da81f80

--------------------------------
Class: LevelVariantSets.Object // 71a486ab00
	class Object* DirectorClass;//[Offset: 0x28, Size: 0x8] 0x715cf942a0
	VariantSet*[] VariantSets;//[Offset: 0x30, Size: 0x10] 0x715cf94340
	VariantSet* GetVariantSetByName(FString VariantSetName);// 0x389d680 0x715cfdf200
	VariantSet* GetVariantSet(int VariantSetIndex);// 0x389d788 0x715cfdf2e0
	int GetNumVariantSets();// 0x389d834 0x715cfdf3c0

--------------------------------
Class: VariantSet.Object // 71a4883f80
	FText DisplayText;//[Offset: 0x28, Size: 0x18] 0x715d030c80
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715d030d00
	Variant*[] Variants;//[Offset: 0x60, Size: 0x10] 0x715cf96500
	void SetDisplayText(out const FText NewDisplayText);// 0x38a06e4 0x715d0214a0
	Variant* GetVariantByName(FString VariantName);// 0x38a042c 0x715d021580
	Variant* GetVariant(int VariantIndex);// 0x38a0534 0x715d021660
	int GetNumVariants();// 0x38a05e0 0x715d021740
	FText GetDisplayText();// 0x38a0614 0x715d021820

--------------------------------
Class: Variant.Object // 71a4884480
	FText DisplayText;//[Offset: 0x28, Size: 0x18] 0x715cfffb00
	VariantObjectBinding*[] ObjectBindings;//[Offset: 0x58, Size: 0x10] 0x715cf966e0
	Texture2D* Thumbnail;//[Offset: 0x68, Size: 0x8] 0x715cfffc00
	void SwitchOn();// 0x389f974 0x715d021900
	void SetDisplayText(out const FText NewDisplayText);// 0x389fb38 0x715d0219e0
	bool IsActive();// 0x389f93c 0x715d021ac0
	Texture2D* GetThumbnail();// 0x389f908 0x715d021ba0
	int GetNumActors();// 0x389fa34 0x715d021c80
	FText GetDisplayText();// 0x389fa68 0x715cfde780
	Actor* GetActor(int ActorIndex);// 0x389f988 0x715cfde860

--------------------------------
Class: VariantObjectBinding.Object // 71a4884200
	FString CachedActorLabel;//[Offset: 0x28, Size: 0x10] 0x715cfff880
	SoftObjectPath ObjectPtr;//[Offset: 0x38, Size: 0x18] 0x715cfff900
	Object* LazyObjectPtr;//[Offset: 0x50, Size: 0x1c] 0x715cfff980
	PropertyValue*[] CapturedProperties;//[Offset: 0x70, Size: 0x10] 0x715cf965a0
	FunctionCaller[] FunctionCallers;//[Offset: 0x80, Size: 0x10] 0x715cf96640

--------------------------------
Class: PropertyValue.Object // 71a486fd80
	Properties(FieldPathProperty)[] Properties;//[Offset: 0x88, Size: 0x10] 0x715cf93ee0
	int[] PropertyIndices;//[Offset: 0x98, Size: 0x10] 0x715cf93f80
	CapturedPropSegment[] CapturedPropSegments;//[Offset: 0xa8, Size: 0x10] 0x715cf94020
	FString FullDisplayString;//[Offset: 0xb8, Size: 0x10] 0x715cffeb80
	FName PropertySetterName;//[Offset: 0xc8, Size: 0x8] 0x715cffec00
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0xd0, Size: 0x50] 0x715cecba40
	bool bHasRecordedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x715cffed80
	class Object* LeafPropertyClass;//[Offset: 0x128, Size: 0x8] 0x715cf940c0
	byte[] ValueBytes;//[Offset: 0x138, Size: 0x10] 0x715cf94160
	enum PropCategory;//[Offset: 0x148, Size: 0x1] 0x715cf94200
	bool HasRecordedData();// 0x389e81c 0x715cfdebe0
	FText GetPropertyTooltip();// 0x389e8d8 0x715cfdecc0
	FString GetFullDisplayString();// 0x389e854 0x715cfdeda0

--------------------------------
Class: CapturedPropSegment // 715da3e140
	FString PropertyName;//[Offset: 0x0, Size: 0x10] 0x715da81780
	int PropertyIndex;//[Offset: 0x10, Size: 0x4] 0x715da81800
	FString ComponentName;//[Offset: 0x18, Size: 0x10] 0x715da81880

--------------------------------
Class: FunctionCaller // 715da3e200
	FName FunctionName;//[Offset: 0x0, Size: 0x8] 0x715da81900

--------------------------------
Class: LevelVariantSetsActor.Actor.Object // 71a486a880
	SoftObjectPath LevelVariantSets;//[Offset: 0x220, Size: 0x18] 0x715cfff080
	bool SwitchOnVariantByName(FString VariantSetName, FString VariantName);// 0x389de28 0x715cfdee80
	bool SwitchOnVariantByIndex(int VariantSetIndex, int VariantIndex);// 0x389dd38 0x715cfdef60
	void SetLevelVariantSets(LevelVariantSets* InVariantSets);// 0x389dfcc 0x715cfdf040
	LevelVariantSets* GetLevelVariantSets(bool bLoad);// 0x389e070 0x715cfdf120

--------------------------------
Class: LevelVariantSetsFunctionDirector.Object // 71a486a600

--------------------------------
Class: PropertyValueTransform.PropertyValue.Object // 71a486fb00

--------------------------------
Class: PropertyValueVisibility.PropertyValue.Object // 71a486f880

--------------------------------
Class: PropertyValueColor.PropertyValue.Object // 71a4885100

--------------------------------
Class: PropertyValueMaterial.PropertyValue.Object // 71a4884e80

--------------------------------
Class: PropertyValueOption.PropertyValue.Object // 71a4884c00

--------------------------------
Class: PropertyValueSoftObject.PropertyValue.Object // 71a4884980

--------------------------------
Class: SwitchActor.Actor.Object // 71a4884700
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8] 0x715cffe780
	int LastSelectedOption;//[Offset: 0x240, Size: 0x4] 0x715cffe800
	void SelectOption(int OptionIndex);// 0x389f400 0x715cfde940
	int GetSelectedOption();// 0x389f4a4 0x715cfdea20
	Actor*[] GetOptions();// 0x389f4d8 0x715cfdeb00

--------------------------------
Class: AutomationUtilsBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4883d00
	static void TakeGameplayAutomationScreenshot(const FString ScreenshotName, float MaxGlobalError, float MaxLocalError, FString MapNameOverride);// 0x38a716c 0x715d0213c0

--------------------------------
Class: GeometryCache.Object // 71a4883a80
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0x10] 0x715cf963c0
	GeometryCacheTrack*[] Tracks;//[Offset: 0x40, Size: 0x10] 0x715cf96460
	int StartFrame;//[Offset: 0x60, Size: 0x4] 0x715d030980
	int EndFrame;//[Offset: 0x64, Size: 0x4] 0x715d030a00

--------------------------------
Class: GeometryCacheTrack.Object // 71a4882b80
	float Duration;//[Offset: 0x28, Size: 0x4] 0x715d031880

--------------------------------
Class: GeometryCacheActor.Actor.Object // 71a4883800
	GeometryCacheComponent* GeometryCacheComponent;//[Offset: 0x220, Size: 0x8] 0x715d030780
	GeometryCacheComponent* GetGeometryCacheComponent();// 0x38bc3d8 0x715d0212e0

--------------------------------
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4882e00
	GeometryCache* GeometryCache;//[Offset: 0x440, Size: 0x8] 0x715d031900
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1] 0x715d031980
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1] 0x715d031a00
	float StartTimeOffset;//[Offset: 0x44c, Size: 0x4] 0x715d031a80
	float PlaybackSpeed;//[Offset: 0x450, Size: 0x4] 0x715d031b00
	int NumTracks;//[Offset: 0x454, Size: 0x4] 0x715d031b80
	float ElapsedTime;//[Offset: 0x458, Size: 0x4] 0x715d031c00
	float Duration;//[Offset: 0x48c, Size: 0x4] 0x715d031c80
	bool bManualTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1] 0x715d031d00
	void TickAtThisTime(const float Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping);// 0x38bcbf8 0x715d020160
	void Stop();// 0x38bd214 0x715d020240
	void SetStartTimeOffset(const float NewStartTimeOffset);// 0x38bce60 0x715d020320
	void SetPlaybackSpeed(const float NewPlaybackSpeed);// 0x38bcfe8 0x715d020400
	void SetLooping(const bool bNewLooping);// 0x38bd0c0 0x715d0204e0
	bool SetGeometryCache(GeometryCache* NewGeomCache);// 0x38bcf38 0x715d0205c0
	void PlayReversedFromEnd();// 0x38bd23c 0x715d0206a0
	void PlayReversed();// 0x38bd250 0x715d020780
	void PlayFromStart();// 0x38bd264 0x715d020860
	void Play();// 0x38bd278 0x715d020940
	void Pause();// 0x38bd228 0x715d020a20
	bool IsPlayingReversed();// 0x38bd1a4 0x715d020b00
	bool IsPlaying();// 0x38bd1dc 0x715d020be0
	bool IsLooping();// 0x38bd16c 0x715d020cc0
	float GetStartTimeOffset();// 0x38bcf04 0x715d020da0
	float GetPlaybackSpeed();// 0x38bd08c 0x715d020e80
	float GetPlaybackDirection();// 0x38bcdf8 0x715d020f60
	int GetNumberOfFrames();// 0x38bcd90 0x715d021040
	float GetDuration();// 0x38bcdc4 0x715d021120
	float GetAnimationTime();// 0x38bce2c 0x715d021200

--------------------------------
Class: GeometryCacheCodecBase.Object // 71a4883580
	int[] TopologyRanges;//[Offset: 0x28, Size: 0x10] 0x715cf96320

--------------------------------
Class: GeometryCacheCodecRaw.GeometryCacheCodecBase.Object // 71a4883300
	int DummyProperty;//[Offset: 0x38, Size: 0x4] 0x715d030680

--------------------------------
Class: GeometryCacheCodecV1.GeometryCacheCodecBase.Object // 71a4883080

--------------------------------
Class: GeometryCacheTrack_FlipbookAnimation.GeometryCacheTrack.Object // 71a4882900
	uint32 NumMeshSamples;//[Offset: 0x54, Size: 0x4] 0x715d031700
	void AddMeshSample(out const GeometryCacheMeshData MeshData, const float SampleTime);// 0x38bdfa8 0x715d020080

--------------------------------
Class: GeometryCacheMeshData // 715da3dfc0

--------------------------------
Class: GeometryCacheTrackStreamable.GeometryCacheTrack.Object // 71a4882680
	GeometryCacheCodecBase* Codec;//[Offset: 0x58, Size: 0x8] 0x715d031600
	float StartSampleTime;//[Offset: 0xc8, Size: 0x4] 0x715d031680

--------------------------------
Class: GeometryCacheTrack_TransformAnimation.GeometryCacheTrack.Object // 71a4882400
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x38be4c8 0x715d023960

--------------------------------
Class: GeometryCacheTrack_TransformGroupAnimation.GeometryCacheTrack.Object // 71a4882180
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x38be7bc 0x715d023880

--------------------------------
Class: MovieSceneGeometryCacheSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a4881f00
	MovieSceneGeometryCacheParams Params;//[Offset: 0xd8, Size: 0x40] 0x715d031480

--------------------------------
Class: MovieSceneGeometryCacheParams // 715da3fe80
	GeometryCache* GeometryCacheAsset;//[Offset: 0x0, Size: 0x8] 0x715da81300
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x715da81380
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x715da81400
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x715da81480
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x715da81500
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x715da81580
	float StartOffset;//[Offset: 0x1c, Size: 0x4] 0x715da81600
	float EndOffset;//[Offset: 0x20, Size: 0x4] 0x715da81680
	SoftObjectPath GeometryCache;//[Offset: 0x28, Size: 0x18] 0x715da81700

--------------------------------
Class: MovieSceneGeometryCacheTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a4881c80
	MovieSceneSection*[] AnimationSections;//[Offset: 0x58, Size: 0x10] 0x715cf96280

--------------------------------
Class: AndroidMediaSettings.Object // 71a4881a00
	bool CacheableVideoSampleBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d031380

--------------------------------
Class: MediaSource.Object // 71a4881280
	bool Validate();// 0x57d4a6c 0x715d023340
	void SetMediaOptionString(out const FName Key, FString Value);// 0x57d4688 0x715d023420
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x57d4788 0x715d023500
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x57d487c 0x715d0235e0
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x57d4970 0x715d0236c0
	FString GetUrl();// 0x57d4aac 0x715d0237a0

--------------------------------
Class: BaseMediaSource.MediaSource.Object // 71a4881500
	FName PlayerName;//[Offset: 0x80, Size: 0x8] 0x715d032f00

--------------------------------
Class: ImgMediaSource.BaseMediaSource.MediaSource.Object // 71a4881780
	FrameRate FrameRateOverride;//[Offset: 0x88, Size: 0x8] 0x715d032c00
	FString ProxyOverride;//[Offset: 0x90, Size: 0x10] 0x715d032c80
	DirectoryPath SequencePath;//[Offset: 0xa0, Size: 0x10] 0x715d032d00
	void SetSequencePath(FString Path);// 0x38e06ac 0x715d0230a0
	FString GetSequencePath();// 0x38e075c 0x715d023180
	void GetProxies(out FString[] OutProxies);// 0x38e085c 0x715d023260

--------------------------------
Class: ImgMediaSettings.Object // 71a4881000
	FrameRate DefaultFrameRate;//[Offset: 0x28, Size: 0x8] 0x715d032700
	float CacheBehindPercentage;//[Offset: 0x30, Size: 0x4] 0x715d032780
	float CacheSizeGB;//[Offset: 0x34, Size: 0x4] 0x715d032800
	int CacheThreads;//[Offset: 0x38, Size: 0x4] 0x715d032880
	int CacheThreadStackSizeKB;//[Offset: 0x3c, Size: 0x4] 0x715d032900
	float GlobalCacheSizeGB;//[Offset: 0x40, Size: 0x4] 0x715d032980
	bool UseGlobalCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x715d032a00
	uint32 ExrDecoderThreads;//[Offset: 0x48, Size: 0x4] 0x715d032a80
	FString DefaultProxy;//[Offset: 0x50, Size: 0x10] 0x715d032b00
	bool UseDefaultProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715d032b80

--------------------------------
Class: MovieSceneMediaPlayerPropertySection.MovieSceneSection.MovieSceneSignedObject.Object // 71a4880d80
	MediaSource* MediaSource;//[Offset: 0xd8, Size: 0x8] 0x715d032600
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x715d032680

--------------------------------
Class: MovieSceneMediaPlayerPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a4880b00

--------------------------------
Class: MovieSceneMediaSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a4880880
	MediaSource* MediaSource;//[Offset: 0xd8, Size: 0x8] 0x715d032280
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x715d032300
	FrameNumber StartFrameOffset;//[Offset: 0xe4, Size: 0x4] 0x715d032380
	MediaTexture* MediaTexture;//[Offset: 0xe8, Size: 0x8] 0x715d032400
	MediaSoundComponent* MediaSoundComponent;//[Offset: 0xf0, Size: 0x8] 0x715d032480
	bool bUseExternalMediaPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x715d032500
	MediaPlayer* ExternalMediaPlayer;//[Offset: 0x100, Size: 0x8] 0x715d032580

--------------------------------
Class: MediaTexture.Texture.StreamableRenderAsset.Object // 71a49cf100
	byte AddressX;//[Offset: 0xb8, Size: 0x1] 0x715caf3680
	byte AddressY;//[Offset: 0xb9, Size: 0x1] 0x715caf3700
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1] 0x715caf3780
	LinearColor ClearColor;//[Offset: 0xbc, Size: 0x10] 0x715caf3800
	bool EnableGenMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1] 0x715caf3880
	byte NumMips;//[Offset: 0xcd, Size: 0x1] 0x715caf3900
	MediaPlayer* MediaPlayer;//[Offset: 0xd0, Size: 0x8] 0x715caf3980
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x57d4f18 0x715cae67c0
	int GetWidth();// 0x57d4fbc 0x715cae68a0
	MediaPlayer* GetMediaPlayer();// 0x57d4ff0 0x715cae6980
	int GetHeight();// 0x57d5024 0x715cae6a60
	float GetAspectRatio();// 0x57d5058 0x715cae6b40

--------------------------------
Class: MediaPlayer.Object // 71a49c5380
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10] 0x715caf3080
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10] 0x715caf3100
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10] 0x715caf3180
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10] 0x715caf1100
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10] 0x715caf1180
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10] 0x715caf1200
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10] 0x715caf1280
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10] 0x715caf1300
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8] 0x715caf1380
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8] 0x715caf1400
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8] 0x715caf1480
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x715caf1500
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x715caf1580
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1] 0x715caf1600
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1] 0x715caf1680
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8] 0x715caf1700
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4] 0x715caf1780
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8] 0x715caf1800
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4] 0x715caf1880
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4] 0x715caf1900
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0xc] 0x715caf1980
	Guid PlayerGuid;//[Offset: 0x120, Size: 0x10] 0x715caf1a00
	bool SupportsSeeking();// 0x57ce2ec 0x715cae44c0
	bool SupportsScrubbing();// 0x57ce324 0x715cae45a0
	bool SupportsRate(float Rate, bool Unthinned);// 0x57ce35c 0x715cae4680
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x57ce4f8 0x715cae4760
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x57ce604 0x715cae4840
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x57ce740 0x715cae4920
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x57ce874 0x715cae4a00
	void SetTimeDelay(Timespan TimeDelay);// 0x57ce458 0x715cae4ae0
	bool SetRate(float Rate);// 0x57cea58 0x715cae4bc0
	bool SetNativeVolume(float Volume);// 0x57ce9a8 0x715cae4ca0
	void SetMediaOptions(const MediaSource* Options);// 0x57ceb08 0x715cae4d80
	bool SetLooping(bool Looping);// 0x57cebac 0x715cae4e60
	void SetDesiredPlayerName(FName PlayerName);// 0x57cec64 0x715cae4f40
	void SetBlockOnTime(out const Timespan Time);// 0x57ced08 0x715cae5020
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x57cedb8 0x715cae5100
	bool Seek(out const Timespan Time);// 0x57ceeac 0x715cae51e0
	bool Rewind();// 0x57cef68 0x715cae52c0
	bool Reopen();// 0x57cefa0 0x715cae53a0
	bool Previous();// 0x57cefd8 0x715cae5480
	void PlayAndSeek();// 0x57cf010 0x715cae5560
	bool Play();// 0x57cf024 0x715cae5640
	bool Pause();// 0x57cf05c 0x715cae1d60
	bool OpenUrl(FString URL);// 0x57cf094 0x715cae1e40
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0x57cf340 0x715cae1f20
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0x57cf150 0x715cae2000
	bool OpenSource(MediaSource* MediaSource);// 0x57cf458 0x715cae20e0
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x57cf508 0x715cae21c0
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x57cf5fc 0x715cae22a0
	bool OpenFile(FString FilePath);// 0x57cf6b0 0x715cae2380
	bool Next();// 0x57cf76c 0x715cae2460
	bool IsReady();// 0x57cf7a4 0x715cae2540
	bool IsPreparing();// 0x57cf814 0x715cae2620
	bool IsPlaying();// 0x57cf84c 0x715cae2700
	bool IsPaused();// 0x57cf884 0x715cae27e0
	bool IsLooping();// 0x57cf8bc 0x715cae28c0
	bool IsConnecting();// 0x57cf8f4 0x715cae29a0
	bool IsClosed();// 0x57cf7dc 0x715cae2a80
	bool IsBuffering();// 0x57cf92c 0x715cae2b60
	bool HasError();// 0x57cf964 0x715cae2c40
	Rotator GetViewRotation();// 0x57cf9d0 0x715cae2d20
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x57cfa08 0x715cae2e00
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x57cfb40 0x715cae2ee0
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x57cfc2c 0x715cae2fc0
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x57cfd18 0x715cae30a0
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x57cfe08 0x715cae3180
	float GetVerticalFieldOfView();// 0x57cfef4 0x715cae3260
	FString GetUrl();// 0x57cff28 0x715cae3340
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x57cffac 0x715cae3420
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x57d00e8 0x715cae3500
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x57d01d8 0x715cae35e0
	Timespan GetTimeDelay();// 0x57cf99c 0x715cae36c0
	Timespan GetTime();// 0x57d039c 0x715cae37a0
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x57d03d0 0x715cae3880
	int GetSelectedTrack(enum TrackType);// 0x57d04d8 0x715cae3960
	float GetRate();// 0x57d0584 0x715cae0080
	int GetPlaylistIndex();// 0x57d05b8 0x715cae0160
	MediaPlaylist* GetPlaylist();// 0x57d05d4 0x715cae0240
	FName GetPlayerName();// 0x57d05f0 0x715cae0320
	int GetNumTracks(enum TrackType);// 0x57d0714 0x715cae0400
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x57d0624 0x715cae04e0
	FText GetMediaName();// 0x57d07c0 0x715cae05c0
	Timespan GetLastVideoSampleProcessedTime();// 0x57d0334 0x715cae06a0
	Timespan GetLastAudioSampleProcessedTime();// 0x57d0368 0x715cae0780
	float GetHorizontalFieldOfView();// 0x57d0898 0x715cae0860
	Timespan GetDuration();// 0x57d08cc 0x715cae0940
	FName GetDesiredPlayerName();// 0x57d0900 0x715cae0a20
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x57d0934 0x715cae0b00
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x57d0a6c 0x715cae0be0
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x57d0b58 0x715cae0cc0
	void Close();// 0x57d0c44 0x715cae0da0
	bool CanPlayUrl(FString URL);// 0x57d0c58 0x715cae0e80
	bool CanPlaySource(MediaSource* MediaSource);// 0x57d0d14 0x715cae0f60
	bool CanPause();// 0x57d0dc4 0x715cae1040

--------------------------------
Class: MediaPlayerOptions // 715dadcf40
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c] 0x715db06900
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8] 0x715db06980
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1] 0x715dae5920
	enum Loop;//[Offset: 0x29, Size: 0x1] 0x715dae59c0

--------------------------------
Class: MediaPlayerTrackOptions // 715dadce80
	int Audio;//[Offset: 0x0, Size: 0x4] 0x715db06580
	int Caption;//[Offset: 0x4, Size: 0x4] 0x715db06600
	int MetaData;//[Offset: 0x8, Size: 0x4] 0x715db06680
	int Script;//[Offset: 0xc, Size: 0x4] 0x715db06700
	int Subtitle;//[Offset: 0x10, Size: 0x4] 0x715db06780
	int Text;//[Offset: 0x14, Size: 0x4] 0x715db06800
	int Video;//[Offset: 0x18, Size: 0x4] 0x715db06880

--------------------------------
Class: MediaPlaylist.Object // 71a49cf600
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10] 0x715ca7ab00
	bool Replace(int Index, MediaSource* Replacement);// 0x57d29bc 0x715cae3a40
	bool RemoveAt(int Index);// 0x57d2ab0 0x715cae3b20
	bool Remove(MediaSource* MediaSource);// 0x57d2b60 0x715cae3c00
	int Num();// 0x57d2c10 0x715cae3ce0
	void Insert(MediaSource* MediaSource, int Index);// 0x57d2c2c 0x715cae3dc0
	MediaSource* GetRandom(out int OutIndex);// 0x57d2d14 0x715cae3ea0
	MediaSource* GetPrevious(out int InOutIndex);// 0x57d2dd0 0x715cae3f80
	MediaSource* GetNext(out int InOutIndex);// 0x57d2e8c 0x715cae4060
	MediaSource* Get(int Index);// 0x57d2f48 0x715cae4140
	bool AddUrl(FString URL);// 0x57d2ff4 0x715cae4220
	bool AddFile(FString FilePath);// 0x57d30b0 0x715cae4300
	bool Add(MediaSource* MediaSource);// 0x57d316c 0x715cae43e0

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object // 71a49cf380
	enum Channels;//[Offset: 0x6d0, Size: 0x4] 0x715ca7a880
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 0x1] 0x715caf3d00
	float RateAdjustmentFactor;//[Offset: 0x6d8, Size: 0x4] 0x715caf3d80
	FloatRange RateAdjustmentRange;//[Offset: 0x6dc, Size: 0x10] 0x715caf3e00
	MediaPlayer* MediaPlayer;//[Offset: 0x6f0, Size: 0x8] 0x715caf3e80
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0x57d3d7c 0x715cae6c20
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x57d3f64 0x715cae6d00
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0x57d3b3c 0x715cae6de0
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0x57d3eb8 0x715cae6ec0
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0x57d3c20 0x715cae6fa0
	MediaSoundComponentSpectralData[] GetSpectralData();// 0x57d3ccc 0x715cae7080
	MediaPlayer* GetMediaPlayer();// 0x57d4008 0x715cae7160
	float GetEnvelopeValue();// 0x57d3b08 0x715cae7240
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x57d403c 0x715cae7320

--------------------------------
Class: MediaSoundComponentSpectralData // 715dadcd00
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x715db06380
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x715db06400

--------------------------------
Class: MovieSceneMediaTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a4880600
	MovieSceneSection*[] MediaSections;//[Offset: 0x58, Size: 0x10] 0x715cf96140

--------------------------------
Class: TcpMessagingSettings.Object // 71a4880380
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d034080
	FString ListenEndpoint;//[Offset: 0x30, Size: 0x10] 0x715d034100
	FString[] ConnectToEndpoints;//[Offset: 0x40, Size: 0x10] 0x715cf960a0
	int ConnectionRetryDelay;//[Offset: 0x50, Size: 0x4] 0x715d034200
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x715d032180

--------------------------------
Class: UdpMessagingSettings.Object // 71a4880100
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d033a80
	bool bAutoRepair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715d033b00
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x715d033b80
	FString UnicastEndpoint;//[Offset: 0x30, Size: 0x10] 0x715d033c00
	FString MulticastEndpoint;//[Offset: 0x40, Size: 0x10] 0x715d033c80
	enum MessageFormat;//[Offset: 0x50, Size: 0x1] 0x715cf95ec0
	byte MulticastTimeToLive;//[Offset: 0x51, Size: 0x1] 0x715d033d80
	FString[] StaticEndpoints;//[Offset: 0x58, Size: 0x10] 0x715cf95f60
	bool EnableTunnel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715d033e80
	FString TunnelUnicastEndpoint;//[Offset: 0x70, Size: 0x10] 0x715d033f00
	FString TunnelMulticastEndpoint;//[Offset: 0x80, Size: 0x10] 0x715d033f80
	FString[] RemoteTunnelEndpoints;//[Offset: 0x90, Size: 0x10] 0x715cf96000

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object // 71a488a100
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8] 0x715d033880
	class Actor* BoundActorClass;//[Offset: 0x350, Size: 0x28] 0x715cf95e20
	Actor* BoundPreviewActor;//[Offset: 0x378, Size: 0x28] 0x715d033900
	<Guid,FName> BoundActorComponents;//[Offset: 0x3a0, Size: 0x50] 0x715cecb980

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object // 71a488a380

--------------------------------
Class: TemplateSequenceActor.Actor.Object // 71a4889e80
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x228, Size: 0x14] 0x715d033400
	TemplateSequencePlayer* SequencePlayer;//[Offset: 0x240, Size: 0x8] 0x715d033480
	SoftObjectPath TemplateSequence;//[Offset: 0x248, Size: 0x18] 0x715d033500
	TemplateSequenceBindingOverrideData BindingOverride;//[Offset: 0x260, Size: 0xc] 0x715d033580
	void SetSequence(TemplateSequence* InSequence);// 0x3914b98 0x715d022c40
	void SetBinding(Actor* Actor);// 0x3914ac0 0x715d022d20
	TemplateSequence* LoadSequence();// 0x3914c3c 0x715d022e00
	TemplateSequencePlayer* GetSequencePlayer();// 0x3914b64 0x715d022ee0
	TemplateSequence* GetSequence();// 0x3914c70 0x715d022fc0

--------------------------------
Class: TemplateSequencePlayer.MovieSceneSequencePlayer.Object // 71a4889c00
	static TemplateSequencePlayer* CreateTemplateSequencePlayer(Object* WorldContextObject, TemplateSequence* TemplateSequence, MovieSceneSequencePlaybackSettings Settings, out TemplateSequenceActor* OutActor);// 0x3915394 0x715d022b60

--------------------------------
Class: TemplateSequenceBindingOverrideData // 715da3f880
	Object* Object;//[Offset: 0x0, Size: 0x8] 0x715da82a80
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715da82b00

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a4889700
	MovieSceneSectionParameters Parameters;//[Offset: 0xd8, Size: 0x24] 0x715d034d80
	float StartOffset;//[Offset: 0xfc, Size: 0x4] 0x715d034e00
	float TimeScale;//[Offset: 0x100, Size: 0x4] 0x715d034e80
	float PrerollTime;//[Offset: 0x104, Size: 0x4] 0x715d034f00
	MovieSceneSequence* SubSequence;//[Offset: 0x108, Size: 0x8] 0x715d034f80
	Actor* ActorToRecord;//[Offset: 0x110, Size: 0x1c] 0x715d035000
	FString TargetSequenceName;//[Offset: 0x130, Size: 0x10] 0x715d035080
	DirectoryPath TargetPathToRecordTo;//[Offset: 0x140, Size: 0x10] 0x715d035100
	void SetSequence(MovieSceneSequence* Sequence);// 0x538dd40 0x715d0229a0
	MovieSceneSequence* GetSequence();// 0x538dde4 0x715d022a80

--------------------------------
Class: MovieSceneSectionParameters // 715dad0b80
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4] 0x715dac5380
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715dac5400
	FrameNumber EndFrameOffset;//[Offset: 0x8, Size: 0x4] 0x715dac5480
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x715dac5500
	float TimeScale;//[Offset: 0x10, Size: 0x4] 0x715dac5580
	int HierarchicalBias;//[Offset: 0x14, Size: 0x4] 0x715dac5600
	float StartOffset;//[Offset: 0x18, Size: 0x4] 0x715dac5680
	float PrerollTime;//[Offset: 0x1c, Size: 0x4] 0x715dac5700
	float PostrollTime;//[Offset: 0x20, Size: 0x4] 0x715dac5780

--------------------------------
Class: TemplateSequenceSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a4889980

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a4889200
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x715cf95d80

--------------------------------
Class: TemplateSequenceTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a4889480

--------------------------------
Class: AndroidPermissionCallbackProxy.Object // 71a4888f80
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10] 0x715d034b80

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4888d00
	static bool CheckPermission(FString permission);// 0x393aeb4 0x715d022700
	static AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] Permissions);// 0x393adc0 0x715d0227e0

--------------------------------
Class: AssetTagsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object // 71a4888a80
	FName[] GetCollectionsContainingAssetPtr(const Object* AssetPtr);// 0x395f444 0x715d0221c0
	FName[] GetCollectionsContainingAssetData(out const AssetData AssetData);// 0x395f53c 0x715d0222a0
	FName[] GetCollectionsContainingAsset(const FName AssetPathName);// 0x395f6ac 0x715d022380
	FName[] GetCollections();// 0x395f9bc 0x715d022460
	AssetData[] GetAssetsInCollection(const FName Name);// 0x395f7a4 0x715d022540
	bool CollectionExists(const FName Name);// 0x395fa6c 0x715d022620

--------------------------------
Class: AssetData // 715dadb980
	FName ObjectPath;//[Offset: 0x0, Size: 0x8] 0x715db04200
	FName PackageName;//[Offset: 0x8, Size: 0x8] 0x715db02180
	FName PackagePath;//[Offset: 0x10, Size: 0x8] 0x715db02200
	FName AssetName;//[Offset: 0x18, Size: 0x8] 0x715db02280
	FName AssetClass;//[Offset: 0x20, Size: 0x8] 0x715db02300

--------------------------------
Class: CustomMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4888300
	bool SetCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x3962398 0x715d021f20
	void ClearCustomMeshTriangles();// 0x39622c4 0x715d022000
	void AddCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x39622d8 0x715d0220e0

--------------------------------
Class: CustomMeshTriangle // 715da91540
	Vector Vertex0;//[Offset: 0x0, Size: 0xc] 0x715da82580
	Vector Vertex1;//[Offset: 0xc, Size: 0xc] 0x715da82600
	Vector Vertex2;//[Offset: 0x18, Size: 0xc] 0x715da82680

--------------------------------
Class: EditableMeshAdapter.Object // 71a4887e00

--------------------------------
Class: EditableGeometryCollectionAdapter.EditableMeshAdapter.Object // 71a4888080
	GeometryCollection* GeometryCollection;//[Offset: 0x28, Size: 0x8] 0x715d036200
	GeometryCollection* OriginalGeometryCollection;//[Offset: 0x30, Size: 0x8] 0x715d036280
	int GeometryCollectionLODIndex;//[Offset: 0x38, Size: 0x4] 0x715d036300

--------------------------------
Class: GeometryCollection.Object // 71a4b10100
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0x10] 0x715cc89fc0
	enum CollisionType;//[Offset: 0x40, Size: 0x1] 0x715cc8a060
	enum ImplicitType;//[Offset: 0x41, Size: 0x1] 0x715cc8a100
	int MinLevelSetResolution;//[Offset: 0x44, Size: 0x4] 0x715cd06200
	int MaxLevelSetResolution;//[Offset: 0x48, Size: 0x4] 0x715cd06280
	int MinClusterLevelSetResolution;//[Offset: 0x4c, Size: 0x4] 0x715cd06300
	int MaxClusterLevelSetResolution;//[Offset: 0x50, Size: 0x4] 0x715cd04280
	float CollisionObjectReductionPercentage;//[Offset: 0x54, Size: 0x4] 0x715cd04300
	bool bMassAsDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715cd04380
	float Mass;//[Offset: 0x5c, Size: 0x4] 0x715cd04400
	float MinimumMassClamp;//[Offset: 0x60, Size: 0x4] 0x715cd04480
	float CollisionParticlesFraction;//[Offset: 0x64, Size: 0x4] 0x715cd04500
	int MaximumCollisionParticles;//[Offset: 0x68, Size: 0x4] 0x715cd04580
	GeometryCollectionSizeSpecificData[] SizeSpecificData;//[Offset: 0x70, Size: 0x10] 0x715cc8a1a0
	bool EnableRemovePiecesOnFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x715cd04680
	MaterialInterface*[] RemoveOnFractureMaterials;//[Offset: 0x88, Size: 0x10] 0x715cc8a240
	Guid PersistentGuid;//[Offset: 0x98, Size: 0x10] 0x715cd04780
	Guid StateGuid;//[Offset: 0xa8, Size: 0x10] 0x715cd04800
	int BoneSelectedMaterialIndex;//[Offset: 0xb8, Size: 0x4] 0x715cd04880

--------------------------------
Class: GeometryCollectionSizeSpecificData // 715ce7cc40
	float MaxSize;//[Offset: 0x0, Size: 0x4] 0x715ceae380
	enum CollisionType;//[Offset: 0x4, Size: 0x1] 0x715ce91960
	enum ImplicitType;//[Offset: 0x5, Size: 0x1] 0x715ce91a00
	int MinLevelSetResolution;//[Offset: 0x8, Size: 0x4] 0x715ceae500
	int MaxLevelSetResolution;//[Offset: 0xc, Size: 0x4] 0x715ceae580
	int MinClusterLevelSetResolution;//[Offset: 0x10, Size: 0x4] 0x715ceae600
	int MaxClusterLevelSetResolution;//[Offset: 0x14, Size: 0x4] 0x715ceae680
	int CollisionObjectReductionPercentage;//[Offset: 0x18, Size: 0x4] 0x715ceae700
	float CollisionParticlesFraction;//[Offset: 0x1c, Size: 0x4] 0x715ceac680
	int MaximumCollisionParticles;//[Offset: 0x20, Size: 0x4] 0x715ceac700

--------------------------------
Class: EditableMesh.Object // 71a4887b80
	EditableMeshAdapter*[] Adapters;//[Offset: 0x3b8, Size: 0x10] 0x715cf99d40
	int TextureCoordinateCount;//[Offset: 0x3d0, Size: 0x4] 0x715d03c700
	int PendingCompactCounter;//[Offset: 0x51c, Size: 0x4] 0x715d03c780
	int SubdivisionCount;//[Offset: 0x520, Size: 0x4] 0x715d03c800
	void WeldVertices(out const VertexID[] VertexIDs, out VertexID OutNewVertexID);// 0x39c3bd0 0x715d029540
	void TryToRemoveVertex(const VertexID VertexID, out bool bOutWasVertexRemoved, out EdgeID OutNewEdgeID);// 0x39c4f54 0x715d029620
	void TryToRemovePolygonEdge(const EdgeID EdgeID, out bool bOutWasEdgeRemoved, out PolygonID OutNewPolygonID);// 0x39c50b0 0x715d029700
	void TriangulatePolygons(out const PolygonID[] PolygonIDs, out PolygonID[] OutNewTrianglePolygons);// 0x39c4004 0x715d0297e0
	void TessellatePolygons(out const PolygonID[] PolygonIDs, const enum TriangleTessellationMode, out PolygonID[] OutNewPolygonIDs);// 0x39c3a6c 0x715d0298c0
	void StartModification(const enum MeshModificationType, const enum MeshTopologyChange);// 0x39ca708 0x715d0299a0
	void SplitPolygons(out const PolygonToSplit[] PolygonsToSplit, out EdgeID[] OutNewEdgeIDs);// 0x39c66b0 0x715d029a80
	void SplitPolygonalMesh(out const Plane InPlane, out PolygonID[] PolygonIDs1, out PolygonID[] PolygonIDs2, out EdgeID[] BoundaryIDs);// 0x39c367c 0x715d029b60
	void SplitEdge(const EdgeID EdgeID, out const float[] Splits, out VertexID[] OutNewVertexIDs);// 0x39c6978 0x715d029c40
	void SetVerticesCornerSharpness(out const VertexID[] VertexIDs, out const float[] VerticesNewCornerSharpness);// 0x39c4518 0x715d029d20
	void SetVerticesAttributes(out const AttributesForVertex[] AttributesForVertices);// 0x39c55fc 0x715d029e00
	void SetVertexInstancesAttributes(out const AttributesForVertexInstance[] AttributesForVertexInstances);// 0x39c5500 0x715d029ee0
	void SetTextureCoordinateCount(const int NumTexCoords);// 0x39c39c8 0x715d029fc0
	void SetSubdivisionCount(const int NewSubdivisionCount);// 0x39c6cbc 0x715d02a0a0
	void SetPolygonsVertexAttributes(out const VertexAttributesForPolygon[] VertexAttributesForPolygons);// 0x39c5348 0x715d02a180
	void SetEdgesHardnessAutomatically(out const EdgeID[] EdgeIDs, const float MaxDotProductForSoftEdge);// 0x39c41e0 0x715d02a260
	void SetEdgesHardness(out const EdgeID[] EdgeIDs, out const bool[] EdgesNewIsHard);// 0x39c42e0 0x715d02a340
	void SetEdgesCreaseSharpness(out const EdgeID[] EdgeIDs, out const float[] EdgesNewCreaseSharpness);// 0x39c43fc 0x715d02a420
	void SetEdgesAttributes(out const AttributesForEdge[] AttributesForEdges);// 0x39c5404 0x715d02a500
	void SetAllowUndo(const bool bInAllowUndo);// 0x39c919c 0x715d02a5e0
	void SetAllowSpatialDatabase(const bool bInAllowSpatialDatabase);// 0x39c90d4 0x715d02a6c0
	void SetAllowCompact(const bool bInAllowCompact);// 0x39c8fd8 0x715d02a7a0
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingPlane(out const Plane InPlane, out PolygonID[] OutPolygons);// 0x39c6d60 0x715d02a880
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingLineSegment(const Vector LineSegmentStart, const Vector LineSegmentEnd, out PolygonID[] OutPolygons);// 0x39c6f88 0x715d02a960
	void SearchSpatialDatabaseForPolygonsInVolume(out const Plane[] Planes, out PolygonID[] OutPolygons);// 0x39c6e6c 0x715d02aa40
	EditableMesh* RevertInstance();// 0x39ca4e4 0x715d02ab20
	void Revert();// 0x39ca518 0x715d02ac00
	void RebuildRenderMesh();// 0x39ca7f0 0x715d02ace0
	void QuadrangulateMesh(out PolygonID[] OutNewPolygonIDs);// 0x39c3908 0x715d027400
	void PropagateInstanceChanges();// 0x39ca4d0 0x715d0274e0
	void MoveVertices(out const VertexToMove[] VerticesToMove);// 0x39c6bfc 0x715d0275c0
	static VertexID MakeVertexID(const int VertexIndex);// 0x39c8ea8 0x715d0276a0
	static PolygonID MakePolygonID(const int PolygonIndex);// 0x39c8cc8 0x715d027780
	static PolygonGroupID MakePolygonGroupID(const int PolygonGroupIndex);// 0x39c8d68 0x715d027860
	static EdgeID MakeEdgeID(const int EdgeIndex);// 0x39c8e08 0x715d027940
	bool IsValidVertex(const VertexID VertexID);// 0x39ca3e0 0x715d027a20
	bool IsValidPolygonGroup(const PolygonGroupID PolygonGroupID);// 0x39c9a50 0x715d027b00
	bool IsValidPolygon(const PolygonID PolygonID);// 0x39c97b0 0x715d027be0
	bool IsValidEdge(const EdgeID EdgeID);// 0x39c9de8 0x715d027cc0
	bool IsUndoAllowed();// 0x39c9244 0x715d027da0
	bool IsSpatialDatabaseAllowed();// 0x39c9180 0x715d027e80
	bool IsPreviewingSubdivisions();// 0x39c8bf4 0x715d027f60
	bool IsOrphanedVertex(const VertexID VertexID);// 0x39ca324 0x715d028040
	bool IsCompactAllowed();// 0x39c9080 0x715d028120
	bool IsCommittedAsInstance();// 0x39ca5ec 0x715d028200
	bool IsCommitted();// 0x39ca624 0x715d0282e0
	bool IsBeingModified();// 0x39c9260 0x715d0283c0
	static VertexID InvalidVertexID();// 0x39c8fb4 0x715d0284a0
	static PolygonID InvalidPolygonID();// 0x39c8f48 0x715d028580
	static PolygonGroupID InvalidPolygonGroupID();// 0x39c8f6c 0x715d028660
	static EdgeID InvalidEdgeID();// 0x39c8f90 0x715d028740
	void InsetPolygons(out const PolygonID[] PolygonIDs, const float InsetFixedDistance, const float InsetProgressTowardCenter, const enum Mode, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0x39c483c 0x715d028820
	void InsertEdgeLoop(const EdgeID EdgeID, out const float[] Splits, out EdgeID[] OutNewEdgeIDs);// 0x39c6808 0x715d028900
	void InitializeAdapters();// 0x39ca804 0x715d0289e0
	EdgeID GetVertexPairEdge(const VertexID VertexID, const VertexID NextVertexID, out bool bOutEdgeWindingIsReversed);// 0x39c8640 0x715d028ac0
	VertexID GetVertexInstanceVertex(const VertexInstanceID VertexInstanceID);// 0x39ca088 0x715d028ba0
	int GetVertexInstanceCount();// 0x39ca140 0x715d028c80
	void GetVertexInstanceConnectedPolygons(const VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x39c88b8 0x715d028d60
	int GetVertexInstanceConnectedPolygonCount(const VertexInstanceID VertexInstanceID);// 0x39c9fd0 0x715d028e40
	PolygonID GetVertexInstanceConnectedPolygon(const VertexInstanceID VertexInstanceID, const int ConnectedPolygonNumber);// 0x39c9ed8 0x715d028f20
	int GetVertexCount();// 0x39ca49c 0x715d029000
	void GetVertexConnectedPolygons(const VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x39c89cc 0x715d025720
	void GetVertexConnectedEdges(const VertexID VertexID, out EdgeID[] OutConnectedEdgeIDs);// 0x39c8ae0 0x715d025800
	int GetVertexConnectedEdgeCount(const VertexID VertexID);// 0x39ca26c 0x715d0258e0
	EdgeID GetVertexConnectedEdge(const VertexID VertexID, const int ConnectedEdgeNumber);// 0x39ca174 0x715d0259c0
	void GetVertexAdjacentVertices(const VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x39c87a4 0x715d025aa0
	int GetTextureCoordinateCount();// 0x39c8c60 0x715d025b80
	SubdivisionLimitData GetSubdivisionLimitData();// 0x39c741c 0x715d025c60
	int GetSubdivisionCount();// 0x39c8c2c 0x715d025d40
	int GetPolygonTriangulatedTriangleCount(const PolygonID PolygonID);// 0x39c9398 0x715d025e20
	TriangleID GetPolygonTriangulatedTriangle(const PolygonID PolygonID, int PolygonTriangleNumber);// 0x39c92a0 0x715d025f00
	void GetPolygonPerimeterVertices(const PolygonID PolygonID, out VertexID[] OutPolygonPerimeterVertexIDs);// 0x39c7fec 0x715d025fe0
	void GetPolygonPerimeterVertexInstances(const PolygonID PolygonID, out VertexInstanceID[] OutPolygonPerimeterVertexInstanceIDs);// 0x39c7ed8 0x715d0260c0
	VertexInstanceID GetPolygonPerimeterVertexInstance(const PolygonID PolygonID, const int PolygonVertexNumber);// 0x39c9450 0x715d0261a0
	int GetPolygonPerimeterVertexCount(const PolygonID PolygonID);// 0x39c9640 0x715d026280
	VertexID GetPolygonPerimeterVertex(const PolygonID PolygonID, const int PolygonVertexNumber);// 0x39c9548 0x715d026360
	void GetPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutPolygonPerimeterEdgeIDs);// 0x39c7c74 0x715d026440
	int GetPolygonPerimeterEdgeCount(const PolygonID PolygonID);// 0x39c8100 0x715d026520
	EdgeID GetPolygonPerimeterEdge(const PolygonID PolygonID, const int PerimeterEdgeNumber, out bool bOutEdgeWindingIsReversedForPolygon);// 0x39c7d88 0x715d026600
	PolygonID GetPolygonInGroup(const PolygonGroupID PolygonGroupID, const int PolygonNumber);// 0x39c98a0 0x715d0266e0
	int GetPolygonGroupCount();// 0x39c9b0c 0x715d0267c0
	int GetPolygonCountInGroup(const PolygonGroupID PolygonGroupID);// 0x39c9998 0x715d0268a0
	int GetPolygonCount();// 0x39c986c 0x715d026980
	void GetPolygonAdjacentPolygons(const PolygonID PolygonID, out PolygonID[] OutAdjacentPolygons);// 0x39c7b60 0x715d026a60
	PolygonGroupID GetGroupForPolygon(const PolygonID PolygonID);// 0x39c96f8 0x715d026b40
	PolygonGroupID GetFirstValidPolygonGroup();// 0x39c8c94 0x715d026c20
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID OutEdgeVertexID0, out VertexID OutEdgeVertexID1);// 0x39c84ec 0x715d026d00
	VertexID GetEdgeVertex(const EdgeID EdgeID, const int EdgeVertexNumber);// 0x39c9cf0 0x715d026de0
	EdgeID GetEdgeThatConnectsVertices(const VertexID VertexID0, const VertexID VertexID1);// 0x39c81b8 0x715d026ec0
	void GetEdgeLoopElements(const EdgeID EdgeID, out EdgeID[] EdgeLoopIDs);// 0x39c82c4 0x715d026fa0
	int GetEdgeCount();// 0x39c9ea4 0x715d027080
	void GetEdgeConnectedPolygons(const EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x39c83d8 0x715d027160
	int GetEdgeConnectedPolygonCount(const EdgeID EdgeID);// 0x39c9c38 0x715d027240
	PolygonID GetEdgeConnectedPolygon(const EdgeID EdgeID, const int ConnectedPolygonNumber);// 0x39c9b40 0x715d027320
	void GeneratePolygonTangentsAndNormals(out const PolygonID[] PolygonIDs);// 0x39c3848 0x715d023a40
	void FlipPolygons(out const PolygonID[] PolygonIDs);// 0x39c4120 0x715d023b20
	int FindPolygonPerimeterVertexNumberForVertex(const PolygonID PolygonID, const VertexID VertexID);// 0x39c7a54 0x715d023c00
	int FindPolygonPerimeterEdgeNumberForVertices(const PolygonID PolygonID, const VertexID EdgeVertexID0, const VertexID EdgeVertexID1);// 0x39c78fc 0x715d023ce0
	void FindPolygonLoop(const EdgeID EdgeID, out EdgeID[] OutEdgeLoopEdgeIDs, out EdgeID[] OutFlippedEdgeIDs, out EdgeID[] OutReversedEdgeIDPathToTake, out PolygonID[] OutPolygonIDsToSplit);// 0x39c70d0 0x715d023dc0
	void ExtrudePolygons(out const PolygonID[] Polygons, const float ExtrudeDistance, const bool bKeepNeighborsTogether, out PolygonID[] OutNewExtrudedFrontPolygons);// 0x39c4da8 0x715d023ea0
	void ExtendVertices(out const VertexID[] VertexIDs, const bool bOnlyExtendClosestEdge, const Vector ReferencePosition, out VertexID[] OutNewExtendedVertexIDs);// 0x39c4a88 0x715d023f80
	void ExtendEdges(out const EdgeID[] EdgeIDs, const bool bWeldNeighbors, out EdgeID[] OutNewExtendedEdgeIDs);// 0x39c4c40 0x715d024060
	void EndModification(const bool bFromUndo);// 0x39ca65c 0x715d024140
	void DeleteVertexInstances(out const VertexInstanceID[] VertexInstanceIDsToDelete, const bool bDeleteOrphanedVertices);// 0x39c6100 0x715d024220
	void DeleteVertexAndConnectedEdgesAndPolygons(const VertexID VertexID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x39c62c8 0x715d024300
	void DeletePolygons(out const PolygonID[] PolygonIDsToDelete, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x39c56f8 0x715d0243e0
	void DeletePolygonGroups(out const PolygonGroupID[] PolygonGroupIDs);// 0x39c3df4 0x715d0244c0
	void DeleteOrphanVertices(out const VertexID[] VertexIDsToDelete);// 0x39c6208 0x715d0245a0
	void DeleteEdges(out const EdgeID[] EdgeIDsToDelete, const bool bDeleteOrphanedVertices);// 0x39c5ff8 0x715d024680
	void DeleteEdgeAndConnectedPolygons(const EdgeID EdgeID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x39c64bc 0x715d024760
	void CreateVertices(out const VertexToCreate[] VerticesToCreate, out VertexID[] OutNewVertexIDs);// 0x39c5da0 0x715d024840
	void CreateVertexInstances(out const VertexInstanceToCreate[] VertexInstancesToCreate, out VertexInstanceID[] OutNewVertexInstanceIDs);// 0x39c5c48 0x715d024920
	void CreatePolygons(out const PolygonToCreate[] PolygonsToCreate, out PolygonID[] OutNewPolygonIDs, out EdgeID[] OutNewEdgeIDs);// 0x39c5900 0x715d024a00
	void CreatePolygonGroups(out const PolygonGroupToCreate[] PolygonGroupsToCreate, out PolygonGroupID[] OutNewPolygonGroupIDs);// 0x39c3eb4 0x715d024ae0
	void CreateMissingPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutNewEdgeIDs);// 0x39c6ae8 0x715d024bc0
	void CreateEmptyVertexRange(const int NumVerticesToCreate, out VertexID[] OutNewVertexIDs);// 0x39c5ef0 0x715d024ca0
	void CreateEdges(out const EdgeToCreate[] EdgesToCreate, out EdgeID[] OutNewEdgeIDs);// 0x39c5af0 0x715d024d80
	void ComputePolygonsSharedEdges(out const PolygonID[] PolygonIDs, out EdgeID[] OutSharedEdgeIDs);// 0x39c7300 0x715d024e60
	Plane ComputePolygonPlane(const PolygonID PolygonID);// 0x39c76ac 0x715d024f40
	Vector ComputePolygonNormal(const PolygonID PolygonID);// 0x39c75f0 0x715d025020
	Vector ComputePolygonCenter(const PolygonID PolygonID);// 0x39c7768 0x715d025100
	BoxSphereBounds ComputeBoundingBoxAndSphere();// 0x39c7824 0x715d0251e0
	Box ComputeBoundingBox();// 0x39c7890 0x715d0252c0
	EditableMesh* CommitInstance(PrimitiveComponent* ComponentToInstanceTo);// 0x39ca52c 0x715d0253a0
	void Commit();// 0x39ca5d8 0x715d025480
	void ChangePolygonsVertexInstances(out const ChangeVertexInstancesForPolygon[] VertexInstancesForPolygons);// 0x39c520c 0x715d025560
	void BevelPolygons(out const PolygonID[] PolygonIDs, const float BevelFixedDistance, const float BevelProgressTowardCenter, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0x39c4634 0x715d025640
	void AssignPolygonsToPolygonGroups(out const PolygonGroupForPolygon[] PolygonGroupForPolygons, const bool bDeleteOrphanedPolygonGroups);// 0x39c3cec 0x715d021d60
	bool AnyChangesToUndo();// 0x39c909c 0x715d021e40

--------------------------------
Class: PolygonToSplit // 715da90340
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x715da83400
	VertexPair[] VertexPairsToSplitAt;//[Offset: 0x8, Size: 0x10] 0x715d899660

--------------------------------
Class: VertexPair // 715da90280
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4] 0x715da83480
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4] 0x715da83500

--------------------------------
Class: AttributesForVertex // 715da90400
	VertexID VertexID;//[Offset: 0x0, Size: 0x4] 0x715da83600
	MeshElementAttributeList VertexAttributes;//[Offset: 0x8, Size: 0x10] 0x715da83680

--------------------------------
Class: MeshElementAttributeList // 715da90e80
	MeshElementAttributeData[] Attributes;//[Offset: 0x0, Size: 0x10] 0x715d899ac0

--------------------------------
Class: MeshElementAttributeData // 715da90dc0
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x715da83f00
	int AttributeIndex;//[Offset: 0x8, Size: 0x4] 0x715da83f80
	MeshElementAttributeValue AttributeValue;//[Offset: 0x10, Size: 0x50] 0x715da84000

--------------------------------
Class: MeshElementAttributeValue // 715da90d00

--------------------------------
Class: AttributesForVertexInstance // 715da904c0
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4] 0x715da83700
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10] 0x715da83780

--------------------------------
Class: VertexAttributesForPolygon // 715da907c0
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x715da83900
	MeshElementAttributeList[] PerimeterVertexAttributeLists;//[Offset: 0x8, Size: 0x10] 0x715d899700
	VertexAttributesForPolygonHole[] VertexAttributeListsForEachHole;//[Offset: 0x18, Size: 0x10] 0x715d899840

--------------------------------
Class: VertexAttributesForPolygonHole // 715da90700
	MeshElementAttributeList[] VertexAttributeList;//[Offset: 0x0, Size: 0x10] 0x715d8997a0

--------------------------------
Class: AttributesForEdge // 715da90640
	EdgeID EdgeID;//[Offset: 0x0, Size: 0x4] 0x715da83800
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10] 0x715da83880

--------------------------------
Class: VertexToMove // 715da90c40
	VertexID VertexID;//[Offset: 0x0, Size: 0x4] 0x715da83e00
	Vector NewVertexPosition;//[Offset: 0x4, Size: 0xc] 0x715da83e80

--------------------------------
Class: SubdivisionLimitData // 715da92f80
	Vector[] VertexPositions;//[Offset: 0x0, Size: 0x10] 0x715d8992a0
	SubdivisionLimitSection[] Sections;//[Offset: 0x10, Size: 0x10] 0x715d8993e0
	SubdividedWireEdge[] SubdividedWireEdges;//[Offset: 0x20, Size: 0x10] 0x715d899480

--------------------------------
Class: SubdivisionLimitSection // 715da92e00
	SubdividedQuad[] SubdividedQuads;//[Offset: 0x0, Size: 0x10] 0x715d899340

--------------------------------
Class: SubdividedQuad // 715da92d40
	SubdividedQuadVertex QuadVertex0;//[Offset: 0x0, Size: 0x34] 0x715da84500
	SubdividedQuadVertex QuadVertex1;//[Offset: 0x34, Size: 0x34] 0x715da84580
	SubdividedQuadVertex QuadVertex2;//[Offset: 0x68, Size: 0x34] 0x715da84600
	SubdividedQuadVertex QuadVertex3;//[Offset: 0x9c, Size: 0x34] 0x715da84a00

--------------------------------
Class: SubdividedQuadVertex // 715da92c80
	int VertexPositionIndex;//[Offset: 0x0, Size: 0x4] 0x715da84680
	Vector2D TextureCoordinate0;//[Offset: 0x4, Size: 0x8] 0x715da84700
	Vector2D TextureCoordinate1;//[Offset: 0xc, Size: 0x8] 0x715da84780
	Color VertexColor;//[Offset: 0x14, Size: 0x4] 0x715da84800
	Vector VertexNormal;//[Offset: 0x18, Size: 0xc] 0x715da84880
	Vector VertexTangent;//[Offset: 0x24, Size: 0xc] 0x715da84900
	float VertexBinormalSign;//[Offset: 0x30, Size: 0x4] 0x715da84980

--------------------------------
Class: SubdividedWireEdge // 715da92ec0
	int EdgeVertex0PositionIndex;//[Offset: 0x0, Size: 0x4] 0x715da84b80
	int EdgeVertex1PositionIndex;//[Offset: 0x4, Size: 0x4] 0x715da84c00

--------------------------------
Class: VertexToCreate // 715da93040
	MeshElementAttributeList VertexAttributes;//[Offset: 0x0, Size: 0x10] 0x715da84d00
	VertexID OriginalVertexID;//[Offset: 0x10, Size: 0x4] 0x715da84d80

--------------------------------
Class: VertexInstanceToCreate // 715da93100
	VertexID VertexID;//[Offset: 0x0, Size: 0x4] 0x715da84e00
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10] 0x715da84e80
	VertexInstanceID OriginalVertexInstanceID;//[Offset: 0x18, Size: 0x4] 0x715da84f00

--------------------------------
Class: PolygonToCreate // 715da901c0
	PolygonGroupID PolygonGroupID;//[Offset: 0x0, Size: 0x4] 0x715da85180
	VertexAndAttributes[] PerimeterVertices;//[Offset: 0x8, Size: 0x10] 0x715d899520
	PolygonID OriginalPolygonID;//[Offset: 0x18, Size: 0x4] 0x715da83300
	enum PolygonEdgeHardness;//[Offset: 0x1c, Size: 0x1] 0x715d8995c0

--------------------------------
Class: VertexAndAttributes // 715da90100
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4] 0x715da85200
	VertexID VertexID;//[Offset: 0x4, Size: 0x4] 0x715da85280
	MeshElementAttributeList PolygonVertexAttributes;//[Offset: 0x8, Size: 0x10] 0x715da83200

--------------------------------
Class: PolygonGroupToCreate // 715da90f40
	MeshElementAttributeList PolygonGroupAttributes;//[Offset: 0x0, Size: 0x10] 0x715da84180
	PolygonGroupID OriginalPolygonGroupID;//[Offset: 0x10, Size: 0x4] 0x715da84200

--------------------------------
Class: EdgeToCreate // 715da90040
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4] 0x715da84f80
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4] 0x715da85000
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10] 0x715da85080
	EdgeID OriginalEdgeID;//[Offset: 0x18, Size: 0x4] 0x715da85100

--------------------------------
Class: ChangeVertexInstancesForPolygon // 715da90ac0
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x715da83b00
	VertexIndexAndInstanceID[] PerimeterVertexIndicesAndInstanceIDs;//[Offset: 0x8, Size: 0x10] 0x715d8998e0
	VertexInstancesForPolygonHole[] VertexIndicesAndInstanceIDsForEachHole;//[Offset: 0x18, Size: 0x10] 0x715d899a20

--------------------------------
Class: VertexIndexAndInstanceID // 715da90940
	int ContourIndex;//[Offset: 0x0, Size: 0x4] 0x715da83c00
	VertexInstanceID VertexInstanceID;//[Offset: 0x4, Size: 0x4] 0x715da83c80

--------------------------------
Class: VertexInstancesForPolygonHole // 715da90a00
	VertexIndexAndInstanceID[] VertexIndicesAndInstanceIDs;//[Offset: 0x0, Size: 0x10] 0x715d899980

--------------------------------
Class: PolygonGroupForPolygon // 715da910c0
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x715da82180
	PolygonGroupID PolygonGroupID;//[Offset: 0x4, Size: 0x4] 0x715da82200

--------------------------------
Class: EditableMeshFactory.Object // 71a4887900
	static EditableMesh* MakeEditableMesh(PrimitiveComponent* PrimitiveComponent, const int LODIndex);// 0x39cfd64 0x715d029460

--------------------------------
Class: EditableStaticMeshAdapter.EditableMeshAdapter.Object // 71a4887680
	StaticMesh* StaticMesh;//[Offset: 0x28, Size: 0x8] 0x715d03e480
	StaticMesh* OriginalStaticMesh;//[Offset: 0x30, Size: 0x8] 0x715d03e500
	int StaticMeshLODIndex;//[Offset: 0x38, Size: 0x4] 0x715d03e580

--------------------------------
Class: LocationServices.BlueprintFunctionLibrary.Object // 71a4887400
	static bool StopLocationServices();// 0x39d8a20 0x715d02c800
	static bool StartLocationServices();// 0x39d8a58 0x715d02c8e0
	static bool IsLocationAccuracyAvailable(enum Accuracy);// 0x39d88d4 0x715d02c9c0
	static bool InitLocationServices(enum Accuracy, float UpdateFrequency, float MinDistanceFilter);// 0x39d8a90 0x715d0290e0
	static LocationServicesImpl* GetLocationServicesImpl();// 0x39d88b0 0x715d0291c0
	static LocationServicesData GetLastKnownLocation();// 0x39d89b4 0x715d0292a0
	static bool AreLocationServicesEnabled();// 0x39d897c 0x715d029380

--------------------------------
Class: LocationServicesImpl.Object // 71a4887180
	delegate OnLocationChanged;//[Offset: 0x28, Size: 0x10] 0x715d03de80

--------------------------------
Class: LocationServicesData // 714906b500
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x715d7d4480
	float Longitude;//[Offset: 0x4, Size: 0x4] 0x715d7d4500
	float Latitude;//[Offset: 0x8, Size: 0x4] 0x715d7d4600
	float HorizontalAccuracy;//[Offset: 0xc, Size: 0x4] 0x715d7d4580
	float VerticalAccuracy;//[Offset: 0x10, Size: 0x4] 0x715d7d4680
	float Altitude;//[Offset: 0x14, Size: 0x4] 0x715d7d4700

--------------------------------
Class: MobileInstalledContent.Object // 71a4886f00
	bool Mount(int PakOrder, FString MountPoint);// 0x39dd9d4 0x715d02c1e0
	float GetInstalledContentSize();// 0x39ddad4 0x715d02c2c0
	float GetDiskFreeSpace();// 0x39ddb08 0x715d02c3a0

--------------------------------
Class: MobilePendingContent.MobileInstalledContent.Object // 71a4886c80
	void StartInstall(delegate OnSucceeded, delegate OnFailed);// 0x39ddf8c 0x715d02bbc0
	float GetTotalDownloadedSize();// 0x39de1c4 0x715d02bca0
	float GetRequiredDiskSpace();// 0x39de1f8 0x715d02bd80
	float GetInstallProgress();// 0x39de08c 0x715d02be60
	FText GetDownloadStatusText();// 0x39de0c0 0x715d02bf40
	float GetDownloadSpeed();// 0x39de190 0x715d02c020
	float GetDownloadSize();// 0x39de22c 0x715d02c100

--------------------------------
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object // 71a4886a00
	static void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed);// 0x39de94c 0x715d02b760
	static bool HasActiveWiFiConnection();// 0x39de914 0x715d02b840
	static FString[] GetSupportedPlatformNames();// 0x39de74c 0x715d02b920
	static MobileInstalledContent* GetInstalledContent(FString InstallDirectory);// 0x39deb24 0x715d02ba00
	static FString GetActiveDeviceProfileName();// 0x39de864 0x715d02bae0

--------------------------------
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object // 71a4886780
	static void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, Vector PlanePosition, Vector PlaneNormal, bool bCreateOtherHalf, out ProceduralMeshComponent* OutOtherHalfProcMesh, enum CapOption, MaterialInterface* CapMaterial);// 0x39f24cc 0x715d02aea0
	static void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x39f2b28 0x715d02af80
	static void GetSectionFromProceduralMesh(ProceduralMeshComponent* InProcMesh, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x39f2704 0x715d02b060
	static void GenerateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x39f3870 0x715d02b140
	static void CreateGridMeshWelded(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, float GridSpacing);// 0x39f30c0 0x715d02b220
	static void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0x39f3304 0x715d02b300
	static void CreateGridMeshSplit(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, out Vector2D[] UV1s, float GridSpacing);// 0x39f2e24 0x715d02b3e0
	static void CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComponent, int LODIndex, ProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);// 0x39f29c0 0x715d02b4c0
	static void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0x39f3484 0x715d02b5a0
	static void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out ProcMeshTangent[] Tangents);// 0x39f3640 0x715d02b680

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4886500
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1] 0x715d052f80
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1] 0x715d053000
	BodySetup* ProcMeshBodySetup;//[Offset: 0x450, Size: 0x8] 0x715d053080
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x458, Size: 0x10] 0x715cf9c720
	KConvexElem[] CollisionConvexElems;//[Offset: 0x468, Size: 0x10] 0x715cf9c7c0
	BoxSphereBounds LocalBounds;//[Offset: 0x478, Size: 0x1c] 0x715d051100
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x498, Size: 0x10] 0x715cf9c860
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x39f4764 0x715d02dec0
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x39f4b08 0x715d02dfa0
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x39f45c0 0x715d02e080
	bool IsMeshSectionVisible(int SectionIndex);// 0x39f4510 0x715d02e160
	int GetNumSections();// 0x39f44dc 0x715d02e240
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x39f4dac 0x715d02e320
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x39f5200 0x715d02e400
	void ClearMeshSection(int SectionIndex);// 0x39f46c0 0x715d02e4e0
	void ClearCollisionConvexMeshes();// 0x39f43cc 0x715d02e5c0
	void ClearAllMeshSections();// 0x39f46ac 0x715d02e6a0
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x39f43e0 0x715d02adc0

--------------------------------
Class: ProcMeshTangent // 715da92800
	Vector TangentX;//[Offset: 0x0, Size: 0xc] 0x715da85c80
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715da85d00

--------------------------------
Class: ProcMeshSection // 715da92980
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10] 0x715d89ba00
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10] 0x715d899160
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x1c] 0x715da86180
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715da86200
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x715da86280

--------------------------------
Class: ProcMeshVertex // 715da928c0
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x715da85b80
	Vector Normal;//[Offset: 0xc, Size: 0xc] 0x715da85c00
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10] 0x715da85d80
	Color Color;//[Offset: 0x28, Size: 0x4] 0x715da85e00
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8] 0x715da85e80
	Vector2D UV1;//[Offset: 0x34, Size: 0x8] 0x715da85f00
	Vector2D UV2;//[Offset: 0x3c, Size: 0x8] 0x715da85f80
	Vector2D UV3;//[Offset: 0x44, Size: 0x8] 0x715da86000

--------------------------------
Class: AmbisonicsEncodingSettings.SoundfieldEncodingSettingsBase.Object // 71a4886280
	int AmbisonicsOrder;//[Offset: 0x28, Size: 0x4] 0x715d052f00

--------------------------------
Class: HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4885b00
	bool bShowLegendBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x715d052500
	FText SelectShortcutText;//[Offset: 0x278, Size: 0x18] 0x715d052580
	bool bResetLastFocusedWidgetOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x715d052600
	bool bEnableSelectShortcutInLegendBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1] 0x715d052680
	enum OptionalLegendBarGlyph;//[Offset: 0x29a, Size: 0x1] 0x715cf9c680
	FText OptionalLegendBarGlyphText;//[Offset: 0x2a0, Size: 0x18] 0x715d052780
	void UpdateScreenLayout();// 0x69a5554 0x715d02d1a0
	static void UnregisterBlockerUpdateCallback(const delegate TargetCallback);// 0x69a4f88 0x715d02d280
	void SetSelectShortcutInLegendBarEnabled(const bool IsEnable);// 0x69a4d54 0x715d02d360
	void SetInitialGamepadFocus(bool bForceSetDefault);// 0x69a4eac 0x715d02d440
	static bool RemoveBlocker(out const GameplayTag Tag);// 0x69a50d0 0x715d02d520
	static void RegisterBlockerUpdateCallback(const delegate Callback);// 0x69a502c 0x715d02d600
	void OnGamepadContextEnabledEvent();// 0x45c6aa0 0x715d02d6e0
	void OnFocusEvent();// 0x45c6aa0 0x715d02d7c0
	void OnChildGamepadContextSwitch(GamepadContextWidgetSwitcher* WidgetSwitcher);// 0x69a4e00 0x715d02d8a0
	void OnAnimationDelayedSetFocus();// 0x69a4f58 0x715d02d980
	static bool IsUIBlockerValid(out const UIBlock Blocker);// 0x69a5188 0x715d02da60
	bool IsActive();// 0x69a4f6c 0x715d02db40
	Widget* GetInitialGamepadFocusedWidget();// 0x69a5568 0x715d02dc20
	static UIBlock GetBlocker(out const GameplayTag Tag);// 0x69a52a4 0x715d02dd00
	static void AddBlocker(out const UIBlock bLock);// 0x69a5444 0x715d02dde0

--------------------------------
Class: GamepadContextWidgetSwitcher.WidgetSwitcher.PanelWidget.Widget.Visual.Object // 71a4b35d80
	delegate OnChangeActiveWidget;//[Offset: 0x130, Size: 0x10] 0x715cd68a00
	delegate OnSetInitialGamepadFocus;//[Offset: 0x140, Size: 0x10] 0x715cd68a80
	void OnChildGamepadContextSwitch(GamepadContextWidgetSwitcher* WidgetSwitcher);// 0x69a3dd0 0x715cd551e0

--------------------------------
Class: UIBlock // 714906dd80
	GameplayTag ReferenceTag;//[Offset: 0x0, Size: 0x8] 0x715d7d9600
	FText BlockReason;//[Offset: 0x8, Size: 0x18] 0x715d7d9680

--------------------------------
Class: AccountReacquireConfirmationScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4885d80
	AccountReacquireConfirmationViewModel* ConfirmAccountRetrievalScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d052480
	void OnError();// 0x45c6aa0 0x715d02d0c0

--------------------------------
Class: AccountReacquireConfirmationViewModel.SDViewModel.Object // 71a4885880
	BoolBindable ErrorVisible;//[Offset: 0x50, Size: 0x70] 0x715d052300
	BoolBindable ButtonsEnabled;//[Offset: 0xc0, Size: 0x70] 0x715d052380
	TextBindable Error;//[Offset: 0x130, Size: 0x98] 0x715d052400
	void Reject();// 0x3a8a618 0x715d02cf00
	void Accept();// 0x3a8a62c 0x715d02cfe0

--------------------------------
Class: AgeGateScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4885600
	EditableTextBox* AgeEdit;//[Offset: 0x2e0, Size: 0x8] 0x715d054200
	AgeGateViewModel* AgeGateScreenVM;//[Offset: 0x2e8, Size: 0x8] 0x715d052180
	void ShowError();// 0x45c6aa0 0x715d02caa0
	void ShowChildDialogScreen();// 0x45c6aa0 0x715d02cb80
	void RefreshBindings();// 0x45c6aa0 0x715d02cc60
	void OnVirtualKeyboardToggled(const bool bIsShown, out const Box2D ViewRect);// 0x45c6aa0 0x715d02cd40
	void HideError();// 0x45c6aa0 0x715d02ce20

--------------------------------
Class: EditableTextBox.Widget.Visual.Object // 71a49b0600
	FText Text;//[Offset: 0x108, Size: 0x18] 0x715d7a6080
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x715d7a6100
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x7f0] 0x715d7a4b00
	SlateWidgetStyleAsset* Style;//[Offset: 0x920, Size: 0x8] 0x715d7a4b80
	FText HintText;//[Offset: 0x928, Size: 0x18] 0x715d7a4c00
	delegate HintTextDelegate;//[Offset: 0x940, Size: 0x10] 0x715d7a4c80
	SlateFontInfo Font;//[Offset: 0x950, Size: 0x50] 0x715d7a4d00
	LinearColor ForegroundColor;//[Offset: 0x9a0, Size: 0x10] 0x715d7a4d80
	LinearColor BackgroundColor;//[Offset: 0x9b0, Size: 0x10] 0x715d7a4e00
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9c0, Size: 0x10] 0x715d7a4e80
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 0x1] 0x715d7a4f00
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d1, Size: 0x1] 0x715d7a4f80
	float MinimumDesiredWidth;//[Offset: 0x9d4, Size: 0x4] 0x715d7a5000
	Margin Padding;//[Offset: 0x9d8, Size: 0x10] 0x715d7a5080
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 0x1] 0x715d7a5100
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e9, Size: 0x1] 0x715d7a5180
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ea, Size: 0x1] 0x715d7a5200
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9eb, Size: 0x1] 0x715d7a5280
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec, Size: 0x1] 0x715d7a3200
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ed, Size: 0x1] 0x715d7a3280
	byte KeyboardType;//[Offset: 0x9ee, Size: 0x1] 0x715d7a3300
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9ef, Size: 0x1] 0x715d7a3380
	enum VirtualKeyboardTrigger;//[Offset: 0x9f0, Size: 0x1] 0x7148cd9980
	enum VirtualKeyboardDismissAction;//[Offset: 0x9f1, Size: 0x1] 0x7148cd98e0
	byte Justification;//[Offset: 0x9f2, Size: 0x1] 0x715d7a3500
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x9f3, Size: 0x3] 0x715d7a3580
	delegate OnTextChanged;//[Offset: 0x9f8, Size: 0x10] 0x715d7a3600
	delegate OnTextCommitted;//[Offset: 0xa08, Size: 0x10] 0x715d7a3680
	void SetText(FText InText);// 0x55bc0b8 0x715d797860
	void SetJustification(byte InJustification);// 0x55bbb70 0x715d797940
	void SetIsReadOnly(bool bReadOnly);// 0x55bbd0c 0x715d797a20
	void SetIsPassword(bool bIsPassword);// 0x55bbc60 0x715d797b00
	void SetHintText(FText InText);// 0x55bbf38 0x715d797be0
	void SetError(FText InError);// 0x55bbdb8 0x715d797cc0
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x45c6aa0 0x715d797da0
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x45c6aa0 0x715d797e80
	bool HasError();// 0x55bbc14 0x715d797f60
	FText GetText();// 0x55bc238 0x715d798040
	void ClearError();// 0x55bbc4c 0x715d798120

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle // 714906c4c0
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x88] 0x715d7a6180
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 0x88] 0x715d7a6200
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 0x88] 0x715d7a6280
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 0x88] 0x715d7a6300
	Margin Padding;//[Offset: 0x228, Size: 0x10] 0x715d7a4280
	SlateFontInfo Font;//[Offset: 0x238, Size: 0x50] 0x715d7a4300
	SlateColor ForegroundColor;//[Offset: 0x288, Size: 0x28] 0x715d7a4380
	SlateColor BackgroundColor;//[Offset: 0x2b0, Size: 0x28] 0x715d7a4400
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2d8, Size: 0x28] 0x715d7a4480
	Margin HScrollBarPadding;//[Offset: 0x300, Size: 0x10] 0x715d7a4500
	Margin VScrollBarPadding;//[Offset: 0x310, Size: 0x10] 0x715d7a4580
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x320, Size: 0x4d0] 0x715d7a4a80

--------------------------------
Class: AgeGateViewModel.SDViewModel.Object // 71a4885380
	FString PrivacyPolicyUrl;//[Offset: 0x88, Size: 0x10] 0x715d053e80
	FString TermsOfServiceUrl;//[Offset: 0x98, Size: 0x10] 0x715d053f00
	BoolBindable ErrorVisible;//[Offset: 0xa8, Size: 0x70] 0x715d053f80
	TextBindable ErrorString;//[Offset: 0x118, Size: 0x98] 0x715d054000
	BoolBindable SubmitEnabled;//[Offset: 0x1b0, Size: 0x70] 0x715d054080
	void SubmitAge(FString Age);// 0x3a8b09c 0x715d02fd60
	void SetAgeIsValid(bool bIsValid);// 0x3a8aff0 0x715d02fe40
	void OnChildDialogConfirm();// 0x3a8afdc 0x715d02ff20

--------------------------------
Class: CodeScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488f600
	EnterCodeViewModel* CodeScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d053d00
	void OnVirtualKeyboardToggled(const bool bIsShown, out const Box2D ViewRect);// 0x45c6aa0 0x715d02fac0
	void OnInfoMessage();// 0x45c6aa0 0x715d02fba0
	void OnError();// 0x45c6aa0 0x715d02fc80

--------------------------------
Class: EnterCodeViewModel.SDViewModel.Object // 71a488e700
	bool ErrorVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x715d055080
	bool InfoVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x715d055100
	BoolBindable SubmitEnabled;//[Offset: 0x80, Size: 0x70] 0x715d055180
	BoolBindable InputEnabled;//[Offset: 0xf0, Size: 0x70] 0x715d055200
	TextBindable Error;//[Offset: 0x160, Size: 0x98] 0x715d055280
	TextBindable Info;//[Offset: 0x1f8, Size: 0x98] 0x715d053200
	TextBindable Email;//[Offset: 0x290, Size: 0x98] 0x715d053280
	TextBindable PopupTitle;//[Offset: 0x328, Size: 0x98] 0x715d053300
	BoolBindable CancelBtnVisible;//[Offset: 0x3c0, Size: 0x70] 0x715d053380
	bool bNewAccount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1] 0x715d053400
	void SetIsCodeValid(bool bIsValid);// 0x3a8cf70 0x715d02ef60
	void RequestResendCode();// 0x3a8ce98 0x715d02f040
	void CodeSubmitted(FString Code);// 0x3a8cec0 0x715d02f120
	void Cancel();// 0x3a8ceac 0x715d02f200

--------------------------------
Class: ConfirmCreateAccountScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488f380
	ConfirmCreateAccountViewModel* ConfirmCreateAccountVM;//[Offset: 0x2e0, Size: 0x8] 0x715d053c80

--------------------------------
Class: ConfirmCreateAccountViewModel.SDViewModel.Object // 71a488f100
	BoolBindable ConfirmEnabled;//[Offset: 0x60, Size: 0x70] 0x715d053a00
	BoolBindable CancelEnabled;//[Offset: 0xd0, Size: 0x70] 0x715d053a80
	BoolBindable MarketingOptInEnabled;//[Offset: 0x140, Size: 0x70] 0x715d053b00
	FText GetRichSubheaderText();// 0x3a8bc88 0x715d02f820
	void DeclineCreateAccount();// 0x3a8bd58 0x715d02f900
	void ConfirmCreateAccount(bool MarketingOptIn);// 0x3a8bd6c 0x715d02f9e0

--------------------------------
Class: ConfirmLogoutScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488ee80
	ConfirmLogoutViewModel* ConfirmLogoutVM;//[Offset: 0x2e0, Size: 0x8] 0x715d053980
	void OnError();// 0x45c6aa0 0x715d02f740

--------------------------------
Class: ConfirmLogoutViewModel.SDViewModel.Object // 71a488ec00
	BoolBindable ErrorVisible;//[Offset: 0x68, Size: 0x70] 0x715d053780
	BoolBindable ButtonsEnabled;//[Offset: 0xd8, Size: 0x70] 0x715d053800
	TextBindable Error;//[Offset: 0x148, Size: 0x98] 0x715d053880
	void Reject();// 0x3a8c61c 0x715d02f4a0
	void OnLogoutError(out const FText Error);// 0x3a8c50c 0x715d02f580
	void Accept();// 0x3a8c630 0x715d02f660

--------------------------------
Class: EmailScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488e980
	EditableTextBox* EmailEdit;//[Offset: 0x2e0, Size: 0x8] 0x715d053580
	EnterEmailViewModel* EmailScreenVM;//[Offset: 0x2e8, Size: 0x8] 0x715d053600
	void ShowError();// 0x45c6aa0 0x715d02f2e0
	void OnVirtualKeyboardToggled(const bool bIsShown, out const Box2D ViewRect);// 0x45c6aa0 0x715d02f3c0

--------------------------------
Class: EnterEmailViewModel.SDViewModel.Object // 71a488e480
	BoolBindable InputEnabled;//[Offset: 0x48, Size: 0x70] 0x715d054b80
	BoolBindable SubmitEnabled;//[Offset: 0xb8, Size: 0x70] 0x715d054c00
	BoolBindable ErrorVisible;//[Offset: 0x128, Size: 0x70] 0x715d054c80
	BoolBindable SkipAvailable;//[Offset: 0x198, Size: 0x70] 0x715d054d00
	TextBindable ErrorString;//[Offset: 0x208, Size: 0x98] 0x715d054d80
	TextBindable TitleText;//[Offset: 0x2a0, Size: 0x98] 0x715d054e00
	TextBindable CancelButtonText;//[Offset: 0x338, Size: 0x98] 0x715d054e80
	FString LastKnownEmail;//[Offset: 0x3d0, Size: 0x10] 0x715d054f00
	void SubmitEmail(FString Email);// 0x3a8d420 0x715d02ebe0
	void SetEmailIsValid(bool bIsValid);// 0x3a8d4d0 0x715d02ecc0
	void OnError();// 0x45c6aa0 0x715d02eda0
	void Cancel();// 0x3a8d40c 0x715d02ee80

--------------------------------
Class: HuntersGameEngine.GameEngine.Engine.Object // 71a488e200

--------------------------------
Class: HuntersGameInstance.GameInstance.Object // 71a488da80
	class HuntersMusicManager* MusicManagerClass;//[Offset: 0x1b0, Size: 0x8] 0x715cf9dbc0
	class HuntersClientStatusHandler* ClientStatusHandlerClass;//[Offset: 0x1b8, Size: 0x8] 0x715cf9dc60
	delegate OnViewTargetPlayerStateChanged;//[Offset: 0x1e0, Size: 0x10] 0x715d05a600
	ServerStateBeaconClient* ServerStateBeaconClient;//[Offset: 0x1f0, Size: 0x8] 0x715d05a680
	ServerStateBeaconHost* ServerStateBeaconHost;//[Offset: 0x1f8, Size: 0x8] 0x715d05a700
	ServerStateBeaconHostObject* ServerStateBeaconHostObject;//[Offset: 0x200, Size: 0x8] 0x715d05a780
	HuntersMusicManager* MusicManager;//[Offset: 0x2b8, Size: 0x8] 0x715d05a800
	HuntersClientStatusHandler* ClientStatusHandler;//[Offset: 0x2c0, Size: 0x8] 0x715d05a880
	HuntersMusicManager* GetMusicManager();// 0x3a8db0c 0x715d02ea20
	HuntersClientStatusHandler* GetClientStatusHandler();// 0x3a8daf0 0x715d02eb00

--------------------------------
Class: HuntersMusicManager.Object // 71a4b28d00
	AkAudioEvent* StartMusicEvent;//[Offset: 0x28, Size: 0x8] 0x715cd22500
	AkAudioEvent* StopMusicEvent;//[Offset: 0x30, Size: 0x8] 0x715cd22580
	void StopMusic();// 0x6800084 0x715cceaea0
	void StartMusic();// 0x6800098 0x715cceaf80
	bool ShouldPlay(enum MusicState);// 0x67ffe8c 0x715cceb060
	void SetMusicState(enum MusicState);// 0x45c6aa0 0x715cceb140
	void SetCombatMusicStateBP(enum MusicState);// 0x45c6aa0 0x715cceb220
	void SetCombatMusicState(enum MusicState);// 0x67fffe0 0x715cceb300
	void SetCharacterState(AkStateValue* CharacterMusicAkState);// 0x45c6aa0 0x715cceb3e0
	World* GetWorld();// 0x67ffe50 0x715cceb4c0
	void ForceCombatMusicState(enum MusicState);// 0x67fff3c 0x715cceb5a0
	void ClearCombatMusicState();// 0x45c6aa0 0x715cceb680

--------------------------------
Class: HuntersClientStatusHandler.Object // 71a4b2a380
	void OnPlayerEvent(enum PlayerEvent);// 0x45c6aa0 0x715ccec560
	void OnMatchEvent(enum MatchEvent);// 0x45c6aa0 0x715ccec640
	void OnEnteredPostMatchScreen(enum Screen, bool AsVictor);// 0x45c6aa0 0x715ccec720
	void OnEnteredMatch(enum MatchType, bool AsAttacker);// 0x45c6aa0 0x715ccec800
	void OnEnteredFrontendScreen(enum Screen);// 0x45c6aa0 0x715ccec8e0
	GameInstance* GetGameInstance();// 0x67f83fc 0x715ccec9c0

--------------------------------
Class: ServerStateBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object // 71a488ad80
	void ServerRequestServerState(FString InSessionID);// 0x3a91558 0x715d062e00
	void ClientReceiveServerState(bool bIsJoinable);// 0x3a914a4 0x715d062ee0

--------------------------------
Class: ServerStateBeaconHost.OnlineBeaconHost.OnlineBeacon.Actor.Object // 71a488ab00

--------------------------------
Class: ServerStateBeaconHostObject.OnlineBeaconHostObject.Actor.Object // 71a488a880

--------------------------------
Class: HuntersGameModeBase.GameModeBase.Info.Actor.Object // 71a488d800
	bool IsReconnectAllowed();// 0x3a8e13c 0x715d0605c0
	FString GetStatsName();// 0x3a8e17c 0x715d0606a0

--------------------------------
Class: LoginErrorPopupScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488d080
	LoginErrorViewModel* LoginErrorViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715d05ca00

--------------------------------
Class: LoginErrorViewModel.SDViewModel.Object // 71a488ce00
	TextBindable AccentTitleText;//[Offset: 0x48, Size: 0x98] 0x715d05e580
	TextBindable TitleText;//[Offset: 0xe0, Size: 0x98] 0x715d05e600
	TextBindable DescriptionText;//[Offset: 0x178, Size: 0x98] 0x715d05e680
	TextBindable HelpText;//[Offset: 0x210, Size: 0x98] 0x715d05e700
	BoolBindable ShowZidText;//[Offset: 0x2a8, Size: 0x70] 0x715d05c680
	TextBindable ZidText;//[Offset: 0x318, Size: 0x98] 0x715d05c700
	BoolBindable ShowGdprPinText;//[Offset: 0x3b0, Size: 0x70] 0x715d05c780
	TextBindable GdprPinText;//[Offset: 0x420, Size: 0x98] 0x715d05c800
	BoolBindable ShowHelp;//[Offset: 0x4b8, Size: 0x70] 0x715d05c880
	BoolBindable ShowExitButton;//[Offset: 0x528, Size: 0x70] 0x715d05c900
	TextBindable ExitButtonText;//[Offset: 0x598, Size: 0x98] 0x715d05c980
	void ExitButtonPressed();// 0x3a8e908 0x715d0604e0

--------------------------------
Class: LoginErrorWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488cb80
	LoginErrorViewModel* LoginErrorViewModel;//[Offset: 0x258, Size: 0x8] 0x715d05e500

--------------------------------
Class: LoginOptionsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488c900
	bool bShowNintendo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x715d05e080
	LoginOptionsViewModel* LoginOptionsVM;//[Offset: 0x2e8, Size: 0x8] 0x715d05e100
	UserWidget* SignInWithEmailButton;//[Offset: 0x2f0, Size: 0x8] 0x715d05e180
	UserWidget* SignInWithFacebookButton;//[Offset: 0x2f8, Size: 0x8] 0x715d05e200
	UserWidget* SignInWithAppleButton;//[Offset: 0x300, Size: 0x8] 0x715d05e280
	UserWidget* PlayWithNintendoButton;//[Offset: 0x308, Size: 0x8] 0x715d05e300
	UserWidget* SkipForNowButton;//[Offset: 0x310, Size: 0x8] 0x715d05e380
	UserWidget* PlayButton;//[Offset: 0x318, Size: 0x8] 0x715d05e400
	Widget* TermsOfServiceSection;//[Offset: 0x320, Size: 0x8] 0x715d05e480

--------------------------------
Class: LoginOptionsViewModel.SDViewModel.Object // 71a488c680
	FString TermsOfServiceUrl;//[Offset: 0x58, Size: 0x10] 0x715d05df80
	FString PrivacyPolicyUrl;//[Offset: 0x68, Size: 0x10] 0x715d05e000
	void SkipForNow();// 0x3a8efb4 0x715d063960
	void SignInWithFacebook();// 0x3a8efdc 0x715d060080
	void SignInWithEmail();// 0x3a8f004 0x715d060160
	void SignInWithApple();// 0x3a8eff0 0x715d060240
	void PlayWithNintendo();// 0x3a8efc8 0x715d060320
	void Play();// 0x3a8efa0 0x715d060400

--------------------------------
Class: LoginPreferences.DeveloperSettings.Object // 71a488c400
	int64[] PIDContinuedAsGuest;//[Offset: 0x38, Size: 0x10] 0x715cf9d4e0

--------------------------------
Class: LoginScreenSettings.DeveloperSettings.Object // 71a488c180

--------------------------------
Class: MarketingOptInScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488bf00
	MarketingOptInViewModel* MarketingOptInVM;//[Offset: 0x2e0, Size: 0x8] 0x715d05de80

--------------------------------
Class: MarketingOptInViewModel.SDViewModel.Object // 71a488bc80
	FText GetRichSubheaderText();// 0x3a8fb78 0x715d0636c0
	void DeclineOptIn();// 0x3a8fc48 0x715d0637a0
	void ConfirmOptIn();// 0x3a8fc5c 0x715d063880

--------------------------------
Class: ProjectVersion.BlueprintFunctionLibrary.Object // 71a488ba00
	static FString GetStream();// 0x3a9018c 0x715d063260
	static FString GetShelf();// 0x3a9023c 0x715d063340
	static FString GetContentVersion();// 0x3a9002c 0x715d063420
	static FString GetChangelist();// 0x3a902ec 0x715d063500
	static FString GetBuildAudience();// 0x3a900dc 0x715d0635e0

--------------------------------
Class: RetrieveNintendoAccountScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488b780
	RetrieveNintendoAccountViewModel* RetrieveNintendoAccountViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715d05db00

--------------------------------
Class: RetrieveNintendoAccountViewModel.SDViewModel.Object // 71a488b500
	TextBindable InstructionText;//[Offset: 0x48, Size: 0x98] 0x715d05da00
	TextBindable ConfirmButtonText;//[Offset: 0xe0, Size: 0x98] 0x715d05da80
	void OnCancel();// 0x3a90934 0x715d0630a0
	void OnAccept();// 0x3a90948 0x715d063180

--------------------------------
Class: SecondaryDeviceLoginScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488b280
	SecondaryDeviceLoginViewModel* SecondaryDeviceLoginVM;//[Offset: 0x2e0, Size: 0x8] 0x715d05d980

--------------------------------
Class: SecondaryDeviceLoginViewModel.SDViewModel.Object // 71a488b000
	TextBindable LoginCode;//[Offset: 0x58, Size: 0x98] 0x715d05d880
	TextBindable LoginInstructions;//[Offset: 0xf0, Size: 0x98] 0x715d05d900
	void Cancel();// 0x3a90f9c 0x715d062fc0

--------------------------------
Class: TermsOfServiceScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488a600
	TermsOfServiceViewModel* TermsOfServiceVM;//[Offset: 0x2e0, Size: 0x8] 0x715d05d700

--------------------------------
Class: TermsOfServiceViewModel.SDViewModel.Object // 71a488fd80
	FString TermsOfServiceUrl;//[Offset: 0x48, Size: 0x10] 0x715d05f680
	FString PrivacyPolicyUrl;//[Offset: 0x58, Size: 0x10] 0x715d05f700
	bool bIsTermsUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715d05f780
	void OnAccept();// 0x3a92078 0x715d062d20

--------------------------------
Class: AbilitiesSummaryScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a488fb00
	AbilitiesSummaryViewModel* AbilitiesSummaryScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d05f400
	SlateBrush DefaultModuleButtonBrush;//[Offset: 0x2e8, Size: 0x88] 0x715d05f480
	SDUserWidget* Ability1ModuleButton;//[Offset: 0x370, Size: 0x8] 0x715d05f500
	FName ModuleButtonIntroAnimName;//[Offset: 0x378, Size: 0x8] 0x715d05f580
	void OnSelectedGameModeChanged();// 0x45c6aa0 0x715d062b60
	void OnCharacterChanged(out const MetaTuningDataKey CharacterId);// 0x3d0bad0 0x715d062c40

--------------------------------
Class: MetaTuningDataKey // 714906b140
	GameplayTag Tag;//[Offset: 0x0, Size: 0x8] 0x715d7d6300

--------------------------------
Class: AbilitiesSummaryViewModel.SDViewModel.Object // 71a488f880
	delegate OnLoadoutUpdated;//[Offset: 0x78, Size: 0x10] 0x715d7df000
	AbilityIconBindable AbilityOneBrush;//[Offset: 0x88, Size: 0x178] 0x715d7df080
	TextBindable AbilityOneName;//[Offset: 0x200, Size: 0x98] 0x715d7df100
	TextBindable AbilityOneDescription;//[Offset: 0x298, Size: 0x98] 0x715d7df180
	TextBindable EquippedModuleOneName;//[Offset: 0x330, Size: 0x98] 0x715d7df200
	BrushBindable AbilityOneButtonBrush;//[Offset: 0x3c8, Size: 0x178] 0x715d7df280
	BoolBindable AbilityOneButtonShowNotification;//[Offset: 0x540, Size: 0x70] 0x715d7df300
	AbilityIconBindable AbilityTwoBrush;//[Offset: 0x5b0, Size: 0x178] 0x715d7df380
	TextBindable AbilityTwoName;//[Offset: 0x728, Size: 0x98] 0x715d7df400
	TextBindable AbilityTwoDescription;//[Offset: 0x7c0, Size: 0x98] 0x715d7df480
	TextBindable EquippedModuleTwoName;//[Offset: 0x858, Size: 0x98] 0x715d7df500
	BrushBindable AbilityTwoButtonBrush;//[Offset: 0x8f0, Size: 0x178] 0x715d7df580
	BoolBindable AbilityTwoButtonShowNotification;//[Offset: 0xa68, Size: 0x70] 0x715d7df600
	AbilityIconBindable AbilityThreeBrush;//[Offset: 0xad8, Size: 0x178] 0x715d7df680
	TextBindable AbilityThreeName;//[Offset: 0xc50, Size: 0x98] 0x715d7df700
	TextBindable AbilityThreeDescription;//[Offset: 0xce8, Size: 0x98] 0x715d7df780
	BrushBindable AbilityThreeButtonBrush;//[Offset: 0xd80, Size: 0x178] 0x715d7dd700
	BoolBindable AbilityThreeButtonShowNotification;//[Offset: 0xef8, Size: 0x70] 0x715d7dd780
	TextBindable EquippedModuleThreeName;//[Offset: 0xf68, Size: 0x98] 0x715d7dd800
	TextBindable SelectedGameModeName;//[Offset: 0x1000, Size: 0x98] 0x715d7dd880
	BrushBindable SelectedGameModePerspectiveIcon;//[Offset: 0x1098, Size: 0x178] 0x715d7dd900
	BrushBindable SelectedGameModeHeaderButtonImage;//[Offset: 0x1210, Size: 0x178] 0x715d7dda00
	void OnModeSelectButtonPressed();// 0x3d0c104 0x715d7cdb40
	void OnCharacterChangedDelegate__DelegateSignature(out const MetaTuningDataKey CharacterId);// 0x45c6aa0 0x715d7cdc20
	void ModuleButtonPressed(int AbilityIndex);// 0x3d0c060 0x715d7cdd00
	void LoadoutUpdatedDelegate__DelegateSignature();// 0x45c6aa0 0x715d7cdde0

--------------------------------
Class: AbilityIconBindable.BrushBindable.Bindable // 714906d840

--------------------------------
Class: SelectableItemViewModel.SDViewModel.Object // 71a4894c00
	BoolBindable IsSelected;//[Offset: 0x68, Size: 0x70] 0x715d825000
	BoolBindable IsUnlocked;//[Offset: 0xd8, Size: 0x70] 0x715d825080
	BoolBindable IsEquipped;//[Offset: 0x148, Size: 0x70] 0x715d825100
	TextBindable DisplayName;//[Offset: 0x1b8, Size: 0x98] 0x715d825180
	TextBindable Description;//[Offset: 0x250, Size: 0x98] 0x715d825200
	TextBindable CostAmount;//[Offset: 0x2e8, Size: 0x98] 0x715d825280
	StyledBorderForegroundBindable StyledBorder;//[Offset: 0x380, Size: 0x178] 0x715d823280
	MarginBindable Frame;//[Offset: 0x4f8, Size: 0x88] 0x715d823380
	BoolBindable IsUnlockedAndEquipped;//[Offset: 0x580, Size: 0x70] 0x715d823400
	BrushBindable ImageBackground;//[Offset: 0x5f0, Size: 0x178] 0x715d823480
	VisibilityBindable CostsVisibility;//[Offset: 0x768, Size: 0x70] 0x715d823500
	BoolBindable ShowCredits;//[Offset: 0x7d8, Size: 0x70] 0x715d823580
	BoolBindable ShowAdditionalCurrency;//[Offset: 0x848, Size: 0x70] 0x715d823600
	CurrencyDisplayViewModel* CreditDisplayViewModel;//[Offset: 0x8b8, Size: 0x8] 0x715d823680
	CurrencyDisplayViewModel* AdditionalCurrencyDisplayViewModel;//[Offset: 0x8c0, Size: 0x8] 0x715d823700
	MetaTuningDataKey EntitlementKey;//[Offset: 0x8e8, Size: 0x8] 0x715d823780
	HuntersEntitlementBase* EntitlementItem;//[Offset: 0x8f0, Size: 0x8] 0x715d823800
	void SetUnlocked(bool bNewUnlocked);// 0x3d7914c 0x715d831660
	void SetSelected(bool bNewSelected, bool bUserInvoked);// 0x3d79234 0x715d831740
	void SetEquipped(bool bNewEquipped);// 0x3d79374 0x715d831820
	void SetCanClick(const bool bInCanClick);// 0x3d79068 0x715d831900
	bool GetUnlocked();// 0x3d79110 0x715d8319e0
	bool GetSelected();// 0x3d791f8 0x715d831ac0
	bool GetEquipped();// 0x3d79338 0x715d831ba0
	enum GetCustomisationState();// 0x3d79034 0x715d831c80

--------------------------------
Class: StyledBorderForegroundBindable.Bindable // 714906d3c0
	SlateBrush Value;//[Offset: 0xf0, Size: 0x88] 0x715d823200

--------------------------------
Class: MarginBindable.Bindable // 714906d480
	Margin Value;//[Offset: 0x78, Size: 0x10] 0x715d823300

--------------------------------
Class: CurrencyDisplayViewModel.ImageAmountDisplayViewModel.BAInjectableViewModel.SDViewModel.Object // 71a489dd00
	bool HasZeroAmount();// 0x3d249c0 0x715d068f20
	void CurrencyDisplayPressed();// 0x3d249ac 0x715d069000

--------------------------------
Class: ImageAmountDisplayViewModel.BAInjectableViewModel.SDViewModel.Object // 71a489da80
	BrushBindable ImageBrush;//[Offset: 0x50, Size: 0x178] 0x715d079500
	TextBindable AmountText;//[Offset: 0x1c8, Size: 0x98] 0x715d079580
	VisibilityBindable Visibility;//[Offset: 0x260, Size: 0x70] 0x715d079600
	ColorBindable Colour;//[Offset: 0x2d0, Size: 0x88] 0x715d079680

--------------------------------
Class: BAInjectableViewModel.SDViewModel.Object // 71a4893800

--------------------------------
Class: HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2b780
	<GameplayTag,HuntersEntitlementCost> Costs;//[Offset: 0x38, Size: 0x50] 0x715cd30dc0
	HuntersEntitlementAmount[] Requires;//[Offset: 0x88, Size: 0x10] 0x715cc8baa0
	HuntersEntitlementShop* HuntersEntitlementShop;//[Offset: 0x98, Size: 0x8] 0x715cd2b900
	GameplayTag EntitlementId;//[Offset: 0xa0, Size: 0x8] 0x715cd2b980
	GameplayTag Entitlement_type_id;//[Offset: 0xa8, Size: 0x8] 0x715cd2ba00
	enum Rarity;//[Offset: 0xb0, Size: 0x1] 0x715cc8bb40
	bool bHiddenIfLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1] 0x715cd2bb00
	GameplayTag Battle_pass_id;//[Offset: 0xb4, Size: 0x8] 0x715cd2bb80
	DateTime Available_from;//[Offset: 0xc0, Size: 0x8] 0x715cd2bc00
	bool Public;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x715cd2bc80
	FText Name;//[Offset: 0xd0, Size: 0x18] 0x715cd2bd00
	FText Description;//[Offset: 0xe8, Size: 0x18] 0x715cd2bd80
	HuntersEntitlementUIData* UIData;//[Offset: 0x100, Size: 0x28] 0x715cd2be00

--------------------------------
Class: BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a48ad800
	enum AssetType;//[Offset: 0x30, Size: 0x1] 0x715d0b0ce0

--------------------------------
Class: HuntersEntitlementCost.HuntersEntitlementAmount // 715cec1000
	bool Hidden_cost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715ceb4300

--------------------------------
Class: HuntersEntitlementAmount // 715cec1180
	GameplayTag Entitlement_id;//[Offset: 0x0, Size: 0x8] 0x715ceb4500
	int64 Amount;//[Offset: 0x8, Size: 0x8] 0x715ceb4580

--------------------------------
Class: HuntersEntitlementShop.DataAsset.Object // 71a4b34480
	<GameplayTag,HuntersEntitlementCost> Costs;//[Offset: 0x30, Size: 0x50] 0x715cd30c40
	HuntersEntitlementAmount[] Requires;//[Offset: 0x80, Size: 0x10] 0x715cc8d8a0

--------------------------------
Class: HuntersEntitlementUIData.DataAsset.Object // 71a4b33d00
	SlateBrush Icon;//[Offset: 0x30, Size: 0x88] 0x715cd2e980
	Margin Frame;//[Offset: 0xb8, Size: 0x10] 0x715cd2ea00
	<int,HuntersEntitlementUIDataStruct> UIDataForAmount;//[Offset: 0xc8, Size: 0x50] 0x715cd30a00
	HuntersEntitlementUIDataStruct GetUIDataForAmount(const int InAmount);// 0x6868104 0x715cd51ba0
	SlateBrush GetImageForAmount(const int InAmount);// 0x686829c 0x715cd51c80

--------------------------------
Class: HuntersEntitlementUIDataStruct // 715cec0e80
	SlateBrush Icon;//[Offset: 0x0, Size: 0x88] 0x715ceb6000
	Margin Frame;//[Offset: 0x88, Size: 0x10] 0x715ceb6080
	class Actor* ActorClass;//[Offset: 0x98, Size: 0x28] 0x715ce931c0
	StaticCameraFrame* Camera;//[Offset: 0xc0, Size: 0x28] 0x715ceb6100

--------------------------------
Class: StaticCameraFrame.DataAsset.Object // 71a4b2c180
	float AspectRatio;//[Offset: 0x30, Size: 0x4] 0x715cd2c100
	float HorizontalFOV;//[Offset: 0x34, Size: 0x4] 0x715cd2c180
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc] 0x715cd2c200
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x715cd2c280
	GameplayTag TransitionTag;//[Offset: 0x50, Size: 0x8] 0x715cd2c300

--------------------------------
Class: CustomisationItemViewModel.SelectableItemViewModel.SDViewModel.Object // 71a4894e80
	NotificationBadgeViewModel* PipNotificationVM;//[Offset: 0x920, Size: 0x8] 0x715d05f200
	NotificationBadgeViewModel* FTUENotificationVM;//[Offset: 0x928, Size: 0x8] 0x715d05f280
	BoolBindable ShowLevelUnlockRequirement;//[Offset: 0x930, Size: 0x70] 0x715d05f300
	TextBindable LevelUnlockRequirement;//[Offset: 0x9a0, Size: 0x98] 0x715d05f380

--------------------------------
Class: NotificationBadgeViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c2180
	TextBindable LabelText;//[Offset: 0x60, Size: 0x98] 0x715d0d4000
	BoolBindable IsVisible;//[Offset: 0xf8, Size: 0x70] 0x715d0d4080
	void SetPipID(out const MetaTuningDataKey PipID, const bool bIsExactMatch);// 0x3d60960 0x715d0c27e0

--------------------------------
Class: AbilityModuleCustomisationItemViewModel.CustomisationItemViewModel.SelectableItemViewModel.SDViewModel.Object // 71a4895100
	TextBindable Pro1Description;//[Offset: 0xa58, Size: 0x98] 0x715d05ec80
	BoolBindable ShowPro1;//[Offset: 0xaf0, Size: 0x70] 0x715d05ed00
	TextBindable Pro2Description;//[Offset: 0xb60, Size: 0x98] 0x715d05ed80
	BoolBindable ShowPro2;//[Offset: 0xbf8, Size: 0x70] 0x715d05ee00
	TextBindable Con1Description;//[Offset: 0xc68, Size: 0x98] 0x715d05ee80
	BoolBindable ShowCon1;//[Offset: 0xd00, Size: 0x70] 0x715d05ef00
	TextBindable Con2Description;//[Offset: 0xd70, Size: 0x98] 0x715d05ef80
	BoolBindable ShowCon2;//[Offset: 0xe08, Size: 0x70] 0x715d05f000
	BoolBindable ShowGeneralDescription;//[Offset: 0xe78, Size: 0x70] 0x715d05f080
	BoolBindable ShowPanelImage;//[Offset: 0xee8, Size: 0x70] 0x715d05f100
	BrushBindable PanelImage;//[Offset: 0xf58, Size: 0x178] 0x715d05f180

--------------------------------
Class: HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4894200
	enum GamepadButton;//[Offset: 0x260, Size: 0x1] 0x7148cda9c0
	FText ShortcutText;//[Offset: 0x268, Size: 0x18] 0x715d7d6a80
	UMGSequencePlayer* PreviousAnim;//[Offset: 0x280, Size: 0x8] 0x715d7d6b00
	void ResetAnimation();// 0x69a4a00 0x715d7c66e0
	void OnStartHighlightAnimation();// 0x45c6aa0 0x715d7c67c0
	void OnEndUnHighlightAnimation();// 0x45c6aa0 0x715d7c68a0

--------------------------------
Class: SelectableItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4894480
	SelectableItemViewModel* SelectableItemViewModel;//[Offset: 0x290, Size: 0x8] 0x715d820880
	SelectableItemContainer* SelectableItemContainer;//[Offset: 0x298, Size: 0x8] 0x715d820900
	void Select();// 0x3d79994 0x715d7ccb80
	void OnSelectionStateChanged(const bool ContextChanged, enum PreviousState, enum NextState, const bool UpdatedCustomisationState, const bool WasSelected, const bool WillBeSelected, const bool UpdatedSelected);// 0x3d799b0 0x715d7ccc60
	void Deselect();// 0x3d79978 0x715d7ccd40

--------------------------------
Class: SelectableItemContainer.UserWidget.Widget.Visual.Object // 71a48cdd00
	void PlayPressed(byte PlayMode);// 0x45c6aa0 0x715d0c8e40
	void NotifySelectionChanged(bool bIsSelected, enum CustomisationState, bool bContextChanged);// 0x45c6aa0 0x715d0c8f20
	void NotifyCustomisationStateChanged(bool bIsSelected, enum CustomisationState);// 0x45c6aa0 0x715d0c9000

--------------------------------
Class: CustomisationItemWidget.SelectableItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4894700
	CustomisationItemViewModel* MyViewModel;//[Offset: 0x2a0, Size: 0x8] 0x715d05ea00
	CurrencyDisplayWidget* CreditDisplay;//[Offset: 0x2a8, Size: 0x8] 0x715d05ea80
	CurrencyDisplayWidget* AdditionalCurrencyDisplay;//[Offset: 0x2b0, Size: 0x8] 0x715d05eb00
	NotificationBadgeWidget* PipNotification;//[Offset: 0x2b8, Size: 0x8] 0x715d05eb80
	NotificationBadgeWidget* FTUENotification;//[Offset: 0x2c0, Size: 0x8] 0x715d05ec00

--------------------------------
Class: CurrencyDisplayWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489d800
	bool HasShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1] 0x715d07b480
	ImageAmountDisplayViewModel* ImageAmountDisplayViewModel;//[Offset: 0x258, Size: 0x8] 0x715d07b500

--------------------------------
Class: NotificationBadgeWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c1f00
	NotificationBadgeViewModel* NotificationBadgeViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d3e80
	void SetViewModel(NotificationBadgeViewModel* NotificationBadgeVM);// 0x3d60e50 0x715d0c2620
	void OnVisibilityChanged(const bool bInIsVisible);// 0x45c6aa0 0x715d0c2700

--------------------------------
Class: AbilityModuleCustomisationItemWidget.CustomisationItemWidget.SelectableItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4894980
	AbilityModuleCustomisationItemViewModel* AbilityModuleCustomisationItemViewModel;//[Offset: 0x2c8, Size: 0x8] 0x715d05e980

--------------------------------
Class: AllDailyChallengesClaimedWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4893f80
	HomeScreenChallengesViewModel* HomeScreenChallengesViewModel;//[Offset: 0x258, Size: 0x8] 0x715d05e900

--------------------------------
Class: HomeScreenChallengesViewModel.ChallengesBaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48a6280
	BoolBindable ShowWeeklyChallengesButton;//[Offset: 0x3f0, Size: 0x70] 0x715d0aac00
	bool HasClaimableChallenges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1] 0x715d0aac80
	void OnWeeklyChallengesButtonPressed();// 0x3d48f6c 0x715d06ef60

--------------------------------
Class: ChallengesBaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4898a80
	BoolBindable HasChallenges;//[Offset: 0x50, Size: 0x70] 0x715d073500
	BoolBindable ShowTimeRemainingText;//[Offset: 0xc0, Size: 0x70] 0x715d073580
	TextBindable TimeRemainingText;//[Offset: 0x130, Size: 0x98] 0x715d073600
	BoolBindable ShowCompletedChallengesText;//[Offset: 0x1c8, Size: 0x70] 0x715d073680
	TextBindable CompletedChallengesText;//[Offset: 0x238, Size: 0x98] 0x715d073700
	BoolBindable ShowChallenges;//[Offset: 0x2d0, Size: 0x70] 0x715d073780
	ChallengeDetailsViewModel*[] ChallengeDetailsList;//[Offset: 0x368, Size: 0x10] 0x715cf9cfe0
	bool bIsFirstVisit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1] 0x715d073880

--------------------------------
Class: ChallengeDetailsViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4899700
	FloatBindable ChallengeProgress;//[Offset: 0x50, Size: 0x70] 0x715d074200
	TextBindable ChallengeProgressText;//[Offset: 0xc0, Size: 0x98] 0x715d072180
	TextBindable ChallengeMaxText;//[Offset: 0x158, Size: 0x98] 0x715d072200
	BoolBindable ShowDenominator;//[Offset: 0x1f0, Size: 0x70] 0x715d072280
	TextBindable Description;//[Offset: 0x260, Size: 0x98] 0x715d072300
	BoolBindable IsClaimed;//[Offset: 0x2f8, Size: 0x70] 0x715d072380
	BoolBindable IsCompleted;//[Offset: 0x368, Size: 0x70] 0x715d072400
	BoolBindable IsValid;//[Offset: 0x3d8, Size: 0x70] 0x715d072480
	BoolBindable IsLocked;//[Offset: 0x448, Size: 0x70] 0x715d072500
	Int32Bindable DisplayStateAsInt;//[Offset: 0x4b8, Size: 0x70] 0x715d072580
	BoolBindable ShowReward;//[Offset: 0x528, Size: 0x70] 0x715d072600
	Int32Bindable DisplayFrameTypeAsInt;//[Offset: 0x598, Size: 0x70] 0x715d072680
	BoolBindable ShowBottomSection;//[Offset: 0x608, Size: 0x70] 0x715d072700
	BoolBindable ShowPip;//[Offset: 0x678, Size: 0x70] 0x715d072780
	BrushBindable Image;//[Offset: 0x6e8, Size: 0x178] 0x715d072800
	ImageAmountDisplayViewModel* RewardViewModel;//[Offset: 0x8a0, Size: 0x8] 0x715d072880
	BoolBindable ShowDebug;//[Offset: 0x918, Size: 0x70] 0x715d072900
	void OnClicked();// 0x3d11bb8 0x715d064e60
	bool GetFocusSelectionState();// 0x3d11bcc 0x715d064f40

--------------------------------
Class: BadgesScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4893d00
	FrontendBadgeListViewModel* BadgeListVM;//[Offset: 0x268, Size: 0x8] 0x715d05e800
	FrontendBadgeListWidget* BadgeListWidget;//[Offset: 0x270, Size: 0x8] 0x715d05e880

--------------------------------
Class: FrontendBadgeListViewModel.SDViewModel.Object // 71a48a2b80
	FrontendBadgeViewModel*[] BadgeVMs;//[Offset: 0x48, Size: 0x10] 0x715cf9e480

--------------------------------
Class: FrontendBadgeViewModel.SDViewModel.Object // 71a48a2180
	BrushBindable ItemImage;//[Offset: 0x60, Size: 0x178] 0x715d0a3880
	BrushBindable FrameImage;//[Offset: 0x1d8, Size: 0x178] 0x715d0a3900
	TextBindable ItemNameText;//[Offset: 0x350, Size: 0x98] 0x715d0a3980
	TextBindable ItemCountText;//[Offset: 0x3e8, Size: 0x98] 0x715d0a3a00
	TextBindable ItemDescriptionText;//[Offset: 0x480, Size: 0x98] 0x715d0a3a80
	TextBindable XPEarnedText;//[Offset: 0x518, Size: 0x98] 0x715d0a3b00
	bool bDisplayXPEarned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1] 0x715d0a3b80
	int ItemCount;//[Offset: 0x5b4, Size: 0x4] 0x715d0a3c00
	int XPEarned;//[Offset: 0x5b8, Size: 0x4] 0x715d0a3c80
	GameplayTag BadgeKey;//[Offset: 0x5bc, Size: 0x8] 0x715d0a3d00
	void OnBadgeButtonClicked();// 0x3d38a18 0x715d06adc0

--------------------------------
Class: FrontendBadgeListWidget.ListView.ListViewBase.Widget.Visual.Object // 71a48a2900
	FrontendBadgeListViewModel* FrontendBadgeListViewModel;//[Offset: 0x860, Size: 0x8] 0x715d0a3d80
	float ScrollPercent;//[Offset: 0x868, Size: 0x4] 0x715d0a3e00
	float InitialSpacing;//[Offset: 0x86c, Size: 0x4] 0x715d0a3e80
	void SetScrollPercent(float Percent);// 0x3d38658 0x715d06aea0

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object // 71a48a2680
	byte Orientation;//[Offset: 0x7d0, Size: 0x1] 0x715d0a3f80
	byte SelectionMode;//[Offset: 0x7d1, Size: 0x1] 0x715d0a4000
	enum ConsumeMouseWheel;//[Offset: 0x7d2, Size: 0x1] 0x715cf9fba0
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d3, Size: 0x1] 0x715d0a4100
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 0x1] 0x715d0a4180
	float EntrySpacing;//[Offset: 0x7d8, Size: 0x4] 0x715d0a4200
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dc, Size: 0x1] 0x715d0a2180
	Object*[] ListItems;//[Offset: 0x7e0, Size: 0x10] 0x715cf9fc40
	delegate BP_OnEntryInitialized;//[Offset: 0x800, Size: 0x10] 0x715d0a2280
	delegate BP_OnItemClicked;//[Offset: 0x810, Size: 0x10] 0x715d0a2300
	delegate BP_OnItemDoubleClicked;//[Offset: 0x820, Size: 0x10] 0x715d0a2380
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x830, Size: 0x10] 0x715d0a2400
	delegate BP_OnItemSelectionChanged;//[Offset: 0x840, Size: 0x10] 0x715d0a2480
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x850, Size: 0x10] 0x715d0a2500
	void SetSelectionMode(byte SelectionMode);// 0x55c4634 0x715d06af80
	void SetSelectedIndex(int Index);// 0x55c44b4 0x715d06b060
	void ScrollIndexIntoView(int Index);// 0x55c4558 0x715d06b140
	void RemoveItem(Object* Item);// 0x55c4878 0x715d06b220
	void NavigateToIndex(int Index);// 0x55c4410 0x715d06b300
	bool IsRefreshPending();// 0x55c45fc 0x715d06b3e0
	int GetNumItems();// 0x55c4798 0x715d06b4c0
	Object*[] GetListItems();// 0x55c49c0 0x715d06b5a0
	Object* GetItemAt(int Index);// 0x55c47cc 0x715d06b680
	int GetIndexForItem(Object* Item);// 0x55c46ec 0x715d06b760
	void ClearListItems();// 0x55c46d8 0x715d06b840
	void BP_SetSelectedItem(Object* Item);// 0x55c436c 0x715d06b920
	void BP_SetListItems(out const Object*[] InListItems);// 0x55c3e9c 0x715d06ba00
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x55c427c 0x715d06bae0
	void BP_ScrollItemIntoView(Object* Item);// 0x55c3f70 0x715d06bbc0
	void BP_NavigateToItem(Object* Item);// 0x55c4014 0x715d06bca0
	bool BP_IsItemVisible(Object* Item);// 0x55c40b8 0x715d06bd80
	bool BP_GetSelectedItems(out Object*[] Items);// 0x55c4168 0x715d06be60
	Object* BP_GetSelectedItem();// 0x55c3e68 0x715d06bf40
	int BP_GetNumItemsSelected();// 0x55c4234 0x715d06c020
	void BP_ClearSelection();// 0x55c4268 0x715d06c100
	void BP_CancelScrollIntoView();// 0x55c3f5c 0x715d06c1e0
	void AddItem(Object* Item);// 0x55c491c 0x715d06c2c0

--------------------------------
Class: ListViewBase.Widget.Visual.Object // 71a48a2400
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x108, Size: 0x4d0] 0x715d0a1200
	enum ScrollBarVisibility;//[Offset: 0x5d8, Size: 0x1] 0x715cf9fec0
	Vector2D ScrollbarThickness;//[Offset: 0x5dc, Size: 0x8] 0x715d0a1300
	Margin ScrollbarPadding;//[Offset: 0x5e4, Size: 0x10] 0x715d0a1380
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1] 0x715d0a1400
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 0x1] 0x715d0a1480
	class UserWidget* EntryWidgetClass;//[Offset: 0x5f8, Size: 0x8] 0x715cf9ff60
	float WheelScrollMultiplier;//[Offset: 0x600, Size: 0x4] 0x715d0a1500
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 0x1] 0x715d0a1580
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 0x1] 0x715d0a1600
	float FixedLineScrollOffset;//[Offset: 0x608, Size: 0x4] 0x715d0a1680
	delegate BP_OnEntryGenerated;//[Offset: 0x610, Size: 0x10] 0x715d0a1700
	delegate BP_OnEntryReleased;//[Offset: 0x620, Size: 0x10] 0x715d0a1780
	UserWidgetPool EntryWidgetPool;//[Offset: 0x630, Size: 0x80] 0x715d0a1800
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x55c5868 0x715d06c3a0
	void SetScrollOffset(const float InScrollOffset);// 0x55c590c 0x715d06c480
	void SetScrollbarVisibility(enum InVisibility);// 0x55c57c4 0x715d06c560
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x55c5700 0x715d06c640
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x55c564c 0x715d06c720
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x55c55a0 0x715d06c800
	void ScrollToTop();// 0x55c59c4 0x715d06c8e0
	void ScrollToBottom();// 0x55c59b0 0x715d06c9c0
	void RequestRefresh();// 0x55c57b0 0x715d0690e0
	void RegenerateAllEntries();// 0x55c59d8 0x715d0691c0
	UserWidget*[] GetDisplayedEntryWidgets();// 0x55c59ec 0x715d0692a0

--------------------------------
Class: UserWidgetPool // 715dada000
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10] 0x715dae48e0
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10] 0x715dae4980

--------------------------------
Class: BattlePassBundleInformationViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4893a80
	CurrencyDisplayViewModel* CurrencyDisplayVM;//[Offset: 0x50, Size: 0x8] 0x715d05e780
	void PurchaseButtonPressed();// 0x3d0cbac 0x715d062a80

--------------------------------
Class: BattlePassBundleInformationWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4893580
	HuntersStandardButtonWithShortcut* Button;//[Offset: 0x258, Size: 0x8] 0x715d05fe80
	CurrencyDisplayWidget* CurrencyWidget;//[Offset: 0x260, Size: 0x8] 0x715d05ff00
	BattlePassBundleInformationViewModel* BattlePassBundleInformationViewModel;//[Offset: 0x268, Size: 0x8] 0x715d05ff80

--------------------------------
Class: HuntersStandardButtonWithShortcut.HuntersStandardButton.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3e200
	bool bHideShortcutWhenButtonDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x715cd6a800
	class ControllerShortcutWidget* ShortcutClass;//[Offset: 0x3e0, Size: 0x8] 0x715cc8e8e0
	ContentWidget* ShortcutSlot;//[Offset: 0x3e8, Size: 0x8] 0x715cd6a880
	ControllerShortcutWidget* Shortcut;//[Offset: 0x3f0, Size: 0x8] 0x715cd6a900
	GamepadShortcutParameters ControllerShortcutParameters;//[Offset: 0x3f8, Size: 0x30] 0x715cd6a980
	void SetShortcutShowInLegendBar(bool bShowInLegendBar);// 0x69ac9c8 0x715cd54760
	void SetShortcutEnabled(bool bEnabled);// 0x69aca74 0x715cd54840

--------------------------------
Class: HuntersStandardButton.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4893080
	bool bShowText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1] 0x715d070c00
	FText PrimaryText;//[Offset: 0x368, Size: 0x18] 0x715d070c80
	FName PrimaryTextColor;//[Offset: 0x380, Size: 0x8] 0x715d070d00
	FName DisabledPrimaryTextColor;//[Offset: 0x388, Size: 0x8] 0x715d070d80
	bool bShowSecondaryText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1] 0x715d070e00
	FText SecondaryText;//[Offset: 0x398, Size: 0x18] 0x715d070e80
	FName SecondaryTextColor;//[Offset: 0x3b0, Size: 0x8] 0x715d070f00
	FName DisabledSecondaryTextColor;//[Offset: 0x3b8, Size: 0x8] 0x715d070f80
	TextBlock* PrimaryTextBlock;//[Offset: 0x3c0, Size: 0x8] 0x715d071000
	TextBlock* SecondaryTextBlock;//[Offset: 0x3c8, Size: 0x8] 0x715d071080
	Image* Panel;//[Offset: 0x3d0, Size: 0x8] 0x715d05f800
	void SetTextVisibility(bool bPrimaryTextVisible, bool bSecondaryTextVisible);// 0x69abb9c 0x715d0627e0
	void SetTextColorThemes(FName EnabledPrimaryColorTheme, FName EnabledSecondaryColorTheme, FName DisabledPrimaryColorTheme, FName DisabledSecondaryColorTheme);// 0x69aba34 0x715d0628c0
	void SetColors(FName InPrimaryColor, FName InSecondaryColor, FName InDisabledPrimaryColor, FName InDisabledSecondaryColor, FName InStrokeShadowColor, FName InDisabledStrokeShadowColor);// 0x69ab848 0x715d0629a0

--------------------------------
Class: HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4892e00
	delegate OnClicked;//[Offset: 0x288, Size: 0x10] 0x715d7d7a80
	delegate OnPressed;//[Offset: 0x298, Size: 0x10] 0x715d7d7b00
	delegate OnReleased;//[Offset: 0x2a8, Size: 0x10] 0x715d7d7b80
	delegate OnHovered;//[Offset: 0x2b8, Size: 0x10] 0x715d7d7c00
	delegate OnUnhovered;//[Offset: 0x2c8, Size: 0x10] 0x715d7d7c80
	WidgetAnimation* AnimateIn;//[Offset: 0x2d8, Size: 0x8] 0x715d7d7d00
	WidgetAnimation* AnimateInDisabled;//[Offset: 0x2e0, Size: 0x8] 0x715d7d7d80
	WidgetAnimation* Pressed;//[Offset: 0x2e8, Size: 0x8] 0x715d7d7e00
	FName PrimaryColorName;//[Offset: 0x2f0, Size: 0x8] 0x715d7d7e80
	FName SecondaryColorName;//[Offset: 0x2f8, Size: 0x8] 0x715d7d7f00
	FName DisabledPrimaryColorName;//[Offset: 0x300, Size: 0x8] 0x715d7d7f80
	FName DisabledSecondaryColorName;//[Offset: 0x308, Size: 0x8] 0x715d7d8000
	FName StrokeShadowColorName;//[Offset: 0x310, Size: 0x8] 0x715d7d8080
	FName DisabledStrokeShadowColorName;//[Offset: 0x318, Size: 0x8] 0x715d7d8100
	bool bShowAdditionalContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1] 0x715d7d8180
	bool bFlipHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1] 0x715d7d8200
	bool bFlipVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 0x1] 0x715d7d8280
	bool bIsNavigable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 0x1] 0x715d7d8300
	bool bIsNavigableWhenDeactivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1] 0x715d7d8380
	Vector2D RaisedButtonOffset;//[Offset: 0x328, Size: 0x8] 0x715d7d8400
	byte HuntersClickMethod;//[Offset: 0x330, Size: 0x1] 0x715d7d6380
	byte HuntersTouchMethod;//[Offset: 0x331, Size: 0x1] 0x715d789200
	byte HuntersPressMethod;//[Offset: 0x332, Size: 0x1] 0x715d7d6400
	Button* Button;//[Offset: 0x338, Size: 0x8] 0x715d7d6480
	CanvasPanel* PanelContainer;//[Offset: 0x340, Size: 0x8] 0x715d7d6500
	NamedSlot* AdditionalContent;//[Offset: 0x348, Size: 0x8] 0x715d7d6580
	HuntersImage* Stroke;//[Offset: 0x350, Size: 0x8] 0x715d7d6600
	float OffsetAmount;//[Offset: 0x358, Size: 0x4] 0x715d7d6680
	void SetAdditionalContentVisibility(bool bVisible);// 0x69ac2e0 0x715d7c59c0
	void OnButtonUnhovered();// 0x69ac0d4 0x715d7c5aa0
	void OnButtonReleased();// 0x69ac0fc 0x715d7c5b80
	void OnButtonPressed();// 0x69ac110 0x715d7c5c60
	void OnButtonHovered();// 0x69ac0e8 0x715d7c5d40
	void OnButtonEnabledChanged(const bool bEnabled);// 0x45c6aa0 0x715d7c5e20
	void OnButtonClicked();// 0x69ac124 0x715d7c5f00
	void ButtonEvent__DelegateSignature();// 0x45c6aa0 0x715d7c5fe0
	void AnimateOutro(float SpeedMultiplier);// 0x69ac140 0x715d7c60c0
	void AnimateIntroStaggered(const int Index, const float StaggerTime);// 0x69ac1e4 0x715d7c61a0
	void AnimateIntro();// 0x69ac2cc 0x715d7c6280

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49b2400
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 0x8] 0x715caa1100
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 0x278] 0x715caa1180
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 0x10] 0x715caa1200
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 0x10] 0x715caa1280
	byte ClickMethod;//[Offset: 0x3c0, Size: 0x1] 0x715caa1300
	byte TouchMethod;//[Offset: 0x3c1, Size: 0x1] 0x715caa1380
	byte PressMethod;//[Offset: 0x3c2, Size: 0x1] 0x715caa1400
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 0x1] 0x715caa1480
	delegate OnClicked;//[Offset: 0x3c8, Size: 0x10] 0x715caa1500
	delegate OnPressed;//[Offset: 0x3d8, Size: 0x10] 0x715caa1580
	delegate OnReleased;//[Offset: 0x3e8, Size: 0x10] 0x715caa1600
	delegate OnHovered;//[Offset: 0x3f8, Size: 0x10] 0x715caa1680
	delegate OnUnhovered;//[Offset: 0x408, Size: 0x10] 0x715caa1700
	void SetTouchMethod(byte InTouchMethod);// 0x55b347c 0x715ca86fa0
	void SetStyle(out const ButtonStyle InStyle);// 0x55b3744 0x715ca87080
	void SetPressMethod(byte InPressMethod);// 0x55b33d8 0x715ca87160
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x55b36a0 0x715ca87240
	void SetClickMethod(byte InClickMethod);// 0x55b3520 0x715ca87320
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x55b35fc 0x715ca83a40
	bool IsPressed();// 0x55b35c4 0x715ca83b20

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object // 71a48a6c80
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x55b42e0 0x715d06f4a0

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object // 71a49b1f00
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28] 0x715caa2380
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715caa2400
	int ZOrder;//[Offset: 0x64, Size: 0x4] 0x715caa2480
	void SetZOrder(int InZOrder);// 0x55b4970 0x715ca85d40
	void SetSize(Vector2D InSize);// 0x55b4dc0 0x715ca85e20
	void SetPosition(Vector2D InPosition);// 0x55b4e94 0x715ca85f00
	void SetOffsets(Margin InOffset);// 0x55b4ce4 0x715ca85fe0
	void SetMinimum(Vector2D InMinimumAnchors);// 0x55b489c 0x715ca860c0
	void SetMaximum(Vector2D InMaximumAnchors);// 0x55b47fc 0x715ca861a0
	void SetLayout(out const AnchorData InLayoutData);// 0x55b4fa0 0x715ca86280
	void SetAutoSize(bool InbAutoSize);// 0x55b4a4c 0x715ca86360
	void SetAnchors(Anchors InAnchors);// 0x55b4c04 0x715ca86440
	void SetAlignment(Vector2D InAlignment);// 0x55b4b2c 0x715ca86520
	int GetZOrder();// 0x55b493c 0x715ca86600
	Vector2D GetSize();// 0x55b4d8c 0x715ca866e0
	Vector2D GetPosition();// 0x55b4e60 0x715ca867c0
	Margin GetOffsets();// 0x55b4cac 0x715ca868a0
	AnchorData GetLayout();// 0x55b4f34 0x715ca86980
	bool GetAutoSize();// 0x55b4a14 0x715ca86a60
	Anchors GetAnchors();// 0x55b4bcc 0x715ca86b40
	Vector2D GetAlignment();// 0x55b4af8 0x715ca86c20

--------------------------------
Class: AnchorData // 715dada780
	Margin Offsets;//[Offset: 0x0, Size: 0x10] 0x715dafe080
	Anchors Anchors;//[Offset: 0x10, Size: 0x10] 0x715dafe100
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8] 0x715dafe180

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49b6f00

--------------------------------
Class: ControllerShortcutWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b36780
	enum GamepadButton;//[Offset: 0x260, Size: 0x1] 0x715cc8ec00
	FText LegendText;//[Offset: 0x268, Size: 0x18] 0x715cd69080
	Widget* WidgetToActivate;//[Offset: 0x280, Size: 0x8] 0x715cd69100
	delegate OnShortcutActivated;//[Offset: 0x288, Size: 0x10] 0x715cd69180
	delegate OnPressTrigger;//[Offset: 0x298, Size: 0x10] 0x715cd69200
	delegate OnReleaseTrigger;//[Offset: 0x2a8, Size: 0x10] 0x715cd69280
	bool bShowInLegendBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1] 0x715cd69300
	bool bHiddenShortcut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1] 0x715cd69380
	interface class None* ButtonToTrigger;//[Offset: 0x2d0, Size: 0x10] 0x715cd69400
	Vector2D ImageSize;//[Offset: 0x2e0, Size: 0x8] 0x715cd69480
	GamepadGlyph* Glyph;//[Offset: 0x2e8, Size: 0x8] 0x715cd67400
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x715cd67480
	byte ButtonTriggerAction;//[Offset: 0x2f1, Size: 0x1] 0x715cd67500
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1] 0x715cd67580
	Button* ShortcutButton;//[Offset: 0x328, Size: 0x8] 0x715cd67600
	bool bTappable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x715cd67680
	interface class None* ContextSpecifier;//[Offset: 0x338, Size: 0x10] 0x715cd67700
	void UpdateShortcutState();// 0x69a2a20 0x715cd55480
	void UpdateParameters(out const GamepadShortcutParameters Parameters);// 0x69a2af4 0x715cd55560
	void TriggerRelease();// 0x69a2c28 0x715cd55640
	void TriggerPress();// 0x69a2c3c 0x715cd51d60
	void TriggerClick();// 0x69a2c50 0x715cd51e40
	void SyncGlyphParameters();// 0x69a2ae0 0x715cd51f20
	void SetShortcutInactive();// 0x69a29f8 0x715cd52000
	void SetShortcutActive();// 0x69a2a0c 0x715cd520e0
	void SetEnabled(bool bInEnabled);// 0x69a2a34 0x715cd521c0

--------------------------------
Class: GamepadShortcutParameters // 715cec6700
	bool bHiddenShortcut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715cef2f00
	bool bShowInLegendBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715cef2f80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715cef3000
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715cef3080
	FText LegendText;//[Offset: 0x8, Size: 0x18] 0x715cef3100
	enum GamepadButton;//[Offset: 0x20, Size: 0x1] 0x715ce95740
	Vector2D ImageSize;//[Offset: 0x24, Size: 0x8] 0x715cef1100
	byte ButtonTriggerAction;//[Offset: 0x2c, Size: 0x1] 0x715cef1180

--------------------------------
Class: GamepadGlyph.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b35880
	delegate OnGlyphSetEvent;//[Offset: 0x258, Size: 0x10] 0x715cd68500
	enum GlyphKey;//[Offset: 0x268, Size: 0x1] 0x715cc8ea20
	<enum,DataTable*> PlatformGamepadGlyphsMap;//[Offset: 0x270, Size: 0x50] 0x715cd33100
	Image* GlyphImage;//[Offset: 0x2c0, Size: 0x8] 0x715cd68700
	ScaleBox* GlyphScaleBox;//[Offset: 0x2c8, Size: 0x8] 0x715cd68780
	Vector2D GlyphSize;//[Offset: 0x2d0, Size: 0x8] 0x715cd68800
	bool bPreserveAspect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x715cd68880
	void SetGlyphSize(Vector2D Size);// 0x69a43f4 0x715cd55020
	void SetGlyph(enum Glyph);// 0x69a4494 0x715cd55100

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49b5380
	byte Stretch;//[Offset: 0x119, Size: 0x1] 0x715caa9b80
	byte StretchDirection;//[Offset: 0x11a, Size: 0x1] 0x715caa9c00
	float UserSpecifiedScale;//[Offset: 0x11c, Size: 0x4] 0x715caa9c80
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x715caa9d00
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x55d1ad8 0x715ca8bae0
	void SetStretchDirection(byte InStretchDirection);// 0x55d1b7c 0x715ca8bbc0
	void SetStretch(byte InStretch);// 0x55d1c20 0x715ca8bca0
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x55d1a2c 0x715ca8bd80

--------------------------------
Class: HuntersImage.Image.Widget.Visual.Object // 71a4b3ee80
	Vector2D ImageOffset;//[Offset: 0x210, Size: 0x8] 0x715cd6b580
	Vector2D ShadowOffset;//[Offset: 0x218, Size: 0x8] 0x715cd69500
	LinearColor ShadowColorAndOpacity;//[Offset: 0x220, Size: 0x10] 0x715cd69580
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x230, Size: 0x10] 0x715cd69600
	void SetShadowOffset(Vector2D InShadowOffset);// 0x69aa3d4 0x715cd54ae0
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x69aa330 0x715cd54bc0
	void SetImageOffset(Vector2D InImageOffset);// 0x69aa474 0x715cd54ca0
	void SetBrushResourceObjectMatchingSize(Object* ResourceObject);// 0x69aa28c 0x715cd54d80

--------------------------------
Class: BattlePassHomeWidget.HuntersStandardButton.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4893300
	BattlePassHomeWidgetViewModel* BattlePassWidgetViewModel;//[Offset: 0x3d8, Size: 0x8] 0x715d070b00
	RewardPreviewWidget* RewardPreview;//[Offset: 0x3e0, Size: 0x8] 0x715d070b80

--------------------------------
Class: BattlePassHomeWidgetViewModel.BattlePassWidgetViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4892b80
	RewardPreviewViewModel* RewardPreviewViewModel;//[Offset: 0x618, Size: 0x8] 0x715d070980
	BoolBindable RewardVisible;//[Offset: 0x620, Size: 0x70] 0x715d070a00
	BoolBindable RewardPaidIconVisible;//[Offset: 0x690, Size: 0x70] 0x715d070a80

--------------------------------
Class: BattlePassWidgetViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4892900
	TextBindable BattlePassSeasonTitle;//[Offset: 0x88, Size: 0x98] 0x715d7d5700
	TextBindable CurrentBattlePassXp;//[Offset: 0x120, Size: 0x98] 0x715d7d5780
	TextBindable CurrentBattlePassLevel;//[Offset: 0x1b8, Size: 0x98] 0x715d7d5800
	TextBindable NextBattlePassLevel;//[Offset: 0x250, Size: 0x98] 0x715d7d5880
	FloatBindable PercentOfCurrentLevel;//[Offset: 0x2e8, Size: 0x70] 0x715d7d5980
	TextBindable TargetXpOfCurrentLevel;//[Offset: 0x358, Size: 0x98] 0x715d7d5a00
	TextBindable BattlePassTimeRemaining;//[Offset: 0x3f0, Size: 0x98] 0x715d7d5b00
	GameplayTag NextRewardEntitlementId;//[Offset: 0x488, Size: 0x8] 0x715d7d5b80
	BoolBindable MaxXPReached;//[Offset: 0x490, Size: 0x70] 0x715d7d5c00
	BoolBindable IsPremiumOwned;//[Offset: 0x500, Size: 0x70] 0x715d7d5c80
	bool IsActiveBattlePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1] 0x715d7d5d00
	BoolBindable HasUnclaimedRewards;//[Offset: 0x578, Size: 0x70] 0x715d7d5e00

--------------------------------
Class: RewardPreviewViewModel.SDViewModel.Object // 71a48c5600
	BoolBindable IsRewardImageLoaded;//[Offset: 0x58, Size: 0x70] 0x715d7dcb00
	BrushAndVisibilityBindable PreviewIcon;//[Offset: 0xc8, Size: 0x178] 0x715d7dcc00
	TextBindable ProDescription;//[Offset: 0x240, Size: 0x98] 0x715d7dcc80
	BoolBindable ShowPro;//[Offset: 0x2d8, Size: 0x70] 0x715d7dcd00
	TextBindable ConDescription;//[Offset: 0x348, Size: 0x98] 0x715d7dcd80
	BoolBindable ShowCon;//[Offset: 0x3e0, Size: 0x70] 0x715d7dce00
	Int32Bindable ActiveEntitlementType;//[Offset: 0x450, Size: 0x70] 0x715d7dcf00
	BoolBindable ShowBackgroundAnimation;//[Offset: 0x4c0, Size: 0x70] 0x715d7dcf80

--------------------------------
Class: RewardPreviewWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c5380
	RewardPreviewViewModel* RewardPreviewViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d8e80
	void OnEntitlementChanged();// 0x45c6aa0 0x715d0c6520

--------------------------------
Class: MultiPanelInformationPopupContainerScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4892400
	MultiPanelInformationPopupBase* MultiPanelInformationPopupBase;//[Offset: 0x2e0, Size: 0x8] 0x715d070800
	MultiPanelInformationPopupContainerViewModel* MultiPanelInformationPopupContainerVM;//[Offset: 0x2e8, Size: 0x8] 0x715d070880
	void OnOKButtonClicked();// 0x3d5efe4 0x715d062540
	void OnCloseButtonClicked();// 0x3d5f000 0x715d062620
	Widget* GetInitialGamepadFocusedWidget_Implementation();// 0x3d5f01c 0x715d062700

--------------------------------
Class: MultiPanelInformationPopupBase.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c3300
	enum OkButtonVisible;//[Offset: 0x278, Size: 0x1] 0x715d0b0060
	void OnOKButtonClicked();// 0x3d5ec40 0x715d0c2b60
	void OnCloseButtonClicked();// 0x3d5ec54 0x715d0c2c40

--------------------------------
Class: MultiPanelInformationPopupContainerViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4891f00

--------------------------------
Class: BattlePassInformationPopupScreen.MultiPanelInformationPopupContainerScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4892680
	BattlePassInformationPopupViewModel* BattlePassInformationPopupScreenVM;//[Offset: 0x2f0, Size: 0x8] 0x715d070780

--------------------------------
Class: BattlePassInformationPopupViewModel.MultiPanelInformationPopupContainerViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4892180
	void OnPurchaseButtonClicked();// 0x3d0dad0 0x715d062460

--------------------------------
Class: BattlePassLevelProgressWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4891c80
	BattlePassWidgetViewModel* BattlePassWidgetViewModel;//[Offset: 0x258, Size: 0x8] 0x715d070700

--------------------------------
Class: BattlePassPurchaseDetailsViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4891a00
	TextBindable InstantlyUnlockLevelText;//[Offset: 0x438, Size: 0x98] 0x715d070480
	TextBindable PurchaseWarningText;//[Offset: 0x4d0, Size: 0x98] 0x715d070500
	BrushBindable HunterIcon;//[Offset: 0x568, Size: 0x178] 0x715d070580
	BattlePassBundleInformationViewModel* BattlePassBundleInformationViewModel;//[Offset: 0x6e0, Size: 0x8] 0x715d070600
	BattlePassBundleInformationViewModel* PassPackBundleInformationViewModel;//[Offset: 0x6e8, Size: 0x8] 0x715d070680

--------------------------------
Class: BattlePassPurchaseDetailsWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4891780
	BattlePassBundleInformationWidget* BattlePassBundleInformationWidget;//[Offset: 0x258, Size: 0x8] 0x715d070180
	BattlePassBundleInformationWidget* PassPackBundleInformationWidget;//[Offset: 0x260, Size: 0x8] 0x715d070200
	Image* HunterImage;//[Offset: 0x268, Size: 0x8] 0x715d070280
	Image* HunterNameLogo;//[Offset: 0x270, Size: 0x8] 0x715d070300
	FText InfoText;//[Offset: 0x278, Size: 0x18] 0x715d070380
	BattlePassPurchaseDetailsViewModel* BattlePassPurchaseDetailsViewModel;//[Offset: 0x290, Size: 0x8] 0x715d070400

--------------------------------
Class: BattlePassPurchaseLevelWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4891500
	BattlePassPurchaseLevelWidgetViewModel* BattlePassPurchaseLevelWidgetViewModel;//[Offset: 0x258, Size: 0x8] 0x715d070100
	void UpdateVisualStatus();// 0x45c6aa0 0x715d0622a0
	void OnPurchaseButtonClicked();// 0x3d0e674 0x715d062380

--------------------------------
Class: BattlePassPurchaseLevelWidgetViewModel.BattlePassWidgetViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4891280
	TextBindable LevelsInterval;//[Offset: 0x618, Size: 0x98] 0x715d7d5680

--------------------------------
Class: BattlePassPurchaseScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4891000
	BattlePassPurchaseViewModel* BattlePassPurchaseScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d071f80
	BattlePassWidget* TitleWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d072000
	TopBarCurrencyDisplayWidget* CrystalDisplay;//[Offset: 0x2f0, Size: 0x8] 0x715d072080
	CanvasPanel* DetailsWidgetContainer;//[Offset: 0x2f8, Size: 0x8] 0x715d072100
	class BattlePassPurchaseDetailsWidget* NoCharacterWidget;//[Offset: 0x300, Size: 0x8] 0x715cf9d300
	class BattlePassPurchaseDetailsWidget* PassPackUnavailableWidget;//[Offset: 0x308, Size: 0x8] 0x715cf9d3a0
	class BattlePassPurchaseDetailsWidget* PassPackAvailableWidget;//[Offset: 0x310, Size: 0x8] 0x715cf9d440
	BattlePassPurchaseDetailsWidget* DetailsWidget;//[Offset: 0x318, Size: 0x8] 0x715d070080

--------------------------------
Class: BattlePassPurchaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4890d80
	BoolBindable ShowPassPack;//[Offset: 0x50, Size: 0x70] 0x715d071c00
	BrushBindable BackgroundImage;//[Offset: 0xc0, Size: 0x178] 0x715d071c80
	BattlePassWidgetViewModel* BattlePassWidgetViewModel;//[Offset: 0x238, Size: 0x8] 0x715d071d00
	TopBarCurrencyDisplayViewModel* CrystalDisplayViewModel;//[Offset: 0x240, Size: 0x8] 0x715d071d80
	BattlePassPurchaseDetailsViewModel* DetailsViewModel;//[Offset: 0x248, Size: 0x8] 0x715d071e00
	void SetBattlePassInfoText(out const FText InText);// 0x3d0f0ac 0x715d061f20
	bool IsPassPackAvailable();// 0x3d0f248 0x715d062000
	void InfoButtonPressed();// 0x3d0f294 0x715d0620e0
	void BackButtonPressed();// 0x3d0f280 0x715d0621c0

--------------------------------
Class: TopBarCurrencyDisplayViewModel.SDViewModel.Object // 71a48ca600
	VisibilityBindable TappableVisibility;//[Offset: 0x48, Size: 0x70] 0x715d0df200
	CurrencyDisplayViewModel* CurrencyDisplayViewModel;//[Offset: 0xb8, Size: 0x8] 0x715d0df280
	CurrencyDisplayViewModel* GetCurrencyDisplayViewModel();// 0x3d82f08 0x715d0ca420
	void CurrencyDisplayPressed();// 0x3d82ef4 0x715d0ca500

--------------------------------
Class: BattlePassWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4890600
	BattlePassWidgetViewModel* BattlePassWidgetViewModel;//[Offset: 0x258, Size: 0x8] 0x715d071500

--------------------------------
Class: TopBarCurrencyDisplayWidget.SDUserWidgetWithShortcut.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cfd80
	CurrencyDisplayWidget* CreditDisplay;//[Offset: 0x290, Size: 0x8] 0x715d0dee80
	GameplayTag CurrencyTag;//[Offset: 0x298, Size: 0x8] 0x715d0def00
	TopBarCurrencyDisplayViewModel* TopBarCurrencyDisplayViewModel;//[Offset: 0x2a0, Size: 0x8] 0x715d0def80

--------------------------------
Class: SDUserWidgetWithShortcut.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cfb00
	ControllerShortcutWidget* Shortcut;//[Offset: 0x258, Size: 0x8] 0x715d0df000
	GamepadShortcutParameters ControllerShortcutParameters;//[Offset: 0x260, Size: 0x30] 0x715d0df080
	void SetShortcutShowInLegendBar(bool bShowInLegendBar);// 0x69b6278 0x715d0ca260
	void SetShortcutEnabled(bool bEnabled);// 0x69b6324 0x715d0ca340

--------------------------------
Class: BattlePassScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4890b00
	BattlePassViewModel* BattlePassViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715d071900
	EntitlementSummaryWidget* EntitlementSummaryWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d071980
	RewardsTrackWidget* RewardsTrackWidget;//[Offset: 0x2f0, Size: 0x8] 0x715d071a00
	BattlePassPurchaseLevelWidget* ProgressWidget;//[Offset: 0x2f8, Size: 0x8] 0x715d071a80
	BattlePassWidget* CountdownWidget;//[Offset: 0x300, Size: 0x8] 0x715d071b00
	SizeBox* TrackArea;//[Offset: 0x308, Size: 0x8] 0x715d071b80

--------------------------------
Class: BattlePassViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4890880
	BoolBindable IsPremiumBattlePassOwned;//[Offset: 0x50, Size: 0x70] 0x715d071580
	BoolBindable ShowBuyBattlePassButton;//[Offset: 0xc0, Size: 0x70] 0x715d071600
	EntitlementSummaryViewModel* EntitlementSummaryViewModel;//[Offset: 0x178, Size: 0x8] 0x715d071680
	RewardsTrackViewModel* RewardsTrackViewModel;//[Offset: 0x180, Size: 0x8] 0x715d071700
	BattlePassWidgetViewModel* BattlePassWidgetViewModel;//[Offset: 0x188, Size: 0x8] 0x715d071780
	BattlePassPurchaseLevelWidgetViewModel* BattlePassPurchaseLevelWidgetViewModel;//[Offset: 0x190, Size: 0x8] 0x715d071800
	void SkipToPrevButtonPressed();// 0x3d0fa44 0x715d0653a0
	void SkipToNextButtonPressed();// 0x3d0fa58 0x715d065480
	void PurchasePremiumButtonPressed();// 0x3d0fa80 0x715d065560
	void OnItemSelected(RewardsTrackItemViewModel* InSelectedItem);// 0x3d0faa8 0x715d065640
	void ClaimButtonPressed();// 0x3d0fa6c 0x715d061d60
	void BackButtonPressed();// 0x3d0fa94 0x715d061e40

--------------------------------
Class: EntitlementSummaryViewModel.SDViewModel.Object // 71a489b780
	BoolBindable ShowEntitlementSummary;//[Offset: 0x48, Size: 0x70] 0x715d07b780
	TextBindable EntitlementNameText;//[Offset: 0xb8, Size: 0x98] 0x715d07b800
	BoolBindable ShowEntitlementName;//[Offset: 0x150, Size: 0x70] 0x715d07b880
	TextBindable EntitlementRarityText;//[Offset: 0x1c0, Size: 0x98] 0x715d07b900
	BoolBindable ShowEntitlementRarity;//[Offset: 0x258, Size: 0x70] 0x715d07b980
	ColorBindable EntitlementRarityTextBackgroundColor;//[Offset: 0x2c8, Size: 0x88] 0x715d07ba00
	TextBindable EntitlementTypeText;//[Offset: 0x350, Size: 0x98] 0x715d07ba80
	BoolBindable HideEntitlementType;//[Offset: 0x3e8, Size: 0x70] 0x715d07bb00
	TextBindable EntitlementDescriptionText;//[Offset: 0x458, Size: 0x98] 0x715d07bb80
	BoolBindable ShowEntitlementDescriptionText;//[Offset: 0x4f0, Size: 0x70] 0x715d07bc00
	BrushBindable OwningCharacterIcon;//[Offset: 0x560, Size: 0x178] 0x715d07bc80
	BoolBindable ShowOwningCharacter;//[Offset: 0x6d8, Size: 0x70] 0x715d07bd00
	BoolBindable ShowLimitedEditionTag;//[Offset: 0x748, Size: 0x70] 0x715d07bd80
	ColorBindable LimitedEditionTextColor;//[Offset: 0x7b8, Size: 0x88] 0x715d07be00
	ColorBindable LimitedEditionBGColor;//[Offset: 0x840, Size: 0x88] 0x715d07be80
	BrushBindable SeasonTag;//[Offset: 0x8c8, Size: 0x178] 0x715d07bf00
	BoolBindable UseSeasonTag;//[Offset: 0xa40, Size: 0x70] 0x715d07bf80
	ModuleDescriptionViewModel* ModuleDescriptionViewModel;//[Offset: 0xab0, Size: 0x8] 0x715d07c000

--------------------------------
Class: ModuleDescriptionViewModel.SDViewModel.Object // 71a48c3800
	TextBindable ProDescription;//[Offset: 0x48, Size: 0x98] 0x715d0d2c00
	BoolBindable ShowPro;//[Offset: 0xe0, Size: 0x70] 0x715d0d2c80
	TextBindable ConDescription;//[Offset: 0x150, Size: 0x98] 0x715d0d2d00
	BoolBindable ShowCon;//[Offset: 0x1e8, Size: 0x70] 0x715d0d2d80

--------------------------------
Class: RewardsTrackViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48cec00
	delegate OnQuickSelectionChanged;//[Offset: 0x60, Size: 0x10] 0x715d823d00
	ListView* RewardsListView;//[Offset: 0x80, Size: 0x8] 0x715d823d80
	RewardsTrackItemViewModel*[] RewardItemViewModels;//[Offset: 0x88, Size: 0x10] 0x7148cdc040
	RewardsTrackItemViewModel*[] QuickSelectionItemViewModels;//[Offset: 0x98, Size: 0x10] 0x7148cdc0e0
	RewardsTrackItemViewModel* CurrentSelection;//[Offset: 0xa8, Size: 0x8] 0x715d823f00
	bool bIsPremiumBattlePassOwned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715d823f80
	TextBindable NextQuickSelection;//[Offset: 0xe0, Size: 0x98] 0x715d824000
	TextBindable PrevQuickSelection;//[Offset: 0x180, Size: 0x98] 0x715d824080
	BoolBindable NextQuickSelectionVisible;//[Offset: 0x220, Size: 0x70] 0x715d824100
	BoolBindable NextQuickSelectionClaimable;//[Offset: 0x290, Size: 0x70] 0x715d824180
	BoolBindable PrevQuickSelectionVisible;//[Offset: 0x300, Size: 0x70] 0x715d824200
	BoolBindable PrevQuickSelectionClaimable;//[Offset: 0x370, Size: 0x70] 0x715d822180
	int CurrentRewardListFlooredOffset;//[Offset: 0x3e0, Size: 0x4] 0x715d822200
	float CurrentRewardListOffset;//[Offset: 0x3e4, Size: 0x4] 0x715d822280
	void RewardsTrackQuickSelectionChanged__DelegateSignature();// 0x45c6aa0 0x715d7ce780
	void RewardsTrackItemSelected__DelegateSignature(RewardsTrackItemViewModel* Item);// 0x45c6aa0 0x715d7ce860
	void OnItemHighlighted(RewardsTrackItemViewModel* InItem);// 0x3d77910 0x715d7ce940
	void OnItemClicked(RewardsTrackItemViewModel* InItem);// 0x3d779b4 0x715d7cea20

--------------------------------
Class: RewardsTrackItemViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48cf100
	StandardEntitlementWithBackgroundViewModel* EntitlementWithBackgroundVM;//[Offset: 0xa8, Size: 0x8] 0x715d822600
	BoolBindable IsSelected;//[Offset: 0xb0, Size: 0x70] 0x715d822680
	BoolBindable IsAnyMultiAwardSelected;//[Offset: 0x120, Size: 0x70] 0x715d822700
	BoolBindable IsUnlocked;//[Offset: 0x190, Size: 0x70] 0x715d822780
	BoolBindable IsPaid;//[Offset: 0x200, Size: 0x70] 0x715d822800
	BoolBindable ShowPaidBadge;//[Offset: 0x270, Size: 0x70] 0x715d822880
	BoolBindable IsClaimed;//[Offset: 0x2e0, Size: 0x70] 0x715d822900
	BoolBindable IsClaimable;//[Offset: 0x350, Size: 0x70] 0x715d822980
	BoolBindable IsHighlighted;//[Offset: 0x3c0, Size: 0x70] 0x715d822a00
	TextBindable QuantityText;//[Offset: 0x430, Size: 0x98] 0x715d822a80
	TextBindable UnlockAtLevel;//[Offset: 0x4c8, Size: 0x98] 0x715d822b00
	FloatBindable Progress;//[Offset: 0x560, Size: 0x70] 0x715d822b80
	BoolBindable IsPartOfMultiAwards;//[Offset: 0x5d0, Size: 0x70] 0x715d822c00
	BoolBindable IsMultiAwardsCenter;//[Offset: 0x640, Size: 0x70] 0x715d822c80
	BoolBindable IsMultiAwardsEven;//[Offset: 0x6b0, Size: 0x70] 0x715d822d00
	BoolBindable IsAnyMultiAwardClaimable;//[Offset: 0x720, Size: 0x70] 0x715d822d80
	BoolBindable IsMultiAwardsStart;//[Offset: 0x790, Size: 0x70] 0x715d822e00
	BoolBindable IsMultiAwardsLeftSide;//[Offset: 0x800, Size: 0x70] 0x715d822e80
	BoolBindable IsInProgress;//[Offset: 0x870, Size: 0x70] 0x715d822f00
	BoolBindable IsCompleted;//[Offset: 0x8e0, Size: 0x70] 0x715d822f80
	bool IsFirstItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 0x1] 0x715d823000
	bool IsLastItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 0x1] 0x715d823080
	int64 Quantity;//[Offset: 0x958, Size: 0x8] 0x715d823100
	MetaTuningDataKey EntitlementKey;//[Offset: 0x960, Size: 0x8] 0x715d823180

--------------------------------
Class: StandardEntitlementWithBackgroundViewModel.SDViewModel.Object // 71a48cb500
	StyledBorderForegroundBindable StyledBorderForeground;//[Offset: 0x60, Size: 0x178] 0x715d0dc900
	MarginBindable StyledBorderFrame;//[Offset: 0x1d8, Size: 0x88] 0x715d0dc980
	BrushBindable StyledBorderBackground;//[Offset: 0x260, Size: 0x178] 0x715d0dca00
	HuntersEntitlementBase* EntitlementItem;//[Offset: 0x3d8, Size: 0x8] 0x715d0dca80
	HuntersEntitlementUIData* EntitlementUIData;//[Offset: 0x3e0, Size: 0x8] 0x715d0dcb00
	BrushBindable AvatarImage;//[Offset: 0x3e8, Size: 0x178] 0x715d0dcb80
	BoolBindable ShowAvatar;//[Offset: 0x560, Size: 0x70] 0x715d0dcc00
	enum GetEntitlementType();// 0x3d80fc0 0x715d0c7940

--------------------------------
Class: EntitlementSummaryWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489b500
	ModuleDescriptionWidget* ModuleDescriptionWidget;//[Offset: 0x258, Size: 0x8] 0x715d07b680
	EntitlementSummaryViewModel* EntitlementSummaryViewModel;//[Offset: 0x260, Size: 0x8] 0x715d07b700

--------------------------------
Class: ModuleDescriptionWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c3580
	ModuleDescriptionViewModel* ModuleDescriptionViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d2b80

--------------------------------
Class: RewardsTrackWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ce980
	RewardsTrackViewModel* RewardsTrackViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0da180
	ListView* RewardsListView;//[Offset: 0x260, Size: 0x8] 0x715d0da200
	class RewardsTrackItemWidget* RewardWidgetBlueprint;//[Offset: 0x268, Size: 0x8] 0x715d0b1b40

--------------------------------
Class: RewardsTrackItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cee80
	RewardsTrackItemViewModel* ItemViewModel;//[Offset: 0x290, Size: 0x8] 0x715d0da280
	Button* ItemButton;//[Offset: 0x298, Size: 0x8] 0x715d0da300
	StandardEntitlementWithBackgroundWidget* EntitlementWithBackground;//[Offset: 0x2a0, Size: 0x8] 0x715d0da380
	SelectableItemContainer* SelectableItemContainer;//[Offset: 0x2a8, Size: 0x8] 0x715d0da400
	void UpdateVisualStatus();// 0x45c6aa0 0x715d0c5b80
	void SelectionChanged();// 0x45c6aa0 0x715d0c5c60
	void OnItemSelectionChanged(bool InContextChanged);// 0x3d770fc 0x715d0c5d40
	void OnItemButtonPressed();// 0x3d771bc 0x715d0c5e20
	void OnItemButtonClicked();// 0x3d771a8 0x715d0c5f00

--------------------------------
Class: StandardEntitlementWithBackgroundWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cb280
	Margin DefaultMargin;//[Offset: 0x254, Size: 0x10] 0x715d0dd800
	Margin OffsetMargin;//[Offset: 0x264, Size: 0x10] 0x715d0dd880
	Vector2D UVOffset;//[Offset: 0x274, Size: 0x8] 0x715d0dd900
	float TextureScale;//[Offset: 0x27c, Size: 0x4] 0x715d0dd980
	float GradientCurve;//[Offset: 0x280, Size: 0x4] 0x715d0dda00
	float GradientOpacity;//[Offset: 0x284, Size: 0x4] 0x715d0dda80
	float RoundedCornerRadius;//[Offset: 0x288, Size: 0x4] 0x715d0ddb00
	float BorderThickness;//[Offset: 0x28c, Size: 0x4] 0x715d0ddb80
	float BorderOpacity;//[Offset: 0x290, Size: 0x4] 0x715d0ddc00
	bool bApplyBackgroundColoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1] 0x715d0ddc80
	bool bApplyForegroundColoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1] 0x715d0ddd00
	float ForegroundOpacity;//[Offset: 0x298, Size: 0x4] 0x715d0ddd80
	Margin ForegroundFrame;//[Offset: 0x29c, Size: 0x10] 0x715d0dde00
	byte ForegroundHorizontalAlignment;//[Offset: 0x2ac, Size: 0x1] 0x715d0dde80
	bool bHorizontallyCenterIfLargerThanTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1] 0x715d0ddf00
	byte ForegroundVerticalAlignment;//[Offset: 0x2ae, Size: 0x1] 0x715d0ddf80
	bool bVerticallyCenterIfLargerThanTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af, Size: 0x1] 0x715d0de000
	bool bUseTextureSizeForFraming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x715d0de080
	SlateBrush ForegroundBrush;//[Offset: 0x2b8, Size: 0x88] 0x715d0de100
	StandardEntitlementWithBackgroundViewModel* EntitlementWithBackgroundVM;//[Offset: 0x340, Size: 0x8] 0x715d0de180
	StyledBorderImage* EntitlementAndBackground;//[Offset: 0x348, Size: 0x8] 0x715d0de200
	ScaleBox* AvatarContainer;//[Offset: 0x350, Size: 0x8] 0x715d0de280
	enum[] TypesToOffset;//[Offset: 0x358, Size: 0x10] 0x715d0b3c60
	void SetUVOffset(Vector2D InUVOffset);// 0x3d81b58 0x715d0ca6c0
	void SetTextureScale(float InTextureScale);// 0x3d81964 0x715d0ca7a0
	void SetRoundedCornerRadius(float InRoundedCornerRadius);// 0x3d81778 0x715d0ca880
	void SetOffsetMargin(Margin InOffsetMargin);// 0x3d81a08 0x715d0ca960
	void SetGradientOpacity(float InGradientOpacity);// 0x3d8181c 0x715d0caa40
	void SetGradientCurve(float InGradientCurve);// 0x3d818c0 0x715d0cab20
	void SetForegroundOpacity(float InForegroundOpacity);// 0x3d8158c 0x715d0cac00
	void SetForegroundFrame(const Margin InForegroundFrame);// 0x3d81438 0x715d0cace0
	void SetDefaultMargin(Margin InDefaultMargin);// 0x3d81ab0 0x715d0c7400
	void SetBorderThickness(float InBorderThickness);// 0x3d816d4 0x715d0c74e0
	void SetBorderOpacity(float InBorderOpacity);// 0x3d81630 0x715d0c75c0
	void SetApplyForegroundColoring(bool bInApplyForegroundColoring);// 0x3d814e0 0x715d0c76a0
	void SetApplyBackgroundColoring(bool bInApplyBackgroundColoring);// 0x3d8138c 0x715d0c7780
	void OnViewModelDataChanged();// 0x3d81bf8 0x715d0c7860

--------------------------------
Class: StyledBorderImage.Image.Widget.Visual.Object // 71a4b61f00
	Vector2D UVOffset;//[Offset: 0x210, Size: 0x8] 0x715cd95b80
	float TextureScale;//[Offset: 0x218, Size: 0x4] 0x715cd95c00
	float GradientCurve;//[Offset: 0x21c, Size: 0x4] 0x715cd95c80
	float GradientOpacity;//[Offset: 0x220, Size: 0x4] 0x715cd95d00
	float RoundedCornerRadius;//[Offset: 0x224, Size: 0x4] 0x715cd95d80
	float BorderThickness;//[Offset: 0x228, Size: 0x4] 0x715cd95e00
	float BorderOpacity;//[Offset: 0x22c, Size: 0x4] 0x715cd95e80
	bool bApplyBackgroundColoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x715cd95f00
	bool bApplyForegroundColoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1] 0x715cd95f80
	float ForegroundOpacity;//[Offset: 0x234, Size: 0x4] 0x715cd96000
	Margin ForegroundFrame;//[Offset: 0x238, Size: 0x10] 0x715cd96080
	byte ForegroundHorizontalAlignment;//[Offset: 0x248, Size: 0x1] 0x715cd96100
	bool bHorizontallyCenterIfLargerThanTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1] 0x715cd96180
	byte ForegroundVerticalAlignment;//[Offset: 0x24a, Size: 0x1] 0x715cd96200
	bool bVerticallyCenterIfLargerThanTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 0x1] 0x715cd96280
	Margin ForegroundMarginPixels;//[Offset: 0x24c, Size: 0x10] 0x715cd96300
	bool bUseTextureSizeForFraming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x715cd94280
	SlateBrush ForegroundBrush;//[Offset: 0x260, Size: 0x88] 0x715cd94300
	void SetVerticallyCenterIfLargerThanTextureFrame(bool bInVerticallyCenterIfLargerThanTexture);// 0x69c2a80 0x715cd5c480
	void SetUVOffset(Vector2D InUVOffset);// 0x69c3560 0x715cd5c560
	void SetUseTextureSizeForFraming(bool bInUseTextureSizeForFraming);// 0x69c292c 0x715cd5c640
	void SetTextureScale(float InTextureScale);// 0x69c34bc 0x715cd5c720
	void SetRoundedCornerRadius(float InRoundedCornerRadius);// 0x69c32d0 0x715cd5c800
	void SetHorizontallyCenterIfLargerThanTextureFrame(bool bInHorizontallyCenterIfLargerThanTexture);// 0x69c2bd0 0x715cd5c8e0
	void SetGradientOpacity(float InGradientOpacity);// 0x69c3374 0x715cd5c9c0
	void SetGradientCurve(float InGradientCurve);// 0x69c3418 0x715cd590e0
	void SetForegroundVerticalAlignment(const byte InVerticalAlignment);// 0x69c2b2c 0x715cd591c0
	void SetForegroundOpacity(float InForegroundOpacity);// 0x69c2f8c 0x715cd592a0
	void SetForegroundMarginPixels(const Margin InForegroundMarginPixels);// 0x69c29d8 0x715cd59380
	void SetForegroundImage(out const SlateBrush InBrush);// 0x69c2dc8 0x715cd59460
	void SetForegroundHorizontalAlignment(const byte InHorizontalAlignment);// 0x69c2c7c 0x715cd59540
	void SetForegroundFrame(const Margin InForegroundFrame);// 0x69c2d20 0x715cd59620
	void SetBorderThickness(float InBorderThickness);// 0x69c322c 0x715cd59700
	void SetBorderOpacity(float InBorderOpacity);// 0x69c3188 0x715cd597e0
	void SetApplyForegroundColoring(bool bInApplyForegroundColoring);// 0x69c3030 0x715cd598c0
	void SetApplyBackgroundColoring(bool bInApplyBackgroundColoring);// 0x69c30dc 0x715cd599a0

--------------------------------
Class: BattleRewardSimHunterViewModel.SDViewModel.Object // 71a4890380
	TextBindable NameText;//[Offset: 0x60, Size: 0x98] 0x715d071400
	Texture2DBindable Image;//[Offset: 0xf8, Size: 0x78] 0x715d071480
	void SelectHunter();// 0x3d102dc 0x715d0652c0

--------------------------------
Class: BattleRewardSimHunterWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4890100
	BattleRewardSimHunterViewModel* BattleRewardSimHunterViewModel;//[Offset: 0x258, Size: 0x8] 0x715d071380

--------------------------------
Class: BattleRewardSimulationScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489a380
	BattleRewardSimulationViewModel* BattleRewardSimulationScreenVM;//[Offset: 0x268, Size: 0x8] 0x715d071280
	WrapBox* HunterWrapBox;//[Offset: 0x270, Size: 0x8] 0x715d071300
	class BattleRewardSimHunterWidget* HunterWidgetBlueprint;//[Offset: 0x278, Size: 0x8] 0x715cf9d260

--------------------------------
Class: BattleRewardSimulationViewModel.SDViewModel.Object // 71a489a100
	BattleRewardSimHunterViewModel*[] HunterViewModels;//[Offset: 0x58, Size: 0x10] 0x715cf9d1c0
	void CancelButtonPressed();// 0x3d10cac 0x715d0651e0

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object // 71a49c4c00
	Vector2D InnerSlotPadding;//[Offset: 0x11c, Size: 0x8] 0x715cac6a80
	float WrapWidth;//[Offset: 0x124, Size: 0x4] 0x715cac6b00
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x715cac6b80
	void SetInnerSlotPadding(Vector2D InPadding);// 0x5600e28 0x715cab43e0
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0x5600d7c 0x715cab44c0

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object // 71a49c4980
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x715cac6580
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cac6600
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 0x4] 0x715cac6680
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x715cac6700
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x715cac6780
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x56012b8 0x715cab3f80
	void SetPadding(Margin InPadding);// 0x5601550 0x715cab4060
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x560135c 0x715cab4140
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0x5601400 0x715cab4220
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0x56014a4 0x715cab4300

--------------------------------
Class: ChallengeDetailsPanelWidget.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4899e80
	WidgetSwitcher* FrameSwitcher;//[Offset: 0x368, Size: 0x8] 0x715d072f80
	TextBlock* AurebeshClaimedText;//[Offset: 0x370, Size: 0x8] 0x715d073000
	Widget* NotificationBadge;//[Offset: 0x378, Size: 0x8] 0x715d073080
	CanvasPanel* DebugOverlayPanel;//[Offset: 0x380, Size: 0x8] 0x715d073100
	TextBlock* DebugTextBlock;//[Offset: 0x388, Size: 0x8] 0x715d073180
	TextBlock* DebugIndexDisplay;//[Offset: 0x390, Size: 0x8] 0x715d071100
	Image* Glow;//[Offset: 0x398, Size: 0x8] 0x715d071180

--------------------------------
Class: ChallengeDetailsProgressionBar.UserWidget.Widget.Visual.Object // 71a4899c00
	SDConfigurableTextBlock* CompletedGoalsText;//[Offset: 0x230, Size: 0x8] 0x715d072c80
	SDConfigurableTextBlock* TotalGoalsText;//[Offset: 0x238, Size: 0x8] 0x715d072d00
	SDConfigurableTextBlock* Separator;//[Offset: 0x240, Size: 0x8] 0x715d072d80
	ProgressBar* ProgressBar;//[Offset: 0x248, Size: 0x8] 0x715d072e00
	float CachedProgress;//[Offset: 0x250, Size: 0x4] 0x715d072e80
	void OnProgressChanged(float NewProgress);// 0x3d112e0 0x715d065100

--------------------------------
Class: ChallengeDetailsScreenBase.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4899980
	ExtendedTileView* ChallengeDetailsList;//[Offset: 0x2e0, Size: 0x8] 0x715d072a00
	ChallengesBaseViewModel* ChallengeDetailsScreenVM;//[Offset: 0x2e8, Size: 0x8] 0x715d072a80
	ChallengeProgressionBar* ChallengeProgressionBar;//[Offset: 0x2f0, Size: 0x8] 0x715d072b00
	UserWidget* NoChallengesWidget;//[Offset: 0x2f8, Size: 0x8] 0x715d072b80
	Widget* GetWidgetToFocus();// 0x3d11708 0x715d065020

--------------------------------
Class: ExtendedTileView.TileView.ListView.ListViewBase.Widget.Visual.Object // 71a4b36280
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1] 0x715cd68e80
	bool AllowBackgroundScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 0x1] 0x715cd68f00
	delegate OnTileViewScrolled;//[Offset: 0x888, Size: 0x10] 0x715cd68f80

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object // 71a49bd300
	float EntryHeight;//[Offset: 0x860, Size: 0x4] 0x715caaf900
	float EntryWidth;//[Offset: 0x864, Size: 0x4] 0x715caaf980
	enum TileAlignment;//[Offset: 0x868, Size: 0x1] 0x715ca75920
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x869, Size: 0x1] 0x715caafa80
	void SetEntryWidth(float NewWidth);// 0x55ddbc4 0x715cab1ba0
	void SetEntryHeight(float NewHeight);// 0x55ddc68 0x715cab1c80

--------------------------------
Class: ChallengeProgressionBar.UserWidget.Widget.Visual.Object // 71a4898f80
	CanvasPanel* TimerContainer;//[Offset: 0x230, Size: 0x8] 0x715d073980
	SDConfigurableTextBlock* CompletedChallengesText;//[Offset: 0x238, Size: 0x8] 0x715d073a00

--------------------------------
Class: ChallengeDetailsWidgetBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4899200
	ChallengeDetailsViewModel* ChallengeDetailsViewModel;//[Offset: 0x2a8, Size: 0x8] 0x715d073e00
	CurrencyDisplayWidget* RewardDisplay;//[Offset: 0x2b0, Size: 0x8] 0x715d073e80
	WidgetSwitcher* ProgressSwitcher;//[Offset: 0x2b8, Size: 0x8] 0x715d073f00
	WidgetSwitcher* ProgressSwitcherSizeBox;//[Offset: 0x2c0, Size: 0x8] 0x715d073f80
	ChallengeDetailsProgressionBar* ProgressBar;//[Offset: 0x2c8, Size: 0x8] 0x715d074000
	bool bContextChangedFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1] 0x715d074080
	void SetDescription(out const FText Description);// 0x45c6aa0 0x715d064a00
	void OnRestoreFocusState();// 0x45c6aa0 0x715d064ae0
	void OnFocusEnable();// 0x45c6aa0 0x715d064bc0
	void OnFocusDisable();// 0x45c6aa0 0x715d064ca0
	void OnDisplayStateChanged(enum NewState);// 0x45c6aa0 0x715d064d80

--------------------------------
Class: ChallengeDetailsWidget.ChallengeDetailsWidgetBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4899480
	WidgetSwitcher* ImageSwitcher;//[Offset: 0x2f8, Size: 0x8] 0x715d073a80
	Image* Image;//[Offset: 0x300, Size: 0x8] 0x715d073b00
	PanelWidget* BannerPanel;//[Offset: 0x308, Size: 0x8] 0x715d073b80
	ChallengeDetailsPanelWidget* MainPanel;//[Offset: 0x310, Size: 0x8] 0x715d073c00
	Widget* BottomSection;//[Offset: 0x318, Size: 0x8] 0x715d073c80
	<enum,ChallengeDetailsViewConfiguration> DisplayStateConfiguration;//[Offset: 0x320, Size: 0x50] 0x715cecb8c0

--------------------------------
Class: ChallengeDetailsViewConfiguration // 715da92740
	Object* PanelResourceObject;//[Offset: 0x0, Size: 0x8] 0x715da85800
	FName PanelFooterColor;//[Offset: 0x8, Size: 0x8] 0x715da85880
	FName WedgeColor;//[Offset: 0x10, Size: 0x8] 0x715da85900
	FName BackgroundColor;//[Offset: 0x18, Size: 0x8] 0x715da85980
	FName OutlineColor;//[Offset: 0x20, Size: 0x8] 0x715da85a00
	FName TextColor;//[Offset: 0x28, Size: 0x8] 0x715da85a80
	FName PointsColor;//[Offset: 0x30, Size: 0x8] 0x715da85b00

--------------------------------
Class: ChallengeRefreshWidget.UserWidget.Widget.Visual.Object // 71a4898d00
	CanvasPanel* TimerContainer;//[Offset: 0x230, Size: 0x8] 0x715d073900

--------------------------------
Class: ChallengesScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4898800
	ChallengesViewModel* ChallengesScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d073400
	UserWidget* BodyContainer;//[Offset: 0x2e8, Size: 0x8] 0x715d073480
	void OnRefreshTabs();// 0x45c6aa0 0x715d064920

--------------------------------
Class: ChallengesViewModel.SDViewModel.Object // 71a4898580
	int StartSelectedTabIndex;//[Offset: 0x44, Size: 0x4] 0x715d073200
	ChallengesTabButtonData[] TabButtonsData;//[Offset: 0x68, Size: 0x10] 0x715cf9cea0
	void TabButtonPressed(const int TabIndex);// 0x3d19444 0x715d064680
	FText[] GetTabLabels();// 0x3d19278 0x715d064760
	void BackButtonPressed();// 0x3d19430 0x715d064840

--------------------------------
Class: ChallengesTabButtonData // 715da92680
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x715da85680
	enum ChallengeCategory;//[Offset: 0x18, Size: 0x1] 0x715d89b960
	bool bIsPipVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x715da85780

--------------------------------
Class: CharacterAbilitiesHelpScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4898300
	CharacterAbilitiesHelpViewModel* CharacterAbilitiesHelpScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d075280

--------------------------------
Class: CharacterAbilitiesHelpViewModel.SDViewModel.Object // 71a4898080
	TextBindable WeaponName;//[Offset: 0x48, Size: 0x98] 0x715d074e00
	BrushBindable WeaponIcon;//[Offset: 0xe0, Size: 0x178] 0x715d074e80
	TextBindable WeaponDescription;//[Offset: 0x258, Size: 0x98] 0x715d074f00
	TextBindable PassiveName;//[Offset: 0x2f0, Size: 0x98] 0x715d074f80
	BrushBindable PassiveIcon;//[Offset: 0x388, Size: 0x178] 0x715d075000
	TextBindable PassiveDescription;//[Offset: 0x500, Size: 0x98] 0x715d075080
	TextBindable UltimateName;//[Offset: 0x598, Size: 0x98] 0x715d075100
	BrushBindable UltimateIcon;//[Offset: 0x630, Size: 0x178] 0x715d075180
	TextBindable UltimateDescription;//[Offset: 0x7a8, Size: 0x98] 0x715d075200
	void CloseScreen();// 0x3d19ae0 0x715d0645a0

--------------------------------
Class: CharacterAbilitiesViewModel.SDViewModel.Object // 71a4897e00

--------------------------------
Class: CharacterBioScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4897b80
	HunterDifficultyWidget* DifficultyWidget;//[Offset: 0x2e0, Size: 0x8] 0x715d074d00
	CharacterBioViewModel* CharacterBioScreenVM;//[Offset: 0x2e8, Size: 0x8] 0x715d074d80

--------------------------------
Class: HunterDifficultyWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a5600
	HunterDifficultyViewModel* HunterDifficultyViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0aa600

--------------------------------
Class: HunterDifficultyViewModel.SDViewModel.Object // 71a48a5880
	BoolBindable ShowPip1;//[Offset: 0x48, Size: 0x70] 0x715d0aa680
	BoolBindable ShowPip2;//[Offset: 0xb8, Size: 0x70] 0x715d0aa700
	BoolBindable ShowPip3;//[Offset: 0x128, Size: 0x70] 0x715d0aa780

--------------------------------
Class: CharacterBioViewModel.SDViewModel.Object // 71a4897900
	TextBindable Bio;//[Offset: 0x48, Size: 0x98] 0x715d074a00
	TextBindable CharacterName;//[Offset: 0xe0, Size: 0x98] 0x715d074a80
	TextBindable CharacterTagline;//[Offset: 0x178, Size: 0x98] 0x715d074b00
	TextBindable ClassName;//[Offset: 0x210, Size: 0x98] 0x715d074b80
	BrushBindable ClassIconBrush;//[Offset: 0x2a8, Size: 0x178] 0x715d074c00
	HunterDifficultyViewModel* HunterDifficultyVM;//[Offset: 0x420, Size: 0x8] 0x715d074c80
	void CloseScreen();// 0x3d1a154 0x715d0644c0

--------------------------------
Class: CharacterCosmeticsViewModel.SDViewModel.Object // 71a4897680

--------------------------------
Class: CharacterDetailsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4897400
	CharacterDetailsViewModel* CharacterDetailsScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d074880
	DetailsPanelWidget* DetailsPanel;//[Offset: 0x2e8, Size: 0x8] 0x715d074900
	NotificationBadgeWidget* BackButtonFTUENotification;//[Offset: 0x2f0, Size: 0x8] 0x715d074980
	void OnAvailabilityUpdated();// 0x45c6aa0 0x715d0643e0

--------------------------------
Class: CharacterDetailsViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4897180
	TextBindable CharacterName;//[Offset: 0x60, Size: 0x98] 0x715d074300
	TextBindable CharacterClass;//[Offset: 0xf8, Size: 0x98] 0x715d074380
	BrushBindable CharacterIcon;//[Offset: 0x190, Size: 0x178] 0x715d074400
	BrushBindable ClassIconBrush;//[Offset: 0x308, Size: 0x178] 0x715d074480
	TextBindable DurationText;//[Offset: 0x480, Size: 0x98] 0x715d074500
	BoolBindable BioAvailable;//[Offset: 0x518, Size: 0x70] 0x715d074580
	enum AvailabilityState;//[Offset: 0x588, Size: 0x1] 0x715cf9f740
	bool bIsFirstVisit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1] 0x715d074680
	DetailsPanelViewModel* DetailsPanelViewModel;//[Offset: 0x590, Size: 0x8] 0x715d074700
	NotificationBadgeViewModel* BackButtonFTUENotificationViewModel;//[Offset: 0x598, Size: 0x8] 0x715d074780
	void RecruitHunterButtonPressed();// 0x3d1a944 0x715d063ce0
	void PreviousCharacter();// 0x3d1a96c 0x715d063dc0
	void NextCharacter();// 0x3d1a980 0x715d063ea0
	void NavigateToRoster();// 0x3d1a958 0x715d063f80
	void HunterBioButtonPressed();// 0x3d1a91c 0x715d064060
	NotificationBadgeViewModel* GetBackButtonFTUENotificationViewModel();// 0x3d1a8ec 0x715d064140
	void EvaluateDurationText();// 0x3d1a908 0x715d064220
	void BattlePassButtonPressed();// 0x3d1a930 0x715d064300

--------------------------------
Class: DetailsPanelViewModel.SDViewModel.Object // 71a489ce00
	BoolBindable ShowRecruitButton;//[Offset: 0x58, Size: 0x70] 0x715d07ab00
	BoolBindable ShowFullHeightPanel;//[Offset: 0xc8, Size: 0x70] 0x715d07ab80
	NotificationBadgeViewModel* AbilityPipNotificationVM;//[Offset: 0x138, Size: 0x8] 0x715d07ac00
	NotificationBadgeViewModel* CosmeticsPipNotificationVM;//[Offset: 0x140, Size: 0x8] 0x715d07ac80
	NotificationBadgeViewModel* CosmeticsFTUENotificationVM;//[Offset: 0x148, Size: 0x8] 0x715d07ad00
	void SummaryButtonPressed();// 0x3d263e0 0x715d068ac0
	void RewardsButtonPressed();// 0x3d263a4 0x715d068ba0
	void CosmeticsButtonPressed();// 0x3d263b8 0x715d068c80
	void AbilitiesButtonPressed();// 0x3d263cc 0x715d068d60

--------------------------------
Class: DetailsPanelWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489cb80
	UserWidget* BodyContainer;//[Offset: 0x258, Size: 0x8] 0x715d07a980
	DetailsPanelViewModel* DetailsPanelViewModel;//[Offset: 0x260, Size: 0x8] 0x715d07aa00
	void UpdateTabs(int TabSwitchValue);// 0x45c6aa0 0x715d068900
	void ResetTabs();// 0x45c6aa0 0x715d0689e0

--------------------------------
Class: CharacterRosterItemViewModel.SDViewModel.Object // 71a4896f00
	TextBindable CharacterName;//[Offset: 0x68, Size: 0x98] 0x715d7dfe80
	Texture2D* CharacterPortrait;//[Offset: 0x100, Size: 0x8] 0x715d7dff00
	BrushBindable CharacterCurrencyBrush;//[Offset: 0x108, Size: 0x178] 0x715d7dff80
	BrushBindable ClassIconBrush;//[Offset: 0x280, Size: 0x178] 0x715d7de780
	TextBindable CharacterXpText;//[Offset: 0x3f8, Size: 0x98] 0x715d7de800
	VisibilityBindable CharacterXpTextVisibility;//[Offset: 0x490, Size: 0x70] 0x715d7de900
	TextBindable DurationText;//[Offset: 0x500, Size: 0x98] 0x715d7de980
	TextBindable CharacterLevelText;//[Offset: 0x598, Size: 0x98] 0x715d7dea00
	Int32Bindable ProgressWidgetIndex;//[Offset: 0x630, Size: 0x70] 0x715d7dea80
	delegate OnStateUpdated;//[Offset: 0x6a0, Size: 0x10] 0x715d7deb00
	enum CurrentState;//[Offset: 0x6b0, Size: 0x1] 0x7148cdc860
	BoolBindable ShowRewardPip;//[Offset: 0x6b8, Size: 0x70] 0x715d7dec00
	bool bShowCurrency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1] 0x715d7dec80
	bool bIsVisibleXpPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 0x1] 0x715d7ded00
	float HunterXpPercentage;//[Offset: 0x72c, Size: 0x4] 0x715d7ded80
	CurrencyDisplayViewModel* HunterCurrencyVM;//[Offset: 0x730, Size: 0x8] 0x715d7dee00
	NotificationBadgeViewModel* PipNotificationVM;//[Offset: 0x738, Size: 0x8] 0x715d7dee80
	NotificationBadgeViewModel* FTUENotificationVM;//[Offset: 0x740, Size: 0x8] 0x715d7def00
	void SetVisibleXpPanel(bool bIsVisible);// 0x3d1af50 0x715d7cd6e0
	void RosterItemTapped();// 0x3d1af3c 0x715d7cd7c0
	void RosterItemStateUpdated__DelegateSignature();// 0x45c6aa0 0x715d7cd8a0
	void EvaluateDurationText();// 0x3d1af28 0x715d7cd980

--------------------------------
Class: CharacterRosterItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4896c80
	SDButton* HunterButton;//[Offset: 0x288, Size: 0x8] 0x715d075f00
	ScrollBox* ScrollBox;//[Offset: 0x298, Size: 0x8] 0x715d075f80
	CharacterRosterItemViewModel* CharacterRosterItemViewModel;//[Offset: 0x2a0, Size: 0x8] 0x715d076000
	CurrencyDisplayWidget* CurrencyWidget;//[Offset: 0x2a8, Size: 0x8] 0x715d076080
	<enum,CharacterRosterItemStyle> VisualStyles;//[Offset: 0x2b0, Size: 0x50] 0x715cecb800
	NotificationBadgeWidget* PipNotification;//[Offset: 0x300, Size: 0x8] 0x715d076200
	NotificationBadgeWidget* FTUENotification;//[Offset: 0x308, Size: 0x8] 0x715d076280
	SDConfigurableTextBlock* XPCounterText;//[Offset: 0x310, Size: 0x8] 0x715d076300
	HorizontalBox* FameCounterContainer;//[Offset: 0x318, Size: 0x8] 0x715d074280
	void CheckForScroll();// 0x3d1b4f4 0x715d063c00

--------------------------------
Class: CharacterRosterItemStyle // 715da925c0
	LinearColor FrameTint;//[Offset: 0x0, Size: 0x10] 0x715da87280
	bool bShowScanlines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715da87300
	LinearColor NameTint;//[Offset: 0x14, Size: 0x10] 0x715da87380
	LinearColor IconTint;//[Offset: 0x24, Size: 0x10] 0x715da85300
	LinearColor WinningsTint;//[Offset: 0x34, Size: 0x10] 0x715da85380
	LinearColor WinningsPanelTint;//[Offset: 0x44, Size: 0x10] 0x715da85400
	int TopPanelIndex;//[Offset: 0x54, Size: 0x4] 0x715da85480
	bool bShowGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715da85500
	LinearColor GlowTint;//[Offset: 0x5c, Size: 0x10] 0x715da85580
	LinearColor FameFillTint;//[Offset: 0x6c, Size: 0x10] 0x715da85600

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object // 71a49b9e80
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x55bf9a4 0x715ca87860

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object // 71a49b9c00
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x715caa7300
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8] 0x715caa7380
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x715caa5300
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x715caa5380
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55bfde8 0x715ca874e0
	void SetSize(SlateChildSize InSize);// 0x55bff30 0x715ca875c0
	void SetPadding(Margin InPadding);// 0x55bffe0 0x715ca876a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55bfe8c 0x715ca87780

--------------------------------
Class: CharacterRosterScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4896a00
	CharacterRosterViewModel* CharacterRosterScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d075d00
	class CharacterRosterItemWidget* RosterItemBlueprint;//[Offset: 0x2e8, Size: 0x8] 0x715cf9f600
	StaggeredWrapBox* RosterItemContainer;//[Offset: 0x2f0, Size: 0x8] 0x715d075d80
	HuntersStandardButtonWithShortcut* FilterButton;//[Offset: 0x2f8, Size: 0x8] 0x715d075e00
	void OnFilterButtonPressed();// 0x3d1b85c 0x715d067320
	void OnCharacterDetailsButtonPressed();// 0x3d1b870 0x715d063a40
	Widget* GetInitialGamepadFocusedWidget_Implementation();// 0x3d1b884 0x715d063b20

--------------------------------
Class: CharacterRosterViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4896780
	TextBindable CurrentCount;//[Offset: 0x50, Size: 0x98] 0x715d075a00
	TextBindable TotalCount;//[Offset: 0xe8, Size: 0x98] 0x715d075a80
	TextBindable FilterText;//[Offset: 0x180, Size: 0x98] 0x715d075b00
	bool bIsFirstVisit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x715d075b80
	CharacterRosterItemViewModel*[] RosterItemViewModels;//[Offset: 0x260, Size: 0x10] 0x715cf9f4c0
	CharacterRosterItemViewModel*[] FilteredRosterItemViewModels;//[Offset: 0x270, Size: 0x10] 0x715cf9f560

--------------------------------
Class: StaggeredWrapBox.PanelWidget.Widget.Visual.Object // 71a4b63800
	class SDUserWidget* ItemWidgetClass;//[Offset: 0x120, Size: 0x8] 0x715cc8fd80
	bool bUseWidgetPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x715cd92680
	Vector2D ChildSize;//[Offset: 0x12c, Size: 0x8] 0x715cd92700
	Vector2D InnerSlotPadding;//[Offset: 0x134, Size: 0x8] 0x715cd92780
	SDUserWidget* DefaultNavigationTarget;//[Offset: 0x150, Size: 0x8] 0x715cd92800
	void SetInnerSlotPadding(Vector2D InPadding);// 0x69c008c 0x715cd5a7a0
	void SetChildSize(Vector2D InChildSize);// 0x69c012c 0x715cd5a880
	SDUserWidget* GetDefaultNavigationTarget();// 0x69bffc4 0x715cd5a960
	StaggeredWrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0x69bffe0 0x715cd5aa40

--------------------------------
Class: StaggeredWrapBoxSlot.PanelSlot.Visual.Object // 71a4b63580
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1] 0x715cd92480
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1] 0x715cd92500
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x69c0654 0x715cd5a5e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x69c06f8 0x715cd5a6c0

--------------------------------
Class: CharacterStatInfoWidget.UserWidget.Widget.Visual.Object // 71a4896500
	CharacterSummaryViewModel* CharacterSummaryScreenVM;//[Offset: 0x230, Size: 0x8] 0x715d075680
	PipsIndicatorWidget* DamageIndicator;//[Offset: 0x238, Size: 0x8] 0x715d075700
	PipsIndicatorWidget* ToughnessIndicator;//[Offset: 0x240, Size: 0x8] 0x715d075780
	PipsIndicatorWidget* SupportIndicator;//[Offset: 0x248, Size: 0x8] 0x715d075800
	PipsIndicatorWidget* RangeIndicator;//[Offset: 0x250, Size: 0x8] 0x715d075880
	PipsIndicatorWidget* MobilityIndicator;//[Offset: 0x258, Size: 0x8] 0x715d075900
	PipsIndicatorWidget* DisruptionIndicator;//[Offset: 0x260, Size: 0x8] 0x715d075980

--------------------------------
Class: CharacterSummaryViewModel.SDViewModel.Object // 71a4895b00
	TextBindable WeaponName;//[Offset: 0x60, Size: 0x98] 0x715d078100
	BrushBindable WeaponIcon;//[Offset: 0xf8, Size: 0x178] 0x715d078180
	TextBindable PassiveName;//[Offset: 0x270, Size: 0x98] 0x715d078200
	BrushBindable PassiveIcon;//[Offset: 0x308, Size: 0x178] 0x715d078280
	TextBindable UltimateName;//[Offset: 0x480, Size: 0x98] 0x715d078300
	BrushBindable UltimateIcon;//[Offset: 0x518, Size: 0x178] 0x715d078380
	TextBindable CharacterName;//[Offset: 0x690, Size: 0x98] 0x715d078400
	TextBindable CharacterTagline;//[Offset: 0x728, Size: 0x98] 0x715d076380
	TextBindable CharacterLevel;//[Offset: 0x7c0, Size: 0x98] 0x715d076400
	TextBindable CharacterNextLevel;//[Offset: 0x858, Size: 0x98] 0x715d076480
	TextBindable CharacterXp;//[Offset: 0x8f0, Size: 0x98] 0x715d076500
	TextBindable CharacterXpMax;//[Offset: 0x988, Size: 0x98] 0x715d076580
	BrushBindable NextRewardIconBrush;//[Offset: 0xa20, Size: 0x178] 0x715d076600
	TextBindable ClassName;//[Offset: 0xb98, Size: 0x98] 0x715d076680
	BrushBindable ClassIconBrush;//[Offset: 0xc30, Size: 0x178] 0x715d076700
	BoolBindable ShowHunterLevel;//[Offset: 0xda8, Size: 0x70] 0x715d076780
	BoolBindable HideNextReward;//[Offset: 0xe18, Size: 0x70] 0x715d076800
	BoolBindable ShowMaxXP;//[Offset: 0xe88, Size: 0x70] 0x715d076880
	float HunterXpPercentage;//[Offset: 0xef8, Size: 0x4] 0x715d076900
	bool bIsFirstVisit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefc, Size: 0x1] 0x715d076980
	bool bCanShowPips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefd, Size: 0x1] 0x715d076a00
	BoolBindable ShowRewardPip;//[Offset: 0xf00, Size: 0x70] 0x715d076a80
	PipsIndicatorViewModel* DamageIndicatorVM;//[Offset: 0xf70, Size: 0x8] 0x715d076b00
	PipsIndicatorViewModel* ToughnessIndicatorVM;//[Offset: 0xf78, Size: 0x8] 0x715d076b80
	PipsIndicatorViewModel* SupportIndicatorVM;//[Offset: 0xf80, Size: 0x8] 0x715d076c00
	PipsIndicatorViewModel* RangeIndicatorVM;//[Offset: 0xf88, Size: 0x8] 0x715d076c80
	PipsIndicatorViewModel* MobilityIndicatorVM;//[Offset: 0xf90, Size: 0x8] 0x715d076d00
	PipsIndicatorViewModel* DisruptionIndicatorVM;//[Offset: 0xf98, Size: 0x8] 0x715d076d80
	HunterDifficultyViewModel* HunterDifficultyVM;//[Offset: 0xfa0, Size: 0x8] 0x715d076e00
	void ShowCharacterStatsHelp();// 0x3d1c8ec 0x715d066de0
	void ShowCharacterRewards();// 0x3d1c8d8 0x715d066ec0
	void ShowCharacterAbilitiesHelp();// 0x3d1c8c4 0x715d066fa0
	float GetXpPercentage();// 0x3d1c8a8 0x715d067080

--------------------------------
Class: PipsIndicatorViewModel.SDViewModel.Object // 71a48c0b00
	BoolBindable[] StatPipsBinder;//[Offset: 0x48, Size: 0x10] 0x715d0b2720

--------------------------------
Class: PipsIndicatorWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c0880
	PipsIndicatorViewModel* PipsIndicatorViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d3200

--------------------------------
Class: CharacterStatsHelpScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4896280
	PipsIndicatorWidget* DamageIndicator;//[Offset: 0x2e0, Size: 0x8] 0x715d075300
	PipsIndicatorWidget* ToughnessIndicator;//[Offset: 0x2e8, Size: 0x8] 0x715d075380
	PipsIndicatorWidget* SupportIndicator;//[Offset: 0x2f0, Size: 0x8] 0x715d075400
	PipsIndicatorWidget* RangeIndicator;//[Offset: 0x2f8, Size: 0x8] 0x715d075480
	PipsIndicatorWidget* MobilityIndicator;//[Offset: 0x300, Size: 0x8] 0x715d075500
	PipsIndicatorWidget* DisruptionIndicator;//[Offset: 0x308, Size: 0x8] 0x715d075580
	CharacterStatsHelpViewModel* CharacterStatsHelpScreenVM;//[Offset: 0x310, Size: 0x8] 0x715d075600

--------------------------------
Class: CharacterStatsHelpViewModel.SDViewModel.Object // 71a4896000
	PipsIndicatorViewModel* DamageIndicatorVM;//[Offset: 0x48, Size: 0x8] 0x715d077100
	PipsIndicatorViewModel* ToughnessIndicatorVM;//[Offset: 0x50, Size: 0x8] 0x715d077180
	PipsIndicatorViewModel* SupportIndicatorVM;//[Offset: 0x58, Size: 0x8] 0x715d077200
	PipsIndicatorViewModel* RangeIndicatorVM;//[Offset: 0x60, Size: 0x8] 0x715d077280
	PipsIndicatorViewModel* MobilityIndicatorVM;//[Offset: 0x68, Size: 0x8] 0x715d077300
	PipsIndicatorViewModel* DisruptionIndicatorVM;//[Offset: 0x70, Size: 0x8] 0x715d077380
	void CloseScreen();// 0x3d1c354 0x715d067240

--------------------------------
Class: CharacterSummaryScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4895d80
	HunterDifficultyWidget* DifficultyWidget;//[Offset: 0x2e0, Size: 0x8] 0x715d076f00
	CharacterStatInfoWidget* CharacterSummaryScreen_StatInfo;//[Offset: 0x2e8, Size: 0x8] 0x715d076f80
	CharacterSummaryViewModel* CharacterSummaryScreenVM;//[Offset: 0x2f0, Size: 0x8] 0x715d077000
	void UpdateXpBar(float NewPercentage);// 0x45c6aa0 0x715d067160

--------------------------------
Class: ClassSelectionItemViewModel.SDViewModel.Object // 71a4895880
	TextBindable ItemName;//[Offset: 0x90, Size: 0x98] 0x715d077d80
	BrushBindable ItemBrush;//[Offset: 0x128, Size: 0x178] 0x715d077e00
	Int32Bindable ButtonState;//[Offset: 0x2a0, Size: 0x70] 0x715d077e80
	TextBindable WarningMessage;//[Offset: 0x310, Size: 0x98] 0x715d077f00
	BoolBindable WarningMessageVisibility;//[Offset: 0x3a8, Size: 0x70] 0x715d077f80
	ClassSelectionPlayerIconViewModel*[] PlayerIconViewModels;//[Offset: 0x418, Size: 0x10] 0x715cf9f380
	void SelectCharacterClass();// 0x3d218b0 0x715d066c20
	enum GetCurrentSelectionState();// 0x3d218c4 0x715d066d00

--------------------------------
Class: ClassSelectionPlayerIconViewModel.SDViewModel.Object // 71a4895380
	TextBindable PlayerInitialText;//[Offset: 0x50, Size: 0x98] 0x715d077980
	BoolBindable LockedVisibility;//[Offset: 0xe8, Size: 0x70] 0x715d077a00
	BoolBindable IconVisibility;//[Offset: 0x158, Size: 0x70] 0x715d077a80
	ColorBindable BackgroundColor;//[Offset: 0x1c8, Size: 0x88] 0x715d077b00
	bool IsVisible();// 0x3d220a8 0x715d0668a0
	bool IsConfirmed();// 0x3d2208c 0x715d066980

--------------------------------
Class: ClassSelectionItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4895600
	SDHorizontalBoxWrapper* PlayerAvatars;//[Offset: 0x288, Size: 0x8] 0x715d077c80
	ClassSelectionItemViewModel* ClassSelectionItemViewModel;//[Offset: 0x290, Size: 0x8] 0x715d077d00
	void OnConfirmedAnimationComplete();// 0x3d21d80 0x715d066a60
	void OnButtonStateUpdated();// 0x45c6aa0 0x715d066b40

--------------------------------
Class: ClassSelectionPlayerIconWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489f600
	ClassSelectionPlayerIconViewModel* ClassSelectionPlayerIconViewModel;//[Offset: 0x258, Size: 0x8] 0x715d077900

--------------------------------
Class: ClassSelectionScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489f380
	SDHorizontalBoxWrapper* ClassSelections;//[Offset: 0x2e0, Size: 0x8] 0x715d077780
	ClassSelectionViewModel* ClassSelectionScreenVM;//[Offset: 0x2e8, Size: 0x8] 0x715d077800
	void GetPlayerIconBackgroundColors(out LinearColor[] OutColors);// 0x45c6aa0 0x715d0667c0

--------------------------------
Class: ClassSelectionViewModel.SDViewModel.Object // 71a489f100
	TextBindable StatusText;//[Offset: 0x48, Size: 0x98] 0x715d079400
	BoolBindable ConfirmButtonEnabled;//[Offset: 0xe0, Size: 0x70] 0x715d079480
	TextBindable GameModeText;//[Offset: 0x150, Size: 0x98] 0x715d077400
	Int32Bindable AllReadyIndex;//[Offset: 0x1e8, Size: 0x70] 0x715d077480
	Int32Bindable ConfirmCancelButtonIndex;//[Offset: 0x258, Size: 0x70] 0x715d077500
	BoolBindable ShowNoDamageSelected;//[Offset: 0x2c8, Size: 0x70] 0x715d077580
	BoolBindable ShowNoSupportSelected;//[Offset: 0x338, Size: 0x70] 0x715d077600
	BoolBindable ShowNoTankSelected;//[Offset: 0x3a8, Size: 0x70] 0x715d077680
	ClassSelectionItemViewModel*[] ClassSelectionItemViewModels;//[Offset: 0x420, Size: 0x10] 0x715cf9f240
	void ConfirmSelectionAndCloseScreen();// 0x3d22aa8 0x715d066520
	void ConfirmClasses();// 0x3d22abc 0x715d066600
	void CloseScreen();// 0x3d22ad0 0x715d0666e0

--------------------------------
Class: ConfirmPurchaseScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489ee80
	ConfirmPurchaseViewModel* ConfirmPurchaseScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d079280
	CurrencyDisplayWidget* CurrencyDisplay;//[Offset: 0x2e8, Size: 0x8] 0x715d079300
	CurrencyDisplayWidget* CurrencyDisplay2;//[Offset: 0x2f0, Size: 0x8] 0x715d079380
	void ConfirmPurchase();// 0x3d22e6c 0x715d066360
	void CancelPurchase();// 0x3d22e58 0x715d066440

--------------------------------
Class: ConfirmPurchaseViewModel.SDViewModel.Object // 71a489ec00
	BoolBindable ShowUnownedWarning;//[Offset: 0x48, Size: 0x70] 0x715d078f80
	BoolBindable IsTwoCurrencies;//[Offset: 0xb8, Size: 0x70] 0x715d079000
	TextBindable ItemName;//[Offset: 0x128, Size: 0x98] 0x715d079080
	TextBindable ItemType;//[Offset: 0x1c0, Size: 0x98] 0x715d079100
	CurrencyDisplayViewModel* CurrencyDisplayViewModel;//[Offset: 0x258, Size: 0x8] 0x715d079180
	CurrencyDisplayViewModel* CurrencyDisplay2ViewModel;//[Offset: 0x260, Size: 0x8] 0x715d079200
	void OnPurchaseConfirmed();// 0x3d232ac 0x715d0661a0
	void OnPurchaseCancelled();// 0x3d232c0 0x715d066280

--------------------------------
Class: CosmeticsAdminScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489e980
	CosmeticsAdminViewModel* CosmeticsAdminScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d078900
	ListView* ItemListView;//[Offset: 0x2e8, Size: 0x8] 0x715d078980
	NotificationBadgeWidget* EquipButtonFTUENotification;//[Offset: 0x2f0, Size: 0x8] 0x715d078a00
	class CustomisationItemWidget* ItemWidgetBlueprint;//[Offset: 0x2f8, Size: 0x8] 0x715cf9f1a0
	CurrencyDisplayWidget* CreditsDisplay;//[Offset: 0x300, Size: 0x8] 0x715d078a80
	CurrencyDisplayWidget* CrystalsDisplay;//[Offset: 0x308, Size: 0x8] 0x715d078b00
	HuntersStandardButtonWithShortcut* EquipButton;//[Offset: 0x310, Size: 0x8] 0x715d078b80
	HuntersStandardButtonWithShortcut* WinningsPurchaseButton;//[Offset: 0x318, Size: 0x8] 0x715d078c00
	HuntersStandardButtonWithShortcut* CrystalsPurchaseButton;//[Offset: 0x320, Size: 0x8] 0x715d078c80
	HuntersStandardButtonWithShortcut* ClaimButton;//[Offset: 0x328, Size: 0x8] 0x715d078d00
	EntitlementSummaryWidget* SelectedEntitlementSummary;//[Offset: 0x330, Size: 0x8] 0x715d078d80
	bool bIntroAnimationFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x715d078e00
	void PurchaseButtonPressed(bool bUseAdditionalCurrency);// 0x3d236b8 0x715d065fe0
	int GetEquippedItem();// 0x3d23764 0x715d0660c0

--------------------------------
Class: CosmeticsAdminViewModel.CustomisationItemPanelViewModel.SDViewModel.Object // 71a489e700
	TextBindable PanelTitle;//[Offset: 0x6f0, Size: 0x98] 0x715d079c80
	TextBindable CultureInvariantPanelTitle;//[Offset: 0x788, Size: 0x98] 0x715d079d00
	EntitlementSummaryViewModel* SelectedEntitlementSummaryViewModel;//[Offset: 0x820, Size: 0x8] 0x715d079d80
	NotificationBadgeViewModel* EquipButtonFTUENotificationBadgeVM;//[Offset: 0x838, Size: 0x8] 0x715d079e00
	NotificationBadgeViewModel* GetEquipButtonFTUENotificationBadgeVM();// 0x3d23bf0 0x715d0658e0

--------------------------------
Class: CustomisationItemPanelViewModel.SDViewModel.Object // 71a489e480
	BoolBindable ShowEquipButton;//[Offset: 0x88, Size: 0x70] 0x715d079f00
	BoolBindable ShowPurchaseButtons;//[Offset: 0xf8, Size: 0x70] 0x715d079f80
	BoolBindable ShowClaimButton;//[Offset: 0x168, Size: 0x70] 0x715d07a000
	CustomisationItemViewModel*[] Items;//[Offset: 0x1f8, Size: 0x10] 0x715cf9f100
	BoolBindable AreItemsLocallyEdited;//[Offset: 0x208, Size: 0x70] 0x715d07a100
	BoolBindable IsItemLocked;//[Offset: 0x278, Size: 0x70] 0x715d07a180
	TextBindable EquipButtonText;//[Offset: 0x2e8, Size: 0x98] 0x715d07a200
	BoolBindable ShowComingSoonText;//[Offset: 0x380, Size: 0x70] 0x715d07a280
	BoolBindable ShowCreditsButton;//[Offset: 0x3f0, Size: 0x70] 0x715d07a300
	BoolBindable ShowAdditionalCurrencyButton;//[Offset: 0x460, Size: 0x70] 0x715d07a380
	BoolBindable ShowOrText;//[Offset: 0x4d0, Size: 0x70] 0x715d07a400
	BoolBindable EnableHuntersCurrencyPurchaseButton;//[Offset: 0x540, Size: 0x70] 0x715d07a480
	BoolBindable EnableAdditionalCurrencyPurchaseButton;//[Offset: 0x5b0, Size: 0x70] 0x715d07a500
	BoolBindable EnableEquipButton;//[Offset: 0x620, Size: 0x70] 0x715d078480
	CurrencyDisplayViewModel* CreditDisplayViewModel;//[Offset: 0x690, Size: 0x8] 0x715d078500
	CurrencyDisplayViewModel* AdditionalCurrencyDisplayViewModel;//[Offset: 0x698, Size: 0x8] 0x715d078580
	void RequestUnlockSelectedItem(bool bUseAdditionalCurrency);// 0x3d255c8 0x715d0659c0
	void RequestClaimSelectedItem();// 0x3d255b4 0x715d065aa0
	void OnPanelBecameActive();// 0x3d25378 0x715d065b80
	void OnItemSelected(out const MetaTuningDataKey ItemKey, bool bSelected, out const MetaTuningDataKey GameModeContext, bool bUserInvoked, bool bContextChanged);// 0x3d2538c 0x715d065c60
	void EvaluateStateChange();// 0x3d2558c 0x715d065d40
	void EquipSelectedItem();// 0x3d2567c 0x715d065e20
	void BackButtonPressed();// 0x3d255a0 0x715d065f00

--------------------------------
Class: CosmeticsSummaryScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489e200
	CosmeticsSummaryViewModel* CosmeticsSummaryScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d079980
	CustomisationGroupWidget* HunterSkinsGroup;//[Offset: 0x2e8, Size: 0x8] 0x715d079a00
	FName HunterSkinsGroupIntroAnimName;//[Offset: 0x2f0, Size: 0x8] 0x715d079a80
	CustomisationGroupWidget* WeaponSkinsGroup;//[Offset: 0x2f8, Size: 0x8] 0x715d079b00
	CustomisationGroupWidget* VictoryAnimsGroup;//[Offset: 0x300, Size: 0x8] 0x715d079b80
	CustomisationGroupWidget* IntroAnimsGroup;//[Offset: 0x308, Size: 0x8] 0x715d079c00
	void OnViewportSizeChanged();// 0x45c6aa0 0x715d065800

--------------------------------
Class: CosmeticsSummaryViewModel.SDViewModel.Object // 71a489df80
	CustomisationGroupViewModel* HunterSkinsGroup;//[Offset: 0x60, Size: 0x8] 0x715d079700
	CustomisationGroupViewModel* WeaponSkinsGroup;//[Offset: 0x68, Size: 0x8] 0x715d079780
	CustomisationGroupViewModel* VictoryAnimsGroup;//[Offset: 0x70, Size: 0x8] 0x715d079800
	CustomisationGroupViewModel* IntroAnimsGroup;//[Offset: 0x78, Size: 0x8] 0x715d079880
	void OnCosmeticTypeButtonPressed(enum CosmeticType);// 0x3d24468 0x715d065720

--------------------------------
Class: CustomisationGroupViewModel.SDViewModel.Object // 71a489d580
	TextBindable PanelTitle;//[Offset: 0x48, Size: 0x98] 0x715d07b200
	TextBindable CurrentCount;//[Offset: 0xe0, Size: 0x98] 0x715d07b280
	TextBindable TotalCount;//[Offset: 0x178, Size: 0x98] 0x715d07b300
	NotificationBadgeViewModel* PipNotificationVM;//[Offset: 0x210, Size: 0x8] 0x715d07b380
	NotificationBadgeViewModel* FTUENotificationVM;//[Offset: 0x218, Size: 0x8] 0x715d07b400

--------------------------------
Class: CustomisationGroupWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489d300
	Button* TappableButton;//[Offset: 0x288, Size: 0x8] 0x715d07ad80
	TextBlock* Name;//[Offset: 0x290, Size: 0x8] 0x715d07ae00
	TextBlock* CurrentCount;//[Offset: 0x298, Size: 0x8] 0x715d07ae80
	TextBlock* TotalCount;//[Offset: 0x2a0, Size: 0x8] 0x715d07af00
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x715d07af80
	delegate PressedEvent;//[Offset: 0x2b0, Size: 0x10] 0x715d07b000
	CustomisationGroupViewModel* CustomisationGroupViewModel;//[Offset: 0x2c0, Size: 0x8] 0x715d07b080
	NotificationBadgeWidget* PipNotification;//[Offset: 0x2c8, Size: 0x8] 0x715d07b100
	NotificationBadgeWidget* FTUENotification;//[Offset: 0x2d0, Size: 0x8] 0x715d07b180
	void BroadcastPressed();// 0x3d250f4 0x715d068e40

--------------------------------
Class: DailyChallengesWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489d080
	delegate OnNothingToFocusEvent;//[Offset: 0x288, Size: 0x10] 0x715d7d9780
	SDVerticalBoxWrapper* ChallengeDetailsList;//[Offset: 0x298, Size: 0x8] 0x715d7d9800
	HomeScreenChallengesViewModel* HomeScreenChallengesViewModel;//[Offset: 0x2a0, Size: 0x8] 0x715d7d9880
	float[] IntroAnimationDelays;//[Offset: 0x2a8, Size: 0x10] 0x7148cdce00
	ChallengeRefreshWidget* ChallengeProgressionBar;//[Offset: 0x2b8, Size: 0x8] 0x715d7d9980
	AllDailyChallengesClaimedWidget* AllDailyChallengesClaimedWidget;//[Offset: 0x2c0, Size: 0x8] 0x715d7d9a00
	WidgetAnimation* AnimateInWithChallenges;//[Offset: 0x2c8, Size: 0x8] 0x715d7d9a80
	WidgetAnimation* AnimateInNoChallenges;//[Offset: 0x2d0, Size: 0x8] 0x715d7d9b00
	void PlayTransitionFromDailiesToNoDailies();// 0x45c6aa0 0x715d7cac00
	void NothingToFocusEvent__DelegateSignature();// 0x45c6aa0 0x715d7cace0
	void FindNextWidget(bool IsSelected, int VMItemIndex);// 0x3d25e74 0x715d7c7400
	void AnimateChallengeOutros();// 0x3d25f68 0x715d7c74e0
	void AnimateChallengeIntros();// 0x3d25f7c 0x715d7c75c0

--------------------------------
Class: EditPlayerProfileScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489c900
	EditPlayerProfileViewModel* EditPlayerProfileScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d07c500
	PlayerProfileWidget* PlayerProfileWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d07c580
	WidgetSwitcher* EditPlayerTabsSwitcher;//[Offset: 0x2f0, Size: 0x8] 0x715d07c600
	SDUniformGridPanel* AvatarContainer;//[Offset: 0x2f8, Size: 0x8] 0x715d07a580
	WrapBox* FrameContainer;//[Offset: 0x300, Size: 0x8] 0x715d07a600
	class PlayerImageItemWidget* AvatarWidgetItem;//[Offset: 0x308, Size: 0x8] 0x715cf9ef20
	class PlayerImageItemWidget* FrameWidgetItem;//[Offset: 0x310, Size: 0x8] 0x715cf9efc0
	<GameplayTag,PlayerImageItemWidget*> AvatarElements;//[Offset: 0x318, Size: 0x50] 0x715cecb680
	<GameplayTag,PlayerImageItemWidget*> FrameElements;//[Offset: 0x368, Size: 0x50] 0x715cecb740
	int GridColumns;//[Offset: 0x3b8, Size: 0x4] 0x715d07a880
	void OnAvatarImageLoaded(GameplayTag AvatarKey);// 0x3d26da4 0x715d068820

--------------------------------
Class: EditPlayerProfileViewModel.SDViewModel.Object // 71a489c680
	TextBindable AccountNameBinder;//[Offset: 0x48, Size: 0x98] 0x715d821580
	int NameChangeCount;//[Offset: 0xe0, Size: 0x4] 0x715d821600
	BrushBindable AvatarImage;//[Offset: 0xe8, Size: 0x178] 0x715d821680
	BrushBindable FrameImage;//[Offset: 0x260, Size: 0x178] 0x715d821700
	TextBindable AvatarRequirements;//[Offset: 0x3d8, Size: 0x98] 0x715d821780
	TextBindable FrameRequirements;//[Offset: 0x470, Size: 0x98] 0x715d821800
	BoolBindable ConfirmButtonEnabled;//[Offset: 0x508, Size: 0x70] 0x715d821880
	BoolBindable FramesEnabled;//[Offset: 0x578, Size: 0x70] 0x715d821900
	PlayerProfileWidgetViewModel* PlayerProfileWidgetVM;//[Offset: 0x5e8, Size: 0x8] 0x715d821980
	<GameplayTag,PlayerImageItemViewModel*> PlayerAvatarItemVMs;//[Offset: 0x5f0, Size: 0x50] 0x714906d540
	<GameplayTag,PlayerImageItemViewModel*> PlayerFrameItemVMs;//[Offset: 0x640, Size: 0x50] 0x714906d600
	PlayerImageItemViewModel*[] TabViewModels;//[Offset: 0x690, Size: 0x10] 0x7148cdc180
	FText[] TabNames;//[Offset: 0x6a0, Size: 0x10] 0x7148cdc220
	bool bIsFirstVisit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1] 0x715d821d00
	delegate OnAvatarSelected;//[Offset: 0x730, Size: 0x10] 0x715d821d80
	void OnNameUpdated();// 0x3d2abe4 0x715d7cf120
	void OnFrameButtonClicked();// 0x3d2aba8 0x715d7cf200
	void OnConfirmButtonClicked();// 0x3d2abd0 0x715d7cf2e0
	void OnBackButtonClicked();// 0x3d2ab94 0x715d7cf3c0
	void OnAvatarSelected__DelegateSignature();// 0x45c6aa0 0x715d7cf4a0
	void OnAvatarButtonClicked();// 0x3d2abbc 0x715d7cf580

--------------------------------
Class: PlayerProfileWidgetViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c8800
	BrushBindable AvatarImage;//[Offset: 0x70, Size: 0x178] 0x715d0d5f00
	TextBindable DisplayNameText;//[Offset: 0x1e8, Size: 0x98] 0x715d0d5f80
	TextBindable LevelText;//[Offset: 0x280, Size: 0x98] 0x715d0d6000
	VisibilityBindable LevelTextVisibility;//[Offset: 0x318, Size: 0x70] 0x715d0d6080
	FloatBindable LevelProgressFillPercent;//[Offset: 0x388, Size: 0x70] 0x715d0d6100
	TextBindable ZidText;//[Offset: 0x3f8, Size: 0x98] 0x715d0d6180
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1] 0x715d0d6200
	VisibilityBindable LevelMaxVisibility;//[Offset: 0x498, Size: 0x70] 0x715d0d6280
	enum WidgetMode;//[Offset: 0x508, Size: 0x1] 0x715d0b2540
	bool bHasUnseenPips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 0x1] 0x715d0d4280
	bool bHasUnseenRewards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a, Size: 0x1] 0x715d0d4300
	void OnRightButtonPressed();// 0x3d6c860 0x715d0c4760
	void OnLeftButtonPressed();// 0x3d6c874 0x715d0c4840
	bool GetRewardsTabFeatureFlagSet();// 0x3d6c888 0x715d0c4920
	bool GetEditNameFeatureFlagSet();// 0x3d6c8c0 0x715d0c4a00

--------------------------------
Class: PlayerImageItemViewModel.SDViewModel.Object // 71a48c0600
	BrushBindable ItemImage;//[Offset: 0x68, Size: 0x178] 0x715d821100
	TextBindable ItemNameText;//[Offset: 0x1e0, Size: 0x98] 0x715d821180
	TextBindable ItemDescriptionText;//[Offset: 0x278, Size: 0x98] 0x715d821200
	bool bIsImageSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x715d821280
	Int32Bindable CurrentSelection;//[Offset: 0x318, Size: 0x70] 0x715d821300
	BoolBindable IsUnlocked;//[Offset: 0x388, Size: 0x70] 0x715d821380
	BoolBindable HasSeen;//[Offset: 0x3f8, Size: 0x70] 0x715d821400
	delegate OnImageChange;//[Offset: 0x468, Size: 0x10] 0x715d821480
	GameplayTag ImageKey;//[Offset: 0x478, Size: 0x8] 0x715d821500
	void OnItemButtonClicked();// 0x3d632b8 0x715d7cee80
	void OnImageChanged__DelegateSignature();// 0x45c6aa0 0x715d7cef60

--------------------------------
Class: PlayerProfileWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c8a80
	PlayerProfileWidgetViewModel* PlayerProfileWidgetViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d4480
	SlateBrush DefaultAvatar;//[Offset: 0x260, Size: 0x88] 0x715d0d4500
	void OnPlayerDataReady();// 0x45c6aa0 0x715d0c4ae0
	void OnPlayerChanged();// 0x45c6aa0 0x715d0c4bc0

--------------------------------
Class: PlayerImageItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c0380
	PlayerImageItemViewModel* PlayerImageItemViewModel;//[Offset: 0x288, Size: 0x8] 0x715d0d5280

--------------------------------
Class: EditPlayerProfileWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489c400
	EditPlayerProfileViewModel* EditPlayerProfileViewModel;//[Offset: 0x258, Size: 0x8] 0x715d07c480

--------------------------------
Class: EntitlementIconViewModel.SDViewModel.Object // 71a489c180
	BrushBindable EntitlementImageBrush;//[Offset: 0x48, Size: 0x178] 0x715d07c280
	AbilityIconBindable EntitlementAbilityImageBrush;//[Offset: 0x1c0, Size: 0x178] 0x715d07c300
	VisibilityBindable EntitlementImageVisibility;//[Offset: 0x338, Size: 0x70] 0x715d07c380
	VisibilityBindable EntitlementAbilityImageVisibility;//[Offset: 0x3a8, Size: 0x70] 0x715d07c400

--------------------------------
Class: EntitlementIconWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489bf00
	EntitlementIconViewModel* EntitlementIconViewModel;//[Offset: 0x258, Size: 0x8] 0x715d07c200

--------------------------------
Class: EntitlementPreviewScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489bc80
	EntitlementPreviewViewModel* EntitlementPreviewViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715d07c100
	EntitlementSummaryWidget* EntitlementSummaryWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d07c180

--------------------------------
Class: EntitlementPreviewViewModel.BAInjectableViewModel.SDViewModel.Object // 71a489ba00
	EntitlementSummaryViewModel* EntitlementSummaryViewModel;//[Offset: 0x90, Size: 0x8] 0x715d07c080
	void BackButtonPressed();// 0x3d2b8cc 0x715d068740

--------------------------------
Class: EventChallengeProgressRewardViewModel.ImageAmountDisplayViewModel.BAInjectableViewModel.SDViewModel.Object // 71a489b280

--------------------------------
Class: EventDetailsViewModel.BAInjectableViewModel.SDViewModel.Object // 71a489b000
	BoolBindable ShowPip;//[Offset: 0x50, Size: 0x70] 0x715d07d380
	BoolBindable ShowRewardPip;//[Offset: 0xc0, Size: 0x70] 0x715d07d400
	BoolBindable IsNewEvent;//[Offset: 0x130, Size: 0x70] 0x715d07d480
	TextBindable Title;//[Offset: 0x1a0, Size: 0x98] 0x715d07d500
	TextBindable Description;//[Offset: 0x238, Size: 0x98] 0x715d07d580
	TextBindable EndTime;//[Offset: 0x2d0, Size: 0x98] 0x715d07d600
	FloatBindable AnimatingEventPoints;//[Offset: 0x368, Size: 0x70] 0x715d07d680
	AsyncBrushBindable KeyArt;//[Offset: 0x3d8, Size: 0x178] 0x715d07b600
	void SelectEvent();// 0x3d2c22c 0x715d068660

--------------------------------
Class: AsyncBrushBindable.BrushBindable.Bindable // 715cec6880

--------------------------------
Class: EventDetailsWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489ad80
	EventDetailsViewModel* EventDetailsViewModel;//[Offset: 0x258, Size: 0x8] 0x715d07d300

--------------------------------
Class: EventHubDetailsWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489ab00
	EventDetailsViewModel* EventDetailsViewModel;//[Offset: 0x290, Size: 0x8] 0x715d07d200
	Widget* NotificationBadge;//[Offset: 0x298, Size: 0x8] 0x715d07d280

--------------------------------
Class: EventsConfiguration.DeveloperSettings.Object // 71a489a880
	SoftObjectPath EventProgressIcon;//[Offset: 0x38, Size: 0x18] 0x715d07d080
	float RackUpEventPointsPerSecond;//[Offset: 0x50, Size: 0x4] 0x715d07d100
	bool DisplayEventsUsingTabs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x715d07d180

--------------------------------
Class: EventsHubScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489a600
	EventsHubViewModel* EventsHubVM;//[Offset: 0x2e0, Size: 0x8] 0x715d07ce80
	ListView* EventList;//[Offset: 0x2e8, Size: 0x8] 0x715d07cf00
	void OnActiveEventTypesChanged(out const enum[] EventTypes);// 0x45c6aa0 0x715d0684a0
	Widget* GetWidgetToFocus();// 0x3d2cb98 0x715d068580

--------------------------------
Class: EventsHubViewModel.BAInjectableViewModel.SDViewModel.Object // 71a489fd80
	BoolBindable HasMultipleActiveEventTypes;//[Offset: 0x80, Size: 0x70] 0x715d07ca80
	BoolBindable HasNoEvents;//[Offset: 0xf0, Size: 0x70] 0x715d07cb00
	<FString,EventDetailsViewModel*> CachedEventDetailsViewModels;//[Offset: 0x160, Size: 0x50] 0x715cecb500
	<enum,GroupedEvents> EventViewModelsGroupedByType;//[Offset: 0x1b0, Size: 0x50] 0x715cecb5c0
	bool TrySetActiveEventType(int Index);// 0x3d2d0e8 0x715d0682e0
	void BackButtonPressed();// 0x3d2d198 0x715d0683c0

--------------------------------
Class: GroupedEvents // 715da92500
	EventDetailsViewModel*[] Events;//[Offset: 0x0, Size: 0x10] 0x715d89b8c0

--------------------------------
Class: EventsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a489fb00
	EventsViewModel* EventsScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d07c800
	WidgetSwitcher* EventTypeSwitcher;//[Offset: 0x2e8, Size: 0x8] 0x715d07c880
	MilestoneEventDetailsWidget* MilestoneWidget;//[Offset: 0x2f0, Size: 0x8] 0x715d07c900
	EventDetailsWidget* SimpleWidget;//[Offset: 0x2f8, Size: 0x8] 0x715d07c980
	Widget* NoneSelectedWidget;//[Offset: 0x300, Size: 0x8] 0x715d07ca00

--------------------------------
Class: EventsViewModel.BAInjectableViewModel.SDViewModel.Object // 71a489f880
	EventDetailsViewModel* EventDetailsViewModel;//[Offset: 0x68, Size: 0x8] 0x715d07c780
	void BackButtonPressed();// 0x3d2d830 0x715d068200

--------------------------------
Class: MilestoneEventDetailsWidget.EventDetailsWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48aad80
	MilestoneEventDetailsViewModel* MilestoneEventDetailsViewModel;//[Offset: 0x260, Size: 0x8] 0x715d0aff80
	MilestoneRewardsWidget* RewardsWidget;//[Offset: 0x268, Size: 0x8] 0x715d0ae780
	MilestoneEventTasksWidget* TasksWidget;//[Offset: 0x270, Size: 0x8] 0x715d0ae800

--------------------------------
Class: MilestoneEventDetailsViewModel.EventDetailsViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48ab000
	BoolBindable ShowChallengePip;//[Offset: 0x608, Size: 0x70] 0x715d0ae880
	TextBindable EventPointsForNextTier;//[Offset: 0x678, Size: 0x98] 0x715d0ae900
	TextBindable EventPointsIntoTier;//[Offset: 0x710, Size: 0x98] 0x715d0ae980
	FloatBindable CurrentTierProgressRatio;//[Offset: 0x7a8, Size: 0x70] 0x715d0aea00
	TextBindable NextTierNumber;//[Offset: 0x818, Size: 0x98] 0x715d0aea80
	BoolBindable AllTiersProgressed;//[Offset: 0x8b0, Size: 0x70] 0x715d0aeb00
	MilestoneEventTasksViewModel* TasksVM;//[Offset: 0x920, Size: 0x8] 0x715d0aeb80
	MilestoneRewardsViewModel* RewardsVM;//[Offset: 0x928, Size: 0x8] 0x715d0aec00
	void OnChangedSelectedSubView(enum NewView, bool AutoSelected);// 0x3d55e90 0x715d0c0860

--------------------------------
Class: MilestoneEventTasksViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48aab00
	BoolBindable IsStartEventButtonVisible;//[Offset: 0x68, Size: 0x70] 0x715d0afd80
	AsyncBrushBindable KeyArt;//[Offset: 0xd8, Size: 0x178] 0x715d0afe00
	BoolBindable IsStartEventButtonEnable;//[Offset: 0x250, Size: 0x70] 0x715d0afe80
	ChallengeDetailsViewModel*[] ChallengeDetailsList;//[Offset: 0x300, Size: 0x10] 0x715d0b06a0
	void OnPlayerEventPressed();// 0x3d56848 0x715d0c0780

--------------------------------
Class: MilestoneRewardsViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48aa600
	BoolBindable IsStartEventButtonVisible;//[Offset: 0x80, Size: 0x70] 0x715d0d0d80
	BoolBindable IsStartEventButtonEnable;//[Offset: 0xf0, Size: 0x70] 0x715d0d0e00
	TextBindable RewardAvailableAtText;//[Offset: 0x160, Size: 0x98] 0x715d0d0e80
	BoolBindable IsComplete;//[Offset: 0x1f8, Size: 0x70] 0x715d0d0f00
	BoolBindable IsCompleteAndClaimable;//[Offset: 0x268, Size: 0x70] 0x715d0d0f80
	BoolBindable IsCompleteAndClaimed;//[Offset: 0x2d8, Size: 0x70] 0x715d0d1000
	BoolBindable IsViewItemButtonVisible;//[Offset: 0x348, Size: 0x70] 0x715d0d1080
	EventTierRewardGroupViewModel*[] RewardViewModels;//[Offset: 0x3b8, Size: 0x10] 0x715d0b0600
	EntitlementSummaryViewModel* RewardSummaryViewModel;//[Offset: 0x3c8, Size: 0x8] 0x715d0af880
	RewardPreviewViewModel* RewardPreviewViewModel;//[Offset: 0x3d0, Size: 0x8] 0x715d0af900
	void OnPreviewItemPressed();// 0x3d56e64 0x715d0c0320
	void OnPlayerEventPressed();// 0x3d56e78 0x715d0c0400
	void OnItemSelected(out const MetaTuningDataKey ItemKey, bool bIsSelected, int RewardUnlockLevel, int RewardIndex);// 0x3d56e8c 0x715d0c04e0
	void AttemptClaim();// 0x3d5701c 0x715d0c05c0

--------------------------------
Class: EventTierRewardGroupViewModel.RewardLevelGroupViewModelBase.BAInjectableViewModel.SDViewModel.Object // 71a48a5100

--------------------------------
Class: RewardLevelGroupViewModelBase.BAInjectableViewModel.SDViewModel.Object // 71a48a4e80
	BoolBindable IsGroupSelected;//[Offset: 0xb0, Size: 0x70] 0x715d07e000
	BoolBindable IsUnlocked;//[Offset: 0x120, Size: 0x70] 0x715d07e080
	TextBindable DisplayedUnlockLevel;//[Offset: 0x190, Size: 0x98] 0x715d07e100
	Int32Bindable GroupState;//[Offset: 0x228, Size: 0x70] 0x715d07e180
	Int32Bindable ContainsMultipleRewards;//[Offset: 0x298, Size: 0x70] 0x715d07e200
	RewardItemViewModel*[] RewardItemViewModels;//[Offset: 0x308, Size: 0x10] 0x715cf9eb60
	void SetUnlocked(bool bNewUnlocked);// 0x3d711b4 0x715d067be0
	void OnItemSelected(out const MetaTuningDataKey ItemKey, bool bIsSelected, int RewardUnlockLevel, int RewardIndex, bool bContextChanged);// 0x3d70f24 0x715d067cc0
	bool GetUnlocked();// 0x3d71178 0x715d067da0
	enum GetRewardGroupState();// 0x3d71108 0x715d067e80
	enum GetGroupState();// 0x3d71124 0x715d067f60
	bool GetGroupSelected();// 0x3d71260 0x715d068040
	bool DoesLevelContainMultipleRewards();// 0x3d71140 0x715d068120

--------------------------------
Class: RewardItemViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c6280
	delegate OnItemStateChanged;//[Offset: 0x60, Size: 0x10] 0x715d0d7700
	BoolBindable IsSelected;//[Offset: 0x70, Size: 0x70] 0x715d0d7780
	BoolBindable IsUnlocked;//[Offset: 0xe0, Size: 0x70] 0x715d0d7800
	BoolBindable ShowClaimedBanner;//[Offset: 0x150, Size: 0x70] 0x715d0d7880
	TextBindable DisplayName;//[Offset: 0x1c0, Size: 0x98] 0x715d0d7900
	TextBindable LevelUnlock;//[Offset: 0x258, Size: 0x98] 0x715d0d7980
	TextBindable QuantityText;//[Offset: 0x2f0, Size: 0x98] 0x715d0d7a00
	enum ItemState;//[Offset: 0x388, Size: 0x1] 0x715d0b2040
	HuntersEntitlementBase* EntitlementItem;//[Offset: 0x3b8, Size: 0x8] 0x715d0d7b00
	StandardEntitlementWithBackgroundViewModel* EntitlementWithBackgroundVM;//[Offset: 0x3c0, Size: 0x8] 0x715d0d7b80
	void SetUnlocked(bool bNewUnlocked);// 0x3d6fbfc 0x715d0c6de0
	void SetSelected(bool bNewSelected);// 0x3d6fce4 0x715d0c6ec0
	bool GetUnlocked();// 0x3d6fbc0 0x715d0c6fa0
	bool GetSelected();// 0x3d6fca8 0x715d0c7080
	void GetRewardType(out enum OutEntitlementType);// 0x3d6fb0c 0x715d0c7160
	enum GetItemState();// 0x3d6faf0 0x715d0c7240

--------------------------------
Class: MilestoneRewardsWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48afd80
	ListView* ListView;//[Offset: 0x258, Size: 0x8] 0x715d0d0b80
	EntitlementSummaryWidget* RewardSummaryWidget;//[Offset: 0x260, Size: 0x8] 0x715d0d0c00
	RewardPreviewWidget* RewardPreviewWidget;//[Offset: 0x268, Size: 0x8] 0x715d0d0c80
	MilestoneRewardsViewModel* RewardsVM;//[Offset: 0x270, Size: 0x8] 0x715d0d0d00

--------------------------------
Class: MilestoneEventTasksWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48aa880
	ListView* ChallengeDetailsList;//[Offset: 0x258, Size: 0x8] 0x715d0afb80
	MilestoneEventTasksViewModel* TasksVM;//[Offset: 0x260, Size: 0x8] 0x715d0afc00
	bool IsWidgetSelectedInList(UserWidget* GeneratedWidget);// 0x3d56b38 0x715d0c06a0

--------------------------------
Class: FameGrantCelebrationScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a4c00
	FameGrantCelebrationViewModel* FameGrantCelebrationScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d07dd80
	float InitialDelaySeconds;//[Offset: 0x2e8, Size: 0x4] 0x715d07de00
	float XPTallyDurationSeconds;//[Offset: 0x2ec, Size: 0x4] 0x715d07de80
	float LevelUpDurationSeconds;//[Offset: 0x2f0, Size: 0x4] 0x715d07df00
	CurveFloat* XPCountUpCurve;//[Offset: 0x2f8, Size: 0x8] 0x715d07df80
	void UpdateCharacter();// 0x45c6aa0 0x715d067a20
	void CharacterLevelUp();// 0x45c6aa0 0x715d067b00

--------------------------------
Class: FameGrantCelebrationViewModel.SDViewModel.Object // 71a48a4980
	FrontendMatchResultCharacter DisplayCharacter;//[Offset: 0x88, Size: 0xb8] 0x715d07da80
	BoolBindable DisplayMaxHunterLevel;//[Offset: 0x140, Size: 0x70] 0x715d07db00
	TextBindable FameCountText;//[Offset: 0x1b0, Size: 0x98] 0x715d07db80
	TextBindable HunterLevelText;//[Offset: 0x248, Size: 0x98] 0x715d07dc00
	HuntersRewardTrack* CharacterRewardTrack;//[Offset: 0x2e8, Size: 0x8] 0x715d07dc80
	CurveFloat* XPCountUpCurve;//[Offset: 0x300, Size: 0x8] 0x715d07dd00
	void FameGrantCelebrationCompleted();// 0x3d2e1b0 0x715d067940

--------------------------------
Class: FrontendMatchResultCharacter // 715da92140
	FText HunterName;//[Offset: 0x0, Size: 0x18] 0x715da86700
	Texture2D* HunterImage;//[Offset: 0x18, Size: 0x8] 0x715da86780
	float HunterXpPercentage;//[Offset: 0x20, Size: 0x4] 0x715da86800
	int HunterLevel;//[Offset: 0x24, Size: 0x4] 0x715da86880
	int PlayerLevel;//[Offset: 0x28, Size: 0x4] 0x715da86900
	bool bHunterAtMaxLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x715da86980
	SlateBrush ClassIconBrush;//[Offset: 0x30, Size: 0x88] 0x715da86a00

--------------------------------
Class: HuntersRewardTrack.HuntersCharacterRelatedDataAsset.DataAsset.Object // 71a4b31780
	HuntersRewardTrackLevel[] TrackLevels;//[Offset: 0x38, Size: 0x10] 0x715cc8cf40
	DateTime IntroductionDate;//[Offset: 0x48, Size: 0x8] 0x715cd61200
	DateTime RetireDate;//[Offset: 0x50, Size: 0x8] 0x715cd61280

--------------------------------
Class: HuntersCharacterRelatedDataAsset.DataAsset.Object // 71a4b20d80
	GameplayTag CharacterId;//[Offset: 0x30, Size: 0x8] 0x715cd20800

--------------------------------
Class: HuntersRewardTrackLevel // 715cec0100
	int Target_XP;//[Offset: 0x0, Size: 0x4] 0x715ceb6600
	bool Highlighted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715ceb6680
	HuntersClaimableEntitlementAmount[] Grants;//[Offset: 0x8, Size: 0x10] 0x715ce92b80

--------------------------------
Class: HuntersClaimableEntitlementAmount.HuntersEntitlementAmount // 715cec10c0
	bool Auto_claim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715ceb4380
	bool Paid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x715ceb4400
	bool Highlighted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1] 0x715ceb4480

--------------------------------
Class: FameGrantSelectionScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a4700
	FameGrantSelectionViewModel* FameGrantSelectionScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d07d900
	class CharacterRosterItemWidget* RosterItemBlueprint;//[Offset: 0x2e8, Size: 0x8] 0x715cf9eac0
	StaggeredWrapBox* RosterItemContainer;//[Offset: 0x2f0, Size: 0x8] 0x715d07d980
	void OnTriggerIntroAnimation();// 0x45c6aa0 0x715d067780
	Widget* GetInitialGamepadFocusedWidget_Implementation();// 0x3d2e4a0 0x715d067860

--------------------------------
Class: FameGrantSelectionViewModel.SDViewModel.Object // 71a48a4480
	CharacterRosterItemViewModel*[] RosterItemViewModels;//[Offset: 0x70, Size: 0x10] 0x715cf9ea20
	TextBindable GrantedFameAmountText;//[Offset: 0x80, Size: 0x98] 0x715d07d800
	void SetGrantedFameAmountText(out const FText InText);// 0x3d2e88c 0x715d0675c0
	void BackButtonPressed();// 0x3d2e99c 0x715d0676a0

--------------------------------
Class: FeaturePanelViewModel.SDViewModel.Object // 71a48a4200
	TextBindable FeatureTextBindable;//[Offset: 0x48, Size: 0x98] 0x715d07f380
	TextBindable TimeRemainingTextBindable;//[Offset: 0xe0, Size: 0x98] 0x715d07f400
	VisibilityBindable TimeRemainingVisibilityBindable;//[Offset: 0x178, Size: 0x70] 0x715d07f480
	TextBindable CallToActionTextBindable;//[Offset: 0x1e8, Size: 0x98] 0x715d07f500
	PaginationViewModel* PaginationViewModel;//[Offset: 0x280, Size: 0x8] 0x715d07f580
	void UpdateBindables();// 0x3d2ed88 0x715d06aa40
	void SetTimeRemainingVisibilityProperty(const enum InTimeRemainingVisibility);// 0x3d2ef90 0x715d06ab20
	void SetTimeRemainingTextProperty(const FText InTimeRemainingText);// 0x3d2f030 0x715d06ac00
	void SetFeatureTextProperty(const FText InFeatureText);// 0x3d2f220 0x715d06ace0
	void SetCallToActionTextProperty(const FText InCallToActionText);// 0x3d2ed9c 0x715d067400
	PaginationViewModel* GetPaginationViewModel();// 0x3d2f414 0x715d0674e0

--------------------------------
Class: PaginationViewModel.SDViewModel.Object // 71a48c1a00
	delegate OnPageChanged;//[Offset: 0x48, Size: 0x10] 0x715d7dd000
	void SetPageIndex(int InIndex);// 0x3d618c4 0x715d7cb220
	void PageChangedDelegate__DelegateSignature(int PrevPageIndex, int NewPageIndex);// 0x45c6aa0 0x715d7cb300
	void GoToPreviousPage(enum OverflowBehaviour);// 0x3d6177c 0x715d7cb3e0
	void GoToNextPage(enum OverflowBehaviour);// 0x3d61820 0x715d7cb4c0
	int GetTotalPageCount();// 0x3d61744 0x715d7cb5a0
	int GetCurrentPageIndex();// 0x3d61760 0x715d7cb680

--------------------------------
Class: FeaturePanelWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a3f80
	FeaturePanelViewModel* FeaturePanelViewModel;//[Offset: 0x288, Size: 0x8] 0x715d07f280
	PaginationWidget* PaginationWidget;//[Offset: 0x290, Size: 0x8] 0x715d07f300

--------------------------------
Class: PaginationWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c1780
	PaginationViewModel* PaginationViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d3b00
	HorizontalBox* PipContainer;//[Offset: 0x260, Size: 0x8] 0x715d0d3b80
	class PaginationPipWidget* PipWidgetBlueprintClass;//[Offset: 0x268, Size: 0x8] 0x715d0b27c0
	Margin PipMargin;//[Offset: 0x270, Size: 0x10] 0x715d0d3c00
	PaginationPipWidget*[] PipWidgets;//[Offset: 0x280, Size: 0x10] 0x715d0b2860
	void OnCurrentPageChanged(int PrevPageIndex, int NewPageIndex);// 0x3d61e28 0x715d0c2460

--------------------------------
Class: PaginationPipWidget.UserWidget.Widget.Visual.Object // 71a48c1c80
	WidgetAnimation* Grow;//[Offset: 0x240, Size: 0x8] 0x715d0d3e00
	void OnPipPressed();// 0x3d6122c 0x715d0c2540

--------------------------------
Class: FriendsListButtonWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a3d00
	LinearColor BaseColour;//[Offset: 0x288, Size: 0x10] 0x715d07f180
	LinearColor AccentColour;//[Offset: 0x298, Size: 0x10] 0x715d07f200
	void ResetWidget();// 0x45c6aa0 0x715d06a960

--------------------------------
Class: FriendsListHeaderViewModel.SDViewModel.Object // 71a48a3a80
	VisibilityBindable HeaderVisible;//[Offset: 0x48, Size: 0x70] 0x715d07ef80
	Int32Bindable StateSelector;//[Offset: 0xb8, Size: 0x70] 0x715d07f000
	TextBindable Title;//[Offset: 0x128, Size: 0x98] 0x715d07f080
	TextBindable ListCount;//[Offset: 0x1c0, Size: 0x98] 0x715d07f100
	void ExpandPressed();// 0x3d2fea4 0x715d06a7a0
	void CollapsePressed();// 0x3d2fe90 0x715d06a880

--------------------------------
Class: FriendsListHeaderWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a3800
	SizeBox* HeaderSizeBox;//[Offset: 0x288, Size: 0x8] 0x715d07ea00
	ListView* ListPanel;//[Offset: 0x290, Size: 0x8] 0x715d07ea80
	SizeBox* ListPanelCanvasSizeBox;//[Offset: 0x298, Size: 0x8] 0x715d07eb00
	SizeBox* ListPanelSizeBox;//[Offset: 0x2a0, Size: 0x8] 0x715d07eb80
	SizeBox* ListPanelBottomPadding;//[Offset: 0x2a8, Size: 0x8] 0x715d07ec00
	CurveFloat* OpenAnimCurve;//[Offset: 0x2b0, Size: 0x8] 0x715d07ec80
	FriendsListHeaderViewModel* FriendsListHeaderViewModel;//[Offset: 0x2b8, Size: 0x8] 0x715d07ed00
	float DefaultPanelHeight;//[Offset: 0x2c0, Size: 0x4] 0x715d07ed80
	<FString,FriendsListItemViewModel*> ViewModelsMap;//[Offset: 0x2c8, Size: 0x50] 0x715cecb440
	FriendsListItemViewModel*[] SortedList;//[Offset: 0x318, Size: 0x10] 0x715cf9e8e0

--------------------------------
Class: FriendsListItemViewModel.SDViewModel.Object // 71a48a3580
	TextBindable PlayerName;//[Offset: 0x48, Size: 0x98] 0x715d07fa00
	TextBindable ButtonOneText;//[Offset: 0xe0, Size: 0x98] 0x715d07fa80
	TextBindable ButtonTwoText;//[Offset: 0x178, Size: 0x98] 0x715d07fb00
	TextBindable ButtonThreeText;//[Offset: 0x210, Size: 0x98] 0x715d07fb80
	TextBindable ButtonFourText;//[Offset: 0x2a8, Size: 0x98] 0x715d07fc00
	TextBindable InvitingPendingText;//[Offset: 0x340, Size: 0x98] 0x715d07fc80
	TextBindable OnlineStatusText;//[Offset: 0x3d8, Size: 0x98] 0x715d07fd00
	VisibilityBindable LeaderVisibility;//[Offset: 0x470, Size: 0x70] 0x715d07fd80
	PlayerAvatarViewModel* AvatarViewModel;//[Offset: 0x4e0, Size: 0x8] 0x715d07fe00
	void SetIsPanelOpen(bool bInPanelOpen);// 0x3d30ad4 0x715d069d20
	void SendPanelIsOpeningEvent();// 0x3d309f0 0x715d069e00
	void SendPanelIsOpenEvent();// 0x3d309dc 0x715d069ee0
	void SendPanelIsClosedEvent();// 0x3d309c8 0x715d069fc0
	bool GetIsPanelOpen();// 0x3d30bec 0x715d06a0a0
	bool CanPressMainButton();// 0x3d30bb4 0x715d06a180
	enum ButtonTwoPressed();// 0x3d30a6c 0x715d06a260
	enum ButtonThreePressed();// 0x3d30a38 0x715d06a340
	enum ButtonOnePressed();// 0x3d30aa0 0x715d06a420
	enum ButtonFourPressed();// 0x3d30a04 0x715d06a500
	bool AutomaticallyOpenPanel();// 0x3d30b7c 0x715d06a5e0
	void AnimateOutFinished();// 0x3d309b4 0x715d06a6c0

--------------------------------
Class: PlayerAvatarViewModel.SDViewModel.Object // 71a4b3b280
	BrushBindable AvatarImage;//[Offset: 0x48, Size: 0x178] 0x715cd6ed00
	TextBindable PlayerLevel;//[Offset: 0x1c0, Size: 0x98] 0x715cd6ed80
	BoolBindable LevelVisible;//[Offset: 0x258, Size: 0x70] 0x715cd6ee00

--------------------------------
Class: FriendsListItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a3300
	PlayerConfig CurrentPlayerConfig;//[Offset: 0x290, Size: 0x24] 0x715d0a0200
	PlayerConfig OnlinePlayerConfig;//[Offset: 0x2b4, Size: 0x24] 0x715d0a0280
	PlayerConfig OfflinePlayerConfig;//[Offset: 0x2d8, Size: 0x24] 0x715d0a0300
	PlayerConfig GreyedOutPlayerConfig;//[Offset: 0x2fc, Size: 0x24] 0x715d0a0380
	FName OfflineTextColor;//[Offset: 0x320, Size: 0x8] 0x715d0a0400
	FName OnlineIndicatorColor;//[Offset: 0x328, Size: 0x8] 0x715d0a0480
	FName OfflineIndicatorColor;//[Offset: 0x330, Size: 0x8] 0x715d0a0500
	ButtonConfig NormalButtonConfig;//[Offset: 0x338, Size: 0x10] 0x715d0a0580
	ButtonConfig DisabledButtonConfig;//[Offset: 0x348, Size: 0x10] 0x715d0a0600
	ButtonConfig CancelButtonConfig;//[Offset: 0x358, Size: 0x10] 0x715d0a0680
	ButtonConfig ConfirmButtonConfig;//[Offset: 0x368, Size: 0x10] 0x715d0a0700
	SizeBox* TopPadding;//[Offset: 0x378, Size: 0x8] 0x715d0a0780
	SizeBox* PlayerTopPadding;//[Offset: 0x380, Size: 0x8] 0x715d0a0800
	SizeBox* PlayerBackgroundSizeBox;//[Offset: 0x388, Size: 0x8] 0x715d0a0880
	SizeBox* BottomPadding;//[Offset: 0x390, Size: 0x8] 0x715d0a0900
	SDConfigurableTextBlock* PlayerName;//[Offset: 0x398, Size: 0x8] 0x715d0a0980
	Image* PlayerBackground;//[Offset: 0x3a0, Size: 0x8] 0x715d0a0a00
	Image* PlayerBackgroundLines;//[Offset: 0x3a8, Size: 0x8] 0x715d0a0a80
	Image* PlayerBkgGradiant;//[Offset: 0x3b0, Size: 0x8] 0x715d0a0b00
	FriendsListButtonWidget* ButtonOne;//[Offset: 0x3b8, Size: 0x8] 0x715d0a0b80
	FriendsListButtonWidget* ButtonTwo;//[Offset: 0x3c0, Size: 0x8] 0x715d0a0c00
	FriendsListButtonWidget* ButtonThree;//[Offset: 0x3c8, Size: 0x8] 0x715d0a0c80
	FriendsListButtonWidget* ButtonFour;//[Offset: 0x3d0, Size: 0x8] 0x715d0a0d00
	Spacer* SingleButtonSpacer;//[Offset: 0x3d8, Size: 0x8] 0x715d0a0d80
	SDConfigurableTextBlock* OnlineStatus;//[Offset: 0x3e0, Size: 0x8] 0x715d0a0e00
	SDConfigurableTextBlock* InvitePendingStatus;//[Offset: 0x3e8, Size: 0x8] 0x715d0a0e80
	Image* OnlineIndicatorImage;//[Offset: 0x3f0, Size: 0x8] 0x715d0a0f00
	FriendsListItemViewModel* FriendsListItemViewModel;//[Offset: 0x3f8, Size: 0x8] 0x715d0a0f80
	PlayerAvatarWidget* PlayerAvatar;//[Offset: 0x400, Size: 0x8] 0x715d0a1000
	float TopPaddingAnimInterp;//[Offset: 0x408, Size: 0x4] 0x715d0a1080
	float TopPaddingExpanded;//[Offset: 0x40c, Size: 0x4] 0x715d07f800
	void SetButtonFocus();// 0x3d37184 0x715d0698c0
	void ResetWidget(bool bCurrentPlayer);// 0x45c6aa0 0x715d0699a0
	void CloseOpenPanels();// 0x45c6aa0 0x715d069a80
	void AnimateOut(bool bCurrentPlayer);// 0x45c6aa0 0x715d069b60
	void AnimateIn(bool bCurrentPlayer);// 0x45c6aa0 0x715d069c40

--------------------------------
Class: PlayerConfig // 715da92380
	FName TextColor;//[Offset: 0x0, Size: 0x8] 0x715da86e80
	FName BackgroundColor;//[Offset: 0x8, Size: 0x8] 0x715da86f00
	FName GradientColor;//[Offset: 0x10, Size: 0x8] 0x715da86f80
	FName OnlineTextColor;//[Offset: 0x18, Size: 0x8] 0x715da87000
	bool bBackgroundLinesVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715da87080

--------------------------------
Class: ButtonConfig // 715da92440
	FName BaseColor;//[Offset: 0x0, Size: 0x8] 0x715da87100
	FName AccentColor;//[Offset: 0x8, Size: 0x8] 0x715da87180

--------------------------------
Class: Spacer.Widget.Visual.Object // 71a49bdd00
	Vector2D Size;//[Offset: 0x108, Size: 0x8] 0x715caae980
	void SetSize(Vector2D InSize);// 0x55da39c 0x715ca8ecc0

--------------------------------
Class: PlayerAvatarWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3b000
	PlayerAvatarViewModel* PlayerAvatarViewModel;//[Offset: 0x258, Size: 0x8] 0x715cd6ec80

--------------------------------
Class: FriendsListScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a3080
	FriendsListViewModel* FriendsListScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0a1e80
	SizeBox* MainSizeBox;//[Offset: 0x2e8, Size: 0x8] 0x715d0a1f00
	PanelWidget* CurrentPlayerPanel;//[Offset: 0x2f0, Size: 0x8] 0x715d0a1f80
	CanvasPanel* AddSearchPanel;//[Offset: 0x2f8, Size: 0x8] 0x715d0a2000
	Widget* AddFriendButton;//[Offset: 0x300, Size: 0x8] 0x715d0a2080
	PanelWidget* ListPanel;//[Offset: 0x308, Size: 0x8] 0x715d0a2100
	class FriendsListHeaderWidget* FriendsListHeaderWidgetBlueprint;//[Offset: 0x310, Size: 0x8] 0x715cf9e520
	class FriendsListItemWidget* FriendsListItemWidgetBlueprint;//[Offset: 0x318, Size: 0x8] 0x715cf9e5c0
	SDWidgetPoolingManager* WidgetPoolingManager;//[Offset: 0x320, Size: 0x8] 0x715d0a0080
	FriendsListItemWidget* CurrentPlayerWidget;//[Offset: 0x3c8, Size: 0x8] 0x715d0a0100
	void SendFriendsListOpenEvent();// 0x3d378cc 0x715d069540
	void OnClosePanel();// 0x45c6aa0 0x715d069620
	Widget* GetInitialGamepadFocusedWidget_Implementation();// 0x3d378f4 0x715d069700
	void BackPressed();// 0x3d378e0 0x715d0697e0

--------------------------------
Class: FriendsListViewModel.SDViewModel.Object // 71a48a2e00
	<int,FriendsListHeaderViewModel*> FriendsListHeaderViewModels;//[Offset: 0x48, Size: 0x50] 0x715cecb2c0
	<FString,FriendsListItemViewModel*> FriendsListItemViewModelMap;//[Offset: 0x98, Size: 0x50] 0x715cecb380
	void CloseFriendsListPanel();// 0x3d37eb0 0x715d069380
	void AddFriend();// 0x3d37e9c 0x715d069460

--------------------------------
Class: FrontendBadgeWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a1f00
	FrontendBadgeViewModel* FrontendBadgeViewModel;//[Offset: 0x290, Size: 0x8] 0x715d0a3800

--------------------------------
Class: FrontendCameraSettings.DeveloperSettings.Object // 71a48a1c80
	StaticCameraFrame* ImageCamera;//[Offset: 0x38, Size: 0x28] 0x715d0a3400
	StaticCameraFrame* FallbackCamera;//[Offset: 0x60, Size: 0x28] 0x715d0a3480
	LetterboxSubRegion CharacterDetailsPreviewSubRegion;//[Offset: 0x88, Size: 0x24] 0x715d0a3500
	LetterboxSubRegion BattlePassPreviewSubRegion;//[Offset: 0xac, Size: 0x24] 0x715d0a3580
	LetterboxSubRegion EntitlementStandalonePreviewSubRegion;//[Offset: 0xd0, Size: 0x24] 0x715d0a3600
	LetterboxSubRegion HomeScreenSubRegion;//[Offset: 0xf4, Size: 0x24] 0x715d0a3680
	LetterboxSubRegion HomeScreenSubRegionGamepad;//[Offset: 0x118, Size: 0x24] 0x715d0a3700
	CameraTransitionRule[] TransitionRules;//[Offset: 0x140, Size: 0x10] 0x715cf9fb00

--------------------------------
Class: LetterboxSubRegion // 715ce7df00
	Box2D ScreenBox;//[Offset: 0x0, Size: 0x14] 0x715ceb3f80
	float LeftPadding;//[Offset: 0x14, Size: 0x4] 0x715ceb4000
	float TopPadding;//[Offset: 0x18, Size: 0x4] 0x715ceb4080
	float RightPadding;//[Offset: 0x1c, Size: 0x4] 0x715ceb4100
	float BottomPadding;//[Offset: 0x20, Size: 0x4] 0x715ceb4180

--------------------------------
Class: CameraTransitionRule // 715da922c0
	byte FrontendScene;//[Offset: 0x0, Size: 0x1] 0x715da86c80
	GameplayTagContainer PreviousTags;//[Offset: 0x8, Size: 0x20] 0x715da86d00
	GameplayTagContainer NextTags;//[Offset: 0x28, Size: 0x20] 0x715da86d80
	CurveFloat* TransitionCurve;//[Offset: 0x48, Size: 0x28] 0x715da86e00

--------------------------------
Class: GameplayTagsManager.Object // 71a49c8800
	GameplayTagSource[] TagSources;//[Offset: 0xc0, Size: 0x10] 0x715ca78080
	DataTable*[] GameplayTagTables;//[Offset: 0x1b0, Size: 0x10] 0x715ca78120

--------------------------------
Class: GameplayTagSource // 715dadafc0
	FName SourceName;//[Offset: 0x0, Size: 0x8] 0x715db03480
	enum SourceType;//[Offset: 0x8, Size: 0x1] 0x715dae6460
	GameplayTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8] 0x715db03580
	RestrictedGameplayTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8] 0x715db03600

--------------------------------
Class: GameplayTagsList.Object // 71a49c8580
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x715cad5800
	GameplayTagTableRow[] GameplayTagList;//[Offset: 0x38, Size: 0x10] 0x715ca77fe0

--------------------------------
Class: GameplayTagTableRow.TableRowBase // 715dadaf00
	FName Tag;//[Offset: 0x8, Size: 0x8] 0x715db03380
	FString DevComment;//[Offset: 0x10, Size: 0x10] 0x715db03400

--------------------------------
Class: RestrictedGameplayTagsList.Object // 71a49c8300
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x715cad5700
	RestrictedGameplayTagTableRow[] RestrictedGameplayTagList;//[Offset: 0x38, Size: 0x10] 0x715ca77f40

--------------------------------
Class: RestrictedGameplayTagTableRow.GameplayTagTableRow.TableRowBase // 715dadae40
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715db03300

--------------------------------
Class: GameplayTagsSettings.GameplayTagsList.Object // 71a49c8080
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cad7280
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x715cad7300
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x715cad7380
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10] 0x715cad5300
	GameplayTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10] 0x715ca77c20
	SoftObjectPath[] GameplayTagTableList;//[Offset: 0x70, Size: 0x10] 0x715ca77cc0
	GameplayTagRedirect[] GameplayTagRedirects;//[Offset: 0x80, Size: 0x10] 0x715ca77d60
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10] 0x715ca77e00
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4] 0x715cad5580
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4] 0x715cad5600
	RestrictedConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10] 0x715ca77ea0

--------------------------------
Class: GameplayTagCategoryRemap // 715dadde40
	FString BaseCategory;//[Offset: 0x0, Size: 0x10] 0x715db05200
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10] 0x715dae6320

--------------------------------
Class: GameplayTagRedirect // 715daddd80
	FName OldTagName;//[Offset: 0x0, Size: 0x8] 0x715db05100
	FName NewTagName;//[Offset: 0x8, Size: 0x8] 0x715db05180

--------------------------------
Class: RestrictedConfigInfo // 715dadad80
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10] 0x715db03200
	FString[] Owners;//[Offset: 0x10, Size: 0x10] 0x715dae63c0

--------------------------------
Class: FrontendCommonScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a1a00
	FrontendCommonViewModel* FrontendCommonScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0a5100
	UserWidget* FrontendContainer;//[Offset: 0x2e8, Size: 0x8] 0x715d0a5180
	FrontendNavBarWidget* NavBarWidget;//[Offset: 0x2f0, Size: 0x8] 0x715d0a5200
	FrontendTopBarWidget* TopBarWidget;//[Offset: 0x2f8, Size: 0x8] 0x715d0a5280
	VoiceChatControlsWidget* VoiceChatControlsWidget;//[Offset: 0x300, Size: 0x8] 0x715d0a3200
	SlateBrush DefaultBackground;//[Offset: 0x308, Size: 0x88] 0x715d0a3280
	void OnNavBarAnimating(bool bIsAnimating, bool bIsOpen);// 0x3d39204 0x715d06e6a0

--------------------------------
Class: FrontendCommonViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48a1780
	FrontendNavBarViewModel* NavBarVM;//[Offset: 0x70, Size: 0x8] 0x715d0a4d80
	FrontendTopBarViewModel* TopBarVM;//[Offset: 0x78, Size: 0x8] 0x715d0a4e00
	VoiceChatControlsViewModel* VoiceChatControlsViewModel;//[Offset: 0x80, Size: 0x8] 0x715d0a4e80
	BoolBindable Show2DBackground;//[Offset: 0x88, Size: 0x70] 0x715d0a4f00
	BrushBindable Background;//[Offset: 0xf8, Size: 0x178] 0x715d0a4f80
	void SetDefaultBackgroundBrush(out const SlateBrush DefaultBackground);// 0x3d396d0 0x715d06e4e0
	FrontendNavBarViewModel* GetNavBarViewModel();// 0x3d396b4 0x715d06e5c0

--------------------------------
Class: FrontendNavBarViewModel.SDViewModel.Object // 71a48a9200
	enum CurrentlyDisplayingState;//[Offset: 0x44, Size: 0x1] 0x7148cdc9a0
	delegate OnCurrentlyDisplayingStateChanged;//[Offset: 0x48, Size: 0x10] 0x715d7de680
	delegate OnNavBarVisibilityChanged;//[Offset: 0x58, Size: 0x10] 0x715d7de700
	NavBarButtonViewModel*[] NavButtonViewModels;//[Offset: 0x78, Size: 0x10] 0x7148cdca40
	BoolBindable ShowComingSoonButtons;//[Offset: 0x98, Size: 0x70] 0x715d7dc700
	void OnPreviousTabButtonPressed();// 0x3d41de0 0x715d7ce400
	void OnNextTabButtonPressed();// 0x3d41df4 0x715d7ce5c0
	void OnNavButtonPressedInternal(NavBarButtonViewModel* PressedButton);// 0x3d41d3c 0x715d7ce6a0
	void NavBarVisibilityChangeDelegate__DelegateSignature(bool bShow);// 0x45c6aa0 0x715d7cadc0
	void DisplayStateChangedDelegate__DelegateSignature();// 0x45c6aa0 0x715d7caea0

--------------------------------
Class: NavBarButtonViewModel.SDViewModel.Object // 71a48c3080
	NotificationBadgeViewModel* PipNotificationVM;//[Offset: 0x68, Size: 0x8] 0x715d0d2980
	NotificationBadgeViewModel* FTUENotificationVM;//[Offset: 0x70, Size: 0x8] 0x715d0d2a00
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x715d0d2a80
	void OnButtonPressed();// 0x3d5f578 0x715d0c2a80

--------------------------------
Class: FrontendTopBarViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48a8080
	delegate OnTopBarCurrencyVisibilityChanged;//[Offset: 0x68, Size: 0x10] 0x715d7de200
	TopBarCurrencyDisplayViewModel* CreditDisplayViewModel;//[Offset: 0xd0, Size: 0x8] 0x715d7de280
	TopBarCurrencyDisplayViewModel* CrystalDisplayViewModel;//[Offset: 0xd8, Size: 0x8] 0x715d7de300
	TopBarCurrencyDisplayViewModel* HunterTokensDisplayViewModel;//[Offset: 0xe0, Size: 0x8] 0x715d7de380
	TopBarCurrencyDisplayViewModel* HunterModuleTokensDisplayViewModel;//[Offset: 0xe8, Size: 0x8] 0x715d7de400
	TopBarCurrencyDisplayViewModel* ModuleTokenDisplayViewModel;//[Offset: 0xf0, Size: 0x8] 0x715d7de480
	VoiceChatButtonsViewModel* VoiceChatButtonsViewModel;//[Offset: 0xf8, Size: 0x8] 0x715d7de500
	void TopBarCurrencyVisibilityDelegate__DelegateSignature(bool bShow);// 0x45c6aa0 0x715d7ce240
	void OnLaunchCogMenu();// 0x3d432fc 0x715d7ce320

--------------------------------
Class: VoiceChatButtonsViewModel.SDViewModel.Object // 71a4b61780
	VisibilityBindable Visibility;//[Offset: 0x60, Size: 0x70] 0x715cd95700
	VisibilityBindable OpenMicVisibility;//[Offset: 0xd0, Size: 0x70] 0x715cd95780
	VisibilityBindable OpenMicMutedVisibility;//[Offset: 0x140, Size: 0x70] 0x715cd95800
	VisibilityBindable PushToTalkVisibility;//[Offset: 0x1b0, Size: 0x70] 0x715cd95880
	VisibilityBindable AudioConnectedVisibility;//[Offset: 0x220, Size: 0x70] 0x715cd95900
	VisibilityBindable AudioDisconnectedVisibility;//[Offset: 0x290, Size: 0x70] 0x715cd95980
	BoolBindable IsControlsEnabled;//[Offset: 0x300, Size: 0x70] 0x715cd95a00
	void ToggleControlPanel();// 0x69c7904 0x715cd5bf40
	void OnToggleMute();// 0x69c7940 0x715cd5c020
	void OnStopMute();// 0x69c7918 0x715cd5c100
	void OnStartMute();// 0x69c792c 0x715cd5c1e0

--------------------------------
Class: VoiceChatControlsViewModel.SDViewModel.Object // 71a4b60880
	delegate OnPartyChannelJoinEnabledChanged;//[Offset: 0x48, Size: 0x10] 0x715cd96900
	delegate OnTeamChannelJoinEnabledChanged;//[Offset: 0x58, Size: 0x10] 0x715cd96980
	delegate OnLeaveChannelEnabledChanged;//[Offset: 0x68, Size: 0x10] 0x715cd96a00
	delegate OnUsingPushToTalkChanged;//[Offset: 0x78, Size: 0x10] 0x715cd96a80
	delegate OnUsingOpenMicChanged;//[Offset: 0x88, Size: 0x10] 0x715cd96b00
	VisibilityBindable Visibility;//[Offset: 0x98, Size: 0x70] 0x715cd96b80
	Int32Bindable PanelSwitcher;//[Offset: 0x108, Size: 0x70] 0x715cd96c00
	BoolBindable PartyChannelAvailable;//[Offset: 0x178, Size: 0x70] 0x715cd96c80
	BoolBindable TeamChannelAvailable;//[Offset: 0x1e8, Size: 0x70] 0x715cd96d00
	BoolBindable IsInOrConnectingToPartyChannel;//[Offset: 0x258, Size: 0x70] 0x715cd96d80
	BoolBindable IsInOrConnectingToTeamChannel;//[Offset: 0x2c8, Size: 0x70] 0x715cd96e00
	BoolBindable bShowNoMicrophoneDetected;//[Offset: 0x338, Size: 0x70] 0x715cd96e80
	VoiceChatChannelListViewModel* PartyParticipantsViewModel;//[Offset: 0x3a8, Size: 0x8] 0x715cd96f00
	VoiceChatChannelListViewModel* TeamParticipantsViewModel;//[Offset: 0x3b0, Size: 0x8] 0x715cd96f80
	void ShowPanel();// 0x69c8ffc 0x715cd5b300
	void OnExitPressed();// 0x69c8fd4 0x715cd5b3e0
	void LeaveChannels();// 0x69c9038 0x715cd5b4c0
	void JoinTeamChannel();// 0x69c904c 0x715cd5b5a0
	void JoinPartyChannel();// 0x69c9060 0x715cd5b680
	void HidePanel();// 0x69c8fe8 0x715cd5b760
	void EnablePushToTalk();// 0x69c9024 0x715cd5b840
	void EnableOpenMic();// 0x69c9010 0x715cd5b920
	void Connect();// 0x69c9074 0x715cd5ba00

--------------------------------
Class: VoiceChatChannelListViewModel.SDViewModel.Object // 71a4b61280
	VisibilityBindable NoParticipantsVisibility;//[Offset: 0x58, Size: 0x70] 0x715cd95480
	VoiceChatChannelParticipantViewModel* LocalParticipant;//[Offset: 0xc8, Size: 0x8] 0x715cd95500
	VoiceChatChannelParticipantViewModel*[] OtherParticipants;//[Offset: 0xd0, Size: 0x10] 0x715cc8fb00

--------------------------------
Class: VoiceChatChannelParticipantViewModel.SDViewModel.Object // 71a4b60d80
	VisibilityBindable Visibility;//[Offset: 0x60, Size: 0x70] 0x715cd97100
	TextBindable ParticipantName;//[Offset: 0xd0, Size: 0x98] 0x715cd97180
	VisibilityBindable MutedVisibility;//[Offset: 0x168, Size: 0x70] 0x715cd97200
	FloatBindable VolumeValue;//[Offset: 0x1d8, Size: 0x70] 0x715cd97280
	TextBindable VolumeText;//[Offset: 0x248, Size: 0x98] 0x715cd97300
	void ToggleMute();// 0x69c8a0c 0x715cd5bbc0
	void SetVolume(float Volume);// 0x69c8968 0x715cd5bca0

--------------------------------
Class: FrontendNavBarWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a8f80
	FrontendNavBarViewModel* FrontendNavBarViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0a7b00
	NavBarButtonWidget* HomeButton;//[Offset: 0x260, Size: 0x8] 0x715d0a7b80
	NavBarButtonWidget* CharacterRosterButton;//[Offset: 0x268, Size: 0x8] 0x715d0a7c00
	NavBarButtonWidget* EventsButton;//[Offset: 0x270, Size: 0x8] 0x715d0a7c80
	NavBarButtonWidget* SocialButton;//[Offset: 0x278, Size: 0x8] 0x715d0a7d00
	NavBarButtonWidget* NewsButton;//[Offset: 0x280, Size: 0x8] 0x715d0a7d80
	NavBarButtonWidget* ShopButton;//[Offset: 0x288, Size: 0x8] 0x715d0a7e00

--------------------------------
Class: NavBarButtonWidget.SDUserWidgetNavigable.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c2e00
	Object* MainImageBrushResource;//[Offset: 0x258, Size: 0x8] 0x715d0d2400
	RetainerBox* MaterialRetainerBox;//[Offset: 0x260, Size: 0x8] 0x715d0d2480
	NavBarButtonViewModel* NavBarButtonViewModel;//[Offset: 0x268, Size: 0x8] 0x715d0d2500
	FName MaterialBlendAmountValueName;//[Offset: 0x270, Size: 0x8] 0x715d0d2580
	MaterialInstanceDynamic* RetainerBoxMaterial;//[Offset: 0x278, Size: 0x8] 0x715d0d2600
	NotificationBadgeWidget* PipNotification;//[Offset: 0x280, Size: 0x8] 0x715d0d2680
	NotificationBadgeWidget* FTUENotification;//[Offset: 0x288, Size: 0x8] 0x715d0d2700
	BoolBindable ShowRewardPip;//[Offset: 0x290, Size: 0x70] 0x715d0d2780
	void OnActiveStatusChanged(bool bActive);// 0x45c6aa0 0x715d0c28c0
	Widget* GetRoot(UserWidget* Target);// 0x3d5fa3c 0x715d0c29a0

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49b6000
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x715caa8e80
	bool RenderWithLocalTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x715caa8f00
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x715caa8f80
	int Phase;//[Offset: 0x11c, Size: 0x4] 0x715caa9000
	int PhaseCount;//[Offset: 0x120, Size: 0x4] 0x715caa9080
	MaterialInterface* EffectMaterial;//[Offset: 0x128, Size: 0x8] 0x715caa9100
	FName TextureParameter;//[Offset: 0x130, Size: 0x8] 0x715caa9180
	void SetTextureParameter(FName TextureParameter);// 0x55cc5a8 0x715ca890e0
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x55cc738 0x715ca891c0
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x55cc64c 0x715ca892a0
	void RequestRender();// 0x55cc724 0x715ca89380
	MaterialInstanceDynamic* GetEffectMaterial();// 0x55cc6f0 0x715ca89460

--------------------------------
Class: FrontendTopBarWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a7e00
	TopBarCurrencyDisplayWidget* CreditDisplay;//[Offset: 0x258, Size: 0x8] 0x715d0a9100
	TopBarCurrencyDisplayWidget* CrystalDisplay;//[Offset: 0x260, Size: 0x8] 0x715d0a9180
	TopBarCurrencyDisplayWidget* HunterTokenDisplay;//[Offset: 0x268, Size: 0x8] 0x715d0a9200
	TopBarCurrencyDisplayWidget* HunterCurrencyDisplay;//[Offset: 0x270, Size: 0x8] 0x715d0a9280
	TopBarCurrencyDisplayWidget* ModuleTokensDisplay;//[Offset: 0x278, Size: 0x8] 0x715d0a9300
	Widget* HunterCurrencyDisplayHolder;//[Offset: 0x280, Size: 0x8] 0x715d0a9380
	Widget* ModuleTokensDisplayHolder;//[Offset: 0x288, Size: 0x8] 0x715d0a9400
	VoiceChatButtonsWidget* VoiceChatButtons;//[Offset: 0x290, Size: 0x8] 0x715d0a9480
	FrontendTopBarViewModel* FrontendTopBarViewModel;//[Offset: 0x298, Size: 0x8] 0x715d0a7400
	void OnCogMenuShownChanged(bool bIsShown);// 0x45c6aa0 0x715d06f740

--------------------------------
Class: VoiceChatButtonsWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b61500
	VoiceChatButtonsViewModel* VoiceChatButtonsViewModel;//[Offset: 0x258, Size: 0x8] 0x715cd95600
	void OnVoiceControlsEnabled(bool bIsControlsEnabled);// 0x45c6aa0 0x715cd5be60

--------------------------------
Class: VoiceChatControlsWidget.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b60600
	VoiceChatChannelListWidget* PartyParticipantsWidget;//[Offset: 0x2e0, Size: 0x8] 0x715cd96780
	VoiceChatChannelListWidget* TeamParticipantsWidget;//[Offset: 0x2e8, Size: 0x8] 0x715cd96800
	VoiceChatControlsViewModel* VoiceChatControlsViewModel;//[Offset: 0x2f0, Size: 0x8] 0x715cd96880
	void ResumeMatch();// 0x69c9680 0x715cd5b220

--------------------------------
Class: VoiceChatChannelListWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b61000
	VoiceChatChannelListViewModel* VoiceChatChannelListViewModel;//[Offset: 0x258, Size: 0x8] 0x715cd95300
	VoiceChatChannelParticipantWidget* LocalParticipant;//[Offset: 0x260, Size: 0x8] 0x715cd95380
	SDVerticalBoxWrapper* OtherParticipants;//[Offset: 0x268, Size: 0x8] 0x715cd95400
	void OnParticipantsChanged();// 0x69c8574 0x715cd5bd80

--------------------------------
Class: VoiceChatChannelParticipantWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b60b00
	VoiceChatChannelParticipantViewModel* VoiceChatChannelParticipantViewModel;//[Offset: 0x288, Size: 0x8] 0x715cd97000
	void OnMuteChanged(bool bIsMuted);// 0x45c6aa0 0x715cd5bae0

--------------------------------
Class: FrontendGameMode.GameModeBase.Info.Actor.Object // 71a48a1500

--------------------------------
Class: FrontendGameState.GameStateBase.Info.Actor.Object // 71a48a1280

--------------------------------
Class: HuntersCommonHUD.HUD.Actor.Object // 71a48a0b00
	HuntersUIDataAssetManager* DataAssetManager;//[Offset: 0x310, Size: 0x8] 0x715d0a4500
	UserWidget*[] MatchPlayStateWidgets;//[Offset: 0x318, Size: 0x10] 0x715cf9f880
	bool ShouldUseRevisedEscortHUD();// 0x69a6380 0x715d06db40
	void SetHideHUD(bool bHideHud);// 0x45c6aa0 0x715d06dc20

--------------------------------
Class: HuntersUIDataAssetManager.DataAsset.Object // 71a4b3d080
	DataAsset*[] UIDataAssets;//[Offset: 0x30, Size: 0x10] 0x715cc8e7a0

--------------------------------
Class: FrontEndHUD.HuntersCommonHUD.HUD.Actor.Object // 71a48a0d80

--------------------------------
Class: FrontendMatchResultsAccoladesScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a0880
	FrontendMatchResultsAccoladesViewModel* FrontendMatchResultsAccoladesScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0a4480

--------------------------------
Class: FrontendMatchResultsAccoladesViewModel.FrontendMatchResultsBaseViewModel.SDViewModel.Object // 71a48a0600
	float AnnouncersSignoffWaitTime;//[Offset: 0x160, Size: 0x4] 0x715d7ddb80
	delegate TriggerRefreshAccolades;//[Offset: 0x168, Size: 0x10] 0x715d7ddc00
	FrontendMatchResultAccolade[] PlayerAccolades;//[Offset: 0x178, Size: 0x10] 0x7148cdc900
	void RefreshAccolades__DelegateSignature();// 0x45c6aa0 0x715d7cdec0
	void AdvanceToNext();// 0x3d3a3c0 0x715d7cdfa0

--------------------------------
Class: FrontendMatchResultsBaseViewModel.SDViewModel.Object // 71a48a0380
	BoolBindable PlayAgainEnabled;//[Offset: 0x48, Size: 0x70] 0x715d7de100
	TextBindable PlayAgainHeaderText;//[Offset: 0xb8, Size: 0x98] 0x715d7de180
	void OnPlayAgainButtonPressed();// 0x3d3a878 0x715d7ce080
	void OnExitButtonPressed();// 0x3d3a88c 0x715d7ce160

--------------------------------
Class: FrontendMatchResultAccolade // 714906d9c0
	FText PlayerName;//[Offset: 0x0, Size: 0x18] 0x715d7ddc80
	SlateBrush AvatarImage;//[Offset: 0x18, Size: 0x88] 0x715d7ddd00
	Texture2D* HunterImage;//[Offset: 0xa0, Size: 0x8] 0x715d7ddd80
	bool bIsFriendlySquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1] 0x715d7dde00
	FText AccoladeTitle;//[Offset: 0xb0, Size: 0x18] 0x715d7dde80
	FText Value;//[Offset: 0xc8, Size: 0x18] 0x715d7ddf00
	FText AccoladeDescription;//[Offset: 0xe0, Size: 0x18] 0x715d7ddf80
	int PlayerLevel;//[Offset: 0xf8, Size: 0x4] 0x715d7de000

--------------------------------
Class: FrontendMatchResultsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a0100
	FrontendMatchResultsViewModel* FrontendMatchResultsScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0a4400

--------------------------------
Class: FrontendMatchResultsViewModel.SDViewModel.Object // 71a48a9e80
	BrushBindable MapBackgroundImage;//[Offset: 0x60, Size: 0x178] 0x715d0a6180

--------------------------------
Class: FrontendMatchResultsStatsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48aa380
	FrontendMatchResultsStatsViewModel* FrontendMatchResultsStatsScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0a4300
	FrontendBadgeListWidget* BadgeList;//[Offset: 0x2e8, Size: 0x8] 0x715d0a4380

--------------------------------
Class: FrontendMatchResultsStatsViewModel.FrontendMatchResultsBaseViewModel.SDViewModel.Object // 71a48aa100
	FrontendBadgeListViewModel* BadgeListVM;//[Offset: 0x160, Size: 0x8] 0x715d0a6200
	FrontendMatchResultStats[] PlayerStats;//[Offset: 0x170, Size: 0x10] 0x715cf9f7e0
	TextBindable PlayerName;//[Offset: 0x180, Size: 0x98] 0x715d0a6300
	bool bHasBadges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x715d0a4280
	void AdvanceToNext();// 0x3d3b018 0x715d06da60

--------------------------------
Class: FrontendMatchResultStats // 715da92200
	SlateBrush StatIcon;//[Offset: 0x0, Size: 0x88] 0x715da86a80
	FText Title;//[Offset: 0x88, Size: 0x18] 0x715da86b00
	FText Value;//[Offset: 0xa0, Size: 0x18] 0x715da86b80
	bool bCanUseMedal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x715da86c00

--------------------------------
Class: FrontendMatchResultsWinningsItemViewModel.SDViewModel.Object // 71a48a9c00
	BoolBindable ShowItem;//[Offset: 0x48, Size: 0x70] 0x715d0a5c80
	TextBindable RewardName;//[Offset: 0xb8, Size: 0x98] 0x715d0a5d00
	BoolBindable ShowSoftCurrency;//[Offset: 0x150, Size: 0x70] 0x715d0a5d80
	BoolBindable ShowXP;//[Offset: 0x1c0, Size: 0x70] 0x715d0a5e00
	BoolBindable ShowBPXP;//[Offset: 0x230, Size: 0x70] 0x715d0a5e80
	BoolBindable ShowPlayerXP;//[Offset: 0x2a0, Size: 0x70] 0x715d0a5f00
	CurrencyDisplayViewModel* SoftCurrencyAwardViewModel;//[Offset: 0x310, Size: 0x8] 0x715d0a5f80
	CurrencyDisplayViewModel* XPAwardViewModel;//[Offset: 0x318, Size: 0x8] 0x715d0a6000
	CurrencyDisplayViewModel* BPXPAwardViewModel;//[Offset: 0x320, Size: 0x8] 0x715d0a6080
	CurrencyDisplayViewModel* PlayerXPAwardViewModel;//[Offset: 0x328, Size: 0x8] 0x715d0a6100

--------------------------------
Class: FrontendMatchResultsWinningsItemWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a9980
	FrontendMatchResultsWinningsItemViewModel* FrontendMatchResultsWinningsItemViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0a5a00
	CurrencyDisplayWidget* XPDisplay;//[Offset: 0x260, Size: 0x8] 0x715d0a5a80
	CurrencyDisplayWidget* SoftCurrencyDisplay;//[Offset: 0x268, Size: 0x8] 0x715d0a5b00
	CurrencyDisplayWidget* BPXPDisplay;//[Offset: 0x270, Size: 0x8] 0x715d0a5b80
	CurrencyDisplayWidget* PlayerXPDisplay;//[Offset: 0x278, Size: 0x8] 0x715d0a5c00

--------------------------------
Class: FrontendMatchResultsWinningsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a9700
	float InitialDelaySeconds;//[Offset: 0x2e0, Size: 0x4] 0x715d0a6d80
	float ItemFadeInDelaySeconds;//[Offset: 0x2e4, Size: 0x4] 0x715d0a6e00
	float ItemDurationSeconds;//[Offset: 0x2e8, Size: 0x4] 0x715d0a6e80
	float NextItemDelaySeconds;//[Offset: 0x2ec, Size: 0x4] 0x715d0a6f00
	float FinalDelaySeconds;//[Offset: 0x2f0, Size: 0x4] 0x715d0a6f80
	float FinalTallyDurationSeconds;//[Offset: 0x2f4, Size: 0x4] 0x715d0a7000
	float BPXPTallyDurationSeconds;//[Offset: 0x2f8, Size: 0x4] 0x715d0a7080
	float PlayerXPTallyDurationSeconds;//[Offset: 0x2fc, Size: 0x4] 0x715d0a7100
	float XPTallyDurationSeconds;//[Offset: 0x300, Size: 0x4] 0x715d0a7180
	float LevelUpDurationSeconds;//[Offset: 0x304, Size: 0x4] 0x715d0a7200
	float HunterLevelUpDurationSeconds;//[Offset: 0x308, Size: 0x4] 0x715d0a7280
	float GrantRewardTallyDurationSeconds;//[Offset: 0x30c, Size: 0x4] 0x715d0a7300
	CurveFloat* XPCountUpCurve;//[Offset: 0x310, Size: 0x8] 0x715d0a7380
	CurveFloat* CountUpCurve;//[Offset: 0x318, Size: 0x8] 0x715d0a5300
	FrontendMatchResultsWinningsViewModel* FrontendMatchResultsWinningsScreenVM;//[Offset: 0x320, Size: 0x8] 0x715d0a5380
	TopBarCurrencyDisplayWidget* FakeWalletSoftCurrency;//[Offset: 0x328, Size: 0x8] 0x715d0a5400
	TopBarCurrencyDisplayWidget* FakeWalletHardCurrency;//[Offset: 0x330, Size: 0x8] 0x715d0a5480
	SDVerticalBoxWrapper* RewardsContainer;//[Offset: 0x338, Size: 0x8] 0x715d0a5500
	CurrencyDisplayWidget* TotalSoftCurrencyAward;//[Offset: 0x340, Size: 0x8] 0x715d0a5580
	CurrencyDisplayWidget* TotalXPAward;//[Offset: 0x348, Size: 0x8] 0x715d0a5600
	CurrencyDisplayWidget* TotalBPXPAward;//[Offset: 0x350, Size: 0x8] 0x715d0a5680
	CurrencyDisplayWidget* TotalPlayerXPAward;//[Offset: 0x358, Size: 0x8] 0x715d0a5700
	StandardEntitlementWithBackgroundWidget* NextRewardWidget;//[Offset: 0x360, Size: 0x8] 0x715d0a5780
	StandardEntitlementWithBackgroundWidget* BigRewardWidget;//[Offset: 0x368, Size: 0x8] 0x715d0a5800
	void UpdateCharacter();// 0x45c6aa0 0x715d06d0c0
	void TallyStarted(int TallyIndex);// 0x45c6aa0 0x715d06d1a0
	void TallyFinished(int TallyIndex);// 0x45c6aa0 0x715d06d280
	void StartRewardsSequence();// 0x45c6aa0 0x715d06d360
	void ShowTopBarGlow(bool bShow);// 0x45c6aa0 0x715d06d440
	void PlayerAndCharacterLevelUp();// 0x45c6aa0 0x715d06d520
	void LevelUp();// 0x45c6aa0 0x715d06d600
	void HideSkipButton();// 0x45c6aa0 0x715d06d6e0
	void FinalTallyStarted();// 0x45c6aa0 0x715d06d7c0
	void FinalTallyFinished();// 0x45c6aa0 0x715d06d8a0
	void CharacterLevelUp();// 0x45c6aa0 0x715d06d980

--------------------------------
Class: FrontendMatchResultsWinningsViewModel.FrontendMatchResultsBaseViewModel.SDViewModel.Object // 71a48a9480
	BoolBindable ShowSoftCurrency;//[Offset: 0x208, Size: 0x70] 0x715d0a7e80
	BoolBindable ShowHardCurrency;//[Offset: 0x278, Size: 0x70] 0x715d0a7f00
	BoolBindable ShowXP;//[Offset: 0x2e8, Size: 0x70] 0x715d0a7f80
	BoolBindable ShowBPXP;//[Offset: 0x358, Size: 0x70] 0x715d0a8000
	BoolBindable ShowPlayerXP;//[Offset: 0x3c8, Size: 0x70] 0x715d0a8080
	bool FirstXPGain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1] 0x715d0a8100
	TextBindable FameCountText;//[Offset: 0x440, Size: 0x98] 0x715d0a8180
	TextBindable HunterLevelText;//[Offset: 0x4d8, Size: 0x98] 0x715d0a8200
	TextBindable BattlePassXPCountText;//[Offset: 0x570, Size: 0x98] 0x715d0a8280
	TextBindable PlayerXPCountText;//[Offset: 0x608, Size: 0x98] 0x715d0a8300
	bool bShowProgression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1] 0x715d0a8380
	FrontendMatchResultCharacter DisplayCharacter;//[Offset: 0x6a8, Size: 0xb8] 0x715d0a8400
	TextBindable RewardQuantityText;//[Offset: 0x760, Size: 0x98] 0x715d0a6380
	BoolBindable ShowRewardQuantityText;//[Offset: 0x7f8, Size: 0x70] 0x715d0a6400
	BoolBindable DisplayMaxHunterLevel;//[Offset: 0x868, Size: 0x70] 0x715d0a6480
	BoolBindable DisplayPlayerXPGrant;//[Offset: 0x8d8, Size: 0x70] 0x715d0a6500
	TextBindable PlayerXPGrantQuantityText;//[Offset: 0x948, Size: 0x98] 0x715d0a6580
	CurveFloat* XPCountUpCurve;//[Offset: 0xa20, Size: 0x8] 0x715d0a6600
	CurveFloat* BPXPCountUpCurve;//[Offset: 0xa28, Size: 0x8] 0x715d0a6680
	CurveFloat* PlayerXPCountUpCurve;//[Offset: 0xa30, Size: 0x8] 0x715d0a6700
	CurveFloat* CountUpCurve;//[Offset: 0xa38, Size: 0x8] 0x715d0a6780
	TopBarCurrencyDisplayViewModel* FakeWalletSoftCurrencyViewModel;//[Offset: 0xaa8, Size: 0x8] 0x715d0a6800
	TopBarCurrencyDisplayViewModel* FakeWalletHardCurrencyViewModel;//[Offset: 0xab0, Size: 0x8] 0x715d0a6880
	FrontendMatchResultsWinningsItemViewModel*[] RewardRowViewModels;//[Offset: 0xab8, Size: 0x10] 0x715d0b1460
	CurrencyDisplayViewModel* TotalSoftCurrencyAwardViewModel;//[Offset: 0xac8, Size: 0x8] 0x715d0a6980
	CurrencyDisplayViewModel* TotalXPAwardViewModel;//[Offset: 0xad0, Size: 0x8] 0x715d0a6a00
	CurrencyDisplayViewModel* TotalBattlePassXPViewModel;//[Offset: 0xad8, Size: 0x8] 0x715d0a6a80
	CurrencyDisplayViewModel* TotalPlayerXPViewModel;//[Offset: 0xae0, Size: 0x8] 0x715d0a6b00
	StandardEntitlementWithBackgroundViewModel* NextRewardViewModel;//[Offset: 0xae8, Size: 0x8] 0x715d0a6b80
	bool bSkippingBPXPTally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb03, Size: 0x1] 0x715d0a6c00
	bool bSkippingPlayerXPTally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb04, Size: 0x1] 0x715d0a6c80
	bool bSkippingXPTally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb05, Size: 0x1] 0x715d0a6d00
	void UpdateFameLevelReward();// 0x3d413d4 0x715d06fac0
	void StartXPTally();// 0x3d41348 0x715d06fba0
	void StartPlayerXPTally();// 0x3d4135c 0x715d06fc80
	void StartGrantRewardTally();// 0x3d41398 0x715d06fd60
	void StartCharacterRewardAnimation();// 0x3d413c0 0x715d06fe40
	void StartBPXPTally();// 0x3d41370 0x715d06ff20
	void StartAnimating();// 0x3d41384 0x715d06caa0
	void ShowFinalXPValues();// 0x3d41424 0x715d06cb80
	void ShowFinalValues();// 0x3d41438 0x715d06cc60
	void ShowFinalPlayerXPValues();// 0x3d413fc 0x715d06cd40
	void ShowFinalBPXPValues();// 0x3d41410 0x715d06ce20
	void ShowCharacterRewards();// 0x3d413e8 0x715d06cf00
	void EndCharacterRewardAnimation();// 0x3d413ac 0x715d06cfe0

--------------------------------
Class: FrontendNotificationScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a8d00
	FrontendNotificationViewModel* FrontendNotificationScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0a7a00
	NotificationPopupWidget* NotificationPopupWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d0a7a80

--------------------------------
Class: FrontendNotificationViewModel.SDViewModel.Object // 71a48a8a80
	NotificationPopupViewModel* NotificationPopupViewModel;//[Offset: 0x48, Size: 0x8] 0x715d0a7900
	NotificationPopupViewModel* GetNotificationPopupViewModel();// 0x3d42704 0x715d06f9e0

--------------------------------
Class: NotificationPopupViewModel.SDViewModel.Object // 71a4b3bc80
	VisibilityBindable NotificationVisible;//[Offset: 0x68, Size: 0x70] 0x715cd6ef00
	TextBindable Title;//[Offset: 0xd8, Size: 0x98] 0x715cd6ef80
	TextBindable AurebeshTitle;//[Offset: 0x170, Size: 0x98] 0x715cd6f000
	TextBindable Description;//[Offset: 0x208, Size: 0x98] 0x715cd6f080
	TextBindable Button1Text;//[Offset: 0x2a0, Size: 0x98] 0x715cd6f100
	TextBindable Button2Text;//[Offset: 0x338, Size: 0x98] 0x715cd6f180
	VisibilityBindable Button1Visible;//[Offset: 0x3d0, Size: 0x70] 0x715cd6f200
	VisibilityBindable Button2Visible;//[Offset: 0x440, Size: 0x70] 0x715cd6f280
	VisibilityBindable IconVisible;//[Offset: 0x4b0, Size: 0x70] 0x715cd6f300
	BrushBindable Icon;//[Offset: 0x520, Size: 0x178] 0x715cd6f380
	VisibilityBindable BackgroundVisible;//[Offset: 0x698, Size: 0x70] 0x715cd6f400
	BrushBindable Background;//[Offset: 0x708, Size: 0x178] 0x715cd6f480
	float DisplayTime;//[Offset: 0x880, Size: 0x4] 0x715cd6f500
	void OnButton2Pressed();// 0x69b4e98 0x715cd55c60
	void OnButton1Pressed();// 0x69b4eac 0x715cd55d40
	void NotificationDone();// 0x69b4e84 0x715cd55e20

--------------------------------
Class: NotificationPopupWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3ba00
	NotificationPopupViewModel* NotificationPopupViewModel;//[Offset: 0x258, Size: 0x8] 0x715cd6ee80
	void OnStartDisplayTimer();// 0x45c6aa0 0x715cd55aa0
	void OnEndNotification();// 0x45c6aa0 0x715cd55b80

--------------------------------
Class: FrontendOptionsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a8800
	FrontendOptionsViewModel* FrontendOptionsScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0a7880

--------------------------------
Class: FrontendOptionsViewModel.SDViewModel.Object // 71a48a8580
	void OnSettingsPressed();// 0x3d42c78 0x715d06f820
	void OnExitPressed();// 0x3d42c64 0x715d06f900

--------------------------------
Class: FrontendSettings.DeveloperSettings.Object // 71a48a8300
	FName WWISEDuckParameterName;//[Offset: 0x38, Size: 0x8] 0x715d0a7500
	SoundMix* MenuDuckMix;//[Offset: 0x40, Size: 0x28] 0x715d0a7580
	GameplayTag CrystalShopSection;//[Offset: 0x68, Size: 0x8] 0x715d0a7600
	<enum,float> TurntableAutoRotationRate;//[Offset: 0x70, Size: 0x50] 0x715cecb200
	enum[] EnableRotationForEntitlementTypes;//[Offset: 0xc0, Size: 0x10] 0x715d0b1320
	GameplayTag[] EnableRotationForEntitlementTags;//[Offset: 0xd0, Size: 0x10] 0x715d0b13c0

--------------------------------
Class: FrontendTutorialSettings.DeveloperSettings.Object // 71a48a7b80
	GameplayTag StartTutorialKey;//[Offset: 0x38, Size: 0x8] 0x715d0aa200
	GameplayTag FinishedSetUsernameKey;//[Offset: 0x40, Size: 0x8] 0x715d0aa280
	GameplayTag EnteredHomeScreenKey;//[Offset: 0x48, Size: 0x8] 0x715d0aa300
	GameplayTag EnteredRosterScreenKey;//[Offset: 0x50, Size: 0x8] 0x715d0aa380
	GameplayTag EnteredCharacterDetailsScreenKey;//[Offset: 0x58, Size: 0x8] 0x715d0aa400
	GameplayTag EnteredAbilitiesSummaryScreenKey;//[Offset: 0x60, Size: 0x8] 0x715d0aa480
	GameplayTag EnteredModuleAdminScreenKey;//[Offset: 0x68, Size: 0x8] 0x715d0aa500
	GameplayTag EnteredCosmeticsAdminScreenKey;//[Offset: 0x70, Size: 0x8] 0x715d0a8480
	GameplayTag EnteredCosmeticsSummaryScreenKey;//[Offset: 0x78, Size: 0x8] 0x715d0a8500
	GameplayTag EnteredRewardsSummaryScreenKey;//[Offset: 0x80, Size: 0x8] 0x715d0a8580
	GameplayTag EnteredCharacterSummaryScreenKey;//[Offset: 0x88, Size: 0x8] 0x715d0a8600
	GameplayTag EnteredRecruitmentOptionsScreenKey;//[Offset: 0x90, Size: 0x8] 0x715d0a8680
	GameplayTag EnteredEventsScreenKey;//[Offset: 0x98, Size: 0x8] 0x715d0a8700
	GameplayTag EnteredSocialScreenKey;//[Offset: 0xa0, Size: 0x8] 0x715d0a8780
	GameplayTag EnteredNewsScreenKey;//[Offset: 0xa8, Size: 0x8] 0x715d0a8800
	GameplayTag EnteredShopScreenKey;//[Offset: 0xb0, Size: 0x8] 0x715d0a8880
	GameplayTag EnteredModeSelectScreen;//[Offset: 0xb8, Size: 0x8] 0x715d0a8900
	GameplayTag EnteredMatchResultsWinningsScreen;//[Offset: 0xc0, Size: 0x8] 0x715d0a8980
	GameplayTag CompletedMatchResultsWinningsFlowAnimations;//[Offset: 0xc8, Size: 0x8] 0x715d0a8a00
	GameplayTag PressedPlayButton;//[Offset: 0xd0, Size: 0x8] 0x715d0a8a80
	GameplayTag SkinTutorialCharTag;//[Offset: 0xd8, Size: 0x8] 0x715d0a8b00
	GameplayTag TutorialInitialSkin;//[Offset: 0xe0, Size: 0x8] 0x715d0a8b80
	GameplayTag TutorialTargetSkin;//[Offset: 0xe8, Size: 0x8] 0x715d0a8c00
	GameplayTag FocusedTutorialEquipSkin;//[Offset: 0xf0, Size: 0x8] 0x715d0a8c80
	GameplayTag FocusedTutorialChar;//[Offset: 0xf8, Size: 0x8] 0x715d0a8d00
	GameplayTag ForceTutorialSkins;//[Offset: 0x100, Size: 0x8] 0x715d0a8d80
	GameplayTag HunterRosterTutorialScreen;//[Offset: 0x108, Size: 0x8] 0x715d0a8e00
	GameplayTag DismissedHunterRosterTutorialScreen;//[Offset: 0x110, Size: 0x8] 0x715d0a8e80
	<GameplayTag> BlocksToClearOnTutorialInitialization;//[Offset: 0x118, Size: 0x50] 0x715d0b10a0
	<GameplayTag> CompletedTutorialKeys;//[Offset: 0x168, Size: 0x50] 0x715d0b1140
	bool bShouldSkipFTUE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1] 0x715d0a9000
	bool bShouldShowErrorDialogsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 0x1] 0x715d0a9080

--------------------------------
Class: GameModeSelectButton.SelectableItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a7900
	class GameModeSelectButtonModeIcon* IconWidgetClass;//[Offset: 0x2a0, Size: 0x8] 0x7148cdc360
	GameModeSelectButtonViewModel* GameModeSelectButtonViewModel;//[Offset: 0x2a8, Size: 0x8] 0x715d820080
	GameModeSelectButtonModeIcon*[] ModeIcons;//[Offset: 0x2b0, Size: 0x10] 0x7148cdc400
	VerticalBox* VerticalIconBox;//[Offset: 0x2c0, Size: 0x8] 0x715d820180
	HorizontalBox* HorizontalIconBox;//[Offset: 0x2c8, Size: 0x8] 0x715d820200
	GameModeSelectButtonTheme[] PlayModeThemes;//[Offset: 0x2d0, Size: 0x10] 0x7148cdc4a0
	delegate OnButtonPressed;//[Offset: 0x2e0, Size: 0x10] 0x715d820300
	delegate OnButtonReleased;//[Offset: 0x2f0, Size: 0x10] 0x715d820380
	delegate OnInfoToggled;//[Offset: 0x300, Size: 0x10] 0x715d820400
	void SwitchIconLayout(const bool IsOpen);// 0x3d441b4 0x715d7cf9e0
	void OnPlayModeUpdated(const enum NewPlayMode);// 0x45c6aa0 0x715d7cfac0
	void NativeOnInfoToggled(const bool IsOpen);// 0x3d43e48 0x715d7cfba0
	void NativeOnButtonReleased();// 0x3d43ef4 0x715d7cfc80
	GameModeSelectButtonTheme GetCurrentTheme();// 0x3d43f08 0x715d7cfd60
	void GameModeSelectButtonEvent__DelegateSignature();// 0x45c6aa0 0x715d7cfe40
	void GameModeButtonInfoToggledEvent__DelegateSignature(const bool InfoOpened);// 0x45c6aa0 0x715d7cff20
	void CloseInfoPanelIfOpened();// 0x45c6aa0 0x715d7ccaa0

--------------------------------
Class: GameModeSelectButtonTheme // 714906d6c0
	enum PlayModeType;//[Offset: 0x0, Size: 0x1] 0x7148cdc5e0
	SlateColor PrimaryColor;//[Offset: 0x8, Size: 0x28] 0x715d820680
	SlateColor AccentColor;//[Offset: 0x30, Size: 0x28] 0x715d820700

--------------------------------
Class: GameModeSelectButtonModeIcon.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a7680
	GameModeSelectButtonModeIconViewModel* GameModeSelectButtonModeIconViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0aa180
	void HideText();// 0x45c6aa0 0x715d06f660

--------------------------------
Class: GameModeSelectButtonModeIconViewModel.SDViewModel.Object // 71a48a7400
	TextBindable DisplayText;//[Offset: 0x48, Size: 0x98] 0x715d0aa000
	BrushBindable IconBrush;//[Offset: 0xe0, Size: 0x178] 0x715d0aa080
	int Index;//[Offset: 0x258, Size: 0x4] 0x715d0aa100

--------------------------------
Class: GameModeSelectButtonViewModel.SelectableItemViewModel.SDViewModel.Object // 71a48a7180
	int ModeIconCount;//[Offset: 0x960, Size: 0x4] 0x715d0a9a00
	Vector2D DesiredImageSize;//[Offset: 0x964, Size: 0x8] 0x715d0a9a80
	BoolBindable IsVisible;//[Offset: 0x978, Size: 0x70] 0x715d0a9b00
	BoolBindable IsTimerVisible;//[Offset: 0x9e8, Size: 0x70] 0x715d0a9b80
	TextBindable EndTime;//[Offset: 0xa58, Size: 0x98] 0x715d0a9c00
	BrushBindable ModeImage;//[Offset: 0xaf0, Size: 0x178] 0x715d0a9c80
	TextBindable LockedTitle;//[Offset: 0xc68, Size: 0x98] 0x715d0a9d00
	enum CurrentPlayModeType;//[Offset: 0xd00, Size: 0x1] 0x715d0b0f60
	GameModeSelectButtonModeIconViewModel*[] ModeIconViewModels;//[Offset: 0xd08, Size: 0x10] 0x715d0b1000
	SlateBrush LargeModeImage;//[Offset: 0xd18, Size: 0x88] 0x715d0a9e80
	SlateBrush SmallModeImage;//[Offset: 0xda0, Size: 0x88] 0x715d0a9f00
	bool IsLarge();// 0x3d44ecc 0x715d06f580

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object // 71a49bc900
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x55eb4ac 0x715cab12e0

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object // 71a49bc680
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8] 0x715cac0580
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x715cac0600
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x715cac0680
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x715cac0700
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55eba6c 0x715cab0f60
	void SetSize(SlateChildSize InSize);// 0x55ebbb4 0x715cab1040
	void SetPadding(Margin InPadding);// 0x55ebc64 0x715cab1120
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55ebb10 0x715cab1200

--------------------------------
Class: GamepadTransformPanel.CanvasPanel.PanelWidget.Widget.Visual.Object // 71a48a6f00
	bool bShowGamepadTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x715d0a9680
	<Widget*,PanelSlot*> GamepadSlots;//[Offset: 0x138, Size: 0x50] 0x715cecb080
	<Widget*,PanelSlot*> TouchSlots;//[Offset: 0x188, Size: 0x50] 0x715cecb140
	void OnPlatformUITypeChange();// 0x3d451ec 0x715d06f3c0

--------------------------------
Class: HighlightableUserWidget.UserWidget.Widget.Visual.Object // 71a48a6a00
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x230, Size: 0x50] 0x715cecafc0

--------------------------------
Class: HomeScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a6780
	<enum,FName> GameModeButtonColors;//[Offset: 0x2e0, Size: 0x50] 0x715cecaf00
	HomeViewModel* HomeScreenVM;//[Offset: 0x330, Size: 0x8] 0x715d0ab280
	PlayerProfileWidget* PlayerProfileWidget;//[Offset: 0x338, Size: 0x8] 0x715d0ab300
	PartyDisplayWidget* PartyDisplayWidget;//[Offset: 0x340, Size: 0x8] 0x715d0ab380
	BattlePassHomeWidget* BattlePassWidget;//[Offset: 0x348, Size: 0x8] 0x715d0ab400
	DailyChallengesWidget* DailyChallengesWidget;//[Offset: 0x350, Size: 0x8] 0x715d0ab480
	NotificationBadgeWidget* PlayButtonNotificationBadge;//[Offset: 0x358, Size: 0x8] 0x715d0ab500
	GameplayTag PlayButtonNotificationTag;//[Offset: 0x360, Size: 0x8] 0x715d0ab580
	void OnShowReadyButton();// 0x45c6aa0 0x715d06f120
	void OnShowPlayButton();// 0x45c6aa0 0x715d06f200
	void OnPlayModeChanged(enum PlayModeType);// 0x45c6aa0 0x715d06f2e0

--------------------------------
Class: HomeViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48a6000
	BoolBindable PlayButtonEnabled;//[Offset: 0x98, Size: 0x70] 0x715d820d00
	BoolBindable LoginButtonVisible;//[Offset: 0x108, Size: 0x70] 0x715d820d80
	BoolBindable GameModeSelectButtonEnabled;//[Offset: 0x178, Size: 0x70] 0x715d820e00
	BoolBindable GameModeSelectButtonVisible;//[Offset: 0x1e8, Size: 0x70] 0x715d820e80
	TextBindable MatchmakingButtonPrimaryText;//[Offset: 0x258, Size: 0x98] 0x715d820f00
	TextBindable MatchmakingButtonSecondaryText;//[Offset: 0x2f0, Size: 0x98] 0x715d820f80
	BoolBindable MatchmakingButtonShowSecondaryText;//[Offset: 0x388, Size: 0x70] 0x715d821000
	Int32Bindable PlayButtonSwitcher;//[Offset: 0x3f8, Size: 0x70] 0x715d821080
	TextBindable ReadyButtonText;//[Offset: 0x468, Size: 0x98] 0x715d7df800
	BoolBindable BattlePassButtonVisible;//[Offset: 0x500, Size: 0x70] 0x715d7df880
	BoolBindable DailyChallengesWidgetVisible;//[Offset: 0x570, Size: 0x70] 0x715d7df900
	BoolBindable PartyV1DisplayWidgetVisible;//[Offset: 0x5e0, Size: 0x70] 0x715d7df980
	PlayerProfileWidgetViewModel* PlayerProfileWidgetVM;//[Offset: 0x770, Size: 0x8] 0x715d7dfa00
	FeaturePanelViewModel* FeaturePanelViewModel;//[Offset: 0x778, Size: 0x8] 0x715d7dfa80
	PartyDisplayViewModel* PartyDisplayViewModel;//[Offset: 0x780, Size: 0x8] 0x715d7dfb00
	BattlePassHomeWidgetViewModel* BattlePassWidgetViewModel;//[Offset: 0x788, Size: 0x8] 0x715d7dfb80
	HomeScreenChallengesViewModel* HomeScreenChallengesViewModel;//[Offset: 0x790, Size: 0x8] 0x715d7dfc00
	NotificationBadgeViewModel* PlayButtonFTUEBadgeViewModel;//[Offset: 0x798, Size: 0x8] 0x715d7dfc80
	delegate TriggerPendingInvitation;//[Offset: 0x7a0, Size: 0x10] 0x715d7dfd00
	void TriggerAnimation__DelegateSignature(bool bForward);// 0x45c6aa0 0x715d7cce20
	void OnUpdateButtonPressed();// 0x3d49494 0x715d7ccf00
	void OnReadyButtonPressed();// 0x3d494f4 0x715d7ccfe0
	void OnPlayButtonPressed();// 0x3d49508 0x715d7cd0c0
	void OnPartyButtonPressed();// 0x3d494e0 0x715d7cd1a0
	void OnLoginButtonPressed();// 0x3d49480 0x715d7cd280
	void OnGameModeSelectButtonPressed();// 0x3d4951c 0x715d7cd360
	void OnDebugMOTDButtonPressed();// 0x3d49458 0x715d7cd440
	void OnBattlePassButtonPressed();// 0x3d4946c 0x715d7cd520
	bool GetIsFirstVisit();// 0x3d494a8 0x715d7cd600

--------------------------------
Class: PartyDisplayViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c1000
	BoolBindable InvitiationIconVisibility;//[Offset: 0x50, Size: 0x70] 0x715d0d3500
	BoolBindable AvatarOneVisible;//[Offset: 0xc0, Size: 0x70] 0x715d0d3580
	BoolBindable AvatarTwoVisible;//[Offset: 0x130, Size: 0x70] 0x715d0d3600
	BoolBindable AvatarThreeVisible;//[Offset: 0x1a0, Size: 0x70] 0x715d0d3680
	TextBindable PartyMemberCount;//[Offset: 0x210, Size: 0x98] 0x715d0d3700
	PartyDisplayPlayerViewModel* PartyMemberOne;//[Offset: 0x2a8, Size: 0x8] 0x715d0d3780
	PartyDisplayPlayerViewModel* PartyMemberTwo;//[Offset: 0x2b0, Size: 0x8] 0x715d0d3800
	PartyDisplayPlayerViewModel* PartyMemberThree;//[Offset: 0x2b8, Size: 0x8] 0x715d0d3880
	void PressButton();// 0x3d62794 0x715d0c2380

--------------------------------
Class: PartyDisplayPlayerViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c1500
	BoolBindable PlayerReady;//[Offset: 0x50, Size: 0x70] 0x715d0d3a00
	PlayerAvatarViewModel* AvatarViewModel;//[Offset: 0xc0, Size: 0x8] 0x715d0d3a80

--------------------------------
Class: PartyDisplayWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c0d80
	PartyDisplayViewModel* PartyDisplayViewModel;//[Offset: 0x288, Size: 0x8] 0x715d0d3300
	PartyDisplayPlayerWidget* PartyMemberOne;//[Offset: 0x290, Size: 0x8] 0x715d0d3380
	PartyDisplayPlayerWidget* PartyMemberTwo;//[Offset: 0x298, Size: 0x8] 0x715d0d3400
	PartyDisplayPlayerWidget* PartyMemberThree;//[Offset: 0x2a0, Size: 0x8] 0x715d0d3480

--------------------------------
Class: PartyDisplayPlayerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c1280
	PlayerAvatarWidget* Avatar;//[Offset: 0x258, Size: 0x8] 0x715d0d3900
	PartyDisplayPlayerViewModel* PartyDisplayPlayerViewModel;//[Offset: 0x260, Size: 0x8] 0x715d0d3980

--------------------------------
Class: HomeScreenChallengeDetailsWidget.ChallengeDetailsWidgetBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a6500
	WidgetSwitcher* BackgroundSwitcher;//[Offset: 0x2e0, Size: 0x8] 0x715d0aad00
	WidgetSwitcher* FrameSwitcher;//[Offset: 0x2e8, Size: 0x8] 0x715d0aad80
	SDConfigurableTextBlock* DebugTextBlock;//[Offset: 0x2f0, Size: 0x8] 0x715d0aae00
	HuntersImage* ButtonFrame;//[Offset: 0x2f8, Size: 0x8] 0x715d0aae80
	Button* Button;//[Offset: 0x300, Size: 0x8] 0x715d0aaf00
	CanvasPanel* ContentPanel;//[Offset: 0x308, Size: 0x8] 0x715d0aaf80
	WidgetAnimation* AnimateIn;//[Offset: 0x310, Size: 0x8] 0x715d0ab000
	WidgetAnimation* IntroStartState;//[Offset: 0x318, Size: 0x8] 0x715d0ab080
	WidgetAnimation* ClaimableToClaimed;//[Offset: 0x320, Size: 0x8] 0x715d0ab100
	void RemoveButtonFocus();// 0x45c6aa0 0x715d06f040

--------------------------------
Class: HunterChartItemViewModel.SDViewModel.Object // 71a48a5d80
	TextBindable HunterNameText;//[Offset: 0xb0, Size: 0x98] 0x715d0aa900
	TextBindable StatValueText;//[Offset: 0x148, Size: 0x98] 0x715d0aa980
	Texture2DBindable HunterImage;//[Offset: 0x1e0, Size: 0x78] 0x715d0aaa00
	BrushBindable HunterClassIcon;//[Offset: 0x258, Size: 0x178] 0x715d0aaa80
	float ProgressBarFillPercent;//[Offset: 0x3d0, Size: 0x4] 0x715d0aab00
	void SetBarFillRate(float InFillRatePercent);// 0x3d49ae8 0x715d06ee80

--------------------------------
Class: HunterChartItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a5b00
	HunterChartItemViewModel* HunterChartItemViewModel;//[Offset: 0x288, Size: 0x8] 0x715d0aa800
	HuntersFancyProgressBar* HunterStatBar;//[Offset: 0x290, Size: 0x8] 0x715d0aa880

--------------------------------
Class: HuntersFancyProgressBar.ContentWidget.PanelWidget.Widget.Visual.Object // 71a4b3f380
	float Progress;//[Offset: 0x11c, Size: 0x4] 0x715cd69a80
	bool bShowProgressBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x715cd69b00
	Vector2D ChildSlotOffset;//[Offset: 0x124, Size: 0x8] 0x715cd69b80
	SlateBrush BackgroundSourceBrush;//[Offset: 0x130, Size: 0x88] 0x715cd69c00
	SlateBrush FillSourceBrush;//[Offset: 0x1b8, Size: 0x88] 0x715cd69c80
	SlateBrush FillStrokeSourceBrush;//[Offset: 0x240, Size: 0x88] 0x715cd69d00
	Box2D LeftInnerSource;//[Offset: 0x2c8, Size: 0x14] 0x715cd69d80
	Box2D LeftOuterSource;//[Offset: 0x2dc, Size: 0x14] 0x715cd69e00
	Box2D MidSource;//[Offset: 0x2f0, Size: 0x14] 0x715cd69e80
	Box2D RightInnerSource;//[Offset: 0x304, Size: 0x14] 0x715cd69f00
	Box2D RightOuterSource;//[Offset: 0x318, Size: 0x14] 0x715cd69f80
	LinearColor FillOvershootTint;//[Offset: 0x32c, Size: 0x10] 0x715cd6a000
	float FillOvershootWidth;//[Offset: 0x33c, Size: 0x4] 0x715cd6a080
	float FillSkew;//[Offset: 0x340, Size: 0x4] 0x715cd6a100
	SlateBrush FillOvershootGlowBrush;//[Offset: 0x348, Size: 0x88] 0x715cd6a180
	Vector2D FillOvershootGlowSizeMin;//[Offset: 0x3d0, Size: 0x8] 0x715cd6a200
	Vector2D FillOvershootGlowPaddingMin;//[Offset: 0x3d8, Size: 0x8] 0x715cd6a280
	Vector2D FillOvershootGlowSizeMax;//[Offset: 0x3e0, Size: 0x8] 0x715cd6a300
	Vector2D FillOvershootGlowPaddingMax;//[Offset: 0x3e8, Size: 0x8] 0x715cd6a380
	void SetProgress(float InProgress);// 0x69a9abc 0x715cd54f40

--------------------------------
Class: HunterFameRewardsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48a5380
	HunterFameRewardsViewModel* RewardsScreenViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715d0ac600
	RewardsSummaryWidget* RewardsSummaryWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d0aa580

--------------------------------
Class: HunterFameRewardsViewModel.RewardsBaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48af600
	CharacterSummaryViewModel* CharacterSummaryScreenVM;//[Offset: 0xa8, Size: 0x8] 0x715d0ac480

--------------------------------
Class: RewardsBaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48af380
	RewardsSummaryViewModel* RewardsSummaryViewModel;//[Offset: 0x50, Size: 0x8] 0x715d0ac500
	HuntersRewardTrack* RewardTrack;//[Offset: 0x98, Size: 0x8] 0x715d0ac580
	void BackButtonPressed();// 0x3d75e90 0x715d06eda0

--------------------------------
Class: RewardsSummaryViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48cf600
	RewardLevelGroupViewModel*[] LevelGroupRewards;//[Offset: 0xd0, Size: 0x10] 0x715d0b1d20
	CurrencyDisplayViewModel* CreditDisplayViewModel;//[Offset: 0xe0, Size: 0x8] 0x715d0d8880
	CurrencyDisplayViewModel* CrystalDisplayViewModel;//[Offset: 0xe8, Size: 0x8] 0x715d0d8900
	EntitlementSummaryViewModel* EntitlementSummaryViewModel;//[Offset: 0xf0, Size: 0x8] 0x715d0d8980
	RewardPreviewViewModel* RewardPreviewViewModel;//[Offset: 0xf8, Size: 0x8] 0x715d0d8a00
	TextBindable LockedRewardText;//[Offset: 0x100, Size: 0x98] 0x715d0d8a80
	BoolBindable IsViewItemButtonVisible;//[Offset: 0x1b0, Size: 0x70] 0x715d0d8b00
	void PreviewSelectedItem();// 0x3d76458 0x715d0c60c0
	void OnRewardLevelGroupSelected(RewardLevelGroupViewModel* SelectedGroup);// 0x3d76380 0x715d0c61a0
	void OnItemSelected(out const MetaTuningDataKey ItemKey, bool bIsSelected, int UnlockLevel, int RewardLevelIndex);// 0x3d761f0 0x715d0c6280
	int GetMaxNumRewards();// 0x3d76424 0x715d0c6360
	void ClaimSelectedItem();// 0x3d7646c 0x715d0c6440

--------------------------------
Class: RewardLevelGroupViewModel.RewardLevelGroupViewModelBase.BAInjectableViewModel.SDViewModel.Object // 71a48c5b00

--------------------------------
Class: RewardsSummaryWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cf380
	RewardsSummaryViewModel* RewardsSummaryWidgetVM;//[Offset: 0x258, Size: 0x8] 0x715d0da500
	EntitlementSummaryWidget* EntitlementSummaryWidget;//[Offset: 0x260, Size: 0x8] 0x715d0d8480
	RewardPreviewWidget* RewardPreviewWidget;//[Offset: 0x268, Size: 0x8] 0x715d0d8500
	SDHorizontalBoxWrapper* RewardTrackSummary;//[Offset: 0x270, Size: 0x8] 0x715d0d8580
	ListView* ItemListView;//[Offset: 0x278, Size: 0x8] 0x715d0d8600
	class RewardLevelGroupWidget* RewardGroupWidgetBlueprint;//[Offset: 0x280, Size: 0x8] 0x715d0b1be0
	void UpdateItemSelectedState(enum NewState, int UnlockLevel, int RewardLevelIndex);// 0x45c6aa0 0x715d0c5fe0

--------------------------------
Class: RewardLevelGroupWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c5880
	class RewardItemWidget* WBPRewardItemWidget;//[Offset: 0x260, Size: 0x8] 0x715d0b1dc0
	RewardItemWidget* RewardItemWidget1;//[Offset: 0x268, Size: 0x8] 0x715d0d8f00
	PanelWidget* RewardItemPanel;//[Offset: 0x270, Size: 0x8] 0x715d0d8f80
	RewardLevelGroupViewModelBase* MyViewModel;//[Offset: 0x278, Size: 0x8] 0x715d0d9000
	RewardItemWidget*[] RewardItemWidgets;//[Offset: 0x280, Size: 0x10] 0x715d0b1e60
	void SetFocusInside();// 0x45c6aa0 0x715d0c6600
	void OnStateChanged(out const enum NewState);// 0x45c6aa0 0x715d0c66e0
	void OnSelectedChanged(bool bIsSelected);// 0x45c6aa0 0x715d0c67c0
	void OnSelected(bool bIsSelected);// 0x3d7173c 0x715d0c68a0

--------------------------------
Class: RewardItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c6000
	RewardItemViewModel* MyViewModel;//[Offset: 0x290, Size: 0x8] 0x715d0d9400
	Button* EntitlementButton;//[Offset: 0x298, Size: 0x8] 0x715d0d9480
	StandardEntitlementWithBackgroundWidget* EntitlementWithBackground;//[Offset: 0x2a0, Size: 0x8] 0x715d0d7400
	void Select();// 0x3d702d4 0x715d0c6c20
	void OnSelectedChanged(out const MetaTuningDataKey InEntitlementKey, bool bIsSelected, int UnlockLevel, int RewardLevelIndex, bool bContextChanged);// 0x45c6aa0 0x715d0c6d00

--------------------------------
Class: HuntersCurrencyColourConfiguration.DeveloperSettings.Object // 71a48af100
	LinearColor DefaultTextColour;//[Offset: 0x38, Size: 0x10] 0x715d0ac300
	LinearColor FullTextColour;//[Offset: 0x48, Size: 0x10] 0x715d0ac380
	LinearColor HighlightedColour;//[Offset: 0x58, Size: 0x10] 0x715d0ac400

--------------------------------
Class: FrontendConnectionInterface.Interface.Object // 71a48aee80

--------------------------------
Class: KickbackScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48aec00

--------------------------------
Class: MatchHistoryItemVM.SDViewModel.Object // 71a48ae980
	Texture2DBindable HunterPortrait;//[Offset: 0x48, Size: 0x78] 0x715d0abd00
	TextBindable ScoreText;//[Offset: 0xc0, Size: 0x98] 0x715d0abd80
	VisibilityBindable ScoreVisibility;//[Offset: 0x158, Size: 0x70] 0x715d0abe00
	TextBindable ModeText;//[Offset: 0x1c8, Size: 0x98] 0x715d0abe80
	TextBindable PlayModeText;//[Offset: 0x260, Size: 0x98] 0x715d0abf00
	TextBindable TimeSinceText;//[Offset: 0x2f8, Size: 0x98] 0x715d0abf80
	FName GameModeName;//[Offset: 0x390, Size: 0x8] 0x715d0ac000
	BrushBindable ModeIcon;//[Offset: 0x398, Size: 0x178] 0x715d0ac080
	TextBindable ResultText;//[Offset: 0x510, Size: 0x98] 0x715d0ac100
	enum MatchResult;//[Offset: 0x5a8, Size: 0x1] 0x715d0b0d80
	BoolBindable IsSelected;//[Offset: 0x5b0, Size: 0x70] 0x715d0ac200
	FName MatchKey;//[Offset: 0x620, Size: 0x8] 0x715d0ac280

--------------------------------
Class: MatchHistoryItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ae700
	MatchHistoryItemVM* HistoryItemVM;//[Offset: 0x290, Size: 0x8] 0x715d0abc00
	Image* HighlightedFrame;//[Offset: 0x298, Size: 0x8] 0x715d0abc80

--------------------------------
Class: MatchHistoryOptionsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ae480
	MatchHistoryOptionsViewModel* MatchHistoryOptionsScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0abb80

--------------------------------
Class: MatchHistoryOptionsViewModel.SDViewModel.Object // 71a48ae200
	TextBindable PlayerNameLabel;//[Offset: 0x70, Size: 0x98] 0x715d0ab980
	BoolBindable CanInvitePlayer;//[Offset: 0x108, Size: 0x70] 0x715d0aba00
	BoolBindable CanViewPlayerProfile;//[Offset: 0x178, Size: 0x70] 0x715d0aba80
	BoolBindable CanReportPlayer;//[Offset: 0x1e8, Size: 0x70] 0x715d0abb00
	void OptionsClosed();// 0x3d4b99c 0x715d06ea20
	void OnPlayerReportClicked();// 0x3d4b9b0 0x715d06eb00
	void OnPlayerProfileClicked();// 0x3d4b9c4 0x715d06ebe0
	void OnPlayerInviteClicked();// 0x3d4b9d8 0x715d06ecc0

--------------------------------
Class: MatchHistoryScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48adf80
	MatchHistoryViewModel* MatchHistoryVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0ab780
	ListView* MatchHistoryListView;//[Offset: 0x2e8, Size: 0x8] 0x715d0ab800
	MatchResultItemWidget* MatchResultView;//[Offset: 0x2f0, Size: 0x8] 0x715d0ab880
	ProfilePrivacyToggleWidget* PrivacyToggle;//[Offset: 0x2f8, Size: 0x8] 0x715d0ab900

--------------------------------
Class: MatchHistoryViewModel.SDViewModel.Object // 71a48add00
	delegate OnShowPleaseWaitSpinner;//[Offset: 0x90, Size: 0x10] 0x715d0ad380
	delegate OnHidePleaseWaitSpinner;//[Offset: 0xa0, Size: 0x10] 0x715d0ad400
	<FName,MatchHistoryItemVM*> MatchHistoryListItems;//[Offset: 0xb0, Size: 0x50] 0x715cecae40
	Int32Bindable HistorySwitcher;//[Offset: 0x130, Size: 0x70] 0x715d0ad580
	BoolBindable NextPageAvailable;//[Offset: 0x1a0, Size: 0x70] 0x715d0ad600
	BoolBindable ViewingSelf;//[Offset: 0x210, Size: 0x70] 0x715d0ad680
	MatchHistoryItemVM* CurrentHistorySelection;//[Offset: 0x2f8, Size: 0x8] 0x715d0ab600
	void OnPublicizeHistoryToggled(bool bInVisible);// 0x3d4c230 0x715d06e780
	void OnHistoryItemSelectionChanged(MatchHistoryItemVM* Selected);// 0x3d4c2dc 0x715d06e860
	void LoadNextPage();// 0x3d4c380 0x715d06e940

--------------------------------
Class: MatchResultItemWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ac680
	MatchResultItemViewModel* MatchResultItemViewModel;//[Offset: 0x260, Size: 0x8] 0x715d0ada80
	MatchPlayerWidget* Team_1;//[Offset: 0x268, Size: 0x8] 0x715d0adb00
	MatchPlayerWidget* Team_1;//[Offset: 0x270, Size: 0x8] 0x715d0adb80
	MatchPlayerWidget* Team_1;//[Offset: 0x278, Size: 0x8] 0x715d0adc00
	MatchPlayerWidget* Team_1;//[Offset: 0x280, Size: 0x8] 0x715d0adc80
	MatchPlayerWidget* Team_2;//[Offset: 0x288, Size: 0x8] 0x715d0add00
	MatchPlayerWidget* Team_2;//[Offset: 0x290, Size: 0x8] 0x715d0add80
	MatchPlayerWidget* Team_2;//[Offset: 0x298, Size: 0x8] 0x715d0ade00
	MatchPlayerWidget* Team_2;//[Offset: 0x2a0, Size: 0x8] 0x715d0ade80
	MatchPlayerWidget*[] Team;//[Offset: 0x2a8, Size: 0x10] 0x715d0b09c0
	MatchPlayerWidget*[] Team;//[Offset: 0x2b8, Size: 0x10] 0x715d0b0a60
	void OnViewModelUpdated();// 0x3d4e6b8 0x715d0c1200

--------------------------------
Class: MatchResultItemViewModel.SDViewModel.Object // 71a48ac900
	MatchResultItemViewModel* MatchResultItemWidgetVM;//[Offset: 0x48, Size: 0x8] 0x715d0ae000
	FText MapLabel;//[Offset: 0x50, Size: 0x18] 0x715d0ae080
	FText MatchTypeLabel;//[Offset: 0x68, Size: 0x18] 0x715d0ae100
	FText ElapsedTimeLabel;//[Offset: 0x80, Size: 0x18] 0x715d0ae180
	FText ScoreLabel;//[Offset: 0x98, Size: 0x18] 0x715d0ae200
	enum MatchResult;//[Offset: 0xb0, Size: 0x1] 0x715d0b0b00
	FText MatchResultText;//[Offset: 0xb8, Size: 0x18] 0x715d0ae300
	FText ExperienceGainLabel;//[Offset: 0xd0, Size: 0x18] 0x715d0ae380
	bool bIsScoreDisplayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x715d0ae400
	bool bSwitchTeamImages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x715d0ae480
	MatchPlayerViewModel*[] Team1VMList;//[Offset: 0xf0, Size: 0x10] 0x715d0b0ba0
	MatchPlayerViewModel*[] Team2VMList;//[Offset: 0x100, Size: 0x10] 0x715d0b0c40
	FString GameModeKey;//[Offset: 0x110, Size: 0x10] 0x715d0ae600
	void OnCloseOpenPopups();// 0x3d4e24c 0x715d0c12e0

--------------------------------
Class: MatchPlayerViewModel.SDViewModel.Object // 71a48ace00
	Texture2DBindable HunterImage;//[Offset: 0x48, Size: 0x78] 0x715d0ae700
	TextBindable DisplayNameText;//[Offset: 0xc0, Size: 0x98] 0x715d0ac680
	int TeamNumber;//[Offset: 0x170, Size: 0x4] 0x715d0ac700
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1] 0x715d0ac780
	bool bIsViewedPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1] 0x715d0ac800
	bool bIsBotPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 0x1] 0x715d0ac880
	BoolBindable bCanInvite;//[Offset: 0x178, Size: 0x70] 0x715d0ac900
	BoolBindable bCanViewProfile;//[Offset: 0x1e8, Size: 0x70] 0x715d0ac980
	BoolBindable bCanReport;//[Offset: 0x258, Size: 0x70] 0x715d0aca00
	bool bIsPopupEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x715d0aca80
	bool bIsOptionsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1] 0x715d0acb00
	int WidgetId;//[Offset: 0x2cc, Size: 0x4] 0x715d0acb80
	void OpenOptionsScreen();// 0x3d4da78 0x715d0c1580
	void OnPlayerReportClicked();// 0x3d4da28 0x715d0c1660
	void OnPlayerProfileClicked();// 0x3d4da3c 0x715d0c1740
	void OnPlayerInviteClicked();// 0x3d4da50 0x715d0c1820
	void OnPlayerButtonClicked();// 0x3d4da64 0x715d0c1900

--------------------------------
Class: MatchPlayerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48acb80
	MatchPlayerViewModel* MatchPlayerViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0ae680
	void StartOptionsAnimateOut();// 0x45c6aa0 0x715d0c13c0
	void StartOptionsAnimateIn();// 0x45c6aa0 0x715d0c14a0

--------------------------------
Class: ProfilePrivacyToggleWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c7900
	Image* PublicImage;//[Offset: 0x258, Size: 0x8] 0x715d0d5980
	Image* PrivateImage;//[Offset: 0x260, Size: 0x8] 0x715d0d5a00
	ProfilePrivacyToggleViewModel* PrivacyToggleViewModel;//[Offset: 0x268, Size: 0x8] 0x715d0d5a80
	ControllerShortcutWidget* Shortcut;//[Offset: 0x270, Size: 0x8] 0x715d0d5b00
	bool GetHistoryIsPublic();// 0x3d6db18 0x715d0c44c0

--------------------------------
Class: ProfilePrivacyToggleViewModel.SDViewModel.Object // 71a48c7b80
	BoolBindable bHistoryIsPublic;//[Offset: 0x48, Size: 0x70] 0x715d0d5c00
	void OnClick();// 0x3d6d6dc 0x715d0c45a0

--------------------------------
Class: MatchmakingConfigDisplayDataAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a48ada80
	FText MenuTitleText;//[Offset: 0x38, Size: 0x18] 0x715d0ace00
	<FString,MatchmakingConfigDisplay> ConfigDisplayData;//[Offset: 0x50, Size: 0x50] 0x715cecdd80
	MatchmakingConfigDisplay FallbackData;//[Offset: 0xa0, Size: 0x170] 0x715d0acf80
	<FString,MatchmakingPlayModeDisplay> PlayModeData;//[Offset: 0x210, Size: 0x50] 0x715cecde40
	MatchmakingPlayModeDisplay FallbackPlayModeData;//[Offset: 0x260, Size: 0x20] 0x715d0ad100
	<FString,MatchmakingGameModeDisplay> GameModeData;//[Offset: 0x280, Size: 0x50] 0x715cecad80
	MatchmakingGameModeDisplay FallbackGameModeData;//[Offset: 0x2d0, Size: 0xa8] 0x715d0ad280

--------------------------------
Class: MatchmakingConfigDisplay // 715da92080
	FText Name;//[Offset: 0x0, Size: 0x18] 0x715da86380
	FText Description;//[Offset: 0x18, Size: 0x18] 0x715da86400
	FText LockedTitle;//[Offset: 0x30, Size: 0x18] 0x715da86480
	SlateBrush LargeGameModeImage;//[Offset: 0x48, Size: 0x88] 0x715da86500
	SlateBrush SmallGameModeImage;//[Offset: 0xd0, Size: 0x88] 0x715da86580
	enum[] GameModes;//[Offset: 0x158, Size: 0x10] 0x715d89b820
	bool bSupportsMapSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1] 0x715da86680

--------------------------------
Class: MatchmakingPlayModeDisplay // 715da91f00
	FText Name;//[Offset: 0x0, Size: 0x18] 0x715da88200
	enum PlayModeType;//[Offset: 0x18, Size: 0x1] 0x715d89b640

--------------------------------
Class: MatchmakingGameModeDisplay // 715da91fc0
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x715da88300
	enum GameModeType;//[Offset: 0x18, Size: 0x1] 0x715d89b6e0
	SlateBrush IconBrush;//[Offset: 0x20, Size: 0x88] 0x715da88400

--------------------------------
Class: MatchmakingResultsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ad300
	MatchmakingResultsViewModel* MatchmakingResultsScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0acd00
	void OnMatchmakingStatusChanged(bool bIsPlacing);// 0x45c6aa0 0x715d0c19e0
	void OnMatchmakingHasBeenCancelled();// 0x45c6aa0 0x715d0c1ac0
	void OnExitMatchmaking();// 0x3d4d22c 0x715d0c1ba0
	void OnCancelPressed();// 0x3d4d240 0x715d0c1c80

--------------------------------
Class: MatchmakingResultsViewModel.SDViewModel.Object // 71a48ad080
	TextBindable StatusBinding;//[Offset: 0x68, Size: 0x98] 0x715d0acc00
	VisibilityBindable ButtonVisibility;//[Offset: 0x100, Size: 0x70] 0x715d0acc80

--------------------------------
Class: MatchViewViewModel.SDViewModel.Object // 71a48ac400
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x715d0ad980
	PlayerProfileViewModel* PlayerProfileVM;//[Offset: 0x48, Size: 0x8] 0x715d0ada00
	void OnMatchViewButtonClicked();// 0x3d540d0 0x715d0c1120

--------------------------------
Class: PlayerProfileViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c8d00
	PlayerProfileWidgetViewModel* PlayerProfileWidgetVM;//[Offset: 0xc0, Size: 0x8] 0x715d0d4580
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x715d0d4600
	void StatsButtonPressed();// 0x3d65d60 0x715d0c4ca0
	void RewardsTabButtonPressed();// 0x3d65d74 0x715d0c4d80
	void ProgressionButtonPressed();// 0x3d65d4c 0x715d0c4e60
	void OnBackButtonClicked();// 0x3d65cd8 0x715d0c4f40
	void MatchHistoryButtonPressed();// 0x3d65d38 0x715d0c5020
	bool HasUnseenRewards();// 0x3d65cec 0x715d0c5100
	bool GetBackGoesToMe();// 0x3d65d88 0x715d0c51e0
	void BadgeButtonPressed();// 0x3d65d24 0x715d0c52c0

--------------------------------
Class: MatchViewWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ac180
	MatchViewViewModel* MatchViewViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0ad880
	Button* MatchViewButton;//[Offset: 0x260, Size: 0x8] 0x715d0ad900

--------------------------------
Class: MessageOfTheDayCarouselItemViewModel.SelectableItemViewModel.SDViewModel.Object // 71a48abf00
	TextBindable Category;//[Offset: 0xa20, Size: 0x98] 0x715d0ad700
	BrushBindable CarouselImage;//[Offset: 0xab8, Size: 0x178] 0x715d0ad780
	BoolBindable IsCarouselImageLoaded;//[Offset: 0xc30, Size: 0x70] 0x715d0ad800
	void TriggerOnSelected();// 0x3d54640 0x715d0c1040

--------------------------------
Class: MessageOfTheDayCarouselItemWidget.SelectableItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48abc80
	MessageOfTheDayCarouselItemViewModel* MessageOfTheDayCarouselItemViewModel;//[Offset: 0x2a0, Size: 0x8] 0x715d0af700
	void OnToggleHighlight(const bool IsHighlighted);// 0x45c6aa0 0x715d0c0f60

--------------------------------
Class: MessageOfTheDayMainPanelViewModel.SDViewModel.Object // 71a48aba00
	TextBindable Header;//[Offset: 0x140, Size: 0x98] 0x715d0af280
	TextBindable Description;//[Offset: 0x1d8, Size: 0x98] 0x715d0af300
	TextBindable CTAButtonText;//[Offset: 0x270, Size: 0x98] 0x715d0af380
	TextBindable TimeLimitText;//[Offset: 0x308, Size: 0x98] 0x715d0af400
	BoolBindable HideTimeLimitText;//[Offset: 0x3a0, Size: 0x70] 0x715d0af480
	BrushBindable MainPanelImage;//[Offset: 0x410, Size: 0x178] 0x715d0af500
	BoolBindable IsImageLoaded;//[Offset: 0x588, Size: 0x70] 0x715d0af580
	BoolBindable IsCTAButtonEnabled;//[Offset: 0x5f8, Size: 0x70] 0x715d0af600
	BoolBindable IsCTAButtonVisible;//[Offset: 0x668, Size: 0x70] 0x715d0af680
	void TriggerCTAButtonAction();// 0x3d54ff0 0x715d0c0da0
	void EvaluateTimeLimitText();// 0x3d54fdc 0x715d0c0e80

--------------------------------
Class: MessageOfTheDayMainPanelWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ab780
	MessageOfTheDayMainPanelViewModel* MessageOfTheDayMainPanelViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0af200

--------------------------------
Class: MessageOfTheDayScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ab500
	MessageOfTheDayViewModel* MessageOfTheDayScreenViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715d0aef00
	MessageOfTheDayCarouselItemWidget*[] CarouselItemWidgets;//[Offset: 0x2e8, Size: 0x10] 0x715d0b0880
	HorizontalBox* CarouselItemHorizontalBox;//[Offset: 0x2f8, Size: 0x8] 0x715d0af000
	class MessageOfTheDayCarouselItemWidget* CarouselItemWidgetReference;//[Offset: 0x300, Size: 0x8] 0x715d0b0920
	MessageOfTheDayMainPanelWidget* MainPanel;//[Offset: 0x308, Size: 0x8] 0x715d0af080
	Button* CatchAllButton;//[Offset: 0x310, Size: 0x8] 0x715d0af100
	Widget* GetInitialGamepadFocusedWidget_Implementation();// 0x3d5560c 0x715d0c0cc0

--------------------------------
Class: MessageOfTheDayViewModel.SDViewModel.Object // 71a48ab280
	MessageOfTheDayCarouselItemViewModel*[] CarouselItemViewModels;//[Offset: 0x78, Size: 0x10] 0x715d0b07e0
	MessageOfTheDayMainPanelViewModel* MainPanelViewModel;//[Offset: 0x98, Size: 0x8] 0x715d0aee00
	bool HasMessagesToShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x715d0aee80
	void SelectDefaultCarouselItem();// 0x3d5597c 0x715d0c0940
	void OnRightButtonSelected();// 0x3d559a4 0x715d0c0a20
	void OnLeftButtonSelected();// 0x3d55990 0x715d0c0b00
	void OnCloseButtonClicked();// 0x3d559b8 0x715d0c0be0

--------------------------------
Class: ModeSelectCategoryScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48afb00
	ModeSelectCategoryViewModel* ModeSelectCategoryScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0d0880
	GameModeSelectButton* RankedButton;//[Offset: 0x2e8, Size: 0x8] 0x715d0d0900
	GameModeSelectButton* CasualButton;//[Offset: 0x2f0, Size: 0x8] 0x715d0d0980
	GameModeSelectButton* TutorialButton;//[Offset: 0x2f8, Size: 0x8] 0x715d0d0a00
	GameModeSelectButton* TrainingButton;//[Offset: 0x300, Size: 0x8] 0x715d0d0a80
	Widget* GetInitialGamepadFocusedWidget_Implementation();// 0x3d5756c 0x715d0c0240

--------------------------------
Class: ModeSelectCategoryViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48af880
	BoolBindable ShowDebugButton;//[Offset: 0x50, Size: 0x70] 0x715d0d0500
	BoolBindable ShowTutorialButton;//[Offset: 0xc0, Size: 0x70] 0x715d0d0580
	BoolBindable ShowRankedButton;//[Offset: 0x130, Size: 0x70] 0x715d0d0600
	GameModeSelectButtonViewModel* RankedButtonViewModel;//[Offset: 0x1a0, Size: 0x8] 0x715d0d0680
	GameModeSelectButtonViewModel* CasualButtonViewModel;//[Offset: 0x1a8, Size: 0x8] 0x715d0d0700
	GameModeSelectButtonViewModel* TrainingButtonViewModel;//[Offset: 0x1b0, Size: 0x8] 0x715d0d0780
	GameModeSelectButtonViewModel* TutorialButtonViewModel;//[Offset: 0x1b8, Size: 0x8] 0x715d0d0800
	void OnDebugButtonClicked();// 0x3d578cc 0x715d0c0080
	void OnCloseButtonClicked();// 0x3d578e0 0x715d0c0160

--------------------------------
Class: ModeSelectInfoPanelMapItemViewModel.SDViewModel.Object // 71a48c5100
	TextBindable MapNameBindable;//[Offset: 0x48, Size: 0x98] 0x715d0d0480

--------------------------------
Class: ModeSelectInfoPanelMapItemWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c4e80
	ModeSelectInfoPanelMapItemViewModel* ModeSelectInfoPanelMapItemViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d0400

--------------------------------
Class: ModeSelectInfoPanelViewModel.SDViewModel.Object // 71a48c4c00
	TextBindable ModeNameBindable;//[Offset: 0x78, Size: 0x98] 0x715d0d0080
	TextBindable ModeLongDescriptionBindable;//[Offset: 0x110, Size: 0x98] 0x715d0d0100
	Texture2D* BlendFromImage;//[Offset: 0x1a8, Size: 0x8] 0x715d0d0180
	Texture2D* BlendToImage;//[Offset: 0x1b0, Size: 0x8] 0x715d0d0200
	ModeSelectInfoPanelMapItemViewModel*[] MapItemViewModels;//[Offset: 0x1b8, Size: 0x10] 0x715d0b0560
	void OnBackButtonPressed();// 0x3d581bc 0x715d0c37a0
	Texture2D* GetBlendToImage();// 0x3d581d0 0x715d0c3880
	Texture2D* GetBlendFromImage();// 0x3d581ec 0x715d0c3960

--------------------------------
Class: ModeSelectInfoPanelWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c4980
	SDVerticalBoxWrapper* MapContainer;//[Offset: 0x258, Size: 0x8] 0x715d0d2080
	ModeSelectInfoPanelViewModel* ModeSelectInfoPanelViewModel;//[Offset: 0x260, Size: 0x8] 0x715d0d2100
	void OnViewModelsChangedBP();// 0x45c6aa0 0x715d0c35e0
	void OnViewModelsChanged();// 0x3d5874c 0x715d0c36c0

--------------------------------
Class: ModeSelectItemViewModel.SDViewModel.Object // 71a48c4700
	TextBindable MapName;//[Offset: 0x90, Size: 0x98] 0x715d0d1a80
	TextBindable ShortDescription;//[Offset: 0x128, Size: 0x98] 0x715d0d1b00
	TextBindable LongDescription;//[Offset: 0x1c0, Size: 0x98] 0x715d0d1b80
	BoolBindable IsVisible;//[Offset: 0x258, Size: 0x70] 0x715d0d1c00
	BoolBindable IsEnabled;//[Offset: 0x2c8, Size: 0x70] 0x715d0d1c80
	BrushBindable ModeIconBrush;//[Offset: 0x338, Size: 0x178] 0x715d0d1d00
	bool bIsRanked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1] 0x715d0d1d80
	bool bIsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 0x1] 0x715d0d1e00
	Texture2D* BlendFromImage;//[Offset: 0x4b8, Size: 0x8] 0x715d0d1e80
	Texture2D* BlendToImage;//[Offset: 0x4c0, Size: 0x8] 0x715d0d1f00
	void OnSelected();// 0x3d58a64 0x715d0c3260
	void OnInfoPressed();// 0x3d58a50 0x715d0c3340
	Texture2D* GetBlendToImage();// 0x3d58a78 0x715d0c3420
	Texture2D* GetBlendFromImage();// 0x3d58a94 0x715d0c3500

--------------------------------
Class: ModeSelectItemWidget.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c4480
	ModeSelectItemViewModel* ModeSelectItemViewModel;//[Offset: 0x368, Size: 0x8] 0x715d0d1a00
	void ViewModeUpdated();// 0x45c6aa0 0x715d0c3180

--------------------------------
Class: ModeSelectScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c4200
	float ForceScrollbarHiddenMinWidth;//[Offset: 0x2e0, Size: 0x4] 0x715d0d1500
	HorizontalBox* ModeSelectItemContainer;//[Offset: 0x2e8, Size: 0x8] 0x715d0d1580
	ScrollBox* MainContainerScrollBox;//[Offset: 0x2f0, Size: 0x8] 0x715d0d1600
	ModeSelectViewModel* ModeSelectScreenVM;//[Offset: 0x2f8, Size: 0x8] 0x715d0d1680
	class GameModeSelectButton* LargeGameModeSelectButton;//[Offset: 0x300, Size: 0x8] 0x715d0b01a0
	class GameModeSelectButton* SmallGameModeSelectButton;//[Offset: 0x308, Size: 0x8] 0x715d0b0240
	bool bUseWidgetPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x715d0d1700
	GameModeSelectButton*[] ChildElements;//[Offset: 0x318, Size: 0x10] 0x715d0b02e0
	GameModeSelectButton*[] CasualWidgets;//[Offset: 0x328, Size: 0x10] 0x715d0b0380
	GameModeSelectButton*[] RankedWidgets;//[Offset: 0x338, Size: 0x10] 0x715d0b0420
	GameModeSelectButton*[] GetModeSelectChildren();// 0x3d59258 0x715d0c2fc0
	Widget* GetInitialGamepadFocusedWidget_Implementation();// 0x3d592dc 0x715d0c30a0

--------------------------------
Class: ModeSelectViewModel.SDViewModel.Object // 71a48c3f80
	delegate OnSwitchView;//[Offset: 0x60, Size: 0x10] 0x715d821e00
	BoolBindable HasConfigs;//[Offset: 0x70, Size: 0x70] 0x715d821e80
	VisibilityBindable MainMenuVisibility;//[Offset: 0xe0, Size: 0x70] 0x715d821f00
	GameModeSelectButtonViewModel*[] ModeSelectItems;//[Offset: 0x150, Size: 0x10] 0x7148cdc2c0
	ModeSelectInfoPanelViewModel* ModeSelectInfoPanelViewModel;//[Offset: 0x160, Size: 0x8] 0x715d822000
	void SwitchView__DelegateSignature(byte bNewView);// 0x45c6aa0 0x715d7cf740
	void OnCloseButtonClicked();// 0x3d597f4 0x715d7cf820
	bool GetDisplayRanked();// 0x3d59808 0x715d7cf900

--------------------------------
Class: ModuleAdminScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c3d00
	ListView* ItemListView;//[Offset: 0x2e0, Size: 0x8] 0x715d0d3080
	class CustomisationItemWidget* ItemWidgetBlueprint;//[Offset: 0x2e8, Size: 0x8] 0x715d0b0100
	CurrencyDisplayWidget* CreditsDisplay;//[Offset: 0x2f0, Size: 0x8] 0x715d0d3100
	CurrencyDisplayWidget* AdditionalCurrencyDisplay;//[Offset: 0x2f8, Size: 0x8] 0x715d0d3180
	ModuleAdminViewModel* ModuleAdminScreenVM;//[Offset: 0x300, Size: 0x8] 0x715d0d1100
	HuntersStandardButtonWithShortcut* EquipButton;//[Offset: 0x308, Size: 0x8] 0x715d0d1180
	HuntersStandardButtonWithShortcut* WinningsPurchaseButton;//[Offset: 0x310, Size: 0x8] 0x715d0d1200
	HuntersStandardButtonWithShortcut* AdditionalCurrencyPurchaseButton;//[Offset: 0x318, Size: 0x8] 0x715d0d1280
	HuntersStandardButtonWithShortcut* ClaimButton;//[Offset: 0x320, Size: 0x8] 0x715d0d1300
	bool bIntroAnimationFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1] 0x715d0d1380
	void SetIsScrollAnimationEnabled(bool InIsScrollAnimationEnabled);// 0x3d59c78 0x715d0c2d20
	void ScrollLastItemToView();// 0x3d59d24 0x715d0c2e00
	int GetEquippedItem();// 0x3d59d38 0x715d0c2ee0

--------------------------------
Class: ModuleAdminViewModel.CustomisationItemPanelViewModel.SDViewModel.Object // 71a48c3a80
	TextBindable CultureInvariantAbilityName;//[Offset: 0x6f0, Size: 0x98] 0x715d0d2e00
	TextBindable AbilityGenericDescription;//[Offset: 0x788, Size: 0x98] 0x715d0d2e80
	TextBindable AbilityName;//[Offset: 0x820, Size: 0x98] 0x715d0d2f00
	BrushBindable AbilityIcon;//[Offset: 0x8b8, Size: 0x178] 0x715d0d2f80
	BrushBindable AbilityGameModeIcon;//[Offset: 0xa30, Size: 0x178] 0x715d0d3000

--------------------------------
Class: NewsScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c2b80
	NewsViewModel* NewsScreenVM;//[Offset: 0x268, Size: 0x8] 0x715d0d2380

--------------------------------
Class: NewsViewModel.SDViewModel.Object // 71a48c2680
	NewsStoryViewModel*[] Stories;//[Offset: 0x48, Size: 0x10] 0x715d0b2900

--------------------------------
Class: NewsStoryViewModel.SDViewModel.Object // 71a48c2900
	FText Headline;//[Offset: 0x48, Size: 0x18] 0x715d0d2180
	FText Description;//[Offset: 0x60, Size: 0x18] 0x715d0d2200
	bool IsFeatured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x715d0d2280
	DateTime Date;//[Offset: 0x80, Size: 0x8] 0x715d0d2300

--------------------------------
Class: NewUserChallengesViewModel.ChallengesBaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c2400

--------------------------------
Class: PlayerLevelUpScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c0100
	PlayerLevelUpViewModel* PlayerLevelUpVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0d5200

--------------------------------
Class: PlayerLevelUpViewModel.SDViewModel.Object // 71a48ca380
	TextBindable TierNumberText;//[Offset: 0x58, Size: 0x98] 0x715d0d5180
	void AnimationFinished();// 0x3d63b28 0x715d0c22a0

--------------------------------
Class: PlayerOptionsViewModel.SDViewModel.Object // 71a48ca100
	void OnReportButtonClicked();// 0x3d63ecc 0x715d0c1f20
	void OnProfileButtonClicked();// 0x3d63ee0 0x715d0c2000
	void OnInviteButtonClicked();// 0x3d63ef4 0x715d0c20e0
	void OnBackButtonClicked();// 0x3d63eb8 0x715d0c21c0

--------------------------------
Class: PlayerOptionsWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c9e80
	PlayerOptionsViewModel* PlayerOptionsViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d5100

--------------------------------
Class: PlayerProfileMedalsViewModel.SDViewModel.Object // 71a48c9c00
	BrushBindable ItemIconImage;//[Offset: 0x48, Size: 0x178] 0x715d0d4f80
	TextBindable ItemMedalText;//[Offset: 0x1c0, Size: 0x98] 0x715d0d5000
	TextBindable ItemLevelText;//[Offset: 0x258, Size: 0x98] 0x715d0d5080

--------------------------------
Class: PlayerProfileMedalsWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c9980
	PlayerProfileMedalsViewModel* MedalsViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d4f00

--------------------------------
Class: PlayerProfileScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c9700
	PlayerProfileViewModel* PlayerProfileScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0d4c00
	PlayerProfileWidget* PlayerInfoWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d0d4c80
	UserWidget* BodyContainer;//[Offset: 0x2f0, Size: 0x8] 0x715d0d4d00
	ProfileTabData[] TabEntries;//[Offset: 0x2f8, Size: 0x10] 0x715d0b25e0
	void OnPlayerDataReady();// 0x45c6aa0 0x715d0c5560
	void HandleFirstOpen();// 0x45c6aa0 0x715d0c5640
	FText[] GetTabNames();// 0x3d64c80 0x715d0c1d60
	void ForceSelectTab(int Index);// 0x45c6aa0 0x715d0c1e40

--------------------------------
Class: ProfileTabData // 715da91cc0
	FText TabName;//[Offset: 0x0, Size: 0x18] 0x715da87700
	FText LabelAurebesh;//[Offset: 0x18, Size: 0x18] 0x715da87780
	FString FeatureFlagName;//[Offset: 0x30, Size: 0x10] 0x715da87800
	bool OnlyShowForLocalUser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x715da87880

--------------------------------
Class: PlayerProfileSettings.DeveloperSettings.Object // 71a48c9480
	int KeepaliveMinutes;//[Offset: 0x38, Size: 0x4] 0x715d0d4b00
	int NakamaMatchesPerPage;//[Offset: 0x3c, Size: 0x4] 0x715d0d4b80

--------------------------------
Class: PlayerProfileStatisticsViewModel.SDViewModel.Object // 71a48c9200
	TextBindable ValueText;//[Offset: 0x48, Size: 0x98] 0x715d0d4900
	TextBindable StatisticNameText;//[Offset: 0xe0, Size: 0x98] 0x715d0d4980
	BrushBindable StatisticIconBrush;//[Offset: 0x178, Size: 0x178] 0x715d0d4a00
	GameplayTag StatsTag;//[Offset: 0x2f0, Size: 0x8] 0x715d0d4a80

--------------------------------
Class: PlayerProfileStatisticsWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c8f80
	WidgetAnimation* Glint;//[Offset: 0x288, Size: 0x8] 0x715d0d4780
	PlayerProfileStatisticsViewModel* StatisticsViewModel;//[Offset: 0x290, Size: 0x8] 0x715d0d4800
	void StopGlint();// 0x3d657e4 0x715d0c53a0
	void PlayGlint(delegate GlintFinishedDelegate);// 0x3d657f8 0x715d0c5480

--------------------------------
Class: PlayerRewardsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c8580
	PlayerRewardsViewModel* RewardsScreenViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715d0d5d80
	RewardsSummaryWidget* RewardsSummaryWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d0d5e00
	PlayerProfileWidget* PlayerProfileWidget;//[Offset: 0x2f0, Size: 0x8] 0x715d0d5e80

--------------------------------
Class: PlayerRewardsViewModel.RewardsBaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c8300
	PlayerProfileWidgetViewModel* PlayerProfileWidgetVM;//[Offset: 0xa8, Size: 0x8] 0x715d0d5d00
	void OnInfoButtonPressed();// 0x3d6cf20 0x715d0c4680

--------------------------------
Class: PlayerXPInformationPopupScreen.MultiPanelInformationPopupContainerScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c8080
	PlayerXPInformationPopupViewModel* PlayerXPInformationPopupScreenVM;//[Offset: 0x2f0, Size: 0x8] 0x715d0d5c80

--------------------------------
Class: PlayerXPInformationPopupViewModel.MultiPanelInformationPopupContainerViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c7e00

--------------------------------
Class: ProfileRewardsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c7680
	ProfileRewardsViewModel* RewardsScreenViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715d0d5880
	RewardsSummaryWidget* RewardsSummaryWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d0d5900

--------------------------------
Class: ProfileRewardsViewModel.RewardsBaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48c7400
	void OnInfoButtonPressed();// 0x3d6e0a8 0x715d0c43e0

--------------------------------
Class: ProfileStatsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c7180
	bool bAnimateReveal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x715d0d5480
	ProfileStatsViewModel* ProfileStatsScreenVM;//[Offset: 0x2e8, Size: 0x8] 0x715d0d5500
	PlayerProfileStatisticsDataAsset* PlayerProfileStatisticsDataAsset;//[Offset: 0x2f0, Size: 0x8] 0x715d0d5580
	class PlayerProfileStatisticsWidget* StatisticsWidgetChildClass;//[Offset: 0x2f8, Size: 0x8] 0x715d0b2360
	int StatisticsWidgetColumns;//[Offset: 0x300, Size: 0x4] 0x715d0d5600
	PlayerProfileStatisticsWidget*[] StatisticsWidgets;//[Offset: 0x308, Size: 0x10] 0x715d0b2400
	HuntersStyledComboBox* HunterStatFilterComboBox;//[Offset: 0x318, Size: 0x8] 0x715d0d5700
	ScrollBox* HunterChartListView;//[Offset: 0x320, Size: 0x8] 0x715d0d5780
	class HunterChartItemWidget* ChartWidgetItem;//[Offset: 0x328, Size: 0x8] 0x715d0b24a0
	void RevealStats();// 0x45c6aa0 0x715d0c4140
	SDUniformGridPanel* GetStatisticsGridParentPanel();// 0x45c6aa0 0x715d0c4220
	void ConcealStats();// 0x45c6aa0 0x715d0c4300

--------------------------------
Class: ProfileStatsViewModel.SDViewModel.Object // 71a48c6f00
	<GameplayTag,PlayerProfileStatisticsViewModel*> PlayerStatisticsVM;//[Offset: 0x98, Size: 0x50] 0x715cecdcc0
	HunterChartItemViewModel*[] DisplayHuntersVM;//[Offset: 0xe8, Size: 0x10] 0x715d0b2220
	FText[] GameStatisticsValues;//[Offset: 0xf8, Size: 0x10] 0x715d0b22c0
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x715d0d7380
	bool bIsOpeningScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1] 0x715d0d5300
	void OnStatsRevealed();// 0x3d6e920 0x715d0c3f80
	void OnHunterStatFilterChanged(FName InNewKey, const byte SelectInfo);// 0x3d6e838 0x715d0c4060

--------------------------------
Class: PlayerProfileStatisticsDataAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b30600
	PlayerProfileStatisticDefinition[] PlayerProfileStatistics;//[Offset: 0x38, Size: 0x10] 0x715cc8f6a0
	PlayerProfileHunterStatDefinition[] HunterStatistics;//[Offset: 0x48, Size: 0x10] 0x715cc8f740
	float SecondsPerHunterStatInterval;//[Offset: 0x58, Size: 0x4] 0x715cd62b80

--------------------------------
Class: PlayerProfileStatisticDefinition // 715cec2c80
	SlateBrush StatisticIcon;//[Offset: 0x0, Size: 0x88] 0x715ceb9380
	FText StatisticName;//[Offset: 0x88, Size: 0x18] 0x715ceb9400
	GameplayTag StatTag;//[Offset: 0xa0, Size: 0x8] 0x715ceb9480

--------------------------------
Class: PlayerProfileHunterStatDefinition // 715cec2d40
	FText StatisticName;//[Offset: 0x0, Size: 0x18] 0x715ceb7400
	GameplayTag StatTag;//[Offset: 0x18, Size: 0x8] 0x715ceb7480
	enum Calculation;//[Offset: 0x20, Size: 0x1] 0x715ce94fc0
	bool bShowDecimals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x715ceb7580
	GameplayTag SecondaryStatTag;//[Offset: 0x24, Size: 0x8] 0x715ceb7600

--------------------------------
Class: HuntersStyledComboBox.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3dd00
	FText[] DefaultOptions;//[Offset: 0x258, Size: 0x10] 0x7148cda740
	FText SelectedOption;//[Offset: 0x268, Size: 0x18] 0x715d7d8500
	ComboBoxStyle WidgetStyle;//[Offset: 0x280, Size: 0x3f0] 0x715d7d8580
	TableRowStyle ItemStyle;//[Offset: 0x670, Size: 0x7c8] 0x715d7d8600
	ScrollBarStyle WidgetBarStyle;//[Offset: 0xe38, Size: 0x4d0] 0x715d7d8680
	enum ScrollBarVisibility;//[Offset: 0x1308, Size: 0x1] 0x7148cda7e0
	Vector2D ScrollbarThickness;//[Offset: 0x130c, Size: 0x8] 0x715d7d8780
	Margin ScrollbarPadding;//[Offset: 0x1314, Size: 0x10] 0x715d7d8800
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1324, Size: 0x1] 0x715d7d8880
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1325, Size: 0x1] 0x715d7d8900
	Margin ContentPadding;//[Offset: 0x1328, Size: 0x10] 0x715d7d8980
	float MaxListHeight;//[Offset: 0x1338, Size: 0x4] 0x715d7d8a00
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133c, Size: 0x1] 0x715d7d8a80
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133d, Size: 0x1] 0x715d7d8b00
	SlateFontInfo Font;//[Offset: 0x1340, Size: 0x50] 0x715d7d8b80
	delegate OnGenerateSelectedItemWidgetEvent;//[Offset: 0x1390, Size: 0x10] 0x715d7d8c00
	delegate OnGenerateWidgetEvent;//[Offset: 0x13a0, Size: 0x10] 0x715d7d8c80
	delegate OnSelectionChanged;//[Offset: 0x13b0, Size: 0x10] 0x715d7d8d00
	delegate OnOpening;//[Offset: 0x13c0, Size: 0x10] 0x715d7d8d80
	delegate OnClosing;//[Offset: 0x13d0, Size: 0x10] 0x715d7d8e00
	Widget* ComboBoxSelector;//[Offset: 0x1438, Size: 0x8] 0x715d7d8e80
	class HuntersComboBoxItemBase* SelectedItemTemplate;//[Offset: 0x1440, Size: 0x8] 0x7148cda880
	class HuntersComboBoxItemBase* ItemTemplate;//[Offset: 0x1448, Size: 0x8] 0x7148cda920
	bool SetSelectedOption(FText Option);// 0x69addb8 0x715d7c82e0
	bool SetSelectedIndex(const int Index);// 0x69add08 0x715d7c83c0
	bool RemoveOption(out const FText Option);// 0x69ae1b0 0x715d7c84a0
	void RefreshOptions();// 0x69adf44 0x715d7c8580
	void OnSelectionChangedEvent__DelegateSignature(FText SelectedItem, byte SelectionType);// 0x45c6aa0 0x715d7c8660
	void OnOpeningEvent__DelegateSignature();// 0x45c6aa0 0x715d7c8740
	void OnClosingEvent__DelegateSignature();// 0x45c6aa0 0x715d7c8820
	bool IsOpen();// 0x69adb98 0x715d7c8900
	FText GetSelectedOption();// 0x69adc38 0x715d7c89e0
	int GetSelectedIndex();// 0x69adc04 0x715d7c8ac0
	int GetOptionCount();// 0x69adbd0 0x715d7c8ba0
	FText GetOptionAtIndex(int Index);// 0x69adf80 0x715d7c8c80
	Widget* GenerateWidgetForText__DelegateSignature(FText Item);// 0x45c6aa0 0x715d7c8d60
	int FindOptionIndex(out const FText Option);// 0x69ae098 0x715d7c8e40
	Widget* CreateSelectedItemWidget(out const FText Item);// 0x69ada80 0x715d7c8f20
	Widget* CreateItemWidget(out const FText Item);// 0x69ad968 0x715d7c9000
	void ClearSelection();// 0x69adf58 0x715d7c5720
	void ClearOptions();// 0x69adf6c 0x715d7c5800
	void AddOption(out const FText Option);// 0x69ae2cc 0x715d7c58e0

--------------------------------
Class: HuntersComboBoxItemBase.UserWidget.Widget.Visual.Object // 71a4b3f600
	TextBlock* ItemTextBlock;//[Offset: 0x248, Size: 0x8] 0x715cd6a480

--------------------------------
Class: RecruitHunterScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c6c80
	RecruitHunterViewModel* RecruitHunterScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0d6f00
	CurrencyDisplayWidget* TokenDisplay;//[Offset: 0x2e8, Size: 0x8] 0x715d0d6f80
	CurrencyDisplayWidget* CrystalDisplay;//[Offset: 0x2f0, Size: 0x8] 0x715d0d7000
	FName DefaultCurrencySDColor;//[Offset: 0x2f8, Size: 0x8] 0x715d0d7080
	FName InsufficientCurrencySDColor;//[Offset: 0x300, Size: 0x8] 0x715d0d7100

--------------------------------
Class: RecruitHunterViewModel.SDViewModel.Object // 71a48c6a00
	Texture2DBindable HunterBrush;//[Offset: 0x58, Size: 0x78] 0x715d0d6a80
	BrushBindable TokenBrush;//[Offset: 0xd0, Size: 0x178] 0x715d0d6b00
	TextBindable TitleText;//[Offset: 0x248, Size: 0x98] 0x715d0d6b80
	TextBindable PlayerTokensText;//[Offset: 0x2e0, Size: 0x98] 0x715d0d6c00
	TextBindable RequiredTokensText;//[Offset: 0x378, Size: 0x98] 0x715d0d6c80
	NameBindable PlayerTokensColor;//[Offset: 0x410, Size: 0x78] 0x715d0d6d00
	BoolBindable CrystalsRequired;//[Offset: 0x488, Size: 0x70] 0x715d0d6d80
	CurrencyDisplayViewModel* TokenCurrencyVM;//[Offset: 0x4f8, Size: 0x8] 0x715d0d6e00
	CurrencyDisplayViewModel* CrystalCurrencyVM;//[Offset: 0x500, Size: 0x8] 0x715d0d6e80
	void OnConfirmButtonPressed();// 0x3d6eeb4 0x715d0c3dc0
	void OnCancelButtonPressed();// 0x3d6eea0 0x715d0c3ea0

--------------------------------
Class: RewardClaimedScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c6780
	EntitlementSummaryWidget* EntitlementSummaryWidget;//[Offset: 0x2e0, Size: 0x8] 0x715d0d6580
	RewardClaimedViewModel* RewardClaimedScreenVM;//[Offset: 0x2e8, Size: 0x8] 0x715d0d6600
	WidgetAnimation* Intro;//[Offset: 0x2f0, Size: 0x8] 0x715d0d6680
	WidgetAnimation* Outro;//[Offset: 0x2f8, Size: 0x8] 0x715d0d6700
	WidgetAnimation* IntroHunterFame;//[Offset: 0x300, Size: 0x8] 0x715d0d6780
	WidgetAnimation* OutroHunterFame;//[Offset: 0x308, Size: 0x8] 0x715d0d6800
	WidgetAnimation* IntroBattlePass;//[Offset: 0x310, Size: 0x8] 0x715d0d6880
	WidgetAnimation* OutroBattlePass;//[Offset: 0x318, Size: 0x8] 0x715d0d6900
	void StartSequence();// 0x45c6aa0 0x715d0c3b20
	WidgetAnimation* GetOutroAnimation();// 0x3d6f1f0 0x715d0c3c00
	WidgetAnimation* GetIntroAnimation();// 0x3d6f224 0x715d0c3ce0

--------------------------------
Class: RewardClaimedViewModel.SDViewModel.Object // 71a48c6500
	TextBindable LabelText;//[Offset: 0x70, Size: 0x98] 0x715d0d7f00
	TextBindable AurebeshText;//[Offset: 0x108, Size: 0x98] 0x715d0d7f80
	TextBindable QuantityText;//[Offset: 0x1a0, Size: 0x98] 0x715d0d8000
	BoolBindable HasQuantityText;//[Offset: 0x238, Size: 0x70] 0x715d0d8080
	TextBindable TierNumberText;//[Offset: 0x2a8, Size: 0x98] 0x715d0d8100
	MetaTuningDataKey EntitlementKey;//[Offset: 0x340, Size: 0x8] 0x715d0d8180
	BrushAndVisibilityBindable ClaimedItemImage;//[Offset: 0x350, Size: 0x178] 0x715d0d8200
	BoolBindable IsModule;//[Offset: 0x4c8, Size: 0x70] 0x715d0d8280
	TextBindable ProDescription;//[Offset: 0x538, Size: 0x98] 0x715d0d8300
	BoolBindable ShowPro;//[Offset: 0x5d0, Size: 0x70] 0x715d0d8380
	TextBindable ConDescription;//[Offset: 0x640, Size: 0x98] 0x715d0d8400
	BoolBindable ShowCon;//[Offset: 0x6d8, Size: 0x70] 0x715d0d6380
	TextBindable AbilityDescription;//[Offset: 0x748, Size: 0x98] 0x715d0d6400
	BoolBindable ShowAbilityDescription;//[Offset: 0x7e0, Size: 0x70] 0x715d0d6480
	EntitlementSummaryViewModel* EntitlementSummaryViewModel;//[Offset: 0x850, Size: 0x8] 0x715d0d6500
	void ExitRequested();// 0x3d6f654 0x715d0c7320
	void AnimationFinished();// 0x3d6f668 0x715d0c3a40

--------------------------------
Class: RewardLevelGroupMiniWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48c5d80
	RewardLevelGroupViewModel* RewardLevelGroupViewModel;//[Offset: 0x258, Size: 0x8] 0x715d0d9280
	void UpdateItemSelectedState(const bool bIsSelected);// 0x45c6aa0 0x715d0c6980
	void OnStateChanged(out const enum NewState);// 0x45c6aa0 0x715d0c6a60
	void BeginAnimations();// 0x45c6aa0 0x715d0c6b40

--------------------------------
Class: SeasonalChallengesScreen.ChallengeDetailsScreenBase.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ce700
	BattlePassLevelProgressWidget* BattlePassProgress;//[Offset: 0x300, Size: 0x8] 0x715d0da100

--------------------------------
Class: SeasonalChallengesViewModel.ChallengesBaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48ce480
	BoolBindable ShowBattlePassInactiveDisplay;//[Offset: 0x3f0, Size: 0x70] 0x715d0d9d00
	BoolBindable ShowNoCurrentChallengesDisplay;//[Offset: 0x460, Size: 0x70] 0x715d0d9d80
	TextBindable SeasonName;//[Offset: 0x4d0, Size: 0x98] 0x715d0d9e00
	BrushBindable SeasonArt;//[Offset: 0x568, Size: 0x178] 0x715d0d9e80
	BoolBindable UseSeasonArt;//[Offset: 0x6e0, Size: 0x70] 0x715d0d9f00
	BrushBindable SeasonTag;//[Offset: 0x750, Size: 0x178] 0x715d0d9f80
	BoolBindable UseSeasonTag;//[Offset: 0x8c8, Size: 0x70] 0x715d0da000
	BattlePassWidgetViewModel* BattlePassVM;//[Offset: 0x938, Size: 0x8] 0x715d0da080
	void ReportListScrolled();// 0x3d78198 0x715d0c59c0
	void CallToActionButtonPressed();// 0x3d781ac 0x715d0c5aa0

--------------------------------
Class: SeasonHubScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ce200
	NotificationBadgeWidget* EventsBadge;//[Offset: 0x2e0, Size: 0x8] 0x715d0d9b80
	NotificationBadgeWidget* ChallengesBadge;//[Offset: 0x2e8, Size: 0x8] 0x715d0d9c00
	SeasonHubViewModel* SeasonHubScreenVM;//[Offset: 0x2f0, Size: 0x8] 0x715d0d9c80
	void RefreshTextVisibility();// 0x45c6aa0 0x715d0c58e0

--------------------------------
Class: SeasonHubViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48cdf80
	TextBindable EventsCount;//[Offset: 0xa8, Size: 0x98] 0x715d0d9700
	TextBindable NUXProgression;//[Offset: 0x140, Size: 0x98] 0x715d0d9780
	TextBindable DailyChallengesRemainingTime;//[Offset: 0x1d8, Size: 0x98] 0x715d0d9800
	TextBindable WeeklyChallengesRemainingTime;//[Offset: 0x270, Size: 0x98] 0x715d0d9880
	TextBindable SeasonalChallenges;//[Offset: 0x308, Size: 0x98] 0x715d0d9900
	BoolBindable IsEventsAvailable;//[Offset: 0x3a0, Size: 0x70] 0x715d0d9980
	TextBindable EventsUnavailableReason;//[Offset: 0x410, Size: 0x98] 0x715d0d9a00
	NotificationBadgeViewModel* EventsBadgeViewModel;//[Offset: 0x4a8, Size: 0x8] 0x715d0d9a80
	NotificationBadgeViewModel* ChallengesBadgeViewModel;//[Offset: 0x4b0, Size: 0x8] 0x715d0d9b00
	void OnEventsPressed();// 0x3d78794 0x715d0c5720
	void OnChallengesPressed();// 0x3d787a8 0x715d0c5800

--------------------------------
Class: SetAccountUsernameFTUEScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cda80
	EditableTextBox* UsernameTextBox;//[Offset: 0x2e0, Size: 0x8] 0x715d0db280
	SetAccountUsernameFTUEViewModel* SetAccountUsernameFTUEVM;//[Offset: 0x2e8, Size: 0x8] 0x715d0db300
	void OnVirtualKeyboardToggled(const bool bIsShown, out const Box2D ViewRect);// 0x45c6aa0 0x715d0c8ac0
	void OnSubmitCallback(const bool bIsSuccess);// 0x45c6aa0 0x715d0c8ba0
	void OnErrorEnabled();// 0x45c6aa0 0x715d0c8c80
	void OnErrorDisabled();// 0x45c6aa0 0x715d0c8d60

--------------------------------
Class: SetAccountUsernameFTUEViewModel.SDViewModel.Object // 71a48cd800
	BoolBindable SubmissionPending;//[Offset: 0x70, Size: 0x70] 0x715d0db000
	BoolBindable HasError;//[Offset: 0xe0, Size: 0x70] 0x715d0db080
	TextBindable ErrorText;//[Offset: 0x150, Size: 0x98] 0x715d0db100
	void Submit(FString UserName);// 0x3d7a664 0x715d0c8820
	FText GetDefaultUsername();// 0x3d7a520 0x715d0c8900
	void ClearError();// 0x3d7a714 0x715d0c89e0

--------------------------------
Class: ShopBundleCostPacketViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48cd580
	CurrencyDisplayViewModel* CurrencyDisplayViewModel;//[Offset: 0x60, Size: 0x8] 0x715d0daf80

--------------------------------
Class: ShopBundleGrantDisplayViewModel.SelectableItemViewModel.SDViewModel.Object // 71a48cd300
	BoolBindable CurrencyVisible;//[Offset: 0x940, Size: 0x70] 0x715d824c00
	BoolBindable HighlightVisibility;//[Offset: 0x9b0, Size: 0x70] 0x715d824c80
	VisibilityBindable AlreadyOwnedIndicatorVisibility;//[Offset: 0xa20, Size: 0x70] 0x715d824d00
	StyledBorderForegroundBindable EntitlementImageBrush;//[Offset: 0xa90, Size: 0x178] 0x715d824d80
	bool bCurrentlySelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc08, Size: 0x1] 0x715d824e00
	CurrencyDisplayViewModel* CurrencyViewModel;//[Offset: 0xc10, Size: 0x8] 0x715d824e80
	SlateBrush BundleIcon;//[Offset: 0xc18, Size: 0x88] 0x715d824f00
	void SetIsSelected(bool bInSelected);// 0x3d7e0b4 0x715d8314a0
	void EntitlementBoolChanged__DelegateSignature();// 0x45c6aa0 0x715d831580

--------------------------------
Class: ShopBundleGrantDisplayWidget.SelectableItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cd080
	CurrencyDisplayWidget* CurrencyDisplay;//[Offset: 0x2a0, Size: 0x8] 0x715d0dae80
	ShopBundleGrantDisplayViewModel* ShopBundleGrantDisplayViewModel;//[Offset: 0x2a8, Size: 0x8] 0x715d0daf00

--------------------------------
Class: ShopBundleInfoScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cce00
	ShopBundleInfoViewModel* ShopBundleInfoScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0dac00
	ShopBundleViewModel* ShopBundleVM;//[Offset: 0x2e8, Size: 0x8] 0x715d0dac80
	SDHorizontalBoxWrapper* BundleGrantWidgetContainer;//[Offset: 0x2f0, Size: 0x8] 0x715d0dad00
	CurrencyDisplayWidget* CostCurrencyDisplay;//[Offset: 0x2f8, Size: 0x8] 0x715d0dad80
	EntitlementSummaryWidget* EntitlementSummary;//[Offset: 0x300, Size: 0x8] 0x715d0dae00

--------------------------------
Class: ShopBundleInfoViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48ccb80
	EntitlementIconViewModel* EntitlementIconViewModel;//[Offset: 0x60, Size: 0x8] 0x715d0dc100
	TextBindable BundleOfferInfoText;//[Offset: 0x68, Size: 0x98] 0x715d0dc180
	TextBindable CultureInvariantBundleNameText;//[Offset: 0x100, Size: 0x98] 0x715d0dc200
	TextBindable BundleDescriptionText;//[Offset: 0x198, Size: 0x98] 0x715d0dc280
	TextBindable RevisedPriceText;//[Offset: 0x230, Size: 0x98] 0x715d0dc300
	TextBindable AllPricesIncludeTaxText;//[Offset: 0x2c8, Size: 0x98] 0x715d0dc380
	TextBindable ItemCountText;//[Offset: 0x360, Size: 0x98] 0x715d0dc400
	BoolBindable ShowItemCountText;//[Offset: 0x3f8, Size: 0x70] 0x715d0dc480
	BoolBindable ShowRevisedPriceText;//[Offset: 0x468, Size: 0x70] 0x715d0dc500
	BoolBindable ShowAllPricesIncludeTaxText;//[Offset: 0x4d8, Size: 0x70] 0x715d0dc580
	Int32Bindable PurchaseButtonState;//[Offset: 0x548, Size: 0x70] 0x715d0dc600
	BoolBindable PurchaseButtonEnabled;//[Offset: 0x5b8, Size: 0x70] 0x715d0da580
	TextBindable PurchaseRealPriceText;//[Offset: 0x628, Size: 0x98] 0x715d0da600
	BoolBindable AllContentsOwned;//[Offset: 0x6c0, Size: 0x70] 0x715d0da680
	ShopBundleViewModel* ShopBundleViewModel;//[Offset: 0x788, Size: 0x8] 0x715d0da700
	CurrencyDisplayViewModel* PriceCostVM1;//[Offset: 0x790, Size: 0x8] 0x715d0da780
	EntitlementSummaryViewModel* EntitlementSummaryViewModel;//[Offset: 0x798, Size: 0x8] 0x715d0da800
	ShopBundleGrantDisplayViewModel*[] GrantDisplayViewModels;//[Offset: 0x7a0, Size: 0x10] 0x715d0b18c0
	void OnSelectedEntitlementSelectedAgain(out const MetaTuningDataKey EntitlementId, const int64 Quantity);// 0x3d7ea9c 0x715d0c8200
	void OnPurchaseButtonPressed();// 0x3d7ea74 0x715d0c82e0
	void OnInAppPurchaseButtonPressed();// 0x3d7ea60 0x715d0c83c0
	void OnEntitlementSelected(out const MetaTuningDataKey EntitlementId, const int64 Quantity);// 0x3d7eb94 0x715d0c84a0
	void OnCancelButtonPressed();// 0x3d7ea88 0x715d0c8580
	bool IsPurchaseAvailable();// 0x3d7ec8c 0x715d0c8660
	void InitDescriptions(out const FText[] InDesc);// 0x3d7e918 0x715d0c8740

--------------------------------
Class: ShopBundleViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48cc900
	TextBindable TitleText;//[Offset: 0x50, Size: 0x98] 0x715d0db800
	TextBindable QuantityText;//[Offset: 0xe8, Size: 0x98] 0x715d0db880
	BoolBindable QuantityVisible;//[Offset: 0x180, Size: 0x70] 0x715d0db900
	StyledBorderForegroundBindable StyledBorder;//[Offset: 0x1f0, Size: 0x178] 0x715d0db980
	MarginBindable Frame;//[Offset: 0x368, Size: 0x88] 0x715d0dba00
	BrushBindable ImageBackground;//[Offset: 0x3f0, Size: 0x178] 0x715d0dba80
	BoolBindable PurchasingEnabled;//[Offset: 0x568, Size: 0x70] 0x715d0dbb00
	VisibilityBindable SoldOutVisibility;//[Offset: 0x5d8, Size: 0x70] 0x715d0dbb80
	TextBindable SoldOutText;//[Offset: 0x648, Size: 0x98] 0x715d0dbc00
	Int32Bindable CurrencySwitcherIndex;//[Offset: 0x6e0, Size: 0x70] 0x715d0dbc80
	TextBindable RealCurrencyPriceText;//[Offset: 0x750, Size: 0x98] 0x715d0dbd00
	BoolBindable ShowDiscount;//[Offset: 0x7e8, Size: 0x70] 0x715d0dbd80
	TextBindable DiscountPercentText;//[Offset: 0x858, Size: 0x98] 0x715d0dbe00
	TextBindable OriginalPriceText;//[Offset: 0x8f0, Size: 0x98] 0x715d0dbe80
	TextBindable BannerText;//[Offset: 0x988, Size: 0x98] 0x715d0dbf00
	BoolBindable ShowBannerText;//[Offset: 0xa20, Size: 0x70] 0x715d0dbf80
	BoolBindable ShowOriginalPrice;//[Offset: 0xa90, Size: 0x70] 0x715d0dc000
	BoolBindable IsNewBundle;//[Offset: 0xb00, Size: 0x70] 0x715d0dc080

--------------------------------
Class: ShopBundleWidget.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cc680
	ShopBundleViewModel* ShopBundleViewModel;//[Offset: 0x368, Size: 0x8] 0x715d0db700
	CurrencyDisplayWidget* CurrencyDisplay1;//[Offset: 0x370, Size: 0x8] 0x715d0db780
	void BundlePressed();// 0x3d7f354 0x715d0c8120

--------------------------------
Class: ShopScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cc400
	HorizontalBox* SectionContainer;//[Offset: 0x2e0, Size: 0x8] 0x715d0dd400
	float RightPaddingBetweenSections;//[Offset: 0x2e8, Size: 0x4] 0x715d0dd480
	ShopViewModel* ShopScreenVM;//[Offset: 0x2f0, Size: 0x8] 0x715d0dd500
	<GameplayTag,class ShopSectionWidget> WidgetTemplateMap;//[Offset: 0x2f8, Size: 0x50] 0x715cecdc00
	bool bUseWidgetPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x715d0dd600
	void UpdateShopTabs();// 0x45c6aa0 0x715d0c7da0
	void ScrollToShopSection(int Index);// 0x45c6aa0 0x715d0c7e80
	void ScrollToShopBundle(ShopBundleWidget* Bundle);// 0x45c6aa0 0x715d0c7f60
	Widget*[] GetAllSectionWidgets();// 0x3d7f828 0x715d0c8040

--------------------------------
Class: ShopViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48cbc80
	ShopSectionViewModel*[] ShopSectionViewModels;//[Offset: 0xc0, Size: 0x10] 0x715d0b3da0
	FText[] ShopSectionNames;//[Offset: 0xd0, Size: 0x10] 0x715d0b1500

--------------------------------
Class: ShopSectionViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48cc180
	TextBindable SectionTitle;//[Offset: 0x60, Size: 0x98] 0x715d0dd200
	DateTime SectionExpiry;//[Offset: 0xf8, Size: 0x8] 0x715d0dd280
	ShopBundleViewModel*[] BundleViewModels;//[Offset: 0x138, Size: 0x10] 0x715d0b16e0
	MetaTuningDataKey GetSectionId();// 0x3d7ff04 0x715d0c7cc0

--------------------------------
Class: ShopSectionWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cbf00
	SDConfigurableTextBlock* SectionTitle;//[Offset: 0x258, Size: 0x8] 0x715d0dce80
	SDConfigurableTextBlock* SectionAurebesh;//[Offset: 0x260, Size: 0x8] 0x715d0dcf00
	ShopSectionViewModel* ShopSectionViewModel;//[Offset: 0x268, Size: 0x8] 0x715d0dcf80
	ShopBundleWidget*[] BundleWidgets;//[Offset: 0x270, Size: 0x10] 0x715d0b15a0
	void SetFocusToFirstItem();// 0x3d80480 0x715d0c7a20
	void SetBundleWidgets(out const ShopBundleWidget*[] InBundleWidgets);// 0x3d80370 0x715d0c7b00
	ShopBundleWidget* GetBundle(FString BundleId);// 0x3d80494 0x715d0c7be0

--------------------------------
Class: SocialScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cba00
	SocialViewModel* SocialScreenVM;//[Offset: 0x268, Size: 0x8] 0x715d0dcd00

--------------------------------
Class: SocialViewModel.SDViewModel.Object // 71a48cb780

--------------------------------
Class: SuccessfulPurchaseScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48cb000
	SuccessfulPurchaseViewModel* SuccessfulPurchaseScreenVM;//[Offset: 0x2e0, Size: 0x8] 0x715d0dd780

--------------------------------
Class: SuccessfulPurchaseViewModel.SDViewModel.Object // 71a48cad80
	TextBindable LabelText;//[Offset: 0x58, Size: 0x98] 0x715d0df600
	TextBindable AurebeshText;//[Offset: 0xf0, Size: 0x98] 0x715d0df680
	TextBindable SecondaryText;//[Offset: 0x188, Size: 0x98] 0x715d0df700
	BoolBindable HasSecondaryText;//[Offset: 0x220, Size: 0x70] 0x715d0df780
	enum Rarity;//[Offset: 0x290, Size: 0x1] 0x715d0b3b20
	void AnimationFinished();// 0x3d826a8 0x715d0ca5e0

--------------------------------
Class: TitleDisplayViewModel.SDViewModel.Object // 71a48cab00
	TextBindable TitleText;//[Offset: 0x48, Size: 0x98] 0x715d0df580

--------------------------------
Class: TitleDisplayWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ca880
	Image* FrameImage;//[Offset: 0x258, Size: 0x8] 0x715d0df380
	UserWidget* HighlightDetail;//[Offset: 0x260, Size: 0x8] 0x715d0df400
	FName FrameColor;//[Offset: 0x268, Size: 0x8] 0x715d0df480
	TitleDisplayViewModel* TitleDisplayViewModel;//[Offset: 0x270, Size: 0x8] 0x715d0df500

--------------------------------
Class: TutorialConfigurationDataAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a48cf880
	class TutorialTask[] TutorialTasks;//[Offset: 0x38, Size: 0x10] 0x715d0b36c0
	FName[] TutorialTaskNames;//[Offset: 0x48, Size: 0x10] 0x715d0b3760
	class TutorialTask[] TutorialMatchTasks;//[Offset: 0x58, Size: 0x10] 0x715d0b38a0
	class ErroredTutorialTask* ErrorClass;//[Offset: 0x68, Size: 0x8] 0x715d0b3940
	class TutorialExperiment[] TutorialExperiments;//[Offset: 0x70, Size: 0x10] 0x715d0b3a80

--------------------------------
Class: TutorialTask.Object // 71a48e3f80
	bool bIsLastTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x715d7dd400
	FString BootState;//[Offset: 0x290, Size: 0x10] 0x715d7dd480
	bool bHasBegun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x715d7dd500
	bool WasLastPlayedMapFTUEMap();// 0x3d8b538 0x715d7cb760
	bool WasLastPlayedMap(FString InMapName);// 0x3d8b570 0x715d7cb840
	void UnpinHighlightPip(out const MetaTuningDataKey MetaTuningDataKey);// 0x3d8b6f0 0x715d7cb920
	void TriggerDeepLink(FString InLink);// 0x3d8b640 0x715d7cba00
	void StartUIBlockingTask();// 0x3d8bbf8 0x715d7cbae0
	void ShowLoginScreen();// 0x3d8ab60 0x715d7cbbc0
	void ShowHunterRosterScreen(const int VariantVersion);// 0x3d8aabc 0x715d7cbca0
	void SetTutorialKey(GameplayTag TutorialKey);// 0x3d8ba90 0x715d7cbd80
	void SetTemporaryTutorialKey(GameplayTag TutorialKey);// 0x3d8b9ec 0x715d7cbe60
	void SetGuideRecord(const FName ID, int Count);// 0x3d8b860 0x715d7cbf40
	bool RemoveUIBlocker(out const GameplayTag Tag);// 0x3d8adfc 0x715d7cc020
	void RemoveTemporaryTutorialKey(GameplayTag TutorialKey);// 0x3d8b948 0x715d7cc100
	void ReEvaluateCallback__DelegateSignature();// 0x45c6aa0 0x715d7ca960
	void PurchaseBundle(FString BundleId, const bool bIsFtueGift, const int MaxRetries);// 0x3d8acb8 0x715d7cc1e0
	void PinHighlightPip(out const MetaTuningDataKey MetaTuningDataKey);// 0x3d8b7a8 0x715d7cc2c0
	void OpenGameplayFTUEMap();// 0x3d8b62c 0x715d7cc3a0
	void OnStandardPopupComplete();// 0x3d8c3a4 0x715d7cc480
	void OnStandardPopupCanceled();// 0x3d8c388 0x715d7cc560
	void OnPurchaseBundleComplete(const bool bWasSuccessful);// 0x45c6aa0 0x715d7cc640
	void OnEnd(bool bAborted);// 0x3d8c3c0 0x715d7cc720
	void OnBegin();// 0x3d8c474 0x715d7cc800
	bool IsTutorialKeySet(GameplayTag TutorialKey);// 0x3d8bb34 0x715d7cc8e0
	bool IsPlayButtonActive();// 0x3d8a8e4 0x715d7cc9c0
	bool IsLastTask();// 0x3d8c5a4 0x715d7c90e0
	bool IsAtFrontOfQueue();// 0x3d8afd4 0x715d7c91c0
	bool HasPlayerReachedGivenLevel(const int TargetPlayerLevel);// 0x3d8a950 0x715d7c92a0
	bool HasFinishConditionBeenMet();// 0x3d8c5c0 0x715d7c9380
	bool HasCustomisedCharacter(out const MetaTuningDataKey CharacterKey);// 0x3d8b00c 0x715d7c9460
	bool HasBegun();// 0x3d8c588 0x715d7c9540
	bool GetUserIsAnonymous();// 0x3d8abac 0x715d7c9620
	bool GetUserAccountIsVerified();// 0x3d8ab74 0x715d7c9700
	MetaTuningDataKey GetTutorialHunterTargetSkinKey();// 0x3d8ac1c 0x715d7c97e0
	MetaTuningDataKey GetTutorialHunterSkinKey();// 0x3d8ac50 0x715d7c98c0
	MetaTuningDataKey GetTutorialHunterKey();// 0x3d8ac84 0x715d7c99a0
	int GetPlayerStat(out const GameplayTag InStatTag);// 0x3d8b47c 0x715d7c9a80
	GameplayTag GetHunterRosterTutorialKey();// 0x3d8a91c 0x715d7c9b60
	GameStateBase* GetGameState();// 0x3d8c490 0x715d7c9c40
	CosmeticLoadout GetCosmeticLoadout(out const MetaTuningDataKey CharacterKey);// 0x3d8b244 0x715d7c9d20
	MetaTuningDataKey[] GetCharacters();// 0x3d8b0d0 0x715d7c9e00
	FString GetBootState();// 0x3d8c504 0x715d7c9ee0
	bool GetAllowUserIsAnonymous();// 0x3d8abe4 0x715d7c9fc0
	AbilityLoadout GetAbilityLoadout(out const MetaTuningDataKey CharacterKey, out const MetaTuningDataKey GameModeKey);// 0x3d8b30c 0x715d7ca0a0
	void EndUIBlockingTask();// 0x3d8bbe4 0x715d7ca180
	bool DoesPlayerOwnEntitlement(out const MetaTuningDataKey EntitlementKey);// 0x3d8b180 0x715d7ca260
	bool DoesPlayerOwnAllGrants(FString GrantBundleKey);// 0x3d8aa00 0x715d7ca340
	void DestroyOverlay(TutorialOverlayItemViewModel* OwningViewModel);// 0x3d8c238 0x715d7ca420
	void CreateStandardPopupWithCancel(out const FText InTitle, out const FText InDescription, out const FText InButtonLabel, out const FText InCancelButtonLabel, FString InAurebeshTitle);// 0x3d8bc0c 0x715d7ca500
	void CreateStandardPopup(out const FText InTitle, out const FText InDescription, out const FText InButtonLabel, FString InAurebeshTitle);// 0x3d8bf7c 0x715d7ca5e0
	TutorialOverlayItemViewModel* CreateOverlay(class TutorialOverlayItemWidget InWidgetType);// 0x3d8c2dc 0x715d7ca6c0
	bool CanBegin();// 0x3d8c600 0x715d7ca7a0
	bool CanAbort();// 0x3d8c4c4 0x715d7ca880
	void BindOnReEvaluate(out const delegate InCallback);// 0x3d8a814 0x715d7caa40
	void ApplyUIBlocker(out const UIBlock Blocker);// 0x3d8aebc 0x715d7cab20

--------------------------------
Class: CosmeticLoadout // 714906dc00
	MetaTuningDataKey Skin;//[Offset: 0x0, Size: 0x8] 0x715d7da780
	MetaTuningDataKey EquipmentSkin;//[Offset: 0x8, Size: 0x8] 0x715d7da800
	MetaTuningDataKey IntroAnim;//[Offset: 0x10, Size: 0x8] 0x715d7da880
	MetaTuningDataKey VictoryAnim;//[Offset: 0x18, Size: 0x8] 0x715d7da900

--------------------------------
Class: AbilityLoadout // 714906dcc0
	MetaTuningDataKey GameModeID;//[Offset: 0x0, Size: 0x8] 0x715d7dac80
	MetaTuningDataKey[] Abilities;//[Offset: 0x8, Size: 0x10] 0x7148cdccc0

--------------------------------
Class: TutorialOverlayItemViewModel.SDViewModel.Object // 71a48e4e80
	void SetTutorialKey(GameplayTag InKey);// 0x3d88f18 0x715d0c9c40

--------------------------------
Class: TutorialOverlayItemWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e4c00
	Key[] InputLimitsKeys;//[Offset: 0x258, Size: 0x10] 0x715d0b3260
	bool bAnalogInputFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x715d101000
	bool bModalOverlayLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1] 0x715d101080
	float BackgroundRadius;//[Offset: 0x26c, Size: 0x4] 0x715d0df800
	float BackgroundDensity;//[Offset: 0x270, Size: 0x4] 0x715d0df880
	FName CenterPositionParamName;//[Offset: 0x274, Size: 0x8] 0x715d0df900
	FName RadiusParamName;//[Offset: 0x27c, Size: 0x8] 0x715d0df980
	FName DensityParamName;//[Offset: 0x284, Size: 0x8] 0x715d0dfa00
	MaterialInstanceDynamic* BackgroundMaterial;//[Offset: 0x290, Size: 0x8] 0x715d0dfa80
	TutorialOverlayItemViewModel* TutorialOverlayItemViewModel;//[Offset: 0x298, Size: 0x8] 0x715d0dfb00
	void UpdateBackgroundMaterial(float InRadius, float InDensity, out const Vector InCenterPosition);// 0x3d8940c 0x715d0c99a0
	Box2D GetTouchCutoutBox();// 0x3d893a0 0x715d0c9a80
	Image* GetBackground();// 0x45c6aa0 0x715d0c9b60

--------------------------------
Class: ErroredTutorialTask.TutorialTask.Object // 71a48e3d00
	FString ErroredClassName;//[Offset: 0x2b8, Size: 0x10] 0x715d100b00

--------------------------------
Class: TutorialExperiment.Object // 71a48e5100
	FString ExperimentName;//[Offset: 0x28, Size: 0x10] 0x715d0dfe80
	TutorialTask*[] MutateTaskArray(out const JsonBlueprintWrapper JsonObject, out const TutorialTask*[] InputList);// 0x3d88038 0x715d0c9d20
	static bool IsTaskInstanceOf(const TutorialTask* TaskToTest, const class TutorialTask[] ClassesToTestAgainst);// 0x3d87e48 0x715d0c9e00
	static FString GetStringFromJson(out const JsonBlueprintWrapper JsonObject, FString FieldName);// 0x3d87c94 0x715d0c9ee0
	static int GetIntFromJson(out const JsonBlueprintWrapper JsonObject, FString FieldName);// 0x3d87b3c 0x715d0c9fc0
	static bool GetBoolFromJson(out const JsonBlueprintWrapper JsonObject, FString FieldName);// 0x3d879e0 0x715d0ca0a0
	static TutorialTask* ConstructTask(const class TutorialTask WhichClass);// 0x3d87f94 0x715d0ca180

--------------------------------
Class: JsonBlueprintWrapper // 715da91900

--------------------------------
Class: TutorialOverlayScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e4980
	CanvasPanel* OverlayPanel;//[Offset: 0x2e0, Size: 0x8] 0x715d100d80
	TutorialOverlayViewModel* TutorialOverlayViewModel;//[Offset: 0x2e8, Size: 0x8] 0x715d100e00
	void OnViewModelRemoved(TutorialOverlayItemViewModel* InViewModel);// 0x3d89a90 0x715d0c97e0
	void OnViewModelAdded(TutorialOverlayItemViewModel* InViewModel);// 0x3d89b34 0x715d0c98c0

--------------------------------
Class: TutorialOverlayViewModel.SDViewModel.Object // 71a48e4700
	<TutorialOverlayItemViewModel*> OverlayItemViewModels;//[Offset: 0xa8, Size: 0x50] 0x715d0b31c0

--------------------------------
Class: TutorialRosterGrantScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e4480
	WidgetSwitcher* HunterRosterWidgetSwitcher;//[Offset: 0x2e0, Size: 0x8] 0x715d100c00
	TutorialRosterGrantViewModel* TutorialRosterGrantVM;//[Offset: 0x2e8, Size: 0x8] 0x715d100c80

--------------------------------
Class: TutorialRosterGrantViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48e4200
	Int32Bindable HunterRosterIndex;//[Offset: 0x60, Size: 0x70] 0x715d100b80
	void DismissPopup();// 0x3d8a3f4 0x715d0c9700

--------------------------------
Class: WeeklyChallengeDetailsScreen.ChallengeDetailsScreenBase.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e3a80
	ChallengeDetailsWidget* WeeklyCompletionChallengeWidget;//[Offset: 0x300, Size: 0x8] 0x715d100a80

--------------------------------
Class: WeeklyChallengesViewModel.ChallengesBaseViewModel.BAInjectableViewModel.SDViewModel.Object // 71a48e3800
	ChallengeDetailsViewModel* WeeklyCompletionChallengeVM;//[Offset: 0x3f0, Size: 0x8] 0x715d100a00

--------------------------------
Class: WidgetPrePoolSettings.DeveloperSettings.Object // 71a48e3580
	WidgetPrePoolDetail[] WidgetsToPrePool;//[Offset: 0x38, Size: 0x10] 0x715d0b3120

--------------------------------
Class: WidgetPrePoolDetail // 715da94900
	class SDUserWidget* WidgetClass;//[Offset: 0x0, Size: 0x28] 0x715d89b3c0
	int NumCopies;//[Offset: 0x28, Size: 0x4] 0x715da89280

--------------------------------
Class: BaseSettingsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e3080

--------------------------------
Class: AbilitiesTabSettingsScreen.BaseSettingsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e3300
	ScrollBox* AbilitiesMappingScrollBox;//[Offset: 0x2e0, Size: 0x8] 0x715d100200
	SettingsNestedButton* HuntersNestedButton;//[Offset: 0x2e8, Size: 0x8] 0x715d100280
	SettingsMappingButton* AbilityOneButtonMapping;//[Offset: 0x2f0, Size: 0x8] 0x715d100300
	SettingsMappingButton* AbilityTwoButtonMapping;//[Offset: 0x2f8, Size: 0x8] 0x715d100380
	SettingsMappingButton* AbilityThreeButtonMapping;//[Offset: 0x300, Size: 0x8] 0x715d100400
	SettingsMappingButton* UltimateButtonMapping;//[Offset: 0x308, Size: 0x8] 0x715d100480
	SettingsMappingButton* PrimaryButtonMapping;//[Offset: 0x310, Size: 0x8] 0x715d100500
	SettingsMappingButton* ZoomTargetLockButtonMapping;//[Offset: 0x318, Size: 0x8] 0x715d100580
	SettingsMappingButton* MantleButtonMapping;//[Offset: 0x320, Size: 0x8] 0x715d100600
	SettingsMappingButton* GyroResetButtonMapping;//[Offset: 0x328, Size: 0x8] 0x715d100680
	AbilitiesTabSettingsViewModel* AbilitiesTabSettingsViewModel;//[Offset: 0x330, Size: 0x8] 0x715d100700
	SettingsMappingButton*[] SettingButtonMapingArray;//[Offset: 0x338, Size: 0x10] 0x715d0b2f40
	<enum,AbilityEntitlementInfoHelper> InputToEntitlementMap;//[Offset: 0x348, Size: 0x50] 0x715cecdb40
	void UpdateNotification(enum InputAction);// 0x3e3ea70 0x715d0c91c0
	void ResetHunterAbilitiesSettings();// 0x3e3ea20 0x715d0c92a0
	void ResetAllHuntersAbilitiesSettings();// 0x3e3ea34 0x715d0c9380
	void RefreshButtonState();// 0x3e3ea5c 0x715d0c9460
	void OnRefreshButtonState();// 0x45c6aa0 0x715d0c9540
	void OnBackButtonPressed();// 0x3e3ea48 0x715d0c9620

--------------------------------
Class: SettingsNestedButton.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b64700
	SettingsBaseDetailsData* SettingsDetailsData;//[Offset: 0x3a0, Size: 0x8] 0x715cd90780
	FText NestedMenuTitle;//[Offset: 0x3a8, Size: 0x18] 0x715cd90800

--------------------------------
Class: SettingsBaseDetailsData.Object // 71a4b3a600
	FText TitleText;//[Offset: 0x30, Size: 0x18] 0x715cd6fe80
	FText GetTitleText();// 0x69b6ebc 0x715cd55800
	enum GetDetailsScreenType();// 0x69b6f8c 0x715cd558e0

--------------------------------
Class: SettingsMappingButton.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b64980
	SettingsBaseDetailsData* SettingsDetailsData;//[Offset: 0x3c0, Size: 0x8] 0x715cd90880
	<enum,DataTable*> GamepadGlyphsDT;//[Offset: 0x3c8, Size: 0x50] 0x715cd32ec0
	<enum,DataTable*> NotificationGlyphsDT;//[Offset: 0x418, Size: 0x50] 0x715cd32f80
	Key GamepadKey;//[Offset: 0x468, Size: 0x18] 0x715cd90b00
	Key GamepadCloseInstructionKey;//[Offset: 0x480, Size: 0x18] 0x715cd90b80
	GamepadGlyph* Glyph;//[Offset: 0x498, Size: 0x8] 0x715cd90c00
	FText PrimaryText;//[Offset: 0x4b8, Size: 0x18] 0x715cd90c80
	TextBlock* PrimaryTextBlock;//[Offset: 0x4d0, Size: 0x8] 0x715cd90d00
	void SetInstructionsVisibility(bool bIsVisible);// 0x69bd0b0 0x715cd583c0
	void SetInstructionsText(out const FText InText);// 0x45c6aa0 0x715cd584a0
	void SetGamepadKey(out const Key InKey);// 0x69bd224 0x715cd58580
	void SetDescriptionText(out const FText InText);// 0x45c6aa0 0x715cd58660
	void SetAbilityIcon(out const SlateBrush InBrush, bool bIsVisible);// 0x45c6aa0 0x715cd58740
	void OnButtonHintAnimationFinished();// 0x69bd088 0x715cd58820
	void OnButtonClick();// 0x69bd09c 0x715cd58900
	Key GetGamepadKey();// 0x69bd13c 0x715cd589e0
	FText GetDescriptionText();// 0x69bd334 0x715cd58ac0

--------------------------------
Class: AbilitiesTabSettingsViewModel.BaseSettingsViewModel.SDViewModel.Object // 71a48e2e00
	void SetCurrentHunterData(out const MetaTuningDataKey HunterKey, out const FText HunterName, bool SetForced);// 0x3e3f378 0x715d0cc480
	void SaveHunterGamepadButtonMappings(out const MetaTuningDataKey CharacterId, enum InputAction, out const Key NewKey);// 0x3e3f08c 0x715d0cc560
	void SaveAllHuntersGamepadButtonMappings(enum InputAction, out const Key Key);// 0x3e3f22c 0x715d0cc640
	void ResetHunterAbilitiesSettings();// 0x3e3f52c 0x715d0cc720
	void ResetAllHuntersAbilitiesSettings();// 0x3e3f540 0x715d0cc800
	void ReportHunterChangeClicked();// 0x3e3f078 0x715d0cc8e0
	FText GetCurrentHunterName();// 0x3e3f570 0x715d0cc9c0
	MetaTuningDataKey GetCurrentHunterId();// 0x3e3f554 0x715d0c90e0

--------------------------------
Class: BaseSettingsViewModel.SDViewModel.Object // 71a48e2b80

--------------------------------
Class: AbilityEntitlementInfoHelper // 715da94840
	HuntersAbilityEntitlement* AbilityEntitlement;//[Offset: 0x0, Size: 0x8] 0x715da89180
	int AbilityId;//[Offset: 0x8, Size: 0x4] 0x715da89200

--------------------------------
Class: HuntersAbilityEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2ba00
	FText ProsDescription;//[Offset: 0x128, Size: 0x18] 0x715cd2d380
	FText InverseProsDescription;//[Offset: 0x140, Size: 0x18] 0x715cd2d400
	FText ConsDescription;//[Offset: 0x158, Size: 0x18] 0x715cd2d480
	FText InverseConsDescription;//[Offset: 0x170, Size: 0x18] 0x715cd2d500
	bool bOverrideModuleButtonImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1] 0x715cd2d580
	SlateBrush CustomModuleButtonImage;//[Offset: 0x190, Size: 0x88] 0x715cd2d600
	bool bShowCustomPanelImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x715cd2d680
	SlateBrush CustomModulePanelImage;//[Offset: 0x220, Size: 0x88] 0x715cd2b600
	DataAsset* CharacterAbilityAsset;//[Offset: 0x2a8, Size: 0x28] 0x715cd2b680
	FileMediaSource* AbilityVideoAsset;//[Offset: 0x2d0, Size: 0x28] 0x715cd2b700

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object // 71a49c5b00
	FString FilePath;//[Offset: 0x88, Size: 0x10] 0x715cadcc80
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x715cadcd00
	void SetFilePath(FString Path);// 0x57ccc1c 0x715cae1580

--------------------------------
Class: AccountTabSettingsScreen.BaseSettingsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e2900
	SettingsNestedButton* LanguageButton;//[Offset: 0x2e0, Size: 0x8] 0x715d101880
	SettingsButton* TermsOfServiceButton;//[Offset: 0x2e8, Size: 0x8] 0x715d101900
	SettingsButton* PrivacyPolicyButton;//[Offset: 0x2f0, Size: 0x8] 0x715d101980
	SettingsButton* CCPAButton;//[Offset: 0x2f8, Size: 0x8] 0x715d101a00
	SettingsButton* PINButton;//[Offset: 0x300, Size: 0x8] 0x715d101a80
	SettingsButton* CustomerSupportButton;//[Offset: 0x308, Size: 0x8] 0x715d101b00
	SettingsButton* LicensedTechnologyButton;//[Offset: 0x310, Size: 0x8] 0x715d101b80
	Widget* EmailAccountContainer;//[Offset: 0x318, Size: 0x8] 0x715d101c00
	TextBlock* EmailLabel;//[Offset: 0x320, Size: 0x8] 0x715d101c80
	MatchSettingsTabAccountAndPrivacyViewModel* MatchSettingsTabAccountAndPrivacyViewModel;//[Offset: 0x328, Size: 0x8] 0x715d101d00
	AccountTabSettingsViewModel* AccountTabSettingsViewModel;//[Offset: 0x330, Size: 0x8] 0x715d101d80

--------------------------------
Class: SettingsButton.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3ab00
	SettingsBaseDetailsData* SettingsDetailsData;//[Offset: 0x3a0, Size: 0x8] 0x715cd6ec00

--------------------------------
Class: MatchSettingsTabAccountAndPrivacyViewModel.MatchSettingsTabViewModel.SDViewModel.Object // 71a48ee480
	TextBindable ZIDBindable;//[Offset: 0x78, Size: 0x98] 0x715d10e380
	TextBindable BuildIDBindable;//[Offset: 0x110, Size: 0x98] 0x715d10e400
	TextBindable ContentIDBindable;//[Offset: 0x1a8, Size: 0x98] 0x715d10e480
	TextBindable TuningDataVersionBindable;//[Offset: 0x240, Size: 0x98] 0x715d10e500
	TextBindable EmailAddressBindable;//[Offset: 0x2d8, Size: 0x98] 0x715d10e580
	NameBindable EmailAddressColorBindable;//[Offset: 0x370, Size: 0x78] 0x715d10e600
	BoolBindable EmailAddressIsVerified;//[Offset: 0x3e8, Size: 0x70] 0x715d10e680
	BoolBindable CcpaButtonVisible;//[Offset: 0x458, Size: 0x70] 0x715d10e700
	TextBindable CcpaButtonText;//[Offset: 0x4c8, Size: 0x98] 0x715d10c680
	BoolBindable AreAccountActionsAllowed;//[Offset: 0x560, Size: 0x70] 0x715d10c700
	BoolBindable ShowDeleteAccountButton;//[Offset: 0x5d0, Size: 0x70] 0x715d10c780
	BoolBindable IsLogoutActionAllowed;//[Offset: 0x640, Size: 0x70] 0x715d10c800
	BoolBindable IsConnectAppleAllowed;//[Offset: 0x6b0, Size: 0x70] 0x715d10c880
	BoolBindable IsConnectFacebookAllowed;//[Offset: 0x720, Size: 0x70] 0x715d10c900
	BoolBindable IsConnectEmailAllowed;//[Offset: 0x790, Size: 0x70] 0x715d10c980
	BoolBindable ChangeLanguageSelectorEnabled;//[Offset: 0x800, Size: 0x70] 0x715d10ca00
	BoolBindable IsAppleConnected;//[Offset: 0x870, Size: 0x70] 0x715d10ca80
	BoolBindable IsFacebookConnected;//[Offset: 0x8e0, Size: 0x70] 0x715d10cb00
	FString TermsOfServiceUrl;//[Offset: 0x950, Size: 0x10] 0x715d10cb80
	FString PrivacyPolicyUrl;//[Offset: 0x960, Size: 0x10] 0x715d10cc00
	StringTable* SelectableLanguages;//[Offset: 0x9e8, Size: 0x8] 0x715d10cc80
	void SetSelectedMatchmakingRegion(FString InSelectedRegion);// 0x3e5b36c 0x715d115b80
	void SetPushNotificationsEnabled(bool Enabled);// 0x3e5b41c 0x715d115c60
	void OnUserSelectedLanguage(FText SelectedItem, byte SelectionType);// 0x3e5b6f4 0x715d115d40
	void OnUpdateEmailPressed();// 0x3e5b344 0x715d115e20
	void OnPINButtonPressed();// 0x3e5b308 0x715d115f00
	void OnLogOutButtonPressed();// 0x3e5b358 0x715d115fe0
	void OnLicensingButtonPressed();// 0x3e5b2e0 0x715d1160c0
	void OnHelpshiftButtonPressed();// 0x3e5b2cc 0x715d1161a0
	void OnDeleteAccountButtonPressed();// 0x3e5b2b8 0x715d116280
	void OnConnectFacebookPressed();// 0x3e5b31c 0x715d116360
	void OnConnectApplePressed();// 0x3e5b330 0x715d116440
	void OnCcpaButtonPressed();// 0x3e5b2f4 0x715d116520
	FString GetSelectedMatchmakingRegion();// 0x3e5b500 0x715d116600
	bool GetPushNotificationsEnabled();// 0x3e5b4c8 0x715d1166e0
	<FString,int> GetMatchmakingRegions();// 0x3e5b5b0 0x715d1167c0
	FString GetCurrentSelectedLanguageOption();// 0x3e5b644 0x715d1168a0
	static FString GetBuildVersion();// 0x3e5b208 0x715d116980

--------------------------------
Class: MatchSettingsTabViewModel.SDViewModel.Object // 71a48eee80

--------------------------------
Class: AccountTabSettingsViewModel.BaseSettingsViewModel.SDViewModel.Object // 71a48e2680
	void ReportLanguageButtonClicked();// 0x3e3fe00 0x715d0cc3a0

--------------------------------
Class: CharacterSettingsDetailsItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e2180
	CharacterSettingsDetailsItemViewModel* CharacterSettingsDetailsItemViewModel;//[Offset: 0x288, Size: 0x8] 0x715d101700
	void OnUpdateCharacterPortrait();// 0x45c6aa0 0x715d0cc100
	void OnChangedDefaultHunterSettings(bool InChanged);// 0x45c6aa0 0x715d0cc1e0
	void OnChangedDefaultAllHuntersSettings(bool InChanged);// 0x45c6aa0 0x715d0cc2c0

--------------------------------
Class: CharacterSettingsDetailsItemViewModel.SDViewModel.Object // 71a48e1780
	TextBindable CharacterName;//[Offset: 0x48, Size: 0x98] 0x715d103080
	Texture2D* CharacterPortrait;//[Offset: 0xe0, Size: 0x8] 0x715d103100
	BrushBindable ClassIconBrush;//[Offset: 0xe8, Size: 0x178] 0x715d103180
	void CharacterDetailsItemTapped();// 0x3e414f8 0x715d0cb680
	void CharacterDetailsAllHuntersTapped();// 0x3e414e4 0x715d0cb760

--------------------------------
Class: AllHuntersCharacterSettingsDetailsWidget.CharacterSettingsDetailsItemWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e2400

--------------------------------
Class: AudioTabSettingsScreen.BaseSettingsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e1f00
	SettingsSliderGamepad* MusicVolumeSlider;//[Offset: 0x2e0, Size: 0x8] 0x715d101200
	SettingsSliderGamepad* AmbientSFXVolumeSlider;//[Offset: 0x2e8, Size: 0x8] 0x715d101280
	SettingsSliderGamepad* GameplaySFXVolumeSlider;//[Offset: 0x2f0, Size: 0x8] 0x715d101300
	SettingsSliderGamepad* CharacterVoicesVolumeSlider;//[Offset: 0x2f8, Size: 0x8] 0x715d101380
	AudioTabSettingsViewModel* AudioTabSettingsViewModel;//[Offset: 0x300, Size: 0x8] 0x715d101400
	void OnResetItemClicked();// 0x3e405ec 0x715d0cbae0
	void OnResetAudioOptionToDefaults(const byte Channel);// 0x3e40534 0x715d0cbbc0
	void OnResetAllAudio();// 0x3e405d8 0x715d0cbca0
	void OnMusicVolumeChanged(float InVolume);// 0x3e407ec 0x715d0cbd80
	void OnGameplaySFXVolumeChanged(float InVolume);// 0x3e406a4 0x715d0cbe60
	void OnCharacterVoicesVolumeChanged(float InVolume);// 0x3e40600 0x715d0cbf40
	void OnAmbientSFXVolumeChanged(float InVolume);// 0x3e40748 0x715d0cc020

--------------------------------
Class: SettingsSliderGamepad.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b63d00
	delegate SettingsSliderGamepadValueChanged;//[Offset: 0x3a0, Size: 0x10] 0x715cd92d80
	SettingsBaseDetailsData* SettingsDetailsData;//[Offset: 0x3b0, Size: 0x8] 0x715cd92e00
	SettingsSlider* SettingsSlider;//[Offset: 0x3b8, Size: 0x8] 0x715cd92e80
	float DefaultValue;//[Offset: 0x3c0, Size: 0x4] 0x715cd92f00
	float MinValue;//[Offset: 0x3c4, Size: 0x4] 0x715cd92f80
	float MaxValue;//[Offset: 0x3c8, Size: 0x4] 0x715cd93000
	float StepValue;//[Offset: 0x3cc, Size: 0x4] 0x715cd93080
	int MinIntegralDigits;//[Offset: 0x3d0, Size: 0x4] 0x715cd93100
	int MaxIntegralDigits;//[Offset: 0x3d4, Size: 0x4] 0x715cd93180
	int MinFractionalDigits;//[Offset: 0x3d8, Size: 0x4] 0x715cd91100
	int MaxFractionalDigits;//[Offset: 0x3dc, Size: 0x4] 0x715cd91180
	bool bRemapNativeValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1] 0x715cd91200
	float NativeMinValue;//[Offset: 0x3e4, Size: 0x4] 0x715cd91280
	float NativeMaxValue;//[Offset: 0x3e8, Size: 0x4] 0x715cd91300
	void UpdateSliderVisuals(float InValue);// 0x69bf798 0x715cd5ab20
	void UpdateSliderDefaultValue(float InValue);// 0x69bf6f4 0x715cd5ac00
	void SetValue(float InValue);// 0x69bf83c 0x715cd5ace0
	void CommitValue(float InValue);// 0x69bf650 0x715cd57400

--------------------------------
Class: SettingsSlider.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b63f80
	delegate OnSettingsSliderValueChanged;//[Offset: 0x288, Size: 0x10] 0x715cd91580
	SDConfigurableTextBlock* TextValue;//[Offset: 0x298, Size: 0x8] 0x715cd91600
	Slider* MainSlider;//[Offset: 0x2a0, Size: 0x8] 0x715cd91680
	float DefaultValue;//[Offset: 0x2a8, Size: 0x4] 0x715cd91700
	float MinValue;//[Offset: 0x2ac, Size: 0x4] 0x715cd91780
	float MaxValue;//[Offset: 0x2b0, Size: 0x4] 0x715cd91800
	float StepValue;//[Offset: 0x2b4, Size: 0x4] 0x715cd91880
	int MinIntegralDigits;//[Offset: 0x2b8, Size: 0x4] 0x715cd91900
	int MaxIntegralDigits;//[Offset: 0x2bc, Size: 0x4] 0x715cd91980
	int MinFractionalDigits;//[Offset: 0x2c0, Size: 0x4] 0x715cd91a00
	int MaxFractionalDigits;//[Offset: 0x2c4, Size: 0x4] 0x715cd91a80
	Image* DefaultValueLine;//[Offset: 0x2c8, Size: 0x8] 0x715cd91b00
	Widget* LeftBox;//[Offset: 0x2d0, Size: 0x8] 0x715cd91b80
	Widget* RightBox;//[Offset: 0x2d8, Size: 0x8] 0x715cd91c00
	void UpdateSliderVisuals(float InValue);// 0x69becec 0x715cd574e0
	void SetValue(float InValue);// 0x69bed90 0x715cd575c0
	void SetSliderFormatSettings(float InMinValue, float InMaxValue, float InStepValue, int InMinIntegralDigits, int InMaxIntegralDigits, int InMinFractionalDigits, int InMaxFractionalDigits);// 0x69bee34 0x715cd576a0
	void SetSliderDefaultValues(float InDefaultValue);// 0x69bf064 0x715cd57780
	void OnPostSliderVisualUpdateEvent();// 0x45c6aa0 0x715cd57860
	void CommitValue(float InValue);// 0x69bec48 0x715cd57940

--------------------------------
Class: AudioTabSettingsViewModel.BaseSettingsViewModel.SDViewModel.Object // 71a48e1c80
	void ReportResetAllAudioEvent();// 0x3e40d78 0x715d0cba00

--------------------------------
Class: BaseSettingsDetailsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e1a00
	void OnSettingsDetailsDataUpdated(SettingsBaseDetailsData* InSettingsDetailsData);// 0x3e410dc 0x715d0cb840
	void OnSettingsDetailsDataReceived(SettingsBaseDetailsData* InSettingsDetailsData);// 0x3e41188 0x715d0cb920

--------------------------------
Class: CharacterSettingsDetailsScreen.BaseSettingsDetailsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e1500
	class CharacterSettingsDetailsItemWidget* CharacterSettingsDetailsItemWidgetClass;//[Offset: 0x2e0, Size: 0x8] 0x715d0b2c20
	class AllHuntersCharacterSettingsDetailsWidget* AllHuntersCharacterSettingsDetailsWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d0b2cc0
	GridPanel* CharacterItemsDetailsPanel;//[Offset: 0x2f0, Size: 0x8] 0x715d102e80
	CharacterSettingsDetailsViewModel* CharacterSettingsDetailsViewModel;//[Offset: 0x2f8, Size: 0x8] 0x715d102f00
	TextBlock* TitleText;//[Offset: 0x300, Size: 0x8] 0x715d102f80
	CharacterSettingsDetailsItemWidget*[] CharacterSettingsDetailsItemWidgets;//[Offset: 0x308, Size: 0x10] 0x715d0b2d60

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object // 71a49ba380
	float[] ColumnFill;//[Offset: 0x120, Size: 0x10] 0x715ca76320
	float[] RowFill;//[Offset: 0x130, Size: 0x10] 0x715ca763c0
	void SetRowFill(int ColumnIndex, float Coefficient);// 0x55bd058 0x715ca88120
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0x55bd140 0x715ca88200
	GridSlot* AddChildToGrid(Widget* Content, int InRow, int InColumn);// 0x55bd228 0x715ca882e0

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object // 71a49ba100
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x715caa5700
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x715caa5780
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x715caa5800
	int Row;//[Offset: 0x4c, Size: 0x4] 0x715caa5880
	int RowSpan;//[Offset: 0x50, Size: 0x4] 0x715caa5900
	int Column;//[Offset: 0x54, Size: 0x4] 0x715caa5980
	int ColumnSpan;//[Offset: 0x58, Size: 0x4] 0x715caa5a00
	int Layer;//[Offset: 0x5c, Size: 0x4] 0x715caa5a80
	Vector2D Nudge;//[Offset: 0x60, Size: 0x8] 0x715caa5b00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55bd788 0x715ca87940
	void SetRowSpan(int InRowSpan);// 0x55bdb5c 0x715ca87a20
	void SetRow(int InRow);// 0x55bdc00 0x715ca87b00
	void SetPadding(Margin InPadding);// 0x55bdca4 0x715ca87be0
	void SetNudge(Vector2D InNudge);// 0x55bd8d0 0x715ca87cc0
	void SetLayer(int InLayer);// 0x55bd970 0x715ca87da0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55bd82c 0x715ca87e80
	void SetColumnSpan(int InColumnSpan);// 0x55bda14 0x715ca87f60
	void SetColumn(int InColumn);// 0x55bdab8 0x715ca88040

--------------------------------
Class: CharacterSettingsDetailsViewModel.SettingsDetailsViewModel.SDViewModel.Object // 71a48e1280
	CharacterSettingsDetailsItemViewModel*[] CharacterDetailsItemsViewModels;//[Offset: 0x78, Size: 0x10] 0x715d0b2a40
	GridPanel* CharacterDetailsGridPanel;//[Offset: 0x98, Size: 0x8] 0x715d102c80
	void SetCharacterSettingsDetailsItemWidgetClass(out const class CharacterSettingsDetailsItemWidget InCharacterSettingsDetailsItemWidgetClass);// 0x3e42158 0x715d0cb220
	void SetCharacterDetailsGridPanel(GridPanel* InGridPanel);// 0x3e42000 0x715d0cb300
	void SetAllHuntersCharacterSettingsDetailsWidgetClass(out const class AllHuntersCharacterSettingsDetailsWidget InAllHuntersCharacterSettingsDetailsWidgetClass);// 0x3e420a4 0x715d0cb3e0
	void ReportOnBackPressedEvent();// 0x3e41fd8 0x715d0cb4c0
	void ReportCharacterDetailsScreenCreated();// 0x3e41fec 0x715d0cb5a0

--------------------------------
Class: SettingsDetailsViewModel.SDViewModel.Object // 71a48e1000
	delegate OnSettingsDetailsDataInitialized;//[Offset: 0x48, Size: 0x10] 0x715d102d80
	delegate OnSettingsDetailsDataUpdated;//[Offset: 0x58, Size: 0x10] 0x715d102e00

--------------------------------
Class: ControllerTypesSettingsDetailsScreen.BaseSettingsDetailsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e0d80
	SDConfigurableTextBlock* TitleTextBlock;//[Offset: 0x2e0, Size: 0x8] 0x715d102880
	SDConfigurableTextBlock* DescriptionTextBlock;//[Offset: 0x2e8, Size: 0x8] 0x715d102900
	SettingsCheckBoxButton* ProControllerToggle;//[Offset: 0x2f0, Size: 0x8] 0x715d102980
	SettingsCheckBoxButton* JoyConToggle;//[Offset: 0x2f8, Size: 0x8] 0x715d102a00
	ControllerTypesSettingsDetailsViewModel* ControllerTypesSettingsDetailsViewModel;//[Offset: 0x300, Size: 0x8] 0x715d102a80
	void OnProControllerToggleStateSet();// 0x3e42688 0x715d0caea0
	void OnProContollerToggleStateChanged(bool NewToggled);// 0x3e4275c 0x715d0caf80
	void OnJoyConToggleStateSet();// 0x3e4269c 0x715d0cb060
	void OnJoyConToggleStateChanged(bool NewToggled);// 0x3e426b0 0x715d0cb140

--------------------------------
Class: SettingsCheckBoxButton.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3a880
	delegate OnToggleStateChanged;//[Offset: 0x2c0, Size: 0x10] 0x715cd6e780
	Button* ButtonCheckbox;//[Offset: 0x2d0, Size: 0x8] 0x715cd6e800
	Image* CheckmarkImage;//[Offset: 0x2d8, Size: 0x8] 0x715cd6e880
	HuntersImage* CheckmarkPanel;//[Offset: 0x2e0, Size: 0x8] 0x715cd6e900
	LinearColor PanelColorToggled;//[Offset: 0x2e8, Size: 0x10] 0x715cd6e980
	LinearColor PanelColorNotToggled;//[Offset: 0x2f8, Size: 0x10] 0x715cd6ea00
	bool bIsToggled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x715cd6ea80
	bool bBlockInputWhenToggleOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1] 0x715cd6eb00
	SettingsBaseDetailsData* SettingsDetailsData;//[Offset: 0x310, Size: 0x8] 0x715cd6eb80
	void OnButton_CheckBoxClicked();// 0x69b69b0 0x715cd559c0

--------------------------------
Class: ControllerTypesSettingsDetailsViewModel.SettingsDetailsViewModel.SDViewModel.Object // 71a48e0b00
	void ReportOnBackPressedEvent();// 0x3e42ce0 0x715d0cadc0

--------------------------------
Class: ControlsTabSettingsScreen.BaseSettingsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e0880
	SettingsToggleButton* InvertXAxisButton;//[Offset: 0x2e0, Size: 0x8] 0x715d103300
	SettingsToggleButton* InvertYAxisButton;//[Offset: 0x2e8, Size: 0x8] 0x715d103380
	SettingsToggleButton* SwapMoveLookStickButton;//[Offset: 0x2f0, Size: 0x8] 0x715d103400
	SettingsToggleButton* MeleeFiringModeRadioButtons;//[Offset: 0x2f8, Size: 0x8] 0x715d103480
	SettingsToggleButton* RangedFiringModeRadioButtons;//[Offset: 0x300, Size: 0x8] 0x715d103500
	SettingsToggleButton* AimModeRadioButtons;//[Offset: 0x308, Size: 0x8] 0x715d103580
	SettingsToggleButton* ZTargetingModeRadioButtons;//[Offset: 0x310, Size: 0x8] 0x715d103600
	SettingsToggleButton* AbilityAutoLockCameraToggle;//[Offset: 0x318, Size: 0x8] 0x715d103680
	SettingsToggleButton* InMatchTipsToggle;//[Offset: 0x320, Size: 0x8] 0x715d103700
	SettingsToggleButton* GyroEnableButton;//[Offset: 0x328, Size: 0x8] 0x715d103780
	SettingsToggleButton* GyroAxisSelectorButton;//[Offset: 0x330, Size: 0x8] 0x715d103800
	SettingsToggleButton* GyroInvertXAxisButton;//[Offset: 0x338, Size: 0x8] 0x715d103880
	SettingsToggleButton* GyroInvertYAxisButton;//[Offset: 0x340, Size: 0x8] 0x715d103900
	SettingsToggleButton* GyroDisableWhenUsingJoysticksButton;//[Offset: 0x348, Size: 0x8] 0x715d103980
	SettingsToggleButton* EnableGyroOnlyWithADSButton;//[Offset: 0x350, Size: 0x8] 0x715d103a00
	SettingsSliderGamepad* HDRumbleIntensitySlider;//[Offset: 0x358, Size: 0x8] 0x715d103a80
	SettingsToggleButton* HDRumbleUIButton;//[Offset: 0x360, Size: 0x8] 0x715d103b00
	SettingsToggleButton* HDRumbleDealingDamageButton;//[Offset: 0x368, Size: 0x8] 0x715d103b80
	SettingsToggleButton* HDRumbleReceivingDamageButton;//[Offset: 0x370, Size: 0x8] 0x715d103c00
	SettingsToggleButton* HDRumbleAbilityButton;//[Offset: 0x378, Size: 0x8] 0x715d103c80
	SettingsToggleButton* HDRumbleContextualButton;//[Offset: 0x380, Size: 0x8] 0x715d103d00
	ControlsTabSettingsViewModel* ControlsTabSettingsViewModel;//[Offset: 0x388, Size: 0x8] 0x715d103d80
	void RefreshButtonState();// 0x3e43048 0x715d0cd360
	void OnZTargetingModeRadioButtonPressed(int Value);// 0x3e43954 0x715d0cd440
	void OnSwapMoveLookStickButtonPressed(int Value);// 0x3e43be4 0x715d0cd520
	void OnResetItemClicked();// 0x3e43034 0x715d0cd600
	void OnRangedFiringModeRadioButtonPressed(int Value);// 0x3e43a9c 0x715d0cd6e0
	void OnMeleeFiringModeRadioButtonPressed(int Value);// 0x3e43b40 0x715d0cd7c0
	void OnInvertYAxisButtonPressed(int Value);// 0x3e43c88 0x715d0cd8a0
	void OnInvertXAxisButtonPressed(int Value);// 0x3e43d2c 0x715d0cd980
	void OnInMatchTipsToggleButtonPressed(int Value);// 0x3e4380c 0x715d0cda60
	void OnHDRumbleUIButtonPressed(int Value);// 0x3e432ec 0x715d0cdb40
	void OnHDRumbleReceivingDamageButtonPressed(int Value);// 0x3e431a4 0x715d0cdc20
	void OnHDRumbleIntensitySliderMoved(float Value);// 0x3e43390 0x715d0cdd00
	void OnHDRumbleDealingDamageButtonPressed(int Value);// 0x3e43248 0x715d0cdde0
	void OnHDRumbleContextualButtonPressed(int Value);// 0x3e4305c 0x715d0cdec0
	void OnHDRumbleAbilityButtonPressed(int Value);// 0x3e43100 0x715d0cdfa0
	void OnGyroInvertYAxisButtonPressed(int Value);// 0x3e4357c 0x715d0ce080
	void OnGyroInvertXAxisButtonPressed(int Value);// 0x3e43620 0x715d0ce160
	void OnGyroEnableButtonPressed(int Value);// 0x3e43768 0x715d0ce240
	void OnGyroDisableWhenUsingJoysticksPressed(int Value);// 0x3e434d8 0x715d0ce320
	void OnGyroAxisSelectorButtonPressed(int Value);// 0x3e436c4 0x715d0ce400
	void OnEnableGyroOnlyWithADSButtonPressed(int Value);// 0x3e43434 0x715d0ce4e0
	void OnAimModeRadioButtonPressed(int Value);// 0x3e439f8 0x715d0ce5c0
	void OnAbilityAutoLockCameraToggleButtonPressed(int Value);// 0x3e438b0 0x715d0ce6a0

--------------------------------
Class: SettingsToggleButton.SettingsSelectorButton.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b63a80
	delegate GamepadSettingToggleButtonPressed;//[Offset: 0x308, Size: 0x10] 0x715cd92b00
	SettingsRadioButton* ButtonZero;//[Offset: 0x318, Size: 0x8] 0x715cd92b80
	SettingsRadioButton* ButtonOne;//[Offset: 0x320, Size: 0x8] 0x715cd92c00
	SettingsRadioButton* ButtonTwo;//[Offset: 0x328, Size: 0x8] 0x715cd92c80
	SettingsRadioButton* ButtonThree;//[Offset: 0x330, Size: 0x8] 0x715cd92d00

--------------------------------
Class: SettingsSelectorButton.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b64200
	delegate GamepadSettingSelectorButtonPressed;//[Offset: 0x2c0, Size: 0x10] 0x715cd90100
	FText[] ButtonLabels;//[Offset: 0x2d0, Size: 0x10] 0x715cc8fe20
	int InitialSelectedButtonIndex;//[Offset: 0x2e0, Size: 0x4] 0x715cd90200
	int SelectedButtonIndex;//[Offset: 0x2e4, Size: 0x4] 0x715cd90280
	SettingsBaseDetailsData* SettingsDetailsData;//[Offset: 0x2e8, Size: 0x8] 0x715cd90300
	SettingsRadioButton*[] ButtonsArray;//[Offset: 0x2f0, Size: 0x10] 0x715cc8fec0
	void UpdateScrollText();// 0x45c6aa0 0x715cd57a20
	void SetTabLabels();// 0x69be2e8 0x715cd57b00
	void SetSelectedTabButton(int InIndex);// 0x69be2fc 0x715cd57be0
	void OnSetToggleButtonStyle(SettingsRadioButton* InButton, bool InSelected);// 0x45c6aa0 0x715cd57cc0
	void MoveFocusOnNavigation(enum InNavigation);// 0x69be3a0 0x715cd57da0
	void HandleTabButtonClicked(int InIndex);// 0x69be444 0x715cd57e80
	int GetVisibleButtonCount();// 0x69be4e8 0x715cd57f60
	void FocusToPrevOption();// 0x69be51c 0x715cd58040
	void FocusToNextOption();// 0x69be530 0x715cd58120
	void CreateRadioButtons();// 0x45c6aa0 0x715cd58200
	void CommitValue(int InIndex);// 0x69be544 0x715cd582e0

--------------------------------
Class: SettingsRadioButton.HuntersStandardButton.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b64480

--------------------------------
Class: ControlsTabSettingsViewModel.BaseSettingsViewModel.SDViewModel.Object // 71a48e0600
	void SetZTargetingMode(enum ZTargetingMode);// 0x3e451e4 0x715d0ce780
	void SetSwapMovementLookStiks(bool Swap);// 0x3e45544 0x715d0ce860
	void SetShowInMatchTips(bool IsEnabled);// 0x3e4501c 0x715d0ce940
	void SetRangedFireMode(byte FireMode);// 0x3e45438 0x715d0cea20
	void SetMeleeFireMode(byte FireMode);// 0x3e45394 0x715d0ceb00
	void SetInvertedYAxis(bool Invert);// 0x3e45628 0x715d0cebe0
	void SetInvertedXAxis(bool Invert);// 0x3e4570c 0x715d0cecc0
	void SetHDRumbleIntensity(float Value);// 0x3e449c4 0x715d0ceda0
	void SetHDRumbleCategoryEnabled(enum CategotyId, bool IsTurnedOn);// 0x3e448d4 0x715d0cee80
	void SetGyroYAxisInverted(bool Enabled);// 0x3e44c98 0x715d0cef60
	void SetGyroXAxisInverted(bool Enabled);// 0x3e44d7c 0x715d0cf040
	void SetGyroRotationAxis(enum Enabled);// 0x3e44e60 0x715d0cf120
	void SetGyroEnabledOnlyInADS(bool Enabled);// 0x3e44ad0 0x715d0cf200
	void SetGyroEnabled(bool Enabled);// 0x3e44f38 0x715d0cf2e0
	void SetGyroDisabledWithJoystick(bool Enabled);// 0x3e44bb4 0x715d0cf3c0
	void SetADSMode(enum AimMode);// 0x3e452bc 0x715d0cf4a0
	void SetAbilitiesTriggerZTargetingAutomatically(bool IsEnabled);// 0x3e45100 0x715d0cf580
	void ResetAllControlsSettings();// 0x3e447c4 0x715d0cf660
	void ReportResetAllControlsSettings();// 0x3e447d8 0x715d0cf740
	bool IsFeedbackCategoryEnabled(enum Category);// 0x3e44824 0x715d0cf820
	bool IsAnyFeedbackCategoryEnabled();// 0x3e447ec 0x715d0cf900
	enum GetZTargetingMode();// 0x3e45288 0x715d0cf9e0
	bool GetSwapMovementLookStiks();// 0x3e455f0 0x715d0cfac0
	bool GetShowInMatchTips();// 0x3e450c8 0x715d0cfba0
	byte GetRangedFireMode();// 0x3e45510 0x715d0cfc80
	byte GetMeleeFireMode();// 0x3e454dc 0x715d0cfd60
	bool GetInvertedYAxis();// 0x3e456d4 0x715d0cfe40
	bool GetInvertedXAxis();// 0x3e457b8 0x715d0cff20
	float GetHDRumbleIntensity();// 0x3e44a9c 0x715d0ccaa0
	bool GetGyroYAxisInverted();// 0x3e44d44 0x715d0ccb80
	bool GetGyroXAxisInverted();// 0x3e44e28 0x715d0ccc60
	enum GetGyroRotationAxis();// 0x3e44f04 0x715d0ccd40
	bool GetGyroEnabledOnlyInADS();// 0x3e44b7c 0x715d0cce20
	bool GetGyroEnabled();// 0x3e44fe4 0x715d0ccf00
	bool GetGyroDisabledWithJoystick();// 0x3e44c60 0x715d0ccfe0
	float GetDefaultHDRumbleIntensity();// 0x3e44a68 0x715d0cd0c0
	enum GetADSMode();// 0x3e45360 0x715d0cd1a0
	bool GetAbilitiesTriggerZTargetingAutomatically();// 0x3e451ac 0x715d0cd280

--------------------------------
Class: GamepadMatchSettingsViewModel.SDViewModel.Object // 71a48e0380
	delegate OnShowSettingsNotificationWidget;//[Offset: 0x48, Size: 0x10] 0x715d106000
	delegate SettingsTabEntered;//[Offset: 0x58, Size: 0x10] 0x715d106080
	void OnVideoButtonPressed();// 0x3e48e28 0x715d111740
	void OnGamepadButtonPressed();// 0x3e48e64 0x715d111820
	void OnControlsButtonPressed();// 0x3e48ea0 0x715d111900
	void OnBack();// 0x3e48e50 0x715d1119e0
	void OnAudioButtonPressed();// 0x3e48e3c 0x715d111ac0
	void OnAccountButtonPressed();// 0x3e48e78 0x715d111ba0
	void OnAbilitiesButtonPressed();// 0x3e48e8c 0x715d111c80

--------------------------------
Class: GamepadSettingsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e0100
	GamepadMatchSettingsViewModel* GamepadMatchSettingsVM;//[Offset: 0x2e0, Size: 0x8] 0x715d105e00
	UserWidget* BodyContainer;//[Offset: 0x2e8, Size: 0x8] 0x715d105e80
	UserWidget* DetailsContainer;//[Offset: 0x2f0, Size: 0x8] 0x715d105f00
	SettingsNotificationWidget* NotificationWidget;//[Offset: 0x2f8, Size: 0x8] 0x715d105f80

--------------------------------
Class: SettingsNotificationWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48eb000
	PlatformRichText* TextWithImage;//[Offset: 0x258, Size: 0x8] 0x715d123280
	float VisibilityTime;//[Offset: 0x260, Size: 0x4] 0x715d123300
	void ShowNotification(out const FText InText);// 0x3e69de8 0x715d11f900
	void HideNotification();// 0x3e69dd4 0x715d11f9e0

--------------------------------
Class: PlatformRichText.RichTextBlock.TextLayoutWidget.Widget.Visual.Object // 71a4b3b780

--------------------------------
Class: GamepadTabSettingsScreen.BaseSettingsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ea380
	SettingsNestedButton* HuntersNestedButton;//[Offset: 0x2e0, Size: 0x8] 0x715d107300
	SettingsNestedButton* ControllerOptionPresetNestedButton;//[Offset: 0x2e8, Size: 0x8] 0x715d107380
	SettingsSliderGamepad* HorizontalSensitivitySlider;//[Offset: 0x2f0, Size: 0x8] 0x715d105300
	SettingsSliderGamepad* VerticalSensitivitySlider;//[Offset: 0x2f8, Size: 0x8] 0x715d105380
	SettingsExpandableMenu* AdvancedExpandableButton;//[Offset: 0x300, Size: 0x8] 0x715d105400
	SettingsSliderGamepad* AdsSensitivitySlider;//[Offset: 0x308, Size: 0x8] 0x715d105480
	SettingsSliderGamepad* AimAssistStrengthSlider;//[Offset: 0x310, Size: 0x8] 0x715d105500
	SettingsSliderGamepad* AccelerationTurnBoostStrengthSlider;//[Offset: 0x318, Size: 0x8] 0x715d105580
	SettingsSliderGamepad* AccelerationTurnBoostTimeSlider;//[Offset: 0x320, Size: 0x8] 0x715d105600
	SettingsSliderGamepad* DeadZoneSlider;//[Offset: 0x328, Size: 0x8] 0x715d105680
	SettingsSliderGamepad* GyroHorizontalSensitivitySlider;//[Offset: 0x330, Size: 0x8] 0x715d105700
	SettingsSliderGamepad* GyroVerticalSensitivitySlider;//[Offset: 0x338, Size: 0x8] 0x715d105780
	SettingsSliderGamepad* GyroAdsSensitivitySlider;//[Offset: 0x340, Size: 0x8] 0x715d105800
	GamepadTabSettingsViewModel* GamepadTabSettingsViewModel;//[Offset: 0x348, Size: 0x8] 0x715d105880
	void RefreshButtonState();// 0x3e495a0 0x715d110be0
	void OnVerticalSensitivitySliderMoved(float Value);// 0x3e49ad4 0x715d110cc0
	void OnRefreshButtonState();// 0x45c6aa0 0x715d110da0
	void OnHorizontalSensitivitySliderMoved(float Value);// 0x3e49b78 0x715d110e80
	void OnGyroVerticalSensitivitySliderMoved(float Value);// 0x3e49658 0x715d110f60
	void OnGyroHorizontalSensitivitySliderMoved(float Value);// 0x3e496fc 0x715d111040
	void OnGyroAdsSensitivitySliderMoved(float Value);// 0x3e495b4 0x715d111120
	void OnDeadZoneSliderMoved(float Value);// 0x3e497a0 0x715d111200
	void OnBackButtonPressed();// 0x3e4958c 0x715d1112e0
	void OnAimAssistStrengthSliderMoved(float Value);// 0x3e4998c 0x715d1113c0
	void OnAdsSensitivitySliderMoved(float Value);// 0x3e49a30 0x715d1114a0
	void OnAccelerationTurnBoostTimeSliderMoved(float Value);// 0x3e49844 0x715d111580
	void OnAccelerationTurnBoostStrengthSliderMoved(float Value);// 0x3e498e8 0x715d111660

--------------------------------
Class: SettingsExpandableMenu.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b64c00
	SettingsBaseDetailsData* SettingsDetailsData;//[Offset: 0x3a0, Size: 0x8] 0x715cd6f880
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1] 0x715cd6f900
	void OnExpandMenu(bool InExpand);// 0x45c6aa0 0x715cd58ba0
	void NotifyOnActivate();// 0x69bcbe0 0x715cd58c80

--------------------------------
Class: GamepadTabSettingsViewModel.BaseSettingsViewModel.SDViewModel.Object // 71a48ea100
	void SetVerticalSensitivity(float Value);// 0x3e4ac2c 0x715d1120e0
	void SetHorizontalSensitivity(float Value);// 0x3e4ad38 0x715d1121c0
	void SetGyroVerticalSensitivity(float Value);// 0x3e4a4d8 0x715d1122a0
	void SetGyroHorizontalSensitivity(float Value);// 0x3e4a5e4 0x715d112380
	void SetGyroAdsSensitivity(float Value);// 0x3e4a3cc 0x715d112460
	void SetDeadZone(float Value);// 0x3e4a6f0 0x715d112540
	void SetCurrentHunterData(out const MetaTuningDataKey HunterKey, out const FText HunterName);// 0x3e4afb4 0x715d112620
	void SetCurrentGamepadType(const enum GamepadType);// 0x3e4ae44 0x715d112700
	void SetAimAssistStrength(float Value);// 0x3e4aa14 0x715d1127e0
	void SetAdsSensitivity(float Value);// 0x3e4ab20 0x715d1128c0
	void SetAccelerationTurnBoostTime(float Value);// 0x3e4a7fc 0x715d1129a0
	void SetAccelerationTurnBoostStrength(float Value);// 0x3e4a908 0x715d112a80
	void ResetHunterSettings();// 0x3e4a368 0x715d112b60
	void ResetAllHuntersSettings();// 0x3e4a354 0x715d112c40
	void ReportResetHunterSettings();// 0x3e4a3b8 0x715d112d20
	void ReportResetAllHuntersSettings();// 0x3e4a3a4 0x715d112e00
	void ReportHunterChangeClicked();// 0x3e4a37c 0x715d112ee0
	void ReportControllersOptionsPresetClicked();// 0x3e4a390 0x715d112fc0
	float GetVerticalSensitivity();// 0x3e4acd0 0x715d1130a0
	float GetHorizontalSensitivity();// 0x3e4addc 0x715d113180
	float GetGyroVerticalSensitivity();// 0x3e4a57c 0x715d113260
	float GetGyroHorizontalSensitivity();// 0x3e4a688 0x715d113340
	float GetGyroAdsSensitivity();// 0x3e4a470 0x715d113420
	float GetDefaultVerticalSensitivity();// 0x3e4ad04 0x715d113500
	float GetDefaultHorizontalSensitivity();// 0x3e4ae10 0x715d1135e0
	float GetDefaultGyroVerticalSensitivity();// 0x3e4a5b0 0x715d1136c0
	float GetDefaultGyroHorizontalSensitivity();// 0x3e4a6bc 0x715d1137a0
	float GetDefaultGyroAdsSensitivity();// 0x3e4a4a4 0x715d113880
	float GetDefaultDeadZone();// 0x3e4a7c8 0x715d113960
	float GetDefaultAimAssistStrength();// 0x3e4aaec 0x715d110080
	float GetDefaultAdsSensitivity();// 0x3e4abf8 0x715d110160
	float GetDefaultAccelerationTurnBoostTime();// 0x3e4a8d4 0x715d110240
	float GetDefaultAccelerationTurnBoostStrength();// 0x3e4a9e0 0x715d110320
	float GetDeadZone();// 0x3e4a794 0x715d110400
	FText GetCurrentHunterName();// 0x3e4b134 0x715d1104e0
	MetaTuningDataKey GetCurrentHunterDataKey();// 0x3e4b118 0x715d1105c0
	enum GetCurrentGamepadType();// 0x3e4aee8 0x715d1106a0
	FText GetCurrentController();// 0x3e4af04 0x715d110780
	float GetAimAssistStrength();// 0x3e4aab8 0x715d110860
	float GetAdsSensitivity();// 0x3e4abc4 0x715d110940
	float GetAccelerationTurnBoostTime();// 0x3e4a8a0 0x715d110a20
	float GetAccelerationTurnBoostStrength();// 0x3e4a9ac 0x715d110b00

--------------------------------
Class: HUDCustomizationDragDropOp.DragDropOperation.Object // 71a48e9e80
	Vector2D DragOffset;//[Offset: 0x88, Size: 0x8] 0x715d107a80

--------------------------------
Class: HuntersContainerViewModel.SDViewModel.Object // 71a48e9980
	bool IsFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715d107880
	Texture2DBindable TeamLogo;//[Offset: 0x60, Size: 0x78] 0x715d107900
	TextBindable TeamName;//[Offset: 0xd8, Size: 0x98] 0x715d107980
	VsPlayerDisplayViewModel*[] Items;//[Offset: 0x170, Size: 0x10] 0x715d0b4c00

--------------------------------
Class: VsPlayerDisplayViewModel.SDViewModel.Object // 71a48ef880
	bool IsFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x715d828400
	PlayerAvatarViewModel* PlayerAvatar;//[Offset: 0x48, Size: 0x8] 0x715d826380
	delegate OnHunterPortraitChange;//[Offset: 0x50, Size: 0x10] 0x715d826400
	TextBindable PlayerName;//[Offset: 0x60, Size: 0x98] 0x715d826480
	VisibilityBindable PlayerAvatarVisible;//[Offset: 0xf8, Size: 0x70] 0x715d826500
	VisibilityBindable MysteryIconVisible;//[Offset: 0x168, Size: 0x70] 0x715d826580
	HuntersPlayerState* CurrentPlayerState;//[Offset: 0x1d8, Size: 0x8] 0x715d826600
	void OnPlayerLevelChanged(HuntersPlayerState* PlayerState, int OldValue);// 0x3e6bc24 0x715d830780
	void HunterPortraitChangedEvent__DelegateSignature(const Texture2D* Texture);// 0x45c6aa0 0x715d830860
	Texture2D* GetPortrait();// 0x3e6bd0c 0x715d830940

--------------------------------
Class: HuntersPlayerState.PlayerState.Info.Actor.Object // 71a4b80d80
	delegate OnKillCountChanged;//[Offset: 0x350, Size: 0x10] 0x715cdda680
	delegate OnLevelChanged;//[Offset: 0x360, Size: 0x10] 0x715cdda700
	delegate OnFameChanged;//[Offset: 0x370, Size: 0x10] 0x715cdda780
	delegate OnUltimateUnlocked;//[Offset: 0x380, Size: 0x10] 0x715cdda800
	delegate OnUltimatePointsChanged;//[Offset: 0x390, Size: 0x10] 0x715cdda880
	delegate OnLevelingThresholdsChanged;//[Offset: 0x3a0, Size: 0x10] 0x715cdda900
	delegate OnExperiencePointsChanged;//[Offset: 0x3b0, Size: 0x10] 0x715cdda980
	delegate OnPlayerDied;//[Offset: 0x3c0, Size: 0x10] 0x715cddaa00
	delegate OnPlayerEliminated;//[Offset: 0x3d0, Size: 0x10] 0x715cddaa80
	delegate OnPlayerInstigatedElimination;//[Offset: 0x3e0, Size: 0x10] 0x715cddab00
	delegate OnPlayerAwardedBadges;//[Offset: 0x3f0, Size: 0x10] 0x715cddab80
	delegate OnPlayerRespawned;//[Offset: 0x400, Size: 0x10] 0x715cddac00
	delegate OnPlayerEnteredRespawnQueue;//[Offset: 0x410, Size: 0x10] 0x715cddac80
	delegate UpdateTimeOnObjective;//[Offset: 0x420, Size: 0x10] 0x715cddad00
	delegate UpdateBallHeldTime;//[Offset: 0x430, Size: 0x10] 0x715cddad80
	delegate OnSquadUpdated;//[Offset: 0x440, Size: 0x10] 0x715cddae00
	CharacterLoadout* CharacterLoadout;//[Offset: 0x468, Size: 0x8] 0x715cddae80
	bool ConfirmedPawnClassSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1] 0x715cddaf00
	delegate OnPawnClassChanged;//[Offset: 0x478, Size: 0x10] 0x715cddaf80
	delegate OnFullyReplicated;//[Offset: 0x4b8, Size: 0x10] 0x715cddb000
	delegate OnUpdatePing;//[Offset: 0x4c8, Size: 0x10] 0x715cddb080
	bool bShowVsAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1] 0x715cddb100
	HuntersSquadState* Squad;//[Offset: 0x4e0, Size: 0x8] 0x715cddb180
	HuntersPlayerStatsCollector* StatsCollector;//[Offset: 0x4e8, Size: 0x8] 0x715cddb200
	HuntersPlayerStateAnalytics* AnalyticsCollector;//[Offset: 0x4f0, Size: 0x8] 0x715cddb280
	HuntersBadgeAwardingComponent* BadgeAwardingComponent;//[Offset: 0x4f8, Size: 0x8] 0x715cddb300
	HuntersPlayerState*[] HumanBotIsReplacingPlayerStates;//[Offset: 0x500, Size: 0x10] 0x715cda2a40
	HunterLoadoutData[] HunterLoadouts;//[Offset: 0x510, Size: 0x10] 0x715cda2ae0
	int KillCount;//[Offset: 0x520, Size: 0x4] 0x715cddb480
	int AssistCount;//[Offset: 0x524, Size: 0x4] 0x715cddb500
	bool ReachedCharacterSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1] 0x715cddb580
	bool bHasReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1] 0x715cdd9500
	int RespawnCount;//[Offset: 0x52c, Size: 0x4] 0x715cdd9580
	bool bInRespawnQueue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1] 0x715cdd9600
	BAReplicatedTimer RespawnTimer;//[Offset: 0x534, Size: 0x10] 0x715cdd9680
	int ExperiencePoints;//[Offset: 0x548, Size: 0x4] 0x715cdd9700
	int ProgressionLevel;//[Offset: 0x550, Size: 0x4] 0x715cdd9780
	int FameLevel;//[Offset: 0x554, Size: 0x4] 0x715cdd9800
	PlayerProgressionChoice[] ProgressionChoice;//[Offset: 0x558, Size: 0x10] 0x715cda2b80
	<GameplayTag,int> BadgesAwarded;//[Offset: 0x568, Size: 0x50] 0x715cd322c0
	int[] LevelingThreshold;//[Offset: 0x5b8, Size: 0x10] 0x715cda2c20
	bool bUltimateUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 0x1] 0x715cdd9a80
	int UltimatePoints;//[Offset: 0x5d0, Size: 0x4] 0x715cdd9b00
	int UltimatePointsToActivate;//[Offset: 0x5d4, Size: 0x4] 0x715cdd9b80
	GenericTeamId TeamID;//[Offset: 0x5d8, Size: 0x1] 0x715cdd9c00
	enum AssignedClass;//[Offset: 0x5d9, Size: 0x1] 0x715cda2cc0
	DamageDealtData LastDamageDealt;//[Offset: 0x648, Size: 0xc] 0x715cdd9d00
	DialogueMemoryComponent* DialogueMemoryComponent;//[Offset: 0x6d0, Size: 0x8] 0x715cdd9d80
	GameplayTag AvatarKey;//[Offset: 0x6e8, Size: 0x8] 0x715cdd9e00
	GameplayTag AvatarFrameKey;//[Offset: 0x6f0, Size: 0x8] 0x715cdd9e80
	void UnlockUltimate();// 0x6a8e268 0x715cdc9ee0
	void SetUltimatePointsBlocked(bool bBlocked);// 0x6a8e0f4 0x715cdc9fc0
	void SetUltimatePoints(int NewExperiencePoints);// 0x6a8e27c 0x715cdca0a0
	void SetRemainingRespawnTime_Implementation(out const BAReplicatedTimer RemainingRespawnTime);// 0x6a8d370 0x715cdca180
	void SetLevelingThreshold(out const int[] InLevelingThreshold);// 0x6a8e034 0x715cdca260
	void SetLevel(int NewLevel);// 0x6a8e7c4 0x715cdca340
	void SetKillCount(int NewKillCount);// 0x6a8e990 0x715cdca420
	void SetFameLevel(int NewLevel);// 0x6a8e704 0x715cdca500
	void SetExperiencePoints(int NewExperiencePoints);// 0x6a8e4cc 0x715cdca5e0
	void SetAssistCount(int NewAssistCount);// 0x6a8e8b4 0x715cdca6c0
	void ServerPickCharacterFromMetaTuningDataKey(out const MetaTuningDataKey CharacterKey);// 0x6a8d9d8 0x715cdca7a0
	void ServerPickCharacter(const MetaTuningDataKey CharacterKey);// 0x6a8d8f0 0x715cdca880
	void ServerConfirmCharacterSelection(bool bNewConfirmedState, bool bCheckAgainstAllPlayers, bool bAllowPreselect);// 0x6a8d748 0x715cdca960
	void ServerAddPlayerProgressionChoice(int ChoiceID);// 0x6a8e328 0x715cdcaa40
	void ResetLevel();// 0x6a8d35c 0x715cdcab20
	void RemoveFromSquad();// 0x6a8dc58 0x715cdcac00
	void OnRep_UltimateUnlocked();// 0x6a8cc04 0x715cdcace0
	void OnRep_UltimatePoints(int OldVal);// 0x6a8cb60 0x715cdc7400
	void OnRep_TeamID();// 0x6a8cf60 0x715cdc74e0
	void OnRep_Squad();// 0x6a8cb4c 0x715cdc75c0
	void OnRep_ProgressionLevel(int OldVal);// 0x6a8ccd0 0x715cdc76a0
	void OnRep_LevelingThreshold();// 0x6a8cc18 0x715cdc7780
	void OnRep_KillCount(int OldVal);// 0x6a8cebc 0x715cdc7860
	void OnRep_FameLevel(int OldVal);// 0x6a8cc2c 0x715cdc7940
	void OnRep_ExperiencePoints(int OldVal);// 0x6a8cd74 0x715cdc7a20
	void OnRep_ConfirmedPawnClassSelection();// 0x6a8cb38 0x715cdc7b00
	void OnRep_bInRespawnQueue();// 0x6a8cf74 0x715cdc7be0
	void OnRep_AvatarKey();// 0x6a8cb24 0x715cdc7cc0
	void OnRep_AvatarFrameKey();// 0x6a8cb10 0x715cdc7da0
	void OnRep_AssistCount(int OldVal);// 0x6a8ce18 0x715cdc7e80
	void NotifyClientPickupInteractionEnded(enum PickupStatsType, Actor* PickupActor, bool bWasHacked);// 0x6a8de80 0x715cdc7f60
	void NotifyClientBadgesAwarded(GameplayTagContainer BadgeIds);// 0x6a8d4c0 0x715cdc8040
	void MulticastCallOnRespawned();// 0x6a8cf88 0x715cdc8120
	bool IsXPAccumulationUnblocked();// 0x6a8cfa4 0x715cdc8200
	bool IsUltimateUnlocked();// 0x6a8e24c 0x715cdc82e0
	bool IsSpectatorOnly();// 0x6a8cfc4 0x715cdc83c0
	bool IsSameSquadAs(const HuntersPlayerState* Other);// 0x6a8dd20 0x715cdc84a0
	bool IsSamePartyAs(const HuntersPlayerState* Other);// 0x6a8dba8 0x715cdc8580
	bool IsPartyLeader(const HuntersPlayerState* Other);// 0x6a8daf8 0x715cdc8660
	bool IsFullyReplicated();// 0x6a8d104 0x715cdc8740
	bool IsDead();// 0x6a8de10 0x715cdc8820
	bool IsAtCriticalHealth();// 0x6a8ddd8 0x715cdc8900
	bool IsAlive();// 0x6a8de48 0x715cdc89e0
	void InitSquad(HuntersSquadState* ForceSquad);// 0x6a8dc74 0x715cdc8ac0
	void IncrementLevel();// 0x6a8e868 0x715cdc8ba0
	void IncrementKillCount();// 0x6a8ea34 0x715cdc8c80
	void IncrementAssistCount();// 0x6a8e958 0x715cdc8d60
	bool HasHunterLoadout(out const MetaTuningDataKey HunterID);// 0x6a8d1d0 0x715cdc8e40
	int GetUltimatePointsRequired();// 0x6a8dfbc 0x715cdc8f20
	int GetUltimatePoints();// 0x6a8dff8 0x715cdc9000
	HuntersSquadState* GetSquad();// 0x6a8dac4 0x715cdc5720
	int GetRespawnCount();// 0x6a8e87c 0x715cdc5800
	BAReplicatedTimer GetRemainingRespawnTime_Implementation();// 0x6a8d43c 0x715cdc58e0
	int GetProgressionLevel();// 0x6a8e7a8 0x715cdc59c0
	FString GetPlayerZID();// 0x6a8d120 0x715cdc5aa0
	float GetOutPacketLoss();// 0x6a8d6f4 0x715cdc5b80
	HuntersSquadState* GetOpposingSquad();// 0x6a8da90 0x715cdc5c60
	float GetMaxRecentPing();// 0x6a8d6d8 0x715cdc5d40
	float GetMaxRecentOutPacketLoss();// 0x6a8d6a0 0x715cdc5e20
	float GetMaxRecentInPacketLoss();// 0x6a8d6bc 0x715cdc5f00
	int GetMaxProgressionLevel();// 0x6a8e6b4 0x715cdc5fe0
	int[] GetLevelingThresholds();// 0x6a8e570 0x715cdc60c0
	int GetKillCount();// 0x6a8e974 0x715cdc61a0
	float GetInPacketLoss();// 0x6a8d710 0x715cdc6280
	HunterLoadoutData GetHunterLoadout(out const MetaTuningDataKey HunterID);// 0x6a8d294 0x715cdc6360
	GenericTeamId GetGenericTeamId();// 0x6a8d484 0x715cdc6440
	int GetFameLevel();// 0x6a8e6e8 0x715cdc6520
	int GetExperiencePoints();// 0x6a8e4b0 0x715cdc6600
	float GetExactPing();// 0x6a8d72c 0x715cdc66e0
	int GetConfirmedProgressionLevel();// 0x6a8e5f4 0x715cdc67c0
	Texture2D* GetAvatarFrame();// 0x6a8cfe4 0x715cdc68a0
	Texture2D* GetAvatar();// 0x6a8d018 0x715cdc6980
	int GetAssistCount();// 0x6a8e898 0x715cdc6a60
	void ConfirmReachedWaitingScreen();// 0x6a8d0a8 0x715cdc6b40
	void ConfirmReachedSelectionScreen();// 0x6a8d04c 0x715cdc6c20
	void AwardBadges(GameplayTagContainer BadgeIds);// 0x6a8d5b4 0x715cdc6d00
	void AddUltimatePoints(int AmountToAdd);// 0x6a8e1a0 0x715cdc6de0
	void AddPlayerProgressionChoice(int ChoiceID);// 0x6a8e40c 0x715cdc6ec0
	void AddExperiencePoints(int AmountToAdd);// 0x6a8e610 0x715cdc6fa0

--------------------------------
Class: BAReplicatedTimer // 714906c7c0
	float StartTime;//[Offset: 0x0, Size: 0x4] 0x715d879100
	float Duration;//[Offset: 0x4, Size: 0x4] 0x715d879180
	float TimeElapsed;//[Offset: 0x8, Size: 0x4] 0x715d879200
	bool IsPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715d879280

--------------------------------
Class: CharacterLoadout.Object // 71a4b6ba00
	class Character* PawnClass;//[Offset: 0x28, Size: 0x8] 0x715cda25e0
	MetaTuningDataKey CharacterKey;//[Offset: 0x30, Size: 0x8] 0x715cdd0f80
	MetaTuningDataKey CharacterSkinID;//[Offset: 0x38, Size: 0x8] 0x715cdd1000
	MetaTuningDataKey EquipmentSkinID;//[Offset: 0x40, Size: 0x8] 0x715cdd1080
	MetaTuningDataKey IntroAnimationID;//[Offset: 0x48, Size: 0x8] 0x715cd9f800
	MetaTuningDataKey VictoryAnimationID;//[Offset: 0x50, Size: 0x8] 0x715cd9f880
	GameplayTag[] EmoteIdentifiers;//[Offset: 0x58, Size: 0x10] 0x715cda2680
	void OnRep_CharacterKey();// 0x6a7a0a4 0x715cdc0da0

--------------------------------
Class: HuntersSquadState.Info.Actor.Object // 71a4b8a100
	GenericTeamId TeamID;//[Offset: 0x240, Size: 0x1] 0x715cddd280
	HuntersPlayerState*[] Players;//[Offset: 0x248, Size: 0x10] 0x715cda4f20
	HuntersPlayerState*[] InactivePlayers;//[Offset: 0x258, Size: 0x10] 0x715cda4fc0
	SquadBotTuningData BotTuningData;//[Offset: 0x268, Size: 0x38] 0x715cddd400
	int SquadSize();// 0x6a97d98 0x715cdcc100
	void OnRep_TeamID(GenericTeamId OldValue);// 0x6a97bfc 0x715cdcc1e0
	void OnRep_Players(HuntersPlayerState*[] OldValue);// 0x6a97b04 0x715cdcc2c0
	bool IsSquadAllAlive();// 0x6a97dcc 0x715cdcc3a0
	bool IsSquadAlive();// 0x6a97e04 0x715cdcc480
	int HumanSquadSize();// 0x6a97d30 0x715cdcc560
	int GetTeamIdAsInt();// 0x6a97cd8 0x715cdcc640
	int GetIndex();// 0x6a97ca4 0x715cdcc720
	GenericTeamId GetGenericTeamId();// 0x6a97cf4 0x715cdcc800
	int ActiveSquadSize();// 0x6a97d64 0x715cdcc8e0

--------------------------------
Class: GenericTeamId // 714906c940
	byte TeamID;//[Offset: 0x0, Size: 0x1] 0x715d876500

--------------------------------
Class: SquadBotTuningData // 715cecab40
	float TargetHealthMinThreshold;//[Offset: 0x0, Size: 0x4] 0x715cef6100
	float WeaponSpreadMultiplier;//[Offset: 0x4, Size: 0x4] 0x715cef6180
	float MeleeAttackSpeedMultiplier;//[Offset: 0x8, Size: 0x4] 0x715cef6200
	float AbilityCooldownMultiplier;//[Offset: 0xc, Size: 0x4] 0x715cef6280
	float UltimateXPCostMultipliier;//[Offset: 0x10, Size: 0x4] 0x715cef6300
	GameplayTagContainer AdditionalGameplayTagsOnSpawn;//[Offset: 0x18, Size: 0x20] 0x715cef4280

--------------------------------
Class: HuntersPlayerStatsCollector.ActorComponent.Object // 71a4b80b00
	HunterStats HunterStats;//[Offset: 0xb0, Size: 0x50] 0x715cddc100
	HuntersPlayerState* LastEliminatorPlayerState;//[Offset: 0x120, Size: 0x8] 0x715cddc180
	HuntersPlayerState* PlayerState;//[Offset: 0x160, Size: 0x8] 0x715cddc200
	void SetWasFirstTeamToTenKills(bool bValue);// 0x6a959d4 0x715cdc9460
	void SetIsKillsMvp(bool bValue);// 0x6a95884 0x715cdc9540
	void SetIsHealsMvp(bool bValue);// 0x6a957dc 0x715cdc9620
	void SetIsDamageMvp(bool bValue);// 0x6a9592c 0x715cdc9700
	void SetHadWinningBrawlKill(bool bValue);// 0x6a95a7c 0x715cdc97e0
	void OnZiplineActivated();// 0x6a95b38 0x715cdc98c0
	void OnPlayerRespawned(HuntersPlayerState* InPlayerState);// 0x6a954e8 0x715cdc99a0
	void OnPlayerInstigatedElimination(out const EliminationData EliminationData);// 0x6a9558c 0x715cdc9a80
	void OnPlayerEliminated(out const EliminationData EliminationData);// 0x6a956b4 0x715cdc9b60
	void OnJumpPadActivated();// 0x6a95b24 0x715cdc9c40
	void AddTimeOnObjective(float NewAmount);// 0x6a95bf0 0x715cdc9d20
	void AddBallHeldTime(float NewAmount);// 0x6a95b4c 0x715cdc9e00

--------------------------------
Class: HunterStats // 715cec7d80
	<GameplayTag,float> Map;//[Offset: 0x0, Size: 0x50] 0x715cec7cc0

--------------------------------
Class: EliminationData // 714906eb00
	HuntersPlayerState* EliminatedPlayerState;//[Offset: 0x0, Size: 0x8] 0x715d935780
	FString EliminatedName;//[Offset: 0x8, Size: 0x10] 0x715d935800
	GenericTeamId EliminatedTeamID;//[Offset: 0x18, Size: 0x1] 0x715d935880
	bool bWasTeamAgent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x715d935900
	bool bWasEnvironmental;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x715d935980
	enum RangeType;//[Offset: 0x1b, Size: 0x1] 0x715d893800
	enum DamageElement;//[Offset: 0x1c, Size: 0x1] 0x715d8938a0
	enum DamageType;//[Offset: 0x1d, Size: 0x1] 0x715d893940
	HuntersPlayerState* InstigatorPlayerState;//[Offset: 0x20, Size: 0x8] 0x715d935b80
	FString InstigatorName;//[Offset: 0x28, Size: 0x10] 0x715d935c00
	enum InstigatorNamedHazardType;//[Offset: 0x38, Size: 0x1] 0x715d8939e0
	GenericTeamId InstigatorTeamID;//[Offset: 0x39, Size: 0x1] 0x715d935d00
	Actor* KillcamViewTarget;//[Offset: 0x3c, Size: 0x8] 0x715d935d80
	HuntersPlayerState*[] DamageDealers;//[Offset: 0x48, Size: 0x10] 0x715d893a80
	bool bKillingBlowWasCritical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715d935e80

--------------------------------
Class: HuntersPlayerStateAnalytics.ActorComponent.Object // 71a4b81280
	void OnPlayerRespawned(HuntersPlayerState* PlayerState);// 0x6a8c180 0x715cdc7080
	void OnPlayerDied(out const EliminationData EliminationData);// 0x6a8c224 0x715cdc7160

--------------------------------
Class: HuntersBadgeAwardingComponent.ActorComponent.Object // 71a4b6b500
	HuntersBadgeRule*[] ActiveBadgeRules;//[Offset: 0xb0, Size: 0x10] 0x715cda24a0

--------------------------------
Class: HuntersBadgeRule.Object // 71a4b6b280
	void OnDeactivated();// 0x6a7b108 0x715cdc0860
	void OnActivated();// 0x6a7b124 0x715cdc0940
	void Deactivate();// 0x6a7b140 0x715cdc0a20

--------------------------------
Class: HunterLoadoutData // 715cec8980
	MetaTuningDataKey HunterKey;//[Offset: 0x0, Size: 0x8] 0x715cef3580
	GameplayTag GameModeKey;//[Offset: 0x8, Size: 0x8] 0x715cef3600
	MetaTuningDataKey[] Abilities;//[Offset: 0x10, Size: 0x10] 0x715ce97860
	MetaTuningDataKey[] Skins;//[Offset: 0x20, Size: 0x10] 0x715ce97900
	MetaTuningDataKey[] EquipmentSkins;//[Offset: 0x30, Size: 0x10] 0x715ce979a0
	MetaTuningDataKey[] IntroAnimations;//[Offset: 0x40, Size: 0x10] 0x715ce97a40
	MetaTuningDataKey[] VictoryAnimations;//[Offset: 0x50, Size: 0x10] 0x715ce97ae0
	bool bHunterOwned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715cef3900

--------------------------------
Class: PlayerProgressionChoice // 715cec8b00
	int Level;//[Offset: 0x0, Size: 0x4] 0x715cef3e00
	int ChoiceIndex;//[Offset: 0x4, Size: 0x4] 0x715cef3e80

--------------------------------
Class: DamageDealtData // 715cec7c00

--------------------------------
Class: DialogueMemoryComponent.ActorComponent.Object // 71a4b68300

--------------------------------
Class: HuntersContainerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e9700
	VsPlayerDisplayWidget* Player1o1;//[Offset: 0x258, Size: 0x8] 0x715d109400
	VsPlayerDisplayWidget* Player1o2;//[Offset: 0x260, Size: 0x8] 0x715d109480
	VsPlayerDisplayWidget* Player1o3;//[Offset: 0x268, Size: 0x8] 0x715d107400
	VsPlayerDisplayWidget* Player1o4;//[Offset: 0x270, Size: 0x8] 0x715d107480
	VsPlayerDisplayWidget* Player2o2;//[Offset: 0x278, Size: 0x8] 0x715d107500
	VsPlayerDisplayWidget* Player2o3;//[Offset: 0x280, Size: 0x8] 0x715d107580
	VsPlayerDisplayWidget* Player2o4;//[Offset: 0x288, Size: 0x8] 0x715d107600
	VsPlayerDisplayWidget* Player3o3;//[Offset: 0x290, Size: 0x8] 0x715d107680
	VsPlayerDisplayWidget* Player3o4;//[Offset: 0x298, Size: 0x8] 0x715d107700
	VsPlayerDisplayWidget* Player4o4;//[Offset: 0x2a0, Size: 0x8] 0x715d107780
	HuntersContainerViewModel* HuntersContainerViewModel;//[Offset: 0x2a8, Size: 0x8] 0x715d107800

--------------------------------
Class: VsPlayerDisplayWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48f5100
	PlayerAvatarWidget* PlayerAvatar;//[Offset: 0x258, Size: 0x8] 0x715d124880
	VsPlayerDisplayViewModel* VsPlayerDisplayViewModel;//[Offset: 0x260, Size: 0x8] 0x715d124900

--------------------------------
Class: HunterSelectionClassPanelWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e9480
	PanelWidget* HuntersList;//[Offset: 0x258, Size: 0x8] 0x715d109300
	class HuntersSelectionHunterWidget* HunterWidgetBlueprint;//[Offset: 0x260, Size: 0x8] 0x715d0b4b60
	HunterSelectionClassViewModel* HunterSelectionClassViewModel;//[Offset: 0x268, Size: 0x8] 0x715d109380

--------------------------------
Class: HuntersSelectionHunterWidget.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e7180
	HuntersSelectionHunterViewModel* HuntersSelectionHunterViewModel;//[Offset: 0x2a0, Size: 0x8] 0x715d109f80
	void OnSelectedStateChanged(const bool bIsSelected);// 0x45c6aa0 0x715d114e60
	void OnAvailableStateChanged();// 0x45c6aa0 0x715d114f40

--------------------------------
Class: HuntersSelectionHunterViewModel.SDViewModel.Object // 71a48e7400
	delegate ButtonPress;//[Offset: 0x48, Size: 0x10] 0x715d824280
	delegate OnHunterPortraitChange;//[Offset: 0x78, Size: 0x10] 0x715d824300
	VisibilityBindable Visibility;//[Offset: 0xa8, Size: 0x70] 0x715d824380
	TextBindable NameText;//[Offset: 0x118, Size: 0x98] 0x715d824400
	ColorBindable FrameColor;//[Offset: 0x1b0, Size: 0x88] 0x715d824500
	VisibilityBindable Player1HighlightedVisibility;//[Offset: 0x238, Size: 0x70] 0x715d824580
	VisibilityBindable Player2HighlightedVisibility;//[Offset: 0x2a8, Size: 0x70] 0x715d824600
	VisibilityBindable Player3HighlightedVisibility;//[Offset: 0x318, Size: 0x70] 0x715d824680
	VisibilityBindable Player4HighlightedVisibility;//[Offset: 0x388, Size: 0x70] 0x715d824700
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1] 0x715d824800
	bool bIsAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1] 0x715d824780
	enum PortraitType;//[Offset: 0x40a, Size: 0x1] 0x7148cdbd20
	HuntersPlayerState*[] CachedSquad;//[Offset: 0x410, Size: 0x10] 0x7148cdbf00
	VisibilityBindable DummyVisibilityBindable;//[Offset: 0x428, Size: 0x70] 0x715d824980
	void SimpleEvent__DelegateSignature();// 0x45c6aa0 0x715d830e80
	void SelectHunter();// 0x3e51d04 0x715d830f60
	void RegisterSelectionChangeEvents();// 0x3e51c70 0x715d831040
	void OnSelectedChanged__DelegateSignature(const bool bIsSelected);// 0x45c6aa0 0x715d831120
	bool IsAlreadySelected();// 0x3e51cb8 0x715d831200
	void HunterPortraitChangedEvent__DelegateSignature(const Texture2D* Texture);// 0x45c6aa0 0x715d8312e0
	void HighlightHunter();// 0x3e51cf0 0x715d8313c0
	Texture2D* GetPortrait();// 0x3e51c84 0x715d7c28c0

--------------------------------
Class: HunterSelectionClassViewModel.SDViewModel.Object // 71a48e9200
	BrushBindable ClassIcon;//[Offset: 0x48, Size: 0x178] 0x715d109080
	BrushBindable DetailedClassIcon;//[Offset: 0x1c0, Size: 0x178] 0x715d109100
	TextBindable ClassText;//[Offset: 0x338, Size: 0x98] 0x715d109180
	BoolBindable IsVisible;//[Offset: 0x3d0, Size: 0x70] 0x715d109200
	HuntersSelectionHunterViewModel*[] HunterViewModels;//[Offset: 0x440, Size: 0x10] 0x715d0b4ac0

--------------------------------
Class: HunterSelectionContainerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e8f80
	PanelWidget* ClassPanelsContainer;//[Offset: 0x258, Size: 0x8] 0x715d108f00
	class HunterSelectionClassPanelWidget* HunterClassPanelWidgetBlueprint;//[Offset: 0x260, Size: 0x8] 0x715d0b4a20
	HunterSelectionViewModel* HunterSelectionViewModel;//[Offset: 0x268, Size: 0x8] 0x715d108f80
	ScrollBox* ScrollBox;//[Offset: 0x270, Size: 0x8] 0x715d109000
	void SetInitialFocus();// 0x3e4ce48 0x715d111d60

--------------------------------
Class: HunterSelectionViewModel.SDListenerViewModel.SDViewModel.Object // 71a48e8080
	HuntersSelectionHunterViewModel*[] HunterViewModels;//[Offset: 0x70, Size: 0x10] 0x7148cdbbe0
	HunterSelectionPlayerTimerViewModel*[] PlayerTimerViewModels;//[Offset: 0x80, Size: 0x10] 0x7148cdbc80
	HunterSelectionInfoViewModel* InfoPanelViewModel;//[Offset: 0x90, Size: 0x8] 0x715d825780
	<enum,HunterSelectionClassViewModel*> ClassViewModelMap;//[Offset: 0xb8, Size: 0x50] 0x714906d180
	SlateBrush Background;//[Offset: 0x108, Size: 0x88] 0x715d825900
	VisibilityBindable BackgroundVisibility;//[Offset: 0x190, Size: 0x70] 0x715d825980
	VisibilityBindable GalleryVisibility;//[Offset: 0x200, Size: 0x70] 0x715d825a00
	VisibilityBindable CharacterVisibility;//[Offset: 0x270, Size: 0x70] 0x715d825a80
	TextBindable PlayerName;//[Offset: 0x2e0, Size: 0x98] 0x715d825b00
	VisibilityBindable PlayerNameVisibility;//[Offset: 0x378, Size: 0x70] 0x715d825b80
	VisibilityBindable YouSelectingVisibility;//[Offset: 0x3e8, Size: 0x70] 0x715d825c00
	TextBindable HunterName;//[Offset: 0x458, Size: 0x98] 0x715d825c80
	TextBindable HunterDescription;//[Offset: 0x4f0, Size: 0x98] 0x715d825d00
	BrushBindable HunterRoleIcon;//[Offset: 0x588, Size: 0x178] 0x715d825d80
	BrushBindable ScreenBackground;//[Offset: 0x700, Size: 0x178] 0x715d825e00
	delegate PlayerAnchorPositionChange;//[Offset: 0x878, Size: 0x10] 0x715d825e80
	Texture2DBindable TeamLogo;//[Offset: 0x888, Size: 0x78] 0x715d825f80
	TextBindable TeamName;//[Offset: 0x900, Size: 0x98] 0x715d826000
	TextBindable GameMode;//[Offset: 0x998, Size: 0x98] 0x715d826080
	TextBindable TeamRole;//[Offset: 0xa30, Size: 0x98] 0x715d826100
	VisibilityBindable HasTeamRole;//[Offset: 0xac8, Size: 0x70] 0x715d826180
	delegate HunterSelectionIndexChange;//[Offset: 0xb38, Size: 0x10] 0x715d826300

--------------------------------
Class: HunterSelectionPlayerTimerViewModel.SDViewModel.Object // 71a48e8800
	VisibilityBindable Visibility;//[Offset: 0x68, Size: 0x70] 0x715d827300
	TextBindable NameText;//[Offset: 0xd8, Size: 0x98] 0x715d827380
	Texture2DBindable HunterIcon;//[Offset: 0x170, Size: 0x78] 0x715d825300
	TextBindable HunterName;//[Offset: 0x1e8, Size: 0x98] 0x715d825380
	FloatBindable ProgressBarBindable;//[Offset: 0x280, Size: 0x70] 0x715d825480
	TextBindable SecondsRemainingBindable;//[Offset: 0x2f0, Size: 0x98] 0x715d825400
	enum CurrentState;//[Offset: 0x388, Size: 0x1] 0x7148cdbb40
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 0x1] 0x715d825580
	HuntersPlayerState* PlayerState;//[Offset: 0x390, Size: 0x8] 0x715d825600

--------------------------------
Class: HunterSelectionInfoViewModel.SDViewModel.Object // 71a48e8d00
	BrushBindable AbilityOneIcon;//[Offset: 0x58, Size: 0x178] 0x715d826900
	TextBindable AbilityOneText;//[Offset: 0x1d0, Size: 0x98] 0x715d826980
	BrushBindable AbilityTwoIcon;//[Offset: 0x268, Size: 0x178] 0x715d826a00
	TextBindable AbilityTwoText;//[Offset: 0x3e0, Size: 0x98] 0x715d826a80
	BrushBindable AbilityThreeIcon;//[Offset: 0x478, Size: 0x178] 0x715d826b00
	TextBindable AbilityThreeText;//[Offset: 0x5f0, Size: 0x98] 0x715d826b80
	BrushBindable AbilityPassiveIcon;//[Offset: 0x688, Size: 0x178] 0x715d826c00
	TextBindable AbilityPassiveText;//[Offset: 0x800, Size: 0x98] 0x715d826c80
	BrushBindable AbilityUltimateIcon;//[Offset: 0x898, Size: 0x178] 0x715d826d00
	TextBindable AbilityUltimateText;//[Offset: 0xa10, Size: 0x98] 0x715d826d80
	BrushBindable WeaponIcon;//[Offset: 0xaa8, Size: 0x178] 0x715d826e00
	TextBindable WeaponText;//[Offset: 0xc20, Size: 0x98] 0x715d826e80
	TextBindable HunterName;//[Offset: 0xcb8, Size: 0x98] 0x715d826f00
	BrushBindable HunterIcon;//[Offset: 0xd50, Size: 0x178] 0x715d826f80
	TextBindable ClassName;//[Offset: 0xec8, Size: 0x98] 0x715d827000
	BrushBindable ClassIcon;//[Offset: 0xf60, Size: 0x178] 0x715d827080
	Int32Bindable HasValidHunterSwitcher;//[Offset: 0x10d8, Size: 0x70] 0x715d827100
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1148, Size: 0x1] 0x715d827180

--------------------------------
Class: HunterSelectionInfoWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e8a80
	HunterSelectionInfoViewModel* HunterSelectionInfoViewModel;//[Offset: 0x258, Size: 0x8] 0x715d108e00
	void OnVisibilityChanged(bool bIsVisible);// 0x45c6aa0 0x715d115640

--------------------------------
Class: HunterSelectionPlayerTimerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e8580
	HunterSelectionPlayerTimerViewModel* HunterSelectionPlayerTimerViewModel;//[Offset: 0x258, Size: 0x8] 0x715d108c80
	void OnTimerProgressChanged(const float NewProgress);// 0x45c6aa0 0x715d115480
	void OnStateChanged(out const enum NewState);// 0x45c6aa0 0x715d115560

--------------------------------
Class: HunterSelectionScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e8300
	SlateBrush BackgroundImage;//[Offset: 0x2e0, Size: 0x88] 0x715d108680
	HunterSelectionViewModel* HunterSelectionScreenVM;//[Offset: 0x368, Size: 0x8] 0x715d108700
	class SDUserWidget* HunterWidgetBlueprint;//[Offset: 0x370, Size: 0x8] 0x715d0b47a0
	HunterSelectionPlayerTimerWidget* PlayerTimerWidget1;//[Offset: 0x378, Size: 0x8] 0x715d108780
	HunterSelectionPlayerTimerWidget* PlayerTimerWidget2;//[Offset: 0x380, Size: 0x8] 0x715d108800
	HunterSelectionPlayerTimerWidget* PlayerTimerWidget3;//[Offset: 0x388, Size: 0x8] 0x715d108880
	HunterSelectionPlayerTimerWidget* PlayerTimerWidget4;//[Offset: 0x390, Size: 0x8] 0x715d108900
	HunterSelectionContainerWidget* HunterSelectContainerWidget;//[Offset: 0x398, Size: 0x8] 0x715d108980
	VisibilityBindable PlayerNameVisibility;//[Offset: 0x3a0, Size: 0x70] 0x715d108a00
	TextBindable PlayerName;//[Offset: 0x410, Size: 0x98] 0x715d108a80
	SDUserWidget*[] HunterWidgets;//[Offset: 0x4a8, Size: 0x10] 0x715d0b4840
	SDUserWidget*[] PlayerWidgets;//[Offset: 0x4b8, Size: 0x10] 0x715d0b48e0
	HunterSelectionInfoWidget* InfoPanel;//[Offset: 0x4c8, Size: 0x8] 0x715d108c00

--------------------------------
Class: HuntersResultsSceneDisplay.Actor.Object // 71a48e7e00
	void SetScreenBackgroundMaterial(MaterialInterface* Material);// 0x45c6aa0 0x715d1153a0

--------------------------------
Class: HuntersResultsSceneSkiff.StaticMeshActor.Actor.Object // 71a48e7b80
	void SetSkiffStaticMesh(StaticMesh* Mesh);// 0x45c6aa0 0x715d1151e0

--------------------------------
Class: HuntersMatchResultsController.Actor.Object // 71a48e7680
	CameraActor* DefaultCamera;//[Offset: 0x220, Size: 0x8] 0x715d10a080
	CharacterProxy*[] CharacterProxies;//[Offset: 0x228, Size: 0x10] 0x715d0b4660
	HuntersResultsSceneDisplay* SceneDisplay;//[Offset: 0x238, Size: 0x8] 0x715d10a180
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x240, Size: 0x8] 0x715d10a200
	LevelSequence* LevelSequence;//[Offset: 0x248, Size: 0x8] 0x715d10a280
	HuntersCharacterLayoutVolume* HuntersCharacterLayoutVolume;//[Offset: 0x250, Size: 0x8] 0x715d10a300
	Actor* ResultsTextActor;//[Offset: 0x258, Size: 0x8] 0x715d10a380
	CurveFloat* CameraCurve;//[Offset: 0x260, Size: 0x8] 0x715d10a400
	void OnEndScene();// 0x45c6aa0 0x715d115020
	void OnBeginScene();// 0x45c6aa0 0x715d115100

--------------------------------
Class: CharacterProxy.Actor.Object // 71a4b2e700
	bool bUseRimLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x715cd28d80
	Object* UserData;//[Offset: 0x230, Size: 0x8] 0x715cd28e00
	RimLightComponent* RimLightComponent;//[Offset: 0x258, Size: 0x8] 0x715cd28e80
	float RimLightShadowResolutionScale;//[Offset: 0x260, Size: 0x4] 0x715cd28f00
	SkeletalMeshComponent* MeshComponent;//[Offset: 0x268, Size: 0x8] 0x715cd28f80
	SkeletalMeshComponent*[] EquipmentMeshComponents;//[Offset: 0x270, Size: 0x10] 0x715cc8c4a0
	<GameplayTag,SkeletalMeshComponent*> AllocatedEquipmentMeshes;//[Offset: 0x280, Size: 0x50] 0x715cd31480
	SceneComponent* DummyComponent;//[Offset: 0x2d0, Size: 0x8] 0x715cd29180
	AnimationDefinition* AnimationDefinition;//[Offset: 0x2d8, Size: 0x8] 0x715cd29200
	EquipmentSkinDefinition* CachedEquipmentSkinDefinition;//[Offset: 0x2e0, Size: 0x8] 0x715cd29280
	CharacterSkinDefinition* CachedCharacterSkinDefinition;//[Offset: 0x2e8, Size: 0x8] 0x715cd29300
	ParticleSystemComponent*[] SpawnedCharacterParticleSystemComponents;//[Offset: 0x2f0, Size: 0x10] 0x715cc8c540
	ParticleSystemComponent*[] SpawnedEquipmentParticleSystemComponents;//[Offset: 0x300, Size: 0x10] 0x715cc8c5e0
	RimLightComponent* GetRimLightComponent();// 0x68290dc 0x715ccefba0

--------------------------------
Class: RimLightComponent.SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object // 71a4b25b00
	RimLightParameters RimLightParameters;//[Offset: 0x348, Size: 0x40] 0x715cd27a00
	RimLightParametersDataAsset* RimLightParametersDataAsset;//[Offset: 0x388, Size: 0x8] 0x715cd27a80
	SkeletalMeshComponent* CachedSkeletalMeshComponent;//[Offset: 0x390, Size: 0x8] 0x715cd27b00
	void UpdateRimLightFromDataAsset();// 0x68103d8 0x715ccefd60
	void UpdateDataAsset();// 0x68103c4 0x715ccefe40
	void SetParameters(out const RimLightParameters RimLightParametersIn);// 0x68103ec 0x715cceff20

--------------------------------
Class: RimLightParameters // 715ce7dfc0
	Vector LightOriginOffset;//[Offset: 0x0, Size: 0xc] 0x715ceb4200
	Vector LightTargetOffset;//[Offset: 0xc, Size: 0xc] 0x715ceb2180
	float OuterConeAngle;//[Offset: 0x18, Size: 0x4] 0x715ceb2200
	float AttenutationRadius;//[Offset: 0x1c, Size: 0x4] 0x715ceb2280
	float Intensity;//[Offset: 0x20, Size: 0x4] 0x715ceb2300
	enum IntensityUnits;//[Offset: 0x24, Size: 0x1] 0x715ce93800
	float SpecularScale;//[Offset: 0x28, Size: 0x4] 0x715ceb2400
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x715ceb2480
	float ShadowBias;//[Offset: 0x30, Size: 0x4] 0x715ceb2500
	float ShadowSlopeBias;//[Offset: 0x34, Size: 0x4] 0x715ceb2580
	Color LightColor;//[Offset: 0x38, Size: 0x4] 0x715ceb2600
	float LightFalloffExponent;//[Offset: 0x3c, Size: 0x4] 0x715ceb2680

--------------------------------
Class: RimLightParametersDataAsset.DataAsset.Object // 71a4b25880
	RimLightParameters RimLightParameters;//[Offset: 0x30, Size: 0x40] 0x715cd27980

--------------------------------
Class: AnimationDefinition.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b25600
	AnimMontage* Montage;//[Offset: 0x38, Size: 0x8] 0x715cd27900

--------------------------------
Class: EquipmentSkinDefinition.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2d800
	<GameplayTag,SkeletalMesh*> EquipmentMeshes;//[Offset: 0x38, Size: 0x50] 0x715cd310c0
	<GameplayTag,FName> MaterialSlots;//[Offset: 0x88, Size: 0x50] 0x715cd31180
	MaterialInterface* Material;//[Offset: 0xd8, Size: 0x8] 0x715cd2a200
	<GameplayTag,ParticleSystemToSkeletalMeshArray> ParticleSystems;//[Offset: 0xe0, Size: 0x50] 0x715cd31240

--------------------------------
Class: ParticleSystemToSkeletalMeshArray // 715ce7f940
	ParticleSystemToSkeletalMesh[] ParticleSystems;//[Offset: 0x0, Size: 0x10] 0x715ce93760

--------------------------------
Class: ParticleSystemToSkeletalMesh // 715ce7f880
	FName BoneOrSocketToConnectTo;//[Offset: 0x0, Size: 0x8] 0x715ceb3500
	ParticleSystem* ParticleSystem;//[Offset: 0x8, Size: 0x8] 0x715ceb3580

--------------------------------
Class: CharacterSkinDefinition.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2e200
	SkeletalMesh* SkeletalMesh;//[Offset: 0x38, Size: 0x8] 0x715cd28900
	CharacterSkinMaterial[] MaterialOverrides;//[Offset: 0x40, Size: 0x10] 0x715cc8c220
	CharacterSkinSocketOverride[] SocketOverrides;//[Offset: 0x50, Size: 0x10] 0x715cc8c2c0
	ParticleSystemToSkeletalMeshArray ParticleSystemData;//[Offset: 0x60, Size: 0x10] 0x715cd28a80

--------------------------------
Class: CharacterSkinMaterial // 715ce7ff40
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x715ceb3e80
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x715ceb3f00

--------------------------------
Class: CharacterSkinSocketOverride // 715ce7fe80
	FName SourceSocketName;//[Offset: 0x0, Size: 0x8] 0x715ceb3d80
	FName OverrideSocketName;//[Offset: 0x8, Size: 0x8] 0x715ceb3e00

--------------------------------
Class: LevelSequenceActor.Actor.Object // 71a49cdd00
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x230, Size: 0x14] 0x715db08f00
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x248, Size: 0x8] 0x715db08f80
	SoftObjectPath LevelSequence;//[Offset: 0x250, Size: 0x18] 0x715db09000
	Actor*[] AdditionalEventReceivers;//[Offset: 0x268, Size: 0x10] 0x715dae5600
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x278, Size: 0x2] 0x715db09200
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x280, Size: 0x8] 0x715db09280
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x288, Size: 0x8] 0x715db09300
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x715db09380
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1] 0x715db09400
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1] 0x715db09480
	Object* DefaultInstanceData;//[Offset: 0x298, Size: 0x8] 0x715db07400
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2a0, Size: 0x8] 0x715db07480
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x715db07500
	void ShowBurnin();// 0x57e6318 0x715da17860
	void SetSequence(LevelSequence* InSequence);// 0x57e6578 0x715da17940
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x57e6374 0x715da17a20
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x57e6420 0x715da17b00
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x57e6054 0x715da17be0
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x57e61a4 0x715da17cc0
	void ResetBindings();// 0x57e5b00 0x715da17da0
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x57e5b14 0x715da17e80
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x57e5bdc 0x715da17f60
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x57e5cc0 0x715da18040
	void OnLevelSequenceLoaded__DelegateSignature();// 0x45c6aa0 0x715da18120
	LevelSequence* LoadSequence();// 0x57e661c 0x715da18200
	void HideBurnin();// 0x57e632c 0x715da182e0
	LevelSequencePlayer* GetSequencePlayer();// 0x57e6340 0x715da183c0
	LevelSequence* GetSequence();// 0x57e6650 0x715da184a0
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x57e5940 0x715da18580
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x57e5a3c 0x715da18660
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x57e5dcc 0x715da18740
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x57e5efc 0x715da18820

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object // 71a49cd300
	delegate OnCameraCut;//[Offset: 0x890, Size: 0x10] 0x715caf4c80
	CameraComponent* GetActiveCameraComponent();// 0x57e819c 0x715cae6280
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x57e81d4 0x715cae6360

--------------------------------
Class: LevelSequenceCameraSettings // 715dadcc40
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715db09100
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1] 0x715db09180

--------------------------------
Class: LevelSequenceBurnInOptions.Object // 71a49cdf80
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715caf5200
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18] 0x715caf5280
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8] 0x715caf3200
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x57e54ac 0x715cae66e0

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object // 71a49ce200

--------------------------------
Class: MovieSceneBindingOverrides.Object // 71a49a1000
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10] 0x715ca73440

--------------------------------
Class: MovieSceneBindingOverrideData // 715da9f580
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18] 0x715dac1880
	Object* Object;//[Offset: 0x18, Size: 0x8] 0x715dac1900
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715dac1980

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object // 71a49cda80
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x230, Size: 0xb8] 0x715caf5080
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2e8, Size: 0x8] 0x715caf5100
	void SetSettings(Object* InSettings);// 0x45c6aa0 0x715cae6520
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x57e7428 0x715cae6600

--------------------------------
Class: LevelSequencePlayerSnapshot // 715dadf700
	FString MasterName;//[Offset: 0x0, Size: 0x10] 0x715db0a400
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10] 0x715db0a480
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10] 0x715db0a500
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10] 0x715db08480
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10] 0x715db08500
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10] 0x715db08580
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10] 0x715db08600
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28] 0x715db08680
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc] 0x715db08800
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8] 0x715db08880
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4] 0x715db08900

--------------------------------
Class: LevelSequenceSnapshotSettings // 715dadf640
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1] 0x715db08700
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8] 0x715db08780

--------------------------------
Class: HuntersCharacterLayoutVolume.Volume.Brush.Actor.Object // 71a4b20100

--------------------------------
Class: LanguageSettingsDetailsScreen.BaseSettingsDetailsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e6f00
	SDConfigurableTextBlock* TitleTextBlock;//[Offset: 0x2e0, Size: 0x8] 0x715d109500
	SettingsCheckBoxButton* EnLanguageButton;//[Offset: 0x2e8, Size: 0x8] 0x715d109580
	SettingsCheckBoxButton* EsLanguageButton;//[Offset: 0x2f0, Size: 0x8] 0x715d109600
	SettingsCheckBoxButton* PtLanguageButton;//[Offset: 0x2f8, Size: 0x8] 0x715d109680
	SettingsCheckBoxButton* ZhHantLanguageButton;//[Offset: 0x300, Size: 0x8] 0x715d109700
	SettingsCheckBoxButton* ZhHansLanguageButton;//[Offset: 0x308, Size: 0x8] 0x715d109780
	SettingsCheckBoxButton* FrLanguageButton;//[Offset: 0x310, Size: 0x8] 0x715d109800
	SettingsCheckBoxButton* ItLanguageButton;//[Offset: 0x318, Size: 0x8] 0x715d109880
	SettingsCheckBoxButton* DeLanguageButton;//[Offset: 0x320, Size: 0x8] 0x715d109900
	SettingsCheckBoxButton* KoLanguageButton;//[Offset: 0x328, Size: 0x8] 0x715d109980
	SettingsCheckBoxButton* JaLanguageButton;//[Offset: 0x330, Size: 0x8] 0x715d109a00
	SettingsCheckBoxButton* RuLanguageButton;//[Offset: 0x338, Size: 0x8] 0x715d109a80
	SettingsCheckBoxButton* TrLanguageButton;//[Offset: 0x340, Size: 0x8] 0x715d109b00
	ScrollBox* LanguagesScrollBox;//[Offset: 0x348, Size: 0x8] 0x715d109b80
	LanguageSettingsViewModel* LanguageSettingsViewModel;//[Offset: 0x350, Size: 0x8] 0x715d109c00
	FString CurrentLangKey;//[Offset: 0x358, Size: 0x10] 0x715d109c80
	<FString,SettingsCheckBoxButton*> LangToButtonMapping;//[Offset: 0x368, Size: 0x50] 0x715cecda80
	SettingsCheckBoxButton* CurrentLangButton;//[Offset: 0x3b8, Size: 0x8] 0x715d109e00
	void SetLanguageInGame(const FString InLangKey, const bool IsToggled);// 0x3e52548 0x715d114d80

--------------------------------
Class: LanguageSettingsViewModel.SettingsDetailsViewModel.SDViewModel.Object // 71a48e6c80
	void ReportOnBackPressedEvent();// 0x3e52aac 0x715d114ca0

--------------------------------
Class: MapShowcaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e6a00
	MapShowcaseViewModel* MapShowcaseScreenVM;//[Offset: 0x268, Size: 0x8] 0x715d10b580

--------------------------------
Class: MapShowcaseViewModel.SDListenerViewModel.SDViewModel.Object // 71a48e6780
	VisibilityBindable NextSelecter;//[Offset: 0x70, Size: 0x70] 0x715d10b100
	TextBindable MapName;//[Offset: 0xe0, Size: 0x98] 0x715d10b180
	TextBindable GameModeName;//[Offset: 0x178, Size: 0x98] 0x715d10b200
	BrushBindable MapPreview;//[Offset: 0x210, Size: 0x178] 0x715d10b280
	Texture2DBindable TeamLogo;//[Offset: 0x388, Size: 0x78] 0x715d10b300
	TextBindable TeamName;//[Offset: 0x400, Size: 0x98] 0x715d10b380
	TextBindable TimeoutTimer;//[Offset: 0x498, Size: 0x98] 0x715d10b400
	TextBindable PlayersInWaiting;//[Offset: 0x530, Size: 0x98] 0x715d10b480
	TimerHandle WaitingTimer;//[Offset: 0x5c8, Size: 0x8] 0x715d10b500

--------------------------------
Class: MatchOptionsHudButtonWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e6500
	Button* RequestMatchOptionsButton;//[Offset: 0x278, Size: 0x8] 0x715d10b080
	void ShowMatchOptions();// 0x3e5320c 0x715d114ae0
	void OnMatchOptionsDismissed();// 0x45c6aa0 0x715d114bc0

--------------------------------
Class: MatchOptionsScreenWidget.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e6280
	BoolBindable QuitGameButtonIsEnabled;//[Offset: 0x2e0, Size: 0x70] 0x715d10b000
	void UpdateQuiteGameButtonVisibilityState();// 0x3e535e4 0x715d114680
	void ShowMatchSettings();// 0x3e535f8 0x715d114760
	void ResumeMatch();// 0x3e5360c 0x715d114840
	void QuitMatch();// 0x3e53620 0x715d114920
	void OnMatchOptionsFocused();// 0x45c6aa0 0x715d114a00

--------------------------------
Class: MatchPersistentScreenWidget.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e6000
	VoiceChatButtonsWidget* VoiceChatButtonsWidget;//[Offset: 0x2e0, Size: 0x8] 0x715d10ad80
	VoiceChatControlsWidget* VoiceChatControlsWidget;//[Offset: 0x2e8, Size: 0x8] 0x715d10ae00
	MatchPersistentScreenViewModel* MatchPersistentScreenVM;//[Offset: 0x2f0, Size: 0x8] 0x715d10ae80
	void ShowMatchVoiceChat();// 0x3e53a5c 0x715d1143e0
	void OnInfoPanelVisibilityChanged(const bool bIsInfoPanelVisible);// 0x45c6aa0 0x715d1144c0
	void OnInfoPanelEnabledChanged(const bool bIsInfoPanelEnabled);// 0x45c6aa0 0x715d1145a0

--------------------------------
Class: MatchPersistentScreenViewModel.SDListenerViewModel.SDViewModel.Object // 71a48e5d80
	VoiceChatButtonsViewModel* VoiceChatButtonsViewModel;//[Offset: 0xa0, Size: 0x8] 0x715d10ab80
	VoiceChatControlsViewModel* VoiceChatControlsViewModel;//[Offset: 0xa8, Size: 0x8] 0x715d10ac00
	bool bIsInfoPanelVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x715d10ac80
	bool bIsInfoPanelEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1] 0x715d10ad00
	void RequestToggleInfoPanelVisibility();// 0x3e53f2c 0x715d114300

--------------------------------
Class: MatchResultsScreenWidget.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e5b00
	WidgetAnimation* TitleIntro;//[Offset: 0x268, Size: 0x8] 0x715d10a800
	WidgetAnimation* TitleLoop;//[Offset: 0x270, Size: 0x8] 0x715d10a880
	WidgetAnimation* TitleOutro;//[Offset: 0x278, Size: 0x8] 0x715d10a900
	WidgetAnimation* ContentIntro;//[Offset: 0x280, Size: 0x8] 0x715d10a980
	WidgetAnimation* OverriddenContentIntro;//[Offset: 0x288, Size: 0x8] 0x715d10aa00
	MatchResultsViewModel* MatchResultsViewModel;//[Offset: 0x290, Size: 0x8] 0x715d10aa80
	SDHorizontalBoxWrapper* HunterResults;//[Offset: 0x298, Size: 0x8] 0x715d10ab00
	void OnMovedToResults();// 0x3e545bc 0x715d114220

--------------------------------
Class: MatchResultsViewModel.SDListenerViewModel.SDViewModel.Object // 71a48e5380
	MatchEndData MatchEndData;//[Offset: 0xa8, Size: 0x38] 0x715d10c100
	TextBindable ResultText;//[Offset: 0xe8, Size: 0x98] 0x715d10c180
	ColorBindable ResultColor;//[Offset: 0x180, Size: 0x88] 0x715d10c200
	TextBindable ReturnToMenuText;//[Offset: 0x208, Size: 0x98] 0x715d10c280
	bool bWon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x715d10c300
	MatchResultsStatCardViewModel*[] StatCardViewModels;//[Offset: 0x2a8, Size: 0x10] 0x715d0b45c0
	bool ShouldOverrideResultAnimations();// 0x3e550dc 0x715d113f80

--------------------------------
Class: MatchEndData // 715cec7f00
	bool bHasGameEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715cef4780
	HuntersPlayerState*[] WinningPlayers;//[Offset: 0x8, Size: 0x10] 0x715ce97360
	HuntersPlayerState*[] LosingPlayers;//[Offset: 0x18, Size: 0x10] 0x715ce97400
	int WinnerScore;//[Offset: 0x28, Size: 0x4] 0x715cef4900
	int LoserScore;//[Offset: 0x2c, Size: 0x4] 0x715cef4980
	enum EndReason;//[Offset: 0x30, Size: 0x1] 0x715ce974a0

--------------------------------
Class: MatchResultsStatCardViewModel.SDListenerViewModel.SDViewModel.Object // 71a48e5880
	TextBindable PlayerNameText;//[Offset: 0x88, Size: 0x98] 0x715d10a580
	ColorBindable PlayerNameColor;//[Offset: 0x120, Size: 0x88] 0x715d10a600
	BoolBindable IsVisible;//[Offset: 0x1a8, Size: 0x70] 0x715d10a680
	PlayerAvatarViewModel* AvatarViewModel;//[Offset: 0x218, Size: 0x8] 0x715d10a700
	bool ShouldDeferFadeInForCinematic();// 0x3e549d4 0x715d114140

--------------------------------
Class: MatchResultsStatCardWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48e5600
	float SpacerHeight;//[Offset: 0x254, Size: 0x4] 0x715d10c480
	VerticalBox* StatVerticalBox;//[Offset: 0x258, Size: 0x8] 0x715d10c500
	PlayerAvatarWidget* PlayerAvatar;//[Offset: 0x260, Size: 0x8] 0x715d10c580
	MatchResultsStatCardViewModel* MatchResultsStatCardViewModel;//[Offset: 0x268, Size: 0x8] 0x715d10c600
	void ShowStatCardWidget();// 0x45c6aa0 0x715d114060

--------------------------------
Class: MatchSettingsHUDCustomization.BlueprintFunctionLibrary.Object // 71a48ef600
	static void InitializeCustomizations(const Object* WorldContextObject);// 0x3e55490 0x715d113c00
	static bool HasCustomizations();// 0x3e55524 0x715d113ce0
	static DataTable* GetDataTable(const Object* WorldContextObject);// 0x3e553ec 0x715d113dc0
	static void ApplyNormalizedPosition(out const Vector2D Position, Widget* CustomizableWidget);// 0x3e5555c 0x715d113ea0

--------------------------------
Class: MatchSettingsHUDCustomizationSettings.DeveloperSettings.Object // 71a48ef380
	DataTable* DefaultCustomizationTable;//[Offset: 0x38, Size: 0x28] 0x715d10bd00
	DataTable* DefaultCustomizationTableTablet;//[Offset: 0x60, Size: 0x28] 0x715d10bd80

--------------------------------
Class: MatchSettingsHUDCustomizationViewModel.MatchSettingsTabViewModel.SDViewModel.Object // 71a48ef100
	enum HUDCustomizable;//[Offset: 0x50, Size: 0x1] 0x715d0b4520
	float Scale;//[Offset: 0x54, Size: 0x4] 0x715d10bb00
	float Opacity;//[Offset: 0x58, Size: 0x4] 0x715d10bb80
	Vector2D NormalizedPosition;//[Offset: 0x5c, Size: 0x8] 0x715d10bc00
	void SetNormalizedPosition(out const Vector2D InNormalizedPosition);// 0x3e55bc0 0x715d117240
	void LoadFromSettings();// 0x3e55bac 0x715d117320
	void CommitChanges();// 0x3e55c70 0x715d113a40
	void CancelChanges();// 0x3e55c84 0x715d113b20

--------------------------------
Class: MatchSettingsHUDCustomizationWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48eec00
	MatchSettingsHUDCustomizationViewModel* MatchSettingsHUDCustomizationViewModel;//[Offset: 0x258, Size: 0x8] 0x715d10b880
	void SetOverlapValidationState(bool bIsValid);// 0x45c6aa0 0x715d116c20
	void SetActive(bool bActive);// 0x45c6aa0 0x715d116d00
	void Revert();// 0x3e5a3a8 0x715d116de0
	void ResetToDefaults();// 0x45c6aa0 0x715d116ec0
	void ResetFromViewModel();// 0x45c6aa0 0x715d116fa0
	FText GetLabelText();// 0x45c6aa0 0x715d117080
	void Commit();// 0x3e5a394 0x715d117160

--------------------------------
Class: MatchSettingsRadioImageButton.HuntersStandardButton.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ee980
	FName TextBackgroundColorName;//[Offset: 0x3d8, Size: 0x8] 0x715d10d680
	FName DisabledTextBackgroundColorName;//[Offset: 0x3e0, Size: 0x8] 0x715d10b600
	Image* TextBackground;//[Offset: 0x3e8, Size: 0x8] 0x715d10b680
	Image* Image;//[Offset: 0x3f0, Size: 0x8] 0x715d10b700
	void SetTextBackgroundColors(FName InTextBackgroundColor);// 0x3e5aaec 0x715d116a60
	void SetImageResource(Object* InRes);// 0x3e5aa48 0x715d116b40

--------------------------------
Class: MatchSettingsScreenWidget.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ee700
	MatchSettingsViewModel* MatchSettingsVM;//[Offset: 0x2e0, Size: 0x8] 0x715d10d200
	MatchSettingsTabBarWidget* SettingsTabBarLegacy;//[Offset: 0x2e8, Size: 0x8] 0x715d10d280
	MatchSettingsTabInputAndControlsWidget* TabInputAndControls;//[Offset: 0x2f0, Size: 0x8] 0x715d10d300
	MatchSettingsTabPerHunterOptionsWidget* TabPerHunterOptions;//[Offset: 0x2f8, Size: 0x8] 0x715d10d380
	MatchSettingsTabInterfaceWidget* TabInterface;//[Offset: 0x300, Size: 0x8] 0x715d10d400
	MatchSettingsTabHUDLayoutWidget* TabHUDLayout;//[Offset: 0x308, Size: 0x8] 0x715d10d480
	MatchSettingsTabGraphicsWidget* TabGraphics;//[Offset: 0x310, Size: 0x8] 0x715d10d500
	MatchSettingsTabAudioWidget* TabAudio;//[Offset: 0x318, Size: 0x8] 0x715d10d580
	MatchSettingsTabAccountAndPrivacyWidget* TabAccountAndPrivacy;//[Offset: 0x320, Size: 0x8] 0x715d10d600

--------------------------------
Class: MatchSettingsViewModel.SDViewModel.Object // 71a48eba00
	BoolBindable QuitGameButtonEnabled;//[Offset: 0x48, Size: 0x70] 0x715d123680
	MatchSettingsTabBarViewModel* TabBarViewModel;//[Offset: 0xb8, Size: 0x8] 0x715d123700
	MatchSettingsTabInputAndControlsViewModel* TabInputAndControlsViewModel;//[Offset: 0xc0, Size: 0x8] 0x715d123780
	MatchSettingsTabPerHunterOptionsViewModel* TabPerHunterOptionsViewModel;//[Offset: 0xc8, Size: 0x8] 0x715d123800
	MatchSettingsTabHUDLayoutViewModel* TabHUDLayoutViewModel;//[Offset: 0xd0, Size: 0x8] 0x715d123880
	MatchSettingsTabGamepadTuningViewModel* TabGamepadTuningViewModel;//[Offset: 0xd8, Size: 0x8] 0x715d123900
	MatchSettingsTabInterfaceViewModel* TabInterfaceViewModel;//[Offset: 0xe0, Size: 0x8] 0x715d123980
	MatchSettingsTabGraphicsViewModel* TabGraphicsViewModel;//[Offset: 0xe8, Size: 0x8] 0x715d123a00
	MatchSettingsTabAudioViewModel* TabAudioViewModel;//[Offset: 0xf0, Size: 0x8] 0x715d123a80
	MatchSettingsTabAccountAndPrivacyViewModel* TabAccountAndPrivacyViewModel;//[Offset: 0xf8, Size: 0x8] 0x715d123b00
	void OnQuitGame();// 0x3e67d4c 0x715d11fba0
	void OnBack();// 0x3e67d60 0x715d11fc80

--------------------------------
Class: MatchSettingsTabBarViewModel.SDViewModel.Object // 71a48eda80
	delegate OnSettingsTab;//[Offset: 0x50, Size: 0x10] 0x715d10db00
	void OnPerHunterOptions();// 0x3e5d52c 0x715d118580
	void OnInterface();// 0x3e5d518 0x715d118660
	void OnInputAndControls();// 0x3e5d540 0x715d118740
	void OnHUDLayout();// 0x3e5d504 0x715d118820
	void OnGraphics();// 0x3e5d4c8 0x715d118900
	void OnGamepadTuning();// 0x3e5d4f0 0x715d1189e0
	void OnBack();// 0x3e5d554 0x715d118ac0
	void OnAudio();// 0x3e5d4dc 0x715d118ba0
	void OnAccountAndPrivacy();// 0x3e5d4b4 0x715d118c80

--------------------------------
Class: MatchSettingsTabInputAndControlsViewModel.MatchSettingsTabViewModel.SDViewModel.Object // 71a48ec900
	bool bEnableInMatchTipsToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d124200
	BoolBindable IsLotustSelectionEnabled;//[Offset: 0x58, Size: 0x70] 0x715d122180
	BoolBindable IsAutoFireSelectionEnabled;//[Offset: 0xc8, Size: 0x70] 0x715d122200
	HuntersPlayerPreferences* PlayerPreferences;//[Offset: 0x138, Size: 0x8] 0x715d122280
	TouchConfiguration* TouchConfiguration;//[Offset: 0x140, Size: 0x8] 0x715d122300
	void SetZTargetingMode(enum AimMode);// 0x3e64354 0x715d11d1a0
	void SetTouchPointsEnabled(bool InEnabled);// 0x3e640ec 0x715d11d280
	void SetShowInMatchTips(bool bShowInMatchTips);// 0x3e64814 0x715d11d360
	void SetNormalizedAimAssistTouchSensitivity(float NormalValue);// 0x3e64bd8 0x715d11d440
	void SetFireMode(byte FireMode);// 0x3e644d0 0x715d11d520
	void SetAimAssistVerticalSensitivity(float Value);// 0x3e64a50 0x715d11d600
	void SetAimAccelerationEnabled(const bool Enabled);// 0x3e649a4 0x715d11d6e0
	void SetAdvancedInput(bool bAdvanced);// 0x3e64658 0x715d11d7c0
	void SetADSMode(enum AimMode);// 0x3e643f8 0x715d11d8a0
	void SetADSAutomaticMode(bool Automatic);// 0x3e64240 0x715d11d980
	void SetAbilityButtonLayout(byte ButtonLayout);// 0x3e64738 0x715d11da60
	void SetAbilitiesTriggerZTargetingAutomatically(bool IsEnabled);// 0x3e648c0 0x715d11db40
	void RestoreDefaults();// 0x3e640d8 0x715d11dc20
	bool IsTouchPointsEnabled();// 0x3e64198 0x715d11dd00
	bool IsHapticsCategoryEnabled(enum Category);// 0x3e65310 0x715d11dde0
	bool IsHapticFeedbackAllowed();// 0x3e652d8 0x715d11dec0
	bool IsAnyHapticsCustom();// 0x3e65268 0x715d11dfa0
	bool IsAnyHapticsCategoryEnabled();// 0x3e652a0 0x715d11e080
	void InvertAxisVertical(bool Enabled);// 0x3e64d1c 0x715d11e160
	void InvertAxisHorizontal(bool Enabled);// 0x3e64dc8 0x715d11e240
	void InputModeToggle(bool bAdvanced);// 0x3e64574 0x715d11e320
	void HapticsOnTakeDamage();// 0x3e653c0 0x715d11e400
	void HapticsOnAttack();// 0x3e653d4 0x715d11e4e0
	void HapticsOnAll();// 0x3e653e8 0x715d11e5c0
	enum GetZTargetingMode();// 0x3e642ec 0x715d11e6a0
	bool GetShowInMatchTips();// 0x3e647dc 0x715d11adc0
	float GetNormalizedAimAssistTouchSensitivity();// 0x3e64ce8 0x715d11aea0
	float GetMinAimSensitivityDisplayValue();// 0x3e640a4 0x715d11af80
	bool GetIsInADSAutomaticAndManual();// 0x3e641d0 0x715d11b060
	bool GetInvertAxisVertical();// 0x3e64e74 0x715d11b140
	bool GetInvertAxisHorizontal();// 0x3e64eac 0x715d11b220
	bool GetInputModeToggle();// 0x3e64620 0x715d11b300
	byte GetFireMode();// 0x3e6449c 0x715d11b3e0
	HuntersFeedbackCategorySettings GetFeedbackCategorySettings(enum Category);// 0x3e64fdc 0x715d11b4c0
	float GetAimAssistVerticalSensitivity();// 0x3e64cb4 0x715d11b5a0
	bool GetAimAccelerationEnabled();// 0x3e64c7c 0x715d11b680
	enum GetADSMode();// 0x3e64320 0x715d11b760
	bool GetADSAutomaticMode();// 0x3e64208 0x715d11b840
	byte GetAbilityButtonLayout();// 0x3e64704 0x715d11b920
	bool GetAbilitiesTriggerZTargetingAutomatically();// 0x3e6496c 0x715d11ba00
	void FinishedSettingNormalizedAimAssistTouchSensitivity(float StartValue, float EndValue);// 0x3e64af4 0x715d11bae0
	void EnableHapticsCategory(enum Category, float Strength);// 0x3e65090 0x715d11bbc0
	void DisableHapticsCategory(enum Category, bool bCustomValue);// 0x3e65178 0x715d11bca0
	void DisableHaptics();// 0x3e653fc 0x715d11bd80
	float ApplySensitivityAdjustment(float InValue);// 0x3e63ff8 0x715d11be60
	void ApplyFeedbackCategorySettings(enum Category, out const HuntersFeedbackCategorySettings InSettings);// 0x3e64ee4 0x715d11bf40

--------------------------------
Class: HuntersFeedbackCategorySettings // 715ce7e980
	float CategoryStrength;//[Offset: 0x0, Size: 0x4] 0x715ceb1d80
	bool bIsCustomValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715ceb1e00

--------------------------------
Class: HuntersPlayerPreferences.GameUserSettings.Object // 71a4b28a80
	int HUDCustomizationVersion;//[Offset: 0x120, Size: 0x4] 0x715cd23e80
	HuntersHUDCustomizationData[] CustomizedWidgets;//[Offset: 0x128, Size: 0x10] 0x715cc8ad80
	ChatSettings ChatSettings;//[Offset: 0x138, Size: 0x3] 0x715cd23f80
	InterfaceSettings InterfaceSettings;//[Offset: 0x13b, Size: 0x2] 0x715cd24000
	ColorAdjustmentsSettings ColorAdjustmentsSettings;//[Offset: 0x1a0, Size: 0xc] 0x715cd24080
	VolumeSettings VolumeSettings;//[Offset: 0x1ac, Size: 0x10] 0x715cd24100
	GlobalHunterSettingsData GlobalHunterSettingsData;//[Offset: 0x1c0, Size: 0x70] 0x715cd24180
	HunterSettingsData BasePerHunterSettingsData;//[Offset: 0x230, Size: 0xd8] 0x715cd24200
	<MetaTuningDataKey,HunterSettingsData> PerHunterSettingsData;//[Offset: 0x308, Size: 0x50] 0x715cecf7c0
	<MetaTuningDataKey,GamepadButtonMappingSet> PerHunterButtonMappingData;//[Offset: 0x358, Size: 0x50] 0x715cecf880
	FString TermsOfServiceAcceptedVersion;//[Offset: 0x3a8, Size: 0x10] 0x715cd22380
	int AppReviewPromptedVersion;//[Offset: 0x3b8, Size: 0x4] 0x715cd22400
	int AppReviewLastPromptedMatchCount;//[Offset: 0x3bc, Size: 0x4] 0x715cd22480

--------------------------------
Class: HuntersHUDCustomizationData // 715ce7e680
	float Scale;//[Offset: 0x0, Size: 0x4] 0x715ceb1500
	float Opacity;//[Offset: 0x4, Size: 0x4] 0x715ceb1580
	Vector2D NormalizedPosition;//[Offset: 0x8, Size: 0x8] 0x715ceb1600

--------------------------------
Class: ChatSettings // 715ce7e5c0
	bool bOpenMicrophonePreference;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715ceb1380
	bool bAutoJoinPartyChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715ceb1400
	bool bAutoJoinTeamChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715ceb1480

--------------------------------
Class: InterfaceSettings // 715ce7e8c0
	bool bFlashingText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715ceb1a00
	bool bCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715ceb1a80

--------------------------------
Class: ColorAdjustmentsSettings // 715ce7e740
	float Brightness;//[Offset: 0x0, Size: 0x4] 0x715ceb1680
	float Contrast;//[Offset: 0x4, Size: 0x4] 0x715ceb1700
	float Gamma;//[Offset: 0x8, Size: 0x4] 0x715ceb1780

--------------------------------
Class: VolumeSettings // 715ce7e800
	float Music;//[Offset: 0x0, Size: 0x4] 0x715ceb1800
	float AmbientSFX;//[Offset: 0x4, Size: 0x4] 0x715ceb1880
	float GameplaySFX;//[Offset: 0x8, Size: 0x4] 0x715ceb1900
	float CharacterVoices;//[Offset: 0xc, Size: 0x4] 0x715ceb1980

--------------------------------
Class: GlobalHunterSettingsData // 715ce7ec80
	bool AbilitiesTriggerZTargetingAutomatically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715ceb1b00
	bool CancelADSWithMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715ceb1b80
	byte FireModeSettings;//[Offset: 0x2, Size: 0x1] 0x715ceb1c00
	byte RangedFireModeSettings;//[Offset: 0x3, Size: 0x1] 0x715ceb1c80
	byte MeleeFireModeSettings;//[Offset: 0x4, Size: 0x1] 0x715ceb1d00
	HuntersFeedbackSettingsData FeedbackSetting;//[Offset: 0x8, Size: 0x50] 0x715ceb1f80
	float HDRumbleIntensity;//[Offset: 0x58, Size: 0x4] 0x715ceb2000
	bool ADSAutomaticManualMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x715ceb2080
	enum ADSTriggerType;//[Offset: 0x5d, Size: 0x1] 0x715ce93940
	enum ZTargetingTriggerType;//[Offset: 0x5e, Size: 0x1] 0x715ce939e0
	bool InvertLookingYAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 0x1] 0x715ceb0100
	bool InvertLookingXAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715ceb0180
	bool FlipJoysticks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x715ceb0200
	GlobalGyroSettingsData GlobalGyroSettings;//[Offset: 0x62, Size: 0x6] 0x715ceb0580
	bool ShowInMatchTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715ceb0600
	byte AbilityButtonLayout;//[Offset: 0x69, Size: 0x1] 0x715ceb0680

--------------------------------
Class: HuntersFeedbackSettingsData // 715ce7eb00
	<enum,HuntersFeedbackCategorySettings> Categories;//[Offset: 0x0, Size: 0x50] 0x715ce7ea40

--------------------------------
Class: GlobalGyroSettingsData // 715ce7ebc0
	bool bGyroEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715ceb0280
	enum bGyroLookAxis;//[Offset: 0x1, Size: 0x1] 0x715ce93a80
	bool bGyroXAxisInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715ceb0380
	bool bGyroYAxisInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715ceb0400
	bool bGyroDisabledWithJoystick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715ceb0480
	bool bGyroEnabledOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x715ceb0500

--------------------------------
Class: HunterSettingsData // 715ce7ee00
	GamepadConfigSet GamepadConfigData;//[Offset: 0x0, Size: 0xc8] 0x715ceb0700
	TouchInputSettings TouchInputSettings;//[Offset: 0xc8, Size: 0x10] 0x715ceb0b00

--------------------------------
Class: GamepadConfigSet // 715ce7f700
	GamepadConfig StandardGamepadConfig;//[Offset: 0x0, Size: 0x64] 0x715ceaf380
	GamepadConfig JoyconGamepadConfig;//[Offset: 0x64, Size: 0x64] 0x715ceadd80

--------------------------------
Class: GamepadConfig // 715ce7f640
	float BoostLength;//[Offset: 0x0, Size: 0x4] 0x715ceaf400
	float BoostMax;//[Offset: 0x4, Size: 0x4] 0x715ceaf480
	enum LookingCurveType;//[Offset: 0x8, Size: 0x1] 0x715ce918c0
	float ADSSensitivityModifier;//[Offset: 0xc, Size: 0x4] 0x715ceaf580
	float AimAssistStrength;//[Offset: 0x10, Size: 0x4] 0x715ceaf600
	JoystickConfig MovementJoystickConfig;//[Offset: 0x14, Size: 0x1c] 0x715ceaf680
	JoystickConfig LookingJoystickConfig;//[Offset: 0x30, Size: 0x1c] 0x715cead980
	GyroConfig GyroConfig;//[Offset: 0x4c, Size: 0x18] 0x715ceadd00

--------------------------------
Class: JoystickConfig // 715ce7f4c0
	float LowerRadialDeadZone;//[Offset: 0x0, Size: 0x4] 0x715ceaf700
	float UpperRadialDeadZone;//[Offset: 0x4, Size: 0x4] 0x715ceaf780
	float DiagonalSensitivityModifier;//[Offset: 0x8, Size: 0x4] 0x715cead700
	float SensitivityX;//[Offset: 0xc, Size: 0x4] 0x715cead780
	float SensitivityY;//[Offset: 0x10, Size: 0x4] 0x715cead800
	float AlphaSmoothing;//[Offset: 0x14, Size: 0x4] 0x715cead880
	float BetaSmoothing;//[Offset: 0x18, Size: 0x4] 0x715cead900

--------------------------------
Class: GyroConfig // 715ce7f580
	float GyroSensitivityX;//[Offset: 0x0, Size: 0x4] 0x715ceada00
	float GyroSensitivityY;//[Offset: 0x4, Size: 0x4] 0x715ceada80
	float GyroDeadzoneThreshold;//[Offset: 0x8, Size: 0x4] 0x715ceadb00
	float AlphaSmoothing;//[Offset: 0xc, Size: 0x4] 0x715ceadb80
	float BetaSmoothing;//[Offset: 0x10, Size: 0x4] 0x715ceadc00
	float GyroAimAssistWeighting;//[Offset: 0x14, Size: 0x4] 0x715ceadc80

--------------------------------
Class: TouchInputSettings // 715ce7ed40
	bool InvertTouchHorizontalAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715ceb0780
	bool InvertTouchVerticalAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715ceb0800
	float AimAssistTouchSensitivityMultiplyer;//[Offset: 0x4, Size: 0x4] 0x715ceb0880
	float AimAssistVerticalSensitivityMultiplyer;//[Offset: 0x8, Size: 0x4] 0x715ceb0900
	bool AimAccelerationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715ceb0980
	bool AdvancedInputModeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x715ceb0a00
	bool TouchPointsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1] 0x715ceb0a80

--------------------------------
Class: GamepadButtonMappingSet // 715ce7f340
	<Key,enum> ButtonMappings;//[Offset: 0x0, Size: 0x50] 0x715ce7f280
	enum[] HUDAbilityInputOrder;//[Offset: 0x50, Size: 0x10] 0x715ce91820

--------------------------------
Class: TouchConfiguration.DeveloperSettings.Object // 71a4b38300
	float MaxDoubleTapDuration;//[Offset: 0x38, Size: 0x4] 0x715cd66780
	float MaxDoubleTapDistance;//[Offset: 0x3c, Size: 0x4] 0x715cd66800
	Vector2D LookingSensitivity;//[Offset: 0x40, Size: 0x8] 0x715cd66880
	Vector2D LookingDegradationRate;//[Offset: 0x48, Size: 0x8] 0x715cd66900
	RuntimeFloatCurve LookingInputCurve;//[Offset: 0x50, Size: 0x88] 0x715cd66980
	uint32 LookingMomentumFrameAverageCount;//[Offset: 0xd8, Size: 0x4] 0x715cd66a00
	Vector2D MovingSensitivity;//[Offset: 0xdc, Size: 0x8] 0x715cd66a80
	RuntimeFloatCurve MovingInputCurve;//[Offset: 0xe8, Size: 0x88] 0x715cd66b00
	bool bDeadZoneMitigationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1] 0x715cd66b80
	uint32 DeadZoneMitigationFrameAverageCount;//[Offset: 0x174, Size: 0x4] 0x715cd66c00
	float MinPlayerAimingSensitivity;//[Offset: 0x178, Size: 0x4] 0x715cd66c80
	float MaxPlayerAimingSensitivity;//[Offset: 0x17c, Size: 0x4] 0x715cd66d00

--------------------------------
Class: MatchSettingsTabPerHunterOptionsViewModel.MatchSettingsTabViewModel.SDViewModel.Object // 71a48ebf00

--------------------------------
Class: MatchSettingsTabHUDLayoutViewModel.MatchSettingsTabViewModel.SDViewModel.Object // 71a48ece00
	MatchSettingsHUDCustomizationViewModel*[] CustomizationViewModels;//[Offset: 0x50, Size: 0x10] 0x715d0b60a0
	HuntersPlayerPreferences* PlayerPreferences;//[Offset: 0x60, Size: 0x8] 0x715d120800
	bool ShowingManualFire();// 0x3e62f54 0x715d11c720
	bool ShowingLotus();// 0x3e62f8c 0x715d11c800
	void SetAdvancedInput(bool bAdvanced);// 0x3e62fc4 0x715d11c8e0

--------------------------------
Class: MatchSettingsTabGamepadTuningViewModel.MatchSettingsTabViewModel.SDViewModel.Object // 71a48ed580
	HuntersPlayerPreferences* PlayerSettings;//[Offset: 0x50, Size: 0x8] 0x715d10eb00
	void SetLookingSensitivityYAxis(float Value);// 0x3e5e694 0x715d11a500
	void SetLookingSensitivityXAxis(float Value);// 0x3e5e76c 0x715d11a5e0
	void SetInvertedYAxis(bool Invert);// 0x3e5e844 0x715d11a6c0
	void SetInvertedXAxis(bool Invert);// 0x3e5e928 0x715d11a7a0
	void SetHDRumbleIntensity(float Value);// 0x3e5dd10 0x715d11a880
	void SetGyroYAxisInverted(bool Enabled);// 0x3e5e3e8 0x715d11a960
	void SetGyroXAxisInverted(bool Enabled);// 0x3e5e4cc 0x715d11aa40
	void SetGyroSensitivityYAxis(float Value);// 0x3e5e238 0x715d11ab20
	void SetGyroSensitivityXAxis(float Value);// 0x3e5e310 0x715d11ac00
	void SetGyroRotationAxis(enum Enabled);// 0x3e5df98 0x715d11ace0
	void SetGyroEnabledOnlyInADS(bool Enabled);// 0x3e5e070 0x715d117400
	void SetGyroEnabled(bool Enabled);// 0x3e5e5b0 0x715d1174e0
	void SetGyroDisabledWithJoystick(bool Enabled);// 0x3e5e154 0x715d1175c0
	void SetADSTriggerType(enum TriggerType);// 0x3e5dec0 0x715d1176a0
	void SetADSSensitivityModifier(float Value);// 0x3e5dde8 0x715d117780
	float GetLookingSensitivityYAxis();// 0x3e5e738 0x715d117860
	float GetLookingSensitivityXAxis();// 0x3e5e810 0x715d117940
	bool GetInvertedYAxis();// 0x3e5e8f0 0x715d117a20
	bool GetInvertedXAxis();// 0x3e5e9d4 0x715d117b00
	float GetHDRumbleIntensity();// 0x3e5ddb4 0x715d117be0
	bool GetGyroYAxisInverted();// 0x3e5e494 0x715d117cc0
	bool GetGyroXAxisInverted();// 0x3e5e578 0x715d117da0
	enum GetGyroRotationAxis();// 0x3e5e03c 0x715d117e80
	bool GetGyroEnabledOnlyInADS();// 0x3e5e11c 0x715d117f60
	bool GetGyroEnabled();// 0x3e5e65c 0x715d118040
	bool GetGyroDisabledWithJoystick();// 0x3e5e200 0x715d118120
	float GetGryoSensitivityYAxis();// 0x3e5e2dc 0x715d118200
	float GetGryoSensitivityXAxis();// 0x3e5e3b4 0x715d1182e0
	enum GetADSTriggerType();// 0x3e5df64 0x715d1183c0
	float GetADSSensitivityModifier();// 0x3e5de8c 0x715d1184a0

--------------------------------
Class: MatchSettingsTabInterfaceViewModel.MatchSettingsTabViewModel.SDViewModel.Object // 71a48ec400
	void SetScreenShakeMode(bool bEnabled);// 0x3e66b4c 0x715d11fd60
	void SetHighContrastMode(enum InHighContrastMode);// 0x3e66c30 0x715d11fe40
	static void SetFlashingTextMode(bool bEnabled);// 0x3e66a78 0x715d11ff20
	void SetColorVisionDeficiencyMode(enum InColorVisionDeficiencyMode);// 0x3e66d3c 0x715d11caa0
	static bool GetScreenShakeMode();// 0x3e66bf8 0x715d11cb80
	int GetHighContrastModeAsIndex();// 0x3e66cd4 0x715d11cc60
	enum GetHighContrastMode();// 0x3e66d08 0x715d11cd40
	static bool GetFlashingTextMode();// 0x3e66b14 0x715d11ce20
	int GetColorVisionDeficiencyModeAsIndex();// 0x3e66de0 0x715d11cf00
	enum GetColorVisionDeficiencyMode();// 0x3e66e14 0x715d11cfe0

--------------------------------
Class: MatchSettingsTabGraphicsViewModel.MatchSettingsTabViewModel.SDViewModel.Object // 71a48ed300
	enum GraphicsSettingsContext;//[Offset: 0x50, Size: 0x1] 0x715d0b6140
	void UseDefaultGraphicsSettings();// 0x3e5fa9c 0x715d11c9c0
	void UseDefaultFrontendSettings();// 0x3e5fa88 0x715d1190e0
	void UseDefaultBattleSettingsForTarget(enum InTarget);// 0x3e5f9e4 0x715d1191c0
	void SetQualityLevel(enum InQualityLevel);// 0x3e5fd80 0x715d1192a0
	void SetNormalizedScreenPercentage(float InScreenPercentage);// 0x3e5fc38 0x715d119380
	void SetGraphicsSettingsContext(enum InContext);// 0x3e5fec8 0x715d119460
	void SetFrameRate(enum InFrameRate);// 0x3e5fe24 0x715d119540
	void SetDynamicResolution(enum InDynamicResolution);// 0x3e5fab0 0x715d119620
	void SetAntiAliasing(enum InAntiAliasing);// 0x3e5fcdc 0x715d119700
	bool IsUsingDefaultGraphicsSettings();// 0x3e5f9ac 0x715d1197e0
	bool IsUsingDefaultFrontendSettings();// 0x3e5f974 0x715d1198c0
	bool IsUsingDefaultBattleSettingsForTarget(enum InFrameRate);// 0x3e5f8c4 0x715d1199a0
	enum GetQualityLevel();// 0x3e60008 0x715d119a80
	float GetNormalizedScreenPercentage();// 0x3e5ffa0 0x715d119b60
	static float GetMinFixedResolution();// 0x3e600d8 0x715d119c40
	static float GetMaxFixedResolution();// 0x3e600a4 0x715d119d20
	enum GetGraphicsSettingsContext();// 0x3e60070 0x715d119e00
	enum GetFrameRate();// 0x3e6003c 0x715d119ee0
	enum GetDynamicResolution();// 0x3e5ff6c 0x715d119fc0
	enum GetAntiAliasing();// 0x3e5ffd4 0x715d11a0a0
	void FinishedSettingNormalizedScreenPercentage(float StartValue, float EndValue);// 0x3e5fb54 0x715d11a180
	bool AllowFrameRate(enum InFrameRate);// 0x3e5f814 0x715d11a260
	bool AllowDynamicResolution();// 0x3e5f72c 0x715d11a340
	bool AllowAntiAliasing(enum InAntiAliasing);// 0x3e5f764 0x715d11a420

--------------------------------
Class: MatchSettingsTabAudioViewModel.MatchSettingsTabViewModel.SDViewModel.Object // 71a48edf80
	void SetVolume(byte Channel, float Volume);// 0x3e5c92c 0x715d118d60
	void SetVoiceChatAutoJoinMode(byte InMode);// 0x3e5cb98 0x715d118e40
	void SetVoiceChatActivationMode(enum InMode);// 0x3e5cac0 0x715d118f20
	void ResetToDefaults();// 0x3e5c7f0 0x715d119000
	float GetVolume(byte Channel);// 0x3e5ca14 0x715d115720
	byte GetVoiceChatAutoJoinMode();// 0x3e5cc3c 0x715d115800
	enum GetVoiceChatActivationMode();// 0x3e5cb64 0x715d1158e0
	void FinishedSettingVolume(byte Channel, float StartValue, float EndValue);// 0x3e5c804 0x715d1159c0

--------------------------------
Class: MatchSettingsTabBarWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ed800
	MatchSettingsTabBarViewModel* MatchSettingsTabBarViewModel;//[Offset: 0x258, Size: 0x8] 0x715d10da80

--------------------------------
Class: MatchSettingsTabInputAndControlsWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ec680
	MatchSettingsTabInputAndControlsViewModel* MatchSettingsTabInputAndControlsViewModel;//[Offset: 0x278, Size: 0x8] 0x715d124180
	void OnUpdateInputMode();// 0x45c6aa0 0x715d11d0c0

--------------------------------
Class: MatchSettingsTabPerHunterOptionsWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ebc80
	MatchSettingsTabPerHunterOptionsViewModel* MatchSettingsTabPerHunterOptionsViewModel;//[Offset: 0x258, Size: 0x8] 0x715d123b80

--------------------------------
Class: MatchSettingsTabInterfaceWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ec180
	MatchSettingsTabInterfaceViewModel* MatchSettingsTabInterfaceViewModel;//[Offset: 0x258, Size: 0x8] 0x715d123c00

--------------------------------
Class: MatchSettingsTabHUDLayoutWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ecb80
	bool bHasAnyOverlappingWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x715d121b80
	MatchSettingsHUDCustomizationWidget*[] Customizables;//[Offset: 0x280, Size: 0x10] 0x715d0b6000
	MatchSettingsHUDCustomizationWidget* ActiveCustomizable;//[Offset: 0x290, Size: 0x8] 0x715d121c80
	CanvasPanel* CustomizablesPanel;//[Offset: 0x298, Size: 0x8] 0x715d121d00
	MatchSettingsTabHUDLayoutViewModel* MatchSettingsTabHUDLayoutViewModel;//[Offset: 0x2a0, Size: 0x8] 0x715d121d80
	MatchSettingsHUDCustomizationWidget* AbilityCustomizable1;//[Offset: 0x2a8, Size: 0x8] 0x715d121e00
	MatchSettingsHUDCustomizationWidget* AbilityCustomizable2;//[Offset: 0x2b0, Size: 0x8] 0x715d121e80
	MatchSettingsHUDCustomizationWidget* AbilityCustomizable3;//[Offset: 0x2b8, Size: 0x8] 0x715d121f00
	MatchSettingsHUDCustomizationWidget* AbilityCustomizable4;//[Offset: 0x2c0, Size: 0x8] 0x715d121f80
	MatchSettingsHUDCustomizationWidget* ManualFireCustomizable;//[Offset: 0x2c8, Size: 0x8] 0x715d122000
	MatchSettingsHUDCustomizationWidget* AimModeAndZTargetingCustomizable;//[Offset: 0x2d0, Size: 0x8] 0x715d122080
	MatchSettingsHUDCustomizationWidget* LotusCustomizable;//[Offset: 0x2d8, Size: 0x8] 0x715d122100
	MatchSettingsHUDCustomizationWidget* UltimateCustomizable;//[Offset: 0x2e0, Size: 0x8] 0x715d120080
	MatchSettingsHUDCustomizationWidget* SettingsBurgerCustomizable;//[Offset: 0x2e8, Size: 0x8] 0x715d120100
	MatchSettingsHUDCustomizationWidget* TeamIndicatorCustomizable;//[Offset: 0x2f0, Size: 0x8] 0x715d120180
	MatchSettingsHUDCustomizationWidget* InfoButtonCustomizable;//[Offset: 0x2f8, Size: 0x8] 0x715d120200
	MatchSettingsHUDCustomizationWidget* HealthInfoCustomizable;//[Offset: 0x300, Size: 0x8] 0x715d120280
	MatchSettingsHUDCustomizationWidget* GameFeedCustomizable;//[Offset: 0x308, Size: 0x8] 0x715d120300
	void UpdateOverlayPosition(const Widget* ActiveWidget);// 0x3e636e0 0x715d11c020
	void UpdateOverlapValidationStates(const Widget* ActiveWidget);// 0x3e63560 0x715d11c100
	void StoreCustomizedDataAsDefaults(DataTable* Table);// 0x3e6363c 0x715d11c1e0
	bool ShouldShowDeveloperTools();// 0x3e63604 0x715d11c2c0
	void SetCustomButtonPosition(const MatchSettingsHUDCustomizationWidget* Widget, out const Vector2D Position, out Vector2D OutNormalizedPosition);// 0x3e63784 0x715d11c3a0
	void PositionOverlayControls(bool bOnTop);// 0x45c6aa0 0x715d11c480
	void OnUpdateVisuals();// 0x45c6aa0 0x715d11c560
	void OnHasAnyOverlappingWidgetsChanged();// 0x45c6aa0 0x715d11c640

--------------------------------
Class: MatchSettingsTabGraphicsWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ed080
	FText AAOptionOff;//[Offset: 0x258, Size: 0x18] 0x715d120a00
	FText AAOption2x;//[Offset: 0x270, Size: 0x18] 0x715d120a80
	FText AAOption4x;//[Offset: 0x288, Size: 0x18] 0x715d120b00
	FText AAOptionFXAA;//[Offset: 0x2a0, Size: 0x18] 0x715d120b80
	FText AAOptionTAA;//[Offset: 0x2b8, Size: 0x18] 0x715d120c00
	FText ResolutionOptionFixed;//[Offset: 0x2d0, Size: 0x18] 0x715d120c80
	FText ResolutionOptionDynamic;//[Offset: 0x2e8, Size: 0x18] 0x715d120d00
	MatchSettingsTabGraphicsViewModel* MatchSettingsTabGraphicsViewModel;//[Offset: 0x300, Size: 0x8] 0x715d120d80

--------------------------------
Class: MatchSettingsTabAudioWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48edd00
	MatchSettingsTabAudioViewModel* MatchSettingsTabAudioViewModel;//[Offset: 0x258, Size: 0x8] 0x715d10db80

--------------------------------
Class: MatchSettingsTabAccountAndPrivacyWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ee200
	HuntersStyledComboBox* LanguageComboBox;//[Offset: 0x258, Size: 0x8] 0x715d10e180
	MatchSettingsTabAccountAndPrivacyViewModel* MatchSettingsTabAccountAndPrivacyViewModel;//[Offset: 0x260, Size: 0x8] 0x715d10e200
	HuntersStandardButtonWithShortcut* UpdateAddressButton;//[Offset: 0x268, Size: 0x8] 0x715d10e280
	void UpdateEmailButtonText(out const FText NewButtonText);// 0x3e5c128 0x715d115aa0

--------------------------------
Class: ReloadStateViewModel.SDListenerViewModel.SDViewModel.Object // 71a48eb780
	VisibilityBindable ReloadVisibility;//[Offset: 0x88, Size: 0x70] 0x715d123580
	void SetWidgetVisibility(enum TargetVisibility);// 0x3e68200 0x715d11fac0

--------------------------------
Class: BaseSettingsDetailPanel.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48eb280
	SDConfigurableTextBlock* TitleTextBlock;//[Offset: 0x258, Size: 0x8] 0x715d123480
	SDConfigurableTextBlock* DescriptionTextBlock;//[Offset: 0x260, Size: 0x8] 0x715d123500

--------------------------------
Class: SettingsAbilityDetailsPanel.BaseSettingsDetailPanel.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48eb500
	PlatformRichText* TextWithImage;//[Offset: 0x268, Size: 0x8] 0x715d123400

--------------------------------
Class: StaticDataSettingsDetailsScreen.BaseSettingsDetailsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48ead80
	StaticDataSettingsDetailsViewModel* StaticDataDetailsViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715d125200
	BaseSettingsDetailPanel* DetailPanel;//[Offset: 0x2e8, Size: 0x8] 0x715d125280
	CanvasPanel* DetailsCanvasPanel;//[Offset: 0x2f0, Size: 0x8] 0x715d123200

--------------------------------
Class: StaticDataSettingsDetailsViewModel.SettingsDetailsViewModel.SDViewModel.Object // 71a48eab00

--------------------------------
Class: TempBackButtonWidget.UserWidget.Widget.Visual.Object // 71a48ea880
	void BackButtonClicked();// 0x3e6a66c 0x715d11f820

--------------------------------
Class: TempResultsScreenWidget.UserWidget.Widget.Visual.Object // 71a48ea600
	void SetResult(HuntersSquadState* WinnerSquad);// 0x45c6aa0 0x715d11f660
	void ContinueClicked();// 0x3e6a8d0 0x715d11f740

--------------------------------
Class: VideoTabSettingsScreen.BaseSettingsScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48efd80
	SettingsSliderGamepad* BrightnessSlider;//[Offset: 0x2e0, Size: 0x8] 0x715d124e00
	SettingsSliderGamepad* ContrastSlider;//[Offset: 0x2e8, Size: 0x8] 0x715d124e80
	SettingsSliderGamepad* GammaCorrectionSlider;//[Offset: 0x2f0, Size: 0x8] 0x715d124f00
	VideoTabSettingsViewModel* VideoTabSettingsViewModel;//[Offset: 0x2f8, Size: 0x8] 0x715d124f80
	void OnResetItemClicked();// 0x3e6aba8 0x715d11f200
	void OnResetAllVideo();// 0x3e6ab94 0x715d11f2e0
	void OnGammaCorrectionChanged(float Value);// 0x3e6abbc 0x715d11f3c0
	void OnContrastChanged(float Value);// 0x3e6ac60 0x715d11f4a0
	void OnBrightnessChanged(float Value);// 0x3e6ad04 0x715d11f580

--------------------------------
Class: VideoTabSettingsViewModel.BaseSettingsViewModel.SDViewModel.Object // 71a48efb00
	void SetGammaValue(float Value);// 0x3e6b220 0x715d11e860
	void SetContrastValue(float Value);// 0x3e6b32c 0x715d11e940
	void SetBrightnessValue(float Value);// 0x3e6b438 0x715d11ea20
	void ResetAllVideoSettings();// 0x3e6b1f8 0x715d11eb00
	void ReportResetAllVideoSettings();// 0x3e6b20c 0x715d11ebe0
	float GetGammaValue();// 0x3e6b2f8 0x715d11ecc0
	float GetDefaultGammaValue();// 0x3e6b2c4 0x715d11eda0
	float GetDefaultContrastValue();// 0x3e6b3d0 0x715d11ee80
	float GetDefaultBrightnessValue();// 0x3e6b4dc 0x715d11ef60
	float GetContrastValue();// 0x3e6b404 0x715d11f040
	float GetBrightnessValue();// 0x3e6b510 0x715d11f120

--------------------------------
Class: VsScreenScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a48f4e80
	Image* Background;//[Offset: 0x268, Size: 0x8] 0x715d124580
	Image* Background_blur;//[Offset: 0x270, Size: 0x8] 0x715d124600
	HuntersContainerWidget* LocalTeam;//[Offset: 0x278, Size: 0x8] 0x715d124680
	HuntersContainerWidget* EnemyTeam;//[Offset: 0x280, Size: 0x8] 0x715d124700
	WidgetAnimation* Anim_VS;//[Offset: 0x288, Size: 0x8] 0x715d124780
	VsScreenViewModel* VsScreenScreenVM;//[Offset: 0x290, Size: 0x8] 0x715d124800
	void OnVSAnimationComplete();// 0x3e6c43c 0x715d11e780

--------------------------------
Class: VsScreenViewModel.SDViewModel.Object // 71a48f4c00
	HuntersContainerViewModel* Allies;//[Offset: 0x48, Size: 0x8] 0x715d124280
	HuntersContainerViewModel* Enemies;//[Offset: 0x50, Size: 0x8] 0x715d124300
	BoolBindable ShowBackground;//[Offset: 0x58, Size: 0x70] 0x715d124380
	Int32Bindable RightSideSelector;//[Offset: 0xc8, Size: 0x70] 0x715d124400
	TextBindable TimeRemainingBindable;//[Offset: 0x138, Size: 0x98] 0x715d124480
	void UpdateTimer(float TimeOnScreen);// 0x3e6c794 0x715d131c80

--------------------------------
Class: AbilityTask_Clamber.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a48f4980
	delegate OnCompleted;//[Offset: 0xa8, Size: 0x10] 0x715d125600
	delegate OnFailed;//[Offset: 0xb8, Size: 0x10] 0x715d125680
	Vector StartLocation;//[Offset: 0xc8, Size: 0xc] 0x715d125700
	Vector TargetLocation;//[Offset: 0xd4, Size: 0xc] 0x715d125780
	float Duration;//[Offset: 0xe0, Size: 0x4] 0x715d125800
	float CurveStartTime;//[Offset: 0xe4, Size: 0x4] 0x715d125880
	CurveVector* OriginalRootMotionData;//[Offset: 0xe8, Size: 0x8] 0x715d125900
	bool bSnapCharacterFowardToMovementDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x715d125980
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1] 0x715d125a00
	static void ClamberCalcParams(const Vector StartLocation, const Vector TargetLocation, const HuntersCharacterBase* HuntersCharacter, const GameplayTag OriginalRootMotionDataTag, out float CurveStartTime, out float RootMotionDuration, out float MontageDuration);// 0x3f26088 0x715d131ac0
	static AbilityTask_Clamber* Clamber(GameplayAbility* OwningAbility, FName TaskInstanceName, const Vector StartLocation, const Vector TargetLocation, float Duration, float CurveStartTime, const HuntersCharacterBase* HuntersCharacter, const GameplayTag OriginalRootMotionDataTag, bool bSnapCharacterFowardToMovementDirection, bool bDrawDebug);// 0x3f25d80 0x715d131ba0

--------------------------------
Class: HuntersCharacterBase.Character.Pawn.Actor.Object // 71a48fd800
	ReplicatedIdleAnimState ReplicatedIdleState;//[Offset: 0x578, Size: 0x2] 0x715d151400
	float LastIdleTimeStamp;//[Offset: 0x57c, Size: 0x4] 0x715d151480
	class TargetScorerDataAsset* TargetScorer;//[Offset: 0x580, Size: 0x8] 0x715d0b7d60
	int MaxTargets;//[Offset: 0x588, Size: 0x4] 0x715d151500
	<GameplayTag,class TargetScorerDataAsset> WeaponSpecificTargetScorerOverride;//[Offset: 0x590, Size: 0x50] 0x715cecd3c0
	TargetConsumerReticlePreferences ReticlePreferences;//[Offset: 0x5e0, Size: 0x10] 0x715d151600
	bool IsTargetable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1] 0x715d151680
	ParticleSystemComponent*[] SpawnedCharacterParticleSystemComponents;//[Offset: 0x5f8, Size: 0x10] 0x715d0b7ea0
	ParticleSystemComponent*[] SpawnedEquipmentParticleSystemComponents;//[Offset: 0x608, Size: 0x10] 0x715d0b7f40
	<GameplayTag> PotentialTargetOverridesAllowed;//[Offset: 0x618, Size: 0x50] 0x715d0b7fe0
	Target[] OverriddenPotentialTargets;//[Offset: 0x668, Size: 0x10] 0x715d0b8080
	Target[] CurrentTargets;//[Offset: 0x690, Size: 0x10] 0x715d0b8120
	TargetingReticle*[] CurrentReticles;//[Offset: 0x6b0, Size: 0x10] 0x715d0b81c0
	delegate OnEliminated;//[Offset: 0x6d8, Size: 0x10] 0x715d151a00
	delegate OnDealtDamage;//[Offset: 0x6e8, Size: 0x10] 0x715d151a80
	GameplayTag AbilityCameraLockAimTag;//[Offset: 0x788, Size: 0x8] 0x715d151b00
	GameplayTagContainer TagsThatPreventAbilityFromBeingInterruptibleByReplanning;//[Offset: 0x790, Size: 0x20] 0x715d151b80
	uint16 RemoteViewYaw;//[Offset: 0x7b0, Size: 0x2] 0x715d151c00
	SelectedGameplayAbilities[] SelectedAbilities;//[Offset: 0x7b8, Size: 0x10] 0x715d0b8260
	MetaTuningDataKey MetaTuningDataKey;//[Offset: 0x7c8, Size: 0x8] 0x715d151d00
	GameplayTag DisableAITargetingTag;//[Offset: 0x7d0, Size: 0x8] 0x715d151d80
	GameplayTagContainer AlwaysPresentGameplayTags;//[Offset: 0x7d8, Size: 0x20] 0x715d151e00
	GameplayTagContainer RevealedTags;//[Offset: 0x7f8, Size: 0x20] 0x715d151e80
	bool bExpectsPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1] 0x715d151f00
	RimLightComponent* RimLightComponent;//[Offset: 0x830, Size: 0x8] 0x715d151f80
	RimLightParametersDataAsset* RimLightParametersDataAsset;//[Offset: 0x838, Size: 0x8] 0x715d152000
	byte StoredTeamID;//[Offset: 0x840, Size: 0x1] 0x715d152080
	FString StoredTeamAgentName;//[Offset: 0x848, Size: 0x10] 0x715d152100
	<HuntersPlayerState*,float> DamageReceivedInstigators;//[Offset: 0x858, Size: 0x50] 0x715cecd480
	HuntersCharacterAbilityKit* CharacterAbilityKit;//[Offset: 0x8b8, Size: 0x8] 0x715d150180
	FName CharacterDataName;//[Offset: 0x8c0, Size: 0x8] 0x715d150200
	delegate OnMovementBlocked;//[Offset: 0x8c8, Size: 0x10] 0x715d150280
	delegate OnCombatModeChanged;//[Offset: 0x8d8, Size: 0x10] 0x715d150300
	delegate OnChildCharacterAttached;//[Offset: 0x8e8, Size: 0x10] 0x715d150380
	delegate OnChildCharacterDetached;//[Offset: 0x8f8, Size: 0x10] 0x715d150400
	delegate OnAttachedToParentCharacter;//[Offset: 0x908, Size: 0x10] 0x715d150480
	delegate OnDetachedFromParentCharacter;//[Offset: 0x918, Size: 0x10] 0x715d150500
	delegate OnCapturePointCapabilityChanged;//[Offset: 0x928, Size: 0x10] 0x715d150580
	class JumpAndClamberCameraModifier* JumpAndClamberCameraModifier;//[Offset: 0x938, Size: 0x8] 0x715d0b8300
	<GameplayTag,AimDataInputTypeAsset*> AimData;//[Offset: 0x940, Size: 0x50] 0x715cecd540
	float DecayTime;//[Offset: 0x990, Size: 0x4] 0x715d150700
	GenericTeamId DefaultTeamID;//[Offset: 0x994, Size: 0x1] 0x715d150780
	FText DefaultTeamAgentName;//[Offset: 0x998, Size: 0x18] 0x715d150800
	bool bUsePlayerNameAsTeamAgentName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 0x1] 0x715d150880
	bool bCanActAsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b1, Size: 0x1] 0x715d150900
	enum HealthState;//[Offset: 0x9c1, Size: 0x1] 0x715d0b83a0
	ProjectileSpawningComponent* ProjectileSpawningComponent;//[Offset: 0x9d8, Size: 0x8] 0x715d150a00
	CharacterEquipmentComponent* CharacterEquipmentComponent;//[Offset: 0x9e0, Size: 0x8] 0x715d150a80
	TargetingComponent* TargetingSystemComponent;//[Offset: 0x9e8, Size: 0x8] 0x715d150b00
	AutoFireComponent* AutoFireComponent;//[Offset: 0x9f0, Size: 0x8] 0x715d150b80
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x9f8, Size: 0x8] 0x715d150c00
	HuntersInteractionController* InteractionController;//[Offset: 0xa00, Size: 0x8] 0x715d150c80
	HuntersCharacterCameraTargetComponent* CameraTargetComponent;//[Offset: 0xa08, Size: 0x8] 0x715d150d00
	HuntersCameraComponent* HuntersCameraComponent;//[Offset: 0xa10, Size: 0x8] 0x715d150d80
	PostProcessComponent* PlayerCharacterPostProcessComponent;//[Offset: 0xa18, Size: 0x8] 0x715d150e00
	HuntersCommsActionComponent* HuntersCommsActionComponent;//[Offset: 0xa20, Size: 0x8] 0x715d150e80
	HuntersAimPunchComponent* HuntersAimPunchComponent;//[Offset: 0xa28, Size: 0x8] 0x715d150f00
	HuntersServerAnimationUpdateController* HuntersServerAnimationUpdateController;//[Offset: 0xa30, Size: 0x8] 0x715d150f80
	HuntersSelfEventsListenerComponent* SelfEventListenerComponent;//[Offset: 0xa38, Size: 0x8] 0x715d151000
	DialogueSpeakerComponent* DialogueSpeakerComponent;//[Offset: 0xa40, Size: 0x8] 0x715d151080
	SimulateCuesByTagController* SimulateCuesByTagController;//[Offset: 0xa58, Size: 0x8] 0x715d14f800
	class AttributeSet[] Attributes;//[Offset: 0xa70, Size: 0x10] 0x715d0b84e0
	HuntersAimController* AimController;//[Offset: 0xaa0, Size: 0x8] 0x715d14f880
	Actor* ZTargetingLockOnActor;//[Offset: 0xad0, Size: 0x8] 0x715d14f900
	CurveFloat* MovementSpeedToCameraFOV;//[Offset: 0xae0, Size: 0x8] 0x715d14f980
	float CameraFOVRateOfChange;//[Offset: 0xae8, Size: 0x4] 0x715d14fa00
	HuntersAbilitySet* DefaultAbilitySet;//[Offset: 0xaf0, Size: 0x8] 0x715d14fa80
	HuntersAbilitySet* BotsAbilitySet;//[Offset: 0xaf8, Size: 0x8] 0x715d14fb00
	class GameplayEffect[] DefaultGameplayEffects;//[Offset: 0xb00, Size: 0x10] 0x715d0b8620
	GameplayTag AutoActivateTag;//[Offset: 0xb10, Size: 0x8] 0x715d14fb80
	bool bStopDefaultWeaponEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 0x1] 0x715d14fc00
	GameplayTag StopDefaultWeaponEquipTag;//[Offset: 0xb1c, Size: 0x8] 0x715d14fc80
	float LowHealthThreshold;//[Offset: 0xb24, Size: 0x4] 0x715d14fd00
	float CriticalHealthThreshold;//[Offset: 0xb28, Size: 0x4] 0x715d14fd80
	class GameplayEffect* OnGroundEffect;//[Offset: 0xb30, Size: 0x8] 0x715d0b86c0
	class GameplayEffect* ProtectedEffect;//[Offset: 0xb38, Size: 0x8] 0x715d0b8760
	int[] TeamMaterialIndices;//[Offset: 0xb68, Size: 0x10] 0x715d0b8800
	class UserWidget* CharacterSpecificHudClass;//[Offset: 0xb80, Size: 0x8] 0x715d0b88a0
	delegate OnKnockbackApplied;//[Offset: 0xb88, Size: 0x10] 0x715d14fe80
	HuntersAnimationMap* AnimationMapAsset;//[Offset: 0xb98, Size: 0x8] 0x715d14ff00
	HuntersAnimationSet[] AdditionalDevelopmentAnimationSets;//[Offset: 0xba0, Size: 0x10] 0x715d0b8940
	HuntersAnimationMap* CurrentAnimationMapAsset;//[Offset: 0xbb0, Size: 0x8] 0x715d14e780
	Actor* TargetForAI;//[Offset: 0xbb8, Size: 0x8] 0x715d14e800
	<GameplayTag,Vector> OffsetsMap;//[Offset: 0xbc0, Size: 0x50] 0x715cecd600
	GameplayTag FullHealthTag;//[Offset: 0xc10, Size: 0x8] 0x715d14e980
	GameplayTag HighHealthTag;//[Offset: 0xc18, Size: 0x8] 0x715d14ea00
	GameplayTag DisableCharacterControlTag;//[Offset: 0xc20, Size: 0x8] 0x715d14ea80
	GameplayTag DisableCharacterControlMovementTag;//[Offset: 0xc28, Size: 0x8] 0x715d14eb00
	GameplayTag DisableCharacterControlCameraTag;//[Offset: 0xc30, Size: 0x8] 0x715d14eb80
	GameplayTag EnableCameraControlTag;//[Offset: 0xc38, Size: 0x8] 0x715d14ec00
	GameplayTag UnlockCameraTag;//[Offset: 0xc40, Size: 0x8] 0x715d14ec80
	Rotator UnlockedRotationRate;//[Offset: 0xc48, Size: 0xc] 0x715d14ed00
	Rotator LockedRotationRate;//[Offset: 0xc54, Size: 0xc] 0x715d14ed80
	float BotLockedRotationFraction;//[Offset: 0xc60, Size: 0x4] 0x715d14ee00
	float BotUnlockedRotationFraction;//[Offset: 0xc64, Size: 0x4] 0x715d14ee80
	float MaxVerticalSpeedFromKnockback;//[Offset: 0xc68, Size: 0x4] 0x715d14ef00
	bool ShouldSimulatePhysicsOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 0x1] 0x715d14ef80
	FName ZiplineSocketName;//[Offset: 0xc70, Size: 0x8] 0x715d14f000
	CharacterMaterialModifier* CharacterMaterialModifier;//[Offset: 0xc88, Size: 0x8] 0x715d14f080
	float BorderSplashTimeActive;//[Offset: 0xce4, Size: 0x4] 0x715d14f100
	bool bPossessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcec, Size: 0x1] 0x715d14f180
	SignificanceActorState SignificanceState;//[Offset: 0xcf0, Size: 0x48] 0x715d14f200
	float WeaponActiveToleranceTime;//[Offset: 0xd38, Size: 0x4] 0x715d14f280
	float InAirMeleeAttackRate;//[Offset: 0xd40, Size: 0x4] 0x715d14f300
	bool bInAirAttackRateLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 0x1] 0x715d14f380
	bool bIsInCombatMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd45, Size: 0x1] 0x715d14f400
	uint16 PackedHitState;//[Offset: 0xd4c, Size: 0x2] 0x715d14f480
	CharacterAtomicReplicatedMovement AtomicReplicatedMovement;//[Offset: 0xd80, Size: 0x108] 0x715d14f500
	JumpAndClamberCameraModifier* ActiveJumpAndClamberCameraModifier;//[Offset: 0xeb0, Size: 0x8] 0x715d14f580
	MetaTuningDataKey CharacterSkinKey;//[Offset: 0xeb8, Size: 0x8] 0x715d14f600
	MetaTuningDataKey EquipmentSkinKey;//[Offset: 0xec0, Size: 0x8] 0x715d14f680
	GameplayTag VOCharacterSkinKey;//[Offset: 0xec8, Size: 0x8] 0x715d14f700
	void UpdateOutline();// 0x3f42df8 0x715d13c9c0
	void StartClamberCamera(float ClamberStartTime, GameplayTag ClamberRootMotionDataTag);// 0x3f424b8 0x715d1390e0
	bool ShouldUseInterpolatedAimAssist();// 0x45c6aa0 0x715d1391c0
	bool ShouldIgnoreProjectileCollision();// 0x3f43c04 0x715d1392a0
	void SetZTargetingLockOnActor(Actor* LockOnTarget);// 0x3f430e4 0x715d139380
	void SetOutlineMode(enum Type);// 0x3f42680 0x715d139460
	void SetHasADSAbility(bool bHasADS);// 0x3f43024 0x715d139540
	void SetAndBroadcastPlayerStateChanges();// 0x3f42de4 0x715d139620
	void ServerMoveNoBase_WithAbilityData(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, ServerMoveAbilityDataSet AbilityDataSet);// 0x3f41af4 0x715d139700
	void ServerMoveDualNoBase_WithAbilityData(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, ServerMoveAbilityDataSet AbilityDataSet);// 0x3f40edc 0x715d1397e0
	void ServerMoveDualHybridRootMotion_WithAbilityData(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, ServerMoveAbilityDataSet AbilityDataSet);// 0x3f40878 0x715d1398c0
	void ServerMoveDual_WithAbilityData(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, ServerMoveAbilityDataSet AbilityDataSet);// 0x3f41490 0x715d1399a0
	void ServerMove_WithAbilityData(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, ServerMoveAbilityDataSet AbilityDataSet);// 0x3f41f50 0x715d139a80
	void ServerAnalyticsAcknowledgeCorrection(float ClientMagnitude, float MovementTimestamp);// 0x3f40754 0x715d139b60
	AnimMontage* RequestAnimationToBePlayed(GameplayTag animationToBePlayed);// 0x3f42bc8 0x715d139c40
	void RemoveInterceptor(interface classNone Interceptor);// 0x3f43564 0x715d139d20
	void ReceiveCharacterFullyReady();// 0x45c6aa0 0x715d139e00
	void OnUpdatedTargetForAI();// 0x45c6aa0 0x715d139ee0
	void OnRep_VOCharacterSkinKey();// 0x3f42468 0x715d139fc0
	void OnRep_TargetForAI();// 0x3f427ac 0x715d13a0a0
	void OnRep_ReplicatedIdleState();// 0x3f43aac 0x715d13a180
	void OnRep_Possessed();// 0x3f42644 0x715d13a260
	void OnRep_PackedHitState(uint16 PrevState);// 0x3f425a0 0x715d13a340
	void OnRep_HealthState(enum PreviousHealthState);// 0x3f427d4 0x715d13a420
	void OnRep_EquipmentSkinKey();// 0x3f4247c 0x715d13a500
	void OnRep_CharacterSkinKey();// 0x3f42490 0x715d13a5e0
	void OnRep_AtomicReplicatedMovement();// 0x3f424a4 0x715d13a6c0
	void OnRep_AnimSetChanged();// 0x3f427c0 0x715d13a7a0
	void OnPodiumStarted();// 0x3f42658 0x715d13a880
	void OnMatchStarted();// 0x3f4266c 0x715d13a960
	void OnEquipmentSkinApplied(out const GameplayTag SkinTag);// 0x45c6aa0 0x715d13aa40
	void OnEquipmentItemEquipped();// 0x3f42454 0x715d13ab20
	void OnEnvironmentReflectBounce(Vector Location, Vector Normal);// 0x45c6aa0 0x715d13ac00
	void OnDebugAction(FString ActionCmd);// 0x45c6aa0 0x715d13ace0
	void OnDeadEvent();// 0x45c6aa0 0x715d137400
	void OnCharacterSkinApplied(out const GameplayTag SkinTag);// 0x45c6aa0 0x715d1374e0
	void InstigatedLaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride, HuntersPlayerState* SourcePlayerState);// 0x3f42a38 0x715d1375c0
	void HandleHealthChanged(float CurrentHealth, float CurrentHealthPercentage, bool bGlancingBlow);// 0x45c6aa0 0x715d1376a0
	Actor* GetZTargetingLockOnActor();// 0x3f43184 0x715d137780
	Vector GetZiplineSocketOffset();// 0x3f428b8 0x715d137860
	Vector GetZiplineSocketLocation();// 0x3f42880 0x715d137940
	Vector[] GetTracingLocations();// 0x3f434ac 0x715d137a20
	float GetTimeAutoFiring();// 0x3f4323c 0x715d137b00
	TargetingComponent* GetTargetingComponent();// 0x3f43a5c 0x715d137be0
	PrimitiveComponent* GetShieldComponent();// 0x3f42dcc 0x715d137cc0
	SelectedGameplayAbilities[] GetSelectedAbilities();// 0x3f43740 0x715d137da0
	ProjectileSpawningComponent* GetProjectileSpawningComponent();// 0x3f43c44 0x715d137e80
	bool GetPossessed();// 0x3f43008 0x715d137f60
	MetaTuningDataKey GetMetaTuningDataKey();// 0x3f436ec 0x715d138040
	float GetMaxProtection();// 0x3f431a0 0x715d138120
	float GetMaxHealth();// 0x3f43208 0x715d138200
	float GetMaxFiringDistance(out const GameplayTag EquipmentTag);// 0x3f43ac8 0x715d1382e0
	Vector GetHomingLocation();// 0x3f433b8 0x715d1383c0
	enum GetHealthState();// 0x3f42d74 0x715d1384a0
	StaticMeshComponent* GetGrappleRope();// 0x3f4395c 0x715d138580
	GenericTeamId GetGenericTeamId();// 0x3f4337c 0x715d138660
	SceneComponent* GetEquipmentAttachmentComponent();// 0x3f43b8c 0x715d138740
	static HuntersCharacterBase* GetDefaultObject(class HuntersCharacterBase HuntersCharacterBaseClass);// 0x3f42994 0x715d138820
	static HuntersCharacterAbilityKit* GetDefaultCharacterAbilityKit(class HuntersCharacterBase HuntersCharacterBaseClass);// 0x3f428f0 0x715d138900
	Vector GetCurrentWorldCameraLocation();// 0x3f43998 0x715d1389e0
	float GetCurrentProtection();// 0x3f431d4 0x715d138ac0
	float GetCurrentHitpoints();// 0x3f43270 0x715d138ba0
	float GetCurrentHealth();// 0x3f432a4 0x715d138c80
	PrimitiveComponent*[] GetComponentsWhichCanCollideWithTeammates();// 0x3f42d90 0x715d138d60
	GameplayTag GetClamberRootMotionDataTag();// 0x45c6aa0 0x715d138e40
	GameplayTag GetClamberMontageTag();// 0x45c6aa0 0x715d138f20
	bool GetClamberDirectionSnapsForward();// 0x3f4391c 0x715d139000
	CharacterMaterialModifier* GetCharacterMaterialModifier();// 0x3f42790 0x715d135720
	CharacterEquipmentComponent* GetCharacterEquipmentComponent();// 0x3f43bc8 0x715d135800
	HuntersCharacterCameraTargetComponent* GetCameraTargetComponent();// 0x3f43a08 0x715d1358e0
	HuntersCameraComponent* GetCameraComponent();// 0x3f439ec 0x715d1359c0
	AutoFireComponent* GetAutoFireComponent();// 0x3f43a40 0x715d135aa0
	Vector GetAimVector();// 0x3f42758 0x715d135b80
	HuntersAimPunchComponent* GetAimPunchComponent();// 0x3f439d0 0x715d135c60
	void GetAimLocations(out Vector HeadPosition, out Vector BodyPosition);// 0x45c6aa0 0x715d135d40
	float GetAimingPitch();// 0x3f42724 0x715d135e20
	Transform GetAimEmissionTransform();// 0x3f42e44 0x715d135f00
	HuntersAimController* GetAimController();// 0x3f43a24 0x715d135fe0
	void ExecuteDebugAction(FString ActionCmd);// 0x3f42c7c 0x715d1360c0
	void DoFullyReadyTasksIfAppropriate();// 0x3f42e28 0x715d1361a0
	void DieForInstantRespawn();// 0x3f4372c 0x715d136280
	void ClientVeryShortAdjustPositionKnockback(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode, float KnockbackStartTimestamp);// 0x3f401d8 0x715d136360
	void ClientSyncTimeStamp(float ClientTimestamp, float ServerTimeStamp);// 0x3f3f708 0x715d136440
	void ClientOnJumpPadValidationFailure(Actor* JumpPad);// 0x3f3f7f4 0x715d136520
	void ClientOnActiveKnockbacksCancelledBeforeLanding(float KnockbackStartTimestamp);// 0x3f3f8a0 0x715d136600
	void ClientAdjustRootMotionSourcePositionKnockback(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode, float KnockbackStartTimestamp);// 0x3f3f94c 0x715d1366e0
	void ClientAdjustRootMotionPositionKnockback(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode, float KnockbackStartTimestamp);// 0x3f3fe6c 0x715d1367c0
	void ClientAdjustPositionKnockback(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode, float KnockbackStartTimestamp);// 0x3f40474 0x715d1368a0
	void ClearZTargetingLockOnActor();// 0x3f430cc 0x715d136980
	void ClearCurrentTargets();// 0x3f43a98 0x715d136a60
	void CharacterFullyReady();// 0x3f42e14 0x715d136b40
	bool CanStepUp(out const HitResult Hit);// 0x3f43840 0x715d136c20
	void AddPushPullInstigator(HuntersPlayerState* SourcePlayerState);// 0x3f432d8 0x715d136d00
	void AddInterceptor(interface classNone Interceptor);// 0x3f43628 0x715d136de0
	void AckRootMotionTasksStarted(const GameplayAbilitySpecHandle[] OwningAbilityHandles, const FName[] RMSForceNames, const PredictionKey[] PredictionKeys);// 0x3f42eb0 0x715d136ec0

--------------------------------
Class: ReplicatedIdleAnimState // 715da96040
	byte RandomSeed;//[Offset: 0x0, Size: 0x1] 0x715da8bc00
	bool bInitialUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715da8bc80

--------------------------------
Class: ServerMoveAbilityDataSet // 715da95080
	ServerMoveAbilityData[] ActiveAbilities;//[Offset: 0x0, Size: 0x10] 0x715d89cea0
	ServerMoveAbilityData[] SerialisedAbilities;//[Offset: 0x10, Size: 0x10] 0x715d89a740
	ServerMoveCustomData[] ActiveCustomData;//[Offset: 0x20, Size: 0x10] 0x715d89a7e0
	ServerMoveCustomData[] SerialisedCustomData;//[Offset: 0x30, Size: 0x10] 0x715d89a920
	ServerMovementAttributeData[] ActiveMovementAttributes;//[Offset: 0x40, Size: 0x10] 0x715d89a9c0
	ServerMovementAttributeData[] SerialisedMovementAttributes;//[Offset: 0x50, Size: 0x10] 0x715d89aa60
	Vector ClientVelocity;//[Offset: 0x60, Size: 0xc] 0x715da8db80

--------------------------------
Class: ServerMoveAbilityData // 715da94e40
	GameplayAbilitySpecHandle AbilityHandle;//[Offset: 0x0, Size: 0x4] 0x715da8f200
	bool bInputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715da8f280
	PredictionKey AbilityOriginalPredictionKey;//[Offset: 0x8, Size: 0x18] 0x715da8f300
	bool bHasTriggerEventData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715da8f380
	GameplayEventData TriggerEventData;//[Offset: 0x28, Size: 0xb0] 0x715da8f400
	ServerMoveTargetData[] ServerMoveTargetData;//[Offset: 0xd8, Size: 0x10] 0x715d89a600
	ServerMoveEventData[] ServerMoveEventData;//[Offset: 0xe8, Size: 0x10] 0x715d89a6a0

--------------------------------
Class: ServerMoveTargetData // 715da94cc0

--------------------------------
Class: ServerMoveEventData // 715da94d80

--------------------------------
Class: ServerMoveCustomData // 715da94f00
	enum CustomDataType;//[Offset: 0x5, Size: 0x1] 0x715d89a880
	Actor* Actor;//[Offset: 0x8, Size: 0x8] 0x715da8f700
	float ClientMoveTimestamp;//[Offset: 0x10, Size: 0x4] 0x715da8f780
	float ReflectionAngle;//[Offset: 0x14, Size: 0x4] 0x715da8d700
	byte SyncID;//[Offset: 0x18, Size: 0x1] 0x715da8d780
	PredictionKey AbilityActivationPredictionKey;//[Offset: 0x20, Size: 0x18] 0x715da8d800
	byte SequenceNumber;//[Offset: 0x38, Size: 0x1] 0x715da8d880

--------------------------------
Class: ServerMovementAttributeData // 715da94fc0
	byte Index;//[Offset: 0x0, Size: 0x1] 0x715da8da00
	float Value;//[Offset: 0x4, Size: 0x4] 0x715da8da80

--------------------------------
Class: TargetScorerDataAsset.Object // 71a4b6dd00
	class TargetScorerCondition[] Conditions;//[Offset: 0x28, Size: 0x10] 0x715cda0b00
	class TargetScorer* Scorer;//[Offset: 0x38, Size: 0x8] 0x715cda0ba0

--------------------------------
Class: TargetScorerCondition.Object // 71a4961500

--------------------------------
Class: TargetScorer.Object // 71a4962e00
	bool bSkipScoringIfTargetsHaveNoFilterFlags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d20c100

--------------------------------
Class: TargetConsumerReticlePreferences // 715cec8e00
	class TargetingReticle* ReticleClass;//[Offset: 0x0, Size: 0x8] 0x715ce95420
	bool bShouldShowReticles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715cef4200

--------------------------------
Class: TargetingReticle.Actor.Object // 71a4b66f00
	WidgetComponent* WidgetHolder;//[Offset: 0x220, Size: 0x8] 0x715cd9a900
	Target CurrentTarget;//[Offset: 0x228, Size: 0x48] 0x715cd9a980
	Actor* CurrentTargetActor;//[Offset: 0x280, Size: 0x8] 0x715cd9aa00
	bool ShouldFireOnTargetSetEventOnSameTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x715cd9aa80
	bool ShouldTargetingComponentSetActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1] 0x715cd9ab00
	void OnTargetSet(bool IsDifferentTarget, Vector TargetConsumerSpecifiedWidgetLocation);// 0x45c6aa0 0x715cd5f9e0
	void OnScorerLost();// 0x45c6aa0 0x715cd5fac0
	void OnIsSoftSelectChanged(bool NewIsSoftSelectValue);// 0x45c6aa0 0x715cd5fba0
	void OnIsActivatedChanged(bool NewIsActivated);// 0x45c6aa0 0x715cd5fc80
	void OnCanBeActivatedChanged(bool NewCanBeActivatedValue);// 0x45c6aa0 0x715cd5fd60
	void OnActorVisibilityInGameChanged(bool IsHidden);// 0x45c6aa0 0x715cd5fe40
	Actor* GetCurrentTarget();// 0x6a07a28 0x715cd5ff20
	bool GetCanBeActivated();// 0x6a07a44 0x715cd5caa0
	void AttachToSkeletalSocketOrFallbackToActor(Vector FallbackAttachmentWorldLocation);// 0x6a07984 0x715cd5cb80

--------------------------------
Class: Target // 715cec8d40
	Box2D InnerBounds;//[Offset: 0x0, Size: 0x14] 0x715cef4080
	Box2D OuterBounds;//[Offset: 0x14, Size: 0x14] 0x715cef4100
	Vector CenterWS;//[Offset: 0x28, Size: 0xc] 0x715cef4180

--------------------------------
Class: SelectedGameplayAbilities // 715da96100
	class HuntersGameplayAbility[] GameplayAbility;//[Offset: 0x0, Size: 0x10] 0x715d89aec0
	enum AbilityIndex;//[Offset: 0x10, Size: 0x1] 0x715d89af60
	FText AbilityName;//[Offset: 0x18, Size: 0x18] 0x715da8bd80

--------------------------------
Class: HuntersGameplayAbility.GameplayAbility.Object // 71a48f8580
	bool bTryToActivateWhenGiven;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1] 0x715d143280
	SlateBrush IconBrush;//[Offset: 0x470, Size: 0x88] 0x715d143300
	bool bUseCustomScorer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1] 0x715d143380
	bool bNeedsTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1] 0x715d143400
	class TargetScorerDataAsset* Scorer;//[Offset: 0x500, Size: 0x8] 0x715d0b7040
	TargetConsumerReticlePreferences ReticlePreferences;//[Offset: 0x508, Size: 0x10] 0x715d143480
	float AIHoldInputDuration;//[Offset: 0x518, Size: 0x4] 0x715d143500
	TargetingReticle*[] CurrentReticles;//[Offset: 0x520, Size: 0x10] 0x715d0b70e0
	<GameplayTag> PotentialTargetOverridesAllowed;//[Offset: 0x530, Size: 0x50] 0x715d0b7180
	Target[] OverriddenPotentialTargets;//[Offset: 0x580, Size: 0x10] 0x715d0b7220
	Target[] CurrentTargets;//[Offset: 0x598, Size: 0x10] 0x715d0b72c0
	int MaxTargets;//[Offset: 0x5b8, Size: 0x4] 0x715d143780
	float MaximumScoreThreshold;//[Offset: 0x5bc, Size: 0x4] 0x715d143800
	bool bIsEligibleForSoftSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1] 0x715d143880
	float SoftSelectMaxDistance;//[Offset: 0x5c4, Size: 0x4] 0x715d143900
	bool bShouldInputReleaseConfirmTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1] 0x715d143980
	enum TargetScorerPriority;//[Offset: 0x5c9, Size: 0x1] 0x715d0b7360
	GameplayTag PotentialTargetOverrideTag;//[Offset: 0x5cc, Size: 0x8] 0x715d143a80
	bool bShouldBlockUICancelButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 0x1] 0x715d143b00
	bool bForceUnavailableState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 0x1] 0x715d143b80
	class GameplayEffect* ChargeGameplayEffectClass;//[Offset: 0x5d8, Size: 0x8] 0x715d0b7400
	bool bShouldTriggerAnalyticsEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1] 0x715d143c00
	bool bShouldManuallyTriggerAnalyticsEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1] 0x715d143c80
	bool bShouldTrackAttackAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 0x1] 0x715d143d00
	bool bShouldTrackHealingAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f2, Size: 0x1] 0x715d143d80
	bool bShouldTrackAbilityAttribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f3, Size: 0x1] 0x715d143e00
	bool bShouldTrackMovementAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 0x1] 0x715d143e80
	bool bShouldTrackDefenseAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 0x1] 0x715d143f00
	GameplayTagContainer HighlightAbilityIfTagsExists;//[Offset: 0x5f8, Size: 0x20] 0x715d143f80
	bool bAllowServerMoveActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1] 0x715d144000
	bool bAllowClientAuthoritativeMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1] 0x715d144080
	ScalableFloat CooldownDuration;//[Offset: 0x620, Size: 0x20] 0x715d144100
	class HuntersAbilityChargeCooldownModifier* ChargeCooldownModifier;//[Offset: 0x640, Size: 0x8] 0x715d0b74a0
	TargetConsumerHandle TargetConsumerHandle;//[Offset: 0x648, Size: 0x18] 0x715d144180
	enum Priority;//[Offset: 0x660, Size: 0x1] 0x715d0b7540
	int MaxNumberOfCharges;//[Offset: 0x664, Size: 0x4] 0x715d142180
	enum ChargesType;//[Offset: 0x668, Size: 0x1] 0x715d0b75e0
	float CooldownPerCharge;//[Offset: 0x66c, Size: 0x4] 0x715d142280
	GameplayTagContainer CooldownTags;//[Offset: 0x670, Size: 0x20] 0x715d142300
	GameplayTagContainer TempCooldownTags;//[Offset: 0x690, Size: 0x20] 0x715d142380
	float[] CooldownAmountsPerCharge;//[Offset: 0x6b0, Size: 0x10] 0x715d0b7680
	void SetReticleVisibility(const bool bVisible);// 0x3fdb8f8 0x715d134e60
	void SetAbilityHintAI(const enum InStateHint);// 0x3fdaf3c 0x715d134f40
	void PlayMontage(GameplayTag AnimationTag, FName StartSectionName, float DurationOverride, float StartTime);// 0x3fdb60c 0x715d135020
	void OnClientForegrounded();// 0x45c6aa0 0x715d135100
	void OnBeginForcedUpdating();// 0x45c6aa0 0x715d1351e0
	void OnAbilityRemoved();// 0x45c6aa0 0x715d1352c0
	void OnAbilityGiven();// 0x45c6aa0 0x715d1353a0
	void MontageStopByTag(GameplayTag AnimationTag, float OverrideBlendOutTime);// 0x3fdb524 0x715d135480
	void MontageSetDynamicSectionLength(FName SectionName, float NewSectionLength);// 0x3fdb0d0 0x715d135560
	void MontageSetDynamicPlayRate(float NewPlayRate);// 0x3fdb02c 0x715d135640
	float MontageGetSectionLength(GameplayTag AnimationTag, FName SectionName);// 0x3fdb388 0x715d131d60
	float MontageGetPlayRate(bool bCombineWithRateScale);// 0x3fdb1b8 0x715d131e40
	float MontageGetCurrentSectionTimeLeft(bool bScaleByPlayRate);// 0x3fdb26c 0x715d131f20
	FName MontageGetCurrentSectionName();// 0x3fdb354 0x715d132000
	float MontageGetCurrentSectionLength();// 0x3fdb320 0x715d1320e0
	bool IsMontageCurrentlyPlaying(GameplayTag AnimationTag);// 0x3fdb474 0x715d1321c0
	bool IsConsideringTargetActor(Actor* Actor);// 0x3fdb7c0 0x715d1322a0
	bool IsAIControlled();// 0x3fdaeb0 0x715d132380
	class TargetScorerDataAsset GetScorer();// 0x3fdb9a0 0x715d132460
	enum GetPriority();// 0x3fdb7a4 0x715d132540
	int GetMaxNumberOfCharges();// 0x3fdb788 0x715d132620
	Target[] GetCurrentTargets();// 0x3fdb870 0x715d132700
	class GameplayEffect GetCooldownClass();// 0x3fdafdc 0x715d1327e0
	PlayerState* GetAvatarPlayerState();// 0x3fdad04 0x715d1328c0
	AIPayload GetAIPayload();// 0x3fdb9bc 0x715d1329a0
	int GetActivationPredictionKey();// 0x3fdaff8 0x715d132a80
	void GetActivationBlockedTagsArray(out GameplayTag[] InOutGameplayTags);// 0x3fdba30 0x715d132b60
	enum GetAbilityHintAI();// 0x3fdaf20 0x715d132c40
	bool EndedDueToAuthorityRejection();// 0x3fdaee8 0x715d132d20
	void ClearCooldown();// 0x3fdb774 0x715d132e00
	void BroadcastScorerPriorityChangedEvent();// 0x3fdacf0 0x715d132ee0
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwnerWithOrigin(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks, Vector Origin);// 0x3fdad38 0x715d132fc0

--------------------------------
Class: HuntersAbilityChargeCooldownModifier.Object // 71a490fb00

--------------------------------
Class: TargetConsumerHandle // 715cec8c80
	interface class None* ConsumerReference;//[Offset: 0x8, Size: 0x10] 0x715cef4000

--------------------------------
Class: AIPayload // 715da97180
	Vector Origin;//[Offset: 0x0, Size: 0xc] 0x715dab0500
	float MinDistance;//[Offset: 0xc, Size: 0x4] 0x715dab0580
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x715dab0600
	float HalfHeight;//[Offset: 0x14, Size: 0x4] 0x715dab0680
	float Radius;//[Offset: 0x18, Size: 0x4] 0x715dab0700
	bool IsDataValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x715dab0780

--------------------------------
Class: HuntersCharacterAbilityKit.DataAsset.Object // 71a4913080
	HuntersCharacterAbility* Passive;//[Offset: 0x30, Size: 0x8] 0x715d1c3f80
	HuntersCharacterAbility* Ultimate;//[Offset: 0x38, Size: 0x8] 0x715d1c4000

--------------------------------
Class: HuntersCharacterAbility.DataAsset.Object // 71a4913580
	class GameplayEffect[] GameplayEffects;//[Offset: 0x30, Size: 0x10] 0x715d1b2720
	InputBindableHuntersGameplayAbility[] GameplayAbilities;//[Offset: 0x40, Size: 0x10] 0x715d1b27c0
	class HuntersGameplayAbility GetAbilitySubclass(out const InputBindableHuntersGameplayAbility Ability);// 0x3fd9d48 0x715d19b4c0

--------------------------------
Class: InputBindableHuntersGameplayAbility // 714906cd00
	class HuntersGameplayAbility* Ability;//[Offset: 0x0, Size: 0x28] 0x7148cdd9e0
	class HuntersGameplayAbility* LoadedAbilitySubClass;//[Offset: 0x28, Size: 0x8] 0x7148cdda80
	class Object[] AIAbilityClasses;//[Offset: 0x30, Size: 0x10] 0x7148cddbc0
	enum InputBinding;//[Offset: 0x40, Size: 0x1] 0x7148cddd00
	int AbilityLevel;//[Offset: 0x44, Size: 0x4] 0x715d82ba80

--------------------------------
Class: JumpAndClamberCameraModifier.CameraModifier.Object // 71a4907b80
	float ZOffsetWhenMovingUpwards;//[Offset: 0x44, Size: 0x4] 0x715d188a00
	float ZOffsetWhenMovingDownwards;//[Offset: 0x48, Size: 0x4] 0x715d188a80
	float SmoothingLambdaJumpUp;//[Offset: 0x4c, Size: 0x4] 0x715d188b00
	float SmoothingLambdaJumpDown;//[Offset: 0x50, Size: 0x4] 0x715d188b80
	GameplayTagContainer BlockingTags;//[Offset: 0x58, Size: 0x20] 0x715d188c00
	bool bBlockWhenInCombatMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x715d188c80
	float SmoothingLambdaClamberActive;//[Offset: 0x7c, Size: 0x4] 0x715d188d00
	float SmoothingLambdaClamberOut;//[Offset: 0x80, Size: 0x4] 0x715d188d80
	CurveFloat* ClamberZOffset;//[Offset: 0x88, Size: 0x8] 0x715d188e00
	bool bStopClamberCameraDroppingBelowStartPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x715d188e80
	void StartClamberCamera(float ClamberStartTime, GameplayTag ClamberRootMotionDataTag);// 0x3f681c8 0x715d195100

--------------------------------
Class: AimDataInputTypeAsset.DataAsset.Object // 71a48f3300
	AimDataAsset* TouchInputAimData;//[Offset: 0x30, Size: 0x8] 0x715d128600
	AimDataAsset* ControllerInputAimData;//[Offset: 0x38, Size: 0x8] 0x715d128680
	AimDataAsset* TestAimData;//[Offset: 0x40, Size: 0x8] 0x715d128700
	AimDataAsset* TestControllerAimData;//[Offset: 0x48, Size: 0x8] 0x715d128780

--------------------------------
Class: AimDataAsset.DataAsset.Object // 71a48f3080
	float TargetSelectionPreviouslySelectedMultiplier;//[Offset: 0x30, Size: 0x4] 0x715d12b480
	CurveFloat* MagnetismSimilarityCurve;//[Offset: 0x38, Size: 0x8] 0x715d12b500
	float MagnetismSimilarityFactor;//[Offset: 0x40, Size: 0x4] 0x715d12b580
	CurveFloat* MagnetismDistanceCurve;//[Offset: 0x48, Size: 0x8] 0x715d129500
	float MagnetismDistanceFactor;//[Offset: 0x50, Size: 0x4] 0x715d129580
	CurveFloat* MagnetismBoundsCurve;//[Offset: 0x58, Size: 0x8] 0x715d129600
	float MagnetismBoundsFactor;//[Offset: 0x60, Size: 0x4] 0x715d129680
	float OvershootCompensationBlendAmount;//[Offset: 0x64, Size: 0x4] 0x715d129700
	float OverallMagnetismFactor;//[Offset: 0x68, Size: 0x4] 0x715d129780
	CurveFloat* SpeedMagnetismSimilarityCurve;//[Offset: 0x70, Size: 0x8] 0x715d129800
	float SpeedMagnetismSimilarityFactor;//[Offset: 0x78, Size: 0x4] 0x715d129880
	CurveFloat* SpeedMagnetismInputCurve;//[Offset: 0x80, Size: 0x8] 0x715d129900
	CurveFloat* SpeedMagnetismDistanceCurve;//[Offset: 0x88, Size: 0x8] 0x715d129980
	float SpeedMagnetismDistanceFactor;//[Offset: 0x90, Size: 0x4] 0x715d129a00
	CurveFloat* SpeedMagnetismBoundsCurve;//[Offset: 0x98, Size: 0x8] 0x715d129a80
	float SpeedMagnetismBoundsFactor;//[Offset: 0xa0, Size: 0x4] 0x715d129b00
	float OverallSpeedMagnetismFactor;//[Offset: 0xa4, Size: 0x4] 0x715d129b80
	CurveFloat* FrictionSimilarityCurve;//[Offset: 0xa8, Size: 0x8] 0x715d129c00
	float FrictionSimilarityFactor;//[Offset: 0xb0, Size: 0x4] 0x715d129c80
	CurveFloat* FrictionDistanceCurve;//[Offset: 0xb8, Size: 0x8] 0x715d129d00
	float FrictionDistanceFactor;//[Offset: 0xc0, Size: 0x4] 0x715d129d80
	CurveFloat* FrictionBoundsCurve;//[Offset: 0xc8, Size: 0x8] 0x715d129e00
	float FrictionBoundsFactor;//[Offset: 0xd0, Size: 0x4] 0x715d129e80
	float OverallFrictionFactor;//[Offset: 0xd4, Size: 0x4] 0x715d129f00
	CurveFloat* TargetOffsetScaleCurve;//[Offset: 0xd8, Size: 0x8] 0x715d129f80
	float TargetOffsetOuterRadiusBase;//[Offset: 0xe0, Size: 0x4] 0x715d12a000
	bool UseTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1] 0x715d12a080
	float TargetOffsetMinProjectileSpeed;//[Offset: 0xe8, Size: 0x4] 0x715d12a100
	CurveFloat* FrictionFactorCurve;//[Offset: 0xf0, Size: 0x8] 0x715d12a180
	float FrictionHorizontal;//[Offset: 0xf8, Size: 0x4] 0x715d12a200
	float FrictionVertical;//[Offset: 0xfc, Size: 0x4] 0x715d12a280
	float InputAverageFactor;//[Offset: 0x100, Size: 0x4] 0x715d12a300
	float SpeedMagnetismCapMultiplier;//[Offset: 0x104, Size: 0x4] 0x715d12a380
	float SpeedMagnetismCapMinimum;//[Offset: 0x108, Size: 0x4] 0x715d12a400
	float OvershootAidTime;//[Offset: 0x10c, Size: 0x4] 0x715d12a480
	float OvershootAidStrength;//[Offset: 0x110, Size: 0x4] 0x715d12a500
	float OvershootAidWeight;//[Offset: 0x114, Size: 0x4] 0x715d128480
	float SmoothingRatio;//[Offset: 0x118, Size: 0x4] 0x715d128500
	GameplayTag AbilityOverrideTag;//[Offset: 0x11c, Size: 0x8] 0x715d128580

--------------------------------
Class: TargetingComponent.ActorComponent.Object // 71a4b6e700
	TargetingDataAsset* TargetingData;//[Offset: 0xb0, Size: 0x8] 0x715cd9d480
	TargetingDataInputTypeAsset* DefaultTargetData;//[Offset: 0xb8, Size: 0x8] 0x715cd9d500
	interface classNone[] RegisteredTargetConsumers;//[Offset: 0xc0, Size: 0x10] 0x715cda0c40
	bool UseControlRotationForAngleToleranceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x715cd9d600
	Target[] PotentialTargets;//[Offset: 0xd8, Size: 0x10] 0x715cda0ce0
	ActorListWithKey[] ActorsSeenThroughSmokescreens;//[Offset: 0xe8, Size: 0x10] 0x715cda0d80
	<Actor*,int> ActorsSeenThroughSmokescreensMap;//[Offset: 0xf8, Size: 0x50] 0x715cd32d40
	Vector2D ViewportCentre;//[Offset: 0x148, Size: 0x8] 0x715cd9b780
	Pawn* OwnerPawn;//[Offset: 0x158, Size: 0x8] 0x715cd9b800
	PlayerController* OwnerController;//[Offset: 0x160, Size: 0x8] 0x715cd9b880
	TargetingDataInputTypeAsset* GetRelevantAimData();// 0x6a11074 0x715cd5eb00
	Target[] GetPotentialTargets();// 0x6a110a8 0x715cd5ebe0
	void ClearActorsSeenThroughSmokescreens(Object* Key);// 0x6a10ec8 0x715cd5ecc0
	void AddActorsSeenThroughSmokescreens(Object* Key, out const Actor*[] Actors);// 0x6a10f6c 0x715cd5eda0

--------------------------------
Class: TargetingDataInputTypeAsset.DataAsset.Object // 71a4b6e200
	float TargetSelectionOuterBoundsWorldSpaceRadius;//[Offset: 0x30, Size: 0x4] 0x715cd9d300

--------------------------------
Class: TargetingDataAsset.DataAsset.Object // 71a4b6e480
	TargetingDataInputTypeAsset* TouchInputTargetingData;//[Offset: 0x30, Size: 0x8] 0x715cd9d380
	TargetingDataInputTypeAsset* ControllerInputTargetingData;//[Offset: 0x38, Size: 0x8] 0x715cd9d400

--------------------------------
Class: ActorListWithKey // 715cec8bc0
	Object* Key;//[Offset: 0x0, Size: 0x8] 0x715cef3f00
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10] 0x715ce95380

--------------------------------
Class: ProjectileSpawningComponent.ActorComponent.Object // 71a4b8ab00
	HuntersProjectile*[] Projectiles;//[Offset: 0xb0, Size: 0x10] 0x715cda6140
	HuntersProjectile*[] FakeProjectiles;//[Offset: 0xc0, Size: 0x10] 0x715cda61e0
	ProjectileManager* ProjectileManager;//[Offset: 0xd0, Size: 0x8] 0x715cde6780
	ProjectileAnalyticsGroup[] ProjectileAnalyticGroups;//[Offset: 0xd8, Size: 0x10] 0x715cda6280
	HuntersProjectile* SpawnWithConfig(Object* TrackingContext, class ProjectileDefinition ProjectileDefinition, HuntersGameplayAbility* GameplayAbility, ProjectileSpawnConfig SpawnConfig);// 0x6af2388 0x715cdf3960
	HuntersProjectile* Spawn(Object* TrackingContext, class ProjectileDefinition ProjectileDefinition, Vector Position, Vector Direction, HuntersGameplayAbility* GameplayAbility);// 0x6af2520 0x715cdf0080

--------------------------------
Class: ProjectileDefinition.Object // 71a4b8b500
	ProjectileTypeDefinition TypeDefinition;//[Offset: 0x28, Size: 0x10] 0x715cde7100

--------------------------------
Class: ProjectileTypeDefinition // 715ceca000
	int PoolSize;//[Offset: 0x0, Size: 0x4] 0x715cef6f80
	class HuntersProjectile* Projectile;//[Offset: 0x8, Size: 0x8] 0x715ce96e60

--------------------------------
Class: HuntersProjectile.Actor.Object // 71a4b8d580
	SphereComponent* CollisionComponent;//[Offset: 0x230, Size: 0x8] 0x715cde2380
	HuntersProjectileMovementComponent* ProjectileMovementComponent;//[Offset: 0x238, Size: 0x8] 0x715cde2400
	GameplayTagContainer ProjectileTags;//[Offset: 0x240, Size: 0x20] 0x715cde2480
	bool bUseSimulatedVisualSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x715cde2500
	float FakeSimulatedSpeed;//[Offset: 0x264, Size: 0x4] 0x715cde2580
	float FirstFrameSpeedMult;//[Offset: 0x268, Size: 0x4] 0x715cde2600
	bool bUseFakeProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1] 0x715cde2680
	bool bSmoothPositionToSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1] 0x715cde2700
	bool bReplicateProjectileImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x286, Size: 0x1] 0x715cde2780
	PredictionKey PredictionKey;//[Offset: 0x288, Size: 0x18] 0x715cde2800
	byte SequenceNumber;//[Offset: 0x2a0, Size: 0x1] 0x715cde2880
	HuntersProjectile* FakeProjectile;//[Offset: 0x2a8, Size: 0x8] 0x715cde2900
	ProjectileActorPoolManager* ProjectileActorPoolManager;//[Offset: 0x2b0, Size: 0x8] 0x715cde2980
	Object* TrackingContext;//[Offset: 0x2b8, Size: 0x8] 0x715cde2a00
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2c0, Size: 0x8] 0x715cde2a80
	SceneComponent* StaticMeshRootComponent;//[Offset: 0x2c8, Size: 0x8] 0x715cde2b00
	float PassbyRadiusAmount;//[Offset: 0x2d0, Size: 0x4] 0x715cde2b80
	AkAudioEvent* PassbyAudioEvent;//[Offset: 0x2d8, Size: 0x8] 0x715cde2c00
	ProjectileMeshPoolManager* ProjectileMeshManager;//[Offset: 0x2e8, Size: 0x8] 0x715cde2c80
	float DamageMultiplier;//[Offset: 0x2f0, Size: 0x4] 0x715cde2d00
	bool bTriggersHitReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1] 0x715cde2d80
	ProjectileManager* ProjectileManager;//[Offset: 0x2f8, Size: 0x8] 0x715cde2e00
	float InitialSpeed;//[Offset: 0x320, Size: 0x4] 0x715cde2e80
	float MaxSpeed;//[Offset: 0x324, Size: 0x4] 0x715cde2f00
	float HomingAccelerationMagnitude;//[Offset: 0x328, Size: 0x4] 0x715cde2f80
	float GravityScale;//[Offset: 0x32c, Size: 0x4] 0x715cde3000
	float Bounciness;//[Offset: 0x330, Size: 0x4] 0x715cde3080
	bool IgnoreAllyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1] 0x715cde3100
	bool bCanHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1] 0x715cde3180
	bool ApplyDistanceToLive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x336, Size: 0x1] 0x715cde1100
	float DistanceToLive;//[Offset: 0x338, Size: 0x4] 0x715cde1180
	bool UseOverrideDamageOverDistanceCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1] 0x715cde1200
	bool bUseDistanceScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x715cde1280
	float StartScale;//[Offset: 0x344, Size: 0x4] 0x715cde1300
	float DistanceToScaleOver;//[Offset: 0x348, Size: 0x4] 0x715cde1380
	bool bImpactAfterIntercept;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1] 0x715cde1400
	bool bShouldImpactOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 0x1] 0x715cde1480
	CurveFloat* DamageOverDistance;//[Offset: 0x350, Size: 0x8] 0x715cde1500
	CurveFloat* DamageOverDistanceOverride;//[Offset: 0x358, Size: 0x8] 0x715cde1580
	CurveTableRowHandle BaseDamageHandle;//[Offset: 0x360, Size: 0x10] 0x715cde1600
	GameplayEffectSpecHandle StashedStandardDamageSpecHandle;//[Offset: 0x370, Size: 0x10] 0x715cde1680
	GameplayEffectSpecHandle StashedCriticalDamageHandle;//[Offset: 0x380, Size: 0x10] 0x715cde1700
	class GameplayEffect[] GameplayEffectsToApply;//[Offset: 0x390, Size: 0x10] 0x715cda43e0
	GenericTeamId TeamID;//[Offset: 0x3b0, Size: 0x1] 0x715cde1780
	SceneComponent* HomingTarget;//[Offset: 0x3b8, Size: 0x8] 0x715cde1800
	Vector HomingTargetPosition;//[Offset: 0x3c0, Size: 0xc] 0x715cde1880
	ArcingConfig ArcConfig;//[Offset: 0x3cc, Size: 0x14] 0x715cde1900
	bool DrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e3, Size: 0x1] 0x715cde1980
	float DrawDebugDuration;//[Offset: 0x3e4, Size: 0x4] 0x715cde1a00
	Vector LastTickLocation;//[Offset: 0x404, Size: 0xc] 0x715cde1a80
	Vector PreviousTickLocation;//[Offset: 0x410, Size: 0xc] 0x715cde1b00
	HuntersPlayerStateAnalytics* PlayerStateAnalytics;//[Offset: 0x420, Size: 0x8] 0x715cde1b80
	ProjectileDecalSpawningComponent* ProjectileDecalSpawningComponent;//[Offset: 0x430, Size: 0x8] 0x715cde1c00
	ReplicatedProjectileImpact ReplicatedProjectileImpact;//[Offset: 0x438, Size: 0x10] 0x715cde1c80
	void SpawnFX(Vector ImpactLocation, Vector ImpactNormal, Actor* HitActor);// 0x45c6aa0 0x715cdce940
	bool ShouldExecuteCosmetic();// 0x6ae59bc 0x715cdcea20
	void SetVelocity(Vector InVelocity);// 0x6ae5660 0x715cdceb00
	void SetMaxSpeed(float InMaxSpeed);// 0x6ae5518 0x715cdcebe0
	void SetInitialSpeed(float InInitialSpeed);// 0x6ae55bc 0x715cdcecc0
	void SetHomingTargetPosition(Vector TargetPosition);// 0x6ae5834 0x715cdceda0
	void SetHomingTarget(Actor* Actor, SceneComponent* TargetComponentOverride);// 0x6ae58d8 0x715cdcee80
	void SetHomingAccelerationMagnitude(float InHomingAccelerationMagnitude);// 0x6ae5474 0x715cdcef60
	void SetGravityScale(float InGravityScale);// 0x6ae53d0 0x715cdcf040
	void SetBounciness(float InBounciness);// 0x6ae532c 0x715cdcf120
	void SetArcingValues(out const Vector TargetPosition, float MaxArcHeight, float ArcDuration);// 0x6ae5704 0x715cdcf200
	void ReturnToPoolOrDestroy();// 0x6ae508c 0x715cdcf2e0
	void OnRep_TeamID();// 0x6ae4b84 0x715cdcf3c0
	void OnRep_MaxSpeed();// 0x6ae4468 0x715cdcf4a0
	void OnRep_InitialSpeed();// 0x6ae447c 0x715cdcf580
	void OnRep_HomingTargetPosition();// 0x6ae4418 0x715cdcf660
	void OnRep_HomingTarget();// 0x6ae442c 0x715cdcf740
	void OnRep_HomingAccelerationMagnitude();// 0x6ae4454 0x715cdcf820
	void OnRep_GravityScale();// 0x6ae4440 0x715cdcf900
	void OnRep_Bounciness();// 0x6ae43f0 0x715cdcf9e0
	void OnRep_ArcConfig();// 0x6ae4404 0x715cdcfac0
	void OnProjectileStop(out const HitResult HitResult);// 0x6ae45ac 0x715cdcfba0
	void OnProjectileBounce(out const HitResult HitResult, out const Vector ImpactVelocity);// 0x6ae4490 0x715cdcfc80
	void OnPredictiveSpawnRejected();// 0x6ae4bac 0x715cdcfd60
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x6ae59f4 0x715cdcfe40
	void OnImpact(Actor* OtherActor, PrimitiveComponent* OtherComponent, out const HitResult HitResult);// 0x6ae4ed0 0x715cdcff20
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x6ae467c 0x715cdccaa0
	void OnBounce(out const HitResult HitResult, out const Vector ImpactVelocity);// 0x6ae4dac 0x715cdccb80
	void OnBlockedImpact(out const HitResult HitResult);// 0x6ae4bc0 0x715cdccc60
	void OnBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6ae47e8 0x715cdccd40
	void OnActorImpact(Actor* HitActor, out const HitResult HitResult);// 0x6ae4c98 0x715cdcce20
	void NetworkSafeDestroy();// 0x6ae4b98 0x715cdccf00
	bool IsImpactAllowedOnOverlap(Actor* OtherActor, PrimitiveComponent* OtherComponent, out const HitResult HitResult);// 0x6ae4a08 0x715cdccfe0
	ProjectileDecalSpawningComponent* GetProjectileDecalSpawningComponent();// 0x6ae5a98 0x715cdcd0c0
	float GetMovementComponentMaxSpeed();// 0x6ae5058 0x715cdcd1a0
	SceneComponent* GetHomingTarget();// 0x6ae4b68 0x715cdcd280
	float GetHealthModificationAmount();// 0x6ae5024 0x715cdcd360
	GenericTeamId GetGenericTeamId();// 0x6ae5140 0x715cdcd440
	float GetDistanceTravelled();// 0x6ae50d4 0x715cdcd520
	float GetDistanceToLive();// 0x6ae50a0 0x715cdcd600
	Vector GetCurrentTargetPosition();// 0x6ae5108 0x715cdcd6e0
	void ApplyGamePlayEffectsToTarget(Actor* TargetCharacter);// 0x6ae5288 0x715cdcd7c0
	void ApplyDamageToTarget(Actor* Target, out const HitResult HitResult);// 0x6ae517c 0x715cdcd8a0

--------------------------------
Class: ProjectileDecalSpawningComponent.ActorComponent.Object // 71a4b8bc80
	ProjectileDecalPoolManager* ProjectileDecalPoolManager;//[Offset: 0xb0, Size: 0x8] 0x715cde7300
	HuntersProjectileDecal* SpawnWithConfig(ProjectileDecalSpawnConfig SpawnConfig);// 0x6aee4dc 0x715cdf0320

--------------------------------
Class: ProjectileDecalSpawnConfig // 715ceca0c0
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x715cef7000
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x715cef7080
	float Duration;//[Offset: 0x18, Size: 0x4] 0x715cef7100
	float StartDelay;//[Offset: 0x1c, Size: 0x4] 0x715cef7180
	float UniformDecalScale;//[Offset: 0x20, Size: 0x4] 0x715cef7200
	Vector DecalSize;//[Offset: 0x24, Size: 0xc] 0x715cef7280
	bool UseBeginPlayRandomize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715cef7300
	float EmissiveTimeMultiplier;//[Offset: 0x34, Size: 0x4] 0x715cef7380
	float EmissiveTimeExponent;//[Offset: 0x38, Size: 0x4] 0x715cef5300
	float EmissiveMax;//[Offset: 0x3c, Size: 0x4] 0x715cef5380
	MaterialInterface* DecalMaterial;//[Offset: 0x40, Size: 0x8] 0x715cef5400

--------------------------------
Class: ProjectileDecalPoolManager.Actor.Object // 71a4b8bf00
	HuntersProjectileDecal*[] ProjectileDecalPool;//[Offset: 0x220, Size: 0x10] 0x715cda6500

--------------------------------
Class: HuntersProjectileDecal.Actor.Object // 71a4b8d300
	ProjectileDecalPoolManager* ProjectileDecalManager;//[Offset: 0x220, Size: 0x8] 0x715cde4800
	ProjectileDecalSpawnConfig ProjectileDecalConfig;//[Offset: 0x228, Size: 0x48] 0x715cde4880
	DecalComponent* DecalComponent;//[Offset: 0x270, Size: 0x8] 0x715cde4900
	MaterialInstanceDynamic* DMI;//[Offset: 0x290, Size: 0x8] 0x715cde4980
	void ReturnToPoolOrDestroy();// 0x6ae7a38 0x715cdf06a0

--------------------------------
Class: HuntersProjectileMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object // 71a4b8d080
	bool bHomeTowardsTargetPositionIfNoTargetComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1] 0x715cde5f00
	bool bLagCompensatedLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 0x1] 0x715cde5f80
	bool bIsArcingProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ce, Size: 0x1] 0x715cde6000
	CurveFloat* ArcingCurve;//[Offset: 0x1d0, Size: 0x8] 0x715cde6080
	bool OnlyStopSimulatingOnWorldStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1] 0x715cde6100
	bool OverrideBounceScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1] 0x715cde6180
	float SurfaceVerticalMaxAbsDotToBounceFrom;//[Offset: 0x1dc, Size: 0x4] 0x715cde6200
	bool DoNotChangeVelocityOnBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1] 0x715cde6280
	Vector OverriddenBounceScale;//[Offset: 0x1e4, Size: 0xc] 0x715cde6300
	bool ForceMaxSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1] 0x715cde4280
	bool ForceSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1] 0x715cde4300
	bool bOverrideHomingBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1] 0x715cde4380
	float MaxTurnSpeedDegrees;//[Offset: 0x1f4, Size: 0x4] 0x715cde4400
	float MaxTargetVelocityExtrapolationTime;//[Offset: 0x1f8, Size: 0x4] 0x715cde4480
	bool bConstrainHomingTargetToTargetCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 0x1] 0x715cde4500
	float ConstrainTargetCapsuleRadiusReduction;//[Offset: 0x200, Size: 0x4] 0x715cde4580
	Actor*[] QueryIgnored;//[Offset: 0x260, Size: 0x10] 0x715cda66e0
	delegate DebugOnImpact;//[Offset: 0x270, Size: 0x10] 0x715cde4680
	float MaxDotForHorizontalDirectionLock;//[Offset: 0x280, Size: 0x4] 0x715cde4700
	bool bUseHorizontalDirectionLockOnSlopes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1] 0x715cde4780

--------------------------------
Class: ProjectileActorPoolManager.Actor.Object // 71a4b8c400
	<class HuntersProjectile,ProjectilePool> ProjectilePools;//[Offset: 0x220, Size: 0x50] 0x715cd32140

--------------------------------
Class: ProjectilePool // 715ceca240
	HuntersProjectile*[] Projectiles;//[Offset: 0x0, Size: 0x10] 0x715ce96fa0

--------------------------------
Class: ProjectileMeshPoolManager.Actor.Object // 71a4b8b000
	<class Object,InstancedStaticMeshPool> InstancedStaticMeshPools;//[Offset: 0x228, Size: 0x50] 0x715cd32080

--------------------------------
Class: InstancedStaticMeshPool // 715cec9f40

--------------------------------
Class: ProjectileManager.Object // 71a4b8b280

--------------------------------
Class: ArcingConfig // 715ceca480
	Vector_NetQuantize TargetPosition;//[Offset: 0x0, Size: 0xc] 0x715cef5780
	float MaxArcHeight;//[Offset: 0xc, Size: 0x4] 0x715cef5800
	float ArcTime;//[Offset: 0x10, Size: 0x4] 0x715cef5880

--------------------------------
Class: ReplicatedProjectileImpact // 715ceca540
	bool bImpacted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715cef5900
	Actor* Actor;//[Offset: 0x8, Size: 0x8] 0x715cef5980

--------------------------------
Class: ProjectileSpawnConfig // 715cec9e80
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x715cef6b00
	Vector Direction;//[Offset: 0xc, Size: 0xc] 0x715cef6b80
	bool OverrideProjectileMovementComponentValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715cef6c00
	Vector InitialVelocity;//[Offset: 0x1c, Size: 0xc] 0x715cef6c80
	float InitialGravityScale;//[Offset: 0x28, Size: 0x4] 0x715cef6d00
	float MaxSpeed;//[Offset: 0x2c, Size: 0x4] 0x715cef6d80
	float HomingAccelerationMagnitude;//[Offset: 0x30, Size: 0x4] 0x715cef6e00
	float ProjectileBounciness;//[Offset: 0x34, Size: 0x4] 0x715cef6e80
	int NumProjectileBounces;//[Offset: 0x38, Size: 0x4] 0x715cef6f00

--------------------------------
Class: ProjectileAnalyticsGroup // 715cec9dc0

--------------------------------
Class: CharacterMaterialModifier.Object // 71a48f9200
	CharacterMaterialActiveModification[] ActiveModifications;//[Offset: 0x28, Size: 0x10] 0x715d0b52e0
	Actor* CachedActorToModify;//[Offset: 0x38, Size: 0x8] 0x715d141e00
	CharacterMaterialModificationHandle StartNewModification(Actor* HandleOwner, bool bApplyToWeapons);// 0x3f32eec 0x715d133180
	void OnModificationOwnerActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x3f32c2c 0x715d133260
	void ModifyParameter(CharacterMaterialModificationHandle Handle, FName Parameter, float Value);// 0x3f32d14 0x715d133340
	void EndModification(CharacterMaterialModificationHandle Handle);// 0x3f32e44 0x715d133420

--------------------------------
Class: CharacterMaterialActiveModification // 715da93a00
	CharacterMaterialModificationHandle Handle;//[Offset: 0x0, Size: 0x10] 0x715da8a880
	Actor* ModifierOwner;//[Offset: 0x10, Size: 0x8] 0x715da8a900
	bool bApplyToWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715da8a980
	<FName,float> RequestedValues;//[Offset: 0x20, Size: 0x50] 0x715da93940

--------------------------------
Class: CharacterMaterialModificationHandle // 715da93880
	Guid Identifier;//[Offset: 0x0, Size: 0x10] 0x715da8a800

--------------------------------
Class: CharacterEquipmentComponent.ActorComponent.Object // 71a4b94c00
	delegate EquippedEvent;//[Offset: 0xc8, Size: 0x10] 0x715cde8c80
	delegate OnEquipmentInitialized;//[Offset: 0xd8, Size: 0x10] 0x715cde8d00
	<GameplayTag,class HuntersEquipmentItem> EquipmentDefinitions;//[Offset: 0x100, Size: 0x50] 0x715cd31fc0
	TagEquipmentMap[] ActiveEquipmentToActorMap;//[Offset: 0x150, Size: 0x10] 0x715cda5ce0
	GameplayTagContainer EquipmentDisabledTags;//[Offset: 0x170, Size: 0x20] 0x715cde8e80
	void OnRep_ActiveEquipment();// 0x6b24d14 0x715cdf2a80
	bool IsItemEquipped(const GameplayTag Tag);// 0x6b24d28 0x715cdf2b60
	bool IsCurrentWeaponActive();// 0x6b24f50 0x715cdf2c40
	bool HasEquipmentInitialized();// 0x6b24e84 0x715cdf2d20
	HuntersEquipmentItem* GetItem(GameplayTag ItemTag);// 0x6b24dd8 0x715cdf2e00
	class HuntersEquipmentItem[] GetEquipmentList();// 0x6b24ea0 0x715cdf2ee0
	GameplayTag GetCurrentWeaponTag();// 0x6b24f88 0x715cdf2fc0
	HuntersEquipmentItem* GetCurrentWeapon();// 0x6b24fbc 0x715cdf30a0

--------------------------------
Class: HuntersEquipmentItem.Actor.Object // 71a4b93a80
	FName AttachToSocket;//[Offset: 0x228, Size: 0x8] 0x715d939180
	bool bUseParentPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x715d939200
	bool bUsesEquipmentSkins;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1] 0x715d939280
	GameplayTag EquipmentSkinLeader;//[Offset: 0x234, Size: 0x8] 0x715d939300
	bool CanBeDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x715d939380
	GameplayTagContainer DamageContextTags;//[Offset: 0x240, Size: 0x20] 0x715d939400
	float AIEffectiveRange;//[Offset: 0x270, Size: 0x4] 0x715d939480
	SkeletalMeshComponent* EquipmentMesh;//[Offset: 0x278, Size: 0x8] 0x715d937400
	class AttributeSet[] EquipmentAttributeSets;//[Offset: 0x280, Size: 0x10] 0x715d892f40
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x290, Size: 0x8] 0x715d937480
	<GameplayTag,EquipmentCameraAnim> CameraAnims;//[Offset: 0x298, Size: 0x50] 0x714906e500
	bool bIsEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x715d937700
	void PlayFiringCameraAnimations(GameplayTag CameraAnimTag);// 0x6b2c3e0 0x715da15640
	void OnWeaponOwnerUpdated__DelegateSignature();// 0x45c6aa0 0x715da11d60
	void OnUnequipped();// 0x6b2c3c4 0x715da11e40
	void OnRep_IsEquipped(bool bPreviousValue);// 0x6b2c2c8 0x715da11f20
	void OnEquipped();// 0x45c6aa0 0x715da12000
	Transform[] GetAllSocketsForTag(const GameplayTag SocketTag);// 0x6b2c484 0x715da120e0
	float GetAIEffectiveRange();// 0x6b2c388 0x715da121c0
	void DeactivateActor();// 0x6b2c374 0x715da122a0

--------------------------------
Class: HuntersAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object // 71a4914980
	delegate OnTagUpdatedEvent;//[Offset: 0x1310, Size: 0x10] 0x715d1c1f00
	delegate AbilityBindingsDelegate;//[Offset: 0x1320, Size: 0x10] 0x715d1c1f80
	enum[] InputsThatCanActiveSwitch;//[Offset: 0x14b0, Size: 0x10] 0x715d1b0740
	GameplayTagContainer TriggerTagsThatAllowForceActivation;//[Offset: 0x14c0, Size: 0x20] 0x715d1c2080
	GameplayTag[] SimulatedGameplayCuesContainer;//[Offset: 0x14f0, Size: 0x10] 0x715d1b07e0
	HuntersGameplayAbility*[] OnGivenActivatedAbilities;//[Offset: 0x1508, Size: 0x10] 0x715d1b0880
	class Object[] AiAbilityInfoClassesForGC;//[Offset: 0x15d8, Size: 0x10] 0x715d1b09c0
	bool UpdateActiveGameplayEffectDuration(ActiveGameplayEffectHandle ActiveGameplayEffectHandle, float NewDuration);// 0x3fd5e30 0x715d19c800
	void TargetCancelForAbility(GameplayAbility* Ability);// 0x3fd51e8 0x715d19c8e0
	void SetWaitingForTargetData(bool bWaitingForTargetData);// 0x3fd5d84 0x715d19c9c0
	void Server_ValidateGameplayEffectWithSpec(const GameplayEffectSpec GameplayEffectSpec, AbilitySystemComponent* Target, int16 PredictionKey);// 0x3fd5064 0x715d1990e0
	void Server_NotifyClientForegrounded();// 0x3fd5048 0x715d1991c0
	void RemoveSimulatedGameplayCue(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter);// 0x3fd5800 0x715d1992a0
	bool IsStunned();// 0x3fd5fd4 0x715d199380
	bool IsSimulatedGameplayCueCurrentlyExecuting(const GameplayTag GameplayCueTag);// 0x3fd56a0 0x715d199460
	bool IsSimulatedGameplayCueActive(const GameplayTag GameplayCueTag);// 0x3fd5750 0x715d199540
	bool IsInAimMode();// 0x3fd5f2c 0x715d199620
	bool IsDead();// 0x3fd5f64 0x715d199700
	bool IsAtCriticalHealth();// 0x3fd5f9c 0x715d1997e0
	bool IsAlive();// 0x3fd600c 0x715d1998c0
	bool HasAbility(class GameplayAbility Ability);// 0x3fd64bc 0x715d1999a0
	bool GetWaitingForTargetData();// 0x3fd5d64 0x715d199a80
	void GetCurrentRunningAbilities(out GameplayAbility*[] OutAbilities);// 0x3fd528c 0x715d199b60
	GameplayTask*[] GetAllActiveTickingTasks();// 0x3fd640c 0x715d199c40
	GameplayTask*[] GetAllActiveTasksForAbility(GameplayAbility* Ability);// 0x3fd6264 0x715d199d20
	GameplayTask*[] GetAllActiveTasks();// 0x3fd635c 0x715d199e00
	void GetAbilitiesByTag(out GameplayAbility*[] OutAbilities, out const GameplayTag GameplayTag);// 0x3fd540c 0x715d199ee0
	void GetAbilities(out GameplayAbility*[] OutAbilities);// 0x3fd534c 0x715d199fc0
	void ExecuteAlreadyActiveSimulatedGameplayCue(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter);// 0x3fd59cc 0x715d19a0a0
	void Client_InvalidatedGameplayEffect(int16 PredictionKey);// 0x3fd4f9c 0x715d19a180
	void CancelAbilityInput();// 0x3fd51d4 0x715d19a260
	void CancelAbilitiesWithTags(out const GameplayTagContainer WithTags, out const GameplayTagContainer WithoutTags, GameplayAbility* Ignore);// 0x3fd551c 0x715d19a340
	bool CanAbilityBeActivated(class GameplayAbility Ability);// 0x3fd6574 0x715d19a420
	ActiveGameplayEffectHandle ApplyValidatedGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle GameplayEffectSpec, AbilitySystemComponent* Target);// 0x3fd6044 0x715d19a500
	bool AnyActiveAbilityOfTypeHasAtLeastOneTarget(class GameplayAbility Ability);// 0x3fd61b4 0x715d19a5e0
	void AddSimulatedGameplayCueToOwner(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter);// 0x3fd5b98 0x715d19a6c0

--------------------------------
Class: EquipmentCameraAnim // 714906e440
	class CameraShake* CameraShakeClass;//[Offset: 0x0, Size: 0x8] 0x715d892fe0
	float Scale;//[Offset: 0x8, Size: 0x4] 0x715d937500
	byte PlaySpace;//[Offset: 0xc, Size: 0x1] 0x715d937580

--------------------------------
Class: TagEquipmentMap // 715cec9c40
	GameplayTag GameplayTag;//[Offset: 0x0, Size: 0x8] 0x715cef6a00
	HuntersEquipmentItem* EquipmentItem;//[Offset: 0x8, Size: 0x8] 0x715cef6a80

--------------------------------
Class: AutoFireComponent.ActorComponent.Object // 71a48f1500
	HuntersPlayerPreferences* Preferences;//[Offset: 0xb0, Size: 0x8] 0x715d12a600
	bool IsAutoFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x715d12a680
	class AutoFireRangeVisualizer* RangeVisualizerType;//[Offset: 0xc0, Size: 0x8] 0x715d0b56a0
	float TimeAutoFiring;//[Offset: 0xc8, Size: 0x4] 0x715d12a700
	<GameplayTag,AutoFireDataAsset*> AutoFireData;//[Offset: 0xd0, Size: 0x50] 0x715cecd900
	AutoFireRangeVisualizer* RangeVisualizer;//[Offset: 0x148, Size: 0x8] 0x715d12a880
	Target LastFiredAt;//[Offset: 0x170, Size: 0x48] 0x715d12a900
	void SetFireWithoutTarget(bool IsEnabled);// 0x3f2ac68 0x715d1306a0
	void SetAutoFireEnabled(bool IsEnabled);// 0x3f2ad30 0x715d130780
	bool IsAutoFireEnabled();// 0x3f2ad14 0x715d130860
	float GetMaxRangeForTag(GameplayTag Tag);// 0x3f2addc 0x715d130940

--------------------------------
Class: AutoFireRangeVisualizer.Actor.Object // 71a48f1280
	AutoFireData AutoFireData;//[Offset: 0x220, Size: 0x18] 0x715d12a580

--------------------------------
Class: AutoFireData // 715da94300
	AutoFireComponent* AutoFireComponent;//[Offset: 0x0, Size: 0x8] 0x715da88480
	HuntersCharacterBase* TargetCharacter;//[Offset: 0x8, Size: 0x8] 0x715da88500
	HuntersPlayerController* HuntersPlayerController;//[Offset: 0x10, Size: 0x8] 0x715da88580

--------------------------------
Class: HuntersPlayerController.BAPlayerControllerBase.PlayerController.Controller.Actor.Object // 71a4901780
	HuntersInputComponent* HuntersInputComponent;//[Offset: 0x600, Size: 0x8] 0x715d183880
	delegate OnPlayerStateReplicated;//[Offset: 0x620, Size: 0x10] 0x715d183900
	delegate RegisterControls;//[Offset: 0x658, Size: 0x10] 0x715d183980
	delegate OnMatchHUDReady;//[Offset: 0x668, Size: 0x10] 0x715d183a00
	AimAssistComponent* AimAssistComponent;//[Offset: 0x698, Size: 0x8] 0x715d183a80
	HuntersCharacterBase* HuntersCharacter;//[Offset: 0x770, Size: 0x8] 0x715d183b00
	float ResetPlayerCameraDuration;//[Offset: 0x7c0, Size: 0x4] 0x715d183b80
	HuntersInMemoryReplay* InMemoryReplay;//[Offset: 0x7c8, Size: 0x8] 0x715d183c00
	void UpdateObjectiveColors(LinearColor OutlineColor, LinearColor OutlineFillColor);// 0x3f5f0bc 0x715d190b00
	void TryMakeProgressionChoice(int ChoiceID);// 0x3f5f828 0x715d190be0
	void ServerRequestPawnStateDebug(bool bDumpAll);// 0x3f5edf4 0x715d190cc0
	void Server_MakeProgressionChoice(int ChoiceID);// 0x3f5f744 0x715d190da0
	void OnTriggerAbilityReleased(enum InAbilityInput);// 0x3f5f5fc 0x715d190e80
	void OnTriggerAbilityPressed(enum InAbilityInput);// 0x3f5f6a0 0x715d190f60
	void MarkADSActive(bool Active);// 0x3f5f314 0x715d191040
	bool IsAbilityTriggered(enum InAbilityInput);// 0x3f5f54c 0x715d191120
	LinearColor GetObjectiveOutlineFillColor();// 0x3f5f04c 0x715d191200
	LinearColor GetObjectiveOutlineColor();// 0x3f5f084 0x715d1912e0
	NetworkInfo GetNetworkInfo();// 0x3f5f900 0x715d1913c0
	HuntersInMemoryReplay* GetInMemoryReplay();// 0x3f5f8cc 0x715d1914a0
	float GetAimAssistWeighting();// 0x3f5ecbc 0x715d191580
	AimAssistComponent* GetAimAssistComponent();// 0x3f5fa10 0x715d191660
	void EnableAbilityInputs();// 0x3f5f524 0x715d191740
	void DisableMovementForFTUE(bool bDisable);// 0x3f5f47c 0x715d191820
	void DisableAimingForFTUE(bool bDisable);// 0x3f5f3d4 0x715d191900
	void DisableAbilityInputs();// 0x3f5f538 0x715d1919e0
	void ClientReturnPawnStateDebug(FString StateDebug, bool bDumpAll);// 0x3f5ecf0 0x715d191ac0
	void ClientReceiveTakenDamage(const HuntersNetDamageEvent DamageEvent);// 0x3f5f1a0 0x715d191ba0
	void ClientReceiveCommsActionForTarget(HuntersCommsActionComponent* Target, enum CommsType, CommsData CommsData);// 0x3f5eee4 0x715d191c80
	void CameraResetPressed();// 0x3f5f3c0 0x715d16e780
	void ApplyViewLerp(const ViewLerpInfo NewViewLerpInfo);// 0x3f5f26c 0x715d16e860

--------------------------------
Class: BAPlayerControllerBase.PlayerController.Controller.Actor.Object // 71a4901500
	BAReplicatedEventStreamManager* EventStreamManager;//[Offset: 0x5f0, Size: 0x8] 0x715d182880
	void ServerRequestServerTime(float RequestTimestamp, uint16 RequestSyncCounter);// 0x64f6bf4 0x715d16e940
	void ServerExecuteConsoleCommand(FString Command);// 0x64f6e64 0x715d16ea20
	void PerformNextClockSync();// 0x64f6e50 0x715d16eb00
	void OnRep_EventStreamManager();// 0x64f6be0 0x715d16ebe0
	PlayerState* GetViewTargetPlayerState();// 0x64f6f4c 0x715d16ecc0
	void ClientRespondWithServerTime(float RequestTimestamp, float ServerTimeStamp, uint16 RequestSyncCounter);// 0x64f6d20 0x715d16eda0

--------------------------------
Class: NetworkInfo // 715da958c0
	FString Host;//[Offset: 0x0, Size: 0x10] 0x715da8d100
	FString RequestedURL;//[Offset: 0x10, Size: 0x10] 0x715da8d180
	FString Map;//[Offset: 0x20, Size: 0x10] 0x715da8d200
	int Port;//[Offset: 0x30, Size: 0x4] 0x715da8d280

--------------------------------
Class: HuntersInMemoryReplay.Object // 71a4902e00
	delegate OnUpdateCanPlayInMemoryReplay;//[Offset: 0x28, Size: 0x10] 0x715d176f80
	delegate OnReplayPreparing;//[Offset: 0x38, Size: 0x10] 0x715d177000
	delegate OnReplayCancelled;//[Offset: 0x48, Size: 0x10] 0x715d177080
	delegate OnReplayStarted;//[Offset: 0x58, Size: 0x10] 0x715d177100
	delegate OnReplayCompleted;//[Offset: 0x68, Size: 0x10] 0x715d177180
	bool bCanPlayInMemoryReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x715d177200
	void Play();// 0x3f5bb28 0x715d1644c0

--------------------------------
Class: AimAssistComponent.ActorComponent.Object // 71a48f3800
	bool bShouldDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715d128800
	AimDataAsset* DefaultAimData;//[Offset: 0xb8, Size: 0x8] 0x715d128880
	FName AimAssistFallbackPositionName;//[Offset: 0xc0, Size: 0x8] 0x715d128900

--------------------------------
Class: HuntersNetDamageEvent // 715ce7eec0
	Actor* Actor;//[Offset: 0x0, Size: 0x8] 0x715ceb0b80
	Actor* InstigatingActor;//[Offset: 0x8, Size: 0x8] 0x715ceb0c00
	PlayerState* InstigatorPlayerState;//[Offset: 0x10, Size: 0x8] 0x715ceb0c80
	float TotalChange;//[Offset: 0x18, Size: 0x4] 0x715ceb0d00
	float CurrentHitpoints;//[Offset: 0x1c, Size: 0x4] 0x715ceb0d80
	float XPMultiplier;//[Offset: 0x20, Size: 0x4] 0x715ceb0e00
	bool bCausedByCritical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x715ceb0e80
	bool bCausedByProjectile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x715ceb0f00
	bool bHasOriginPosition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1] 0x715ceb0f80
	bool bWasCausedByPeriodicEffect;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1] 0x715ceb1000
	bool bWasProtectionEvent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1] 0x715ceb1080
	bool bCausedByMinion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1] 0x715ceaf800
	bool bGlancingBlow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1] 0x715ceaf880
	Vector_NetQuantize OriginPosition;//[Offset: 0x28, Size: 0xc] 0x715ceaf900
	GameplayTagContainer EffectTags;//[Offset: 0x38, Size: 0x20] 0x715ceaf980

--------------------------------
Class: HuntersCommsActionComponent.ActorComponent.Object // 71a4904480
	<enum,class HuntersCommsAction> CustomCommsActions;//[Offset: 0xb0, Size: 0x50] 0x715cecd240
	CommsExclusivity CommsExclusivity;//[Offset: 0x100, Size: 0x10] 0x715d173e00
	HuntersCommsAction*[] ActiveCommsActions;//[Offset: 0x190, Size: 0x10] 0x715d0bb3c0
	void ServerPlayComms(enum CommsType, CommsData CommsData, const HuntersPlayerState*[] BroadcastTargets);// 0x3f54274 0x715d162fc0
	void PlayCommsBlueprint(enum CommsType, CommsData CommsData, out const HuntersPlayerState*[] BroadcastTargets);// 0x3f54434 0x715d1630a0
	void OnCommsActionComplete(HuntersCommsAction* CommsActions);// 0x3f541d0 0x715d163180

--------------------------------
Class: CommsData // 715da95c80
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8] 0x715da8d680
	Actor* SourceActor;//[Offset: 0x8, Size: 0x8] 0x715da8b600
	Vector_NetQuantize TargetLocation;//[Offset: 0x10, Size: 0xc] 0x715da8b680
	float DurationOverride;//[Offset: 0x1c, Size: 0x4] 0x715da8b700
	bool IsManualTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715da8b780
	int ExtraParameter;//[Offset: 0x24, Size: 0x4] 0x715da8b800
	bool UseDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715da8b880

--------------------------------
Class: HuntersCommsAction.Object // 71a48fa600
	int Priority;//[Offset: 0x70, Size: 0x4] 0x715d172280
	enum DuplicationRule;//[Offset: 0x80, Size: 0x1] 0x715d0bb780
	float Duration;//[Offset: 0x84, Size: 0x4] 0x715d172380

--------------------------------
Class: CommsExclusivity // 715da95bc0
	class HuntersCommsAction[] ActionsToEnd;//[Offset: 0x0, Size: 0x10] 0x715d89ace0

--------------------------------
Class: ViewLerpInfo // 715da95980
	float TargetYawDeg;//[Offset: 0x0, Size: 0x4] 0x715da8d300
	float LerpDuration;//[Offset: 0x4, Size: 0x4] 0x715da8d380

--------------------------------
Class: BAReplicatedEventStreamManager.Info.Actor.Object // 71a4aec180
	void ServerAckEventStream(byte StreamID, int ClientCursor);// 0x64f79e4 0x715cc7a0a0

--------------------------------
Class: HuntersInputComponent.InputComponent.ActorComponent.Object // 71a4b39200
	void TurnYaw(float InValue);// 0x6918d44 0x715cd52ee0
	void TurnPitch(float InValue);// 0x6918ca0 0x715cd52fc0
	void TriggerAttackReleased();// 0x6919080 0x715cd530a0
	void TriggerAttackPressed();// 0x6919094 0x715cd53180
	void OnTouchRepeat(byte FingerIndex, Vector Location, bool bIsFirstMove);// 0x691895c 0x715cd53260
	void OnTouchReleased(byte FingerIndex, Vector Location);// 0x6918a8c 0x715cd53340
	void OnTouchPressed(byte FingerIndex, Vector Location, bool bIsFirstMove);// 0x6918b70 0x715cd53420
	void MoveLeftAxis(float InValue);// 0x6918de8 0x715cd53500
	void MoveForwardAxis(float InValue);// 0x6918e8c 0x715cd535e0
	bool IsInputEnabled();// 0x6918f58 0x715cd536c0
	bool IsControlConfigAvailable();// 0x6918f74 0x715cd537a0
	void EnableManualFire(bool bEnable);// 0x6918fd4 0x715cd53880
	void EnableControl();// 0x6918f44 0x715cd53960
	void DisableControl();// 0x6918f30 0x715cd50080

--------------------------------
Class: AutoFireDataAsset.DataAsset.Object // 71a4b8f880
	bool SupportsAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715cde7580
	enum CursorShape;//[Offset: 0x31, Size: 0x1] 0x715cda5f60
	Vector2D RadiusOffset;//[Offset: 0x34, Size: 0x8] 0x715cde7680
	RuntimeFloatCurve AutoFireScreenSpaceRadius;//[Offset: 0x40, Size: 0x88] 0x715cde7700
	RuntimeFloatCurve AutoFireDelayCurve;//[Offset: 0xc8, Size: 0x88] 0x715cde7780

--------------------------------
Class: HuntersInteractionController.ActorComponent.Object // 71a496ec00
	Actor*[] InteractablesInRange;//[Offset: 0xb0, Size: 0x10] 0x715d1b8580
	HuntersAimController* AimControllerPtr;//[Offset: 0xc0, Size: 0x8] 0x715d226a00
	Pawn* PawnOwnerPtr;//[Offset: 0xc8, Size: 0x8] 0x715d226a80
	Actor* InteractableSelected;//[Offset: 0xd0, Size: 0x8] 0x715d226b00
	delegate EnableManualInteractionDelegate;//[Offset: 0xd8, Size: 0x10] 0x715d226b80
	delegate DisableManualInteractionDelegate;//[Offset: 0xe8, Size: 0x10] 0x715d226c00
	void StartInteractionServer(Actor* InteractableActor);// 0x41470a0 0x715d21d7c0
	void OnManualInteractionPressed();// 0x414708c 0x715d21d8a0

--------------------------------
Class: HuntersAimController.ActorComponent.Object // 71a4b94480
	Actor* LastAimAssistTarget;//[Offset: 0xb0, Size: 0x8] 0x715cdea500
	FName AimTraceResponseProfile;//[Offset: 0xb8, Size: 0x8] 0x715cde8480
	float BotSmoothingAimRate;//[Offset: 0xc0, Size: 0x4] 0x715cde8500
	Vector TargetLocation;//[Offset: 0x114, Size: 0xc] 0x715cde8580
	float Range;//[Offset: 0x120, Size: 0x4] 0x715cde8600
	BlackboardKeySelector AimLocationKey;//[Offset: 0x128, Size: 0x28] 0x715cde8680
	bool ConsiderFriendliesInAimPointCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x715cde8700
	float SpreadSeed;//[Offset: 0x15c, Size: 0x4] 0x715cde8780
	int ShotsFired;//[Offset: 0x160, Size: 0x4] 0x715cde8800
	float AngleToIgnoreActor;//[Offset: 0x164, Size: 0x4] 0x715cde8880
	void OnRep_SpreadSeed();// 0x6b27290 0x715cdf2380
	void OnRep_ShotsFired();// 0x6b2727c 0x715cdf2460
	float GetAngleToIgnoreActor();// 0x6b272a4 0x715cdf2540
	Vector GetAimLocation();// 0x6b272d8 0x715cdf2620
	Vector GetAimForward();// 0x6b27310 0x715cdf2700

--------------------------------
Class: BlackboardKeySelector // 715ce7ad80
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10] 0x715ce924a0
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8] 0x715ceab480
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8] 0x715ce92540
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1] 0x715ceab500
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1] 0x715ceab580

--------------------------------
Class: BlackboardKeyType.Object // 71a4afc680

--------------------------------
Class: HuntersCharacterCameraTargetComponent.ActorComponent.Object // 71a48fcb80
	class HuntersCharacterCameraTargetConfig* InitialConfig;//[Offset: 0xb8, Size: 0x8] 0x715d0b9ca0
	bool bAttachToMeshComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x715d156080
	GameplayTag CurrentCameraStateTag;//[Offset: 0xc4, Size: 0x8] 0x715d156100
	void SetRotationAdjustment(const FName Identifier, Rotator Rotation);// 0x3f4ba38 0x715d13dec0
	void SetOffsetAdjustment(const FName Identifier, Vector Offset);// 0x3f4bb1c 0x715d13dfa0
	void SetFOVAdjustment(const FName Identifier, float FOV);// 0x3f4bc00 0x715d13e080
	void SetDefaultCameraStateOverride(GameplayTag NewDefaultStateOverrideTag);// 0x3f4b978 0x715d13e160
	bool SetCameraToState(GameplayTag StateTag, enum OnFailure);// 0x3f4bd8c 0x715d13e240
	void ResetToDefaultState();// 0x3f4b92c 0x715d13e320
	void OnRep_CameraState();// 0x3f4b940 0x715d13e400
	void GiveCameraStates(class HuntersCharacterCameraStateConfig StateConfig);// 0x3f4be80 0x715d13e4e0
	GameplayTag GetCurrentCameraStateTag();// 0x3f4ba1c 0x715d13e5c0
	void EndCameraState(GameplayTag StateTag);// 0x3f4bce8 0x715d13e6a0
	void ClearDefaultCameraStateOverride();// 0x3f4b954 0x715d13adc0

--------------------------------
Class: HuntersCharacterCameraTargetConfig.Object // 71a48fc900
	FName CameraSocketName;//[Offset: 0x28, Size: 0x8] 0x715d155e80
	HuntersCameraTransitionConfig DefaultTransitionConfig;//[Offset: 0x30, Size: 0x30] 0x715d155f00
	HuntersDesiredCameraState DefaultState;//[Offset: 0x60, Size: 0x88] 0x715d155f80
	class HuntersCharacterCameraStateConfig* InitialStates;//[Offset: 0xe8, Size: 0x8] 0x715d0b9b60
	HuntersDesiredCameraState AlternativeDefaultState;//[Offset: 0xf0, Size: 0x88] 0x715d156000
	class HuntersCharacterCameraStateConfig* AlternativeInitialStates;//[Offset: 0x178, Size: 0x8] 0x715d0b9c00

--------------------------------
Class: HuntersCameraTransitionConfig // 715da98740
	HuntersCameraTransition FOVTransition;//[Offset: 0x0, Size: 0x10] 0x715dab5e00
	HuntersCameraTransition OffsetTransition;//[Offset: 0x10, Size: 0x10] 0x715dab5e80
	HuntersCameraTransition LookAtOffsetTransition;//[Offset: 0x20, Size: 0x10] 0x715dab6000

--------------------------------
Class: HuntersCameraTransition // 715da98680
	float TransitionTime;//[Offset: 0x0, Size: 0x4] 0x715dab5f00
	CurveFloat* TransitionCurve;//[Offset: 0x8, Size: 0x8] 0x715dab5f80

--------------------------------
Class: HuntersDesiredCameraState // 715da98800
	float FOV;//[Offset: 0x0, Size: 0x4] 0x715dab5b80
	Vector Offset;//[Offset: 0x4, Size: 0xc] 0x715dab5c00
	Rotator LookAtOffset;//[Offset: 0x10, Size: 0xc] 0x715dab5c80
	HuntersCameraTransitionConfig Transition;//[Offset: 0x20, Size: 0x30] 0x715dab5d00
	bool bEnableTransitionOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715dab5d80
	HuntersCameraTransitionConfig TransitionOut;//[Offset: 0x58, Size: 0x30] 0x715dab6080

--------------------------------
Class: HuntersCharacterCameraStateConfig.Object // 71a48fce00
	<GameplayTag,HuntersDesiredCameraState> CameraStates;//[Offset: 0x28, Size: 0x50] 0x715cecd300

--------------------------------
Class: HuntersCameraComponent.ActorComponent.Object // 71a4960d80
	class HuntersCameraComponentConfig* InitialCameraComponentConfig;//[Offset: 0xc0, Size: 0x8] 0x715d1b6fa0
	void SetFrozen(const bool bInFrozen);// 0x40fb828 0x715d215aa0
	void PreUpdate();// 0x40fb8f0 0x715d215b80
	void PostUpdate();// 0x40fb8d4 0x715d215c60

--------------------------------
Class: HuntersCameraComponentConfig.Object // 71a4960b00
	HuntersCameraConstraint*[] Constraints;//[Offset: 0x28, Size: 0x10] 0x715d1b6f00
	HuntersCameraStateLimits Limits;//[Offset: 0x38, Size: 0x8] 0x715d20f480
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x650] 0x715d20f500

--------------------------------
Class: HuntersCameraConstraint.Object // 71a4960880
	void Update(out HuntersCameraState OutCameraState, out const HuntersCameraState InCameraState, out const HuntersCameraAttachmentInfo AttachmentInfo, const World* World, const float DeltaTime);// 0x40fcbe8 0x715d2159c0

--------------------------------
Class: HuntersCameraState // 715da98980
	float FOV;//[Offset: 0x0, Size: 0x4] 0x715dab6200
	Vector Location;//[Offset: 0x4, Size: 0xc] 0x715dab6280
	Rotator Rotation;//[Offset: 0x10, Size: 0xc] 0x715dab6300

--------------------------------
Class: HuntersCameraAttachmentInfo // 715da988c0
	SceneComponent* Component;//[Offset: 0x0, Size: 0x8] 0x715dab6100
	FName SocketName;//[Offset: 0x8, Size: 0x8] 0x715dab6180

--------------------------------
Class: HuntersCameraStateLimits // 715da98a40
	float MinFOV;//[Offset: 0x0, Size: 0x4] 0x715dab4280
	float MaxFOV;//[Offset: 0x4, Size: 0x4] 0x715dab4300

--------------------------------
Class: HuntersAimPunchComponent.ActorComponent.Object // 71a48fe480
	CurveFloat* PitchStrengthCurve;//[Offset: 0xb0, Size: 0x8] 0x715d149200
	CurveFloat* RollStrengthCurve;//[Offset: 0xb8, Size: 0x8] 0x715d149280
	CurveFloat* PanStrengthCurve;//[Offset: 0xc0, Size: 0x8] 0x715d149300
	float PunchGainTime;//[Offset: 0xc8, Size: 0x4] 0x715d149380
	float PunchDecayRateRotation;//[Offset: 0xcc, Size: 0x4] 0x715d149400
	float PunchDecayRateOffset;//[Offset: 0xd0, Size: 0x4] 0x715d149480
	bool ApplyPitchPunchInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1] 0x715d147400
	HuntersHealthAttributeSet* HealthAttributeSet;//[Offset: 0x110, Size: 0x8] 0x715d147480
	PlayerController* OwnerPlayerController;//[Offset: 0x118, Size: 0x8] 0x715d147500
	HuntersCharacterCameraTargetComponent* OwnerCameraTargetComponent;//[Offset: 0x120, Size: 0x8] 0x715d147580

--------------------------------
Class: HuntersHealthAttributeSet.HuntersAttributeSet.AttributeSet.Object // 71a4966c80
	GameplayAttributeData HitpointChange;//[Offset: 0x30, Size: 0x28] 0x715d222780
	GameplayAttributeData Health;//[Offset: 0x58, Size: 0x28] 0x715d222800
	GameplayAttributeData MaxHealth;//[Offset: 0x80, Size: 0x28] 0x715d222880
	GameplayAttributeData MinHealth;//[Offset: 0xa8, Size: 0x28] 0x715d222900
	GameplayAttributeData TemporaryHealth;//[Offset: 0xd0, Size: 0x28] 0x715d222980
	GameplayAttributeData MaxTemporaryHealth;//[Offset: 0xf8, Size: 0x28] 0x715d222a00
	GameplayAttributeData Armor;//[Offset: 0x120, Size: 0x28] 0x715d222a80
	GameplayAttributeData MaxArmorPercentage;//[Offset: 0x148, Size: 0x28] 0x715d222b00
	GameplayAttributeData Shield;//[Offset: 0x170, Size: 0x28] 0x715d222b80
	GameplayAttributeData MaxShield;//[Offset: 0x198, Size: 0x28] 0x715d222c00
	GameplayAttributeData IncomingDamageMultiplier;//[Offset: 0x1c0, Size: 0x28] 0x715d222c80
	GameplayAttributeData OutgoingDamageMultiplier;//[Offset: 0x1e8, Size: 0x28] 0x715d222d00
	GameplayAttributeData OutgoingMeleeDamageMultiplier;//[Offset: 0x210, Size: 0x28] 0x715d222d80
	GameplayAttributeData OutgoingDamageModifier;//[Offset: 0x238, Size: 0x28] 0x715d222e00
	GameplayAttributeData OutgoingCriticalDamageModifier;//[Offset: 0x260, Size: 0x28] 0x715d222e80
	GameplayAttributeData IncomingHealingMultiplier;//[Offset: 0x288, Size: 0x28] 0x715d222f00
	GameplayAttributeData OutgoingHealingMultiplier;//[Offset: 0x2b0, Size: 0x28] 0x715d222f80
	GameplayAttributeData RecoverHealth;//[Offset: 0x2d8, Size: 0x28] 0x715d223000
	ActorComponent*[] CachedDamageModifierComponents;//[Offset: 0x308, Size: 0x10] 0x715d1b6780
	void OnRep_TemporaryHealth(GameplayAttributeData OldTemporaryHealth);// 0x412ba60 0x715d219700
	void OnRep_Shield(GameplayAttributeData OldShield);// 0x412b620 0x715d2197e0
	void OnRep_OutgoingMeleeDamageMultiplier();// 0x412b5d0 0x715d2198c0
	void OnRep_OutgoingHealingMultiplier();// 0x412b580 0x715d2199a0
	void OnRep_OutgoingDamageMultiplier();// 0x412b5e4 0x715d219a80
	void OnRep_OutgoingDamageModifier();// 0x412b5bc 0x715d219b60
	void OnRep_OutgoingCriticalDamageModifier();// 0x412b5a8 0x715d219c40
	void OnRep_MinHealth();// 0x412bc6c 0x715d219d20
	void OnRep_MaxTemporaryHealth();// 0x412ba4c 0x715d219e00
	void OnRep_MaxShield();// 0x412b60c 0x715d219ee0
	void OnRep_MaxHealth();// 0x412bc80 0x715d219fc0
	void OnRep_MaxArmorPercentage();// 0x412b82c 0x715d21a0a0
	void OnRep_IncomingHealingMultiplier();// 0x412b594 0x715d21a180
	void OnRep_IncomingDamageMultiplier();// 0x412b5f8 0x715d21a260
	void OnRep_HitpointChange();// 0x412bea0 0x715d21a340
	void OnRep_Health(GameplayAttributeData OldHealth);// 0x412bc94 0x715d21a420
	void OnRep_Armor(GameplayAttributeData OldArmor);// 0x412b840 0x715d21a500

--------------------------------
Class: HuntersAttributeSet.AttributeSet.Object // 71a4967400

--------------------------------
Class: GameplayAttributeData // 714906fb80
	float BaseValue;//[Offset: 0x20, Size: 0x4] 0x715d93d980
	float CurrentValue;//[Offset: 0x24, Size: 0x4] 0x715d93da00

--------------------------------
Class: HuntersServerAnimationUpdateController.ActorComponent.Object // 71a4900600
	HuntersAnimationMap* BakedAnimsDA;//[Offset: 0x118, Size: 0x8] 0x715d184e80
	void StopAnimation();// 0x3f617a4 0x715d1904e0
	void PlayAnimation(const GameplayTag AnimTag, const float AnimRate, bool ForceStart);// 0x3f617b8 0x715d1905c0

--------------------------------
Class: HuntersAnimationMap.Object // 71a48fe200
	<GameplayTag,AnimMontage*> TagToMontage;//[Offset: 0x28, Size: 0x50] 0x715cecd6c0
	<GameplayTag,BakedAnimInfo> TagToBakedData;//[Offset: 0x78, Size: 0x50] 0x715cecd780
	<GameplayTag,CurveVector*> TagToRootMotionData;//[Offset: 0xc8, Size: 0x50] 0x715cecd840
	HuntersAnimationMap*[] ReferencedAnimationMaps;//[Offset: 0x118, Size: 0x10] 0x715d0b6780

--------------------------------
Class: BakedAnimInfo // 715da93340
	<FName,BakedAnimData> BakedAnimDataByName;//[Offset: 0x0, Size: 0x50] 0x715da93280
	float AnimDuration;//[Offset: 0x50, Size: 0x4] 0x715da8c200
	int FrameNum;//[Offset: 0x54, Size: 0x4] 0x715da8c280
	bool ResetWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715da8c300

--------------------------------
Class: BakedAnimData // 715da931c0
	Vector[] RelativeLocationByFrame;//[Offset: 0x0, Size: 0x10] 0x715d89b0a0

--------------------------------
Class: HuntersSelfEventsListenerComponent.ActorComponent.Object // 71a4900880
	HuntersCommsActionComponent* CommsActionComponent;//[Offset: 0xb0, Size: 0x8] 0x715d185080
	void OnUltimatePointsChangedEvent(HuntersPlayerState* PlayerState);// 0x3f61160 0x715d1906a0

--------------------------------
Class: DialogueSpeakerComponent.ActorComponent.Object // 71a4b67b80
	<GameplayTag,DeathAudio> DeathSounds;//[Offset: 0xb0, Size: 0x50] 0x715cd32e00
	FName SpeakerId;//[Offset: 0x100, Size: 0x8] 0x715cd9b280
	bool bAudibleEverywhere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x715cd9b300
	float MaxAudibleDistance;//[Offset: 0x10c, Size: 0x4] 0x715cd9b380
	float MissingAudioDuration;//[Offset: 0x110, Size: 0x4] 0x715cd9b400
	AkAudioEvent* StopDialogueEvent;//[Offset: 0x118, Size: 0x8] 0x715cd9b480
	delegate AkPostEventDelegate;//[Offset: 0x130, Size: 0x10] 0x715cd9b500
	DialogueManager* DialogueManager;//[Offset: 0x140, Size: 0x8] 0x715cd9b580
	DialogueMemoryComponent* Memory;//[Offset: 0x148, Size: 0x8] 0x715cd99500
	void SpeakResponse(DialogueResponseId ResponseId, byte OriginRole);// 0x69f269c 0x715cd5ce20
	void PlayRandomResponse();// 0x69f2970 0x715cd5cf00
	void OnSpeakingFinished();// 0x69f2688 0x715cd5cfe0
	void OnAkPostEventCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x69f25a0 0x715cd5d0c0
	void MulticastSpeakUnreliable(DialogueResponseId ResponseId, byte OriginRole);// 0x69f287c 0x715cd5d1a0
	void MulticastSpeakReliable(DialogueResponseId ResponseId, byte OriginRole);// 0x69f2788 0x715cd5d280

--------------------------------
Class: DeathAudio // 715cec8ec0
	FName[] DeathSounds;//[Offset: 0x0, Size: 0x10] 0x715ce952e0

--------------------------------
Class: DialogueResponseId // 715cec8f80
	int ID;//[Offset: 0x0, Size: 0x4] 0x715cef2380

--------------------------------
Class: DialogueManager.DialogueManagerInterface.WorldSubsystem.Subsystem.Object // 71a4b68800
	DialogueSpeakerComponent*[] PotentialSpeakers;//[Offset: 0x30, Size: 0x10] 0x715cda1320

--------------------------------
Class: DialogueManagerInterface.WorldSubsystem.Subsystem.Object // 71a4b68580

--------------------------------
Class: SimulateCuesByTagController.ActorComponent.Object // 71a4910880
	GameplayTagContainer WaitForTags;//[Offset: 0xb0, Size: 0x20] 0x715d1c5180
	void GameplayTagCallback(const GameplayTag Tag, int NewCount);// 0x3fe20cc 0x715d19e320

--------------------------------
Class: HuntersAbilitySet.Object // 71a4914e80
	DefaultAbility[] Abilities;//[Offset: 0x28, Size: 0x10] 0x715d0bd300
	HuntersAbilitySet*[] AbilitySets;//[Offset: 0x38, Size: 0x10] 0x715d0bd3a0
	DefaultAbility[] AlternateSwapAbilities;//[Offset: 0x48, Size: 0x10] 0x715d0bd440
	DefaultAbility[] AlternateAddAbilities;//[Offset: 0x58, Size: 0x10] 0x715d0bd4e0

--------------------------------
Class: DefaultAbility // 715da976c0
	class HuntersGameplayAbility* Ability;//[Offset: 0x0, Size: 0x8] 0x715d89c860
	class Object[] AIAbilityClasses;//[Offset: 0x8, Size: 0x10] 0x715d89c9a0
	enum Input;//[Offset: 0x18, Size: 0x1] 0x715d89ca40
	int AbilityLevel;//[Offset: 0x1c, Size: 0x4] 0x715dab0d00

--------------------------------
Class: HuntersAnimationSet // 715da96280
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715da8be00
	HuntersAnimationMap* AnimationMap;//[Offset: 0x8, Size: 0x28] 0x715da8be80
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 0x28] 0x715da8bf00
	<GameplayTag,SkeletalMesh*> EquipmentMeshes;//[Offset: 0x58, Size: 0x50] 0x715da961c0
	class BaseCharacterAnimInstance* AnimationInstance;//[Offset: 0xa8, Size: 0x8] 0x715d89b000

--------------------------------
Class: BaseCharacterAnimInstance.AnimInstance.Object // 71a48f1000
	float ForwardSpeed;//[Offset: 0x268, Size: 0x4] 0x715d12f500
	float StrafeSpeed;//[Offset: 0x26c, Size: 0x4] 0x715d12f580
	float VerticalSpeed;//[Offset: 0x270, Size: 0x4] 0x715d12f600
	bool IsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1] 0x715d12f680
	bool IsArmedAndMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1] 0x715d12f700
	bool IsAccelerating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1] 0x715d12f780
	bool IsMovingOrTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 0x1] 0x715d12d700
	float FloorTraceDistance;//[Offset: 0x278, Size: 0x4] 0x715d12d780
	bool InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x715d12d800
	bool IsGrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 0x1] 0x715d12d880
	bool IsGroundedAndAccelerating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e, Size: 0x1] 0x715d12d900
	bool IsGroundedAndNotAccelerating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27f, Size: 0x1] 0x715d12d980
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x715d12da00
	bool IsKnockedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1] 0x715d12da80
	float LeanAngle;//[Offset: 0x284, Size: 0x4] 0x715d12db00
	bool bLeansEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x715d12db80
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1] 0x715d12dc00
	GameplayTagContainer PullbackTags;//[Offset: 0x290, Size: 0x20] 0x715d12dc80
	float MinKnockbackSpeed;//[Offset: 0x2b0, Size: 0x4] 0x715d12dd00
	float MaxKnockbackIntensitySpeed;//[Offset: 0x2b4, Size: 0x4] 0x715d12dd80
	Vector2D KnockbackVector;//[Offset: 0x2b8, Size: 0x8] 0x715d12de00
	float AimPitch;//[Offset: 0x2c0, Size: 0x4] 0x715d12de80
	float AimYaw;//[Offset: 0x2c4, Size: 0x4] 0x715d12df00
	float LowerWeaponTime;//[Offset: 0x2c8, Size: 0x4] 0x715d12df80
	float PassiveAimMaxYaw;//[Offset: 0x2cc, Size: 0x4] 0x715d12e000
	float PassiveAimInterpSpeed;//[Offset: 0x2d0, Size: 0x4] 0x715d12e080
	bool bEnableLookAtAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1] 0x715d12e100
	float LookAtAimMinDistance;//[Offset: 0x2d8, Size: 0x4] 0x715d12e180
	float LookAtAimMaxDistance;//[Offset: 0x2dc, Size: 0x4] 0x715d12e200
	float LookAtAimInterpSpeed;//[Offset: 0x2e0, Size: 0x4] 0x715d12e280
	Vector LookAtAimLocation;//[Offset: 0x2e4, Size: 0xc] 0x715d12e300
	Vector CounterRotatedLookAtAimLocation;//[Offset: 0x2f0, Size: 0xc] 0x715d12e380
	GameplayTagContainer ArmedTags;//[Offset: 0x300, Size: 0x20] 0x715d12e400
	bool IsArmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1] 0x715d12e480
	bool IsAttacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1] 0x715d12e500
	float ArmedBlendTime;//[Offset: 0x324, Size: 0x4] 0x715d12e580
	float ArmedBlendAlpha;//[Offset: 0x328, Size: 0x4] 0x715d12e600
	float CombatBlendTime;//[Offset: 0x32c, Size: 0x4] 0x715d12e680
	float CombatBlendAlpha;//[Offset: 0x330, Size: 0x4] 0x715d12e700
	bool IsInCombat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1] 0x715d12c680
	bool IsAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1] 0x715d12c700
	bool IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x336, Size: 0x1] 0x715d12c780
	bool bIsSimulatingPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x337, Size: 0x1] 0x715d12c800
	GameplayTagContainer KnockdownTags;//[Offset: 0x338, Size: 0x20] 0x715d12c880
	AnimSequence* KnockdownRecoveryAnim;//[Offset: 0x358, Size: 0x8] 0x715d12c900
	bool bIsStunned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1] 0x715d12c980
	bool bIsKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1] 0x715d12ca00
	float ApexBlendVerticalSpeed;//[Offset: 0x364, Size: 0x4] 0x715d12ca80
	float FallingDownAlpha;//[Offset: 0x368, Size: 0x4] 0x715d12cb00
	bool bUseFallingDownVerticalSpeedThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1] 0x715d12cb80
	float FallingDownAlphaThreshold;//[Offset: 0x370, Size: 0x4] 0x715d12cc00
	float FallingDownVerticalSpeedThreshold;//[Offset: 0x374, Size: 0x4] 0x715d12cc80
	bool bIsFallingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1] 0x715d12cd00
	AnimSequence* PreLandAnimSequence;//[Offset: 0x380, Size: 0x8] 0x715d12cd80
	float PreLandPosition;//[Offset: 0x388, Size: 0x4] 0x715d12ce00
	bool IsPreLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1] 0x715d12ce80
	AnimSequence* LandAdditiveAnimSequence;//[Offset: 0x390, Size: 0x8] 0x715d12cf00
	float LandAdditiveAnimPosition;//[Offset: 0x398, Size: 0x4] 0x715d12cf80
	float LandAdditiveAnimWeight;//[Offset: 0x39c, Size: 0x4] 0x715d12d000
	CurveFloat* LandBlendAlphaCurve;//[Offset: 0x3a0, Size: 0x8] 0x715d12d080
	float LandBlendAlpha;//[Offset: 0x3a8, Size: 0x4] 0x715d12d100
	HitReactAnimState HitReactFront;//[Offset: 0x3b0, Size: 0x10] 0x715d12d180
	HitReactAnimState HitReactRight;//[Offset: 0x3c0, Size: 0x10] 0x715d12d200
	HitReactAnimState HitReactBack;//[Offset: 0x3d0, Size: 0x10] 0x715d12d280
	HitReactAnimState HitReactLeft;//[Offset: 0x3e0, Size: 0x10] 0x715d12d300
	float HitReactAnimWeight;//[Offset: 0x3f0, Size: 0x4] 0x715d12d380
	float HitReactOverallIntensity;//[Offset: 0x3f4, Size: 0x4] 0x715d12d400
	float HitReactInterruptMinTime;//[Offset: 0x3f8, Size: 0x4] 0x715d12d480
	bool MeleeTwistEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1] 0x715d12d500
	FName MeleeTwistCurveName;//[Offset: 0x400, Size: 0x8] 0x715d12d580
	float MeleeTwistYaw;//[Offset: 0x408, Size: 0x4] 0x715d12d600
	FName TurnRemainingCurveName;//[Offset: 0x40c, Size: 0x8] 0x715d12d680
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1] 0x715d12b600
	bool IsTurnRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1] 0x715d12b680
	TurnAnimState TurnInPlace;//[Offset: 0x418, Size: 0x20] 0x715d12b700
	TurnAnimState TurnInPlaceRecovery;//[Offset: 0x438, Size: 0x20] 0x715d12b780
	float RootRotationYaw;//[Offset: 0x458, Size: 0x4] 0x715d12b800
	PerWeaponTurnAnim[] PerWeaponTurnAnims;//[Offset: 0x460, Size: 0x10] 0x715d0b5420
	float IdleAnimationTriggerTime;//[Offset: 0x470, Size: 0x4] 0x715d12b900
	float IdleAnimationTriggerTimeVariation;//[Offset: 0x474, Size: 0x4] 0x715d12b980
	IdleAnimation[] IdleAnimations;//[Offset: 0x478, Size: 0x10] 0x715d0b54c0
	float ElapsedIdleTime;//[Offset: 0x488, Size: 0x4] 0x715d12ba80
	GameplayTagContainer IdleVariantBlockingTags;//[Offset: 0x490, Size: 0x20] 0x715d12bb00
	RunVariations[] PerWeaponRunVariations;//[Offset: 0x4c0, Size: 0x10] 0x715d0b5560
	float RunVariationBlendBlendTime;//[Offset: 0x4d0, Size: 0x4] 0x715d12bc00
	float RunVariationBlendAlpha;//[Offset: 0x4d4, Size: 0x4] 0x715d12bc80
	BlendSpaceBase* ActiveRunVariationA;//[Offset: 0x4d8, Size: 0x8] 0x715d12bd00
	BlendSpaceBase* ActiveRunVariationB;//[Offset: 0x4e0, Size: 0x8] 0x715d12bd80
	Transform ZiplineEffectorTransform;//[Offset: 0x4f0, Size: 0x30] 0x715d12be00
	Transform ZiplineEffectorOffset;//[Offset: 0x520, Size: 0x30] 0x715d12be80
	FName DeathForceMorphTargetName;//[Offset: 0x550, Size: 0x8] 0x715d12bf00
	GameplayTag[] EquipmentTags;//[Offset: 0x558, Size: 0x10] 0x715d0b5600
	int CurrentEquipmentIndex;//[Offset: 0x568, Size: 0x4] 0x715d12c000
	FName UpperBodySlotName;//[Offset: 0x56c, Size: 0x8] 0x715d12c080
	float UpperBodySlotLocalWeight;//[Offset: 0x574, Size: 0x4] 0x715d12c100
	float UpperBodyArmedWeight;//[Offset: 0x578, Size: 0x4] 0x715d12c180
	BlendSpaceBase* ActiveRunVariation;//[Offset: 0x580, Size: 0x8] 0x715d12c200
	bool bIdleAnimationActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1] 0x715d12c280
	AnimSequence* CurrentIdleAnimation;//[Offset: 0x5a8, Size: 0x8] 0x715d12c300
	void SetZiplineEffectorTransform(out const Transform Transform);// 0x3f2dc1c 0x715d130320
	void ResetAimYawOffsets();// 0x3f2dcf8 0x715d130400
	void OnMovementModeChanged(Character* InCharacter, byte PrevMovementMode, byte PreviousCustomMode);// 0x3f2dae8 0x715d1304e0
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterupted);// 0x3f2d9f8 0x715d1305c0

--------------------------------
Class: HitReactAnimState // 715da93e80
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8] 0x715da89980
	float AnimPosition;//[Offset: 0x8, Size: 0x4] 0x715da89a00
	float BlendWeight;//[Offset: 0xc, Size: 0x4] 0x715da89a80

--------------------------------
Class: TurnAnimState // 715da93f40
	AnimSequenceBase* ArmedAnim;//[Offset: 0x0, Size: 0x8] 0x715da89e80
	float ArmedAnimPosition;//[Offset: 0x8, Size: 0x4] 0x715da89f00
	AnimSequenceBase* UnarmedAnim;//[Offset: 0x10, Size: 0x8] 0x715da89f80
	float UnarmedAnimPosition;//[Offset: 0x18, Size: 0x4] 0x715da8a000

--------------------------------
Class: PerWeaponTurnAnim // 715da94000
	float Turn90Threshold;//[Offset: 0x0, Size: 0x4] 0x715da89b00
	float Turn90Duration;//[Offset: 0x4, Size: 0x4] 0x715da89b80
	TurnAnimState Turn90Left;//[Offset: 0x8, Size: 0x20] 0x715da89c00
	TurnAnimState Turn90Right;//[Offset: 0x28, Size: 0x20] 0x715da89c80
	float Turn180Threshold;//[Offset: 0x48, Size: 0x4] 0x715da89d00
	float Turn180Duration;//[Offset: 0x4c, Size: 0x4] 0x715da89d80
	TurnAnimState Turn180Left;//[Offset: 0x50, Size: 0x20] 0x715da89e00
	TurnAnimState Turn180Right;//[Offset: 0x70, Size: 0x20] 0x715da8a080
	float NeutralInterpSpeed;//[Offset: 0x90, Size: 0x4] 0x715da8a100
	float TurnLagArmed;//[Offset: 0x94, Size: 0x4] 0x715da8a180
	float TurnLagUnarmed;//[Offset: 0x98, Size: 0x4] 0x715da8a200

--------------------------------
Class: IdleAnimation // 715da940c0
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8] 0x715da8a280
	int RelativeProbability;//[Offset: 0x8, Size: 0x4] 0x715da8a300
	bool ExcludeFromConsecutivePickCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x715da8a380

--------------------------------
Class: RunVariations // 715da94240
	RunVariation[] WeaponRunVariations;//[Offset: 0x0, Size: 0x10] 0x715d89b1e0

--------------------------------
Class: RunVariation // 715da94180
	BlendSpaceBase* BlendSpace;//[Offset: 0x0, Size: 0x8] 0x715da8a400
	float Timeout;//[Offset: 0x8, Size: 0x4] 0x715da8a480

--------------------------------
Class: SignificanceActorState // 715ce7c280
	byte QuantizedSignificance;//[Offset: 0x18, Size: 0x1] 0x715cea7c00
	float ViewDistance;//[Offset: 0x1c, Size: 0x4] 0x715cea7c80
	float BaseScreenSize;//[Offset: 0x20, Size: 0x4] 0x715cea7d00
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x715cea7d80
	bool bOverlapsFrustum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x715cea7e00
	Vector ScreenCoords;//[Offset: 0x28, Size: 0xc] 0x715cea7e80
	int WantsSignificanceUpdateCounter;//[Offset: 0x34, Size: 0x4] 0x715cea7f00

--------------------------------
Class: CharacterAtomicReplicatedMovement // 715da93dc0
	RepMovement ReplicatedMovement;//[Offset: 0x0, Size: 0x34] 0x715da8ab00
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x34, Size: 0x4] 0x715da8ab80
	RepRootMotionMontage RepRootMotion;//[Offset: 0x38, Size: 0x98] 0x715da8b580
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0xd0, Size: 0x30] 0x715da89880
	bool bReplicatedJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x715da89900

--------------------------------
Class: AbilityTask_MutualCollisionInterface.Interface.Object // 71a48f4700

--------------------------------
Class: AbilityTask_PickUpAndCarryCharacter.AbilityTask.GameplayTask.Object // 71a48f4480
	delegate OnGrabbed;//[Offset: 0x80, Size: 0x10] 0x715d126900
	delegate OnSecondaryImpact;//[Offset: 0x90, Size: 0x10] 0x715d126980
	delegate OnReleasedEnd;//[Offset: 0xa0, Size: 0x10] 0x715d126a00
	delegate OnNoGrabEnd;//[Offset: 0xb0, Size: 0x10] 0x715d126a80
	delegate OnCollideWithOtherGrabbingCharacter;//[Offset: 0xc0, Size: 0x10] 0x715d126b00
	CharacterMovementComponent* AvatarMovementComponent;//[Offset: 0x108, Size: 0x8] 0x715d126b80
	SkeletalMeshComponent* AvatarSkeletalMeshComponent;//[Offset: 0x110, Size: 0x8] 0x715d126c00
	CapsuleComponent* AvatarCapsuleComponent;//[Offset: 0x118, Size: 0x8] 0x715d126c80
	AbilitySystemComponent* AvatarAbilityComponent;//[Offset: 0x120, Size: 0x8] 0x715d126d00
	CapsuleComponent* GrabbedCharacterCapsuleComponent;//[Offset: 0x150, Size: 0x8] 0x715d126d80
	void OnClientSignalTermination();// 0x3f26a44 0x715d1312e0
	void OnChildCharacterDetached(Character* Child);// 0x3f26afc 0x715d1313c0
	void OnChildCharacterAttached(Character* Child);// 0x3f26ba0 0x715d1314a0
	void OnBlockingImpact(out const HitResult Impact);// 0x3f26c44 0x715d131580
	void OnAuthorityHadMutualCollisionWithSamePriority();// 0x3f26a30 0x715d131660
	void OnAuthorityHadMutualCollisionWithHigherPriority();// 0x3f26a1c 0x715d131740
	void OnAttachedToParentCharacter(Character* NewParent);// 0x3f26a58 0x715d131820
	void OnActorBeginOverlap(Actor* SelfActor, Actor* OtherActor);// 0x3f26d14 0x715d131900
	static AbilityTask_PickUpAndCarryCharacter* CreatePickUpAndCarryCharacter(GameplayAbility* OwningAbility, FName TaskInstanceName, GameplayTagContainer TagsWhichStopPickup, bool bAbortOnMutualCollision, bool bAbortOnCollideWithBlockStampede, float TargetLatencySeconds, float CarryOffsetDistance, float MaximumUpwardReachForGrab, int MutualCollisionPriority, bool bDrawDebug, bool bDoesNotGrab);// 0x3f26df8 0x715d1319e0

--------------------------------
Class: AbilityTask_ReorientCamera.AbilityTask.GameplayTask.Object // 71a48f4200
	PlayerController* PlayerController;//[Offset: 0x78, Size: 0x8] 0x715d128180
	Actor* TargetActor;//[Offset: 0x80, Size: 0x8] 0x715d128200
	CurveFloat* DistanceToLerpFactorCurve;//[Offset: 0x88, Size: 0x8] 0x715d128280
	CurveFloat* TimeToLerpFactorCurve;//[Offset: 0x90, Size: 0x8] 0x715d128300
	void SetTargetActor(Actor* InTargetActor);// 0x3f27814 0x715d131120
	static AbilityTask_ReorientCamera* ReorientCamera(GameplayAbility* OwningAbility, FName TaskInstanceName, PlayerController* PlayerController, Actor* TargetActor, CurveFloat* DistanceToLerpFactorCurve, bool bUsePlayerCameraLocation, bool bKeepPitch, CurveFloat* TimeToLerpFactorCurve, float LerpDuration, bool bSuppressDuringZTargeting, bool bSuppressIfOverlappingTarget);// 0x3f278b8 0x715d131200

--------------------------------
Class: AbilityTask_SendDelayedEventToAutoProxy.AbilityTask.GameplayTask.Object // 71a48f3f80
	Actor* Target;//[Offset: 0x78, Size: 0x8] 0x715d127d80
	float TimeRemaining;//[Offset: 0x80, Size: 0x4] 0x715d127e00
	GameplayTag EventTag;//[Offset: 0x84, Size: 0x8] 0x715d127e80
	static AbilityTask_SendDelayedEventToAutoProxy* SendDelayedEventToAutoProxy(GameplayAbility* OwningAbility, Actor* Target, float Delay, GameplayTag EventTag);// 0x3f2805c 0x715d131040

--------------------------------
Class: AbilityTask_ZTargetingBreakConditionMonitor.AbilityTask.GameplayTask.Object // 71a48f3d00
	delegate OnSourceActorHasBreakingTag;//[Offset: 0x78, Size: 0x10] 0x715d127480
	delegate OnTargetActorHasBreakingTag;//[Offset: 0x88, Size: 0x10] 0x715d127500
	delegate OnLineOfSightToTargetBroken;//[Offset: 0x98, Size: 0x10] 0x715d127580
	delegate OnTargetActorOutOfRange;//[Offset: 0xa8, Size: 0x10] 0x715d127600
	delegate OnError;//[Offset: 0xb8, Size: 0x10] 0x715d127680
	static AbilityTask_ZTargetingBreakConditionMonitor* WatchForZTargetingBreakConditions(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* SourceActor, Actor* TargetActor, GameplayTagContainer BreakingTagsOnSourceActor, GameplayTagContainer BreakingTagsOnTargetActor, float MaximumTargetingDistance, float TimeOutOfSightBeforeBreaking);// 0x3f288a4 0x715d130da0
	void OnGameplayTagUpdateForTargetActor(const GameplayTag Tag, int NewCount);// 0x3f286c4 0x715d130e80
	void OnGameplayTagUpdateForSourceActor(const GameplayTag Tag, int NewCount);// 0x3f287b4 0x715d130f60

--------------------------------
Class: AbilityTask_ZTargetingCameraControl.AbilityTask.GameplayTask.Object // 71a48f3a80
	delegate OnError;//[Offset: 0x78, Size: 0x10] 0x715d128980
	PlayerController* SourcePlayerController;//[Offset: 0x88, Size: 0x8] 0x715d128a00
	Pawn* SourcePawn;//[Offset: 0x90, Size: 0x8] 0x715d128a80
	Actor* TargetActor;//[Offset: 0x98, Size: 0x8] 0x715d128b00
	SceneComponent* TargetComponent;//[Offset: 0xa0, Size: 0x8] 0x715d128b80
	CurveFloat* DistanceToTurnSpeedCurve;//[Offset: 0xa8, Size: 0x8] 0x715d128c00
	CurveFloat* VerticalDistanceToZClampCurve;//[Offset: 0xb0, Size: 0x8] 0x715d128c80
	CurveFloat* DistanceToHorizontalTargetOffsetCurve;//[Offset: 0xb8, Size: 0x8] 0x715d128d00
	static AbilityTask_ZTargetingCameraControl* EnableZTargetingCameraControlOnTargetComponent(GameplayAbility* OwningAbility, FName TaskInstanceName, PlayerController* PlayerController, SceneComponent* TargetComponent, CurveFloat* DistanceToTurnSpeedCurve, CurveFloat* VerticalDistanceToZClampCurve, CurveFloat* DistanceToHorizontalTargetOffsetCurve);// 0x3f29054 0x715d130be0
	static AbilityTask_ZTargetingCameraControl* EnableZTargetingCameraControl(GameplayAbility* OwningAbility, FName TaskInstanceName, PlayerController* PlayerController, Actor* TargetActor, CurveFloat* DistanceToTurnSpeedCurve, CurveFloat* VerticalDistanceToZClampCurve, CurveFloat* DistanceToHorizontalTargetOffsetCurve);// 0x3f29284 0x715d130cc0

--------------------------------
Class: AimAssistTargetComponent.SceneComponent.ActorComponent.Object // 71a48f3580

--------------------------------
Class: AimModeSensitivityModMagnitudeCalculation.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object // 71a48f2e00

--------------------------------
Class: AnimNotify_GameplayEvent.AnimNotify.Object // 71a48f2b80
	GameplayTag EventTag;//[Offset: 0x38, Size: 0x8] 0x715d12b180
	GameplayEventData Payload;//[Offset: 0x40, Size: 0xb0] 0x715d12b200

--------------------------------
Class: AnimNotify_MagnetBranch.AnimNotify.Object // 71a48f2680

--------------------------------
Class: AnimNotify_MeleeBranch.AnimNotify.Object // 71a48f2400
	FName AttackSectionName;//[Offset: 0x38, Size: 0x8] 0x715d12b080
	FName RecoverySectionName;//[Offset: 0x40, Size: 0x8] 0x715d12b100

--------------------------------
Class: AnimNotifyState_ComboJump.AnimNotifyState.Object // 71a48f2180
	GameplayTag RequiredTag;//[Offset: 0x2c, Size: 0x8] 0x715d12af80
	FName JumpTarget;//[Offset: 0x34, Size: 0x8] 0x715d12b000

--------------------------------
Class: AnimNotifyState_StopIfMoving.AnimNotifyState.Object // 71a48f1f00
	float OverrideBlendOutTime;//[Offset: 0x2c, Size: 0x4] 0x715d12af00

--------------------------------
Class: AnimNotifyState_SwapComponentAttachSocket.AnimNotifyState.Object // 71a48f1c80
	FName ComponentTag;//[Offset: 0x2c, Size: 0x8] 0x715d12ad80
	FName NewSocketName;//[Offset: 0x34, Size: 0x8] 0x715d12ae00
	FName ReturnToSocketName;//[Offset: 0x3c, Size: 0x8] 0x715d12ae80

--------------------------------
Class: AnimNotifyState_ToggleComponentVisibility.AnimNotifyState.Object // 71a48f1a00
	FName ComponentTag;//[Offset: 0x2c, Size: 0x8] 0x715d12ad00

--------------------------------
Class: AnimNotifyState_WeaponCollision.AnimNotifyState.Object // 71a48f1780
	GameplayTag EnableCollisionTag;//[Offset: 0x2c, Size: 0x8] 0x715d12ac00
	GameplayTag DisableCollisionTag;//[Offset: 0x34, Size: 0x8] 0x715d12ac80

--------------------------------
Class: BaseEquipmentAnimInstance.AnimInstance.Object // 71a48f0d80
	SkeletalMeshComponent* CharacterMesh;//[Offset: 0x268, Size: 0x8] 0x715d12f480

--------------------------------
Class: Cha002CharacterAnimInstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f0b00
	GameplayTag UltimateActiveTag;//[Offset: 0x7b8, Size: 0x8] 0x715d12f280
	bool bUltimateActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1] 0x715d12f300
	float UltimateTankRotateSpeed;//[Offset: 0x7c4, Size: 0x4] 0x715d12f380
	Rotator UltimateTankRotation;//[Offset: 0x7c8, Size: 0xc] 0x715d12f400

--------------------------------
Class: Cha003CharacterAnimInstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f0880
	float CablePitch;//[Offset: 0x7b8, Size: 0x4] 0x715d12e880
	Rotator CableRotator;//[Offset: 0x7bc, Size: 0xc] 0x715d12e900
	AnimSequence* CableCastSequence;//[Offset: 0x7c8, Size: 0x8] 0x715d12e980
	float CableCastPosition;//[Offset: 0x7d0, Size: 0x4] 0x715d12ea00
	AnimSequence* CableExtendSequence;//[Offset: 0x7d8, Size: 0x8] 0x715d12ea80
	float CableExtendPosition;//[Offset: 0x7e0, Size: 0x4] 0x715d12eb00
	AnimSequence* CableMissSequence;//[Offset: 0x7e8, Size: 0x8] 0x715d12eb80
	float CableMissPosition;//[Offset: 0x7f0, Size: 0x4] 0x715d12ec00
	enum CableState;//[Offset: 0x7f4, Size: 0x1] 0x715d0b5380
	Vector CableLocation;//[Offset: 0x7f8, Size: 0xc] 0x715d12ed00
	float CableMaxDistance;//[Offset: 0x804, Size: 0x4] 0x715d12ed80
	FName CableOriginSocket;//[Offset: 0x808, Size: 0x8] 0x715d12ee00
	float ScaleChainLengthZeroAlphaDistance;//[Offset: 0x810, Size: 0x4] 0x715d12ee80
	float ScaleChainLengthFullAlphaDistance;//[Offset: 0x814, Size: 0x4] 0x715d12ef00
	FName ScaleChainLengthAlphaCurveName;//[Offset: 0x818, Size: 0x8] 0x715d12ef80
	float ScaleChainLengthAlpha;//[Offset: 0x820, Size: 0x4] 0x715d12f000
	void UpdateCableDuringCast(out const Vector Location);// 0x3f2e71c 0x715d133880
	void LatchCable(Actor* Target);// 0x3f2e678 0x715d133960
	void EnableCable(out const Vector Location, out const Vector Direction);// 0x3f2e7cc 0x715d130080
	void DisableCable();// 0x3f2e650 0x715d130160
	void CableMissed();// 0x3f2e664 0x715d130240

--------------------------------
Class: Cha004CharacterAnimInstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f0600

--------------------------------
Class: Cha005CharacterAniminstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f0380
	bool bRocketActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b6, Size: 0x1] 0x715d12fc00
	GameplayTag RocketActiveTag;//[Offset: 0x7b8, Size: 0x8] 0x715d12fc80
	bool bUltimateActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1] 0x715d12fd00
	float UltimateYawAngle;//[Offset: 0x7c4, Size: 0x4] 0x715d12fd80
	float UltimatePitchAngle;//[Offset: 0x7c8, Size: 0x4] 0x715d12fe00
	GameplayTag UltimateActiveTag;//[Offset: 0x7cc, Size: 0x8] 0x715d12fe80
	bool bShoulderRocketLookAtEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 0x1] 0x715d12ff00
	Vector ShoulderRocketLookAtWorldLocation;//[Offset: 0x7d8, Size: 0xc] 0x715d12ff80
	void SetShoulderRocketLookAtWorldLocation(Vector WorldLocation);// 0x3f2edfc 0x715d1336c0
	void SetShoulderRocketLookAtEnabled(bool bEnabled);// 0x3f2eea0 0x715d1337a0

--------------------------------
Class: Cha006CharacterAniminstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f0100

--------------------------------
Class: Cha007CharacterAnimInstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48fa380
	float RolloutBlend;//[Offset: 0x7b8, Size: 0x4] 0x715d12fa80
	float RolloutSpeed;//[Offset: 0x7bc, Size: 0x4] 0x715d12fb00
	float GallopLocomotionMultiplier;//[Offset: 0x7c0, Size: 0x4] 0x715d12fb80

--------------------------------
Class: Cha008CharacterAnimInstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48fa100

--------------------------------
Class: Cha009CharacterAnimInstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f9e80
	bool IsInHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b6, Size: 0x1] 0x715d12f900
	bool IsHoverFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b7, Size: 0x1] 0x715d12f980
	bool IsHoverClambering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 0x1] 0x715d12fa00

--------------------------------
Class: Cha010CharacterAniminstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f9c00
	Actor* Shield;//[Offset: 0x7b8, Size: 0x8] 0x715d12f800
	void SetShield(Actor* ShieldPtr);// 0x3f2f7b8 0x715d1335e0

--------------------------------
Class: Cha012CharacterAniminstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f9980

--------------------------------
Class: Cha013CharacterAniminstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f9700
	bool bSpeedBoostActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b6, Size: 0x1] 0x715d141000
	GameplayTag SpeedBoostActiveTag;//[Offset: 0x7b8, Size: 0x8] 0x715d141080

--------------------------------
Class: Cha017CharacterAniminstance.BaseCharacterAnimInstance.AnimInstance.Object // 71a48f9480
	float PiercingYawAngle;//[Offset: 0x7b8, Size: 0x4] 0x715d140200
	GameplayTag UltimateActiveTag;//[Offset: 0x7bc, Size: 0x8] 0x715d140280
	GameplayTag MagnetActiveTag;//[Offset: 0x7c4, Size: 0x8] 0x715d140300
	GameplayTag RapidFireTag;//[Offset: 0x7cc, Size: 0x8] 0x715d140380
	bool bUltimateActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 0x1] 0x715d140400
	bool bRapidFireActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d5, Size: 0x1] 0x715d140480
	float TimeToTransitionToUltimateYaw;//[Offset: 0x7d8, Size: 0x4] 0x715d140500
	bool bMagnetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1] 0x715d140580
	float UltimateTurnAfterRotationAngle;//[Offset: 0x7e4, Size: 0x4] 0x715d140600
	bool bUltimateShuffleTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 0x1] 0x715d140680
	AnimSequence* CurrentShuffleAnimation;//[Offset: 0x7f0, Size: 0x8] 0x715d140700
	AnimSequence* ShuffleLeftAnim;//[Offset: 0x7f8, Size: 0x8] 0x715d140780
	AnimSequence* ShuffleRightAnim;//[Offset: 0x800, Size: 0x8] 0x715d140800
	float AnimationShuffleSpeed;//[Offset: 0x808, Size: 0x4] 0x715d140880
	float MaxAnimationShuffleSpeed;//[Offset: 0x80c, Size: 0x4] 0x715d140900
	float ShufflePlayRate;//[Offset: 0x810, Size: 0x4] 0x715d140980
	FName CurrentMagnetFireSequence;//[Offset: 0x814, Size: 0x8] 0x715d140a00
	FName MagnetFireRightAnimSequence;//[Offset: 0x81c, Size: 0x8] 0x715d140a80
	FName MagnetFireLeftAnimSequence;//[Offset: 0x824, Size: 0x8] 0x715d140b00
	FName MagnetFireBackRightAnimSequence;//[Offset: 0x82c, Size: 0x8] 0x715d140b80
	FName MagnetFireBackLeftAnimSequence;//[Offset: 0x834, Size: 0x8] 0x715d140c00
	FName MagnetFireFrontAnimSequence;//[Offset: 0x83c, Size: 0x8] 0x715d140c80
	FName MagnetFireOutofAnimSequence;//[Offset: 0x844, Size: 0x8] 0x715d140d00
	float MagnetFrontConeSize;//[Offset: 0x84c, Size: 0x4] 0x715d140d80
	float MagnetSideConeSize;//[Offset: 0x850, Size: 0x4] 0x715d140e00
	float MagnetRearConeSize;//[Offset: 0x854, Size: 0x4] 0x715d140e80
	Actor* MagnetAbilityTargetActor;//[Offset: 0x860, Size: 0x8] 0x715d140f00
	void SetMagnetAbilityTarget(Actor* TargetActor);// 0x3f2fd68 0x715d133500

--------------------------------
Class: DebugDrawSkeletonComponent.ActorComponent.Object // 71a48f8f80
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715d141a80
	bool bRecordToVisualLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1] 0x715d141b00
	float SphereRadius;//[Offset: 0xb4, Size: 0x4] 0x715d141b80
	Color AutoProxyColour;//[Offset: 0xb8, Size: 0x4] 0x715d141c00
	Color AuthorityColour;//[Offset: 0xbc, Size: 0x4] 0x715d141c80
	Color SimProxyColour;//[Offset: 0xc0, Size: 0x4] 0x715d141d00

--------------------------------
Class: ValidationRule.Object // 71a48f8a80
	bool Validate(out const Vector Vector, HitResult HitResult, HuntersAbilitySystemComponent* Instigator, AbilitySystemComponent* Target);// 0x3fe2874 0x715d1330a0

--------------------------------
Class: DistanceCheckValidationRule.ValidationRule.Object // 71a48f8d00
	float MaxDistance;//[Offset: 0x28, Size: 0x4] 0x715d141780

--------------------------------
Class: GameplayAbility_Emote.HuntersGameplayAbility.GameplayAbility.Object // 71a48f8800
	float MinimumAnalogValueToBroadcast;//[Offset: 0x6f0, Size: 0x4] 0x715d143200

--------------------------------
Class: GameplayAbility_Engage.HuntersGameplayAbility.GameplayAbility.Object // 71a48f8300
	float Distance;//[Offset: 0x6f0, Size: 0x4] 0x715d145280

--------------------------------
Class: GameplayAbility_FireMeleeAttack.HuntersGameplayAbility.GameplayAbility.Object // 71a48f8080
	class GameplayEffect* AttackEffectClass;//[Offset: 0x6f0, Size: 0x8] 0x715d0b6f00
	class GameplayEffect* OnHitEffectClass;//[Offset: 0x6f8, Size: 0x8] 0x715d0b6fa0
	GameplayTag AttackAnimationTag;//[Offset: 0x700, Size: 0x8] 0x715d144e00
	GameplayTag MeleeCollisionTag;//[Offset: 0x708, Size: 0x8] 0x715d144e80
	float ImpactDamage;//[Offset: 0x710, Size: 0x4] 0x715d144f00
	GameplayTag HealthModificationAmountTag;//[Offset: 0x714, Size: 0x8] 0x715d144f80
	GameplayTag DashTag;//[Offset: 0x71c, Size: 0x8] 0x715d145000
	GameplayTag OnDashCompleteTag;//[Offset: 0x724, Size: 0x8] 0x715d145080
	void OnMeleeCollision(GameplayEventData Payload);// 0x3f33af4 0x715d134a00
	void OnMeleeBlendOutSynced();// 0x3f33acc 0x715d134ae0
	void OnMeleeBlendOut();// 0x3f33ae0 0x715d134bc0
	void OnInputReleased(float ElapsedTime);// 0x3f33d78 0x715d134ca0
	void OnInputPressed(float ElapsedTime);// 0x3f33cd4 0x715d134d80

--------------------------------
Class: GameplayAbility_Shoddy.HuntersGameplayAbility.GameplayAbility.Object // 71a48f7e00
	class Actor* PickUpToSpawn;//[Offset: 0x6f0, Size: 0x8] 0x715d0b6dc0
	int MaximumParts;//[Offset: 0x6f8, Size: 0x4] 0x715d144980
	CurveTableRowHandle MaximumDurationHandle;//[Offset: 0x700, Size: 0x10] 0x715d144a00
	CurveTableRowHandle DamageThresholdHandle;//[Offset: 0x710, Size: 0x10] 0x715d144a80
	CurveTableRowHandle MinRotationHandle;//[Offset: 0x720, Size: 0x10] 0x715d144b00
	CurveTableRowHandle MaxRotationHandle;//[Offset: 0x730, Size: 0x10] 0x715d144b80
	CurveTableRowHandle MinDistanceHandle;//[Offset: 0x740, Size: 0x10] 0x715d144c00
	CurveTableRowHandle MaxDistanceHandle;//[Offset: 0x750, Size: 0x10] 0x715d144c80
	Actor*[] ActivePickups;//[Offset: 0x780, Size: 0x10] 0x715d0b6e60
	HuntersCharacterBase* OwningCharacter;//[Offset: 0x790, Size: 0x8] 0x715d144d80
	void SpawnPickup();// 0x3f341d0 0x715d134920

--------------------------------
Class: GameplayAbility_Sprint.HuntersGameplayAbility.GameplayAbility.Object // 71a48f7b80
	SprintAbilityConfiguration AbilityConfiguration;//[Offset: 0x6f0, Size: 0x80] 0x715d144880
	HuntersApplySprintModifiersAbilityTask* SprintUpdateAbilityTask;//[Offset: 0x798, Size: 0x8] 0x715d144900

--------------------------------
Class: SprintAbilityConfiguration // 715da94c00
	GameplayTagContainer InhibitSprintGameplayTags;//[Offset: 0x0, Size: 0x20] 0x715da8e880
	float SprintSpeedMultiplier;//[Offset: 0x20, Size: 0x4] 0x715da8e900
	float AccelerationOverride;//[Offset: 0x24, Size: 0x4] 0x715da8e980
	float ActivationTime;//[Offset: 0x28, Size: 0x4] 0x715da8ea00
	float ActivationAngle;//[Offset: 0x2c, Size: 0x4] 0x715da8ea80
	float ActivationSpeedRequiredPercent;//[Offset: 0x30, Size: 0x4] 0x715da8eb00
	float ContinueSprintViolationTime;//[Offset: 0x34, Size: 0x4] 0x715da8eb80
	SprintBreakParamater ContinueSprintSpeed;//[Offset: 0x38, Size: 0x8] 0x715da8ec00
	SprintBreakParamater ContinueSprintSpeedTimer;//[Offset: 0x40, Size: 0x8] 0x715da8ec80
	SprintBreakParamater ContinueSprintActivationAngle;//[Offset: 0x48, Size: 0x8] 0x715da8ee00
	bool bCancelSprintOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715da8ee80
	float AdditiveFovAdjustment;//[Offset: 0x54, Size: 0x4] 0x715da8ef00
	float FovGainRate;//[Offset: 0x58, Size: 0x4] 0x715da8ef80
	float FovRecoverRate;//[Offset: 0x5c, Size: 0x4] 0x715da8f000
	GameplayTag SprintSpeedCallerTag;//[Offset: 0x60, Size: 0x8] 0x715da8f080
	GameplayTag SprintAccelerationCallerTag;//[Offset: 0x68, Size: 0x8] 0x715da8f100
	class GameplayEffect* SprintGameplayEffect;//[Offset: 0x70, Size: 0x8] 0x715d89ce00

--------------------------------
Class: SprintBreakParamater // 715da94b40
	enum SprintBreakType;//[Offset: 0x0, Size: 0x4] 0x715d89cd60
	float ThresholdValue;//[Offset: 0x4, Size: 0x4] 0x715da8ed80

--------------------------------
Class: HuntersApplySprintModifiersAbilityTask.AbilityTask.GameplayTask.Object // 71a48fda80
	static HuntersApplySprintModifiersAbilityTask* CreateHuntersApplySprintModifiersAbilityTask(GameplayAbility* InOwningAbility, FName TaskInstanceName, out const SprintAbilityConfiguration Configuration);// 0x3f3ebe4 0x715d136fa0

--------------------------------
Class: GameplayAbilityTargetActor_ActorAimDirection.GameplayAbilityTargetActor.Actor.Object // 71a48f7900

--------------------------------
Class: GameplayAbilityTargetActor_ActorForward.GameplayAbilityTargetActor.Actor.Object // 71a48f7680

--------------------------------
Class: GameplayAbilityTargetActor_ActorTransformWithOffset.GameplayAbilityTargetActor_ActorAimDirection.GameplayAbilityTargetActor.Actor.Object // 71a48f7400
	Vector Offset;//[Offset: 0x320, Size: 0xc] 0x715d144800

--------------------------------
Class: GameplayAbilityTargetActor_AutoTargetsInCone.GameplayAbilityTargetActor.Actor.Object // 71a48f7180

--------------------------------
Class: GameplayAbilityTargetActor_ChargeableThrow.GameplayAbilityTargetActor.Actor.Object // 71a48f6f00
	float ProjectileRadius;//[Offset: 0x320, Size: 0x4] 0x715d144480
	float ProjectileMaxSimTime;//[Offset: 0x324, Size: 0x4] 0x715d144500
	Vector StartLocationOffset;//[Offset: 0x328, Size: 0xc] 0x715d144580
	class ProjectileTargetingMethod[] TargetingMethods;//[Offset: 0x338, Size: 0x10] 0x715d0b6be0
	ProjectileVisualization Visualization;//[Offset: 0x348, Size: 0x10] 0x715d144600
	byte VisualizationTraceChannel;//[Offset: 0x358, Size: 0x1] 0x715d144680
	class ProjectileTargetingVisualization* ImpactVisualizationClass;//[Offset: 0x360, Size: 0x8] 0x715d0b6c80
	float ImpactRadius;//[Offset: 0x368, Size: 0x4] 0x715d144700
	enum ProjectileTraceTargetType;//[Offset: 0x36c, Size: 0x1] 0x715d0b6d20

--------------------------------
Class: ProjectileTargetingMethod.Object // 71a4906780

--------------------------------
Class: ProjectileVisualization // 715da955c0
	StaticMesh* TrailStaticMesh;//[Offset: 0x0, Size: 0x8] 0x715da8cb00
	MaterialInstance* TrailMaterial;//[Offset: 0x8, Size: 0x8] 0x715da8cb80

--------------------------------
Class: ProjectileTargetingVisualization.Actor.Object // 71a4905d80
	StaticMeshComponent*[] TrailComponents;//[Offset: 0x220, Size: 0x10] 0x715d0bbb40
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x230, Size: 0x10] 0x715d0bbbe0
	StaticMesh* TrailStaticMesh;//[Offset: 0x240, Size: 0x8] 0x715d18b200
	MaterialInstance* TrailMaterial;//[Offset: 0x248, Size: 0x8] 0x715d18b280
	bool bUpdateVisualizationPathTimeParameter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x715d18b300
	float TrailShowPercentage;//[Offset: 0x254, Size: 0x4] 0x715d18b380
	void UpdateVisualizationPercentageLocation(bool bHasEndLocation, Vector PercentageHitLocation);// 0x3f69b60 0x715d194bc0
	void UpdateVisualizationEndLocation(bool bHasEndLocation, HitResult EndHitResult);// 0x3f69c58 0x715d194ca0
	void UpdateVisualization_Blueprint(bool bHasEndLocation, HitResult EndHitResult, ProjectileTrailVisualizationData[] Data);// 0x3f69d94 0x715d194d80
	void UpdateChargeAmount(float ChargeAmount);// 0x3f69ab4 0x715d194e60
	void Setup(Actor* SourceActor, int MaxNumberOfBounces, float ExplosionRadius);// 0x3f69f64 0x715d194f40

--------------------------------
Class: ProjectileTrailVisualizationData // 715da95500
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715da8c780
	Vector StartPosition;//[Offset: 0x4, Size: 0xc] 0x715da8c800
	HitResult EndHitResult;//[Offset: 0x10, Size: 0x88] 0x715da8c880
	Rotator StartRotation;//[Offset: 0x98, Size: 0xc] 0x715da8c900
	Vector Velocity;//[Offset: 0xa4, Size: 0xc] 0x715da8c980
	float ProjectileGravity;//[Offset: 0xb0, Size: 0x4] 0x715da8ca00
	float Time;//[Offset: 0xb4, Size: 0x4] 0x715da8ca80

--------------------------------
Class: GameplayAbilityTargetActor_ProjectileTrace.GameplayAbilityTargetActor.Actor.Object // 71a48f6780
	class ProjectileDefinition* ProjectileDefinition;//[Offset: 0x320, Size: 0x8] 0x715d0b6960
	float ProjectileMaxSimTime;//[Offset: 0x328, Size: 0x4] 0x715d146000
	class ProjectileTargetingVisualization* Visualization;//[Offset: 0x330, Size: 0x8] 0x715d0b6a00
	bool bUpdateVisualisationPathTimeParameter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x715d146080
	Vector StartLocationOffset;//[Offset: 0x33c, Size: 0xc] 0x715d146100
	byte TraceChannel;//[Offset: 0x348, Size: 0x1] 0x715d146180
	ProjectileTargetingVisualization* VisualizationInstance;//[Offset: 0x350, Size: 0x8] 0x715d146200
	enum ProjectileTraceTargetType;//[Offset: 0x358, Size: 0x1] 0x715d0b6aa0
	static void UnpackProjectileTargetData(GameplayAbility* Ability, out const GameplayAbilityTargetDataHandle TargetData, out Vector OutLocation, out Rotator OutRotation, out Vector OutVelocity);// 0x3f351c8 0x715d134840

--------------------------------
Class: GameplayAbilityTargetActor_ProjectileFixedArc.GameplayAbilityTargetActor_ProjectileTrace.GameplayAbilityTargetActor.Actor.Object // 71a48f6a00
	HuntersThrowData* ThrowData;//[Offset: 0x3b8, Size: 0x8] 0x715d145f00
	ProjectileSpawnConfig ProjectileSpawnConfig;//[Offset: 0x3c0, Size: 0x3c] 0x715d145f80

--------------------------------
Class: HuntersThrowData.DataAsset.Object // 71a4b8c680
	float LaunchSpeed;//[Offset: 0x30, Size: 0x4] 0x715cde5500
	float LaunchUpAngle;//[Offset: 0x34, Size: 0x4] 0x715cde5580
	float LaunchRightAngle;//[Offset: 0x38, Size: 0x4] 0x715cde5600
	bool bShouldAdjustPitchWithAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715cde5680
	CurveVector* LaunchCurve;//[Offset: 0x40, Size: 0x8] 0x715cde5700

--------------------------------
Class: GameplayAbilityTargetActor_ProjectileAutoTarget.GameplayAbilityTargetActor_ProjectileFixedArc.GameplayAbilityTargetActor_ProjectileTrace.GameplayAbilityTargetActor.Actor.Object // 71a48f6c80
	ProjectileSpawnConfig AutoTargetProjectileSpawnConfig;//[Offset: 0x3fc, Size: 0x3c] 0x715d145d00
	ProjectileSpawnConfig DefaultTargetProjectileSpawnConfig;//[Offset: 0x438, Size: 0x3c] 0x715d145d80
	float MaxAutoTargetDistance;//[Offset: 0x474, Size: 0x4] 0x715d145e00
	float AutoTargetSpeed;//[Offset: 0x478, Size: 0x4] 0x715d145e80

--------------------------------
Class: GameplayAbilityTargetActor_TargetFromScorerOrForward.GameplayAbilityTargetActor.Actor.Object // 71a48f6500

--------------------------------
Class: HitPointBarManager.WorldSubsystem.Subsystem.Object // 71a48f6280
	UIConfiguration* UIConfiguration;//[Offset: 0x30, Size: 0x8] 0x715d145a80
	MaterialInstanceDynamic*[] CellsBarMaterialInstancesPool;//[Offset: 0xc8, Size: 0x10] 0x715d0b6820
	MaterialInstanceDynamic*[] CellsGlowMaterialInstancesPool;//[Offset: 0xd8, Size: 0x10] 0x715d0b68c0
	MaterialInstanceDynamic* LocalPlayerMaterial;//[Offset: 0xe8, Size: 0x8] 0x715d145c00
	MaterialInstanceDynamic* LocalGlowMaterial;//[Offset: 0xf0, Size: 0x8] 0x715d145c80

--------------------------------
Class: UIConfiguration.DeveloperSettings.Object // 71a4905b00
	MaterialInterface* HitPointBarRenderMaterial;//[Offset: 0x38, Size: 0x28] 0x715d18ac80
	MaterialInterface* HitPointBarGlowRenderMaterial;//[Offset: 0x60, Size: 0x28] 0x715d18ad00
	MaterialInterface* LocalPlayerHitPointBarRenderMaterial;//[Offset: 0x88, Size: 0x28] 0x715d18ad80
	MaterialInterface* LocalPlayerHitPointBarGlowRenderMaterial;//[Offset: 0xb0, Size: 0x28] 0x715d18ae00
	int HitPointBarInitialPool;//[Offset: 0xd8, Size: 0x4] 0x715d18ae80
	float DamageFalloffInitialDecayRate;//[Offset: 0xdc, Size: 0x4] 0x715d18af00
	float DamageFalloffSubsequentDecayRate;//[Offset: 0xe0, Size: 0x4] 0x715d18af80
	float DamageFalloffDelay;//[Offset: 0xe4, Size: 0x4] 0x715d18b000
	float DamageFalloffLastHitFlashSpeed;//[Offset: 0xe8, Size: 0x4] 0x715d18b080

--------------------------------
Class: HuntersAbilityTask_OnDamageReceived.AbilityTask.GameplayTask.Object // 71a48f5d80
	delegate OnDamageReceivedDelegate;//[Offset: 0x78, Size: 0x10] 0x715d145880
	static HuntersAbilityTask_OnDamageReceived* CreateOnDamageReceivedProxy(GameplayAbility* OwningAbility, FName TaskInstanceName);// 0x3f35bc0 0x715d134760

--------------------------------
Class: HuntersAbilityTask_OnHealthChanged.AbilityTask.GameplayTask.Object // 71a48f5b00
	delegate ReceiveHealthChangeData;//[Offset: 0x78, Size: 0x10] 0x715d145600
	delegate OnHealthStateChangedDelegate;//[Offset: 0x88, Size: 0x10] 0x715d145680
	static HuntersAbilityTask_OnHealthChanged* CreateOnHealthChangedProxy(GameplayAbility* OwningAbility, FName TaskInstanceName);// 0x3f360e4 0x715d134680

--------------------------------
Class: HuntersAbilityTask_SweepCapsuleFollowingSocket.AbilityTask.GameplayTask.Object // 71a48f5880
	delegate OnCharacterHit;//[Offset: 0x78, Size: 0x10] 0x715d147200
	static HuntersAbilityTask_SweepCapsuleFollowingSocket* SweepCapsuleFollowingSocket(GameplayAbility* OwningAbility, FName TaskInstanceName, FName TargetSocketName, SkeletalMeshComponent* TargetSkeleton, float CapsuleRadius, float CapsuleHalfHeight, float TaskDuration, bool DrawDebug);// 0x3f365bc 0x715d1345a0

--------------------------------
Class: HuntersAbilityTask_WaitForCombatModeChange.AbilityTask.GameplayTask.Object // 71a48f5600
	delegate OnEnteredCombatMode;//[Offset: 0x78, Size: 0x10] 0x715d146f00
	delegate OnExitedCombatMode;//[Offset: 0x88, Size: 0x10] 0x715d146f80
	static HuntersAbilityTask_WaitForCombatModeChange* WaitForCombatModeChange(GameplayAbility* OwningAbility, bool FireOnEnteredIfCombatAlreadyOn);// 0x3f36ce4 0x715d1343e0
	void OnCombatModeChanged(bool bNewValue);// 0x3f36c38 0x715d1344c0

--------------------------------
Class: HuntersAbilityTask_WaitForDamageDealt.AbilityTask.GameplayTask.Object // 71a48f5380
	delegate OnDamageDealt;//[Offset: 0x78, Size: 0x10] 0x715d146b80
	HuntersCharacterBase* DamageDealtTo;//[Offset: 0x88, Size: 0x8] 0x715d146c00
	void DamageDealt(const HuntersCharacterBase* InDamageDealtTo);// 0x3f3726c 0x715d134220
	static HuntersAbilityTask_WaitForDamageDealt* CreateHuntersAbilityTaskWaitForDamageDealt(GameplayAbility* InOwningAbility, FName TaskInstanceName, const HuntersCharacterBase* InDamageDealtTo);// 0x3f37310 0x715d134300

--------------------------------
Class: HuntersAbilityTask_WaitForGameplayEffectStackAdded.AbilityTask.GameplayTask.Object // 71a48ff600
	delegate OnStackAdded;//[Offset: 0x78, Size: 0x10] 0x715d146580
	static HuntersAbilityTask_WaitForGameplayEffectStackAdded* WaitForGameplayEffectStackAdded(GameplayAbility* OwningAbility, const GameplayEffectQuery GameplayEffectQuery);// 0x3f37c5c 0x715d133ea0
	void OnGameplayEffectStackChange(ActiveGameplayEffectHandle ActiveHandle, int NewStackCount, int PreviousStackCount);// 0x3f37878 0x715d133f80
	void OnGameplayEffectRemoved(out const GameplayEffectRemovalInfo RemovalInfo, ActiveGameplayEffectHandle ActiveHandle);// 0x3f379a8 0x715d134060
	void OnGameplayEffectAdded(AbilitySystemComponent* Target, out const GameplayEffectSpec SpecApplied, ActiveGameplayEffectHandle ActiveHandle);// 0x3f37b14 0x715d134140

--------------------------------
Class: HuntersAbilityTask_WaitForInputGreaterThanAmount.AbilityTask.GameplayTask.Object // 71a48ff380
	delegate InputAtMagnitudeAndTimeHigh;//[Offset: 0x78, Size: 0x10] 0x715d148380
	static HuntersAbilityTask_WaitForInputGreaterThanAmount* CreateHuntersAbilityTask_WaitForInputGreaterThanAmount(GameplayAbility* InOwningAbility, FName TaskInstanceName, float InputTargetMagnitudeHigh, float InputTargetDurationAtMagnitudeHigh);// 0x3f3bbb0 0x715d133dc0

--------------------------------
Class: HuntersAbilityTask_WaitForInputMagnitudeOverTime.AbilityTask.GameplayTask.Object // 71a48ff100
	delegate InputAtMagnitudeAndTimeHigh;//[Offset: 0x78, Size: 0x10] 0x715d147f00
	delegate InputAtMagnitudeAndTimeLow;//[Offset: 0x88, Size: 0x10] 0x715d147f80
	void OnInputLowEvent();// 0x3f3c10c 0x715d133b20
	void OnInputHighEvent();// 0x3f3c120 0x715d133c00
	static HuntersAbilityTask_WaitForInputMagnitudeOverTime* CreateHuntersAbilityTask_WaitForInputMagnitudeOverTime(GameplayAbility* InOwningAbility, FName TaskInstanceName, float InputTargetMagnitudeHigh, float InputTargetDurationAtMagnitudeHigh, float InputTargetMagnitudeLow, float InputTargetDurationAtMagnitudeLow);// 0x3f3c134 0x715d133ce0

--------------------------------
Class: HuntersAbilityTask_WaitForMovementBlocked.AbilityTask.GameplayTask.Object // 71a48fee80
	delegate OnBlocked;//[Offset: 0x78, Size: 0x10] 0x715d147d00
	static HuntersAbilityTask_WaitForMovementBlocked* WaitForMovementBlocked(GameplayAbility* OwningAbility);// 0x3f3c87c 0x715d137320
	void OnBlockedCallback(out const HitResult HitResult);// 0x3f3c7ac 0x715d133a40

--------------------------------
Class: HuntersAbilityTask_WaitForMovementModeChange.AbilityTask.GameplayTask.Object // 71a48fec00
	delegate OnChanged;//[Offset: 0x78, Size: 0x10] 0x715d829100
	void OnMovementModeChange(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x3f3cde4 0x715d8321c0
	void MovementModeChangedDelegate__DelegateSignature(byte NewMovementMode, enum CustomMovementMode);// 0x45c6aa0 0x715d8322a0
	static HuntersAbilityTask_WaitForMovementModeChange* CreateHuntersAbilityTaskWaitForMovementModeChange(GameplayAbility* InOwningAbility, FName TaskInstanceName);// 0x3f3cf10 0x715d832380

--------------------------------
Class: HuntersAbilityTask_WaitForSingleGameplayEffectApplied.AbilityTask.GameplayTask.Object // 71a48fe980
	delegate OnApplied;//[Offset: 0x78, Size: 0x10] 0x715d147900
	static HuntersAbilityTask_WaitForSingleGameplayEffectApplied* WaitForSingleGameplayEffectApplied(GameplayAbility* OwningAbility, const GameplayTagContainer GameplayEffectTags, bool TriggersOnce);// 0x3f3d530 0x715d137160
	void OnGameplayEffectAppliedCallback(AbilitySystemComponent* Target, out const GameplayEffectSpec SpecApplied, ActiveGameplayEffectHandle ActiveHandle);// 0x3f3d3e8 0x715d137240

--------------------------------
Class: HuntersAbilityTask_WaitForSpinUp.AbilityTask.GameplayTask.Object // 71a48fe700
	delegate OnFinished;//[Offset: 0x78, Size: 0x10] 0x715d147600
	delegate OnInterrupted;//[Offset: 0x88, Size: 0x10] 0x715d147680
	static HuntersAbilityTask_WaitForSpinUp* CreateHuntersAbilityTaskWaitForSpinUp(GameplayAbility* InOwningAbility, FName TaskInstanceName, const float InTimeToSpinUp);// 0x3f3db4c 0x715d137080

--------------------------------
Class: HuntersAnimMontageMetaData.AnimMetaData.Object // 71a48fdf80
	bool ExecutePostTraverseLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d148d00
	float PostTraversalTime;//[Offset: 0x2c, Size: 0x4] 0x715d148d80
	float OverridePostTraversalSpeed;//[Offset: 0x30, Size: 0x4] 0x715d148e00

--------------------------------
Class: HuntersCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object // 71a48fc180
	float MaxRollSpeedMultiplier;//[Offset: 0x614, Size: 0x4] 0x715d15fc80
	float MaxGallopSpeedMultiplier;//[Offset: 0x618, Size: 0x4] 0x715d15fd00
	float GallopAnimationSpeedMultiplier;//[Offset: 0x61c, Size: 0x4] 0x715d15fd80
	CurveFloat* SlopeAngleVsSpeedModifier;//[Offset: 0x620, Size: 0x8] 0x715d15fe00
	float MaxInAirSpeed;//[Offset: 0x628, Size: 0x4] 0x715d15fe80
	float MaxRolloutFlatAccelerationMultiplier;//[Offset: 0x62c, Size: 0x4] 0x715d15ff00
	float MaxPreRolloutAccelerationMultiplier;//[Offset: 0x630, Size: 0x4] 0x715d15ff80
	float TransitionToRolloutAnimTime;//[Offset: 0x634, Size: 0x4] 0x715d15e780
	float TransitionFromRolloutAnimTime;//[Offset: 0x638, Size: 0x4] 0x715d15e800
	float OnFloorBrakingDecel;//[Offset: 0x63c, Size: 0x4] 0x715d15e880
	float InAirBrakingDecel;//[Offset: 0x640, Size: 0x4] 0x715d15e900
	float NormalisedRolloutEnterInputMagnitudeThreshold;//[Offset: 0x644, Size: 0x4] 0x715d15e980
	float NormalisedRolloutExitInputMagnitudeThreshold;//[Offset: 0x648, Size: 0x4] 0x715d15ea00
	float PostRolloutWalkingDeceleration;//[Offset: 0x64c, Size: 0x4] 0x715d15ea80
	float PostRolloutWalkingDecelerationTime;//[Offset: 0x650, Size: 0x4] 0x715d15eb00
	float GallopEnterTimeThreshold;//[Offset: 0x654, Size: 0x4] 0x715d15eb80
	float RolloutEnterTimeThreshold;//[Offset: 0x658, Size: 0x4] 0x715d15ec00
	float RolloutExitTimeThreshold;//[Offset: 0x65c, Size: 0x4] 0x715d15ec80
	float RolloutAnimationSpeedMultiplier;//[Offset: 0x660, Size: 0x4] 0x715d15ed00
	bool RolloutEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 0x1] 0x715d15ed80
	float HoverExitClamberSpeed;//[Offset: 0x668, Size: 0x4] 0x715d15ee00
	float HoverFlyHeightAdjustMaxSpeed;//[Offset: 0x66c, Size: 0x4] 0x715d15ee80
	float HoverFlyTargetHeight;//[Offset: 0x670, Size: 0x4] 0x715d15ef00
	float HoverFlyTraceDist;//[Offset: 0x674, Size: 0x4] 0x715d15ef80
	float HoverFlyGravityMultiplier;//[Offset: 0x678, Size: 0x4] 0x715d15f000
	float HoverFlyTargetBrakingDistance;//[Offset: 0x67c, Size: 0x4] 0x715d15f080
	float HoverFlyTargetBrakingStopDistance;//[Offset: 0x680, Size: 0x4] 0x715d15f100
	float HoverFlyHeightAdjustDownwardAcceleration;//[Offset: 0x684, Size: 0x4] 0x715d15f180
	float HoverFlyHeightAdjustUpwardAcceleration;//[Offset: 0x688, Size: 0x4] 0x715d15f200
	float HoverFlyHeightAdjustUpwardBrakingDeceleration;//[Offset: 0x68c, Size: 0x4] 0x715d15f280
	float HoverFlyHeightAdjustDownwardBrakingDeceleration;//[Offset: 0x690, Size: 0x4] 0x715d15f300
	float HoverFlyBrakingMinSpeedNeededUpwards;//[Offset: 0x694, Size: 0x4] 0x715d15f380
	float HoverFlyBrakingMinSpeedNeededDownwards;//[Offset: 0x698, Size: 0x4] 0x715d15f400
	float HoverFlyBrakingSubstepTime;//[Offset: 0x69c, Size: 0x4] 0x715d15f480
	float HoverFlyBrakingMaxSpeedReduceFactor;//[Offset: 0x6a0, Size: 0x4] 0x715d15f500
	GameplayTagContainer RolloutDisablingTags;//[Offset: 0x6a8, Size: 0x20] 0x715d15f580
	GameplayTag RolloutCancelTag;//[Offset: 0x6c8, Size: 0x8] 0x715d15f600
	CurveFloat* AngleVsTurnRate;//[Offset: 0x6d0, Size: 0x8] 0x715d15f680
	bool bCanPerformClientAuthoritatitveMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 0x1] 0x715d15f700
	bool bClientAuthorityCleanUpResetMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9, Size: 0x1] 0x715d15f780
	byte ClientAuthorityExpectedMovementMode;//[Offset: 0x6da, Size: 0x1] 0x715d15d700
	byte ClientAuthorityCleanUpMovementMode;//[Offset: 0x6db, Size: 0x1] 0x715d15d780
	bool bResetCharacterRotationPostReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 0x1] 0x715d15d800
	bool bClientAuthorityCleanUpResetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dd, Size: 0x1] 0x715d15d880
	GameplayTag JumpPadInAirTag;//[Offset: 0x6e0, Size: 0x8] 0x715d15d900
	bool bHoverEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1] 0x715d15d980
	float NormalisedHoverEnterInputMagnitudeThreshold;//[Offset: 0x6ec, Size: 0x4] 0x715d15da00
	float HoverEnterTimeThreshold;//[Offset: 0x6f0, Size: 0x4] 0x715d15da80
	float HoverSmallInputThreshold;//[Offset: 0x6f4, Size: 0x4] 0x715d15db00
	float HoverSmallInputExitTimeThreshold;//[Offset: 0x6f8, Size: 0x4] 0x715d15db80
	float HoverNoInputExitTimeThreshold;//[Offset: 0x6fc, Size: 0x4] 0x715d15dc00
	float HoverMaxSpeedMultiplier;//[Offset: 0x700, Size: 0x4] 0x715d15dc80
	float HoverMaxAccelerationMultiplier;//[Offset: 0x704, Size: 0x4] 0x715d15dd00
	float HoverGroundFrictionMultiplier;//[Offset: 0x708, Size: 0x4] 0x715d15dd80
	float HoverFallingGravityMultiplier;//[Offset: 0x70c, Size: 0x4] 0x715d15de00
	GameplayTagContainer HoverBlockingTags;//[Offset: 0x710, Size: 0x20] 0x715d15de80
	GameplayTagContainer HoverCancellingTags;//[Offset: 0x730, Size: 0x20] 0x715d15df00
	bool bHoverBlockedByCombatMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1] 0x715d15df80
	bool bHoverCancelledByCombatMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 0x1] 0x715d15e000
	GameplayTag MovementDisablingTag;//[Offset: 0x754, Size: 0x8] 0x715d15e080
	GameplayTag KnockbackTag;//[Offset: 0x75c, Size: 0x8] 0x715d15e100
	float MinKnockbackDuration;//[Offset: 0x764, Size: 0x4] 0x715d15e180
	GameplayTagContainer ZeroRequestPathMoveTags;//[Offset: 0x768, Size: 0x20] 0x715d15e200
	bool bUpdatesFloorWhenNotInFullSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 0x1] 0x715d15e280
	bool bClientCanEverCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 0x1] 0x715d15e300
	delegate OnClientAuthoritativeMovementChanged;//[Offset: 0x790, Size: 0x10] 0x715d15e380
	delegate OnPreServerMove;//[Offset: 0x7a0, Size: 0x10] 0x715d15e400
	delegate OnAutoProxyPrePerformMovement;//[Offset: 0x7b0, Size: 0x10] 0x715d15e480
	MovementValidation* MovementValidation;//[Offset: 0x7c0, Size: 0x8] 0x715d15e500
	bool HACKIgnoreServerCorrectionsAndRouteToAcks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 0x1] 0x715d15e580
	enum SpinballRolloutSubstate;//[Offset: 0x7fc, Size: 0x1] 0x715d0b9840
	bool bIsGalloping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 0x1] 0x715d15e680
	bool bIsPostRolloutDeceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80d, Size: 0x1] 0x715d15e700
	bool bAuthoritySimulationTimedOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 0x1] 0x715d15c680
	ServerMoveAbilityDataSet ServerMoveAbilityDataSet;//[Offset: 0x8e0, Size: 0x70] 0x715d15c700
	HuntersMovementAttributeSet* MovementAttributeSet;//[Offset: 0x960, Size: 0x8] 0x715d15c780
	ServerMoveCustomData[] StoredCustomData;//[Offset: 0x968, Size: 0x10] 0x715d0b98e0
	class Object[] ClamberBlockActorTypes;//[Offset: 0xa88, Size: 0x10] 0x715d0b9a20
	float ClamberMaxWallSlant;//[Offset: 0xa98, Size: 0x4] 0x715d15c880
	float ClamberMaxActivateAngle;//[Offset: 0xa9c, Size: 0x4] 0x715d15c900
	float ClamberMaxHeight;//[Offset: 0xaa0, Size: 0x4] 0x715d15c980
	bool bOnlyClamberWhilstJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa4, Size: 0x1] 0x715d15ca00
	GameplayTagContainer ClamberActivationTags;//[Offset: 0xaa8, Size: 0x20] 0x715d15ca80
	bool bAllowClamberOnDynamicObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 0x1] 0x715d15cb00
	bool bTestForClamberActivationOnJumpWhenNearAWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac9, Size: 0x1] 0x715d15cb80
	CollisionProfileName ClamberSweepProfile;//[Offset: 0xacc, Size: 0x8] 0x715d15cc00
	GameplayTagContainer JumpActivationTags;//[Offset: 0xb58, Size: 0x20] 0x715d15cc80
	float MinDurationBetweenJumps;//[Offset: 0xb78, Size: 0x4] 0x715d15cd00
	bool bUseJumpLiftoffForCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7c, Size: 0x1] 0x715d15cd80
	bool bUseConsecutiveJumpCooldownCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7d, Size: 0x1] 0x715d15ce00
	CurveFloat* JumpCooldownPerConsecutiveJumps;//[Offset: 0xb80, Size: 0x8] 0x715d15ce80
	float ConsecutiveJumpCooldownResetTime;//[Offset: 0xb88, Size: 0x4] 0x715d15cf00
	float JumpTimestampResetTime;//[Offset: 0xb8c, Size: 0x4] 0x715d15cf80
	GameplayTagContainer ForceMaxFatigueTags;//[Offset: 0xb90, Size: 0x20] 0x715d15d000
	CurveFloat* JumpLateralFatigueModifierCurve;//[Offset: 0xbb0, Size: 0x8] 0x715d15d080
	CurveFloat* JumpVerticalFatigueModifierCurve;//[Offset: 0xbb8, Size: 0x8] 0x715d15d100
	bool TryForceRolloutVariables();// 0x3f4d140 0x715d161200
	void ResetAutoProxySmoothing();// 0x3f4d044 0x715d1612e0
	void OnRep_AuthoritySimulationTimedOut(bool bOldValue);// 0x3f4cf98 0x715d1613c0
	void OnMatchStarted();// 0x3f4d080 0x715d1614a0
	void OnMatchFinished();// 0x3f4d06c 0x715d161580
	bool InSpinballRolloutMovementMode();// 0x3f4d1e8 0x715d161660
	bool InHoverFlyingMovementMode();// 0x3f4d178 0x715d161740
	bool InHoverClamberMovementMode();// 0x3f4d1b0 0x715d161820
	void EnterHoverFlyingMovementMode();// 0x3f4d058 0x715d161900
	void EnableDelayedPendingLaunch(bool bDelay);// 0x3f4d094 0x715d1619e0
	void CheatDoClamber();// 0x3f4d220 0x715d161ac0

--------------------------------
Class: MovementValidation.Object // 71a4907400
	Pawn* OwnerPawn;//[Offset: 0x28, Size: 0x8] 0x715d188780
	void ValidationFailed(const FString Metric, const FString Genus, const FString HumanReadableReason, const bool bCounter);// 0x3f689b8 0x715d195020

--------------------------------
Class: HuntersMovementAttributeSet.HuntersAttributeSet.AttributeSet.Object // 71a4966280
	GameplayAttributeData MovementSpeed;//[Offset: 0x30, Size: 0x28] 0x715d223f80
	GameplayAttributeData CombatSpeed;//[Offset: 0x58, Size: 0x28] 0x715d224000
	GameplayAttributeData Acceleration;//[Offset: 0x80, Size: 0x28] 0x715d224080
	GameplayAttributeData BrakingDecelerationWalking;//[Offset: 0xa8, Size: 0x28] 0x715d224100
	GameplayAttributeData BrakingFrictionFactor;//[Offset: 0xd0, Size: 0x28] 0x715d224180
	GameplayAttributeData GroundFriction;//[Offset: 0xf8, Size: 0x28] 0x715d224200
	GameplayAttributeData AirControl;//[Offset: 0x120, Size: 0x28] 0x715d222180
	GameplayAttributeData GravityScale;//[Offset: 0x148, Size: 0x28] 0x715d222200
	GameplayAttributeData FallingLateralFriction;//[Offset: 0x170, Size: 0x28] 0x715d222280
	GameplayAttributeData BrakingDecelerationFalling;//[Offset: 0x198, Size: 0x28] 0x715d222300
	GameplayAttributeData ZiplineSpeedMultiplier;//[Offset: 0x1c0, Size: 0x28] 0x715d222380
	GameplayAttributeData MaxMovementSpeed;//[Offset: 0x1e8, Size: 0x28] 0x715d222400
	GameplayAttributeData TurnSpeedLimit;//[Offset: 0x210, Size: 0x28] 0x715d222480
	HuntersMovementAttributeHistory*[] ServerMoveAttributeHistories;//[Offset: 0x248, Size: 0x10] 0x715d1b9020
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x260, Size: 0x8] 0x715d222580
	void OnRep_ZiplineSpeedMultiplier();// 0x412f3ec 0x715d21c3a0
	void OnRep_TurnSpeedLimit();// 0x412f3d8 0x715d21c480
	void OnRep_MovementSpeed();// 0x412f4c8 0x715d21c560
	void OnRep_MaxMovementSpeed();// 0x412f4b4 0x715d21c640
	void OnRep_GroundFriction();// 0x412f450 0x715d21c720
	void OnRep_GravityScale();// 0x412f428 0x715d21c800
	void OnRep_FallingLateralFriction();// 0x412f414 0x715d21c8e0
	void OnRep_CombatSpeed();// 0x412f4a0 0x715d21c9c0
	void OnRep_BrakingFrictionFactor();// 0x412f464 0x715d2190e0
	void OnRep_BrakingDecelerationWalking();// 0x412f478 0x715d2191c0
	void OnRep_BrakingDecelerationFalling();// 0x412f400 0x715d2192a0
	void OnRep_AirControl();// 0x412f43c 0x715d219380
	void OnRep_Acceleration();// 0x412f48c 0x715d219460

--------------------------------
Class: HuntersMovementAttributeHistory.Object // 71a4966500
	CharacterMovementComponent* TargetCMC;//[Offset: 0x38, Size: 0x8] 0x715d222600

--------------------------------
Class: HuntersAbilityProjectSettings.DeveloperSettings.Object // 71a490f880
	GameplayTag AliveStateTag;//[Offset: 0x38, Size: 0x8] 0x715d1a6400
	GameplayTag CriticalHealthStateTag;//[Offset: 0x40, Size: 0x8] 0x715d1a6480
	GameplayTag DeadStateTag;//[Offset: 0x48, Size: 0x8] 0x715d1a6500
	GameplayTag StunnedStateTag;//[Offset: 0x50, Size: 0x8] 0x715d1a6580
	GameplayTag PhasingThroughPawnsStateTag;//[Offset: 0x58, Size: 0x8] 0x715d1a6600
	GameplayTag PhasingThroughDeployablesStateTag;//[Offset: 0x60, Size: 0x8] 0x715d1a6680
	GameplayTag PhasingThroughBlockingDeployablesStateTag;//[Offset: 0x68, Size: 0x8] 0x715d1a6700
	GameplayTag AimModeStateTag;//[Offset: 0x70, Size: 0x8] 0x715d1a6780
	GameplayTag CloackedStateTag;//[Offset: 0x78, Size: 0x8] 0x715d1a6800
	GameplayTag HiddenAbilityTag;//[Offset: 0x80, Size: 0x8] 0x715d1a6880
	GameplayTag CanOverrideWhenNotActiveTag;//[Offset: 0x88, Size: 0x8] 0x715d1a6900
	GameplayTag CharacterShouldHideAbilities;//[Offset: 0x90, Size: 0x8] 0x715d1a6980
	GameplayTag WoundedMarkedTargetTag;//[Offset: 0x98, Size: 0x8] 0x715d1a6a00
	GameplayTag CombatSpeedTag;//[Offset: 0xa0, Size: 0x8] 0x715d1a6a80
	GameplayTag OutOfCombatCameraLockTag;//[Offset: 0xa8, Size: 0x8] 0x715d1a6b00
	GameplayTag PassiveAbilityTag;//[Offset: 0xb0, Size: 0x8] 0x715d1a6b80
	GameplayTag ZTargetingDefaultCameraStateTag;//[Offset: 0xb8, Size: 0x8] 0x715d1a6c00
	GameplayTag ZTargetingCharacterOrientationPausedTag;//[Offset: 0xc0, Size: 0x8] 0x715d1a6c80
	GameplayTag ZiplineTraversalTag;//[Offset: 0xc8, Size: 0x8] 0x715d1a6d00
	GameplayTag CanBeShotTag;//[Offset: 0xd0, Size: 0x8] 0x715d1a6d80
	GameplayTag CanBeTargetedByAbilitiesTag;//[Offset: 0xd8, Size: 0x8] 0x715d1a6e00
	GameplayTagContainer IgnoreFriendlyTags;//[Offset: 0xe0, Size: 0x20] 0x715d1a6e80
	GameplayTag IgnoreSpreadTag;//[Offset: 0x100, Size: 0x8] 0x715d1a6f00
	GameplayTag IgnoresInteractionWithObjectivesTag;//[Offset: 0x108, Size: 0x8] 0x715d1a6f80
	class GameplayEffect* DeathGameplayEffect;//[Offset: 0x110, Size: 0x28] 0x715d0bd580
	class GameplayEffect* DeathGameplayEffectRef;//[Offset: 0x138, Size: 0x8] 0x715d0bd620

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object // 71a4afab00

--------------------------------
Class: HuntersCameraManager.PlayerCameraManager.Actor.Object // 71a48fd300
	float SpectatorViewPitchMin;//[Offset: 0x2d94, Size: 0x4] 0x715d154780
	float SpectatorViewPitchMax;//[Offset: 0x2d98, Size: 0x4] 0x715d154800
	Vector2D GetCameraOffCenterProjectionOffset();// 0x40fd678 0x715d13aea0

--------------------------------
Class: HuntersCharacterCameraManager.HuntersCameraManager.PlayerCameraManager.Actor.Object // 71a48fd580

--------------------------------
Class: HuntersCharacterNPC.HuntersCharacterBase.Character.Pawn.Actor.Object // 71a48fc400

--------------------------------
Class: HuntersCharacterMinion.HuntersCharacterNPC.HuntersCharacterBase.Character.Pawn.Actor.Object // 71a48fc680
	void OnMinionLeftCloset();// 0x3f4c98c 0x715d13dde0

--------------------------------
Class: HuntersCharactersFunctionLibrary.BlueprintFunctionLibrary.Object // 71a48fb500
	static void SetCollisionsEnabledBetween(Actor* Actor, Actor* OtherActor, bool bNewIgnore);// 0x3f4dea8 0x715d163340
	static void SetCollisionMaskForActorByTeam(Actor* Actor, GenericTeamId TeamID);// 0x3f4dfc8 0x715d163420
	static void PreloadCharacter(const Object* WorldContext, out const MetaTuningDataKey CharacterKey);// 0x3f4e39c 0x715d163500
	static void PlayLocalCameraShake(const Object* WorldContext, class CameraShake CameraShakeClass, const byte PlaySpace, const float Scale);// 0x3f4e574 0x715d1635e0
	static bool IsReplayPlaying(const Object* WorldContextObject);// 0x3f4ef2c 0x715d1636c0
	static bool IsMutualCollision(Actor* SourceActor, Actor* OtherActor);// 0x3f4dcd8 0x715d1637a0
	static bool IsLocalPlayerViewTarget(const Actor* Actor);// 0x3f4ede0 0x715d163880
	static void GetWeaponTargetingRay(const Pawn* Owner, out const Transform MuzzleLocation, out Vector OutPosition, out Rotator OutDirection);// 0x3f4f4e4 0x715d163960
	static HuntersPlayerState* GetViewTargetPlayerState(const Object* WorldContextObject);// 0x3f4ee88 0x715d160080
	static byte GetTeamAttitudeById(GenericTeamId FromId, GenericTeamId ToId);// 0x3f4efd4 0x715d160160
	static byte GetTeamAttitude(const Actor* FromActor, const Actor* ToActor);// 0x3f4f170 0x715d160240
	static FText GetSelectedCharacterNameText(HuntersPlayerState* PlayerState);// 0x3f4e198 0x715d160320
	static FString GetSelectedCharacterName(HuntersPlayerState* PlayerState);// 0x3f4e0a8 0x715d160400
	static bool GetIsTeamSetToNone(const Actor* FromActor);// 0x3f4f0c8 0x715d1604e0
	static FString GetCharacterIDString(const Object* WorldContextObject, out const class Character Character);// 0x3f4ec98 0x715d1605c0
	static MetaTuningDataKey GetCharacterID(const Object* WorldContextObject, out const class Character Character);// 0x3f4eb9c 0x715d1606a0
	static HuntersCharacterEntitlement* GetCharacterEntitlement(const Object* WorldContext, out const MetaTuningDataKey CharacterKey);// 0x3f4e2a8 0x715d160780
	static class Character GetCharacterClassFromMetaTuningDataKey(const Object* WorldContext, out const MetaTuningDataKey CharacterKey);// 0x3f4e480 0x715d160860
	static HuntersCharacterAbility* GetCharacterAbilityTwo(const Object* WorldContextObject, out const MetaTuningDataKey CharacterId, out const MetaTuningDataKey AbilityId);// 0x3f4e818 0x715d160940
	static HuntersCharacterAbility* GetCharacterAbilityThree(const Object* WorldContextObject, out const MetaTuningDataKey CharacterId, out const MetaTuningDataKey AbilityId);// 0x3f4e6d0 0x715d160a20
	static HuntersCharacterAbility* GetCharacterAbilityOne(const Object* WorldContextObject, out const MetaTuningDataKey CharacterId, out const MetaTuningDataKey AbilityId);// 0x3f4e960 0x715d160b00
	static HuntersCharacterAbility* GetCharacterAbility(const Object* WorldContextObject, out const MetaTuningDataKey AbilityId);// 0x3f4eaa8 0x715d160be0
	static void GetCameraTargetingRay(const Pawn* Owner, out Vector Position, out Rotator Direction);// 0x3f4f734 0x715d160cc0
	static Vector GetCameraRayTargetPosition(const Pawn* Owner);// 0x3f4f68c 0x715d160da0
	static void DrawCircle(HUD* HUD, out const Vector2D Centre, const float RadiusDegrees, out const LinearColor Color, const int Thickness);// 0x3f4f328 0x715d160e80
	static void DrawAimAssistInfo(HUD* HUD, AimAssistComponent* AimAssistComponent);// 0x3f4f254 0x715d160f60
	static void AuthorityStartMutualCollision(Actor* SourceActor, Actor* OtherActor);// 0x3f4dc04 0x715d161040
	static bool AnyJumpPadCanValidateJumpPadGEActivation(Actor* Actor, class Actor JumpPadClass);// 0x3f4ddc0 0x715d161120

--------------------------------
Class: HuntersCharacterEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b34e80
	HuntersCharacterOwnedEntitlement CharacterOwnedEntitlements;//[Offset: 0x128, Size: 0x60] 0x715cd2f580
	GameplayTag[] Skins;//[Offset: 0x188, Size: 0x10] 0x715cc8d940
	HuntersCharacterAbilitySet[] Abilities;//[Offset: 0x198, Size: 0x10] 0x715cc8d9e0
	GameplayTag[] Weapon_skins;//[Offset: 0x1a8, Size: 0x10] 0x715cc8da80
	GameplayTag[] Audio;//[Offset: 0x1b8, Size: 0x10] 0x715cc8db20
	GameplayTag[] IntroAnims;//[Offset: 0x1c8, Size: 0x10] 0x715cc8dbc0
	GameplayTag[] VictoryAnims;//[Offset: 0x1d8, Size: 0x10] 0x715cc8dc60
	GameplayTag HunterCurrency;//[Offset: 0x1e8, Size: 0x8] 0x715cd2d800
	GameplayTag HunterCharacterProgressionLevel;//[Offset: 0x1f0, Size: 0x8] 0x715cd2d880
	GameplayTag HunterCharacterProgressionXP;//[Offset: 0x1f8, Size: 0x8] 0x715cd2d900
	AkStateValue* HunterMusicAkState;//[Offset: 0x200, Size: 0x8] 0x715cd2d980
	enum CharacterClass;//[Offset: 0x208, Size: 0x1] 0x715cc8dd00
	FText TaglineName;//[Offset: 0x210, Size: 0x18] 0x715cd2da80
	int64 Difficulty;//[Offset: 0x228, Size: 0x8] 0x715cd2db00
	CharacterUIStats Stats;//[Offset: 0x230, Size: 0x18] 0x715cd2db80
	FText WeaponName;//[Offset: 0x248, Size: 0x18] 0x715cd2dc00
	FText WeaponDescription;//[Offset: 0x260, Size: 0x18] 0x715cd2dc80
	SlateBrush WeaponIcon;//[Offset: 0x278, Size: 0x88] 0x715cd2dd00
	enum WeaponClass;//[Offset: 0x300, Size: 0x1] 0x715cc8dda0
	HuntersAbilityName[] AbilityDisplayNames;//[Offset: 0x308, Size: 0x10] 0x715cc8de40
	FText Biography;//[Offset: 0x318, Size: 0x18] 0x715cd2de80
	SoftObjectPath CharacterDataAssetPath;//[Offset: 0x330, Size: 0x18] 0x715cd2df00
	CurveTable* HuntersAttributeSetDesignData;//[Offset: 0x348, Size: 0x8] 0x715cd2df80
	bool IsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x715cd2e000
	bool ShowOnHomeScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1] 0x715cd2e080
	bool ExcludeFromAutoSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352, Size: 0x1] 0x715cd2e100
	Texture2D* Portrait;//[Offset: 0x358, Size: 0x8] 0x715cd2e180
	Texture2D* SelectPortrait;//[Offset: 0x360, Size: 0x8] 0x715cd2e200
	Texture2D* VersusPortrait;//[Offset: 0x368, Size: 0x8] 0x715cd2e280
	Texture2D* FullBodyPortrait;//[Offset: 0x370, Size: 0x8] 0x715cd2e300
	CharacterProxyDataAsset* CharacterProxyDataAsset;//[Offset: 0x378, Size: 0x8] 0x715cd2e380
	StaticCameraFrame* DefaultCharacterCamera;//[Offset: 0x380, Size: 0x8] 0x715cd2e400
	StaticCameraFrame* DefaultEquipmentCamera;//[Offset: 0x388, Size: 0x8] 0x715cd2e480
	StaticCameraFrame* HomeScreenCamera;//[Offset: 0x390, Size: 0x8] 0x715cd2e500
	bool bEquipmentProxyIsGrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1] 0x715cd2e580
	GameplayTag[] GetWeaponSkins();// 0x6861b8c 0x715ccee780
	GameplayTag[] GetVictoryAnims();// 0x6861a00 0x715ccee860
	GameplayTag GetUltimate();// 0x6861944 0x715ccee940
	GameplayTag[] GetSkins();// 0x6861d24 0x715cceea20
	GameplayTag GetPassive();// 0x6861978 0x715cceeb00
	GameplayTag[] GetIntroAnims();// 0x6861a84 0x715cceebe0
	GameplayTag GetHuntersCurrency();// 0x68619e4 0x715cceecc0
	GameplayTag GetCharacterProgressionXP();// 0x68619ac 0x715cceeda0
	GameplayTag GetCharacterProgressionLevel();// 0x68619c8 0x715cceee80
	AkStateValue* GetCharacterMusicAkState();// 0x6861da8 0x715cceef60
	GameplayTag[] GetAudio();// 0x6861b08 0x715ccef040
	HuntersCharacterAbilitySet[] GetAbilities();// 0x6861c10 0x715ccef120

--------------------------------
Class: HuntersCharacterOwnedEntitlement // 715cec1600
	GameplayTag[] Skins;//[Offset: 0x0, Size: 0x10] 0x715ce93260
	HuntersCharacterAbilitySet[] Abilities;//[Offset: 0x10, Size: 0x10] 0x715ce933a0
	GameplayTag[] Weapon_skins;//[Offset: 0x20, Size: 0x10] 0x715ce93440
	GameplayTag[] Audio;//[Offset: 0x30, Size: 0x10] 0x715ce934e0
	GameplayTag[] IntroAnims;//[Offset: 0x40, Size: 0x10] 0x715ce93580
	GameplayTag[] VictoryAnims;//[Offset: 0x50, Size: 0x10] 0x715ce93620

--------------------------------
Class: HuntersCharacterAbilitySet // 715cec1540
	GameplayTag[] Ability_list;//[Offset: 0x0, Size: 0x10] 0x715ce93300

--------------------------------
Class: CharacterUIStats // 715cec13c0
	int Damage;//[Offset: 0x0, Size: 0x4] 0x715ceb4900
	int Toughness;//[Offset: 0x4, Size: 0x4] 0x715ceb4980
	int Support;//[Offset: 0x8, Size: 0x4] 0x715ceb4a00
	int Range;//[Offset: 0xc, Size: 0x4] 0x715ceb4a80
	int Mobility;//[Offset: 0x10, Size: 0x4] 0x715ceb4b00
	int Disruption;//[Offset: 0x14, Size: 0x4] 0x715ceb4b80

--------------------------------
Class: HuntersAbilityName // 715cec1480
	FText CultureInvariantName;//[Offset: 0x0, Size: 0x18] 0x715ceb4c00
	FText LocalizableName;//[Offset: 0x18, Size: 0x18] 0x715ceb4c80
	FText GenericDescription;//[Offset: 0x30, Size: 0x18] 0x715ceb4d00

--------------------------------
Class: CharacterProxyDataAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2e480
	class AnimInstance* AnimClass;//[Offset: 0x38, Size: 0x8] 0x715cc8c360
	class AnimInstance* EquipmentAnimBlueprint;//[Offset: 0x40, Size: 0x8] 0x715cc8c400
	GameplayTagContainer EquipmentTags;//[Offset: 0x48, Size: 0x20] 0x715cd28b00
	Vector Location;//[Offset: 0x68, Size: 0xc] 0x715cd28b80
	Rotator Rotation;//[Offset: 0x74, Size: 0xc] 0x715cd28c00
	Vector Scale3D;//[Offset: 0x80, Size: 0xc] 0x715cd28c80
	RimLightParametersDataAsset* RimLightParametersDataAsset;//[Offset: 0x90, Size: 0x8] 0x715cd28d00

--------------------------------
Class: HuntersCharacterUIDefinition.Object // 71a48fb280

--------------------------------
Class: ThrottledUpdateQueueSet.Object // 71a48fad80

--------------------------------
Class: SmoothClientPositionQueueSet.ThrottledUpdateQueueSet.Object // 71a48fb000

--------------------------------
Class: AtomicReplicatedMovementQueueSet.ThrottledUpdateQueueSet.Object // 71a48fab00

--------------------------------
Class: HuntersCloakComponent.ActorComponent.Object // 71a48fa880
	ScalableFloat TimeToCloak;//[Offset: 0xb0, Size: 0x20] 0x715d172400
	ScalableFloat TimeToUncloak;//[Offset: 0xd0, Size: 0x20] 0x715d172480
	enum DamageResponse;//[Offset: 0xf0, Size: 0x1] 0x715d0bb820
	enum AttackResponse;//[Offset: 0xf1, Size: 0x1] 0x715d0bb8c0
	enum AttackDetection;//[Offset: 0xf4, Size: 0x4] 0x715d0bb960
	ScalableFloat RevealDuration;//[Offset: 0xf8, Size: 0x20] 0x715d172680
	bool bRevealOnBump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x715d172700
	GameplayTag CloakedTag;//[Offset: 0x11c, Size: 0x8] 0x715d172780
	GameplayTag[] RevealedTags;//[Offset: 0x128, Size: 0x10] 0x715d0b90c0
	class GameplayEffect* BreakEffect;//[Offset: 0x138, Size: 0x28] 0x715d0b9160
	class GameplayEffect* RevealEffect;//[Offset: 0x160, Size: 0x28] 0x715d0b9200
	GameplayTag RevealDurationTag;//[Offset: 0x188, Size: 0x8] 0x715d172880
	bool bPredictRevealsOnBump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1] 0x715d172900
	GameplayTag AttackTag;//[Offset: 0x194, Size: 0x8] 0x715d172980
	MaterialInterface* CloakMaterial;//[Offset: 0x1a0, Size: 0x28] 0x715d172a00
	FName CloakAlphaParameter;//[Offset: 0x1c8, Size: 0x8] 0x715d172a80
	float FriendlyCloakAlpha;//[Offset: 0x1d0, Size: 0x4] 0x715d172b00
	float HostileCloakAlpha;//[Offset: 0x1d4, Size: 0x4] 0x715d172b80
	float ViewTargetCloakAlpha;//[Offset: 0x1d8, Size: 0x4] 0x715d172c00
	float RevealCloakAlpha;//[Offset: 0x1dc, Size: 0x4] 0x715d172c80
	byte TargetingImmunityStates;//[Offset: 0x1e0, Size: 0x1] 0x715d172d00
	byte ProjectileImmunityStates;//[Offset: 0x1e1, Size: 0x1] 0x715d172d80
	CloakGameplayEffectData[] CloakEffects;//[Offset: 0x1e8, Size: 0x10] 0x715d0b92a0
	float CloakPercentage;//[Offset: 0x1f8, Size: 0x4] 0x715d172e80
	CloakMesh[] CloakMeshes;//[Offset: 0x258, Size: 0x10] 0x715d0b9340
	HuntersCharacterBase* Character;//[Offset: 0x268, Size: 0x8] 0x715d172f80
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x270, Size: 0x8] 0x715d173000
	HuntersSkeletalMeshCollisionComponent* SkeletalMeshCollisionComponent;//[Offset: 0x278, Size: 0x8] 0x715d173080
	class Object[] LoadedCloakEffectClasses;//[Offset: 0x280, Size: 0x10] 0x715d0b9480
	void OnRep_CloakPct();// 0x3f52958 0x715d163260

--------------------------------
Class: CloakGameplayEffectData // 715da95ec0
	class GameplayEffect* GameplayEffect;//[Offset: 0x0, Size: 0x28] 0x715d89ad80
	<GameplayTag,ScalableFloat> SetByCallerMagnitudes;//[Offset: 0x28, Size: 0x50] 0x715da95e00
	byte ActiveStates;//[Offset: 0x78, Size: 0x1] 0x715da8bb80

--------------------------------
Class: CloakMesh // 715da95d40
	MeshComponent* MeshComponent;//[Offset: 0x0, Size: 0x8] 0x715da8b900
	MaterialInstanceDynamic* DefaultMaterialInstance;//[Offset: 0x8, Size: 0x8] 0x715da8b980
	MaterialInstanceDynamic* CloakMaterialInstance;//[Offset: 0x10, Size: 0x8] 0x715da8ba00

--------------------------------
Class: HuntersSkeletalMeshCollisionComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b27e00
	HuntersSkeletalMeshCollisionBodiesAsset* SkelMeshCollisionBodiesAsset;//[Offset: 0x440, Size: 0x8] 0x715cd25000
	float CapsuleRadiusScaler;//[Offset: 0x448, Size: 0x4] 0x715cd25080
	HuntersSkeletalMeshCollisionMovementHistoryComponent* MovementHistory;//[Offset: 0x458, Size: 0x8] 0x715cd25100
	void SetCapsuleEnabled(int Index, bool bEnabled);// 0x68068f4 0x715ccedfa0
	bool IsCapsuleEnabled(int Index);// 0x68069e0 0x715ccee080
	float InterceptDamage(FName BoneName);// 0x6806840 0x715ccee160

--------------------------------
Class: HuntersSkeletalMeshCollisionBodiesAsset.Object // 71a4b28080
	HuntersSkeletalMeshCollisionBody[] BodyList;//[Offset: 0x28, Size: 0x10] 0x715cc8aa60
	bool bRequiresCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cd23400
	Skeleton* Skeleton;//[Offset: 0x40, Size: 0x8] 0x715cd23480

--------------------------------
Class: HuntersSkeletalMeshCollisionBody // 715ce7e440
	HuntersSkeletalMeshCollisionBodyBone BoneOne;//[Offset: 0x0, Size: 0x8] 0x715ceb2b00
	HuntersSkeletalMeshCollisionBodyBone BoneTwo;//[Offset: 0x8, Size: 0x8] 0x715ceb2c00
	FString CapsuleName;//[Offset: 0x10, Size: 0x10] 0x715ceb2c80
	float CapsuleRadius;//[Offset: 0x20, Size: 0x4] 0x715ceb2d00
	float CapsuleLengthScalar;//[Offset: 0x24, Size: 0x4] 0x715ceb2d80
	float CapsuleOffsetAlongBonesAxes;//[Offset: 0x28, Size: 0x4] 0x715ceb2e00
	bool CriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x715ceb2e80
	bool BlockCriticalHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x715ceb2f00
	bool UseSingleBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1] 0x715ceb2f80
	Rotator SingleBoneRelativeCapsuleOrientation;//[Offset: 0x30, Size: 0xc] 0x715ceb3000
	Vector SingleBoneRelativeCapsuleOffset;//[Offset: 0x3c, Size: 0xc] 0x715ceb3080
	float SingleBoneCapsuleLength;//[Offset: 0x48, Size: 0x4] 0x715ceb3100
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x715ceb3180
	bool InterceptDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x715ceb1100

--------------------------------
Class: HuntersSkeletalMeshCollisionBodyBone // 715ce7e380
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x715ceb2b80

--------------------------------
Class: HuntersSkeletalMeshCollisionMovementHistoryComponent.ActorComponent.Object // 71a4b27b80

--------------------------------
Class: HuntersCommsAction_AbilityCooldown.HuntersCommsAction.Object // 71a48ffd80

--------------------------------
Class: HuntersCommsAction_GoHere.HuntersCommsAction.Object // 71a48ffb00
	class HuntersCommsWorldTargetActor* WorldTargetActorClass;//[Offset: 0x88, Size: 0x8] 0x715d0bb6e0
	HuntersCommsWorldTargetActor* WorldTargetActor;//[Offset: 0x90, Size: 0x8] 0x715d172200

--------------------------------
Class: HuntersCommsWorldTargetActor.Actor.Object // 71a4903f80

--------------------------------
Class: HuntersCommsAction_NeedHelp.HuntersCommsAction.Object // 71a48ff880
	float HealthThreshhold;//[Offset: 0x88, Size: 0x4] 0x715d172180

--------------------------------
Class: HuntersCommsAction_Target.HuntersCommsAction.Object // 71a4905100

--------------------------------
Class: HuntersCommsAction_TellUltimateCharge.HuntersCommsAction.Object // 71a4904e80

--------------------------------
Class: HuntersCommsAction_TellUltimateFullyCharged.HuntersCommsAction.Object // 71a4904c00

--------------------------------
Class: HuntersCommsAction_ThankYou.HuntersCommsAction.Object // 71a4904980

--------------------------------
Class: HuntersCommsAction_UnderAttack.HuntersCommsAction.Object // 71a4904700

--------------------------------
Class: HuntersCommsTargetComponent.ActorComponent.Object // 71a4904200
	void OnCommsActionDeactivated();// 0x45c6aa0 0x715d162e00
	void OnCommsActionActivated();// 0x45c6aa0 0x715d162ee0

--------------------------------
Class: HuntersDeflectComponent.ActorComponent.Object // 71a4903d00
	GameplayTagContainer SuppressedByOwnerTags;//[Offset: 0xb8, Size: 0x20] 0x715d829f80
	GameplayTagContainer ProjectilesToDeflectTags;//[Offset: 0xd8, Size: 0x20] 0x715d82a000
	GameplayTagContainer DestroyProjectileAbility;//[Offset: 0xf8, Size: 0x20] 0x715d82a080
	float MeleeMaxDeflectAngleHorizontal;//[Offset: 0x118, Size: 0x4] 0x715d82a100
	float MeleeMaxDeflectAngleVertical;//[Offset: 0x11c, Size: 0x4] 0x715d82a180
	float RangedMaxDeflectAngleHorizontal;//[Offset: 0x120, Size: 0x4] 0x715d82a200
	float RangedMaxDeflectAngleVertical;//[Offset: 0x124, Size: 0x4] 0x715d82a280
	bool bSuppressWhilstFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x715d82a300
	bool bCanDeflectMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1] 0x715d82a380
	bool bCanDeflectBeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 0x1] 0x715d82a400
	float MinDeflectInaccuracy;//[Offset: 0x12c, Size: 0x4] 0x715d82a480
	float MaxDeflectInaccuracy;//[Offset: 0x130, Size: 0x4] 0x715d82a500
	enum DeflectMode;//[Offset: 0x134, Size: 0x1] 0x7148cde160
	bool bRecycleProjectiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1] 0x715d828500
	bool bUseStamina;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 0x1] 0x715d828580
	float MaxStamina;//[Offset: 0x138, Size: 0x4] 0x715d828600
	float StaminaRechargeRate;//[Offset: 0x13c, Size: 0x4] 0x715d828680
	float DelayBeforeRecharge;//[Offset: 0x140, Size: 0x4] 0x715d828700
	GameplayTag DeflectAnimationTag;//[Offset: 0x144, Size: 0x8] 0x715d828780
	float DeflectAnimationMinTime;//[Offset: 0x14c, Size: 0x4] 0x715d828800
	FName[] DeflectSectionNames;//[Offset: 0x150, Size: 0x10] 0x7148cde200
	GameplayTag DeflectGameplayCueTag;//[Offset: 0x160, Size: 0x8] 0x715d828900
	float HUDTickRate;//[Offset: 0x168, Size: 0x4] 0x715d828980
	delegate OnProjectileDeflected;//[Offset: 0x170, Size: 0x10] 0x715d828a00
	delegate OnMeleeDeflected;//[Offset: 0x180, Size: 0x10] 0x715d828a80
	delegate OnBeamDeflected;//[Offset: 0x190, Size: 0x10] 0x715d828b00
	delegate OnAnyDeflected;//[Offset: 0x1a0, Size: 0x10] 0x715d828b80
	DeflectStaminaData DeflectStaminaData;//[Offset: 0x1b0, Size: 0x8] 0x715d828d00
	byte RandomSeed;//[Offset: 0x1b8, Size: 0x1] 0x715d828d80
	byte DeflectCounter;//[Offset: 0x1b9, Size: 0x1] 0x715d828e00
	bool bSuppressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ba, Size: 0x1] 0x715d828e80
	void OnRep_DeflectStaminaData();// 0x3f5529c 0x715d835560
	void OnProjectileDeflectedDelegate__DelegateSignature(const HuntersProjectile* Projectile);// 0x45c6aa0 0x715d835640
	void OnMeleeDeflectedDelegate__DelegateSignature(const HuntersMeleeEquipmentItem* MeleeEquipmentItem);// 0x45c6aa0 0x715d831d60
	void OnBeamDeflectedDelegate__DelegateSignature(float BeamEquipmentDamage);// 0x45c6aa0 0x715d831e40
	void OnAnyDeflectedDelegate__DelegateSignature(float IncomingDamage);// 0x45c6aa0 0x715d831f20

--------------------------------
Class: DeflectStaminaData // 714906d0c0
	float StaminaAfterLastDeflect;//[Offset: 0x0, Size: 0x4] 0x715d828c00
	float LastDeflectServerTime;//[Offset: 0x4, Size: 0x4] 0x715d828c80

--------------------------------
Class: HuntersMeleeEquipmentItem.HuntersEquipmentItem.Actor.Object // 71a4b92b80
	float AttackingStopDelay;//[Offset: 0x318, Size: 0x4] 0x715d93dd80
	ReplicatedMeleeAnimState ReplicatedAnimState;//[Offset: 0x31c, Size: 0xc] 0x715d93de00
	GameplayTag MeleeAnimationTag;//[Offset: 0x328, Size: 0x8] 0x715d93de80
	AnimMontage* MeleeAnimMontage;//[Offset: 0x330, Size: 0x8] 0x715d93df00
	AnimInstance* OwnerAnimInstance;//[Offset: 0x338, Size: 0x8] 0x715d93df80
	float MeleeCapsuleDistanceInFront;//[Offset: 0x340, Size: 0x4] 0x715d93e000
	AttackAreaOfEffectConfig DefaultCapsuleData;//[Offset: 0x344, Size: 0xc] 0x715d93e080
	GameplayTagContainer MeleeImmunityTags;//[Offset: 0x350, Size: 0x20] 0x715d93e100
	class GameplayEffect* DefaultWeaponAttributes;//[Offset: 0x370, Size: 0x8] 0x715d894660
	GameplayTagContainer AttackTags;//[Offset: 0x378, Size: 0x20] 0x715d93e180
	<GameplayTag,AttackAreaOfEffectConfig> CapsuleDataPerTag;//[Offset: 0x398, Size: 0x50] 0x714906ff40
	<GameplayTag,float> TagToHealthChangeAmount;//[Offset: 0x3e8, Size: 0x50] 0x714906df00
	<GameplayTag,CurveTableRowHandle> TagToHealthChangeAmountWithHandle;//[Offset: 0x438, Size: 0x50] 0x714906dfc0
	GameplayTag DamageModificationTag;//[Offset: 0x488, Size: 0x8] 0x715d93c680
	class GameplayEffect* DamageEffect;//[Offset: 0x490, Size: 0x8] 0x715d894700
	bool bTriggersHitReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1] 0x715d93c700
	bool bForceFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 0x1] 0x715d93c780
	bool bPerformsBackstabs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 0x1] 0x715d93c800
	float BackstabAngle;//[Offset: 0x49c, Size: 0x4] 0x715d93c880
	class GameplayEffect[] AdditionalEffects;//[Offset: 0x4a8, Size: 0x10] 0x715d894840
	delegate OnFinishedMeleeAttack;//[Offset: 0x4c0, Size: 0x10] 0x715d93c900
	void StopAttacking(bool bCancelAnimationImmediately);// 0x6b2fde8 0x715da18c80
	void StartAttacking();// 0x6b2fe94 0x715da18d60
	void SetAttackRate(const float Rate);// 0x6b2fcf0 0x715da18e40
	void OnRep_ReplicatedAnimState(out const ReplicatedMeleeAnimState PrevState);// 0x6b2fc30 0x715da18f20
	void OnFinishedMeleeAttackDelegate__DelegateSignature();// 0x45c6aa0 0x715da19000
	void OnActorImpactVFX(Actor* HitActor);// 0x45c6aa0 0x715da15720
	void OnActorImpact(GameplayTag Tag, Actor* HitActor);// 0x45c6aa0 0x715da15800
	bool IsAttackAnimPlaying();// 0x6b2fdb0 0x715da158e0
	float GetCurrentDamageAmount();// 0x6b2fd94 0x715da159c0
	void ApplyDamageToTargetDuringInterception(interface classNone Target);// 0x6b2fb6c 0x715da15aa0

--------------------------------
Class: ReplicatedMeleeAnimState // 714906e080
	float AnimServerTime;//[Offset: 0x0, Size: 0x4] 0x715d93ca80
	float MontagePosition;//[Offset: 0x4, Size: 0x4] 0x715d93cb00
	bool IsAttackingBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715d93cb80
	bool bInitialUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x715d93cc00

--------------------------------
Class: AttackAreaOfEffectConfig // 714906fe80
	float Radius;//[Offset: 0x0, Size: 0x4] 0x715d93e200
	float HalfHeight;//[Offset: 0x4, Size: 0x4] 0x715d93e280
	bool IgnoreTeamMates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715d93e300
	bool RequireLineOfSightCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x715d93e380
	bool bIgnoreMeleeImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x715d93e400

--------------------------------
Class: HuntersDeployableActor.Actor.Object // 71a4903a80
	SceneComponent* SceneComponent;//[Offset: 0x240, Size: 0x8] 0x715d173500
	interface classNone[] TargetableObjects;//[Offset: 0x248, Size: 0x10] 0x715d0bb000
	bool IsAttachedToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x715d173600
	float DecayTime;//[Offset: 0x25c, Size: 0x4] 0x715d173680
	bool ShouldIgnoreFriendlyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x715d173700
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x268, Size: 0x8] 0x715d173780
	GenericTeamId GenericTeamId;//[Offset: 0x270, Size: 0x1] 0x715d173800
	PlayerState* OwnerPlayerState;//[Offset: 0x298, Size: 0x8] 0x715d173880
	class GameplayEffect[] DefaultGameplayEffects;//[Offset: 0x2a8, Size: 0x10] 0x715d0bb140
	void TriggerAttachedProtectionChangedEvent(float TotalChange);// 0x3f5584c 0x715d162380
	void TeamIDReceivedEvent(GenericTeamId TeamID);// 0x45c6aa0 0x715d162460
	void SetGenericTeamId(out const GenericTeamId TeamID);// 0x3f55a4c 0x715d162540
	void OnRep_TeamID();// 0x3f556f8 0x715d162620
	void OnPlayerRemovedFromGame(HuntersPlayerState* RemovedPlayerState);// 0x3f557a8 0x715d162700
	void OnHitpointsDepleted();// 0x3f558f0 0x715d1627e0
	void OnHealthChangedCosmetic();// 0x45c6aa0 0x715d1628c0
	GenericTeamId GetGenericTeamId();// 0x3f55a10 0x715d1629a0
	void GetComponentsWhichCanCollideWithTeammates(out PrimitiveComponent*[] Colliders);// 0x3f5570c 0x715d162a80
	AbilitySystemComponent* GetAbilitySystemComponent();// 0x3f55b0c 0x715d162b60
	void CreateNewTargetableObject(ShapeComponent* ShapeComponent, out const GameplayTagContainer TargetingTags);// 0x3f55904 0x715d162c40
	void BP_OnRepOwner();// 0x45c6aa0 0x715d162d20

--------------------------------
Class: HuntersDeployablePawn.Pawn.Actor.Object // 71a4903800
	interface classNone[] TargetableObjects;//[Offset: 0x2b0, Size: 0x10] 0x715d0bad80
	float DecayTime;//[Offset: 0x2c0, Size: 0x4] 0x715d174980
	SceneComponent* SceneComponent;//[Offset: 0x2c8, Size: 0x8] 0x715d174a00
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x2d0, Size: 0x8] 0x715d174a80
	ProjectileSpawningComponent* ProjectileSpawningComponent;//[Offset: 0x2d8, Size: 0x8] 0x715d174b00
	CharacterEquipmentComponent* CharacterEquipmentComponent;//[Offset: 0x2e0, Size: 0x8] 0x715d174b80
	HuntersAimController* AimController;//[Offset: 0x2e8, Size: 0x8] 0x715d174c00
	GenericTeamId TeamID;//[Offset: 0x2f0, Size: 0x1] 0x715d174c80
	HuntersPlayerState* OwnerPlayerState;//[Offset: 0x2f8, Size: 0x8] 0x715d174d00
	HuntersAbilitySet* DefaultAbilitySet;//[Offset: 0x320, Size: 0x8] 0x715d174d80
	class GameplayEffect[] DefaultGameplayEffects;//[Offset: 0x328, Size: 0x10] 0x715d0baec0
	class GameplayEffect* EquipPrimaryWeaponByDefaultEffect;//[Offset: 0x338, Size: 0x8] 0x715d0baf60
	bool bBPOverrideViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x715d174e00
	bool ShouldIgnoreProjectileCollision();// 0x3f568bc 0x715d165020
	void SetPawnAsOwningPlayer(Pawn* Pawn);// 0x3f56664 0x715d165100
	void OnTeamIDReceived(GenericTeamId NewTeamID);// 0x45c6aa0 0x715d1651e0
	void OnRep_TeamID();// 0x3f56650 0x715d1652c0
	void OnPlayerRemovedFromGame(HuntersPlayerState* RemovedPlayerState);// 0x3f5648c 0x715d1653a0
	void OnHitpointsDepleted();// 0x3f56530 0x715d165480
	SceneComponent* GetWeaponAttachmentComponent();// 0x3f56708 0x715d165560
	ProjectileSpawningComponent* GetProjectileSpawningComponent();// 0x3f568fc 0x715d165640
	float GetMaxFiringDistance(out const GameplayTag EquipmentTag);// 0x3f56780 0x715d161d60
	GenericTeamId GetGenericTeamId();// 0x3f56744 0x715d161e40
	SceneComponent* GetEquipmentAttachmentComponent();// 0x3f56844 0x715d161f20
	CharacterEquipmentComponent* GetCharacterEquipmentComponent();// 0x3f56880 0x715d162000
	AbilitySystemComponent* GetAbilitySystemComponent();// 0x3f56938 0x715d1620e0
	void CreateNewTargetableObject(ShapeComponent* ShapeComponent, out const GameplayTagContainer TargetingTags);// 0x3f56544 0x715d1621c0
	Rotator BPGetViewRotation();// 0x3f56460 0x715d1622a0

--------------------------------
Class: HuntersDirectionalShieldComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4903580
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x4b0, Size: 0x8] 0x715d175700
	class Actor* VFXClass;//[Offset: 0x4b8, Size: 0x8] 0x715d0baba0
	Actor* VFXActor;//[Offset: 0x4c0, Size: 0x8] 0x715d175780
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1] 0x715d175800
	void OnRep_Enabled();// 0x3f5aef0 0x715d164760
	void OnDestroyed();// 0x45c6aa0 0x715d164840
	void Enable(float Duration);// 0x3f5af18 0x715d164920
	void Disable();// 0x3f5af04 0x715d164a00

--------------------------------
Class: HuntersHeatComponent.ActorComponent.Object // 71a4903080
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715d177280
	float DebugGraphWidth;//[Offset: 0xb4, Size: 0x4] 0x715d177300
	float DebugGraphHeight;//[Offset: 0xb8, Size: 0x4] 0x715d177380
	int DebugSamples;//[Offset: 0xbc, Size: 0x4] 0x715d175300
	float DebugVerticalOffset;//[Offset: 0xc0, Size: 0x4] 0x715d175380
	Heat ReplayHeat;//[Offset: 0xd4, Size: 0x10] 0x715d175400
	float GetCurrentHeat();// 0x3f5b510 0x715d1645a0
	void AddHeat(float Amount, float HeatCap, float IncreaseRate, float DecreaseRate);// 0x3f5b52c 0x715d164680

--------------------------------
Class: Heat // 715da95b00
	float CurrentHeat;//[Offset: 0x0, Size: 0x4] 0x715da8d480
	float CurrentTargetHeat;//[Offset: 0x4, Size: 0x4] 0x715da8d500
	float CurrentIncreaseRate;//[Offset: 0x8, Size: 0x4] 0x715da8d580
	float CurrentDecreaseRate;//[Offset: 0xc, Size: 0x4] 0x715da8d600

--------------------------------
Class: HuntersKillcamControlComponent.ActorComponent.Object // 71a4902b80
	float CameraRotationDamping;//[Offset: 0xb0, Size: 0x4] 0x715d176d80
	SequenceActorData[] SequenceActorMapping;//[Offset: 0x140, Size: 0x10] 0x715d0bab00
	void StartReplay();// 0x3f5c06c 0x715d164060
	void OnReplayPlaybackStarted();// 0x3f5c058 0x715d164140
	void OnReplayPlaybackCompleted();// 0x3f5c044 0x715d164220
	void OnReplayPlaybackCancelled();// 0x3f5c030 0x715d164300
	static HuntersCharacterBase* GetEliminatorPawnInReplay(PlayerController* InPlayerController);// 0x3f5c080 0x715d1643e0

--------------------------------
Class: SequenceActorData // 715da95a40
	Actor* ActorPtr;//[Offset: 0x0, Size: 0x8] 0x715da8d400

--------------------------------
Class: HuntersKillcamInterface.Interface.Object // 71a4902900
	void SetKillcamMinRequiredReplayLength(float MinRequiredReplayLength);// 0x3f5c6c4 0x715d166fa0
	void SetKillcamEnabled(bool bEnabled);// 0x3f5c898 0x715d167080
	void SetKillcamDelayAfterDeath(float DelayAfterDeath);// 0x3f5c7ac 0x715d167160
	WidgetAnimation* PlayFadeToBlackAnimation();// 0x3f5c610 0x715d167240
	WidgetAnimation* PlayFadeFromBlackAnimation();// 0x3f5c598 0x715d167320
	bool IsFadingOrBlack();// 0x3f5c558 0x715d163a40
	UserWidget* GetReplayHUD();// 0x3f5c64c 0x715d163b20
	float GetKillcamMinRequiredReplayLength();// 0x3f5c688 0x715d163c00
	bool GetKillcamEnabled();// 0x3f5c858 0x715d163ce0
	float GetKillcamDelayAfterDeath();// 0x3f5c770 0x715d163dc0
	float GetFadeToBlackAnimLengthSec();// 0x3f5c5d4 0x715d163ea0
	void CancelReplay();// 0x3f5c53c 0x715d163f80

--------------------------------
Class: BARule.Object // 71a4902180
	GameStateBase* GameState;//[Offset: 0x28, Size: 0x8] 0x715d176500
	bool IsPermanentRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715d176580
	void Tick(float DeltaTime);// 0x69f73d4 0x715d166a60
	void MatchStarted();// 0x69f73b8 0x715d166b40
	void Init(const GameStateBase* InGameState);// 0x69f749c 0x715d166c20
	void GetAllActorsWithInterface(class Interface Interface, out Actor*[] OutActors);// 0x69f71a8 0x715d166d00
	void GetAllActorsOfClass(class Actor ActorClass, out Actor*[] OutActors);// 0x69f72b0 0x715d166de0
	void FinishRule();// 0x69f7480 0x715d166ec0

--------------------------------
Class: HuntersRule.BARule.Object // 71a4902400
	void PlayerRemovedFromGame(HuntersPlayerState* PlayerState);// 0x45c6aa0 0x715d1667c0
	void PlayerAddedToGame(HuntersPlayerState* PlayerState);// 0x45c6aa0 0x715d1668a0
	HuntersGameMode* GetGameMode();// 0x6a96e84 0x715d166980

--------------------------------
Class: HuntersGameMode.HuntersGameModeBase.GameModeBase.Info.Actor.Object // 71a4b84e80
	HuntersGameModeDisplayData* GameModeDisplayData;//[Offset: 0x2c8, Size: 0x8] 0x715cdd3180
	class HuntersCoreRuleset* CoreRuleset;//[Offset: 0x2d0, Size: 0x8] 0x715cda1960
	class BARuleset* PlayerSpawnRuleset;//[Offset: 0x2d8, Size: 0x8] 0x715cda1a00
	class BARuleset* XPRuleset;//[Offset: 0x2e0, Size: 0x8] 0x715cda1aa0
	HuntersBadgeRuleSet* BadgeRuleSet;//[Offset: 0x2e8, Size: 0x8] 0x715cdd1100
	FString VariantConfigString;//[Offset: 0x2f0, Size: 0x10] 0x715cdd1180
	FString GameModeVariantConfigString;//[Offset: 0x300, Size: 0x10] 0x715cdd1200
	class HuntersSquadState* DefaultSquadStateClass;//[Offset: 0x310, Size: 0x8] 0x715cda1b40
	bool bForceEndGameWhenZeroPlayersRemain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1] 0x715cdd1280
	bool bUseCharacterSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1] 0x715cdd1300
	bool bAutoAssignToSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 0x1] 0x715cdd1380
	bool bForceNoBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 0x1] 0x715cdd1400
	bool bForceBotBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1] 0x715cdd1480
	bool bForceBotBackfillOnDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1] 0x715cdd1500
	bool HideQuitButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 0x1] 0x715cdd1580
	bool DisplayTeamNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31f, Size: 0x1] 0x715cdd1600
	bool bEnableLotusSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1] 0x715cdd1680
	bool bEnableAutoFireSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1] 0x715cdd1700
	float BestSpawnSelectionBias;//[Offset: 0x324, Size: 0x4] 0x715cdd1780
	float UpperScoreThreshold;//[Offset: 0x328, Size: 0x4] 0x715cdd1800
	bool bUsesRandomRespawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1] 0x715cdd1880
	CurveFloat* AllySpawnCurve;//[Offset: 0x330, Size: 0x8] 0x715cdd1900
	CurveFloat* EnemySpawnCurve;//[Offset: 0x338, Size: 0x8] 0x715cdd1980
	LinearColor[] SquadColors;//[Offset: 0x340, Size: 0x10] 0x715cda1be0
	HuntersGMSpecifics* GMSpecifics;//[Offset: 0x350, Size: 0x8] 0x715cdd1a80
	class AIController* BotControllerClass;//[Offset: 0x358, Size: 0x8] 0x715cda1c80
	HuntersGameModeVariantData* ModeVariant;//[Offset: 0x370, Size: 0x8] 0x715cdd1b00
	<HuntersPlayerState*,HuntersPlayerState*> InactivePlayerToReplacementBotMap;//[Offset: 0x378, Size: 0x50] 0x715cd32800
	BotNameContext BotNameContext;//[Offset: 0x3d0, Size: 0x30] 0x715cdd1c80
	FString MapName;//[Offset: 0x400, Size: 0x10] 0x715cdd1d00
	FString DialogueGameModeName;//[Offset: 0x410, Size: 0x10] 0x715cdd1d80
	HuntersCoreRuleset* CoreRulesetInstance;//[Offset: 0x518, Size: 0x8] 0x715cdd1e00
	BARuleset*[] RulesetList;//[Offset: 0x520, Size: 0x10] 0x715cda1d20
	Controller*[] GameStartPlayerSpawnQueue;//[Offset: 0x540, Size: 0x10] 0x715cda1dc0
	void OnCoreRulesEndedMatch(out const HuntersPlayerState*[] WinningPlayers, out const HuntersPlayerState*[] LosingPlayers, const int WinnerScore, const int LoserScore, const enum EndReason);// 0x6a7dad0 0x715cdc3960
	void KillBots();// 0x6a7dcb8 0x715cdc0080
	bool IsPlayerStartValid(HuntersPlayerStart* PlayerStart);// 0x6a7de44 0x715cdc0160
	bool IsPlayerStartBlocked(Pawn* PawnToFit, PlayerStart* PlayerStart, out bool OutCanTeleportToFit);// 0x6a7df10 0x715cdc0240
	void GetAllPlayerStarts();// 0x6a7defc 0x715cdc0320
	HuntersPlayerState* ForceAddBotAny();// 0x6a7de08 0x715cdc0400
	HuntersPlayerState* ForceAddBot(const FString CharacterClassOrName);// 0x6a7dcd4 0x715cdc04e0

--------------------------------
Class: HuntersGameModeDisplayData.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b33300
	GameplayTag GameModeTag;//[Offset: 0x34, Size: 0x8] 0x715cd2fc00
	FText DisplayName;//[Offset: 0x40, Size: 0x18] 0x715cd2fc80
	GameModeTeamDisplayData TeamDisplayData;//[Offset: 0x58, Size: 0x30] 0x715cd2fd00
	SlateBrush Icon;//[Offset: 0x88, Size: 0x88] 0x715cd2fd80
	SlateBrush PerspectiveIcon;//[Offset: 0x110, Size: 0x88] 0x715cd2fe00
	SlateBrush ModeSelectionButtonImage;//[Offset: 0x198, Size: 0x88] 0x715cd2fe80
	SlateBrush HeaderButtonImage;//[Offset: 0x220, Size: 0x88] 0x715cd2ff00

--------------------------------
Class: GameModeTeamDisplayData // 715cec1780
	FText TeamOneObjective;//[Offset: 0x0, Size: 0x18] 0x715ceb5180
	FText TeamTwoObjective;//[Offset: 0x18, Size: 0x18] 0x715ceb5200

--------------------------------
Class: HuntersCoreRuleset.BARuleset.Object // 71a4b6fd80
	int NumberOfSquads;//[Offset: 0xc0, Size: 0x4] 0x715d934300
	int SquadSize;//[Offset: 0xc4, Size: 0x4] 0x715d934380
	delegate OnEndMatch;//[Offset: 0xc8, Size: 0x10] 0x715d934400
	int StartLevel;//[Offset: 0xd8, Size: 0x4] 0x715d934480
	float CharacterSelectServerHealthTimeout;//[Offset: 0xdc, Size: 0x4] 0x715d934500
	float VSScreenServerHealthTimeout;//[Offset: 0xe0, Size: 0x4] 0x715d934580
	float MatchRunningServerHealthTimeout;//[Offset: 0xe4, Size: 0x4] 0x715d934600
	void OvertimeChanged(bool bIsInOvertime);// 0x6a7c7e8 0x715da10cc0
	void OnForceEndMatch(out HuntersPlayerState*[] WinningPlayers);// 0x45c6aa0 0x715da10da0
	HuntersGameMode* GetGameMode();// 0x6a7c7b4 0x715da10e80
	void FinalizeCharacterSpawnLocation(Controller* Controller, Pawn* Character);// 0x6a7c6c8 0x715da10f60
	void EndMatchDelegate__DelegateSignature(out const HuntersPlayerState*[] WinningPlayers, out const HuntersPlayerState*[] LosingPlayers, const int WinnerScore, const int LoserScore, const enum EndReason);// 0x45c6aa0 0x715da11040

--------------------------------
Class: BARuleset.Object // 71a4b67180
	delegate OnMatchStart;//[Offset: 0x28, Size: 0x10] 0x715d934b80
	BARule*[] Rules;//[Offset: 0x38, Size: 0x10] 0x715d893da0
	<FName> SublevelTags;//[Offset: 0x50, Size: 0x50] 0x715d8915a0
	BARule*[] RulesPendingAdd;//[Offset: 0xa0, Size: 0x10] 0x715d891640
	BARule*[] RulesPendingRemove;//[Offset: 0xb0, Size: 0x10] 0x715d891500
	void RemoveRule(BARule* Rule);// 0x69f8044 0x715da11120
	void OnInitialized();// 0x45c6aa0 0x715da11200
	void MatchStarted();// 0x69f8028 0x715da112e0
	void AddRule(class BARule RuleClass, out BARule* OutRuleInstance);// 0x69f81e0 0x715da113c0
	void AddMultipleSimpleRules(class BARule[] RuleClasses);// 0x69f80e8 0x715da114a0

--------------------------------
Class: HuntersBadgeRuleSet.Object // 71a4b6ab00
	class HuntersBadgeRule[] BadgeRules;//[Offset: 0x28, Size: 0x10] 0x715cda2360
	HuntersBadgeRuleSet*[] BadgeRuleSets;//[Offset: 0x38, Size: 0x10] 0x715cda2400

--------------------------------
Class: HuntersPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object // 71a4b81000
	int TeamID;//[Offset: 0x24c, Size: 0x4] 0x715cdd8080

--------------------------------
Class: HuntersGMSpecifics.ActorComponent.Object // 71a4b84480
	class ActorComponent[] ActorComponents;//[Offset: 0xb0, Size: 0x10] 0x715cda36c0
	class GameplayAbility[] GameplayAbilities;//[Offset: 0xc0, Size: 0x10] 0x715cda3800
	InputBindableHuntersGameplayAbility[] HuntersGameplayAbilities;//[Offset: 0xd0, Size: 0x10] 0x715cda38a0
	class GameplayEffect[] GameplayEffects;//[Offset: 0xe0, Size: 0x10] 0x715cda39e0

--------------------------------
Class: AIController.Controller.Actor.Object // 71a4963800
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x715d20b280
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1] 0x715d20b300
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1] 0x715d20b380
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 0x1] 0x715d20b400
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 0x1] 0x715d20b480
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 0x1] 0x715d20b500
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 0x1] 0x715d20b580
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 0x8] 0x715d209500
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 0x8] 0x715d209580
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 0x8] 0x715d209600
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 0x8] 0x715d209680
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 0x8] 0x715d209700
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 0x8] 0x715d209780
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 0x8] 0x715d1b7540
	delegate ReceiveMoveCompleted;//[Offset: 0x310, Size: 0x10] 0x715d209800
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x66e1ef4 0x715d214bc0
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x66e1dac 0x715d214ca0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x66e1960 0x715d214d80
	void SetMoveBlockDetection(bool bEnable);// 0x66e20b4 0x715d214e60
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x66e1ffc 0x715d214f40
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x45c6aa0 0x715d215020
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x66e1a3c 0x715d215100
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x66e2204 0x715d2151e0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x66e24e4 0x715d2152c0
	void K2_SetFocus(Actor* NewFocus);// 0x66e1b74 0x715d2153a0
	void K2_SetFocalPoint(Vector FP);// 0x66e1c18 0x715d215480
	void K2_ClearFocus();// 0x66e1b2c 0x715d215560
	bool HasPartialPath();// 0x66e2198 0x715d215640
	PathFollowingComponent* GetPathFollowingComponent();// 0x66e1a20 0x715d211d60
	byte GetMoveStatus();// 0x66e21d0 0x715d211e40
	Vector GetImmediateMoveDestination();// 0x66e2160 0x715d211f20
	Actor* GetFocusActor();// 0x66e1b40 0x715d212000
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x66e1cbc 0x715d2120e0
	Vector GetFocalPoint();// 0x66e1d74 0x715d2121c0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x66e1a04 0x715d2122a0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x66e1e50 0x715d212380

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object // 71a497ee80
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8] 0x715d22d900
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x8] 0x715d22d980
	void OnNavDataRegistered(NavigationData* NavData);// 0x67169ec 0x715d241580
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x6716afc 0x715d241660
	Vector GetPathDestination();// 0x6716a90 0x715d241740
	byte GetPathActionType();// 0x6716ac8 0x715d241820

--------------------------------
Class: NavigationData.Actor.Object // 71a4af4480
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 0x8] 0x715cc9f600
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 0x78] 0x715cc9f680
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x715cc9f700
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x715cc9f780
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x715cc9d700
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1] 0x715cc9d780
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1] 0x715cc9d800
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1] 0x715cc9d880
	enum RuntimeGeneration;//[Offset: 0x2a9, Size: 0x1] 0x715cc838a0
	float ObservedPathsTickInterval;//[Offset: 0x2ac, Size: 0x4] 0x715cc9d980
	uint32 DataVersion;//[Offset: 0x2b0, Size: 0x4] 0x715cc9da00
	SupportedAreaData[] SupportedAreas;//[Offset: 0x398, Size: 0x10] 0x715cc83940

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties // 715db1fa00
	FName Name;//[Offset: 0x30, Size: 0x8] 0x715ce63980
	Color Color;//[Offset: 0x38, Size: 0x4] 0x715ce63a00
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc] 0x715ce63a80
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8] 0x715daedda0
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28] 0x715daede40

--------------------------------
Class: SupportedAreaData // 715ce7bd40
	FString AreaClassName;//[Offset: 0x0, Size: 0x10] 0x715cea7800
	int AreaID;//[Offset: 0x10, Size: 0x4] 0x715cea7880
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8] 0x715ce92720

--------------------------------
Class: BlackboardData.DataAsset.Object // 71a4afc900
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8] 0x715cccde80
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10] 0x715cc87ae0
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715cccdf80

--------------------------------
Class: BlackboardEntry // 715ce7de40
	FName EntryName;//[Offset: 0x0, Size: 0x8] 0x715ceab280
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8] 0x715ceab300
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x715ceab380

--------------------------------
Class: BlackboardComponent.ActorComponent.Object // 71a4afcb80
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8] 0x715ccce000
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8] 0x715ccce080
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8] 0x715ccce100
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10] 0x715cc87b80
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x66f41e4 0x715cce0b00
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x66f43cc 0x715cce0be0
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x66f40f0 0x715cce0cc0
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x66f49e8 0x715cce0da0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x66f42d8 0x715cce0e80
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x66f470c 0x715cce0f60
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x66f4618 0x715cce1040
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x66f4800 0x715cce1120
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x66f48f4 0x715cce1200
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x66f451c 0x715cce12e0
	bool IsVectorValueSet(out const FName KeyName);// 0x66f4030 0x715cce13c0
	Vector GetValueAsVector(out const FName KeyName);// 0x66f4b9c 0x715cce14a0
	FString GetValueAsString(out const FName KeyName);// 0x66f4d18 0x715cce1580
	Rotator GetValueAsRotator(out const FName KeyName);// 0x66f4adc 0x715cce1660
	Object* GetValueAsObject(out const FName KeyName);// 0x66f51d0 0x715cce1740
	FName GetValueAsName(out const FName KeyName);// 0x66f4c5c 0x715cce1820
	int GetValueAsInt(out const FName KeyName);// 0x66f4f9c 0x715cce1900
	float GetValueAsFloat(out const FName KeyName);// 0x66f4ee0 0x715cce19e0
	byte GetValueAsEnum(out const FName KeyName);// 0x66f5058 0x715cce1ac0
	class Object GetValueAsClass(out const FName KeyName);// 0x66f5114 0x715cce1ba0
	bool GetValueAsBool(out const FName KeyName);// 0x66f4e20 0x715cce1c80
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x66f3e08 0x715cc7e780
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x66f3f1c 0x715cc7e860
	void ClearValue(out const FName KeyName);// 0x66f3d54 0x715cc7e940

--------------------------------
Class: BrainComponent.ActorComponent.Object // 71a4afd580
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8] 0x715cccbf00
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8] 0x715cccbf80
	void StopLogic(FString Reason);// 0x66f78c8 0x715cc7eda0
	void StartLogic();// 0x66f799c 0x715cc7ee80
	void RestartLogic();// 0x66f7980 0x715cc7ef60
	bool IsRunning();// 0x66f7888 0x715cc7f040
	bool IsPaused();// 0x66f7848 0x715cc7f120

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object // 71a4af8a80
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10] 0x715cc86640
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8] 0x715cc866e0
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8] 0x715ccc7980
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10] 0x715ccc7a00
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10] 0x715ccc7a80
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x180, Size: 0x10] 0x715ccc7b00
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x66e4218 0x715cc7d1a0
	void RequestStimuliListenerUpdate();// 0x66e480c 0x715cc7d280
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x66e4820 0x715cc7d360
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x66e4738 0x715cc7d440
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x66e4420 0x715cc7d520
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x66e4528 0x715cc7d600
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x66e4630 0x715cc7d6e0
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x66e4308 0x715cc7d7c0
	void ForgetAll();// 0x66e47f8 0x715cc7d8a0

--------------------------------
Class: AISenseConfig.Object // 71a4af6000
	Color DebugColor;//[Offset: 0x28, Size: 0x4] 0x715ccc9a80
	float MaxAge;//[Offset: 0x2c, Size: 0x4] 0x715ccc9b00
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x715ccc9b80

--------------------------------
Class: AISense.Object // 71a4af7680
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4] 0x715ccc9080
	enum NotifyType;//[Offset: 0x2c, Size: 0x1] 0x715cc86140
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x715ccc9180
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x715ccc9200
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8] 0x715ccc9280

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object // 71a4af8300
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10] 0x715cc861e0
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4] 0x715ccc9380
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x66e5894 0x715cc7ff20
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x66e5968 0x715cc7caa0
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x66e5768 0x715cc7cb80
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x66e54d8 0x715cc7cc60
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x66e55c0 0x715cc7cd40

--------------------------------
Class: AISubsystem.Object // 71a4af8080
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8] 0x715ccc7800

--------------------------------
Class: AISystem.AISystemBase.Object // 71a4afe700
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18] 0x715cccab80
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18] 0x715cccac00
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4] 0x715cccac80
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4] 0x715cccad00
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4] 0x715cccad80
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x715cccae00
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1] 0x715cccae80
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1] 0x715cccaf00
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1] 0x715cccaf80
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x715cccb000
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x715cccb080
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1] 0x715cccb100
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 0x1] 0x715cccb180
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8] 0x715cccb200
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8] 0x715cccb280
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8] 0x715cccb300
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10] 0x715cc85740
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8] 0x715cccb400
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8] 0x715cccb480
	void AILoggingVerbose();// 0x66ec860 0x715cc7f3c0
	void AIIgnorePlayers();// 0x66ec87c 0x715cc7f4a0

--------------------------------
Class: BehaviorTreeManager.Object // 71a4afd300
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4] 0x715cccb900
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10] 0x715cc85420
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10] 0x715cc854c0

--------------------------------
Class: BehaviorTreeTemplateInfo // 715ce7ae40
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8] 0x715cea9500
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8] 0x715cea9580

--------------------------------
Class: BehaviorTree.Object // 71a4afda80
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8] 0x715cccc180
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8] 0x715cccc200
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10] 0x715cc85600
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10] 0x715cc856a0

--------------------------------
Class: BTCompositeNode.BTNode.Object // 71a4afa600
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10] 0x715cc87860
	BTService*[] Services;//[Offset: 0x68, Size: 0x10] 0x715cc87900
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x715cccdb00

--------------------------------
Class: BTNode.Object // 71a496c900
	FString NodeName;//[Offset: 0x30, Size: 0x10] 0x715d22a300
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8] 0x715d22a380
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8] 0x715d22a400

--------------------------------
Class: BTCompositeChild // 715ce7dd80
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8] 0x715ceaaf80
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8] 0x715ceab000
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10] 0x715ce92360
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10] 0x715ce92400

--------------------------------
Class: BTTaskNode.BTNode.Object // 71a496f880
	BTService*[] Services;//[Offset: 0x58, Size: 0x10] 0x715d1ba1a0
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715d229800

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object // 71a496b500
	float Interval;//[Offset: 0x58, Size: 0x4] 0x715d229d80
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4] 0x715d229e00
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x715d229e80
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x715d229f00

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object // 71a496cb80

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a496ce00
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x715d22a200
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1] 0x715d22a280

--------------------------------
Class: BTDecoratorLogic // 715ce7dcc0
	byte Operation;//[Offset: 0x0, Size: 0x1] 0x715ceab100
	uint16 Number;//[Offset: 0x2, Size: 0x2] 0x715ceab180

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object // 71a4afd800
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 0x10] 0x715cc85560
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x268, Size: 0x8] 0x715cccbb00
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x66f2910 0x715cc7eb00
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x66f2b30 0x715cc7ebe0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x66f29fc 0x715cc7ecc0

--------------------------------
Class: EnvQueryManager.AISubsystem.Object // 71a4b05b00
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10] 0x715cc88c60
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10] 0x715cc88d00
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10] 0x715cc88da0
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4] 0x715ccf7600
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x715ccf7680
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4] 0x715ccf7700
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8] 0x715ccf7780
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x670dc88 0x715cce3f80

--------------------------------
Class: EnvQueryInstanceCache // 715ce7da80
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8] 0x715ceaa900

--------------------------------
Class: EnvQuery.DataAsset.Object // 71a4b09200
	FName QueryName;//[Offset: 0x30, Size: 0x8] 0x715ccf7300
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10] 0x715cc86fa0

--------------------------------
Class: EnvQueryOption.Object // 71a4b05880
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8] 0x715ccf9480
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10] 0x715cc88bc0

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object // 71a4970380
	FString OptionName;//[Offset: 0x30, Size: 0x10] 0x715d22a900
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8] 0x715d1b9980
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715d22a980

--------------------------------
Class: EnvQueryNode.Object // 71a4970100
	int VerNum;//[Offset: 0x28, Size: 0x4] 0x715d22aa00

--------------------------------
Class: EnvQueryItemType.Object // 71a4b06a00

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object // 71a4979200
	int TestOrder;//[Offset: 0x2c, Size: 0x4] 0x715d22b900
	byte TestPurpose;//[Offset: 0x30, Size: 0x1] 0x715d22b980
	FString TestComment;//[Offset: 0x38, Size: 0x10] 0x715d22ba00
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1] 0x715d22ba80
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1] 0x715d22bb00
	byte FilterType;//[Offset: 0x4a, Size: 0x1] 0x715d22bb80
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38] 0x715d22bc00
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38] 0x715d22bc80
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38] 0x715d22bd00
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1] 0x715d22bd80
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1] 0x715d22be00
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1] 0x715d22be80
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1] 0x715d1b9700
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38] 0x715d22bf80
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38] 0x715d22c000
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38] 0x715d22c080
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38] 0x715d22c100
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1] 0x715d22c180
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x715d22c200

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue // 715ce7b800
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715ceaa380

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue // 715da98080
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8] 0x715d89bc80

--------------------------------
Class: AIDataProviderValue // 715da98140
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8] 0x715dab5380
	FName DataField;//[Offset: 0x18, Size: 0x8] 0x715dab5400

--------------------------------
Class: AIDataProvider.Object // 71a4975b00

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue // 715da97fc0
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x715dab5300

--------------------------------
Class: EnvQueryContext.Object // 71a4972b80

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object // 71a4b06c80
	int QueryID;//[Offset: 0x30, Size: 0x4] 0x715d82b380
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8] 0x7148cdde40
	int OptionIndex;//[Offset: 0x60, Size: 0x4] 0x715d82b400
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10] 0x715d82b480
	void SetNamedParam(FName ParamName, float Value);// 0x670c540 0x715d8343e0
	Vector[] GetResultsAsLocations();// 0x670c628 0x715d8344c0
	Actor*[] GetResultsAsActors();// 0x670c6d8 0x715d8345a0
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x670c788 0x715d834680
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x670c854 0x715d834760
	float GetItemScore(int ItemIndex);// 0x670c920 0x715d834840
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x45c6aa0 0x715d834920

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object // 71a4af9980
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x715ccc5600
	delegate OnFail;//[Offset: 0x38, Size: 0x10] 0x715ccc5680
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x66e0024 0x715cc7e4e0

--------------------------------
Class: AIRequestID // 714906cf40
	uint32 RequestID;//[Offset: 0x0, Size: 0x4] 0x715d829a80

--------------------------------
Class: AIHotSpotManager.Object // 71a4af8d00

--------------------------------
Class: NavLocalGridManager.Object // 71a4b0ce00
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x6716160 0x715cce7320
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x6715814 0x715cce3a40
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x671566c 0x715cce3b20
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6715dc4 0x715cce3c00
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6715f9c 0x715cce3ce0
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6715934 0x715cce3dc0
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6715b7c 0x715cce3ea0

--------------------------------
Class: AISenseEvent.Object // 71a4aff100

--------------------------------
Class: AIStimulus // 714906ce80
	float Age;//[Offset: 0x0, Size: 0x4] 0x715d82ae00
	float ExpirationAge;//[Offset: 0x4, Size: 0x4] 0x715d82ae80
	float Strength;//[Offset: 0x8, Size: 0x4] 0x715d82af00
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc] 0x715d82af80
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc] 0x715d82b000
	FName Tag;//[Offset: 0x24, Size: 0x8] 0x715d82b080
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x715d82b100

--------------------------------
Class: ActorPerceptionBlueprintInfo // 715ce7b5c0
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x715ceaa180
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10] 0x715ce925e0
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x715ceaa280

--------------------------------
Class: GameplayResourceSet // 7149068500

--------------------------------
Class: NavigationQueryFilter.Object // 71a494fb00
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10] 0x715d1b52e0
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4] 0x715d207e80
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4] 0x715d207f00

--------------------------------
Class: NavigationFilterArea // 715ce7ba40
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8] 0x715ce92680
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4] 0x715cea8e80
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4] 0x715cea8f00
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x715cea8f80
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x715cea9000
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x715cea9080

--------------------------------
Class: NavArea.NavAreaBase.Object // 71a4906f00
	float DefaultCost;//[Offset: 0x2c, Size: 0x4] 0x715d189e80
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4] 0x715d189f00
	Color DrawColor;//[Offset: 0x34, Size: 0x4] 0x715d189f80
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4] 0x715d18a000
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x715d18a080
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x715d18a100
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x715d18a180
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x715d18a200
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x715d18a280
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x715d18a300
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x715d18a380
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x715d18a400
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x715d18a480
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1] 0x715d18a500
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1] 0x715d183200
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1] 0x715d188500
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1] 0x715d188580
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1] 0x715d188600
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1] 0x715d188680
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1] 0x715d188700

--------------------------------
Class: NavigationFilterFlags // 715ce7bb00
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715cea9100
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715cea9180
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715cea9200
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x715cea9280
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x715cea9300
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x715cea9380
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x715cea9400
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x715cea9480
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x715cea7400
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x715cea7480
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x715cea7500
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x715cea7580
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x715cea7600
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x715cea7680
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x715cea7700
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x717df87200

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object // 71a4b0ba00
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8] 0x715ccfb880
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10] 0x715cc88080
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10] 0x715cc88120
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8] 0x715ccfba00
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x6718754 0x715cce68a0
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x671888c 0x715cce6980
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x67185fc 0x715cce6a60
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x67186a8 0x715cce6b40

--------------------------------
Class: PawnActionStack // 715ce7d3c0
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8] 0x715cead480

--------------------------------
Class: PawnAction.Object // 71a4b0c900
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8] 0x715ccfab80
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8] 0x715ccfac00
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8] 0x715ccfac80
	Object* Instigator;//[Offset: 0x40, Size: 0x8] 0x715ccfad00
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8] 0x715ccfad80
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x715ccfae00
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x715ccfae80
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x715ccfaf00
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x715ccfaf80
	byte GetActionPriority();// 0x67173f0 0x715cce7080
	void Finish(byte WithResult);// 0x6717260 0x715cce7160
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x671730c 0x715cce7240

--------------------------------
Class: PawnActionEvent // 715ce7d300
	PawnAction* Action;//[Offset: 0x0, Size: 0x8] 0x715cead400

--------------------------------
Class: HuntersGameModeVariantData.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b84c00
	FString VariantName;//[Offset: 0x38, Size: 0x10] 0x715cdd2f80
	GameplayTag VariantStatTag;//[Offset: 0x48, Size: 0x8] 0x715cdd3000
	HuntersVariantGameModeDisplayData* DisplayData;//[Offset: 0x50, Size: 0x8] 0x715cdd3080
	class BARuleset* Rules;//[Offset: 0x58, Size: 0x8] 0x715cda18c0
	VariantGameDataList DataMap;//[Offset: 0x60, Size: 0x50] 0x715cdd3100

--------------------------------
Class: HuntersVariantGameModeDisplayData.DataAsset.Object // 71a4b30b00
	GameplayTag VariantTag;//[Offset: 0x30, Size: 0x8] 0x715cd62c00
	FText DisplayName;//[Offset: 0x38, Size: 0x18] 0x715cd62c80

--------------------------------
Class: VariantGameDataList // 715cec8440
	<FString,class HuntersVariantGameData> VariantDataMap;//[Offset: 0x0, Size: 0x50] 0x715cec8380

--------------------------------
Class: HuntersVariantGameData.DataAsset.Object // 71a4b88d00
	NakamaGameVariantData VariantData;//[Offset: 0x30, Size: 0xc8] 0x715cddc800

--------------------------------
Class: NakamaGameVariantData // 715cec3d00
	NakamaGameVariantRole DamageRole;//[Offset: 0x0, Size: 0x8] 0x715cebd500
	NakamaGameVariantRole SupportRole;//[Offset: 0x8, Size: 0x8] 0x715cebd580
	NakamaGameVariantRole TankRole;//[Offset: 0x10, Size: 0x8] 0x715cebb600
	bool bExcludeAllocated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715cebb680
	float DecreaseOwnedProbabilityBy;//[Offset: 0x1c, Size: 0x4] 0x715cebb700
	NakamaGameVariantCharacterData CharacterData;//[Offset: 0x20, Size: 0x48] 0x715cebb980
	NakamaGameVariantEntitlement[] CharacterDefaultEntitlements;//[Offset: 0x68, Size: 0x10] 0x715ce93ee0
	<GameplayTag,NakamaGameVariantEntitlements> CharacterOverrideEntitlements;//[Offset: 0x78, Size: 0x50] 0x715cec3c40

--------------------------------
Class: NakamaGameVariantRole // 715cec3940
	int Min;//[Offset: 0x0, Size: 0x4] 0x715cebd600
	int Max;//[Offset: 0x4, Size: 0x4] 0x715cebd680

--------------------------------
Class: NakamaGameVariantCharacterData // 715cec3a00
	GameplayTagContainer Characters;//[Offset: 0x0, Size: 0x20] 0x715cebb780
	bool bIsExclusive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715cebb800
	bool bIsSplitRandomly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x715cebb880
	GameplayTagContainer ExcludedCharacters;//[Offset: 0x28, Size: 0x20] 0x715cebb900

--------------------------------
Class: NakamaGameVariantEntitlement // 715cec3ac0
	enum EntitlementType;//[Offset: 0x0, Size: 0x1] 0x715ce93f80
	enum EntitlementSelection;//[Offset: 0x1, Size: 0x1] 0x715ce94020
	enum[] EntitlementRarities;//[Offset: 0x8, Size: 0x10] 0x715ce94160
	GameplayTagContainer EntitlementTags;//[Offset: 0x18, Size: 0x20] 0x715cebbc00
	GameplayTagContainer ExcludedEntitlementTags;//[Offset: 0x38, Size: 0x20] 0x715cebbc80
	enum[] ExcludedEntitlementRarities;//[Offset: 0x58, Size: 0x10] 0x715ce942a0

--------------------------------
Class: NakamaGameVariantEntitlements // 715cec3b80
	NakamaGameVariantEntitlement[] Entitlements;//[Offset: 0x0, Size: 0x10] 0x715ce94340

--------------------------------
Class: BotNameContext // 715cec88c0
	FName[] CachedDataTableKeyList;//[Offset: 0x10, Size: 0x10] 0x715ce97720
	int[] RandomlySelectedCharacterNameList;//[Offset: 0x20, Size: 0x10] 0x715ce977c0

--------------------------------
Class: HuntersKillcamRule.HuntersRule.BARule.Object // 71a4902680
	bool bKillcamEnabledAtMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x715d178280
	float DelayAfterDeath;//[Offset: 0x34, Size: 0x4] 0x715d178300
	float MinRequiredReplayLength;//[Offset: 0x38, Size: 0x4] 0x715d178380
	void SetKillcamEnabled(bool bEnabled);// 0x3f5df04 0x715d1666e0

--------------------------------
Class: HuntersLevelSequence.LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object // 71a4901f00

--------------------------------
Class: HuntersPhasedMovementComponent.ActorComponent.Object // 71a4901a00
	<byte,GameplayTag> CollisionChannelPhasingTags;//[Offset: 0x2c8, Size: 0x50] 0x715cecd000
	<byte,GameplayTag> HuntersCollisionChannelPhasingTags;//[Offset: 0x318, Size: 0x50] 0x715cecd0c0
	void OnOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3f5e41c 0x715d1661a0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3f5e588 0x715d166280

--------------------------------
Class: HuntersSquadColorConfiguration.DeveloperSettings.Object // 71a4909480
	SquadStyle FriendlyStyle;//[Offset: 0x38, Size: 0xa0] 0x715d186800
	SquadStyle EnemyStyle;//[Offset: 0xd8, Size: 0xa0] 0x715d186880
	SquadStyle NeutralStyle;//[Offset: 0x178, Size: 0xa0] 0x715d186900
	LinearColor ContestedColor;//[Offset: 0x218, Size: 0x10] 0x715d186980
	LinearColor ContestedSecondaryColor;//[Offset: 0x228, Size: 0x10] 0x715d186a00
	static GenericTeamId GetTeamOfLocalPlayerForColorCode(Object* WorldContextObject, out bool IsSuccess);// 0x3f64ce4 0x715d1927e0
	static LinearColor GetTeamColorForState(const HuntersSquadState* InSquad);// 0x3f64c3c 0x715d1928c0
	static byte GetTeamAttitudeForColorCodeByTeamId(Object* WorldContextObject, out const GenericTeamId TargetTeamId, out bool IsSuccess);// 0x3f65094 0x715d1929a0
	static byte GetTeamAttitudeForColorCodeByActor(Object* WorldContextObject, Actor* TargetActor, out bool IsSuccess);// 0x3f64f58 0x715d192a80
	static SquadStyle GetSquadStyleFromAttitude(const byte Attitude);// 0x3f65310 0x715d192b60
	static SquadStyle GetSquadStyleForColorCodeBySquadIndex(Object* WorldContextObject, out bool IsSuccess, const int SquadIndex);// 0x3f64de0 0x715d192c40
	static SquadStyle GetNeutralSquadStyle();// 0x3f653dc 0x715d192d20
	static SquadStyle GetFriendlySquadStyle();// 0x3f6550c 0x715d192e00
	static SquadStyle GetEnemySquadStyle();// 0x3f65474 0x715d192ee0
	static LinearColor GetContestedSecondaryColor();// 0x3f655a4 0x715d192fc0
	static LinearColor GetContestedColor();// 0x3f655dc 0x715d1930a0
	static void BindToUpdateColorCode(Object* WorldContextObject, const delegate Delegate, out bool IsBindingSuccessful);// 0x3f651d8 0x715d193180

--------------------------------
Class: SquadStyle // 715da95680
	LinearColor BaseColor;//[Offset: 0x0, Size: 0x10] 0x715da8cc00
	LinearColor SecondaryColor;//[Offset: 0x10, Size: 0x10] 0x715da8cc80
	LinearColor HighlightColor;//[Offset: 0x20, Size: 0x10] 0x715da8cd00
	LinearColor TemporaryHealthColor;//[Offset: 0x30, Size: 0x10] 0x715da8cd80
	LinearColor ShieldColor;//[Offset: 0x40, Size: 0x10] 0x715da8ce00
	LinearColor ArmorColor;//[Offset: 0x50, Size: 0x10] 0x715da8ce80
	LinearColor OutlineColor;//[Offset: 0x60, Size: 0x10] 0x715da8cf00
	LinearColor ObjectiveOutlineColor;//[Offset: 0x70, Size: 0x10] 0x715da8cf80
	LinearColor OutlineFillColor;//[Offset: 0x80, Size: 0x10] 0x715da8d000
	LinearColor EnvironmentColor;//[Offset: 0x90, Size: 0x10] 0x715da8d080

--------------------------------
Class: HuntersPlayMontageAndWaitAbilityTask.AbilityTask_PlayMontageAndWait.AbilityTask.GameplayTask.Object // 71a4900d80
	delegate OnAnimationMissing;//[Offset: 0x100, Size: 0x10] 0x715d185280
	GameplayTag AnimationTag;//[Offset: 0x110, Size: 0x8] 0x715d185300
	FString AbilityName;//[Offset: 0x118, Size: 0x10] 0x715d183280
	bool bOverrideMontageTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x715d183300
	float MontageTargetTimeIfOverridden;//[Offset: 0x12c, Size: 0x4] 0x715d183380
	static HuntersPlayMontageAndWaitAbilityTask* HuntersPlayMontage(GameplayAbility* OwningAbility, FName TaskInstanceName, GameplayTag AnimationTag, bool OverrideMontageTime, float MontageTargetTimeIfOverridden, FName MontageStartSection, bool bMontageStopWhenAbilityEnds, float MontageAnimRootMotionTranslationScale);// 0x3f6064c 0x715d190a20

--------------------------------
Class: HuntersPossessionEventActorComponent.ActorComponent.Object // 71a4900b00
	void OnUnfilteredCharacterUnpossessed(Actor* UnpossessedActor);// 0x3f60cb4 0x715d190780
	void OnUnfilteredCharacterPossessed(Actor* PossessedActor);// 0x3f60d60 0x715d190940

--------------------------------
Class: HuntersSpectatorCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object // 71a4900380

--------------------------------
Class: HuntersSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object // 71a490a380
	float BaseRollRate;//[Offset: 0x2a4, Size: 0x4] 0x715d185f00
	float SpeedScale;//[Offset: 0x2a8, Size: 0x4] 0x715d185f80
	float InitialMaxSpeed;//[Offset: 0x2ac, Size: 0x4] 0x715d186000
	float InitialAccel;//[Offset: 0x2b0, Size: 0x4] 0x715d186080
	float InitialDecel;//[Offset: 0x2b4, Size: 0x4] 0x715d186100
	HuntersSpectatorCameraComponent* CameraComponent;//[Offset: 0x2b8, Size: 0x8] 0x715d186180
	void RollAtRate(float Rate);// 0x3f61f8c 0x715d193260

--------------------------------
Class: HuntersSpectatorPawnMovement.SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object // 71a4909e80

--------------------------------
Class: HuntersSpectatorPlayerController.PlayerController.Controller.Actor.Object // 71a4909700
	float FollowPlayerCamMovementSpeed;//[Offset: 0x588, Size: 0x4] 0x715d185700
	float FollowPlayerFocusPointHeightFraction;//[Offset: 0x58c, Size: 0x4] 0x715d185780
	float OrbitPlayerCamMovementVerticalSpeed;//[Offset: 0x590, Size: 0x4] 0x715d185800
	float OrbitPlayerCamMovementHorizontalSpeed;//[Offset: 0x594, Size: 0x4] 0x715d185880
	float OrbitPlayerCamMovementRollSpeed;//[Offset: 0x598, Size: 0x4] 0x715d185900
	float CameraLerpSpeed;//[Offset: 0x59c, Size: 0x4] 0x715d185980
	float CameraRotateLerpSpeed;//[Offset: 0x5a0, Size: 0x4] 0x715d185a00
	float DroneCameraRotateLerpSpeed;//[Offset: 0x5a4, Size: 0x4] 0x715d185a80
	HuntersPlayerState* FollowedPlayerState;//[Offset: 0x5c8, Size: 0x8] 0x715d185b00
	Character* FollowedPlayerCharacter;//[Offset: 0x5d0, Size: 0x8] 0x715d185b80

--------------------------------
Class: LocalPlayerColorCodeComponent.ActorComponent.Object // 71a4b87e00

--------------------------------
Class: HuntersTargetActor_CurrentTargetWithFallback.GameplayAbilityTargetActor.Actor.Object // 71a4909200

--------------------------------
Class: HuntersTeamPerspectiveComponent.ActorComponent.Object // 71a4908f80
	delegate OnTeamPerspectiveChanged;//[Offset: 0xb0, Size: 0x10] 0x715d82bd00
	bool bRequireInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x715d82bd80
	PlayerState* InstigatorPlayerState;//[Offset: 0xc8, Size: 0x8] 0x715d82be00
	bool bHasEverBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x715d82be80
	void TeamPerspectiveChangedDelegate__DelegateSignature(TeamPerspective TeamPerspective);// 0x45c6aa0 0x715d837160
	void OnRep_InstigatorPlayerState();// 0x3f660b8 0x715d837240
	void GetTeamPerspective(out bool bOutIsValid, out TeamPerspective OutTeamPerspective);// 0x3f660e0 0x715d834bc0
	void CheckTeamPerspective();// 0x3f660cc 0x715d834ca0

--------------------------------
Class: TeamPerspective // 714906d000
	bool bInstigatedByViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715d82c000
	byte TeamAttitude;//[Offset: 0x1, Size: 0x1] 0x715d829c00

--------------------------------
Class: HuntersWeaponEmplacement.HuntersCharacterBase.Character.Pawn.Actor.Object // 71a4908d00
	CurveTableRowHandle BaseMagazineSizeHandle;//[Offset: 0xf18, Size: 0x10] 0x715d187f00
	HuntersCharacterBase* CharacterInside;//[Offset: 0xf28, Size: 0x8] 0x715d187f80
	class GameplayEffect[] GameplayEffectsWhileInside;//[Offset: 0xf30, Size: 0x10] 0x715d0bbdc0
	ActiveGameplayEffectHandle[] GEHandles;//[Offset: 0xf40, Size: 0x10] 0x715d0bbe60
	ActiveGameplayEffectHandle AmmoGEHandle;//[Offset: 0xf50, Size: 0x8] 0x715d188080
	class GameplayEffect* EquipWeaponEffect;//[Offset: 0xf58, Size: 0x8] 0x715d0bbf00
	StaticMeshComponent* AmmoReloadMesh;//[Offset: 0xf60, Size: 0x8] 0x715d188100
	class CarriableItem* AmmoCarriableItem;//[Offset: 0xf68, Size: 0x8] 0x715d0bbfa0
	StaticMesh* EmptyAmmoStaticMesh;//[Offset: 0xf70, Size: 0x8] 0x715d188180
	StaticMesh* LoadedAmmoStaticMesh;//[Offset: 0xf78, Size: 0x8] 0x715d188200
	BoxComponent* AmmoLoaderCollisionComponent;//[Offset: 0xf88, Size: 0x8] 0x715d188280
	class GameplayAbility* FireWeaponAbility;//[Offset: 0xf90, Size: 0x8] 0x715d0bc040
	bool bAmmoItemLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf98, Size: 0x1] 0x715d188300
	void OnEmplacementDestroyed();// 0x45c6aa0 0x715d191f20
	void OnCarriableItemAdded();// 0x45c6aa0 0x715d192000
	void OnAmmoBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3f6659c 0x715d1920e0
	bool IsEmpty();// 0x3f668f8 0x715d1921c0
	bool IsAmmoItemLoaded();// 0x3f668a4 0x715d1922a0
	int GetMagazineSize();// 0x3f66874 0x715d192380
	HuntersCharacterBase* GetCharacterInside();// 0x3f668c0 0x715d192460
	void ExitFromEmplacement();// 0x3f667bc 0x715d192540
	void EnterEmplacement(HuntersCharacterBase* CharacterEntering);// 0x3f667d0 0x715d192620
	void ConsumeAmmoItem();// 0x3f66890 0x715d192700

--------------------------------
Class: CarriableItem.Actor.Object // 71a4965880
	Vector Velocity;//[Offset: 0x230, Size: 0xc] 0x715d226280
	SceneComponent* HomingTarget;//[Offset: 0x240, Size: 0x8] 0x715d226300
	bool IsGravityEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x715d224280
	class GameplayEffect* DropEffect;//[Offset: 0x250, Size: 0x8] 0x715d1b8a80
	Vector DropVelocity;//[Offset: 0x258, Size: 0xc] 0x715d224300
	Vector DropOffset;//[Offset: 0x264, Size: 0xc] 0x715d224380
	float DefaultProjectileGravityScale;//[Offset: 0x270, Size: 0x4] 0x715d224400
	float KnockbackScale;//[Offset: 0x274, Size: 0x4] 0x715d224480
	float HomingVelocityScale;//[Offset: 0x278, Size: 0x4] 0x715d224500
	class GameplayEffect[] DefaultGameplayEffects;//[Offset: 0x280, Size: 0x10] 0x715d1b8bc0
	class HuntersGameplayAbility* CarryItemAbility;//[Offset: 0x290, Size: 0x8] 0x715d1b8c60
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x298, Size: 0x8] 0x715d224580
	bool ShouldReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x715d224600
	float TimeToReset;//[Offset: 0x2a4, Size: 0x4] 0x715d224680
	float TimeToEnableCollisions;//[Offset: 0x2b0, Size: 0x4] 0x715d224700
	HuntersPlayerState* CurrentCarrier;//[Offset: 0x2c0, Size: 0x8] 0x715d224780
	Pawn* LastCarrier;//[Offset: 0x2c8, Size: 0x8] 0x715d224800
	Pawn* PawnPendingCollisionSwitch;//[Offset: 0x2d0, Size: 0x8] 0x715d224880
	InputBindableHuntersGameplayAbility[] AbilitiesWhileCarrying;//[Offset: 0x2d8, Size: 0x10] 0x715d1b8d00
	bool bDisableEquipmentWhileCarrying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x715d224980
	SphereComponent* CollisionComponent;//[Offset: 0x2f0, Size: 0x8] 0x715d224a00
	ProjectileMovementComponent* ProjectileMovementComponent;//[Offset: 0x2f8, Size: 0x8] 0x715d224a80
	class GameplayEffect* CarryingGameplayEffect;//[Offset: 0x300, Size: 0x8] 0x715d1b8da0
	GameplayTagContainer BlockPickUpGameplayTags;//[Offset: 0x308, Size: 0x20] 0x715d224b00
	Pawn*[] PendingCarrierCandidates;//[Offset: 0x328, Size: 0x10] 0x715d1b8e40
	bool TrySetCarrier(const Pawn* NewCarrier);// 0x4141e7c 0x715d21e5c0
	void Throw(Actor* ActorThrowingBall, Vector InLocation, Vector InVelocity, Actor* TargetActor);// 0x4142010 0x715d21e6a0
	void ResetItem();// 0x4142178 0x715d21adc0
	void OnRep_Velocity();// 0x4142818 0x715d21aea0
	void OnRep_IsGravityEnabled();// 0x4142630 0x715d21af80
	void OnRep_HomingTarget();// 0x4142644 0x715d21b060
	void OnRep_CurrentCarrier(HuntersPlayerState* OldCurrentCarrier);// 0x4142658 0x715d21b140
	void OnPickedUp(HuntersPlayerState* ByWhom);// 0x45c6aa0 0x715d21b220
	void OnHitpointsDepleted();// 0x45c6aa0 0x715d21b300
	void OnHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4142460 0x715d21b3e0
	void OnDropped(HuntersPlayerState* ByWhom);// 0x45c6aa0 0x715d21b4c0
	void OnCollisionWithGeometry();// 0x45c6aa0 0x715d21b5a0
	void OnBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x41426fc 0x715d21b680
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4142240 0x715d21b760
	void NetMulticastReleaseItem(Actor* ActorReleasingBall, Vector InLocation, Vector InVelocity, Actor* TargetActor);// 0x414282c 0x715d21b840
	bool IsBeingCarried();// 0x4141f34 0x715d21b920
	byte GetTeamAttitude(const Actor* Other);// 0x4142194 0x715d21ba00
	Vector GetCurrentLocation();// 0x4141e28 0x715d21bae0
	class GameplayEffect GetCarryingGameplayEffect();// 0x4141e60 0x715d21bbc0
	InputBindableHuntersGameplayAbility[] GetCarryingAbilities();// 0x4141c9c 0x715d21bca0
	void Drop(Actor* ActorDroppingItem);// 0x4141f6c 0x715d21bd80

--------------------------------
Class: HuntersWeaponEmplacementTargetActor.GameplayAbilityTargetActor.Actor.Object // 71a4908a80
	float AngleToleranceDegrees;//[Offset: 0x320, Size: 0x4] 0x715d187c00
	bool IgnoreOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1] 0x715d187c80
	static HuntersWeaponEmplacement* FindClosestWeaponEmplacement(const HuntersCharacterBase* Source, const float AngleTolerance, bool IgnoreOrientation);// 0x3f670b0 0x715d191e40

--------------------------------
Class: HuntersXpFromDmgRule.HuntersRule.BARule.Object // 71a4908800
	float DmgToXpRate;//[Offset: 0x34, Size: 0x4] 0x715d187b80

--------------------------------
Class: HuntersXpFromHealRule.HuntersRule.BARule.Object // 71a4908580
	float HealsToXpRate;//[Offset: 0x34, Size: 0x4] 0x715d187b00

--------------------------------
Class: HuntersXpFromShieldRule.HuntersRule.BARule.Object // 71a4908300
	float ShieldsToXpRate;//[Offset: 0x34, Size: 0x4] 0x715d187a80

--------------------------------
Class: AttachableToCharacter.Interface.Object // 71a4908080
	void ConfigureOnDetachedFromCharacter(Character* OldParentCharacter);// 0x3f67888 0x715d195720
	void ConfigureOnAttachedToCharacter(Character* NewParentCharacter);// 0x3f67934 0x715d191d60

--------------------------------
Class: IncapacitatedController.ActorComponent.Object // 71a4907e00

--------------------------------
Class: JumpPadInterface.Interface.Object // 71a4907680

--------------------------------
Class: NavArea_JumpPad.NavArea.NavAreaBase.Object // 71a4907180

--------------------------------
Class: NavArea_JumpPadLauncher.NavArea.NavAreaBase.Object // 71a4906a00

--------------------------------
Class: ProjectileTargetingMethod_Arc.ProjectileTargetingMethod.Object // 71a4906500
	CurveVector* MinimumLaunchCurve;//[Offset: 0x28, Size: 0x8] 0x715d189b00
	CurveFloat* ChargeCurve;//[Offset: 0x30, Size: 0x8] 0x715d189b80
	CurveVector* MaximumLaunchCurve;//[Offset: 0x38, Size: 0x8] 0x715d189c00
	float MaxTrailLengthNorm;//[Offset: 0x40, Size: 0x4] 0x715d189c80
	float GravityScale;//[Offset: 0x44, Size: 0x4] 0x715d189d00
	float ArcScale;//[Offset: 0x48, Size: 0x4] 0x715d189d80
	float MaxChargeScaleExponent;//[Offset: 0x4c, Size: 0x4] 0x715d189e00

--------------------------------
Class: ProjectileTargetingMethod_Direct.ProjectileTargetingMethod.Object // 71a4906280
	float LaunchSpeed;//[Offset: 0x28, Size: 0x4] 0x715d189900
	float MaxTrailLengthNorm;//[Offset: 0x2c, Size: 0x4] 0x715d189980
	float MaxTrailHitTime;//[Offset: 0x30, Size: 0x4] 0x715d189a00
	float GravityScale;//[Offset: 0x34, Size: 0x4] 0x715d189a80

--------------------------------
Class: ProjectileTargetingMethod_DirectWithArc.ProjectileTargetingMethod_Direct.ProjectileTargetingMethod.Object // 71a4906000
	CurveFloat* LaunchAngleForHeightDifference;//[Offset: 0x38, Size: 0x8] 0x715d189880

--------------------------------
Class: ZiplineHandleAnimInstance.AnimInstance.Object // 71a4905880
	Transform AttachTransform;//[Offset: 0x270, Size: 0x30] 0x715d18a900
	float AttachAlpha;//[Offset: 0x2a0, Size: 0x4] 0x715d18a980
	FName AttachSocketName;//[Offset: 0x2a4, Size: 0x8] 0x715d18aa00
	FName AttachCurveName;//[Offset: 0x2ac, Size: 0x8] 0x715d18aa80
	Rotator RotationOffset;//[Offset: 0x2b4, Size: 0xc] 0x715d18ab00
	SkeletalMeshComponent* RiderMesh;//[Offset: 0x2c0, Size: 0x8] 0x715d18ab80
	void SetRiderMesh(SkeletalMeshComponent* InRiderMesh);// 0x3f72e14 0x715d194ae0

--------------------------------
Class: AbilityTask_ApplyDropPhasePhys.AbilityTask.GameplayTask.Object // 71a4905600
	delegate OnFinished;//[Offset: 0x78, Size: 0x10] 0x715d18a580
	delegate OnInterrupted;//[Offset: 0x88, Size: 0x10] 0x715d18a600
	void OnLandedCallback(out const HitResult Hit);// 0x3fb7f7c 0x715d194920
	static AbilityTask_ApplyDropPhasePhys* CreateApplyDropPhasePhysProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, float ConstantZ);// 0x3fb804c 0x715d194a00

--------------------------------
Class: AbilityTask_ApplyLocalTag.AbilityTask.GameplayTask.Object // 71a4905380
	static AbilityTask_ApplyLocalTag* CreateApplyLocalTag(GameplayAbility* InOwningAbility, GameplayTag InTagToApply);// 0x3fb8568 0x715d194840

--------------------------------
Class: AbilityTask_ApplyRootMotionDynamicForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a490f600
	delegate OnFinish;//[Offset: 0xa8, Size: 0x10] 0x715d18c200
	Vector InitialWorldDirection;//[Offset: 0xb8, Size: 0xc] 0x715d18c280
	float Strength;//[Offset: 0xc4, Size: 0x4] 0x715d18c300
	float Duration;//[Offset: 0xc8, Size: 0x4] 0x715d18c380
	bool bIsAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1] 0x715d18c400
	CurveFloat* StrengthOverTime;//[Offset: 0xd0, Size: 0x8] 0x715d18c480

--------------------------------
Class: AbilityTask_ApplySlopeRootMotion.AbilityTask_ApplyRootMotionDynamicForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a490f380
	Actor* Owner;//[Offset: 0xd8, Size: 0x8] 0x715d18bb80
	CurveFloat* StrengthAngleMultiplier;//[Offset: 0xe0, Size: 0x8] 0x715d18bc00
	static AbilityTask_ApplySlopeRootMotion* CreateApplySlopeRootMotion(GameplayAbility* OwningAbility, FName TaskInstanceName, float InStrength, float InDuration, bool InIsAdditive, CurveFloat* InStrengthAngleMultiplier, CurveFloat* InStrengthOverTime, enum InVelocityOnFinishMode, Vector InSetVelocityOnFinish, float InClampVelocityOnFinish);// 0x3fb8e1c 0x715d194760

--------------------------------
Class: AbilityTask_ApplySteps.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a490f100
	delegate OnStepBegan;//[Offset: 0xa8, Size: 0x10] 0x715d18d200
	delegate OnStepCompleted;//[Offset: 0xb8, Size: 0x10] 0x715d18d280
	delegate OnFinishedAndSynced;//[Offset: 0xc8, Size: 0x10] 0x715d18d300
	delegate OnFinished;//[Offset: 0xd8, Size: 0x10] 0x715d18d380
	delegate OnCanceled;//[Offset: 0xe8, Size: 0x10] 0x715d18d400
	byte GetCurrentStepType();// 0x3fb97c0 0x715d194220
	int GetCurrentStepIndex();// 0x3fb97f4 0x715d194300
	static RMSStep CreateWaitStep(GameplayAbility* OwningAbility, WaitConfig StepConfig);// 0x3fb9a58 0x715d1943e0
	static RMSStep CreateMoveWithForceStep(GameplayAbility* OwningAbility, MoveWithForceStepConfig StepConfig);// 0x3fb9828 0x715d1944c0
	static RMSStep CreateJumpStep(GameplayAbility* OwningAbility, JumpStepConfig StepConfig);// 0x3fb9bec 0x715d1945a0
	static AbilityTask_ApplySteps* ApplyRootMotionMoveSteps(GameplayAbility* OwningAbility, FName TaskInstanceName, RMSStep[] Steps, byte ExitMovementMode);// 0x3fb9db0 0x715d194680

--------------------------------
Class: WaitConfig // 715da94a80
	float Duration;//[Offset: 0x0, Size: 0x4] 0x715da8e800

--------------------------------
Class: RMSStep // 715da96d00
	float Duration;//[Offset: 0xc, Size: 0x4] 0x715dab1380
	FName MontageSectionName;//[Offset: 0x10, Size: 0x8] 0x715dab1400
	enum AccumulateMode;//[Offset: 0x18, Size: 0x1] 0x715d89c5e0
	enum FinishVelocityMode;//[Offset: 0x19, Size: 0x1] 0x715d89c680
	Vector FinishSetVelocity;//[Offset: 0x1c, Size: 0xc] 0x715dab1580
	float FinishClampVelocity;//[Offset: 0x28, Size: 0x4] 0x715dab1600
	Vector_NetQuantize StartLocation;//[Offset: 0x2c, Size: 0xc] 0x715dab1680
	Vector_NetQuantize TargetLocation;//[Offset: 0x38, Size: 0xc] 0x715dab1700
	byte MovementMode;//[Offset: 0x44, Size: 0x1] 0x715dab1780
	bool bSetNewMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x715dab1800
	RMSCollisionChannelUpdate[] CollisionChannelUpdates;//[Offset: 0x48, Size: 0x10] 0x715d89c720
	Rotator Rotation;//[Offset: 0x58, Size: 0xc] 0x715dab1900
	float Distance;//[Offset: 0x64, Size: 0x4] 0x715dab1980
	float MinimumAirTime;//[Offset: 0x68, Size: 0x4] 0x715dab1a00
	float Height;//[Offset: 0x6c, Size: 0x4] 0x715dab1a80
	bool bDisableTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x715dab1b00
	CurveVector* PathOffsetCurve;//[Offset: 0x78, Size: 0x8] 0x715dab1b80
	CurveFloat* TimeMappingCurve;//[Offset: 0x80, Size: 0x8] 0x715dab1c00
	bool bIsInvalid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x715dab1c80

--------------------------------
Class: RMSCollisionChannelUpdate // 715da979c0
	byte Channel;//[Offset: 0x0, Size: 0x1] 0x715da8f880
	byte NewResponse;//[Offset: 0x1, Size: 0x1] 0x715da8f900
	byte OriginalResponse;//[Offset: 0x2, Size: 0x1] 0x715da8f980

--------------------------------
Class: MoveWithForceStepConfig // 715da97a80
	float Duration;//[Offset: 0x0, Size: 0x4] 0x715dab0f00
	Vector_NetQuantize StartLocation;//[Offset: 0x4, Size: 0xc] 0x715dab0f80
	Vector_NetQuantize TargetLocation;//[Offset: 0x10, Size: 0xc] 0x715dab1000
	byte MovementMode;//[Offset: 0x1c, Size: 0x1] 0x715dab1080
	bool bSetNewMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x715da8f800
	RMSCollisionChannelUpdate[] CollisionChannelUpdates;//[Offset: 0x20, Size: 0x10] 0x715d89cb80

--------------------------------
Class: JumpStepConfig // 715da97b40
	float Duration;//[Offset: 0x0, Size: 0x4] 0x715da8fa80
	float MinimumAirTime;//[Offset: 0x4, Size: 0x4] 0x715da8fb00
	enum AccumulateMode;//[Offset: 0x8, Size: 0x1] 0x715d89cc20
	enum FinishVelocityMode;//[Offset: 0x9, Size: 0x1] 0x715d89ccc0
	Vector FinishSetVelocity;//[Offset: 0xc, Size: 0xc] 0x715da8fc80
	float FinishClampVelocity;//[Offset: 0x18, Size: 0x4] 0x715da8fd00
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc] 0x715da8fd80
	float Distance;//[Offset: 0x28, Size: 0x4] 0x715da8fe00
	float Height;//[Offset: 0x2c, Size: 0x4] 0x715da8fe80
	bool bDisableTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715da8ff00
	CurveVector* PathOffsetCurve;//[Offset: 0x38, Size: 0x8] 0x715da8ff80
	CurveFloat* TimeMappingCurve;//[Offset: 0x40, Size: 0x8] 0x715da8e780

--------------------------------
Class: AbilityTask_CancelAbilitiesWithTag.AbilityTask.GameplayTask.Object // 71a490ee80
	static AbilityTask_CancelAbilitiesWithTag* CreateCancelAbilitiesWithTag(GameplayAbility* InOwningAbility, GameplayTagContainer InTagContainer);// 0x3fba664 0x715d194140

--------------------------------
Class: AbilityTask_CheckIfMoving.AbilityTask.GameplayTask.Object // 71a490ec00
	delegate StartedMoving;//[Offset: 0x78, Size: 0x10] 0x715d18cd80
	delegate StoppedMoving;//[Offset: 0x88, Size: 0x10] 0x715d18ce00
	static AbilityTask_CheckIfMoving* CheckIfMovingTask(GameplayAbility* OwningAbility, Actor* TargetActor, float MaximumMovementSpeed);// 0x3fbabd0 0x715d194060

--------------------------------
Class: AbilityTask_CheckLOS.AbilityTask.GameplayTask.Object // 71a490e980
	delegate OnLineOfSightBroken;//[Offset: 0x78, Size: 0x10] 0x715d18c880
	delegate OnTargetLost;//[Offset: 0x88, Size: 0x10] 0x715d18c900
	delegate OnSourceLost;//[Offset: 0x98, Size: 0x10] 0x715d18c980
	static AbilityTask_CheckLOS* CreateCheckLOSProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* InSourceActor, Actor* InTargetActor, Actor*[] InIgnoreActors, byte[] ObjectTypes);// 0x3fbb0ec 0x715d193f80

--------------------------------
Class: AbilityTask_DisableInput.AbilityTask.GameplayTask.Object // 71a490e700
	PlayerController* PlayerController;//[Offset: 0x78, Size: 0x8] 0x715d18c680
	static AbilityTask_DisableInput* CreateDisableInput(GameplayAbility* OwningAbility, PlayerController* InPlayerController);// 0x3fbb750 0x715d193ea0

--------------------------------
Class: AbilityTask_FaceLocation.AbilityTask.GameplayTask.Object // 71a490e480
	static AbilityTask_FaceLocation* CreateFaceLocationProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* InSourceActor, Vector InTargetLocation, float TaskDuration, float MaxDegreesPerSecond, float MinAngleDifference, bool bSetControlRotation);// 0x3fbbc14 0x715d193dc0

--------------------------------
Class: AbilityTask_FaceTarget.AbilityTask.GameplayTask.Object // 71a490e200
	static AbilityTask_FaceTarget* CreateFaceTargetProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* InSourceActor, Actor* InTargetActor, float TaskDuration, float MaxDegreesPerSecond, float MinAngleDifference, GameplayTagContainer TagsToIgnoreForFacing);// 0x3fbc244 0x715d193ce0

--------------------------------
Class: AbilityTask_InvokeReplicatedEvent.AbilityTask.GameplayTask.Object // 71a490df80
	static AbilityTask_InvokeReplicatedEvent* InvokeReplicatedEvent(GameplayAbility* InOwningAbility, FName InTaskInstanceName, byte ReplicatedEvent);// 0x3fbc8e4 0x715d193c00

--------------------------------
Class: AbilityTask_LimitAimPitchAndYaw.AbilityTask.GameplayTask.Object // 71a490dd00
	Controller* PlayerController;//[Offset: 0x78, Size: 0x8] 0x715d18f680
	float MaxPitchLimit;//[Offset: 0x80, Size: 0x4] 0x715d18f700
	float MinPitchLimit;//[Offset: 0x84, Size: 0x4] 0x715d18f780
	float MaxYawLimit;//[Offset: 0x88, Size: 0x4] 0x715d18d700
	float MinYawLimit;//[Offset: 0x8c, Size: 0x4] 0x715d18d780
	Actor* SourceActor;//[Offset: 0x90, Size: 0x8] 0x715d18d800
	static AbilityTask_LimitAimPitchAndYaw* LimitPitchAndYaw(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* SourceActor, float MaxPitchLimit, float MinPitchLimit, float MaxYawLimit, float MinYawLimit);// 0x3fbcde8 0x715d193b20

--------------------------------
Class: AbilityTask_ModifyActivatableAbilities.AbilityTask.GameplayTask.Object // 71a490da80
	Object* SourceObject;//[Offset: 0x78, Size: 0x8] 0x715d18f000
	InputBindableHuntersGameplayAbility[] TemporaryAbilityGrants;//[Offset: 0x88, Size: 0x10] 0x715d0be020
	InputBindableHuntersGameplayAbility[] TemporaryAbilityRevokes;//[Offset: 0x98, Size: 0x10] 0x715d0be0c0
	static AbilityTask_ModifyActivatableAbilities* TemporarilyGrantAndRevokeAbilities(GameplayAbility* InOwningAbility, out const InputBindableHuntersGameplayAbility[] TemporaryGrants, out const InputBindableHuntersGameplayAbility[] TemporaryRevokes, bool CancelActiveInstances, const Object* InSourceObject);// 0x3fbd3c0 0x715d197240
	static AbilityTask_ModifyActivatableAbilities* Create(GameplayAbility* InOwningAbility, out const InputBindableHuntersGameplayAbility[] InAbilityOverrides, const Object* InSourceObject);// 0x3fbd644 0x715d197320

--------------------------------
Class: AbilityTask_MoveForDuration.AbilityTask.GameplayTask.Object // 71a490d800
	delegate OnFinished;//[Offset: 0x78, Size: 0x10] 0x715d18fc80
	delegate OnInterrupted;//[Offset: 0x88, Size: 0x10] 0x715d18fd00
	delegate ReceiveHitTargetData;//[Offset: 0x98, Size: 0x10] 0x715d18fd80
	delegate BlockedByActorWithTags;//[Offset: 0xa8, Size: 0x10] 0x715d18fe00
	void OnActorHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3fbdcb4 0x715d196fa0
	void OnActorBeginOverlap(Actor* SelfActor, Actor* OtherActor);// 0x3fbde40 0x715d197080
	static AbilityTask_MoveForDuration* CreateMoveForDurationProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, const GameplayTagContainer BlockingActorTags, const GameplayTagContainer BlockingOverlapActorTags, const float Duration, const bool ShouldStopOnHit, const bool DurationChangesAfterActorOverlap, const bool ShouldAffectAllActors, const float DurationAfterActorOverlap, const float SlowdownDuration, const bool bShouldUseControlRotation, const float InputScalar, const float TraceHitLength);// 0x3fbdf24 0x715d197160

--------------------------------
Class: AbilityTask_MoveToLocationOutsideOfRange.AbilityTask_ApplyRootMotionDynamicForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a490d580
	delegate TickWhenWithinReach;//[Offset: 0xd8, Size: 0x10] 0x715d1a0b00
	delegate TickWhenOutsideOfMaxRange;//[Offset: 0xe8, Size: 0x10] 0x715d1a0b80
	Vector TargetLocation;//[Offset: 0xf8, Size: 0xc] 0x715d1a0c00
	float DistanceAtWhichTargetIsInReachSquared;//[Offset: 0x104, Size: 0x4] 0x715d1a0c80
	float DistanceAtWhichTargetIsMaxWeightSquared;//[Offset: 0x108, Size: 0x4] 0x715d1a0d00
	CurveFloat* StrengthOverDistanceCurve;//[Offset: 0x110, Size: 0x8] 0x715d1a0d80
	float MaxZ;//[Offset: 0x118, Size: 0x4] 0x715d1a0e00
	static AbilityTask_MoveToLocationOutsideOfRange* ApplyRootMotionMoveToLocationOutsideOfRange(GameplayAbility* InOwningAbility, FName InTaskInstanceName, Vector InTargetLocation, float InStrength, CurveFloat* InStrengthOverDistance, float InDuration, bool InbIsAdditive, enum InVelocityOnFinishMode, Vector InSetVelocityOnFinish, float InClampVelocityOnFinish, float InDistanceAtWhichTargetIsInReach, float InDistanceAtWhichTargetIsMaxWeight, float InMaxUpwardsAngleDeg);// 0x3fbe8ec 0x715d196ec0

--------------------------------
Class: AbilityTask_MoveToTargetOutsideOfRange.AbilityTask_ApplyRootMotionDynamicForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a490d300
	delegate TickWhenWithinReach;//[Offset: 0xd8, Size: 0x10] 0x715d1a0080
	delegate TickWhenOutsideOfMaxRange;//[Offset: 0xe8, Size: 0x10] 0x715d1a0100
	Actor* TargetActor;//[Offset: 0xf8, Size: 0x8] 0x715d1a0180
	float DistanceAtWhichTargetIsInReachSquared;//[Offset: 0x100, Size: 0x4] 0x715d1a0200
	float DistanceAtWhichTargetIsMaxWeightSquared;//[Offset: 0x104, Size: 0x4] 0x715d1a0280
	CurveFloat* StrengthOverDistanceCurve;//[Offset: 0x108, Size: 0x8] 0x715d1a0300
	float MaxZ;//[Offset: 0x110, Size: 0x4] 0x715d1a0380
	static AbilityTask_MoveToTargetOutsideOfRange* ApplyRootMotionMoveToTargetOutsideOfRange(GameplayAbility* InOwningAbility, FName InTaskInstanceName, Actor* InTarget, float InStrength, CurveFloat* InStrengthOverDistance, float InDuration, bool InbIsAdditive, enum InVelocityOnFinishMode, Vector InSetVelocityOnFinish, float InClampVelocityOnFinish, float InDistanceAtWhichTargetIsInReach, float InDistanceAtWhichTargetIsMaxWeight, float InMaxUpwardsAngleDeg);// 0x3fbf30c 0x715d196de0

--------------------------------
Class: AbilityTask_MoveToTargetWithWeighting.AbilityTask_ApplyRootMotionDynamicForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a490d080
	delegate TickWhenWithinReach;//[Offset: 0xd8, Size: 0x10] 0x715d1a1480
	Actor* TargetActor;//[Offset: 0xe8, Size: 0x8] 0x715d1a1500
	Vector InitialTargetPosition;//[Offset: 0xf0, Size: 0xc] 0x715d1a1580
	float TargetWeight;//[Offset: 0xfc, Size: 0x4] 0x715d1a1600
	float MaxUpwardsAngleDeg;//[Offset: 0x100, Size: 0x4] 0x715d1a1680
	float DistanceAtWhichTargetIsInReach;//[Offset: 0x104, Size: 0x4] 0x715d1a1700
	void OnOtherPartyReachedTarget();// 0x3fc1ac8 0x715d196b40
	void OnCharacterMovementUpdated(Character* Character, float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0x3fc1adc 0x715d196c20
	static AbilityTask_MoveToTargetWithWeighting* ApplyRootMotionMoveToTargetWithWeighting(GameplayAbility* InOwningAbility, FName InTaskInstanceName, Vector InWorldDirection, float InStrength, float InDuration, bool InbIsAdditive, CurveFloat* InStrengthOverTime, enum InVelocityOnFinishMode, Vector InSetVelocityOnFinish, float InClampVelocityOnFinish, float InTargetWeight, Actor* InTarget, Vector InInitialTargetPosition, float MaxUpwardsAngleDeg, float DistanceAtWhichTargetIsInReach);// 0x3fc1c40 0x715d196d00

--------------------------------
Class: AbilityTask_NotifyOnLagCompensatedActorOverlap.AbilityTask.GameplayTask.Object // 71a490ce00
	delegate OnOverlap;//[Offset: 0x78, Size: 0x10] 0x715d1a2e80
	void OnCharacterMovementUpdated(Character* Character, float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0x3fc25b8 0x715d196980
	static AbilityTask_NotifyOnLagCompensatedActorOverlap* NotifyOnLagCompensatedCharacterOverlap(GameplayAbility* OwningAbility, Actor* InOwner, Actor* InTargetActor, class Object InComponentClassFilter, Actor*[] InActorsToIgnore, Vector InCollisionExtents, bool bInIgnoreSelfCollision, bool bInTriggerOnlyOnce, bool bInDrawDebug);// 0x3fc271c 0x715d196a60

--------------------------------
Class: AbilityTask_NotifyTargetsEnterExitDistance.AbilityTask.GameplayTask.Object // 71a490cb80
	delegate TargetsEnterDistanceDelegate;//[Offset: 0x78, Size: 0x10] 0x715d1a2a00
	delegate TargetsExitDistanceDelegate;//[Offset: 0x88, Size: 0x10] 0x715d1a2a80
	Actor*[] CurrentActorsWithinDistance;//[Offset: 0x98, Size: 0x10] 0x715d0bdbc0
	Actor* OriginActor;//[Offset: 0xa8, Size: 0x8] 0x715d1a2b80
	static AbilityTask_NotifyTargetsEnterExitDistance* CreateNotifyTargetsEnterExitDistanceTask(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* InOriginActor, class Object InCheckClassType, float InCheckDistance);// 0x3fc2ed8 0x715d1968a0

--------------------------------
Class: AbilityTask_RotateCameraOverTime.AbilityTask.GameplayTask.Object // 71a490c900
	Controller* PlayerController;//[Offset: 0x78, Size: 0x8] 0x715d1a2200
	float RollAdjustment;//[Offset: 0x80, Size: 0x4] 0x715d1a2280
	float PitchAdjustment;//[Offset: 0x84, Size: 0x4] 0x715d1a2300
	float YawAdjustment;//[Offset: 0x88, Size: 0x4] 0x715d1a2380
	float RotationTime;//[Offset: 0x8c, Size: 0x4] 0x715d1a2400
	Actor* SourceActor;//[Offset: 0x90, Size: 0x8] 0x715d1a2480
	CurveFloat* TimeToLerpFactorCurve;//[Offset: 0x98, Size: 0x8] 0x715d1a2500
	static AbilityTask_RotateCameraOverTime* RotateCameraOverTime(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* SourceActor, float PitchAdjustment, float YawAdjustment, float RollAdjustment, float RotationTime, CurveFloat* TimeToLerpFactorCurve);// 0x3fc342c 0x715d1967c0

--------------------------------
Class: AbilityTask_ShowDeployablePreview.AbilityTask.GameplayTask.Object // 71a490c680
	delegate OnCollisionResult;//[Offset: 0x78, Size: 0x10] 0x715d1a3f80
	static AbilityTask_ShowDeployablePreview* ShowDeployablePreview(GameplayAbility* OwningAbility, Actor* Deployer, Actor* Deployable, float SpawnDistance, bool ShouldUseCameraRotation);// 0x3fc3a94 0x715d1966e0

--------------------------------
Class: AbilityTask_StartChannelling.AbilityTask.GameplayTask.Object // 71a490c400
	delegate OnFinished;//[Offset: 0x78, Size: 0x10] 0x715d1a3b00
	delegate OnInterrupted;//[Offset: 0x88, Size: 0x10] 0x715d1a3b80
	class GameplayEffect* ChannellingEffect;//[Offset: 0xa8, Size: 0x8] 0x715d0bda80
	float ChannelTime;//[Offset: 0xb0, Size: 0x4] 0x715d1a3c00
	void OnGameplayEffectRemoved(out const GameplayEffectRemovalInfo InGameplayEffectRemovalInfo);// 0x3fc404c 0x715d196520
	static AbilityTask_StartChannelling* CreateStartChannellingProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, class GameplayEffect ChannellingEffect, float ChannelTime, bool bRemoveEffectWhenTaskTerminated);// 0x3fc4168 0x715d196600

--------------------------------
Class: AbilityTask_TickAbility.AbilityTask.GameplayTask.Object // 71a490c180
	delegate OnTick;//[Offset: 0x78, Size: 0x10] 0x715d1a3880
	delegate OnFinish;//[Offset: 0x88, Size: 0x10] 0x715d1a3900
	static AbilityTask_TickAbility* TickAbility(GameplayAbility* OwningAbility, float Duration);// 0x3fc47b8 0x715d196440

--------------------------------
Class: AbilityTask_UpdateClosestTargets.AbilityTask.GameplayTask.Object // 71a490bf00
	delegate NewClosestTarget;//[Offset: 0x78, Size: 0x10] 0x715d1a3300
	delegate LostClosestTarget;//[Offset: 0x88, Size: 0x10] 0x715d1a3380
	static AbilityTask_UpdateClosestTargets* UpdateClosestTargetsAbility(GameplayAbility* OwningAbility, Actor* InstigatorActor, Actor* OriginActor, int MaxClosestTargets, float MaxRange, byte[] OverlapObjectTypes, bool IgnoreInstigatorsAllies, byte[] BlockingObjectTypes);// 0x3fc4c94 0x715d196360

--------------------------------
Class: AbilityTask_UpdateTargetAttract.AbilityTask.GameplayTask.Object // 71a490bc80
	delegate OnTargetLost;//[Offset: 0x78, Size: 0x10] 0x715d1a4e00
	delegate OnSourceLost;//[Offset: 0x88, Size: 0x10] 0x715d1a4e80
	delegate OnDisengageDistanceMet;//[Offset: 0x98, Size: 0x10] 0x715d1a4f00
	static AbilityTask_UpdateTargetAttract* CreateUpdateTargetAttractProxy(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* InSourceActor, Actor* InTargetActor, float InAttractStrength, float InDisengageDistance, Vector InAttractStrengthMin, Vector InAttractStrengthMax);// 0x3fc53f8 0x715d196280

--------------------------------
Class: AbilityTask_WaitDelayAlways.AbilityTask.GameplayTask.Object // 71a490ba00
	delegate OnFinish;//[Offset: 0x78, Size: 0x10] 0x715d1a4c00
	static AbilityTask_WaitDelayAlways* WaitDelayAlways(GameplayAbility* OwningAbility, float Time);// 0x3fc5a5c 0x715d1961a0

--------------------------------
Class: AbilityTask_WaitForCharacterLanding.AbilityTask.GameplayTask.Object // 71a490b780
	delegate OnLanded;//[Offset: 0x78, Size: 0x10] 0x715d1a4700
	delegate OnFailure;//[Offset: 0x88, Size: 0x10] 0x715d1a4780
	static AbilityTask_WaitForCharacterLanding* WaitForCharacterLanding(GameplayAbility* OwningAbility, float MinimumDuration);// 0x3fc616c 0x715d195f00
	void OnLandedCallback(out const HitResult Hit);// 0x3fc609c 0x715d195fe0
	void OnCharacterMovementUpdated(Character* Character, float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0x3fc5f38 0x715d1960c0

--------------------------------
Class: AbilityTask_WaitForReplicatedEvent.AbilityTask.GameplayTask.Object // 71a490b500
	delegate ReplicatedEventReceived;//[Offset: 0x78, Size: 0x10] 0x715d1a4480
	static AbilityTask_WaitForReplicatedEvent* WaitForReplicatedEvent(GameplayAbility* InOwningAbility, FName InTaskInstanceName, byte ReplicatedEvent);// 0x3fc66f4 0x715d195d40
	void OnReplicatedEventReceived();// 0x3fc66e0 0x715d195e20

--------------------------------
Class: AbilityTask_WatchForDamageTakenExceedingThreshold.AbilityTask.GameplayTask.Object // 71a490b280
	delegate OnDamageThresholdReached;//[Offset: 0x78, Size: 0x10] 0x715d1a6200
	delegate OnFailure;//[Offset: 0x88, Size: 0x10] 0x715d1a6280
	static AbilityTask_WatchForDamageTakenExceedingThreshold* WatchForDamageTakenExceedingThreshold(GameplayAbility* OwningAbility, float TimeFrame, float DamageThreshold, bool ShouldResetTimeWindowOnThresholdReached);// 0x3fc6c94 0x715d195c60

--------------------------------
Class: AnimationAbilityInterface.Interface.Object // 71a490b000
	Vector RequestOffset(GameplayTag Offset);// 0x3fc71bc 0x715d195aa0
	AnimMontage* RequestAnimationToBePlayed(GameplayTag animationToBePlayed);// 0x3fc7274 0x715d195b80

--------------------------------
Class: DashToTargetGC.GameplayCueNotify_Actor.Actor.Object // 71a490ad80
	float CachedDashSpeed;//[Offset: 0x294, Size: 0x4] 0x715d1a5a00
	Vector TargetPosition;//[Offset: 0x298, Size: 0xc] 0x715d1a5a80
	Vector StartPosition;//[Offset: 0x2a4, Size: 0xc] 0x715d1a5b00
	Vector CurrentPosition;//[Offset: 0x2b0, Size: 0xc] 0x715d1a5b80
	Actor* DashCharacter;//[Offset: 0x2c0, Size: 0x8] 0x715d1a5c00
	float BlurTailLength;//[Offset: 0x2c8, Size: 0x4] 0x715d1a5c80
	Actor* DashToCharacter;//[Offset: 0x2cc, Size: 0x8] 0x715d1a5d00
	CurveFloat* MovementCurve;//[Offset: 0x2d8, Size: 0x8] 0x715d1a5d80
	CurveTableRowHandle DashSpeed;//[Offset: 0x2e0, Size: 0x10] 0x715d1a5e00
	Vector Direction;//[Offset: 0x2f0, Size: 0xc] 0x715d1a5e80
	float DistanceToTarget;//[Offset: 0x2fc, Size: 0x4] 0x715d1a5f00
	void SetDashActorBlurTailLength(float TailLength);// 0x45c6aa0 0x715d1959c0

--------------------------------
Class: GameplayCueNotify_NoExecute_Actor.GameplayCueNotify_Actor.Actor.Object // 71a490a880

--------------------------------
Class: GameplayCueAudioAkEvents.GameplayCueNotify_NoExecute_Actor.GameplayCueNotify_Actor.Actor.Object // 71a490ab00
	AkAudioEvent*[] OnActivateOneOffAkEventsToPost;//[Offset: 0x298, Size: 0x10] 0x715d0bd760
	AkAudioEvent*[] OnActivateContinuousAkEventsToPost;//[Offset: 0x2a8, Size: 0x10] 0x715d0bd800
	AkAudioEvent*[] OnRemoveAkEventsToPost;//[Offset: 0x2b8, Size: 0x10] 0x715d0bd8a0
	AkComponent* AkComponent;//[Offset: 0x2c8, Size: 0x8] 0x715d1a5980

--------------------------------
Class: HitReacterInterface.Interface.Object // 71a490a600
	void ReactToHit(out const Vector Direction, float Intensity);// 0x3fc7f40 0x715d1958e0

--------------------------------
Class: HuntersAbilitySystemBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a490fd80
	static GameplayTag MakeLiteralGameplayTagFromName(FName GameplayTagName);// 0x3fc8408 0x715d198e40
	static bool IsGameplayEffectApplicable(class GameplayEffect GameplayEffectType, out const GameplayEffectContextHandle Context, const Actor* Target);// 0x3fc84ac 0x715d198f20
	static float EvaluateCurveByLevel(CurveTableRowHandle Handle, int Level, FString ContextString, float DefaultValue);// 0x3fc8778 0x715d199000
	static float EvaluateCurve(GameplayAbility* OwningAbility, CurveTableRowHandle Handle, float DefaultValue);// 0x3fc88f4 0x715d193a40
	static void CancelAbilitiesWithTag(GameplayAbility* OwningAbility, GameplayTagContainer TagContainer);// 0x3fc8650 0x715d195800

--------------------------------
Class: HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4915100
	Actor* GetEffectInstigator(out const GameplayEffectSpec Spec);// 0x3fcb46c 0x715d198d60

--------------------------------
Class: HuntersAbilityStatics.BlueprintFunctionLibrary.Object // 71a4914c00
	static bool TeamFilteredTraceForFirstBlockingHitByProfile(const Object* WorldContextObject, Vector StartPoint, Vector EndPoint, const FName CollisionProfile, GenericTeamId TeamID, out const Actor*[] ActorsToIgnore, out HitResult OutBlockingHit);// 0x3fd18f8 0x715d19a7a0
	static bool TeamFilteredTraceForFirstBlockingHitByObjectType(const Object* WorldContextObject, byte TypeToBlock, Vector StartPoint, Vector EndPoint, out const byte[] ObjectTypes, GenericTeamId TeamID, out const Actor*[] ActorsToIgnore, out HitResult OutBlockingHit);// 0x3fd1b88 0x715d19a880
	static bool TeamFilteredTraceForFirstBlockingHitByChannelAndMaxDot(const Object* WorldContextObject, byte TraceChannel, Vector StartPoint, Vector EndPoint, out const byte[] CollisionChannelsToFind, GenericTeamId TeamID, out const Actor*[] ActorsToIgnore, float MaximumToleratedImpactDotProduct, out HitResult OutBlockingHit);// 0x3fd1e74 0x715d19a960
	static bool TeamFilteredTraceForFirstBlockingHitByChannel(const Object* WorldContextObject, byte TraceChannel, Vector StartPoint, Vector EndPoint, out const byte[] CollisionChannelsThatBlock, GenericTeamId TeamID, out const Actor*[] ActorsToIgnore, out HitResult OutBlockingHit);// 0x3fd2478 0x715d19aa40
	static bool TeamFilteredSphereTraceForFirstBlockingHitByObjectType(const Object* WorldContextObject, byte TypeToBlock, Vector StartPoint, Vector EndPoint, float Radius, out const byte[] ObjectTypes, GenericTeamId TeamID, out const Actor*[] ActorsToIgnore, out HitResult OutBlockingHit);// 0x3fd15c8 0x715d19ab20
	static bool TeamFilteredMultiTraceByChannel(const Object* WorldContextObject, byte TraceChannel, Vector StartPoint, Vector EndPoint, out const byte[] CollisionChannelsToFind, GenericTeamId TeamID, out const Actor*[] ActorsToIgnore, out HitResult[] OutHits);// 0x3fd219c 0x715d19ac00
	static bool ShouldAbilitiesAutoTriggerZTargeting();// 0x3fcc74c 0x715d19ace0
	static bool RotatedCapsuleTraceMultiByProfile(Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult[] OutHits);// 0x3fcc224 0x715d197400
	static void RemoveLocalGameplayTag(AbilitySystemComponent* AbilitySystemComponent, GameplayTag TagToRemove);// 0x3fcc07c 0x715d1974e0
	static void ReleaseLocalInput(AbilitySystemComponent* AbilitySystemComponent, enum AbilityInput);// 0x3fcc59c 0x715d1975c0
	static void PressLocalInput(AbilitySystemComponent* AbilitySystemComponent, enum AbilityInput);// 0x3fcc674 0x715d1976a0
	static bool IsPointInsideAngle(Vector Origin, Vector Forward, float Angle, Vector TargetPoint, float TargetRadius);// 0x3fcbec4 0x715d197780
	static float GetSynchronisedWorldTimestampFromTargetData(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x3fcd62c 0x715d197860
	static GameplayTagContainer GetIgnoreFriendlyTags();// 0x3fcc564 0x715d197940
	static void GetHostileActorsAndLDCsFromComponentList(Actor* ActorForTeamAttitudeCheck, out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList, out PrimitiveComponent*[] OutLDCList, bool ExcludeMultiHitActors);// 0x3fd1378 0x715d197a20
	static SceneComponent* GetFirstComponentFromTargetData(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x3fcd7d8 0x715d197b00
	static SceneComponent*[] GetComponentsFromTargetData(out const GameplayAbilityTargetDataHandle TargetData, int Index);// 0x3fcd984 0x715d197be0
	static Vector GetActiveGameplayEffectOrigin(ActiveGameplayEffectHandle ActiveHandle);// 0x3fccd20 0x715d197cc0
	static bool GetActiveGameplayEffectMatchesQuery(ActiveGameplayEffectHandle ActiveHandle, GameplayEffectQuery GameplayEffectQuery);// 0x3fcce80 0x715d197da0
	static bool GetActiveGameplayEffectHasOrigin(ActiveGameplayEffectHandle ActiveHandle);// 0x3fccdd0 0x715d197e80
	static void EffectContextGetActors(GameplayEffectContextHandle EffectContext, out Actor*[] Actors);// 0x3fcdb78 0x715d197f60
	static GameplayEffectContextHandle CreateEffectContextWithOrigin(AbilitySystemComponent* AbilitySystemComponent, Actor* Instigator, Actor* EffectCauser, Vector Origin);// 0x3fcd1cc 0x715d198040
	static GameplayEffectContextHandle CreateEffectContext(AbilitySystemComponent* AbilitySystemComponent, Actor* Instigator, Actor* EffectCauser);// 0x3fcd41c 0x715d198120
	static bool Blueprint_PredictProjectilePathAndTime_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, out float OutPredictedDuration, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x3fcc784 0x715d198200
	static ActiveGameplayEffectHandle[] ApplyRadialGameplayEffectsWithSeparateRadii(Object* WorldContextObject, RadialGameplayEffectDataHandle[] GameplayEffectSpecs, out const Vector Origin, const byte[] BlockingChannels, const GenericTeamId FilterTeamId, out Actor*[] AffectedActors, byte ChannelToTraceAs, bool bBlockable, Actor* IgnoreActor, const Actor* Instigator);// 0x3fd027c 0x715d1982e0
	static ActiveGameplayEffectHandle[] ApplyRadialGameplayEffectsInAngle(Object* WorldContextObject, GameplayEffectSpecHandle[] GameplayEffectSpecs, out const Vector Origin, out const Vector Forward, const float Radius, const float Angle, const byte[] BlockingChannels, const GenericTeamId FilterTeamId, out Actor*[] AffectedActors, byte ChannelToTraceAs, bool bBlockable, Actor* IgnoreActor, const Actor* Instigator);// 0x3fcfc20 0x715d1983c0
	static ActiveGameplayEffectHandle[] ApplyRadialGameplayEffects(Object* WorldContextObject, GameplayEffectSpecHandle[] GameplayEffectSpecs, out const Vector Origin, const float Radius, const byte[] BlockingChannels, const GenericTeamId FilterTeamId, out Actor*[] AffectedActors, byte ChannelToTraceAs, bool bBlockable, Actor* IgnoreActor, const Actor* Instigator, bool bUseLagCompensation);// 0x3fd07f4 0x715d1984a0
	static ActiveGameplayEffectHandle[] ApplyRadialGameplayEffect(Object* WorldContextObject, GameplayEffectSpecHandle GameplayEffectSpec, out const Vector Origin, const float Radius, const byte[] BlockingChannels, const GenericTeamId FilterTeamId, out Actor*[] AffectedActors, byte ChannelToTraceAs, bool bBlockable, Actor* IgnoreActor, const Actor* Instigator, bool bUseLagCompensation);// 0x3fd0e0c 0x715d198580
	static ActiveGameplayEffectHandle ApplyGameplayEffectToLDC(Object* WorldContextObject, GameplayEffectSpecHandle GameplayEffectSpec, HuntersLocationalDamageComponent* TargetLDC);// 0x3fcbcb8 0x715d198660
	static ActiveGameplayEffectHandle[] ApplyCylindricalGameplayEffectsWithDifferentBlockingOrigin(Object* WorldContextObject, GameplayEffectSpecHandle[] GameplayEffectSpecs, out const Vector Origin, const float Radius, const float HalfHeight, const byte[] BlockingChannels, const GenericTeamId FilterTeamId, out const Vector BlockingOrigin, out Actor*[] AffectedActors, byte ChannelToTraceAs, bool bBlockable, Actor* IgnoreActor, const Actor* Instigator, bool bUseLagCompensation);// 0x3fce96c 0x715d198740
	static ActiveGameplayEffectHandle[] ApplyCylindricalGameplayEffects(Object* WorldContextObject, GameplayEffectSpecHandle[] GameplayEffectSpecs, out const Vector Origin, const float Radius, const float HalfHeight, const byte[] BlockingChannels, const GenericTeamId FilterTeamId, out Actor*[] AffectedActors, byte ChannelToTraceAs, bool bBlockable, Actor* IgnoreActor, const Actor* Instigator, bool bUseLagCompensation);// 0x3fcf014 0x715d198820
	static ActiveGameplayEffectHandle[] ApplyCylindricalGameplayEffect(Object* WorldContextObject, GameplayEffectSpecHandle GameplayEffectSpec, out const Vector Origin, const float Radius, const float HalfHeight, const byte[] BlockingChannels, const GenericTeamId FilterTeamId, out Actor*[] AffectedActors, byte ChannelToTraceAs, bool bBlockable, Actor* IgnoreActor, const Actor* Instigator, bool bUseLagCompensation);// 0x3fcf670 0x715d198900
	static ActiveGameplayEffectHandle[] ApplyConicalGameplayEffects(Object* WorldContextObject, GameplayEffectSpecHandle[] GameplayEffectSpecs, out const Vector Origin, out const Vector ConeDirection, const float FarRadius, const float NearRadius, const byte[] BlockingChannels, const GenericTeamId FilterTeamId, out Actor*[] AffectedActors, byte ChannelToTraceAs, bool bBlockable, Actor* IgnoreActor, const Actor* Instigator);// 0x3fcdd60 0x715d1989e0
	static ActiveGameplayEffectHandle[] ApplyConicalGameplayEffect(Object* WorldContextObject, GameplayEffectSpecHandle GameplayEffectSpec, out const Vector Origin, out const Vector ConeDirection, const float FarRadius, const float NearRadius, const byte[] BlockingChannels, const GenericTeamId FilterTeamId, out Actor*[] AffectedActors, byte ChannelToTraceAs, bool bBlockable, Actor* IgnoreActor, const Actor* Instigator);// 0x3fce3bc 0x715d198ac0
	static void AddLocalGameplayTag(AbilitySystemComponent* AbilitySystemComponent, GameplayTag TagToApply);// 0x3fcc150 0x715d198ba0
	static void AddActors(GameplayEffectContextHandle EffectContext, out const Actor*[] Actors, bool bReset);// 0x3fccf9c 0x715d198c80

--------------------------------
Class: RadialGameplayEffectDataHandle // 715da973c0
	GameplayEffectSpecHandle Handle;//[Offset: 0x0, Size: 0x10] 0x715dab0880

--------------------------------
Class: HuntersLocationalDamageComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4980100
	int LDVIndex;//[Offset: 0x448, Size: 0x4] 0x715d8af600
	delegate OnDestroyed;//[Offset: 0x450, Size: 0x10] 0x715d8af680
	DamageState[] DamageStates;//[Offset: 0x460, Size: 0x10] 0x715d890600
	int DamageStateIdx;//[Offset: 0x480, Size: 0x4] 0x715d8af780
	int8 ComponentIdentifier;//[Offset: 0x484, Size: 0x1] 0x715d8ad700
	HuntersMovementHistoryComponent* MovementHistory;//[Offset: 0x490, Size: 0x8] 0x715d8ad780
	float HealthMax;//[Offset: 0x498, Size: 0x4] 0x715d8ad800
	bool bUseDefaultMaxHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1] 0x715d8ad880
	float Health;//[Offset: 0x4a0, Size: 0x4] 0x715d8ad900
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1] 0x715d8ad980
	GameplayTagContainer TargetingTags;//[Offset: 0x4b0, Size: 0x20] 0x715d8ada00
	GameplayTagContainer TargetingBlockingTags;//[Offset: 0x4d0, Size: 0x20] 0x715d8ada80
	FName TargetReticleSocket;//[Offset: 0x4f0, Size: 0x8] 0x715d8adb00
	void UpdateHealthValues(const float NewTotalHealth);// 0x41e6938 0x715d88da60
	void SetEnabled(bool IsEnabled);// 0x41e6c00 0x715d88db40
	void SetComponentIdentifier(int NewIndex);// 0x41e6ad4 0x715d88dc20
	void ResetLDC();// 0x41e6bc8 0x715d88dd00
	void OnZeroHealth();// 0x45c6aa0 0x715d88dde0
	void OnRep_Health();// 0x41e6910 0x715d88dec0
	void OnRep_DamageStateIdx(int OldDamageStateIdx);// 0x41e686c 0x715d88dfa0
	void OnRep_bEnabled();// 0x41e6924 0x715d88e080
	void LDCDestroyedEvent__DelegateSignature(HuntersLocationalDamageComponent* LDC);// 0x45c6aa0 0x715d88e160
	float GetHealthMax();// 0x41e6b90 0x715d88e240
	float GetHealth();// 0x41e6bac 0x715d88e320
	bool GetEnabled();// 0x41e6be4 0x715d88e400
	int GetDamageStateIdx();// 0x41e6b74 0x715d88e4e0
	int GetComponentIdentifier();// 0x41e6ab8 0x715d88e5c0
	void ClearDamageStateModifiers();// 0x41e69e4 0x715d88e6a0
	void ApplyDamageStateModifier(DamageState Modifier);// 0x41e69f8 0x715d88adc0

--------------------------------
Class: DamageState // 714906f340
	float ThresholdPercent;//[Offset: 0x0, Size: 0x4] 0x715d8ae080
	float DamageScaleRanged;//[Offset: 0x4, Size: 0x4] 0x715d8ae100
	float DamageScaleMelee;//[Offset: 0x8, Size: 0x4] 0x715d8ae180
	float DamageScaleAOE;//[Offset: 0xc, Size: 0x4] 0x715d8ae200
	float DamagePassThroughPercentage;//[Offset: 0x10, Size: 0x4] 0x715d8ae280

--------------------------------
Class: HuntersMovementHistoryComponent.SceneComponent.ActorComponent.Object // 71a4b28f80
	bool IsValidRecentLocation(out const Vector Location, float ToleranceDistanceSquared);// 0x67ff1bc 0x715cceb760
	bool GetLocationRotation(const float DurationAgoSeconds, out Vector Location, out Rotator Rotation);// 0x67ff2c0 0x715cceb840
	Vector GetLocation(float DurationAgoSeconds);// 0x67ff414 0x715cceb920

--------------------------------
Class: HuntersAbilitySystemGlobals.AbilitySystemGlobals.Object // 71a4914700
	CurveTable* InitialAttributesPatch;//[Offset: 0x260, Size: 0x8] 0x715d1c1e80

--------------------------------
Class: HuntersAbilitySystemInterface.AbilitySystemInterface.Interface.Object // 71a4914480

--------------------------------
Class: HuntersAbilityTask_SpawnActor.AbilityTask.GameplayTask.Object // 71a4914200
	delegate ActorBeginSpawn;//[Offset: 0x78, Size: 0x10] 0x715d1c1800
	delegate ActorFinishSpawn;//[Offset: 0x88, Size: 0x10] 0x715d1c1880
	delegate DidNotSpawn;//[Offset: 0x98, Size: 0x10] 0x715d1c1900
	static HuntersAbilityTask_SpawnActor* SpawnActor(GameplayAbility* OwningAbility, GameplayAbilityTargetDataHandle TargetData, class Actor Class);// 0x3fd7fe4 0x715d19c560
	void FinishSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetDataHandle TargetData, Actor* SpawnedActor);// 0x3fd7954 0x715d19c640
	bool BeginSpawningActor(GameplayAbility* OwningAbility, GameplayAbilityTargetDataHandle TargetData, class Actor Class, out Actor* SpawnedActor);// 0x3fd7c64 0x715d19c720

--------------------------------
Class: HuntersCha009UltimateActor.Actor.Object // 71a4913f80
	float GroundTraceRange;//[Offset: 0x228, Size: 0x4] 0x715d1c2e00
	Vector GroundTraceDir;//[Offset: 0x22c, Size: 0xc] 0x715d1c2e80
	float PoolLifeSpan;//[Offset: 0x238, Size: 0x4] 0x715d1c2f00
	float PoolRadius;//[Offset: 0x23c, Size: 0x4] 0x715d1c2f80
	float PoolHalfHeight;//[Offset: 0x240, Size: 0x4] 0x715d1c3000
	float PoolDamage;//[Offset: 0x244, Size: 0x4] 0x715d1c3080
	CollisionProfileName GroundTraceProfileName;//[Offset: 0x248, Size: 0x8] 0x715d1c3100
	CollisionProfileName DamageQueryProfileName;//[Offset: 0x250, Size: 0x8] 0x715d1c3180
	CollisionProfileName LineOfSightProfileName;//[Offset: 0x258, Size: 0x8] 0x715d1c1100
	float PoolMinDistance;//[Offset: 0x260, Size: 0x4] 0x715d1c1180
	float PoolSpreadDistance;//[Offset: 0x264, Size: 0x4] 0x715d1c1200
	int PoolSpreadExpansions;//[Offset: 0x268, Size: 0x4] 0x715d1c1280
	int PoolSpreadIterations;//[Offset: 0x26c, Size: 0x4] 0x715d1c1300
	Vector PoolNavQueryExtent;//[Offset: 0x270, Size: 0xc] 0x715d1c1380
	float SpawningTickRate;//[Offset: 0x27c, Size: 0x4] 0x715d1c1400
	float DamageTickRate;//[Offset: 0x280, Size: 0x4] 0x715d1c1480
	bool bCheckDamageLineOfSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1] 0x715d1c1500
	float LineOfSightZOffset;//[Offset: 0x288, Size: 0x4] 0x715d1c1580
	class GameplayEffect* DamageGameplayEffect;//[Offset: 0x290, Size: 0x8] 0x715d1b02e0
	GameplayTag SetByCallerDamageTag;//[Offset: 0x298, Size: 0x8] 0x715d1c1600
	Vector_NetQuantize[] ReplicatedDamagePoolLocations;//[Offset: 0x2a0, Size: 0x10] 0x715d1b0380
	<AbilitySystemComponent*> ConfirmedTargets;//[Offset: 0x318, Size: 0x50] 0x715d1b0420
	void StopSpawningPools();// 0x3fd87c8 0x715d19c1e0
	void StartSpawningPools();// 0x3fd87dc 0x715d19c2c0
	void OnRep_ReplicatedDamagePoolLocations();// 0x45c6aa0 0x715d19c3a0
	Vector_NetQuantize[] GetDamagePoolLocations();// 0x3fd8740 0x715d19c480

--------------------------------
Class: HuntersLocationPoolController.ActorComponent.Object // 71a4913a80
	Vector_NetQuantize[] LocationPools;//[Offset: 0xb0, Size: 0x10] 0x715d1b01a0
	GameplayTag LocationGameplayCueTag;//[Offset: 0xc0, Size: 0x8] 0x715d1c2c00
	float LocationPoolLifeSpan;//[Offset: 0xc8, Size: 0x4] 0x715d1c2c80
	void RemoveLocationPools();// 0x3fdedb8 0x715d19bf40
	void OnRep_LocationPools(Vector_NetQuantize[] PreviousValue);// 0x3fdecb4 0x715d19c020
	void AddNewLocationPool(out const Vector NewPool);// 0x3fdedcc 0x715d19c100

--------------------------------
Class: HuntersCha014UltimateController.HuntersLocationPoolController.ActorComponent.Object // 71a4913d00
	Actor*[] TargetsPool;//[Offset: 0xd0, Size: 0x10] 0x715d1b0060
	GameplayTag TargetGameplayCueTag;//[Offset: 0xe0, Size: 0x8] 0x715d1c2800
	GameplayTag ExplosionGameplayCueTag;//[Offset: 0xe8, Size: 0x8] 0x715d1c2880
	float TargetPoolLifeSpan;//[Offset: 0xf0, Size: 0x4] 0x715d1c2900
	float TargetPoolHeightOffset;//[Offset: 0xf4, Size: 0x4] 0x715d1c2980
	void RemoveTargets();// 0x3fd8e40 0x715d19bae0
	void RemoveExplosionCue();// 0x3fd8c64 0x715d19bbc0
	void PlaceAreasOfEffect(out const GameplayTagContainer IgnoreActorsWithTags);// 0x3fd8d70 0x715d19bca0
	void OnRep_TargetsPool(Actor*[] Actors);// 0x3fd8c78 0x715d19bd80
	void AddNewTarget(Actor* Target);// 0x3fd8e54 0x715d19be60

--------------------------------
Class: HuntersCha020UltimateController.ActorComponent.Object // 71a4913800
	byte TickCycle;//[Offset: 0xb0, Size: 0x1] 0x715d1c2180
	Cha020UltimateTarget[] CurrentPotentialTargets;//[Offset: 0xc8, Size: 0x10] 0x715d1b2900
	GameplayTag TargetedGameplayTag;//[Offset: 0xd8, Size: 0x8] 0x715d1c2280
	GameplayTag DashGameplayTag;//[Offset: 0xe0, Size: 0x8] 0x715d1c2300
	Cha020UltimateTarget CurrentAttackTarget;//[Offset: 0xe8, Size: 0x8] 0x715d1c2380
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x715d1c2400
	void StartAbility();// 0x3fd9774 0x715d19b5a0
	void SelectNewTarget();// 0x3fd95ec 0x715d19b680
	void RefreshPotentialTargets(const Actor* Cha020Character, out const Vector AbilityCentre, const float EnclosingRadius, const float HeightTolerance);// 0x3fd9600 0x715d19b760
	void OnRep_AttackPoint(Cha020UltimateTarget AttackTarget);// 0x3fd9534 0x715d19b840
	void OnRep_AbilityActive(bool OldValue);// 0x3fd9488 0x715d19b920
	void EndAbility();// 0x3fd95d8 0x715d19ba00

--------------------------------
Class: Cha020UltimateTarget // 715da97240
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8] 0x715dab0800

--------------------------------
Class: HuntersVariantCharacterAbility.DataAsset.Object // 71a4913300
	HuntersCharacterAbility*[] Variants;//[Offset: 0x30, Size: 0x10] 0x715d1b25e0
	HuntersCharacterAbility* GetDefaultVariant();// 0x3fda200 0x715d19b3e0

--------------------------------
Class: HuntersEquippingAbility.HuntersGameplayAbility.GameplayAbility.Object // 71a4912e00
	bool HasAnotherWeaponEquipped(GameplayTag WeaponEquippedTag);// 0x3fda688 0x715d19b300

--------------------------------
Class: HuntersGameplayCueManager.GameplayCueManager.DataAsset.Object // 71a4912b80

--------------------------------
Class: HuntersGameplayEffectsSettings.DeveloperSettings.Object // 71a4912900
	float HeadShotMultiplier;//[Offset: 0x38, Size: 0x4] 0x715d1c3d80
	float BackstabMultiplier;//[Offset: 0x3c, Size: 0x4] 0x715d1c3e00
	class GameplayEffect* StandardDamageEffect;//[Offset: 0x40, Size: 0x28] 0x715d1b1be0
	class GameplayEffect* CriticalDamageEffect;//[Offset: 0x68, Size: 0x28] 0x715d1b1c80
	class GameplayEffect* BackstabDamageEffect;//[Offset: 0x90, Size: 0x28] 0x715d1b1d20
	class GameplayEffect* DebugStunEffect;//[Offset: 0xb8, Size: 0x28] 0x715d1b1dc0
	class GameplayEffect* DebugKnockdownEffect;//[Offset: 0xe0, Size: 0x28] 0x715d1b1e60
	class GameplayEffect* DebugDamageEffect;//[Offset: 0x108, Size: 0x28] 0x715d1b1f00
	class GameplayEffect* DebugKillEffect;//[Offset: 0x130, Size: 0x28] 0x715d1b1fa0
	class GameplayEffect* KillPlaneEffect;//[Offset: 0x158, Size: 0x28] 0x715d1b2040
	class GameplayEffect* StandardDamageEffectRef;//[Offset: 0x180, Size: 0x8] 0x715d1b20e0
	class GameplayEffect* CriticalDamageEffectRef;//[Offset: 0x188, Size: 0x8] 0x715d1b2180
	class GameplayEffect* BackstabDamageEffectRef;//[Offset: 0x190, Size: 0x8] 0x715d1b2220
	class GameplayEffect* DebugStunEffectRef;//[Offset: 0x198, Size: 0x8] 0x715d1b22c0
	class GameplayEffect* DebugDamageEffectRef;//[Offset: 0x1a0, Size: 0x8] 0x715d1b2360
	class GameplayEffect* DebugKnockdownEffectRef;//[Offset: 0x1a8, Size: 0x8] 0x715d1b2400
	class GameplayEffect* DebugKillEffectRef;//[Offset: 0x1b0, Size: 0x8] 0x715d1b24a0
	class GameplayEffect* KillPlaneEffectRef;//[Offset: 0x1b8, Size: 0x8] 0x715d1b2540

--------------------------------
Class: HuntersPassiveSenseAbility.HuntersGameplayAbility.GameplayAbility.Object // 71a4912680
	Actor*[] SensedActorsAuthoritative;//[Offset: 0x6f0, Size: 0x10] 0x715d1b1aa0
	Actor*[] SensedActorsLocal;//[Offset: 0x700, Size: 0x10] 0x715d1b1b40
	delegate OnSensedActorsAuthoritativeChanged;//[Offset: 0x710, Size: 0x10] 0x715d1c3d00
	void OnRep_SensedActorsAuthoritative();// 0x3fdf1e8 0x715d19b220

--------------------------------
Class: HuntersTargetActor_CurrentTarget.GameplayAbilityTargetActor.Actor.Object // 71a4912400

--------------------------------
Class: HuntersTargetActor_OptionalTarget.GameplayAbilityTargetActor.Actor.Object // 71a4912180

--------------------------------
Class: HuntersTargetActor_SelfConfirm.GameplayAbilityTargetActor.Actor.Object // 71a4911f00

--------------------------------
Class: HuntersTargetActor_WithinRadius.GameplayAbilityTargetActor.Actor.Object // 71a4911c80
	float HeightTolerance;//[Offset: 0x320, Size: 0x4] 0x715d1c3a00
	float EnclosingRadius;//[Offset: 0x324, Size: 0x4] 0x715d1c3a80
	Vector Epicentre;//[Offset: 0x328, Size: 0xc] 0x715d1c3b00
	Vector AbilityActivationPoint;//[Offset: 0x334, Size: 0xc] 0x715d1c3b80

--------------------------------
Class: HuntersUltimateAbility.HuntersGameplayAbility.GameplayAbility.Object // 71a4911a00
	int UltimatePointsToActivate;//[Offset: 0x6f0, Size: 0x4] 0x715d1c3980

--------------------------------
Class: HuntersValidatedEffect.GameplayEffect.Object // 71a4911780
	class ValidationRule* ValidationRule;//[Offset: 0x7b8, Size: 0x8] 0x715d1b1a00

--------------------------------
Class: HuntersZiplineGameplayAbility.HuntersGameplayAbility.GameplayAbility.Object // 71a4911500
	GameplayTag BlockActivationTag;//[Offset: 0x6f0, Size: 0x8] 0x715d1c3700
	GameplayTag TraversalAbilityTag;//[Offset: 0x6f8, Size: 0x8] 0x715d1c3780
	GameplayTag HasTargetFromAITag;//[Offset: 0x700, Size: 0x8] 0x715d1c3800
	Vector GetZiplineReticlePosition(const Actor* Target);// 0x45c6aa0 0x715d19b140

--------------------------------
Class: HuntersProjectileInterceptor.Interface.Object // 71a4911280
	bool TryToIntercept(Actor* Actor);// 0x3fe00e4 0x715d19b060

--------------------------------
Class: HuntersSkillTargetingController.Interface.Object // 71a4911000

--------------------------------
Class: Knockbackable.Interface.Object // 71a4910d80
	bool ShouldAllowPredictiveKnockback_ForJumpPad();// 0x3fe08f4 0x715d19adc0
	void OnKnockbackCancelledBeforeLanding();// 0x3fe08d8 0x715d19aea0
	void ApplyKnockback(Vector LaunchVelocity, int KnockbackChannelFlags, PlayerState* SourcePlayerState);// 0x3fe0934 0x715d19af80

--------------------------------
Class: UltimatePointsProvider.Interface.Object // 71a4910b00
	void SetUltimatePoints(int NewExperiencePoints);// 0x3fe1290 0x715d19e400
	int GetUltimatePointsRequired();// 0x3fe11a8 0x715d19e4e0
	int GetUltimatePoints();// 0x3fe133c 0x715d19e5c0
	void AddUltimatePoints(int AmountToAdd);// 0x3fe11e4 0x715d19e6a0

--------------------------------
Class: SkillsEventsBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4910600
	static void TriggerMarkerDartAppliedEvent(Pawn* Source, Pawn* Target);// 0x3fe2558 0x715d19e240

--------------------------------
Class: DamageModMagnitudeCalculation.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object // 71a4910380

--------------------------------
Class: EmergencyHealthModMagnitudeCalculation.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object // 71a4910100

--------------------------------
Class: SimpleDamageModMagnitudeCalculation.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object // 71a491a380

--------------------------------
Class: AbilityInfoBarViewModel.SDViewModel.Object // 71a491a100

--------------------------------
Class: AbilityInfoBarWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4919e80
	AbilityInfoBarViewModel* AbilityInfoViewModel;//[Offset: 0x258, Size: 0x8] 0x715d1c4580
	HuntersPlayerState* OwningPlayerState;//[Offset: 0x260, Size: 0x8] 0x715d1c4600
	void UpdateWithAbilityState(HuntersPlayerState* PlayerState);// 0x45c6aa0 0x715d19d8a0
	void UpdateCharacter(out const MetaTuningDataKey MetaTuningDataKey);// 0x45c6aa0 0x715d19d980
	bool TryGetModeIdFromMapName(FString MapName, out MetaTuningDataKey OutModeId);// 0x4075c98 0x715d19da60
	bool TryGetAbilityDisplayName(out const MetaTuningDataKey CharacterId, int AbilityIndex, out HuntersAbilityName OutDisplayName);// 0x4075da4 0x715d19db40
	void SetupPlayerBindings(HuntersPlayerState* PlayerState);// 0x40759bc 0x715d19dc20
	void RestoreHighlightedCharacter();// 0x45c6aa0 0x715d19dd00
	void OnPlayerPawnClassChanged(HuntersPlayerState* PlayerState);// 0x4075918 0x715d19dde0
	void OnHunterHighlighted(out const MetaTuningDataKey MetaTuningDataKey, bool bIsHighlightFirstLocalPlayer);// 0x407601c 0x715d19dec0
	void HighlightCharacter(out const MetaTuningDataKey MetaTuningDataKey, bool bIsHighlightFirstLocalPlayer);// 0x45c6aa0 0x715d19dfa0
	HuntersEntitlementBase*[] GetEntitlementsArray(out const MetaTuningDataKey CharacterKey, out const MetaTuningDataKey GameModeKey);// 0x4075a60 0x715d19e080
	HuntersCharacterEntitlement* GetCharacterEntitlement(out const MetaTuningDataKey CharacterKey);// 0x4075bd8 0x715d19e160

--------------------------------
Class: ActorIndicatorWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4919c00
	HuntersHitPointBarWidget* HitpointBar;//[Offset: 0x280, Size: 0x8] 0x715d1c6180
	HuntersCharacterIndicatorViewModel* IndicatorViewModel;//[Offset: 0x288, Size: 0x8] 0x715d1c6200
	HuntersDamageNumbersContainerWidget* DamageNumbersContainer;//[Offset: 0x290, Size: 0x8] 0x715d1c6280
	float EnemyDamageDisplayTime;//[Offset: 0x2a0, Size: 0x4] 0x715d1c6300
	void ShowFullDetails();// 0x45c6aa0 0x715d19d280
	bool ShouldShowFullDetails();// 0x40767b0 0x715d19d360
	void SetOwnerActor(Actor* OwnerActor);// 0x40767f0 0x715d19d440
	void SetIndicatorDetailsEvent(FString PlayerName, out const SquadStyle SquadStyle);// 0x45c6aa0 0x715d19d520
	bool IsForcedVisible();// 0x4076894 0x715d19d600
	void HideFullDetails();// 0x45c6aa0 0x715d19d6e0
	void ForceSetIndicatorVisibility(bool bNewVisible);// 0x45c6aa0 0x715d19d7c0

--------------------------------
Class: HuntersHitPointBarWidget.UserWidget.Widget.Visual.Object // 71a491b500
	Image* HitPointBarImage;//[Offset: 0x230, Size: 0x8] 0x715d1cfc80
	Image* HitPointGlowImage;//[Offset: 0x238, Size: 0x8] 0x715d1cfd00
	void UpdateAppearance();// 0x408a9b0 0x715d1d4680
	void SetOwnerActor(Actor* OwnerActor);// 0x408a9c4 0x715d1d4760

--------------------------------
Class: HuntersCharacterIndicatorViewModel.SDViewModel.Object // 71a491c400
	Actor* OwnerActor;//[Offset: 0x68, Size: 0x8] 0x715d1cd980
	bool IsSquadMember();// 0x4088c4c 0x715d1d5560
	bool IsEnemyDamageTimerHandleValid();// 0x4088c70 0x715d1d5640
	void CheckVisibility();// 0x4088c94 0x715d1d1d60

--------------------------------
Class: HuntersDamageNumbersContainerWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491bf00
	World* World;//[Offset: 0x298, Size: 0x8] 0x715d1ce980
	float CumulativeDamageDelay;//[Offset: 0x2a0, Size: 0x4] 0x715d1cea00
	void OnShieldChanged(const HuntersPlayerState* InstigatorState, float DamageAmount);// 0x45c6aa0 0x715d1d4a00
	void OnHealthChanged(const HuntersPlayerState* InstigatorState, float DamageAmount, bool bCausedByCritical, bool bGlancingBlow);// 0x45c6aa0 0x715d1d4ae0
	void K2_RestartWidget();// 0x45c6aa0 0x715d1d4bc0

--------------------------------
Class: ActorTargetedContainer.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4919980
	ActorTargetedContainerViewModel* ActorTargetedContainerViewModel;//[Offset: 0x258, Size: 0x8] 0x715d1c5e80
	CanvasPanel* TargetIndicatorCanvas;//[Offset: 0x260, Size: 0x8] 0x715d1c5f00
	class ActorTargetedIndicator* TargetIndicatorBlueprint;//[Offset: 0x268, Size: 0x8] 0x715d1b1780
	ActorTargetedIndicator*[] ActiveTargetedIndicators;//[Offset: 0x270, Size: 0x10] 0x715d1b1820
	ActorTargetedIndicator*[] InactiveTargetedIndicators;//[Offset: 0x280, Size: 0x10] 0x715d1b18c0
	void TargetedStateChanged(ActorTargetedViewModel* InViewModel, const bool bIsTargeted);// 0x40770ec 0x715d19d1a0

--------------------------------
Class: ActorTargetedViewModel.SDListenerViewModel.SDViewModel.Object // 71a4919200
	ColorBindable IndicatorColor;//[Offset: 0x90, Size: 0x88] 0x715d1c5a00
	ColorBindable IndicatorHighlightColor;//[Offset: 0x118, Size: 0x88] 0x715d1c5a80
	ColorBindable IndicatorGlowColor;//[Offset: 0x1a0, Size: 0x88] 0x715d1c5b00

--------------------------------
Class: ActorTargetedContainerViewModel.SDListenerViewModel.SDViewModel.Object // 71a4919700
	ActorTargetedViewModel*[] ActiveViewModels;//[Offset: 0x88, Size: 0x10] 0x715d1b1640
	ActorTargetedViewModel*[] InactiveViewModels;//[Offset: 0x98, Size: 0x10] 0x715d1b16e0

--------------------------------
Class: ActorTargetedIndicator.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4919480
	ActorTargetedViewModel* ActorTargetedViewModel;//[Offset: 0x260, Size: 0x8] 0x715d1c5b80
	Image* TargetIndicator;//[Offset: 0x268, Size: 0x8] 0x715d1c5c00
	CanvasPanelSlot* IndicatorCanvasPanelSlot;//[Offset: 0x270, Size: 0x8] 0x715d1c5c80
	void OnTargetIndicatorTypeChanged(enum NewIndicatorType);// 0x45c6aa0 0x715d19d0c0

--------------------------------
Class: AmmoBarWidgetBar.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4918f80
	void OnAmmoChanged(float Ammo, float MaxAmmo, int SpecialAmmoPerMagazine, bool IsContinous);// 0x45c6aa0 0x715d19cfe0

--------------------------------
Class: BadgeWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4918d00
	Image* FrameImage;//[Offset: 0x260, Size: 0x8] 0x715d1c5500
	Image* IconImage;//[Offset: 0x268, Size: 0x8] 0x715d1c5580
	Image* IconImageUnder;//[Offset: 0x270, Size: 0x8] 0x715d1c5600
	Image* FlashCenter;//[Offset: 0x278, Size: 0x8] 0x715d1c5680
	Image* GlowEdge;//[Offset: 0x280, Size: 0x8] 0x715d1c5700
	HuntersRevealTextWidget* RevealText;//[Offset: 0x288, Size: 0x8] 0x715d1c5780
	void PlayBadgeAwardedAnimation();// 0x45c6aa0 0x715d19ce20
	void NotifyBadgeAwardedAnimationComplete();// 0x40782e0 0x715d19cf00

--------------------------------
Class: HuntersRevealTextWidget.UserWidget.Widget.Visual.Object // 71a4b3e700
	CanvasPanel* Mask;//[Offset: 0x230, Size: 0x8] 0x715cd6af00
	CanvasPanel* TextContainer;//[Offset: 0x238, Size: 0x8] 0x715cd6af80
	SDConfigurableTextBlock* TextBlock;//[Offset: 0x240, Size: 0x8] 0x715cd6b000
	float RevealProgress;//[Offset: 0x248, Size: 0x4] 0x715cd6b080
	bool bRightToLeftReveal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1] 0x715cd6b100
	FText Text;//[Offset: 0x250, Size: 0x18] 0x715cd6b180
	FName ConfigPropertyName;//[Offset: 0x268, Size: 0x8] 0x715cd6b200
	FName ColorThemeName;//[Offset: 0x270, Size: 0x8] 0x715cd6b280
	FName ShadowColorThemeName;//[Offset: 0x278, Size: 0x8] 0x715cd6b300
	Vector2D ShadowOffset;//[Offset: 0x280, Size: 0x8] 0x715cd6b380
	delegate RevealProgressDelegate;//[Offset: 0x288, Size: 0x10] 0x715cd6b400
	void SetRevealProgress(float InRevealProgress);// 0x69ab09c 0x715cd54a00

--------------------------------
Class: BadgeAwardIndicatorWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4918a80
	HorizontalBox* BadgeHolder;//[Offset: 0x258, Size: 0x8] 0x715d1c5380
	class BadgeWidget* BadgeBlueprint;//[Offset: 0x260, Size: 0x8] 0x715d1b1500
	void OnBadgesAwarded(HuntersPlayerState* PlayerState, GameplayTagContainer BadgeIds);// 0x4078778 0x715d19cd40

--------------------------------
Class: BlueprintFunctionLibraryUIEvents.BlueprintFunctionLibrary.Object // 71a4918800
	static void SetTargetUIIndicator(Actor* TargetActor, const bool IsTargeted, enum TypeOfDisplay, enum TargetingMode, GenericTeamId TeamID);// 0x4078cc8 0x715d19cb80
	static void SetActorActionIndicator(Actor* TargetActor, const bool IsEnteringAction, const FString ActionIdentifier);// 0x4078b38 0x715d19cc60

--------------------------------
Class: BRBiomeSectorNamesAsset.DataAsset.Object // 71a4918580
	<FName,FText> BiomeNameMap;//[Offset: 0x30, Size: 0x50] 0x715cecce80
	<FName,FText> SectorNameMap;//[Offset: 0x80, Size: 0x50] 0x715ceccf40

--------------------------------
Class: BRHUDIconsDataAsset.DataAsset.Object // 71a4918300
	Texture2D* PlayersRemainingIcon;//[Offset: 0x30, Size: 0x8] 0x715d1c6e00

--------------------------------
Class: BRStatViewModel.SDListenerViewModel.SDViewModel.Object // 71a4918080
	TextBindable StatText;//[Offset: 0x70, Size: 0x98] 0x715d1c6d00
	Texture2DBindable StatIcon;//[Offset: 0x108, Size: 0x78] 0x715d1c6d80

--------------------------------
Class: ChannelBar.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4917e00
	GameplayTagContainer ChannelingTags;//[Offset: 0x278, Size: 0x20] 0x715d1c6b80
	GameplayEffectQuery GameplayEffectQuery;//[Offset: 0x298, Size: 0x150] 0x715d1c6c00
	void OnValueChanged(float NewValue);// 0x45c6aa0 0x715d19fe40
	void OnPossessed();// 0x45c6aa0 0x715d19ff20
	void EnableTimer();// 0x40797b8 0x715d19caa0

--------------------------------
Class: CharacterStickerWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4917b80
	WidgetAnimation* OpenAnimation;//[Offset: 0x280, Size: 0x8] 0x715d1c6800
	WidgetAnimation* CloseAnimation;//[Offset: 0x288, Size: 0x8] 0x715d1c6880
	WidgetAnimation* TrimAnimation;//[Offset: 0x290, Size: 0x8] 0x715d1c6900
	CanvasPanel* CanvasPanel;//[Offset: 0x298, Size: 0x8] 0x715d1c6980
	Border* StickerBorder;//[Offset: 0x2a0, Size: 0x8] 0x715d1c6a00
	void SetSticker(out const SlateBrush NewSticker);// 0x4079c5c 0x715d19fac0
	void SetOwnerActor(Actor* OwnerActor);// 0x4079e20 0x715d19fba0
	void PlayOpenAnimation();// 0x45c6aa0 0x715d19fc80
	void PlayCloseAnimation();// 0x45c6aa0 0x715d19fd60

--------------------------------
Class: ChargeBarWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4917900
	Actor* PossessedPawn;//[Offset: 0x280, Size: 0x8] 0x715d1c6600
	void OnOwningPlayerCharacterUnpossessed();// 0x45c6aa0 0x715d19f900
	void OnChargeChanged(float NewCharge, float ChargeThreshold, float MaxCharge);// 0x45c6aa0 0x715d19f9e0

--------------------------------
Class: CompassViewModel.SDListenerViewModel.SDViewModel.Object // 71a4917680
	TextBindable CameraAngleText;//[Offset: 0x70, Size: 0x98] 0x715d1c6480
	TextBindable BiomeText;//[Offset: 0x108, Size: 0x98] 0x715d1c6500
	TextBindable SectorText;//[Offset: 0x1a0, Size: 0x98] 0x715d1c6580

--------------------------------
Class: HuntersHUDWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4917180
	TimedObjectiveWidget* TimedObjectiveWidget;//[Offset: 0x278, Size: 0x8] 0x715d1c8080
	GameEventDisplayWidget* GameEventDisplayWidget;//[Offset: 0x280, Size: 0x8] 0x715d1c8100
	PlayerNotificationDisplayWidget* PlayerNotificationDisplayWidget;//[Offset: 0x288, Size: 0x8] 0x715d1c8180
	ActorTargetedContainer* ActorTargetedContainer;//[Offset: 0x290, Size: 0x8] 0x715d1c8200
	HuntersObjectiveStatusWidget* ObjectiveStatusWidget;//[Offset: 0x298, Size: 0x8] 0x715d1c8280
	ObjectiveCountdownWidget* ObjectiveCountdownWidget;//[Offset: 0x2a0, Size: 0x8] 0x715d1c8300
	HuntersMatchHUD* HUD;//[Offset: 0x2a8, Size: 0x8] 0x715d1c8380
	HuntersMatchViewModel* MatchViewModel;//[Offset: 0x2b0, Size: 0x8] 0x715d1c8400
	void InitializeFromBlueprint(Actor* InOwningActor);// 0x408add4 0x715d19f740
	void CinematicEventTriggered(out const enum EventType);// 0x45c6aa0 0x715d19f820

--------------------------------
Class: TimedObjectiveWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4946280
	SDConfigurableTextBlock* ObjectiveLabel;//[Offset: 0x258, Size: 0x8] 0x715d1ebc00
	SDConfigurableTextBlock* TimeLabel;//[Offset: 0x260, Size: 0x8] 0x715d1ebc80
	WidgetAnimation* ShowObjectiveAnimation;//[Offset: 0x268, Size: 0x8] 0x715d1ebd00
	WidgetAnimation* HideObjectiveAnimation;//[Offset: 0x270, Size: 0x8] 0x715d1ebd80
	TimedObjectiveViewModel* TimedObjectiveViewModel;//[Offset: 0x278, Size: 0x8] 0x715d1ebe00
	void OnObjectiveStarted();// 0x40a6f34 0x715d1dd520
	void OnObjectiveEnded();// 0x40a6f20 0x715d1dd600

--------------------------------
Class: TimedObjectiveViewModel.SDListenerViewModel.SDViewModel.Object // 71a4946500
	TextBindable ObjectiveText;//[Offset: 0xa8, Size: 0x98] 0x715d1ebe80
	TextBindable TimeText;//[Offset: 0x140, Size: 0x98] 0x715d1ebf00

--------------------------------
Class: GameEventDisplayWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491f600
	NotificationWidget* NotificationWidget;//[Offset: 0x258, Size: 0x8] 0x715d1ca480
	CanvasPanel* CustomWidgetCanvas;//[Offset: 0x260, Size: 0x8] 0x715d1ca500
	GameEventDisplayViewModel* GameEventDisplayViewModel;//[Offset: 0x270, Size: 0x8] 0x715d1c8480

--------------------------------
Class: NotificationWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4949e80
	SDConfigurableTextBlock* NotificationLabel;//[Offset: 0x260, Size: 0x8] 0x715d1e6400
	Image* LeftArrow;//[Offset: 0x268, Size: 0x8] 0x715d1e6480
	Image* RightArrow;//[Offset: 0x270, Size: 0x8] 0x715d1e6500
	Border* NotificationBorder;//[Offset: 0x278, Size: 0x8] 0x715d1e6580
	NotificationViewModel* NotificationViewModel;//[Offset: 0x280, Size: 0x8] 0x715d1e6600
	WidgetAnimation* NotificationAnimation;//[Offset: 0x2a8, Size: 0x8] 0x715d1e6680
	void TeamNameChanged();// 0x45c6aa0 0x715d1d9460
	void SetTextColorToShadowColor(TextBlock* TextBlock);// 0x409c338 0x715d1d9540
	void SetTextColor(TextBlock* TextBlock);// 0x409c3dc 0x715d1d9620
	void SetTextAndShadowColor(TextBlock* TextBlock);// 0x409c480 0x715d1d9700

--------------------------------
Class: NotificationViewModel.SDListenerViewModel.SDViewModel.Object // 71a4941000
	TextBindable NotificationText;//[Offset: 0x98, Size: 0x98] 0x715d1e7280
	ColorBindable TextColor;//[Offset: 0x130, Size: 0x88] 0x715d1e7300
	ColorBindable BackgroundColor;//[Offset: 0x1b8, Size: 0x88] 0x715d1e7380
	LinearColor GetTextColorRaw();// 0x409a924 0x715d1d9d20
	FString GetTeamName();// 0x409a884 0x715d1d9e00
	byte GetTeamAttitude();// 0x409a908 0x715d1d9ee0
	LinearColor GetBackgroundColorRaw();// 0x409a940 0x715d1d9fc0

--------------------------------
Class: GameEventDisplayViewModel.SDListenerViewModel.SDViewModel.Object // 71a4915380
	NotificationViewModel* NotificationViewModel;//[Offset: 0x80, Size: 0x8] 0x715d1c8500

--------------------------------
Class: PlayerNotificationDisplayWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4948800
	VerticalBox* VerticalBoxContainer;//[Offset: 0x258, Size: 0x8] 0x715d1e8f80
	class NotificationWidget* DefaultWidget;//[Offset: 0x260, Size: 0x8] 0x715d1b60a0
	PlayerNotificationDisplayViewModel* PlayerNotificationDisplayViewModel;//[Offset: 0x268, Size: 0x8] 0x715d1e9000
	void RemoveOldNotifications();// 0x409e9fc 0x715d1dc100
	void DisplayNotification(NotificationViewModel* NotificationViewModel);// 0x409ea10 0x715d1dc1e0

--------------------------------
Class: PlayerNotificationDisplayViewModel.SDListenerViewModel.SDViewModel.Object // 71a4948a80
	NotificationViewModel*[] CurrentNotifications;//[Offset: 0x80, Size: 0x10] 0x715d1b6140
	NotificationViewModel*[] ViewModels;//[Offset: 0xc0, Size: 0x10] 0x715d1b61e0
	CustomNotificationData_String* StringDataObject;//[Offset: 0xe0, Size: 0x8] 0x715d1e9200
	CustomNotificationData_MultiDefeat* MultiDefeatDataObject;//[Offset: 0xe8, Size: 0x8] 0x715d1e9280
	void ResetKillCount();// 0x409e5f8 0x715d1dc2c0
	void NotificationDone();// 0x409e60c 0x715d1dc3a0

--------------------------------
Class: CustomNotificationData_String.CustomNotificationData.Object // 71a4b82900
	FString StringData;//[Offset: 0x28, Size: 0x10] 0x715cdd6d00

--------------------------------
Class: CustomNotificationData.Object // 71a4b83080

--------------------------------
Class: CustomNotificationData_MultiDefeat.CustomNotificationData.Object // 71a4b82400
	int StreakKillCount;//[Offset: 0x28, Size: 0x4] 0x715cdd6b80
	int EnemySquadSize;//[Offset: 0x2c, Size: 0x4] 0x715cdd6c00

--------------------------------
Class: HuntersObjectiveStatusWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4944980
	HuntersObjectiveStatusViewModel* MyViewModel;//[Offset: 0x258, Size: 0x8] 0x715d1e3c00
	void ShowCaptureMeter();// 0x45c6aa0 0x715d1d8120
	void SetCaptureProgress(float Progress);// 0x45c6aa0 0x715d1d8200
	void OnOvertimeChanged(bool bIsOvertime);// 0x45c6aa0 0x715d1d82e0
	void OnContestedChanged(bool bContested);// 0x45c6aa0 0x715d1d83c0
	void HideCaptureMeter();// 0x45c6aa0 0x715d1d84a0

--------------------------------
Class: HuntersObjectiveStatusViewModel.SDListenerViewModel.SDViewModel.Object // 71a4944c00
	bool bInOvertime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x715d1e3e00
	bool bIsContested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1] 0x715d1e3e80

--------------------------------
Class: ObjectiveCountdownWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4949980
	ObjectiveCountdownViewModel* MyViewModel;//[Offset: 0x258, Size: 0x8] 0x715d1e8080
	void SetWidgetActive(bool bActive);// 0x45c6aa0 0x715d1dc9c0
	void SetUnlockMessage_Blueprint(out const FText Message);// 0x45c6aa0 0x715d1d90e0
	void SetUnlockMessage(FText Message);// 0x409cd10 0x715d1d91c0
	void SetCountdownTimer(float StartTimestamp, float Duration);// 0x409ced0 0x715d1d92a0
	bool GetTimerActive();// 0x409ce98 0x715d1d9380

--------------------------------
Class: ObjectiveCountdownViewModel.SDListenerViewModel.SDViewModel.Object // 71a4949c00
	TextBindable SecondsRemainingText;//[Offset: 0x78, Size: 0x98] 0x715d1e8400
	GameStateBase* CachedGameState;//[Offset: 0x148, Size: 0x8] 0x715d1e6380

--------------------------------
Class: HuntersMatchHUD.HuntersCommonHUD.HUD.Actor.Object // 71a4945100
	class HuntersHUDWidget* HUDWidget;//[Offset: 0x328, Size: 0x8] 0x715d1b4480
	int ZOrder;//[Offset: 0x330, Size: 0x4] 0x715d1e4100
	HuntersHUDWidget* HUDWidgetInstance;//[Offset: 0x338, Size: 0x8] 0x715d1e4180
	HuntersMatchViewModel* MatchViewModel;//[Offset: 0x340, Size: 0x8] 0x715d1e4200
	void OnMatchWidgetAddedToViewport();// 0x4091f08 0x715d1d8660
	HuntersMatchViewModel* GetMatchViewModel();// 0x4091f1c 0x715d1d8740

--------------------------------
Class: HuntersMatchViewModel.SDListenerViewModel.SDViewModel.Object // 71a4944e80
	<PlayerState*,HunterViewModel*> HunterViewModelMap;//[Offset: 0xd0, Size: 0x50] 0x715ceccd00
	HunterViewModel* GetHunterViewModel(PlayerState* TargetPlayerState);// 0x409236c 0x715d1d8580

--------------------------------
Class: HunterViewModel.CustomHUDViewModel.SDListenerViewModel.SDViewModel.Object // 71a4942680
	ThreatDisplayData ThreatDisplayData;//[Offset: 0xc0, Size: 0xc] 0x715d1e4300
	bool IsOwnedByLocalPlayerBP();// 0x409637c 0x715d1da6c0
	bool IsHUDHiddenByCinematic();// 0x4096360 0x715d1da7a0
	ThreatDisplayData GetThreatDisplayData();// 0x4096398 0x715d1da880

--------------------------------
Class: CustomHUDViewModel.SDListenerViewModel.SDViewModel.Object // 71a4916f00

--------------------------------
Class: ThreatDisplayData // 715da96a00
	float GrossThreat;//[Offset: 0x0, Size: 0x4] 0x715dab2880
	float RelativeThreat;//[Offset: 0x4, Size: 0x4] 0x715dab2900
	bool bIsHighestThreat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715dab2980

--------------------------------
Class: ControlPointHUDWidget.HuntersHUDWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4917400
	CanvasPanel* FriendlyProgress;//[Offset: 0x2b8, Size: 0x8] 0x715d1c7f00
	CanvasPanel* EnemyProgress;//[Offset: 0x2c0, Size: 0x8] 0x715d1c7f80
	CanvasPanel* CentralIcon;//[Offset: 0x2c8, Size: 0x8] 0x715d1c8000

--------------------------------
Class: EscortHUDWidget.HuntersHUDWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4916c80
	MatchCountdownWidget* MatchCountdownWidget;//[Offset: 0x2b8, Size: 0x8] 0x715d1c7c80
	EscortProgressWidget* EscortProgressWidget;//[Offset: 0x2c0, Size: 0x8] 0x715d1c7d00
	VerticalBox* TimerVerticalBox;//[Offset: 0x2c8, Size: 0x8] 0x715d1c7d80
	void BroadcastEscortableMoveStateChange(out const enum EscortableMoveState);// 0x407ae50 0x715d19f580
	void BroadcastBarrierUnlockTime(float BarrierUnlockTime);// 0x407af04 0x715d19f660

--------------------------------
Class: MatchCountdownWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4941500
	WidgetAnimation* PulseAnimation;//[Offset: 0x258, Size: 0x8] 0x715d1e5680
	WidgetAnimation* AurebeshIntro;//[Offset: 0x260, Size: 0x8] 0x715d1e5700
	WidgetAnimation* AurebeshOutro;//[Offset: 0x268, Size: 0x8] 0x715d1e5780
	MatchCountdownViewModel* MatchCountdownViewModel;//[Offset: 0x270, Size: 0x8] 0x715d1e5800
	int SecondsToCountdown;//[Offset: 0x278, Size: 0x4] 0x715d1e5880
	void OnCountdownNumberChanged(out const enum CountdownChangeType);// 0x409a184 0x715d1da0a0

--------------------------------
Class: MatchCountdownViewModel.SDListenerViewModel.SDViewModel.Object // 71a4941780
	TextBindable CountdownText;//[Offset: 0x90, Size: 0x98] 0x715d1e5980
	TextBindable AurebeshText;//[Offset: 0x128, Size: 0x98] 0x715d1e5a00

--------------------------------
Class: EscortProgressWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4915600
	HorizontalBox* ProgressBarContainer;//[Offset: 0x258, Size: 0x8] 0x715d1c8580
	EscortProgressViewModel* ProgressViewModel;//[Offset: 0x260, Size: 0x8] 0x715d1c8600
	class EscortProgressSegmentWidget* FirstSegmentBlueprint;//[Offset: 0x268, Size: 0x8] 0x715d1b3580
	class EscortProgressSegmentWidget* SubsequentSegmentBlueprint;//[Offset: 0x270, Size: 0x8] 0x715d1b3620
	EscortProgressSegmentWidget*[] SegmentWidgets;//[Offset: 0x278, Size: 0x10] 0x715d1b36c0
	void RequestDataInitialization();// 0x45c6aa0 0x715d1d1580
	void OnGameStateSetEvent(GameStateBase* GameStateBase);// 0x4080854 0x715d1d1660
	void CreateChildren();// 0x40808f8 0x715d1d1740

--------------------------------
Class: EscortProgressViewModel.SDListenerViewModel.SDViewModel.Object // 71a4915880
	EscortProgressSegmentViewModel*[] SegmentViewModels;//[Offset: 0x88, Size: 0x10] 0x715d1b3760
	void UpdateCurrentDistance(float CurrentDistance);// 0x407cd4c 0x715d1d1820
	void SetLocalPlayerEscorting(bool IsLocalPlayerEscorting);// 0x407cca0 0x715d1d1900
	void InitializeData(out const float[] SegmentLengths, const float ProgressBarTotalLength);// 0x407cdf0 0x715d1d19e0

--------------------------------
Class: EscortProgressSegmentViewModel.SDListenerViewModel.SDViewModel.Object // 71a4915d80
	FloatBindable ProgressValue;//[Offset: 0xd0, Size: 0x70] 0x715d1c9080
	LinearColor TeamBaseColor;//[Offset: 0x154, Size: 0x10] 0x715d1c9100
	LinearColor TeamHighlightColor;//[Offset: 0x164, Size: 0x10] 0x715d1c9180

--------------------------------
Class: EscortProgressSegmentWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4915b00
	RetainerBox* MaterialRetainerBox;//[Offset: 0x270, Size: 0x8] 0x715d1c8a00
	Image* EscortMaskImage;//[Offset: 0x278, Size: 0x8] 0x715d1c8a80
	Image* BorderAnimImage;//[Offset: 0x280, Size: 0x8] 0x715d1c8b00
	EscortProgressMarkerWidget* ProgressMarker;//[Offset: 0x288, Size: 0x8] 0x715d1c8b80
	WidgetAnimation* CapturedAnim;//[Offset: 0x290, Size: 0x8] 0x715d1c8c00
	EscortProgressSegmentViewModel* SegmentViewModel;//[Offset: 0x298, Size: 0x8] 0x715d1c8c80
	FName MaterialProgressValueName;//[Offset: 0x2a0, Size: 0x8] 0x715d1c8d00
	FName MaterialMainColorName;//[Offset: 0x2a8, Size: 0x8] 0x715d1c8d80
	FName MaterialAccentColorName;//[Offset: 0x2b0, Size: 0x8] 0x715d1c8e00
	FName MaterialCaptureAnimPowerName;//[Offset: 0x2b8, Size: 0x8] 0x715d1c8e80
	MaterialInstanceDynamic* RetainerBoxMaterial;//[Offset: 0x2c0, Size: 0x8] 0x715d1c8f00
	void UpdateSegmentWidth();// 0x407c70c 0x715d1d1ac0
	void UpdateSegmentColours();// 0x407c720 0x715d1d1ba0
	void UpdateBarState(const enum NewState, const enum OldState);// 0x407c624 0x715d1d1c80
	void SegmentCaptured();// 0x45c6aa0 0x715d19e780

--------------------------------
Class: EscortProgressMarkerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4916000
	Image* Icon;//[Offset: 0x258, Size: 0x8] 0x715d1c9200
	EscortProgressSegmentViewModel* SegmentViewModel;//[Offset: 0x260, Size: 0x8] 0x715d1c9280
	void UpdateSegmentWidth();// 0x407bac0 0x715d19e860
	void UpdateMovementState();// 0x407baac 0x715d19e940
	void UpdateMarkerState(const enum NewState, const enum OldState);// 0x407b9c4 0x715d19ea20
	void OnProgressResumed();// 0x45c6aa0 0x715d19eb00
	void DisplayStationaryState();// 0x45c6aa0 0x715d19ebe0
	void DisplaySegmentComplete();// 0x45c6aa0 0x715d19ecc0
	void DisplayProgressStarted(const bool bIsFirstSegment);// 0x45c6aa0 0x715d19eda0
	void DisplayNeutralState();// 0x45c6aa0 0x715d19ee80
	void DisplayLosingProgress();// 0x45c6aa0 0x715d19ef60
	void DisplayLocked(bool bIsFirstSegment);// 0x45c6aa0 0x715d19f040
	void DisplayContested();// 0x45c6aa0 0x715d19f120

--------------------------------
Class: ScreenClampedIndicatorViewModel.SDListenerViewModel.SDViewModel.Object // 71a4916780
	bool OnlyShowIfOffScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715d1c7700
	bool bCalculateDistanceToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x715d1c7780
	Vector WidgetOffset;//[Offset: 0xa0, Size: 0xc] 0x715d1c7800
	VisibilityBindable WidgetVisibility;//[Offset: 0xb0, Size: 0x70] 0x715d1c7880
	VisibilityBindable WidgetVisibilityOnlyWhenObjectOffscreen;//[Offset: 0x120, Size: 0x70] 0x715d1c7900
	FloatBindable RenderAngle;//[Offset: 0x190, Size: 0x70] 0x715d1c7980
	TextBindable DistanceToPlayer;//[Offset: 0x200, Size: 0x98] 0x715d1c7a00
	FloatBindable InverseRenderAngle;//[Offset: 0x2a0, Size: 0x70] 0x715d1c7a80
	PlayerController* RelativePlayer;//[Offset: 0x310, Size: 0x8] 0x715d1c7b00
	bool GetIsOnScreen();// 0x680b790 0x715d19f3c0
	float GetDistanceToPlayerValue();// 0x680b774 0x715d19f4a0

--------------------------------
Class: EscortIndicatorViewModel.ScreenClampedIndicatorViewModel.SDListenerViewModel.SDViewModel.Object // 71a4916a00
	EscortProgressSegmentViewModel*[] SegmentViewModels;//[Offset: 0x350, Size: 0x10] 0x715d1b3b20
	EscortProgressSegmentViewModel* CurrentSegmentViewModel;//[Offset: 0x360, Size: 0x8] 0x715d1c7680

--------------------------------
Class: ScreenClampedIndicatorWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4916280
	ScreenClampedIndicatorViewModel* IndicatorViewModel;//[Offset: 0x260, Size: 0x8] 0x715d1c7500
	void OnScreenChanged(bool bNewOnScreen);// 0x45c6aa0 0x715d19f2e0

--------------------------------
Class: EscortIndicatorWidget.ScreenClampedIndicatorWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4916500
	EscortProgressMarkerWidget* MarkerWidget;//[Offset: 0x270, Size: 0x8] 0x715d1c7400
	EscortIndicatorViewModel* EscortIndicatorViewModel;//[Offset: 0x278, Size: 0x8] 0x715d1c7480
	void OnEscortSegmentChanged();// 0x407b64c 0x715d19f200

--------------------------------
Class: GameModeViewModel.CustomHUDViewModel.SDListenerViewModel.SDViewModel.Object // 71a491f380

--------------------------------
Class: GameplayFeedItemWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491f100
	RichTextBlock* RichText;//[Offset: 0x258, Size: 0x8] 0x715d1ca400
	void OnRemoveTimerComplete();// 0x40813c0 0x715d1d14a0

--------------------------------
Class: GameplayFeedWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491ee80
	int MaxElements;//[Offset: 0x278, Size: 0x4] 0x715d1c9b00
	float ItemOpacityMax;//[Offset: 0x27c, Size: 0x4] 0x715d1c9b80
	float ItemOpacityMin;//[Offset: 0x280, Size: 0x4] 0x715d1c9c00
	float LifeTime;//[Offset: 0x284, Size: 0x4] 0x715d1c9c80
	class GameplayFeedItemWidget* FeedItemClass;//[Offset: 0x288, Size: 0x8] 0x715d1b3440
	GridPanel* FeedGrid;//[Offset: 0x290, Size: 0x8] 0x715d1c9d00
	FText PlayerMarkedFormat;//[Offset: 0x298, Size: 0x18] 0x715d1c9d80
	FText HunterEliminatedFormat;//[Offset: 0x2b0, Size: 0x18] 0x715d1c9e00
	FText HunterEliminatedByHunterFormat;//[Offset: 0x2c8, Size: 0x18] 0x715d1c9e80
	FText GoalFormat;//[Offset: 0x2e0, Size: 0x18] 0x715d1c9f00
	FText OwnGoalFormat;//[Offset: 0x2f8, Size: 0x18] 0x715d1c9f80
	FString HunterNameArgument;//[Offset: 0x310, Size: 0x10] 0x715d1ca000
	FString HunterColourArgument;//[Offset: 0x320, Size: 0x10] 0x715d1ca080
	FString InstigatorColourArgument;//[Offset: 0x330, Size: 0x10] 0x715d1ca100
	FString InstigatorNameArgument;//[Offset: 0x340, Size: 0x10] 0x715d1ca180
	FString EliminatedColourArgument;//[Offset: 0x350, Size: 0x10] 0x715d1ca200
	FString EliminatedNameArgument;//[Offset: 0x360, Size: 0x10] 0x715d1ca280
	FString TargetArgument;//[Offset: 0x370, Size: 0x10] 0x715d1ca300
	GameplayFeedItemWidget*[] FeedItemWidgets;//[Offset: 0x380, Size: 0x10] 0x715d1b34e0

--------------------------------
Class: HBIndicatorViewModel.ScreenClampedIndicatorViewModel.SDListenerViewModel.SDViewModel.Object // 71a491ec00
	GameStateBase* CachedGameState;//[Offset: 0x358, Size: 0x8] 0x715d1cb180
	CurveFloat* CircleSizeCurve;//[Offset: 0x360, Size: 0x8] 0x715d1cb200
	CurveFloat* CircleSegmentsCurve;//[Offset: 0x368, Size: 0x8] 0x715d1cb280
	FName SegmentParamName;//[Offset: 0x370, Size: 0x8] 0x715d1cb300
	FName DeltaTimeParamName;//[Offset: 0x378, Size: 0x8] 0x715d1cb380
	FName ScaleParamName;//[Offset: 0x380, Size: 0x8] 0x715d1cb400
	FName LineThicknessParamName;//[Offset: 0x388, Size: 0x8] 0x715d1cb480
	FName SegmentSpaceParamName;//[Offset: 0x390, Size: 0x8] 0x715d1cb500
	float RingRotationSpeed;//[Offset: 0x398, Size: 0x4] 0x715d1cb580
	float SegmentSpace;//[Offset: 0x39c, Size: 0x4] 0x715d1c9500
	int MaxSegmentCount;//[Offset: 0x3a0, Size: 0x4] 0x715d1c9580
	int MinSegmentCount;//[Offset: 0x3a4, Size: 0x4] 0x715d1c9600
	float CircleIconFadeStartDistance;//[Offset: 0x3a8, Size: 0x4] 0x715d1c9680
	float CircleIconFadeEndDistance;//[Offset: 0x3ac, Size: 0x4] 0x715d1c9700
	float CircleIconFadeOuterRadius;//[Offset: 0x3b0, Size: 0x4] 0x715d1c9780
	float CircleIconFadeInnerRadius;//[Offset: 0x3b4, Size: 0x4] 0x715d1c9800
	float CircleIconFadeAmount;//[Offset: 0x3b8, Size: 0x4] 0x715d1c9880
	TextBindable ResetTimeText;//[Offset: 0x3d0, Size: 0x98] 0x715d1c9900
	FloatBindable ResetTimeOpacity;//[Offset: 0x468, Size: 0x70] 0x715d1c9980
	FloatBindable CircleIconOpacity;//[Offset: 0x4d8, Size: 0x70] 0x715d1c9a00
	MaterialInstanceDynamic* RotatingRingMaterial;//[Offset: 0x548, Size: 0x8] 0x715d1c9a80

--------------------------------
Class: HBIndicatorWidget.ScreenClampedIndicatorWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491e980
	Image* OuterRingImage;//[Offset: 0x270, Size: 0x8] 0x715d1caf80
	HBIndicatorViewModel* HBIndicatorViewModel;//[Offset: 0x278, Size: 0x8] 0x715d1cb000
	void SetMaterialInstance(MaterialInstanceDynamic* Material);// 0x4081db4 0x715d1d1120
	void HuttballResetTimerStarted(out const BAReplicatedTimer Timer);// 0x4081e6c 0x715d1d1200
	void HuttballResetTimerInterrupted();// 0x4081e58 0x715d1d12e0
	void HuttballDropped();// 0x45c6aa0 0x715d1d13c0

--------------------------------
Class: HealthInfo.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491e700
	Actor* PossessedPawn;//[Offset: 0x278, Size: 0x8] 0x715d1cad00
	void OverrideActorOwner(Actor* NewActorOwner);// 0x40822f0 0x715d1d0be0
	void OnUnPossessed();// 0x45c6aa0 0x715d1d0cc0
	void OnReceiveDeferredDamage(float Magnitude);// 0x45c6aa0 0x715d1d0da0
	void OnPossessed(const HuntersCharacterBase* TargetPawn);// 0x45c6aa0 0x715d1d0e80
	void OnPlayerEliminated();// 0x45c6aa0 0x715d1d0f60
	void OnHitpointsChanged(const HuntersHealthAttributeSet* HitpointsAttributeSet);// 0x45c6aa0 0x715d1d1040

--------------------------------
Class: HitMarker.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491e480
	void ShowKillMarker();// 0x45c6aa0 0x715d1d0a20
	void ShowHitMarker();// 0x45c6aa0 0x715d1d0b00

--------------------------------
Class: HUDBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a491e200
	static void TriggerUICinematicEvent(Object* WorldContextObject, enum SequenceEventType);// 0x4082f08 0x715d1d0780
	static void StopHighlightAnimation(Object* WorldContextObject);// 0x4082fe0 0x715d1d0860
	static void NotifyHighlightAnimation(Object* WorldContextObject, enum WidgetType, int NumLoops);// 0x4083074 0x715d1d0940

--------------------------------
Class: HUDCommonIconsDataAsset.DataAsset.Object // 71a491df80
	Texture2D* HealthIcon;//[Offset: 0x30, Size: 0x8] 0x715d1ca980

--------------------------------
Class: HuntersAbilitiesInfoWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491dd00
	Button* InfoButton;//[Offset: 0x278, Size: 0x8] 0x715d1ca700
	void ReportAnalytics(bool bIsVisible);// 0x40835b8 0x715d1d0400
	void OnHunterHighlighted(out const MetaTuningDataKey MetaTuningDataKey, bool bIsHighlightFirstLocalPlayer);// 0x45c6aa0 0x715d1d04e0
	void OnHunterHighlightChanged(out const MetaTuningDataKey MetaTuningDataKey);// 0x45c6aa0 0x715d1d05c0
	void OnBackButtonPressed();// 0x45c6aa0 0x715d1d06a0

--------------------------------
Class: HuntersAbilityButtonContainerWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491da80
	bool bIsGamepadAbilityButtonContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x715d1ca580
	HuntersAbilitySystemComponent* PlayerAbilitySystem;//[Offset: 0x298, Size: 0x8] 0x715d1ca600
	HuntersAbilityButtonWidget*[] GetPetals();// 0x45c6aa0 0x715d1d0320

--------------------------------
Class: HuntersAbilityButtonWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491d800
	float TouchRadius;//[Offset: 0x278, Size: 0x4] 0x715d1cd580
	float PostActivationDelay;//[Offset: 0x27c, Size: 0x4] 0x715d1cd600
	bool bHasAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x715d1cd680
	float CooldownProgression;//[Offset: 0x284, Size: 0x4] 0x715d1cb600
	int DebugIndex;//[Offset: 0x288, Size: 0x4] 0x715d1cb680
	Image* IconImage;//[Offset: 0x290, Size: 0x8] 0x715d1cb700
	class HuntersLotusAimingWidget* AimingWidgetClass;//[Offset: 0x298, Size: 0x8] 0x715d1b2c20
	HuntersLotusAimingWidget* AimingWidget;//[Offset: 0x2a0, Size: 0x8] 0x715d1cb780
	CanvasPanelSlot* CanvasSlot;//[Offset: 0x2a8, Size: 0x8] 0x715d1cb800
	float ScalerScale;//[Offset: 0x2b0, Size: 0x4] 0x715d1cb880
	ScaleBox* Scaler;//[Offset: 0x2b8, Size: 0x8] 0x715d1cb900
	Image* AbilityButtonImage;//[Offset: 0x2c0, Size: 0x8] 0x715d1cb980
	GamepadGlyph* GamepadGlyph;//[Offset: 0x2c8, Size: 0x8] 0x715d1cba00
	FName CooldownBarPercentageParamName;//[Offset: 0x2d0, Size: 0x8] 0x715d1cba80
	FName EdgePipsPercentageParamName;//[Offset: 0x2d8, Size: 0x8] 0x715d1cbb00
	FName MaxChargeCountParamName;//[Offset: 0x2e0, Size: 0x8] 0x715d1cbb80
	FName CurrentChargeCountParamName;//[Offset: 0x2e8, Size: 0x8] 0x715d1cbc00
	FName CooldownGlowOpacityParamName;//[Offset: 0x2f0, Size: 0x8] 0x715d1cbc80
	FName BackgroundColorParamName;//[Offset: 0x2f8, Size: 0x8] 0x715d1cbd00
	FName OuterRingsOpacityParamName;//[Offset: 0x300, Size: 0x8] 0x715d1cbd80
	LinearColor AvailableBackgroundColor;//[Offset: 0x308, Size: 0x10] 0x715d1cbe00
	LinearColor UnavailableBackgroundColor;//[Offset: 0x318, Size: 0x10] 0x715d1cbe80
	enum CurrentAbilityState;//[Offset: 0x360, Size: 0x1] 0x715d1b2cc0
	enum CurrentInteractionState;//[Offset: 0x361, Size: 0x1] 0x715d1b2d60
	HuntersAbilitySystemComponent* PlayerAbilitySystem;//[Offset: 0x368, Size: 0x8] 0x715d1cc000
	MaterialInstanceDynamic* AbilityButtonMaterial;//[Offset: 0x370, Size: 0x8] 0x715d1cc080
	HuntersHighlightWidget* HighlightWidget;//[Offset: 0x3b8, Size: 0x8] 0x715d1cc100
	enum HighlightWidgetType;//[Offset: 0x3c0, Size: 0x1] 0x715d1b2e00
	GameplayAbility* LastActivatedAbility;//[Offset: 0x3c8, Size: 0x8] 0x715d1cc200
	void ShowHighlightedState(bool IsHighlighted);// 0x45c6aa0 0x715d1d3880
	void HandleLotusStateChanged(enum OldState, enum NewState);// 0x45c6aa0 0x715d1d3960
	void HandleInteractionStateChange(enum NewState);// 0x45c6aa0 0x715d1d0080
	void HandleAbilityStateChange(enum PreviousState, enum NewState);// 0x45c6aa0 0x715d1d0160
	void CloseLotus(enum NewState, bool bForceUntouched);// 0x4083f9c 0x715d1d0240

--------------------------------
Class: HuntersLotusAimingWidget.UserWidget.Widget.Visual.Object // 71a491fd80
	TouchLocation LastLocation;//[Offset: 0x230, Size: 0x18] 0x715d1e1880
	void UpdateAbility(SlateBrush Icon);// 0x45c6aa0 0x715d1d59c0
	bool StartTracking();// 0x45c6aa0 0x715d1d5aa0
	bool FinishTracking();// 0x45c6aa0 0x715d1d5b80
	bool ContinueTracking();// 0x45c6aa0 0x715d1d5c60

--------------------------------
Class: TouchLocation // 715cec6940
	Vector2D LocationInches;//[Offset: 0x0, Size: 0x8] 0x715cef1380
	Vector2D LocationPixels;//[Offset: 0x8, Size: 0x8] 0x715cef1400
	Vector2D LocationRelative;//[Offset: 0x10, Size: 0x8] 0x715cef1480

--------------------------------
Class: HuntersHighlightWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491b780
	WidgetAnimation* TopLeftToCenterPulseAnim;//[Offset: 0x278, Size: 0x8] 0x715d1cfe00
	WidgetAnimation* BottomLeftToCenterPulseAnim;//[Offset: 0x280, Size: 0x8] 0x715d1cfe80
	WidgetAnimation* SingleBigPulseAnim;//[Offset: 0x288, Size: 0x8] 0x715d1cff00
	enum AnimationType;//[Offset: 0x290, Size: 0x1] 0x715d1b4e80
	bool bHandleNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1] 0x715d1ce780
	enum HighlightWidgetType;//[Offset: 0x292, Size: 0x1] 0x715d1b4f20

--------------------------------
Class: HuntersAbilityCancelButtonWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491d580
	float TouchRadius;//[Offset: 0x278, Size: 0x4] 0x715d1ccd80
	Pawn* CurrentPawn;//[Offset: 0x280, Size: 0x8] 0x715d1cce00
	HuntersInputComponent* PlayerInput;//[Offset: 0x2b8, Size: 0x8] 0x715d1cce80
	HuntersAbilitySystemComponent* CurrentPawnAbilitySystem;//[Offset: 0x2c0, Size: 0x8] 0x715d1ccf00
	HuntersGameplayAbility* AbilityCancelGameplayAbility;//[Offset: 0x2c8, Size: 0x8] 0x715d1ccf80
	GameplayAbility* ActivatedAbility;//[Offset: 0x2d0, Size: 0x8] 0x715d1cd000
	ScaleBox* Scaler;//[Offset: 0x300, Size: 0x8] 0x715d1cd080
	void OnHighlightedStateChange(bool NewIsHighlighted);// 0x45c6aa0 0x715d1d2fc0
	void OnAbilityStateChanged(enum NewAbilityState);// 0x45c6aa0 0x715d1d30a0
	void OnAbilityIconBrushIsAvailable(SlateBrush IconBrush);// 0x45c6aa0 0x715d1d3180
	void OnAbilityEnded(bool WasCancelled);// 0x45c6aa0 0x715d1d3260
	void OnAbilityActivated();// 0x45c6aa0 0x715d1d3340
	void OnAbilityActivatableStateChanged(bool NewIsAbilityActivatable);// 0x45c6aa0 0x715d1d3420
	bool IsAbilityActive();// 0x4084724 0x715d1d3500
	bool IsAbilityActivatable();// 0x4084740 0x715d1d35e0
	enum GetButtonVisibility();// 0x45c6aa0 0x715d1d36c0
	enum GetAbilityState();// 0x4084708 0x715d1d37a0

--------------------------------
Class: HuntersAbilityCancelTextWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491d300
	Pawn* CurrentPawn;//[Offset: 0x278, Size: 0x8] 0x715d1cc680
	HuntersInputComponent* PlayerInput;//[Offset: 0x2a0, Size: 0x8] 0x715d1cc700
	HuntersAbilitySystemComponent* CurrentPawnAbilitySystem;//[Offset: 0x2a8, Size: 0x8] 0x715d1cc780
	HuntersGameplayAbility* AbilityCancelGameplayAbility;//[Offset: 0x2b0, Size: 0x8] 0x715d1cc800
	GameplayAbility* ActivatedAbility;//[Offset: 0x2b8, Size: 0x8] 0x715d1cc880
	ScaleBox* Scaler;//[Offset: 0x2c8, Size: 0x8] 0x715d1cc900
	GamepadGlyph* GamepadGlyph;//[Offset: 0x2d0, Size: 0x8] 0x715d1cc980
	<enum,DataTable*> GlyphsDT;//[Offset: 0x2d8, Size: 0x50] 0x715ceccdc0
	void OnAbilityIconBrushIsAvailable(SlateBrush IconBrush);// 0x45c6aa0 0x715d1d2a80
	void OnAbilityEnded(bool WasCancelled);// 0x45c6aa0 0x715d1d2b60
	void OnAbilityActivated();// 0x45c6aa0 0x715d1d2c40
	void OnAbilityActivatableStateChanged(bool NewIsAbilityActivatable);// 0x45c6aa0 0x715d1d2d20
	bool IsAbilityActive();// 0x4084fac 0x715d1d2e00
	bool IsAbilityActivatable();// 0x4084fc8 0x715d1d2ee0

--------------------------------
Class: HuntersAbilityInputInterface.Interface.Object // 71a491d080

--------------------------------
Class: HuntersAimModeAndZTargetingButton.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491ce00
	float TouchRadius;//[Offset: 0x278, Size: 0x4] 0x715d1ce080
	Pawn* CurrentPawn;//[Offset: 0x280, Size: 0x8] 0x715d1ce100
	HuntersInputComponent* PlayerInput;//[Offset: 0x2c8, Size: 0x8] 0x715d1ce180
	HuntersAbilitySystemComponent* CurrentPawnAbilitySystem;//[Offset: 0x2d0, Size: 0x8] 0x715d1ce200
	HuntersGameplayAbility* CurrentAuxActionActivationAbilityCDO;//[Offset: 0x2d8, Size: 0x8] 0x715d1ce280
	ScaleBox* Scaler;//[Offset: 0x318, Size: 0x8] 0x715d1ce300
	void SetButtonVisibilityForCurrentPreferences();// 0x40856e0 0x715d1d20e0
	void OnHighlightedStateChange(bool NewIsHighlighted);// 0x45c6aa0 0x715d1d21c0
	void OnCharacterItemEquipped();// 0x40856cc 0x715d1d22a0
	void OnAbilityStateChanged(enum NewAbilityState);// 0x45c6aa0 0x715d1d2380
	void OnAbilityIconBrushIsAvailable(SlateBrush IconBrush);// 0x45c6aa0 0x715d1d2460
	void OnAbilityEnded(bool WasCancelled);// 0x45c6aa0 0x715d1d2540
	void OnAbilityActivated();// 0x45c6aa0 0x715d1d2620
	void OnAbilityActivatableStateChanged(bool NewIsAbilityActivatable);// 0x45c6aa0 0x715d1d2700
	bool IsAbilityActive();// 0x4085710 0x715d1d27e0
	bool IsAbilityActivatable();// 0x408572c 0x715d1d28c0
	enum GetAbilityState();// 0x40856f4 0x715d1d29a0

--------------------------------
Class: HuntersAutofireWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491cb80
	float TimeToFire;//[Offset: 0x278, Size: 0x4] 0x715d1cdd80
	float TotalTimeToFire;//[Offset: 0x27c, Size: 0x4] 0x715d1cde00
	float WeaponAutoFireDelay;//[Offset: 0x280, Size: 0x4] 0x715d1cde80
	float AutoFireProgress;//[Offset: 0x284, Size: 0x4] 0x715d1cdf00
	enum FiringState;//[Offset: 0x288, Size: 0x1] 0x715d1b5060
	void OnStateChanged(enum NewState);// 0x45c6aa0 0x715d1d2000

--------------------------------
Class: HuntersBombHUDWidget.HuntersHUDWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491c900

--------------------------------
Class: HuntersBRLaunchScene.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491c680
	SDTextBlock* MapNameLabel;//[Offset: 0x268, Size: 0x8] 0x715d1cdb00
	Image* LaunchMinimap;//[Offset: 0x270, Size: 0x8] 0x715d1cdb80
	SDButton* LaunchButton;//[Offset: 0x278, Size: 0x8] 0x715d1cdc00
	ProgressBar* FuelBar;//[Offset: 0x280, Size: 0x8] 0x715d1cdc80
	LaunchSceneViewModel* LaunchSceneViewModel;//[Offset: 0x288, Size: 0x8] 0x715d1cdd00
	void OnPlayerLaunched();// 0x408888c 0x715d1d1e40
	void OnLaunchPressed();// 0x40888a0 0x715d1d1f20

--------------------------------
Class: LaunchSceneViewModel.SDViewModel.Object // 71a4941a00
	TextBindable MapNameText;//[Offset: 0x68, Size: 0x98] 0x715d1e5a80
	Texture2DBindable MapImage;//[Offset: 0x100, Size: 0x78] 0x715d1e5b00
	FloatBindable FuelBarPercentage;//[Offset: 0x178, Size: 0x70] 0x715d1e5b80

--------------------------------
Class: HuntersCharacterIndicatorWidget.ActorIndicatorWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491c180
	enum IndicatorType;//[Offset: 0x2a6, Size: 0x1] 0x715d1b4fc0
	WidgetSwitcher* IndicatorStateWidgetSwitcher;//[Offset: 0x2a8, Size: 0x8] 0x715d1cee00
	void OnUnderAttackChanged(bool IsUnderAttack, int CommsPriority);// 0x45c6aa0 0x715d1d4ca0
	void OnUltimateFullyChargedReceived(int CommsPriority);// 0x45c6aa0 0x715d1d4d80
	void OnUltimateChargeReceived(int ChargePercentage, int CommsPriority);// 0x45c6aa0 0x715d1d4e60
	void OnThankYouChanged(const Pawn* TargetPawn, bool IsThankingYou, int CommsPriority);// 0x45c6aa0 0x715d1d4f40
	void OnTargetedChanged(const Pawn* TargetPawn, bool IsTargeted, bool IsManualTrigger, int CommsPriority);// 0x45c6aa0 0x715d1d5020
	void OnSetupViewModel(const HuntersCharacterBase* TargetPawn);// 0x45c6aa0 0x715d1d5100
	void OnObjectiveControlChanged(const Pawn* TargetPawn, bool bHasControl);// 0x45c6aa0 0x715d1d51e0
	void OnNeedsHelpChanged(const Pawn* TargetPawn, bool DoesNeedHelp, int CommsPriority);// 0x45c6aa0 0x715d1d52c0
	void OnHitpointsChanged(const Pawn* TargetPawn);// 0x45c6aa0 0x715d1d53a0
	void OnAbilityCooldownChanged(const Pawn* TargetPawn, bool IsDisplayingCooldown, int AbilityIndex, int AbilityCooldownRemaining, int CommsPriority);// 0x45c6aa0 0x715d1d5480

--------------------------------
Class: HuntersDebugHUD.HUD.Actor.Object // 71a491bc80

--------------------------------
Class: HuntersGameStateListenerWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491ba00
	void OnOvertimeChanged(bool bIsOvertime);// 0x45c6aa0 0x715d1d4840
	void OnContestedChanged(bool bContested);// 0x45c6aa0 0x715d1d4920

--------------------------------
Class: HuntersInMatchTipsComponent.ActorComponent.Object // 71a491b280
	DataTable* InMatchTipsTable;//[Offset: 0xb0, Size: 0x8] 0x715d1cf800
	HuntersPlayerState* PlayerState;//[Offset: 0xb8, Size: 0x8] 0x715d1cf880
	float DefaultDelayTime;//[Offset: 0xc0, Size: 0x4] 0x715d1cf900
	float DefaultDisplayTime;//[Offset: 0xc4, Size: 0x4] 0x715d1cf980
	int NumberOfHighlightPings;//[Offset: 0xc8, Size: 0x4] 0x715d1cfa00
	void ShowNextTipSequence();// 0x408b520 0x715d1d4140
	void OnPlayerRespawned(HuntersPlayerState* InPlayerState);// 0x408b32c 0x715d1d4220
	void OnPlayerEliminated(out const EliminationData EliminationData);// 0x408b3d0 0x715d1d4300
	void OnMatchStarted();// 0x408b50c 0x715d1d43e0
	void OnMatchFinished();// 0x408b4f8 0x715d1d44c0
	void InitializeInMatchTips(HuntersPlayerState* InPlayerState, const DataTable* InTipsTable);// 0x408b534 0x715d1d45a0

--------------------------------
Class: HuntersKillMarker.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491b000
	void ShowKillMarker();// 0x45c6aa0 0x715d1d4060

--------------------------------
Class: HuntersLDCDamageNumbersContainerWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491ad80
	void OnLDCHealthChanged(const HuntersPlayerState* InstigatorState, float DamageAmount, enum TypeOfDamage);// 0x45c6aa0 0x715d1d3ea0
	void K2_RestartWidget();// 0x45c6aa0 0x715d1d3f80

--------------------------------
Class: HuntersStateWidgetBase.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491a880
	void SetupPlayerBindings(HuntersPlayerState* PlayerState);// 0x4094720 0x715d1d3dc0

--------------------------------
Class: HuntersLevelProgressionWidget.HuntersStateWidgetBase.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491ab00
	GamepadGlyph* GamepadButtonGlyph;//[Offset: 0x280, Size: 0x8] 0x715d1e0180
	CanvasPanel* CustomizationContainer;//[Offset: 0x298, Size: 0x8] 0x715d1e0200
	void TriggerUltimateReleased();// 0x408c53c 0x715d1d61a0
	void TriggerUltimatePressed();// 0x408c550 0x715d1d6280
	void SetUltimateIconImage(SlateBrush IconBrush);// 0x45c6aa0 0x715d1d6360
	void OnUltimateProgressNormChanged(float UltimateProgressNorm);// 0x45c6aa0 0x715d1d6440
	void OnUltimatePointsChanged(HuntersPlayerState* PlayerState);// 0x408c30c 0x715d1d6520
	void OnUltimateEnded();// 0x45c6aa0 0x715d1d6600
	void OnPlayerPawnClassChanged(HuntersPlayerState* PlayerState);// 0x408c268 0x715d1d66e0
	void OnPlayerCharacterClassChanged(const HuntersCharacterBase* NewCharacterDefaultObject);// 0x45c6aa0 0x715d1d67c0
	void OnLevelProgressNormChanged(float LevelProgressNorm);// 0x45c6aa0 0x715d1d68a0
	void OnLevelingThresholdChanged(HuntersPlayerState* PlayerState);// 0x408c3b0 0x715d1d6980
	void OnLevelChanged(HuntersPlayerState* PlayerState, int OldLevel);// 0x408c740 0x715d1d6a60
	void OnExperiencePointsChanged(HuntersPlayerState* PlayerState, int OldVal);// 0x408c454 0x715d1d6b40
	void OnConfirmedLevelChanged(HuntersPlayerState* PlayerState);// 0x45c6aa0 0x715d1d6c20
	void OnAbilityEnded(bool WasUltimateAbility);// 0x45c6aa0 0x715d1d6d00
	void OnAbilityActivated(bool WasUltimateAbility);// 0x45c6aa0 0x715d1d6de0
	void OnAbilitiesChanged();// 0x45c6aa0 0x715d1d6ec0
	bool IsUltimateUnlocked();// 0x408c634 0x715d1d6fa0
	float GetUltimateProgressNorm();// 0x408c6a4 0x715d1d7080
	int GetUltimatePointsRequired();// 0x408c6d8 0x715d1d7160
	int GetUltimatePoints();// 0x408c70c 0x715d1d7240
	int GetProgressionLevel();// 0x408c600 0x715d1d7320
	int GetMaxProgressionLevel();// 0x408c598 0x715d1d3a40
	float GetLevelProgressNorm();// 0x408c564 0x715d1d3b20
	int GetConfirmedProgressionLevel();// 0x408c5cc 0x715d1d3c00
	bool CanActivateUltimate();// 0x408c66c 0x715d1d3ce0

--------------------------------
Class: HuntersLotusChildWidget.UserWidget.Widget.Visual.Object // 71a491a600
	float CooldownProgression;//[Offset: 0x230, Size: 0x4] 0x715d1e1b00
	float SelectionProgress;//[Offset: 0x234, Size: 0x4] 0x715d1e1b80
	int DebugIndex;//[Offset: 0x238, Size: 0x4] 0x715d1e1c00
	Image* PetalImage;//[Offset: 0x240, Size: 0x8] 0x715d1e1c80
	Image* IconImage;//[Offset: 0x248, Size: 0x8] 0x715d1e1d00
	SegmentedArcBar* CooldownBar;//[Offset: 0x250, Size: 0x8] 0x715d1e1d80
	SegmentedArcBar* ChargeBar;//[Offset: 0x258, Size: 0x8] 0x715d1e1e00
	enum CurrentAbilityState;//[Offset: 0x286, Size: 0x1] 0x715d1b4a20
	enum CurrentInteractionState;//[Offset: 0x287, Size: 0x1] 0x715d1b4ac0
	HuntersHighlightWidget* HighlightWidget;//[Offset: 0x298, Size: 0x8] 0x715d1e1f80
	enum HighlightWidgetType;//[Offset: 0x2a1, Size: 0x1] 0x715d1b4b60
	void ShowHighlightedState(bool IsHighlighted);// 0x45c6aa0 0x715d1d5d40
	void HandleLotusOpenState();// 0x45c6aa0 0x715d1d5e20
	void HandleLotusClosedState();// 0x45c6aa0 0x715d1d5f00
	void HandleInteractionStateChange(enum NewState);// 0x45c6aa0 0x715d1d5fe0
	void HandleAbilityStateChange(enum PreviousState, enum NewState);// 0x45c6aa0 0x715d1d60c0

--------------------------------
Class: SegmentedArcBar.Widget.Visual.Object // 71a4947400
	SegmentedArcBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x90] 0x715d1e9580
	float Percent;//[Offset: 0x198, Size: 0x4] 0x715d1e9600
	float BorderPercent;//[Offset: 0x19c, Size: 0x4] 0x715d1e9680
	byte BarFillType;//[Offset: 0x1a0, Size: 0x1] 0x715d1e9700
	float StartAngle;//[Offset: 0x1a4, Size: 0x4] 0x715d1e9780
	float EndAngle;//[Offset: 0x1a8, Size: 0x4] 0x715d1e9800
	int NumSegments;//[Offset: 0x1ac, Size: 0x4] 0x715d1e9880
	float SpacerProportion;//[Offset: 0x1b0, Size: 0x4] 0x715d1e9900
	float SpacerProportionRatio;//[Offset: 0x1b4, Size: 0x4] 0x715d1e9980
	int SpecialSegmentCount;//[Offset: 0x1b8, Size: 0x4] 0x715d1e9a00
	LinearColor FillColorAndOpacity;//[Offset: 0x1bc, Size: 0x10] 0x715d1e9a80
	LinearColor SpecialColorAndOpacity;//[Offset: 0x1cc, Size: 0x10] 0x715d1e9b00
	LinearColor BackgroundColorAndOpacity;//[Offset: 0x1dc, Size: 0x10] 0x715d1e9b80
	delegate PercentDelegate;//[Offset: 0x1ec, Size: 0x10] 0x715d1e9c00
	delegate BorderPercentDelegate;//[Offset: 0x1fc, Size: 0x10] 0x715d1e9c80
	delegate NumSegmentsDelegate;//[Offset: 0x20c, Size: 0x10] 0x715d1e9d00
	delegate SpecialSegmentCountDelegate;//[Offset: 0x21c, Size: 0x10] 0x715d1e9d80
	delegate FillColorAndOpacityDelegate;//[Offset: 0x22c, Size: 0x10] 0x715d1e9e00
	delegate SpecialColorAndOpacityDelegate;//[Offset: 0x23c, Size: 0x10] 0x715d1e9e80
	delegate BackgroundColorAndOpacityDelegate;//[Offset: 0x24c, Size: 0x10] 0x715d1e9f00
	void SetStartAngle(float NewAngle);// 0x40a448c 0x715d1de6a0
	void SetSpecialSegmentCount(int InSpecialSegmentCount);// 0x40a471c 0x715d1dadc0
	void SetSpecialColorAndOpacity(LinearColor InColor);// 0x40a45d4 0x715d1daea0
	void SetSpacerProportion(float InProportion);// 0x40a4344 0x715d1daf80
	void SetPercent(float InPercent);// 0x40a4908 0x715d1db060
	void SetNumSegments(int InNumSegments);// 0x40a47c0 0x715d1db140
	void SetFillColorAndOpacity(LinearColor InColor);// 0x40a4678 0x715d1db220
	void SetEndAngle(float NewAngle);// 0x40a43e8 0x715d1db300
	void SetBorderPercent(float InPercent);// 0x40a4864 0x715d1db3e0
	void SetBackgroundColorAndOpacity(LinearColor InColor);// 0x40a4530 0x715d1db4c0

--------------------------------
Class: SegmentedArcBarStyle.SlateWidgetStyle // 715da96880
	SlateBrush FillImage;//[Offset: 0x8, Size: 0x88] 0x715dab2500

--------------------------------
Class: HuntersLotusWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491fb00
	GameplayTagContainer AbilityTagsToIgnoreWhenCharacterHasAbilitiesLocked;//[Offset: 0x278, Size: 0x20] 0x715d1e2880
	GameplayTag PlayerAbilitiesLockedTag;//[Offset: 0x298, Size: 0x8] 0x715d1e2900
	Vector2D StartPosition;//[Offset: 0x2b4, Size: 0x8] 0x715d1e2980
	Vector2D TargetPosition;//[Offset: 0x2bc, Size: 0x8] 0x715d1e2a00
	float AngularBias;//[Offset: 0x2c4, Size: 0x4] 0x715d1e2a80
	float TouchRadius;//[Offset: 0x2c8, Size: 0x4] 0x715d1e2b00
	float HorizontalActivationRadius;//[Offset: 0x2cc, Size: 0x4] 0x715d1e2b80
	float VerticalActivationRadius;//[Offset: 0x2d0, Size: 0x4] 0x715d1e2c00
	float PositionLerpDuration;//[Offset: 0x2d4, Size: 0x4] 0x715d1e2c80
	float PostActivationDelay;//[Offset: 0x2d8, Size: 0x4] 0x715d1e2d00
	float PositionProgress;//[Offset: 0x2dc, Size: 0x4] 0x715d1e2d80
	enum CurrentState;//[Offset: 0x2e0, Size: 0x1] 0x715d1b45c0
	Vector2D LotusCentre;//[Offset: 0x2e4, Size: 0x8] 0x715d1e2e80
	bool bShowDebugOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1] 0x715d1e2f00
	class HuntersLotusAimingWidget* AimingWidgetClass;//[Offset: 0x308, Size: 0x8] 0x715d1b4660
	HuntersLotusAimingWidget* AimingWidget;//[Offset: 0x310, Size: 0x8] 0x715d1e2f80
	CanvasPanelSlot* CanvasSlot;//[Offset: 0x338, Size: 0x8] 0x715d1e3000
	HuntersAbilitySystemComponent* PlayerAbilitySystem;//[Offset: 0x348, Size: 0x8] 0x715d1e3080
	HuntersCommsActionComponent* PlayerCommsActionComponent;//[Offset: 0x350, Size: 0x8] 0x715d1e3100
	Overlay* Container;//[Offset: 0x358, Size: 0x8] 0x715d1e3180
	ScaleBox* Scaler;//[Offset: 0x360, Size: 0x8] 0x715d1e1100
	GameplayTagContainer AbilityHighlightEnabledTags;//[Offset: 0x368, Size: 0x20] 0x715d1e1180
	GameplayTagContainer AbilityHighlightDisabledTags;//[Offset: 0x388, Size: 0x20] 0x715d1e1200
	GameplayAbility* LastActivatedAbility;//[Offset: 0x3b8, Size: 0x8] 0x715d1e1280
	void ShowHighlightedState(bool IsHighlighted);// 0x45c6aa0 0x715d1d89e0
	void OnShowDebugChanged();// 0x45c6aa0 0x715d1d8ac0
	void OnAngularBiasChanged();// 0x45c6aa0 0x715d1d8ba0
	void HandleLotusStateChanged(enum OldState, enum NewState);// 0x45c6aa0 0x715d1d8c80
	void HandleLotusReleased();// 0x45c6aa0 0x715d1d8d60
	void HandleLotusPressed();// 0x45c6aa0 0x715d1d8e40
	void HandleDragStageChanged(enum NewDragStage);// 0x45c6aa0 0x715d1d8f20
	int GetQuadrant(Vector2D InputDelta);// 0x45c6aa0 0x715d1d9000
	HuntersLotusChildWidget*[] GetPetals();// 0x45c6aa0 0x715d1d5720
	void CloseLotus(enum NewState, bool bForceUntouched);// 0x4090d8c 0x715d1d5800
	bool ActivatePetalAbility(int PetalIndex);// 0x4090cdc 0x715d1d58e0

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object // 71a49b6780
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x55ca814 0x715ca89a80

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object // 71a49b6500
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x715caa7b00
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x715caa7b80
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x715caa7c00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55caca4 0x715ca897e0
	void SetPadding(Margin InPadding);// 0x55cadec 0x715ca898c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55cad48 0x715ca899a0

--------------------------------
Class: HuntersManualFireButton.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a491f880
	float TouchRadius;//[Offset: 0x298, Size: 0x4] 0x715d1e2200
	GameplayTagContainer ManualFireButtonDisablingTags;//[Offset: 0x2a0, Size: 0x20] 0x715d1e2280
	CanvasPanelSlot* CanvasSlot;//[Offset: 0x2c0, Size: 0x8] 0x715d1e2300
	bool IsButtonPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x715d1e2380
	class HuntersLotusAimingWidget* AimingWidgetClass;//[Offset: 0x2d0, Size: 0x8] 0x715d1b4520
	HuntersLotusAimingWidget* AimingWidget;//[Offset: 0x2d8, Size: 0x8] 0x715d1e2400
	SlateBrush Icon;//[Offset: 0x2e0, Size: 0x88] 0x715d1e2480
	HuntersInputComponent* PlayerInput;//[Offset: 0x370, Size: 0x8] 0x715d1e2500
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x380, Size: 0x8] 0x715d1e2580
	ScaleBox* Scaler;//[Offset: 0x3a0, Size: 0x8] 0x715d1e2600
	HuntersGameplayAbility* CurrentFireAbilityCDO;//[Offset: 0x3a8, Size: 0x8] 0x715d1e2680
	void SetIsButtonCanBeActivated(bool bCanActivate, bool bIsActive);// 0x45c6aa0 0x715d1d8820
	void SetButtonState(bool bIsPressed);// 0x40918e8 0x715d1d8900

--------------------------------
Class: HunterSpecificWidgetContainer.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4944700
	class CustomHUDViewModel* ViewModelClass;//[Offset: 0x258, Size: 0x8] 0x715d1b4340
	CustomHUDViewModel* HunterViewModel;//[Offset: 0x260, Size: 0x8] 0x715d1e3a80
	CanvasPanel* RootCanvas;//[Offset: 0x268, Size: 0x8] 0x715d1e3b00
	UserWidget* CurrentHunterSpecificWidget;//[Offset: 0x270, Size: 0x8] 0x715d1e3b80
	void OnCustomWidgetChanged(out const class UserWidget HUDWidgetBlueprint);// 0x4093020 0x715d1d8040

--------------------------------
Class: HuntersReticleContainerViewModel.SDListenerViewModel.SDViewModel.Object // 71a4944480
	FloatBindable ReticleRenderOpacity;//[Offset: 0x70, Size: 0x70] 0x715d1e3a00

--------------------------------
Class: HuntersReticleContainerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4944200
	CanvasPanel* ReticleContainer;//[Offset: 0x258, Size: 0x8] 0x715d1e3700
	class HuntersReticleWidget* DefaultWeaponReticle;//[Offset: 0x260, Size: 0x8] 0x715d1b4200
	float DefaultAccuracyPixels;//[Offset: 0x268, Size: 0x4] 0x715d1e3780
	HuntersAutofireWidget* AutofireWidget;//[Offset: 0x270, Size: 0x8] 0x715d1e3800
	HuntersReticleWidget* ActiveReticleWidget;//[Offset: 0x278, Size: 0x8] 0x715d1e3880
	<class HuntersReticleWidget,HuntersReticleWidget*> WidgetPool;//[Offset: 0x280, Size: 0x50] 0x715ceccc40
	HuntersReticleContainerViewModel* ReticleContainerViewModel;//[Offset: 0x2d0, Size: 0x8] 0x715d1e3980

--------------------------------
Class: HuntersReticleWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4943a80
	float AccuracyOffsetPixels;//[Offset: 0x278, Size: 0x4] 0x715d1e4e00
	enum ReticleState;//[Offset: 0x27c, Size: 0x1] 0x715d1b4020
	bool bFireDamageCausedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 0x1] 0x715d1e4f00
	bool bFireHitscanWeaponActorHitEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e, Size: 0x1] 0x715d1e4f80
	bool bShowDamageCausedByMinions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27f, Size: 0x1] 0x715d1e5000
	Pawn* CurrentPawn;//[Offset: 0x298, Size: 0x8] 0x715d1e5080
	HuntersHitscanWeaponEquipmentItem* CurrentHitscanWeapon;//[Offset: 0x2a0, Size: 0x8] 0x715d1e5100
	void ShowKillMarker();// 0x45c6aa0 0x715d1d7b00
	void ShowHitMarker();// 0x45c6aa0 0x715d1d7be0
	void OnWeaponEquippedEvent(HuntersEquipmentItem* EquipmentItem);// 0x4093f44 0x715d1d7cc0
	void OnTargetHitEvent(Actor* Target, bool HitActorTookCriticalHit);// 0x45c6aa0 0x715d1d7da0
	void OnDamageCaused(Actor* DamagedActor, float TotalDamage, bool bCausedByProjectile, bool bCausedByPeriodicEffect, bool bCritical);// 0x45c6aa0 0x715d1d7e80

--------------------------------
Class: HuntersHitscanWeaponEquipmentItem.HuntersWeaponEquipmentItem.HuntersEquipmentItem.Actor.Object // 71a4b92e00
	bool bAsBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1] 0x715d93d000
	GameplayTag FiringDistanceTag;//[Offset: 0x538, Size: 0x8] 0x715d93d080
	delegate OnTargetHit;//[Offset: 0x540, Size: 0x10] 0x715d93d100
	float MaxFiringDistance;//[Offset: 0x5c8, Size: 0x4] 0x715d93d180
	bool bShouldIgnoreFriendlyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 0x1] 0x715d93d200
	bool bValidateAllBlockedShots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cd, Size: 0x1] 0x715d93d280
	byte ProjectileObjectType;//[Offset: 0x5ce, Size: 0x1] 0x715d93d300
	byte[] LineTraceCollisionChannels;//[Offset: 0x5d0, Size: 0x10] 0x715d8948e0
	GameplayTag BurstStartAnimationTag;//[Offset: 0x5e0, Size: 0x8] 0x715d93d400
	CurveFloat* DamageOverDistance;//[Offset: 0x5f8, Size: 0x8] 0x715d93d480
	void ServerNotifyMiss();// 0x6b2dcd4 0x715da15b80
	void ServerNotifyHits(HitscanHitResults ClientHitscanResults);// 0x6b2e024 0x715da15c60
	void ServerDebugNotifyHits(HitscanHitResults ClientHitscanResults, uint32 DebugShotID, float Tolerance);// 0x6b2dd30 0x715da15d40
	void OnTargetHitDelegate__DelegateSignature(Actor* Target, bool bActorTookCriticalHit);// 0x45c6aa0 0x715da15e20
	void OnShotTraceComplete(Vector StartPoint, Vector EndPoint, Actor* FirstBlockingActor, Vector ImpactNormal);// 0x45c6aa0 0x715da15f00
	void OnActorImpact(const Actor* HitActor, out const HitResult HitResult, const bool bIsInterestingHit, const bool bIsCriticalHit);// 0x45c6aa0 0x715da15fe0
	bool DoesActorBlockShot(const Actor* Actor, out const HitResult[] HitResults, out HitResult BlockingHit, out bool bIsInterestingHit, out bool bOutIsCritical);// 0x6b2d6ec 0x715da160c0
	void ClientDebugLagComp(uint32 ShotID, const Vector[] ImpactLocations, const LagCompProjectileSnapshot ServerSnapshot, const Object*[] ServerHits);// 0x6b2d924 0x715da161a0
	bool CanHitMultipleTargets();// 0x6b2d6ac 0x715da16280
	float CalculateDamageOverDistance(out const Vector ImpactPoint, const float DamageAmount);// 0x6b2dbd4 0x715da16360

--------------------------------
Class: HuntersWeaponEquipmentItem.HuntersEquipmentItem.Actor.Object // 71a4b93d00
	delegate OnReloadStart;//[Offset: 0x318, Size: 0x10] 0x715d93c580
	delegate OnReloadStop;//[Offset: 0x328, Size: 0x10] 0x715d93c600
	bool bOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x715d93a580
	class ProjectileDefinition* ProjectileDefinition;//[Offset: 0x350, Size: 0x8] 0x715d894ca0
	class ProjectileDefinition[] ProjectileDefinitionsToPool;//[Offset: 0x358, Size: 0x10] 0x715d894de0
	GameplayTag MuzzleTag;//[Offset: 0x368, Size: 0x8] 0x715d93a600
	GameplayTag AmmoTag;//[Offset: 0x370, Size: 0x8] 0x715d93a680
	GameplayTag ReloadTag;//[Offset: 0x378, Size: 0x8] 0x715d93a700
	GameplayTag FireAnimationTag;//[Offset: 0x380, Size: 0x8] 0x715d93a780
	GameplayTag FiringLoopAnimationTag;//[Offset: 0x388, Size: 0x8] 0x715d93a800
	FName FireInterruptMontageGroup;//[Offset: 0x390, Size: 0x8] 0x715d93a880
	float InterruptedMontageBlendOutTime;//[Offset: 0x398, Size: 0x4] 0x715d93a900
	GameplayTag PostFireCameraTag;//[Offset: 0x39c, Size: 0x8] 0x715d93a980
	class GameplayEffect* AmmoReducerEffect;//[Offset: 0x3a8, Size: 0x8] 0x715d894e80
	class GameplayEffect* BotAccuracyEffect;//[Offset: 0x3b0, Size: 0x8] 0x715d894f20
	class GameplayEffect* DefaultWeaponAttributes;//[Offset: 0x3b8, Size: 0x8] 0x715d894fc0
	bool bSimulatesFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1] 0x715d93aa00
	CurveFloat* FireRateCurve;//[Offset: 0x3c8, Size: 0x8] 0x715d93aa80
	float SpinDownTime;//[Offset: 0x3d0, Size: 0x4] 0x715d93ab00
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1] 0x715d93ab80
	int SpecialAmmoPerMagazine;//[Offset: 0x3d8, Size: 0x4] 0x715d93ac00
	bool bSendServerConfirmedShotEventsOnAutoProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1] 0x715d93ac80
	bool bSendActivationAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 0x1] 0x715d93ad00
	bool bAllowLateShotsAfterStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3de, Size: 0x1] 0x715d93ad80
	HuntersSpreadComponent* SpreadComponent;//[Offset: 0x3e0, Size: 0x8] 0x715d93ae00
	int MaxFiringIndex;//[Offset: 0x3f0, Size: 0x4] 0x715d93ae80
	int CurrentFiringIndex;//[Offset: 0x3f4, Size: 0x4] 0x715d93af00
	float AimAssistTargetPlaneMinDistance;//[Offset: 0x3f8, Size: 0x4] 0x715d93af80
	int NumTotalShotsFired;//[Offset: 0x460, Size: 0x4] 0x715d93b000
	float StickyFireTime;//[Offset: 0x49c, Size: 0x4] 0x715d93b080
	Vector_NetQuantize AimPoint;//[Offset: 0x4a0, Size: 0xc] 0x715d93b100
	ShotState LocalShots;//[Offset: 0x4b0, Size: 0x8] 0x715d93b180
	ShotState RemoteShots;//[Offset: 0x4b8, Size: 0x8] 0x715d93b200
	void StopReloading();// 0x6b34590 0x715da16440
	void StopFiring();// 0x6b34bf8 0x715da16520
	void StartReloading();// 0x6b345ac 0x715da16600
	void StartFiring();// 0x6b34c14 0x715da166e0
	void SetupAsSpinupWeapon();// 0x6b338a0 0x715da167c0
	void ServerStopFireDueToWeaponUnusable();// 0x6b341bc 0x715da168a0
	void ServerFireLocationDirectionDebug(float ClientTime, const Vector_NetQuantize[] FireLocations, const Vector_NetQuantizeNormal[] FireDirections, const uint32[] DebugShotIDs);// 0x6b341d8 0x715da16980
	void ServerFireLocationDirection(float ClientTime, const Vector_NetQuantize[] FireLocations, const Vector_NetQuantizeNormal[] FireDirections);// 0x6b343b0 0x715da16a60
	void ServerFire();// 0x6b34534 0x715da16b40
	void OnRep_RemoteShots();// 0x6b33920 0x715da16c20
	void OnRep_bIsReloading();// 0x6b33904 0x715da16d00
	void OnRep_AimPoint();// 0x6b338e8 0x715da16de0
	void OnFired(class ProjectileDefinition InProjectileDefinition);// 0x45c6aa0 0x715da16ec0
	void OnDebugProjectileImpact(uint32 DebugShotID, Vector ImpactLocation, LagCompProjectileSnapshot[] DebugSnapshots);// 0x6b33b78 0x715da16fa0
	bool HasAimPoint();// 0x6b348bc 0x715da17080
	float GetWeaponSpread();// 0x6b349a4 0x715da17160
	float GetStickyFireTime();// 0x6b3493c 0x715da17240
	float GetSpinUpProgress();// 0x6b34b80 0x715da17320
	float GetSpecialAmmoPerMagazine();// 0x6b349e0 0x715da13a40
	float GetReloadRate();// 0x6b34a14 0x715da13b20
	class ProjectileDefinition GetProjectileDefinition();// 0x6b345c8 0x715da13c00
	float GetMaxAmmo();// 0x6b34a7c 0x715da13ce0
	GameplayTag GetFiringAnimationTag();// 0x6b3393c 0x715da13dc0
	float GetFireRate();// 0x6b34b4c 0x715da13ea0
	Transform[] GetCurrentFiringSockets(GameplayTag SocketsTag);// 0x6b33a78 0x715da13f80
	int[] GetCurrentFiringSocketIndices(GameplayTag SocketsTag);// 0x6b33978 0x715da14060
	float GetCurrentAmmo();// 0x6b34ab0 0x715da14140
	float GetBurstInterval();// 0x6b34b18 0x715da14220
	float GetBurstCount();// 0x6b34ae4 0x715da14300
	float GetBaseSpread();// 0x6b338b4 0x715da143e0
	float GetAmmoReduction();// 0x6b34a48 0x715da144c0
	Vector GetAimPoint();// 0x6b348d8 0x715da145a0
	float GetAimAssistTargetPlaneMinDistance();// 0x6b34970 0x715da14680
	void ClientFireDebug(uint32 DebugShotID, const Vector[] ServerImpactLocations, const LagCompProjectileSnapshot[] ServerSnapshots);// 0x6b34034 0x715da14760
	void ClientDebugReportTimings(float ClientTime, float ServerTime);// 0x6b33df0 0x715da14840
	void ClientDebugReportReject(const Vector ClientStart, const Vector ServerStart);// 0x6b33f14 0x715da14920
	bool CanPredictProjectileVelocity();// 0x6b3487c 0x715da14a00
	bool CanPlayerInputControlFiring();// 0x6b34bb8 0x715da14ae0
	bool CanAmmoChange();// 0x6b348fc 0x715da14bc0
	void ApplyDamageToTarget(Actor* Target, float Param, bool bIsCritical, out const HitResult HitResult, class ProjectileDefinition ProjectileDef, bool bUseOverrideCurve, int Level);// 0x6b34604 0x715da14ca0

--------------------------------
Class: HitscanHitResults // 714906e200
	float ClientTime;//[Offset: 0x0, Size: 0x4] 0x715d93d580
	Vector_NetQuantize TraceStart;//[Offset: 0x4, Size: 0xc] 0x715d93d600
	Vector_NetQuantize TraceEnd;//[Offset: 0x10, Size: 0xc] 0x715d93d680
	Actor*[] HitActors;//[Offset: 0x20, Size: 0x10] 0x715d894980
	HitData[] HitsData;//[Offset: 0x30, Size: 0x10] 0x715d894a20

--------------------------------
Class: HitData // 714906e140
	byte HitActorIndex;//[Offset: 0x0, Size: 0x1] 0x715d93b680
	byte TraceBits;//[Offset: 0x1, Size: 0x1] 0x715d93b700

--------------------------------
Class: LagCompProjectileSnapshot // 714906e680
	float TravelDuration;//[Offset: 0x0, Size: 0x4] 0x715d937b80
	LagCompDebugTransform[] Transforms;//[Offset: 0x8, Size: 0x10] 0x715d8931c0
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715d937f00

--------------------------------
Class: LagCompDebugTransform // 714906e5c0
	Vector_NetQuantize10 Location;//[Offset: 0x0, Size: 0xc] 0x715d937c00
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x715d937c80
	enum TransformType;//[Offset: 0x18, Size: 0x1] 0x715d893120
	float CapsuleRadius;//[Offset: 0x1c, Size: 0x4] 0x715d937d80
	float CapsuleHalfHeight;//[Offset: 0x20, Size: 0x4] 0x715d937e00

--------------------------------
Class: HuntersSpreadComponent.ActorComponent.Object // 71a4b92180
	float MaxMovementSpread;//[Offset: 0xb0, Size: 0x4] 0x715cdeac80
	float MaxMovementSpreadAimMode;//[Offset: 0xb4, Size: 0x4] 0x715cdead00
	float MaxSpreadInAir;//[Offset: 0xb8, Size: 0x4] 0x715cdead80
	float MaxAimModeSpreadInAir;//[Offset: 0xbc, Size: 0x4] 0x715cdeae00
	void OnWeaponOwnerSet();// 0x6b32edc 0x715cdf4840

--------------------------------
Class: ShotState // 714906e2c0

--------------------------------
Class: HuntersReticleImage.Image.Widget.Visual.Object // 71a4943f80
	enum AdjustmentType;//[Offset: 0x210, Size: 0x1] 0x715d1b4160
	LinearColor ActiveColour;//[Offset: 0x214, Size: 0x10] 0x715d1e3500
	LinearColor TargettingColour;//[Offset: 0x224, Size: 0x10] 0x715d1e3580
	LinearColor FiringColour;//[Offset: 0x234, Size: 0x10] 0x715d1e3600
	LinearColor InactiveColour;//[Offset: 0x244, Size: 0x10] 0x715d1e3680

--------------------------------
Class: HuntersReticleOwnerInterface.Interface.Object // 71a4943d00
	class HuntersReticleWidget GetReticle();// 0x45c6aa0 0x715d1d7f60

--------------------------------
Class: HuntersRichTextBlockDecorator.RichTextBlockDecorator.Object // 71a4943800
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8] 0x715d1e4d80

--------------------------------
Class: HuntersTeamAgentWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4943300
	void OnProtectionChanged(const HuntersProtectionAttributeSet* ProtectionAttributeSet);// 0x45c6aa0 0x715d1d74e0
	void OnLineOfSightToOwnerChanged(bool bIsVisible);// 0x45c6aa0 0x715d1d75c0
	void OnHitpointsChanged(const HuntersHealthAttributeSet* HitpointsAttributeSet);// 0x45c6aa0 0x715d1d76a0
	void OnHealthStateChanged(const enum NewHealthState);// 0x45c6aa0 0x715d1d7780
	void OnEliminated(out const EliminationData EliminationData);// 0x45c6aa0 0x715d1d7860
	interface classNone GetOwningTeamAgent();// 0x4094a4c 0x715d1d7940
	void BP_Init(Actor* OwningActor);// 0x4094ab0 0x715d1d7a20

--------------------------------
Class: HuntersProtectionAttributeSet.HuntersAttributeSet.AttributeSet.Object // 71a4965d80
	GameplayAttributeData CurrentProtection;//[Offset: 0x30, Size: 0x28] 0x715d223c00
	GameplayAttributeData MaxProtection;//[Offset: 0x58, Size: 0x28] 0x715d223c80
	void OnRep_MaxProtection();// 0x41311a0 0x715d21be60
	void OnRep_CurrentProtection(GameplayAttributeData OldProtection);// 0x41311b4 0x715d21bf40

--------------------------------
Class: HuntersTeamIndicatorWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4943080
	CanvasPanel* CustomizationContainer;//[Offset: 0x278, Size: 0x8] 0x715d1e4980

--------------------------------
Class: HuntersTimerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4942e00
	void StartTimer(float TimeInSeconds);// 0x40956c4 0x715d1dace0
	void OnTimerProgressUpdate(float TimerProgressPercentage);// 0x45c6aa0 0x715d1d7400

--------------------------------
Class: HuntersTouchCapturePanel.CanvasPanel.PanelWidget.Widget.Visual.Object // 71a4942b80

--------------------------------
Class: HuntersTrainingGroundsHUDWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4942900
	GameEventDisplayWidget* GameEventDisplayWidget;//[Offset: 0x280, Size: 0x8] 0x715d1e4500
	TrainingGroundsHUDViewModel* TrainingGroundsHUDViewModel;//[Offset: 0x298, Size: 0x8] 0x715d1e4580
	HunterSelectionContainerWidget* HunterSelectionContainerWidget;//[Offset: 0x2a0, Size: 0x8] 0x715d1e4600
	HuntersGameState* HuntersGameState;//[Offset: 0x2a8, Size: 0x8] 0x715d1e4680
	Actor* PossessedPawn;//[Offset: 0x2b0, Size: 0x8] 0x715d1e4700
	void OnHunterUnPossessed();// 0x45c6aa0 0x715d1da960
	void OnHunterSelected(class Character CharacterClass);// 0x4095be8 0x715d1daa40
	void OnEnableChangeCharacterButton(bool bEnabled);// 0x45c6aa0 0x715d1dab20
	void InitializeFromBlueprint(HuntersGameState* GameState);// 0x4095c74 0x715d1dac00

--------------------------------
Class: TrainingGroundsHUDViewModel.SDViewModel.Object // 71a4946000
	BoolBindable IsHunterGalleryOpen;//[Offset: 0x68, Size: 0x70] 0x715d1eba00
	BoolBindable IsCogMenuShown;//[Offset: 0xd8, Size: 0x70] 0x715d1eba80
	TextBindable HeroGalleryToggleButtonPrimaryText;//[Offset: 0x148, Size: 0x98] 0x715d1ebb00
	HunterSelectionViewModel* HunterSelectionViewModel;//[Offset: 0x1f8, Size: 0x8] 0x715d1ebb80
	void ToggleHunterGallery();// 0x40a72d0 0x715d1dd360
	void CloseHunterGallery();// 0x40a72bc 0x715d1dd440

--------------------------------
Class: HuntersGameState.BAGameStateBase.GameStateBase.Info.Actor.Object // 71a4b84700
	delegate OnPlayerAddedDynamic;//[Offset: 0x348, Size: 0x10] 0x715cdd4480
	delegate OnPlayerRemovedDynamic;//[Offset: 0x358, Size: 0x10] 0x715cdd4500
	delegate OnMatchStarted;//[Offset: 0x398, Size: 0x10] 0x715cdd4580
	delegate OnPodiumStarted;//[Offset: 0x3b8, Size: 0x10] 0x715cdd4600
	delegate OnMatchResultReceived;//[Offset: 0x3c8, Size: 0x10] 0x715cdd4680
	delegate OnMatchFinishedMulticast;//[Offset: 0x3d8, Size: 0x10] 0x715cdd4700
	<GameplayTag,Texture2D*> AvatarTextures;//[Offset: 0x400, Size: 0x50] 0x715cd325c0
	PlayerState*[] InactivePlayerArray;//[Offset: 0x450, Size: 0x10] 0x715cda3a80
	enum MatchState;//[Offset: 0x460, Size: 0x4] 0x715cda3b20
	bool bPostMatchFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 0x1] 0x715cdd4980
	class HUD* HUDClass;//[Offset: 0x468, Size: 0x8] 0x715cda3bc0
	bool bUIOvertimeBarEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1] 0x715cdd4a00
	FText GameStateName;//[Offset: 0x490, Size: 0x18] 0x715cdd4a80
	delegate OnCharacterSelectionChanged;//[Offset: 0x4a8, Size: 0x10] 0x715cdd4b00
	delegate OnReadyChanged;//[Offset: 0x4b8, Size: 0x10] 0x715cdd4b80
	int GameModeMaxPlayers;//[Offset: 0x4c8, Size: 0x4] 0x715cdd4c00
	bool bUseCharacterSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1] 0x715cdd4c80
	bool bDisplayTeamNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 0x1] 0x715cdd4d00
	enum CurrentBiome;//[Offset: 0x4ce, Size: 0x1] 0x715cda3c60
	bool bShouldCheckCharacterList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cf, Size: 0x1] 0x715cdd4e00
	bool bObjectiveContested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1] 0x715cdd4e80
	HuntersMatchStatsCollector* MatchStatsCollector;//[Offset: 0x4d8, Size: 0x8] 0x715cdd4f00
	HuntersMatchAnalyticsCollector* MatchAnalyticsCollector;//[Offset: 0x4e0, Size: 0x8] 0x715cdd4f80
	HuntersBadgeAwardingComponent* BadgeAwardingComponent;//[Offset: 0x4e8, Size: 0x8] 0x715cdd5000
	CinematicSequencerEventComponent* CinematicSequencerEventBroadcaster;//[Offset: 0x4f0, Size: 0x8] 0x715cdd5080
	bool AllowSwitchingCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1] 0x715cdd5100
	delegate TeamBasedActorSpawnedDelegate;//[Offset: 0x520, Size: 0x10] 0x715cdd5180
	delegate TeamBasedActorRecoveredDelegate;//[Offset: 0x530, Size: 0x10] 0x715cdd5200
	delegate TeamBasedActorDiedDelegate;//[Offset: 0x540, Size: 0x10] 0x715cdd5280
	delegate OnSquadCountChanged;//[Offset: 0x550, Size: 0x10] 0x715cdd3200
	delegate OnLocalPlayerFullyReady;//[Offset: 0x560, Size: 0x10] 0x715cdd3280
	bool ShowMapShowcaseScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1] 0x715cdd3300
	bool ShowVsScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1] 0x715cdd3380
	bool ShowResultScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 0x1] 0x715cdd3400
	bool bKillFeedEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58b, Size: 0x1] 0x715cdd3480
	bool bShowInMatchTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1] 0x715cdd3500
	DataTable* InMatchTipsTable;//[Offset: 0x590, Size: 0x8] 0x715cdd3580
	bool AutomaticallySelectsCharacterForPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1] 0x715cdd3600
	HackedComponentData[] HackedComponents;//[Offset: 0x5a0, Size: 0x10] 0x715cda3d00
	HackedComponentData[] OldHackedComponents;//[Offset: 0x5b0, Size: 0x10] 0x715cda3da0
	FString GameModeVariant;//[Offset: 0x5c0, Size: 0x10] 0x715cdd3780
	delegate EnterPodiumState;//[Offset: 0x5d0, Size: 0x10] 0x715cdd3800
	delegate LeftPodiumState;//[Offset: 0x5e0, Size: 0x10] 0x715cdd3880
	HunterSelectionData CharacterSelectionData;//[Offset: 0x5f0, Size: 0x28] 0x715cdd3900
	<int,HuntersSquadState*> Squads;//[Offset: 0x618, Size: 0x50] 0x715cd32680
	float MaxTimeBetweenDamageAndEliminationAlert;//[Offset: 0x668, Size: 0x4] 0x715cdd3a80
	bool AreFriendlyCollisionsDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1] 0x715cdd3b00
	MetaTuningDataKey[] FullCharacterIdList;//[Offset: 0x670, Size: 0x10] 0x715cda1500
	SDWidgetPoolingManager* PoolingManager;//[Offset: 0x680, Size: 0x8] 0x715cdd3c00
	WorldWidgetManagerComponent* WorldWidgetManager;//[Offset: 0x688, Size: 0x8] 0x715cdd3c80
	class UserWidget* HUDWidgetClass;//[Offset: 0x6a0, Size: 0x8] 0x715cda15a0
	DialogueMemoryComponent* DialogueMemoryComponent;//[Offset: 0x6a8, Size: 0x8] 0x715cdd3d00
	MatchEndData MatchEndData;//[Offset: 0x6b0, Size: 0x38] 0x715cdd3d80
	int PlayersAliveCount;//[Offset: 0x6e8, Size: 0x4] 0x715cdd3e00
	Actor*[] TeamBasedActors;//[Offset: 0x6f0, Size: 0x10] 0x715cda1640
	PlayersWaitingData WaitingData;//[Offset: 0x700, Size: 0x18] 0x715cdd3f00
	DialogueSpeakerComponent* DialogueSpeakerComponent;//[Offset: 0x718, Size: 0x8] 0x715cdd3f80
	void SetObjectiveContested(bool bContested);// 0x6a7fd28 0x715cdc1d60
	void RemoveHackedComponent(ActorComponent* HackedComponentToRemove);// 0x6a7f874 0x715cdc1e40
	void OnTeamBasedActorSpawned(const Actor* TeamBasedActor);// 0x6a7f344 0x715cdc1f20
	void OnTeamBasedActorDied(const Actor* TeamBasedActor);// 0x6a7f2a0 0x715cdc2000
	void OnRep_WaitingData();// 0x6a7f550 0x715cdc20e0
	void OnRep_PostMatchFinished();// 0x6a7fe44 0x715cdc21c0
	void OnRep_PlayersAliveCount();// 0x6a7f608 0x715cdc22a0
	void OnRep_ObjectiveContested();// 0x6a7f53c 0x715cdc2380
	void OnRep_MatchState(enum OldVal);// 0x6a7f564 0x715cdc2460
	void OnRep_MatchEndData();// 0x6a7f61c 0x715cdc2540
	void OnRep_HackedComponents();// 0x6a7f6a8 0x715cdc2620
	void OnRep_CharacterSelectionData(out const HunterSelectionData OldData);// 0x6a7fb10 0x715cdc2700
	void MulticastTeamAgentEliminated(EliminationData EliminationData);// 0x6a7f3e8 0x715cdc27e0
	void MulticastStartMatch();// 0x6a7ffb4 0x715cdc28c0
	void MulticastAllPlayersConfirmed();// 0x6a7fde8 0x715cdc29a0
	bool IsObjectiveContested();// 0x6a7fd0c 0x715cdc2a80
	bool IsLocalPlayerFullyReady();// 0x6a7ffd0 0x715cdc2b60
	bool IsInProgress();// 0x6a7fe58 0x715cdc2c40
	bool IsInOvertime();// 0x6a7fe7c 0x715cdc2d20
	bool IsComponentHacked(ActorComponent* ComponentToCheck);// 0x6a7f7c4 0x715cdc2e00
	bool HasMatchEndedInDraw();// 0x6a7f630 0x715cdc2ee0
	bool HasMatchEnded();// 0x6a7fea0 0x715cdc2fc0
	float GetMaxTimeBetweenDamageAndEliminationAlert();// 0x6a7fcd4 0x715cdc30a0
	MatchEndData GetMatchEndData();// 0x6a7f670 0x715cdc3180
	int GetHumanPlayerCount();// 0x6a7fbec 0x715cdc3260
	ActorComponent*[] GetHackedComponentsForPlayer(HuntersPlayerState* Player);// 0x6a7f6bc 0x715cdc3340
	bool GetAreFriendlyCollisionsDisabled();// 0x6a7fcf0 0x715cdc3420
	MetaTuningDataKey[] GetAllCharacters();// 0x6a7fc24 0x715cdc3500
	void EndMatch(out const MatchEndData InMatchEndData);// 0x6a7fed8 0x715cdc35e0
	void DebugSetMatchToInProgress();// 0x6a7fdd4 0x715cdc36c0
	bool AutoPickCharacterForPlayer(PlayerController* PlayerController, out MetaTuningDataKey OutCharacter);// 0x6a7fa08 0x715cdc37a0
	bool AddHackedComponent(ActorComponent* NewHackedComponent, HuntersPlayerState* Hacker);// 0x6a7f918 0x715cdc3880

--------------------------------
Class: BAGameStateBase.GameStateBase.Info.Actor.Object // 71a4b67400
	delegate OnServerTimeSynchronised;//[Offset: 0x280, Size: 0x10] 0x715cd9b000
	float ReplaySynchronisedServerWorldTime;//[Offset: 0x2e8, Size: 0x4] 0x715cd9b080
	void OnRep_ReplaySynchronisedServerWorldTime();// 0x69f674c 0x715cd5cc60
	bool HasSynchronisedServerTime();// 0x69f6760 0x715cd5cd40

--------------------------------
Class: HunterSelectionData // 715cec8680
	BAReplicatedTimer CharacterSelectionTimer;//[Offset: 0x0, Size: 0x10] 0x715cef5080
	SquadPlayers[] Squads;//[Offset: 0x10, Size: 0x10] 0x715ce97680
	bool AllConfirmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x715cef5200
	bool HaveStartedSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x715cef5280
	int CurrentSelectorIndex;//[Offset: 0x24, Size: 0x4] 0x715cef3200

--------------------------------
Class: SquadPlayers // 715cec85c0
	HuntersSquadState* SquadState;//[Offset: 0x0, Size: 0x8] 0x715cef5100

--------------------------------
Class: HuntersMatchStatsCollector.ActorComponent.Object // 71a4b83300
	MatchRatingsCalculator* MatchRatingsCalculator;//[Offset: 0xc8, Size: 0x8] 0x715cdd6f00
	class MatchRatingsCalculator* MatchRatingsCalculatorClass;//[Offset: 0xd0, Size: 0x8] 0x715cda2f40
	void OnMatchStarted();// 0x6a88cbc 0x715cdc44c0
	void OnMatchEnded(out const HuntersPlayerState*[] WinningPlayers);// 0x6a88cd0 0x715cdc45a0

--------------------------------
Class: MatchRatingsCalculator.Object // 71a4b87b80
	GameStateBase* GameState;//[Offset: 0x28, Size: 0x8] 0x715cdddd00
	GameModeBase* GameMode;//[Offset: 0x30, Size: 0x8] 0x715cdddd80
	float MatchStartTime;//[Offset: 0x38, Size: 0x4] 0x715cddde00
	float MatchEndTime;//[Offset: 0x3c, Size: 0x4] 0x715cddde80
	HuntersPlayerState*[] WinningPlayers;//[Offset: 0x40, Size: 0x10] 0x715cda4d40
	void LogRatingData(FString RatingName, const int RatingValue);// 0x6a9c030 0x715cdcaf80
	int CalculateMatchRating();// 0x45c6aa0 0x715cdcb060

--------------------------------
Class: HuntersMatchAnalyticsCollector.ActorComponent.Object // 71a4b83800
	void OnUpdatePing(HuntersPlayerState* PlayerState, float InPing);// 0x6a87968 0x715cdc4760
	void OnReplayStarted();// 0x6a87754 0x715cdc4840
	void OnReplayCompleted();// 0x6a87740 0x715cdc4920
	void OnReplayCancelled();// 0x6a87768 0x715cdc4a00
	void OnPlayerRemoved(HuntersPlayerState* PlayerState);// 0x6a8777c 0x715cdc4ae0
	void OnPlayerDied(out const EliminationData EliminationData);// 0x6a87a50 0x715cdc4bc0
	void OnPlayerAdded(HuntersPlayerState* PlayerState);// 0x6a87820 0x715cdc4ca0
	void OnGraphicsSettingsChanged(enum GraphicsSettingsContext);// 0x6a878c4 0x715cdc4d80

--------------------------------
Class: CinematicSequencerEventComponent.ActorComponent.Object // 71a4b6b780
	bool ShouldOverrideMatchResultAnimations();// 0x6a7a7a0 0x715cdc0b00
	void MulticastTriggerUIEvent(const enum EventType);// 0x6a7a6ec 0x715cdc0be0
	bool IsHUDHidden();// 0x6a7a7bc 0x715cdc0cc0

--------------------------------
Class: HackedComponentData // 715cec82c0
	ActorComponent* HackedComponent;//[Offset: 0x0, Size: 0x8] 0x715cef4d00
	HuntersPlayerState* Hacker;//[Offset: 0x8, Size: 0x8] 0x715cef4d80

--------------------------------
Class: WorldWidgetManagerComponent.SceneComponent.ActorComponent.Object // 71a4b25d80
	WorldWidgetCanvas* CurrentWorldWidgetCanvas;//[Offset: 0x200, Size: 0x8] 0x715cd27c00

--------------------------------
Class: WorldWidgetCanvas.CanvasPanel.PanelWidget.Widget.Visual.Object // 71a4b26000

--------------------------------
Class: PlayersWaitingData // 715cec8200
	int PlayersInWaitingRoom;//[Offset: 0x0, Size: 0x4] 0x715cef4b80
	int MaxPlayersInWaitingRoom;//[Offset: 0x4, Size: 0x4] 0x715cef4c00
	BAReplicatedTimer WaitingScreenTimeoutTimer;//[Offset: 0x8, Size: 0x10] 0x715cef4c80

--------------------------------
Class: HuttballHUDWidget.HuntersHUDWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4942400
	HuttballScoreTimerWidget* ScoreTimerWidget;//[Offset: 0x2b8, Size: 0x8] 0x715d1e6280
	void CountdownTimerActiveChanged(bool bNewActive);// 0x45c6aa0 0x715d1da500
	void CountdownNumberChanged(int NewTime);// 0x45c6aa0 0x715d1da5e0

--------------------------------
Class: HuttballScoreTimerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4941f00
	HuttballScoreTimerViewModel* ScoreTimerViewModel;//[Offset: 0x258, Size: 0x8] 0x715d1e5c00
	int SecondsLeftToCountdown;//[Offset: 0x260, Size: 0x4] 0x715d1e5c80
	void SetMaterialInstance(MaterialInstanceDynamic* Material, FName DeltaTimeParamName, float ScoreEffectRotationSpeed);// 0x409933c 0x715d1da180
	void OnSecondsCountdownReached();// 0x45c6aa0 0x715d1da260
	void OnFriendlyScoreChanged();// 0x45c6aa0 0x715d1da340
	void OnEnemyScoreChanged();// 0x45c6aa0 0x715d1da420

--------------------------------
Class: HuttballScoreTimerViewModel.SDListenerViewModel.SDViewModel.Object // 71a4942180
	TextBindable MatchTimerText;//[Offset: 0xa8, Size: 0x98] 0x715d1e5e80
	TextBindable FriendlyScoreText;//[Offset: 0x140, Size: 0x98] 0x715d1e5f00
	TextBindable EnemyScoreText;//[Offset: 0x1d8, Size: 0x98] 0x715d1e5f80
	TextBindable LeftScoreTargetText;//[Offset: 0x270, Size: 0x98] 0x715d1e6000
	TextBindable RightScoreTargetText;//[Offset: 0x308, Size: 0x98] 0x715d1e6080
	PlayerState* LocalPlayerState;//[Offset: 0x3a0, Size: 0x8] 0x715d1e6100
	HuntersGameState* CachedGameState;//[Offset: 0x3a8, Size: 0x8] 0x715d1e6180
	MaterialInstanceDynamic* MaterialInstanceDynamic;//[Offset: 0x3b0, Size: 0x8] 0x715d1e6200

--------------------------------
Class: LaunchSceneData.Interface.Object // 71a4941c80

--------------------------------
Class: MatchHUDNotificationDisplayDataAsset.DataAsset.Object // 71a4941280
	<enum,class NotificationWidget> GameEventWidgetMap;//[Offset: 0x30, Size: 0x50] 0x715cecca00
	<enum,class NotificationWidget> PlayerNotificationWidgetMap;//[Offset: 0x80, Size: 0x50] 0x715ceccac0
	<FName,class NotificationWidget> MatchAlertWidgetMap;//[Offset: 0xd0, Size: 0x50] 0x715ceccb80

--------------------------------
Class: NotificationWheelItemContent.UserWidget.Widget.Visual.Object // 71a4940b00
	void SetStaticData(NotificationWheelItemDataAsset* DataAsset);// 0x409baec 0x715d1d9a80
	void SetEventData(NotificationWheelEventData* EventData);// 0x409ba40 0x715d1d9b60
	void OnNotificationDisplayed();// 0x45c6aa0 0x715d1d9c40

--------------------------------
Class: NotificationWheelItemDataAsset.DataAsset.Object // 71a4940600
	float RadialFactor;//[Offset: 0x30, Size: 0x4] 0x715d1e7000
	float LifeTime;//[Offset: 0x34, Size: 0x4] 0x715d1e7080
	float FadeoutTime;//[Offset: 0x38, Size: 0x4] 0x715d1e7100
	class NotificationWheelItemContent* NotificationWidget;//[Offset: 0x40, Size: 0x8] 0x715d1b63c0

--------------------------------
Class: NotificationWheelEventData.Object // 71a4940100
	float StartingAlpha;//[Offset: 0x28, Size: 0x4] 0x715d1e6d00
	Vector PointToTrack;//[Offset: 0x2c, Size: 0xc] 0x715d1e6d80

--------------------------------
Class: NotificationWheelDamageContent.NotificationWheelItemContent.UserWidget.Widget.Visual.Object // 71a4940d80

--------------------------------
Class: NotificationWheelDamageDataAsset.NotificationWheelItemDataAsset.DataAsset.Object // 71a4940880
	<GameplayTag,DamageIndicatorDetails> DamageIndicatorDetails;//[Offset: 0x48, Size: 0x50] 0x715cecc940
	DamageIndicatorDetails DefaultDetails;//[Offset: 0x98, Size: 0x18] 0x715d1e6f00
	float DamageDeltaRequiredForMaximumDisplay;//[Offset: 0xb0, Size: 0x4] 0x715d1e6f80

--------------------------------
Class: DamageIndicatorDetails // 715da96940
	float MinimumDepth;//[Offset: 0x0, Size: 0x4] 0x715dab2580
	float MaximumDepth;//[Offset: 0x4, Size: 0x4] 0x715dab2600
	float MinimumDisplayAngle;//[Offset: 0x8, Size: 0x4] 0x715dab2680
	float MaximumDisplayAngle;//[Offset: 0xc, Size: 0x4] 0x715dab2700
	float WidgetScale;//[Offset: 0x10, Size: 0x4] 0x715dab2780
	bool ShowDirectionalIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x715dab2800

--------------------------------
Class: NotificationWheelDamageEventData.NotificationWheelEventData.Object // 71a4940380
	GameplayTagContainer DamageType;//[Offset: 0x38, Size: 0x20] 0x715d1e6c00
	float HealthPercentDelta;//[Offset: 0x58, Size: 0x4] 0x715d1e6c80

--------------------------------
Class: NotificationWheelItem.UserWidget.Widget.Visual.Object // 71a494a380
	void CalculateAndSetRenderAngle(Vector PointToTrack);// 0x409b74c 0x715d1d99a0

--------------------------------
Class: NotificationWheelWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a494a100
	void OnProtectionReduced(const Vector SourcePosition, const float Amount);// 0x45c6aa0 0x715d1d97e0
	void OnHealthReduced(const Vector SourcePosition, const float Amount, const GameplayTagContainer DamageType, const float TotalHealthDelta);// 0x45c6aa0 0x715d1d98c0

--------------------------------
Class: OnScreenIndicatorWidgetComponent.SceneComponent.ActorComponent.Object // 71a4949700
	bool bShouldUsePooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1] 0x715d1e7580
	bool bClampToScreenEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1] 0x715d1e7600
	bool bDistanceAndCursorFading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1] 0x715d1e7680
	float FadeStartDistance;//[Offset: 0x1f4, Size: 0x4] 0x715d1e7700
	float FadeEndDistance;//[Offset: 0x1f8, Size: 0x4] 0x715d1e7780
	float CentreFadeStartDistance;//[Offset: 0x1fc, Size: 0x4] 0x715d1e7800
	float CentreFadeEndDistance;//[Offset: 0x200, Size: 0x4] 0x715d1e7880
	float CentreFadeOuterRadius;//[Offset: 0x204, Size: 0x4] 0x715d1e7900
	float CentreFadeInnerRadius;//[Offset: 0x208, Size: 0x4] 0x715d1e7980
	float CentreFadeAmount;//[Offset: 0x20c, Size: 0x4] 0x715d1e7a00
	Vector4 Margin;//[Offset: 0x210, Size: 0x10] 0x715d1e7a80
	Vector2D Pivot;//[Offset: 0x220, Size: 0x8] 0x715d1e7b00
	class UserWidget* WidgetClass;//[Offset: 0x228, Size: 0x8] 0x715d1b6320
	int WidgetZOrder;//[Offset: 0x230, Size: 0x4] 0x715d1e7b80
	UserWidget* Widget;//[Offset: 0x238, Size: 0x8] 0x715d1e7c00
	bool bDisplayInReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x715d1e7c80
	bool bOverrideVisiblity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1] 0x715d1e7d00
	bool bCustomScreenLocationWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1] 0x715d1e7d80
	float AngleOffset;//[Offset: 0x250, Size: 0x4] 0x715d1e7e00
	float PositionOffsetX;//[Offset: 0x254, Size: 0x4] 0x715d1e7e80
	float PositionOffsetY;//[Offset: 0x258, Size: 0x4] 0x715d1e7f00
	Actor* PossessedPawn;//[Offset: 0x290, Size: 0x8] 0x715d1e7f80
	void SetOverrideVisiblity(bool bInOverrideVisiblity);// 0x409d610 0x715d1dc800
	void DeactivateWidget();// 0x409d5fc 0x715d1dc8e0

--------------------------------
Class: OnScreenLDCIndicatorWidgetComponent.OnScreenIndicatorWidgetComponent.SceneComponent.ActorComponent.Object // 71a4949480
	int8 ParentIdentifier;//[Offset: 0x298, Size: 0x1] 0x715d1e7480
	void SetParentIdentifier(int NewIdentifier);// 0x409d980 0x715d1dc720

--------------------------------
Class: OwningShieldHudWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4949200
	HealthInfo* ShieldHealthInfo;//[Offset: 0x258, Size: 0x8] 0x715d1e9400
	Actor* ShieldOwner;//[Offset: 0x260, Size: 0x8] 0x715d1e9480
	void OnShieldInitialized(Actor* ShieldPtr);// 0x409dc48 0x715d1dc640

--------------------------------
Class: PhasePipViewModel.SDListenerViewModel.SDViewModel.Object // 71a4948f80
	enum GetPhaseState();// 0x409dfec 0x715d1dc560

--------------------------------
Class: PhasePipWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4948d00
	PhasePipViewModel* PhasePipViewModel;//[Offset: 0x258, Size: 0x8] 0x715d1e9300
	void OnPhaseStateChanged();// 0x45c6aa0 0x715d1dc480

--------------------------------
Class: PlayerPossessedListenerWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4948580
	Actor* PossessedPawn;//[Offset: 0x278, Size: 0x8] 0x715d1e8f00
	void OnUnPossessed();// 0x45c6aa0 0x715d1dbf40
	void OnPossessed();// 0x45c6aa0 0x715d1dc020

--------------------------------
Class: RespawnDetailsWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4948300
	FText RespawnTimeFormat;//[Offset: 0x280, Size: 0x18] 0x715d1e8a00
	TextBindable RespawnTimeRemainingText;//[Offset: 0x298, Size: 0x98] 0x715d1e8a80
	BoolBindable ShowSquadInfo;//[Offset: 0x330, Size: 0x70] 0x715d1e8b00
	HuntersGameState* GameState;//[Offset: 0x3a0, Size: 0x8] 0x715d1e8b80
	HuntersPlayerState* LocalPlayerState;//[Offset: 0x3a8, Size: 0x8] 0x715d1e8c00
	void SetPlayerStateIndex(const HuntersPlayerState* PlayerState, int Index);// 0x409f174 0x715d1dbbc0
	void OnPlayerRemovedFromRespawnQueue(int Index);// 0x45c6aa0 0x715d1dbca0
	void OnPlayerAddedToRespawnQueue(const HuntersPlayerState* PlayerState);// 0x45c6aa0 0x715d1dbd80
	void InitializeFromBlueprint(Actor* InOwningActor);// 0x409f25c 0x715d1dbe60

--------------------------------
Class: ReticleDataAsset.DataAsset.Object // 71a4948080
	float SprintingReticleOpacity;//[Offset: 0x30, Size: 0x4] 0x715d1e8980

--------------------------------
Class: ReviveWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4947b80

--------------------------------
Class: ReviveHUDWidget.ReviveWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4947e00

--------------------------------
Class: ReviveViewModel.SDListenerViewModel.SDViewModel.Object // 71a4947900

--------------------------------
Class: SDStickerWidgetComponent.SDWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4947680
	delegate OnStickerAnimationClosedEvent;//[Offset: 0x558, Size: 0x10] 0x715d1ea480
	CharacterStickerWidget* StickerWidget;//[Offset: 0x568, Size: 0x8] 0x715d1ea500
	StickersDataAsset* StickersDataAsset;//[Offset: 0x570, Size: 0x8] 0x715d1e8480
	HuntersCharacterBase* PlayerOnMap;//[Offset: 0x578, Size: 0x8] 0x715d1e8500
	ParticleSystem*[] ParticlesToSpawn;//[Offset: 0x590, Size: 0x10] 0x715d1b5f60
	ParticleSystemComponent*[] SpawnedParticleSystemComponent;//[Offset: 0x5a0, Size: 0x10] 0x715d1b6000
	float MaxViewDistance;//[Offset: 0x5b0, Size: 0x4] 0x715d1e8680
	void UpdateStickerWithVFX(int InAssetIndex);// 0x40a3bf0 0x715d1db5a0
	ParticleSystemComponent* SpawnVFX(ParticleSystem* ParticleToSpawn);// 0x40a3b44 0x715d1db680
	void SetStickerVisibility(bool bInShouldBeVisible);// 0x40a3cd0 0x715d1db760
	void OpenAnimation();// 0x40a3ca8 0x715d1db840
	void OnTriggeredByServer(int InStickerIndex);// 0x40a3d7c 0x715d1db920
	void CloseAnimation();// 0x40a3c94 0x715d1dba00
	void BroadcastAnimationEnded();// 0x40a3cbc 0x715d1dbae0

--------------------------------
Class: StickersDataAsset.DataAsset.Object // 71a4946c80
	StickerWithVFX[] StickersWithVFX;//[Offset: 0x30, Size: 0x10] 0x715d1b5ec0
	StickerWithVFX DefaultStickerWithVFX;//[Offset: 0x40, Size: 0x98] 0x715d1ec300
	StickerWithVFX GetStickerWithVFX(int InIndex);// 0x40a5fb4 0x715d1dda60
	SlateBrush GetSticker(int InIndex);// 0x40a6174 0x715d1ddb40
	SlateBrush GetRandomSticker();// 0x40a5f7c 0x715d1ddc20
	int GetNumberOfStickers();// 0x40a5f60 0x715d1ddd00

--------------------------------
Class: StickerWithVFX // 715da96700
	SlateBrush StickerBrush;//[Offset: 0x0, Size: 0x88] 0x715dab2380
	ParticleSystem*[] StickerVFX;//[Offset: 0x88, Size: 0x10] 0x715d89c2c0

--------------------------------
Class: SegmentedBar.Widget.Visual.Object // 71a4947180
	SegmentedArcBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x90] 0x715d1eaf80
	float Percent;//[Offset: 0x198, Size: 0x4] 0x715d1eb000
	int NumSegments;//[Offset: 0x19c, Size: 0x4] 0x715d1eb080
	float SpacerProportion;//[Offset: 0x1a0, Size: 0x4] 0x715d1eb100
	LinearColor FillColorAndOpacity;//[Offset: 0x1a4, Size: 0x10] 0x715d1eb180
	LinearColor BackgroundColorAndOpacity;//[Offset: 0x1b4, Size: 0x10] 0x715d1eb200
	delegate PercentDelegate;//[Offset: 0x1c4, Size: 0x10] 0x715d1eb280
	delegate NumSegmentsDelegate;//[Offset: 0x1d4, Size: 0x10] 0x715d1eb300
	delegate FillColorAndOpacityDelegate;//[Offset: 0x1e4, Size: 0x10] 0x715d1eb380
	delegate BackgroundColorAndOpacityDelegate;//[Offset: 0x1f4, Size: 0x10] 0x715d1eb400
	void SetPercent(float InPercent);// 0x40a51b8 0x715d1de320
	void SetNumSegments(int InNumSegments);// 0x40a5114 0x715d1de400
	void SetFillColorAndOpacity(LinearColor InColor);// 0x40a5070 0x715d1de4e0
	void SetBackgroundColorAndOpacity(LinearColor InColor);// 0x40a4fcc 0x715d1de5c0

--------------------------------
Class: SegmentedFillBar.Widget.Visual.Object // 71a4946f00
	SegmentedFillBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x90] 0x715d1ea580
	float Percent;//[Offset: 0x198, Size: 0x4] 0x715d1ea600
	float ExtraPercent;//[Offset: 0x19c, Size: 0x4] 0x715d1ea680
	int NumSegments;//[Offset: 0x1a0, Size: 0x4] 0x715d1ea700
	float SpacerProportion;//[Offset: 0x1a4, Size: 0x4] 0x715d1ea780
	LinearColor FillColorAndOpacity;//[Offset: 0x1a8, Size: 0x10] 0x715d1ea800
	LinearColor ExtraFillColorAndOpacity;//[Offset: 0x1b8, Size: 0x10] 0x715d1ea880
	LinearColor BackgroundColorAndOpacity;//[Offset: 0x1c8, Size: 0x10] 0x715d1ea900
	delegate PercentDelegate;//[Offset: 0x1d8, Size: 0x10] 0x715d1ea980
	delegate ExtraPercentDelegate;//[Offset: 0x1e8, Size: 0x10] 0x715d1eaa00
	delegate NumSegmentsDelegate;//[Offset: 0x1f8, Size: 0x10] 0x715d1eaa80
	delegate FillColorAndOpacityDelegate;//[Offset: 0x208, Size: 0x10] 0x715d1eab00
	delegate ExtraFillColorAndOpacityDelegate;//[Offset: 0x218, Size: 0x10] 0x715d1eab80
	delegate BackgroundColorAndOpacityDelegate;//[Offset: 0x228, Size: 0x10] 0x715d1eac00
	void SetPercent(float InPercent);// 0x40a5894 0x715d1ddde0
	void SetNumSegments(int InNumSegments);// 0x40a574c 0x715d1ddec0
	void SetFillColorAndOpacity(LinearColor InColor);// 0x40a56a8 0x715d1ddfa0
	void SetExtraPercent(float InExtraPercent);// 0x40a57f0 0x715d1de080
	void SetExtraFillColorAndOpacity(LinearColor InExtraColor);// 0x40a5604 0x715d1de160
	void SetBackgroundColorAndOpacity(LinearColor InColor);// 0x40a5560 0x715d1de240

--------------------------------
Class: SegmentedFillBarStyle.SlateWidgetStyle // 715da967c0
	SlateBrush FillImage;//[Offset: 0x8, Size: 0x88] 0x715dab2480

--------------------------------
Class: ThreatIndicatorWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4946a00
	HunterViewModel* HunterViewModel;//[Offset: 0x260, Size: 0x8] 0x715d1ec100
	float MinimumThreatToShowIndicator;//[Offset: 0x268, Size: 0x4] 0x715d1ec180
	void SetDataContextFromBlueprint(HunterViewModel* InDataContext);// 0x40a65c8 0x715d1dd7c0
	void OnThreatChanged();// 0x45c6aa0 0x715d1dd8a0
	void OnHUDCinematicVisibilityChanged();// 0x45c6aa0 0x715d1dd980

--------------------------------
Class: TimedNotificationWidget.NotificationWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4946780
	WidgetAnimation* ShowAnimation;//[Offset: 0x2c0, Size: 0x8] 0x715d1ebf80
	WidgetAnimation* HideAnimation;//[Offset: 0x2c8, Size: 0x8] 0x715d1ec000
	WidgetAnimation* LoopAnimation;//[Offset: 0x2d0, Size: 0x8] 0x715d1ec080
	void PlayHideAnimation();// 0x40a69f4 0x715d1dd6e0

--------------------------------
Class: UltimateAbilityButtonWidget.HuntersStateWidgetBase.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4945d80
	GamepadGlyph* GamepadButtonGlyph;//[Offset: 0x290, Size: 0x8] 0x715d1ed400
	CanvasPanel* CustomizationContainer;//[Offset: 0x298, Size: 0x8] 0x715d1ed480
	CanvasPanel* UltWidgetContainer;//[Offset: 0x2a0, Size: 0x8] 0x715d1ed500
	Pawn* CurrentPawn;//[Offset: 0x2a8, Size: 0x8] 0x715d1ed580
	HuntersAbilitySystemComponent* CurrentPawnAbilitySystem;//[Offset: 0x2b0, Size: 0x8] 0x715d1ed600
	HuntersGameplayAbility* CurrentUltimateAbilityCDO;//[Offset: 0x2b8, Size: 0x8] 0x715d1ed680
	void TriggerUltimateAbility();// 0x40a78dc 0x715d1dcaa0
	void OnPlayerStateUltimatePointsChanged(HuntersPlayerState* PlayerState);// 0x40a7804 0x715d1dcb80
	void OnChargeAmountChanged(float NormalizedChargeAmount);// 0x45c6aa0 0x715d1dcc60
	void OnAbilityIconBrushIsAvailable(SlateBrush IconBrush);// 0x45c6aa0 0x715d1dcd40
	void OnAbilityEnded(bool WasCancelled);// 0x45c6aa0 0x715d1dce20
	void OnAbilityActivated();// 0x45c6aa0 0x715d1dcf00
	void OnAbilityActivatableStateChanged(bool NewIsAbilityActivatable);// 0x45c6aa0 0x715d1dcfe0
	bool IsAbilityActive();// 0x40a78f0 0x715d1dd0c0
	bool IsAbilityActivatable();// 0x40a790c 0x715d1dd1a0
	float GetCurrentNormalizedChargeAmount();// 0x40a78a8 0x715d1dd280

--------------------------------
Class: UnitsRemainingViewModel.BRStatViewModel.SDListenerViewModel.SDViewModel.Object // 71a4945b00

--------------------------------
Class: LevelUpButtonWidget.UserWidget.Widget.Visual.Object // 71a4945880
	void SetupData(const HuntersCharacterAbility* InChoiceAbility, int InChoiceIndex);// 0x40ab91c 0x715d1dfe40
	void OnChoiceMade();// 0x40ab908 0x715d1dff20

--------------------------------
Class: LevelUpWidget.UserWidget.Widget.Visual.Object // 71a4945600
	void OnConfirmedLevelUp(HuntersPlayerState* State);// 0x40ac344 0x715d1dfba0
	HuntersCharacterAbility* GetLockedVariantNoOpAbility();// 0x45c6aa0 0x715d1dfc80
	LevelUpButtonWidget*[] GetButtons();// 0x45c6aa0 0x715d1dfd60

--------------------------------
Class: AbilityTask_ClientAuthorityMovementBase.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a4945380
	float Duration;//[Offset: 0xa4, Size: 0x4] 0x715d1ed080
	void OnClientAuthoritativeMovementChanged(const bool bEnabled);// 0x40de33c 0x715d1dfac0

--------------------------------
Class: AbilityTask_ForwardForceWithReflection.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a494f600
	delegate OnFinish;//[Offset: 0xb0, Size: 0x10] 0x715d1ec780
	delegate OnMutualCollision;//[Offset: 0xc0, Size: 0x10] 0x715d1ec800
	Vector_NetQuantizeNormal InitialWorldDirection;//[Offset: 0xd0, Size: 0xc] 0x715d1ec880
	float Strength;//[Offset: 0xdc, Size: 0x4] 0x715d1ec900
	float Duration;//[Offset: 0xe0, Size: 0x4] 0x715d1ec980
	int MutualCollisionPriority;//[Offset: 0xe4, Size: 0x4] 0x715d1eca00
	void OnAuthorityHadHighPriorityMutualCollision();// 0x40de798 0x715d1df740
	void OnAuthorityHadEqualPriorityMutualCollision();// 0x40de7ac 0x715d1df820
	void OnActorBeginOverlap(Actor* Actor, Actor* OtherActor);// 0x40de7c0 0x715d1df900
	static AbilityTask_ForwardForceWithReflection* CreateForwardForceWithReflection(GameplayAbility* OwningAbility, FName InTaskInstanceName, Vector InitialWorldDirection, float InStrength, float InDuration, enum InVelocityOnFinishMode, Vector InSetVelocityOnFinish, float InClampVelocityOnFinish, int MutualCollisionPriority);// 0x40de8a4 0x715d1df9e0

--------------------------------
Class: AbilityTask_GrappleTravel.AbilityTask.GameplayTask.Object // 71a494f380
	delegate OnTravelStarted;//[Offset: 0x78, Size: 0x10] 0x715d1ed700
	delegate OnTargetLocationReached;//[Offset: 0x88, Size: 0x10] 0x715d1ed780
	delegate OnApexPointReached;//[Offset: 0x98, Size: 0x10] 0x715d1ed800
	Vector StartLocation;//[Offset: 0xc0, Size: 0xc] 0x715d1ed880
	Vector TargetLocation;//[Offset: 0xcc, Size: 0xc] 0x715d1ed900
	Vector TargetActorStartLocation;//[Offset: 0xd8, Size: 0xc] 0x715d1ed980
	byte PreviousCustomMovementMode;//[Offset: 0xe4, Size: 0x1] 0x715d1eda00
	float MaxAdjustmentPerSecond;//[Offset: 0xe8, Size: 0x4] 0x715d1eda80
	static void SetGrappleHackEnabled(GameplayAbility* OwningAbility, bool bEnabled);// 0x40df1c8 0x715d1df4a0
	static AbilityTask_GrappleTravel* GrappleTravelToTarget(GameplayAbility* OwningAbility, FName TaskInstanceName, Actor* TargetActor, float MaxAdjustmentPerSecond, float DistanceAheadOfTarget, float GrappleSpeed, float Gravity, float TargetApexHeight, bool ReduceSpeedWhenCloser, bool DrawDebugPath, bool TeleportToSplineEndWhenFinished);// 0x40df2a8 0x715d1df580
	static AbilityTask_GrappleTravel* GrappleTravel(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector TargetRopeAttachPoint, Vector TargetLandLocation, float GrappleSpeed, float Gravity, float TargetApexHeight, bool ReduceSpeedWhenCloser, StaticMeshComponent* GrappleRopeActor, bool DrawDebugPath, bool TeleportToSplineEndWhenFinished, FName GrappleHookReleaseSocketName);// 0x40df610 0x715d1df660

--------------------------------
Class: AbilityTask_JumpWithParams.AbilityTask_ApplyRootMotionJumpForce.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a494f100
	float MovementSpeedOverride;//[Offset: 0xfc, Size: 0x4] 0x715d1eeb80
	float AirControlOverride;//[Offset: 0x100, Size: 0x4] 0x715d1eec00
	float GravityScaleOverride;//[Offset: 0x104, Size: 0x4] 0x715d1eec80
	float FallingLateralFrictionOverride;//[Offset: 0x108, Size: 0x4] 0x715d1eed00
	float BrakingDecelerationFallingOverride;//[Offset: 0x10c, Size: 0x4] 0x715d1eed80
	static AbilityTask_JumpWithParams* JumpWithParams(GameplayAbility* OwningAbility, FName TaskInstanceName, Rotator InRotation, float InDistance, float InHeight, float InDuration, float InMinimumLandedTriggerTime, bool bInFinishOnLanded, enum InVelocityOnFinishMode, Vector InSetVelocityOnFinish, float InClampVelocityOnFinish, CurveVector* InPathOffsetCurve, CurveFloat* InTimeMappingCurve, bool bInIsAdditive, float InMovementSpeedOverride, float InAirControlOverride, float InGravityScaleOverride, float InFallingLateralFrictionOverride, float InBrakingDecelerationFallingOverride);// 0x40e0008 0x715d1df3c0

--------------------------------
Class: AbilityTask_MovementSyncPoint.AbilityTask.GameplayTask.Object // 71a494ee80
	delegate OnSync;//[Offset: 0x78, Size: 0x10] 0x715d1eff80
	delegate OnFailure;//[Offset: 0x88, Size: 0x10] 0x715d1ee780
	void OnPreServerMove(const float MoveTimestamp, const float DeltaTime);// 0x40e0bfc 0x715d1df120
	void OnAutoProxyPrePerformMovement(const float MoveTimestamp);// 0x40e0b58 0x715d1df200
	static AbilityTask_MovementSyncPoint* MovementSyncPoint(GameplayAbility* OwningAbility, byte SyncID, FName TaskInstanceName);// 0x40e0ce0 0x715d1df2e0

--------------------------------
Class: AbilityTask_TraverseToActor.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a494ec00
	delegate OnCompleted;//[Offset: 0xa8, Size: 0x10] 0x715d200b80
	delegate OnFailedToReachDestination;//[Offset: 0xb8, Size: 0x10] 0x715d200c00
	delegate OnSplineEvent;//[Offset: 0xc8, Size: 0x10] 0x715d200c80
	float Duration;//[Offset: 0xd8, Size: 0x4] 0x715d200d00
	Vector OriginalStartLocation;//[Offset: 0xdc, Size: 0xc] 0x715d200d80
	Vector OriginalTargetLocation;//[Offset: 0xe8, Size: 0xc] 0x715d200e00
	Vector OriginalTargetActorLocation;//[Offset: 0xf4, Size: 0xc] 0x715d200e80
	float DistanceAheadOfTarget;//[Offset: 0x100, Size: 0x4] 0x715d200f00
	float MaxAdjustmentPerSecondTowardsTarget;//[Offset: 0x104, Size: 0x4] 0x715d200f80
	Actor* TargetActor;//[Offset: 0x108, Size: 0x8] 0x715d201000
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x715d201080
	bool bAdjustHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1] 0x715d1ef800
	float MovementSpeed;//[Offset: 0x114, Size: 0x4] 0x715d1ef880
	HuntersTraversalSplineSet* TraversalSplineSet;//[Offset: 0x118, Size: 0x8] 0x715d1ef900
	static AbilityTask_TraverseToActor* TraverseToActor(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector OwnerActorInitialLocation, Actor* TargetActor, Vector TargetActorInitialLocation, float DistanceAheadOfTarget, float MaxAdjustmentPerSecondTowardsTarget, float MovementSpeed, class HuntersTraversalSplineSet SplineSet, bool bDisableCollision, bool bAdjustHeight, bool bDrawDebugPath);// 0x40e124c 0x715d1df040

--------------------------------
Class: HuntersTraversalSplineSet.Object // 71a4962900
	HuntersTraversalSplineSegment[] SegmentedByDistance;//[Offset: 0x28, Size: 0x10] 0x715d1b70e0
	FString[] EventNames;//[Offset: 0x38, Size: 0x10] 0x715d1b7180

--------------------------------
Class: HuntersTraversalSplineSegment // 715da99280
	HuntersTraversalSpline[] SegmentedByHeight;//[Offset: 0x0, Size: 0x10] 0x715d89bfa0
	float HorizontalDistance;//[Offset: 0x10, Size: 0x4] 0x715dab3900

--------------------------------
Class: HuntersTraversalSpline // 715da991c0
	RichCurve ForwardOffsetCurve;//[Offset: 0x0, Size: 0x80] 0x715dab3600
	RichCurve VerticalOffsetCurve;//[Offset: 0x80, Size: 0x80] 0x715dab3680
	float VerticalDistance;//[Offset: 0x100, Size: 0x4] 0x715dab3700
	float[] EventTimes;//[Offset: 0x108, Size: 0x10] 0x715d89bf00
	float ApexT;//[Offset: 0x118, Size: 0x4] 0x715dab3800

--------------------------------
Class: AbilityTask_TraverseToLocation.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a494e980
	delegate OnCompleted;//[Offset: 0xa8, Size: 0x10] 0x715d201e00
	delegate OnFailedToReachDestination;//[Offset: 0xb8, Size: 0x10] 0x715d201e80
	delegate OnSplineEvent;//[Offset: 0xc8, Size: 0x10] 0x715d201f00
	Vector StartLocation;//[Offset: 0xd8, Size: 0xc] 0x715d201f80
	Vector TargetLocation;//[Offset: 0xe4, Size: 0xc] 0x715d202000
	float Duration;//[Offset: 0xf0, Size: 0x4] 0x715d202080
	byte ExitMovementMode;//[Offset: 0xf4, Size: 0x1] 0x715d202100
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1] 0x715d200080
	bool bAdjustHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 0x1] 0x715d200100
	HuntersTraversalSplineSet* TraversalSplineSet;//[Offset: 0xf8, Size: 0x8] 0x715d200180
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x715d200200
	bool bMaintainVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1] 0x715d200280
	bool bRestrictSpeedToExpected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1] 0x715d200300
	static AbilityTask_TraverseToLocation* TraverseToLocation(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector Location, float Speed, class HuntersTraversalSplineSet SplineSet, byte ExitMovementMode, bool bDisableCollision, bool bAdjustHeight, bool bDrawDebugPath, bool bMaintainVelocity, bool bRestrictSpeedToExpected);// 0x40e19dc 0x715d1dee80
	static float CalculateTraversalDuration(GameplayAbility* OwningAbility, Vector TargetLocation, float Speed, out Vector OutStartLocation);// 0x40e1d6c 0x715d1def60

--------------------------------
Class: AbilityTask_UpdateGrappleRope.AbilityTask.GameplayTask.Object // 71a494e700
	Vector TargetRopeAttachPoint;//[Offset: 0x74, Size: 0xc] 0x715d201980
	StaticMeshComponent* GrappleRopeMesh;//[Offset: 0x80, Size: 0x8] 0x715d201a00
	FName GrappleHookReleaseSocketName;//[Offset: 0x88, Size: 0x8] 0x715d201a80
	static AbilityTask_UpdateGrappleRope* UpdateGrappleRope(GameplayAbility* OwningAbility, FName TaskInstanceName, Vector TargetRopeAttachPoint, StaticMeshComponent* GrappleRopeMesh, FName GrappleHookReleaseSocketName);// 0x40e2784 0x715d1deda0

--------------------------------
Class: AbilityTask_WaitArrival.AbilityTask.GameplayTask.Object // 71a494e480
	delegate OnArrival;//[Offset: 0x78, Size: 0x10] 0x715d201600
	static AbilityTask_WaitArrival* CreateWaitArrival(GameplayAbility* OwningAbility, const Actor* SourceActor, out const GameplayAbilityTargetDataHandle TargetData, float ArrivalDistance);// 0x40e2efc 0x715d1debe0
	void Arrived(out const HitResult Impact);// 0x40e2e2c 0x715d1decc0

--------------------------------
Class: AbilityTask_WarpedRootMotionTraverseToLocation.AbilityTask_ApplyRootMotion_Base.AbilityTask.GameplayTask.Object // 71a494e200
	delegate OnCompleted;//[Offset: 0xa8, Size: 0x10] 0x715d202d80
	delegate OnFailed;//[Offset: 0xb8, Size: 0x10] 0x715d202e00
	Vector StartLocation;//[Offset: 0xc8, Size: 0xc] 0x715d202e80
	Vector TargetLocation;//[Offset: 0xd4, Size: 0xc] 0x715d202f00
	Vector WarpMultiplier;//[Offset: 0xe0, Size: 0xc] 0x715d202f80
	float Duration;//[Offset: 0xec, Size: 0x4] 0x715d203000
	CurveVector* OriginalRootMotionData;//[Offset: 0xf0, Size: 0x8] 0x715d203080
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1] 0x715d203100
	bool bSetVelocityOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1] 0x715d203180
	static AbilityTask_WarpedRootMotionTraverseToLocation* WarpedRootMotionTraverseToLocation(GameplayAbility* OwningAbility, FName TaskInstanceName, const Vector StartLocation, const Vector TargetLocation, float OverallSpeed, const HuntersCharacterBase* HuntersCharacter, const GameplayTag OriginalRootMotionDataTag, bool bDrawDebugPath, bool bSetVelocityOnExit);// 0x40e3560 0x715d1deb00

--------------------------------
Class: AnchorLedgeActor.Actor.Object // 71a494df80
	float LandingPushbackDistance;//[Offset: 0x244, Size: 0x4] 0x715d202380
	float NavLinkDownPushbackDistance;//[Offset: 0x248, Size: 0x4] 0x715d202400
	Vector EdgeNormal;//[Offset: 0x24c, Size: 0xc] 0x715d202480
	Vector ExtremePt1;//[Offset: 0x258, Size: 0xc] 0x715d202500
	Vector ExtremePt2;//[Offset: 0x264, Size: 0xc] 0x715d202580
	ShapeComponent* Collision;//[Offset: 0x270, Size: 0x8] 0x715d202600
	GameplayTagContainer TargetingTags;//[Offset: 0x278, Size: 0x20] 0x715d202680
	EnvQuery* ValidLocationsLedgeLinkEQS;//[Offset: 0x298, Size: 0x8] 0x715d202700
	delegate OnSmartLinkReached;//[Offset: 0x2a0, Size: 0x10] 0x715d202780
	GameplayTag RequiredGameplayTagForAITraversal;//[Offset: 0x2b0, Size: 0x8] 0x715d202800
	AITraversalRangeBucket[] AITraversalRangeBuckets;//[Offset: 0x2b8, Size: 0x10] 0x715d1b59c0
	HuntersNavLinkCustomComponent*[] GrappleSmartLinks;//[Offset: 0x2c8, Size: 0x10] 0x715d1b5a60
	NavigationLink[] FallDownLinks;//[Offset: 0x2d8, Size: 0x10] 0x715d1b5b00
	float NavLinkSearchExtentsSize;//[Offset: 0x2e8, Size: 0x4] 0x715d202a00
	void SetupGeneratingNavLinks();// 0x45c6aa0 0x715d211c80
	void ResumePathFollowing(Actor* Agent);// 0x40e3f38 0x715d1de780
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x45c6aa0 0x715d1de860
	Vector GetTargetActorLocation();// 0x40e40c0 0x715d1de940
	void CalculateLandingPoints(Vector ExtremeEdgePt1, Vector ExtremeEdgePt2);// 0x40e3fdc 0x715d1dea20

--------------------------------
Class: AITraversalRangeBucket // 715da96640
	float Range;//[Offset: 0x0, Size: 0x4] 0x715dab2200
	int Count;//[Offset: 0x4, Size: 0x4] 0x715dab2280
	float PreferredMinDistBetweenPoints;//[Offset: 0x8, Size: 0x4] 0x715dab2300

--------------------------------
Class: HuntersNavLinkCustomComponent.NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object // 71a494f880
	GameplayTag RequiredGameplayTag;//[Offset: 0x190, Size: 0x8] 0x715d209400
	GameplayTagContainer BlockingGameplayTagContainer;//[Offset: 0x198, Size: 0x20] 0x715d209480
	bool bCheckTargetLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1] 0x715d207400

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object // 71a4965100
	uint32 NavLinkUserId;//[Offset: 0xe8, Size: 0x4] 0x715d207480
	class NavArea* EnabledAreaClass;//[Offset: 0xf0, Size: 0x8] 0x715d1b7a40
	class NavArea* DisabledAreaClass;//[Offset: 0xf8, Size: 0x8] 0x715d1b7ae0
	NavAgentSelector SupportedAgents;//[Offset: 0x100, Size: 0x4] 0x715d207500
	Vector LinkRelativeStart;//[Offset: 0x104, Size: 0xc] 0x715d207580
	Vector LinkRelativeEnd;//[Offset: 0x110, Size: 0xc] 0x715d207600
	byte LinkDirection;//[Offset: 0x11c, Size: 0x1] 0x715d207680
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11d, Size: 0x1] 0x715d207700
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11d, Size: 0x1] 0x715d207780
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11d, Size: 0x1] 0x715d207800
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11d, Size: 0x1] 0x715d207880
	Vector ObstacleOffset;//[Offset: 0x120, Size: 0xc] 0x715d207900
	Vector ObstacleExtent;//[Offset: 0x12c, Size: 0xc] 0x715d207980
	class NavArea* ObstacleAreaClass;//[Offset: 0x138, Size: 0x8] 0x715d1b7b80
	float BroadcastRadius;//[Offset: 0x140, Size: 0x4] 0x715d207a00
	float BroadcastInterval;//[Offset: 0x144, Size: 0x4] 0x715d207a80
	byte BroadcastChannel;//[Offset: 0x148, Size: 0x1] 0x715d207b00

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object // 71a4964e80
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1] 0x715d207b80
	Object* CachedNavParent;//[Offset: 0xd8, Size: 0x8] 0x715d207c00
	void SetNavigationRelevancy(bool bRelevant);// 0x6633b5c 0x715d212fc0

--------------------------------
Class: GameplayEffectZone.Actor.Object // 71a494da80
	GameplayEffectSpecApplicationData[] PreCreatedEffects;//[Offset: 0x238, Size: 0x10] 0x715d1b5740
	GameplayEffectApplicationData[] GameplayEffectApplicationData;//[Offset: 0x248, Size: 0x10] 0x715d1b57e0
	<Actor*,int> ActorsCurrentlyOverlapping;//[Offset: 0x258, Size: 0x50] 0x715cecc880
	<Actor*> TargetsAlreadyEnteredInZone;//[Offset: 0x2a8, Size: 0x50] 0x715d1b5880
	bool bCanApplyToInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1] 0x715d203600
	bool bBindColliderOverlapDelegatesOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1] 0x715d203680
	bool bRequireLineOfSightToActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1] 0x715d203700
	Vector LineOfSightCheckActorLocationOffset;//[Offset: 0x2fc, Size: 0xc] 0x715d203780
	bool bApplyMaximumToleratedImpactDotProduct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x715d203800
	float MaximumToleratedImpactDotProduct;//[Offset: 0x30c, Size: 0x4] 0x715d203880
	bool bRevalidateTargetsOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x715d203900
	bool bIgnoreInstigatorTeamMates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1] 0x715d203980
	float ToleratedOnTickRevalidationLatency;//[Offset: 0x314, Size: 0x4] 0x715d203a00
	Object* EffectSourceObject;//[Offset: 0x320, Size: 0x8] 0x715d203a80
	void SetGenericTeamId(out const GenericTeamId InTeamID);// 0x6ab28ac 0x715d2112e0
	void PreCreateEffectSpecsWithSourceObject(Object* SourceObject);// 0x6ab296c 0x715d2113c0
	void OnOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x6ab240c 0x715d2114a0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6ab2580 0x715d211580
	bool IsTargetViable(Actor* Target);// 0x6ab2354 0x715d211660
	Vector GetLineOfSightTraceOrigin();// 0x6ab2270 0x715d211740
	int GetGameplayEffectLevel();// 0x6ab27a8 0x715d211820
	void GetColliders(out PrimitiveComponent*[] Colliders);// 0x6ab27e4 0x715d211900
	PrimitiveComponent* GetCollider();// 0x45c6aa0 0x715d2119e0
	void GameplayEffectApplied();// 0x45c6aa0 0x715d211ac0
	void BindColliderOverlapDelegates(bool bCheckForExistingOverlaps);// 0x6ab22a8 0x715d211ba0

--------------------------------
Class: GameplayEffectSpecApplicationData // 714906e980
	GameplayEffectSpecHandle Effect;//[Offset: 0x0, Size: 0x10] 0x715d936980
	enum ApplicationRule;//[Offset: 0x10, Size: 0x1] 0x715d8936c0

--------------------------------
Class: GameplayEffectApplicationData // 714906e8c0
	class GameplayEffect* Effect;//[Offset: 0x0, Size: 0x8] 0x715d893300
	<GameplayTag,float> SetByCallerTags;//[Offset: 0x8, Size: 0x50] 0x714906e740
	<GameplayTag,CurveTableRowHandle> SetByCallerTagsWithHandle;//[Offset: 0x58, Size: 0x50] 0x714906e800
	enum ApplicationRule;//[Offset: 0xa8, Size: 0x1] 0x715d8933a0

--------------------------------
Class: AClimbUpEnableEffectZone.GameplayEffectZone.Actor.Object // 71a494dd00

--------------------------------
Class: NavLinkProxy.Actor.Object // 71a494d580
	NavigationLink[] PointLinks;//[Offset: 0x230, Size: 0x10] 0x715d1b5600
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x240, Size: 0x10] 0x715d1b56a0
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x250, Size: 0x8] 0x715d205000
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x715d205080
	delegate OnSmartLinkReached;//[Offset: 0x260, Size: 0x10] 0x715d205100
	void SetSmartLinkEnabled(bool bEnabled);// 0x67150e0 0x715d210e80
	void ResumePathFollowing(Actor* Agent);// 0x67151c4 0x715d210f60
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x45c6aa0 0x715d211040
	bool IsSmartLinkEnabled();// 0x671518c 0x715d211120
	bool HasMovingAgents();// 0x67150a8 0x715d211200

--------------------------------
Class: ClimbUpObjectActor.NavLinkProxy.Actor.Object // 71a494d800
	Transform OrientationTransform;//[Offset: 0x280, Size: 0x30] 0x715d204b00
	ShapeComponent* Collision;//[Offset: 0x2b0, Size: 0x8] 0x715d204b80
	Vector ClimbupExtremePoint1;//[Offset: 0x2b8, Size: 0xc] 0x715d204c00
	Vector ClimbupExtremePoint2;//[Offset: 0x2c4, Size: 0xc] 0x715d204c80
	float LandingPushbackDistance;//[Offset: 0x2d0, Size: 0x4] 0x715d204d00
	NavLinkCustomComponent* DownSmartLinkComp;//[Offset: 0x2d8, Size: 0x8] 0x715d204d80
	void SetEnabled(bool bEnabled);// 0x40e477c 0x715d210cc0
	bool IsEnabled();// 0x40e4828 0x715d210da0

--------------------------------
Class: DynamicNavlinkActor.NavLinkProxy.Actor.Object // 71a494d300
	void SetEnabled(bool bEnabled);// 0x40e66d4 0x715d210b00
	bool IsEnabled();// 0x40e6780 0x715d210be0

--------------------------------
Class: GameplayAbility_CombatRoll.HuntersGameplayAbility.GameplayAbility.Object // 71a494d080
	GameplayTag RollAnimationTag;//[Offset: 0x6f8, Size: 0x8] 0x715d206100
	RollEffectApplication[] RollEffects;//[Offset: 0x700, Size: 0x10] 0x715d1b5560
	TargetingReticleVisuals ReticleVisuals;//[Offset: 0x710, Size: 0x20] 0x715d206200
	MoveToTargetParams MovementParams;//[Offset: 0x730, Size: 0x38] 0x715d206280
	CurveTableRowHandle DurationHandle;//[Offset: 0x768, Size: 0x10] 0x715d206300
	GameplayTag DisableCharacterControlTag;//[Offset: 0x778, Size: 0x8] 0x715d204280
	bool bCancelRollOnCollisionWithTerrain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 0x1] 0x715d204300
	bool bCancelRollOnCollisionWithEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 0x1] 0x715d204380
	FName MovementAnimSectionName;//[Offset: 0x784, Size: 0x8] 0x715d204400
	GameplayAbilityTargetActor* AbilityTargetActor;//[Offset: 0x790, Size: 0x8] 0x715d204480
	void SetOverriddenTargetLocation(out const Vector InTargetLocation);// 0x40e71b0 0x715d210240
	void OnWaitNetSync();// 0x40e6c44 0x715d210320
	void OnTargetDataValid(out const GameplayAbilityTargetDataHandle TargetData);// 0x40e6f74 0x715d210400
	void OnTargetDataCancelled(out const GameplayAbilityTargetDataHandle TargetData);// 0x40e6e0c 0x715d2104e0
	void OnStunnedWhileTargeting();// 0x40e6c58 0x715d2105c0
	void OnApplyForceFinish();// 0x40e6df8 0x715d2106a0
	void OnActorHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x40e6c6c 0x715d210780
	void K2_OnBeginRoll();// 0x45c6aa0 0x715d210860
	bool IsEnemyCharacter(Actor* Actor);// 0x40e70f8 0x715d210940
	bool HadStartedRoll();// 0x40e70dc 0x715d210a20

--------------------------------
Class: RollEffectApplication // 715da96580
	class GameplayEffect* EffectToApply;//[Offset: 0x0, Size: 0x8] 0x715d89c180
	enum ApplicationRule;//[Offset: 0x8, Size: 0x4] 0x715d89c220

--------------------------------
Class: TargetingReticleVisuals // 715da98b00
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x0, Size: 0x8] 0x715d89be60
	StaticMesh* Mesh;//[Offset: 0x8, Size: 0x8] 0x715dab4380
	Material* Material;//[Offset: 0x10, Size: 0x8] 0x715dab4400
	float Scale;//[Offset: 0x18, Size: 0x4] 0x715dab4480

--------------------------------
Class: MoveToTargetParams // 715da99100
	float MaxDistance;//[Offset: 0x0, Size: 0x4] 0x715dab3300
	CurveTableRowHandle MaxDistanceHandle;//[Offset: 0x8, Size: 0x10] 0x715dab3380
	float TargetSeparation;//[Offset: 0x18, Size: 0x4] 0x715dab3400
	CurveTableRowHandle TargetSeparationHandle;//[Offset: 0x20, Size: 0x10] 0x715dab3480
	bool bShouldTargetBeACharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715dab3500
	bool bShouldMoveInSourceCharacterMovementDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x715dab3580

--------------------------------
Class: GameplayAbility_DashToTarget.HuntersGameplayAbility.GameplayAbility.Object // 71a494ce00
	MoveToTargetParams MovementParams;//[Offset: 0x6f8, Size: 0x38] 0x715d205a80
	float DashForce;//[Offset: 0x730, Size: 0x4] 0x715d205b00
	float MaxDashDuration;//[Offset: 0x734, Size: 0x4] 0x715d205b80
	float MaxMeleeDistance;//[Offset: 0x738, Size: 0x4] 0x715d205c00
	GameplayTag OnCompleteTag;//[Offset: 0x73c, Size: 0x8] 0x715d205c80
	GameplayTag DisableCharacterControlTag;//[Offset: 0x744, Size: 0x8] 0x715d205d00
	GameplayAbilityTargetActor* AbilityTargetActor;//[Offset: 0x758, Size: 0x8] 0x715d205d80
	void OnTargetDataValid(out const GameplayAbilityTargetDataHandle TargetData);// 0x40e7b40 0x715d2137a0
	void OnTargetDataCancelled(out const GameplayAbilityTargetDataHandle TargetData);// 0x40e79d8 0x715d213880
	void OnArrival();// 0x40e781c 0x715d213960
	void OnApplyForceFinish();// 0x40e79c4 0x715d210080
	void OnActorHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x40e7838 0x715d210160

--------------------------------
Class: GameplayAbility_LeapToTarget.HuntersGameplayAbility.GameplayAbility.Object // 71a494cb80
	MoveToTargetParams MovementParams;//[Offset: 0x6f8, Size: 0x38] 0x715d205900
	float MaxLeapHeight;//[Offset: 0x730, Size: 0x4] 0x715d205980
	float LeapDuration;//[Offset: 0x734, Size: 0x4] 0x715d205a00

--------------------------------
Class: HuntersAbilityCommonTraversal.HuntersGameplayAbility.GameplayAbility.Object // 71a494c900

--------------------------------
Class: HuntersAbilityGrapple.HuntersAbilityCommonTraversal.HuntersGameplayAbility.GameplayAbility.Object // 71a494c680
	float GrappleHookTravelTime;//[Offset: 0x6f0, Size: 0x4] 0x715d205600
	float MovementTravelTime;//[Offset: 0x6f4, Size: 0x4] 0x715d205680
	FName GrappleHookReleaseSkeletonSocket;//[Offset: 0x6f8, Size: 0x8] 0x715d205700
	AnchorLedgeActor* CurrentBestLedge;//[Offset: 0x700, Size: 0x8] 0x715d205780
	void SetOverrideLedge(AnchorLedgeActor* Ledge);// 0x40e8390 0x715d2135e0
	bool HasValidLedge();// 0x40e8430 0x715d2136c0

--------------------------------
Class: HuntersAbilityTask_JumpPadLaunchVectorByViewPitch.AbilityTask.GameplayTask.Object // 71a494c400
	delegate OnLaunchVectorChanged;//[Offset: 0x78, Size: 0x10] 0x715d207100
	ProjectileTargetingVisualization* Visualiser;//[Offset: 0xd0, Size: 0x8] 0x715d207180
	static HuntersAbilityTask_JumpPadLaunchVectorByViewPitch* CreateHuntersAbilityTaskJumpPadLaunchVectorByViewPitch(GameplayAbility* InOwningAbility, FName TaskInstanceName, Pawn* InPawn, JumpPadActor* InJumpPadActor, CurveVector* InPitchCurve, class ProjectileTargetingVisualization InVisualiserClass, bool InTrySnapLandingToNavMesh, out const Vector InNavMeshSnapBounds, const float InPitchCurveSampleInterval, bool InShouldDisplayDebug);// 0x40e8824 0x715d213500

--------------------------------
Class: JumpPadActor.NavLinkProxy.Actor.Object // 71a4961f00
	Vector LaunchVector;//[Offset: 0x280, Size: 0xc] 0x715d20dc00
	bool bLaunchVectorIgnoreActorPitchRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1] 0x715d20dc80
	float InheritVelocityProportion;//[Offset: 0x290, Size: 0x4] 0x715d20dd00
	bool bInheritVerticalVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1] 0x715d20dd80
	GameplayTag InAirTag;//[Offset: 0x298, Size: 0x8] 0x715d20de00
	GameplayTag LaunchImmunityTag;//[Offset: 0x2a0, Size: 0x8] 0x715d20de80
	bool bDoLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x715d20df00
	GameplayTagContainer LaunchTriggerAbilityTags;//[Offset: 0x2b0, Size: 0x20] 0x715d20df80
	GameplayTagContainer CancelAbilitiesWithTags;//[Offset: 0x2d0, Size: 0x20] 0x715d20e000
	GameplayTagContainer LaunchGETags;//[Offset: 0x2f0, Size: 0x20] 0x715d20e080
	float ServerLaunchNotificationIgnoreDistance;//[Offset: 0x310, Size: 0x4] 0x715d20e100
	PrimitiveComponent* Collider;//[Offset: 0x318, Size: 0x8] 0x715d20e180
	LaunchingActor[] LaunchingActors;//[Offset: 0x320, Size: 0x10] 0x715d1b7040
	bool ValidateJumpPadGEActivation(Actor* Actor);// 0x40f1c94 0x715d216280
	void UpdateSmartLink();// 0x40f1c80 0x715d216360
	void ToggleLink();// 0x40f1d44 0x715d216440
	void OnCharacterMovementUpdated(Character* Character, float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0x40f1b1c 0x715d216520
	void OnActorLaunched(Actor* LaunchedActor);// 0x45c6aa0 0x715d216600
	void OnActorEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x40f1e48 0x715d2166e0
	void OnActorBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x40f1fb4 0x715d2167c0
	Vector GetTransformedLaunchVector();// 0x40f1d58 0x715d2168a0
	ShapeComponent* GetTargetingCollider();// 0x45c6aa0 0x715d216980
	bool CouldEverBeLaunched(Actor* Actor);// 0x40f1d90 0x715d216a60
	void BeginPlay();// 0x40f21d4 0x715d216b40

--------------------------------
Class: LaunchingActor // 715da99040
	Actor* Actor;//[Offset: 0x0, Size: 0x8] 0x715dab3280

--------------------------------
Class: HuntersAbilityWarpedTraversal.HuntersAbilityCommonTraversal.HuntersGameplayAbility.GameplayAbility.Object // 71a494c180
	WarpedTraversalPerHeightAnimationSet[] TraversalAnimationsDynamic;//[Offset: 0x6f0, Size: 0x10] 0x715d1b5420
	float OrientCharacterToJumpAngleTolerance;//[Offset: 0x700, Size: 0x4] 0x715d206b80
	WarpedTraversalAnimation SelectAnimationOnDistanceAndSpeed(out const Vector EndPoint);// 0x40e93d0 0x715d213180
	float CalculateTraversalSpeed(out const WarpedTraversalAnimation ChosenAnimStruct, const float Distance);// 0x40e92b4 0x715d213260
	float CalculateTraversalDistance(out const Vector EndPoint);// 0x40e91fc 0x715d213340
	float CalculateAnimationDurationOverride(out const Vector EndPoint, const float Speed);// 0x40e90fc 0x715d213420

--------------------------------
Class: WarpedTraversalPerHeightAnimationSet // 715da964c0
	float MinHeight;//[Offset: 0x0, Size: 0x4] 0x715dab3e00
	float MaxHeight;//[Offset: 0x4, Size: 0x4] 0x715dab3e80
	WarpedTraversalAnimation[] HorizontalDistanceAnims;//[Offset: 0x8, Size: 0x10] 0x715d89c0e0

--------------------------------
Class: WarpedTraversalAnimation // 715da96400
	float MinDistance;//[Offset: 0x0, Size: 0x4] 0x715dab3f00
	float MaxDistance;//[Offset: 0x4, Size: 0x4] 0x715dab3f80
	GameplayTag AnimationTag;//[Offset: 0x8, Size: 0x8] 0x715dab4000
	GameplayTag RootMotionDataTag;//[Offset: 0x10, Size: 0x8] 0x715dab4080
	float SpeedAtMinDistance;//[Offset: 0x18, Size: 0x4] 0x715dab4100
	float SpeedAtMaxDistance;//[Offset: 0x1c, Size: 0x4] 0x715dab4180

--------------------------------
Class: HuntersAnchorLedgeTargetActor.GameplayAbilityTargetActor.Actor.Object // 71a494bf00

--------------------------------
Class: HuntersClimbUpTargetActor.GameplayAbilityTargetActor.Actor.Object // 71a494bc80
	float AngleToleranceDegrees;//[Offset: 0x320, Size: 0x4] 0x715d206700
	bool IgnoreOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1] 0x715d206780
	static bool FindClosestClimbUpPoint(const HuntersCharacterBase* Source, const float AngleToleranceDegrees, out Transform OutClimbUpPoint, out Transform OutClimbUpEndPoint, bool IgnoreOrientation);// 0x40e99c0 0x715d2130a0

--------------------------------
Class: HuntersCombatRollTargetActor.GameplayAbilityTargetActor.Actor.Object // 71a494ba00
	TargetingReticleVisuals TargetingReticleVisuals;//[Offset: 0x320, Size: 0x20] 0x715d206680

--------------------------------
Class: HuntersDashTargetActor.GameplayAbilityTargetActor.Actor.Object // 71a494b780
	Actor* TargetActor;//[Offset: 0x320, Size: 0x8] 0x715d206600

--------------------------------
Class: HuntersForwardOnlyTargetActor.GameplayAbilityTargetActor.Actor.Object // 71a494b500

--------------------------------
Class: HuntersInvisibleWall.BlockingVolume.Volume.Brush.Actor.Object // 71a494b280

--------------------------------
Class: HuntersKillPlane.KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object // 71a494ad80
	enum NamedHazardType;//[Offset: 0x270, Size: 0x1] 0x715d1b5380

--------------------------------
Class: HuntersLeapTargetActor.GameplayAbilityTargetActor.Actor.Object // 71a494a600
	Actor* ActorTargetPreviewVFX;//[Offset: 0x320, Size: 0x8] 0x715d207f80
	Actor* MapPointTargetPreviewVFX;//[Offset: 0x328, Size: 0x8] 0x715d208000
	TargetingReticleVisuals TargetingReticleVisuals;//[Offset: 0x330, Size: 0x20] 0x715d208080
	float TraceOffsetFromTargetPosition;//[Offset: 0x350, Size: 0x4] 0x715d208100
	float MinDistance;//[Offset: 0x354, Size: 0x4] 0x715d208180
	float MaxDistance;//[Offset: 0x358, Size: 0x4] 0x715d208200
	float MaxHeight;//[Offset: 0x35c, Size: 0x4] 0x715d208280
	float UpwardTargetingGroundDistanceLimit;//[Offset: 0x360, Size: 0x4] 0x715d208300
	float UpwardLeapMinimumHeight;//[Offset: 0x364, Size: 0x4] 0x715d208380

--------------------------------
Class: HuntersNavigationQueryFilter.NavigationQueryFilter.Object // 71a494fd80
	bool bCanNeverClamber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x715d207d00
	GameplayTagContainer CannotClamberGameplayTags;//[Offset: 0x48, Size: 0x20] 0x715d207d80

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object // 71a4964980
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 0x8] 0x715d1b7900
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 0xc] 0x715d209300
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1] 0x715d209380
	void SetAreaClass(class NavArea NewAreaClass);// 0x6633490 0x715d212ee0

--------------------------------
Class: HuntersNavModifierComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object // 71a4964c00
	float DistanceChangeBeforeUpdate;//[Offset: 0x140, Size: 0x4] 0x715d209200
	float TimeAfterLastChangeToUpdate;//[Offset: 0x144, Size: 0x4] 0x715d209280
	void OnTimer_TransformDelayUpdated();// 0x40eab40 0x715d212e00

--------------------------------
Class: HuntersTargetActor_Clamber.GameplayAbilityTargetActor.Actor.Object // 71a4964700

--------------------------------
Class: HuntersTargetActor_CurrentTargetTraversalEndPosition.GameplayAbilityTargetActor.Actor.Object // 71a4964480

--------------------------------
Class: HuntersTraversalActorInterface.Interface.Object // 71a4964200
	void GetTraversalLimitPlane(out Vector OutPosition, out Vector OutDirection);// 0x40eb0b8 0x715d212b60
	float GetMaxDistanceToEndPosition();// 0x40eb07c 0x715d212c40
	Vector GetEndPosition(const Controller* RequestingController);// 0x40eb1bc 0x715d212d20

--------------------------------
Class: HuntersTraversalDebugComponent.ActorComponent.Object // 71a4963f80
	void StopRecordingOffsets();// 0x40ebb3c 0x715d2129a0
	void BeginRecordingOffsets(Vector InStartLocation, Vector InTargetLocation);// 0x40ebb50 0x715d212a80

--------------------------------
Class: TraversalPlayGroundClimbup.Actor.Object // 71a4963d00
	class HuntersCharacterBase* CharacterClass;//[Offset: 0x220, Size: 0x8] 0x715d1b7860
	void SetDistance(float Distance);// 0x45c6aa0 0x715d212460
	SceneComponent* GetTriggerZone();// 0x45c6aa0 0x715d212540
	Vector GetSpawnPosition();// 0x45c6aa0 0x715d212620
	SceneComponent* GetRegionMarker(const int Index);// 0x45c6aa0 0x715d212700
	Vector GetLandingPointGround();// 0x45c6aa0 0x715d2127e0
	SceneComponent* GetJumpLine();// 0x45c6aa0 0x715d2128c0

--------------------------------
Class: HuntersTraversalPlaygroundAIController.AIController.Controller.Actor.Object // 71a4963a80
	void EnteredTriggerZone();// 0x40ec548 0x715d214a00
	void EnteredEndZone();// 0x40ec534 0x715d214ae0

--------------------------------
Class: HuntersTraversalPlaygroundGameMode.GameMode.GameModeBase.Info.Actor.Object // 71a4963580
	bool HumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1] 0x715d20c180
	int NumAIPlayers;//[Offset: 0x304, Size: 0x4] 0x715d20c200
	bool Static;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x715d20c280
	float StaticJumpWaitTime;//[Offset: 0x30c, Size: 0x4] 0x715d20c300
	float TimeDilationIncrement;//[Offset: 0x310, Size: 0x4] 0x715d20c380
	float SmallTimeDilationIncrement;//[Offset: 0x314, Size: 0x4] 0x715d20c400
	Vector CamPosition;//[Offset: 0x318, Size: 0xc] 0x715d20c480
	Vector CamLookPoint;//[Offset: 0x324, Size: 0xc] 0x715d20c500
	float RunupDistance;//[Offset: 0x350, Size: 0x4] 0x715d20c580
	void ToggleStaticMode();// 0x40ecd14 0x715d216ec0
	void ToggleSingleMultiplayer();// 0x40ecb20 0x715d216fa0
	void SpawnPlayers(PlayerController* NewPlayer);// 0x40ec890 0x715d217080
	void PlayerEnteredStartZone();// 0x40ecd00 0x715d217160
	void PlayerEnteredEndZone();// 0x40eccec 0x715d217240
	float GetTimeDilation();// 0x40eccd0 0x715d217320
	FString GetCannedDistanceString();// 0x40ecbd8 0x715d213a40
	void ExecuteTraversalAbility(HuntersCharacterBase* Character);// 0x45c6aa0 0x715d213b20
	void ChangeTimeDilation(float Delta);// 0x40ecb34 0x715d213c00
	void ChangeSpawnDistance(float Distance);// 0x40eca7c 0x715d213ce0
	void ChangeHumanPlayerIndex(int HumanPlayerIndexDelta);// 0x40ec934 0x715d213dc0
	void ChangeCannedDistance(int CannedDistanceDelta);// 0x40ec9d8 0x715d213ea0

--------------------------------
Class: HuntersTraversalScorer.TargetScorer.Object // 71a4963080
	float MinDistance;//[Offset: 0x2c, Size: 0x4] 0x715d20bd00
	float MaxDistance;//[Offset: 0x30, Size: 0x4] 0x715d20bd80
	byte ValidTraversalTypes;//[Offset: 0x34, Size: 0x1] 0x715d20be00
	bool bIgnoreIfBehindTraversalActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x715d20be80
	bool bIgnoreTargetsBelowSourceCharacterFeet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x715d20bf00
	float CharacterFeetTolerance;//[Offset: 0x38, Size: 0x4] 0x715d20bf80
	float ToTargetAngleTolerance;//[Offset: 0x3c, Size: 0x4] 0x715d20c000
	float InitialHorizontalDistanceRatio;//[Offset: 0x40, Size: 0x4] 0x715d20c080

--------------------------------
Class: HuntersTraversalSplineActor.Actor.Object // 71a4962b80
	HuntersTraversalSplineSegementConfig[] SegmentConfigs;//[Offset: 0x220, Size: 0x10] 0x715d1b7220
	float PositiveVerticalDistance;//[Offset: 0x230, Size: 0x4] 0x715d20b800
	float NegativeVerticalDistance;//[Offset: 0x234, Size: 0x4] 0x715d20b880
	FString[] SplineEventNames;//[Offset: 0x238, Size: 0x10] 0x715d1b72c0
	class HuntersTraversalSplineSet* TargetSplineSetForExport;//[Offset: 0x248, Size: 0x8] 0x715d1b7360
	bool bReExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x715d20b980
	float ExportSplineSegmentDistance;//[Offset: 0x254, Size: 0x4] 0x715d20ba00
	float DebugDistance;//[Offset: 0x258, Size: 0x4] 0x715d20ba80
	float DebugHeight;//[Offset: 0x25c, Size: 0x4] 0x715d20bb00
	Color DebugSplineColour;//[Offset: 0x260, Size: 0x4] 0x715d20bb80
	Color DebugEventColour;//[Offset: 0x264, Size: 0x4] 0x715d20bc00
	bool bSetDefaultSegments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x715d20bc80

--------------------------------
Class: HuntersTraversalSplineSegementConfig // 715da96340
	HuntersTraversalSplineConfig PositiveVerticalSplineConfig;//[Offset: 0x0, Size: 0x28] 0x715dab3980
	HuntersTraversalSplineConfig FlatSplineConfig;//[Offset: 0x28, Size: 0x28] 0x715dab3a00
	HuntersTraversalSplineConfig NegativeVerticalSplineConfig;//[Offset: 0x50, Size: 0x28] 0x715dab3d00
	float HorizontalDistance;//[Offset: 0x78, Size: 0x4] 0x715dab3d80

--------------------------------
Class: HuntersTraversalSplineConfig // 715da99400
	FString SplineComponentName;//[Offset: 0x0, Size: 0x10] 0x715dab3a80
	HuntersTraversalSplineEventConfig[] SplineEvents;//[Offset: 0x10, Size: 0x10] 0x715d89c040
	CurveFloat* TimeRemapping01;//[Offset: 0x20, Size: 0x8] 0x715dab3c80

--------------------------------
Class: HuntersTraversalSplineEventConfig // 715da99340
	FString EventName;//[Offset: 0x0, Size: 0x10] 0x715dab3b00
	float Time01;//[Offset: 0x10, Size: 0x4] 0x715dab3b80

--------------------------------
Class: HuntersTraversalTargetActor.GameplayAbilityTargetActor.Actor.Object // 71a4962680
	StaticMesh* TargetingReticleMesh;//[Offset: 0x320, Size: 0x8] 0x715d20cf00
	Material* TargetingReticleMeshMaterial;//[Offset: 0x328, Size: 0x8] 0x715d20cf80
	float TargetingReticleScale;//[Offset: 0x330, Size: 0x4] 0x715d20d000
	float MaxGrappleDistance;//[Offset: 0x334, Size: 0x4] 0x715d20d080
	float Distance3DWeighting;//[Offset: 0x338, Size: 0x4] 0x715d20d100
	float DistanceScreenSpaceWeighting;//[Offset: 0x33c, Size: 0x4] 0x715d20d180
	static interface classNone GetClosestTraversalObject(Actor* Source, float MaxDistance, float Distance3DWeighting, float DistanceScreenSpaceWeighting);// 0x40f0d98 0x715d216d00
	static interface classNone GetClosestClimbUpObject(Actor* Source, float MaxDistance, float Distance3DWeighting, float DistanceScreenSpaceWeighting, const float AngleToleranceDegrees);// 0x40f0be4 0x715d216de0

--------------------------------
Class: HuntersZiplineScorer.TargetScorer.Object // 71a4962400
	CurveTableRowHandle MaxDistance;//[Offset: 0x30, Size: 0x10] 0x715d20cc80
	float HeightAboveFeetMin;//[Offset: 0x40, Size: 0x4] 0x715d20cd00
	float HeightAboveFeetMax;//[Offset: 0x44, Size: 0x4] 0x715d20cd80
	float CameraToZiplineAngleTolerance;//[Offset: 0x48, Size: 0x4] 0x715d20ce00
	float CameraToAttachAngleTolerance;//[Offset: 0x4c, Size: 0x4] 0x715d20ce80

--------------------------------
Class: MoveToTargetAbility.Interface.Object // 71a4962180
	MoveToTargetParams GetMoveToTargetParams();// 0x40f13e0 0x715d216c20

--------------------------------
Class: NavArea_Clamber.NavArea.NavAreaBase.Object // 71a4961c80

--------------------------------
Class: NavArea_ZipLine.NavArea.NavAreaBase.Object // 71a4961a00

--------------------------------
Class: TargetCondition_AnchorLedge.TargetScorerCondition.Object // 71a4961780
	bool bRejectLedgesFacingAway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d20d900
	float LedgeBelowDistanceTolerance;//[Offset: 0x2c, Size: 0x4] 0x715d20d980
	float MinAnchorLedgeDistance;//[Offset: 0x30, Size: 0x4] 0x715d20da00
	float MaxAnchorLedgeDistance;//[Offset: 0x34, Size: 0x4] 0x715d20da80
	float ApproxVerticalDistanceFromFeetTolerance;//[Offset: 0x38, Size: 0x4] 0x715d20db00
	float TraversableToToleranceDistance;//[Offset: 0x3c, Size: 0x4] 0x715d20db80

--------------------------------
Class: TraversalBlockingVolume.BlockingVolume.Volume.Brush.Actor.Object // 71a4961280

--------------------------------
Class: ZipLineActor.NavLinkProxy.Actor.Object // 71a4961000
	ShapeComponent* Collision;//[Offset: 0x280, Size: 0x8] 0x715d20f600
	ZipLineActor* EndPoint;//[Offset: 0x288, Size: 0x8] 0x715d20f680
	float NavLinkSearchExtentsSize;//[Offset: 0x290, Size: 0x4] 0x715d20f700
	void UpdateSmartLink();// 0x40f3614 0x715d215d40
	void SetupZipLineSpline();// 0x40f3628 0x715d215e20
	void SetupZipLineMesh();// 0x40f3644 0x715d215f00
	Vector GetZipLineLocation();// 0x45c6aa0 0x715d215fe0
	Vector GetZipLineExitPosition();// 0x45c6aa0 0x715d2160c0
	Vector GetZipLineEntryLocation(const Controller* RequestingController, const float MaxDistance);// 0x40f3660 0x715d2161a0

--------------------------------
Class: HuntersSpringArmConstraint.HuntersCameraConstraint.Object // 71a4960600
	float ProbeSize;//[Offset: 0x28, Size: 0x4] 0x715d20f080
	byte ProbeChannel;//[Offset: 0x2c, Size: 0x1] 0x715d20f100

--------------------------------
Class: HuntersSpringArmOriginConstraint.HuntersCameraConstraint.Object // 71a4960380
	float ProbeSize;//[Offset: 0x28, Size: 0x4] 0x715d20ef80
	byte ProbeChannel;//[Offset: 0x2c, Size: 0x1] 0x715d20f000

--------------------------------
Class: HuntersCamera.Interface.Object // 71a4960100

--------------------------------
Class: HuntersCameraController.Interface.Object // 71a496a380

--------------------------------
Class: HuntersCameraTarget.Interface.Object // 71a496a100

--------------------------------
Class: HuntersViewTarget.Interface.Object // 71a4969e80
	bool IsValidViewTarget();// 0x4100918 0x715d2158e0

--------------------------------
Class: CommonGameplayEventsBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4969c00
	static void TriggerGoalScoredSDEvent(PlayerState* Scorer, ObjectiveTokenComponent* ObjectiveToken, Vector Location, bool bOwnGoal);// 0x411010c 0x715d215720
	static void TriggerGoalCountChangedSDEvent(Actor* Outer, HuntersSquadState* Squad, int NewGoalCount);// 0x410fff4 0x715d215800

--------------------------------
Class: ObjectiveTokenComponent.ActorComponent.Object // 71a4968080
	delegate PickedUpEvent;//[Offset: 0xb8, Size: 0x10] 0x715d221880
	delegate DroppedEvent;//[Offset: 0xc8, Size: 0x10] 0x715d221900
	delegate TeamChangedEvent;//[Offset: 0xd8, Size: 0x10] 0x715d221980
	GenericTeamId TeamID;//[Offset: 0xe8, Size: 0x1] 0x715d221a00
	PlayerState* LastTouchingPlayer;//[Offset: 0xf0, Size: 0x8] 0x715d221a80
	PlayerState* BallCarrier;//[Offset: 0xf8, Size: 0x8] 0x715d221b00
	void SetLastTouchingPlayer(PlayerState* Player);// 0x4118fe8 0x715d217400
	void SetBallCarrier(PlayerState* Player);// 0x4118f28 0x715d2174e0
	void Reset();// 0x41190a4 0x715d2175c0
	void OnRep_TeamID(GenericTeamId OldTeamID);// 0x4118e80 0x715d2176a0
	PlayerState* GetLastTouchingPlayer();// 0x4119088 0x715d217780
	PlayerState* GetBallCarrier();// 0x4118fcc 0x715d217860

--------------------------------
Class: ObjectiveTokenSpawnerComponent.ActorComponent.Object // 71a4969700
	delegate BallSpawned;//[Offset: 0xb0, Size: 0x10] 0x715d20ea00
	delegate BallDestroyed;//[Offset: 0xc0, Size: 0x10] 0x715d20ea80
	void SpawnBall();// 0x411a374 0x715d218d60
	void Reset();// 0x411a390 0x715d218e40
	ObjectiveTokenComponent* GetCurrentBall();// 0x411a31c 0x715d218f20
	void DestroyBall();// 0x411a358 0x715d219000

--------------------------------
Class: HBBallSpawnerComponent.ObjectiveTokenSpawnerComponent.ActorComponent.Object // 71a4969980
	float SpawnBallDelay;//[Offset: 0xd0, Size: 0x4] 0x715d20ff80
	class Actor* BallClass;//[Offset: 0xd8, Size: 0x8] 0x715d1b6e60
	delegate BallTimerExpired;//[Offset: 0xe0, Size: 0x10] 0x715d20e780
	delegate SpawnBallTimerStart;//[Offset: 0xf0, Size: 0x10] 0x715d20e800
	bool bEnableCarringBallWithAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x715d20e880
	ObjectiveTokenComponent* Ball;//[Offset: 0x108, Size: 0x8] 0x715d20e900
	Actor* BallActor;//[Offset: 0x110, Size: 0x8] 0x715d20e980
	void SpawnBallImmediately();// 0x4110c6c 0x715d218ba0
	void LogDebugHuttballInfo();// 0x4110c58 0x715d218c80

--------------------------------
Class: HBGoalVolume.Volume.Brush.Actor.Object // 71a4969480
	delegate OnUIVisibilitySet;//[Offset: 0x260, Size: 0x10] 0x715d220900
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x715d220980
	int PointsValue;//[Offset: 0x274, Size: 0x4] 0x715d220a00
	int TeamID;//[Offset: 0x278, Size: 0x4] 0x715d220a80
	class GameplayEffect[] FriendlyEffects;//[Offset: 0x280, Size: 0x10] 0x715d1b6d20
	ObjectiveTokenReceiverComponent* TokenReceiver;//[Offset: 0x290, Size: 0x8] 0x715d220b00
	<PlayerState*> ContainedCharacters;//[Offset: 0x298, Size: 0x50] 0x715d1b6dc0
	bool bContainsBall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x715d220c00
	ObjectiveTokenComponent* Ball;//[Offset: 0x2f0, Size: 0x8] 0x715d220c80
	GenericTeamId GenericTeamId;//[Offset: 0x2f8, Size: 0x1] 0x715d220d00
	void SetOwnGoalsAllowed(bool bNewOwnGoalsAllowed);// 0x4111d04 0x715d218200
	void OnPlayerLeftGame(PlayerState* Player);// 0x4111584 0x715d2182e0
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x41118d4 0x715d2183c0
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4111a40 0x715d2184a0
	void OnBallSpawned(ObjectiveTokenComponent* Ball);// 0x4111c60 0x715d218580
	void OnBallPickedUp(PlayerState* ByPlayer, Vector Location);// 0x41117f0 0x715d218660
	void OnBallOwnershipChanged(PlayerState* ByPlayer, Vector Location);// 0x4111628 0x715d218740
	void OnBallDropped(PlayerState* ByPlayer, Vector Location);// 0x411170c 0x715d218820
	void MulticastSetUIVisibility(bool bVisible);// 0x411142c 0x715d218900
	void MaybeTriggerGoal(Vector Location);// 0x41114e0 0x715d2189e0
	int GetNumberOfPointsValue();// 0x4111db0 0x715d218ac0

--------------------------------
Class: ObjectiveTokenReceiverComponent.ActorComponent.Object // 71a4967900
	delegate GoalScoredEvent;//[Offset: 0xb0, Size: 0x10] 0x715d221680
	delegate OwnGoalScoredEvent;//[Offset: 0xc0, Size: 0x10] 0x715d221700

--------------------------------
Class: HuntersBomb.Actor.Object // 71a4969200
	SphereComponent* CollisionComponent;//[Offset: 0x230, Size: 0x8] 0x715d220780
	SphereComponent* OverlapComponent;//[Offset: 0x238, Size: 0x8] 0x715d220800
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x240, Size: 0x8] 0x715d220880

--------------------------------
Class: HuntersBombPlacementZone.Volume.Brush.Actor.Object // 71a4968f80
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4112f6c 0x715d218040
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x41130d8 0x715d218120

--------------------------------
Class: HuntersCapturePoint.Actor.Object // 71a4968d00
	TriggerVolume* TriggerVolume;//[Offset: 0x228, Size: 0x8] 0x715d221f00
	void SetCaptureTrigger(TriggerVolume* ATriggerVolume);// 0x4113924 0x715d217b00
	bool IsControlledByPlayerTeam(const HuntersPlayerState* InPlayerState);// 0x45c6aa0 0x715d217be0
	void GetContainedPlayers(out HuntersPlayerState*[] ContainedPlayers);// 0x45c6aa0 0x715d217cc0
	float GetCaptureRadius();// 0x41139c4 0x715d217da0
	bool ContestedByPlayerTeam(const HuntersPlayerState* InPlayerState);// 0x45c6aa0 0x715d217e80
	bool CheckIsBeingContested();// 0x45c6aa0 0x715d217f60

--------------------------------
Class: HuntersEscortActor.Actor.Object // 71a4968a80

--------------------------------
Class: HuntersHuttball.Actor.Object // 71a4968800
	SceneComponent* HomingTarget;//[Offset: 0x238, Size: 0x8] 0x715d878a00
	bool IsGravityEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x715d878a80
	bool bIsCollisionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1] 0x715d878b00
	class GameplayEffect* DropEffect;//[Offset: 0x248, Size: 0x8] 0x7148cde8e0
	Vector DropVelocity;//[Offset: 0x250, Size: 0xc] 0x715d878b80
	Vector DropOffset;//[Offset: 0x25c, Size: 0xc] 0x715d878c00
	float KnockbackScale;//[Offset: 0x268, Size: 0x4] 0x715d878c80
	float JumpPadKnockbackScale;//[Offset: 0x26c, Size: 0x4] 0x715d878d00
	float HomingVelocityScale;//[Offset: 0x270, Size: 0x4] 0x715d878d80
	FName AttachmentSocket;//[Offset: 0x274, Size: 0x8] 0x715d878e00
	class GameplayEffect[] DefaultGameplayEffects;//[Offset: 0x280, Size: 0x10] 0x7148cdea20
	class HuntersGameplayAbility* CarryBallAbility;//[Offset: 0x290, Size: 0x8] 0x7148cdeac0
	class HuntersGameplayAbility* CarryBallAbilityWithAbilities;//[Offset: 0x298, Size: 0x8] 0x7148cdeb60
	HuttballBallComponent* HuttballBallComponent;//[Offset: 0x2a0, Size: 0x8] 0x715d878e80
	float DefaultProjectileGravityScale;//[Offset: 0x2a8, Size: 0x4] 0x715d878f00
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x2b0, Size: 0x8] 0x715d878f80
	float TimeToReset;//[Offset: 0x2b8, Size: 0x4] 0x715d879000
	GameplayTagContainer BlockPickupTags;//[Offset: 0x2c0, Size: 0x20] 0x715d879080
	BAReplicatedTimer BallResetTimer;//[Offset: 0x2e0, Size: 0x10] 0x715d879300
	float TimeToEnableCollisions;//[Offset: 0x2f0, Size: 0x4] 0x715d879380
	BallCarrierData CurrentCarrier;//[Offset: 0x300, Size: 0x10] 0x715d879400
	delegate OnResetTimerStarted;//[Offset: 0x310, Size: 0x10] 0x715d879480
	SphereComponent* CollisionComponent;//[Offset: 0x320, Size: 0x8] 0x715d877400
	SphereComponent* OverlapComponent;//[Offset: 0x328, Size: 0x8] 0x715d877480
	ProjectileMovementComponent* ProjectileMovementComponent;//[Offset: 0x330, Size: 0x8] 0x715d877500
	bool bEnableCarringBallWithAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1] 0x715d877580
	Pawn* LastCarrier;//[Offset: 0x340, Size: 0x8] 0x715d877600
	SceneComponent* LastHomingTarget;//[Offset: 0x348, Size: 0x8] 0x715d877680
	Pawn*[] PendingCarrierCandidates;//[Offset: 0x350, Size: 0x10] 0x7148cdec00
	void Throw(Actor* ActorThrowingBall, Vector InLocation, Vector InVelocity, Actor* TargetActor);// 0x4114fc0 0x715d881ba0
	void ResetBall();// 0x4115128 0x715d881c80
	void OnTeamChange();// 0x45c6aa0 0x715d83e780
	void OnRep_IsGravityEnabled();// 0x411576c 0x715d83e860
	void OnRep_IsCollisionEnabled();// 0x4115758 0x715d83e940
	void OnRep_HomingTarget();// 0x4115780 0x715d83ea20
	void OnRep_CurrentCarrier(out const BallCarrierData OldCurrentCarrier);// 0x4115794 0x715d83eb00
	void OnRep_BallResetTimer();// 0x41151e8 0x715d83ebe0
	void OnPickedUp(HuntersPlayerState* ByWhom);// 0x45c6aa0 0x715d83ecc0
	void OnMatchFinished();// 0x4114e78 0x715d83eda0
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x41151fc 0x715d83ee80
	void OnDropped(HuntersPlayerState* ByWhom);// 0x45c6aa0 0x715d83ef60
	void OnCollisionWithGeometry();// 0x45c6aa0 0x715d83f040
	void OnCollision(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4115588 0x715d83f120
	void OnBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x411584c 0x715d83f200
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4115368 0x715d83f2e0
	void OnBallLeftNeutralTeam();// 0x45c6aa0 0x715d83f3c0
	bool IsBeingCarried();// 0x4114ee4 0x715d83f4a0
	void HuttballResetEvent__DelegateSignature();// 0x45c6aa0 0x715d83f580
	GenericTeamId GetGenericTeamId();// 0x4114e8c 0x715d83f660
	HuntersPlayerState* GetCurrentCarrier();// 0x4114ec8 0x715d83f740
	byte GetAttitudeTowardsActor(const Actor* Other);// 0x411513c 0x715d83f820
	void Drop(Actor* ActorDroppingBall);// 0x4114f1c 0x715d83f900

--------------------------------
Class: BallCarrierData // 714906c880
	HuntersPlayerState* Carrier;//[Offset: 0x0, Size: 0x8] 0x715d877a80
	byte SequenceNumber;//[Offset: 0x8, Size: 0x1] 0x715d877b00

--------------------------------
Class: HuttballBallComponent.ObjectiveTokenComponent.ActorComponent.Object // 71a4968300

--------------------------------
Class: HuntersOccupiableObjectiveInterface.Interface.Object // 71a4968580
	void GetContainedCharacters(out HuntersCharacterBase*[] ContainedCharacters);// 0x45c6aa0 0x715d217940
	bool CheckIsUnderContention();// 0x45c6aa0 0x715d217a20

--------------------------------
Class: HuntersBombPlayerState.Interface.Object // 71a4967e00
	void SetInBombsite(bool bNewInBombsite);// 0x4117d84 0x715d21ac00
	bool IsInBombsite();// 0x4117d44 0x715d21ace0

--------------------------------
Class: Resettable.Interface.Object // 71a4967b80
	void Reset();// 0x41187dc 0x715d21ab20

--------------------------------
Class: ProbeDrone.Actor.Object // 71a4967680
	RadialGameplayEffectData[] RadialGameplayEffects;//[Offset: 0x228, Size: 0x10] 0x715d1b68c0
	HuntersAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x238, Size: 0x8] 0x715d221580
	byte[] BlockingChannels;//[Offset: 0x240, Size: 0x10] 0x715d1b6960
	class AttributeSet[] Attributes;//[Offset: 0x250, Size: 0x10] 0x715d1b6aa0
	void Explode();// 0x411abdc 0x715d21aa40

--------------------------------
Class: RadialGameplayEffectData // 715da97600
	class GameplayEffect* GameplayEffect;//[Offset: 0x0, Size: 0x8] 0x715d89c7c0
	<GameplayTag,float> SetByCallerTags;//[Offset: 0x8, Size: 0x50] 0x715da97480
	<GameplayTag,CurveTableRowHandle> SetByCallerTagsWithHandles;//[Offset: 0x58, Size: 0x50] 0x715da97540
	float Radius;//[Offset: 0xa8, Size: 0x4] 0x715dab0b00
	CurveTableRowHandle RadiusHandle;//[Offset: 0xb0, Size: 0x10] 0x715dab0b80
	CurveFloat* EffectFallOffCurve;//[Offset: 0xc0, Size: 0x8] 0x715dab0c00

--------------------------------
Class: HuntersChargeToThresholdAttributeSet.HuntersAttributeSet.AttributeSet.Object // 71a4967180
	GameplayAttributeData CurrentCharge;//[Offset: 0x30, Size: 0x28] 0x715d221300
	GameplayAttributeData ChargeThreshold;//[Offset: 0x58, Size: 0x28] 0x715d221380
	GameplayAttributeData MaxCharge;//[Offset: 0x80, Size: 0x28] 0x715d221400
	class GameplayEffect* EffectToApplyOnThresholdPassed;//[Offset: 0xa8, Size: 0x8] 0x715d1b6820
	bool bSendMetricsEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715d221480
	void OnRep_MaxCharge();// 0x4129e60 0x715d21a7a0
	void OnRep_CurrentCharge();// 0x4129e88 0x715d21a880
	void OnRep_ChargeThreshold();// 0x4129e74 0x715d21a960

--------------------------------
Class: HuntersEquipmentAttributeSet.HuntersAttributeSet.AttributeSet.Object // 71a4966f00
	GameplayAttributeData Level;//[Offset: 0x30, Size: 0x28] 0x715d221200
	GameplayAttributeData MaxLevel;//[Offset: 0x58, Size: 0x28] 0x715d221280
	void OnRep_MaxLevel();// 0x412a948 0x715d21a5e0
	void OnRep_Level();// 0x412a95c 0x715d21a6c0

--------------------------------
Class: HuntersIncapacitatedAttributeSet.HuntersAttributeSet.AttributeSet.Object // 71a4966a00

--------------------------------
Class: HuntersKnockbackAttributeSet.HuntersAttributeSet.AttributeSet.Object // 71a4966780
	GameplayAttributeData KnockbackGroundMultiplier;//[Offset: 0x30, Size: 0x28] 0x715d222680
	GameplayAttributeData KnockbackAirMultiplier;//[Offset: 0x58, Size: 0x28] 0x715d222700
	void OnRep_KnockbackGroundMultiplier();// 0x412e388 0x715d219540
	void OnRep_KnockbackAirMultiplier();// 0x412e374 0x715d219620

--------------------------------
Class: HuntersPlayerCommonAttributeSet.HuntersAttributeSet.AttributeSet.Object // 71a4966000
	GameplayAttributeData CameraShakeModifier;//[Offset: 0x30, Size: 0x28] 0x715d223d80
	GameplayAttributeData PitchYawModifier;//[Offset: 0x58, Size: 0x28] 0x715d223e00
	GameplayAttributeData SpreadModifier;//[Offset: 0x80, Size: 0x28] 0x715d223e80
	GameplayAttributeData MeleeAttackSpeed;//[Offset: 0xa8, Size: 0x28] 0x715d223f00
	void OnRep_SpreadModifier();// 0x41305a8 0x715d21c020
	void OnRep_PitchYawModifier();// 0x41305bc 0x715d21c100
	void OnRep_MeleeAttackSpeed();// 0x4130594 0x715d21c1e0
	void OnRep_CameraShakeModifier();// 0x41305d0 0x715d21c2c0

--------------------------------
Class: ArenaDispenserComponent.SceneComponent.ActorComponent.Object // 71a4965b00
	delegate OnDispenserStateChanged;//[Offset: 0x1f0, Size: 0x10] 0x715d87f580
	delegate OnItemSpawned;//[Offset: 0x200, Size: 0x10] 0x715d87f600
	enum DispenserCooldownType;//[Offset: 0x210, Size: 0x1] 0x7148cdf9c0
	float CooldownDuration;//[Offset: 0x214, Size: 0x4] 0x715d87f700
	enum DispenserTriggerType;//[Offset: 0x218, Size: 0x1] 0x7148cdfa60
	float TriggerDuration;//[Offset: 0x21c, Size: 0x4] 0x715d87d700
	SceneComponent* SpawnLocation;//[Offset: 0x220, Size: 0x8] 0x715d87d780
	class Actor* ItemToSpawn;//[Offset: 0x228, Size: 0x8] 0x7148cdfb00
	enum DispenserState;//[Offset: 0x230, Size: 0x1] 0x7148cdfba0
	TimerHandle TriggerHandle;//[Offset: 0x238, Size: 0x8] 0x715d87d880
	TimerHandle CooldownHandle;//[Offset: 0x240, Size: 0x8] 0x715d87d900
	Actor* SpawnedItem;//[Offset: 0x248, Size: 0x8] 0x715d87d980
	void TriggerDispenser();// 0x4140fa0 0x715d884ae0
	void SetSpawnLocation(SceneComponent* SceneComponent);// 0x4140fc8 0x715d884bc0
	void SetOnCooldown();// 0x4140f8c 0x715d884ca0
	void SetDispenserState(enum NewState);// 0x41410a0 0x715d884d80
	void OnRep_SpawnedItem();// 0x4140f64 0x715d884e60
	void OnRep_DispenserState();// 0x4140f78 0x715d884f40
	Actor* GetItemSpawned();// 0x4141084 0x715d885020
	enum GetCurrentState();// 0x4141068 0x715d885100
	void DispenserStateChanged__DelegateSignature(enum NewState);// 0x45c6aa0 0x715d8851e0
	void DispenserItemSpawned__DelegateSignature(Actor* SpawnedActor);// 0x45c6aa0 0x715d8852c0
	void ActivateDispenser();// 0x4140fb4 0x715d8853a0

--------------------------------
Class: HealthPickupModCalculation.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object // 71a4965600
	FString PickupName;//[Offset: 0x40, Size: 0x10] 0x715d226200

--------------------------------
Class: HuntersHackableComponent.ActorComponent.Object // 71a4965380
	delegate OnHackAdded;//[Offset: 0xb0, Size: 0x10] 0x715d225c80
	delegate OnHackRemoved;//[Offset: 0xc0, Size: 0x10] 0x715d225d00
	delegate HackActivated;//[Offset: 0xd0, Size: 0x10] 0x715d225d80
	HackedData[] HackedData;//[Offset: 0xe0, Size: 0x10] 0x715d1b89e0
	bool bHackingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x715d225e80
	void MarkAsUnhacked(const PlayerState* InstigatorPS);// 0x4144460 0x715d21e160
	void MarkAsHacked(out const HackedData NewHackedData);// 0x4144504 0x715d21e240
	bool IsHackingEnabled();// 0x4144394 0x715d21e320
	bool IsHacked();// 0x414435c 0x715d21e400
	bool Interact(Actor* Interactor);// 0x41443b0 0x715d21e4e0

--------------------------------
Class: HackedData // 715da985c0
	GameplayEffectSpecHandle[] EffectsToApply;//[Offset: 0x0, Size: 0x10] 0x715d89bdc0
	GameplayTag GameplayCueTag;//[Offset: 0x10, Size: 0x8] 0x715dab5a00
	GameplayCueParameters GameplayCueParameters;//[Offset: 0x18, Size: 0xb8] 0x715dab5a80
	HuntersPlayerState* Instigator;//[Offset: 0xd0, Size: 0x8] 0x715dab5b00

--------------------------------
Class: HuntersInteractable.Interface.Object // 71a496f600

--------------------------------
Class: HuntersInteractableComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a496f380
	enum InteractionType;//[Offset: 0x440, Size: 0x4] 0x715d1b8620
	enum InteractionVisuals;//[Offset: 0x444, Size: 0x4] 0x715d1b86c0
	Actor*[] ActorsInRange;//[Offset: 0x448, Size: 0x10] 0x715d1b8760
	Actor*[] ActorsOverlapping;//[Offset: 0x458, Size: 0x10] 0x715d1b8800
	Actor* Target;//[Offset: 0x468, Size: 0x8] 0x715d226f00
	GameplayEffectData[] PayloadEffects;//[Offset: 0x470, Size: 0x10] 0x715d1b88a0
	enum ApplicationEffectBehaviour;//[Offset: 0x480, Size: 0x4] 0x715d1b8940
	int UsesLeft;//[Offset: 0x484, Size: 0x4] 0x715d227080
	float DistanceToApply;//[Offset: 0x488, Size: 0x4] 0x715d227100
	float Speed;//[Offset: 0x48c, Size: 0x4] 0x715d227180
	bool UseOwnerAsDefaultInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1] 0x715d227200
	bool bUseTargetAsInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1] 0x715d227280
	bool IsClientSideInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 0x1] 0x715d227300
	Actor* EffectInstigator;//[Offset: 0x498, Size: 0x8] 0x715d227380
	void SetPayloadEffectInstigator(Actor* NewInstigator);// 0x4145c4c 0x715d21d980
	void OnPlayerStateUltimatePointsChanged(HuntersPlayerState* PlayerState);// 0x4145d98 0x715d21da60
	void OnOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4145e3c 0x715d21db40
	void OnOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4145fa8 0x715d21dc20
	void EvaluateInteraction(Actor* OtherActor);// 0x4145cec 0x715d21dd00

--------------------------------
Class: GameplayEffectData // 715da98500
	class GameplayEffect* Effect;//[Offset: 0x0, Size: 0x8] 0x715d89bd20
	<GameplayTag,float> SetByCallerTags;//[Offset: 0x8, Size: 0x50] 0x715da98380
	<GameplayTag,CurveTableRowHandle> SetByCallerTagsWithHandle;//[Offset: 0x58, Size: 0x50] 0x715da98440

--------------------------------
Class: HuntersPickup.Actor.Object // 71a496e980
	Vector Velocity;//[Offset: 0x220, Size: 0xc] 0x715d226380
	float InitialSpeed;//[Offset: 0x22c, Size: 0x4] 0x715d226400
	delegate OnPickupConsumedDelegate;//[Offset: 0x230, Size: 0x10] 0x715d226480
	BoxComponent* RootCollisionComponent;//[Offset: 0x240, Size: 0x8] 0x715d226500
	StaticMeshComponent* Mesh;//[Offset: 0x248, Size: 0x8] 0x715d226580
	ProjectileMovementComponent* MovementComponent;//[Offset: 0x250, Size: 0x8] 0x715d226600
	HuntersInteractableComponent* InteractableComponent;//[Offset: 0x258, Size: 0x8] 0x715d226680
	enum StatsType;//[Offset: 0x260, Size: 0x1] 0x715d1b84e0
	void OwnerChanged();// 0x4147e64 0x715d21d360
	void OnRep_Velocity();// 0x4147f44 0x715d21d440
	void OnRep_InitialSpeed();// 0x4147f30 0x715d21d520
	void OnPickupConsumed(Actor* PickupTarget, bool WasHacked);// 0x45c6aa0 0x715d21d600
	bool CanPickup(const Actor* PickupTarget);// 0x4147e80 0x715d21d6e0

--------------------------------
Class: HuntersPickupSpawner.Actor.Object // 71a496e700
	bool AllowRuleToOverrideValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x715d227d80
	int PickupSpawnerGroup;//[Offset: 0x22c, Size: 0x4] 0x715d227e00
	class HuntersPickup* PickupTypeToSpawn;//[Offset: 0x230, Size: 0x8] 0x715d1b8260
	float SecondsBetweenSpawns;//[Offset: 0x238, Size: 0x4] 0x715d227e80
	delegate PickupCollected;//[Offset: 0x240, Size: 0x10] 0x715d227f00
	HuntersPickup* MyCurrentPickup;//[Offset: 0x250, Size: 0x8] 0x715d227f80
	GameStateBase* GameState;//[Offset: 0x260, Size: 0x8] 0x715d228000
	BAReplicatedTimer Timer;//[Offset: 0x268, Size: 0x10] 0x715d228080
	enum CurrentPickupState;//[Offset: 0x278, Size: 0x1] 0x715d1b8300
	void SpawnPickup();// 0x4148c84 0x715d21cd40
	void PickupCleared(Actor* DestroyedActor);// 0x4148be0 0x715d21ce20
	void OnRep_PickupState(enum OldState);// 0x4148b3c 0x715d21cf00
	void OnPickupStateChanged(enum NewPickupState);// 0x45c6aa0 0x715d21cfe0
	void OnPickupSpawned(HuntersPickup* Pickup);// 0x45c6aa0 0x715d21d0c0
	BAReplicatedTimer GetTimer();// 0x4148c98 0x715d21d1a0
	ShapeComponent* GetTargetingCollider();// 0x45c6aa0 0x715d21d280

--------------------------------
Class: HuntersPickupSpawnerRule.HuntersRule.BARule.Object // 71a496e480
	int TargetGroup;//[Offset: 0x34, Size: 0x4] 0x715d227c00
	float TargetSpawnRate;//[Offset: 0x38, Size: 0x4] 0x715d227c80
	bool OverridePickupClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715d227d00
	class HuntersPickup* TargetClass;//[Offset: 0x40, Size: 0x8] 0x715d1b81c0

--------------------------------
Class: PressurePlateComponent.SceneComponent.ActorComponent.Object // 71a496e200
	delegate OnValidEntitiesNumChanged;//[Offset: 0x1f0, Size: 0x10] 0x715d87fe80
	delegate OnPressurePlateStateChanged;//[Offset: 0x200, Size: 0x10] 0x715d87ff00
	bool bCanBeToggled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x715d87ff80
	PressurePlateInteractionObject* InteractionObject;//[Offset: 0x218, Size: 0x8] 0x715d87e780
	PressurePlateSuccessInteractionObject* SuccessObject;//[Offset: 0x220, Size: 0x8] 0x715d87e800
	enum PlateState;//[Offset: 0x228, Size: 0x1] 0x715d8911e0
	float CooldownDuration;//[Offset: 0x22c, Size: 0x4] 0x715d87e900
	bool bReactivatesAfterCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x715d87e980
	PrimitiveComponent* Collider;//[Offset: 0x238, Size: 0x8] 0x715d87ea00
	TimerHandle CooldownTimer;//[Offset: 0x240, Size: 0x8] 0x715d87ea80
	int OverlappingEntities;//[Offset: 0x248, Size: 0x4] 0x715d87eb00
	void ValidEntitiesNumChanged__DelegateSignature(int NumOfEntities);// 0x45c6aa0 0x715d883dc0
	bool TryTriggerPressurePlate();// 0x414a5f8 0x715d883ea0
	void SetPlateState(enum NewState);// 0x414a778 0x715d883f80
	void SetOnCooldown();// 0x414a644 0x715d884060
	void PressurePlateStateChanged__DelegateSignature(enum NewState, enum PreviousState, PressurePlateComponent* PlateComponent);// 0x45c6aa0 0x715d884140
	void OnRep_PlateState(enum PreviousState);// 0x414a1b4 0x715d884220
	void OnRep_OverlappingEntities();// 0x414a258 0x715d884300
	void OnOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x414a26c 0x715d8843e0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x414a3d8 0x715d8844c0
	enum GetPressurePlateState();// 0x414a674 0x715d8845a0
	void GetOverlappingActors(out Actor*[] OverlappingActors);// 0x414a690 0x715d884680
	int GetNumberOfValidOverlappingActors();// 0x414a658 0x715d884760
	void DeactivatePlate();// 0x414a750 0x715d884840
	void ClearSuccess();// 0x414a630 0x715d884920
	void ActivatePlate();// 0x414a764 0x715d884a00

--------------------------------
Class: PressurePlateInteractionObject.Object // 71a496df80
	int RequiredActors;//[Offset: 0x28, Size: 0x4] 0x715d227800
	enum PlateInteractionType;//[Offset: 0x2c, Size: 0x1] 0x715d1b8080
	float InteractionDuration;//[Offset: 0x30, Size: 0x4] 0x715d227900
	Actor*[] ValidOverlappingActors;//[Offset: 0x38, Size: 0x10] 0x715d1b8120
	PressurePlateComponent* ParentPlate;//[Offset: 0x48, Size: 0x8] 0x715d227a00
	TimerHandle InteractionTimer;//[Offset: 0x50, Size: 0x8] 0x715d227a80
	bool ValidateOverlappingActor(Actor* Actor);// 0x414b504 0x715d21caa0
	void TriggerPressurePlate();// 0x414b4f0 0x715d21cb80
	void PreTriggerPlate();// 0x45c6aa0 0x715d21cc60

--------------------------------
Class: PressurePlateSuccessInteractionObject.Object // 71a496dd00
	PressurePlateComponent* ParentPlate;//[Offset: 0x28, Size: 0x8] 0x715d227600
	TimerHandle SuccessTimer;//[Offset: 0x30, Size: 0x8] 0x715d227680
	enum SuccessDurationType;//[Offset: 0x38, Size: 0x1] 0x715d1b7fe0
	float SuccessDuration;//[Offset: 0x3c, Size: 0x4] 0x715d227780
	void OnTriggerSuccess();// 0x45c6aa0 0x715d21fe40
	void OnEndSuccess();// 0x45c6aa0 0x715d21ff20

--------------------------------
Class: HuntersLinearTrainingObjectiveCoordinator.Actor.Object // 71a496da80
	delegate OnAllObjectivesCompletedDelegate;//[Offset: 0x220, Size: 0x10] 0x715d229200
	delegate OnObjectiveCompletedDelegate;//[Offset: 0x230, Size: 0x10] 0x715d229280
	delegate OnNewObjectiveActivatedDelegate;//[Offset: 0x240, Size: 0x10] 0x715d229300
	delegate OnFailedAttemptToCompleteActiveObjectiveDelegate;//[Offset: 0x250, Size: 0x10] 0x715d229380
	delegate OnSuspendedStateChanged;//[Offset: 0x260, Size: 0x10] 0x715d229400
	HuntersTrainingObjective*[] Objectives;//[Offset: 0x270, Size: 0x10] 0x715d1b7f40
	float LongActivationDelay;//[Offset: 0x280, Size: 0x4] 0x715d227400
	float ShortActivationDelay;//[Offset: 0x284, Size: 0x4] 0x715d227480
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x715d227500
	HuntersTrainingObjective* GetActiveObjective();// 0x4155514 0x715d21fd60

--------------------------------
Class: HuntersTrainingObjective.Actor.Object // 71a496d580
	FText UIInstructionText;//[Offset: 0x268, Size: 0x18] 0x715d228900
	FText UIInstructionTextGamepad;//[Offset: 0x280, Size: 0x18] 0x715d228980
	FText UIInstructionTextSwitch;//[Offset: 0x298, Size: 0x18] 0x715d228a00
	FText UIObjectiveText;//[Offset: 0x2b0, Size: 0x18] 0x715d228a80
	FText UIObjectiveTextGamepad;//[Offset: 0x2c8, Size: 0x18] 0x715d228b00
	FText UIObjectiveTextSwitch;//[Offset: 0x2e0, Size: 0x18] 0x715d228b80
	byte ApplicablePlatforms;//[Offset: 0x2f8, Size: 0x1] 0x715d228c00
	enum HighlightWidgetType;//[Offset: 0x2f9, Size: 0x1] 0x715d1b7e00
	int NumHighlightLoops;//[Offset: 0x2fc, Size: 0x4] 0x715d228d00
	byte HighlightInputTypes;//[Offset: 0x300, Size: 0x1] 0x715d228d80
	bool bShowCongratsMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1] 0x715d228e00
	bool bDisableAllPlayerInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 0x1] 0x715d228e80
	void UpdateInstructionDisplayText();// 0x45c6aa0 0x715d21ee80
	bool ShouldSkipDelayAfterComplete();// 0x4156218 0x715d21ef60
	bool ShouldLongDelayAfterComplete();// 0x4156250 0x715d21f040
	void OnFailedCompletionAttemptNoted();// 0x41561dc 0x715d21f120
	void OnCompleted();// 0x41561f0 0x715d21f200
	void OnActivated();// 0x4156204 0x715d21f2e0
	void NoteFailedCompletionAttempt();// 0x4156468 0x715d21f3c0
	bool IsApplicableToCurrentPlatform();// 0x4156288 0x715d21f4a0
	void InitializeInactiveState();// 0x41561b4 0x715d21f580
	void InitializeCompletedState();// 0x4156184 0x715d21f660
	void InitializeAuxiliaryObjects();// 0x41561c8 0x715d21f740
	void InitializeActiveState();// 0x4156198 0x715d21f820
	FText GetUIObjectiveDisplayText();// 0x41562c0 0x715d21f900
	FText GetUIInstructionDisplayText();// 0x4156390 0x715d21f9e0
	enum GetState();// 0x41564a4 0x715d21fac0
	void Complete();// 0x415647c 0x715d21fba0
	void Activate();// 0x4156490 0x715d21fc80

--------------------------------
Class: HuntersObjectiveInitCharacter.HuntersTrainingObjective.Actor.Object // 71a496d800
	HuntersCharacterBase* HuntersCharacter;//[Offset: 0x310, Size: 0x8] 0x715d228600
	GenericTeamId TeamID;//[Offset: 0x318, Size: 0x1] 0x715d228680
	FText CharacterName;//[Offset: 0x320, Size: 0x18] 0x715d228700
	BehaviorTree* BehaviorTree;//[Offset: 0x338, Size: 0x8] 0x715d228780
	class GameplayEffect[] GameplayEffectClassesToAdd;//[Offset: 0x340, Size: 0x10] 0x715d1b7c20
	int OverrideStartingHealth;//[Offset: 0x350, Size: 0x4] 0x715d228800
	class GameplayEffect* OverrideHitpointsGameplayEffectClass;//[Offset: 0x358, Size: 0x8] 0x715d1b7cc0
	class GameplayEffect* IncreaseHitpointsGameplayEffectClass;//[Offset: 0x360, Size: 0x8] 0x715d1b7d60
	GameplayTag OverrideHitpointsGameplayTag;//[Offset: 0x368, Size: 0x8] 0x715d228880

--------------------------------
Class: HuntersTrainingObjectiveUpdateAbilityAvailabilityBase.HuntersTrainingObjective.Actor.Object // 71a496d300
	float AbilityOneCooldownDurationOverride;//[Offset: 0x310, Size: 0x4] 0x715d22a480
	float AbilityTwoCooldownDurationOverride;//[Offset: 0x314, Size: 0x4] 0x715d22a500
	float AbilityThreeCooldownDurationOverride;//[Offset: 0x318, Size: 0x4] 0x715d228480
	float AbilityFourCooldownDurationOverride;//[Offset: 0x31c, Size: 0x4] 0x715d228500
	void UpdateAbilityCooldownDurations(HuntersCharacterBase* InHuntersCharacter);// 0x41575d8 0x715d21eda0

--------------------------------
Class: BTDecorator_AddGameplayEffect.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a496d080
	class GameplayEffect[] Effects;//[Offset: 0x60, Size: 0x10] 0x715d1ba420

--------------------------------
Class: BTDecorator_ForceFailure.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a496c680

--------------------------------
Class: BTDecorator_HuntersIsAtLocation.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a496c400
	AIDataProviderFloatValue AcceptableRadius;//[Offset: 0x60, Size: 0x38] 0x715d22a000
	enum GeometricDistanceType;//[Offset: 0x98, Size: 0x1] 0x715d1ba2e0
	BlackboardKeySelector SourceActorKey;//[Offset: 0xa0, Size: 0x28] 0x715d22a100
	BlackboardKeySelector TargetActorKey;//[Offset: 0xc8, Size: 0x28] 0x715d22a180

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object // 71a4afb280
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x715cc879a0

--------------------------------
Class: BTDecorator_IsActiveAbility.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a496c180
	class HuntersGameplayAbility* AbilityClass;//[Offset: 0x60, Size: 0x28] 0x715d1ba240

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a496bc80
	BlackboardKeySelector BlackboardKey;//[Offset: 0x60, Size: 0x28] 0x715d229f80

--------------------------------
Class: BTDecorator_IsActorOnNavMesh.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a496bf00

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object // 71a496b780
	BlackboardKeySelector BlackboardKey;//[Offset: 0x68, Size: 0x28] 0x715d229d00

--------------------------------
Class: BTService_ActionPathingFailure.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object // 71a496ba00

--------------------------------
Class: BTService_Aim.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object // 71a496b280

--------------------------------
Class: BTService_UpdateAimLocation.BTService.BTAuxiliaryNode.BTNode.Object // 71a496ad80
	BlackboardKeySelector AimLocationKey;//[Offset: 0x68, Size: 0x28] 0x715d229900
	AIDataProviderFloatValue MaxConsideredDistance;//[Offset: 0x90, Size: 0x38] 0x715d229980
	AIDataProviderFloatValue MaxCanAttackDistance;//[Offset: 0xc8, Size: 0x38] 0x715d229a00
	bool bSelfTargetSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x715d229a80
	float RandomTurnLocationSelectionRate;//[Offset: 0x104, Size: 0x4] 0x715d229b00
	float RandomTurnAngleDegrees;//[Offset: 0x108, Size: 0x4] 0x715d229b80
	float RandomTurnAngleMaxDegrees;//[Offset: 0x10c, Size: 0x4] 0x715d229c00
	BlackboardKeySelector TargetKey;//[Offset: 0x110, Size: 0x28] 0x715d229c80

--------------------------------
Class: BTService_AimAndFire.BTService_UpdateAimLocation.BTService.BTAuxiliaryNode.BTNode.Object // 71a496b000

--------------------------------
Class: BTService_UpdateButtonReleasedTimer.BTService.BTAuxiliaryNode.BTNode.Object // 71a496ab00
	BlackboardKeySelector SelectedAbilityKey;//[Offset: 0x68, Size: 0x28] 0x715d229880

--------------------------------
Class: BTService_UpdateDestinationFromAbilityMovementEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object // 71a496a880

--------------------------------
Class: BTService_UpdateGOAPTargetFromAbilityEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object // 71a496a600

--------------------------------
Class: BTTask_ActivateAbilityBase.BTTaskNode.BTNode.Object // 71a496fb00

--------------------------------
Class: BTTask_ActivateAbility.BTTask_ActivateAbilityBase.BTTaskNode.BTNode.Object // 71a496fd80
	bool bWaitForAbilityHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x715d229680
	BlackboardKeySelector AbilityRunningStateKey;//[Offset: 0x70, Size: 0x28] 0x715d229700
	class HuntersGameplayAbility* AbilityClass;//[Offset: 0x98, Size: 0x28] 0x715d1ba100

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object // 71a4afbf00
	Enum* EnumType;//[Offset: 0x30, Size: 0x8] 0x715cccdd00
	FString EnumName;//[Offset: 0x38, Size: 0x10] 0x715cccdd80
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715cccde00

--------------------------------
Class: BTTask_CancelAbility.BTTaskNode.BTNode.Object // 71a4975100
	class HuntersGameplayAbility* AbilityClass;//[Offset: 0x70, Size: 0x28] 0x715d1ba060

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4974c00
	BlackboardKeySelector BlackboardKey;//[Offset: 0x70, Size: 0x28] 0x715d229600

--------------------------------
Class: BTTask_ClearBlackboardValue.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4974e80

--------------------------------
Class: BTTask_HandleGameplayEffect.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4974980
	enum Operation;//[Offset: 0x98, Size: 0x1] 0x715d1b9f20
	class GameplayEffect* GameplayEffectClass;//[Offset: 0xa0, Size: 0x8] 0x715d1b9fc0

--------------------------------
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4974480
	float Precision;//[Offset: 0x98, Size: 0x4] 0x715d229500

--------------------------------
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object // 71a4afb000

--------------------------------
Class: BTTask_HuntersRotateToFaceBBEntry.BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4974700
	float Timeout;//[Offset: 0xa0, Size: 0x4] 0x715d22b500
	byte TimeoutNodeResult;//[Offset: 0xa4, Size: 0x1] 0x715d22b580

--------------------------------
Class: BTTask_RemoveTagBasedOnTargetTag.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4974200
	GameplayTagContainer TagsInTargetToLookFor;//[Offset: 0x98, Size: 0x20] 0x715d22b400
	GameplayTag TagToRemoveFromOwner;//[Offset: 0xb8, Size: 0x8] 0x715d22b480

--------------------------------
Class: BTTask_RunNextAbilityMovementEQS.BTTaskNode.BTNode.Object // 71a4973f80
	BlackboardKeySelector VectorKey;//[Offset: 0x70, Size: 0x28] 0x715d22b300
	BlackboardKeySelector ActorKey;//[Offset: 0x98, Size: 0x28] 0x715d22b380

--------------------------------
Class: BTTask_RunSelectedAbility.BTTask_ActivateAbilityBase.BTTaskNode.BTNode.Object // 71a4973d00
	BlackboardKeySelector SelectedAbilityKey;//[Offset: 0x70, Size: 0x28] 0x715d22b180
	BlackboardKeySelector AbilityRunningStateKey;//[Offset: 0x98, Size: 0x28] 0x715d22b200
	class HuntersAIAction* ExplicitAIAction;//[Offset: 0xc0, Size: 0x8] 0x715d1b9e80
	bool bAcceptAlreadyIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x715d22b280

--------------------------------
Class: HuntersAIAction.Object // 71a497e200
	float ActionCooldownDuration;//[Offset: 0x28, Size: 0x4] 0x715d22ed80
	HuntersAIRule* ActivationRule;//[Offset: 0x30, Size: 0x8] 0x715d22ee00
	float MovementFailureReEvaluationRate;//[Offset: 0x38, Size: 0x4] 0x715d22ee80
	float TargetSelectionReEvaluationRate;//[Offset: 0x3c, Size: 0x4] 0x715d22ef00
	HuntersAIRule* ContinueExecutingPlanRule;//[Offset: 0x40, Size: 0x8] 0x715d22ef80
	bool bContinueExecutingFailureEndsPlan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715d22f000
	bool bRequireAllTargetsStayValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x715d22f080
	bool ReevaluateDestinationTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x715d22f100
	HuntersAIRule* PriorityRule;//[Offset: 0x50, Size: 0x8] 0x715d22f180
	float MinPriority;//[Offset: 0x58, Size: 0x4] 0x715d22f200
	float MaxPriority;//[Offset: 0x5c, Size: 0x4] 0x715d22f280
	EnvQuery* TargetSelectionEQS;//[Offset: 0x60, Size: 0x8] 0x715d22f300
	float TargetSelectionMinValidityDuration;//[Offset: 0x68, Size: 0x4] 0x715d22f380
	<GameplayTag,bool> PreConditions;//[Offset: 0x70, Size: 0x50] 0x715cecc700
	<GameplayTag,bool> Effects;//[Offset: 0xc0, Size: 0x50] 0x715cecc7c0
	void OnRegister();// 0x41b608c 0x715d2413c0

--------------------------------
Class: HuntersAIRule.Object // 71a497e700

--------------------------------
Class: BTTask_SelectAIAbility.BTTaskNode.BTNode.Object // 71a4973a80
	GameplayTag AbilityBehaviorTreeTag;//[Offset: 0x80, Size: 0x8] 0x715d22b000
	BlackboardKeySelector AbilityBlackboardKey;//[Offset: 0x88, Size: 0x28] 0x715d22b080
	BlackboardKeySelector TargetBlackboardKey;//[Offset: 0xb0, Size: 0x28] 0x715d22b100

--------------------------------
Class: BTTask_SetAbilityHint.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4973800
	enum AbilityHint;//[Offset: 0x98, Size: 0x1] 0x715d1b9de0
	BlackboardKeySelector AbilityBlackboardKey;//[Offset: 0xa0, Size: 0x28] 0x715d22af80

--------------------------------
Class: BTTask_SetAbilityMovementFailure.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4973580
	BlackboardKeySelector AbilityBlackboardKey;//[Offset: 0x98, Size: 0x28] 0x715d22ae80

--------------------------------
Class: BTTask_SetGameplayAbilityTarget.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4973300
	enum TargetType;//[Offset: 0x98, Size: 0x1] 0x715d1b9d40
	BlackboardKeySelector LocationBlackboardKey;//[Offset: 0xa0, Size: 0x28] 0x715d22ae00

--------------------------------
Class: BTTask_TriggerAIAbilityStatusChange.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4973080
	enum ExecutionStatus;//[Offset: 0x98, Size: 0x1] 0x715d1b9ca0
	GameplayTag AbilityBehaviorTreeTag;//[Offset: 0x9c, Size: 0x8] 0x715d22ad00

--------------------------------
Class: EnvQueryContext_AbilityOrigin.EnvQueryContext.Object // 71a4972e00
	class HuntersAIAbility* AIAbilityType;//[Offset: 0x28, Size: 0x8] 0x715d1b9c00

--------------------------------
Class: HuntersAIAbility.HuntersAIAction.Object // 71a497e480
	BehaviorTree* BehaviorTree;//[Offset: 0x138, Size: 0x8] 0x715d22ec00
	HuntersGameplayAbility* GameplayAbility;//[Offset: 0x148, Size: 0x8] 0x715d22ec80
	HuntersGameplayAbility* GetGameplayAbility();// 0x41b525c 0x715d2412e0

--------------------------------
Class: EnvQueryContext_ActionTarget.EnvQueryContext.Object // 71a4972900

--------------------------------
Class: EnvQueryContext_ActorComponentWithTagLocation.EnvQueryContext.Object // 71a4972680
	class Actor* ActorClass;//[Offset: 0x28, Size: 0x8] 0x715d1b9b60
	FName ComponentTag;//[Offset: 0x30, Size: 0x8] 0x715d22ac00

--------------------------------
Class: EnvQueryContext_ActorsOfClass.EnvQueryContext.Object // 71a4972400
	class Actor* ActorClass;//[Offset: 0x28, Size: 0x8] 0x715d1b9ac0

--------------------------------
Class: EnvQueryContext_BlackboardVarBase.EnvQueryContext.Object // 71a4972180
	FName BlackboardKeyName;//[Offset: 0x28, Size: 0x8] 0x715d22ab80

--------------------------------
Class: EnvQueryContext_ConsideredGoalTarget.EnvQueryContext.Object // 71a4971f00

--------------------------------
Class: EnvQueryContext_FriendlyGoalFinder.EnvQueryContext.Object // 71a4971c80

--------------------------------
Class: EnvQueryContext_HostileGoalFinder.EnvQueryContext.Object // 71a4971a00

--------------------------------
Class: EnvQueryContext_HuntersEnemies.EnvQueryContext.Object // 71a4971780

--------------------------------
Class: EnvQueryContext_HuntersLastDamagingEnemy.EnvQueryContext.Object // 71a4971500

--------------------------------
Class: EnvQueryContext_LastPerceivedLocation.EnvQueryContext.Object // 71a4971280
	class EnvQueryContext* QueryContextSource;//[Offset: 0x28, Size: 0x8] 0x715d1b9a20

--------------------------------
Class: EnvQueryContext_LocationFromMaster.EnvQueryContext.Object // 71a4971000

--------------------------------
Class: EnvQueryContext_QuerierInstigator.EnvQueryContext.Object // 71a4970d80

--------------------------------
Class: EnvQueryContext_RandomRotation.EnvQueryContext.Object // 71a4970b00
	float Min;//[Offset: 0x28, Size: 0x4] 0x715d22aa80
	float Max;//[Offset: 0x2c, Size: 0x4] 0x715d22ab00

--------------------------------
Class: EnvQueryContext_SuggestedTarget.EnvQueryContext.Object // 71a4970880

--------------------------------
Class: EnvQueryGenerator_HostileGoalFinder.EnvQueryGenerator.EnvQueryNode.Object // 71a4970600

--------------------------------
Class: EnvQueryGenerator_HuntersCharacters.EnvQueryGenerator.EnvQueryNode.Object // 71a497a380
	byte TeamOptions;//[Offset: 0x49, Size: 0x1] 0x715d22a800
	byte ActorOptions;//[Offset: 0x4a, Size: 0x1] 0x715d22a880

--------------------------------
Class: EnvQueryGenerator_HuntersComposite.EnvQueryGenerator.EnvQueryNode.Object // 71a497a100
	EnvQueryGenerator*[] Generators;//[Offset: 0x50, Size: 0x10] 0x715d1b9840
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x715d22a680
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x715d22a700
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x68, Size: 0x8] 0x715d1b98e0
	bool bAllowCascade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x715d22a780

--------------------------------
Class: EnvQueryGenerator_Perception.EnvQueryGenerator.EnvQueryNode.Object // 71a4979e80
	byte TeamOptions;//[Offset: 0x49, Size: 0x1] 0x715d22c500
	byte ActorOptions;//[Offset: 0x4a, Size: 0x1] 0x715d22c580
	bool bCanSeeOrRecentDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x715d22c600
	bool bRespectHuntersCharacterAITargettingDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x715d22a580

--------------------------------
Class: EnvQueryGenerator_PerceptionLastLocations.EnvQueryGenerator.EnvQueryNode.Object // 71a4979c00
	byte TeamOptions;//[Offset: 0x49, Size: 0x1] 0x715d22c280
	byte ActorOptions;//[Offset: 0x4a, Size: 0x1] 0x715d22c300
	class EnvQueryContext* FilterCenter;//[Offset: 0x50, Size: 0x8] 0x715d1b97a0
	AIDataProviderFloatValue MinDistanceToCenter;//[Offset: 0x58, Size: 0x38] 0x715d22c380
	AIDataProviderFloatValue MaxDistanceToCenter;//[Offset: 0x90, Size: 0x38] 0x715d22c400
	byte MultipleContextScoreOp;//[Offset: 0xc8, Size: 0x1] 0x715d22c480

--------------------------------
Class: EnvQueryGenerator_PreviousValidLocation.EnvQueryGenerator.EnvQueryNode.Object // 71a4979980

--------------------------------
Class: EnvQueryGenerator_SelfActor.EnvQueryGenerator.EnvQueryNode.Object // 71a4979700

--------------------------------
Class: EnvQueryTest_CanBeHitByExplosion.EnvQueryTest.EnvQueryNode.Object // 71a4979480
	class EnvQueryContext* ContextTargets;//[Offset: 0x1f8, Size: 0x8] 0x715d1b9660
	EnvHuntersOverlapData OverlapData;//[Offset: 0x200, Size: 0xb0] 0x715d22b800
	EnvHuntersTraceData TraceData;//[Offset: 0x2b0, Size: 0x2] 0x715d22b880

--------------------------------
Class: EnvHuntersOverlapData // 715da98200
	AIDataProviderFloatValue ExtentX;//[Offset: 0x0, Size: 0x38] 0x715dab7300
	AIDataProviderFloatValue ExtentY;//[Offset: 0x38, Size: 0x38] 0x715dab7380
	AIDataProviderFloatValue ExtentZ;//[Offset: 0x70, Size: 0x38] 0x715dab5480
	byte OverlapShape;//[Offset: 0xa8, Size: 0x1] 0x715dab5500
	bool ShouldSkipOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1] 0x715dab5580
	bool UseComplexOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1] 0x715dab5600

--------------------------------
Class: EnvHuntersTraceData // 715da982c0
	byte TraceChannel;//[Offset: 0x0, Size: 0x1] 0x715dab5680
	bool UseComplexTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715dab5700

--------------------------------
Class: EnvQueryTest_DistanceWithComparison.EnvQueryTest.EnvQueryNode.Object // 71a4978f80
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x715d22b700
	byte CompareMode;//[Offset: 0x1f2, Size: 0x1] 0x715d22b780
	class EnvQueryContext* DistanceTo;//[Offset: 0x1f8, Size: 0x8] 0x715d1b9520
	class EnvQueryContext* CompareDistanceTo;//[Offset: 0x200, Size: 0x8] 0x715d1b95c0

--------------------------------
Class: EnvQueryTest_HasActorTag.EnvQueryTest.EnvQueryNode.Object // 71a4978d00
	FName[] Tags;//[Offset: 0x1f8, Size: 0x10] 0x715d1b9480

--------------------------------
Class: EnvQueryTest_Health.EnvQueryTest.EnvQueryNode.Object // 71a4978a80

--------------------------------
Class: EnvQueryTest_HuntersGoalConstraints.EnvQueryTest.EnvQueryNode.Object // 71a4978800

--------------------------------
Class: EnvQueryTest_HuntersTrace.EnvQueryTest.EnvQueryNode.Object // 71a4978580
	enum ContextType;//[Offset: 0x1f1, Size: 0x1] 0x715d1b92a0
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8] 0x715d1b9340
	enum TraceMode;//[Offset: 0x200, Size: 0x1] 0x715d1b93e0
	bool UseComplexTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1] 0x715d22d600
	AIDataProviderFloatValue IgnoreImpactDistanceToTarget;//[Offset: 0x208, Size: 0x38] 0x715d22d680
	AIDataProviderFloatValue MaxConsideredDistance;//[Offset: 0x240, Size: 0x38] 0x715d22b600

--------------------------------
Class: EnvQueryTest_IsAlreadySelectedAsTarget.EnvQueryTest.EnvQueryNode.Object // 71a4978300

--------------------------------
Class: EnvQueryTest_IsControllingCapturePoint.EnvQueryTest.EnvQueryNode.Object // 71a4978080

--------------------------------
Class: EnvQueryTest_IsHiddenInGame.EnvQueryTest.EnvQueryNode.Object // 71a4977e00

--------------------------------
Class: EnvQueryTest_IsOwner.EnvQueryTest.EnvQueryNode.Object // 71a4977b80

--------------------------------
Class: EnvQueryTest_IsPlayerControlled.EnvQueryTest.EnvQueryNode.Object // 71a4977900

--------------------------------
Class: EnvQueryTest_IsTargetedByInstigator.EnvQueryTest.EnvQueryNode.Object // 71a4977680
	AIDataProviderFloatValue MaxTimeSinceLastInstigatorAttack;//[Offset: 0x1f8, Size: 0x38] 0x715d22d480

--------------------------------
Class: EnvQueryTest_NavigationRaycast.EnvQueryTest.EnvQueryNode.Object // 71a4977400
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x1f8, Size: 0x8] 0x715d1b9200

--------------------------------
Class: EnvQueryTest_NumberOfAITargeting.EnvQueryTest.EnvQueryNode.Object // 71a4977180
	class HuntersCharacterBase* AIType;//[Offset: 0x1f8, Size: 0x8] 0x715d1b9160
	byte AITeamOptions;//[Offset: 0x200, Size: 0x1] 0x715d22d380
	byte AIActorOptions;//[Offset: 0x201, Size: 0x1] 0x715d22d400

--------------------------------
Class: EnvQueryTest_NumberOfEntitiesInRadius.EnvQueryTest.EnvQueryNode.Object // 71a4976f00
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8] 0x715d1b90c0
	AIDataProviderFloatValue Radius;//[Offset: 0x200, Size: 0x38] 0x715d22d300

--------------------------------
Class: EnvQueryTest_OverlappingHuttball.EnvQueryTest.EnvQueryNode.Object // 71a4976c80

--------------------------------
Class: EnvQueryTest_OverrlappingVolume.EnvQueryTest.EnvQueryNode.Object // 71a4976a00
	class Actor* TestAgainstAll;//[Offset: 0x1f8, Size: 0x8] 0x715d1bb960
	bool bIgnoreActorsWithDisabledCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1] 0x715d22d280

--------------------------------
Class: EnvQueryTest_ScoreThreat.EnvQueryTest.EnvQueryNode.Object // 71a4976780

--------------------------------
Class: HuntersAIBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4976500
	static Pawn* SpawnMinion(Object* WorldContextObject, class Pawn MinionClass, out const Transform Transform, enum CollisionHandlingOverride);// 0x4187820 0x715d241ba0
	static Pawn* SpawnCompanion(Object* WorldContextObject, class Pawn PawnClass, out const Transform Transform, enum CollisionHandlingOverride, Pawn* Master);// 0x41879b8 0x715d241c80
	static void SetBlackboardInterruptTree(BlackboardComponent* BlackboardComponent, bool bInterrupt);// 0x418766c 0x715d21e780
	static void SetBlackboardGameplayTag(BlackboardComponent* BlackboardComponent, out const GameplayTag GameplayTag);// 0x41872e4 0x715d21e860
	static void SetBlackboardFiringTarget(BlackboardComponent* BlackboardComponent, Actor* FiringTarget);// 0x418774c 0x715d21e940
	static void SetBlackboardDestinationActor(BlackboardComponent* BlackboardComponent, Actor* DestinationActor);// 0x41873d0 0x715d21ea20
	static void SetBlackboardDestination(BlackboardComponent* BlackboardComponent, out const Vector Destination);// 0x41874a4 0x715d21eb00
	static void SetBlackboardAimLocation(BlackboardComponent* BlackboardComponent, out const Vector AimLocation);// 0x4187588 0x715d21ebe0
	static void SetBlackboardAbilityInput(BlackboardComponent* BlackboardComponent, enum AbilityInput);// 0x418720c 0x715d21ecc0

--------------------------------
Class: HuntersAIController.AIController.Controller.Actor.Object // 71a4976000
	delegate OnScriptedBehaviorTreeDone;//[Offset: 0x328, Size: 0x10] 0x715d22e580
	BehaviorTree* BehaviorTree;//[Offset: 0x340, Size: 0x8] 0x715d22e600
	bool bDebugDrawPawnEyes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x715d22e680
	bool bUpdateControlRotationCanUpdatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1] 0x715d22e700
	void BroadcastScriptedBehaviorTreeDone(bool bSuccessful);// 0x4188404 0x715d241ac0

--------------------------------
Class: HuntersPathFollowingComponent.PathFollowingComponent.ActorComponent.Object // 71a497f100

--------------------------------
Class: HuntersAICompanionController.HuntersAIController.AIController.Controller.Actor.Object // 71a4976280
	Controller* MasterController;//[Offset: 0x368, Size: 0x8] 0x715d22e480
	Vector RelativeLocationToMaster;//[Offset: 0x370, Size: 0xc] 0x715d22e500

--------------------------------
Class: HuntersAIDataProvider_Ability.AIDataProvider.Object // 71a4975d80
	class HuntersAIAbility* AbilityClass;//[Offset: 0x28, Size: 0x8] 0x715d1bb500
	enum AbilityDataType;//[Offset: 0x30, Size: 0x1] 0x715d1bb5a0
	bool UseParentActionAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x715d22e280
	float FloatValue;//[Offset: 0x34, Size: 0x4] 0x715d22e300
	bool bUseBlackboardKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715d22e380
	BlackboardKeySelector BlackboardKey;//[Offset: 0x40, Size: 0x28] 0x715d22e400

--------------------------------
Class: HuntersAIDataProvider_Composite.AIDataProvider.Object // 71a4975880
	AIDataProviderFloatValue[] Children;//[Offset: 0x28, Size: 0x10] 0x715d1bb3c0
	enum Operator;//[Offset: 0x38, Size: 0x1] 0x715d1bb460
	float FloatValue;//[Offset: 0x3c, Size: 0x4] 0x715d22e180

--------------------------------
Class: HuntersAIDataProvider_Weapon.AIDataProvider.Object // 71a4975600
	enum WeaponDataType;//[Offset: 0x28, Size: 0x1] 0x715d1bb320
	float FloatValue;//[Offset: 0x2c, Size: 0x4] 0x715d22e000

--------------------------------
Class: HuntersAIPvEController.HuntersAIController.AIController.Controller.Actor.Object // 71a497f600
	HuntersAIThreatSystem* ThreatSystem;//[Offset: 0x368, Size: 0x8] 0x715d22df00

--------------------------------
Class: HuntersAIThreatSystem.ActorComponent.Object // 71a4981500
	ThreatEntry[] AmountToGenerateMaxThreat;//[Offset: 0xc8, Size: 0x10] 0x715d1bca40
	<class CarriableItem,CarriableThreatData> CarriablesThreatData;//[Offset: 0xd8, Size: 0x50] 0x715cecf640
	void OnMatchStarted();// 0x41bc0c0 0x715d240a20
	void OnActorDeactivated(const Actor* InActor);// 0x41bbf78 0x715d240b00
	void OnActorActivated(const Actor* InActor);// 0x41bc01c 0x715d240be0

--------------------------------
Class: ThreatEntry // 715da9a600
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715dab6700
	enum ThreatType;//[Offset: 0x1, Size: 0x1] 0x715d89e200
	float ThreatValue;//[Offset: 0x4, Size: 0x4] 0x715dab6800
	<GameplayTag,float> GeneratedThreatMultipliers;//[Offset: 0x8, Size: 0x50] 0x715da9a540

--------------------------------
Class: CarriableThreatData // 715da9a6c0
	bool bCarrierHasMaxThreat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715dab6980
	float ThreatValue;//[Offset: 0x4, Size: 0x4] 0x715dab6a00

--------------------------------
Class: HuntersAIMinionController.HuntersAIPvEController.HuntersAIController.AIController.Controller.Actor.Object // 71a4975380

--------------------------------
Class: HuntersAIPvPController.HuntersAIController.AIController.Controller.Actor.Object // 71a497f380
	float MaxInterruptPlanRate;//[Offset: 0x364, Size: 0x4] 0x715d22dd80
	void OnPerceptionChanged(Actor* Actor, AIStimulus Stimulus);// 0x4188fd8 0x715d241900
	void InterruptPlan();// 0x4188fc4 0x715d2419e0

--------------------------------
Class: HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497e980
	bool bShouldUseSourceContext;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d22f680
	bool bShouldUseTargetContext;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715d22f700
	bool bShouldHaveScoreCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x715d22f780
	class HuntersAIRuleContext* SourceContextClass;//[Offset: 0x30, Size: 0x8] 0x715d1bb140
	class HuntersAIRuleContext* TargetContextClass;//[Offset: 0x38, Size: 0x8] 0x715d1bb1e0
	enum ContextOperator;//[Offset: 0x40, Size: 0x1] 0x715d1bb280
	CurveFloat* ScoreCurve;//[Offset: 0x48, Size: 0x8] 0x715d22d780
	float GetScore(const Actor* InOwningActor);// 0x41b9c8c 0x715d2414a0

--------------------------------
Class: HuntersAIRuleContext.Object // 71a4982b80

--------------------------------
Class: HunterAIRule_TimeSinceLastSelection.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497ec00
	bool UseSharedTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d22f600

--------------------------------
Class: HuntersAISystem.ActorComponent.Object // 71a497dd00
	float MaxAllTargetSelectionBeforeErrorDuration;//[Offset: 0xb8, Size: 0x4] 0x715d22ea00
	EnvQuery* SkippedSelfTargetSelectionEQS;//[Offset: 0xc0, Size: 0x8] 0x715d22ea80
	<FString,HuntersAIRuleContext*> LocalContextMap;//[Offset: 0xc8, Size: 0x50] 0x715cecc640

--------------------------------
Class: HuntersAIAbilitySystem.HuntersAISystem.ActorComponent.Object // 71a497df80
	bool ShouldFilterAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x715d22fe00
	class HuntersAIAbility[] AIAbilityFilterList;//[Offset: 0x1b0, Size: 0x10] 0x715d1baec0
	class HuntersAIAbility[] AIAbilityExceptionList;//[Offset: 0x1c0, Size: 0x10] 0x715d1bb000
	HuntersAbilitySet*[] AIGameModeSpecificAbilitySet;//[Offset: 0x1d0, Size: 0x10] 0x715d1bb0a0
	<uint32,RuntimeAIAbilities> RuntimeAIAbilitiesMap;//[Offset: 0x1e0, Size: 0x50] 0x715cecf700
	void OnRuntimeAbilityOverrideChanged(HuntersAbilitySystemComponent* AbilitySystemComponent, out const InputBindableHuntersGameplayAbility InAbilityOverride);// 0x41b59c8 0x715d241120
	void OnAbilitySystemTagChanged(const HuntersAbilitySystemComponent* InAbilitySystem, out const GameplayTag Tag, bool TagExists);// 0x41b5af4 0x715d241200

--------------------------------
Class: RuntimeAIAbilities // 715da97c00
	<class HuntersAIAction,AbilityContainer> GameplayAbilitiesByAIType;//[Offset: 0x0, Size: 0x50] 0x715da9acc0
	HuntersAIAction*[] AIActions;//[Offset: 0x58, Size: 0x10] 0x715d89bb40

--------------------------------
Class: AbilityContainer // 715da9ac00
	HuntersGameplayAbility* GameplayAbility;//[Offset: 0x0, Size: 0x8] 0x715dab6d00
	HuntersAIAction* AIAction;//[Offset: 0x8, Size: 0x8] 0x715dab6d80
	int ActionIndex;//[Offset: 0x10, Size: 0x4] 0x715dab6e00

--------------------------------
Class: HuntersAIGoalConstraint.Object // 71a497da80

--------------------------------
Class: HuntersAIGoalConstraint_InRangeOfGoalTarget.HuntersAIGoalConstraint.Object // 71a497d800
	float Range;//[Offset: 0x28, Size: 0x4] 0x715d22fd00
	GameplayTag FilterBasedOnRequiredGameplayTag;//[Offset: 0x2c, Size: 0x8] 0x715d22fd80

--------------------------------
Class: HuntersAIGoal.HuntersAIAction.Object // 71a497d580
	EnvQuery* ValidLocationsForPreviousActionEQS;//[Offset: 0x138, Size: 0x8] 0x715d22fb00
	float TimeBeforeGoalPrioritiesReevaluation;//[Offset: 0x140, Size: 0x4] 0x715d22fb80
	HuntersAIGoalConstraint*[] PositionalConstraints;//[Offset: 0x148, Size: 0x10] 0x715d1bad80
	void SetGoalConstraintInRangeOfGoalTargetRange(float Radius);// 0x41b6790 0x715d241040

--------------------------------
Class: HuntersAIGoalEnvQuerySystem.Object // 71a497d300

--------------------------------
Class: HuntersAIGoalSystem.HuntersAISystem.ActorComponent.Object // 71a497d080
	float MaxPlanningBeforeErrorDuration;//[Offset: 0x194, Size: 0x4] 0x715d250d00
	float MaxWaitToPlanBeforeErrorDuration;//[Offset: 0x198, Size: 0x4] 0x715d250d80
	float MaxTimeSinceLastSuccessBeforeErrorDuration;//[Offset: 0x19c, Size: 0x4] 0x715d250e00
	float AcceptableRunningBeforeResetDuration;//[Offset: 0x1a0, Size: 0x4] 0x715d250e80
	<class HuntersAIGoal> AIGoals;//[Offset: 0x1a8, Size: 0x50] 0x715d1ba920
	<class HuntersAIGoal> ModeSpecificAIGoals;//[Offset: 0x1f8, Size: 0x50] 0x715d1baa60
	<class HuntersAIGoal> SharedAIGoals;//[Offset: 0x248, Size: 0x50] 0x715d1baba0
	GameplayTag GoalParamTag;//[Offset: 0x298, Size: 0x8] 0x715d250f00
	GameplayTag BehaviorTreeTag;//[Offset: 0x2a0, Size: 0x8] 0x715d250f80
	FName AbilityBBKey;//[Offset: 0x2a8, Size: 0x8] 0x715d251000
	FName TargetBBKey;//[Offset: 0x2b0, Size: 0x8] 0x715d251080
	GameplayTagContainer DisablePlanningTagContainer;//[Offset: 0x2b8, Size: 0x20] 0x715d22f800
	HuntersAIGoalEnvQuerySystem* GoalEnvironmentQuerySystem;//[Offset: 0x2d8, Size: 0x8] 0x715d22f880
	HuntersAIGoalSystemActorData[] AIGoalSystemActors;//[Offset: 0x2e0, Size: 0x10] 0x715d1bac40
	void OnMatchStarted();// 0x41b70a4 0x715d240da0
	void OnMatchFinished(out const HuntersPlayerState*[] Winners);// 0x41b6fe4 0x715d240e80
	void OnAIAbilitiesCooldownEnded(const Actor* Owner, const HuntersAIAction* Action);// 0x41b70b8 0x715d240f60

--------------------------------
Class: HuntersAIGoalSystemActorData // 715da9a9c0
	HuntersAIAction*[] RuntimeAIGoals;//[Offset: 0xa0, Size: 0x10] 0x715d89e2a0

--------------------------------
Class: HuntersAIGoalSystemNode.Object // 71a497ce00

--------------------------------
Class: HuntersAIPvEAbility.HuntersAIAbility.HuntersAIAction.Object // 71a497cb80

--------------------------------
Class: HuntersAIPvPAbility.HuntersAIAbility.HuntersAIAction.Object // 71a497c900
	float FixedCost;//[Offset: 0x150, Size: 0x4] 0x715d250c00
	EnvQuery* MovementForPreviousActionEQS;//[Offset: 0x158, Size: 0x8] 0x715d250c80

--------------------------------
Class: HuntersAIPvPAbility_Move.HuntersAIPvPAbility.HuntersAIAbility.HuntersAIAction.Object // 71a497c680

--------------------------------
Class: HuntersAIRule_Composite.HuntersAIRule.Object // 71a497c180

--------------------------------
Class: HuntersAIRule_Average.HuntersAIRule_Composite.HuntersAIRule.Object // 71a497c400
	WeightedRuleData[] Children;//[Offset: 0x28, Size: 0x10] 0x715d1ba7e0

--------------------------------
Class: WeightedRuleData // 715da9a840
	float Weight;//[Offset: 0x0, Size: 0x4] 0x715dab6a80
	HuntersAIRule* Child;//[Offset: 0x8, Size: 0x8] 0x715dab6b00

--------------------------------
Class: HuntersAIRule_CanActivateAbility.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497bf00
	bool bTestIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d250b00

--------------------------------
Class: HuntersAIRule_CanSeeEnemies.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497bc80
	bool bRespectHuntersCharacterAITargettingDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d250a80

--------------------------------
Class: HuntersAIRule_Decorator.HuntersAIRule.Object // 71a497b780
	HuntersAIRule* Child;//[Offset: 0x28, Size: 0x8] 0x715d250a00

--------------------------------
Class: HuntersAIRule_Complement.HuntersAIRule_Decorator.HuntersAIRule.Object // 71a497ba00

--------------------------------
Class: HuntersAIRule_ControlPointControlledByTeam.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497b500
	bool CheckContention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d250980

--------------------------------
Class: HuntersAIRule_ControlPointOccupiedByTeam.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497b280
	bool ExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d250800
	float ExcludeBasedOnMaxSpeedFractionAndAwayFromControlPoint;//[Offset: 0x54, Size: 0x4] 0x715d250880
	int RequiredCountOccupying;//[Offset: 0x58, Size: 0x4] 0x715d250900

--------------------------------
Class: HuntersAIRule_DegreeAngle.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497b000

--------------------------------
Class: HuntersAIRule_Distance.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497ad80

--------------------------------
Class: HuntersAIRule_HasGameplayTag.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497ab00
	GameplayTag RequiredGameplayTag;//[Offset: 0x50, Size: 0x8] 0x715d250780

--------------------------------
Class: HuntersAIRule_HasGameplayTags.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497a880
	GameplayTagContainer RequiredGameplayTags;//[Offset: 0x50, Size: 0x20] 0x715d250700

--------------------------------
Class: HuntersAIRule_HasRangedWeapon.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497a600

--------------------------------
Class: HuntersAIRule_HasWeaponEquipped.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497fd80
	GameplayTag RequiredEquippedWeaponTag;//[Offset: 0x50, Size: 0x8] 0x715d250680

--------------------------------
Class: HuntersAIRule_Health.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497fb00

--------------------------------
Class: HuntersAIRule_InTargetArea.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a497f880
	AIDataProviderFloatValue AreaRadius;//[Offset: 0x50, Size: 0x38] 0x715d250600

--------------------------------
Class: HuntersAIRule_Intersection.HuntersAIRule_Composite.HuntersAIRule.Object // 71a4985100
	HuntersAIRule*[] Children;//[Offset: 0x28, Size: 0x10] 0x715d1ba740

--------------------------------
Class: HuntersAIRule_IsFirstAbilityOfCurrentPhase.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4984e80
	bool bFirstInCurrentPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d250500

--------------------------------
Class: HuntersAIRule_IsOwnerInContext.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4984c00

--------------------------------
Class: HuntersAIRule_IsSourceContextSet.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4984980

--------------------------------
Class: HuntersAIRule_OccupiableObjectiveOccupiedByTeam.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4984700
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d250300
	bool bTestSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715d250380
	float ExcludeBasedOnMaxSpeedFractionAndAwayFromObjective;//[Offset: 0x54, Size: 0x4] 0x715d250400
	int RequiredCountOccupying;//[Offset: 0x58, Size: 0x4] 0x715d250480

--------------------------------
Class: HuntersAIRule_Shared.HuntersAIRule.Object // 71a4984480
	class HuntersAIRule_Proxy* Child;//[Offset: 0x28, Size: 0x8] 0x715d1ba6a0

--------------------------------
Class: HuntersAIRule_Proxy.HuntersAIRule_Decorator.HuntersAIRule.Object // 71a4984200
	HuntersAIAction* OverrideAction;//[Offset: 0x30, Size: 0x8] 0x715d250280

--------------------------------
Class: HuntersAIRule_RoleWeight.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4983f80
	class GameplayEffect* Role;//[Offset: 0x50, Size: 0x8] 0x715d1ba600

--------------------------------
Class: HuntersAIRule_TeamAttitude.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4983d00
	byte TeamAttitude;//[Offset: 0x50, Size: 0x1] 0x715d250200

--------------------------------
Class: HuntersAIRule_Threat.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4983a80

--------------------------------
Class: HuntersAIRule_TimeSinceLastDamage.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4983800

--------------------------------
Class: HuntersAIRule_TimeSinceLastUse.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4983580

--------------------------------
Class: HuntersAIRule_Trace.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4983300
	bool UseComplexTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715d250100
	float MaxConsideredDistance;//[Offset: 0x54, Size: 0x4] 0x715d250180

--------------------------------
Class: HuntersAIRule_UltimatePoints.HuntersAIRule_Primitive.HuntersAIRule.Object // 71a4983080

--------------------------------
Class: HuntersAIRule_Union.HuntersAIRule_Composite.HuntersAIRule.Object // 71a4982e00
	HuntersAIRule*[] Children;//[Offset: 0x28, Size: 0x10] 0x715d1ba560

--------------------------------
Class: HuntersAIRuleContext_AbilityOwner.HuntersAIRuleContext.Object // 71a4982900

--------------------------------
Class: HuntersAIRuleContext_ActorsOfClass.HuntersAIRuleContext.Object // 71a4982680
	class Actor* ActorClass;//[Offset: 0x38, Size: 0x8] 0x715d1bcd60
	bool bCacheOnInitialize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x715d252080
	Actor*[] CachedActorsOfClass;//[Offset: 0x48, Size: 0x10] 0x715d1bce00

--------------------------------
Class: HuntersAIRuleContext_ActorsOfClassWithAttitude.HuntersAIRuleContext.Object // 71a4982400
	class Actor* ActorClass;//[Offset: 0x38, Size: 0x8] 0x715d1bcc20
	bool bCacheOnInitialize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x715d251f00
	byte TeamAttitude;//[Offset: 0x41, Size: 0x1] 0x715d251f80
	Actor*[] CachedActorsOfClass;//[Offset: 0x48, Size: 0x10] 0x715d1bccc0

--------------------------------
Class: HuntersAIRuleContext_BlueprintBase.HuntersAIRuleContext.Object // 71a4982180
	Actor*[] InternalProvideContext(const Actor* InOwningActor);// 0x45c6aa0 0x715d240cc0

--------------------------------
Class: HuntersAIRuleContext_HuntersCharacters.HuntersAIRuleContext.Object // 71a4981f00
	byte TeamOptions;//[Offset: 0x38, Size: 0x1] 0x715d251c00
	byte ActorOptions;//[Offset: 0x39, Size: 0x1] 0x715d251c80
	bool bCanSeeOrRecentDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x715d251d00
	bool bRespectHuntersCharacterAITargettingDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1] 0x715d251d80

--------------------------------
Class: HuntersAIRuleContext_HuttballCarriers.HuntersAIRuleContext.Object // 71a4981c80

--------------------------------
Class: HuntersAIRuleContext_PlanningActor.HuntersAIRuleContext.Object // 71a4981a00

--------------------------------
Class: HuntersAIRuleContext_Target.HuntersAIRuleContext.Object // 71a4981780

--------------------------------
Class: HuntersAIWorldState.Object // 71a4981280

--------------------------------
Class: ThreatDataComponent.ActorComponent.Object // 71a4981000
	ThreatReplicatorWrapper[] ReplicatedThreatTable;//[Offset: 0xb0, Size: 0x10] 0x715d1bc9a0
	HuntersAIThreatSystem* ThreatSystemComponent;//[Offset: 0xc0, Size: 0x8] 0x715d251980
	void OnThreatTableUpdated();// 0x41bc730 0x715d240860
	void OnRep_ReplicatedThreatTable();// 0x41bc71c 0x715d240940

--------------------------------
Class: ThreatReplicatorWrapper // 715da9a480
	Actor* Actor;//[Offset: 0x0, Size: 0x8] 0x715dab6600
	float Threat;//[Offset: 0x8, Size: 0x4] 0x715dab6680

--------------------------------
Class: DeployablePhasingComponent.ActorComponent.Object // 71a4980d80
	PrimitiveComponent* CollisionComponent;//[Offset: 0xb0, Size: 0x8] 0x715d251380
	void OnOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x41c8c9c 0x715d2406a0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x41c8e08 0x715d240780

--------------------------------
Class: GroundAlignmentComponent.ActorComponent.Object // 71a4980b00
	enum GroundAlignmentType;//[Offset: 0xb0, Size: 0x1] 0x715d1bc860
	enum SinkType;//[Offset: 0xb1, Size: 0x1] 0x715d1bc900
	float MaxGroundAlignmentDistance;//[Offset: 0xb4, Size: 0x4] 0x715d251180
	float WallCheckHeightDifference;//[Offset: 0xb8, Size: 0x4] 0x715d251200
	bool bDisplayDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x715d251280
	CharacterMovementComponent* InstigatorCharacterMovementComponent;//[Offset: 0x110, Size: 0x8] 0x715d251300

--------------------------------
Class: HuntersActorPlacement.GameplayAbilityTargetActor.Actor.Object // 71a4980880
	Actor* TargetActor;//[Offset: 0x320, Size: 0x8] 0x715d252880
	enum PlacementType;//[Offset: 0x328, Size: 0x1] 0x715d1bc5e0
	CurveFloat* ChargeCurve;//[Offset: 0x330, Size: 0x8] 0x715d252980
	float MaxChargeTime;//[Offset: 0x338, Size: 0x4] 0x715d252a00
	float PlacementRange;//[Offset: 0x33c, Size: 0x4] 0x715d252a80
	float HeightThreshold;//[Offset: 0x340, Size: 0x4] 0x715d252b00
	float HeightOffset;//[Offset: 0x344, Size: 0x4] 0x715d252b80
	float PlacementHeightOffset;//[Offset: 0x348, Size: 0x4] 0x715d252c00
	float DeploymentBlockerPlacementOffset;//[Offset: 0x34c, Size: 0x4] 0x715d252c80
	bool bCheckNavMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x715d252d00
	int MaxDrawInIterations;//[Offset: 0x354, Size: 0x4] 0x715d252d80
	float MinimumDrawInDistance;//[Offset: 0x358, Size: 0x4] 0x715d252e00
	float MaxInvalidPlacementDistance;//[Offset: 0x35c, Size: 0x4] 0x715d252e80
	byte DrawDebugSettings;//[Offset: 0x360, Size: 0x1] 0x715d252f00
	class Object[] ClassTypesWhichBlockPlacement;//[Offset: 0x368, Size: 0x10] 0x715d1bc720
	byte[] CollisionChannelsWhichBlockPlacement;//[Offset: 0x378, Size: 0x10] 0x715d1bc7c0
	FName DeployableBlockerCollisionProfileName;//[Offset: 0x388, Size: 0x8] 0x715d253000
	CharacterMovementComponent* CharacterMovementComponent;//[Offset: 0x390, Size: 0x8] 0x715d253080
	HuntersAimController* AimController;//[Offset: 0x398, Size: 0x8] 0x715d253100

--------------------------------
Class: HuntersPlaceableActor.Interface.Object // 71a4980600
	void OnPlacementValidationChanged(bool IsValid);// 0x41ca3a4 0x715d240160
	void OnPlacementPreviewStarted();// 0x41ca388 0x715d240240
	bool IsPreviewActor();// 0x41ca30c 0x715d240320
	PrimitiveComponent* GetPhasingCollisionComponent();// 0x41ca458 0x715d240400
	PlayerState* GetOwnerPlayerState();// 0x41ca34c 0x715d2404e0
	PrimitiveComponent* GetCollisionComponent();// 0x41ca494 0x715d2405c0

--------------------------------
Class: HuntersAnalyticsBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4980380
	static void TrackHuttballOwnGoal(int PointScore, int TeamID, FString PlayerId);// 0x41e16e8 0x715d243260
	static void TrackHuttballGoal(int PointScore, int TeamID, FString PlayerId);// 0x41e186c 0x715d243340
	static void ReportMapExit(const Object* WorldContextObject);// 0x41e19f0 0x715d243420
	static void HuntersReportModifierAnalytics(FString Name, float Value, int TeamID);// 0x41e2340 0x715d243500
	static void HuntersAnalyticsTraversal(const Actor* AvatarActor, FString Phylum, bool bInitiate, bool bWasCancelled);// 0x41e1b68 0x715d2435e0
	static FString HuntersAnalyticsGetUtcNowTimestamp();// 0x41e1cf0 0x715d2436c0
	static FString HuntersAnalyticsGetPlayerID(const Actor* Target);// 0x41e1da0 0x715d2437a0
	static void HuntersAnalyticsFTUETargetEliminated(const Actor* ObjectiveActor, FString Kingdom);// 0x41e1a84 0x715d243880
	static void HuntersAnalyticsEvent(FString Counter, FString Kingdom, FString Phylum, FString Class, FString Family, FString Genus, const int Value, FString PlayerId);// 0x41e1e90 0x715d243960
	static void HuntersAnalyticsEnvironmentPickup(FString Name, const Vector Location, const float MaxAttributeValue, const float PrePickupAttributeValue, const float AppliedValue, const Actor* Target);// 0x41e2154 0x715d240080

--------------------------------
Class: HuntersLocationalDamageMonitor.ActorComponent.Object // 71a498a100

--------------------------------
Class: HuntersLocationalDamageVisualsComponent.ActorComponent.Object // 71a4989e80
	FName MaterialTextureParameterName;//[Offset: 0xb0, Size: 0x8] 0x715d254f80
	int[] MaterialIndices;//[Offset: 0xb8, Size: 0x10] 0x715d1bc360
	int ArrayInitializationSize;//[Offset: 0xc8, Size: 0x4] 0x715d255080
	bool UpdateOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1] 0x715d255100
	CurveFloat* HealthRemapCurve;//[Offset: 0xd0, Size: 0x8] 0x715d255180
	bool UpdateArmorMaskTexture();// 0x41e87dc 0x715d242a80
	bool SetLDVDamage(int Index, float Value);// 0x41e8538 0x715d242b60
	void SetAllLDVDamage(float[] InputArray);// 0x41e82e4 0x715d242c40
	void ResetVisuals();// 0x41e82d0 0x715d242d20
	void PrepareMaterials();// 0x41e8814 0x715d242e00
	bool InitArmorMaskTexture(Color[] ColorArray);// 0x41e86d0 0x715d242ee0
	void InitArmorMaskArray(int NumElements);// 0x41e862c 0x715d242fc0
	float GetLDVDamage(int Index);// 0x41e848c 0x715d2430a0
	float[] GetAllLDVDamage();// 0x41e83dc 0x715d243180

--------------------------------
Class: HuntersLocationalDamageWeakPointComponent.HuntersLocationalDamageComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4989c00
	<enum,enum> DamageColoursMap;//[Offset: 0x508, Size: 0x50] 0x715cecf580
	delegate OnWeakpointDestroyed;//[Offset: 0x558, Size: 0x10] 0x715d254980
	float DamageWhenDestroyed;//[Offset: 0x568, Size: 0x4] 0x715d254a00
	bool StartWithWeakPointExposed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 0x1] 0x715d254a80
	float WeakPointHealthMax;//[Offset: 0x570, Size: 0x4] 0x715d254b00
	float WeakPointHealth;//[Offset: 0x574, Size: 0x4] 0x715d254b80
	enum CurrentState;//[Offset: 0x578, Size: 0x1] 0x715d1bc220
	bool bUsingDefaultWeakpointMaxHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1] 0x715d254c80
	void UpdateWeakPointVisualStatus(enum NewStatus);// 0x45c6aa0 0x715d242460
	void ResetArmor();// 0x41e9384 0x715d242540
	void OverrideWeakpointHealth(const float NewWeakpointHealth, const bool bShouldReset);// 0x41e925c 0x715d242620
	void OnRep_WeakpointHealth();// 0x41e9248 0x715d242700
	void OnRep_CurrentState();// 0x41e9234 0x715d2427e0
	float GetWeakPointMaxHealth();// 0x41e934c 0x715d2428c0
	float GetWeakPointHealth();// 0x41e9368 0x715d2429a0

--------------------------------
Class: HuntersAttributionSettings.DeveloperSettings.Object // 71a4989980

--------------------------------
Class: HuntersVoiceSubsystem.GameInstanceSubsystem.Subsystem.Object // 71a4989700

--------------------------------
Class: HuntersVoiceSettings.DeveloperSettings.Object // 71a4989480
	FName WWISEDuckParameterName;//[Offset: 0x38, Size: 0x8] 0x715d254300
	int RampInTimeMS;//[Offset: 0x40, Size: 0x4] 0x715d254380
	int RampOutTimeMS;//[Offset: 0x44, Size: 0x4] 0x715d254400
	int DuckLengthMS;//[Offset: 0x48, Size: 0x4] 0x715d254480
	float DuckingAudioThreshold;//[Offset: 0x4c, Size: 0x4] 0x715d254500
	float InChannelDuckAmount;//[Offset: 0x50, Size: 0x4] 0x715d254580
	float SomeoneSpeakingDuckAmount;//[Offset: 0x54, Size: 0x4] 0x715d254600
	SoundMix* InChannelDuckMix;//[Offset: 0x58, Size: 0x28] 0x715d254680
	SoundMix* SomeoneSpeakingDuckMix;//[Offset: 0x80, Size: 0x28] 0x715d254700
	SoundMix* InChannelDuckMixRef;//[Offset: 0xa8, Size: 0x8] 0x715d254780
	SoundMix* SomeoneSpeakingDuckMixRef;//[Offset: 0xb0, Size: 0x8] 0x715d254800

--------------------------------
Class: InputCoreTypes.Object // 71a498b000

--------------------------------
Class: FontBulkData.Object // 71a498ad80

--------------------------------
Class: FontFaceInterface.Interface.Object // 71a498ab00

--------------------------------
Class: FontProviderInterface.Interface.Object // 71a498a880

--------------------------------
Class: SlateTypes.Object // 71a498a600

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object // 71a498f880

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4995100
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x278] 0x715d256300

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4994e80
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0x580] 0x715d256280

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4994c00
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x30, Size: 0x3f0] 0x715d256200

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4994980
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x30, Size: 0x3b8] 0x715d256180

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4994700
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0x7f0] 0x715d256100

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4994480
	EditableTextStyle EditableTextStyle;//[Offset: 0x30, Size: 0x218] 0x715d256080

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4994200
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x30, Size: 0x1a0] 0x715d256000

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4993f80
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x4d0] 0x715d255f80

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4993d00
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x30, Size: 0x228] 0x715d255f00

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4993800
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x2e8] 0x715d255e00

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle // 714906c1c0
	SlateBrush BackgroundBrush;//[Offset: 0x8, Size: 0x88] 0x715d7ab280
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x90, Size: 0x88] 0x715d7ab300
	SlateBrush ActiveFillBrush;//[Offset: 0x118, Size: 0x88] 0x715d7ab380
	SlateBrush InactiveFillBrush;//[Offset: 0x1a0, Size: 0x88] 0x715d7ab400
	SlateBrush ArrowsImage;//[Offset: 0x228, Size: 0x88] 0x715d7ab480
	SlateColor ForegroundColor;//[Offset: 0x2b0, Size: 0x28] 0x715d7ab500
	Margin TextPadding;//[Offset: 0x2d8, Size: 0x10] 0x715d7ab580

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object // 71a4993580
	TextBlockStyle TextBlockStyle;//[Offset: 0x30, Size: 0x268] 0x715d255d80

--------------------------------
Class: ToolMenuBase.Object // 71a4993300

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4993080
	static void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0x4a41a5c 0x715d242380

--------------------------------
Class: GameNetworkManagerSettings.Object // 71a4992400
	int MinDynamicBandwidth;//[Offset: 0x28, Size: 0x4] 0x715d256800
	int MaxDynamicBandwidth;//[Offset: 0x2c, Size: 0x4] 0x715d256880
	int TotalNetBandwidth;//[Offset: 0x30, Size: 0x4] 0x715d256900
	int BadPingThreshold;//[Offset: 0x34, Size: 0x4] 0x715d256980
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x715d256a00
	float StandbyRxCheatTime;//[Offset: 0x3c, Size: 0x4] 0x715d256a80
	float StandbyTxCheatTime;//[Offset: 0x40, Size: 0x4] 0x715d256b00
	float PercentMissingForRxStandby;//[Offset: 0x44, Size: 0x4] 0x715d256b80
	float PercentMissingForTxStandby;//[Offset: 0x48, Size: 0x4] 0x715d256c00
	float PercentForBadPing;//[Offset: 0x4c, Size: 0x4] 0x715d256c80
	float JoinInProgressStandbyWaitTime;//[Offset: 0x50, Size: 0x4] 0x715d256d00

--------------------------------
Class: GameSessionSettings.Object // 71a4992180
	int MaxSpectators;//[Offset: 0x28, Size: 0x4] 0x715d256680
	int MaxPlayers;//[Offset: 0x2c, Size: 0x4] 0x715d256700
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x715d256780

--------------------------------
Class: GeneralEngineSettings.Object // 71a4991f00

--------------------------------
Class: GeneralProjectSettings.Object // 71a4991c80
	FString CompanyName;//[Offset: 0x28, Size: 0x10] 0x715d257c80
	FString CompanyDistinguishedName;//[Offset: 0x38, Size: 0x10] 0x715d257d00
	FString CopyrightNotice;//[Offset: 0x48, Size: 0x10] 0x715d257d80
	FString Description;//[Offset: 0x58, Size: 0x10] 0x715d257e00
	FString Homepage;//[Offset: 0x68, Size: 0x10] 0x715d257e80
	FString LicensingTerms;//[Offset: 0x78, Size: 0x10] 0x715d257f00
	FString PrivacyPolicy;//[Offset: 0x88, Size: 0x10] 0x715d257f80
	Guid ProjectID;//[Offset: 0x98, Size: 0x10] 0x715d258000
	FString ProjectName;//[Offset: 0xa8, Size: 0x10] 0x715d258080
	FString ProjectVersion;//[Offset: 0xb8, Size: 0x10] 0x715d258100
	FString SupportContact;//[Offset: 0xc8, Size: 0x10] 0x715d258180
	FText ProjectDisplayedTitle;//[Offset: 0xd8, Size: 0x18] 0x715d258200
	FText ProjectDebugTitleInfo;//[Offset: 0xf0, Size: 0x18] 0x715d258280
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x715d258300
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1] 0x715d258380
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1] 0x715d258400
	bool bStartInAR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1] 0x715d256380
	bool bSupportAR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x715d256400
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x715d256480
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x715d256500
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 0x1] 0x715d256580
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x715d256600

--------------------------------
Class: HudSettings.Object // 71a4991a00
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715d257b80
	FName[] DebugDisplay;//[Offset: 0x30, Size: 0x10] 0x715d1bbd20

--------------------------------
Class: MeshReconstructorBase.Object // 71a4991780
	void StopReconstruction();// 0x4cc3244 0x715d245480
	void StartReconstruction();// 0x4cc3260 0x715d245560
	void PauseReconstruction();// 0x4cc3228 0x715d245640
	bool IsReconstructionStarted();// 0x4cc31e8 0x715d241d60
	bool IsReconstructionPaused();// 0x4cc31a8 0x715d241e40
	void DisconnectMRMesh();// 0x4cc30e0 0x715d241f20
	void ConnectMRMesh(MRMeshComponent* Mesh);// 0x4cc30fc 0x715d242000

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4991280
	MaterialInterface* Material;//[Offset: 0x420, Size: 0x8] 0x715d257600
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1] 0x715d257680
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 0x1] 0x715d257700
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 0x1] 0x715d257780
	BodySetup* CachedBodySetup;//[Offset: 0x430, Size: 0x8] 0x715d257800
	BodySetup*[] BodySetups;//[Offset: 0x438, Size: 0x10] 0x715d1bbc80
	MaterialInterface* WireframeMaterial;//[Offset: 0x448, Size: 0x8] 0x715d257900
	bool IsConnected();// 0x4cc3c70 0x715d2451e0
	void ForceNavMeshUpdate();// 0x4cc3c5c 0x715d2452c0
	void Clear();// 0x4cc3c40 0x715d2453a0

--------------------------------
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object // 71a4991500
	delegate OnMeshTrackerUpdated;//[Offset: 0x1f0, Size: 0x10] 0x715d8aed00
	bool ScanWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1] 0x715d8aed80
	bool RequestNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1] 0x715d8aee80
	bool RequestVertexConfidence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 0x1] 0x715d8aee00
	enum VertexColorMode;//[Offset: 0x203, Size: 0x1] 0x715d890240
	Color[] BlockVertexColors;//[Offset: 0x208, Size: 0x10] 0x715d8902e0
	LinearColor VertexColorFromConfidenceZero;//[Offset: 0x218, Size: 0x10] 0x715d8af000
	LinearColor VertexColorFromConfidenceOne;//[Offset: 0x228, Size: 0x10] 0x715d8af080
	float UpdateInterval;//[Offset: 0x238, Size: 0x4] 0x715d8af100
	MRMeshComponent* MRMesh;//[Offset: 0x240, Size: 0x8] 0x715d8af180
	void OnMockDataMeshTrackerUpdated__DelegateSignature(int Index, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const float[] Confidence);// 0x45c6aa0 0x715d88d520
	void DisconnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x4cc38ac 0x715d88d600
	void ConnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x4cc3950 0x715d88d6e0

--------------------------------
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4991000
	static void UnpinComponent(SceneComponent* ComponentToUnpin);// 0x4cd34a0 0x715d246b40
	static void StopARSession();// 0x4cd4644 0x715d246c20
	static void StartARSession(ARSessionConfig* SessionConfig);// 0x4cd466c 0x715d246d00
	static void SetAlignmentTransform(out const Transform InAlignmentTransform);// 0x4cd4484 0x715d246de0
	static void RemovePin(ARPin* PinToRemove);// 0x4cd340c 0x715d246ec0
	static ARPin* PinComponentToTraceResult(SceneComponent* ComponentToPin, out const ARTraceResult TraceResult, const FName DebugName);// 0x4cd3534 0x715d246fa0
	static ARPin* PinComponent(SceneComponent* ComponentToPin, out const Transform PinToWorldTransform, ARTrackedGeometry* TrackedGeometry, const FName DebugName);// 0x4cd36bc 0x715d247080
	static void PauseARSession();// 0x4cd4658 0x715d247160
	static ARTraceResult[] LineTraceTrackedObjects3D(const Vector Start, const Vector End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x4cd3de0 0x715d247240
	static ARTraceResult[] LineTraceTrackedObjects(const Vector2D ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x4cd4154 0x715d247320
	static bool IsSessionTypeSupported(enum SessionType);// 0x4cd3bb8 0x715d243a40
	static bool IsSessionTrackingFeatureSupported(enum SessionType, enum SessionTrackingFeature);// 0x4cd2b24 0x715d243b20
	static bool IsARSupported();// 0x4cd4700 0x715d243c00
	static enum GetWorldMappingStatus();// 0x4cd2f80 0x715d243ce0
	static enum GetTrackingQualityReason();// 0x4cd3d78 0x715d243dc0
	static enum GetTrackingQuality();// 0x4cd3dac 0x715d243ea0
	static ARVideoFormat[] GetSupportedVideoFormats(enum SessionType);// 0x4cd2de0 0x715d243f80
	static ARSessionConfig* GetSessionConfig();// 0x4cd4550 0x715d244060
	static Vector[] GetPointCloud();// 0x4cd2ed0 0x715d244140
	static ARTextureCameraImage* GetPersonSegmentationImage();// 0x4cd28ac 0x715d244220
	static ARTextureCameraImage* GetPersonSegmentationDepthImage();// 0x4cd2878 0x715d244300
	static ARLightEstimate* GetCurrentLightEstimate();// 0x4cd3854 0x715d2443e0
	static ARTextureCameraImage* GetCameraImage();// 0x4cd3c94 0x715d2444c0
	static ARTextureCameraDepth* GetCameraDepth();// 0x4cd3c60 0x715d2445a0
	static ARSessionStatus GetARSessionStatus();// 0x4cd4584 0x715d244680
	static ARTrackedPose*[] GetAllTrackedPoses();// 0x4cd28e0 0x715d244760
	static ARTrackedPoint*[] GetAllTrackedPoints();// 0x4cd31fc 0x715d244840
	static ARPlaneGeometry*[] GetAllTrackedPlanes();// 0x4cd32ac 0x715d244920
	static ARTrackedImage*[] GetAllTrackedImages();// 0x4cd314c 0x715d244a00
	static AREnvironmentCaptureProbe*[] GetAllTrackedEnvironmentCaptureProbes();// 0x4cd309c 0x715d244ae0
	static ARPose2D[] GetAllTracked2DPoses();// 0x4cd2990 0x715d244bc0
	static ARPin*[] GetAllPins();// 0x4cd335c 0x715d244ca0
	static ARTrackedGeometry*[] GetAllGeometries();// 0x4cd3cc8 0x715d244d80
	static void DebugDrawTrackedGeometry(ARTrackedGeometry* TrackedGeometry, Object* WorldContextObject, LinearColor Color, float OutlineThickness, float PersistForSeconds);// 0x4cd3a20 0x715d244e60
	static void DebugDrawPin(ARPin* ARPin, Object* WorldContextObject, LinearColor Color, float Scale, float PersistForSeconds);// 0x4cd3888 0x715d244f40
	static ARCandidateImage* AddRuntimeCandidateImage(ARSessionConfig* SessionConfig, Texture2D* CandidateTexture, FString FriendlyName, float PhysicalWidth);// 0x4cd2c10 0x715d245020
	static bool AddManualEnvironmentCaptureProbe(Vector Location, Vector Extent);// 0x4cd2fb4 0x715d245100

--------------------------------
Class: ARSessionConfig.DataAsset.Object // 71a4999e80
	bool bGenerateMeshDataFromTrackedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715d25e380
	bool bGenerateCollisionForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x715d25e400
	bool bGenerateNavMeshForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x715d25e480
	bool bUseMeshDataForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x715d25e500
	bool bRenderMeshDataInWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x715d25e580
	bool bTrackSceneObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x715d25e600
	bool bUsePersonSegmentationForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x715d25e680
	enum WorldAlignment;//[Offset: 0x37, Size: 0x1] 0x715d1bee80
	enum SessionType;//[Offset: 0x38, Size: 0x1] 0x715d1bef20
	enum PlaneDetectionMode;//[Offset: 0x39, Size: 0x1] 0x715d1befc0
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x715d25c780
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1] 0x715d25c800
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715d25c880
	enum LightEstimationMode;//[Offset: 0x3d, Size: 0x1] 0x715d1bf060
	enum FrameSyncMode;//[Offset: 0x3e, Size: 0x1] 0x715d1bf100
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1] 0x715d25ca00
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x715d25ca80
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x715d25cb00
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x715d25cb80
	ARCandidateImage*[] CandidateImages;//[Offset: 0x48, Size: 0x10] 0x715d1bf1a0
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x58, Size: 0x4] 0x715d25cc80
	enum EnvironmentCaptureProbeType;//[Offset: 0x5c, Size: 0x1] 0x715d1bf240
	byte[] WorldMapData;//[Offset: 0x60, Size: 0x10] 0x715d1bf2e0
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x70, Size: 0x10] 0x715d1bf380
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x80, Size: 0xc] 0x715d25ce80
	enum FaceTrackingDirection;//[Offset: 0x8c, Size: 0x1] 0x715d1bf420
	enum FaceTrackingUpdate;//[Offset: 0x8d, Size: 0x1] 0x715d1bf4c0
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x90, Size: 0x10] 0x715d1bf560
	enum EnabledSessionTrackingFeature;//[Offset: 0xa0, Size: 0x1] 0x715d1bf600
	bool ShouldResetTrackedObjects();// 0x4cd8654 0x715d247be0
	bool ShouldResetCameraTracking();// 0x4cd8738 0x715d247cc0
	bool ShouldRenderCameraOverlay();// 0x4cd888c 0x715d247da0
	bool ShouldEnableCameraTracking();// 0x4cd8854 0x715d247e80
	bool ShouldEnableAutoFocus();// 0x4cd881c 0x715d247f60
	void SetWorldMapData(byte[] WorldMapData);// 0x4cd829c 0x715d248040
	void SetSessionTrackingFeatureToEnable(enum InSessionTrackingFeature);// 0x4cd7d48 0x715d248120
	void SetResetTrackedObjects(bool bNewValue);// 0x4cd85a8 0x715d248200
	void SetResetCameraTracking(bool bNewValue);// 0x4cd868c 0x715d2482e0
	void SetFaceTrackingUpdate(enum InUpdate);// 0x4cd7e20 0x715d2483c0
	void SetFaceTrackingDirection(enum InDirection);// 0x4cd7ef8 0x715d2484a0
	void SetEnableAutoFocus(bool bNewValue);// 0x4cd8770 0x715d248580
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0x4cd7fd0 0x715d248660
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0x4cd8158 0x715d248740
	byte[] GetWorldMapData();// 0x4cd8394 0x715d248820
	enum GetWorldAlignment();// 0x4cd8994 0x715d248900
	enum GetSessionType();// 0x4cd8960 0x715d2489e0
	enum GetPlaneDetectionMode();// 0x4cd892c 0x715d248ac0
	int GetMaxNumSimultaneousImagesTracked();// 0x4cd844c 0x715d248ba0
	enum GetLightEstimationMode();// 0x4cd88f8 0x715d248c80
	enum GetFrameSyncMode();// 0x4cd88c4 0x715d248d60
	enum GetFaceTrackingUpdate();// 0x4cd7ec4 0x715d248e40
	enum GetFaceTrackingDirection();// 0x4cd7f9c 0x715d248f20
	enum GetEnvironmentCaptureProbeType();// 0x4cd8418 0x715d249000
	enum GetEnabledSessionTrackingFeature();// 0x4cd7dec 0x715d245720
	ARVideoFormat GetDesiredVideoFormat();// 0x4cd807c 0x715d245800
	ARCandidateObject*[] GetCandidateObjectList();// 0x4cd8218 0x715d2458e0
	ARCandidateImage*[] GetCandidateImageList();// 0x4cd8524 0x715d2459c0
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0x4cd80b4 0x715d245aa0
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0x4cd8480 0x715d245b80

--------------------------------
Class: ARVideoFormat // 715da9b440
	int FPS;//[Offset: 0x0, Size: 0x4] 0x715dabd400
	int Width;//[Offset: 0x4, Size: 0x4] 0x715dabd480
	int Height;//[Offset: 0x8, Size: 0x4] 0x715dabd500

--------------------------------
Class: ARCandidateObject.DataAsset.Object // 71a4995b00
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10] 0x715d1bf920
	FString FriendlyName;//[Offset: 0x40, Size: 0x10] 0x715ca62d80
	Box BoundingBox;//[Offset: 0x50, Size: 0x1c] 0x715ca62e00
	void SetFriendlyName(FString NewName);// 0x4ce0c14 0x715d24c560
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0x4ce0d98 0x715d24c640
	void SetBoundingBox(out const Box InBoundingBox);// 0x4ce0b38 0x715d24c720
	FString GetFriendlyName();// 0x4ce0d14 0x715d24c800
	byte[] GetCandidateObjectData();// 0x4ce0ea8 0x715d24c8e0
	Box GetBoundingBox();// 0x4ce0bf0 0x715d24c9c0

--------------------------------
Class: ARCandidateImage.DataAsset.Object // 71a4995d80
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8] 0x715ca63180
	FString FriendlyName;//[Offset: 0x38, Size: 0x10] 0x715ca61100
	float Width;//[Offset: 0x48, Size: 0x4] 0x715ca61180
	float Height;//[Offset: 0x4c, Size: 0x4] 0x715ca61200
	enum Orientation;//[Offset: 0x50, Size: 0x1] 0x715d1bfb00
	float GetPhysicalWidth();// 0x4ce0644 0x715d2490e0
	float GetPhysicalHeight();// 0x4ce0628 0x715d2491c0
	enum GetOrientation();// 0x4ce060c 0x715d2492a0
	FString GetFriendlyName();// 0x4ce0660 0x715d249380
	Texture2D* GetCandidateTexture();// 0x4ce06e4 0x715d249460

--------------------------------
Class: ARPin.Object // 71a499a100
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x28, Size: 0x8] 0x715d25c000
	SceneComponent* PinnedComponent;//[Offset: 0x30, Size: 0x8] 0x715d25c080
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30] 0x715d25c100
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30] 0x715d25c180
	enum TrackingState;//[Offset: 0xa0, Size: 0x1] 0x715d1bd800
	delegate OnARTrackingStateChanged;//[Offset: 0xc0, Size: 0x10] 0x715d25c280
	delegate OnARTransformUpdated;//[Offset: 0xd0, Size: 0x10] 0x715d25c300
	enum GetTrackingState();// 0x4cd7394 0x715d245c60
	ARTrackedGeometry* GetTrackedGeometry();// 0x4cd7360 0x715d245d40
	SceneComponent* GetPinnedComponent();// 0x4cd732c 0x715d245e20
	Transform GetLocalToWorldTransform();// 0x4cd73c8 0x715d245f00
	Transform GetLocalToTrackingTransform();// 0x4cd7434 0x715d245fe0
	FName GetDebugName();// 0x4cd717c 0x715d2460c0
	void DebugDraw(World* World, out const LinearColor Color, float Scale, float PersistForSeconds);// 0x4cd71b0 0x715d2461a0

--------------------------------
Class: ARTrackedGeometry.Object // 71a4997900
	Guid UniqueId;//[Offset: 0x28, Size: 0x10] 0x715ca60f80
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30] 0x715ca61000
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30] 0x715ca61080
	enum TrackingState;//[Offset: 0xa0, Size: 0x1] 0x715d1be480
	MRMeshComponent* UnderlyingMesh;//[Offset: 0xb0, Size: 0x8] 0x715d25f880
	enum ObjectClassification;//[Offset: 0xb8, Size: 0x1] 0x715d1be520
	int LastUpdateFrameNumber;//[Offset: 0xd0, Size: 0x4] 0x715d25f980
	FName DebugName;//[Offset: 0xe0, Size: 0x8] 0x715d25fa00
	bool IsTracked();// 0x4cdcd00 0x715d24a260
	MRMeshComponent* GetUnderlyingMesh();// 0x4cdcc30 0x715d24a340
	enum GetTrackingState();// 0x4cdcd38 0x715d24a420
	enum GetObjectClassification();// 0x4cdcc14 0x715d24a500
	Transform GetLocalToWorldTransform();// 0x4cdcdd8 0x715d24a5e0
	Transform GetLocalToTrackingTransform();// 0x4cdcd6c 0x715d24a6c0
	float GetLastUpdateTimestamp();// 0x4cdcc64 0x715d24a7a0
	int GetLastUpdateFrameNumber();// 0x4cdcc98 0x715d24a880
	FName GetDebugName();// 0x4cdcccc 0x715d24a960

--------------------------------
Class: ARTraceResult // 715da9b740
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4] 0x715dabb980
	enum TraceChannel;//[Offset: 0x4, Size: 0x1] 0x715d89d940
	Transform LocalToTrackingTransform;//[Offset: 0x10, Size: 0x30] 0x715dabba80
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x40, Size: 0x8] 0x715dabbb00

--------------------------------
Class: ARTextureCameraImage.ARTexture.Texture.StreamableRenderAsset.Object // 71a4998580

--------------------------------
Class: ARTexture.Texture.StreamableRenderAsset.Object // 71a4998d00
	enum TextureType;//[Offset: 0xb8, Size: 0x1] 0x715d1be8e0
	float Timestamp;//[Offset: 0xbc, Size: 0x4] 0x715d25ea80
	Guid ExternalTextureGuid;//[Offset: 0xc0, Size: 0x10] 0x715d25eb00
	Vector2D Size;//[Offset: 0xd0, Size: 0x8] 0x715d25eb80

--------------------------------
Class: ARLightEstimate.Object // 71a4990380

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object // 71a4998300
	enum DepthQuality;//[Offset: 0xd8, Size: 0x1] 0x715d1be7a0
	enum DepthAccuracy;//[Offset: 0xd9, Size: 0x1] 0x715d1be840
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x715d25e980

--------------------------------
Class: ARSessionStatus // 715da9b380
	FString AdditionalInfo;//[Offset: 0x0, Size: 0x10] 0x715dabd300
	enum Status;//[Offset: 0x10, Size: 0x1] 0x715d89d440

--------------------------------
Class: ARTrackedPose.ARTrackedGeometry.Object // 71a4996500
	ARPose3D GetTrackedPoseData();// 0x4cdf384 0x715d249540

--------------------------------
Class: ARPose3D // 715da9b680
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x715dabb780
	Transform[] JointTransforms;//[Offset: 0x28, Size: 0x10] 0x715d89d760
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x715d89d800
	enum JointTransformSpace;//[Offset: 0x48, Size: 0x1] 0x715d89d8a0

--------------------------------
Class: ARSkeletonDefinition // 715da9b5c0
	int NumJoints;//[Offset: 0x0, Size: 0x4] 0x715dabb600
	FName[] JointNames;//[Offset: 0x8, Size: 0x10] 0x715d89d620
	int[] ParentIndices;//[Offset: 0x18, Size: 0x10] 0x715d89d6c0

--------------------------------
Class: ARTrackedPoint.ARTrackedGeometry.Object // 71a4997400

--------------------------------
Class: ARPlaneGeometry.ARTrackedGeometry.Object // 71a4997680
	enum Orientation;//[Offset: 0xe8, Size: 0x1] 0x715d1bff60
	Vector Center;//[Offset: 0xec, Size: 0xc] 0x715ca60b80
	Vector Extent;//[Offset: 0xf8, Size: 0xc] 0x715ca60c00
	ARPlaneGeometry* SubsumedBy;//[Offset: 0x118, Size: 0x8] 0x715ca60c80
	ARPlaneGeometry* GetSubsumedBy();// 0x4cdd370 0x715d249e00
	enum GetOrientation();// 0x4cdd354 0x715d249ee0
	Vector GetExtent();// 0x4cdd47c 0x715d249fc0
	Vector GetCenter();// 0x4cdd4a0 0x715d24a0a0
	Vector[] GetBoundaryPolygonInLocalSpace();// 0x4cdd38c 0x715d24a180

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object // 71a4997180
	ARCandidateImage* DetectedImage;//[Offset: 0xe8, Size: 0x8] 0x715ca60900
	Vector2D EstimatedSize;//[Offset: 0xf0, Size: 0x8] 0x715ca60980
	Vector2D GetEstimateSize();// 0x4cddcc8 0x715d249c40
	ARCandidateImage* GetDetectedImage();// 0x4cddcfc 0x715d249d20

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object // 71a4996a00
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0xf8, Size: 0x8] 0x715ca60080
	Vector GetExtent();// 0x4cdeb90 0x715d249700
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0x4cdeb5c 0x715d2497e0

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object // 71a4998080
	enum TextureType;//[Offset: 0x110, Size: 0x1] 0x715d1be700
	float Timestamp;//[Offset: 0x114, Size: 0x4] 0x715d25ff80
	Guid ExternalTextureGuid;//[Offset: 0x118, Size: 0x10] 0x715d25e780
	Vector2D Size;//[Offset: 0x128, Size: 0x8] 0x715d25e800

--------------------------------
Class: ARPose2D // 715da9b500
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x715dabd580
	Vector2D[] JointLocations;//[Offset: 0x28, Size: 0x10] 0x715d89d4e0
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x715d89d580

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object // 71a4990d80
	static ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0x4cd588c 0x715d2466e0
	static enum GetTraceChannel(out const ARTraceResult TraceResult);// 0x4cd577c 0x715d2467c0
	static Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0x4cd599c 0x715d2468a0
	static Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0x4cd5abc 0x715d246980
	static float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0x4cd5bdc 0x715d246a60

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object // 71a4990b00

--------------------------------
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object // 71a4990880
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x715d25ad80
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x715d25ae00
	static ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject);// 0x4cd6220 0x715d246600

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object // 71a4990600
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x715d25aa80
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x715d25ab00
	static ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0x4cd669c 0x715d246520

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object // 71a4990100
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4] 0x715d25a780
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4] 0x715d25a800
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10] 0x715d25a880
	float GetAmbientIntensityLumens();// 0x4cd6d44 0x715d246280
	float GetAmbientColorTemperatureKelvin();// 0x4cd6d10 0x715d246360
	LinearColor GetAmbientColor();// 0x4cd6cd8 0x715d246440

--------------------------------
Class: AROriginActor.Actor.Object // 71a499a380

--------------------------------
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object // 71a4999c00
	int BufferSizePerChunk;//[Offset: 0x304, Size: 0x4] 0x715d25e180
	void SetPreviewImageData(byte[] ImageData);// 0x4cda9c0 0x715d247860
	void SetARWorldSharingIsReady();// 0x4cda8b4 0x715d247940
	void SetARSharedWorldData(byte[] ARWorldData);// 0x4cda8c8 0x715d247a20
	ARSharedWorldGameState* GetARSharedWorldGameState();// 0x4cda880 0x715d247b00

--------------------------------
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object // 71a4999980
	byte[] PreviewImageData;//[Offset: 0x288, Size: 0x10] 0x715d1bec00
	byte[] ARWorldData;//[Offset: 0x298, Size: 0x10] 0x715d1beca0
	int PreviewImageBytesTotal;//[Offset: 0x2a8, Size: 0x4] 0x715d25de00
	int ARWorldBytesTotal;//[Offset: 0x2ac, Size: 0x4] 0x715d25de80
	int PreviewImageBytesDelivered;//[Offset: 0x2b0, Size: 0x4] 0x715d25df00
	int ARWorldBytesDelivered;//[Offset: 0x2b4, Size: 0x4] 0x715d25df80
	void K2_OnARWorldMapIsReady();// 0x45c6aa0 0x715d2475c0

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object // 71a4999480
	void ServerMarkReadyForReceiving();// 0x4cdb478 0x715d24ac00
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0x4cdb224 0x715d24ace0
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0x4cdb0f4 0x715d247400
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0x4cdb354 0x715d2474e0

--------------------------------
Class: ARSkyLight.SkyLight.Info.Actor.Object // 71a4999200
	AREnvironmentCaptureProbe* CaptureProbe;//[Offset: 0x230, Size: 0x8] 0x715d25d800
	void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe);// 0x4cdbae4 0x715d24aa40

--------------------------------
Class: ARTraceResultDummy.Object // 71a4997b80

--------------------------------
Class: ARTrackedQRCode.ARTrackedImage.ARTrackedGeometry.Object // 71a4996f00
	FString QRCode;//[Offset: 0xf8, Size: 0x10] 0x715ca60800
	int Version;//[Offset: 0x108, Size: 0x4] 0x715ca60880

--------------------------------
Class: ARFaceGeometry.ARTrackedGeometry.Object // 71a4996c80
	Vector LookAtTarget;//[Offset: 0xe8, Size: 0xc] 0x715ca60200
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1] 0x715ca60280
	<enum,float> BlendShapes;//[Offset: 0xf8, Size: 0x50] 0x715cecf340
	Transform GetWorldSpaceEyeTransform(enum Eye);// 0x4cde328 0x715d2498c0
	Transform GetLocalSpaceEyeTransform(enum Eye);// 0x4cde3e4 0x715d2499a0
	float GetBlendShapeValue(enum BlendShape);// 0x4cde56c 0x715d249a80
	<enum,float> GetBlendShapes();// 0x4cde49c 0x715d249b60

--------------------------------
Class: ARTrackedObject.ARTrackedGeometry.Object // 71a4996780
	ARCandidateObject* DetectedObject;//[Offset: 0xe8, Size: 0x8] 0x715ca62080
	ARCandidateObject* GetDetectedObject();// 0x4cdeeec 0x715d249620

--------------------------------
Class: ARTrackableNotifyComponent.ActorComponent.Object // 71a4996280
	delegate OnAddTrackedGeometry;//[Offset: 0xb0, Size: 0x10] 0x715ca61580
	delegate OnUpdateTrackedGeometry;//[Offset: 0xc0, Size: 0x10] 0x715ca61600
	delegate OnRemoveTrackedGeometry;//[Offset: 0xd0, Size: 0x10] 0x715ca61680
	delegate OnAddTrackedPlane;//[Offset: 0xe0, Size: 0x10] 0x715ca61700
	delegate OnUpdateTrackedPlane;//[Offset: 0xf0, Size: 0x10] 0x715ca61780
	delegate OnRemoveTrackedPlane;//[Offset: 0x100, Size: 0x10] 0x715ca61800
	delegate OnAddTrackedPoint;//[Offset: 0x110, Size: 0x10] 0x715ca61880
	delegate OnUpdateTrackedPoint;//[Offset: 0x120, Size: 0x10] 0x715ca61900
	delegate OnRemoveTrackedPoint;//[Offset: 0x130, Size: 0x10] 0x715ca61980
	delegate OnAddTrackedImage;//[Offset: 0x140, Size: 0x10] 0x715ca61a00
	delegate OnUpdateTrackedImage;//[Offset: 0x150, Size: 0x10] 0x715ca61a80
	delegate OnRemoveTrackedImage;//[Offset: 0x160, Size: 0x10] 0x715ca61b00
	delegate OnAddTrackedFace;//[Offset: 0x170, Size: 0x10] 0x715ca61b80
	delegate OnUpdateTrackedFace;//[Offset: 0x180, Size: 0x10] 0x715ca61c00
	delegate OnRemoveTrackedFace;//[Offset: 0x190, Size: 0x10] 0x715ca61c80
	delegate OnAddTrackedEnvProbe;//[Offset: 0x1a0, Size: 0x10] 0x715ca61d00
	delegate OnUpdateTrackedEnvProbe;//[Offset: 0x1b0, Size: 0x10] 0x715ca61d80
	delegate OnRemoveTrackedEnvProbe;//[Offset: 0x1c0, Size: 0x10] 0x715ca61e00
	delegate OnAddTrackedObject;//[Offset: 0x1d0, Size: 0x10] 0x715ca61e80
	delegate OnUpdateTrackedObject;//[Offset: 0x1e0, Size: 0x10] 0x715ca61f00
	delegate OnRemoveTrackedObject;//[Offset: 0x1f0, Size: 0x10] 0x715ca61f80

--------------------------------
Class: ARTypesDummyClass.Object // 71a4996000

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4995880
	static void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0x4cfbdac 0x715d24e320
	static void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0x4cfc164 0x715d24e400
	static void SetTrackingOrigin(byte Origin);// 0x4cfc02c 0x715d24e4e0
	static void SetSpectatorScreenTexture(Texture* InTexture);// 0x4cfbb50 0x715d24e5c0
	static void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0x4cfb918 0x715d24e6a0
	static void SetSpectatorScreenMode(enum Mode);// 0x4cfbbe4 0x715d24adc0
	static void SetClippingPlanes(float Near, float Far);// 0x4cfc2a4 0x715d24aea0
	static void ResetOrientationAndPosition(float Yaw, byte Options);// 0x4cfc378 0x715d24af80
	static bool IsSpectatorScreenModeControllable();// 0x4cfbc78 0x715d24b060
	static bool IsInLowPersistenceMode();// 0x4cfc4dc 0x715d24b140
	static bool IsHeadMountedDisplayEnabled();// 0x4cfce08 0x715d24b220
	static bool IsHeadMountedDisplayConnected();// 0x4cfcdd0 0x715d24b300
	static bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0x4cfb30c 0x715d24b3e0
	static bool HasValidTrackingPosition();// 0x4cfcb8c 0x715d24b4c0
	static float GetWorldToMetersScale(Object* WorldContext);// 0x4cfc0c0 0x715d24b5a0
	static void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0x4cfbcb0 0x715d24b680
	static Transform GetTrackingToWorldTransform(Object* WorldContext);// 0x4cfbf44 0x715d24b760
	static void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int Index);// 0x4cfc788 0x715d24b840
	static byte GetTrackingOrigin();// 0x4cfbff8 0x715d24b920
	static float GetScreenPercentage();// 0x4cfc270 0x715d24ba00
	static void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0x4cfc4f4 0x715d24bae0
	static float GetPixelDensity();// 0x4cfc23c 0x715d24bbc0
	static void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0x4cfcbc4 0x715d24bca0
	static int GetNumOfTrackingSensors();// 0x4cfcb58 0x715d24bd80
	static byte GetHMDWornState();// 0x4cfccb8 0x715d24be60
	static FName GetHMDDeviceName();// 0x4cfccec 0x715d24bf40
	static void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x4cfb3c8 0x715d24c020
	static void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x4cfb5f4 0x715d24c100
	static XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0x4cfb7e4 0x715d24c1e0
	static void EnableLowPersistenceMode(bool bEnable);// 0x4cfc450 0x715d24c2c0
	static bool EnableHMD(bool bEnable);// 0x4cfcd20 0x715d24c3a0
	static void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0x4cfbe78 0x715d24c480

--------------------------------
Class: XRDeviceId // 715da9b2c0
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x715dabd200
	int DeviceID;//[Offset: 0x8, Size: 0x4] 0x715dabd280

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4995600
	int PlayerIndex;//[Offset: 0x418, Size: 0x4] 0x715ca65e00
	enum Hand;//[Offset: 0x41c, Size: 0x1] 0x715ca71140
	FName MotionSource;//[Offset: 0x420, Size: 0x8] 0x715ca65f00
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x428, Size: 0x1] 0x715ca65f80
	enum CurrentTrackingStatus;//[Offset: 0x429, Size: 0x1] 0x715ca711e0
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 0x1] 0x715ca66080
	FName DisplayModelSource;//[Offset: 0x42c, Size: 0x8] 0x715ca66100
	StaticMesh* CustomDisplayMesh;//[Offset: 0x438, Size: 0x8] 0x715ca66180
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x440, Size: 0x10] 0x715ca71280
	PrimitiveComponent* DisplayComponent;//[Offset: 0x4b0, Size: 0x8] 0x715ca66280
	void SetTrackingSource(const enum NewSource);// 0x4cfe440 0x715d24d980
	void SetTrackingMotionSource(const FName NewSource);// 0x4cfe368 0x715d24da60
	void SetShowDeviceModel(const bool bShowControllerModel);// 0x4cfe62c 0x715d24db40
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0x4cfe588 0x715d24dc20
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0x4cfe4e4 0x715d24dd00
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0x4cfe2c4 0x715d24dde0
	void OnMotionControllerUpdated();// 0x45c6aa0 0x715d24dec0
	bool IsTracked();// 0x4cfe6d8 0x715d24dfa0
	enum GetTrackingSource();// 0x4cfe40c 0x715d24e080
	float GetParameterValue(FName InName, out bool bValueFound);// 0x4cfe1c0 0x715d24e160
	Vector GetHandJointPosition(int jointIndex, out bool bValueFound);// 0x4cfe0b8 0x715d24e240

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4995380
	static void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);// 0x4cff78c 0x715d24ff20
	static bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0x4cff54c 0x715d24caa0
	static bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0x4cff638 0x715d24cb80
	static bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x4cff4a4 0x715d24cc60
	static bool IsMotionTrackedDeviceCountManagementNecessary();// 0x4cff828 0x715d24cd40
	static bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0x4cfed68 0x715d24ce20
	static int GetMotionTrackingEnabledControllerCount();// 0x4cff724 0x715d24cf00
	static int GetMaximumMotionTrackedControllerCount();// 0x4cff758 0x715d24cfe0
	static FName GetActiveTrackingSystemName();// 0x4cfee54 0x715d24d0c0
	static FName[] EnumerateMotionSources();// 0x4cfee88 0x715d24d1a0
	static bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x4cff2cc 0x715d24d280
	static bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x4cff3b8 0x715d24d360
	static bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0x4cff224 0x715d24d440
	static void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x4cff074 0x715d24d520
	static void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x4cff14c 0x715d24d600
	static void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0x4cfef38 0x715d24d6e0
	static void DisableMotionTrackingOfAllControllers();// 0x4cfefcc 0x715d24d7c0
	static void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x4cfefe0 0x715d24d8a0

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object // 71a499f600
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xb0, Size: 0x10] 0x715d8afc00
	delegate HMDTrackingInitializedDelegate;//[Offset: 0xc0, Size: 0x10] 0x715d8afc80
	delegate HMDRecenteredDelegate;//[Offset: 0xd0, Size: 0x10] 0x715d8afd00
	delegate HMDLostDelegate;//[Offset: 0xe0, Size: 0x10] 0x715d8afd80
	delegate HMDReconnectedDelegate;//[Offset: 0xf0, Size: 0x10] 0x715d8afe00
	delegate HMDConnectCanceledDelegate;//[Offset: 0x100, Size: 0x10] 0x715d8aff00
	delegate HMDPutOnHeadDelegate;//[Offset: 0x110, Size: 0x10] 0x715d8aff80
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x120, Size: 0x10] 0x715d8afe80
	delegate VRControllerRecenteredDelegate;//[Offset: 0x130, Size: 0x10] 0x717df85b00

--------------------------------
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object // 71a499f380
	static PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId);// 0x4d0011c 0x715d24fd60
	static PrimitiveComponent* AddDeviceVisualizationComponentBlocking(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform);// 0x4d00360 0x715d24fe40

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object // 71a499f100
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10] 0x715ca68100
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10] 0x715ca68180
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8] 0x715ca68200
	static AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0x4d009a4 0x715d24fba0
	static AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0x4d0079c 0x715d24fc80

--------------------------------
Class: XRLoadingScreenFunctionLibrary.BlueprintFunctionLibrary.Object // 71a499ee80
	static void ShowLoadingScreen();// 0x4d01048 0x715d24f740
	static void SetLoadingScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x4d01254 0x715d24f820
	static void HideLoadingScreen();// 0x4d01034 0x715d24f900
	static void ClearLoadingScreenSplashes();// 0x4d01240 0x715d24f9e0
	static void AddLoadingScreenSplash(Texture* Texture, Vector Translation, Rotator Rotation, Vector2D Size, Rotator DeltaRotation, bool bClearBeforeAdd);// 0x4d0105c 0x715d24fac0

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a499ec00
	delegate OnInstanceTakePointDamage;//[Offset: 0x640, Size: 0x10] 0x715ca69b80
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x650, Size: 0x10] 0x715ca69c00
	Guid GenerationGuid;//[Offset: 0x660, Size: 0x10] 0x715ca69c80

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object // 71a499e480
	static int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x52a839c 0x715d24e940
	static int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0x52a826c 0x715d24ea20

--------------------------------
Class: FoliageType.Object // 71a499e200
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10] 0x715ca6cf00
	float Density;//[Offset: 0x38, Size: 0x4] 0x715ca6cf80
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4] 0x715ca6d000
	float Radius;//[Offset: 0x40, Size: 0x4] 0x715ca6d080
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x715ca6d100
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 0x4] 0x715ca6d180
	enum Scaling;//[Offset: 0x4c, Size: 0x1] 0x715ca704c0
	FloatInterval ScaleX;//[Offset: 0x50, Size: 0x8] 0x715ca6d280
	FloatInterval ScaleY;//[Offset: 0x58, Size: 0x8] 0x715ca6d300
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 0x8] 0x715ca6d380
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 0xc] 0x715ca6d400
	byte VertexColorMask;//[Offset: 0x98, Size: 0x1] 0x715ca6d480
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 0x4] 0x715ca6d500
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x715ca6d580
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 0x8] 0x715ca6d600
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x715ca6d680
	float AlignMaxAngle;//[Offset: 0xb0, Size: 0x4] 0x715ca6b600
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x715ca6b680
	float RandomPitchAngle;//[Offset: 0xb8, Size: 0x4] 0x715ca6b700
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 0x8] 0x715ca6b780
	FloatInterval Height;//[Offset: 0xc4, Size: 0x8] 0x715ca6b800
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 0x10] 0x715ca70560
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4] 0x715ca6b900
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 0x10] 0x715ca70600
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 0x4] 0x715ca6ba00
	FName LandscapeLayer;//[Offset: 0xfc, Size: 0x8] 0x715ca6ba80
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x715ca6bb00
	Vector CollisionScale;//[Offset: 0x108, Size: 0xc] 0x715ca6bb80
	BoxSphereBounds MeshBounds;//[Offset: 0x114, Size: 0x1c] 0x715ca6bc00
	Vector LowBoundOriginRadius;//[Offset: 0x130, Size: 0xc] 0x715ca6bc80
	byte Mobility;//[Offset: 0x13c, Size: 0x1] 0x715ca6bd00
	Int32Interval CullDistance;//[Offset: 0x140, Size: 0x8] 0x715ca6bd80
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x715ca6be00
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1] 0x715ca6be80
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x148, Size: 0x1] 0x715ca6bf00
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x148, Size: 0x1] 0x715ca6bf80
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x148, Size: 0x1] 0x715ca6c000
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x148, Size: 0x1] 0x715ca6c080
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x148, Size: 0x1] 0x715ca6c100
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x148, Size: 0x1] 0x715ca6c180
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 0x1] 0x715ca6c200
	int OverriddenLightMapRes;//[Offset: 0x14c, Size: 0x4] 0x715ca6c280
	enum LightmapType;//[Offset: 0x150, Size: 0x1] 0x715ca706a0
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1] 0x715ca6c380
	BodyInstance BodyInstance;//[Offset: 0x158, Size: 0x130] 0x715ca6c400
	byte CustomNavigableGeometry;//[Offset: 0x288, Size: 0x1] 0x715ca6c480
	LightingChannels LightingChannels;//[Offset: 0x289, Size: 0x1] 0x715ca6c500
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28a, Size: 0x1] 0x715ca6c580
	int CustomDepthStencilValue;//[Offset: 0x28c, Size: 0x4] 0x715ca6c600
	int TranslucencySortPriority;//[Offset: 0x290, Size: 0x4] 0x715ca6a580
	float CollisionRadius;//[Offset: 0x294, Size: 0x4] 0x715ca6a600
	float ShadeRadius;//[Offset: 0x298, Size: 0x4] 0x715ca6a680
	int NumSteps;//[Offset: 0x29c, Size: 0x4] 0x715ca6a700
	float InitialSeedDensity;//[Offset: 0x2a0, Size: 0x4] 0x715ca6a780
	float AverageSpreadDistance;//[Offset: 0x2a4, Size: 0x4] 0x715ca6a800
	float SpreadVariance;//[Offset: 0x2a8, Size: 0x4] 0x715ca6a880
	int SeedsPerStep;//[Offset: 0x2ac, Size: 0x4] 0x715ca6a900
	int DistributionSeed;//[Offset: 0x2b0, Size: 0x4] 0x715ca6a980
	float MaxInitialSeedOffset;//[Offset: 0x2b4, Size: 0x4] 0x715ca6aa00
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1] 0x715ca6aa80
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1] 0x715ca6ab00
	float MaxInitialAge;//[Offset: 0x2bc, Size: 0x4] 0x715ca6ab80
	float MaxAge;//[Offset: 0x2c0, Size: 0x4] 0x715ca6ac00
	float OverlapPriority;//[Offset: 0x2c4, Size: 0x4] 0x715ca6ac80
	FloatInterval ProceduralScale;//[Offset: 0x2c8, Size: 0x8] 0x715ca6ad00
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x2d0, Size: 0x88] 0x715ca6ad80
	int ChangeCount;//[Offset: 0x358, Size: 0x4] 0x715ca6ae00
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35c, Size: 0x1] 0x715ca6ae80
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35c, Size: 0x1] 0x715ca6af00
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35c, Size: 0x1] 0x715ca6af80
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x35c, Size: 0x1] 0x715ca6b000
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x35c, Size: 0x1] 0x715ca6b080
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x35c, Size: 0x1] 0x715ca6b100
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x35c, Size: 0x1] 0x715ca6b180
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x35c, Size: 0x1] 0x715ca6b200
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35d, Size: 0x1] 0x715ca6b280
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35d, Size: 0x1] 0x715ca6b300
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35d, Size: 0x1] 0x715ca6b380
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x35d, Size: 0x1] 0x715ca6b400
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x35d, Size: 0x1] 0x715ca6b480
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x35d, Size: 0x1] 0x715ca6b500
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x35d, Size: 0x1] 0x715ca6b580
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x35d, Size: 0x1] 0x715ca69500
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x360, Size: 0x10] 0x715ca70740
	int VirtualTextureCullMips;//[Offset: 0x370, Size: 0x4] 0x715ca69600
	enum VirtualTextureRenderPassType;//[Offset: 0x374, Size: 0x1] 0x715ca707e0

--------------------------------
Class: FoliageVertexColorChannelMask // 715da9b140
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715dabe380
	float MaskThreshold;//[Offset: 0x4, Size: 0x4] 0x715dabe400
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715dabe480

--------------------------------
Class: FoliageType_Actor.FoliageType.Object // 71a499df80
	class Actor* ActorClass;//[Offset: 0x378, Size: 0x8] 0x715ca70420
	bool bShouldAttachToBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1] 0x715ca6ce80

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object // 71a499dd00
	StaticMesh* Mesh;//[Offset: 0x378, Size: 0x8] 0x715ca6cd80
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x380, Size: 0x10] 0x715ca702e0
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x390, Size: 0x8] 0x715ca70380

--------------------------------
Class: InstancedFoliageActor.Actor.Object // 71a499da80

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object // 71a499d800
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8] 0x715ca6e480
	Vector TouchingActorEntryPosition;//[Offset: 0x238, Size: 0xc] 0x715ca6e500
	Vector FoliageVelocity;//[Offset: 0x244, Size: 0xc] 0x715ca6e580
	Vector FoliageForce;//[Offset: 0x250, Size: 0xc] 0x715ca6e600
	Vector FoliagePosition;//[Offset: 0x25c, Size: 0xc] 0x715ca6e680
	float FoliageDamageImpulseScale;//[Offset: 0x268, Size: 0x4] 0x715ca6e700
	float FoliageTouchImpulseScale;//[Offset: 0x26c, Size: 0x4] 0x715ca6c680
	float FoliageStiffness;//[Offset: 0x270, Size: 0x4] 0x715ca6c700
	float FoliageStiffnessQuadratic;//[Offset: 0x274, Size: 0x4] 0x715ca6c780
	float FoliageDamping;//[Offset: 0x278, Size: 0x4] 0x715ca6c800
	float MaxDamageImpulse;//[Offset: 0x27c, Size: 0x4] 0x715ca6c880
	float MaxTouchImpulse;//[Offset: 0x280, Size: 0x4] 0x715ca6c900
	float MaxForce;//[Offset: 0x284, Size: 0x4] 0x715ca6c980
	float Mass;//[Offset: 0x288, Size: 0x4] 0x715ca6ca00
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x52a9614 0x715d24e860

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a499d580

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object // 71a499d300
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x258, Size: 0x8] 0x715ca6e400

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object // 71a499c900
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x258, Size: 0x8] 0x715ca6dd80

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object // 71a499d080
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xb0, Size: 0x8] 0x715ca6e200
	float TileOverlap;//[Offset: 0xb8, Size: 0x4] 0x715ca6e280
	Volume* SpawningVolume;//[Offset: 0xc0, Size: 0x8] 0x715ca6e300
	Guid ProceduralGuid;//[Offset: 0xc8, Size: 0x10] 0x715ca6e380

--------------------------------
Class: ProceduralFoliageSpawner.Object // 71a499ce00
	int RandomSeed;//[Offset: 0x28, Size: 0x4] 0x715ca6df00
	float TileSize;//[Offset: 0x2c, Size: 0x4] 0x715ca6df80
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4] 0x715ca6e000
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4] 0x715ca6e080
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10] 0x715ca70240
	void Simulate(int NumSteps);// 0x52aa3f8 0x715d24e780

--------------------------------
Class: FoliageTypeObject // 715da9b080
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8] 0x715dabe200
	FoliageType* TypeInstance;//[Offset: 0x8, Size: 0x8] 0x715dabe280
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715dabe300
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8] 0x715d89d3a0

--------------------------------
Class: ProceduralFoliageTile.Object // 71a499cb80
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x28, Size: 0x8] 0x715ca6de00
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0xd0, Size: 0x10] 0x715ca701a0

--------------------------------
Class: ProceduralFoliageInstance // 715da9afc0
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715dabdf00
	Quat Rotation;//[Offset: 0x10, Size: 0x10] 0x715dabdf80
	Vector Normal;//[Offset: 0x20, Size: 0xc] 0x715dabe000
	float Age;//[Offset: 0x2c, Size: 0x4] 0x715dabe080
	float Scale;//[Offset: 0x30, Size: 0x4] 0x715dabe100
	FoliageType* Type;//[Offset: 0x38, Size: 0x8] 0x715dabe180

--------------------------------
Class: ControlPointMeshActor.Actor.Object // 71a499c680
	ControlPointMeshComponent* ControlPointMeshComponent;//[Offset: 0x220, Size: 0x8] 0x715ca6dd00

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a499c400
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x4a8, Size: 0x4] 0x715ca6dc80

--------------------------------
Class: LandscapeProxy.Actor.Object // 71a499bf00
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x220, Size: 0x8] 0x715ca90580
	Guid LandscapeGuid;//[Offset: 0x228, Size: 0x10] 0x715ca90600
	IntPoint LandscapeSectionOffset;//[Offset: 0x238, Size: 0x8] 0x715ca90680
	int MaxLODLevel;//[Offset: 0x240, Size: 0x4] 0x715ca90700
	float LODDistanceFactor;//[Offset: 0x244, Size: 0x4] 0x715ca90780
	byte LODFalloff;//[Offset: 0x248, Size: 0x1] 0x715ca90800
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x24c, Size: 0x4] 0x715ca90880
	float LOD0ScreenSize;//[Offset: 0x250, Size: 0x4] 0x715ca90900
	float LOD0DistributionSetting;//[Offset: 0x254, Size: 0x4] 0x715ca90980
	float LODDistributionSetting;//[Offset: 0x258, Size: 0x4] 0x715ca90a00
	float TessellationComponentScreenSize;//[Offset: 0x25c, Size: 0x4] 0x715ca90a80
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x715ca90b00
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x264, Size: 0x4] 0x715ca90b80
	int OccluderGeometryLOD;//[Offset: 0x268, Size: 0x4] 0x715ca90c00
	int StaticLightingLOD;//[Offset: 0x26c, Size: 0x4] 0x715ca90c80
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x270, Size: 0x8] 0x715ca90d00
	float StreamingDistanceMultiplier;//[Offset: 0x278, Size: 0x4] 0x715ca90d80
	MaterialInterface* LandscapeMaterial;//[Offset: 0x280, Size: 0x8] 0x715ca90e00
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x2a8, Size: 0x8] 0x715ca90e80
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x2b0, Size: 0x10] 0x715ca72680
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x715ca90f80
	byte MeshHolesMaxLod;//[Offset: 0x2c1, Size: 0x1] 0x715ca91000
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2c8, Size: 0x10] 0x715ca72720
	int VirtualTextureNumLods;//[Offset: 0x2d8, Size: 0x4] 0x715ca6f800
	int VirtualTextureLodBias;//[Offset: 0x2dc, Size: 0x4] 0x715ca6f880
	enum VirtualTextureRenderPassType;//[Offset: 0x2e0, Size: 0x1] 0x715ca727c0
	float NegativeZBoundsExtension;//[Offset: 0x2e4, Size: 0x4] 0x715ca6f980
	float PositiveZBoundsExtension;//[Offset: 0x2e8, Size: 0x4] 0x715ca6fa00
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x2f0, Size: 0x10] 0x715ca72860
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x300, Size: 0x10] 0x715ca72900
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x310, Size: 0x10] 0x715ca70060
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1] 0x715ca6fc00
	float StaticLightingResolution;//[Offset: 0x388, Size: 0x4] 0x715ca6fc80
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1] 0x715ca6fd00
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1] 0x715ca6fd80
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1] 0x715ca6fe00
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1] 0x715ca6fe80
	LightingChannels LightingChannels;//[Offset: 0x38d, Size: 0x1] 0x715ca6ff00
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1] 0x715ca6ff80
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 0x1] 0x715ca6e780
	int CustomDepthStencilValue;//[Offset: 0x390, Size: 0x4] 0x715ca6e800
	float LDMaxDrawDistance;//[Offset: 0x394, Size: 0x4] 0x715ca6e880
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x398, Size: 0x18] 0x715ca6e900
	int CollisionMipLevel;//[Offset: 0x3b0, Size: 0x4] 0x715ca6e980
	int SimpleCollisionMipLevel;//[Offset: 0x3b4, Size: 0x4] 0x715ca6ea00
	float CollisionThickness;//[Offset: 0x3b8, Size: 0x4] 0x715ca6ea80
	BodyInstance BodyInstance;//[Offset: 0x3c0, Size: 0x130] 0x715ca6eb00
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f0, Size: 0x1] 0x715ca6eb80
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f0, Size: 0x1] 0x715ca6ec00
	int ComponentSizeQuads;//[Offset: 0x4f4, Size: 0x4] 0x715ca6ec80
	int SubsectionSizeQuads;//[Offset: 0x4f8, Size: 0x4] 0x715ca6ed00
	int NumSubsections;//[Offset: 0x4fc, Size: 0x4] 0x715ca6ed80
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x500, Size: 0x1] 0x715ca6ee00
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x500, Size: 0x1] 0x715ca6ee80
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1] 0x715ca6ef00
	enum NavigationGeometryGatheringMode;//[Offset: 0x502, Size: 0x1] 0x715ca70100
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x503, Size: 0x1] 0x715ca6f000
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1] 0x715ca6f080
	<Texture2D*,LandscapeWeightmapUsage*> WeightmapUsageMap;//[Offset: 0x508, Size: 0x50] 0x715cecf280
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x52f66d0 0x715ca814a0
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x52f67b4 0x715ca81580
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x52f65e8 0x715ca81660
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x52f6bf8 0x715ca81740
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x52f6898 0x715ca81820
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0x52f6d48 0x715ca81900
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0x52f6c9c 0x715ca819e0
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0x52f6ea8 0x715ca81ac0
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x52f6f54 0x715ca81ba0
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x52f6dfc 0x715ca81c80

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a49a4200
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x418, Size: 0x10] 0x715ca73bc0
	LandscapeSplineSegment*[] Segments;//[Offset: 0x428, Size: 0x10] 0x715ca73c60
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x438, Size: 0x10] 0x715ca73d00
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x52f7e0c 0x715ca804e0

--------------------------------
Class: LandscapeSplineControlPoint.Object // 71a49a4480
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x715ca96000
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x715ca96080
	float Width;//[Offset: 0x40, Size: 0x4] 0x715ca96100
	float LayerWidthRatio;//[Offset: 0x44, Size: 0x4] 0x715ca96180
	float SideFalloff;//[Offset: 0x48, Size: 0x4] 0x715ca96200
	float LeftSideFalloffFactor;//[Offset: 0x4c, Size: 0x4] 0x715ca96280
	float RightSideFalloffFactor;//[Offset: 0x50, Size: 0x4] 0x715ca96300
	float LeftSideLayerFalloffFactor;//[Offset: 0x54, Size: 0x4] 0x715ca94280
	float RightSideLayerFalloffFactor;//[Offset: 0x58, Size: 0x4] 0x715ca94300
	float EndFalloff;//[Offset: 0x5c, Size: 0x4] 0x715ca94380
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x60, Size: 0x10] 0x715ca71500
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x715ca715a0
	Box Bounds;//[Offset: 0x80, Size: 0x1c] 0x715ca94500
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xa0, Size: 0x8] 0x715ca94580

--------------------------------
Class: LandscapeSplineConnection // 715da9d3c0
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8] 0x715dabfc80
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715dabfd00

--------------------------------
Class: LandscapeSplineSegment.Object // 71a49a3f80
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18] 0x715ca95b80
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18] 0x715ca95c00
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x715ca73a80
	Box Bounds;//[Offset: 0x80, Size: 0x1c] 0x715ca95d00
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10] 0x715ca73b20

--------------------------------
Class: LandscapeSplineSegmentConnection // 715da9d000
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8] 0x715dac0f80
	float TangentLen;//[Offset: 0x8, Size: 0x4] 0x715dac1000
	FName SocketName;//[Offset: 0xc, Size: 0x8] 0x715dac1080

--------------------------------
Class: LandscapeSplineInterpPoint // 715da9cf40
	Vector Center;//[Offset: 0x0, Size: 0xc] 0x715dac0a80
	Vector Left;//[Offset: 0xc, Size: 0xc] 0x715dac0b00
	Vector Right;//[Offset: 0x18, Size: 0xc] 0x715dac0b80
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc] 0x715dac0c00
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc] 0x715dac0c80
	Vector LayerLeft;//[Offset: 0x3c, Size: 0xc] 0x715dac0d00
	Vector LayerRight;//[Offset: 0x48, Size: 0xc] 0x715dac0d80
	Vector LayerFalloffLeft;//[Offset: 0x54, Size: 0xc] 0x715dac0e00
	Vector LayerFalloffRight;//[Offset: 0x60, Size: 0xc] 0x715dac0e80
	float StartEndFalloff;//[Offset: 0x6c, Size: 0x4] 0x715dac0f00

--------------------------------
Class: LandscapeLayerInfoObject.Object // 71a499a600
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x715ca93e00
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8] 0x715ca93e80
	float Hardness;//[Offset: 0x38, Size: 0x4] 0x715ca93f00
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10] 0x715ca93f80

--------------------------------
Class: LandscapeProxyMaterialOverride // 715da9d6c0
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x715dabfe00
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x715dabfe80

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a499ba00
	int SectionBaseX;//[Offset: 0x418, Size: 0x4] 0x715ca92d00
	int SectionBaseY;//[Offset: 0x41c, Size: 0x4] 0x715ca92d80
	int ComponentSizeQuads;//[Offset: 0x420, Size: 0x4] 0x715ca92e00
	int SubsectionSizeQuads;//[Offset: 0x424, Size: 0x4] 0x715ca92e80
	int NumSubsections;//[Offset: 0x428, Size: 0x4] 0x715ca92f00
	MaterialInterface* OverrideMaterial;//[Offset: 0x430, Size: 0x8] 0x715ca92f80
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x438, Size: 0x8] 0x715ca93000
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x440, Size: 0x10] 0x715ca71fa0
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x450, Size: 0x10] 0x715ca72040
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x460, Size: 0x10] 0x715ca720e0
	int8[] LODIndexToMaterialIndex;//[Offset: 0x470, Size: 0x10] 0x715ca72180
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x480, Size: 0x10] 0x715ca72220
	Texture2D* XYOffsetmapTexture;//[Offset: 0x490, Size: 0x8] 0x715ca91200
	Vector4 WeightmapScaleBias;//[Offset: 0x4a0, Size: 0x10] 0x715ca91280
	float WeightmapSubsectionOffset;//[Offset: 0x4b0, Size: 0x4] 0x715ca91300
	Vector4 HeightmapScaleBias;//[Offset: 0x4c0, Size: 0x10] 0x715ca91380
	Box CachedLocalBox;//[Offset: 0x4d0, Size: 0x1c] 0x715ca91400
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x4ec, Size: 0x1c] 0x715ca91480
	Texture2D* HeightmapTexture;//[Offset: 0x508, Size: 0x8] 0x715ca91500
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x510, Size: 0x10] 0x715ca722c0
	Texture2D*[] WeightmapTextures;//[Offset: 0x520, Size: 0x10] 0x715ca72360
	Guid MapBuildDataId;//[Offset: 0x530, Size: 0x10] 0x715ca91680
	Guid[] IrrelevantLights;//[Offset: 0x540, Size: 0x10] 0x715ca72400
	int CollisionMipLevel;//[Offset: 0x550, Size: 0x4] 0x715ca91780
	int SimpleCollisionMipLevel;//[Offset: 0x554, Size: 0x4] 0x715ca91800
	float NegativeZBoundsExtension;//[Offset: 0x558, Size: 0x4] 0x715ca91880
	float PositiveZBoundsExtension;//[Offset: 0x55c, Size: 0x4] 0x715ca91900
	float StaticLightingResolution;//[Offset: 0x560, Size: 0x4] 0x715ca91980
	int ForcedLOD;//[Offset: 0x564, Size: 0x4] 0x715ca91a00
	int LODBias;//[Offset: 0x568, Size: 0x4] 0x715ca91a80
	Guid StateId;//[Offset: 0x56c, Size: 0x10] 0x715ca91b00
	Guid BakedTextureMaterialGuid;//[Offset: 0x57c, Size: 0x10] 0x715ca91b80
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x590, Size: 0x8] 0x715ca91c00
	byte MobileBlendableLayerMask;//[Offset: 0x598, Size: 0x1] 0x715ca91c80
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x5a0, Size: 0x8] 0x715ca91d00
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x5a8, Size: 0x10] 0x715ca724a0
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x5b8, Size: 0x10] 0x715ca72540
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x52f08a0 0x715ca80e80
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0x52f06a0 0x715ca80f60
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0x52f07a0 0x715ca81040

--------------------------------
Class: LandscapeComponentMaterialOverride // 715da9db40
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x715dabf600
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x715dabf680

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a499ad80
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x418, Size: 0x10] 0x715ca71d20
	int SectionBaseX;//[Offset: 0x428, Size: 0x4] 0x715ca92300
	int SectionBaseY;//[Offset: 0x42c, Size: 0x4] 0x715ca92380
	int CollisionSizeQuads;//[Offset: 0x430, Size: 0x4] 0x715ca92400
	float CollisionScale;//[Offset: 0x434, Size: 0x4] 0x715ca92480
	int SimpleCollisionSizeQuads;//[Offset: 0x438, Size: 0x4] 0x715ca92500
	byte[] CollisionQuadFlags;//[Offset: 0x440, Size: 0x10] 0x715ca71dc0
	Guid HeightfieldGuid;//[Offset: 0x450, Size: 0x10] 0x715ca92600
	Box CachedLocalBox;//[Offset: 0x460, Size: 0x1c] 0x715ca92680
	LandscapeComponent* RenderComponent;//[Offset: 0x47c, Size: 0x1c] 0x715ca92700
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x4a8, Size: 0x10] 0x715ca71e60
	LandscapeComponent* GetRenderComponent();// 0x52f1834 0x715ca80da0

--------------------------------
Class: WeightmapLayerAllocationInfo // 715da9dcc0
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8] 0x715dabd780
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1] 0x715dabd800
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1] 0x715dabd880

--------------------------------
Class: LandscapeWeightmapUsage.Object // 71a49a3800
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 0x8] 0x715ca95a00
	Guid LayerGuid;//[Offset: 0x48, Size: 0x10] 0x715ca95a80

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object // 71a499c180

--------------------------------
Class: LandscapeBlueprintBrushBase.Actor.Object // 71a499bc80
	void RequestLandscapeUpdate();// 0x52efcec 0x715ca81120
	TextureRenderTarget2D* Render(bool InIsHeightmap, TextureRenderTarget2D* InCombinedResult, out const FName InWeightmapLayerName);// 0x45c6aa0 0x715ca81200
	void Initialize(out const Transform InLandscapeTransform, out const IntPoint InLandscapeSize, out const IntPoint InLandscapeRenderTargetSize);// 0x45c6aa0 0x715ca812e0
	void GetBlueprintRenderDependencies(out Texture2D*[] OutStreamableAssets);// 0x45c6aa0 0x715ca813c0

--------------------------------
Class: LandscapeGizmoActor.Actor.Object // 71a499b500

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object // 71a499b780

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a499b280

--------------------------------
Class: LandscapeInfo.Object // 71a499ab00
	Landscape* LandscapeActor;//[Offset: 0x28, Size: 0x1c] 0x715ca94000
	Guid LandscapeGuid;//[Offset: 0x44, Size: 0x10] 0x715ca94080
	int ComponentSizeQuads;//[Offset: 0x54, Size: 0x4] 0x715ca94100
	int SubsectionSizeQuads;//[Offset: 0x58, Size: 0x4] 0x715ca94180
	int ComponentNumSubsections;//[Offset: 0x5c, Size: 0x4] 0x715ca94200
	Vector DrawScale;//[Offset: 0x60, Size: 0xc] 0x715ca92180
	LandscapeStreamingProxy*[] Proxies;//[Offset: 0x110, Size: 0x10] 0x715ca71c80

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object // 71a49a3d00
	Landscape* LandscapeActor;//[Offset: 0x558, Size: 0x1c] 0x715ca95b00

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object // 71a499fd80
	LandscapeMaterialTextureStreamingInfo[] TextureStreamingInfo;//[Offset: 0x410, Size: 0x10] 0x715ca716e0
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x420, Size: 0x1] 0x715ca94980
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x420, Size: 0x1] 0x715ca94a00
	bool bMobile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x420, Size: 0x1] 0x715ca94a80
	bool bEditorToolUsage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x420, Size: 0x1] 0x715ca94b00

--------------------------------
Class: LandscapeMaterialTextureStreamingInfo // 715da9d780
	FName TextureName;//[Offset: 0x0, Size: 0x8] 0x715dabff00
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x715dabff80

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a49a4e80
	Guid MeshGuid;//[Offset: 0x4f8, Size: 0x10] 0x715ca94880

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object // 71a49a4c00
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x220, Size: 0x8] 0x715ca94800

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a49a4980
	Guid LandscapeGuid;//[Offset: 0x4a8, Size: 0x10] 0x715ca94680
	IntPoint[] ProxyComponentBases;//[Offset: 0x4b8, Size: 0x10] 0x715ca71640
	int8 ProxyLOD;//[Offset: 0x4c8, Size: 0x1] 0x715ca94780

--------------------------------
Class: LandscapeSettings.DeveloperSettings.Object // 71a49a4700
	int MaxNumberOfLayers;//[Offset: 0x38, Size: 0x4] 0x715ca94600

--------------------------------
Class: LandscapeSubsystem.WorldSubsystem.Subsystem.Object // 71a49a3a80

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object // 71a49a3580
	GrassInput[] GrassTypes;//[Offset: 0x40, Size: 0x10] 0x715ca739e0

--------------------------------
Class: GrassInput // 715da9ce80
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715dac0900
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x8] 0x715dac0980
	ExpressionInput Input;//[Offset: 0x10, Size: 0xc] 0x715dac0a00

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object // 71a49a3080
	LayerBlendInput[] Layers;//[Offset: 0x40, Size: 0x10] 0x715ca73940
	Guid ExpressionGUID;//[Offset: 0x50, Size: 0x10] 0x715ca95900

--------------------------------
Class: LayerBlendInput // 715da9cdc0
	FName LayerName;//[Offset: 0x0, Size: 0x8] 0x715dac0580
	byte BlendType;//[Offset: 0x8, Size: 0x1] 0x715dac0600
	ExpressionInput LayerInput;//[Offset: 0xc, Size: 0xc] 0x715dac0680
	ExpressionInput HeightInput;//[Offset: 0x20, Size: 0xc] 0x715dac0700
	float PreviewWeight;//[Offset: 0x34, Size: 0x4] 0x715dac0780
	Vector ConstLayerInput;//[Offset: 0x38, Size: 0xc] 0x715dac0800
	float ConstHeightInput;//[Offset: 0x44, Size: 0x4] 0x715dac0880

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object // 71a49a2e00
	byte MappingType;//[Offset: 0x39, Size: 0x1] 0x715ca95580
	byte CustomUVType;//[Offset: 0x3a, Size: 0x1] 0x715ca95600
	float MappingScale;//[Offset: 0x3c, Size: 0x4] 0x715ca95680
	float MappingRotation;//[Offset: 0x40, Size: 0x4] 0x715ca95700
	float MappingPanU;//[Offset: 0x44, Size: 0x4] 0x715ca95780
	float MappingPanV;//[Offset: 0x48, Size: 0x4] 0x715ca95800

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object // 71a49a2b80
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x715ca95400
	float PreviewWeight;//[Offset: 0x44, Size: 0x4] 0x715ca95480
	Guid ExpressionGUID;//[Offset: 0x48, Size: 0x10] 0x715ca95500

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object // 71a49a2900
	ExpressionInput LayerUsed;//[Offset: 0x3c, Size: 0xc] 0x715ca97280
	ExpressionInput LayerNotUsed;//[Offset: 0x50, Size: 0xc] 0x715ca97300
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x715ca97380
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x715ca95300
	Guid ExpressionGUID;//[Offset: 0x70, Size: 0x10] 0x715ca95380

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object // 71a49a2680
	ExpressionInput Base;//[Offset: 0x3c, Size: 0xc] 0x715ca96f80
	ExpressionInput Layer;//[Offset: 0x50, Size: 0xc] 0x715ca97000
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x715ca97080
	float PreviewWeight;//[Offset: 0x6c, Size: 0x4] 0x715ca97100
	Vector ConstBase;//[Offset: 0x70, Size: 0xc] 0x715ca97180
	Guid ExpressionGUID;//[Offset: 0x7c, Size: 0x10] 0x715ca97200

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object // 71a49a2400
	Guid ExpressionGUID;//[Offset: 0x3c, Size: 0x10] 0x715ca96f00

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object // 71a49a2180
	FrameRate FixedFrameRate;//[Offset: 0x28, Size: 0x8] 0x715ca96e80

--------------------------------
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a49a1c80
	static FrameTime TransformTime(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate DestinationRate);// 0x5317044 0x715ca82fc0
	static FrameNumber Subtract_FrameNumberInteger(FrameNumber A, int B);// 0x5316b40 0x715ca830a0
	static FrameNumber Subtract_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x5316d08 0x715ca83180
	static FrameTime SnapFrameTimeToRate(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate SnapToRate);// 0x5316ed8 0x715ca83260
	static FrameTime Multiply_SecondsFrameRate(float TimeInSeconds, out const FrameRate FrameRate);// 0x53174d4 0x715ca83340
	static FrameNumber Multiply_FrameNumberInteger(FrameNumber A, int B);// 0x5316a5c 0x715ca83420
	static bool IsValid_MultipleOf(out const FrameRate InFrameRate, out const FrameRate OtherFramerate);// 0x53171b0 0x715ca83500
	static bool IsValid_Framerate(out const FrameRate InFrameRate);// 0x53172c8 0x715ca835e0
	static FrameRate GetTimecodeFrameRate();// 0x5316824 0x715ca836c0
	static Timecode GetTimecode();// 0x5316858 0x715ca837a0
	static FrameNumber Divide_FrameNumberInteger(FrameNumber A, int B);// 0x5316978 0x715ca83880
	static FString Conv_TimecodeToString(out const Timecode InTimecode, bool bForceSignDisplay);// 0x5317388 0x715ca83960
	static float Conv_QualifiedFrameTimeToSeconds(out const QualifiedFrameTime InFrameTime);// 0x53175cc 0x715ca80080
	static float Conv_FrameRateToSeconds(out const FrameRate InFrameRate);// 0x531768c 0x715ca80160
	static int Conv_FrameNumberToInteger(out const FrameNumber InFrameNumber);// 0x53168c4 0x715ca80240
	static FrameNumber Add_FrameNumberInteger(FrameNumber A, int B);// 0x5316c24 0x715ca80320
	static FrameNumber Add_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x5316df0 0x715ca80400

--------------------------------
Class: TimeSynchronizationSource.Object // 71a49a1a00
	bool bUseForSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715ca97800
	int FrameOffset;//[Offset: 0x2c, Size: 0x4] 0x715ca97880

--------------------------------
Class: MovieSceneCustomClockSource.Interface.Object // 71a49a1780
	void OnTick(float DeltaSeconds, float InPlayRate);// 0x5372c80 0x715ca82c40
	void OnStopPlaying(out const QualifiedFrameTime InStopTime);// 0x5372af0 0x715ca82d20
	void OnStartPlaying(out const QualifiedFrameTime InStartTime);// 0x5372bb8 0x715ca82e00
	FrameTime OnRequestCurrentTime(out const QualifiedFrameTime InCurrentTime, float InPlayRate);// 0x53729d8 0x715ca82ee0

--------------------------------
Class: MovieScenePlaybackClient.Interface.Object // 71a49a1500

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object // 71a49a0d80

--------------------------------
Class: MovieSceneEasingExternalCurve.Object // 71a49a0880
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8] 0x715ca98c80

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object // 71a49a0600
	float OnEvaluate(float Interp);// 0x45c6aa0 0x715ca82b60

--------------------------------
Class: MovieSceneFolder.Object // 71a49a0380
	FName FolderName;//[Offset: 0x28, Size: 0x8] 0x715ca98980
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10] 0x715ca731c0
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10] 0x715ca73260
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10] 0x715ca73300

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object // 71a49a0100

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49aa380
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x715ca98880
	MovieSceneSection*[] SectionArray;//[Offset: 0x58, Size: 0x10] 0x715ca73120

--------------------------------
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49aa100

--------------------------------
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object // 71a49a9e80
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8] 0x715ca98800

--------------------------------
Class: TestMovieSceneSubTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a9c00
	MovieSceneSection*[] SectionArray;//[Offset: 0x68, Size: 0x10] 0x715ca73080

--------------------------------
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a9980

--------------------------------
Class: AnimationDataSourceRegistry.Object // 71a49a9700
	<FName,Object*> DataSources;//[Offset: 0x28, Size: 0x50] 0x715cecf100

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object // 71a49a9480
	FName NotifyName;//[Offset: 0x38, Size: 0x8] 0x715ca98600

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object // 71a49a9200
	FName NotifyName;//[Offset: 0x2c, Size: 0x8] 0x715ca98580

--------------------------------
Class: AnimSequencerInstance.AnimInstance.Object // 71a49a8f80

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object // 71a49a8d00
	static void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0x5411c68 0x715ca822a0
	static void K2_StartProfilingTimer();// 0x5410bd0 0x715ca82380
	static Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0x5411320 0x715ca82460
	static float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0x54111f8 0x715ca82540
	static Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0x5411a10 0x715ca82620
	static float K2_EndProfilingTimer(bool bLog, FString LogPrefix);// 0x5410ad0 0x715ca82700
	static float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0x5411708 0x715ca827e0
	static Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0x54115dc 0x715ca828c0
	static float K2_CalculateVelocityFromSockets(float DeltaSeconds, SkeletalMeshComponent* Component, const FName SocketOrBoneName, const FName ReferenceSocketOrBone, byte SocketSpace, Vector OffsetInBoneSpace, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax, enum EasingType, out const RuntimeFloatCurve CustomCurve);// 0x5410be4 0x715ca829a0
	static float K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, Vector Position, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax);// 0x5410fe4 0x715ca82a80

--------------------------------
Class: PositionHistory // 715dad4c00
	Vector[] Positions;//[Offset: 0x0, Size: 0x10] 0x715dae3bc0
	float Range;//[Offset: 0x10, Size: 0x4] 0x715daf7400

--------------------------------
Class: PlayMontageCallbackProxy.Object // 71a49a8a80
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10] 0x715ca9bc80
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10] 0x715ca9bd00
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10] 0x715ca9bd80
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10] 0x715ca9be00
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10] 0x715ca9be80
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x54125e0 0x715ca81e40
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x54126dc 0x715ca81f20
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x54127d8 0x715ca82000
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x54128c8 0x715ca820e0
	static PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0x54129b8 0x715ca821c0

--------------------------------
Class: BranchingPointNotifyPayload // 7149066f40

--------------------------------
Class: SequencerAnimationSupport.Interface.Object // 71a49a8800

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object // 71a49a8580
	Transform BP_GetTransformOrigin();// 0x45c6aa0 0x715ca81d60

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a8080
	Guid ConstraintId;//[Offset: 0xd8, Size: 0x10] 0x715ca9ba00
	MovieSceneObjectBindingID ConstraintBindingID;//[Offset: 0xe8, Size: 0x18] 0x715ca9ba80
	void SetConstraintBindingID(out const MovieSceneObjectBindingID InConstraintBindingID);// 0x547ff9c 0x715ca85560
	MovieSceneObjectBindingID GetConstraintBindingID();// 0x5480074 0x715ca85640

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a8300
	FName AttachSocketName;//[Offset: 0x100, Size: 0x8] 0x715ca9b600
	FName AttachComponentName;//[Offset: 0x108, Size: 0x8] 0x715ca9b680
	enum AttachmentLocationRule;//[Offset: 0x110, Size: 0x1] 0x715ca72c20
	enum AttachmentRotationRule;//[Offset: 0x111, Size: 0x1] 0x715ca72cc0
	enum AttachmentScaleRule;//[Offset: 0x112, Size: 0x1] 0x715ca72d60
	enum DetachmentLocationRule;//[Offset: 0x113, Size: 0x1] 0x715ca72e00
	enum DetachmentRotationRule;//[Offset: 0x114, Size: 0x1] 0x715ca72ea0
	enum DetachmentScaleRule;//[Offset: 0x115, Size: 0x1] 0x715ca72f40

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a7b80
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x58, Size: 0x10] 0x715ca72b80

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a7e00

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a7900
	MovieSceneFloatChannel TimingCurve;//[Offset: 0x100, Size: 0xa0] 0x715ca9d380
	enum FrontAxisEnum;//[Offset: 0x1a0, Size: 0x1] 0x715ca72a40
	enum UpAxisEnum;//[Offset: 0x1a1, Size: 0x1] 0x715ca72ae0
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a2, Size: 0x1] 0x715ca9d500
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a2, Size: 0x1] 0x715ca9d580
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a2, Size: 0x1] 0x715ca9d600

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a7680

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a7400
	MovieSceneTransformMask TransformMask;//[Offset: 0xd8, Size: 0x4] 0x715ca9d080
	MovieSceneFloatChannel Translation;//[Offset: 0xe0, Size: 0xa0] 0x715ca9d100
	MovieSceneFloatChannel Rotation;//[Offset: 0x2c0, Size: 0xa0] 0x715ca9d180
	MovieSceneFloatChannel Scale;//[Offset: 0x4a0, Size: 0xa0] 0x715ca9d200
	MovieSceneFloatChannel ManualWeight;//[Offset: 0x680, Size: 0xa0] 0x715ca9d280
	bool bUseQuaternionInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 0x1] 0x715ca9d300

--------------------------------
Class: MovieSceneTransformMask // 715dad79c0
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x715daf8900

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a7180

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a6f00
	MovieSceneActorReferenceData ActorReferenceData;//[Offset: 0xd8, Size: 0xb0] 0x715ca9cf00
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x188, Size: 0x80] 0x715ca9cf80
	FString[] ActorGuidStrings;//[Offset: 0x208, Size: 0x10] 0x715ca729a0

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel // 715dad7480
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x715dae3300
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x40, Size: 0x10] 0x715dae33a0

--------------------------------
Class: MovieSceneActorReferenceKey // 715dad73c0
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18] 0x715daf9f00
	FName ComponentName;//[Offset: 0x18, Size: 0x8] 0x715daf9f80
	FName SocketName;//[Offset: 0x20, Size: 0x8] 0x715dafa000

--------------------------------
Class: IntegralCurve.IndexedCurve // 715db1dcc0
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x715daecc20
	int DefaultValue;//[Offset: 0x78, Size: 0x4] 0x715db47500
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x715db47580

--------------------------------
Class: IntegralKey // 715db1dc00
	float Time;//[Offset: 0x0, Size: 0x4] 0x715db49480
	int Value;//[Offset: 0x4, Size: 0x4] 0x715db47400

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a6c80

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a6a00
	SoundBase* sound;//[Offset: 0xd8, Size: 0x8] 0x715ca9e680
	FrameNumber StartFrameOffset;//[Offset: 0xe0, Size: 0x4] 0x715ca9e700
	float StartOffset;//[Offset: 0xe4, Size: 0x4] 0x715ca9c680
	float AudioStartTime;//[Offset: 0xe8, Size: 0x4] 0x715ca9c700
	float AudioDilationFactor;//[Offset: 0xec, Size: 0x4] 0x715ca9c780
	float AudioVolume;//[Offset: 0xf0, Size: 0x4] 0x715ca9c800
	MovieSceneFloatChannel SoundVolume;//[Offset: 0xf8, Size: 0xa0] 0x715ca9c880
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x198, Size: 0xa0] 0x715ca9c900
	MovieSceneActorReferenceData AttachActorData;//[Offset: 0x238, Size: 0xb0] 0x715ca9c980
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x715ca9ca00
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1] 0x715ca9ca80
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2f0, Size: 0x8] 0x715ca9cb00
	delegate OnQueueSubtitles;//[Offset: 0x2f8, Size: 0x10] 0x715ca9cb80
	delegate OnAudioFinished;//[Offset: 0x308, Size: 0x10] 0x715ca9cc00
	delegate OnAudioPlaybackPercent;//[Offset: 0x318, Size: 0x10] 0x715ca9cc80
	void SetStartOffset(FrameNumber InStartOffset);// 0x548164c 0x715ca851e0
	void SetSound(SoundBase* InSound);// 0x5481708 0x715ca852c0
	FrameNumber GetStartOffset();// 0x5481630 0x715ca853a0
	SoundBase* GetSound();// 0x54816ec 0x715ca85480

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a6780
	MovieSceneSection*[] AudioSections;//[Offset: 0x58, Size: 0x10] 0x715ca75240

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a6500
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x715ca9e500
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xe0, Size: 0x90] 0x715ca9e580

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel // 715da9f340
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x715d89f2e0
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715dac1600
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x715dac1680
	bool[] Values;//[Offset: 0x20, Size: 0x10] 0x715d89f380

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a6280

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a6000
	MovieSceneByteChannel ByteCurve;//[Offset: 0xd8, Size: 0x98] 0x715ca9e480

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel // 715da9f280
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x715d89f1a0
	byte DefaultValue;//[Offset: 0x18, Size: 0x1] 0x715dac1380
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x715dac1400
	byte[] Values;//[Offset: 0x20, Size: 0x10] 0x715d89f240
	Enum* Enum;//[Offset: 0x30, Size: 0x8] 0x715dac1500

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a5d80
	Enum* Enum;//[Offset: 0x88, Size: 0x8] 0x715ca9e400

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a5b00
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xd8, Size: 0x20] 0x715ca9e080
	CameraAnim* CameraAnim;//[Offset: 0xf8, Size: 0x8] 0x715ca9e100
	float PlayRate;//[Offset: 0x100, Size: 0x4] 0x715ca9e180
	float PlayScale;//[Offset: 0x104, Size: 0x4] 0x715ca9e200
	float BlendInTime;//[Offset: 0x108, Size: 0x4] 0x715ca9e280
	float BlendOutTime;//[Offset: 0x10c, Size: 0x4] 0x715ca9e300
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x715ca9e380

--------------------------------
Class: MovieSceneCameraAnimSectionData // 715dad7180
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8] 0x715daf9a00
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x715daf9a80
	float PlayScale;//[Offset: 0xc, Size: 0x4] 0x715daf9b00
	float BlendInTime;//[Offset: 0x10, Size: 0x4] 0x715daf9b80
	float BlendOutTime;//[Offset: 0x14, Size: 0x4] 0x715daf9c00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715daf9c80

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a5880
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x58, Size: 0x10] 0x715ca751a0

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49a5600
	Guid CameraGuid;//[Offset: 0xd8, Size: 0x10] 0x715ca9de00
	MovieSceneObjectBindingID CameraBindingID;//[Offset: 0xe8, Size: 0x18] 0x715ca9de80
	void SetCameraBindingID(out const MovieSceneObjectBindingID InCameraBindingID);// 0x5482c1c 0x715ca85020
	MovieSceneObjectBindingID GetCameraBindingID();// 0x5482cf4 0x715ca85100

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49a5380
	bool bCanBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x715ca9dd00
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x715ca75100

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49af600
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xd8, Size: 0x20] 0x715ca9db00
	class CameraShake* ShakeClass;//[Offset: 0xf8, Size: 0x8] 0x715ca75060
	float PlayScale;//[Offset: 0x100, Size: 0x4] 0x715ca9db80
	byte PlaySpace;//[Offset: 0x104, Size: 0x1] 0x715ca9dc00
	Rotator UserDefinedPlaySpace;//[Offset: 0x108, Size: 0xc] 0x715ca9dc80

--------------------------------
Class: MovieSceneCameraShakeSectionData // 715dad6f40
	class CameraShake* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x715dae3260
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x715daf9780
	byte PlaySpace;//[Offset: 0xc, Size: 0x1] 0x715daf9800
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc] 0x715daf9880

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49af380
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x58, Size: 0x10] 0x715ca74fc0

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49af100
	FString ShotDisplayName;//[Offset: 0x150, Size: 0x10] 0x715ca9d880
	FText DisplayName;//[Offset: 0x160, Size: 0x18] 0x715ca9d900
	void SetShotDisplayName(FString InShotDisplayName);// 0x548968c 0x715ca84e60
	FString GetShotDisplayName();// 0x548979c 0x715ca84f40

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49aee80

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49aec00
	MovieSceneFloatChannel RedCurve;//[Offset: 0xd8, Size: 0xa0] 0x715ca9f780
	MovieSceneFloatChannel GreenCurve;//[Offset: 0x178, Size: 0xa0] 0x715ca9d700
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x218, Size: 0xa0] 0x715ca9d780
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x2b8, Size: 0xa0] 0x715ca9d800

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49ae980
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715ca9f700

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49ae700
	MovieSceneByteChannel EnumCurve;//[Offset: 0xd8, Size: 0x98] 0x715ca9f680

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49ae480
	Enum* Enum;//[Offset: 0x88, Size: 0x8] 0x715ca9f600

--------------------------------
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49ae200

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object // 71a49add00

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object // 71a49adf80
	MovieSceneEvent Event;//[Offset: 0xd8, Size: 0x28] 0x715ca9f580

--------------------------------
Class: MovieSceneEvent // 715dad6b80
	MovieSceneEventPtrs Ptrs;//[Offset: 0x0, Size: 0x28] 0x715dafb300

--------------------------------
Class: MovieSceneEventPtrs // 715dad6ac0
	Function* Function;//[Offset: 0x0, Size: 0x8] 0x715dafb200
	FieldPathProperty BoundObjectProperty;//[Offset: 0x8, Size: 0x20] 0x715dafb280

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49ada80
	NameCurve Events;//[Offset: 0xd8, Size: 0x78] 0x715ca9f480
	MovieSceneEventSectionData EventData;//[Offset: 0x150, Size: 0x88] 0x715ca9f500

--------------------------------
Class: NameCurve.IndexedCurve // 715db1fdc0
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x715daedee0

--------------------------------
Class: NameCurveKey // 715db1fd00
	float Time;//[Offset: 0x0, Size: 0x4] 0x715ce62f00
	FName Value;//[Offset: 0x4, Size: 0x8] 0x715ce62f80

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel // 715dad6880
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x715dae2f40
	EventPayload[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x715dae2fe0

--------------------------------
Class: EventPayload // 715dad67c0
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x715dafaf00
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28] 0x715dafaf80

--------------------------------
Class: MovieSceneEventParameters // 715dad6700

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49ad800
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1] 0x715ca9f200
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56, Size: 0x1] 0x715ca9f280
	enum EventPosition;//[Offset: 0x57, Size: 0x1] 0x715ca74de0
	MovieSceneObjectBindingID[] EventReceivers;//[Offset: 0x58, Size: 0x10] 0x715ca74e80
	MovieSceneSection*[] Sections;//[Offset: 0x68, Size: 0x10] 0x715ca74f20

--------------------------------
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object // 71a49ad580
	MovieSceneEventChannel EventChannel;//[Offset: 0xd8, Size: 0x88] 0x715ca9f180

--------------------------------
Class: MovieSceneEventChannel.MovieSceneChannel // 715dad6940
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x715dae3080
	MovieSceneEvent[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x715dae3120

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49ad080
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xd8, Size: 0xa0] 0x715ca9f100

--------------------------------
Class: MovieSceneFadeSection.MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49ad300
	LinearColor FadeColor;//[Offset: 0x178, Size: 0x10] 0x715ca9f000
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1] 0x715ca9f080

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49acb80

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49ace00

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49ac900
	MovieSceneIntegerChannel IntegerCurve;//[Offset: 0xd8, Size: 0x90] 0x715ca9ef80

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel // 715dad1240
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x715d89e660
	int DefaultValue;//[Offset: 0x18, Size: 0x4] 0x715dac6280
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x715dac6300
	int[] Values;//[Offset: 0x20, Size: 0x10] 0x715d89e700

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49ac680

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49ac400
	enum Visibility;//[Offset: 0xd8, Size: 0x1] 0x715ca74a20
	FName[] LevelNames;//[Offset: 0xe0, Size: 0x10] 0x715ca74ac0
	void SetVisibility(enum InVisibility);// 0x548c52c 0x715ca84ae0
	void SetLevelNames(out const FName[] InLevelNames);// 0x548c398 0x715ca84bc0
	enum GetVisibility();// 0x548c5d0 0x715ca84ca0
	FName[] GetLevelNames();// 0x548c4a8 0x715ca84d80

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49ac180
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x715ca74980

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49abc80
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x715ca748e0

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49abf00
	MaterialParameterCollection* MPC;//[Offset: 0x68, Size: 0x8] 0x715ca9eb00

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49aba00
	int MaterialIndex;//[Offset: 0x68, Size: 0x4] 0x715ca9ea80

--------------------------------
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49ab780
	MovieSceneObjectPathChannel ObjectChannel;//[Offset: 0xd8, Size: 0xc0] 0x715ca9ea00

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel // 715dad0f40
	class Object* PropertyClass;//[Offset: 0x8, Size: 0x8] 0x715d89e480
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x715d89e520
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x20, Size: 0x10] 0x715d89e5c0
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x30, Size: 0x30] 0x715dac6100

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue // 715dad0e80
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28] 0x715dac6000
	Object* HardPtr;//[Offset: 0x28, Size: 0x8] 0x715dac6080

--------------------------------
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49ab500
	class Object* PropertyClass;//[Offset: 0x88, Size: 0x8] 0x715ca74840

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49ab280
	BoolParameterNameAndCurve[] BoolParameterNamesAndCurves;//[Offset: 0xd8, Size: 0x10] 0x715ca74480
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0xe8, Size: 0x10] 0x715ca74520
	Vector2DParameterNameAndCurves[] Vector2DParameterNamesAndCurves;//[Offset: 0xf8, Size: 0x10] 0x715ca745c0
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0x108, Size: 0x10] 0x715ca74660
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0x118, Size: 0x10] 0x715ca74700
	TransformParameterNameAndCurves[] TransformParameterNamesAndCurves;//[Offset: 0x128, Size: 0x10] 0x715ca747a0

--------------------------------
Class: BoolParameterNameAndCurve // 715dad8f80
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x715dafbe00
	MovieSceneBoolChannel ParameterCurve;//[Offset: 0x8, Size: 0x90] 0x715dafbe80

--------------------------------
Class: ScalarParameterNameAndCurve // 715dad8ec0
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x715dafbc80
	MovieSceneFloatChannel ParameterCurve;//[Offset: 0x8, Size: 0xa0] 0x715dafbd00

--------------------------------
Class: Vector2DParameterNameAndCurves // 715dad9040
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x715dafbf80
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0] 0x715dafc000
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0] 0x715dafc080

--------------------------------
Class: VectorParameterNameAndCurves // 715dad9100
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x715dafc180
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0] 0x715dafc200
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0] 0x715dafc280
	MovieSceneFloatChannel ZCurve;//[Offset: 0x148, Size: 0xa0] 0x715dafc300

--------------------------------
Class: ColorParameterNameAndCurves // 715dad91c0
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x715dafc400
	MovieSceneFloatChannel RedCurve;//[Offset: 0x8, Size: 0xa0] 0x715dafc480
	MovieSceneFloatChannel GreenCurve;//[Offset: 0xa8, Size: 0xa0] 0x715dafc500
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x148, Size: 0xa0] 0x715dafc580
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x1e8, Size: 0xa0] 0x715dafc600

--------------------------------
Class: TransformParameterNameAndCurves // 715dad9280
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x715dafa600
	MovieSceneFloatChannel Translation;//[Offset: 0x8, Size: 0xa0] 0x715dafa680
	MovieSceneFloatChannel Rotation;//[Offset: 0x1e8, Size: 0xa0] 0x715dafa700
	MovieSceneFloatChannel Scale;//[Offset: 0x3c8, Size: 0xa0] 0x715dafa780

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49ab000
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x715ca743e0

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49aad80
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xd8, Size: 0x98] 0x715ca9fe80

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel // 715dad8b00

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49aab00
	MovieSceneSection*[] ParticleSections;//[Offset: 0x58, Size: 0x10] 0x715ca74340

--------------------------------
Class: MovieSceneParticleTrailSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49aa880
	MovieSceneParticleTrailChannel ParticleTrailKeys;//[Offset: 0xd8, Size: 0xa8] 0x715ca9fd80

--------------------------------
Class: MovieSceneParticleTrailChannel.MovieSceneChannel // 715dad8980
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x715dae4fc0
	MovieSceneParticleTrailKey[] KeyValues;//[Offset: 0x38, Size: 0x10] 0x715dae5100

--------------------------------
Class: MovieSceneParticleTrailKey // 715dad88c0
	enum ParticleTrailKey;//[Offset: 0x0, Size: 0x1] 0x715dae5060
	FName FirstSocketName;//[Offset: 0x4, Size: 0x8] 0x715dafb800
	FName SecondSocketName;//[Offset: 0xc, Size: 0x8] 0x715dafb880
	byte WidthMode;//[Offset: 0x14, Size: 0x1] 0x715dafb900
	float Width;//[Offset: 0x18, Size: 0x4] 0x715dafb980

--------------------------------
Class: MovieSceneParticleTrailTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49aa600
	MovieSceneSection*[] ParticleTrailSections;//[Offset: 0x58, Size: 0x10] 0x715ca742a0

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49afd80
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xd8, Size: 0xc0] 0x715ca9fc80

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49afb00
	int MaterialIndex;//[Offset: 0x88, Size: 0x4] 0x715ca9fc00

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49af880
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xd8, Size: 0xd8] 0x715ca9f800
	AnimSequence* AnimSequence;//[Offset: 0x1b0, Size: 0x8] 0x715ca9f880
	AnimSequenceBase* Animation;//[Offset: 0x1b8, Size: 0x8] 0x715ca9f900
	float StartOffset;//[Offset: 0x1c0, Size: 0x4] 0x715ca9f980
	float EndOffset;//[Offset: 0x1c4, Size: 0x4] 0x715ca9fa00
	float PlayRate;//[Offset: 0x1c8, Size: 0x4] 0x715ca9fa80
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc, Size: 0x1] 0x715ca9fb00
	FName SlotName;//[Offset: 0x1d0, Size: 0x8] 0x715ca9fb80

--------------------------------
Class: MovieSceneSkeletalAnimationParams // 715dad7f00
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8] 0x715dafc800
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x715dafc880
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x715dafc900
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x715dafc980
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x715dafca00
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x715dafca80
	FName SlotName;//[Offset: 0x1c, Size: 0x8] 0x715dafcb00
	MovieSceneFloatChannel Weight;//[Offset: 0x28, Size: 0xa0] 0x715dafcb80
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x715dafcc00
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1] 0x715dafcc80
	float StartOffset;//[Offset: 0xcc, Size: 0x4] 0x715dafcd00
	float EndOffset;//[Offset: 0xd0, Size: 0x4] 0x715dafcd80

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b5100
	MovieSceneSection*[] AnimationSections;//[Offset: 0x58, Size: 0x10] 0x715ca74200
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715caa1080

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49b4e80

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b4c00

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49b4980

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b4700
	MovieSceneSection*[] Sections;//[Offset: 0x58, Size: 0x10] 0x715ca74160
	Guid ObjectGuid;//[Offset: 0x68, Size: 0x10] 0x715caa0f80

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49b4480
	MovieSceneStringChannel StringCurve;//[Offset: 0xd8, Size: 0xa0] 0x715caa0e80

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel // 715dad8380
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x715dae4de0
	FString[] Values;//[Offset: 0x18, Size: 0x10] 0x715dae4e80
	FString DefaultValue;//[Offset: 0x28, Size: 0x10] 0x715dafd280
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715dafd300

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b4200

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b3f80

--------------------------------
Class: MovieSceneVectorSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49b3d00
	MovieSceneFloatChannel Curves;//[Offset: 0xd8, Size: 0xa0] 0x715caa0d80
	int ChannelsUsed;//[Offset: 0x358, Size: 0x4] 0x715caa0e00

--------------------------------
Class: MovieSceneVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b3a80
	int NumChannelsUsed;//[Offset: 0x88, Size: 0x4] 0x715caa0d00

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b3800

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object // 71a49b3580
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x715caa0b00
	delegate OnFail;//[Offset: 0x40, Size: 0x10] 0x715caa0b80
	static AsyncTaskDownloadImage* DownloadImage(FString URL);// 0x55b047c 0x715ca84a00

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49b3300
	Margin Padding;//[Offset: 0x11c, Size: 0x10] 0x715caa0280
	byte HorizontalAlignment;//[Offset: 0x12c, Size: 0x1] 0x715caa0300
	byte VerticalAlignment;//[Offset: 0x12d, Size: 0x1] 0x715caa0380
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1] 0x715caa0400
	float BlurStrength;//[Offset: 0x130, Size: 0x4] 0x715caa0480
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1] 0x715caa0500
	float TintGrayScalar;//[Offset: 0x138, Size: 0x4] 0x715caa0580
	int BlurRadius;//[Offset: 0x13c, Size: 0x4] 0x715caa0600
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x140, Size: 0x88] 0x715caa0680
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55b0d78 0x715ca84300
	void SetTintGrayScalar(float InTintAlpha);// 0x55b0ad0 0x715ca843e0
	void SetPadding(Margin InPadding);// 0x55b0ec0 0x715ca844c0
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x55b090c 0x715ca845a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55b0e1c 0x715ca84680
	void SetBlurStrength(float InStrength);// 0x55b0b7c 0x715ca84760
	void SetBlurRadius(int InBlurRadius);// 0x55b0c28 0x715ca84840
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x55b0ccc 0x715ca84920

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object // 71a49b3080
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x715caa2080
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x715caa2100
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x715caa0080
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55b13cc 0x715ca84060
	void SetPadding(Margin InPadding);// 0x55b1514 0x715ca84140
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55b1470 0x715ca84220

--------------------------------
Class: BoolBinding.PropertyBinding.Object // 71a49b2e00
	bool GetValue();// 0x55b1930 0x715ca83f80

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object // 71a49b2900
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x715caa1b80
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x715caa1c00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x715caa1c80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55b2940 0x715ca83ce0
	void SetPadding(Margin InPadding);// 0x55b2a88 0x715ca83dc0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55b29e4 0x715ca83ea0

--------------------------------
Class: BrushBinding.PropertyBinding.Object // 71a49b2680
	SlateBrush GetValue();// 0x55b2f60 0x715ca83c00

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object // 71a49b2180
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x715caa2f00
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x715caa2f80
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x715caa3000
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55b3d7c 0x715ca86d00
	void SetPadding(Margin InPadding);// 0x55b3ec4 0x715ca86de0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55b3e20 0x715ca86ec0

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49b1c80
	enum CheckedState;//[Offset: 0x119, Size: 0x1] 0x715ca73f80
	delegate CheckedStateDelegate;//[Offset: 0x11c, Size: 0x10] 0x715caa3980
	CheckBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x580] 0x715caa3a00
	SlateWidgetStyleAsset* Style;//[Offset: 0x6b0, Size: 0x8] 0x715caa3a80
	SlateBrushAsset* UncheckedImage;//[Offset: 0x6b8, Size: 0x8] 0x715caa3b00
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6c0, Size: 0x8] 0x715caa3b80
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6c8, Size: 0x8] 0x715caa3c00
	SlateBrushAsset* CheckedImage;//[Offset: 0x6d0, Size: 0x8] 0x715caa3c80
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6d8, Size: 0x8] 0x715caa3d00
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6e0, Size: 0x8] 0x715caa3d80
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6e8, Size: 0x8] 0x715caa3e00
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6f0, Size: 0x8] 0x715caa3e80
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x6f8, Size: 0x8] 0x715caa3f00
	byte HorizontalAlignment;//[Offset: 0x700, Size: 0x1] 0x715caa3f80
	Margin Padding;//[Offset: 0x704, Size: 0x10] 0x715caa4000
	SlateColor BorderBackgroundColor;//[Offset: 0x718, Size: 0x28] 0x715caa4080
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 0x1] 0x715caa4100
	delegate OnCheckStateChanged;//[Offset: 0x748, Size: 0x10] 0x715caa4180
	void SetIsChecked(bool InIsChecked);// 0x55b5960 0x715ca858e0
	void SetCheckedState(enum InCheckedState);// 0x55b58bc 0x715ca859c0
	bool IsPressed();// 0x55b5a78 0x715ca85aa0
	bool IsChecked();// 0x55b5a40 0x715ca85b80
	enum GetCheckedState();// 0x55b5a0c 0x715ca85c60

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object // 71a49b1a00
	enum GetValue();// 0x55b5e30 0x715ca85800

--------------------------------
Class: CircularThrobber.Widget.Visual.Object // 71a49b1780
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x715caa3400
	float Period;//[Offset: 0x10c, Size: 0x4] 0x715caa3480
	float Radius;//[Offset: 0x110, Size: 0x4] 0x715caa3500
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 0x8] 0x715caa3580
	SlateBrush Image;//[Offset: 0x120, Size: 0x88] 0x715caa3600
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x715caa3680
	void SetRadius(float InRadius);// 0x55b6080 0x715ca88f20
	void SetPeriod(float InPeriod);// 0x55b6124 0x715ca89000
	void SetNumberOfPieces(int InNumberOfPieces);// 0x55b61c8 0x715ca85720

--------------------------------
Class: ColorBinding.PropertyBinding.Object // 71a49b1500
	SlateColor GetSlateValue();// 0x55b6568 0x715ca88d60
	LinearColor GetLinearValue();// 0x55b6530 0x715ca88e40

--------------------------------
Class: ComboBox.Widget.Visual.Object // 71a49b1280
	Object*[] Items;//[Offset: 0x108, Size: 0x10] 0x715ca73e40
	delegate OnGenerateWidgetEvent;//[Offset: 0x118, Size: 0x10] 0x715caa3200
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x715caa3280

--------------------------------
Class: DynamicEntryBoxBase.Widget.Visual.Object // 71a49b0b00
	enum EntryBoxType;//[Offset: 0x108, Size: 0x1] 0x715ca765a0
	Vector2D EntrySpacing;//[Offset: 0x10c, Size: 0x8] 0x715caa4d80
	Vector2D[] SpacingPattern;//[Offset: 0x118, Size: 0x10] 0x715ca76640
	SlateChildSize EntrySizeRule;//[Offset: 0x128, Size: 0x8] 0x715caa4e80
	byte EntryHorizontalAlignment;//[Offset: 0x130, Size: 0x1] 0x715caa4f00
	byte EntryVerticalAlignment;//[Offset: 0x131, Size: 0x1] 0x715caa4f80
	int MaxElementSize;//[Offset: 0x134, Size: 0x4] 0x715caa5000
	UserWidgetPool EntryWidgetPool;//[Offset: 0x148, Size: 0x80] 0x715caa5080
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0x55baa74 0x715ca88ac0
	int GetNumEntries();// 0x55bab24 0x715ca88ba0
	UserWidget*[] GetAllEntries();// 0x55bab58 0x715ca88c80

--------------------------------
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object // 71a49b0d80
	class UserWidget* EntryWidgetClass;//[Offset: 0x1c8, Size: 0x8] 0x715ca76460
	void Reset(bool bDeleteWidgets);// 0x55ba4e0 0x715ca88740
	void RemoveEntry(UserWidget* EntryWidget);// 0x55ba43c 0x715ca88820
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0x55ba35c 0x715ca88900
	UserWidget* BP_CreateEntry();// 0x55ba408 0x715ca889e0

--------------------------------
Class: ExpandableArea.Widget.Visual.Object // 71a49b0380
	ExpandableAreaStyle Style;//[Offset: 0x110, Size: 0x120] 0x715caa4480
	SlateBrush BorderBrush;//[Offset: 0x230, Size: 0x88] 0x715caa4500
	SlateColor BorderColor;//[Offset: 0x2b8, Size: 0x28] 0x715caa4580
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x715caa4600
	float MaxHeight;//[Offset: 0x2e4, Size: 0x4] 0x715caa4680
	Margin HeaderPadding;//[Offset: 0x2e8, Size: 0x10] 0x715caa4700
	Margin AreaPadding;//[Offset: 0x2f8, Size: 0x10] 0x715caa4780
	delegate OnExpansionChanged;//[Offset: 0x308, Size: 0x10] 0x715caa4800
	Widget* HeaderContent;//[Offset: 0x318, Size: 0x8] 0x715caa4880
	Widget* BodyContent;//[Offset: 0x320, Size: 0x8] 0x715caa4900
	void SetIsExpanded_Animated(bool IsExpanded);// 0x55bc990 0x715ca884a0
	void SetIsExpanded(bool IsExpanded);// 0x55bca3c 0x715ca88580
	bool GetIsExpanded();// 0x55bcae8 0x715ca88660

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle // 715da9c4c0
	SlateBrush CollapsedImage;//[Offset: 0x8, Size: 0x88] 0x715dab9500
	SlateBrush ExpandedImage;//[Offset: 0x90, Size: 0x88] 0x715dab9580
	float RolloutAnimationSeconds;//[Offset: 0x118, Size: 0x4] 0x715dab9600

--------------------------------
Class: FloatBinding.PropertyBinding.Object // 71a49b0100
	float GetValue();// 0x55bce08 0x715ca883c0

--------------------------------
Class: InputKeySelector.Widget.Visual.Object // 71a49b9980
	ButtonStyle WidgetStyle;//[Offset: 0x108, Size: 0x278] 0x715d7a6e80
	TextBlockStyle TextStyle;//[Offset: 0x380, Size: 0x268] 0x715d7a7380
	InputChord SelectedKey;//[Offset: 0x5e8, Size: 0x20] 0x715d7a5300
	SlateFontInfo Font;//[Offset: 0x608, Size: 0x50] 0x715d7a5380
	Margin Margin;//[Offset: 0x658, Size: 0x10] 0x715d7a5400
	LinearColor ColorAndOpacity;//[Offset: 0x668, Size: 0x10] 0x715d7a5480
	FText KeySelectionText;//[Offset: 0x678, Size: 0x18] 0x715d7a5500
	FText NoKeySpecifiedText;//[Offset: 0x690, Size: 0x18] 0x715d7a5580
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1] 0x715d7a5600
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 0x1] 0x715d7a5680
	Key[] EscapeKeys;//[Offset: 0x6b0, Size: 0x10] 0x7148cd9700
	delegate OnKeySelected;//[Offset: 0x6c0, Size: 0x10] 0x715d7a5780
	delegate OnIsSelectingKeyChanged;//[Offset: 0x6d0, Size: 0x10] 0x715d7a5800
	void SetTextBlockVisibility(const enum InVisibility);// 0x55c1a8c 0x715d79a880
	void SetSelectedKey(out const InputChord InSelectedKey);// 0x55c1fc0 0x715d79a960
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0x55c1cc0 0x715d79aa40
	void SetKeySelectionText(FText InKeySelectionText);// 0x55c1e40 0x715d79ab20
	void SetEscapeKeys(out const Key[] InKeys);// 0x55c1944 0x715d79ac00
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0x55c1c14 0x715d79ace0
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0x55c1b68 0x715d797400
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0x45c6aa0 0x715d7974e0
	void OnIsSelectingKeyChanged__DelegateSignature();// 0x45c6aa0 0x715d7975c0
	bool GetIsSelectingKey();// 0x55c1b30 0x715d7976a0

--------------------------------
Class: Int32Binding.PropertyBinding.Object // 71a49b9700
	int GetValue();// 0x55c2534 0x715ca87400

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49b9480
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x715caa7080
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x715caa7100
	void SetCanCache(bool CanCache);// 0x55c2784 0x715ca8ab20
	void InvalidateCache();// 0x55c2868 0x715ca8ac00
	bool GetCanCache();// 0x55c2830 0x715ca8ace0

--------------------------------
Class: UserListEntry.Interface.Object // 71a49b9200
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x45c6aa0 0x715ca8a880
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x45c6aa0 0x715ca8a960
	void BP_OnEntryReleased();// 0x45c6aa0 0x715ca8aa40

--------------------------------
Class: UserListEntryLibrary.BlueprintFunctionLibrary.Object // 71a49b8f80
	static bool IsListItemSelected(interface classNone UserListEntry);// 0x55c31dc 0x715ca8a5e0
	static bool IsListItemExpanded(interface classNone UserListEntry);// 0x55c3114 0x715ca8a6c0
	static ListViewBase* GetOwningListView(interface classNone UserListEntry);// 0x55c3050 0x715ca8a7a0

--------------------------------
Class: UserObjectListEntry.UserListEntry.Interface.Object // 71a49b8d00
	void OnListItemObjectSet(Object* ListItemObject);// 0x45c6aa0 0x715ca8a500

--------------------------------
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object // 71a49b8a80
	static Object* GetListItemObject(interface classNone UserObjectListEntry);// 0x55c39c8 0x715ca8a420

--------------------------------
Class: ListViewDesignerPreviewItem.Object // 71a49b8800

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49b8580
	class UserWidget* MenuClass;//[Offset: 0x120, Size: 0x8] 0x715ca76280
	delegate OnGetMenuContentEvent;//[Offset: 0x128, Size: 0x10] 0x715caa6400
	byte Placement;//[Offset: 0x138, Size: 0x1] 0x715caa6480
	bool bFitInWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x715caa6500
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1] 0x715caa6580
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1] 0x715caa6600
	delegate OnMenuOpenChanged;//[Offset: 0x140, Size: 0x10] 0x715caa6680
	void ToggleOpen(bool bFocusOnOpen);// 0x55c76ec 0x715ca89c40
	bool ShouldOpenDueToClick();// 0x55c75bc 0x715ca89d20
	void SetPlacement(byte InPlacement);// 0x55c7844 0x715ca89e00
	void Open(bool bFocusMenu);// 0x55c7640 0x715ca89ee0
	bool IsOpen();// 0x55c75f4 0x715ca89fc0
	bool HasOpenSubMenus();// 0x55c7550 0x715ca8a0a0
	Vector2D GetMenuPosition();// 0x55c7588 0x715ca8a180
	void FitInWindow(bool bFit);// 0x55c7798 0x715ca8a260
	void Close();// 0x55c762c 0x715ca8a340

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object // 71a49b8300
	byte GetValue();// 0x55c7dd4 0x715ca89b60

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49b8080
	MovieScene2DTransformMask TransformMask;//[Offset: 0xd8, Size: 0x4] 0x715caa8200
	MovieSceneFloatChannel Translation;//[Offset: 0xe0, Size: 0xa0] 0x715caa8280
	MovieSceneFloatChannel Rotation;//[Offset: 0x220, Size: 0xa0] 0x715caa8300
	MovieSceneFloatChannel Scale;//[Offset: 0x2c0, Size: 0xa0] 0x715caa8380
	MovieSceneFloatChannel Shear;//[Offset: 0x400, Size: 0xa0] 0x715caa8400

--------------------------------
Class: MovieScene2DTransformMask // 715dada600
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x715dafe000

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b7e00

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object // 71a49b7b80
	MovieSceneFloatChannel TopCurve;//[Offset: 0xd8, Size: 0xa0] 0x715caa8000
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x178, Size: 0xa0] 0x715caa8080
	MovieSceneFloatChannel RightCurve;//[Offset: 0x218, Size: 0xa0] 0x715caa8100
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x2b8, Size: 0xa0] 0x715caa8180

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b7900

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object // 71a49b7680
	FName[] BrushPropertyNamePath;//[Offset: 0x68, Size: 0x10] 0x715ca761e0
	FName TrackName;//[Offset: 0x78, Size: 0x8] 0x715caa7f80

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object // 71a49b7400
	FText Text;//[Offset: 0x128, Size: 0x18] 0x715d7a7980
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x715d7a7a00
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x715d7a7a80
	TextBlockStyle WidgetStyle;//[Offset: 0x168, Size: 0x268] 0x715d7a7b00
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1] 0x715d7a7b80
	SlateFontInfo Font;//[Offset: 0x3d8, Size: 0x50] 0x715d7a7c00
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1] 0x715d7a7c80
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 0x1] 0x715d7a7d00
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 0x1] 0x715d7a7d80
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 0x1] 0x715d7a7e00
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1] 0x715d7a7e80
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x42d, Size: 0x1] 0x715d7a7f00
	enum VirtualKeyboardDismissAction;//[Offset: 0x42e, Size: 0x1] 0x7148cd95c0
	delegate OnTextChanged;//[Offset: 0x430, Size: 0x10] 0x715d7a8000
	delegate OnTextCommitted;//[Offset: 0x440, Size: 0x10] 0x715d7a8080
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0x55c8bd4 0x715d7999a0
	void SetText(FText InText);// 0x55c8f90 0x715d799a80
	void SetIsReadOnly(bool bReadOnly);// 0x55c8c94 0x715d799b60
	void SetHintText(FText InHintText);// 0x55c8d40 0x715d799c40
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x45c6aa0 0x715d799d20
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x45c6aa0 0x715d799e00
	FText GetText();// 0x55c9110 0x715d799ee0
	FText GetHintText();// 0x55c8ec0 0x715d799fc0

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object // 71a49b7180
	FText Text;//[Offset: 0x128, Size: 0x18] 0x715d7a8d80
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x715d7a8e00
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x715d7a8e80
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x168, Size: 0x7f0] 0x715d7a8f00
	TextBlockStyle TextStyle;//[Offset: 0x958, Size: 0x268] 0x715d7a8f80
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 0x1] 0x715d7a9000
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc1, Size: 0x1] 0x715d7a9080
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xbc2, Size: 0x1] 0x715d7a9100
	enum VirtualKeyboardDismissAction;//[Offset: 0xbc3, Size: 0x1] 0x7148cd9520
	SlateWidgetStyleAsset* Style;//[Offset: 0xbc8, Size: 0x8] 0x715d7a9200
	SlateFontInfo Font;//[Offset: 0xbd0, Size: 0x50] 0x715d7a9280
	LinearColor ForegroundColor;//[Offset: 0xc20, Size: 0x10] 0x715d7a9300
	LinearColor BackgroundColor;//[Offset: 0xc30, Size: 0x10] 0x715d7a9380
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xc40, Size: 0x10] 0x715d7a9400
	delegate OnTextChanged;//[Offset: 0xc50, Size: 0x10] 0x715d7a9480
	delegate OnTextCommitted;//[Offset: 0xc60, Size: 0x10] 0x715d7a7400
	void SetTextStyle(out const TextBlockStyle InTextStyle);// 0x55c966c 0x715d7991c0
	void SetText(FText InText);// 0x55c9ba8 0x715d7992a0
	void SetIsReadOnly(bool bReadOnly);// 0x55c972c 0x715d799380
	void SetHintText(FText InHintText);// 0x55c9958 0x715d799460
	void SetError(FText InError);// 0x55c97d8 0x715d799540
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x45c6aa0 0x715d799620
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x45c6aa0 0x715d799700
	FText GetText();// 0x55c9d28 0x715d7997e0
	FText GetHintText();// 0x55c9ad8 0x715d7998c0

--------------------------------
Class: NamedSlotInterface.Interface.Object // 71a49b6c80

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object // 71a49b6a00

--------------------------------
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object // 71a49b5b00
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8] 0x715caa8500

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49b5880
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x715caaa200
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x715caaa280
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x715caaa300
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x715caaa380
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x55d136c 0x715ca8be60

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object // 71a49b5600
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715caa9f80
	Margin SafeAreaScale;//[Offset: 0x3c, Size: 0x10] 0x715caaa000
	byte HAlign;//[Offset: 0x4c, Size: 0x1] 0x715caaa080
	byte VAlign;//[Offset: 0x4d, Size: 0x1] 0x715caaa100
	Margin Padding;//[Offset: 0x50, Size: 0x10] 0x715caaa180

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object // 71a49bf600
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x715caa9880
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x715caa9900
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x715caa9980
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55d20a8 0x715ca8b840
	void SetPadding(Margin InPadding);// 0x55d21f0 0x715ca8b920
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55d214c 0x715ca8ba00

--------------------------------
Class: ScrollBar.Widget.Visual.Object // 71a49bf380
	ScrollBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x4d0] 0x715caab500
	SlateWidgetStyleAsset* Style;//[Offset: 0x5d8, Size: 0x8] 0x715caab580
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1] 0x715caa9500
	bool bAlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1] 0x715caa9580
	byte Orientation;//[Offset: 0x5e2, Size: 0x1] 0x715caa9600
	Vector2D Thickness;//[Offset: 0x5e4, Size: 0x8] 0x715caa9680
	Margin Padding;//[Offset: 0x5ec, Size: 0x10] 0x715caa9700
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0x55d26c8 0x715ca8b760

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object // 71a49bee80
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x715caac100
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x715caac180
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x715caac200
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55d3be4 0x715ca8dfa0
	void SetPadding(Margin InPadding);// 0x55d3d2c 0x715ca8e080
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55d3c88 0x715ca8e160

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object // 71a49be980
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x715caad300
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x715caad380
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x715caad400
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55d5050 0x715ca8cf00
	void SetPadding(Margin InPadding);// 0x55d5198 0x715ca8cfe0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55d50f4 0x715ca8d0c0

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a49be700
	static Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0x55d6124 0x715ca8f660
	static Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0x55d6218 0x715ca8f740
	static float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0x55d630c 0x715ca8f820
	static float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0x55d6404 0x715ca8f900
	static void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate, bool bIncludeWindowPosition);// 0x55d5900 0x715ca8f9e0
	static void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate, bool bIncludeWindowPosition);// 0x55d5790 0x715ca8fac0
	static void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0x55d5670 0x715ca8fba0
	static void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x55d5c34 0x715ca8fc80
	static Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0x55d6724 0x715ca8fd60
	static bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0x55d690c 0x715ca8fe40
	static Vector2D GetLocalTopLeft(out const Geometry Geometry);// 0x55d666c 0x715ca8ff20
	static Vector2D GetLocalSize(out const Geometry Geometry);// 0x55d65b4 0x715ca8caa0
	static Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0x55d64fc 0x715ca8cb80
	static bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0x55d5df8 0x715ca8cc60
	static void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x55d5ac0 0x715ca8cd40
	static Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0x55d6818 0x715ca8ce20

--------------------------------
Class: SlateVectorArtData.Object // 71a49be480
	SlateMeshVertex[] VertexData;//[Offset: 0x28, Size: 0x10] 0x715ca759c0
	uint32[] IndexData;//[Offset: 0x38, Size: 0x10] 0x715ca75a60
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8] 0x715caad900
	Vector2D ExtentMin;//[Offset: 0x50, Size: 0x8] 0x715caad980
	Vector2D ExtentMax;//[Offset: 0x58, Size: 0x8] 0x715caada00

--------------------------------
Class: SlateMeshVertex // 715dada180
	Vector2D Position;//[Offset: 0x0, Size: 0x8] 0x715daff580
	Color Color;//[Offset: 0x8, Size: 0x4] 0x715daff600
	Vector2D UV0;//[Offset: 0xc, Size: 0x8] 0x715daff680
	Vector2D UV1;//[Offset: 0x14, Size: 0x8] 0x715daff700
	Vector2D UV2;//[Offset: 0x1c, Size: 0x8] 0x715daff780
	Vector2D UV3;//[Offset: 0x24, Size: 0x8] 0x715dafd700
	Vector2D UV4;//[Offset: 0x2c, Size: 0x8] 0x715dafd780
	Vector2D UV5;//[Offset: 0x34, Size: 0x8] 0x715dafd800

--------------------------------
Class: SpinBox.Widget.Visual.Object // 71a49bda80
	float Value;//[Offset: 0x108, Size: 0x4] 0x715d7ab180
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x715d7ab200
	SpinBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x2e8] 0x715d7a9500
	SlateWidgetStyleAsset* Style;//[Offset: 0x408, Size: 0x8] 0x715d7a9580
	int MinFractionalDigits;//[Offset: 0x410, Size: 0x4] 0x715d7a9600
	int MaxFractionalDigits;//[Offset: 0x414, Size: 0x4] 0x715d7a9680
	bool bAlwaysUsesDeltaSnap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1] 0x715d7a9700
	float Delta;//[Offset: 0x41c, Size: 0x4] 0x715d7a9780
	float SliderExponent;//[Offset: 0x420, Size: 0x4] 0x715d7a9800
	SlateFontInfo Font;//[Offset: 0x428, Size: 0x50] 0x715d7a9880
	byte Justification;//[Offset: 0x478, Size: 0x1] 0x715d7a9900
	float MinDesiredWidth;//[Offset: 0x47c, Size: 0x4] 0x715d7a9980
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1] 0x715d7a9a00
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1] 0x715d7a9a80
	SlateColor ForegroundColor;//[Offset: 0x488, Size: 0x28] 0x715d7a9b00
	delegate OnValueChanged;//[Offset: 0x4b0, Size: 0x10] 0x715d7a9b80
	delegate OnValueCommitted;//[Offset: 0x4c0, Size: 0x10] 0x715d7a9c00
	delegate OnBeginSliderMovement;//[Offset: 0x4d0, Size: 0x10] 0x715d7a9c80
	delegate OnEndSliderMovement;//[Offset: 0x4e0, Size: 0x10] 0x715d7a9d00
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f0, Size: 0x1] 0x715d7a9d80
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f0, Size: 0x1] 0x715d7a9e00
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f0, Size: 0x1] 0x715d7a9e80
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f0, Size: 0x1] 0x715d7a9f00
	float MinValue;//[Offset: 0x4f4, Size: 0x4] 0x715d7a9f80
	float MaxValue;//[Offset: 0x4f8, Size: 0x4] 0x715d7aa000
	float MinSliderValue;//[Offset: 0x4fc, Size: 0x4] 0x715d7aa080
	float MaxSliderValue;//[Offset: 0x500, Size: 0x4] 0x715d7aa100
	void SetValue(float NewValue);// 0x55db0f8 0x715d79af80
	void SetMinValue(float NewValue);// 0x55dacb4 0x715d79b060
	void SetMinSliderValue(float NewValue);// 0x55daadc 0x715d79b140
	void SetMinFractionalDigits(int NewValue);// 0x55db020 0x715d79b220
	void SetMaxValue(float NewValue);// 0x55dabc8 0x715d79b300
	void SetMaxSliderValue(float NewValue);// 0x55da9f0 0x715d79b3e0
	void SetMaxFractionalDigits(int NewValue);// 0x55daf48 0x715d79b4c0
	void SetForegroundColor(SlateColor InForegroundColor);// 0x55da848 0x715d79b5a0
	void SetDelta(float NewValue);// 0x55dad8c 0x715d79b680
	void SetAlwaysUsesDeltaSnap(bool bNewValue);// 0x55dae64 0x715d79b760
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0x45c6aa0 0x715d79b840
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0x45c6aa0 0x715d79b920
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0x45c6aa0 0x715d79ba00
	float GetValue();// 0x55db19c 0x715d79bae0
	float GetMinValue();// 0x55dad58 0x715d79bbc0
	float GetMinSliderValue();// 0x55dab80 0x715d79bca0
	int GetMinFractionalDigits();// 0x55db0c4 0x715d79bd80
	float GetMaxValue();// 0x55dac6c 0x715d79be60
	float GetMaxSliderValue();// 0x55daa94 0x715d79bf40
	int GetMaxFractionalDigits();// 0x55dafec 0x715d79c020
	float GetDelta();// 0x55dae30 0x715d79c100
	bool GetAlwaysUsesDeltaSnap();// 0x55daf10 0x715d79c1e0
	void ClearMinValue();// 0x55daca0 0x715d79c2c0
	void ClearMinSliderValue();// 0x55daac8 0x715d79c3a0
	void ClearMaxValue();// 0x55dabb4 0x715d79c480
	void ClearMaxSliderValue();// 0x55da9dc 0x715d79c560

--------------------------------
Class: TextBinding.PropertyBinding.Object // 71a49bd800
	FText GetTextValue();// 0x55dbc14 0x715ca8eb00
	FString GetStringValue();// 0x55dbb64 0x715ca8ebe0

--------------------------------
Class: Throbber.Widget.Visual.Object // 71a49bd580
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x715caafc00
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x715caafc80
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x715caafd00
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x715caafd80
	SlateBrushAsset* PieceImage;//[Offset: 0x110, Size: 0x8] 0x715caafe00
	SlateBrush Image;//[Offset: 0x118, Size: 0x88] 0x715caafe80
	void SetNumberOfPieces(int InNumberOfPieces);// 0x55dd7d4 0x715ca8e780
	void SetAnimateVertically(bool bInAnimateVertically);// 0x55dd67c 0x715ca8e860
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0x55dd5d0 0x715ca8e940
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0x55dd728 0x715ca8ea20

--------------------------------
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object // 71a49bd080
	delegate BP_OnGetItemChildren;//[Offset: 0x870, Size: 0x10] 0x715cac1000
	delegate BP_OnItemExpansionChanged;//[Offset: 0x880, Size: 0x10] 0x715cac1080
	void SetItemExpansion(Object* Item, bool bExpandItem);// 0x55de050 0x715cab1900
	void ExpandAll();// 0x55de03c 0x715cab19e0
	void CollapseAll();// 0x55de028 0x715cab1ac0

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49bc400
	LinearColor BackgroundColor;//[Offset: 0x11c, Size: 0x10] 0x715cac0200
	Actor* Spawn(class Actor ActorClass);// 0x55ec0cc 0x715cab0a20
	void SetViewRotation(Rotator Rotation);// 0x55ec178 0x715cab0b00
	void SetViewLocation(Vector Location);// 0x55ec254 0x715cab0be0
	Rotator GetViewRotation();// 0x55ec21c 0x715cab0cc0
	World* GetViewportWorld();// 0x55ec330 0x715cab0da0
	Vector GetViewLocation();// 0x55ec2f8 0x715cab0e80

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object // 71a49bc180
	enum GetValue();// 0x55ec700 0x715cab0940

--------------------------------
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object // 71a49bbc80
	BlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x715ca756a0

--------------------------------
Class: BlueprintWidgetAnimationDelegateBinding // 715dad9e80
	enum Action;//[Offset: 0x0, Size: 0x1] 0x715dae4840
	FName AnimationToBind;//[Offset: 0x4, Size: 0x8] 0x715daff000
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x715daff080
	FName UserTag;//[Offset: 0x14, Size: 0x8] 0x715daff100

--------------------------------
Class: WidgetAnimationPlayCallbackProxy.Object // 71a49bb780
	delegate Finished;//[Offset: 0x28, Size: 0x10] 0x715cac1100
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x55f1730 0x715cab0080
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x55f19b4 0x715cab0160

--------------------------------
Class: WidgetBinding.PropertyBinding.Object // 71a49bb500
	Widget* GetValue();// 0x55f1fbc 0x715cab3960

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object // 71a49bb280
	WidgetTree* WidgetTree;//[Offset: 0x358, Size: 0x8] 0x715cac2500
	bool bAllowTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1] 0x715cac2580
	bool bAllowDynamicCreation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x360, Size: 0x1] 0x715cac2600
	bool bValidTemplate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x360, Size: 0x1] 0x715cac2680
	bool bTemplateInitialized;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x360, Size: 0x1] 0x715cac2700
	bool bCookedTemplate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x360, Size: 0x1] 0x715cac2780
	bool bClassRequiresNativeTick;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x360, Size: 0x1] 0x715cac2800
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x368, Size: 0x10] 0x715ca77b80
	WidgetAnimation*[] Animations;//[Offset: 0x378, Size: 0x10] 0x715ca752e0
	FName[] NamedSlots;//[Offset: 0x388, Size: 0x10] 0x715ca75380
	UserWidget* TemplateAsset;//[Offset: 0x398, Size: 0x28] 0x715cac2a00
	UserWidget* Template;//[Offset: 0x3c0, Size: 0x8] 0x715cac2a80

--------------------------------
Class: DelegateRuntimeBinding // 715dad9dc0
	FString ObjectName;//[Offset: 0x0, Size: 0x10] 0x715dafed00
	FName PropertyName;//[Offset: 0x10, Size: 0x8] 0x715dafed80
	FName FunctionName;//[Offset: 0x18, Size: 0x8] 0x715dafee00
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0x28] 0x715dafee80
	enum Kind;//[Offset: 0x48, Size: 0x1] 0x715dae47a0

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a49bad80
	static EventReply UnlockMouse(out EventReply Reply);// 0x55f57ac 0x715d7961a0
	static EventReply Unhandled();// 0x55f5c8c 0x715d796280
	static void SetWindowTitleBarState(Widget* TitleBarContent, enum Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);// 0x55f27b8 0x715d796360
	static void SetWindowTitleBarOnCloseClickedDelegate(delegate Delegate);// 0x55f2700 0x715d796440
	static void SetWindowTitleBarCloseButtonActive(bool bActive);// 0x55f2664 0x715d796520
	static EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0x55f5604 0x715d796600
	static EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0x55f503c 0x715d7966e0
	static void SetInputMode_UIOnlyEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode);// 0x55f6aa0 0x715d7967c0
	static void SetInputMode_UIOnly(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x55f6bb8 0x715d7968a0
	static void SetInputMode_GameOnly(PlayerController* PlayerController);// 0x55f6730 0x715d796980
	static void SetInputMode_GameAndUIEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0x55f67c4 0x715d796a60
	static void SetInputMode_GameAndUI(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x55f6928 0x715d796b40
	static bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0x55f2984 0x715d796c20
	static void SetFocusToGameViewport();// 0x55f671c 0x715d796d00
	static void SetColorVisionDeficiencyType(enum Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);// 0x55f2af0 0x715d796de0
	static void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0x55f3cb4 0x715d796ec0
	static void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0x55f3ab8 0x715d796fa0
	static void RestorePreviousWindowTitleBarState();// 0x55f27a4 0x715d797080
	static EventReply ReleaseMouseCapture(out EventReply Reply);// 0x55f5a1c 0x715d797160
	static EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0x55f5194 0x715d797240
	void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();// 0x45c6aa0 0x715d797320
	static SlateBrush NoResourceBrush();// 0x55f398c 0x715d793a40
	static SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0x55f45ec 0x715d793b20
	static SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0x55f43fc 0x715d793c00
	static SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0x55f47dc 0x715d793ce0
	static EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0x55f58c0 0x715d793dc0
	static bool IsDragDropping();// 0x55f4990 0x715d793ea0
	static EventReply Handled();// 0x55f5cfc 0x715d793f80
	static void GetSafeZonePadding(Object* WorldContextObject, out Vector4 SafePadding, out Vector2D SafePaddingScale, out Vector4 SpillOverPadding);// 0x55f2c6c 0x715d794060
	static KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0x55f311c 0x715d794140
	static InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0x55f2edc 0x715d794220
	static InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0x55f2e00 0x715d794300
	static InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0x55f3358 0x715d7943e0
	static InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0x55f3040 0x715d7944c0
	static MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0x55f37c8 0x715d7945a0
	static DragDropOperation* GetDragDroppingContent();// 0x55f495c 0x715d794680
	static Texture2D* GetBrushResourceAsTexture2D(out const SlateBrush Brush);// 0x55f4074 0x715d794760
	static MaterialInterface* GetBrushResourceAsMaterial(out const SlateBrush Brush);// 0x55f3eb0 0x715d794840
	static Object* GetBrushResource(out const SlateBrush Brush);// 0x55f4238 0x715d794920
	static void GetAllWidgetsWithInterface(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class Interface Interface, bool TopLevelOnly);// 0x55f349c 0x715d794a00
	static void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0x55f3628 0x715d794ae0
	static EventReply EndDragDrop(out EventReply Reply);// 0x55f49c8 0x715d794bc0
	static void DrawTextFormatted(out PaintContext Context, out const FText Text, Vector2D Position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0x55f5d6c 0x715d794ca0
	static void DrawText(out PaintContext Context, FString inString, Vector2D Position, LinearColor Tint);// 0x55f6010 0x715d794d80
	static void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x55f6188 0x715d794e60
	static void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x55f6370 0x715d794f40
	static void DrawBox(out PaintContext Context, Vector2D Position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0x55f6570 0x715d795020
	static void DismissAllMenus();// 0x55f37b4 0x715d795100
	static EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0x55f4adc 0x715d7951e0
	static EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0x55f4dbc 0x715d7952c0
	static DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0x55f6cd8 0x715d7953a0
	static UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0x55f6d7c 0x715d795480
	static EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0x55f52f8 0x715d795560
	static EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0x55f5b30 0x715d795640
	static EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0x55f545c 0x715d791d60
	static void CancelDragDrop();// 0x55f4948 0x715d791e40

--------------------------------
Class: NavigationEvent.InputEvent // 7149069d00

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object // 71a49bab00
	delegate OnHoveredWidgetChanged;//[Offset: 0x1f0, Size: 0x10] 0x715cac3300
	int VirtualUserIndex;//[Offset: 0x210, Size: 0x4] 0x715cac3380
	float PointerIndex;//[Offset: 0x214, Size: 0x4] 0x715cac3400
	byte TraceChannel;//[Offset: 0x218, Size: 0x1] 0x715cac3480
	float InteractionDistance;//[Offset: 0x21c, Size: 0x4] 0x715cac3500
	enum InteractionSource;//[Offset: 0x220, Size: 0x1] 0x715ca77ae0
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x715cac3600
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1] 0x715cac3680
	LinearColor DebugColor;//[Offset: 0x224, Size: 0x10] 0x715cac3700
	HitResult CustomHitResult;//[Offset: 0x2b0, Size: 0x88] 0x715cac3780
	Vector2D LocalHitLocation;//[Offset: 0x338, Size: 0x8] 0x715cac3800
	Vector2D LastLocalHitLocation;//[Offset: 0x340, Size: 0x8] 0x715cac3880
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x348, Size: 0x8] 0x715cac3900
	HitResult LastHitResult;//[Offset: 0x350, Size: 0x88] 0x715cac3980
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x715cac3a00
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 0x1] 0x715cac3a80
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 0x1] 0x715cac3b00
	void SetFocus(Widget* FocusWidget);// 0x55fb55c 0x715cab2c40
	void SetCustomHitResult(out const HitResult HitResult);// 0x55fb600 0x715cab2d20
	bool SendKeyChar(FString Characters, bool bRepeat);// 0x55fb8ec 0x715cab2e00
	void ScrollWheel(float ScrollDelta);// 0x55fb840 0x715cab2ee0
	void ReleasePointerKey(Key Key);// 0x55fbf54 0x715cab2fc0
	bool ReleaseKey(Key Key);// 0x55fbbe0 0x715cab30a0
	void PressPointerKey(Key Key);// 0x55fc0dc 0x715cab3180
	bool PressKey(Key Key, bool bRepeat);// 0x55fbd74 0x715cab3260
	bool PressAndReleaseKey(Key Key);// 0x55fba4c 0x715cab3340
	bool IsOverInteractableWidget();// 0x55fb7d4 0x715cab3420
	bool IsOverHitTestVisibleWidget();// 0x55fb764 0x715cab3500
	bool IsOverFocusableWidget();// 0x55fb79c 0x715cab35e0
	HitResult GetLastHitResult();// 0x55fb704 0x715cab36c0
	WidgetComponent* GetHoveredWidgetComponent();// 0x55fb80c 0x715cab37a0
	Vector2D Get2DHitLocation();// 0x55fb6d0 0x715cab3880

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object // 71a49ba880
	static WrapBoxSlot* SlotAsWrapBoxSlot(Widget* Widget);// 0x55fca94 0x715cab52c0
	static WidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(Widget* Widget);// 0x55fc9f0 0x715cab53a0
	static VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0x55fcdc8 0x715cab5480
	static UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0x55fce6c 0x715cab5560
	static SizeBoxSlot* SlotAsSizeBoxSlot(Widget* Widget);// 0x55fcb38 0x715cab5640
	static ScrollBoxSlot* SlotAsScrollBoxSlot(Widget* Widget);// 0x55fcd24 0x715cab1d60
	static ScaleBoxSlot* SlotAsScaleBoxSlot(Widget* Widget);// 0x55fcbdc 0x715cab1e40
	static SafeZoneSlot* SlotAsSafeBoxSlot(Widget* Widget);// 0x55fcc80 0x715cab1f20
	static OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0x55fcf10 0x715cab2000
	static HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0x55fcfb4 0x715cab20e0
	static GridSlot* SlotAsGridSlot(Widget* Widget);// 0x55fd058 0x715cab21c0
	static CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0x55fd0fc 0x715cab22a0
	static BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0x55fd1a0 0x715cab2380
	static void RemoveAllWidgets(Object* WorldContextObject);// 0x55fc95c 0x715cab2460
	static bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x55fd714 0x715cab2540
	static Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0x55fd51c 0x715cab2620
	static Vector2D GetViewportSize(Object* WorldContextObject);// 0x55fd5cc 0x715cab2700
	static float GetViewportScale(Object* WorldContextObject);// 0x55fd670 0x715cab27e0
	static Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0x55fd46c 0x715cab28c0
	static bool GetMousePositionScaledByDPI(PlayerController* Player, out float LocationX, out float LocationY);// 0x55fd244 0x715cab29a0
	static Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0x55fd394 0x715cab2a80
	static Vector2D GetMousePositionOnPlatform();// 0x55fd438 0x715cab2b60

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object // 71a49bfb00
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x715cac7380
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x715cac5300
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x715cac5380
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x55ff9e0 0x715cab4ae0
	void SetPadding(Margin InPadding);// 0x55ffb28 0x715cab4bc0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x55ffa84 0x715cab4ca0

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object // 71a49c5100
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x715cac7080
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x715cac7100
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x5600358 0x715cab4840
	void SetPadding(Margin InPadding);// 0x56004a0 0x715cab4920
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x56003fc 0x715cab4a00

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object // 71a49c4e80
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x715cac6d80
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x715cac6e00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x715cac6e80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x5600818 0x715cab45a0
	void SetPadding(Margin InPadding);// 0x5600960 0x715cab4680
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x56008bc 0x715cab4760

--------------------------------
Class: CameraRig_Crane.Actor.Object // 71a49c4700
	float CranePitch;//[Offset: 0x220, Size: 0x4] 0x715cac8200
	float CraneYaw;//[Offset: 0x224, Size: 0x4] 0x715cac8280
	float CraneArmLength;//[Offset: 0x228, Size: 0x4] 0x715cac8300
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1] 0x715cac8380
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1] 0x715cac8400
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8] 0x715cac6380
	SceneComponent* CraneYawControl;//[Offset: 0x238, Size: 0x8] 0x715cac6400
	SceneComponent* CranePitchControl;//[Offset: 0x240, Size: 0x8] 0x715cac6480
	SceneComponent* CraneCameraMount;//[Offset: 0x248, Size: 0x8] 0x715cac6500

--------------------------------
Class: CameraRig_Rail.Actor.Object // 71a49c4480
	float CurrentPositionOnRail;//[Offset: 0x220, Size: 0x4] 0x715cac7f00
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1] 0x715cac7f80
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 0x8] 0x715cac8000
	SplineComponent* RailSplineComponent;//[Offset: 0x230, Size: 0x8] 0x715cac8080
	SceneComponent* RailCameraMount;//[Offset: 0x238, Size: 0x8] 0x715cac8100
	SplineComponent* GetRailSplineComponent();// 0x56051a4 0x715cab3ea0

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object // 71a49c4200
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x8a0, Size: 0x50] 0x715cac7980
	CineCameraComponent* GetCineCameraComponent();// 0x560551c 0x715cab3ce0

--------------------------------
Class: CameraLookatTrackingSettings // 715dad9880
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715daffc00
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715daffc80
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4] 0x715daffd00
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28] 0x715daffd80
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc] 0x715daffe00
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x715daffe80

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object // 71a49c3d00
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x8c0, Size: 0xc] 0x715cac8f00
	CameraFilmbackSettings Filmback;//[Offset: 0x8cc, Size: 0xc] 0x715cac8f80
	CameraLensSettings LensSettings;//[Offset: 0x8d8, Size: 0x18] 0x715cac9000
	CameraFocusSettings FocusSettings;//[Offset: 0x8f0, Size: 0x58] 0x715cac9080
	float CurrentFocalLength;//[Offset: 0x948, Size: 0x4] 0x715cac9100
	float CurrentAperture;//[Offset: 0x94c, Size: 0x4] 0x715cac9180
	float CurrentFocusDistance;//[Offset: 0x950, Size: 0x4] 0x715cac9200
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x960, Size: 0x10] 0x715ca77900
	NamedLensPreset[] LensPresets;//[Offset: 0x970, Size: 0x10] 0x715ca779a0
	FString DefaultFilmbackPresetName;//[Offset: 0x980, Size: 0x10] 0x715cac9380
	FString DefaultFilmbackPreset;//[Offset: 0x990, Size: 0x10] 0x715cac9400
	FString DefaultLensPresetName;//[Offset: 0x9a0, Size: 0x10] 0x715cac9480
	float DefaultLensFocalLength;//[Offset: 0x9b0, Size: 0x4] 0x715cac7400
	float DefaultLensFStop;//[Offset: 0x9b4, Size: 0x4] 0x715cac7480
	void SetLensPresetByName(FString InPresetName);// 0x56060b8 0x715cab6ec0
	void SetFilmbackPresetByName(FString InPresetName);// 0x5606218 0x715cab6fa0
	void SetCurrentFocalLength(out const float InFocalLength);// 0x56064cc 0x715cab7080
	float GetVerticalFieldOfView();// 0x5606464 0x715cab7160
	static NamedLensPreset[] GetLensPresetsCopy();// 0x5605fa0 0x715cab7240
	FString GetLensPresetName();// 0x5606168 0x715cab7320
	float GetHorizontalFieldOfView();// 0x5606498 0x715cab3a40
	FString GetFilmbackPresetName();// 0x56063b4 0x715cab3b20
	FString GetDefaultFilmbackPresetName();// 0x56062c8 0x715cab3c00

--------------------------------
Class: NamedLensPreset // 715dad9640
	FString Name;//[Offset: 0x0, Size: 0x10] 0x715db00b80
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18] 0x715db00f00

--------------------------------
Class: CameraLensSettings // 715dad9580
	float MinFocalLength;//[Offset: 0x0, Size: 0x4] 0x715db00c00
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4] 0x715db00c80
	float MinFStop;//[Offset: 0x8, Size: 0x4] 0x715db00d00
	float MaxFStop;//[Offset: 0xc, Size: 0x4] 0x715db00d80
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4] 0x715db00e00
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4] 0x715db00e80

--------------------------------
Class: CameraFilmbackSettings // 715dadc580
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x715db00980
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x715db00a00
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4] 0x715db00a80

--------------------------------
Class: CameraFocusSettings // 715dad97c0
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x715dae4340
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x715db01000
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38] 0x715daff900
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x715daff980
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4] 0x715daffa00
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x715daffa80
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x715daffb00
	float FocusOffset;//[Offset: 0x50, Size: 0x4] 0x715daffb80

--------------------------------
Class: CameraTrackingFocusSettings // 715dad9700
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28] 0x715db01080
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc] 0x715daff800
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x715daff880

--------------------------------
Class: NamedFilmbackPreset // 715dad94c0
	FString Name;//[Offset: 0x0, Size: 0x10] 0x715db00900
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc] 0x715db00b00

--------------------------------
Class: AudioGenerator.Object // 71a49c2680

--------------------------------
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a49c2400
	static float TrimAudioCache(float InMegabytesToFree);// 0x5665ec8 0x715cab5aa0
	static SoundWave* StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundSubmix* SubmixToRecord, SoundWave* ExistingSoundWaveToOverwrite);// 0x5666ce4 0x715cab5b80
	static void StopAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToStopAnalyzing);// 0x5666884 0x715cab5c60
	static void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration, SoundSubmix* SubmixToRecord);// 0x5666f48 0x715cab5d40
	static void StartAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToAnalyze, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize);// 0x5666958 0x715cab5e20
	static void SetBypassSourceEffectChainEntry(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex, bool bBypassed);// 0x56661c4 0x715cab5f00
	static void ResumeRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x5666b3c 0x715cab5fe0
	static void ReplaceSoundEffectSubmix(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x5667138 0x715cab60c0
	static void RemoveSubmixEffectPresetAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0x5667294 0x715cab61a0
	static void RemoveSubmixEffectPreset(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x56673ac 0x715cab6280
	static void RemoveSourceEffectFromPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex);// 0x5666324 0x715cab6360
	static void RemoveMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x5667680 0x715cab6440
	static void PrimeSoundForPlayback(SoundWave* SoundWave, const delegate OnLoadCompletion);// 0x5666000 0x715cab6520
	static void PrimeSoundCueForPlayback(SoundCue* SoundCue);// 0x5665f6c 0x715cab6600
	static void PauseRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x5666c10 0x715cab66e0
	static void GetPhaseForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Phases, SoundSubmix* SubmixToAnalyze);// 0x566654c 0x715cab67c0
	static int GetNumberOfEntriesInSourceEffectChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain);// 0x56660e0 0x715cab68a0
	static void GetMagnitudeForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Magnitudes, SoundSubmix* SubmixToAnalyze);// 0x56666e8 0x715cab6980
	static void ClearSubmixEffects(const Object* WorldContextObject, SoundSubmix* SoundSubmix);// 0x5667064 0x715cab6a60
	static void ClearMasterSubmixEffects(const Object* WorldContextObject);// 0x56675ec 0x715cab6b40
	static int AddSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x56674c4 0x715cab6c20
	static void AddSourceEffectToPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, SourceEffectChainEntry Entry);// 0x566643c 0x715cab6d00
	static void AddMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x5667754 0x715cab6de0

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object // 71a49c2180
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0xb8, Size: 0x50] 0x715cacab80
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings Settings);// 0x5668568 0x715cab58e0
	void SetExternalSubmix(SoundSubmix* Submix);// 0x5668678 0x715cab59c0

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings // 715dadc280
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x715dae40c0
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x715dae4160
	enum LinkMode;//[Offset: 0x2, Size: 0x1] 0x715dae4200
	float InputGainDb;//[Offset: 0x4, Size: 0x4] 0x715db01d00
	float ThresholdDb;//[Offset: 0x8, Size: 0x4] 0x715db01d80
	float Ratio;//[Offset: 0xc, Size: 0x4] 0x715db01e00
	float KneeBandwidthDb;//[Offset: 0x10, Size: 0x4] 0x715db01e80
	float LookAheadMsec;//[Offset: 0x14, Size: 0x4] 0x715db01f00
	float AttackTimeMsec;//[Offset: 0x18, Size: 0x4] 0x715db01f80
	float ReleaseTimeMsec;//[Offset: 0x1c, Size: 0x4] 0x715db02000
	SoundSubmix* ExternalSubmix;//[Offset: 0x20, Size: 0x8] 0x715db02080
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x715db02100
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x715db00080
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x715db00100
	float KeyGainDb;//[Offset: 0x2c, Size: 0x4] 0x715db00180
	float OutputGainDb;//[Offset: 0x30, Size: 0x4] 0x715db00200
	SubmixEffectDynamicProcessorFilterSettings KeyHighshelf;//[Offset: 0x34, Size: 0xc] 0x715db00280
	SubmixEffectDynamicProcessorFilterSettings KeyLowshelf;//[Offset: 0x40, Size: 0xc] 0x715db00480

--------------------------------
Class: SubmixEffectDynamicProcessorFilterSettings // 715dadc1c0
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715db00300
	float Cutoff;//[Offset: 0x4, Size: 0x4] 0x715db00380
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x715db00400

--------------------------------
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object // 71a49c1a00
	SubmixEffectSubmixEQSettings Settings;//[Offset: 0x78, Size: 0x10] 0x715cacaa80
	void SetSettings(out const SubmixEffectSubmixEQSettings InSettings);// 0x5668cb8 0x715cab5800

--------------------------------
Class: SubmixEffectSubmixEQSettings // 715dadc100
	SubmixEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x715dae4020

--------------------------------
Class: SubmixEffectEQBand // 715dadc040
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x715db01900
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x715db01980
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x715db01a00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x715db01a80

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object // 71a49c1780
	SubmixEffectReverbSettings Settings;//[Offset: 0x98, Size: 0x34] 0x715caca800
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0x5669114 0x715cab9000
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0x566923c 0x715cab5720

--------------------------------
Class: SubmixEffectReverbSettings // 715dadbf80
	float Density;//[Offset: 0x0, Size: 0x4] 0x715db01280
	float Diffusion;//[Offset: 0x4, Size: 0x4] 0x715db01300
	float Gain;//[Offset: 0x8, Size: 0x4] 0x715db01380
	float GainHF;//[Offset: 0xc, Size: 0x4] 0x715db01400
	float DecayTime;//[Offset: 0x10, Size: 0x4] 0x715db01480
	float DecayHFRatio;//[Offset: 0x14, Size: 0x4] 0x715db01500
	float ReflectionsGain;//[Offset: 0x18, Size: 0x4] 0x715db01580
	float ReflectionsDelay;//[Offset: 0x1c, Size: 0x4] 0x715db01600
	float LateGain;//[Offset: 0x20, Size: 0x4] 0x715db01680
	float LateDelay;//[Offset: 0x24, Size: 0x4] 0x715db01700
	float AirAbsorptionGainHF;//[Offset: 0x28, Size: 0x4] 0x715db01780
	float WetLevel;//[Offset: 0x2c, Size: 0x4] 0x715db01800
	float DryLevel;//[Offset: 0x30, Size: 0x4] 0x715db01880

--------------------------------
Class: SubmixEffectReverbFastPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object // 71a49c1500
	SubmixEffectReverbFastSettings Settings;//[Offset: 0x9c, Size: 0x38] 0x715caca580
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0x5669760 0x715cab8e40
	void SetSettings(out const SubmixEffectReverbFastSettings InSettings);// 0x5669888 0x715cab8f20

--------------------------------
Class: SubmixEffectReverbFastSettings // 715dadbec0
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715db02c80
	float Density;//[Offset: 0x4, Size: 0x4] 0x715db02d00
	float Diffusion;//[Offset: 0x8, Size: 0x4] 0x715db02d80
	float Gain;//[Offset: 0xc, Size: 0x4] 0x715db02e00
	float GainHF;//[Offset: 0x10, Size: 0x4] 0x715db02e80
	float DecayTime;//[Offset: 0x14, Size: 0x4] 0x715db02f00
	float DecayHFRatio;//[Offset: 0x18, Size: 0x4] 0x715db02f80
	float ReflectionsGain;//[Offset: 0x1c, Size: 0x4] 0x715db03000
	float ReflectionsDelay;//[Offset: 0x20, Size: 0x4] 0x715db03080
	float LateGain;//[Offset: 0x24, Size: 0x4] 0x715db03100
	float LateDelay;//[Offset: 0x28, Size: 0x4] 0x715db03180
	float AirAbsorptionGainHF;//[Offset: 0x2c, Size: 0x4] 0x715db01100
	float WetLevel;//[Offset: 0x30, Size: 0x4] 0x715db01180
	float DryLevel;//[Offset: 0x34, Size: 0x4] 0x715db01200

--------------------------------
Class: AndroidRuntimeSettings.Object // 71a49c0880
	FString PackageName;//[Offset: 0x28, Size: 0x10] 0x715cad0e80
	int StoreVersion;//[Offset: 0x38, Size: 0x4] 0x715cad0f00
	int StoreVersionOffsetArmV7;//[Offset: 0x3c, Size: 0x4] 0x715cad0f80
	int StoreVersionOffsetArm64;//[Offset: 0x40, Size: 0x4] 0x715cad1000
	int StoreVersionOffsetX8664;//[Offset: 0x44, Size: 0x4] 0x715cad1080
	FString ApplicationDisplayName;//[Offset: 0x48, Size: 0x10] 0x715cacf800
	FString VersionDisplayName;//[Offset: 0x58, Size: 0x10] 0x715cacf880
	int MinSDKVersion;//[Offset: 0x68, Size: 0x4] 0x715cacf900
	int TargetSDKVersion;//[Offset: 0x6c, Size: 0x4] 0x715cacf980
	byte InstallLocation;//[Offset: 0x70, Size: 0x1] 0x715cacfa00
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x715cacfa80
	bool bEnableLint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1] 0x715cacfb00
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1] 0x715cacfb80
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x715cacfc00
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x715cacfc80
	bool bForceSmallOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1] 0x715cacfd00
	bool bAllowLargeOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1] 0x715cacfd80
	bool bAllowPatchOBBFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x715cacfe00
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x715cacfe80
	bool bPublicLogFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x715cacff00
	byte Orientation;//[Offset: 0x7b, Size: 0x1] 0x715cacff80
	float MaxAspectRatio;//[Offset: 0x7c, Size: 0x4] 0x715cace780
	bool bUseDisplayCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x715cace800
	bool bRestoreNotificationsOnReboot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x715cace880
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1] 0x715cace900
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1] 0x715cace980
	byte DepthBufferPreference;//[Offset: 0x84, Size: 0x1] 0x715cacea00
	bool bValidateTextureFormats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x715cacea80
	bool bEnableBundle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1] 0x715caceb00
	bool bEnableUniversalAPK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1] 0x715caceb80
	bool bBundleABISplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715cacec00
	bool bBundleLanguageSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x715cacec80
	bool bBundleDensitySplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x715caced00
	FString[] ExtraManifestNodeTags;//[Offset: 0x90, Size: 0x10] 0x715ca76780
	FString[] ExtraApplicationNodeTags;//[Offset: 0xa0, Size: 0x10] 0x715ca76820
	FString ExtraApplicationSettings;//[Offset: 0xb0, Size: 0x10] 0x715cacee80
	FString[] ExtraActivityNodeTags;//[Offset: 0xc0, Size: 0x10] 0x715ca768c0
	FString ExtraActivitySettings;//[Offset: 0xd0, Size: 0x10] 0x715cacef80
	FString[] ExtraPermissions;//[Offset: 0xe0, Size: 0x10] 0x715ca76960
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x715cacf080
	byte[] PackageForOculusMobile;//[Offset: 0xf8, Size: 0x10] 0x715ca76a00
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x715cacf180
	byte[] GoogleVRCaps;//[Offset: 0x110, Size: 0x10] 0x715ca76aa0
	bool bGoogleVRSustainedPerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x715cacf280
	FString KeyStore;//[Offset: 0x128, Size: 0x10] 0x715cacf300
	FString KeyAlias;//[Offset: 0x138, Size: 0x10] 0x715cacf380
	FString KeyStorePassword;//[Offset: 0x148, Size: 0x10] 0x715cacf400
	FString KeyPassword;//[Offset: 0x158, Size: 0x10] 0x715cacf480
	bool bBuildForArmV7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1] 0x715cacf500
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1] 0x715cacf580
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1] 0x715cacf600
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1] 0x715cacf680
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1] 0x715cacf700
	bool bSupportsVulkanSM5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1] 0x715cacf780
	bool bAndroidOpenGLSupportsBackbufferSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1] 0x715cacd700
	bool bDetectVulkanByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1] 0x715cacd780
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1] 0x715cacd800
	bool bSaveSymbols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1] 0x715cacd880
	bool bForceLDLinker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1] 0x715cacd900
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1] 0x715cacd980
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1] 0x715cacda00
	FString GamesAppID;//[Offset: 0x178, Size: 0x10] 0x715cacda80
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x188, Size: 0x10] 0x715ca76b40
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x198, Size: 0x10] 0x715ca76be0
	bool bEnableSnapshots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x715cacdc00
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1] 0x715cacdc80
	FString AdMobAdUnitID;//[Offset: 0x1b0, Size: 0x10] 0x715cacdd00
	FString[] AdMobAdUnitIDs;//[Offset: 0x1c0, Size: 0x10] 0x715ca76c80
	FString GooglePlayLicenseKey;//[Offset: 0x1d0, Size: 0x10] 0x715cacde00
	FString GCMClientSenderID;//[Offset: 0x1e0, Size: 0x10] 0x715cacde80
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1] 0x715cacdf00
	bool bAllowIMU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1] 0x715cacdf80
	bool bAllowControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1] 0x715cace000
	bool bBlockAndroidKeysOnControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1] 0x715cace080
	bool bControllersBlockDeviceFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1] 0x715cace100
	byte AndroidAudio;//[Offset: 0x1f5, Size: 0x1] 0x715cace180
	int AudioSampleRate;//[Offset: 0x1f8, Size: 0x4] 0x715cace200
	int AudioCallbackBufferFrameSize;//[Offset: 0x1fc, Size: 0x4] 0x715cace280
	int AudioNumBuffersToEnqueue;//[Offset: 0x200, Size: 0x4] 0x715cace300
	int AudioMaxChannels;//[Offset: 0x204, Size: 0x4] 0x715cace380
	int AudioNumSourceWorkers;//[Offset: 0x208, Size: 0x4] 0x715cace400
	FString SpatializationPlugin;//[Offset: 0x210, Size: 0x10] 0x715cace480
	FString ReverbPlugin;//[Offset: 0x220, Size: 0x10] 0x715cace500
	FString OcclusionPlugin;//[Offset: 0x230, Size: 0x10] 0x715cace580
	PlatformRuntimeAudioCompressionOverrides CompressionOverrides;//[Offset: 0x240, Size: 0x10] 0x715cace600
	bool bUseAudioStreamCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x715cace680
	int CacheSizeKB;//[Offset: 0x254, Size: 0x4] 0x715cace700
	bool bResampleForDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x715cacc680
	int SoundCueCookQualityIndex;//[Offset: 0x25c, Size: 0x4] 0x715cacc700
	float MaxSampleRate;//[Offset: 0x260, Size: 0x4] 0x715cacc780
	float HighSampleRate;//[Offset: 0x264, Size: 0x4] 0x715cacc800
	float MedSampleRate;//[Offset: 0x268, Size: 0x4] 0x715cacc880
	float LowSampleRate;//[Offset: 0x26c, Size: 0x4] 0x715cacc900
	float MinSampleRate;//[Offset: 0x270, Size: 0x4] 0x715cacc980
	float CompressionQualityModifier;//[Offset: 0x274, Size: 0x4] 0x715cacca00
	float AutoStreamingThreshold;//[Offset: 0x278, Size: 0x4] 0x715cacca80
	byte AndroidGraphicsDebugger;//[Offset: 0x27c, Size: 0x1] 0x715caccb00
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x280, Size: 0x10] 0x715caccb80
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1] 0x715caccc00
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1] 0x715caccc80
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1] 0x715caccd00
	float TextureFormatPriority_ETC2;//[Offset: 0x294, Size: 0x4] 0x715caccd80
	float TextureFormatPriority_DXT;//[Offset: 0x298, Size: 0x4] 0x715cacce00
	float TextureFormatPriority_ASTC;//[Offset: 0x29c, Size: 0x4] 0x715cacce80
	FString SDKAPILevelOverride;//[Offset: 0x2a0, Size: 0x10] 0x715caccf00
	FString NDKAPILevelOverride;//[Offset: 0x2b0, Size: 0x10] 0x715caccf80

--------------------------------
Class: GooglePlayAchievementMapping // 715dadbd40
	FString Name;//[Offset: 0x0, Size: 0x10] 0x715db02a80
	FString AchievementID;//[Offset: 0x10, Size: 0x10] 0x715db02b00

--------------------------------
Class: GooglePlayLeaderboardMapping // 715dadbe00
	FString Name;//[Offset: 0x0, Size: 0x10] 0x715db02b80
	FString LeaderboardID;//[Offset: 0x10, Size: 0x10] 0x715db02c00

--------------------------------
Class: PlatformRuntimeAudioCompressionOverrides // 715dadc4c0
	bool bOverrideCompressionTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715db00700
	float DurationThreshold;//[Offset: 0x4, Size: 0x4] 0x715db00780
	int MaxNumRandomBranches;//[Offset: 0x8, Size: 0x4] 0x715db00800
	int SoundCueQualityIndex;//[Offset: 0xc, Size: 0x4] 0x715db00880

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object // 71a49c0600
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10] 0x715ca79020

--------------------------------
Class: NetAnalyticsDataConfig // 715dadbc80
	FName DataName;//[Offset: 0x0, Size: 0x8] 0x715db02980
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715db02a00

--------------------------------
Class: AssetRegistryHelpers.Object // 71a49c0100
	static SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0x56d8c08 0x715cab82e0
	static ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0x56d81fc 0x715cab83c0
	static bool IsValid(out const AssetData InAssetData);// 0x56d9130 0x715cab84a0
	static bool IsUAsset(out const AssetData InAssetData);// 0x56d9008 0x715cab8580
	static bool IsRedirector(out const AssetData InAssetData);// 0x56d8ee0 0x715cab8660
	static bool IsAssetLoaded(out const AssetData InAssetData);// 0x56d8898 0x715cab8740
	static bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0x56d8554 0x715cab8820
	static FString GetFullName(out const AssetData InAssetData);// 0x56d8d78 0x715cab8900
	static FString GetExportTextName(out const AssetData InAssetData);// 0x56d8730 0x715cab89e0
	static class Object GetClass(out const AssetData InAssetData);// 0x56d8ae4 0x715cab8ac0
	static interface classNone GetAssetRegistry();// 0x56d9480 0x715cab8ba0
	static Object* GetAsset(out const AssetData InAssetData);// 0x56d89c0 0x715cab8c80
	static AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0x56d9258 0x715cab8d60

--------------------------------
Class: ARFilter // 715dadbbc0
	FName[] PackageNames;//[Offset: 0x0, Size: 0x10] 0x715dae6640
	FName[] PackagePaths;//[Offset: 0x10, Size: 0x10] 0x715dae66e0
	FName[] ObjectPaths;//[Offset: 0x20, Size: 0x10] 0x715dae3e40
	FName[] ClassNames;//[Offset: 0x30, Size: 0x10] 0x715dae3ee0
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x90, Size: 0x50] 0x715dae3f80
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x715db02800
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x715db02880
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x715db02900

--------------------------------
Class: TagAndValue // 715dadb8c0
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x715db04100
	FString Value;//[Offset: 0x8, Size: 0x10] 0x715db04180

--------------------------------
Class: AssetRegistry.Interface.Object // 71a49ca380
	void UseFilterToExcludeAssets(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x56da160 0x715cabac00
	void SearchAllAssets(bool bSynchronousSearch);// 0x56d9e24 0x715cabace0
	void ScanPathsSynchronous(out const FString[] InPaths, bool bForceRescan);// 0x56da01c 0x715cab7400
	void ScanModifiedAssetFiles(out const FString[] InFilePaths);// 0x56d9c70 0x715cab74e0
	void ScanFilesSynchronous(out const FString[] InFilePaths, bool bForceRescan);// 0x56d9ed8 0x715cab75c0
	void RunAssetsThroughFilter(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x56da364 0x715cab76a0
	void PrioritizeSearchPath(FString PathToPrioritize);// 0x56d9d6c 0x715cab7780
	bool K2_GetReferencers(FName PackageName, out const AssetRegistryDependencyOptions ReferenceOptions, out FName[] OutReferencers);// 0x56da7fc 0x715cab7860
	bool K2_GetDependencies(FName PackageName, out const AssetRegistryDependencyOptions DependencyOptions, out FName[] OutDependencies);// 0x56da96c 0x715cab7940
	bool IsLoadingAssets();// 0x56d9c30 0x715cab7a20
	bool HasAssets(const FName PackagePath, const bool bRecursive);// 0x56db70c 0x715cab7b00
	void GetSubPaths(FString InBasePath, out FString[] OutPathList, bool bInRecurse);// 0x56da568 0x715cab7be0
	bool GetAssetsByPath(FName PackagePath, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0x56db2cc 0x715cab7cc0
	bool GetAssetsByPackageName(FName PackageName, out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x56db514 0x715cab7da0
	bool GetAssetsByClass(FName ClassName, out AssetData[] OutAssetData, bool bSearchSubClasses);// 0x56db0d4 0x715cab7e80
	bool GetAssets(out const ARFilter Filter, out AssetData[] OutAssetData);// 0x56daec4 0x715cab7f60
	AssetData GetAssetByObjectPath(const FName ObjectPath, bool bIncludeOnlyOnDiskAssets);// 0x56dac8c 0x715cab8040
	void GetAllCachedPaths(out FString[] OutPathList);// 0x56da700 0x715cab8120
	bool GetAllAssets(out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x56daadc 0x715cab8200

--------------------------------
Class: AssetRegistryDependencyOptions // 715dadb800
	bool bIncludeSoftPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715db03e80
	bool bIncludeHardPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715db03f00
	bool bIncludeSearchableNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715db03f80
	bool bIncludeSoftManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x715db04000
	bool bIncludeHardManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x715db04080

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object // 71a49ca100
	static bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x56f2b6c 0x715cab91c0
	static bool NotEqual_TagTag(GameplayTag A, FString B);// 0x56f1f00 0x715cab92a0
	static bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0x56f1d78 0x715cab9380
	static bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x56f27b8 0x715cab9460
	static bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x56f38d4 0x715cab9540
	static bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0x56f3bfc 0x715cab9620
	static bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x56f3aa4 0x715cab9700
	static GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0x56f26a8 0x715cab97e0
	static GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0x56f36d4 0x715cab98c0
	static GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0x56f2288 0x715cab99a0
	static GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0x56f24fc 0x715cab9a80
	static GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0x56f25c4 0x715cab9b60
	static bool IsTagQueryEmpty(out const GameplayTagQuery TagQuery);// 0x56f3098 0x715cab9c40
	static bool IsGameplayTagValid(GameplayTag GameplayTag);// 0x56f382c 0x715cab9d20
	static bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0x56f34a4 0x715cab9e00
	static bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x56f3314 0x715cab9ee0
	static bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x56f3184 0x715cab9fc0
	static bool HasAllMatchingGameplayTags(interface classNone TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0x56f2158 0x715caba0a0
	static FName GetTagName(out const GameplayTag GameplayTag);// 0x56f3778 0x715caba180
	static int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0x56f3604 0x715caba260
	static FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0x56f1c64 0x715caba340
	static FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0x56f1b74 0x715caba420
	static void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0x56f2d88 0x715caba500
	static bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x56f28f8 0x715caba5e0
	static bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x56f39bc 0x715caba6c0
	static bool DoesTagAssetInterfaceHaveTag(interface classNone TagContainerInterface, GameplayTag Tag);// 0x56f204c 0x715caba7a0
	static bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0x56f2f40 0x715caba880
	static void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0x56f23d8 0x715caba960
	static void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0x56f2a38 0x715cabaa40
	static void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x56f2c80 0x715cabab20

--------------------------------
Class: GameplayTagAssetInterface.Interface.Object // 71a49c9e80
	bool HasMatchingGameplayTag(GameplayTag TagToCheck);// 0x56f4cac 0x715cabc800
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x56f4ae4 0x715cabc8e0
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x56f4bc8 0x715cabc9c0
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0x56f4d64 0x715cab90e0

--------------------------------
Class: EditableGameplayTagQuery.Object // 71a49c9c00
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x715cad5d00
	EditableGameplayTagQueryExpression* RootExpression;//[Offset: 0x48, Size: 0x8] 0x715cad5d80
	GameplayTagQuery TagQueryExportText_Helper;//[Offset: 0x50, Size: 0x48] 0x715cad5e00

--------------------------------
Class: EditableGameplayTagQueryExpression.Object // 71a49c9980

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object // 71a49c9700
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x715cad5c80

--------------------------------
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object // 71a49c9480
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x715cad5c00

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object // 71a49c9200
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x715cad5b80

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object // 71a49c8f80
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x715ca78300

--------------------------------
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object // 71a49c8d00
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x715ca78260

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object // 71a49c8a80
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x715ca781c0

--------------------------------
Class: GameplayTagsDeveloperSettings.Object // 71a49c7e00
	FString DeveloperConfigName;//[Offset: 0x28, Size: 0x10] 0x715cad7200

--------------------------------
Class: PacketHandlerProfileConfig.Object // 71a49c7900
	FString[] Components;//[Offset: 0x28, Size: 0x10] 0x715ca7a4c0

--------------------------------
Class: MeshDescription.Object // 71a49c7680

--------------------------------
Class: ClothConfigBase.Object // 71a49c6f00

--------------------------------
Class: ClothSharedSimConfigBase.Object // 71a49c6c80

--------------------------------
Class: ClothPhysicalMeshDataBase_Legacy.Object // 71a49c6280
	Vector[] Vertices;//[Offset: 0x28, Size: 0x10] 0x715ca7b320
	Vector[] Normals;//[Offset: 0x38, Size: 0x10] 0x715ca7b3c0
	uint32[] Indices;//[Offset: 0x48, Size: 0x10] 0x715ca7b460
	float[] InverseMasses;//[Offset: 0x58, Size: 0x10] 0x715ca7b500
	ClothVertBoneData[] BoneData;//[Offset: 0x68, Size: 0x10] 0x715ca7b5a0
	int NumFixedVerts;//[Offset: 0x78, Size: 0x4] 0x715cadd400
	int MaxBoneWeights;//[Offset: 0x7c, Size: 0x4] 0x715cadd480
	uint32[] SelfCollisionIndices;//[Offset: 0x80, Size: 0x10] 0x715ca7b640

--------------------------------
Class: ClothVertBoneData // 715dadd240
	int NumInfluences;//[Offset: 0x0, Size: 0x4] 0x715db07080
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2] 0x715db07100
	float BoneWeights;//[Offset: 0x1c, Size: 0x4] 0x715db07180

--------------------------------
Class: EyeTrackerFunctionLibrary.BlueprintFunctionLibrary.Object // 71a49c6000
	static void SetEyeTrackedPlayer(PlayerController* PlayerController);// 0x57a8634 0x715cae1660
	static bool IsStereoGazeDataAvailable();// 0x57a8848 0x715cae1740
	static bool IsEyeTrackerConnected();// 0x57a8880 0x715cae1820
	static bool GetStereoGazeData(out EyeTrackerStereoGazeData OutGazeData);// 0x57a86c8 0x715cae1900
	static bool GetGazeData(out EyeTrackerGazeData OutGazeData);// 0x57a8788 0x715cae19e0

--------------------------------
Class: EyeTrackerStereoGazeData // 715dadd180
	Vector LeftEyeOrigin;//[Offset: 0x0, Size: 0xc] 0x715db06d80
	Vector LeftEyeDirection;//[Offset: 0xc, Size: 0xc] 0x715db06e00
	Vector RightEyeOrigin;//[Offset: 0x18, Size: 0xc] 0x715db06e80
	Vector RightEyeDirection;//[Offset: 0x24, Size: 0xc] 0x715db06f00
	Vector FixationPoint;//[Offset: 0x30, Size: 0xc] 0x715db06f80
	float ConfidenceValue;//[Offset: 0x3c, Size: 0x4] 0x715db07000

--------------------------------
Class: EyeTrackerGazeData // 715dadd0c0
	Vector GazeOrigin;//[Offset: 0x0, Size: 0xc] 0x715db06b80
	Vector GazeDirection;//[Offset: 0xc, Size: 0xc] 0x715db06c00
	Vector FixationPoint;//[Offset: 0x18, Size: 0xc] 0x715db06c80
	float ConfidenceValue;//[Offset: 0x24, Size: 0x4] 0x715db06d00

--------------------------------
Class: JsonUtilitiesDummyObject.Object // 71a49c5d80

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object // 71a49c5880
	static void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x57cd4e0 0x715cae12e0
	static void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x57cd66c 0x715cae13c0
	static void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x57cd7f8 0x715cae14a0

--------------------------------
Class: MediaCaptureDevice // 715dadcdc0
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x715db06480
	FString URL;//[Offset: 0x18, Size: 0x10] 0x715db06500

--------------------------------
Class: MediaComponent.ActorComponent.Object // 71a49c5600
	MediaTexture* MediaTexture;//[Offset: 0xb0, Size: 0x8] 0x715cadc780
	MediaPlayer* MediaPlayer;//[Offset: 0xb8, Size: 0x8] 0x715cadc800
	MediaTexture* GetMediaTexture();// 0x57cdc64 0x715cae1120
	MediaPlayer* GetMediaPlayer();// 0x57cdc98 0x715cae1200

--------------------------------
Class: PlatformMediaSource.MediaSource.Object // 71a49cee80
	MediaSource* MediaSource;//[Offset: 0x80, Size: 0x8] 0x715caf3600

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object // 71a49cec00
	FString StreamUrl;//[Offset: 0x88, Size: 0x10] 0x715caf3580

--------------------------------
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object // 71a49ce980
	bool bUseTimeSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715caf3400
	int FrameDelay;//[Offset: 0x8c, Size: 0x4] 0x715caf3480
	double TimeDelay;//[Offset: 0x90, Size: 0x8] 0x715caf3500

--------------------------------
Class: DefaultLevelSequenceInstanceData.Object // 71a49ce700
	Actor* TransformOriginActor;//[Offset: 0x30, Size: 0x8] 0x715caf3300
	Transform TransformOrigin;//[Offset: 0x40, Size: 0x30] 0x715caf3380

--------------------------------
Class: LevelSequenceMetaData.Interface.Object // 71a49ce480

--------------------------------
Class: LevelSequenceDirector.Object // 71a49cd800
	LevelSequencePlayer* Player;//[Offset: 0x28, Size: 0x8] 0x715caf5000
	void OnCreated();// 0x45c6aa0 0x715cae6440

--------------------------------
Class: LegacyLevelSequenceDirectorBlueprint.Blueprint.BlueprintCore.Object // 71a49cd580

--------------------------------
Class: LevelSequenceMediaController.Actor.Object // 71a49cd080
	LevelSequenceActor* Sequence;//[Offset: 0x228, Size: 0x8] 0x715caf4980
	MediaComponent* MediaComponent;//[Offset: 0x230, Size: 0x8] 0x715caf4a00
	float ServerStartTimeSeconds;//[Offset: 0x238, Size: 0x4] 0x715caf4a80
	void SynchronizeToServer(float DesyncThresholdSeconds);// 0x57e86ac 0x715cae5e20
	void Play();// 0x57e8788 0x715cae5f00
	void OnRep_ServerStartTimeSeconds();// 0x57e8698 0x715cae5fe0
	LevelSequenceActor* GetSequence();// 0x57e8750 0x715cae60c0
	MediaComponent* GetMediaComponent();// 0x57e876c 0x715cae61a0

--------------------------------
Class: MovieSceneCaptureProtocolBase.Object // 71a49cc900
	enum State;//[Offset: 0x50, Size: 0x1] 0x715ca7a6a0
	bool IsCapturing();// 0x58012bc 0x715cae5c60
	enum GetState();// 0x5801304 0x715cae5d40

--------------------------------
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49ccb80

--------------------------------
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cce00

--------------------------------
Class: MasterAudioSubmixCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cc680
	FString Filename;//[Offset: 0x58, Size: 0x10] 0x715caf4780

--------------------------------
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cc180

--------------------------------
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cc400
	CompositionGraphCapturePasses IncludeRenderPasses;//[Offset: 0x58, Size: 0x10] 0x715caf4400
	bool bCaptureFramesInHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715caf4480
	int HDRCompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x715caf4500
	byte CaptureGamut;//[Offset: 0x70, Size: 0x1] 0x715caf4580
	SoftObjectPath PostProcessingMaterial;//[Offset: 0x78, Size: 0x18] 0x715caf4600
	bool bDisableScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x715caf4680
	MaterialInterface* PostProcessingMaterialPtr;//[Offset: 0x98, Size: 0x8] 0x715caf4700

--------------------------------
Class: CompositionGraphCapturePasses // 715dadf580
	FString[] Value;//[Offset: 0x0, Size: 0x10] 0x715dae5420

--------------------------------
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cbf00

--------------------------------
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cbc80

--------------------------------
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cba00
	int CompressionQuality;//[Offset: 0xd8, Size: 0x4] 0x715caf4380

--------------------------------
Class: ImageSequenceProtocol_BMP.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cb780

--------------------------------
Class: ImageSequenceProtocol_PNG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cb500

--------------------------------
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cb280

--------------------------------
Class: ImageSequenceProtocol_EXR.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cb000
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x715caf4280
	byte CaptureGamut;//[Offset: 0xd9, Size: 0x1] 0x715caf4300

--------------------------------
Class: MovieSceneCaptureInterface.Interface.Object // 71a49cad80

--------------------------------
Class: MovieSceneCapture.Object // 71a49ca880
	SoftClassPath ImageCaptureProtocolType;//[Offset: 0x38, Size: 0x18] 0x715caf5e00
	SoftClassPath AudioCaptureProtocolType;//[Offset: 0x50, Size: 0x18] 0x715caf5e80
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol;//[Offset: 0x68, Size: 0x8] 0x715caf5f00
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol;//[Offset: 0x70, Size: 0x8] 0x715caf5f80
	MovieSceneCaptureSettings Settings;//[Offset: 0x78, Size: 0x70] 0x715caf6000
	bool bUseSeparateProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x715caf6080
	bool bCloseEditorWhenCaptureStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x715caf6100
	FString AdditionalCommandLineArguments;//[Offset: 0xf0, Size: 0x10] 0x715caf6180
	FString InheritedCommandLineArguments;//[Offset: 0x100, Size: 0x10] 0x715caf6200
	void SetImageCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x5800664 0x715cae58e0
	void SetAudioCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x58005c0 0x715cae59c0
	MovieSceneCaptureProtocolBase* GetImageCaptureProtocol();// 0x5800724 0x715cae5aa0
	MovieSceneCaptureProtocolBase* GetAudioCaptureProtocol();// 0x5800708 0x715cae5b80

--------------------------------
Class: MovieSceneCaptureSettings // 715dadf400
	DirectoryPath OutputDirectory;//[Offset: 0x0, Size: 0x10] 0x715db09680
	class GameModeBase* GameModeOverride;//[Offset: 0x10, Size: 0x8] 0x715dae5380
	FString OutputFormat;//[Offset: 0x18, Size: 0x10] 0x715db09700
	bool bOverwriteExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715db09780
	bool bUseRelativeFrameNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715db09800
	int HandleFrames;//[Offset: 0x2c, Size: 0x4] 0x715db09880
	FString MovieExtension;//[Offset: 0x30, Size: 0x10] 0x715db09900
	byte ZeroPadFrameNumbers;//[Offset: 0x40, Size: 0x1] 0x715db09980
	FrameRate FrameRate;//[Offset: 0x44, Size: 0x8] 0x715db09a00
	bool bUseCustomFrameRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x715db09a80
	FrameRate CustomFrameRate;//[Offset: 0x50, Size: 0x8] 0x715db09b00
	CaptureResolution Resolution;//[Offset: 0x58, Size: 0x8] 0x715db09c80
	bool bEnableTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715db09d00
	bool bCinematicEngineScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x715db09d80
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1] 0x715db09e00
	bool bAllowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1] 0x715db09e80
	bool bAllowTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x715db09f00
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x715db09f80
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x715db0a000
	bool bUsePathTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x715db0a080
	int PathTracerSamplePerPixel;//[Offset: 0x68, Size: 0x4] 0x715db0a100

--------------------------------
Class: CaptureResolution // 715dadf340
	int ResX;//[Offset: 0x0, Size: 0x4] 0x715db09b80
	int ResY;//[Offset: 0x4, Size: 0x4] 0x715db09c00

--------------------------------
Class: LevelCapture.MovieSceneCapture.Object // 71a49cab00
	bool bAutoStartCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x715caf5d00
	Guid PrerequisiteActorId;//[Offset: 0x22c, Size: 0x10] 0x715caf5d80

--------------------------------
Class: MovieSceneCaptureEnvironment.Object // 71a49ca600
	static bool IsCaptureInProgress();// 0x5800cf4 0x715cae8e40
	static int GetCaptureFrameNumber();// 0x5800d60 0x715cae8f20
	static float GetCaptureElapsedTime();// 0x5800d2c 0x715cae9000
	static MovieSceneImageCaptureProtocolBase* FindImageCaptureProtocol();// 0x5800cc0 0x715cae5720
	static MovieSceneAudioCaptureProtocolBase* FindAudioCaptureProtocol();// 0x5800c8c 0x715cae5800

--------------------------------
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cfd80
	World* World;//[Offset: 0x58, Size: 0x8] 0x715caf5480
	void StopCapturingFinalPixels();// 0x5801d8c 0x715cae8040
	void StartCapturingFinalPixels(out const CapturedPixelsID StreamID);// 0x5801da0 0x715cae8120
	void ResolveBuffer(Texture* Buffer, out const CapturedPixelsID BufferID);// 0x5801e7c 0x715cae8200
	void OnWarmUp();// 0x45c6aa0 0x715cae82e0
	void OnTick();// 0x45c6aa0 0x715cae83c0
	void OnStartCapture();// 0x45c6aa0 0x715cae84a0
	bool OnSetup();// 0x5801fd4 0x715cae8580
	void OnPreTick();// 0x45c6aa0 0x715cae8660
	void OnPixelsReceived(out const CapturedPixels Pixels, out const CapturedPixelsID ID, FrameMetrics FrameMetrics);// 0x45c6aa0 0x715cae8740
	void OnPauseCapture();// 0x45c6aa0 0x715cae8820
	void OnFinalize();// 0x45c6aa0 0x715cae8900
	void OnCaptureFrame();// 0x45c6aa0 0x715cae89e0
	bool OnCanFinalize();// 0x5801f94 0x715cae8ac0
	void OnBeginFinalize();// 0x45c6aa0 0x715cae8ba0
	FrameMetrics GetCurrentFrameMetrics();// 0x5801c60 0x715cae8c80
	FString GenerateFilename(out const FrameMetrics InFrameMetrics);// 0x5801c7c 0x715cae8d60

--------------------------------
Class: CapturedPixelsID // 715dadf100
	<FName,FName> Identifiers;//[Offset: 0x0, Size: 0x50] 0x715dadf040

--------------------------------
Class: CapturedPixels // 715dadf1c0

--------------------------------
Class: FrameMetrics // 715dadf4c0
	float TotalElapsedTime;//[Offset: 0x0, Size: 0x4] 0x715db0a180
	float FrameDelta;//[Offset: 0x4, Size: 0x4] 0x715db0a200
	int FrameNumber;//[Offset: 0x8, Size: 0x4] 0x715db0a280
	int NumDroppedFrames;//[Offset: 0xc, Size: 0x4] 0x715db0a300

--------------------------------
Class: UserDefinedImageCaptureProtocol.UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cfb00
	enum Format;//[Offset: 0xd8, Size: 0x1] 0x715ca7ce00
	bool bEnableCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x715caf7080
	int CompressionQuality;//[Offset: 0xdc, Size: 0x4] 0x715caf7100
	void WriteImageToDisk(out const CapturedPixels PixelData, out const CapturedPixelsID StreamID, out const FrameMetrics FrameMetrics, bool bCopyImageData);// 0x5802b70 0x715cae7da0
	FString GenerateFilenameForCurrentFrame();// 0x5802d94 0x715cae7e80
	FString GenerateFilenameForBuffer(Texture* Buffer, out const CapturedPixelsID StreamID);// 0x5802e44 0x715cae7f60

--------------------------------
Class: VideoCaptureProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object // 71a49cf880
	bool bUseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715caf6f00
	float CompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x715caf6f80

--------------------------------
Class: MoviePlayerSettings.Object // 71a49d5100
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715caf6d80
	bool bMoviesAreSkippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715caf6e00
	FString[] StartupMovies;//[Offset: 0x30, Size: 0x10] 0x715ca7cd60

--------------------------------
Class: Overlays.Object // 71a4aef100

--------------------------------
Class: BasicOverlays.Overlays.Object // 71a4aef380
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 0x10] 0x715cc82220

--------------------------------
Class: OverlayItem // 715ce79f40
	Timespan StartTime;//[Offset: 0x0, Size: 0x8] 0x715cea4b00
	Timespan EndTime;//[Offset: 0x8, Size: 0x8] 0x715cea4b80
	FString Text;//[Offset: 0x10, Size: 0x10] 0x715cea4c00
	Vector2D Position;//[Offset: 0x20, Size: 0x8] 0x715cea4c80

--------------------------------
Class: LocalizedOverlays.Overlays.Object // 71a4aeee80
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 0x8] 0x715cc99280
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 0x50] 0x715cecfdc0

--------------------------------
Class: BuildPatchManifest.Object // 71a4aeec00
	byte ManifestFileVersion;//[Offset: 0x28, Size: 0x1] 0x715cc98b80
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715cc98c00
	uint32 AppId;//[Offset: 0x2c, Size: 0x4] 0x715cc98c80
	FString AppName;//[Offset: 0x30, Size: 0x10] 0x715cc98d00
	FString BuildVersion;//[Offset: 0x40, Size: 0x10] 0x715cc98d80
	FString LaunchExe;//[Offset: 0x50, Size: 0x10] 0x715cc98e00
	FString LaunchCommand;//[Offset: 0x60, Size: 0x10] 0x715cc98e80
	<FString> PrereqIds;//[Offset: 0x70, Size: 0x50] 0x715cc81fa0
	FString PrereqName;//[Offset: 0xc0, Size: 0x10] 0x715cc98f80
	FString PrereqPath;//[Offset: 0xd0, Size: 0x10] 0x715cc99000
	FString PrereqArgs;//[Offset: 0xe0, Size: 0x10] 0x715cc99080
	FileManifestData[] FileManifestList;//[Offset: 0xf0, Size: 0x10] 0x715cc82040
	ChunkInfoData[] ChunkList;//[Offset: 0x100, Size: 0x10] 0x715cc820e0
	CustomFieldData[] CustomFields;//[Offset: 0x110, Size: 0x10] 0x715cc82180

--------------------------------
Class: FileManifestData // 715ce79e80
	FString Filename;//[Offset: 0x0, Size: 0x10] 0x715cea4500
	SHAHashData FileHash;//[Offset: 0x10, Size: 0x14] 0x715cea4600
	ChunkPartData[] FileChunkParts;//[Offset: 0x28, Size: 0x10] 0x715ce90740
	FString[] InstallTags;//[Offset: 0x38, Size: 0x10] 0x715ce907e0
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cea4900
	FString SymlinkTarget;//[Offset: 0x50, Size: 0x10] 0x715cea4980
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715cea4a00
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x715cea4a80

--------------------------------
Class: SHAHashData // 715ce79d00
	byte Hash;//[Offset: 0x0, Size: 0x1] 0x715cea4580

--------------------------------
Class: ChunkPartData // 715ce79dc0
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x715cea4680
	uint32 Offset;//[Offset: 0x10, Size: 0x4] 0x715cea4700
	uint32 Size;//[Offset: 0x14, Size: 0x4] 0x715cea4780

--------------------------------
Class: ChunkInfoData // 715ce79c40
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x715cea4280
	uint64 Hash;//[Offset: 0x10, Size: 0x8] 0x715cea4300
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14] 0x715cea4380
	int64 FileSize;//[Offset: 0x30, Size: 0x8] 0x715cea4400
	byte GroupNumber;//[Offset: 0x38, Size: 0x1] 0x715cea4480

--------------------------------
Class: CustomFieldData // 715ce79b80
	FString Key;//[Offset: 0x0, Size: 0x10] 0x715cea6280
	FString Value;//[Offset: 0x10, Size: 0x10] 0x715cea6300

--------------------------------
Class: ClothConfigCommon.ClothConfigBase.Object // 71a4aee980

--------------------------------
Class: ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object // 71a4aee700

--------------------------------
Class: ClothingAssetCustomData.Object // 71a4aee480

--------------------------------
Class: ClothingAssetCommon.ClothingAssetBase.Object // 71a4aee200
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 0x8] 0x715cc98480
	<FName,ClothConfigBase*> ClothConfigs;//[Offset: 0x50, Size: 0x50] 0x715cecfd00
	ClothConfigBase* ClothSharedSimConfig;//[Offset: 0xa0, Size: 0x8] 0x715cc98600
	ClothConfigBase* ClothSimConfig;//[Offset: 0xa8, Size: 0x8] 0x715cc98680
	ClothConfigBase* ChaosClothSimConfig;//[Offset: 0xb0, Size: 0x8] 0x715cc98700
	ClothLODDataCommon_Legacy*[] ClothLODData;//[Offset: 0xb8, Size: 0x10] 0x715cc81c80
	ClothLODDataCommon[] LODData;//[Offset: 0xc8, Size: 0x10] 0x715cc81d20
	int[] LodMap;//[Offset: 0xd8, Size: 0x10] 0x715cc81dc0
	FName[] UsedBoneNames;//[Offset: 0xe8, Size: 0x10] 0x715cc81e60
	int[] UsedBoneIndices;//[Offset: 0xf8, Size: 0x10] 0x715cc81f00
	int ReferenceBoneIndex;//[Offset: 0x108, Size: 0x4] 0x715cc98a00
	ClothingAssetCustomData* CustomData;//[Offset: 0x110, Size: 0x8] 0x715cc98a80
	ClothConfig_Legacy ClothConfig;//[Offset: 0x118, Size: 0xd4] 0x715cc98b00

--------------------------------
Class: ClothLODDataCommon_Legacy.Object // 71a4aedf80
	ClothPhysicalMeshDataBase_Legacy* PhysicalMeshData;//[Offset: 0x28, Size: 0x8] 0x715cc9a400
	ClothPhysicalMeshData ClothPhysicalMeshData;//[Offset: 0x30, Size: 0xf8] 0x715cc9a480
	ClothCollisionData CollisionData;//[Offset: 0x128, Size: 0x40] 0x715cc9a500

--------------------------------
Class: ClothPhysicalMeshData // 715ce79880
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10] 0x715ce92900
	Vector[] Normals;//[Offset: 0x10, Size: 0x10] 0x715ce90060
	uint32[] Indices;//[Offset: 0x20, Size: 0x10] 0x715ce90100
	<uint32,PointWeightMap> WeightMaps;//[Offset: 0x30, Size: 0x50] 0x715ce797c0
	float[] InverseMasses;//[Offset: 0x80, Size: 0x10] 0x715ce90240
	ClothVertBoneData[] BoneData;//[Offset: 0x90, Size: 0x10] 0x715ce902e0
	int MaxBoneWeights;//[Offset: 0xa0, Size: 0x4] 0x715cea6f80
	int NumFixedVerts;//[Offset: 0xa4, Size: 0x4] 0x715cea7000
	uint32[] SelfCollisionIndices;//[Offset: 0xa8, Size: 0x10] 0x715ce90380
	float[] MaxDistances;//[Offset: 0xb8, Size: 0x10] 0x715ce90420
	float[] BackstopDistances;//[Offset: 0xc8, Size: 0x10] 0x715ce904c0
	float[] BackstopRadiuses;//[Offset: 0xd8, Size: 0x10] 0x715ce90560
	float[] AnimDriveMultipliers;//[Offset: 0xe8, Size: 0x10] 0x715ce90600

--------------------------------
Class: PointWeightMap // 715ce79700
	float[] Values;//[Offset: 0x0, Size: 0x10] 0x715ce901a0

--------------------------------
Class: ClothCollisionData // 715dadd600
	ClothCollisionPrim_Sphere[] Spheres;//[Offset: 0x0, Size: 0x10] 0x715dae5a60
	ClothCollisionPrim_SphereConnection[] SphereConnections;//[Offset: 0x10, Size: 0x10] 0x715dae5b00
	ClothCollisionPrim_Convex[] Convexes;//[Offset: 0x20, Size: 0x10] 0x715dae5ce0
	ClothCollisionPrim_Box[] Boxes;//[Offset: 0x30, Size: 0x10] 0x715dae5d80

--------------------------------
Class: ClothCollisionPrim_Sphere // 715dadd300
	int BoneIndex;//[Offset: 0x0, Size: 0x4] 0x715db07200
	float Radius;//[Offset: 0x4, Size: 0x4] 0x715db07280
	Vector LocalPosition;//[Offset: 0x8, Size: 0xc] 0x715db07300

--------------------------------
Class: ClothCollisionPrim_SphereConnection // 715dadd3c0
	int SphereIndices;//[Offset: 0x0, Size: 0x4] 0x715db05300

--------------------------------
Class: ClothCollisionPrim_Convex // 715dadd480
	Plane[] Planes;//[Offset: 0x0, Size: 0x10] 0x715dae5ba0
	Vector[] SurfacePoints;//[Offset: 0x10, Size: 0x10] 0x715dae5c40
	int BoneIndex;//[Offset: 0x20, Size: 0x4] 0x715db05500

--------------------------------
Class: ClothCollisionPrim_Box // 715dadd540
	Vector LocalPosition;//[Offset: 0x0, Size: 0xc] 0x715db05600
	Quat LocalRotation;//[Offset: 0x10, Size: 0x10] 0x715db05680
	Vector HalfExtents;//[Offset: 0x20, Size: 0xc] 0x715db05700
	int BoneIndex;//[Offset: 0x2c, Size: 0x4] 0x715db05780

--------------------------------
Class: ClothLODDataCommon // 715ce79940
	ClothPhysicalMeshData PhysicalMeshData;//[Offset: 0x0, Size: 0xf8] 0x715cea7300
	ClothCollisionData CollisionData;//[Offset: 0xf8, Size: 0x40] 0x715cea7380

--------------------------------
Class: ClothConfig_Legacy // 715ce79ac0
	enum WindMethod;//[Offset: 0x0, Size: 0x1] 0x715ce906a0
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x4, Size: 0x10] 0x715cea5380
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x14, Size: 0x10] 0x715cea5400
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x24, Size: 0x10] 0x715cea5480
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x34, Size: 0x10] 0x715cea5700
	float SelfCollisionRadius;//[Offset: 0x44, Size: 0x4] 0x715cea5780
	float SelfCollisionStiffness;//[Offset: 0x48, Size: 0x4] 0x715cea5800
	float SelfCollisionCullScale;//[Offset: 0x4c, Size: 0x4] 0x715cea5880
	Vector Damping;//[Offset: 0x50, Size: 0xc] 0x715cea5900
	float Friction;//[Offset: 0x5c, Size: 0x4] 0x715cea5980
	float WindDragCoefficient;//[Offset: 0x60, Size: 0x4] 0x715cea5a00
	float WindLiftCoefficient;//[Offset: 0x64, Size: 0x4] 0x715cea5a80
	Vector LinearDrag;//[Offset: 0x68, Size: 0xc] 0x715cea5b00
	Vector AngularDrag;//[Offset: 0x74, Size: 0xc] 0x715cea5b80
	Vector LinearInertiaScale;//[Offset: 0x80, Size: 0xc] 0x715cea5c00
	Vector AngularInertiaScale;//[Offset: 0x8c, Size: 0xc] 0x715cea5c80
	Vector CentrifugalInertiaScale;//[Offset: 0x98, Size: 0xc] 0x715cea5d00
	float SolverFrequency;//[Offset: 0xa4, Size: 0x4] 0x715cea5d80
	float StiffnessFrequency;//[Offset: 0xa8, Size: 0x4] 0x715cea5e00
	float GravityScale;//[Offset: 0xac, Size: 0x4] 0x715cea5e80
	Vector GravityOverride;//[Offset: 0xb0, Size: 0xc] 0x715cea5f00
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x715cea5f80
	float TetherStiffness;//[Offset: 0xc0, Size: 0x4] 0x715cea6000
	float TetherLimit;//[Offset: 0xc4, Size: 0x4] 0x715cea6080
	float CollisionThickness;//[Offset: 0xc8, Size: 0x4] 0x715cea6100
	float AnimDriveSpringStiffness;//[Offset: 0xcc, Size: 0x4] 0x715cea6180
	float AnimDriveDamperStiffness;//[Offset: 0xd0, Size: 0x4] 0x715cea6200

--------------------------------
Class: ClothConstraintSetup_Legacy // 715ce79a00
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x715cea5500
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x715cea5580
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x715cea5600
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x715cea5680

--------------------------------
Class: ClothConfigNv.ClothConfigCommon.ClothConfigBase.Object // 71a4aedd00
	enum ClothingWindMethod;//[Offset: 0x28, Size: 0x1] 0x715cc81b40
	ClothConstraintSetupNv VerticalConstraint;//[Offset: 0x2c, Size: 0x10] 0x715cc9b580
	ClothConstraintSetupNv HorizontalConstraint;//[Offset: 0x3c, Size: 0x10] 0x715cc99500
	ClothConstraintSetupNv BendConstraint;//[Offset: 0x4c, Size: 0x10] 0x715cc99580
	ClothConstraintSetupNv ShearConstraint;//[Offset: 0x5c, Size: 0x10] 0x715cc99600
	float SelfCollisionRadius;//[Offset: 0x6c, Size: 0x4] 0x715cc99680
	float SelfCollisionStiffness;//[Offset: 0x70, Size: 0x4] 0x715cc99700
	float SelfCollisionCullScale;//[Offset: 0x74, Size: 0x4] 0x715cc99780
	Vector Damping;//[Offset: 0x78, Size: 0xc] 0x715cc99800
	float Friction;//[Offset: 0x84, Size: 0x4] 0x715cc99880
	float WindDragCoefficient;//[Offset: 0x88, Size: 0x4] 0x715cc99900
	float WindLiftCoefficient;//[Offset: 0x8c, Size: 0x4] 0x715cc99980
	Vector LinearDrag;//[Offset: 0x90, Size: 0xc] 0x715cc99a00
	Vector AngularDrag;//[Offset: 0x9c, Size: 0xc] 0x715cc99a80
	Vector LinearInertiaScale;//[Offset: 0xa8, Size: 0xc] 0x715cc99b00
	Vector AngularInertiaScale;//[Offset: 0xb4, Size: 0xc] 0x715cc99b80
	Vector CentrifugalInertiaScale;//[Offset: 0xc0, Size: 0xc] 0x715cc99c00
	float SolverFrequency;//[Offset: 0xcc, Size: 0x4] 0x715cc99c80
	float StiffnessFrequency;//[Offset: 0xd0, Size: 0x4] 0x715cc99d00
	float GravityScale;//[Offset: 0xd4, Size: 0x4] 0x715cc99d80
	Vector GravityOverride;//[Offset: 0xd8, Size: 0xc] 0x715cc99e00
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1] 0x715cc99e80
	float TetherStiffness;//[Offset: 0xe8, Size: 0x4] 0x715cc99f00
	float TetherLimit;//[Offset: 0xec, Size: 0x4] 0x715cc99f80
	float CollisionThickness;//[Offset: 0xf0, Size: 0x4] 0x715cc9a000
	float AnimDriveSpringStiffness;//[Offset: 0xf4, Size: 0x4] 0x715cc9a080
	float AnimDriveDamperStiffness;//[Offset: 0xf8, Size: 0x4] 0x715cc9a100
	enum WindMethod;//[Offset: 0xfc, Size: 0x1] 0x715cc81be0
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x100, Size: 0x10] 0x715cc9a200
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x110, Size: 0x10] 0x715cc9a280
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x120, Size: 0x10] 0x715cc9a300
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x130, Size: 0x10] 0x715cc9a380

--------------------------------
Class: ClothConstraintSetupNv // 715ce79580
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x715cea6680
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x715cea6700
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x715cea6780
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x715cea6800

--------------------------------
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object // 71a4aeda80

--------------------------------
Class: ClothingSimulationInteractorNv.ClothingSimulationInteractor.Object // 71a4aed800
	void SetAnimDriveDamperStiffness(float InStiffness);// 0x6451914 0x715cc7a5e0

--------------------------------
Class: ClothPhysicalMeshDataNv_Legacy.ClothPhysicalMeshDataBase_Legacy.Object // 71a4aed580
	float[] MaxDistances;//[Offset: 0xe0, Size: 0x10] 0x715cc818c0
	float[] BackstopDistances;//[Offset: 0xf0, Size: 0x10] 0x715cc81960
	float[] BackstopRadiuses;//[Offset: 0x100, Size: 0x10] 0x715cc81a00
	float[] AnimDriveMultipliers;//[Offset: 0x110, Size: 0x10] 0x715cc81aa0

--------------------------------
Class: GameplayTask_ClaimResource.GameplayTask.Object // 71a4aed300
	static GameplayTask_ClaimResource* ClaimResources(interface classNone InTaskOwner, class GameplayTaskResource[] ResourceClasses, const byte Priority, const FName TaskInstanceName);// 0x64d6430 0x715cc7a420
	static GameplayTask_ClaimResource* ClaimResource(interface classNone InTaskOwner, class GameplayTaskResource ResourceClass, const byte Priority, const FName TaskInstanceName);// 0x64d6614 0x715cc7a500

--------------------------------
Class: GameplayTask_SpawnActor.GameplayTask.Object // 71a4aed080
	delegate success;//[Offset: 0x60, Size: 0x10] 0x715cc9a880
	delegate DidNotSpawn;//[Offset: 0x70, Size: 0x10] 0x715cc9a900
	class Actor* ClassToSpawn;//[Offset: 0x98, Size: 0x8] 0x715cc81640
	static GameplayTask_SpawnActor* SpawnActor(interface classNone TaskOwner, Vector SpawnLocation, Rotator SpawnRotation, class Actor Class, bool bSpawnOnlyOnAuthority);// 0x64d6e98 0x715cc7a180
	void FinishSpawningActor(Object* WorldContextObject, Actor* SpawnedActor);// 0x64d6c9c 0x715cc7a260
	bool BeginSpawningActor(Object* WorldContextObject, out Actor* SpawnedActor);// 0x64d6d88 0x715cc7a340

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object // 71a4aece00
	delegate OnFinished;//[Offset: 0x60, Size: 0x10] 0x715d77dc80
	delegate OnTimeExpired;//[Offset: 0x70, Size: 0x10] 0x715d77dd00

--------------------------------
Class: GameplayTask_WaitDelay.GameplayTask.Object // 71a4aecb80
	delegate OnFinish;//[Offset: 0x60, Size: 0x10] 0x715d77da00
	static GameplayTask_WaitDelay* TaskWaitDelay(interface classNone TaskOwner, float Time, const byte Priority);// 0x64d770c 0x715d76c9c0
	void TaskDelayDelegate__DelegateSignature();// 0x45c6aa0 0x715d7690e0

--------------------------------
Class: GameplayTaskOwnerInterface.Interface.Object // 71a4aec900

--------------------------------
Class: BAGameViewportClient.GameViewportClient.ScriptViewportClient.Object // 71a4aec400

--------------------------------
Class: SignificancePolicy.Object // 71a4aebf00
	BASignificanceManager* SignificanceManager;//[Offset: 0x28, Size: 0x8] 0x715cc9a580

--------------------------------
Class: BASignificanceManager.SignificanceManager.Object // 71a4aebc80
	SignificancePolicy*[] Policies;//[Offset: 0x2c0, Size: 0x10] 0x715cc815a0

--------------------------------
Class: BAReplicatedTimerFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4aeba00
	static void UnpauseTimer(out BAReplicatedTimer Timer, GameStateBase* GameState);// 0x64f9170 0x715cc791c0
	static BAReplicatedTimer StartTimerWithStartTime(float StartTime, float Duration, bool Paused);// 0x64f9c18 0x715cc792a0
	static BAReplicatedTimer StartTimer(float Duration, GameStateBase* GameState, bool Paused);// 0x64f9d54 0x715cc79380
	static void SetDuration(out BAReplicatedTimer Timer, float Duration);// 0x64f9074 0x715cc79460
	static void RestartTimer(out BAReplicatedTimer Timer, GameStateBase* GameState, bool Paused);// 0x64f8f2c 0x715cc79540
	static void PauseTimer(out BAReplicatedTimer Timer, GameStateBase* GameState);// 0x64f926c 0x715cc79620
	static bool IsTimerStarted(out const BAReplicatedTimer Timer);// 0x64f9674 0x715cc79700
	static bool IsTimerComplete(out const BAReplicatedTimer Timer, GameStateBase* GameState);// 0x64f973c 0x715cc797e0
	static bool IsPaused(out const BAReplicatedTimer Timer);// 0x64f9844 0x715cc798c0
	static void InvalidateTimer(out BAReplicatedTimer Timer);// 0x64f9a94 0x715cc799a0
	static float GetTimerCompleteRatio(out const BAReplicatedTimer Timer, GameStateBase* GameState);// 0x64f9570 0x715cc79a80
	static float GetStartTimestamp(out const BAReplicatedTimer Timer);// 0x64f990c 0x715cc79b60
	static float GetRemainingTimerSec(out const BAReplicatedTimer Timer, GameStateBase* GameState);// 0x64f9368 0x715cc79c40
	static float GetNow(GameStateBase* GameState);// 0x64f9e94 0x715cc79d20
	static float GetElapsedTimerSec(out const BAReplicatedTimer Timer, GameStateBase* GameState);// 0x64f946c 0x715cc79e00
	static float GetDuration(out const BAReplicatedTimer Timer);// 0x64f99d0 0x715cc79ee0
	static BAReplicatedTimer CopyTimer(out const BAReplicatedTimer Other);// 0x64f9b48 0x715cc79fc0

--------------------------------
Class: FeatureFlagClientOverrides.DeveloperSettings.Object // 71a4aeb780
	FString[] OverrideFlagsOn;//[Offset: 0x38, Size: 0x10] 0x715cc83d00
	FString[] OverrideFlagsOff;//[Offset: 0x48, Size: 0x10] 0x715cc83da0

--------------------------------
Class: ParticlesSignificancePolicy.SignificancePolicy.Object // 71a4aeb500
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x30, Size: 0x10] 0x715cc83c60

--------------------------------
Class: RotatingMovementSignificancePolicy.SignificancePolicy.Object // 71a4aeb280

--------------------------------
Class: SignificanceInterface.Interface.Object // 71a4aeb000

--------------------------------
Class: SynchronisedServerTimeRepository.Interface.Object // 71a4aead80

--------------------------------
Class: ThrottledUpdateManager.Object // 71a4aeab00
	ThrottledUpdateQueueSet*[] QueueSets;//[Offset: 0x28, Size: 0x10] 0x715cc83bc0

--------------------------------
Class: BAAssetManager.AssetManager.Object // 71a4aea880

--------------------------------
Class: BAMapAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4aea600
	SoftObjectPath RootMapAsset;//[Offset: 0x38, Size: 0x18] 0x715cc9c900
	bool bIsFrontendMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715cc9c980
	bool bIsDefaultServerMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715cc9ca00
	bool bIsLeanMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x715cc9ca80
	bool bIsTutorialMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x715cc9cb00
	bool bIsEmptyMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x715cc9cb80
	bool bIsIntroMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x715cc9cc00
	bool bIsResultsMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x715cc9cc80
	bool bShouldHaveReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1] 0x715cc9cd00
	int ChunkId;//[Offset: 0x58, Size: 0x4] 0x715cc9cd80
	SoftObjectPath DisplayData;//[Offset: 0x60, Size: 0x18] 0x715cc9ce00
	int StreamingPriority;//[Offset: 0x78, Size: 0x4] 0x715cc9ce80
	Vector StreamingLocation;//[Offset: 0x7c, Size: 0xc] 0x715cc9cf00
	Rotator StreamingRotation;//[Offset: 0x88, Size: 0xc] 0x715cc9cf80

--------------------------------
Class: ScreenAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4aefd80
	class SDUIScreen* Screen;//[Offset: 0x38, Size: 0x8] 0x715cc83b20
	bool OverrideDefaultZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x715cc9c700
	int ZOrder;//[Offset: 0x44, Size: 0x4] 0x715cc9c780
	bool bShow2dBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cc9c800
	SlateBrush BackgroundOverride;//[Offset: 0x50, Size: 0x88] 0x715cc9c880

--------------------------------
Class: ScreenSet.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4aefb00
	ScreenAsset*[] Screens;//[Offset: 0x38, Size: 0x10] 0x715cc839e0
	ScreenSet*[] ScreenSets;//[Offset: 0x48, Size: 0x10] 0x715cc83a80

--------------------------------
Class: ServerErrorActor.Actor.Object // 71a4aef880
	void NetMulticastNotifyErrorOccurred(FString ErrorMessage, int64 TimestampTicks, int64 ErrorNumber);// 0x6528fa0 0x715cc790e0

--------------------------------
Class: ServerErrorNotificationWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4af5100
	void OnServerError();// 0x45c6aa0 0x715cc7c9c0

--------------------------------
Class: LoadingScreenSettings.DeveloperSettings.Object // 71a4af4e80
	SoftObjectPath BackgroundBrush;//[Offset: 0x38, Size: 0x18] 0x715cc9de80
	SoftObjectPath BackgroundGradientBrush;//[Offset: 0x50, Size: 0x18] 0x715cc9df00
	SoftObjectPath HuntersLogoBrush;//[Offset: 0x68, Size: 0x18] 0x715cc9df80
	SoftObjectPath LoadingImageBrush;//[Offset: 0x80, Size: 0x18] 0x715cc9e000
	SoftObjectPath OuterSpinnerBrush;//[Offset: 0x98, Size: 0x18] 0x715cc9e080
	SoftObjectPath InnerSpinnerBrush;//[Offset: 0xb0, Size: 0x18] 0x715cc9e100
	SoftObjectPath MiddleSpinnerBrush;//[Offset: 0xc8, Size: 0x18] 0x715cc9e180
	SoftObjectPath ProgressBarBackgroundBrush;//[Offset: 0xe0, Size: 0x18] 0x715cc9e200
	SoftObjectPath ProgressBarFillBrush;//[Offset: 0xf8, Size: 0x18] 0x715cc9e280
	SoftObjectPath ProgressBarFillStrokeBrush;//[Offset: 0x110, Size: 0x18] 0x715cc9e300
	SoftObjectPath ProgressBarGlowBrush;//[Offset: 0x128, Size: 0x18] 0x715cc9e380
	SoftObjectPath InfoIconBrush;//[Offset: 0x140, Size: 0x18] 0x715cc9e400
	SoftObjectPath CompositeFont;//[Offset: 0x158, Size: 0x18] 0x715cc9e480
	SoftObjectPath AurabeshFont;//[Offset: 0x170, Size: 0x18] 0x715cc9e500

--------------------------------
Class: AppsFlyerSDKSettings.DeveloperSettings.Object // 71a4af4c00
	FString AppsFlyerDevKeyAndroid;//[Offset: 0x38, Size: 0x10] 0x715cc9db00
	FString AppsFlyerDevKeyIOS;//[Offset: 0x48, Size: 0x10] 0x715cc9db80
	FString appleAppID;//[Offset: 0x58, Size: 0x10] 0x715cc9dc00
	bool bIsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715cc9dc80
	FString currencyCode;//[Offset: 0x70, Size: 0x10] 0x715cc9dd00
	bool bDisableSKAdNetwork;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x715cc9dd80
	bool bEnableAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x715cc9de00

--------------------------------
Class: WebBrowserTexture.Texture.StreamableRenderAsset.Object // 71a4af4980

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object // 71a4af4700

--------------------------------
Class: CrowdManagerBase.Object // 71a4af4200

--------------------------------
Class: NavArea_Default.NavArea.NavAreaBase.Object // 71a4af3f80

--------------------------------
Class: NavArea_LowHeight.NavArea.NavAreaBase.Object // 71a4af3d00

--------------------------------
Class: NavArea_Null.NavArea.NavAreaBase.Object // 71a4af3a80

--------------------------------
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object // 71a4af3800

--------------------------------
Class: NavAreaMeta.NavArea.NavAreaBase.Object // 71a4af3580

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.NavAreaBase.Object // 71a4af3300
	class NavArea* Agent0Area;//[Offset: 0x48, Size: 0x8] 0x715cc82ea0
	class NavArea* Agent1Area;//[Offset: 0x50, Size: 0x8] 0x715cc82f40
	class NavArea* Agent2Area;//[Offset: 0x58, Size: 0x8] 0x715cc82fe0
	class NavArea* Agent3Area;//[Offset: 0x60, Size: 0x8] 0x715cc83080
	class NavArea* Agent4Area;//[Offset: 0x68, Size: 0x8] 0x715cc83120
	class NavArea* Agent5Area;//[Offset: 0x70, Size: 0x8] 0x715cc831c0
	class NavArea* Agent6Area;//[Offset: 0x78, Size: 0x8] 0x715cc83260
	class NavArea* Agent7Area;//[Offset: 0x80, Size: 0x8] 0x715cc83300
	class NavArea* Agent8Area;//[Offset: 0x88, Size: 0x8] 0x715cc833a0
	class NavArea* Agent9Area;//[Offset: 0x90, Size: 0x8] 0x715cc83440
	class NavArea* Agent10Area;//[Offset: 0x98, Size: 0x8] 0x715cc834e0
	class NavArea* Agent11Area;//[Offset: 0xa0, Size: 0x8] 0x715cc83580
	class NavArea* Agent12Area;//[Offset: 0xa8, Size: 0x8] 0x715cc83620
	class NavArea* Agent13Area;//[Offset: 0xb0, Size: 0x8] 0x715cc836c0
	class NavArea* Agent14Area;//[Offset: 0xb8, Size: 0x8] 0x715cc83760
	class NavArea* Agent15Area;//[Offset: 0xc0, Size: 0x8] 0x715cc83800

--------------------------------
Class: NavCollision.NavCollisionBase.Object // 71a4af3080
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10] 0x715cc82cc0
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10] 0x715cc82d60
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8] 0x715cc82e00
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x715cc9f500
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x715cc9f580

--------------------------------
Class: NavCollisionCylinder // 715ce7be00
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x715cea7900
	float Radius;//[Offset: 0xc, Size: 0x4] 0x715cea7980
	float Height;//[Offset: 0x10, Size: 0x4] 0x715cea7a00

--------------------------------
Class: NavCollisionBox // 715ce7bec0
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x715cea7a80
	Vector Extent;//[Offset: 0xc, Size: 0xc] 0x715cea7b00

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object // 71a4af2e00

--------------------------------
Class: NavigationGraphNode.Actor.Object // 71a4af2b80

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object // 71a4af2900
	NavGraphNode Node;//[Offset: 0x1f0, Size: 0x18] 0x715cc9f280
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x208, Size: 0x8] 0x715cc9f300
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x210, Size: 0x8] 0x715cc9f380

--------------------------------
Class: NavGraphNode // 715ce7bc80
	Object* Owner;//[Offset: 0x0, Size: 0x8] 0x715cea7780

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object // 71a4af2680
	float TileGenerationRadius;//[Offset: 0xb0, Size: 0x4] 0x715cc9f180
	float TileRemovalRadius;//[Offset: 0xb4, Size: 0x4] 0x715cc9f200

--------------------------------
Class: NavigationPath.Object // 71a4af2400
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10] 0x715cc9eb80
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10] 0x715cc82c20
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1] 0x715cc9ec80
	bool IsValid();// 0x662b800 0x715cc7c2c0
	bool IsStringPulled();// 0x662b7c8 0x715cc7c3a0
	bool IsPartial();// 0x662b838 0x715cc7c480
	float GetPathLength();// 0x662b8a4 0x715cc7c560
	float GetPathCost();// 0x662b870 0x715cc7c640
	FString GetDebugString();// 0x662ba6c 0x715cc7c720
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x662b8d8 0x715cc7c800
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x662b97c 0x715cc7c8e0

--------------------------------
Class: NavigationPathGenerator.Interface.Object // 71a4af2180

--------------------------------
Class: NavigationSystemV1.NavigationSystemBase.Object // 71a4af1f00
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8] 0x715ccc2780
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8] 0x715ccc2800
	FName DefaultAgentName;//[Offset: 0x38, Size: 0x8] 0x715ccc2880
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x40, Size: 0x28] 0x715cc84840
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x715ccc2900
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x715ccc2980
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x715ccc2a00
	bool bShouldDiscardSubLevelNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x715ccc2a80
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x715ccc2b00
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x715ccc2b80
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x715ccc2c00
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x715ccc2c80
	enum DataGatheringMode;//[Offset: 0x6a, Size: 0x1] 0x715cc848e0
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b, Size: 0x1] 0x715ccc2d80
	float ActiveTilesUpdateInterval;//[Offset: 0x6c, Size: 0x4] 0x715ccc2e00
	NavDataConfig[] SupportedAgents;//[Offset: 0x70, Size: 0x10] 0x715cc84980
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x80, Size: 0x4] 0x715ccc2f00
	NavigationData*[] NavDataSet;//[Offset: 0x88, Size: 0x10] 0x715cc84a20
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x98, Size: 0x10] 0x715cc84ac0
	delegate OnNavDataRegisteredEvent;//[Offset: 0xb8, Size: 0x10] 0x715ccc3080
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xc8, Size: 0x10] 0x715ccc3100
	enum OperationMode;//[Offset: 0x1b4, Size: 0x1] 0x715cc84b60
	float DirtyAreasUpdateFreq;//[Offset: 0x50c, Size: 0x4] 0x715ccc1100
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x662d1b8 0x715cc7adc0
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x662c854 0x715cc7aea0
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x662c938 0x715cc7af80
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x662d398 0x715cc7b060
	void SetGeometryGatheringMode(enum NewMode);// 0x662d114 0x715cc7b140
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x662d384 0x715cc7b220
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x662d25c 0x715cc7b300
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x662cd84 0x715cc7b3e0
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x662cf3c 0x715cc7b4c0
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x662d43c 0x715cc7b5a0
	bool K2_ReplaceAreaInOctreeData(const Object* Object, class NavArea OldArea, class NavArea NewArea);// 0x662cfe0 0x715cc7b680
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x662e3b8 0x715cc7b760
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x662e1a8 0x715cc7b840
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x662c644 0x715cc7b920
	static bool K2_GetRandomLocationInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x662df98 0x715cc7ba00
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x662da18 0x715cc7bae0
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x662dac0 0x715cc7bbc0
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x662cbc8 0x715cc7bca0
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x662ca0c 0x715cc7bd80
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x662db68 0x715cc7be60
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x662dd80 0x715cc7bf40
	static NavigationSystemV1* GetNavigationSystem(Object* WorldContextObject);// 0x662e5c4 0x715cc7c020
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x662d850 0x715cc7c100
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x662d654 0x715cc7c1e0

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object // 71a4af0b00
	NavAgentSelector SupportedAgents;//[Offset: 0x258, Size: 0x4] 0x715ccc3680

--------------------------------
Class: NavigationSystemModuleConfig.NavigationSystemConfig.Object // 71a4af1c80
	bool bStrictlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1] 0x715ccc2580
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1] 0x715ccc2600
	bool bAutoSpawnMissingNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 0x1] 0x715ccc2680
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4d, Size: 0x1] 0x715ccc2700

--------------------------------
Class: NavigationTestingActor.Actor.Object // 71a4af1a00
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8] 0x715ccc3780
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x238, Size: 0x8] 0x715ccc3800
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x715ccc3880
	NavAgentProperties NavAgentProps;//[Offset: 0x248, Size: 0x30] 0x715ccc3900
	Vector QueryingExtent;//[Offset: 0x278, Size: 0xc] 0x715ccc3980
	NavigationData* MyNavData;//[Offset: 0x288, Size: 0x8] 0x715ccc3a00
	Vector ProjectedLocation;//[Offset: 0x290, Size: 0xc] 0x715ccc3a80
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1] 0x715ccc3b00
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1] 0x715ccc3b80
	float CostLimitFactor;//[Offset: 0x2a0, Size: 0x4] 0x715ccc3c00
	float MinimumCostLimit;//[Offset: 0x2a4, Size: 0x4] 0x715ccc3c80
	bool bBacktracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x715ccc3d00
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x715ccc3d80
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x715ccc3e00
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1] 0x715ccc3e80
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1] 0x715ccc3f00
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1] 0x715ccc3f80
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a8, Size: 0x1] 0x715ccc4000
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a8, Size: 0x1] 0x715ccc4080
	byte CostDisplayMode;//[Offset: 0x2a9, Size: 0x1] 0x715ccc4100
	Vector2D TextCanvasOffset;//[Offset: 0x2ac, Size: 0x8] 0x715ccc4180
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1] 0x715ccc4200
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1] 0x715ccc2180
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b4, Size: 0x1] 0x715ccc2200
	float PathfindingTime;//[Offset: 0x2b8, Size: 0x4] 0x715ccc2280
	float PathCost;//[Offset: 0x2bc, Size: 0x4] 0x715ccc2300
	int PathfindingSteps;//[Offset: 0x2c0, Size: 0x4] 0x715ccc2380
	NavigationTestingActor* OtherActor;//[Offset: 0x2c8, Size: 0x8] 0x715ccc2400
	class NavigationQueryFilter* FilterClass;//[Offset: 0x2d0, Size: 0x8] 0x715cc847a0
	int ShowStepIndex;//[Offset: 0x2d8, Size: 0x4] 0x715ccc2480
	float OffsetFromCornersDistance;//[Offset: 0x2dc, Size: 0x4] 0x715ccc2500

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4af1780
	NavigationLink[] Links;//[Offset: 0x420, Size: 0x10] 0x715cc84700

--------------------------------
Class: NavLinkCustomInterface.Interface.Object // 71a4af1500

--------------------------------
Class: NavLinkHostInterface.Interface.Object // 71a4af1280

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4af1000

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object // 71a4af0d80

--------------------------------
Class: NavMeshRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4af0880

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object // 71a4af0600
	class NavArea* AreaClass;//[Offset: 0x260, Size: 0x8] 0x715cc845c0
	void SetAreaClass(class NavArea NewAreaClass);// 0x663376c 0x715cc7e6a0

--------------------------------
Class: NavNodeInterface.Interface.Object // 71a4af0380

--------------------------------
Class: NavSystemConfigOverride.Actor.Object // 71a4af0100
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x220, Size: 0x8] 0x715ccc3500
	enum OverridePolicy;//[Offset: 0x228, Size: 0x1] 0x715cc84520
	bool bLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1] 0x715ccc3600

--------------------------------
Class: NavTestRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4afa380

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object // 71a4afa100

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object // 71a4af9e80
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 0x1] 0x715ccc5800
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3fc, Size: 0x1] 0x715ccc5880
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3fc, Size: 0x1] 0x715ccc5900
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3fc, Size: 0x1] 0x715ccc5980
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3fc, Size: 0x1] 0x715ccc5a00
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3fc, Size: 0x1] 0x715ccc5a80
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3fc, Size: 0x1] 0x715ccc5b00
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3fc, Size: 0x1] 0x715ccc5b80
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fd, Size: 0x1] 0x715ccc5c00
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3fd, Size: 0x1] 0x715ccc5c80
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3fd, Size: 0x1] 0x715ccc5d00
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3fd, Size: 0x1] 0x715ccc5d80
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3fd, Size: 0x1] 0x715ccc5e00
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3fd, Size: 0x1] 0x715ccc5e80
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3fd, Size: 0x1] 0x715ccc5f00
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3fd, Size: 0x1] 0x715ccc5f80
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fe, Size: 0x1] 0x715ccc6000
	bool bDrawNavMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3fe, Size: 0x1] 0x715ccc6080
	float DrawOffset;//[Offset: 0x400, Size: 0x4] 0x715ccc6100
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 0x1] 0x715ccc6180
	int TilePoolSize;//[Offset: 0x408, Size: 0x4] 0x715ccc6200
	float TileSizeUU;//[Offset: 0x40c, Size: 0x4] 0x715ccc6280
	float CellSize;//[Offset: 0x410, Size: 0x4] 0x715ccc6300
	float CellHeight;//[Offset: 0x414, Size: 0x4] 0x715ccc4280
	float AgentRadius;//[Offset: 0x418, Size: 0x4] 0x715ccc4300
	float AgentHeight;//[Offset: 0x41c, Size: 0x4] 0x715ccc4380
	float AgentMaxHeight;//[Offset: 0x420, Size: 0x4] 0x715ccc4400
	float AgentMaxSlope;//[Offset: 0x424, Size: 0x4] 0x715ccc4480
	float AgentMaxStepHeight;//[Offset: 0x428, Size: 0x4] 0x715ccc4500
	float MinRegionArea;//[Offset: 0x42c, Size: 0x4] 0x715ccc4580
	float MergeRegionSize;//[Offset: 0x430, Size: 0x4] 0x715ccc4600
	float MaxSimplificationError;//[Offset: 0x434, Size: 0x4] 0x715ccc4680
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x438, Size: 0x4] 0x715ccc4700
	int TileNumberHardLimit;//[Offset: 0x43c, Size: 0x4] 0x715ccc4780
	int PolyRefTileBits;//[Offset: 0x440, Size: 0x4] 0x715ccc4800
	int PolyRefNavPolyBits;//[Offset: 0x444, Size: 0x4] 0x715ccc4880
	int PolyRefSaltBits;//[Offset: 0x448, Size: 0x4] 0x715ccc4900
	Vector NavMeshOriginOffset;//[Offset: 0x44c, Size: 0xc] 0x715ccc4980
	float DefaultDrawDistance;//[Offset: 0x458, Size: 0x4] 0x715ccc4a00
	float DefaultMaxSearchNodes;//[Offset: 0x45c, Size: 0x4] 0x715ccc4a80
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x460, Size: 0x4] 0x715ccc4b00
	byte RegionPartitioning;//[Offset: 0x464, Size: 0x1] 0x715ccc4b80
	byte LayerPartitioning;//[Offset: 0x465, Size: 0x1] 0x715ccc4c00
	int RegionChunkSplits;//[Offset: 0x468, Size: 0x4] 0x715ccc4c80
	int LayerChunkSplits;//[Offset: 0x46c, Size: 0x4] 0x715ccc4d00
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1] 0x715ccc4d80
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x470, Size: 0x1] 0x715ccc4e00
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x470, Size: 0x1] 0x715ccc4e80
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x470, Size: 0x1] 0x715ccc4f00
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x470, Size: 0x1] 0x715ccc4f80
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x470, Size: 0x1] 0x715ccc5000
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x470, Size: 0x1] 0x715ccc5080
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x470, Size: 0x1] 0x715ccc5100
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x471, Size: 0x1] 0x715ccc5180
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x471, Size: 0x1] 0x715ccc5200
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x471, Size: 0x1] 0x715ccc5280
	float TileSetUpdateInterval;//[Offset: 0x474, Size: 0x4] 0x715ccc3200
	float HeuristicScale;//[Offset: 0x478, Size: 0x4] 0x715ccc3280
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x47c, Size: 0x4] 0x715ccc3300
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0x6634388 0x715cc7e5c0

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object // 71a4af9c00

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object // 71a4af9700
	static void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0x66e08dc 0x715cc7d980
	static Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail, Actor* Owner);// 0x66e0c94 0x715cc7da60
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x66e0488 0x715cc7db40
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x66e056c 0x715cc7dc20
	static void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0x66e0ed0 0x715cc7dd00
	static void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0x66e0a14 0x715cc7dde0
	static bool IsValidAIRotation(Rotator Rotation);// 0x66e06e4 0x715cc7dec0
	static bool IsValidAILocation(Vector Location);// 0x66e0834 0x715cc7dfa0
	static bool IsValidAIDirection(Vector DirectionVector);// 0x66e078c 0x715cc7e080
	static NavigationPath* GetCurrentPath(Controller* Controller);// 0x66e0640 0x715cc7e160
	static BlackboardComponent* GetBlackboard(Actor* Target);// 0x66e0b4c 0x715cc7e240
	static AIController* GetAIController(Actor* ControlledActor);// 0x66e0bf0 0x715cc7e320
	static AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0x66e1034 0x715cc7e400

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object // 71a4af9480
	FName ParamName;//[Offset: 0x28, Size: 0x8] 0x715ccc8200
	float FloatValue;//[Offset: 0x30, Size: 0x4] 0x715ccc8280
	int IntValue;//[Offset: 0x34, Size: 0x4] 0x715ccc8300
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715ccc8380

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object // 71a4af9200
	float Min;//[Offset: 0x3c, Size: 0x4] 0x715ccc8080
	float Max;//[Offset: 0x40, Size: 0x4] 0x715ccc8100
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x715ccc8180

--------------------------------
Class: AIPerceptionListenerInterface.Interface.Object // 71a4af8800

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object // 71a4af8580
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715ccc7880
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xb8, Size: 0x10] 0x715cc86460
	void UnregisterFromSense(class AISense SenseClass);// 0x66e504c 0x715cc7ce20
	void UnregisterFromPerceptionSystem();// 0x66e50f0 0x715cc7cf00
	void RegisterWithPerceptionSystem();// 0x66e51a8 0x715cc7cfe0
	void RegisterForSense(class AISense SenseClass);// 0x66e5104 0x715cc7d0c0

--------------------------------
Class: AIResourceInterface.Interface.Object // 71a4af7e00

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object // 71a4af7b80

--------------------------------
Class: AIResource_Logic.GameplayTaskResource.Object // 71a4af7900

--------------------------------
Class: AISense_Blueprint.AISense.Object // 71a4af7400
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x78, Size: 0x8] 0x715cc85d80
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x80, Size: 0x10] 0x715cc85e20
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x90, Size: 0x10] 0x715cc85ec0
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0x45c6aa0 0x715cc7f900
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x45c6aa0 0x715cc7f9e0
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x45c6aa0 0x715cc7fac0
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x45c6aa0 0x715cc7fba0
	void K2_OnNewPawn(Pawn* NewPawn);// 0x45c6aa0 0x715cc7fc80
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0x66e8bd8 0x715cc7fd60
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0x66e8c98 0x715cc7fe40

--------------------------------
Class: AISense_Damage.AISense.Object // 71a4af7180
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x715cc85ce0
	static void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0x66e96f4 0x715cc7f820

--------------------------------
Class: AIDamageEvent // 715ce7b440
	float Amount;//[Offset: 0x0, Size: 0x4] 0x715cea9d80
	Vector Location;//[Offset: 0x4, Size: 0xc] 0x715cea9e00
	Vector HitLocation;//[Offset: 0x10, Size: 0xc] 0x715cea9e80
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8] 0x715cea9f00
	Actor* Instigator;//[Offset: 0x28, Size: 0x8] 0x715cea9f80

--------------------------------
Class: AISense_Hearing.AISense.Object // 71a4af6f00
	AINoiseEvent[] NoiseEvents;//[Offset: 0x78, Size: 0x10] 0x715cc85c40
	float SpeedOfSoundSq;//[Offset: 0x88, Size: 0x4] 0x715ccca400
	static void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag);// 0x66e9d4c 0x715cc7f740

--------------------------------
Class: AINoiseEvent // 715ce7b380
	Vector NoiseLocation;//[Offset: 0x4, Size: 0xc] 0x715cea9b00
	float Loudness;//[Offset: 0x10, Size: 0x4] 0x715cea9b80
	float MaxRange;//[Offset: 0x14, Size: 0x4] 0x715cea9c00
	Actor* Instigator;//[Offset: 0x18, Size: 0x8] 0x715cea9c80
	FName Tag;//[Offset: 0x20, Size: 0x8] 0x715cea9d00

--------------------------------
Class: AISense_Prediction.AISense.Object // 71a4af6c80
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x715cc85ba0
	static void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0x66ea3b0 0x715cc7f580
	static void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0x66ea4c8 0x715cc7f660

--------------------------------
Class: AIPredictionEvent // 715ce7b2c0
	Actor* Requestor;//[Offset: 0x0, Size: 0x8] 0x715cea9a00
	Actor* PredictedActor;//[Offset: 0x8, Size: 0x8] 0x715cea9a80

--------------------------------
Class: AISense_Sight.AISense.Object // 71a4af6a00
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4] 0x715ccc9d00
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4] 0x715ccc9d80
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8] 0x715ccc9e00
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4] 0x715ccc9e80
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4] 0x715ccc9f00
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4] 0x715ccc9f80

--------------------------------
Class: AISense_Team.AISense.Object // 71a4af6780
	AITeamStimulusEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x715cc85b00

--------------------------------
Class: AITeamStimulusEvent // 715ce7b140
	Actor* Broadcaster;//[Offset: 0x28, Size: 0x8] 0x715cea9800
	Actor* Enemy;//[Offset: 0x30, Size: 0x8] 0x715cea9880

--------------------------------
Class: AISense_Touch.AISense.Object // 71a4af6500
	AITouchEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x715cc85a60

--------------------------------
Class: AITouchEvent // 715ce7b080
	Actor* TouchReceiver;//[Offset: 0x10, Size: 0x8] 0x715cea9700
	Actor* OtherActor;//[Offset: 0x18, Size: 0x8] 0x715cea9780

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object // 71a4af6280

--------------------------------
Class: AISenseConfig_Blueprint.AISenseConfig.Object // 71a4af5d80
	class AISense_Blueprint* Implementation;//[Offset: 0x48, Size: 0x8] 0x715cc859c0

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object // 71a4af5b00
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8] 0x715cc85920

--------------------------------
Class: AISenseConfig_Hearing.AISenseConfig.Object // 71a4af5880
	class AISense_Hearing* Implementation;//[Offset: 0x48, Size: 0x8] 0x715cc85880
	float HearingRange;//[Offset: 0x50, Size: 0x4] 0x715ccc9880
	float LoSHearingRange;//[Offset: 0x54, Size: 0x4] 0x715ccc9900
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x715ccc9980
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x715ccc9a00

--------------------------------
Class: AISenseAffiliationFilter // 715ce7b500
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x715ceaa000
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x715ceaa080
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x715ceaa100

--------------------------------
Class: AISenseConfig_Prediction.AISenseConfig.Object // 71a4af5600

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object // 71a4af5380
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8] 0x715cc857e0
	float SightRadius;//[Offset: 0x50, Size: 0x4] 0x715ccc9500
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4] 0x715ccc9580
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4] 0x715ccc9600
	float AutoDetectRadius;//[Offset: 0x5c, Size: 0x4] 0x715ccc9680
	float MinAutoDetectDuration;//[Offset: 0x60, Size: 0x4] 0x715ccc9700
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x64, Size: 0x4] 0x715ccc9780
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x68, Size: 0x4] 0x715ccc9800

--------------------------------
Class: AISenseConfig_Team.AISenseConfig.Object // 71a4aff600

--------------------------------
Class: AISenseConfig_Touch.AISenseConfig.Object // 71a4aff380

--------------------------------
Class: AISenseEvent_Damage.AISenseEvent.Object // 71a4afee80
	AIDamageEvent Event;//[Offset: 0x28, Size: 0x30] 0x715cccb580

--------------------------------
Class: AISenseEvent_Hearing.AISenseEvent.Object // 71a4afec00
	AINoiseEvent Event;//[Offset: 0x28, Size: 0x30] 0x715cccb500

--------------------------------
Class: AISightTargetInterface.Interface.Object // 71a4afe980

--------------------------------
Class: AITask.GameplayTask.Object // 71a4afe480
	AIController* OwnerController;//[Offset: 0x60, Size: 0x8] 0x715cccab00

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object // 71a4afe200

--------------------------------
Class: AITask_MoveTo.AITask.GameplayTask.Object // 71a4afdf80
	delegate OnRequestFailed;//[Offset: 0x68, Size: 0x10] 0x715cccc500
	delegate OnMoveFinished;//[Offset: 0x78, Size: 0x10] 0x715cccc580
	AIMoveRequest MoveRequest;//[Offset: 0x88, Size: 0x48] 0x715cccc600
	static AITask_MoveTo* AIMoveTo(AIController* Controller, Vector GoalLocation, Actor* GoalActor, float AcceptanceRadius, byte StopOnOverlap, byte AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, byte ProjectGoalOnNavigation);// 0x66ed010 0x715cc7f2e0

--------------------------------
Class: AIMoveRequest // 715ce7af00
	Actor* GoalActor;//[Offset: 0x0, Size: 0x8] 0x715cea9600

--------------------------------
Class: AITask_RunEQS.AITask.GameplayTask.Object // 71a4afdd00
	static AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate);// 0x66ed7a4 0x715cc7f200

--------------------------------
Class: BehaviorTreeTypes.Object // 71a4afd080

--------------------------------
Class: BlackboardAssetProvider.Interface.Object // 71a4afce00
	BlackboardData* GetBlackboardAsset();// 0x66f3974 0x715cc7ea20

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object // 71a4afc400

--------------------------------
Class: BlackboardKeyType_Class.BlackboardKeyType.Object // 71a4afc180
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x715cc87a40

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object // 71a4afbc80

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object // 71a4afba00

--------------------------------
Class: BlackboardKeyType_Name.BlackboardKeyType.Object // 71a4afb780

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object // 71a4afb500
	FString EnumName;//[Offset: 0x30, Size: 0x10] 0x715cccdc00
	Enum* EnumType;//[Offset: 0x40, Size: 0x8] 0x715cccdc80

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object // 71a4afad80
	FString StringValue;//[Offset: 0x30, Size: 0x10] 0x715cccdb80

--------------------------------
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object // 71a4afa880

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object // 71a4affd80

--------------------------------
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object // 71a4affb00
	byte FinishMode;//[Offset: 0x8c, Size: 0x1] 0x715cccd980

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4aff880
	int IntValue;//[Offset: 0x88, Size: 0x4] 0x715cccf780
	float FloatValue;//[Offset: 0x8c, Size: 0x4] 0x715cccd700
	FString StringValue;//[Offset: 0x90, Size: 0x10] 0x715cccd780
	FString CachedDescription;//[Offset: 0xa0, Size: 0x10] 0x715cccd800
	byte OperationType;//[Offset: 0xb0, Size: 0x1] 0x715cccd880
	byte NotifyObserver;//[Offset: 0xb1, Size: 0x1] 0x715cccd900

--------------------------------
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b05100
	AIController* AIOwner;//[Offset: 0x60, Size: 0x8] 0x715ccce780
	Actor* ActorOwner;//[Offset: 0x68, Size: 0x8] 0x715ccce800
	FName[] ObservedKeyNames;//[Offset: 0x70, Size: 0x10] 0x715cc877c0
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x715ccce900
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x715ccce980
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x715cccea00
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x45c6aa0 0x715cce3880
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x45c6aa0 0x715cce3960
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x45c6aa0 0x715cce0080
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0x45c6aa0 0x715cce0160
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x45c6aa0 0x715cce0240
	void ReceiveObserverActivated(Actor* OwnerActor);// 0x45c6aa0 0x715cce0320
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x45c6aa0 0x715cce0400
	void ReceiveExecutionStart(Actor* OwnerActor);// 0x45c6aa0 0x715cce04e0
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0x45c6aa0 0x715cce05c0
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0x45c6aa0 0x715cce06a0
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x45c6aa0 0x715cce0780
	bool PerformConditionCheck(Actor* OwnerActor);// 0x45c6aa0 0x715cce0860
	bool IsDecoratorObserverActive();// 0x66f8c6c 0x715cce0940
	bool IsDecoratorExecutionActive();// 0x66f8ca4 0x715cce0a20

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b04e80
	BlackboardKeySelector ActorToCheck;//[Offset: 0x60, Size: 0x28] 0x715cccfe00
	enum TagsToMatch;//[Offset: 0x88, Size: 0x1] 0x715cc87720
	GameplayTagContainer GameplayTags;//[Offset: 0x90, Size: 0x20] 0x715cccff00
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10] 0x715cccff80

--------------------------------
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b04c00
	byte Operator;//[Offset: 0x5a, Size: 0x1] 0x715cccfc80
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x715cccfd00
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x715cccfd80

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b04980

--------------------------------
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b04700
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x715cccfa80
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x715cccfb00
	BlackboardKeySelector ConeDirection;//[Offset: 0x88, Size: 0x28] 0x715cccfb80
	BlackboardKeySelector Observed;//[Offset: 0xb0, Size: 0x28] 0x715cccfc00

--------------------------------
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b04480
	float CoolDownTime;//[Offset: 0x5c, Size: 0x4] 0x715cccfa00

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b04200
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x715cccf800
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x715cccf880
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715cccf900
	byte PathQueryType;//[Offset: 0xb1, Size: 0x1] 0x715cccf980
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8] 0x715cc87680

--------------------------------
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b03f80

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b03d00
	float AcceptableRadius;//[Offset: 0x88, Size: 0x4] 0x715ccf0e00
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x90, Size: 0x38] 0x715ccf0e80
	enum GeometricDistanceType;//[Offset: 0xc8, Size: 0x1] 0x715cc875e0
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1] 0x715ccf0f80
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1] 0x715ccf1000
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1] 0x715ccf1080

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b03a80
	class Object* TestClass;//[Offset: 0x88, Size: 0x8] 0x715cc87540

--------------------------------
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b03800
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x715ccf0b80
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x715ccf0c00
	BlackboardKeySelector Observed;//[Offset: 0x88, Size: 0x28] 0x715ccf0c80
	bool bUseSelfAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715ccf0d00
	bool bUseSelfAsObserved;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x715ccf0d80

--------------------------------
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b03580
	int NumLoops;//[Offset: 0x5c, Size: 0x4] 0x715ccf0a00
	bool bInfiniteLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715ccf0a80
	float InfiniteLoopTimeoutTime;//[Offset: 0x64, Size: 0x4] 0x715ccf0b00

--------------------------------
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b03300

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b03080
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x715ccf0880
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x715ccf0900
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715ccf0980

--------------------------------
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b02e00
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x715ccf0680
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x715ccf0700
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x715ccf0780
	bool bActivatesCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x715ccf0800

--------------------------------
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object // 71a4b02b80
	float TimeLimit;//[Offset: 0x5c, Size: 0x4] 0x715ccf0600

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4b02900
	static void StopUsingExternalEvent(BTNode* NodeOwner);// 0x66fe08c 0x715cce20e0
	static void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0x66fe120 0x715cce21c0
	static void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0x66fe548 0x715cce22a0
	static void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0x66fe7dc 0x715cce2380
	static void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0x66fe2f8 0x715cce2460
	static void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0x66ff008 0x715cce2540
	static void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0x66fe694 0x715cce2620
	static void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0x66fec28 0x715cce2700
	static void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0x66feadc 0x715cce27e0
	static void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0x66fed74 0x715cce28c0
	static void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0x66feec0 0x715cce29a0
	static void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0x66fe988 0x715cce2a80
	static BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0x66ffe20 0x715cce2b60
	static BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0x66ffd7c 0x715cce2c40
	static Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ff268 0x715cce2d20
	static FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ff494 0x715cce2e00
	static Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ff150 0x715cce2ee0
	static Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ffc68 0x715cce2fc0
	static FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ff380 0x715cce30a0
	static int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ff818 0x715cce3180
	static float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ff704 0x715cce3260
	static byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ff92c 0x715cce3340
	static class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ffa40 0x715cce3420
	static bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ff5ec 0x715cce3500
	static Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66ffb54 0x715cce35e0
	static void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66fe444 0x715cce36c0
	static void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x66fe1f4 0x715cce37a0

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object // 71a4b02680
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8] 0x715ccf3a80
	Actor* ActorOwner;//[Offset: 0x70, Size: 0x8] 0x715ccf3b00
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x715ccf3b80
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x715ccf3c00
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x45c6aa0 0x715cce52c0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x45c6aa0 0x715cce53a0
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x45c6aa0 0x715cce5480
	void ReceiveSearchStart(Actor* OwnerActor);// 0x45c6aa0 0x715cce5560
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x45c6aa0 0x715cce5640
	void ReceiveDeactivation(Actor* OwnerActor);// 0x45c6aa0 0x715cce1d60
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x45c6aa0 0x715cce1e40
	void ReceiveActivation(Actor* OwnerActor);// 0x45c6aa0 0x715cce1f20
	bool IsServiceActive();// 0x6700dd8 0x715cce2000

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object // 71a4b02400
	byte FocusPriority;//[Offset: 0x90, Size: 0x1] 0x715ccf3a00

--------------------------------
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object // 71a4b02180
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0x90, Size: 0x48] 0x715ccf3900
	bool bClearQueryOnEmptyResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x715ccf3980

--------------------------------
Class: EQSParametrizedQueryExecutionRequest // 715ce7d900
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8] 0x715ceac400
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10] 0x715ce92180
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28] 0x715ceaa600
	byte RunMode;//[Offset: 0x40, Size: 0x1] 0x715ceaa680
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x715ceaa700

--------------------------------
Class: AIDynamicParam // 715ce7d840
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x715ceac480
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x715ce920e0
	float Value;//[Offset: 0xc, Size: 0x4] 0x715ceac580
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28] 0x715ceac600

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object // 71a4b01f00
	AIController* AIOwner;//[Offset: 0x70, Size: 0x8] 0x715ccf4f80
	Actor* ActorOwner;//[Offset: 0x78, Size: 0x8] 0x715ccf5000
	IntervalCountdown TickInterval;//[Offset: 0x80, Size: 0x8] 0x715ccf5080
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x715ccf5100
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0x6701aec 0x715cce4840
	void SetFinishOnMessage(FName MessageName);// 0x6701bd4 0x715cce4920
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x45c6aa0 0x715cce4a00
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x45c6aa0 0x715cce4ae0
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x45c6aa0 0x715cce4bc0
	void ReceiveExecute(Actor* OwnerActor);// 0x45c6aa0 0x715cce4ca0
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x45c6aa0 0x715cce4d80
	void ReceiveAbort(Actor* OwnerActor);// 0x45c6aa0 0x715cce4e60
	bool IsTaskExecuting();// 0x6701ab4 0x715cce4f40
	bool IsTaskAborting();// 0x6701a7c 0x715cce5020
	void FinishExecute(bool bSuccess);// 0x6701c8c 0x715cce5100
	void FinishAbort();// 0x6701c78 0x715cce51e0

--------------------------------
Class: IntervalCountdown // 715ce7afc0
	float Interval;//[Offset: 0x0, Size: 0x4] 0x715cea9680

--------------------------------
Class: BTTask_FinishWithResult.BTTaskNode.BTNode.Object // 71a4b01c80
	byte Result;//[Offset: 0x69, Size: 0x1] 0x715ccf4f00

--------------------------------
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object // 71a4b01a00
	bool bWaitForGameplayTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x715ccf4e80

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object // 71a4b01780
	float Loudnes;//[Offset: 0x6c, Size: 0x4] 0x715ccf4e00

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4b01280
	float AcceptableRadius;//[Offset: 0x98, Size: 0x4] 0x715ccf4780
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa0, Size: 0x8] 0x715cc87360
	float ObservedBlackboardValueTolerance;//[Offset: 0xa8, Size: 0x4] 0x715ccf4800
	float PathRandomizationRadius;//[Offset: 0xac, Size: 0x4] 0x715ccf4880
	bool bAllowPathRandomization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x715ccf4900
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x715ccf4980
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x715ccf4a00
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x715ccf4a80
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x715ccf4b00
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x715ccf4b80
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1] 0x715ccf4c00
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1] 0x715ccf4c80
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x715ccf4d00
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x715ccf4d80

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4b01500
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2, Size: 0x1] 0x715ccf4600
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2, Size: 0x1] 0x715ccf4680
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb2, Size: 0x1] 0x715ccf4700

--------------------------------
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object // 71a4b01000

--------------------------------
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object // 71a4b00d80
	AnimationAsset* AnimationToPlay;//[Offset: 0x70, Size: 0x8] 0x715ccf4380
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x715ccf4400
	bool bNonBlocking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x715ccf4480
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0x80, Size: 0x8] 0x715ccf4500
	SkeletalMeshComponent* CachedSkelMesh;//[Offset: 0x88, Size: 0x8] 0x715ccf4580

--------------------------------
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object // 71a4b00b00
	SoundCue* SoundToPlay;//[Offset: 0x70, Size: 0x8] 0x715ccf4300

--------------------------------
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object // 71a4b00880
	PawnAction* Action;//[Offset: 0x70, Size: 0x8] 0x715ccf4280

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object // 71a4b00600
	BehaviorTree* BehaviorAsset;//[Offset: 0x70, Size: 0x8] 0x715ccf6300

--------------------------------
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object // 71a4b00380
	GameplayTag InjectionTag;//[Offset: 0x6c, Size: 0x8] 0x715ccf6180
	BehaviorTree* DefaultBehaviorAsset;//[Offset: 0x78, Size: 0x8] 0x715ccf6200
	BehaviorTree* BehaviorAsset;//[Offset: 0x80, Size: 0x8] 0x715ccf6280

--------------------------------
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object // 71a4b00100
	EnvQuery* QueryTemplate;//[Offset: 0x98, Size: 0x8] 0x715ccf5d80
	EnvNamedValue[] QueryParams;//[Offset: 0xa0, Size: 0x10] 0x715cc87220
	AIDynamicParam[] QueryConfig;//[Offset: 0xb0, Size: 0x10] 0x715cc872c0
	byte RunMode;//[Offset: 0xc0, Size: 0x1] 0x715ccf5f00
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0xc8, Size: 0x28] 0x715ccf5f80
	bool bUseBBKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x715ccf6000
	bool bClearQueryOnEmptyResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1] 0x715ccf6080
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0xf8, Size: 0x48] 0x715ccf6100

--------------------------------
Class: EnvNamedValue // 715ce7d480
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x715cead500
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x715ce91d20
	float Value;//[Offset: 0xc, Size: 0x4] 0x715cead600

--------------------------------
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object // 71a4b0a380
	GameplayTag CooldownTag;//[Offset: 0x6c, Size: 0x8] 0x715ccf5c00
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x715ccf5c80
	float CooldownDuration;//[Offset: 0x78, Size: 0x4] 0x715ccf5d00

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object // 71a4b0a100
	float WaitTime;//[Offset: 0x6c, Size: 0x4] 0x715ccf5b00
	float RandomDeviation;//[Offset: 0x70, Size: 0x4] 0x715ccf5b80

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object // 71a4b09e80
	BlackboardKeySelector BlackboardKey;//[Offset: 0x78, Size: 0x28] 0x715ccf5a80

--------------------------------
Class: CrowdAgentInterface.Interface.Object // 71a4b09c00

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object // 71a4b09980
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x260, Size: 0x8] 0x715ccf5900
	Vector CrowdAgentMoveDirection;//[Offset: 0x268, Size: 0xc] 0x715ccf5980
	void SuspendCrowdSteering(bool bSuspend);// 0x67062a8 0x715cce4760

--------------------------------
Class: CrowdManager.CrowdManagerBase.Object // 71a4b09700
	NavigationData*[] NavDataSet;//[Offset: 0x28, Size: 0x10] 0x715cc87040
	CrowdAvoidanceConfig[] AvoidanceConfig;//[Offset: 0x38, Size: 0x10] 0x715cc870e0
	CrowdAvoidanceSamplingPattern[] SamplingPatterns;//[Offset: 0x48, Size: 0x10] 0x715cc87180
	int MaxAgents;//[Offset: 0x58, Size: 0x4] 0x715ccf5480
	float MaxAgentRadius;//[Offset: 0x5c, Size: 0x4] 0x715ccf5500
	int MaxAvoidedAgents;//[Offset: 0x60, Size: 0x4] 0x715ccf5580
	int MaxAvoidedWalls;//[Offset: 0x64, Size: 0x4] 0x715ccf5600
	float NavmeshCheckInterval;//[Offset: 0x68, Size: 0x4] 0x715ccf5680
	float PathOptimizationInterval;//[Offset: 0x6c, Size: 0x4] 0x715ccf5700
	float SeparationDirClamp;//[Offset: 0x70, Size: 0x4] 0x715ccf5780
	float PathOffsetRadiusMultiplier;//[Offset: 0x74, Size: 0x4] 0x715ccf5800
	bool bResolveCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1] 0x715ccf5880

--------------------------------
Class: CrowdAvoidanceConfig // 715ce7db40
	float VelocityBias;//[Offset: 0x0, Size: 0x4] 0x715ceaa980
	float DesiredVelocityWeight;//[Offset: 0x4, Size: 0x4] 0x715ceaaa00
	float CurrentVelocityWeight;//[Offset: 0x8, Size: 0x4] 0x715ceaaa80
	float SideBiasWeight;//[Offset: 0xc, Size: 0x4] 0x715ceaab00
	float ImpactTimeWeight;//[Offset: 0x10, Size: 0x4] 0x715ceaab80
	float ImpactTimeRange;//[Offset: 0x14, Size: 0x4] 0x715ceaac00
	byte CustomPatternIdx;//[Offset: 0x18, Size: 0x1] 0x715ceaac80
	byte AdaptiveDivisions;//[Offset: 0x19, Size: 0x1] 0x715ceaad00
	byte AdaptiveRings;//[Offset: 0x1a, Size: 0x1] 0x715ceaad80
	byte AdaptiveDepth;//[Offset: 0x1b, Size: 0x1] 0x715ceaae00

--------------------------------
Class: CrowdAvoidanceSamplingPattern // 715ce7dc00
	float[] Angles;//[Offset: 0x0, Size: 0x10] 0x715ce92220
	float[] Radii;//[Offset: 0x10, Size: 0x10] 0x715ce922c0

--------------------------------
Class: DetourCrowdAIController.AIController.Controller.Actor.Object // 71a4b09480

--------------------------------
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object // 71a4b08f80
	void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, out Vector ResultingLocation);// 0x45c6aa0 0x715cce43e0
	void ProvideSingleActor(Object* QuerierObject, Actor* QuerierActor, out Actor* ResultingActor);// 0x45c6aa0 0x715cce44c0
	void ProvideLocationsSet(Object* QuerierObject, Actor* QuerierActor, out Vector[] ResultingLocationSet);// 0x45c6aa0 0x715cce45a0
	void ProvideActorsSet(Object* QuerierObject, Actor* QuerierActor, out Actor*[] ResultingActorsSet);// 0x45c6aa0 0x715cce4680

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object // 71a4b08d00

--------------------------------
Class: EnvQueryContext_Querier.EnvQueryContext.Object // 71a4b08a80

--------------------------------
Class: EnvQueryDebugHelpers.Object // 71a4b08800

--------------------------------
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object // 71a4b08580
	class Actor* SearchedActorClass;//[Offset: 0x50, Size: 0x8] 0x715cc86d20
	AIDataProviderBoolValue GenerateOnlyActorsInRadius;//[Offset: 0x58, Size: 0x38] 0x715ccf6c00
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x90, Size: 0x38] 0x715ccf6c80
	class EnvQueryContext* SearchCenter;//[Offset: 0xc8, Size: 0x8] 0x715cc86dc0

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object // 71a4b08300
	FText GeneratorsActionDescription;//[Offset: 0x50, Size: 0x18] 0x715ccf6980
	class EnvQueryContext* Context;//[Offset: 0x68, Size: 0x8] 0x715cc86b40
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x70, Size: 0x8] 0x715cc86be0
	Object* GetQuerier();// 0x6707db8 0x715cce4060
	void DoItemGeneration(out const Vector[] ContextLocations);// 0x45c6aa0 0x715cce4140
	void AddGeneratedVector(Vector GeneratedVector);// 0x6707e90 0x715cce4220
	void AddGeneratedActor(Actor* GeneratedActor);// 0x6707dec 0x715cce4300

--------------------------------
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object // 71a4b08080
	EnvQueryGenerator*[] Generators;//[Offset: 0x50, Size: 0x10] 0x715cc86a00
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x715ccf6880
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x715ccf6900
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x68, Size: 0x8] 0x715cc86aa0

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object // 71a4b07b80
	EnvTraceData ProjectionData;//[Offset: 0x50, Size: 0x30] 0x715ccf6780

--------------------------------
Class: EnvTraceData // 715ce7d600
	int VersionNum;//[Offset: 0x0, Size: 0x4] 0x715ceab600
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x8, Size: 0x8] 0x715ce91fa0
	float ProjectDown;//[Offset: 0x10, Size: 0x4] 0x715ceab680
	float ProjectUp;//[Offset: 0x14, Size: 0x4] 0x715ceab700
	float ExtentX;//[Offset: 0x18, Size: 0x4] 0x715ceab780
	float ExtentY;//[Offset: 0x1c, Size: 0x4] 0x715ceab800
	float ExtentZ;//[Offset: 0x20, Size: 0x4] 0x715ceab880
	float PostProjectionVerticalOffset;//[Offset: 0x24, Size: 0x4] 0x715ceab900
	byte TraceChannel;//[Offset: 0x28, Size: 0x1] 0x715ceab980
	byte SerializedChannel;//[Offset: 0x29, Size: 0x1] 0x715ceaba00
	byte TraceShape;//[Offset: 0x2a, Size: 0x1] 0x715ceaba80
	byte TraceMode;//[Offset: 0x2b, Size: 0x1] 0x715ceabb00
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x715ceabb80
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x715ceabc00
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1] 0x715ceabc80
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1] 0x715ceabd00
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1] 0x715ceabd80
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1] 0x715ceabe00

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object // 71a4b07e00
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x80, Size: 0x38] 0x715ccf6500
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0xb8, Size: 0x38] 0x715ccf6580
	AIDataProviderFloatValue AngleStep;//[Offset: 0xf0, Size: 0x38] 0x715ccf6600
	AIDataProviderFloatValue Range;//[Offset: 0x128, Size: 0x38] 0x715ccf6680
	class EnvQueryContext* CenterActor;//[Offset: 0x160, Size: 0x8] 0x715cc86960
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1] 0x715ccf6700

--------------------------------
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object // 71a4b07900
	class EnvQueryContext* QueryContext;//[Offset: 0x50, Size: 0x8] 0x715cc868c0

--------------------------------
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object // 71a4b07680
	AIDataProviderFloatValue InnerRadius;//[Offset: 0x80, Size: 0x38] 0x715ccf8200
	AIDataProviderFloatValue OuterRadius;//[Offset: 0xb8, Size: 0x38] 0x715ccf8280
	AIDataProviderIntValue NumberOfRings;//[Offset: 0xf0, Size: 0x38] 0x715ccf8300
	AIDataProviderIntValue PointsPerRing;//[Offset: 0x128, Size: 0x38] 0x715ccf8380
	EnvDirection ArcDirection;//[Offset: 0x160, Size: 0x20] 0x715ccf8400
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x180, Size: 0x38] 0x715ccf6380
	bool bUseSpiralPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1] 0x715ccf6400
	class EnvQueryContext* Center;//[Offset: 0x1c0, Size: 0x8] 0x715cc86820
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 0x1] 0x715ccf6480

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue // 715ce7b740
	int DefaultValue;//[Offset: 0x30, Size: 0x4] 0x715ceaa300

--------------------------------
Class: EnvDirection // 715ce7d540
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x8] 0x715ce91dc0
	class EnvQueryContext* LineTo;//[Offset: 0x8, Size: 0x8] 0x715ce91e60
	class EnvQueryContext* Rotation;//[Offset: 0x10, Size: 0x8] 0x715ce91f00
	byte DirMode;//[Offset: 0x18, Size: 0x1] 0x715cead680

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object // 71a4b07400
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x80, Size: 0x38] 0x715ccf7c80
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38] 0x715ccf7d00
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xf0, Size: 0x38] 0x715ccf7d80
	enum PointOnCircleSpacingMethod;//[Offset: 0x128, Size: 0x1] 0x715cc89020
	EnvDirection ArcDirection;//[Offset: 0x130, Size: 0x20] 0x715ccf7e80
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x150, Size: 0x38] 0x715ccf7f00
	float AngleRadians;//[Offset: 0x188, Size: 0x4] 0x715ccf7f80
	class EnvQueryContext* CircleCenter;//[Offset: 0x190, Size: 0x8] 0x715cc86780
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1] 0x715ccf8000
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x1a0, Size: 0x38] 0x715ccf8080
	EnvTraceData TraceData;//[Offset: 0x1d8, Size: 0x30] 0x715ccf8100
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x715ccf8180

--------------------------------
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object // 71a4b06f00
	AIDataProviderFloatValue GridSize;//[Offset: 0x80, Size: 0x38] 0x715ccf7b80
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38] 0x715ccf7c00
	class EnvQueryContext* GenerateAround;//[Offset: 0xf0, Size: 0x8] 0x715cc88f80

--------------------------------
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object // 71a4b07180
	AIDataProviderBoolValue PathToItem;//[Offset: 0xf8, Size: 0x38] 0x715ccf7a80
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x130, Size: 0x8] 0x715cc88ee0
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x138, Size: 0x38] 0x715ccf7b00

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object // 71a4b06280

--------------------------------
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object // 71a4b06500

--------------------------------
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object // 71a4b06780

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object // 71a4b06000

--------------------------------
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object // 71a4b05d80

--------------------------------
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object // 71a4b05600
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x715ccf9400
	class EnvQueryContext* DistanceTo;//[Offset: 0x1f8, Size: 0x8] 0x715cc88b20

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object // 71a4b05380
	EnvDirection LineA;//[Offset: 0x1f8, Size: 0x20] 0x715ccf9200
	EnvDirection LineB;//[Offset: 0x218, Size: 0x20] 0x715ccf9280
	enum TestMode;//[Offset: 0x238, Size: 0x1] 0x715cc88a80
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x715ccf9380

--------------------------------
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object // 71a4b0f600
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x1f8, Size: 0x48] 0x715ccf9000
	bool bUpdatedToUseQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x715ccf9080
	enum TagsToMatch;//[Offset: 0x241, Size: 0x1] 0x715cc889e0
	GameplayTagContainer GameplayTags;//[Offset: 0x248, Size: 0x20] 0x715ccf9180

--------------------------------
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object // 71a4b0f380
	EnvOverlapData OverlapData;//[Offset: 0x1f4, Size: 0x1c] 0x715ccf8f80

--------------------------------
Class: EnvOverlapData // 715ce7d6c0
	float ExtentX;//[Offset: 0x0, Size: 0x4] 0x715ceabe80
	float ExtentY;//[Offset: 0x4, Size: 0x4] 0x715ceabf00
	float ExtentZ;//[Offset: 0x8, Size: 0x4] 0x715ceabf80
	Vector ShapeOffset;//[Offset: 0xc, Size: 0xc] 0x715ceac000
	byte OverlapChannel;//[Offset: 0x18, Size: 0x1] 0x715ceac080
	byte OverlapShape;//[Offset: 0x19, Size: 0x1] 0x715ceac100
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1] 0x715ceac180
	bool bOverlapComplex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1] 0x715ceac200
	bool bSkipOverlapQuerier;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a, Size: 0x1] 0x715ceac280

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object // 71a4b0f100
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x715ccf8e00
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8] 0x715cc888a0
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x200, Size: 0x38] 0x715ccf8e80
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x238, Size: 0x38] 0x715ccf8f00
	class NavigationQueryFilter* FilterClass;//[Offset: 0x270, Size: 0x8] 0x715cc88940

--------------------------------
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object // 71a4b0ee80
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x278, Size: 0x38] 0x715ccf8d80

--------------------------------
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object // 71a4b0ec00
	EnvTraceData ProjectionData;//[Offset: 0x1f8, Size: 0x30] 0x715ccf8d00

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object // 71a4b0e980

--------------------------------
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object // 71a4b0e700
	EnvTraceData TraceData;//[Offset: 0x1f8, Size: 0x30] 0x715ccf8b00
	AIDataProviderBoolValue TraceFromContext;//[Offset: 0x228, Size: 0x38] 0x715ccf8b80
	AIDataProviderFloatValue ItemHeightOffset;//[Offset: 0x260, Size: 0x38] 0x715ccf8c00
	AIDataProviderFloatValue ContextHeightOffset;//[Offset: 0x298, Size: 0x38] 0x715ccf8c80
	class EnvQueryContext* Context;//[Offset: 0x2d0, Size: 0x8] 0x715cc88800

--------------------------------
Class: EnvQueryTest_Volume.EnvQueryTest.EnvQueryNode.Object // 71a4b0e480
	class EnvQueryContext* VolumeContext;//[Offset: 0x1f8, Size: 0x8] 0x715cc886c0
	class Volume* VolumeClass;//[Offset: 0x200, Size: 0x8] 0x715cc88760
	bool bDoComplexVolumeTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x715ccf8a80

--------------------------------
Class: EnvQueryTypes.Object // 71a4b0e200

--------------------------------
Class: EQSQueryResultSourceInterface.Interface.Object // 71a4b0df80

--------------------------------
Class: EQSRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b0dd00

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object // 71a4b0da80
	EnvQuery* QueryTemplate;//[Offset: 0x4c0, Size: 0x8] 0x715ccfa500
	EnvNamedValue[] QueryParams;//[Offset: 0x4c8, Size: 0x10] 0x715cc884e0
	AIDynamicParam[] QueryConfig;//[Offset: 0x4d8, Size: 0x10] 0x715cc88580
	float TimeLimitPerStep;//[Offset: 0x4e8, Size: 0x4] 0x715ccf8580
	int StepToDebugDraw;//[Offset: 0x4ec, Size: 0x4] 0x715ccf8600
	enum HighlightMode;//[Offset: 0x4f0, Size: 0x1] 0x715cc88620
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f1, Size: 0x1] 0x715ccf8700
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f1, Size: 0x1] 0x715ccf8780
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f1, Size: 0x1] 0x715ccf8800
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f1, Size: 0x1] 0x715ccf8880
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4f1, Size: 0x1] 0x715ccf8900
	byte QueryingMode;//[Offset: 0x4f2, Size: 0x1] 0x715ccf8980
	NavAgentProperties NavAgentProperties;//[Offset: 0x4f8, Size: 0x30] 0x715ccf8a00

--------------------------------
Class: GenericTeamAgentInterface.Interface.Object // 71a4b0d800

--------------------------------
Class: GridPathAIController.AIController.Controller.Actor.Object // 71a4b0d580

--------------------------------
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object // 71a4b0d300
	NavLocalGridManager* GridManager;//[Offset: 0x258, Size: 0x8] 0x715ccfa480

--------------------------------
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object // 71a4b0d080

--------------------------------
Class: PathFollowingManager.Object // 71a4b0cb80

--------------------------------
Class: PawnAction_BlueprintBase.PawnAction.Object // 71a4b0c680
	void ActionTick(Pawn* ControlledPawn, float DeltaSeconds);// 0x45c6aa0 0x715cce6c20
	void ActionStart(Pawn* ControlledPawn);// 0x45c6aa0 0x715cce6d00
	void ActionResume(Pawn* ControlledPawn);// 0x45c6aa0 0x715cce6de0
	void ActionPause(Pawn* ControlledPawn);// 0x45c6aa0 0x715cce6ec0
	void ActionFinished(Pawn* ControlledPawn, byte WithResult);// 0x45c6aa0 0x715cce6fa0

--------------------------------
Class: PawnAction_Move.PawnAction.Object // 71a4b0c400
	Actor* GoalActor;//[Offset: 0x98, Size: 0x8] 0x715ccfc400
	Vector GoalLocation;//[Offset: 0xa0, Size: 0xc] 0x715ccfc480
	float AcceptableRadius;//[Offset: 0xac, Size: 0x4] 0x715ccfc500
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb0, Size: 0x8] 0x715cc88260
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x715ccfc580
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x715ccfc600
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1] 0x715ccfa580
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1] 0x715ccfa600
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1] 0x715ccfa680
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1] 0x715ccfa700
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1] 0x715ccfa780

--------------------------------
Class: PawnAction_Repeat.PawnAction.Object // 71a4b0c180
	PawnAction* ActionToRepeat;//[Offset: 0x98, Size: 0x8] 0x715ccfc280
	PawnAction* RecentActionCopy;//[Offset: 0xa0, Size: 0x8] 0x715ccfc300
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1] 0x715ccfc380

--------------------------------
Class: PawnAction_Sequence.PawnAction.Object // 71a4b0bf00
	PawnAction*[] ActionSequence;//[Offset: 0x98, Size: 0x10] 0x715cc881c0
	byte ChildFailureHandlingMode;//[Offset: 0xa8, Size: 0x1] 0x715ccfc180
	PawnAction* RecentActionCopy;//[Offset: 0xb0, Size: 0x8] 0x715ccfc200

--------------------------------
Class: PawnAction_Wait.PawnAction.Object // 71a4b0bc80
	float TimeToWait;//[Offset: 0x94, Size: 0x4] 0x715ccfc080

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object // 71a4b0b780
	float HearingThreshold;//[Offset: 0xb0, Size: 0x4] 0x715d82c180
	float LOSHearingThreshold;//[Offset: 0xb4, Size: 0x4] 0x715d82c200
	float SightRadius;//[Offset: 0xb8, Size: 0x4] 0x715d82c280
	float SensingInterval;//[Offset: 0xbc, Size: 0x4] 0x715d82c300
	float HearingMaxSoundAge;//[Offset: 0xc0, Size: 0x4] 0x715d82c380
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x715d82c400
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1] 0x715d82c480
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1] 0x715d82c500
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1] 0x715d82c580
	delegate OnSeePawn;//[Offset: 0xd0, Size: 0x10] 0x715d82c600
	delegate OnHearNoise;//[Offset: 0xe0, Size: 0x10] 0x715d82a580
	float PeripheralVisionAngle;//[Offset: 0xf0, Size: 0x4] 0x715d82a600
	float PeripheralVisionCosine;//[Offset: 0xf4, Size: 0x4] 0x715d82a680
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0x6718f64 0x715d833a40
	void SetSensingInterval(const float NewSensingInterval);// 0x6719018 0x715d833b20
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0x6718eb8 0x715d833c00
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0x45c6aa0 0x715d833ce0
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0x45c6aa0 0x715d833dc0
	float GetPeripheralVisionCosine();// 0x6718e80 0x715d833ea0
	float GetPeripheralVisionAngle();// 0x6718e9c 0x715d833f80

--------------------------------
Class: VisualLoggerExtension.Object // 71a4b0b500

--------------------------------
Class: ChaosDebugDrawComponent.ActorComponent.Object // 71a4b0ad80

--------------------------------
Class: ChaosEventListenerComponent.ActorComponent.Object // 71a4b0ab00

--------------------------------
Class: ChaosGameplayEventDispatcher.ChaosEventListenerComponent.ActorComponent.Object // 71a4b0a880
	<PrimitiveComponent*,ChaosHandlerSet> CollisionEventRegistrations;//[Offset: 0x1c8, Size: 0x50] 0x715cecfb80
	<PrimitiveComponent*,BreakEventCallbackWrapper> BreakEventRegistrations;//[Offset: 0x218, Size: 0x50] 0x715cecfc40

--------------------------------
Class: ChaosHandlerSet // 715ce7d240
	<Object*> ChaosHandlers;//[Offset: 0x8, Size: 0x50] 0x715ce91c80

--------------------------------
Class: BreakEventCallbackWrapper // 715ce7d180

--------------------------------
Class: ChaosNotifyHandlerInterface.Interface.Object // 71a4b0a600

--------------------------------
Class: ChaosSolverEngineBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4b0fd80
	static HitResult ConvertPhysicsCollisionToHitResult(out const ChaosPhysicsCollisionInfo PhysicsCollision);// 0x6724b54 0x715cce67c0

--------------------------------
Class: ChaosPhysicsCollisionInfo // 714906f280
	PrimitiveComponent* Component;//[Offset: 0x0, Size: 0x8] 0x715d931d80
	PrimitiveComponent* OtherComponent;//[Offset: 0x8, Size: 0x8] 0x715d931e00
	Vector Location;//[Offset: 0x10, Size: 0xc] 0x715d931e80
	Vector Normal;//[Offset: 0x1c, Size: 0xc] 0x715d931f00
	Vector AccumulatedImpulse;//[Offset: 0x28, Size: 0xc] 0x715d931f80
	Vector Velocity;//[Offset: 0x34, Size: 0xc] 0x715d932000
	Vector OtherVelocity;//[Offset: 0x40, Size: 0xc] 0x715d932080
	Vector AngularVelocity;//[Offset: 0x4c, Size: 0xc] 0x715d932100
	Vector OtherAngularVelocity;//[Offset: 0x58, Size: 0xc] 0x715d930080
	float Mass;//[Offset: 0x64, Size: 0x4] 0x715d930180
	float OtherMass;//[Offset: 0x68, Size: 0x4] 0x715d930100

--------------------------------
Class: ChaosSolver.Object // 71a4b0fb00

--------------------------------
Class: ChaosSolverActor.Actor.Object // 71a4b0f880
	float TimeStepMultiplier;//[Offset: 0x220, Size: 0x4] 0x715ccfcc80
	int CollisionIterations;//[Offset: 0x224, Size: 0x4] 0x715ccfcd00
	int PushOutIterations;//[Offset: 0x228, Size: 0x4] 0x715ccfcd80
	int PushOutPairIterations;//[Offset: 0x22c, Size: 0x4] 0x715ccfce00
	float ClusterConnectionFactor;//[Offset: 0x230, Size: 0x4] 0x715ccfce80
	enum ClusterUnionConnectionType;//[Offset: 0x234, Size: 0x1] 0x715cc87fe0
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1] 0x715ccfcf80
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x238, Size: 0x10] 0x715ccfd000
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x715ccfd080
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x24c, Size: 0x10] 0x715ccfd100
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x715ccfd180
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x260, Size: 0x10] 0x715ccfd200
	bool bHasFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x715ccfd280
	float FloorHeight;//[Offset: 0x274, Size: 0x4] 0x715ccfd300
	float MassScale;//[Offset: 0x278, Size: 0x4] 0x715ccfd380
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1] 0x715ccfd400
	ChaosDebugSubstepControl ChaosDebugSubstepControl;//[Offset: 0x27d, Size: 0x3] 0x715ccfd480
	BillboardComponent* SpriteComponent;//[Offset: 0x280, Size: 0x8] 0x715ccfd500
	ChaosGameplayEventDispatcher* GameplayEventDispatcherComponent;//[Offset: 0x2a0, Size: 0x8] 0x715ccfd580
	void SetSolverActive(bool bActive);// 0x672516c 0x715cce6600
	void SetAsCurrentWorldSolver();// 0x6725220 0x715cce66e0

--------------------------------
Class: SolverCollisionFilterSettings // 715dadd780
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715db05a80
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x715db05b00
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x715db05b80
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x715db05c00

--------------------------------
Class: SolverBreakingFilterSettings // 715dadd840
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715db05c80
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x715db05d00
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x715db05d80
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x715db05e00

--------------------------------
Class: SolverTrailingFilterSettings // 715dadd6c0
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715db05880
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x715db05900
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x715db05980
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x715db05a00

--------------------------------
Class: ChaosDebugSubstepControl // 715ce7d0c0
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x715cead200
	bool bSubstep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x715cead280
	bool bStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x715cead300

--------------------------------
Class: ChaosSolverSettings.DeveloperSettings.Object // 71a4b15100
	SoftClassPath DefaultChaosSolverActorClass;//[Offset: 0x40, Size: 0x18] 0x715ccfcc00

--------------------------------
Class: FieldSystemActor.Actor.Object // 71a4b14e80
	FieldSystemComponent* FieldSystemComponent;//[Offset: 0x220, Size: 0x8] 0x715ccfcb80

--------------------------------
Class: FieldSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b14980
	FieldSystem* FieldSystem;//[Offset: 0x418, Size: 0x8] 0x715ccfdc00
	ChaosSolverActor*[] SupportedSolvers;//[Offset: 0x430, Size: 0x10] 0x715cc87f40
	void ResetFieldSystem();// 0x672d188 0x715cce5e20
	void ApplyUniformVectorFalloffForce(bool Enabled, Vector Position, Vector Direction, float Radius, float Magnitude);// 0x672d4cc 0x715cce5f00
	void ApplyStrainField(bool Enabled, Vector Position, float Radius, float Magnitude, int Iterations);// 0x672d314 0x715cce5fe0
	void ApplyStayDynamicField(bool Enabled, Vector Position, float Radius);// 0x672d928 0x715cce60c0
	void ApplyRadialVectorFalloffForce(bool Enabled, Vector Position, float Radius, float Magnitude);// 0x672d680 0x715cce61a0
	void ApplyRadialForce(bool Enabled, Vector Position, float Magnitude);// 0x672d7f4 0x715cce6280
	void ApplyPhysicsField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x672d19c 0x715cce6360
	void ApplyLinearForce(bool Enabled, Vector Direction, float Magnitude);// 0x672da5c 0x715cce6440
	void AddFieldCommand(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x672d010 0x715cce6520

--------------------------------
Class: FieldSystemMetaData.ActorComponent.Object // 71a4b14700

--------------------------------
Class: FieldNodeBase.ActorComponent.Object // 71a4b13f80

--------------------------------
Class: FieldSystem.Object // 71a4b14c00

--------------------------------
Class: FieldSystemMetaDataIteration.FieldSystemMetaData.ActorComponent.Object // 71a4b14480
	int Iterations;//[Offset: 0xb0, Size: 0x4] 0x715ccfda80
	FieldSystemMetaDataIteration* SetMetaDataIteration(int Iterations);// 0x672e40c 0x715cce5d40

--------------------------------
Class: FieldSystemMetaDataProcessingResolution.FieldSystemMetaData.ActorComponent.Object // 71a4b14200
	byte ResolutionType;//[Offset: 0xb0, Size: 0x1] 0x715ccfd900
	FieldSystemMetaDataProcessingResolution* SetMetaDataaProcessingResolutionType(byte ResolutionType);// 0x672e7d4 0x715cce5c60

--------------------------------
Class: FieldNodeInt.FieldNodeBase.ActorComponent.Object // 71a4b13d00

--------------------------------
Class: FieldNodeFloat.FieldNodeBase.ActorComponent.Object // 71a4b13a80

--------------------------------
Class: FieldNodeVector.FieldNodeBase.ActorComponent.Object // 71a4b13800

--------------------------------
Class: UniformInteger.FieldNodeInt.FieldNodeBase.ActorComponent.Object // 71a4b13580
	int Magnitude;//[Offset: 0xb0, Size: 0x4] 0x715ccfd780
	UniformInteger* SetUniformInteger(int Magnitude);// 0x672f26c 0x715cce5b80

--------------------------------
Class: RadialIntMask.FieldNodeInt.FieldNodeBase.ActorComponent.Object // 71a4b13300
	float Radius;//[Offset: 0xb0, Size: 0x4] 0x715ccff300
	Vector Position;//[Offset: 0xb4, Size: 0xc] 0x715ccff380
	int InteriorValue;//[Offset: 0xc0, Size: 0x4] 0x715ccff400
	int ExteriorValue;//[Offset: 0xc4, Size: 0x4] 0x715ccff480
	byte SetMaskCondition;//[Offset: 0xc8, Size: 0x1] 0x715ccff500
	RadialIntMask* SetRadialIntMask(float Radius, Vector Position, int InteriorValue, int ExteriorValue, byte SetMaskConditionIn);// 0x672f63c 0x715cce5aa0

--------------------------------
Class: UniformScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object // 71a4b13080
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x715ccff180
	UniformScalar* SetUniformScalar(float Magnitude);// 0x672fb20 0x715cce59c0

--------------------------------
Class: RadialFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object // 71a4b12e00
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x715ccfea00
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x715ccfea80
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x715ccfeb00
	float Default;//[Offset: 0xbc, Size: 0x4] 0x715ccfeb80
	float Radius;//[Offset: 0xc0, Size: 0x4] 0x715ccfec00
	Vector Position;//[Offset: 0xc4, Size: 0xc] 0x715ccfec80
	byte Falloff;//[Offset: 0xd0, Size: 0x1] 0x715ccfed00
	RadialFalloff* SetRadialFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Radius, Vector Position, byte Falloff);// 0x672fef4 0x715cce58e0

--------------------------------
Class: PlaneFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object // 71a4b12b80
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x715ccffa00
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x715ccffa80
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x715ccffb00
	float Default;//[Offset: 0xbc, Size: 0x4] 0x715ccffb80
	float Distance;//[Offset: 0xc0, Size: 0x4] 0x715ccffc00
	Vector Position;//[Offset: 0xc4, Size: 0xc] 0x715ccffc80
	Vector Normal;//[Offset: 0xd0, Size: 0xc] 0x715ccffd00
	byte Falloff;//[Offset: 0xdc, Size: 0x1] 0x715ccffd80
	PlaneFalloff* SetPlaneFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Distance, Vector Position, Vector Normal, byte Falloff);// 0x6730470 0x715cce5800

--------------------------------
Class: BoxFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object // 71a4b12900
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x715cd00c80
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x715cd00d00
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x715cd00d80
	float Default;//[Offset: 0xbc, Size: 0x4] 0x715cd00e00
	Transform Transform;//[Offset: 0xc0, Size: 0x30] 0x715cd00e80
	byte Falloff;//[Offset: 0xf0, Size: 0x1] 0x715cd00f00
	BoxFalloff* SetBoxFalloff(float Magnitude, float MinRange, float MaxRange, float Default, Transform Transform, byte Falloff);// 0x6730a40 0x715cce5720

--------------------------------
Class: NoiseField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object // 71a4b12680
	float MinRange;//[Offset: 0xb0, Size: 0x4] 0x715cd00900
	float MaxRange;//[Offset: 0xb4, Size: 0x4] 0x715cd00980
	Transform Transform;//[Offset: 0xc0, Size: 0x30] 0x715cd00a00
	NoiseField* SetNoiseField(float MinRange, float MaxRange, Transform Transform);// 0x6730fb4 0x715cce9000

--------------------------------
Class: UniformVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object // 71a4b12400
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x715cd00680
	Vector Direction;//[Offset: 0xb4, Size: 0xc] 0x715cd00700
	UniformVector* SetUniformVector(float Magnitude, Vector Direction);// 0x673146c 0x715cce8f20

--------------------------------
Class: RadialVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object // 71a4b12180
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x715cd00400
	Vector Position;//[Offset: 0xb4, Size: 0xc] 0x715cd00480
	RadialVector* SetRadialVector(float Magnitude, Vector Position);// 0x6731880 0x715cce8e40

--------------------------------
Class: RandomVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object // 71a4b11f00
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x715cd00280
	RandomVector* SetRandomVector(float Magnitude);// 0x6731c94 0x715cce8d60

--------------------------------
Class: OperatorField.FieldNodeBase.ActorComponent.Object // 71a4b11c80
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x715cd01f00
	FieldNodeBase* RightField;//[Offset: 0xb8, Size: 0x8] 0x715cd01f80
	FieldNodeBase* LeftField;//[Offset: 0xc0, Size: 0x8] 0x715cd02000
	byte Operation;//[Offset: 0xc8, Size: 0x1] 0x715cd02080
	OperatorField* SetOperatorField(float Magnitude, const FieldNodeBase* RightField, const FieldNodeBase* LeftField, byte Operation);// 0x6732068 0x715cce8c80

--------------------------------
Class: ToIntegerField.FieldNodeInt.FieldNodeBase.ActorComponent.Object // 71a4b11a00
	FieldNodeFloat* FloatField;//[Offset: 0xb0, Size: 0x8] 0x715cd01d80
	ToIntegerField* SetToIntegerField(const FieldNodeFloat* FloatField);// 0x673250c 0x715cce8ba0

--------------------------------
Class: ToFloatField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object // 71a4b11780
	FieldNodeInt* IntField;//[Offset: 0xb0, Size: 0x8] 0x715cd01c00
	ToFloatField* SetToFloatField(const FieldNodeInt* IntegerField);// 0x67328dc 0x715cce8ac0

--------------------------------
Class: CullingField.FieldNodeBase.ActorComponent.Object // 71a4b11500
	FieldNodeBase* Culling;//[Offset: 0xb0, Size: 0x8] 0x715cd01880
	FieldNodeBase* Field;//[Offset: 0xb8, Size: 0x8] 0x715cd01900
	byte Operation;//[Offset: 0xc0, Size: 0x1] 0x715cd01980
	CullingField* SetCullingField(const FieldNodeBase* Culling, const FieldNodeBase* Field, byte Operation);// 0x6732cac 0x715cce89e0

--------------------------------
Class: ReturnResultsTerminal.FieldNodeBase.ActorComponent.Object // 71a4b11280
	ReturnResultsTerminal* SetReturnResultsTerminal();// 0x6733104 0x715cce8900

--------------------------------
Class: ChaosDestructionListener.SceneComponent.ActorComponent.Object // 71a4b11000
	bool bIsCollisionEventListeningEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x715cd02b00
	bool bIsBreakingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1] 0x715cd02b80
	bool bIsTrailingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1] 0x715cd02c00
	ChaosCollisionEventRequestSettings CollisionEventRequestSettings;//[Offset: 0x1f4, Size: 0x18] 0x715cd02c80
	ChaosBreakingEventRequestSettings BreakingEventRequestSettings;//[Offset: 0x20c, Size: 0x18] 0x715cd02d00
	ChaosTrailingEventRequestSettings TrailingEventRequestSettings;//[Offset: 0x224, Size: 0x18] 0x715cd02d80
	<ChaosSolverActor*> ChaosSolverActors;//[Offset: 0x240, Size: 0x50] 0x715cc8a380
	<GeometryCollectionActor*> GeometryCollectionActors;//[Offset: 0x290, Size: 0x50] 0x715cc8a420
	delegate OnCollisionEvents;//[Offset: 0x2e0, Size: 0x10] 0x715cd02f00
	delegate OnBreakingEvents;//[Offset: 0x2f0, Size: 0x10] 0x715cd02f80
	delegate OnTrailingEvents;//[Offset: 0x300, Size: 0x10] 0x715cd03000
	void SortTrailingEvents(out ChaosTrailingEventData[] TrailingEvents, enum SortMethod);// 0x6753fc4 0x715cce7cc0
	void SortCollisionEvents(out ChaosCollisionEventData[] CollisionEvents, enum SortMethod);// 0x67541c4 0x715cce7da0
	void SortBreakingEvents(out ChaosBreakingEventData[] BreakingEvents, enum SortMethod);// 0x67540c4 0x715cce7e80
	void SetTrailingEventRequestSettings(out const ChaosTrailingEventRequestSettings InSettings);// 0x6754500 0x715cce7f60
	void SetTrailingEventEnabled(bool bIsEnabled);// 0x67542fc 0x715cce8040
	void SetCollisionEventRequestSettings(out const ChaosCollisionEventRequestSettings InSettings);// 0x6754680 0x715cce8120
	void SetCollisionEventEnabled(bool bIsEnabled);// 0x6754454 0x715cce8200
	void SetBreakingEventRequestSettings(out const ChaosBreakingEventRequestSettings InSettings);// 0x67545c0 0x715cce82e0
	void SetBreakingEventEnabled(bool bIsEnabled);// 0x67543a8 0x715cce83c0
	void RemoveGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x6754740 0x715cce84a0
	void RemoveChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x6754888 0x715cce8580
	bool IsEventListening();// 0x67542c4 0x715cce8660
	void AddGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x67547e4 0x715cce8740
	void AddChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x675492c 0x715cce8820

--------------------------------
Class: ChaosTrailingEventData // 714906ebc0
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715d934f80
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x715d935000
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc] 0x715d935080
	float Mass;//[Offset: 0x24, Size: 0x4] 0x715d935100
	int ParticleIndex;//[Offset: 0x28, Size: 0x4] 0x715d935180

--------------------------------
Class: ChaosCollisionEventData // 714906ed40
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715d933400
	Vector Normal;//[Offset: 0xc, Size: 0xc] 0x715d933480
	Vector Velocity1;//[Offset: 0x18, Size: 0xc] 0x715d933500
	Vector Velocity2;//[Offset: 0x24, Size: 0xc] 0x715d933580
	float Mass1;//[Offset: 0x30, Size: 0x4] 0x715d933600
	float Mass2;//[Offset: 0x34, Size: 0x4] 0x715d933680
	Vector Impulse;//[Offset: 0x38, Size: 0xc] 0x715d933700

--------------------------------
Class: ChaosBreakingEventData // 714906ec80
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715d933200
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x715d933280
	float Mass;//[Offset: 0x18, Size: 0x4] 0x715d933300

--------------------------------
Class: ChaosTrailingEventRequestSettings // 715ce7ce80
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4] 0x715ceac900
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x715ceac980
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x715ceaca00
	float MinAngularSpeed;//[Offset: 0xc, Size: 0x4] 0x715ceaca80
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x715ceacb00
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x715ce91aa0

--------------------------------
Class: ChaosCollisionEventRequestSettings // 715ce7cf40
	int MaxNumberResults;//[Offset: 0x0, Size: 0x4] 0x715ceacc00
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x715ceacc80
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x715ceacd00
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x715ceacd80
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x715ceace00
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x715ce91b40

--------------------------------
Class: ChaosBreakingEventRequestSettings // 715ce7d000
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4] 0x715ceacf00
	float MinRadius;//[Offset: 0x4, Size: 0x4] 0x715ceacf80
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x715cead000
	float MinMass;//[Offset: 0xc, Size: 0x4] 0x715cead080
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x715cead100
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x715ce91be0

--------------------------------
Class: GeometryCollectionActor.Actor.Object // 71a4b10d80
	GeometryCollectionComponent* GeometryCollectionComponent;//[Offset: 0x220, Size: 0x8] 0x715cd02800
	GeometryCollectionDebugDrawComponent* GeometryCollectionDebugDrawComponent;//[Offset: 0x228, Size: 0x8] 0x715cd02880
	bool RaycastSingle(Vector Start, Vector End, out HitResult OutHit);// 0x6755814 0x715cce7be0

--------------------------------
Class: GeometryCollectionComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b10880
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0x448, Size: 0x8] 0x715d933800
	GeometryCollection* RestCollection;//[Offset: 0x530, Size: 0x8] 0x715d933880
	FieldSystemActor*[] InitializationFields;//[Offset: 0x538, Size: 0x10] 0x715d891d20
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1] 0x715d933980
	enum ObjectType;//[Offset: 0x550, Size: 0x1] 0x715d891dc0
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1] 0x715d933a80
	int ClusterGroupIndex;//[Offset: 0x554, Size: 0x4] 0x715d933b00
	int MaxClusterLevel;//[Offset: 0x558, Size: 0x4] 0x715d933b80
	float[] DamageThreshold;//[Offset: 0x560, Size: 0x10] 0x715d891e60
	enum ClusterConnectionType;//[Offset: 0x570, Size: 0x1] 0x715d891f00
	int CollisionGroup;//[Offset: 0x574, Size: 0x4] 0x715d933d00
	float CollisionSampleFraction;//[Offset: 0x578, Size: 0x4] 0x715d933d80
	float LinearEtherDrag;//[Offset: 0x57c, Size: 0x4] 0x715d933e00
	float AngularEtherDrag;//[Offset: 0x580, Size: 0x4] 0x715d933e80
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0x588, Size: 0x8] 0x715d933f00
	enum InitialVelocityType;//[Offset: 0x590, Size: 0x1] 0x715d891fa0
	Vector InitialLinearVelocity;//[Offset: 0x594, Size: 0xc] 0x715d934000
	Vector InitialAngularVelocity;//[Offset: 0x5a0, Size: 0xc] 0x715d934080
	GeomComponentCacheParameters CacheParameters;//[Offset: 0x5b0, Size: 0x50] 0x715d932a00
	delegate NotifyGeometryCollectionPhysicsStateChange;//[Offset: 0x600, Size: 0x10] 0x715d932a80
	delegate NotifyGeometryCollectionPhysicsLoadingStateChange;//[Offset: 0x610, Size: 0x10] 0x715d932b00
	delegate OnChaosBreakEvent;//[Offset: 0x638, Size: 0x10] 0x715d932b80
	float DesiredCacheTime;//[Offset: 0x648, Size: 0x4] 0x715d932c00
	bool CachePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 0x1] 0x715d932c80
	delegate OnChaosPhysicsCollision;//[Offset: 0x650, Size: 0x10] 0x715d932d00
	bool bNotifyBreaks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1] 0x715d932d80
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1] 0x715d932e00
	BodySetup* DummyBodySetup;//[Offset: 0x860, Size: 0x8] 0x715d932e80
	void SetNotifyBreaks(bool bNewNotifyBreaks);// 0x675625c 0x715da11ba0
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x45c6aa0 0x715da11c80
	void NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0x45c6aa0 0x715d88e780
	void NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0x45c6aa0 0x715d88e860
	void ApplyPhysicsField(bool Enabled, enum Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x6756308 0x715d88e940
	void ApplyKinematicField(float Radius, Vector Position);// 0x6756480 0x715d88ea20

--------------------------------
Class: GeomComponentCacheParameters // 714906ef80
	enum CacheMode;//[Offset: 0x0, Size: 0x1] 0x715d892040
	GeometryCollectionCache* TargetCache;//[Offset: 0x8, Size: 0x8] 0x715d934180
	float ReverseCacheBeginTime;//[Offset: 0x10, Size: 0x4] 0x715d934200
	bool SaveCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x715d932180
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x715d932200
	int CollisionDataSizeMax;//[Offset: 0x18, Size: 0x4] 0x715d932280
	bool DoCollisionDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x715d932300
	float CollisionDataSpatialHashRadius;//[Offset: 0x20, Size: 0x4] 0x715d932380
	int MaxCollisionPerCell;//[Offset: 0x24, Size: 0x4] 0x715d932400
	bool SaveBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715d932480
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715d932500
	int BreakingDataSizeMax;//[Offset: 0x2c, Size: 0x4] 0x715d932580
	bool DoBreakingDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715d932600
	float BreakingDataSpatialHashRadius;//[Offset: 0x34, Size: 0x4] 0x715d932680
	int MaxBreakingPerCell;//[Offset: 0x38, Size: 0x4] 0x715d932700
	bool SaveTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715d932780
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x715d932800
	int TrailingDataSizeMax;//[Offset: 0x40, Size: 0x4] 0x715d932880
	float TrailingMinSpeedThreshold;//[Offset: 0x44, Size: 0x4] 0x715d932900
	float TrailingMinVolumeThreshold;//[Offset: 0x48, Size: 0x4] 0x715d932980

--------------------------------
Class: GeometryCollectionCache.Object // 71a4b10b00
	RecordedTransformTrack RecordedData;//[Offset: 0x28, Size: 0x10] 0x715cd02680
	GeometryCollection* SupportedCollection;//[Offset: 0x38, Size: 0x8] 0x715cd02700
	Guid CompatibleCollectionState;//[Offset: 0x40, Size: 0x10] 0x715cd02780

--------------------------------
Class: RecordedTransformTrack // 715daddc00
	RecordedFrame[] Records;//[Offset: 0x0, Size: 0x10] 0x715dae6280

--------------------------------
Class: RecordedFrame // 715daddb40
	Transform[] Transforms;//[Offset: 0x0, Size: 0x10] 0x715dae5e20
	int[] TransformIndices;//[Offset: 0x10, Size: 0x10] 0x715dae5ec0
	int[] PreviousTransformIndices;//[Offset: 0x20, Size: 0x10] 0x715dae5f60
	bool[] DisabledFlags;//[Offset: 0x30, Size: 0x10] 0x715dae6000
	SolverCollisionData[] Collisions;//[Offset: 0x40, Size: 0x10] 0x715dae60a0
	SolverBreakingData[] Breakings;//[Offset: 0x50, Size: 0x10] 0x715dae6140
	<SolverTrailingData> Trailings;//[Offset: 0x60, Size: 0x50] 0x715dae61e0
	float Timestamp;//[Offset: 0xb0, Size: 0x4] 0x715db04d80

--------------------------------
Class: SolverCollisionData // 715dadd900
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715db06080
	Vector AccumulatedImpulse;//[Offset: 0xc, Size: 0xc] 0x715db06100
	Vector Normal;//[Offset: 0x18, Size: 0xc] 0x715db06180
	Vector Velocity1;//[Offset: 0x24, Size: 0xc] 0x715db06200
	Vector Velocity2;//[Offset: 0x30, Size: 0xc] 0x715db06280
	Vector AngularVelocity1;//[Offset: 0x3c, Size: 0xc] 0x715db06300
	Vector AngularVelocity2;//[Offset: 0x48, Size: 0xc] 0x715db04280
	float Mass1;//[Offset: 0x54, Size: 0x4] 0x715db04300
	float Mass2;//[Offset: 0x58, Size: 0x4] 0x715db04380
	int ParticleIndex;//[Offset: 0x5c, Size: 0x4] 0x715db04400
	int LevelsetIndex;//[Offset: 0x60, Size: 0x4] 0x715db04480
	int ParticleIndexMesh;//[Offset: 0x64, Size: 0x4] 0x715db04500
	int LevelsetIndexMesh;//[Offset: 0x68, Size: 0x4] 0x715db04580

--------------------------------
Class: SolverBreakingData // 715dadd9c0
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715db04680
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x715db04700
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc] 0x715db04780
	float Mass;//[Offset: 0x24, Size: 0x4] 0x715db04800
	int ParticleIndex;//[Offset: 0x28, Size: 0x4] 0x715db04880
	int ParticleIndexMesh;//[Offset: 0x2c, Size: 0x4] 0x715db04900

--------------------------------
Class: SolverTrailingData // 715dadda80
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715db04a00
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x715db04a80
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc] 0x715db04b00
	float Mass;//[Offset: 0x24, Size: 0x4] 0x715db04b80
	int ParticleIndex;//[Offset: 0x28, Size: 0x4] 0x715db04c00
	int ParticleIndexMesh;//[Offset: 0x2c, Size: 0x4] 0x715db04c80

--------------------------------
Class: GeometryCollectionDebugDrawComponent.ActorComponent.Object // 71a4b10380
	GeometryCollectionDebugDrawActor* GeometryCollectionDebugDrawActor;//[Offset: 0xb0, Size: 0x8] 0x715cd04900
	GeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor;//[Offset: 0xb8, Size: 0x8] 0x715cd04980

--------------------------------
Class: GeometryCollectionDebugDrawActor.Actor.Object // 71a4b10600
	GeometryCollectionDebugDrawWarningMessage WarningMessage;//[Offset: 0x220, Size: 0x1] 0x715cd04a00
	GeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody;//[Offset: 0x228, Size: 0x18] 0x715cd04a80
	bool bDebugDrawWholeCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x715cd04b00
	bool bDebugDrawHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1] 0x715cd04b80
	bool bDebugDrawClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242, Size: 0x1] 0x715cd04c00
	enum HideGeometry;//[Offset: 0x243, Size: 0x1] 0x715cc8a2e0
	bool bShowRigidBodyId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1] 0x715cd04d00
	bool bShowRigidBodyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 0x1] 0x715cd04d80
	bool bCollisionAtOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246, Size: 0x1] 0x715cd04e00
	bool bShowRigidBodyTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x247, Size: 0x1] 0x715cd04e80
	bool bShowRigidBodyInertia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x715cd04f00
	bool bShowRigidBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1] 0x715cd04f80
	bool bShowRigidBodyForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24a, Size: 0x1] 0x715cd05000
	bool bShowRigidBodyInfos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 0x1] 0x715cd05080
	bool bShowTransformIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1] 0x715cd05100
	bool bShowTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1] 0x715cd05180
	bool bShowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 0x1] 0x715cd05200
	bool bShowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 0x1] 0x715cd05280
	bool bShowConnectivityEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x715cd03200
	bool bShowGeometryIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1] 0x715cd03280
	bool bShowGeometryTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1] 0x715cd03300
	bool bShowBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 0x1] 0x715cd03380
	bool bShowFaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1] 0x715cd03400
	bool bShowFaceIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1] 0x715cd03480
	bool bShowFaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 0x1] 0x715cd03500
	bool bShowSingleFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 0x1] 0x715cd03580
	int SingleFaceIndex;//[Offset: 0x258, Size: 0x4] 0x715cd03600
	bool bShowVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x715cd03680
	bool bShowVertexIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1] 0x715cd03700
	bool bShowVertexNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1] 0x715cd03780
	bool bUseActiveVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 0x1] 0x715cd03800
	float PointThickness;//[Offset: 0x260, Size: 0x4] 0x715cd03880
	float LineThickness;//[Offset: 0x264, Size: 0x4] 0x715cd03900
	bool bTextShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x715cd03980
	float TextScale;//[Offset: 0x26c, Size: 0x4] 0x715cd03a00
	float NormalScale;//[Offset: 0x270, Size: 0x4] 0x715cd03a80
	float AxisScale;//[Offset: 0x274, Size: 0x4] 0x715cd03b00
	float ArrowScale;//[Offset: 0x278, Size: 0x4] 0x715cd03b80
	Color RigidBodyIdColor;//[Offset: 0x27c, Size: 0x4] 0x715cd03c00
	float RigidBodyTransformScale;//[Offset: 0x280, Size: 0x4] 0x715cd03c80
	Color RigidBodyCollisionColor;//[Offset: 0x284, Size: 0x4] 0x715cd03d00
	Color RigidBodyInertiaColor;//[Offset: 0x288, Size: 0x4] 0x715cd03d80
	Color RigidBodyVelocityColor;//[Offset: 0x28c, Size: 0x4] 0x715cd03e00
	Color RigidBodyForceColor;//[Offset: 0x290, Size: 0x4] 0x715cd03e80
	Color RigidBodyInfoColor;//[Offset: 0x294, Size: 0x4] 0x715cd03f00
	Color TransformIndexColor;//[Offset: 0x298, Size: 0x4] 0x715cd03f80
	float TransformScale;//[Offset: 0x29c, Size: 0x4] 0x715cd04000
	Color LevelColor;//[Offset: 0x2a0, Size: 0x4] 0x715cd04080
	Color ParentColor;//[Offset: 0x2a4, Size: 0x4] 0x715cd04100
	float ConnectivityEdgeThickness;//[Offset: 0x2a8, Size: 0x4] 0x715cd04180
	Color GeometryIndexColor;//[Offset: 0x2ac, Size: 0x4] 0x715cd04200
	float GeometryTransformScale;//[Offset: 0x2b0, Size: 0x4] 0x715cd02180
	Color BoundingBoxColor;//[Offset: 0x2b4, Size: 0x4] 0x715cd02200
	Color FaceColor;//[Offset: 0x2b8, Size: 0x4] 0x715cd02280
	Color FaceIndexColor;//[Offset: 0x2bc, Size: 0x4] 0x715cd02300
	Color FaceNormalColor;//[Offset: 0x2c0, Size: 0x4] 0x715cd02380
	Color SingleFaceColor;//[Offset: 0x2c4, Size: 0x4] 0x715cd02400
	Color VertexColor;//[Offset: 0x2c8, Size: 0x4] 0x715cd02480
	Color VertexIndexColor;//[Offset: 0x2cc, Size: 0x4] 0x715cd02500
	Color VertexNormalColor;//[Offset: 0x2d0, Size: 0x4] 0x715cd02580
	BillboardComponent* SpriteComponent;//[Offset: 0x2d8, Size: 0x8] 0x715cd02600

--------------------------------
Class: GeometryCollectionDebugDrawWarningMessage // 715ce7cd00

--------------------------------
Class: GeometryCollectionDebugDrawActorSelectedRigidBody // 715ce7cdc0
	int ID;//[Offset: 0x0, Size: 0x4] 0x715ceac780
	ChaosSolverActor* Solver;//[Offset: 0x8, Size: 0x8] 0x715ceac800
	GeometryCollectionActor* GeometryCollection;//[Offset: 0x10, Size: 0x8] 0x715ceac880

--------------------------------
Class: GeometryCollectionRenderLevelSetActor.Actor.Object // 71a4b1a380
	VolumeTexture* TargetVolumeTexture;//[Offset: 0x220, Size: 0x8] 0x715cd05d80
	Material* RayMarchMaterial;//[Offset: 0x228, Size: 0x8] 0x715cd05e00
	float SurfaceTolerance;//[Offset: 0x230, Size: 0x4] 0x715cd05e80
	float Isovalue;//[Offset: 0x234, Size: 0x4] 0x715cd05f00
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x715cd05f80
	bool RenderVolumeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x715cd06000

--------------------------------
Class: SkeletalMeshSimulationComponent.ActorComponent.Object // 71a4b1a100
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0xb8, Size: 0x8] 0x715cd05300
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0xc0, Size: 0x8] 0x715cd05380
	PhysicsAsset* OverridePhysicsAsset;//[Offset: 0xc8, Size: 0x8] 0x715cd05400
	bool bSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x715cd05480
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1] 0x715cd05500
	enum ObjectType;//[Offset: 0xd2, Size: 0x1] 0x715cc89de0
	float Density;//[Offset: 0xd4, Size: 0x4] 0x715cd05600
	float MinMass;//[Offset: 0xd8, Size: 0x4] 0x715cd05680
	float MaxMass;//[Offset: 0xdc, Size: 0x4] 0x715cd05700
	enum CollisionType;//[Offset: 0xe0, Size: 0x1] 0x715cc89e80
	float ImplicitShapeParticlesPerUnitArea;//[Offset: 0xe4, Size: 0x4] 0x715cd05800
	int ImplicitShapeMinNumParticles;//[Offset: 0xe8, Size: 0x4] 0x715cd05880
	int ImplicitShapeMaxNumParticles;//[Offset: 0xec, Size: 0x4] 0x715cd05900
	int MinLevelSetResolution;//[Offset: 0xf0, Size: 0x4] 0x715cd05980
	int MaxLevelSetResolution;//[Offset: 0xf4, Size: 0x4] 0x715cd05a00
	int CollisionGroup;//[Offset: 0xf8, Size: 0x4] 0x715cd05a80
	enum InitialVelocityType;//[Offset: 0xfc, Size: 0x1] 0x715cc89f20
	Vector InitialLinearVelocity;//[Offset: 0x100, Size: 0xc] 0x715cd05b80
	Vector InitialAngularVelocity;//[Offset: 0x10c, Size: 0xc] 0x715cd05c00
	delegate OnChaosPhysicsCollision;//[Offset: 0x118, Size: 0x10] 0x715cd05c80
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x45c6aa0 0x715cce7b00

--------------------------------
Class: StaticMeshSimulationComponent.ActorComponent.Object // 71a4b19e80
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x715cd06b80
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1] 0x715cd06c00
	enum ObjectType;//[Offset: 0xba, Size: 0x1] 0x715cc89ac0
	float Mass;//[Offset: 0xbc, Size: 0x4] 0x715cd06d00
	enum CollisionType;//[Offset: 0xc0, Size: 0x1] 0x715cc89b60
	enum ImplicitType;//[Offset: 0xc1, Size: 0x1] 0x715cc89c00
	int MinLevelSetResolution;//[Offset: 0xc4, Size: 0x4] 0x715cd06e80
	int MaxLevelSetResolution;//[Offset: 0xc8, Size: 0x4] 0x715cd06f00
	enum InitialVelocityType;//[Offset: 0xcc, Size: 0x1] 0x715cc89ca0
	Vector InitialLinearVelocity;//[Offset: 0xd0, Size: 0xc] 0x715cd07000
	Vector InitialAngularVelocity;//[Offset: 0xdc, Size: 0xc] 0x715cd07080
	float DamageThreshold;//[Offset: 0xe8, Size: 0x4] 0x715cd07100
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0xf0, Size: 0x8] 0x715cd07180
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0xf8, Size: 0x8] 0x715cd07200
	delegate OnChaosPhysicsCollision;//[Offset: 0x100, Size: 0x10] 0x715cd07280
	PrimitiveComponent*[] SimulatedComponents;//[Offset: 0x120, Size: 0x10] 0x715cc89d40
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x45c6aa0 0x715cce7940
	void ForceRecreatePhysicsState();// 0x6757884 0x715cce7a20

--------------------------------
Class: InputBehavior.Object // 71a4b19980

--------------------------------
Class: AnyButtonInputBehavior.InputBehavior.Object // 71a4b19c00

--------------------------------
Class: InteractiveGizmoBuilder.Object // 71a4b19480

--------------------------------
Class: AxisAngleGizmoBuilder.InteractiveGizmoBuilder.Object // 71a4b19700

--------------------------------
Class: InteractiveGizmo.Object // 71a4b18f80
	InputBehaviorSet* InputBehaviors;//[Offset: 0x30, Size: 0x8] 0x715cd06b00

--------------------------------
Class: InputBehaviorSet.Object // 71a4b1da80
	BehaviorInfo[] Behaviors;//[Offset: 0x28, Size: 0x10] 0x715cc898e0

--------------------------------
Class: BehaviorInfo // 715ce7cac0
	InputBehavior* Behavior;//[Offset: 0x0, Size: 0x8] 0x715ceae300

--------------------------------
Class: AxisAngleGizmo.InteractiveGizmo.Object // 71a4b19200
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x715cd06480
	interface class None* AngleSource;//[Offset: 0x58, Size: 0x10] 0x715cd06500
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10] 0x715cd06580
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x715cd06600
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715cd06680
	Vector RotationOrigin;//[Offset: 0x8c, Size: 0xc] 0x715cd06700
	Vector RotationAxis;//[Offset: 0x98, Size: 0xc] 0x715cd06780
	Vector RotationPlaneX;//[Offset: 0xa4, Size: 0xc] 0x715cd06800
	Vector RotationPlaneY;//[Offset: 0xb0, Size: 0xc] 0x715cd06880
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc] 0x715cd06900
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc] 0x715cd06980
	float InteractionStartAngle;//[Offset: 0xd4, Size: 0x4] 0x715cd06a00
	float InteractionCurAngle;//[Offset: 0xd8, Size: 0x4] 0x715cd06a80

--------------------------------
Class: AxisPositionGizmoBuilder.InteractiveGizmoBuilder.Object // 71a4b18d00

--------------------------------
Class: AxisPositionGizmo.InteractiveGizmo.Object // 71a4b18a80
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x715cd07f00
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10] 0x715cd07f80
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10] 0x715cd08000
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x715cd08080
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715cd08100
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x715cd08180
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc] 0x715cd08200
	Vector InteractionAxis;//[Offset: 0x98, Size: 0xc] 0x715cd08280
	Vector InteractionStartPoint;//[Offset: 0xa4, Size: 0xc] 0x715cd08300
	Vector InteractionCurPoint;//[Offset: 0xb0, Size: 0xc] 0x715cd08380
	float InteractionStartParameter;//[Offset: 0xbc, Size: 0x4] 0x715cd08400
	float InteractionCurParameter;//[Offset: 0xc0, Size: 0x4] 0x715cd06380
	float ParameterSign;//[Offset: 0xc4, Size: 0x4] 0x715cd06400

--------------------------------
Class: GizmoConstantAxisSource.Object // 71a4b18800
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x715cd07e00
	Vector Direction;//[Offset: 0x3c, Size: 0xc] 0x715cd07e80

--------------------------------
Class: GizmoConstantFrameAxisSource.Object // 71a4b18580
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x715cd07c00
	Vector Direction;//[Offset: 0x3c, Size: 0xc] 0x715cd07c80
	Vector TangentX;//[Offset: 0x48, Size: 0xc] 0x715cd07d00
	Vector TangentY;//[Offset: 0x54, Size: 0xc] 0x715cd07d80

--------------------------------
Class: GizmoWorldAxisSource.Object // 71a4b18300
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x715cd07b00
	int AxisIndex;//[Offset: 0x3c, Size: 0x4] 0x715cd07b80

--------------------------------
Class: GizmoComponentAxisSource.Object // 71a4b18080
	SceneComponent* Component;//[Offset: 0x30, Size: 0x8] 0x715cd07980
	int AxisIndex;//[Offset: 0x38, Size: 0x4] 0x715cd07a00
	bool bLocalAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x715cd07a80

--------------------------------
Class: InteractiveToolPropertySet.Object // 71a4b17b80
	Object* CachedProperties;//[Offset: 0x40, Size: 0x8] 0x715cd07880
	bool bIsPropertySetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cd07900

--------------------------------
Class: BrushBaseProperties.InteractiveToolPropertySet.Object // 71a4b17e00
	float BrushSize;//[Offset: 0x4c, Size: 0x4] 0x715cd07500
	bool bSpecifyRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715cd07580
	float BrushRadius;//[Offset: 0x54, Size: 0x4] 0x715cd07600
	float BrushStrength;//[Offset: 0x58, Size: 0x4] 0x715cd07680
	float BrushFalloffAmount;//[Offset: 0x5c, Size: 0x4] 0x715cd07700
	bool bShowStrength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715cd07780
	bool bShowFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x715cd07800

--------------------------------
Class: InteractiveTool.Object // 71a4b17180
	InputBehaviorSet* InputBehaviors;//[Offset: 0x48, Size: 0x8] 0x715cd07400
	Object*[] ToolPropertyObjects;//[Offset: 0x50, Size: 0x10] 0x715cc89a20

--------------------------------
Class: SingleSelectionTool.InteractiveTool.Object // 71a4b17400

--------------------------------
Class: MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object // 71a4b17680

--------------------------------
Class: BaseBrushTool.MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object // 71a4b17900
	BrushBaseProperties* BrushProperties;//[Offset: 0xc0, Size: 0x8] 0x715cd09300
	bool bInBrushStroke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x715cd09380
	BrushStampData LastBrushStamp;//[Offset: 0xcc, Size: 0xa8] 0x715cd09400
	class BrushBaseProperties* PropertyClass;//[Offset: 0x188, Size: 0x28] 0x715cc89980
	BrushStampIndicator* BrushStampIndicator;//[Offset: 0x1b0, Size: 0x8] 0x715cd09480

--------------------------------
Class: BrushStampData // 715ce7cb80

--------------------------------
Class: BrushStampIndicator.InteractiveGizmo.Object // 71a4b16c80
	float BrushRadius;//[Offset: 0x38, Size: 0x4] 0x715cd08b80
	float BrushFalloff;//[Offset: 0x3c, Size: 0x4] 0x715cd08c00
	Vector BrushPosition;//[Offset: 0x40, Size: 0xc] 0x715cd08c80
	Vector BrushNormal;//[Offset: 0x4c, Size: 0xc] 0x715cd08d00
	bool bDrawIndicatorLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x715cd08d80
	bool bDrawRadiusCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x715cd08e00
	bool bDrawFalloffCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x715cd08e80
	int SampleStepCount;//[Offset: 0x5c, Size: 0x4] 0x715cd08f00
	LinearColor LineColor;//[Offset: 0x60, Size: 0x10] 0x715cd08f80
	float LineThickness;//[Offset: 0x70, Size: 0x4] 0x715cd09000
	bool bDepthTested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x715cd09080
	bool bDrawSecondaryLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x715cd09100
	float SecondaryLineThickness;//[Offset: 0x78, Size: 0x4] 0x715cd09180
	LinearColor SecondaryLineColor;//[Offset: 0x7c, Size: 0x10] 0x715cd09200
	PrimitiveComponent* AttachedComponent;//[Offset: 0x90, Size: 0x8] 0x715cd09280

--------------------------------
Class: BrushStampIndicatorBuilder.InteractiveGizmoBuilder.Object // 71a4b16f00

--------------------------------
Class: ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object // 71a4b16a00
	bool bUpdateModifiersDuringDrag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x715cd08b00

--------------------------------
Class: LocalClickDragInputBehavior.ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object // 71a4b16780

--------------------------------
Class: InteractiveToolBuilder.Object // 71a4b16280

--------------------------------
Class: ClickDragToolBuilder.InteractiveToolBuilder.Object // 71a4b16500

--------------------------------
Class: ClickDragTool.InteractiveTool.Object // 71a4b16000

--------------------------------
Class: InternalToolFrameworkActor.Actor.Object // 71a4b15b00

--------------------------------
Class: GizmoActor.InternalToolFrameworkActor.Actor.Object // 71a4b15d80

--------------------------------
Class: GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b15600
	LinearColor Color;//[Offset: 0x418, Size: 0x10] 0x715cd08880
	float HoverSizeMultiplier;//[Offset: 0x428, Size: 0x4] 0x715cd08900
	float PixelHitDistanceThreshold;//[Offset: 0x42c, Size: 0x4] 0x715cd08980
	void UpdateWorldLocalState(bool bWorldIn);// 0x67860d0 0x715cce7780
	void UpdateHoverState(bool bHoveringIn);// 0x678618c 0x715cce7860

--------------------------------
Class: GizmoArrowComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b15880
	Vector Direction;//[Offset: 0x438, Size: 0xc] 0x715cd08680
	float Gap;//[Offset: 0x444, Size: 0x4] 0x715cd08700
	float Length;//[Offset: 0x448, Size: 0x4] 0x715cd08780
	float Thickness;//[Offset: 0x44c, Size: 0x4] 0x715cd08800

--------------------------------
Class: GizmoBoxComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b15380
	Vector Origin;//[Offset: 0x438, Size: 0xc] 0x715cd0a480
	Quat Rotation;//[Offset: 0x450, Size: 0x10] 0x715cd0a500
	Vector Dimensions;//[Offset: 0x460, Size: 0xc] 0x715cd08480
	float LineThickness;//[Offset: 0x46c, Size: 0x4] 0x715cd08500
	bool bRemoveHiddenLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1] 0x715cd08580
	bool bEnableAxisFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1] 0x715cd08600

--------------------------------
Class: GizmoCircleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b1f600
	Vector Normal;//[Offset: 0x438, Size: 0xc] 0x715cd0a180
	float Radius;//[Offset: 0x444, Size: 0x4] 0x715cd0a200
	float Thickness;//[Offset: 0x448, Size: 0x4] 0x715cd0a280
	int NumSides;//[Offset: 0x44c, Size: 0x4] 0x715cd0a300
	bool bViewAligned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1] 0x715cd0a380
	bool bOnlyAllowFrontFacingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1] 0x715cd0a400

--------------------------------
Class: GizmoTransformSource.Interface.Object // 71a4b1f380
	void SetTransform(out const Transform NewTransform);// 0x6786aa8 0x715cce75c0
	Transform GetTransform();// 0x6786b8c 0x715cce76a0

--------------------------------
Class: GizmoAxisSource.Interface.Object // 71a4b1f100
	bool HasTangentVectors();// 0x6787120 0x715cceac00
	void GetTangentVectors(out Vector TangentXOut, out Vector TangentYOut);// 0x678701c 0x715cceace0
	Vector GetOrigin();// 0x67871a0 0x715cce7400
	Vector GetDirection();// 0x6787160 0x715cce74e0

--------------------------------
Class: GizmoClickTarget.Interface.Object // 71a4b1ee80
	void UpdateHoverState(bool bHovering);// 0x67875e0 0x715cceab20

--------------------------------
Class: GizmoStateTarget.Interface.Object // 71a4b1ec00
	void EndUpdate();// 0x67879b0 0x715ccea960
	void BeginUpdate();// 0x67879cc 0x715cceaa40

--------------------------------
Class: GizmoFloatParameterSource.Interface.Object // 71a4b1e980
	void SetParameter(float NewValue);// 0x6787d60 0x715ccea5e0
	float GetParameter();// 0x6787e28 0x715ccea6c0
	void EndModify();// 0x6787d44 0x715ccea7a0
	void BeginModify();// 0x6787e0c 0x715ccea880

--------------------------------
Class: GizmoVec2ParameterSource.Interface.Object // 71a4b1e700
	void SetParameter(out const Vector2D NewValue);// 0x6788274 0x715ccea260
	Vector2D GetParameter();// 0x6788348 0x715ccea340
	void EndModify();// 0x6788258 0x715ccea420
	void BeginModify();// 0x678832c 0x715ccea500

--------------------------------
Class: GizmoLineHandleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b1e480
	Vector Normal;//[Offset: 0x438, Size: 0xc] 0x715cd09880
	float HandleSize;//[Offset: 0x444, Size: 0x4] 0x715cd09900
	float Thickness;//[Offset: 0x448, Size: 0x4] 0x715cd09980
	Vector Direction;//[Offset: 0x44c, Size: 0xc] 0x715cd09a00
	float Length;//[Offset: 0x458, Size: 0x4] 0x715cd09a80
	bool bImageScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1] 0x715cd09b00

--------------------------------
Class: GizmoRectangleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b1e200
	Vector DirectionX;//[Offset: 0x438, Size: 0xc] 0x715cd0b580
	Vector DirectionY;//[Offset: 0x444, Size: 0xc] 0x715cd09500
	float OffsetX;//[Offset: 0x450, Size: 0x4] 0x715cd09580
	float OffsetY;//[Offset: 0x454, Size: 0x4] 0x715cd09600
	float LengthX;//[Offset: 0x458, Size: 0x4] 0x715cd09680
	float LengthY;//[Offset: 0x45c, Size: 0x4] 0x715cd09700
	float Thickness;//[Offset: 0x460, Size: 0x4] 0x715cd09780
	byte SegmentFlags;//[Offset: 0x464, Size: 0x1] 0x715cd09800

--------------------------------
Class: GizmoLambdaHitTarget.Object // 71a4b1df80

--------------------------------
Class: GizmoComponentHitTarget.Object // 71a4b1dd00
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 0x8] 0x715cd0b500

--------------------------------
Class: InputBehaviorSource.Interface.Object // 71a4b1d800

--------------------------------
Class: InputRouter.Object // 71a4b1d580
	bool bAutoInvalidateOnHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715cd0b300
	bool bAutoInvalidateOnCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x715cd0b380
	InputBehaviorSet* ActiveInputBehaviors;//[Offset: 0x38, Size: 0x8] 0x715cd0b400

--------------------------------
Class: InteractionMechanic.Object // 71a4b1d300

--------------------------------
Class: InteractiveGizmoManager.Object // 71a4b1d080
	ActiveGizmo[] ActiveGizmos;//[Offset: 0x30, Size: 0x10] 0x715cc89840
	<FString,InteractiveGizmoBuilder*> GizmoBuilders;//[Offset: 0x58, Size: 0x50] 0x715cecfac0

--------------------------------
Class: ActiveGizmo // 715ce7c940

--------------------------------
Class: ToolContextTransactionProvider.Interface.Object // 71a4b1ce00

--------------------------------
Class: InteractiveToolManager.Object // 71a4b1cb80
	InteractiveTool* ActiveLeftTool;//[Offset: 0x30, Size: 0x8] 0x715cd0af80
	InteractiveTool* ActiveRightTool;//[Offset: 0x38, Size: 0x8] 0x715cd0b000
	<FString,InteractiveToolBuilder*> ToolBuilders;//[Offset: 0x90, Size: 0x50] 0x715cecfa00

--------------------------------
Class: ToolFrameworkComponent.Interface.Object // 71a4b1c900

--------------------------------
Class: InteractiveToolsContext.Object // 71a4b1c680
	InputRouter* InputRouter;//[Offset: 0x58, Size: 0x8] 0x715cd0ae00
	InteractiveToolManager* ToolManager;//[Offset: 0x60, Size: 0x8] 0x715cd0ae80
	InteractiveGizmoManager* GizmoManager;//[Offset: 0x68, Size: 0x8] 0x715cd0af00
	class InteractiveToolManager* ToolManagerClass;//[Offset: 0x70, Size: 0x28] 0x715cc897a0

--------------------------------
Class: IntervalGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object // 71a4b1c400
	GizmoLineHandleComponent* UpIntervalComponent;//[Offset: 0x220, Size: 0x8] 0x715cd0ac80
	GizmoLineHandleComponent* DownIntervalComponent;//[Offset: 0x228, Size: 0x8] 0x715cd0ad00
	GizmoLineHandleComponent* ForwardIntervalComponent;//[Offset: 0x230, Size: 0x8] 0x715cd0ad80

--------------------------------
Class: IntervalGizmoBuilder.InteractiveGizmoBuilder.Object // 71a4b1c180

--------------------------------
Class: IntervalGizmo.InteractiveGizmo.Object // 71a4b1bf00
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x38, Size: 0x8] 0x715cd0a980
	TransformProxy* TransformProxy;//[Offset: 0x50, Size: 0x8] 0x715cd0aa00
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0x58, Size: 0x10] 0x715cc89660
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x68, Size: 0x10] 0x715cc89700
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x90, Size: 0x8] 0x715cd0ab80
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x98, Size: 0x8] 0x715cd0ac00

--------------------------------
Class: GizmoTransformChangeStateTarget.Object // 71a4b23080
	interface class None* TransactionManager;//[Offset: 0x50, Size: 0x10] 0x715cd0e400

--------------------------------
Class: TransformProxy.Object // 71a4b22680
	bool bRotatePerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x715cd0f300
	bool bSetPivotMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x715cd0f380
	Transform SharedTransform;//[Offset: 0x90, Size: 0x30] 0x715cd0f400
	Transform InitialSharedTransform;//[Offset: 0xc0, Size: 0x30] 0x715cd0f480

--------------------------------
Class: GizmoBaseFloatParameterSource.Object // 71a4b1ba00

--------------------------------
Class: GizmoAxisIntervalParameterSource.GizmoBaseFloatParameterSource.Object // 71a4b1bc80
	interface class None* FloatParameterSource;//[Offset: 0x48, Size: 0x10] 0x715cd0a800
	float MinParameter;//[Offset: 0x58, Size: 0x4] 0x715cd0a880
	float MaxParameter;//[Offset: 0x5c, Size: 0x4] 0x715cd0a900

--------------------------------
Class: KeyAsModifierInputBehavior.InputBehavior.Object // 71a4b1b780

--------------------------------
Class: MeshSurfacePointToolBuilder.InteractiveToolBuilder.Object // 71a4b1b500

--------------------------------
Class: MouseHoverBehavior.InputBehavior.Object // 71a4b1b280

--------------------------------
Class: MultiClickSequenceInputBehavior.AnyButtonInputBehavior.InputBehavior.Object // 71a4b1b000

--------------------------------
Class: MultiSelectionTool.InteractiveTool.Object // 71a4b1ad80

--------------------------------
Class: GizmoLocalFloatParameterSource.GizmoBaseFloatParameterSource.Object // 71a4b1ab00
	float Value;//[Offset: 0x48, Size: 0x4] 0x715cd0a700
	GizmoFloatParameterChange LastChange;//[Offset: 0x4c, Size: 0x8] 0x715cd0a780

--------------------------------
Class: GizmoFloatParameterChange // 715ce7c880
	float InitialValue;//[Offset: 0x0, Size: 0x4] 0x715ceae200
	float CurrentValue;//[Offset: 0x4, Size: 0x4] 0x715ceae280

--------------------------------
Class: GizmoBaseVec2ParameterSource.Object // 71a4b1a880

--------------------------------
Class: GizmoLocalVec2ParameterSource.GizmoBaseVec2ParameterSource.Object // 71a4b1a600
	Vector2D Value;//[Offset: 0x48, Size: 0x8] 0x715cd0a600
	GizmoVec2ParameterChange LastChange;//[Offset: 0x50, Size: 0x10] 0x715cd0a680

--------------------------------
Class: GizmoVec2ParameterChange // 715ce7c7c0
	Vector2D InitialValue;//[Offset: 0x0, Size: 0x8] 0x715ceae100
	Vector2D CurrentValue;//[Offset: 0x8, Size: 0x8] 0x715ceae180

--------------------------------
Class: GizmoAxisTranslationParameterSource.GizmoBaseFloatParameterSource.Object // 71a4b1fd80
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x715cd0c380
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x715cd0c400
	float Parameter;//[Offset: 0xb0, Size: 0x4] 0x715cd0c480
	GizmoFloatParameterChange LastChange;//[Offset: 0xb4, Size: 0x8] 0x715cd0c500
	Vector CurTranslationAxis;//[Offset: 0xbc, Size: 0xc] 0x715cd0c580
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc] 0x715cd0c600
	Transform InitialTransform;//[Offset: 0xe0, Size: 0x30] 0x715cd0a580

--------------------------------
Class: GizmoPlaneTranslationParameterSource.GizmoBaseVec2ParameterSource.Object // 71a4b1fb00
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x715cd0bf00
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x715cd0bf80
	Vector2D Parameter;//[Offset: 0xb0, Size: 0x8] 0x715cd0c000
	GizmoVec2ParameterChange LastChange;//[Offset: 0xb8, Size: 0x10] 0x715cd0c080
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc] 0x715cd0c100
	Vector CurTranslationNormal;//[Offset: 0xd4, Size: 0xc] 0x715cd0c180
	Vector CurTranslationAxisX;//[Offset: 0xe0, Size: 0xc] 0x715cd0c200
	Vector CurTranslationAxisY;//[Offset: 0xec, Size: 0xc] 0x715cd0c280
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30] 0x715cd0c300

--------------------------------
Class: GizmoAxisRotationParameterSource.GizmoBaseFloatParameterSource.Object // 71a4b1f880
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x715cd0bb80
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10] 0x715cd0bc00
	float Angle;//[Offset: 0x68, Size: 0x4] 0x715cd0bc80
	GizmoFloatParameterChange LastChange;//[Offset: 0x6c, Size: 0x8] 0x715cd0bd00
	Vector CurRotationAxis;//[Offset: 0x74, Size: 0xc] 0x715cd0bd80
	Vector CurRotationOrigin;//[Offset: 0x80, Size: 0xc] 0x715cd0be00
	Transform InitialTransform;//[Offset: 0x90, Size: 0x30] 0x715cd0be80

--------------------------------
Class: GizmoUniformScaleParameterSource.GizmoBaseVec2ParameterSource.Object // 71a4b25100
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x715cd0b680
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10] 0x715cd0b700
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4] 0x715cd0b780
	Vector2D Parameter;//[Offset: 0x6c, Size: 0x8] 0x715cd0b800
	GizmoVec2ParameterChange LastChange;//[Offset: 0x74, Size: 0x10] 0x715cd0b880
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc] 0x715cd0b900
	Vector CurScaleNormal;//[Offset: 0x90, Size: 0xc] 0x715cd0b980
	Vector CurScaleAxisX;//[Offset: 0x9c, Size: 0xc] 0x715cd0ba00
	Vector CurScaleAxisY;//[Offset: 0xa8, Size: 0xc] 0x715cd0ba80
	Transform InitialTransform;//[Offset: 0xc0, Size: 0x30] 0x715cd0bb00

--------------------------------
Class: GizmoAxisScaleParameterSource.GizmoBaseFloatParameterSource.Object // 71a4b24e80
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x715cd0d380
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10] 0x715cd0d400
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4] 0x715cd0d480
	float Parameter;//[Offset: 0x6c, Size: 0x4] 0x715cd0d500
	GizmoFloatParameterChange LastChange;//[Offset: 0x70, Size: 0x8] 0x715cd0d580
	Vector CurScaleAxis;//[Offset: 0x78, Size: 0xc] 0x715cd0d600
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc] 0x715cd0d680
	Transform InitialTransform;//[Offset: 0x90, Size: 0x30] 0x715cd0b600

--------------------------------
Class: GizmoPlaneScaleParameterSource.GizmoBaseVec2ParameterSource.Object // 71a4b24c00
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x715cd0ce80
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x715cd0cf00
	float ScaleMultiplier;//[Offset: 0xb0, Size: 0x4] 0x715cd0cf80
	Vector2D Parameter;//[Offset: 0xb4, Size: 0x8] 0x715cd0d000
	GizmoVec2ParameterChange LastChange;//[Offset: 0xbc, Size: 0x10] 0x715cd0d080
	Vector CurScaleOrigin;//[Offset: 0xcc, Size: 0xc] 0x715cd0d100
	Vector CurScaleNormal;//[Offset: 0xd8, Size: 0xc] 0x715cd0d180
	Vector CurScaleAxisX;//[Offset: 0xe4, Size: 0xc] 0x715cd0d200
	Vector CurScaleAxisY;//[Offset: 0xf0, Size: 0xc] 0x715cd0d280
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30] 0x715cd0d300

--------------------------------
Class: PlanePositionGizmoBuilder.InteractiveGizmoBuilder.Object // 71a4b24980

--------------------------------
Class: PlanePositionGizmo.InteractiveGizmo.Object // 71a4b24700
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x715cd0e700
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10] 0x715cd0c680
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10] 0x715cd0c700
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x715cd0c780
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715cd0c800
	bool bFlipX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x715cd0c880
	bool bFlipY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x715cd0c900
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x715cd0c980
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc] 0x715cd0ca00
	Vector InteractionNormal;//[Offset: 0x98, Size: 0xc] 0x715cd0ca80
	Vector InteractionAxisX;//[Offset: 0xa4, Size: 0xc] 0x715cd0cb00
	Vector InteractionAxisY;//[Offset: 0xb0, Size: 0xc] 0x715cd0cb80
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc] 0x715cd0cc00
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc] 0x715cd0cc80
	Vector2D InteractionStartParameter;//[Offset: 0xd4, Size: 0x8] 0x715cd0cd00
	Vector2D InteractionCurParameter;//[Offset: 0xdc, Size: 0x8] 0x715cd0cd80
	Vector2D ParameterSigns;//[Offset: 0xe4, Size: 0x8] 0x715cd0ce00

--------------------------------
Class: SelectionSet.Object // 71a4b24480

--------------------------------
Class: MeshSelectionSet.SelectionSet.Object // 71a4b24200
	int[] Vertices;//[Offset: 0x40, Size: 0x10] 0x715cc893e0
	int[] Edges;//[Offset: 0x50, Size: 0x10] 0x715cc89480
	int[] Faces;//[Offset: 0x60, Size: 0x10] 0x715cc89520
	int[] Groups;//[Offset: 0x70, Size: 0x10] 0x715cc895c0

--------------------------------
Class: SingleClickInputBehavior.AnyButtonInputBehavior.InputBehavior.Object // 71a4b23f80
	bool HitTestOnRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x715cd0e480

--------------------------------
Class: SingleClickToolBuilder.InteractiveToolBuilder.Object // 71a4b23d00

--------------------------------
Class: SingleClickTool.InteractiveTool.Object // 71a4b23a80

--------------------------------
Class: GizmoNilStateTarget.Object // 71a4b23800

--------------------------------
Class: GizmoLambdaStateTarget.Object // 71a4b23580

--------------------------------
Class: GizmoObjectModifyStateTarget.Object // 71a4b23300

--------------------------------
Class: TransformGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object // 71a4b22e00
	PrimitiveComponent* TranslateX;//[Offset: 0x220, Size: 0x8] 0x715cd0dc00
	PrimitiveComponent* TranslateY;//[Offset: 0x228, Size: 0x8] 0x715cd0dc80
	PrimitiveComponent* TranslateZ;//[Offset: 0x230, Size: 0x8] 0x715cd0dd00
	PrimitiveComponent* TranslateYZ;//[Offset: 0x238, Size: 0x8] 0x715cd0dd80
	PrimitiveComponent* TranslateXZ;//[Offset: 0x240, Size: 0x8] 0x715cd0de00
	PrimitiveComponent* TranslateXY;//[Offset: 0x248, Size: 0x8] 0x715cd0de80
	PrimitiveComponent* RotateX;//[Offset: 0x250, Size: 0x8] 0x715cd0df00
	PrimitiveComponent* RotateY;//[Offset: 0x258, Size: 0x8] 0x715cd0df80
	PrimitiveComponent* RotateZ;//[Offset: 0x260, Size: 0x8] 0x715cd0e000
	PrimitiveComponent* UniformScale;//[Offset: 0x268, Size: 0x8] 0x715cd0e080
	PrimitiveComponent* AxisScaleX;//[Offset: 0x270, Size: 0x8] 0x715cd0e100
	PrimitiveComponent* AxisScaleY;//[Offset: 0x278, Size: 0x8] 0x715cd0e180
	PrimitiveComponent* AxisScaleZ;//[Offset: 0x280, Size: 0x8] 0x715cd0e200
	PrimitiveComponent* PlaneScaleYZ;//[Offset: 0x288, Size: 0x8] 0x715cd0e280
	PrimitiveComponent* PlaneScaleXZ;//[Offset: 0x290, Size: 0x8] 0x715cd0e300
	PrimitiveComponent* PlaneScaleXY;//[Offset: 0x298, Size: 0x8] 0x715cd0e380

--------------------------------
Class: TransformGizmoBuilder.InteractiveGizmoBuilder.Object // 71a4b22b80

--------------------------------
Class: TransformGizmo.InteractiveGizmo.Object // 71a4b22900
	TransformProxy* ActiveTarget;//[Offset: 0x40, Size: 0x8] 0x715cd0f500
	bool bSnapToWorldGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cd0f580
	bool bUseContextCoordinateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x715cd0f600
	enum CurrentCoordinateSystem;//[Offset: 0x4c, Size: 0x4] 0x715cc89160
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0xe0, Size: 0x10] 0x715cc89200
	PrimitiveComponent*[] NonuniformScaleComponents;//[Offset: 0xf0, Size: 0x10] 0x715cc892a0
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x100, Size: 0x10] 0x715cc89340
	GizmoConstantFrameAxisSource* CameraAxisSource;//[Offset: 0x120, Size: 0x8] 0x715cd0d780
	GizmoComponentAxisSource* AxisXSource;//[Offset: 0x128, Size: 0x8] 0x715cd0d800
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x130, Size: 0x8] 0x715cd0d880
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x138, Size: 0x8] 0x715cd0d900
	GizmoComponentAxisSource* UnitAxisXSource;//[Offset: 0x140, Size: 0x8] 0x715cd0d980
	GizmoComponentAxisSource* UnitAxisYSource;//[Offset: 0x148, Size: 0x8] 0x715cd0da00
	GizmoComponentAxisSource* UnitAxisZSource;//[Offset: 0x150, Size: 0x8] 0x715cd0da80
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x158, Size: 0x8] 0x715cd0db00
	GizmoScaledTransformSource* ScaledTransformSource;//[Offset: 0x160, Size: 0x8] 0x715cd0db80

--------------------------------
Class: GizmoScaledTransformSource.GizmoBaseTransformSource.Object // 71a4b21f00
	interface class None* ChildTransformSource;//[Offset: 0x48, Size: 0x10] 0x715cd0f180

--------------------------------
Class: GizmoBaseTransformSource.Object // 71a4b22400

--------------------------------
Class: GizmoComponentWorldTransformSource.GizmoBaseTransformSource.Object // 71a4b22180
	SceneComponent* Component;//[Offset: 0x48, Size: 0x8] 0x715cd0f200
	bool bModifyComponentOnTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715cd0f280

--------------------------------
Class: GizmoTransformProxyTransformSource.GizmoBaseTransformSource.Object // 71a4b21c80
	TransformProxy* Proxy;//[Offset: 0x48, Size: 0x8] 0x715cd0f100

--------------------------------
Class: BuildBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4b21a00
	static byte GetBuildConfiguration();// 0x67c1008 0x715ccea180

--------------------------------
Class: HuntersBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4b21780
	static Vector SmoothDampVector(out const Vector Current, out const Vector Target, float DeltaTime, float SmoothingLambda);// 0x67c1a5c 0x715cce92a0
	static Rotator SmoothDampRotator(out const Rotator Current, out const Rotator Target, float DeltaTime, float SmoothingLambda);// 0x67c18d4 0x715cce9380
	static float SmoothDampFloat(float Current, float Target, float DeltaTime, float SmoothingLambda);// 0x67c1be4 0x715cce9460
	static bool OpenEditorForAssets(out const Object*[] Assets);// 0x67c2214 0x715cce9540
	static void NativeDebugBreak(bool bShouldBreak, bool bPrintStackTrace, int BreakID, FString Context);// 0x67c22d8 0x715cce9620
	static bool MatchesReplayContext(const Actor* ContextActor);// 0x67c20c4 0x715cce9700
	static bool IsValid(ActiveGameplayEffectHandle GameplayEffectHandle);// 0x67c2464 0x715cce97e0
	static FString HexFromColor(out const Color Color);// 0x67c1728 0x715cce98c0
	static float GetWorldGravity(const Object* Target);// 0x67c2020 0x715cce99a0
	static Vector GetSmoothActorLocation(const Actor* Actor);// 0x67c1680 0x715cce9a80
	static float GetPlayerLatencyFromCharacter(const Character* PlayerCharacter);// 0x67c1ed8 0x715cce9b60
	static float GetPlayerLatency(const PlayerController* PlayerController);// 0x67c1f7c 0x715cce9c40
	static float GetDurationAgoForLagCompensationNoTimestamp(const Character* SourcePlayerCharacter);// 0x67c1d4c 0x715cce9d20
	static float GetDurationAgoForLagCompensation(const Character* SourcePlayerCharacter, float ClientTimetstamp);// 0x67c1df0 0x715cce9e00
	static Object* GetDefaultObject(class Object ObjectClass);// 0x67c2514 0x715cce9ee0
	static Color ColorFromHex(FString HexString);// 0x67c1824 0x715cce9fc0
	static bool ActorIsReplayDuplicate(const Actor* Actor);// 0x67c216c 0x715ccea0a0

--------------------------------
Class: Cha004UltimateFlag.SkeletalMeshActor.Actor.Object // 71a4b21500
	FName EndSectionName;//[Offset: 0x2a8, Size: 0x8] 0x715cd20980
	bool bDestroyOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x715cd20a00
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x67f5fb8 0x715cce90e0
	void FurlAndDestroy();// 0x67f60a8 0x715cce91c0

--------------------------------
Class: GamepadButtonMappingsDataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b21280
	<GameplayTag,GamepadMappingDataAsset*> CharacterButtonMappings;//[Offset: 0x30, Size: 0x50] 0x715cecf940

--------------------------------
Class: GamepadMappingDataAsset.HuntersCharacterRelatedDataAsset.DataAsset.Object // 71a4b21000
	GamepadButtonMappingSet MappingData;//[Offset: 0x38, Size: 0x60] 0x715cd20780

--------------------------------
Class: GamepadTuningDataAsset.DataAsset.Object // 71a4b20b00
	GamepadCommonConfig GamepadCommonConfig;//[Offset: 0x30, Size: 0x30] 0x715cd20700

--------------------------------
Class: GamepadCommonConfig // 715ce7f400
	CurveFloat* LookingCurveYAxis;//[Offset: 0x0, Size: 0x8] 0x715ceaef00
	CurveFloat* LookingCurveXAxis;//[Offset: 0x8, Size: 0x8] 0x715ceaef80
	CurveFloat* GyroTurnSpeedScale;//[Offset: 0x10, Size: 0x8] 0x715ceaf000
	float LookingExponentXAxis;//[Offset: 0x18, Size: 0x4] 0x715ceaf080
	float LookingExponentYAxis;//[Offset: 0x1c, Size: 0x4] 0x715ceaf100
	float LookStickDisableGyroThreshold;//[Offset: 0x20, Size: 0x4] 0x715ceaf180
	float LookStickEnableAimAssistThreshold;//[Offset: 0x24, Size: 0x4] 0x715ceaf200
	bool bAimAssistDisabledWithNoInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715ceaf280
	float BoostDegradeRate;//[Offset: 0x2c, Size: 0x4] 0x715ceaf300

--------------------------------
Class: HunterLocalizationSettings.DeveloperSettings.Object // 71a4b20880
	StringTable* SupportedLanguages;//[Offset: 0x38, Size: 0x28] 0x715cd20680

--------------------------------
Class: HuntersCharacterLayoutBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4b20600

--------------------------------
Class: HuntersCharacterLayoutConfiguration.DeveloperSettings.Object // 71a4b20380
	FString[] BonesToTrack;//[Offset: 0x38, Size: 0x10] 0x715cc8b820
	FString[] EquipmentBones;//[Offset: 0x48, Size: 0x10] 0x715cc8b8c0

--------------------------------
Class: HuntersDamageModifierInterface.Interface.Object // 71a4b2a100

--------------------------------
Class: HuntersDeviceInfoBPLibrary.BlueprintFunctionLibrary.Object // 71a4b29e80
	static bool IsBatteryCharging();// 0x67f8ea8 0x715ccec2c0
	static enum GetConnectionType();// 0x67f8e74 0x715ccec3a0
	static float GetBatteryLevel();// 0x67f8ee0 0x715ccec480

--------------------------------
Class: HuntersDevicePreferences.DeveloperSettings.Object // 71a4b29c00
	HuntersGraphicsSettings FrontendSettings;//[Offset: 0x38, Size: 0xc] 0x715cd21c00
	HuntersGraphicsSettings BattleSettings;//[Offset: 0x44, Size: 0xc] 0x715cd21c80
	void UseDefaultGraphicsSettings();// 0x67f9c44 0x715ccebbc0
	void UseDefaultFrontendSettings();// 0x67f9c30 0x715ccebca0
	void UseDefaultBattleSettingsForTarget(enum PreferredTarget);// 0x67f9b8c 0x715ccebd80
	bool IsUsingDefaultSettingsForContext(enum GraphicsSettingsContext);// 0x67f9984 0x715ccebe60
	bool IsUsingDefaultGraphicsSettings();// 0x67f9b54 0x715ccebf40
	bool IsUsingDefaultFrontendSettings();// 0x67f9b1c 0x715ccec020
	bool IsUsingDefaultBattleSettingsForTarget(enum FrameRateTarget);// 0x67f9a34 0x715ccec100
	bool IsUsingDefaultBattleSettings();// 0x67f9ae4 0x715ccec1e0

--------------------------------
Class: HuntersGraphicsSettings // 715ce7f100
	enum FrameRate;//[Offset: 0x0, Size: 0x1] 0x715ce93c60
	enum QualityLevel;//[Offset: 0x1, Size: 0x1] 0x715ce93d00
	enum AntiAliasing;//[Offset: 0x2, Size: 0x1] 0x715ce93da0
	enum DynamicResolution;//[Offset: 0x3, Size: 0x1] 0x715ce91500
	float ScreenPercentage;//[Offset: 0x4, Size: 0x4] 0x715ceaec00
	enum AccessibilityContrastOverride;//[Offset: 0x8, Size: 0x1] 0x715ce915a0
	enum AccessibilityColorDeficiency;//[Offset: 0x9, Size: 0x1] 0x715ce91640

--------------------------------
Class: HunterDefaultSettings.DeveloperSettings.Object // 71a4b29980
	HunterSettingsDataAsset* DefaultHunterSettings;//[Offset: 0x38, Size: 0x28] 0x715cd21a80
	GamepadTuningDataAsset* DefaultGamepadCommonSettings;//[Offset: 0x60, Size: 0x28] 0x715cd21b00
	GamepadButtonMappingsDataAsset* DefaultGamepadButtonMappingSettings;//[Offset: 0x88, Size: 0x28] 0x715cd21b80

--------------------------------
Class: HunterSettingsDataAsset.DataAsset.Object // 71a4b29700
	GlobalHunterSettingsData GlobalHunterSettingsData;//[Offset: 0x30, Size: 0x70] 0x715cd21980
	HunterSettingsData HunterSettingsData;//[Offset: 0xa0, Size: 0xd8] 0x715cd21a00

--------------------------------
Class: HuntersFountainSpawnComponent.ActorComponent.Object // 71a4b29480
	float LootFountainStartDelay;//[Offset: 0xbc, Size: 0x4] 0x715cd21600
	float LootFountainItemDelay;//[Offset: 0xc0, Size: 0x4] 0x715cd21680
	float LootFountainAngleBetweenItems;//[Offset: 0xc4, Size: 0x4] 0x715cd21700
	float SpawnItemSpeed;//[Offset: 0xc8, Size: 0x4] 0x715cd21780
	void TriggerFountain(class Actor[] ElementsList, Vector NewSpawnLocation, Rotator NewSpawnRotation, bool bShouldResetRotation);// 0x67fa77c 0x715cceba00
	void SpawnActor();// 0x67fa948 0x715ccebae0

--------------------------------
Class: HuntersGameplayTagsProjectSettings.DeveloperSettings.Object // 71a4b29200
	GameplayTag HitpointChange;//[Offset: 0x38, Size: 0x8] 0x715cd22e80
	GameplayTag ShieldModifierTag;//[Offset: 0x40, Size: 0x8] 0x715cd22f00
	GameplayTag MeleeTag;//[Offset: 0x48, Size: 0x8] 0x715cd22f80
	GameplayTag RangeTag;//[Offset: 0x50, Size: 0x8] 0x715cd23000
	GameplayTag ForceTag;//[Offset: 0x58, Size: 0x8] 0x715cd23080
	GameplayTag AcidTag;//[Offset: 0x60, Size: 0x8] 0x715cd23100
	GameplayTag FireTag;//[Offset: 0x68, Size: 0x8] 0x715cd23180
	GameplayTag ElectricTag;//[Offset: 0x70, Size: 0x8] 0x715cd21100
	GameplayTag AOETag;//[Offset: 0x78, Size: 0x8] 0x715cd21180
	GameplayTag NonDirectionalTag;//[Offset: 0x80, Size: 0x8] 0x715cd21200
	GameplayTag BroadcastDamageToAll;//[Offset: 0x88, Size: 0x8] 0x715cd21280
	GameplayTag CriticalDamageTag;//[Offset: 0x90, Size: 0x8] 0x715cd21300
	GameplayTag ImmuneToBackstabTag;//[Offset: 0x98, Size: 0x8] 0x715cd21380
	GameplayTag UseVictimTeamAttitudeTag;//[Offset: 0xa0, Size: 0x8] 0x715cd21400
	GameplayTagContainer AccelerationOverrideTags;//[Offset: 0xa8, Size: 0x20] 0x715cd21480
	GameplayTag WarpedTraversalActiveTag;//[Offset: 0xc8, Size: 0x8] 0x715cd21500
	GameplayTag ClamberActiveTag;//[Offset: 0xd0, Size: 0x8] 0x715cd21580

--------------------------------
Class: HuntersPositionComponent.ActorComponent.Object // 71a4b28800
	<FName,ComponentPosition> PositionMap;//[Offset: 0xb0, Size: 0x50] 0x715cd31840
	Transform GetWorldTransform(FName Name);// 0x680202c 0x715ccee5c0
	Vector GetWorldLocation(FName Name);// 0x6801f7c 0x715ccee6a0
	FName GetOptionalSocketName(FName Name);// 0x6801ed0 0x715cceadc0

--------------------------------
Class: ComponentPosition // 715ce7e500
	Transform RelativeTransform;//[Offset: 0x0, Size: 0x30] 0x715ceb1180
	ComponentReference ParentComponentRef;//[Offset: 0x30, Size: 0x28] 0x715ceb1200
	FName OptionalSocketName;//[Offset: 0x58, Size: 0x8] 0x715ceb1280
	SceneComponent* ParentComponent;//[Offset: 0x60, Size: 0x8] 0x715ceb1300

--------------------------------
Class: ComponentReference // 715db1a540
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8] 0x715db3fa80
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8] 0x715db3fb00
	FString PathToComponent;//[Offset: 0x10, Size: 0x10] 0x715db3fb80

--------------------------------
Class: HuntersPreferencesBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4b28580
	static bool IsCancelADSWithInputEnabled(out const MetaTuningDataKey CharacterMetadataTag);// 0x6802528 0x715ccee240
	static bool IsAutofireMode(out const MetaTuningDataKey CharacterMetadataTag);// 0x68025e4 0x715ccee320
	static enum GetZTargetingTriggerType();// 0x68024c0 0x715ccee400
	static enum GetADSTriggerType();// 0x68024f4 0x715ccee4e0

--------------------------------
Class: HuntersRandomDamageModifierComponent.ActorComponent.Object // 71a4b28300
	GameplayTagContainer RequiredSourceTags;//[Offset: 0xb8, Size: 0x20] 0x715cd23500
	<FName> UnaffectedBones;//[Offset: 0xd8, Size: 0x50] 0x715cc8ab00
	CurveTableRowHandle RandomModificationChanceHandle;//[Offset: 0x128, Size: 0x10] 0x715cd23600
	CurveTableRowHandle DamageMultiplierHandle;//[Offset: 0x138, Size: 0x10] 0x715cd23680
	enum DamageModifiedFlags;//[Offset: 0x148, Size: 0x1] 0x715cc8aba0

--------------------------------
Class: HuntersTeamAgentInterface.GenericTeamAgentInterface.Interface.Object // 71a4b27900
	Actor* GetViewTarget();// 0x680727c 0x715ccedd00
	FString GetTeamAgentName();// 0x68072f4 0x715ccedde0
	enum GetNamedHazardType();// 0x68072b8 0x715ccedec0

--------------------------------
Class: HuntersUtilFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4b27680
	static int RoundHealthDisplayValue(float RawHealthValue);// 0x6809a9c 0x715cced0c0
	static void LaunchURL(FString URL, delegate Callback);// 0x680967c 0x715cced1a0
	static bool LagCompensatedConeSegmentOverlapComponents(Actor* OwnerActor, Vector ConeStartPoint, Vector ConeLine, float RadiusAtStart, float RadiusAtEnd, float ClientTimestamp, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, bool bDebugDrawOutput, bool bDebugOutputToVisualLog, out PrimitiveComponent*[] OutComponents, out <PrimitiveComponent*,Vector> OutLagCompensatedActorPositions);// 0x6809114 0x715cced280
	static bool LagCompensatedBoxOverlapComponents(Actor* OwnerActor, Vector BoxOrigin, Vector BoxExtents, Rotator BoxRotation, float ClientTimestamp, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, bool bDebugDrawOutput, bool bDebugOutputToVisualLog, out PrimitiveComponent*[] OutComponents, out <PrimitiveComponent*,Vector> OutLagCompensatedActorPositions);// 0x68083f4 0x715cced360
	static Vector LagCompensatedActorLocation(Actor* TargetActor, float DurationAgo);// 0x6809590 0x715cced440
	static bool IsEditorBuild();// 0x6809b40 0x715cced520
	static void HuntersLog(Object* Caller, enum Level, FName Category, FString Message);// 0x6808288 0x715cced600
	static FString GetZID(Object* WorldContextObject);// 0x68098bc 0x715cced6e0
	static float GetServerTimeSafe(Object* InWorldContextObject);// 0x6809818 0x715cced7c0
	static FString GetNakamaHost();// 0x6809768 0x715cced8a0
	static float GetAnimationStartTimeWithSkip(WidgetAnimation* InAnimation, const bool bSkipToEnd);// 0x68099ac 0x715cced980
	static void GeneratePolarSphereGrid(const Object* Caller, const Vector Origin, const Vector Direction, const float AngleDegrees, const float InnerRadius, const float OuterRadius, const int RadialCells, const float AngularDensity, out GeneratedSphere[] OutSpheres);// 0x6807fb8 0x715cceda60
	static bool CapsuleConeOverlapComponents(Actor* Instigator, Vector ConeStartPoint, const float Distance, const float StartLength, const float StartRadius, const float EndLength, const float EndRadius, const bool bFormToFloor, const float FloorDistanceMax, Rotator Rotation, const FName CollisionProfile, out OverlapHits[] OutOverlaps, Actor*[] ActorsToIgnore, bool bUseLagCompensation, bool bDrawDebug);// 0x6808834 0x715ccedb40
	static bool AngledOverlap(Actor* Instigator, const Vector Origin, const Vector Direction, const float Length, const float AngleWidth, const float MaxHalfHeight, FName CollisionProfile, out const Actor*[] ActorsToIgnore, out AngledOverlapHits[] OutOverlaps, bool bUseLagCompensation, bool bDebugDraw);// 0x6808d7c 0x715ccedc20

--------------------------------
Class: GeneratedSphere // 715ce7e2c0
	Vector Center;//[Offset: 0x0, Size: 0xc] 0x715ceb2a00
	float Radius;//[Offset: 0xc, Size: 0x4] 0x715ceb2a80

--------------------------------
Class: OverlapHits // 715ce7e200
	Actor* Actor;//[Offset: 0x0, Size: 0x8] 0x715ceb2880
	PrimitiveComponent* Component;//[Offset: 0x8, Size: 0x8] 0x715ceb2900
	Vector ActorLocation;//[Offset: 0x10, Size: 0xc] 0x715ceb2980

--------------------------------
Class: AngledOverlapHits.OverlapHits // 715ce7e140
	float Angle;//[Offset: 0x1c, Size: 0x4] 0x715ceb2800

--------------------------------
Class: KillcamViewTargetRedirector.Interface.Object // 71a4b27400
	bool ShouldViewFromEliminatedPawn();// 0x680a250 0x715ccecfe0

--------------------------------
Class: ImageColorLerper.Object // 71a4b27180
	void LerpToColor(Image* TargetImage, const LinearColor TargetColor, const float LerpTime);// 0x680a6f8 0x715ccecf00

--------------------------------
Class: LocalNotificationServiceSettings.DeveloperSettings.Object // 71a4b26f00
	<FString,int64> Scheduled;//[Offset: 0x38, Size: 0x50] 0x715cd31600
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x715cd26400

--------------------------------
Class: NamedHazardsData.DataAsset.Object // 71a4b26c80
	<enum,FText> HazardNames;//[Offset: 0x30, Size: 0x50] 0x715cd31540
	FText GetHazardName(const enum NamedHazardType);// 0x680ada0 0x715ccece20

--------------------------------
Class: HuntersReplicatedEventStreamManager.BAReplicatedEventStreamManager.Info.Actor.Object // 71a4b26a00
	ReplicatedEventStreamCollection EventStreamCollection;//[Offset: 0x260, Size: 0x40] 0x715cd28180

--------------------------------
Class: ReplicatedEventStreamCollection // 715ce7e080
	HuntersReplicatedEventStreamManager* StreamManager;//[Offset: 0x30, Size: 0x8] 0x715ceb2700
	byte DirtyMarker;//[Offset: 0x38, Size: 0x1] 0x715ceb2780

--------------------------------
Class: RMSNamesAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b26780
	FName[] RootMotionSourceNames;//[Offset: 0x38, Size: 0x10] 0x715cc8c860

--------------------------------
Class: ScreenClampedWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b26500
	float DistanceFromScreenEdge;//[Offset: 0x554, Size: 0x4] 0x715cd27d80
	class SDListenerViewModel* WidgetViewModelClass;//[Offset: 0x558, Size: 0x8] 0x715cc8c680
	class UserWidget* ScreenClampedWidgetBlueprint;//[Offset: 0x560, Size: 0x8] 0x715cc8c720
	class SDListenerViewModel* ScreenClampedWidgetViewModelClass;//[Offset: 0x568, Size: 0x8] 0x715cc8c7c0
	int WidgetZOrder;//[Offset: 0x570, Size: 0x4] 0x715cd27e00
	bool bUsePooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1] 0x715cd27e80
	UserWidget* ScreenClampedWidget;//[Offset: 0x588, Size: 0x8] 0x715cd27f00
	PlayerController* RelativePlayer;//[Offset: 0x590, Size: 0x8] 0x715cd27f80
	UserWidget* GetScreenClampedWidget();// 0x680bd5c 0x715ccecc60
	void ClampRelativeTo(PlayerController* InRelativePlayer);// 0x680bd78 0x715ccecd40

--------------------------------
Class: VideoProjector.Actor.Object // 71a4b26280
	void StartPlayingVideo(FileMediaSource* MediaSource);// 0x45c6aa0 0x715ccecaa0
	void EndPlay(const byte EndPlayReason);// 0x680c098 0x715ccecb80

--------------------------------
Class: AnimNotifyState_AttachBase.AnimNotifyState.Object // 71a4b25380
	Object* WorldContext;//[Offset: 0x30, Size: 0x8] 0x715cd27780
	NotifyAttachmentsComponent* GetAttachmentsComponent(SkeletalMeshComponent* MeshComp);// 0x682658c 0x715ccefc80

--------------------------------
Class: NotifyAttachmentsComponent.ActorComponent.Object // 71a4b2c680
	<AttachmentKey,SceneComponent*> AttachmentsByKey;//[Offset: 0xb0, Size: 0x50] 0x715cd31000
	StaticMeshComponent* GetStaticMesh(Object* Notify, FName Identifier, const Object* Context);// 0x6830124 0x715ccef200
	SkeletalMeshComponent* GetSkeletalMesh(Object* Notify, FName Identifier, const Object* Context);// 0x682fe30 0x715ccef2e0
	ParticleSystemComponent* GetParticleSystem(Object* Notify, FName Identifier, const Object* Context);// 0x682faf4 0x715ccef3c0
	SceneComponent* GetAttachment(Object* Notify, FName Identifier, const Object* Context);// 0x6830538 0x715ccef4a0
	void DestroyAttachment(Object* Notify, FName Identifier, const Object* Context);// 0x6830410 0x715ccef580
	void DeactivateParticleSystem(Object* Notify, FName Identifier, const Object* Context);// 0x682f9cc 0x715ccef660
	StaticMeshComponent* AttachStaticMesh(SkeletalMeshComponent* SkelMeshComponent, Object* Notify, out const StaticMeshAttachment Attachment, const Object* Context);// 0x6830254 0x715ccef740
	SkeletalMeshComponent* AttachSkeletalMesh(SkeletalMeshComponent* SkelMeshComponent, Object* Notify, out const SkeletalMeshAttachment Attachment, const Object* Context);// 0x682ff60 0x715ccef820
	ParticleSystemComponent* AttachParticleSystem(SkeletalMeshComponent* SkelMeshComponent, Object* Notify, out const ParticleSystemAttachment Attachment, bool bAutoDestroy, const Object* Context);// 0x682fc24 0x715ccef900

--------------------------------
Class: AttachmentKey // 715ce7fa00
	Object* Notify;//[Offset: 0x0, Size: 0x8] 0x715ceb3680
	FName Identifier;//[Offset: 0x8, Size: 0x8] 0x715ceb3700

--------------------------------
Class: StaticMeshAttachment.MeshAttachment.BaseAttachment // 715ce7fac0
	StaticMesh* StaticMesh;//[Offset: 0x48, Size: 0x8] 0x715ceb3780

--------------------------------
Class: MeshAttachment.BaseAttachment // 715ce7fc40
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x715ceb3900
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x715ceb3980
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x715ceb3a00

--------------------------------
Class: BaseAttachment // 715ce7fdc0
	FName Identifier;//[Offset: 0x0, Size: 0x8] 0x715ceb3b80
	FName SocketName;//[Offset: 0x8, Size: 0x8] 0x715ceb3c00
	Transform RelativeTransform;//[Offset: 0x10, Size: 0x30] 0x715ceb3c80
	bool bStartVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x715ceb3d00

--------------------------------
Class: SkeletalMeshAttachment.MeshAttachment.BaseAttachment // 715ce7fb80
	SkeletalMesh* SkeletalMesh;//[Offset: 0x48, Size: 0x8] 0x715ceb3800
	bool bCopyParentPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715ceb3880

--------------------------------
Class: ParticleSystemAttachment.BaseAttachment // 715ce7fd00
	ParticleSystem* ParticleSystem;//[Offset: 0x48, Size: 0x8] 0x715ceb3a80
	bool bAttachToMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715ceb3b00

--------------------------------
Class: AnimNotifyState_AttachParticleSystem.AnimNotifyState_AttachBase.AnimNotifyState.Object // 71a4b2f600
	ParticleSystemAttachment Attachment;//[Offset: 0x40, Size: 0x60] 0x715cd27680
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x715cd27700

--------------------------------
Class: AnimNotifyState_AttachSkeletalMesh.AnimNotifyState_AttachBase.AnimNotifyState.Object // 71a4b2f380
	SkeletalMeshAttachment Attachment;//[Offset: 0x40, Size: 0x60] 0x715cd27600

--------------------------------
Class: AnimNotifyState_AttachStaticMesh.AnimNotifyState_AttachBase.AnimNotifyState.Object // 71a4b2f100
	StaticMeshAttachment Attachment;//[Offset: 0x40, Size: 0x50] 0x715cd27580

--------------------------------
Class: AnimNotifyState_ToggleAttachmentVisibility.AnimNotifyState_AttachBase.AnimNotifyState.Object // 71a4b2ee80
	FName Identifier;//[Offset: 0x38, Size: 0x8] 0x715cd27500

--------------------------------
Class: AnimNotify_AttachParticleSystem.AnimNotify.Object // 71a4b2ec00
	ParticleSystemAttachment Attachment;//[Offset: 0x40, Size: 0x60] 0x715cd27480

--------------------------------
Class: BaseLetterboxedCameraModifier.CameraModifier.Object // 71a4b2e980
	CurveFloat* TransitionCurve;//[Offset: 0x48, Size: 0x8] 0x715cd27400

--------------------------------
Class: CinematicCameraModifier.BaseLetterboxedCameraModifier.CameraModifier.Object // 71a4b2df80

--------------------------------
Class: EquipmentProxy.Actor.Object // 71a4b2dd00
	SkeletalMeshComponent* MeshComponent;//[Offset: 0x248, Size: 0x8] 0x715cd28500
	SkeletalMeshComponent*[] EquipmentMeshComponents;//[Offset: 0x250, Size: 0x10] 0x715cc8c040
	<GameplayTag,SkeletalMeshComponent*> AllocatedEquipmentMeshes;//[Offset: 0x260, Size: 0x50] 0x715cd313c0
	SceneComponent* DummyComponent;//[Offset: 0x2b0, Size: 0x8] 0x715cd28700
	ParticleSystemComponent*[] SpawnedEquipmentParticleSystemComponents;//[Offset: 0x2b8, Size: 0x10] 0x715cc8c0e0
	ParticleSystemComponent*[] SpawnedCharacterParticleSystemComponents;//[Offset: 0x2c8, Size: 0x10] 0x715cc8c180
	Transform GroundedTransform;//[Offset: 0x2e0, Size: 0x30] 0x715cd28880

--------------------------------
Class: EquipmentProxyDataAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2da80
	Vector Location;//[Offset: 0x34, Size: 0xc] 0x715cd2a380
	Rotator Rotation;//[Offset: 0x40, Size: 0xc] 0x715cd2a400
	Vector Scale3D;//[Offset: 0x4c, Size: 0xc] 0x715cd2a480
	<GameplayTag,AnimSequenceBase*> EquipmentPoseMap;//[Offset: 0x58, Size: 0x50] 0x715cd31300

--------------------------------
Class: FitToBoundsCameraModifier.BaseLetterboxedCameraModifier.CameraModifier.Object // 71a4b2d580

--------------------------------
Class: HuntersDisplay.Actor.Object // 71a4b2d300
	Object*[] TextureSoftRefs;//[Offset: 0x220, Size: 0x10] 0x715cc8bd20
	SoftObjectPath[] TexturePaths;//[Offset: 0x290, Size: 0x10] 0x715cc8bdc0
	Texture2D*[] Textures;//[Offset: 0x2a0, Size: 0x10] 0x715cc8be60
	void PlaySequence(out const MetaTuningDataKey InCharacterKey, enum InAvailability);// 0x45c6aa0 0x715ccef9e0
	void DiscoverTexturesToLoad(out const MetaTuningDataKey InCharacterKey, enum InAvailability);// 0x45c6aa0 0x715ccefac0

--------------------------------
Class: HuntersPreviewSceneActor.Actor.Object // 71a4b2d080
	enum DisplayScene;//[Offset: 0x220, Size: 0x1] 0x715cc8bc80
	FString LightingScenarioLevel;//[Offset: 0x228, Size: 0x10] 0x715cd29880
	CameraActor* DefaultCamera;//[Offset: 0x238, Size: 0x8] 0x715cd29900
	HuntersDisplay* Display;//[Offset: 0x240, Size: 0x8] 0x715cd29980
	CharacterProxy* CharacterProxy;//[Offset: 0x248, Size: 0x8] 0x715cd29a00
	EquipmentProxy* EquipmentProxy;//[Offset: 0x250, Size: 0x8] 0x715cd29a80
	ImageBillboard* ImageBillboard;//[Offset: 0x258, Size: 0x8] 0x715cd29b00
	Actor* GenericActorPreview;//[Offset: 0x260, Size: 0x8] 0x715cd29b80
	Actor* AdditionalActorToRotate;//[Offset: 0x268, Size: 0x8] 0x715cd29c00

--------------------------------
Class: ImageBillboard.Actor.Object // 71a4b2ce00
	MaterialInterface* TextureMaterialInterface;//[Offset: 0x220, Size: 0x8] 0x715cd29580
	FName TextureParameterName;//[Offset: 0x228, Size: 0x8] 0x715cd29600
	Vector2D Size;//[Offset: 0x230, Size: 0x8] 0x715cd29680
	MaterialBillboardComponent* MaterialBillboardComponent;//[Offset: 0x238, Size: 0x8] 0x715cd29700
	MaterialInstanceDynamic* MaterialInstanceDynamic;//[Offset: 0x240, Size: 0x8] 0x715cd29780

--------------------------------
Class: LetterboxedCameraModifier.BaseLetterboxedCameraModifier.CameraModifier.Object // 71a4b2cb80

--------------------------------
Class: LockedCameraModifier.CameraModifier.Object // 71a4b2c900

--------------------------------
Class: SkinnableCharacterInterface.Interface.Object // 71a4b2c400

--------------------------------
Class: StaticCameraModifier.BaseLetterboxedCameraModifier.CameraModifier.Object // 71a4b2bf00
	StaticCameraFrame* StaticCameraFrame;//[Offset: 0x78, Size: 0x8] 0x715cd2c080

--------------------------------
Class: BadgeDataAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2bc80
	<GameplayTag,BadgeDefinition> BadgeDefinitions;//[Offset: 0x38, Size: 0x50] 0x715cd30e80
	<enum,BadgeTierDefinition> TierDefinitions;//[Offset: 0x88, Size: 0x50] 0x715cd30f40

--------------------------------
Class: BadgeDefinition // 715ce7f7c0
	FText Name;//[Offset: 0x0, Size: 0x18] 0x715ceb3280
	SlateBrush Icon;//[Offset: 0x18, Size: 0x88] 0x715ceb3300
	enum Tier;//[Offset: 0xa0, Size: 0x1] 0x715ce936c0
	FText Description;//[Offset: 0xa8, Size: 0x18] 0x715ceb3400
	int SortOrder;//[Offset: 0xc0, Size: 0x4] 0x715ceb3480

--------------------------------
Class: BadgeTierDefinition // 715cec1840
	SlateBrush FrameIcon;//[Offset: 0x0, Size: 0x88] 0x715ceb5280
	Texture2D* FrameSDF;//[Offset: 0x88, Size: 0x8] 0x715ceb3200

--------------------------------
Class: HuntersAnimationEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2b500
	StaticCameraFrame* CameraOverride;//[Offset: 0x128, Size: 0x8] 0x715cd2d280
	AnimationDefinition* AnimMontageAsset;//[Offset: 0x130, Size: 0x28] 0x715cd2d300

--------------------------------
Class: HuntersIntroAnimationEntitlement.HuntersAnimationEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2b280

--------------------------------
Class: HuntersVictoryAnimationEntitlement.HuntersAnimationEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2b000

--------------------------------
Class: HuntersAppStoreReviewData.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2ad80
	AppStoreReviewData ReviewData;//[Offset: 0x34, Size: 0x4] 0x715cd2d200

--------------------------------
Class: AppStoreReviewData // 715cec16c0
	int review_version;//[Offset: 0x0, Size: 0x4] 0x715ceb5100

--------------------------------
Class: HuntersAvatarEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2ab00
	bool bAllowBotSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x715cd2d180

--------------------------------
Class: HuntersBattlePassActiveSeasonUIData.DataAsset.Object // 71a4b2a880
	SlateBrush SeasonalHunterIcon;//[Offset: 0x30, Size: 0x88] 0x715cd2ce80
	SlateBrush SeasonalHunterShowcase;//[Offset: 0xb8, Size: 0x88] 0x715cd2cf00
	SlateBrush BPPurchaseScreenBackground;//[Offset: 0x140, Size: 0x88] 0x715cd2cf80
	SlateBrush SeasonalHunterNameLogo;//[Offset: 0x1c8, Size: 0x88] 0x715cd2d000
	SlateBrush SeasonalChallengesArt;//[Offset: 0x250, Size: 0x88] 0x715cd2d080
	SlateBrush[] FTUEImages;//[Offset: 0x2d8, Size: 0x10] 0x715cc8ba00

--------------------------------
Class: HuntersBattlePassEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2a600
	FText SeasonTitle;//[Offset: 0x128, Size: 0x18] 0x715cd2cd00
	HuntersBattlePassActiveSeasonUIData* BattlePassActiveSeasonUIData;//[Offset: 0x140, Size: 0x28] 0x715cd2cd80
	HuntersSeasonTagUIData* SeasonTagUIData;//[Offset: 0x168, Size: 0x28] 0x715cd2ce00

--------------------------------
Class: HuntersSeasonTagUIData.DataAsset.Object // 71a4b31500
	SlateBrush SeasonTagImage;//[Offset: 0x30, Size: 0x88] 0x715cd63100
	SlateColor SeasonTagPrimaryColor;//[Offset: 0xb8, Size: 0x28] 0x715cd63180
	SlateColor SeasonTagSecondaryColor;//[Offset: 0xe0, Size: 0x28] 0x715cd61100

--------------------------------
Class: HuntersBattlePassProgressionEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2fd80

--------------------------------
Class: HuntersChallengeDeepLinkData.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2fb00
	DataTable*[] DeepLinkDataTables;//[Offset: 0x38, Size: 0x10] 0x715cc8e2a0

--------------------------------
Class: HuntersChallengeImageAsset.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b2f880
	SlateBrush Image;//[Offset: 0x38, Size: 0x88] 0x715cd2cc00

--------------------------------
Class: HuntersChallengeDisplayData.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b35100
	<FString,HuntersChallengeImageAsset*> ChallengeImages;//[Offset: 0x38, Size: 0x50] 0x715cd30d00

--------------------------------
Class: HuntersCharacterProgressionEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b34c00

--------------------------------
Class: HuntersCurrencyEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b34980

--------------------------------
Class: HuntersEconomyData.DataAsset.Object // 71a4b34700
	CharacterCurrencyTransferSettings CharacterCurrencyTransferSettings;//[Offset: 0x30, Size: 0x10] 0x715cd2f180
	GameplayTag SoftCurrencyId;//[Offset: 0x40, Size: 0x8] 0x715cd2f200
	GameplayTag HardCurrencyId;//[Offset: 0x48, Size: 0x8] 0x715cd2f280
	GameplayTag HunterTokenCurrencyId;//[Offset: 0x50, Size: 0x8] 0x715cd2f300
	GameplayTag ModuleCurrencyId;//[Offset: 0x58, Size: 0x8] 0x715cd2f380
	GameplayTag FameGrantCurrencyId;//[Offset: 0x60, Size: 0x8] 0x715cd2f400
	GameplayTag SoftCurrencyToCharacterCurrencyCostId;//[Offset: 0x68, Size: 0x8] 0x715cd2f480
	GameplayTag CharacterCurrencyToSoftCurrencyCostId;//[Offset: 0x70, Size: 0x8] 0x715cd2f500

--------------------------------
Class: CharacterCurrencyTransferSettings // 715cec1240
	int BaseTransferAmount;//[Offset: 0x0, Size: 0x4] 0x715ceb4600
	GameplayTag CurrencyToSpendOnTransfer;//[Offset: 0x4, Size: 0x8] 0x715ceb4680
	int AmountToSpendPerBaseTransferAmount;//[Offset: 0xc, Size: 0x4] 0x715ceb4700

--------------------------------
Class: HuntersEntitlements.PrimaryDataAsset.DataAsset.Object // 71a4b34200
	HuntersEntitlements*[] SubEntitlements;//[Offset: 0x30, Size: 0x10] 0x715cc8d800
	<GameplayTag,HuntersEntitlementBase*> EntitlementMap;//[Offset: 0x40, Size: 0x50] 0x715cd30b80

--------------------------------
Class: HuntersEntitlementTypes.DataAsset.Object // 71a4b33f80
	<GameplayTag,HuntersEntitlementType> EntitlementTypeMap;//[Offset: 0x30, Size: 0x50] 0x715cd30ac0

--------------------------------
Class: HuntersEntitlementType // 715cec0f40
	int64 Max_amount;//[Offset: 0x0, Size: 0x8] 0x715ceb6180
	bool Track_economy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715ceb6200
	bool Pipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x715ceb6280
	bool Is_paid_platform_split;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x715ceb6300
	bool Allow_view_item_screen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1] 0x715ceb4280

--------------------------------
Class: HuntersEquipmentSkinEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b33a80
	EquipmentProxyDataAsset* EquipmentProxyDataAsset;//[Offset: 0x128, Size: 0x28] 0x715cd2e800
	StaticCameraFrame* CameraOverride;//[Offset: 0x150, Size: 0x8] 0x715cd2e880
	EquipmentSkinDefinition* EquipmentSkinDefinitionAsset;//[Offset: 0x158, Size: 0x28] 0x715cd2e900

--------------------------------
Class: HuntersFeatureTokenEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b33800
	enum FeatureAvailabilityWhenUnowned;//[Offset: 0x128, Size: 0x1] 0x715cc8d760

--------------------------------
Class: HuntersFrameEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b33580
	bool bHiddenWhileLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x715cd2ff80

--------------------------------
Class: HuntersMapDisplayData.DataAsset.Object // 71a4b33080
	FString MapName;//[Offset: 0x30, Size: 0x10] 0x715cd2f980
	FText DisplayName;//[Offset: 0x40, Size: 0x18] 0x715cd2fa00
	FText Description;//[Offset: 0x58, Size: 0x18] 0x715cd2fa80
	SlateBrush Image;//[Offset: 0x70, Size: 0x88] 0x715cd2fb00
	GameplayTag GameModeID;//[Offset: 0xf8, Size: 0x8] 0x715cd2fb80

--------------------------------
Class: HuntersMatchResultDisplayData.DataAsset.Object // 71a4b32e00
	MatchResultsStatsDisplayInfo[] StatsDisplayItems;//[Offset: 0x30, Size: 0x10] 0x715cc8d620
	MatchResultsRewardsDisplayInfo[] RewardsDisplayItems;//[Offset: 0x40, Size: 0x10] 0x715cc8d6c0

--------------------------------
Class: MatchResultsStatsDisplayInfo // 715cec0c40
	FString NakamaStatId;//[Offset: 0x0, Size: 0x10] 0x715ceb5b00
	FText Title;//[Offset: 0x10, Size: 0x18] 0x715ceb5b80
	bool bDisplayAsTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715ceb5c00
	float ExpectedValue;//[Offset: 0x2c, Size: 0x4] 0x715ceb5c80
	bool bCanUseMedal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715ceb5d00
	SlateBrush StatIcon;//[Offset: 0x38, Size: 0x88] 0x715ceb5d80

--------------------------------
Class: MatchResultsRewardsDisplayInfo // 715cec0d00
	FString NakamaStatId;//[Offset: 0x0, Size: 0x10] 0x715ceb5e00
	FText Title;//[Offset: 0x10, Size: 0x18] 0x715ceb5e80

--------------------------------
Class: HuntersMetaTuningData.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b32b80
	HuntersEntitlementTypes* EntitlementTypes;//[Offset: 0x38, Size: 0x8] 0x715cd60880
	HuntersEntitlements* Entitlements;//[Offset: 0x40, Size: 0x8] 0x715cd60900
	HuntersShopBundles* ShopBundles;//[Offset: 0x48, Size: 0x8] 0x715cd60980
	HuntersShopDisplayData* ShopDisplayData;//[Offset: 0x50, Size: 0x8] 0x715cd60a00
	DataTable* InitialEntitlementsTable;//[Offset: 0x58, Size: 0x8] 0x715cd60a80
	DataTable* MatchAccoladeTable;//[Offset: 0x60, Size: 0x8] 0x715cd60b00
	HuntersPlayerProfile* DefaultProfileData;//[Offset: 0x68, Size: 0x8] 0x715cd60b80
	HuntersMetaTuningDataDisplay* DisplayData;//[Offset: 0x70, Size: 0x8] 0x715cd60c00
	HuntersEconomyData* EconomyData;//[Offset: 0x78, Size: 0x8] 0x715cd60c80
	HuntersProgressionData* ProgressionData;//[Offset: 0x80, Size: 0x8] 0x715cd60d00
	HuntersMatchResultDisplayData* MatchResultDisplayData;//[Offset: 0x88, Size: 0x8] 0x715cd60d80
	PlayerProfileStatisticsDataAsset* PlayerProfileStatistics;//[Offset: 0x90, Size: 0x8] 0x715cd60e00
	HuntersChallengeDisplayData* ChallengeDisplayData;//[Offset: 0x98, Size: 0x8] 0x715cd60e80
	HuntersChallengeDeepLinkData* ChallengeDeepLinkData;//[Offset: 0xa0, Size: 0x8] 0x715cd60f00
	HuntersMetaTuningMapDisplayData* MapDisplayData;//[Offset: 0xa8, Size: 0x8] 0x715cd60f80
	BadgeDataAsset* BadgeData;//[Offset: 0xb0, Size: 0x8] 0x715cd61000
	HuntersAppStoreReviewData* ReviewData;//[Offset: 0xb8, Size: 0x8] 0x715cd61080
	HuntersCharacterEntitlement*[] GetCharacterEntitlements();// 0x686ea58 0x715cd51ac0

--------------------------------
Class: HuntersShopBundles.DataAsset.Object // 71a4b31280
	<FString,HuntersShopBundle> Bundles;//[Offset: 0x30, Size: 0x50] 0x715cd30400

--------------------------------
Class: HuntersShopBundle // 715cec0040
	HuntersCostPacket[] Cost_ids;//[Offset: 0x0, Size: 0x10] 0x715ce951a0
	HuntersEntitlementAmount[] Grants;//[Offset: 0x10, Size: 0x10] 0x715ce95240
	HuntersEntitlementAmount[] Requires;//[Offset: 0x20, Size: 0x10] 0x715ce929a0
	int64 Limit;//[Offset: 0x30, Size: 0x8] 0x715ceb7c00
	FString Limit_key;//[Offset: 0x38, Size: 0x10] 0x715ceb7c80
	<GameplayTag,HuntersShopDiscount> Discounts;//[Offset: 0x48, Size: 0x50] 0x715cec3040
	bool Iap_bundle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x715ceb7f80
	bool Unlisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x715ceb8000
	bool Include_owned_costs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1] 0x715ceb8080
	bool Ignore_entitlement_requirements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1] 0x715ceb8100
	HuntersBundleDisplay BundleDisplay;//[Offset: 0xa0, Size: 0xf8] 0x715ceb6580

--------------------------------
Class: HuntersCostPacket // 715cec2ec0
	GameplayTag[] Cost_list;//[Offset: 0x0, Size: 0x10] 0x715ce95100

--------------------------------
Class: HuntersShopDiscount // 715cec2f80
	enum Type;//[Offset: 0x0, Size: 0x4] 0x715ce92a40
	int64 Value;//[Offset: 0x8, Size: 0x8] 0x715ceb7d80
	int64 Percent;//[Offset: 0x10, Size: 0x8] 0x715ceb7e00

--------------------------------
Class: HuntersBundleDisplay // 715cec3100
	int PreviewEntitlementIndex;//[Offset: 0x0, Size: 0x4] 0x715ceb8180
	SlateBrush Icon;//[Offset: 0x8, Size: 0x88] 0x715ceb8200
	Margin Frame;//[Offset: 0x90, Size: 0x10] 0x715ceb8280
	FText Name;//[Offset: 0xa0, Size: 0x18] 0x715ceb8300
	FText Description;//[Offset: 0xb8, Size: 0x18] 0x715ceb8380
	FText BannerText;//[Offset: 0xd0, Size: 0x18] 0x715ceb8400
	int64 Priority;//[Offset: 0xe8, Size: 0x8] 0x715ceb6380
	enum Rarity;//[Offset: 0xf0, Size: 0x1] 0x715ce92ae0
	bool UseBundleIconOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1] 0x715ceb6480
	bool bShowDiscount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1] 0x715ceb6500

--------------------------------
Class: HuntersShopDisplayData.DataAsset.Object // 71a4b31000
	HuntersShopDisplayData*[] SubDataAssets;//[Offset: 0x30, Size: 0x10] 0x715cc8cea0
	<FString,FText> SectionTitleLocStrings;//[Offset: 0x40, Size: 0x50] 0x715cd30340

--------------------------------
Class: HuntersPlayerProfile.DataAsset.Object // 71a4b32180
	<GameplayTag,HuntersPlayerProfileCharacter> Characters;//[Offset: 0x30, Size: 0x50] 0x715cd30580
	enum[] Preferred_classes;//[Offset: 0x80, Size: 0x10] 0x715cc8d120

--------------------------------
Class: HuntersPlayerProfileCharacter // 715cec0400
	HuntersPlayerProfileEntitlements Entitlements;//[Offset: 0x0, Size: 0x50] 0x715ceb6a00
	HuntersPlayerProfileAbilityLoadout[] Loadouts;//[Offset: 0x50, Size: 0x10] 0x715ce92fe0

--------------------------------
Class: HuntersPlayerProfileEntitlements // 715cec01c0
	GameplayTag[] Intro_anim;//[Offset: 0x0, Size: 0x10] 0x715ce92c20
	GameplayTag[] Victory_anim;//[Offset: 0x10, Size: 0x10] 0x715ce92cc0
	GameplayTag[] Audio;//[Offset: 0x20, Size: 0x10] 0x715ce92d60
	GameplayTag[] Skin;//[Offset: 0x30, Size: 0x10] 0x715ce92e00
	GameplayTag[] Weapon_skin;//[Offset: 0x40, Size: 0x10] 0x715ce92ea0

--------------------------------
Class: HuntersPlayerProfileAbilityLoadout // 715cec0340
	HuntersPlayerProfileAbilitySet Entitlements;//[Offset: 0x0, Size: 0x10] 0x715ceb6b00
	GameplayTag Game_mode;//[Offset: 0x10, Size: 0x8] 0x715ceb6b80

--------------------------------
Class: HuntersPlayerProfileAbilitySet // 715cec0280
	GameplayTag[] Ability;//[Offset: 0x0, Size: 0x10] 0x715ce92f40

--------------------------------
Class: HuntersMetaTuningDataDisplay.DataAsset.Object // 71a4b32900
	<enum,HuntersClassUIDefinition> ClassUIDefinitionMap;//[Offset: 0x30, Size: 0x50] 0x715cd307c0
	<enum,EntitlementTypeDisplay> EntitlementTypeDisplayData;//[Offset: 0x80, Size: 0x50] 0x715cd30880
	GenericEntitlementDescriptions GenericEntitlementDescriptions;//[Offset: 0xd0, Size: 0xc8] 0x715cd60700
	<enum,RarityTypeDisplay> RarityDisplayData;//[Offset: 0x198, Size: 0x50] 0x715cd30940

--------------------------------
Class: HuntersClassUIDefinition // 715cec1300
	FText Name;//[Offset: 0x0, Size: 0x18] 0x715ceb4780
	SlateBrush Icon;//[Offset: 0x18, Size: 0x88] 0x715ceb4800
	SlateBrush DetailedIcon;//[Offset: 0xa0, Size: 0x88] 0x715ceb4880

--------------------------------
Class: EntitlementTypeDisplay // 715cec07c0
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x715ceb7180
	FText CharacterDetailsPanelTitle;//[Offset: 0x18, Size: 0x18] 0x715ceb7200
	FText CultureInvariantPanelTitle;//[Offset: 0x30, Size: 0x18] 0x715ceb7280

--------------------------------
Class: GenericEntitlementDescriptions // 715cec0700
	FText GenericSkinDescription;//[Offset: 0x0, Size: 0x18] 0x715ceb6c80
	FText GenericHardCurrencyDescription;//[Offset: 0x18, Size: 0x18] 0x715ceb6d00
	FText GenericCharacterCurrencyDescription;//[Offset: 0x30, Size: 0x18] 0x715ceb6d80
	FText GenericSoftCurrencyDescription;//[Offset: 0x48, Size: 0x18] 0x715ceb6e00
	FText GenericModuleTokenCurrencyDescription;//[Offset: 0x60, Size: 0x18] 0x715ceb6e80
	<GameplayTag,GenericAbilityDescriptions> CharacterGenericAbilityDescriptionsMap;//[Offset: 0x78, Size: 0x50] 0x715cec0640

--------------------------------
Class: GenericAbilityDescriptions // 715cec0580
	GenericAbilityNameAndDescription[] GenericDescriptionList;//[Offset: 0x0, Size: 0x10] 0x715ce93080

--------------------------------
Class: GenericAbilityNameAndDescription // 715cec04c0
	FText Name;//[Offset: 0x0, Size: 0x18] 0x715ceb6f00
	FText Description;//[Offset: 0x18, Size: 0x18] 0x715ceb6f80

--------------------------------
Class: RarityTypeDisplay // 715cec0880
	FText DisplayText;//[Offset: 0x0, Size: 0x18] 0x715ceb7300
	FName ColorTheme;//[Offset: 0x18, Size: 0x8] 0x715ceb7380
	SlateBrush Background;//[Offset: 0x20, Size: 0x88] 0x715ceb5300

--------------------------------
Class: HuntersProgressionData.PrimaryDataAsset.DataAsset.Object // 71a4b31a00
	GameplayTag PlayerLevelId;//[Offset: 0x30, Size: 0x8] 0x715cd61300
	GameplayTag PlayerXpId;//[Offset: 0x38, Size: 0x8] 0x715cd61380
	HuntersRewardTrack* PlayerLevelRewardTrack;//[Offset: 0x40, Size: 0x8] 0x715cd61400
	<GameplayTag,HuntersRewardTrack*> CharacterLevelRewardTracks;//[Offset: 0x48, Size: 0x50] 0x715cd304c0

--------------------------------
Class: HuntersMetaTuningMapDisplayData.DataAsset.Object // 71a4b32400
	HuntersGameModeDisplayData* DefaultGameModeDisplayData;//[Offset: 0x30, Size: 0x8] 0x715cd61880
	HuntersMapDisplayData* DefaultMapDisplayData;//[Offset: 0x38, Size: 0x8] 0x715cd61900
	<GameplayTag,HuntersGameModeDisplayData*> GameModeIdToDisplayData;//[Offset: 0x40, Size: 0x50] 0x715cd30640
	HuntersMapDisplayData*[] MapDisplayDatas;//[Offset: 0x90, Size: 0x10] 0x715cc8d1c0
	<GameplayTag,HuntersVariantGameModeDisplayData*> VariantGameModeDisplayDataMap;//[Offset: 0xa0, Size: 0x50] 0x715cd30700

--------------------------------
Class: HuntersMetaTuningDataFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4b32680
	static bool TryGetCharacterAbilities(const HuntersMetaTuningData* MetaTuningData, out const MetaTuningDataKey CharacterId, int AbilitySetIndex, out HuntersAbilityEntitlement*[] OutAbilityEntitlements);// 0x6872690 0x715cd51580
	static bool IsMetaTuningKeyNotEmpty(out const MetaTuningDataKey Key);// 0x68729f0 0x715cd51660
	static bool IsMetaTuningKeyEmpty(out const MetaTuningDataKey Key);// 0x6872aac 0x715cd51740
	static FString GetStatsKey(World* WorldContext, FString PlayModeStr, FString ModeStr, out const MetaTuningDataKey CharacterKey, FString RoleStr, FString BaseKey);// 0x6872420 0x715cd51820
	static MetaTuningDataKey GetMetaTuningDataKey(out const class Character Character);// 0x687282c 0x715cd51900
	static bool AreEqual(out const MetaTuningDataKey A, out const MetaTuningDataKey B);// 0x68728e0 0x715cd519e0

--------------------------------
Class: HuntersPlayerProfileCharacterClass.DataAsset.Object // 71a4b31f00
	GameplayTag GameplayTag;//[Offset: 0x30, Size: 0x8] 0x715cd61580
	HuntersPlayerProfileEntitlements Entitlements;//[Offset: 0x38, Size: 0x50] 0x715cd61600
	HuntersPlayerProfileAbilityLoadout[] Loadouts;//[Offset: 0x88, Size: 0x10] 0x715cc8cfe0

--------------------------------
Class: HuntersPlayerProgressionEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b31c80

--------------------------------
Class: HuntersSkinEntitlement.HuntersEntitlementBase.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b30d80
	GameplayTag CharacterSkinVOTag;//[Offset: 0x128, Size: 0x8] 0x715cd62d00
	StaticCameraFrame* CameraOverride;//[Offset: 0x130, Size: 0x8] 0x715cd62d80
	CharacterSkinDefinition* CharacterSkinDefinitionAsset;//[Offset: 0x138, Size: 0x28] 0x715cd62e00

--------------------------------
Class: MetaTuningDataKeyActorInterface.Interface.Object // 71a4b30880

--------------------------------
Class: HuntersCharacterDataAsset.DataAsset.Object // 71a4b30380
	class Character* Character;//[Offset: 0x30, Size: 0x8] 0x715cc8f560
	class Character* AICharacter;//[Offset: 0x38, Size: 0x8] 0x715cc8f600

--------------------------------
Class: HuntersStorageObjectsCacheSettings.DeveloperSettings.Object // 71a4b30100
	StorageCollectionKeyPair[] StorageObjects;//[Offset: 0x38, Size: 0x10] 0x715cc8f4c0
	int MaxRetries;//[Offset: 0x48, Size: 0x4] 0x715cd62a00

--------------------------------
Class: StorageCollectionKeyPair // 715cec7540
	FString Collection;//[Offset: 0x0, Size: 0x10] 0x715cef0480
	FString Key;//[Offset: 0x10, Size: 0x10] 0x715cef0500

--------------------------------
Class: PlayerStatisticsSettings.DeveloperSettings.Object // 71a4b3a380
	GameplayTag Wins;//[Offset: 0x38, Size: 0x8] 0x715cd65000
	GameplayTag Draws;//[Offset: 0x40, Size: 0x8] 0x715cd65080
	GameplayTag WinRate;//[Offset: 0x48, Size: 0x8] 0x715cd65100
	GameplayTag Losses;//[Offset: 0x50, Size: 0x8] 0x715cd65180
	GameplayTag Kills;//[Offset: 0x58, Size: 0x8] 0x715cd65200
	GameplayTag KillStreak;//[Offset: 0x60, Size: 0x8] 0x715cd65280
	GameplayTag AvengeKills;//[Offset: 0x68, Size: 0x8] 0x715cd63200
	GameplayTag HeadshotKills;//[Offset: 0x70, Size: 0x8] 0x715cd63280
	GameplayTag Assists;//[Offset: 0x78, Size: 0x8] 0x715cd63300
	GameplayTag Damage;//[Offset: 0x80, Size: 0x8] 0x715cd63380
	GameplayTag Healing;//[Offset: 0x88, Size: 0x8] 0x715cd63400
	GameplayTag DamageIncoming;//[Offset: 0x90, Size: 0x8] 0x715cd63480
	GameplayTag TimeOnObjective;//[Offset: 0x98, Size: 0x8] 0x715cd63500
	GameplayTag BallHeldTime;//[Offset: 0xa0, Size: 0x8] 0x715cd63580
	GameplayTag Experience;//[Offset: 0xa8, Size: 0x8] 0x715cd63600
	GameplayTag Deaths;//[Offset: 0xb0, Size: 0x8] 0x715cd63680
	GameplayTag Goals;//[Offset: 0xb8, Size: 0x8] 0x715cd63700
	GameplayTag UltimatesUsed;//[Offset: 0xc0, Size: 0x8] 0x715cd63780
	GameplayTag EnvironmentalEliminations;//[Offset: 0xc8, Size: 0x8] 0x715cd63800
	<GameplayTag,GameplayTag> DamageTypeTagToStatisticTag;//[Offset: 0xd0, Size: 0x50] 0x715cd30280
	GameplayTag HealthPickupsCollected;//[Offset: 0x120, Size: 0x8] 0x715cd63980
	GameplayTag XPPickupsCollected;//[Offset: 0x128, Size: 0x8] 0x715cd63a00
	GameplayTag ClutchHealing;//[Offset: 0x130, Size: 0x8] 0x715cd63a80
	GameplayTag SavingHeals;//[Offset: 0x138, Size: 0x8] 0x715cd63b00
	GameplayTag SavingHealsBadge;//[Offset: 0x140, Size: 0x8] 0x715cd63b80
	GameplayTag FirstKill;//[Offset: 0x148, Size: 0x8] 0x715cd63c00
	GameplayTag ThreatTime;//[Offset: 0x150, Size: 0x8] 0x715cd63c80
	GameplayTag MatchParticipation;//[Offset: 0x158, Size: 0x8] 0x715cd63d00
	GameplayTag MatchFinished;//[Offset: 0x160, Size: 0x8] 0x715cd63d80
	GameplayTag DurationMatch;//[Offset: 0x168, Size: 0x8] 0x715cd63e00
	GameplayTag DurationWin;//[Offset: 0x170, Size: 0x8] 0x715cd63e80
	GameplayTag DamageOthersStreak;//[Offset: 0x178, Size: 0x8] 0x715cd63f00
	GameplayTag HealOthersStreak;//[Offset: 0x180, Size: 0x8] 0x715cd63f80
	GameplayTag DamageTakenFromHostilesStreak;//[Offset: 0x188, Size: 0x8] 0x715cd64000
	GameplayTag HealSelf;//[Offset: 0x190, Size: 0x8] 0x715cd64080
	GameplayTag HealOthers;//[Offset: 0x198, Size: 0x8] 0x715cd64100
	GameplayTag HealedByOthers;//[Offset: 0x1a0, Size: 0x8] 0x715cd64180
	GameplayTag DamageSelf;//[Offset: 0x1a8, Size: 0x8] 0x715cd64200
	GameplayTag CurrentKillStreak;//[Offset: 0x1b0, Size: 0x8] 0x715cd62180
	FString EliminateSpecificCharacterPrefix;//[Offset: 0x1b8, Size: 0x10] 0x715cd62200
	GameplayTag EliminateClassTank;//[Offset: 0x1c8, Size: 0x8] 0x715cd62280
	GameplayTag EliminateClassDamage;//[Offset: 0x1d0, Size: 0x8] 0x715cd62300
	GameplayTag EliminateClassSupport;//[Offset: 0x1d8, Size: 0x8] 0x715cd62380
	GameplayTag EliminateMeleeHunter;//[Offset: 0x1e0, Size: 0x8] 0x715cd62400
	GameplayTag EliminateRangedHunter;//[Offset: 0x1e8, Size: 0x8] 0x715cd62480
	GameplayTag HuttballSquadGoals;//[Offset: 0x1f0, Size: 0x8] 0x715cd62500
	GameplayTag ZiplineActivations;//[Offset: 0x1f8, Size: 0x8] 0x715cd62580
	GameplayTag JumpPadActivations;//[Offset: 0x200, Size: 0x8] 0x715cd62600
	GameplayTag BrawlWinningKills;//[Offset: 0x208, Size: 0x8] 0x715cd62680
	GameplayTag BrawlFirstTeamToTenKills;//[Offset: 0x210, Size: 0x8] 0x715cd62700
	GameplayTag BrawlKillsMvps;//[Offset: 0x218, Size: 0x8] 0x715cd62780
	GameplayTag BrawlDamageMvps;//[Offset: 0x220, Size: 0x8] 0x715cd62800
	GameplayTag BrawlHealsMvps;//[Offset: 0x228, Size: 0x8] 0x715cd62880
	GameplayTag BrawlMatches;//[Offset: 0x230, Size: 0x8] 0x715cd62900

--------------------------------
Class: DebugInputHud.UserWidget.Widget.Visual.Object // 71a4b3a100
	SpinBox* MovementSensitivityX;//[Offset: 0x240, Size: 0x8] 0x715cd64400
	SpinBox* MovementSensitivityY;//[Offset: 0x248, Size: 0x8] 0x715cd64480
	SpinBox* MovementDegradationRateX;//[Offset: 0x250, Size: 0x8] 0x715cd64500
	SpinBox* MovementDegradationRateY;//[Offset: 0x258, Size: 0x8] 0x715cd64580
	SpinBox* LookingSensitivityX;//[Offset: 0x260, Size: 0x8] 0x715cd64600
	SpinBox* LookingSensitivityY;//[Offset: 0x268, Size: 0x8] 0x715cd64680
	SpinBox* LookingDegradationRateX;//[Offset: 0x270, Size: 0x8] 0x715cd64700
	SpinBox* LookingDegradationRateY;//[Offset: 0x278, Size: 0x8] 0x715cd64780
	void OnMovementSensitivityYChanged(float Val);// 0x6915108 0x715cd50780
	void OnMovementSensitivityXChanged(float Val);// 0x69151e0 0x715cd50860
	void OnMovementDegradationRateYChanged(float Val);// 0x6914f58 0x715cd50940
	void OnMovementDegradationRateXChanged(float Val);// 0x6915030 0x715cd50a20
	void OnLookingSensitivityYChanged(float Val);// 0x6914da8 0x715cd50b00
	void OnLookingSensitivityXChanged(float Val);// 0x6914e80 0x715cd50be0
	void OnLookingDegradationRateYChanged(float Val);// 0x6914bf8 0x715cd50cc0
	void OnLookingDegradationRateXChanged(float Val);// 0x6914cd0 0x715cd50da0
	float OnGetMovementSensitivityY();// 0x69151ac 0x715cd50e80
	float OnGetMovementSensitivityX();// 0x6915284 0x715cd50f60
	float OnGetMovementDegradationRateY();// 0x6914ffc 0x715cd51040
	float OnGetMovementDegradationRateX();// 0x69150d4 0x715cd51120
	float OnGetLookingSensitivityY();// 0x6914e4c 0x715cd51200
	float OnGetLookingSensitivityX();// 0x6914f24 0x715cd512e0
	float OnGetLookingDegradationRateY();// 0x6914c9c 0x715cd513c0
	float OnGetLookingDegradationRateX();// 0x6914d74 0x715cd514a0

--------------------------------
Class: DeviceInputSettings.DeveloperSettings.Object // 71a4b39e80
	DeviceInputConfiguration DefaultMobileDevice;//[Offset: 0x38, Size: 0x38] 0x715cd64280
	DeviceInputConfiguration EditorDevice;//[Offset: 0x70, Size: 0x38] 0x715cd64300
	DeviceInputConfiguration[] Devices;//[Offset: 0xa8, Size: 0x10] 0x715cc8f420

--------------------------------
Class: DeviceInputConfiguration // 715cec6ac0
	FString DeviceMake;//[Offset: 0x0, Size: 0x10] 0x715cef1680
	FString DeviceModel;//[Offset: 0x10, Size: 0x10] 0x715cef1700
	int DPI;//[Offset: 0x20, Size: 0x4] 0x715cef1780
	float Scaling;//[Offset: 0x24, Size: 0x4] 0x715cef1800
	float SideSwapThreshold;//[Offset: 0x28, Size: 0x4] 0x715cef1880
	float InputNoiseFilteringThreshold;//[Offset: 0x2c, Size: 0x4] 0x715cef1900
	float InputNoiseFilteringSpeedThreshold;//[Offset: 0x30, Size: 0x4] 0x715cef1980

--------------------------------
Class: GamepadInput.Object // 71a4b39c00
	delegate PlatformInputTypeChangeDelegate;//[Offset: 0x28, Size: 0x10] 0x715cd65e80
	InputComponent* InputComponent;//[Offset: 0x58, Size: 0x8] 0x715cd65f00
	GamepadShortcutLayersManager* ShortcutLayersManager;//[Offset: 0x60, Size: 0x8] 0x715cd65f80
	GamepadLegendBarManager* LegendBarManager;//[Offset: 0x68, Size: 0x8] 0x715cd66000
	bool IsGamepadSupportRequired();// 0x69167a8 0x715cd50240
	enum GetUIPlatform();// 0x6916774 0x715cd50320
	enum GetLastInputType();// 0x6916738 0x715cd50400
	enum GetInputType();// 0x69166f8 0x715cd504e0
	enum GetGamepadType();// 0x6916690 0x715cd505c0
	static GamepadInput* Get();// 0x69166c4 0x715cd506a0

--------------------------------
Class: GamepadShortcutLayersManager.Object // 71a4b39700
	delegate GamepadShortcutsUpdateDelegate;//[Offset: 0x28, Size: 0x10] 0x715cd65b80
	GamepadShortcutsLayer*[] Layers;//[Offset: 0x38, Size: 0x10] 0x715cc8f060
	GamepadShortcutsLayer*[] LayersPool;//[Offset: 0x48, Size: 0x10] 0x715cc8f100
	void OnPlatformInputTypeChanged();// 0x6917a5c 0x715cd50160

--------------------------------
Class: GamepadShortcutsLayer.Object // 71a4b39480
	interface class None* GamepadContextSpecifier;//[Offset: 0x40, Size: 0x10] 0x715cd65980
	interface classNone[] GamepadContextMembers;//[Offset: 0x50, Size: 0x10] 0x715cc8efc0
	<FName,interface classNone> ActiveGamepadContextMembersMap;//[Offset: 0x60, Size: 0x50] 0x715cd301c0

--------------------------------
Class: GamepadLegendBarManager.Object // 71a4b39980
	delegate OnUpdateLegendBarLayer;//[Offset: 0x28, Size: 0x10] 0x715cd65d00
	delegate OnUpdateLegendBarData;//[Offset: 0x38, Size: 0x10] 0x715cd65d80
	interface class None* ActiveSelectableObject;//[Offset: 0xa0, Size: 0x10] 0x715cd65e00

--------------------------------
Class: HuntersInputHelpers.BlueprintFunctionLibrary.Object // 71a4b38f80
	static bool IsUIInputModeEnabled();// 0x6919ba0 0x715cd52b60
	static bool IsGamepadSupportRequired();// 0x6919bd8 0x715cd52c40
	static InputComponent* GetGamepadInputComponent();// 0x6919c10 0x715cd52d20
	static GamepadInput* GetGamepadInput();// 0x6919c44 0x715cd52e00

--------------------------------
Class: HunterInputSettings.DeveloperSettings.Object // 71a4b38d00
	HuntersInputAccelValueSettings DefaultRepeatBlockSettings;//[Offset: 0x38, Size: 0xc] 0x715cd66d80
	float UnderPressureRateMultiplier;//[Offset: 0x44, Size: 0x4] 0x715cd66e00
	Key[] BlockedRepeatingButtons;//[Offset: 0x48, Size: 0x10] 0x715cc8ee80
	<Key,HuntersInputAccelValueSettings> RepeatBlockingSettingsPerKey;//[Offset: 0x58, Size: 0x50] 0x715cd30100
	Key[] UnrestrictedButtonsList;//[Offset: 0xa8, Size: 0x10] 0x715cc8ef20
	float WindowOfLimitActionsInSeconds;//[Offset: 0xb8, Size: 0x4] 0x715cd67080

--------------------------------
Class: HuntersInputAccelValueSettings // 715cec6a00
	float BeginValue;//[Offset: 0x0, Size: 0x4] 0x715cef1500
	float FinalValue;//[Offset: 0x4, Size: 0x4] 0x715cef1580
	byte StepsToMax;//[Offset: 0x8, Size: 0x1] 0x715cef1600

--------------------------------
Class: GamepadContextMember.Interface.Object // 71a4b38a80

--------------------------------
Class: GamepadContextSpecifier.Interface.Object // 71a4b38800

--------------------------------
Class: GamepadSelectableMember.Interface.Object // 71a4b38580

--------------------------------
Class: TouchJoystickWidget.UserWidget.Widget.Visual.Object // 71a4b38080
	byte Index;//[Offset: 0x230, Size: 0x1] 0x715cd66500
	void UnbindDragEvents(const HuntersInputComponent* InInputComponent);// 0x691c40c 0x715cd52700
	void OnDragStarted(Vector2D InStartRelativeLocation);// 0x45c6aa0 0x715cd527e0
	void OnDragEnded();// 0x45c6aa0 0x715cd528c0
	void OnDragContinued(Vector2D InDragOffset);// 0x45c6aa0 0x715cd529a0
	void BindDragEvents(const HuntersInputComponent* InInputComponent);// 0x691c4b0 0x715cd52a80

--------------------------------
Class: AbilityIcon.Image.Widget.Visual.Object // 71a4b37e00
	float BlendAmount;//[Offset: 0x210, Size: 0x4] 0x715cd68180
	LinearColor Red1;//[Offset: 0x214, Size: 0x10] 0x715cd68200
	LinearColor Red2;//[Offset: 0x224, Size: 0x10] 0x715cd68280
	LinearColor Green1;//[Offset: 0x234, Size: 0x10] 0x715cd68300
	LinearColor Green2;//[Offset: 0x244, Size: 0x10] 0x715cd68380
	LinearColor Blue1;//[Offset: 0x254, Size: 0x10] 0x715cd68400
	LinearColor Blue2;//[Offset: 0x264, Size: 0x10] 0x715cd66380
	MaterialInstanceDynamic* CachedMaterial;//[Offset: 0x278, Size: 0x8] 0x715cd66400
	Texture2D* AbilityIcon;//[Offset: 0x280, Size: 0x8] 0x715cd66480

--------------------------------
Class: PlatformRichTextIconDecorator.RichTextBlockImageDecorator.RichTextBlockDecorator.Object // 71a4b37900
	<enum,DataTable*> PlatformIconsDTs;//[Offset: 0x30, Size: 0x50] 0x715cd30040
	FString LocationTagStart;//[Offset: 0x80, Size: 0x10] 0x715cd68080
	FString LocationTagEnd;//[Offset: 0x90, Size: 0x10] 0x715cd68100

--------------------------------
Class: AbilityRichTextIconDecorator.PlatformRichTextIconDecorator.RichTextBlockImageDecorator.RichTextBlockDecorator.Object // 71a4b37b80
	Widget* Owner;//[Offset: 0xa0, Size: 0x8] 0x715cd67e80
	MetaTuningDataKey GetHunterMetaKeyFromOwnersWidget();// 0x45c6aa0 0x715cd52620

--------------------------------
Class: AspectRatioWidgetSwitcher.UserWidget.Widget.Visual.Object // 71a4b37680
	WidgetSwitcher* PlatformSwitcher;//[Offset: 0x230, Size: 0x8] 0x715d7d5380
	byte VisiblePlatformSlots;//[Offset: 0x238, Size: 0x1] 0x715d7d5400
	<enum,enum> UIMap;//[Offset: 0x240, Size: 0x50] 0x714906ad80
	enum CurrentPlatform;//[Offset: 0x290, Size: 0x1] 0x7148cdac40
	delegate AspectRatioChangeEvent;//[Offset: 0x2a0, Size: 0x10] 0x715d7d5600
	void UpdateView();// 0x69a1328 0x715d7c7320
	void OnAspectRatioChangeEvent__DelegateSignature();// 0x45c6aa0 0x715d7c3a40

--------------------------------
Class: ControllerLegendBarViewModel.SDViewModel.Object // 71a4b37400

--------------------------------
Class: ControllerLegendBarWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b37180
	ControllerLegendButton* Button1;//[Offset: 0x258, Size: 0x8] 0x715cd67c00
	ControllerLegendButton* Button2;//[Offset: 0x260, Size: 0x8] 0x715cd67c80
	ControllerLegendButton* Button3;//[Offset: 0x268, Size: 0x8] 0x715cd67d00
	ControllerLegendButton* SelectButton;//[Offset: 0x270, Size: 0x8] 0x715cd67d80
	ControllerLegendButton* BackButton;//[Offset: 0x278, Size: 0x8] 0x715cd67e00

--------------------------------
Class: ControllerLegendButton.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b36f00
	GamepadGlyph* Glyph;//[Offset: 0x258, Size: 0x8] 0x715cd67880
	SDButton* ButtonToSet;//[Offset: 0x260, Size: 0x8] 0x715cd67900
	SDConfigurableTextBlock* ButtonLabelText;//[Offset: 0x268, Size: 0x8] 0x715cd67980
	Vector2D ImageSize;//[Offset: 0x270, Size: 0x8] 0x715cd67a00
	void TriggerClick();// 0x69a2068 0x715cd522a0
	void SetLegendText(FText InButtonText);// 0x69a207c 0x715cd52380
	void SetGamepadButton(enum InGamepadButton);// 0x69a2230 0x715cd52460
	enum GetGamepadButton();// 0x69a21fc 0x715cd52540

--------------------------------
Class: ControllerLegendSelectButton.ControllerLegendButton.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b36c80

--------------------------------
Class: ControllersDetailPanel.BaseSettingsDetailPanel.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b36a00

--------------------------------
Class: ECCDebugButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object // 71a4b36500
	void OnEccButtonClicked();// 0x69a33bc 0x715cd553a0

--------------------------------
Class: FramedImage.Image.Widget.Visual.Object // 71a4b36000
	Margin Frame;//[Offset: 0x210, Size: 0x10] 0x715cd68b80
	byte HorizontalAlignment;//[Offset: 0x220, Size: 0x1] 0x715cd68c00
	bool bHorizontallyCenterIfLargerThanTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x715cd68c80
	byte VerticalAlignment;//[Offset: 0x222, Size: 0x1] 0x715cd68d00
	bool bVerticallyCenterIfLargerThanTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x223, Size: 0x1] 0x715cd68d80
	void SetFrame(const Margin InFrame);// 0x69a38a0 0x715cd552c0

--------------------------------
Class: GamepadContextWidgetSwitcherSlot.WidgetSwitcherSlot.PanelSlot.Visual.Object // 71a4b35b00

--------------------------------
Class: HuntersButtonDecorator.Object // 71a4b35600
	Button* Button;//[Offset: 0x30, Size: 0x8] 0x715cd6a500
	SDButton* SDButton;//[Offset: 0x38, Size: 0x8] 0x715cd68480

--------------------------------
Class: HuntersComboBox.ComboBoxString.Widget.Visual.Object // 71a4b35380
	delegate OnGenerateSelectedItemWidgetEvent;//[Offset: 0xdf8, Size: 0x10] 0x715d7d9c80
	delegate OnClosing;//[Offset: 0xe08, Size: 0x10] 0x715d7d9d00
	Widget* ComboBoxWidget;//[Offset: 0xe18, Size: 0x8] 0x715d7d9d80
	void OnClosingEvent__DelegateSignature();// 0x45c6aa0 0x715d7c76a0
	Widget* HandleGenerateSelectedItemWidget(FString Item);// 0x45c6aa0 0x715d7c7780

--------------------------------
Class: HuntersFocusRedirect.UserWidget.Widget.Visual.Object // 71a4b3f100
	Widget* WidgetToFocus;//[Offset: 0x230, Size: 0x8] 0x715cd69880
	Widget*[] SecondaryFocusTargets;//[Offset: 0x238, Size: 0x10] 0x715cc8e980
	bool bOnlyNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x715cd69980
	Widget* GetRedirectTarget();// 0x69a9fe4 0x715cd54e60

--------------------------------
Class: HuntersImageButton.UserWidget.Widget.Visual.Object // 71a4b3ec00
	delegate OnClicked;//[Offset: 0x230, Size: 0x10] 0x715d7d6b80
	delegate OnPressed;//[Offset: 0x240, Size: 0x10] 0x715d7d6c00
	delegate OnReleased;//[Offset: 0x250, Size: 0x10] 0x715d7d6c80
	delegate OnHovered;//[Offset: 0x260, Size: 0x10] 0x715d7d6d00
	delegate OnUnhovered;//[Offset: 0x270, Size: 0x10] 0x715d7d6d80
	Object* ImageResource;//[Offset: 0x280, Size: 0x8] 0x715d7d6e00
	LinearColor ImageColor;//[Offset: 0x288, Size: 0x10] 0x715d7d6e80
	LinearColor ShadowColor;//[Offset: 0x298, Size: 0x10] 0x715d7d6f00
	Vector2D HitAreaSize;//[Offset: 0x2a8, Size: 0x8] 0x715d7d6f80
	bool bFlipHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x715d7d7000
	HuntersImage* Image;//[Offset: 0x2b8, Size: 0x8] 0x715d7d7080
	Button* Button;//[Offset: 0x2c0, Size: 0x8] 0x715d7d7100
	WidgetAnimation* Pressed;//[Offset: 0x2c8, Size: 0x8] 0x715d7d7180
	WidgetAnimation* PressedFlipped;//[Offset: 0x2d0, Size: 0x8] 0x715d7d7200
	void SetImageResource(Object* ImageResource);// 0x69aaa0c 0x715d7c6980
	void SetImageColor(out const LinearColor InColor);// 0x69aaab0 0x715d7c6a60
	void OnButtonUnhovered();// 0x69aa9a8 0x715d7c6b40
	void OnButtonReleased();// 0x69aa9d0 0x715d7c6c20
	void OnButtonPressed();// 0x69aa9e4 0x715d7c6d00
	void OnButtonHovered();// 0x69aa9bc 0x715d7c6de0
	void OnButtonClicked();// 0x69aa9f8 0x715d7c6ec0
	void ButtonEvent__DelegateSignature();// 0x45c6aa0 0x715d7c6fa0

--------------------------------
Class: HuntersListView.ListView.ListViewBase.Widget.Visual.Object // 71a4b3e980
	bool bCanOverscrollWhenWholeListVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1] 0x715cd6b500

--------------------------------
Class: HuntersSafeZone.ContentWidget.PanelWidget.Widget.Visual.Object // 71a4b3e480
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x715cd6ab00
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x715cd6ab80
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x715cd6ac00
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x715cd6ac80
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x69ab428 0x715cd54920

--------------------------------
Class: HuntersStandardToggleButton.HuntersStandardButtonBase.HighlightableSDUserWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3df80
	delegate OnToggled;//[Offset: 0x368, Size: 0x10] 0x715cd6bc80
	bool bAutoToggleOnClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1] 0x715cd6bd00
	bool bToggled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1] 0x715cd6bd80
	Object* ImageResource;//[Offset: 0x380, Size: 0x8] 0x715cd6be00
	bool bShowText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1] 0x715cd6be80
	FText Text;//[Offset: 0x390, Size: 0x18] 0x715cd6bf00
	FName ToggledPrimaryColor;//[Offset: 0x3a8, Size: 0x8] 0x715cd6bf80
	FName ToggledSecondaryColor;//[Offset: 0x3b0, Size: 0x8] 0x715cd6c000
	TextBlock* TextBlock;//[Offset: 0x3b8, Size: 0x8] 0x715cd6c080
	HuntersImage* LeftImage;//[Offset: 0x3c0, Size: 0x8] 0x715cd6c100
	HuntersImage* MainImage;//[Offset: 0x3c8, Size: 0x8] 0x715cd6c180
	HuntersImage* RightImage;//[Offset: 0x3d0, Size: 0x8] 0x715cd6c200
	void SetToggled(bool bToggled);// 0x69ad254 0x715cd54220
	void SetTextVisibility(bool bPrimaryTextVisible, bool bSecondaryTextVisible);// 0x69ad300 0x715cd54300
	void SetImage(Object* InImageResource);// 0x69acf00 0x715cd543e0
	void SetColors(FName InPrimaryColor, FName InSecondaryColor, FName InDisabledPrimaryColor, FName InDisabledSecondaryColor, FName InToggledPrimaryColor, FName InToggledSecondaryColor, FName InStrokeShadowColor, FName InDisabledStrokeShadowColor);// 0x69acfa4 0x715cd544c0
	void OnButtonToggled();// 0x69aceec 0x715cd545a0
	bool GetToggled();// 0x69ad21c 0x715cd54680

--------------------------------
Class: HuntersThreeRingSpinner.Widget.Visual.Object // 71a4b3da80
	SlateBrush InnerRingBrush;//[Offset: 0x108, Size: 0x88] 0x715cd6ba80
	SlateBrush MiddleRingBrush;//[Offset: 0x190, Size: 0x88] 0x715cd6bb00
	SlateBrush OuterRingBrush;//[Offset: 0x218, Size: 0x88] 0x715cd6bb80
	SlateColor RingTint;//[Offset: 0x2a0, Size: 0x28] 0x715cd6bc00

--------------------------------
Class: HuntersToggleButton.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3d800
	delegate OnToggleStateChanged;//[Offset: 0x258, Size: 0x10] 0x715cd6b680
	Button* ClickArea;//[Offset: 0x268, Size: 0x8] 0x715cd6b700
	bool bIsToggled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x715cd6b780
	void UpdateDisplayState(const bool bInIsToggled, const bool bSkipAnimation);// 0x45c6aa0 0x715cd53ea0
	void SetIsToggled(const bool bInIsToggled, const bool bSkipAnimation);// 0x69b0570 0x715cd53f80
	void OnClicked();// 0x69b0540 0x715cd54060
	bool IsToggled();// 0x69b0554 0x715cd54140

--------------------------------
Class: HuntersUIConfig.SDUIConfigMain.SDUIConfig.DataAsset.Object // 71a4b3d580
	SlateBrush DefaultLoadingSpinner;//[Offset: 0x180, Size: 0x88] 0x715cd6b600

--------------------------------
Class: HuntersUIDataAssetConfig.DeveloperSettings.Object // 71a4b3d300
	<enum,HuntersUIDataAssetManager*> UIDataAssetManagers;//[Offset: 0x38, Size: 0x50] 0x715cd33040

--------------------------------
Class: HuntersUIHelpers.BlueprintFunctionLibrary.Object // 71a4b3ce00
	static void Widget_BindRenderScale(out RenderScaleBindable RenderScaleBindable, Widget* Widget);// 0x69b1c88 0x715cd56520
	static bool TryTestFeatureFlag(const Object* WorldContextObject, FString Name, out bool OutValue);// 0x69b2590 0x715cd56600
	static bool TestFeatureFlag(const Object* WorldContextObject, FString Name);// 0x69b26e0 0x715cd566e0
	static void HideVirtualKeyboard(const int UserIndex);// 0x69b24fc 0x715cd567c0
	static int GetWidgetInScrollBoxCenter(ScrollBox* ScrollBox, out const Widget*[] Children, float PaddingBetweenChildren);// 0x69b15f4 0x715cd568a0
	static FText GetTimeSinceText(const int64 FromSeconds, out const DateTime NowTime);// 0x69b2a24 0x715cd56980
	static FText GetStatFormattedTime(float InSeconds);// 0x69b2914 0x715cd56a60
	static FText GetRemainingTimeText(out const DateTime InEndTime);// 0x69b2b84 0x715cd56b40
	static FText GetRemainingShopTimeText(out const DateTime InExpiryTime);// 0x69b2ca0 0x715cd56c20
	static Widget* GetParentUserWidget(Widget* InWidget, class Widget Class);// 0x69b2418 0x715cd56d00
	static FText GetNativeSourceTextFromText(out const FText Text);// 0x69b1324 0x715cd56de0
	static FString GetNativeSourceStringFromText(out const FText Text);// 0x69b14a0 0x715cd56ec0
	static Box2D GetLetterboxed(out const Box2D SrcRect, out const Box2D TargetRect);// 0x69b1b7c 0x715cd56fa0
	static Widget* GetGamepadContextParent(Widget* InWidget);// 0x69b2374 0x715cd57080
	static FText CreateMatchTimerStringPrecise(float InSeconds);// 0x69b2dbc 0x715cd57160
	static FText CreateMatchTimerString(int InSeconds, bool ShowLeading0OnSeconds, bool Show0Minutes);// 0x69b2ecc 0x715cd57240
	static bool CanLocalPlayerEnterSinglePlayer(Object* WorldContextObject);// 0x69b286c 0x715cd57320
	static void CalculateFramedImageGeometry(const Vector2D TextureSize, const Margin Frame, const Margin Margin, const Vector2D GeometryPosition, const Vector2D GeometrySize, const byte HorizontalAlignment, const bool bHorizontallyCenterIfLargerThanTexture, const byte VerticalAlignment, const bool bVerticallyCenterIfLargerThanTexture, out Vector4 SizeAndOffsetGeometry, out Vector4 ScaleAndOffsetUVs, out Vector4 FrameSizeAndOffsetGeometry, out Vector4 GradientSizeAndOffsetGeometryUVs);// 0x69b173c 0x715cd53a40
	static void Brush_BindStyledBorderForeground(out StyledBorderForegroundBindable StyledBorderForegroundBindable, StyledBorderImage* StyledBorderImage);// 0x69b20b4 0x715cd53b20
	static void Brush_BindMarginStyledBorder(out MarginBindable MarginBindable, StyledBorderImage* StyledBorderImage);// 0x69b1df4 0x715cd53c00
	static void Brush_BindMargin(out MarginBindable MarginBindable, FramedImage* FramedImage);// 0x69b1f54 0x715cd53ce0
	static void BackButtonPressed(const Object* WorldContextObject);// 0x69b27d8 0x715cd53dc0

--------------------------------
Class: RenderScaleBindable.Bindable // 715cec6640
	Vector2D Scale;//[Offset: 0x70, Size: 0x8] 0x715cef2e80

--------------------------------
Class: HuntersButton.Interface.Object // 71a4b3cb80

--------------------------------
Class: HuntersComboBoxSelector.Interface.Object // 71a4b3c900
	void BP_OnComboBoxOpening();// 0x45c6aa0 0x715cd561a0
	void BP_OnComboBoxFocusReceived();// 0x45c6aa0 0x715cd56280
	void BP_OnComboBoxFocusLost();// 0x45c6aa0 0x715cd56360
	void BP_OnComboBoxClosing(bool bHasFocus);// 0x45c6aa0 0x715cd56440

--------------------------------
Class: SettingsItem.Interface.Object // 71a4b3c680

--------------------------------
Class: LegendBarScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3c400
	ControllerLegendBarWidget* ControllerLegendBar;//[Offset: 0x2e0, Size: 0x8] 0x715cd6f600
	float Height;//[Offset: 0x2e8, Size: 0x4] 0x715cd6f680
	void OnLegendBarLayerUpdated();// 0x69b4464 0x715cd55fe0
	void OnLegendBarDataUpdated();// 0x69b4478 0x715cd560c0

--------------------------------
Class: LicensingPopupScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3c180
	LicensingPopupViewModel* LicensingPopupViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715cd6f580

--------------------------------
Class: LicensingPopupViewModel.SDViewModel.Object // 71a4b3bf00
	void OnCancelButtonPressed();// 0x69b4a28 0x715cd55f00

--------------------------------
Class: PlatformWidgetSwitcher.UserWidget.Widget.Visual.Object // 71a4b3b500
	WidgetSwitcher* PlatformSwitcher;//[Offset: 0x230, Size: 0x8] 0x715d7da280
	byte VisiblePlatformSlots;//[Offset: 0x238, Size: 0x1] 0x715d7da300
	<enum,enum> UIMap;//[Offset: 0x240, Size: 0x50] 0x714906de40
	enum CurrentPlatform;//[Offset: 0x290, Size: 0x1] 0x7148cda6a0
	delegate PlatformChangeEvent;//[Offset: 0x298, Size: 0x10] 0x715d7da500
	void UpdateView();// 0x69b59e8 0x715d7c8120
	void OnPlatformChangeEvent__DelegateSignature();// 0x45c6aa0 0x715d7c8200

--------------------------------
Class: PleaseWaitScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b3ad80

--------------------------------
Class: SettingsStaticDetailsData.SettingsBaseDetailsData.Object // 71a4b3fd80
	FText BodyText;//[Offset: 0x48, Size: 0x18] 0x715cd6fd80
	class BaseSettingsDetailPanel* DynamicDetailPanelType;//[Offset: 0x60, Size: 0x8] 0x715cc8e480
	class BaseSettingsDetailPanel GetDynamicDetailPanelType();// 0x69b7300 0x715cd59000
	FText GetBodyText();// 0x69b7334 0x715cd55720

--------------------------------
Class: SettingsAbilityDetailsData.SettingsStaticDetailsData.SettingsBaseDetailsData.Object // 71a4b3fb00
	FName GamepadImageTag;//[Offset: 0x68, Size: 0x8] 0x715cd6fb80
	FText GamepadButtonDescription;//[Offset: 0x70, Size: 0x18] 0x715cd6fc00
	FName GetGamepadImageTag();// 0x69b7728 0x715cd58e40
	FText GetGamepadButtonDescription();// 0x69b7744 0x715cd58f20

--------------------------------
Class: SettingsCharactersDetailsData.SettingsBaseDetailsData.Object // 71a4b3f880
	int DetailsAdditionalDataShowOptions;//[Offset: 0x48, Size: 0x4] 0x715cd6fb00

--------------------------------
Class: SettingsControllersOptionsDetailsData.SettingsBaseDetailsData.Object // 71a4b65100
	FText BodyText;//[Offset: 0x48, Size: 0x18] 0x715cd6fa00
	FText GetBodyText();// 0x69b7d20 0x715cd58d60

--------------------------------
Class: LanguageSettingsDetailsData.SettingsBaseDetailsData.Object // 71a4b64e80

--------------------------------
Class: StandardLargePopupScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b63300
	TextBlock* Title;//[Offset: 0x2e0, Size: 0x8] 0x715cd94200
	TextBlock* AccentTitle;//[Offset: 0x2e8, Size: 0x8] 0x715cd92180
	GridPanel* ContentGridPanel;//[Offset: 0x2f0, Size: 0x8] 0x715cd92200
	StandardLargePopupViewModel* StandardLargePopupViewModel;//[Offset: 0x2f8, Size: 0x8] 0x715cd92280
	float ContentAnimationTime;//[Offset: 0x300, Size: 0x4] 0x715cd92300
	SizeBox*[] SizeBoxes;//[Offset: 0x308, Size: 0x10] 0x715cc8fc40
	SDUserWidget*[] Widgets;//[Offset: 0x318, Size: 0x10] 0x715cc8fce0
	void StartContentAnimations();// 0x69c0ac4 0x715cd5a420
	void ClosePopup();// 0x69c0ad8 0x715cd5a500

--------------------------------
Class: StandardLargePopupViewModel.SDViewModel.Object // 71a4b63080
	TextBindable Title;//[Offset: 0x48, Size: 0x98] 0x715cd94000
	TextBindable AccentText;//[Offset: 0xe0, Size: 0x98] 0x715cd94080
	TextBindable Subtitle;//[Offset: 0x178, Size: 0x98] 0x715cd94100
	BoolBindable SubtitleVisible;//[Offset: 0x210, Size: 0x70] 0x715cd94180
	void OnExitPressed();// 0x69c0fac 0x715cd5a340

--------------------------------
Class: StandardPopupScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b62e00
	TextBlock* Title;//[Offset: 0x2e0, Size: 0x8] 0x715cd93d80
	TextBlock* AccentTitle;//[Offset: 0x2e8, Size: 0x8] 0x715cd93e00
	HorizontalBox* ButtonHolder;//[Offset: 0x2f0, Size: 0x8] 0x715cd93e80
	TextBlock* AttentionText;//[Offset: 0x2f8, Size: 0x8] 0x715cd93f00
	StandardPopupViewModel* StandardPopupViewModel;//[Offset: 0x300, Size: 0x8] 0x715cd93f80

--------------------------------
Class: StandardPopupViewModel.SDViewModel.Object // 71a4b62b80
	TextBindable Title;//[Offset: 0x48, Size: 0x98] 0x715cd93600
	TextBindable Description;//[Offset: 0xe0, Size: 0x98] 0x715cd93680
	TextBindable AccentText;//[Offset: 0x178, Size: 0x98] 0x715cd93700
	TextBindable SubmitButtonText;//[Offset: 0x210, Size: 0x98] 0x715cd93780
	TextBindable CancelButtonText;//[Offset: 0x2a8, Size: 0x98] 0x715cd93800
	TextBindable AttentionText;//[Offset: 0x340, Size: 0x98] 0x715cd93880
	TextBindable PurchaseButtonText;//[Offset: 0x3d8, Size: 0x98] 0x715cd93900
	bool bTappingOutsideCancels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1] 0x715cd93980
	VisibilityBindable AttentionTextVisible;//[Offset: 0x478, Size: 0x70] 0x715cd93a00
	VisibilityBindable CancelButtonVisible;//[Offset: 0x4e8, Size: 0x70] 0x715cd93a80
	VisibilityBindable OkButtonVisible;//[Offset: 0x558, Size: 0x70] 0x715cd93b00
	VisibilityBindable AcceptButtonVisible;//[Offset: 0x5c8, Size: 0x70] 0x715cd93b80
	VisibilityBindable ErrorIconVisible;//[Offset: 0x638, Size: 0x70] 0x715cd93c00
	VisibilityBindable PurchaseButtonVisible;//[Offset: 0x6a8, Size: 0x70] 0x715cd93c80
	enum AcceptButtonShortcut;//[Offset: 0x718, Size: 0x1] 0x715cc8fba0
	void OnOkButtonPressed();// 0x69c14e0 0x715cd5a180
	void OnCancelButtonPressed();// 0x69c14cc 0x715cd5a260

--------------------------------
Class: StandardTextDisplayPopupScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b62900
	StandardTextDisplayPopupViewModel* PopupViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715cd93580

--------------------------------
Class: StandardTextDisplayPopupViewModel.BAInjectableViewModel.SDViewModel.Object // 71a4b62680
	TextBindable Title;//[Offset: 0x50, Size: 0x98] 0x715cd93400
	TextBindable TitleAurebesh;//[Offset: 0xe8, Size: 0x98] 0x715cd93480
	TextBindable Body;//[Offset: 0x180, Size: 0x98] 0x715cd93500
	void OnScreenClosed();// 0x69c1a4c 0x715cd5a0a0

--------------------------------
Class: StandardTextInputPopupScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b62400
	EditableTextBox* InputText;//[Offset: 0x2e0, Size: 0x8] 0x715cd95200
	StandardTextInputPopupViewModel* StandardTextInputPopupScreenVM;//[Offset: 0x2e8, Size: 0x8] 0x715cd95280
	ControllerShortcutWidget* BackShortcut;//[Offset: 0x2f0, Size: 0x8] 0x715cd93200
	ControllerShortcutWidget* InputTextShortcut;//[Offset: 0x2f8, Size: 0x8] 0x715cd93280
	HuntersStandardButton* AcceptButton;//[Offset: 0x300, Size: 0x8] 0x715cd93300
	void ShowErrorStatus();// 0x69c1e74 0x715cd59c40
	void ResetErrorStatus();// 0x45c6aa0 0x715cd59d20
	void OnInputTextShortcutActivated();// 0x69c1d50 0x715cd59e00
	void OnInputTextChanged(out const FText newText);// 0x69c1d64 0x715cd59ee0
	void HideVirtualKeyboard();// 0x69c1d3c 0x715cd59fc0

--------------------------------
Class: StandardTextInputPopupViewModel.SDViewModel.Object // 71a4b62180
	TextBindable Title;//[Offset: 0x48, Size: 0x98] 0x715cd94d80
	TextBindable AccentText;//[Offset: 0xe0, Size: 0x98] 0x715cd94e00
	TextBindable StatusText;//[Offset: 0x178, Size: 0x98] 0x715cd94e80
	TextBindable SubmitButtonText;//[Offset: 0x210, Size: 0x98] 0x715cd94f00
	TextBindable AdditionalInfoText;//[Offset: 0x2a8, Size: 0x98] 0x715cd94f80
	BoolBindable ShowAdditionalInfoText;//[Offset: 0x340, Size: 0x70] 0x715cd95000
	VisibilityBindable CancelAcceptButtonsVisible;//[Offset: 0x3b0, Size: 0x70] 0x715cd95080
	VisibilityBindable SubmitButtonVisible;//[Offset: 0x420, Size: 0x70] 0x715cd95100
	void SubmitButton(FString Text);// 0x69c2434 0x715cd59a80
	void CancelButton();// 0x69c2420 0x715cd59b60

--------------------------------
Class: SubtitleWidget.SDListenerWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b61c80
	void OnSubtitleReceived(out const FText Subtitle, float Duration);// 0x45c6aa0 0x715cd5c2c0
	void OnSubtitleClear();// 0x45c6aa0 0x715cd5c3a0

--------------------------------
Class: TextDetailPanel.BaseSettingsDetailPanel.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b61a00

--------------------------------
Class: WebBrowserScreen.HuntersBaseScreen.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b60380
	WebBrowserViewModel* WebBrowserViewModel;//[Offset: 0x2e0, Size: 0x8] 0x715cd96600
	WebBrowser* WebBrowser;//[Offset: 0x2e8, Size: 0x8] 0x715cd96680
	void OnUrlChanged(out const FText URL);// 0x69c99c4 0x715cd5b140

--------------------------------
Class: WebBrowserViewModel.SDViewModel.Object // 71a4b60100
	void TriggerBackButtonPressed();// 0x69c9dfc 0x715cd5b060

--------------------------------
Class: WidgetValidationLibrary.BlueprintFunctionLibrary.Object // 71a4b6a380
	static void SetWidgetValidationSettings(const Widget* Widget, out const WidgetValidationSettings ValidationSettings);// 0x69ca23c 0x715cd5e5c0
	static void SetWidgetValidationRequiresVisible(const Widget* Widget, bool bRequiresVisible);// 0x69ca40c 0x715cd5e6a0
	static void SetWidgetValidationRequiresNonDefaultText(const Widget* Widget, bool bRequiresNonDefaultText);// 0x69ca32c 0x715cd5adc0
	static void SetWidgetValidationEnabled(const Widget* Widget, ScriptStruct* ValidationRule, bool bEnabled);// 0x69ca4ec 0x715cd5aea0
	static WidgetValidationSettings GetWidgetValidation(const Widget* Widget);// 0x69ca13c 0x715cd5af80

--------------------------------
Class: WidgetValidationSettings // 715cec9340
	ScriptStruct*[] SuppressedValidationRules;//[Offset: 0x0, Size: 0x10] 0x715ce956a0
	bool bRequiresVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x715cef2d80
	bool bRequiresNonDefaultText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x715cef2e00

--------------------------------
Class: WidgetValidationProjectSettings.DeveloperSettings.Object // 71a4b6a100
	Font*[] IgnoredFonts;//[Offset: 0x38, Size: 0x10] 0x715cc8f920
	Font*[] LocalizationCompatibleFonts;//[Offset: 0x48, Size: 0x10] 0x715cc8f9c0
	Font* AurebeshFont;//[Offset: 0x58, Size: 0x28] 0x715cd97f80
	Font* AurebeshDebugReplacementFont;//[Offset: 0x80, Size: 0x28] 0x715cd98000
	FString UntranslatedTextValidationLanguage;//[Offset: 0xa8, Size: 0x10] 0x715cd98080
	Object*[] DisallowedDuringMatchAssets;//[Offset: 0xb8, Size: 0x10] 0x715cc8fa60

--------------------------------
Class: MapSettingsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object // 71a4b69e80

--------------------------------
Class: MatchmakingSettingsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object // 71a4b69c00
	bool bGetServerMapFromMatchmakerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715cd97b80
	FString SelectedRegion;//[Offset: 0x38, Size: 0x10] 0x715cd97c00
	FString SelectedMatchmakingConfig;//[Offset: 0x48, Size: 0x10] 0x715cd97c80
	UniqueNetIdWrapper SelectedNetId;//[Offset: 0x58, Size: 0x1] 0x715cd97d00
	FString SelectedMap;//[Offset: 0x70, Size: 0x10] 0x715cd97d80
	int[] SelectedClassRoles;//[Offset: 0x80, Size: 0x10] 0x715cc8f880

--------------------------------
Class: HuntersFleetConnectionProjectSettings.DeveloperSettings.Object // 71a4b69980
	enum ConnectionType;//[Offset: 0x38, Size: 0x1] 0x715cc8f7e0
	float DeadlockTimeoutWhenTickingSeconds;//[Offset: 0x3c, Size: 0x4] 0x715cd97580
	float BootStateTimeoutSeconds;//[Offset: 0x40, Size: 0x4] 0x715cd97600
	float LoadingStateTimeoutSeconds;//[Offset: 0x44, Size: 0x4] 0x715cd97680
	float WaitingForMatchDataTimeoutSeconds;//[Offset: 0x48, Size: 0x4] 0x715cd97700
	float WaitingForGameLiftStateTimeoutSeconds;//[Offset: 0x4c, Size: 0x4] 0x715cd97780
	float CharacterSelectStateTimeoutSeconds;//[Offset: 0x50, Size: 0x4] 0x715cd97800
	float VSScreenStateTimeoutSeconds;//[Offset: 0x54, Size: 0x4] 0x715cd97880
	float MatchRunningDefaultStateTimeoutSeconds;//[Offset: 0x58, Size: 0x4] 0x715cd97900
	float ResultsStateTimeoutSeconds;//[Offset: 0x5c, Size: 0x4] 0x715cd97980
	float ReportResultsStateTimeoutSeconds;//[Offset: 0x60, Size: 0x4] 0x715cd97a00
	float ReportAnalyticsStateTimeoutSeconds;//[Offset: 0x64, Size: 0x4] 0x715cd97a80
	float WaitingForDisconnectionsStateTimeoutSeconds;//[Offset: 0x68, Size: 0x4] 0x715cd97b00

--------------------------------
Class: DialogueQueryBlueprintWrapper.Object // 71a4b69700
	Actor* Instigator;//[Offset: 0x28, Size: 0x8] 0x715cd98a80
	void SetSubject(const Actor* InSubject);// 0x69eb4d0 0x715cd5dd00
	void SetString(FName InName, FString Value);// 0x69eb2a0 0x715cd5dde0
	void SetSpeakerIdFilterAnnouncer();// 0x69eb0b8 0x715cd5dec0
	void SetNumber(FName InName, float Value);// 0x69eb3e8 0x715cd5dfa0
	void SetBool(FName InName, bool bValue);// 0x69eb1b0 0x715cd5e080
	void SetActor(FName InName, const Actor* Value);// 0x69eb0cc 0x715cd5e160
	static DialogueQueryBlueprintWrapper* MakeQueryTeam(FName InConcept, const Actor* InInstigator);// 0x69eb658 0x715cd5e240
	static DialogueQueryBlueprintWrapper* MakeQuerySpecific(FName InConcept, const Actor* InInstigator, const Actor* InSpeaker);// 0x69eb820 0x715cd5e320
	static DialogueQueryBlueprintWrapper* MakeQueryAny(FName InConcept, const Actor* InInstigator);// 0x69eb73c 0x715cd5e400
	static DialogueQueryBlueprintWrapper* MakeQueryAll(FName InConcept, const Actor* InInstigator);// 0x69eb574 0x715cd5e4e0

--------------------------------
Class: DialogueBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4b69480
	static void TriggerQuery(DialogueQueryBlueprintWrapper* Query);// 0x69eca68 0x715cd5d360
	static void TriggerDialogueTeam(FName Concept, Actor* Instigator, Actor* Subject);// 0x69ec950 0x715cd5d440
	static void TriggerDialogue(FName Concept, Actor* Instigator, Actor* Speaker, Actor* Subject);// 0x69ecafc 0x715cd5d520
	static void SetGlobalDialogueFactString(Object* WorldContextObject, FName Name, FString Value);// 0x69ec7cc 0x715cd5d600
	static void SetGlobalDialogueFactNumber(Object* WorldContextObject, FName Name, float Value);// 0x69ec6b4 0x715cd5d6e0
	static void SetGlobalDialogueFactBool(Object* WorldContextObject, FName Name, bool bValue);// 0x69ec594 0x715cd5d7c0
	static void SetGlobalDialogueFactActor(Object* WorldContextObject, FName Name, const Actor* Value);// 0x69ec47c 0x715cd5d8a0
	static void SetDialogueFactString(Actor* ForActor, FName Name, FString Value);// 0x69ec2f8 0x715cd5d980
	static void SetDialogueFactNumber(Actor* ForActor, FName Name, float Value);// 0x69ec1e0 0x715cd5da60
	static void SetDialogueFactBool(Actor* ForActor, FName Name, bool bValue);// 0x69ec0c0 0x715cd5db40
	static void SetDialogueFactActor(Actor* ForActor, FName Name, const Actor* Value);// 0x69ebfa8 0x715cd5dc20

--------------------------------
Class: DialogueContextInterface.Interface.Object // 71a4b69200

--------------------------------
Class: DialogueData.BADataAsset.PrimaryDataAsset.DataAsset.Object // 71a4b68f80
	DialogueRule[] Rules;//[Offset: 0x38, Size: 0x10] 0x715cda13c0
	DialogueResponse[] Responses;//[Offset: 0x48, Size: 0x10] 0x715cda1460

--------------------------------
Class: DialogueRule // 715cec9040
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715cef2200
	FName Speaker;//[Offset: 0x8, Size: 0x8] 0x715cef2280
	FName Concept;//[Offset: 0x10, Size: 0x8] 0x715cef2300
	DialogueResponseId[] Responses;//[Offset: 0x18, Size: 0x10] 0x715ce954c0

--------------------------------
Class: DialogueResponse // 715cec91c0
	FName Name;//[Offset: 0x0, Size: 0x8] 0x715cef2480
	FText Line;//[Offset: 0x8, Size: 0x18] 0x715cef2500
	enum AudibilityType;//[Offset: 0x20, Size: 0x1] 0x715ce95560
	FText VariantLine;//[Offset: 0x28, Size: 0x18] 0x715cef2600
	float Cooldown;//[Offset: 0x40, Size: 0x4] 0x715cef2680
	bool bNeverRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x715cef2700
	float PostDelay;//[Offset: 0x48, Size: 0x4] 0x715cef2780
	float AudioFileDuration;//[Offset: 0x4c, Size: 0x4] 0x715cef2800
	bool bMarkAsSpeaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x715cef2880
	bool IsReliable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x715cef2900
	FollowUpTarget FollowUpTarget;//[Offset: 0x54, Size: 0xc] 0x715cef2b00
	FName FollowUpConcept;//[Offset: 0x60, Size: 0x8] 0x715cef2b80
	AkAudioEvent* AudioEventToPlay;//[Offset: 0x68, Size: 0x8] 0x715cef2c00
	AkAudioEvent* VariantAudioEventToPlay;//[Offset: 0x70, Size: 0x8] 0x715cef2c80

--------------------------------
Class: FollowUpTarget // 715cec9100
	enum Type;//[Offset: 0x0, Size: 0x1] 0x715ce95600
	FName SpeakerId;//[Offset: 0x4, Size: 0x8] 0x715cef2a00

--------------------------------
Class: DialogueDatabaseImpl.Object // 71a4b68d00

--------------------------------
Class: DialogueIdInterface.Interface.Object // 71a4b68a80

--------------------------------
Class: DialogueMemoryInterface.Interface.Object // 71a4b68080

--------------------------------
Class: DialogueSettings.DeveloperSettings.Object // 71a4b67e00
	DialogueData* DialogueDataPath;//[Offset: 0x38, Size: 0x28] 0x715cd99980

--------------------------------
Class: DialogueSpeakerInterface.Interface.Object // 71a4b67900

--------------------------------
Class: DialogueDatabase.Interface.Object // 71a4b67680

--------------------------------
Class: HuntersComponentClassifierInterface.Interface.Object // 71a4b66c80
	void GetComponentsRelevantToGameplayEffectApplication(out PrimitiveComponent*[] OutPrimitiveComponents);// 0x6a08870 0x715cd5f900

--------------------------------
Class: HuntersDefaultAimPoint.SceneComponent.ActorComponent.Object // 71a4b66a00

--------------------------------
Class: TargetConsumer.Interface.Object // 71a4b66780
	int GetMaxNumberOfTargets();// 0x6a09c80 0x715cd5f820

--------------------------------
Class: TargetableActorInterface.Interface.Object // 71a4b66500
	GameplayTagContainer TargetingFilterTags();// 0x6a0ad44 0x715cd5f660
	Actor* GetActor();// 0x6a0adcc 0x715cd5f740

--------------------------------
Class: TargetableCollectionInterface.Interface.Object // 71a4b66280
	interface classNone[] GetTargetableObjects();// 0x6a0b5f8 0x715cd5f4a0
	Actor* GetActor();// 0x6a0b6b0 0x715cd5f580

--------------------------------
Class: TargetableCollectionBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4b66000
	static void AddCollection(interface classNone Collection);// 0x6a0be3c 0x715cd5f3c0

--------------------------------
Class: TargetableObject.Object // 71a4b65d80
	ShapeComponent* TargetableComponent;//[Offset: 0x30, Size: 0x8] 0x715cd9c480
	GameplayTagContainer TargetingTags;//[Offset: 0x38, Size: 0x20] 0x715cd9c500
	void SetTargetableComponent(ShapeComponent* NewShape);// 0x6a0c85c 0x715cd5f200
	void AddTargetingTags(out const GameplayTagContainer NewTags);// 0x6a0c78c 0x715cd5f2e0

--------------------------------
Class: TargetCondition_Blueprint.TargetScorerCondition.Object // 71a4b65b00
	bool K2_Evaluate(out const Target Candidate, TargetingComponent* TargetingComponent);// 0x45c6aa0 0x715cd5f120

--------------------------------
Class: TargetCondition_FeetWithinHeightRange.TargetScorerCondition.Object // 71a4b65880
	float MaxHeightAbove;//[Offset: 0x28, Size: 0x4] 0x715cd9c200
	float MaxHeightBelow;//[Offset: 0x2c, Size: 0x4] 0x715cd9c280

--------------------------------
Class: TargetCondition_NotBlockedByObjectLayer.TargetScorerCondition.Object // 71a4b65600
	byte[] ObjectLayersToCheck;//[Offset: 0x28, Size: 0x10] 0x715cda10a0

--------------------------------
Class: TargetCondition_NotBlockedByShield.TargetScorerCondition.Object // 71a4b65380

--------------------------------
Class: TargetCondition_Or.TargetScorerCondition.Object // 71a4b6f600
	class TargetScorerCondition[] SubConditions;//[Offset: 0x28, Size: 0x10] 0x715cda1000

--------------------------------
Class: TargetCondition_SphereTraceBetweenActorsIsClear.TargetScorerCondition.Object // 71a4b6f380
	float Radius;//[Offset: 0x28, Size: 0x4] 0x715cd9c080
	byte CollisionChannel;//[Offset: 0x2c, Size: 0x1] 0x715cd9c100

--------------------------------
Class: TargetCondition_TeamAttitude.TargetScorerCondition.Object // 71a4b6f100
	byte Attitude;//[Offset: 0x28, Size: 0x1] 0x715cd9bf00
	byte ExcludedTraversalTypes;//[Offset: 0x29, Size: 0x1] 0x715cd9bf80
	byte ExcludedAdditionalFlags;//[Offset: 0x2a, Size: 0x1] 0x715cd9c000

--------------------------------
Class: TargetCondition_WeaponNotBlocked.TargetScorerCondition.Object // 71a4b6ee80

--------------------------------
Class: TargetCondition_WithinHeightDifference.TargetScorerCondition.Object // 71a4b6ec00
	float MaxHeightDifference;//[Offset: 0x28, Size: 0x4] 0x715cd9be80

--------------------------------
Class: TargetingBlueprintLibrary.BlueprintFunctionLibrary.Object // 71a4b6e980
	static bool IsValid(out const Target Target);// 0x6a10628 0x715cd5ee80
	static Object* GetTargetObject(out const Target Target);// 0x6a104a8 0x715cd5ef60
	static interface classNone GetTargetableActorInterface(out const Target Target);// 0x6a10564 0x715cd5f040

--------------------------------
Class: TargetingReticleAttachmentInterface.Interface.Object // 71a4b6df80
	FName GetSocketForAttachingTargetingReticle();// 0x6a1260c 0x715cd5ea20

--------------------------------
Class: TargetScorer_Blueprint.TargetScorer.Object // 71a4b6da80
	float K2_CalculateScore(out const Target Candidate, TargetingComponent* ValidatingTargetingComponent);// 0x45c6aa0 0x715cd5e940

--------------------------------
Class: TargetScorer_ClosestToLookDirection.TargetScorer.Object // 71a4b6d800
	CurveTableRowHandle MinDistance;//[Offset: 0x30, Size: 0x10] 0x715cd9cd00
	CurveTableRowHandle MaxDistance;//[Offset: 0x40, Size: 0x10] 0x715cd9cd80
	CurveTableRowHandle NearRadius;//[Offset: 0x50, Size: 0x10] 0x715cd9ce00
	CurveTableRowHandle FarRadius;//[Offset: 0x60, Size: 0x10] 0x715cd9ce80
	CurveTableRowHandle StickinessBonus;//[Offset: 0x70, Size: 0x10] 0x715cd9cf00
	class Actor* ValidActorClass;//[Offset: 0x80, Size: 0x8] 0x715cda09c0
	byte ValidTraversalTypes;//[Offset: 0x88, Size: 0x1] 0x715cd9cf80
	byte ValidAdditionalFlags;//[Offset: 0x89, Size: 0x1] 0x715cd9d000
	bool bShouldCheckForLineOfSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x715cd9d080

--------------------------------
Class: TargetScorer_ClosestToTargetingActor.TargetScorer.Object // 71a4b6d580
	CurveTableRowHandle MinDistance;//[Offset: 0x30, Size: 0x10] 0x715cd9cb00
	CurveTableRowHandle MaxDistance;//[Offset: 0x40, Size: 0x10] 0x715cd9cb80
	CurveTableRowHandle NearRadius;//[Offset: 0x50, Size: 0x10] 0x715cd9cc00
	CurveTableRowHandle FarRadius;//[Offset: 0x60, Size: 0x10] 0x715cd9cc80
	class Actor* ValidActorClass;//[Offset: 0x70, Size: 0x8] 0x715cda0920

--------------------------------
Class: TargetScorer_SimpleDistanceCheck.TargetScorer.Object // 71a4b6d300
	CurveTableRowHandle MinDistance;//[Offset: 0x30, Size: 0x10] 0x715cd9ca00
	CurveTableRowHandle MaxDistance;//[Offset: 0x40, Size: 0x10] 0x715cd9ca80
	class Actor* ValidActorClass;//[Offset: 0x50, Size: 0x8] 0x715cda0880

--------------------------------
Class: TargetScorer_ZTargeting.TargetScorer.Object // 71a4b6d080
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8] 0x715cd9c980
	class TargetScorer_ClosestToLookDirection* LookDirectionScorer;//[Offset: 0x38, Size: 0x8] 0x715cda0740
	class TargetScorer_ClosestToTargetingActor* ClosestTargetScorer;//[Offset: 0x40, Size: 0x8] 0x715cda07e0

--------------------------------
Class: HuntersFeedbackAsset.Object // 71a4b6ce00
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x28, Size: 0x8] 0x715cd9c880
	SwitchHDRumbleAsset* SwitchHDRumbleEffect;//[Offset: 0x30, Size: 0x8] 0x715cd9c900

--------------------------------
Class: HuntersFeedbackCollection.Object // 71a4b6cb80
	<enum,HuntersFeedbackAsset*> OnPlayerHealthChangedEventEffects;//[Offset: 0x28, Size: 0x50] 0x715cd32980
	<enum,HuntersFeedbackAsset*> OnProtectionChangedEventEffects;//[Offset: 0x78, Size: 0x50] 0x715cd32a40
	<enum,HuntersFeedbackAsset*> OnPlayerEventEffects;//[Offset: 0xc8, Size: 0x50] 0x715cd32b00
	<GameplayTag,HuntersFeedbackAsset*> OverrideEffectPerDamageType;//[Offset: 0x118, Size: 0x50] 0x715cd32bc0
	<enum,HuntersFeedbackAsset*> OnPickupEventEffects;//[Offset: 0x168, Size: 0x50] 0x715cd32c80

--------------------------------
Class: HuntersFeedbackGameEvents.Object // 71a4b6c900
	float ConvertDamageToStrengthCoef;//[Offset: 0x28, Size: 0x4] 0x715cd9f700
	bool bIgnoreSelfDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x715cd9f780
	bool bIgnoreSelfHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x715cd9d700
	static void ProcessHuttBallScore(Character* Character);// 0x6a1c50c 0x715cdc1820
	static void ProcessHuttBallPickup(Character* Character);// 0x6a1c5a0 0x715cdc1900
	static void ProcessClamber(Character* Character);// 0x6a1c478 0x715cdc19e0
	void OnProtectionChangedEvent(PlayerController* PlayerController, enum PlayerEvent, float AbsDeltaChange, out const Vector SourceLocation, out const Transform MyCameraTransform, bool IsFromCharacter);// 0x6a1c7a8 0x715cdc1ac0
	void OnPlayerHealthChangedEvent(PlayerController* PlayerController, enum PlayerEvent, float AbsDeltaChange, out const Vector SourceLocation, out const Transform MyCameraTransform, bool bCausedByCritical, bool bWasCausedByPeriodicEffect, out const GameplayTagContainer EffectTags, bool IsFromCharacter);// 0x6a1c9ec 0x715cdc1ba0
	void OnPlayerEvent(PlayerController* PlayerController, enum PlayerEvent);// 0x6a1cd3c 0x715cdc1c80
	void OnPickupEvent(PlayerController* PlayerController, Actor* PickupActor, enum PickupEvent, bool bWasHacked);// 0x6a1c634 0x715cd5e780
	HuntersFeedbackCollection* GetCollectionObject(PlayerController* PlayerController);// 0x6a1ce24 0x715cd5e860

--------------------------------
Class: HuntersFeedbackHelpers.BlueprintFunctionLibrary.Object // 71a4b6c680
	static bool PlayRumbleEffectWithModulation(PlayerController* PlayerController, HuntersFeedbackAsset* InAsset, out const SwitchHDRumbleStereoModulation MulModulation, enum OverrideCategory, int OverridePriority);// 0x6a1e2e8 0x715cdc0e80
	static bool PlayRumbleEffectWithDirection(PlayerController* PlayerController, HuntersFeedbackAsset* InAsset, out const Vector DirectionToSource, enum OverrideCategory, float Strength, int OverridePriority);// 0x6a1e0e8 0x715cdc0f60
	static bool PlayRumbleEffectBP(PlayerController* PlayerController, HuntersFeedbackAsset* InAsset, enum OverrideCategory, float Strength);// 0x6a1e4a8 0x715cdc1040
	static bool IsSwitchHDRumbleEnabled();// 0x6a1de04 0x715cdc1120
	static bool IsCategoryEnabled(enum InCategory);// 0x6a1de3c 0x715cdc1200
	static HuntersFeedbackGameEvents* GetGameEventsObject(const Object* WorldContextObject);// 0x6a1dd2c 0x715cdc12e0
	static FName GetFeedbackCategoryName(const enum InCategory);// 0x6a1e618 0x715cdc13c0
	static HuntersFeedbackCollection* GetCollectionObject();// 0x6a1ddd0 0x715cdc14a0
	static Transform GetCameraTransform(Character* InCharacter);// 0x6a1dee4 0x715cdc1580
	static bool DoPlayFeedbackForPlayerController(Controller* InController);// 0x6a1df98 0x715cdc1660
	static bool DoPlayFeedbackForCharacter(Character* InCharacter);// 0x6a1e040 0x715cdc1740

--------------------------------
Class: HuntersFeedbackSettings.Object // 71a4b6c400
	class HuntersFeedbackCollection* CollectionClass;//[Offset: 0x28, Size: 0x8] 0x715cda2720
	class HuntersFeedbackGameEvents* GameEventsClass;//[Offset: 0x30, Size: 0x8] 0x715cda27c0

--------------------------------
Class: GlobalRumbleCollection_C.HuntersFeedbackCollection.Object // 718554e080

--------------------------------
Class: RumbleGameEventsManager_C.HuntersFeedbackGameEvents.Object // 715c5c2a80
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x30, Size: 0x8] 0x715c997c00
	void OnPlayerHealthChangedEvent(PlayerController* PlayerController, enum PlayerEvent, float AbsDeltaChange, out const Vector SourceLocation, out const Transform MyCameraTransform, bool bCausedByCritical, bool bWasCausedByPeriodicEffect, out const GameplayTagContainer EffectTags, bool IsFromCharacter);// 0x45c6aa0 0x715c030240
	void ExecuteUbergraph_RumbleGameEventsManager(int EntryPoint, PlayerController* K2Node_Event_PlayerController, enum K2Node_Event_PlayerEvent, float K2Node_Event_AbsDeltaChange, const Vector K2Node_Event_SourceLocation, const Transform K2Node_Event_MyCameraTransform, bool K2Node_Event_bCausedByCritical, bool K2Node_Event_bWasCausedByPeriodicEffect, const GameplayTagContainer K2Node_Event_EffectTags, bool K2Node_Event_IsFromCharacter, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_PlayRumbleEffectBP_ReturnValue);// 0x45c6aa0 0x715c030400

--------------------------------
Class: PointerToUberGraphFrame // 715db15380

--------------------------------
Class: AbilityCooldownModMagnitudeCalculation.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object // 71a4b6c180

--------------------------------
Class: BotWeaponSpreadModMagnitudeCalculation.GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object // 71a4b6bf00

--------------------------------
Class: CharacterDraftingConfiguration.DeveloperSettings.Object // 71a4b6bc80
	float MinimumTimeBeforeCharacterSelect;//[Offset: 0x38, Size: 0x4] 0x715cd9f980
	float TimeOnVersusScreen;//[Offset: 0x3c, Size: 0x4] 0x715cd9fa00
	float TimeOnCasualFirstCharacterSelectionScreen;//[Offset: 0x40, Size: 0x4] 0x715cd9fa80
	float TimeOnCharacterSelectionScreen;//[Offset: 0x44, Size: 0x4] 0x715cd9fb00
	float BotMinTimeOnCharacterSelectionScreen;//[Offset: 0x48, Size: 0x4] 0x715cd9fb80
	float BotMaxTimeOnCharacterSelectionScreen;//[Offset: 0x4c, Size: 0x4] 0x715cd9fc00
	float WaitingScreenDelayBeforeCharacterSelectionScreen;//[Offset: 0x50, Size: 0x4] 0x715cd9fc80
	float WaitingScreenTimeout;//[Offset: 0x54, Size: 0x4] 0x715cd9fd00
	float TimeWaitingForAllPlayersOnCharacterSelectionScreen;//[Offset: 0x58, Size: 0x4] 0x715cd9fd80
	float VersusScreenCharacterSpawnBufferSeconds;//[Offset: 0x5c, Size: 0x4] 0x715cd9fe00
	bool bFilterUnownedEntitlements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x715cd9fe80
	bool bSkipCharacterDrafting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x715cd9ff00

--------------------------------
Class: HuntersPlayerStateBadgeRule.HuntersBadgeRule.Object // 71a4b6b000
	HuntersPlayerState* PlayerState;//[Offset: 0x58, Size: 0x8] 0x715cdd0c80
	void Activate(HuntersPlayerState* PlayerState);// 0x6a7b580 0x715cdc0780

--------------------------------
Class: HuntersGameStateBadgeRule.HuntersBadgeRule.Object // 71a4b6ad80
	HuntersGameState* GameState;//[Offset: 0x58, Size: 0x8] 0x715cdd0b80
	void Activate(HuntersGameState* GameState);// 0x6a7b95c 0x715cdc06a0

--------------------------------
Class: HuntersBotConfiguration.DeveloperSettings.Object // 71a4b6a880
	GameplayTag[] SupportedCharacters;//[Offset: 0x38, Size: 0x10] 0x715cda2220
	DataTable* NameDataTable;//[Offset: 0x48, Size: 0x28] 0x715cdd0a80

--------------------------------
Class: HuntersClassMakeupRule.HuntersRule.BARule.Object // 71a4b6a600
	<HuntersPlayerState*,GameplayTag> PlayerPoolMap;//[Offset: 0x88, Size: 0x50] 0x715cd328c0
	HuntersGameState* HuntersGameState;//[Offset: 0xd8, Size: 0x8] 0x715cdd0800
	HuntersGameMode* HuntersGameMode;//[Offset: 0xe0, Size: 0x8] 0x715cdd0880
	HuntersPlayerState*[] PlayersWaitingList;//[Offset: 0xe8, Size: 0x10] 0x715cda2180
	HuntersPlayerState* HumanPlayerState;//[Offset: 0xf8, Size: 0x8] 0x715cdd0980

--------------------------------
Class: HuntersCriticalHealerBadgeRule.HuntersPlayerStateBadgeRule.HuntersBadgeRule.Object // 71a4b6fb00
	CriticalHealerBadgeTriggerTier[] TriggerTiers;//[Offset: 0x60, Size: 0x10] 0x715cda20e0

--------------------------------
Class: CriticalHealerBadgeTriggerTier // 715cec8740
	float TimeFrameInSeconds;//[Offset: 0x0, Size: 0x4] 0x715cef3280
	float TriggerThreshold;//[Offset: 0x4, Size: 0x4] 0x715cef3300
	GameplayTag BadgeId;//[Offset: 0x8, Size: 0x8] 0x715cef3380

--------------------------------
Class: HuntersEliminationsInterface.Interface.Object // 71a4b6f880
	int GetEliminations();// 0x6a7d35c 0x715cdc05c0

--------------------------------
Class: HuntersFirstPlayerToReachStatBadgeRule.HuntersGameStateBadgeRule.HuntersBadgeRule.Object // 71a4b85100
	OncePerMatchStatCheckEntry[] StatChecks;//[Offset: 0x60, Size: 0x10] 0x715cda2040

--------------------------------
Class: OncePerMatchStatCheckEntry // 715cec8500
	GameplayTag Statistic;//[Offset: 0x0, Size: 0x8] 0x715cef4e80
	enum Operator;//[Offset: 0x8, Size: 0x1] 0x715ce975e0
	float Value;//[Offset: 0xc, Size: 0x4] 0x715cef4f80
	GameplayTag BadgeId;//[Offset: 0x10, Size: 0x8] 0x715cef5000

--------------------------------
Class: HuntersGameModeVariantSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object // 71a4b84980
	<FString,HuntersGameModeVariantData*> NameToVariant;//[Offset: 0x30, Size: 0x50] 0x715cd32740

--------------------------------
Class: HuntersGoalsInterface.Interface.Object // 71a4b84200
	int GetGoals();// 0x6a858ac 0x715cdc5640

--------------------------------
Class: HuntersLastSquadAliveRule.HuntersRule.BARule.Object // 71a4b83f80
	delegate OneSquadLeftDelegate;//[Offset: 0x38, Size: 0x10] 0x715cdd4280
	void OnPlayerDied(out const EliminationData EliminationData);// 0x6a85d80 0x715cdc5560

--------------------------------
Class: HuntersMatchAlertFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4b83d00
	static void SendPlayerNotification(Object* Target, enum InType, CustomNotificationData* InData, float InDuration, byte InTeamAttitude);// 0x6a8653c 0x715cdc51e0
	static void SendGenericMatchAlert(Object* Target, FText InFormat, enum InPrimaryType, enum InDataType, FName InStyleName, CustomNotificationData* InData, float InDuration, byte InTeamAttitude);// 0x6a861e8 0x715cdc52c0
	static void SendGameEvent(Object* Target, enum InType, CustomNotificationData* InData, float InDuration, byte InTeamAttitude);// 0x6a866e0 0x715cdc53a0
	static void DismissMatchAlert(Object* Target);// 0x6a86154 0x715cdc5480

--------------------------------
Class: HuntersMatchAlertProjectSettings.DeveloperSettings.Object // 71a4b83a80
	int MaxPlayerNotificationsOnScreen;//[Offset: 0x38, Size: 0x4] 0x715cdd5480
	float DefaultTimedNotificationDuration;//[Offset: 0x3c, Size: 0x4] 0x715cdd5500
	<int,float> MaxTimeUntilNextMultikil;//[Offset: 0x40, Size: 0x50] 0x715cd32500
	float DefaultTimeBetweenMultikill;//[Offset: 0x90, Size: 0x4] 0x715cdd5680
	enum MultiDefeatDisplayMode;//[Offset: 0x94, Size: 0x4] 0x715cda3260
	static float GetMultiKillTime(int CurrentAmtKills);// 0x6a86fb0 0x715cdc4e60
	static enum GetMultiDefeatDisplayMode();// 0x6a86e54 0x715cdc4f40
	static int GetMaxPlayerNotificationsOnScreen();// 0x6a871b0 0x715cdc5020
	static float GetDefaultTimedNotificationDuration();// 0x6a87054 0x715cdc5100

--------------------------------
Class: MatchEndDisplayData.DataAsset.Object // 71a4b83580
	<enum,MatchEndReasonDisplay> EndReasonDisplayMap;//[Offset: 0x30, Size: 0x50] 0x715cd32440
	FText GetEndReasonText(enum EndReason, bool bIsWinner);// 0x6a887c4 0x715cdc4680

--------------------------------
Class: MatchEndReasonDisplay // 715cec7fc0
	FText WinReason;//[Offset: 0x0, Size: 0x18] 0x715cef4a80
	FText LoseReason;//[Offset: 0x18, Size: 0x18] 0x715cef4b00

--------------------------------
Class: SectorChangedData.CustomNotificationData.Object // 71a4b82e00
	FName NewBiome;//[Offset: 0x28, Size: 0x8] 0x715cdd6e00
	FName NewSector;//[Offset: 0x30, Size: 0x8] 0x715cdd6e80

--------------------------------
Class: CustomNotificationData_Int.CustomNotificationData.Object // 71a4b82b80
	int IntData;//[Offset: 0x28, Size: 0x4] 0x715cdd6d80

--------------------------------
Class: CustomNotificationData_Name.CustomNotificationData.Object // 71a4b82680
	FName NameData;//[Offset: 0x28, Size: 0x8] 0x715cdd6c80

--------------------------------
Class: CustomNotificationData_HuttballScored.CustomNotificationData.Object // 71a4b82180
	FString PlayerName;//[Offset: 0x28, Size: 0x10] 0x715cdd6a00
	FString TeamName;//[Offset: 0x38, Size: 0x10] 0x715cdd6a80
	bool bOwnGoal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x715cdd6b00

--------------------------------
Class: HuntersMatchTimerExtensionRule.HuntersRule.BARule.Object // 71a4b81f00
	void AddTime(float TimeToAdd);// 0x6a8a920 0x715cdc43e0

--------------------------------
Class: HuntersMatchTimerInterface.Interface.Object // 71a4b81c80
	void SetTimerPaused(bool NewVal);// 0x45c6aa0 0x715cdc3f80
	void SetRemainingTime(float NewVal);// 0x6a8ac5c 0x715cdc4060
	bool GetTimerPaused();// 0x45c6aa0 0x715cdc4140
	float GetRemainingTime();// 0x6a8ad08 0x715cdc4220
	float GetCriticalTimeThreshold();// 0x6a8ac20 0x715cdc4300

--------------------------------
Class: HuntersMatchTimerRule.HuntersRule.BARule.Object // 71a4b81a00
	delegate OnTimerEnd;//[Offset: 0x38, Size: 0x10] 0x715cdd6500
	float MaxTime;//[Offset: 0x48, Size: 0x4] 0x715cdd6580
	float LowTimerRatio;//[Offset: 0x4c, Size: 0x4] 0x715cdd6600
	void StartTimer();// 0x6a8b694 0x715cdc3ce0
	void SetTimerPauseState(bool bShouldPause);// 0x6a8b6bc 0x715cdc3dc0
	void ResetTimer();// 0x6a8b6a8 0x715cdc3ea0

--------------------------------
Class: HuntersNumKillsReachedRule.HuntersRule.BARule.Object // 71a4b81780
	delegate OnNumKillsReached;//[Offset: 0x38, Size: 0x10] 0x715cdd8200
	int KillsRequired;//[Offset: 0x48, Size: 0x4] 0x715cdd8280
	void UnSubscribeFromEvents();// 0x6a8ba84 0x715cdc7240
	void OnPlayerKillCountChanged(HuntersPlayerState* HuntersPlayerState, int OldVal);// 0x45c6aa0 0x715cdc7320
	int GetKillsRequired();// 0x6a8ba98 0x715cdc3a40
	<HuntersSquadState*,int> GetKillsForAllSquads();// 0x6a8bad0 0x715cdc3b20
	HuntersGameState* GetGameState();// 0x6a8bab4 0x715cdc3c00

--------------------------------
Class: HuntersPlayerAbilityChargeCooldownModifier.HuntersAbilityChargeCooldownModifier.Object // 71a4b81500

--------------------------------
Class: HuntersPlayerStatsExpressionsBadgeRule.HuntersPlayerStateBadgeRule.HuntersBadgeRule.Object // 71a4b80880
	StatCheckEntry[] StatChecks;//[Offset: 0x60, Size: 0x10] 0x715cda29a0

--------------------------------
Class: StatCheckEntry // 715cecacc0
	GameplayTag Statistic;//[Offset: 0x0, Size: 0x8] 0x715cef4300
	enum Operator;//[Offset: 0x8, Size: 0x1] 0x715ce97220
	float Value;//[Offset: 0xc, Size: 0x4] 0x715cef4400
	GameplayTag BadgeId;//[Offset: 0x10, Size: 0x8] 0x715cef4480
	enum Repeatability;//[Offset: 0x18, Size: 0x1] 0x715ce972c0

--------------------------------
Class: HuntersRandomHunterRule.HuntersRule.BARule.Object // 71a4b80600
	HuntersPlayerProfile* HuntersPlayerProfile;//[Offset: 0x38, Size: 0x8] 0x715cddbe80
	int PoolSize;//[Offset: 0x40, Size: 0x4] 0x715cddbf00
	bool bChangeHunterOnElimination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x715cddbf80
	void OnPlayerEliminated(out const EliminationData EliminationData);// 0x6a96818 0x715cdc9380

--------------------------------
Class: HuntersRespawnRuleset.BARuleset.Object // 71a4b80380
	void OnOvertimeStateChanged(const bool bOvertimeStarted);// 0x45c6aa0 0x715cdc92a0

--------------------------------
Class: HuntersSquadAllDownedRule.HuntersRule.BARule.Object // 71a4b80100

--------------------------------
Class: HuntersSquadConfiguration.DeveloperSettings.Object // 71a4b8a380
	FText DefaultSquadName;//[Offset: 0x38, Size: 0x18] 0x715cddb880
	FString ExternalSourceParameterName;//[Offset: 0x50, Size: 0x10] 0x715cddb900
	FString[] SquadNameKeys;//[Offset: 0x60, Size: 0x10] 0x715cda5100
	SoftObjectPath[] SquadLogos;//[Offset: 0x70, Size: 0x10] 0x715cda51a0
	SoftObjectPath[] SquadExternalSourceAudioEvents;//[Offset: 0x80, Size: 0x10] 0x715cda5240
	static FText GetSquadName(const HuntersSquadState* InSquad);// 0x6a974dc 0x715cdcc9c0
	static Texture2D* GetSquadLogo(const HuntersSquadState* InSquad);// 0x6a97438 0x715cdc90e0
	static AkAudioEvent* GetSquadAnnouncerEvent(const HuntersSquadState* InSquad);// 0x6a97394 0x715cdc91c0

--------------------------------
Class: HuntersTargetScoreInterface.Interface.Object // 71a4b89e80
	int GetTargetScore();// 0x6a984f4 0x715cdcc020

--------------------------------
Class: HuntersTeamExclusiveVolume.BlockingVolume.Volume.Brush.Actor.Object // 71a4b89c00
	int TeamID;//[Offset: 0x260, Size: 0x4] 0x715cddd100
	void ChangeTeam(int NewTeam);// 0x6a9897c 0x715cdcbf40

--------------------------------
Class: HuntersTelemetryTagsConfiguration.DeveloperSettings.Object // 71a4b89980
	GameplayTag IgnoreHealingTelemetry;//[Offset: 0x38, Size: 0x8] 0x715cddce80
	GameplayTag IgnoreDamageTelemetry;//[Offset: 0x40, Size: 0x8] 0x715cddcf00
	GameplayTag PickupHealingTelemetry;//[Offset: 0x48, Size: 0x8] 0x715cddcf80
	GameplayTag SpawnRoomHealingTelemetry;//[Offset: 0x50, Size: 0x8] 0x715cddd000
	GameplayTag GameModeHealingTelemetry;//[Offset: 0x58, Size: 0x8] 0x715cddd080

--------------------------------
Class: HuntersTextureWarmingCamera.CameraActor.Actor.Object // 71a4b89700
	int TeamID;//[Offset: 0x8a0, Size: 0x4] 0x715cddce00

--------------------------------
Class: HuntersTimedPlayerStatsExpressionsBadgeRule.HuntersPlayerStateBadgeRule.HuntersBadgeRule.Object // 71a4b89480
	TimedStatCheckEntry[] StatChecks;//[Offset: 0x60, Size: 0x10] 0x715cda4e80

--------------------------------
Class: TimedStatCheckEntry // 715cecaa80
	GameplayTag Statistic;//[Offset: 0x0, Size: 0x8] 0x715cef5e80
	float TimeFrameInSeconds;//[Offset: 0x8, Size: 0x4] 0x715cef5f00
	BadgeTriggerTier[] TriggerTiers;//[Offset: 0x10, Size: 0x10] 0x715ce97180

--------------------------------
Class: BadgeTriggerTier // 715ceca9c0
	float TriggerThreshold;//[Offset: 0x0, Size: 0x4] 0x715cef5f80
	GameplayTag BadgeId;//[Offset: 0x4, Size: 0x8] 0x715cef6000

--------------------------------
Class: HuntersTimedRespawnRule.HuntersRule.BARule.Object // 71a4b89200
	float RespawnTimerDuration;//[Offset: 0x34, Size: 0x4] 0x715cddc980
	float RespawnTimerDurationInOvertime;//[Offset: 0x38, Size: 0x4] 0x715cddca00
	bool PlayerCanRestart(PlayerController* Player);// 0x6a994f0 0x715cdcbbc0
	void OnRespawnTimerFired(HuntersPlayerState* HuntersPlayerState);// 0x6a99368 0x715cdcbca0
	void OnPlayerDied(HuntersPlayerState* Victim, HuntersPlayerState* Instigator);// 0x6a9940c 0x715cdcbd80
	void OnOvertimeStateChanged(const bool bIsEnteringOvertime);// 0x6a99590 0x715cdcbe60

--------------------------------
Class: HuntersTimerRespawnInterface.Interface.Object // 71a4b88f80
	void SetRemainingRespawnTime(out const BAReplicatedTimer RemainingRespawnTime);// 0x6a99a20 0x715cdcba00
	BAReplicatedTimer GetRemainingRespawnTime();// 0x6a99aec 0x715cdcbae0

--------------------------------
Class: WaveRespawnActorInterface.Interface.Object // 71a4b88a80

--------------------------------
Class: HuntersWaveRespawnInterface.Interface.Object // 71a4b88800
	void SetRemainingRespawnTime(out const BAReplicatedTimer RemainingRespawnTime);// 0x6a9a670 0x715cdcb760
	void OnTimerComplete();// 0x6a9a654 0x715cdcb840
	BAReplicatedTimer GetRemainingRespawnTime();// 0x6a9a73c 0x715cdcb920

--------------------------------
Class: HuntersWaveRespawnRule.HuntersRule.BARule.Object // 71a4b88580
	float RespawnTimerDuration;//[Offset: 0x34, Size: 0x4] 0x715cdde580
	float ExtraRespawnTimePerPlayer;//[Offset: 0x38, Size: 0x4] 0x715cdde600
	void OnRespawnTimerFired(HuntersSquadState* PlayerToRespawnId);// 0x6a9aee8 0x715cdcb5a0
	void OnPlayerDied(HuntersPlayerState* Victim, HuntersPlayerState* Instigator);// 0x6a9af8c 0x715cdcb680

--------------------------------
Class: HuntersWorldSettings.WorldSettings.Info.Actor.Object // 71a4b88300
	enum StartingBiome;//[Offset: 0x3b0, Size: 0x1] 0x715cda4de0
	bool bLoadIntroAndResultLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 0x1] 0x715cdde300
	Vector IntroResultsLocationOffset;//[Offset: 0x3b4, Size: 0xc] 0x715cdde380
	Rotator IntroResultsRotationOffset;//[Offset: 0x3c0, Size: 0xc] 0x715cdde400
	MaterialInterface* PodiumBackgroundMaterial;//[Offset: 0x3d0, Size: 0x8] 0x715cdde480
	StaticMesh* PodiumSkiffModel;//[Offset: 0x3d8, Size: 0x8] 0x715cdde500

--------------------------------
Class: HuttBallPlayerStateInterface.Interface.Object // 71a4b88080
	int GetGoals();// 0x6a9b7b0 0x715cdcb140
	void AddOwnGoals(int Number);// 0x6a9b620 0x715cdcb220
	void AddOwnGoal();// 0x6a9b6cc 0x715cdcb300
	void AddGoals(int Number);// 0x6a9b6e8 0x715cdcb3e0
	void AddGoal();// 0x6a9b794 0x715cdcb4c0

--------------------------------
Class: TargetCondition_Squad.TargetScorerCondition.Object // 71a4b87900
	bool bSameSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715cdddc80

--------------------------------
Class: TDMPlayerStateInterface.Interface.Object // 71a4b87680
	int GetEliminations();// 0x6a9fd04 0x715cdcadc0
	void AddElimination();// 0x6a9fce8 0x715cdcaea0

--------------------------------
Class: AttributeAboveThresholdRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b87400
	GameplayAttribute CurrentAttributeClass;//[Offset: 0x28, Size: 0x38] 0x715cddda00
	GameplayAttribute MaxAttributeClass;//[Offset: 0x60, Size: 0x38] 0x715cddda80
	float Tolerance;//[Offset: 0x98, Size: 0x4] 0x715cdddb00
	bool bMustBeGreaterOrEqualTo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1] 0x715cdddb80

--------------------------------
Class: DirectionFromOriginRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b87180
	float Direction;//[Offset: 0x28, Size: 0x4] 0x715cddd880
	float Tolerance;//[Offset: 0x2c, Size: 0x4] 0x715cddd900
	bool bIgnoreZDifference;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x715cddd980

--------------------------------
Class: GameplayEffectVignetteColorData.DeveloperSettings.Object // 71a4b86f00
	GameplayTagToColor HealthChangedColor;//[Offset: 0x38, Size: 0x14] 0x715cddf780
	float LowHealthThreshold;//[Offset: 0x4c, Size: 0x4] 0x715cddd700
	<GameplayTag,GameplayTagToColor> GameplayTagToVignetteColor;//[Offset: 0x50, Size: 0x50] 0x715cd32200

--------------------------------
Class: GameplayTagToColor // 715ceca6c0
	int Priority;//[Offset: 0x0, Size: 0x4] 0x715cef5b00
	LinearColor Color;//[Offset: 0x4, Size: 0x10] 0x715cef5b80

--------------------------------
Class: GameplayEffectVolume.Volume.Brush.Actor.Object // 71a4b86c80
	class GameplayEffect[] Effects;//[Offset: 0x258, Size: 0x10] 0x715cda48e0
	class GameplayEffect[] EnemyEffects;//[Offset: 0x268, Size: 0x10] 0x715cda4a20
	class GameplayEffect[] FriendlyEffects;//[Offset: 0x278, Size: 0x10] 0x715cda4b60
	int TeamID;//[Offset: 0x288, Size: 0x4] 0x715cddf600
	Actor*[] DeferredOverlaps;//[Offset: 0x290, Size: 0x10] 0x715cda4c00
	Actor*[] CurrentOverlaps;//[Offset: 0x2a0, Size: 0x10] 0x715cda4ca0

--------------------------------
Class: GameplayEffectZoneActor.Actor.Object // 71a4b86a00
	GameplayEffectZoneComponent* GameplayEffectZoneComponent;//[Offset: 0x238, Size: 0x8] 0x715cddf280
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x240, Size: 0x8] 0x715cddf300
	bool bAssumeTeamIdOfInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x715cddf380
	bool bIsAbilitySystemComponentReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1] 0x715cddf400
	void SetGenericTeamId(out const GenericTeamId InTeamID);// 0x6ab3764 0x715cdce4e0
	GenericTeamId GetGenericTeamId();// 0x6ab3728 0x715cdce5c0
	AbilitySystemComponent* GetAbilitySystemComponent();// 0x6ab3824 0x715cdce6a0

--------------------------------
Class: GameplayEffectZoneComponent.ActorComponent.Object // 71a4b86780
	delegate OnActorEnteredZoneDelegate;//[Offset: 0xb8, Size: 0x10] 0x715d938000
	delegate OnActorLeftZoneDelegate;//[Offset: 0xc8, Size: 0x10] 0x715d938080
	GameplayEffectApplicationData[] EffectsToApply;//[Offset: 0xd8, Size: 0x10] 0x715d8934e0
	bool bRevalidateTargetsOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x715d938400
	bool bAssumeTeamIdOfOwningActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x715d936380
	float ToleratedOnTickRevalidationLatency;//[Offset: 0xec, Size: 0x4] 0x715d936400
	bool bRequireLineOfSightCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x715d936480
	byte LineOfSightTraceChannel;//[Offset: 0xf1, Size: 0x1] 0x715d936500
	byte[] LineOfSightBlockingChannels;//[Offset: 0xf8, Size: 0x10] 0x715d893440
	bool bApplyMaximumToleratedImpactDotProduct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x715d936600
	float MaximumToleratedImpactDotProduct;//[Offset: 0x10c, Size: 0x4] 0x715d936680
	bool bUpdateCollidersToHaveNoCollisionOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x715d936700
	bool bSkipPredictionOfActorEnterAndExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1] 0x715d936780
	bool bUpdateCollidersToIgnoreFriendlyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1] 0x715d936800
	interface class None* EffectZoneController;//[Offset: 0x118, Size: 0x10] 0x715d936880
	PrimitiveComponent*[] Colliders;//[Offset: 0x130, Size: 0x10] 0x715d893580
	GameplayEffectSpecApplicationData[] PreCreatedEffects;//[Offset: 0x140, Size: 0x10] 0x715d893620
	<Actor*,int> ActorsCurrentlyOverlapping;//[Offset: 0x150, Size: 0x50] 0x714906ea40
	<Actor*> TargetsAlreadyEnteredInZone;//[Offset: 0x1a0, Size: 0x50] 0x715d893760
	void SetGenericTeamId(out const GenericTeamId InTeamID);// 0x6ab4550 0x715da12620
	void RefreshCachedEffectData(bool RunOnOverlapEndForOldEffects, bool RunOnOverlapBeginForNewEffects);// 0x6ab4454 0x715da12700
	void OnOverlapEnd(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x6ab408c 0x715da127e0
	void OnOverlapBegin(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6ab41f8 0x715da128c0
	void OnActorLeftZoneDelegate__DelegateSignature(const Actor* Actor);// 0x45c6aa0 0x715da129a0
	void OnActorEnteredZoneDelegate__DelegateSignature(const Actor* Actor);// 0x45c6aa0 0x715da12a80
	GenericTeamId GetGenericTeamId();// 0x6ab4418 0x715da12b60

--------------------------------
Class: GameplayEffectZoneController.Interface.Object // 71a4b86500
	bool IsGameplayEffectZoneTargetViable(GameplayEffectZoneComponent* GEZComponent, Actor* Target);// 0x6ab50e0 0x715cdcdfa0
	void GetGameplayEffectZoneColliders(GameplayEffectZoneComponent* GEZComponent, out PrimitiveComponent*[] Colliders);// 0x6ab51d8 0x715cdce080
	Vector GetEffectZoneOriginLocation(GameplayEffectZoneComponent* GEZComponent);// 0x6ab52e8 0x715cdce160
	Object* GetEffectSourceObject(GameplayEffectZoneComponent* GEZComponent);// 0x6ab502c 0x715cdce240
	Actor* GetEffectInstigator(GameplayEffectZoneComponent* GEZComponent);// 0x6ab4f78 0x715cdce320
	Actor* GetEffectCauser(GameplayEffectZoneComponent* GEZComponent);// 0x6ab4ec4 0x715cdce400

--------------------------------
Class: HasHealthAttributeRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b86280

--------------------------------
Class: HasTagRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b86000
	bool DoesHaveTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x715cddeb00
	GameplayTag TagToCheck;//[Offset: 0x2c, Size: 0x8] 0x715cddeb80

--------------------------------
Class: IsAliveRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b85d80

--------------------------------
Class: IsNotDeadRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b85b00

--------------------------------
Class: IsXPAccumulationUnblocked.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b85880

--------------------------------
Class: NotAtMaxArmorRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b85600

--------------------------------
Class: NotAtMaxHealthRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b85380

--------------------------------
Class: NotAtMaxXPRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b8f600

--------------------------------
Class: NotSelfRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b8f380

--------------------------------
Class: TeamAttitudeAbilityRequirement.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b8f100
	byte[] AttitudeRequirements;//[Offset: 0x28, Size: 0x10] 0x715cda4700
	bool CanApplyToSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x715cddea00
	GameplayTagContainer GameplayTagOverrides;//[Offset: 0x40, Size: 0x20] 0x715cddea80

--------------------------------
Class: Trap.Actor.Object // 71a4b8ee80
	enum CurrentState;//[Offset: 0x230, Size: 0x1] 0x715cda4520
	enum NamedHazardType;//[Offset: 0x231, Size: 0x1] 0x715cda45c0
	bool bShowReplayFromTrapPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 0x1] 0x715cdde880
	void OnRep_CurrentState(enum OldState);// 0x6ab9c2c 0x715cdcdd00
	void OnDeactivate();// 0x45c6aa0 0x715cdcdde0
	void OnActivate();// 0x45c6aa0 0x715cdcdec0

--------------------------------
Class: TrapTrigger.Actor.Object // 71a4b8ec00
	bool IsInstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x715cddff00
	Trap*[] Traps;//[Offset: 0x228, Size: 0x10] 0x715cda4480
	void TriggerRPC();// 0x6aba614 0x715cdcd980
	void Trigger();// 0x6aba63c 0x715cdcda60
	void DisableTrapRPC();// 0x6aba600 0x715cdcdb40
	void DisableTrap();// 0x6aba628 0x715cdcdc20

--------------------------------
Class: ViralGameplayEffectExecution.GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object // 71a4b8e980

--------------------------------
Class: DeployableIndicatorViewModel.ScreenClampedIndicatorViewModel.SDListenerViewModel.SDViewModel.Object // 71a4b8e700

--------------------------------
Class: GrenadeIndicatorViewModel.DeployableIndicatorViewModel.ScreenClampedIndicatorViewModel.SDListenerViewModel.SDViewModel.Object // 71a4b8e480

--------------------------------
Class: GrenadeIndicatorWidget.ScreenClampedIndicatorWidget.SDUserWidget.UserWidget.Widget.Visual.Object // 71a4b8e200
	WidgetAnimation* DestroyedAnimation;//[Offset: 0x270, Size: 0x8] 0x715cddfe80

--------------------------------
Class: GrenadeWidgetComponent.ScreenClampedWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object // 71a4b8df80

--------------------------------
Class: HuntersGrenadeProjectile.HuntersProjectile.Actor.Object // 71a4b8d800
	RadialGameplayEffectData[] RadialGameplayEffects;//[Offset: 0x448, Size: 0x10] 0x715cda4160
	float MinImpactDotToTrigger;//[Offset: 0x458, Size: 0x4] 0x715cde3c00
	CurveTableRowHandle MinImpactDotToTriggerHandle;//[Offset: 0x460, Size: 0x10] 0x715cde3c80
	float MaxSpeedToTrigger;//[Offset: 0x470, Size: 0x4] 0x715cde3d00
	CurveTableRowHandle MaxSpeedToTriggerHandle;//[Offset: 0x478, Size: 0x10] 0x715cde3d80
	float MaxRadiusMultiplierToShowIndicator;//[Offset: 0x488, Size: 0x4] 0x715cde3e00
	float FuseDelay;//[Offset: 0x48c, Size: 0x4] 0x715cde3e80
	CurveTableRowHandle FuseDelayHandle;//[Offset: 0x490, Size: 0x10] 0x715cde3f00
	RadialGameplayEffectDataHandle[] PreCachedRadialGameplayEffectSpecs;//[Offset: 0x4a0, Size: 0x10] 0x715cda4200
	PlayerState* CachedOwnerPlayerState;//[Offset: 0x4c0, Size: 0x8] 0x715cde4000
	bool bExplodeOnDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1] 0x715cde4080
	bool bDestoryOnExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 0x1] 0x715cde4100
	GrenadeWidgetComponent* ScreenClampedWidgetComponent;//[Offset: 0x4d0, Size: 0x8] 0x715cde4180
	BAReplicatedTimer FuseTimer;//[Offset: 0x4d8, Size: 0x10] 0x715cde4200
	bool bPrimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e8, Size: 0x1] 0x715cde2180
	void Prime();// 0x6ae3788 0x715cdf1740
	void OnRep_Primed();// 0x6ae35d4 0x715cdf1820
	void OnPrimed();// 0x45c6aa0 0x715cdf1900
	void OnExplodeServer();// 0x45c6aa0 0x715cdf19e0
	void OnExplodeClient();// 0x45c6aa0 0x715cdf1ac0
	float GetMaxRadius();// 0x6ae3610 0x715cdf1ba0
	void Explode();// 0x6ae35e8 0x715cdf1c80
	void CheckFuse();// 0x6ae35fc 0x715cdce780
	void ApplyExplosionGameplayEffects(const byte[] BlockingChannels, byte ChannelToTraceAs);// 0x6ae364c 0x715cdce860

--------------------------------
Class: HuntersStickyBombProjectile.HuntersGrenadeProjectile.HuntersProjectile.Actor.Object // 71a4b8da80
	Vector LineOfSightCheckActorLocationOffset;//[Offset: 0x4ec, Size: 0xc] 0x715cde4b00
	CurveTableRowHandle ProximityActivationDelayHandle;//[Offset: 0x4f8, Size: 0x10] 0x715cde4b80
	CurveTableRowHandle ProximityActivationAngleHandle;//[Offset: 0x508, Size: 0x10] 0x715cde4c00
	bool bCheckLineOfSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1] 0x715cde4c80
	CurveTableRowHandle LifeSpanHandle;//[Offset: 0x520, Size: 0x10] 0x715cde4d00
	byte[] LineOfSightBlockingChannels;//[Offset: 0x530, Size: 0x10] 0x715cda3e40
	bool bCollideWithDynamicObjectsOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1] 0x715cde4e00
	enum CharacterImpactBehaviour;//[Offset: 0x541, Size: 0x1] 0x715cda3ee0
	float InstantDropMaxDistance;//[Offset: 0x544, Size: 0x4] 0x715cde4f00
	bool ShouldApplyEffectsOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1] 0x715cde4f80
	bool ShouldAirbornTriggerProximity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 0x1] 0x715cde5000
	float SurfaceVerticalMinDotToStickTo;//[Offset: 0x54c, Size: 0x4] 0x715cde5080
	StickInfo StickInfo;//[Offset: 0x550, Size: 0x1c] 0x715cde5100
	Character*[] PendingOverlappingActors;//[Offset: 0x5d8, Size: 0x10] 0x715cda3f80
	void SetupProximityTrigger();// 0x6aeae78 0x715cdf0a20
	void PostBeginPlay();// 0x45c6aa0 0x715cdf0b00
	void OnStickCosmetic(out const Vector ImpactPoint, out const Vector ImpactNormal);// 0x45c6aa0 0x715cdf0be0
	void OnStick(out const Vector ImpactPoint, out const Vector ImpactNormal);// 0x45c6aa0 0x715cdf0cc0
	void OnRep_Stuck();// 0x6aea968 0x715cdf0da0
	void OnProximityEndOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x6aea97c 0x715cdf0e80
	void OnProximityBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6aeaae8 0x715cdf0f60
	void OnProximityActivatedCosmetic();// 0x45c6aa0 0x715cdf1040
	void OnPlayerRemovedFromGame(HuntersPlayerState* RemovedPlayerState);// 0x6aea8c4 0x715cdf1120
	void OnHitpointsDepleted();// 0x45c6aa0 0x715cdf1200
	void OnAttachmentReplicated();// 0x45c6aa0 0x715cdf12e0
	bool IsLineOfSightBlocked(Actor* Actor);// 0x6aeadc8 0x715cdf13c0
	ShapeComponent* GetProximityComponent();// 0x45c6aa0 0x715cdf14a0
	void GetComponentsInExplosionRange(out PrimitiveComponent*[] OutComponentsInRange);// 0x6aead08 0x715cdf1580
	void ApplyAngleExplosionGameplayEffects(const byte[] BlockingChannels, byte ChannelToTraceAs);// 0x6aeae8c 0x715cdf1660

--------------------------------
Class: StickInfo // 715ceca300
	Vector_NetQuantize ImpactPosition;//[Offset: 0x0, Size: 0xc] 0x715cef5500
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 0xc] 0x715cef5580
	bool bIsStuck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715cef5600

--------------------------------
Class: HuntersCableProjectile.HuntersStickyBombProjectile.HuntersGrenadeProjectile.HuntersProjectile.Actor.Object // 71a4b8dd00
	CableTarget CableTarget;//[Offset: 0x5f0, Size: 0x10] 0x715cde4a00
	void SetCableTargetWithNotify(Actor* Actor);// 0x6ae2978 0x715cdf0780
	void OnRep_CableTarget();// 0x45c6aa0 0x715cdf0860
	void ClearCableTarget();// 0x6ae2964 0x715cdf0940

--------------------------------
Class: CableTarget // 715ceca600
	Actor* Actor;//[Offset: 0x0, Size: 0x8] 0x715cef5a00
	bool bHasBeenSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x715cef5a80

--------------------------------
Class: HuntersPulseProjectile.HuntersProjectile.Actor.Object // 71a4b8ce00
	CurveFloat* ScaleUpOverDistanceCurve;//[Offset: 0x448, Size: 0x8] 0x715cde5a80
	Vector ScaleCoefficientAtMaxDistance;//[Offset: 0x450, Size: 0xc] 0x715cde5b00
	bool ShouldBeDestoryedOnFirstActorOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1] 0x715cde5b80
	void OnOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6ae8f5c 0x715cdf05c0

--------------------------------
Class: HuntersRockAndRollProjectile.HuntersProjectile.Actor.Object // 71a4b8cb80
	RockAndRollEffects[] Effects;//[Offset: 0x450, Size: 0x10] 0x715cda6640
	float TimeBetweenHits;//[Offset: 0x460, Size: 0x4] 0x715cde5800
	float ExplosionRadius;//[Offset: 0x4b8, Size: 0x4] 0x715cde5880
	float ExplosionVelocityThreshold;//[Offset: 0x4bc, Size: 0x4] 0x715cde5900
	void OnHitTargetClient();// 0x45c6aa0 0x715cdf0400
	bool IsOverlappingValidActor(Actor* OtherActor);// 0x45c6aa0 0x715cdf04e0

--------------------------------
Class: RockAndRollEffects // 715ceca3c0
	class GameplayEffect* Effect;//[Offset: 0x0, Size: 0x8] 0x715ce97040
	bool AppliedOnlyOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x715cef5680
	GameplayEffectSpecHandle PreCreatedSpecHandle;//[Offset: 0x10, Size: 0x10] 0x715cef5700

--------------------------------
Class: HuntersRockThrowProjectile.HuntersProjectile.Actor.Object // 71a4b8c900

--------------------------------
Class: ProjectileDecalDefinition.Object // 71a4b8c180
	ProjectileDecalTypeDefinition TypeDefinition;//[Offset: 0x28, Size: 0x8] 0x715cde5400

--------------------------------
Class: ProjectileDecalTypeDefinition // 715ceca180
	class HuntersProjectileDecal* Decal;//[Offset: 0x0, Size: 0x8] 0x715ce96f00

--------------------------------
Class: ProjectileDecalSpawningFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4b8ba00
	static HuntersProjectileDecal* SpawnProjectileDecalWithConfig(interface classNone ProjectileDecalSpawningInterface, ProjectileDecalSpawnConfig SpawnConfig);// 0x6aeed1c 0x715cdf0240

--------------------------------
Class: ProjectileDecalSpawningInterface.Interface.Object // 71a4b8b780

--------------------------------
Class: ProjectilePoolingWorldSubsystem.WorldSubsystem.Subsystem.Object // 71a4b8ad80
	ProjectileMeshPoolManager* ProjectileMeshPoolManager;//[Offset: 0x30, Size: 0x8] 0x715cde6d00
	ProjectileMeshPoolManager* ReplayProjectileMeshPoolManager;//[Offset: 0x38, Size: 0x8] 0x715cde6d80
	ProjectileActorPoolManager* ProjectileActorPoolManager;//[Offset: 0x40, Size: 0x8] 0x715cde6e00
	ProjectileActorPoolManager* ReplayProjectileActorPoolManager;//[Offset: 0x48, Size: 0x8] 0x715cde6e80
	ProjectileDecalPoolManager* ProjectileDecalPoolManager;//[Offset: 0x50, Size: 0x8] 0x715cde6f00
	ProjectileDecalPoolManager* ReplayProjectileDecalPoolManager;//[Offset: 0x58, Size: 0x8] 0x715cde6f80
	LevelStreamingDynamic* StreamingLevel;//[Offset: 0x68, Size: 0x8] 0x715cde7000
	void OnDynamicLevelLoaded();// 0x6af158c 0x715cdf0160

--------------------------------
Class: ProjectileSpawningFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4b8a880
	static HuntersProjectile* SpawnProjectileWithConfig(Object* TrackingContext, interface classNone ProjectileSpawningInterface, class ProjectileDefinition ProjectileDefinition, ProjectileSpawnConfig SpawnConfig, HuntersGameplayAbility* GameplayAbility);// 0x6af352c 0x715cdf36c0
	static HuntersProjectile* SpawnProjectile(Object* TrackingContext, interface classNone ProjectileSpawningInterface, class ProjectileDefinition ProjectileDefinition, Vector Position, Vector Direction, HuntersGameplayAbility* GameplayAbility);// 0x6af3730 0x715cdf37a0
	static float GetHealthModificationAmount(CurveTableRowHandle InBaseDamageHandle, CurveFloat* Curve, const float Dist);// 0x6af3400 0x715cdf3880

--------------------------------
Class: ProjectileSpawningInterface.Interface.Object // 71a4b8a600

--------------------------------
Class: AbilityTask_WaitForEquipmentItemEquipStatusChange.AbilityTask.GameplayTask.Object // 71a4b8fd80
	delegate OnItemEquipped;//[Offset: 0x78, Size: 0x10] 0x715cde7d00
	delegate OnItemUnEquipped;//[Offset: 0x88, Size: 0x10] 0x715cde7d80
	delegate OnFailure;//[Offset: 0x98, Size: 0x10] 0x715cde7e00
	static AbilityTask_WaitForEquipmentItemEquipStatusChange* WaitForEquipmentItemEquipStatusChange(GameplayAbility* OwningAbility, const GameplayTag ItemTag);// 0x6b22728 0x715cdf35e0

--------------------------------
Class: AbilityTask_WaitForShotsFired.AbilityTask.GameplayTask.Object // 71a4b8fb00
	delegate OnAllShotsFired;//[Offset: 0x78, Size: 0x10] 0x715cde7800
	delegate OnShotFired;//[Offset: 0x88, Size: 0x10] 0x715cde7880
	delegate OnShotServerReplicated;//[Offset: 0x98, Size: 0x10] 0x715cde7900
	delegate OnFailure;//[Offset: 0xa8, Size: 0x10] 0x715cde7980
	delegate OnTimeout;//[Offset: 0xb8, Size: 0x10] 0x715cde7a00
	static AbilityTask_WaitForShotsFired* WaitForShotsFired(GameplayAbility* OwningAbility, int NumberOfShots, float Timeout);// 0x6b22fe4 0x715cdf3420
	int GetNumShotsFiredServerConfirmed();// 0x6b22fb0 0x715cdf3500

--------------------------------
Class: CanBeHealed.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b95100

--------------------------------
Class: CharacterEquipmentFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4b94e80
	static void UnEquip(const interface classNone CharacterEquipmentInterface, const GameplayTag ItemTag);// 0x6b24844 0x715cdf3180
	static Transform[] GetAllSocketsForTag(const interface classNone CharacterEquipmentInterface, const GameplayTag SocketTag);// 0x6b246f0 0x715cdf3260
	static void Equip(const interface classNone CharacterEquipmentInterface, const GameplayTag ItemTag);// 0x6b2493c 0x715cdf3340

--------------------------------
Class: CharacterEquipmentInterface.Interface.Object // 71a4b94980
	float GetMaxFiringDistance(out const GameplayTag EquipmentTag);// 0x6b25d34 0x715cdf27e0
	SceneComponent* GetEquipmentAttachmentComponent();// 0x6b25df8 0x715cdf28c0
	CharacterEquipmentComponent* GetCharacterEquipmentComponent();// 0x6b25e34 0x715cdf29a0

--------------------------------
Class: EquipmentNotAtMaxLevel.HuntersAbilityRequirementBase.GameplayEffectCustomApplicationRequirement.Object // 71a4b94700

--------------------------------
Class: HuntersBurstWeaponEquipmentItem.HuntersWeaponEquipmentItem.HuntersEquipmentItem.Actor.Object // 71a4b93f80
	GameplayTag BurstStartAnimationTag;//[Offset: 0x534, Size: 0x8] 0x715cdea400
	void OnStartedBurstFire();// 0x45c6aa0 0x715cdf20e0
	void OnEndedBurstFire();// 0x45c6aa0 0x715cdf21c0
	float GetBurstRate();// 0x6b29778 0x715cdf22a0

--------------------------------
Class: HuntersAutonomousBurstWeaponEquipmentItem.HuntersBurstWeaponEquipmentItem.HuntersWeaponEquipmentItem.HuntersEquipmentItem.Actor.Object // 71a4b94200
	HuntersGameplayAbility* OwningAbility;//[Offset: 0x578, Size: 0x8] 0x715cdea180
	Actor* CurrentTarget;//[Offset: 0x580, Size: 0x8] 0x715cdea200
	void SetOwningAbility(HuntersGameplayAbility* InOwningAbility);// 0x6b27e00 0x715cdf5480
	void Server_SetCurrentTarget(Actor* Target);// 0x6b27ed4 0x715cdf5560
	void Server_ClearCurrentTarget();// 0x6b27eb8 0x715cdf5640
	Vector GetWeaponLookAtOffset();// 0x6b27dc8 0x715cdf1d60
	void FireSingleBurst();// 0x6b27ea4 0x715cdf1e40
	void EnableWeapon();// 0x6b27f94 0x715cdf1f20
	void DisableWeapon();// 0x6b27f80 0x715cdf2000

--------------------------------
Class: HuntersBeamWeaponEquipmentItem.HuntersWeaponEquipmentItem.HuntersEquipmentItem.Actor.Object // 71a4b93800
	DamageEffectApplicationData DamageEffect;//[Offset: 0x538, Size: 0xb0] 0x715cde9e80
	class GameplayEffect[] BeamEffects;//[Offset: 0x5e8, Size: 0x10] 0x715cda5ba0
	ShapeComponent* CurrentTargetComponent;//[Offset: 0x628, Size: 0x8] 0x715cde9f00
	void Server_SetCurrentTarget(ShapeComponent* TargetComponent);// 0x6b28b34 0x715cdf4f40
	void OnRep_CurrentTarget();// 0x6b2899c 0x715cdf5020
	DamageEffectApplicationData GetDamageEffect();// 0x6b289b0 0x715cdf5100
	ShapeComponent* GetCurrentTargetComponent();// 0x6b28b18 0x715cdf51e0
	void BeamStoppedFiring();// 0x45c6aa0 0x715cdf52c0
	void BeamStartedFiring(ShapeComponent* AtTargetComponent);// 0x45c6aa0 0x715cdf53a0

--------------------------------
Class: DamageEffectApplicationData // 715cec9b80
	class GameplayEffect* Effect;//[Offset: 0x0, Size: 0x8] 0x715ce96dc0
	<GameplayTag,float> SetByCallerTags;//[Offset: 0x8, Size: 0x50] 0x715cec9a00
	<GameplayTag,CurveTableRowHandle> SetByCallerTagsWithHandles;//[Offset: 0x58, Size: 0x50] 0x715cec9ac0
	GameplayTag DamageType;//[Offset: 0xa8, Size: 0x8] 0x715cef6980

--------------------------------
Class: HuntersContinuousBeamWeaponEquipmentItem.HuntersWeaponEquipmentItem.HuntersEquipmentItem.Actor.Object // 71a4b93580
	DamageEffectApplicationData DamageEffect;//[Offset: 0x538, Size: 0xb0] 0x715cde9800
	class GameplayEffect[] BeamEffects;//[Offset: 0x5e8, Size: 0x10] 0x715cda5920
	byte[] StaticObjectTraceTypes;//[Offset: 0x5f8, Size: 0x10] 0x715cda59c0
	float MaxDistance;//[Offset: 0x608, Size: 0x4] 0x715cde9900
	bool bShouldIgnoreFriendlyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1] 0x715cde9980
	Vector LocalAimPoint;//[Offset: 0x610, Size: 0xc] 0x715cde9a00
	bool DrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1] 0x715cde9a80
	float LocalAimPointInterpSpeed;//[Offset: 0x620, Size: 0x4] 0x715cde9b00
	float MinTargetingDistance;//[Offset: 0x624, Size: 0x4] 0x715cde9b80
	HitResult[] BeamHits;//[Offset: 0x678, Size: 0x10] 0x715cda5a60
	void TickCosmetic();// 0x45c6aa0 0x715cdf4d80
	bool DoTrace(out const Vector StartTrace, out const Vector ShotDirection, out HitResult BlockingHit);// 0x6b29ec0 0x715cdf4e60

--------------------------------
Class: HuntersDroidCompanion.Actor.Object // 71a4b93300
	delegate OnTargetReached;//[Offset: 0x220, Size: 0x10] 0x715d938880
	delegate OnMovementBlocked;//[Offset: 0x230, Size: 0x10] 0x715d938900
	float MoveSpeed;//[Offset: 0x240, Size: 0x4] 0x715d938980
	float MinDistanceToTargetActor;//[Offset: 0x244, Size: 0x4] 0x715d938a00
	Vector TargetActorOffset;//[Offset: 0x248, Size: 0xc] 0x715d938a80
	FName AttachSocketName;//[Offset: 0x254, Size: 0x8] 0x715d938b00
	CurveFloat* MovementLerpCurve;//[Offset: 0x260, Size: 0x8] 0x715d938b80
	Character* OwningCharacter;//[Offset: 0x268, Size: 0x8] 0x715d938c00
	TargetData[] ActionQueue;//[Offset: 0x288, Size: 0x10] 0x715d892e00
	void TargetDataReachedDelegate__DelegateSignature();// 0x45c6aa0 0x715da14d80
	void StopDroid();// 0x6b2a948 0x715da14e60
	void SetTarget(Vector NewTargetLocation, Actor* TargetActor, bool bShouldStopOnCollision);// 0x6b2aa34 0x715da14f40
	void ReturnToOwner();// 0x6b2a964 0x715da15020
	void OnReturnedToOwner();// 0x45c6aa0 0x715da15100
	void OnLeaveOwner();// 0x45c6aa0 0x715da151e0
	void MulticastNewTarget(const TargetData NewTarget);// 0x6b2a978 0x715da152c0
	Vector GetDroidLocationFromOwner();// 0x45c6aa0 0x715da153a0

--------------------------------
Class: TargetData // 714906e380
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x715d938e80
	Actor* TargetActor;//[Offset: 0x10, Size: 0x8] 0x715d938f00
	bool bShouldStopOnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x715d938f80
	bool bIsReturningToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x715d939000

--------------------------------
Class: HuntersEquipmentFunctionLibrary.BlueprintFunctionLibrary.Object // 71a4b93080
	static void SortPlayerStateArrayByPawnDistanceFromPoint(out PlayerState*[] Array, Vector Position);// 0x6b2ba48 0x715cdf4ca0

--------------------------------
Class: HuntersParallelHitscanWeaponEquipmentItem.HuntersHitscanWeaponEquipmentItem.HuntersWeaponEquipmentItem.HuntersEquipmentItem.Actor.Object // 71a4b92900
	ParallelHitscanPattern[] TracePattern;//[Offset: 0x600, Size: 0x10] 0x715cda5740
	bool bOnlyDamageOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1] 0x715cdeb580
	void OnAllShotTracesComplete(Vector StartPoint, Vector EndPoint, Actor* FirstBlockingActor, Vector ImpactNormal);// 0x45c6aa0 0x715cdf4bc0

--------------------------------
Class: ParallelHitscanPattern // 715cec9880
	int Count;//[Offset: 0x0, Size: 0x4] 0x715cef6580
	float Offset;//[Offset: 0x4, Size: 0x4] 0x715cef6600

--------------------------------
Class: HuntersRecoilComponent.ActorComponent.Object // 71a4b92680
	Controller* OwnerController;//[Offset: 0xe8, Size: 0x8] 0x715cdeaf00
	float MinimumRecoilAngle;//[Offset: 0x100, Size: 0x4] 0x715cdeaf80
	float MaximumRecoilAngle;//[Offset: 0x104, Size: 0x4] 0x715cdeb000
	float MinimumRecoilDistance;//[Offset: 0x108, Size: 0x4] 0x715cdeb080
	float MaximumRecoilDistance;//[Offset: 0x10c, Size: 0x4] 0x715cdeb100
	float RecoilDuration;//[Offset: 0x110, Size: 0x4] 0x715cdeb180
	CurveFloat* RecoilCurve;//[Offset: 0x118, Size: 0x8] 0x715cdeb200
	CurveFloat* RecoveryCurve;//[Offset: 0x158, Size: 0x8] 0x715cdeb280
	float RecoveryDelay;//[Offset: 0x160, Size: 0x4] 0x715cdeb300
	float StartRecoveryCurveAngle;//[Offset: 0x164, Size: 0x4] 0x715cdeb380
	float MaxRecoverySpeed;//[Offset: 0x168, Size: 0x4] 0x715cdeb400
	float RecoveryCancelationThreshold;//[Offset: 0x16c, Size: 0x4] 0x715cdeb480
	void RecoveryTimer();// 0x6b3195c 0x715cdf4a00
	void Init();// 0x6b31948 0x715cdf4ae0

--------------------------------
Class: HuntersShotgunWeaponEquipmentItem.HuntersHitscanWeaponEquipmentItem.HuntersWeaponEquipmentItem.HuntersEquipmentItem.Actor.Object // 71a4b92400
	ShotgunPelletsPattern[] PelletsPattern;//[Offset: 0x600, Size: 0x10] 0x715cda56a0
	void OnShotgunFired();// 0x45c6aa0 0x715cdf4920

--------------------------------
Class: ShotgunPelletsPattern // 715cec9640
	float SpreadPercentage;//[Offset: 0x0, Size: 0x4] 0x715cef8300
	int PelletsCount;//[Offset: 0x4, Size: 0x4] 0x715cef8380
	float OffsetAngle;//[Offset: 0x8, Size: 0x4] 0x715cef8400

--------------------------------
Class: HuntersWeaponSpinUpAttributeSet.HuntersAttributeSet.AttributeSet.Object // 71a4b91f00
	GameplayAttributeData SpinUp;//[Offset: 0x30, Size: 0x28] 0x715cdeab80
	GameplayAttributeData SpinDown;//[Offset: 0x58, Size: 0x28] 0x715cdeac00
	void OnRep_SpinUp();// 0x6b36a60 0x715cdf4680
	void OnRep_SpinDown();// 0x6b36a4c 0x715cdf4760

--------------------------------
Class: MeleeAttackDamageSpecifier.Interface.Object // 71a4b91c80
	void SetDamageForMeleeAttack(GameplayTag AttackId, float AttackDamage);// 0x6b373c8 0x715cdf44c0
	bool FindDamageForMeleeAttack(GameplayTag AttackId, out float OutAttackDamage);// 0x6b374b8 0x715cdf45a0

--------------------------------
Class: WeaponAttributeSet.AttributeSet.Object // 71a4b91a00
	GameplayAttributeData Ammo;//[Offset: 0x30, Size: 0x28] 0x715cdec500
	GameplayAttributeData AmmoReduction;//[Offset: 0x58, Size: 0x28] 0x715cdec580
	GameplayAttributeData MaxAmmo;//[Offset: 0x80, Size: 0x28] 0x715cdec600
	GameplayAttributeData FireRate;//[Offset: 0xa8, Size: 0x28] 0x715cdea580
	GameplayAttributeData ReloadRate;//[Offset: 0xd0, Size: 0x28] 0x715cdea600
	GameplayAttributeData BurstCount;//[Offset: 0xf8, Size: 0x28] 0x715cdea680
	GameplayAttributeData BurstInterval;//[Offset: 0x120, Size: 0x28] 0x715cdea700
	GameplayAttributeData Spread;//[Offset: 0x148, Size: 0x28] 0x715cdea780
	GameplayAttributeData AimModeSpread;//[Offset: 0x170, Size: 0x28] 0x715cdea800
	GameplayAttributeData AutoFireDelay;//[Offset: 0x198, Size: 0x28] 0x715cdea880
	void OnRep_Spread();// 0x6b37fc4 0x715cdf3c00
	void OnRep_ReloadRate();// 0x6b38000 0x715cdf3ce0
	void OnRep_MaxAmmo();// 0x6b38028 0x715cdf3dc0
	void OnRep_FireRate();// 0x6b38014 0x715cdf3ea0
	void OnRep_BurstInterval();// 0x6b37fd8 0x715cdf3f80
	void OnRep_BurstCount();// 0x6b37fec 0x715cdf4060
	void OnRep_AutoFireDelay();// 0x6b37f9c 0x715cdf4140
	void OnRep_AmmoReduction();// 0x6b3803c 0x715cdf4220
	void OnRep_Ammo();// 0x6b38050 0x715cdf4300
	void OnRep_AimModeSpread();// 0x6b37fb0 0x715cdf43e0

--------------------------------
Class: BPC_Hunters_Audio_Master_Switch_C.SceneComponent.ActorComponent.Object // 715c5ca180
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1f0, Size: 0x8] 0x715e3c6f80
	void ReceiveBeginPlay();// 0x45c6aa0 0x715c036980
	void ExecuteUbergraph_BPC_Hunters_Audio_Master_Switch(int EntryPoint, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x45c6aa0 0x715c0399a0

--------------------------------
Class: BP_HuntersGameState_C.HuntersGameState.BAGameStateBase.GameStateBase.Info.Actor.Object // 715c5cb680
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x720, Size: 0x8] 0x715e3c6700
	BPC_Hunters_Audio_Master_Switch_C* BPC_Hunters_Audio_Master_Switch;//[Offset: 0x728, Size: 0x8] 0x715e3c6680
	AkComponent* PersistentAudioComponent;//[Offset: 0x730, Size: 0x8] 0x715e3c6600
	bool Print Debug Info?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 0x1] 0x715e3c6580
	float Max Distance;//[Offset: 0x73c, Size: 0x4] 0x715e3c6500
	delegate AbilityReady;//[Offset: 0x740, Size: 0x10] 0x715e3c6480
	delegate AbilityTriggered;//[Offset: 0x750, Size: 0x10] 0x715e3c6400
	WBP_ReplayTransitionHud_C* KillcamReplayHUD;//[Offset: 0x760, Size: 0x8] 0x715e3c6380
	bool AutoPickCharacterForPlayer(PlayerController* PlayerController, out MetaTuningDataKey OutCharacter, HuntersPlayerState* K2Node_DynamicCast_AsHunters_Player_State, bool K2Node_DynamicCast_bSuccess);// 0x45c6aa0 0x715c03da60
	void SetOutlinePostProcess(bool SetEnabled, PlayerController* CallFunc_GetPlayerController_ReturnValue);// 0x45c6aa0 0x715c03db40
	void ReceiveBeginPlay();// 0x45c6aa0 0x715c03dc20
	void OnPodiumStarted_Event();// 0x45c6aa0 0x715c03dd00
	void ReceiveEndPlay(byte EndPlayReason);// 0x45c6aa0 0x715c03dde0
	void OnEnterPodiumState();// 0x45c6aa0 0x715c03dec0
	void OnLeftPodiumState();// 0x45c6aa0 0x715c03dfa0
	void ExecuteUbergraph_BP_HuntersGameState(int EntryPoint, const AkExternalSourceInfo[] Temp_struct_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_Event_EndPlayReason, int CallFunc_PostAkEvent_ReturnValue);// 0x45c6aa0 0x715c03e080
	void AbilityTriggered__DelegateSignature();// 0x45c6aa0 0x715c03e240
	void AbilityReady__DelegateSignature();// 0x45c6aa0 0x715c03a960

--------------------------------
Class: WBP_ReplayTransitionHud_C.SDUIScreen.SDUIScene.SDUserWidget.UserWidget.Widget.Visual.Object // 714b15f040
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x268, Size: 0x8] 0x715e3cb900
	WidgetAnimation* FadeOut;//[Offset: 0x270, Size: 0x8] 0x715e3cb880
	WidgetAnimation* FadeToBlack;//[Offset: 0x278, Size: 0x8] 0x715e3cb800
	Image* Fade;//[Offset: 0x280, Size: 0x8] 0x715e3cb780
	float BlackScreenTimeoutSeconds;//[Offset: 0x288, Size: 0x4] 0x715e3cb700
	float BlackScreenCounter;//[Offset: 0x28c, Size: 0x4] 0x715e3cb680
	bool IsScreenBlack(float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x45c6aa0 0x715c03a0a0
	bool IsFadingToBlack(bool CallFunc_IsAnimationPlaying_ReturnValue, bool CallFunc_IsAnimationPlayingForward_ReturnValue);// 0x45c6aa0 0x715c03a180
	bool IsFadingOrBlack(bool CallFunc_IsScreenBlack_ReturnValue, bool CallFunc_IsFadingToBlack_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x45c6aa0 0x715c03a260
	void ClearScreen();// 0x45c6aa0 0x715c03a340
	void PlayFadeAnimation(byte PlayMode, out WidgetAnimation* Animation, float StartPosition, float CallFunc_GetStartTime_ReturnValue, float CallFunc_GetAnimationCurrentTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_IsAnimationPlaying_ReturnValue);// 0x45c6aa0 0x715c03a420
	float GetSafeFadeInAnimationLength(bool CallFunc_IsValid_ReturnValue, float CallFunc_GetStartTime_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue);// 0x45c6aa0 0x715c03a500
	void Construct();// 0x45c6aa0 0x715c03a6c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x45c6aa0 0x715c03a880
	void ExecuteUbergraph_WBP_ReplayTransitionHud(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsScreenBlack_ReturnValue, BP_HuntersGameState_C* K2Node_DynamicCast_AsBP_Hunters_Game_State, bool K2Node_DynamicCast_bSuccess, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x45c6aa0 0x715c0374e0

--------------------------------
Class: BP_HuntersGameInstance_C.HuntersGameInstance.GameInstance.Object // 715c5c9700

--------------------------------
Class: BP_ClientStatusHandler_C.HuntersClientStatusHandler.Object // 715c5c7e80
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x28, Size: 0x8] 0x715e3c7a00
	void SetFrontendMusic(enum Screen, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, enum K2Node_Select_Default, HuntersGameInstance* K2Node_DynamicCast_AsHunters_Game_Instance, bool K2Node_DynamicCast_bSuccess, HuntersMusicManager* CallFunc_GetMusicManager_ReturnValue);// 0x45c6aa0 0x715c03f820
	void OnEnteredFrontendScreen(enum Screen);// 0x45c6aa0 0x715c03f9e0
	void ExecuteUbergraph_BP_ClientStatusHandler(int EntryPoint, enum K2Node_Event_Screen);// 0x45c6aa0 0x715c03fba0

--------------------------------
Class: BP_HuntersMusicManager_C.HuntersMusicManager.Object // 715c5caf80
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x40, Size: 0x8] 0x715e3cdd00
	<enum,AkStateValue*> Generic States;//[Offset: 0x48, Size: 0x50] 0x715c069e80
	<enum,AkStateValue*> Tatooine States;//[Offset: 0x98, Size: 0x50] 0x715c06be00
	<enum,AkStateValue*> Endor States;//[Offset: 0xe8, Size: 0x50] 0x715c06afc0
	<enum,AkStateValue*> Hoth States;//[Offset: 0x138, Size: 0x50] 0x715c06b380
	<enum,AkStateValue*> Huttball States;//[Offset: 0x188, Size: 0x50] 0x715c06a000
	<enum,AkStateValue*> TDM States;//[Offset: 0x1d8, Size: 0x50] 0x715c069b80
	enum PreviousMusicState;//[Offset: 0x228, Size: 0x1] 0x714b186e60
	void SendLoadingEvents(enum MusicState, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue);// 0x45c6aa0 0x715c03fd60
	void SetStateGroup(enum Biome, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x45c6aa0 0x715c03fe40
	void GetCurrentBiome(out enum CurrentBiome, World* CallFunc_GetWorld_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_HuntersGameState_C* K2Node_DynamicCast_AsBP_Hunters_Game_State, bool K2Node_DynamicCast_bSuccess);// 0x45c6aa0 0x715c03ff20
	void SetMatchMusicState(enum Event, enum Biome, enum Temp_byte_Variable, enum CallFunc_GetCurrentBiome_CurrentBiome, <enum,AkStateValue*> K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, AkStateValue* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x45c6aa0 0x715c03cd40
	void SetMusicState(enum MusicState);// 0x45c6aa0 0x715c03ce20
	void SetCharacterState(AkStateValue* CharacterMusicAkState);// 0x45c6aa0 0x715c03cf00
	void ClearCombatMusicState();// 0x45c6aa0 0x715c03cfe0
	void SetCombatMusicStateBP(enum MusicState);// 0x45c6aa0 0x715c03d1a0
	void ExecuteUbergraph_BP_HuntersMusicManager(int EntryPoint, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, AkStateValue* Temp_object_Variable, enum K2Node_Event_MusicState, AkStateValue* K2Node_Event_CharacterMusicAkState, enum K2Node_Event_MusicState, AkStateValue* Temp_object_Variable, enum Temp_byte_Variable, AkStateValue* K2Node_Select_Default);// 0x45c6aa0 0x715c03d360

--------------------------------
Class: BP_MatchupMayhem_Ruleset_C.BARuleset.Object // 714aad3880
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc0, Size: 0x8] 0x714aaf8800
	void OnInitialized();// 0x45c6aa0 0x715c035d40
	void ExecuteUbergraph_BP_MatchupMayhem_Ruleset(int EntryPoint, BP_MatchupMayhemRule_C* CallFunc_AddRule_OutRuleInstance);// 0x45c6aa0 0x715c03c2c0

--------------------------------
Class: BP_MatchupMayhemRule_C.HuntersClassMakeupRule.HuntersRule.BARule.Object // 714aad3f80

--------------------------------
Class: BP_MatchupClash_VariantData_01_C.HuntersVariantGameData.DataAsset.Object // 714aad2700

--------------------------------
Class: BP_MatchupMayhem_VariantData_10_C.HuntersVariantGameData.DataAsset.Object // 714aad3180

--------------------------------
Class: BP_MatchupMayhem_VariantData_09_C.HuntersVariantGameData.DataAsset.Object // 714aad1200

--------------------------------
Class: BP_MatchupMayhem_VariantData_08_C.HuntersVariantGameData.DataAsset.Object // 714aad4a00

--------------------------------
Class: BP_MatchupMayhem_VariantData_07_C.HuntersVariantGameData.DataAsset.Object // 714aad1580

--------------------------------
Class: BP_MatchupMayhem_VariantData_06_C.HuntersVariantGameData.DataAsset.Object // 714aad2a80

--------------------------------
Class: BP_MatchupMayhem_VariantData_05_C.HuntersVariantGameData.DataAsset.Object // 714aad2e00

--------------------------------
Class: BP_MatchupMayhem_VariantData_04_C.HuntersVariantGameData.DataAsset.Object // 714aad0e80

--------------------------------
Class: BP_MatchupMayhem_VariantData_03_C.HuntersVariantGameData.DataAsset.Object // 714aad4300

--------------------------------
Class: BP_MatchupMayhem_VariantData_02_C.HuntersVariantGameData.DataAsset.Object // 714aad0b00

--------------------------------
Class: BP_MatchupMayhem_VariantData01_C.HuntersVariantGameData.DataAsset.Object // 714aad0400

--------------------------------
Class: Entry_C.LevelScriptActor.Actor.Object // 718542f200

--------------------------------
